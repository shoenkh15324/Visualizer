
visualizer_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014658  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb4  080147f8  080147f8  000247f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080156ac  080156ac  0003031c  2**0
                  CONTENTS
  4 .ARM          00000008  080156ac  080156ac  000256ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080156b4  080156b4  0003031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080156b4  080156b4  000256b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080156b8  080156b8  000256b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000031c  20000000  080156bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002890  2000031c  080159d8  0003031c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bac  080159d8  00032bac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003031c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dc72  00000000  00000000  0003038f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f5a  00000000  00000000  0004e001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a78  00000000  00000000  00053f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013b7  00000000  00000000  000559d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eabd  00000000  00000000  00056d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027cdf  00000000  00000000  0007584c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093654  00000000  00000000  0009d52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ce4  00000000  00000000  00130b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00138864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000031c 	.word	0x2000031c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080147e0 	.word	0x080147e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000320 	.word	0x20000320
 80001dc:	080147e0 	.word	0x080147e0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b9a6 	b.w	8000fbc <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f83c 	bl	8000cf4 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff33 	bl	8000afc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fca9 	bl	8000618 <__aeabi_dmul>
 8000cc6:	f7ff ff57 	bl	8000b78 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc2a 	bl	8000524 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fca0 	bl	8000618 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fae2 	bl	80002a8 <__aeabi_dsub>
 8000ce4:	f7ff ff48 	bl	8000b78 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9e08      	ldr	r6, [sp, #32]
 8000cfa:	460d      	mov	r5, r1
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	460f      	mov	r7, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14a      	bne.n	8000d9a <__udivmoddi4+0xa6>
 8000d04:	428a      	cmp	r2, r1
 8000d06:	4694      	mov	ip, r2
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0xe2>
 8000d0a:	fab2 f382 	clz	r3, r2
 8000d0e:	b143      	cbz	r3, 8000d22 <__udivmoddi4+0x2e>
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	f1c3 0220 	rsb	r2, r3, #32
 8000d18:	409f      	lsls	r7, r3
 8000d1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	409c      	lsls	r4, r3
 8000d22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d26:	fa1f f58c 	uxth.w	r5, ip
 8000d2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d2e:	0c22      	lsrs	r2, r4, #16
 8000d30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d38:	fb01 f005 	mul.w	r0, r1, r5
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	d90a      	bls.n	8000d56 <__udivmoddi4+0x62>
 8000d40:	eb1c 0202 	adds.w	r2, ip, r2
 8000d44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d48:	f080 811c 	bcs.w	8000f84 <__udivmoddi4+0x290>
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	f240 8119 	bls.w	8000f84 <__udivmoddi4+0x290>
 8000d52:	3902      	subs	r1, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	1a12      	subs	r2, r2, r0
 8000d58:	b2a4      	uxth	r4, r4
 8000d5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d66:	fb00 f505 	mul.w	r5, r0, r5
 8000d6a:	42a5      	cmp	r5, r4
 8000d6c:	d90a      	bls.n	8000d84 <__udivmoddi4+0x90>
 8000d6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x294>
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x294>
 8000d80:	4464      	add	r4, ip
 8000d82:	3802      	subs	r0, #2
 8000d84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	b11e      	cbz	r6, 8000d96 <__udivmoddi4+0xa2>
 8000d8e:	40dc      	lsrs	r4, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	e9c6 4300 	strd	r4, r3, [r6]
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0xbc>
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f000 80ed 	beq.w	8000f7e <__udivmoddi4+0x28a>
 8000da4:	2100      	movs	r1, #0
 8000da6:	e9c6 0500 	strd	r0, r5, [r6]
 8000daa:	4608      	mov	r0, r1
 8000dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db0:	fab3 f183 	clz	r1, r3
 8000db4:	2900      	cmp	r1, #0
 8000db6:	d149      	bne.n	8000e4c <__udivmoddi4+0x158>
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	d302      	bcc.n	8000dc2 <__udivmoddi4+0xce>
 8000dbc:	4282      	cmp	r2, r0
 8000dbe:	f200 80f8 	bhi.w	8000fb2 <__udivmoddi4+0x2be>
 8000dc2:	1a84      	subs	r4, r0, r2
 8000dc4:	eb65 0203 	sbc.w	r2, r5, r3
 8000dc8:	2001      	movs	r0, #1
 8000dca:	4617      	mov	r7, r2
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d0e2      	beq.n	8000d96 <__udivmoddi4+0xa2>
 8000dd0:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd4:	e7df      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000dd6:	b902      	cbnz	r2, 8000dda <__udivmoddi4+0xe6>
 8000dd8:	deff      	udf	#255	; 0xff
 8000dda:	fab2 f382 	clz	r3, r2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8090 	bne.w	8000f04 <__udivmoddi4+0x210>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	2101      	movs	r1, #1
 8000df0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df4:	fb07 2015 	mls	r0, r7, r5, r2
 8000df8:	0c22      	lsrs	r2, r4, #16
 8000dfa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dfe:	fb0e f005 	mul.w	r0, lr, r5
 8000e02:	4290      	cmp	r0, r2
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x124>
 8000e06:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x122>
 8000e10:	4290      	cmp	r0, r2
 8000e12:	f200 80cb 	bhi.w	8000fac <__udivmoddi4+0x2b8>
 8000e16:	4645      	mov	r5, r8
 8000e18:	1a12      	subs	r2, r2, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e20:	fb07 2210 	mls	r2, r7, r0, r2
 8000e24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e28:	fb0e fe00 	mul.w	lr, lr, r0
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x14e>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x14c>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f200 80bb 	bhi.w	8000fb6 <__udivmoddi4+0x2c2>
 8000e40:	4610      	mov	r0, r2
 8000e42:	eba4 040e 	sub.w	r4, r4, lr
 8000e46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4a:	e79f      	b.n	8000d8c <__udivmoddi4+0x98>
 8000e4c:	f1c1 0720 	rsb	r7, r1, #32
 8000e50:	408b      	lsls	r3, r1
 8000e52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e62:	40fd      	lsrs	r5, r7
 8000e64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e68:	4323      	orrs	r3, r4
 8000e6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	fb09 5518 	mls	r5, r9, r8, r5
 8000e76:	0c1c      	lsrs	r4, r3, #16
 8000e78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e80:	42a5      	cmp	r5, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8a:	d90b      	bls.n	8000ea4 <__udivmoddi4+0x1b0>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e94:	f080 8088 	bcs.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e98:	42a5      	cmp	r5, r4
 8000e9a:	f240 8085 	bls.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea2:	4464      	add	r4, ip
 8000ea4:	1b64      	subs	r4, r4, r5
 8000ea6:	b29d      	uxth	r5, r3
 8000ea8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eac:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x1da>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec4:	d26c      	bcs.n	8000fa0 <__udivmoddi4+0x2ac>
 8000ec6:	45a6      	cmp	lr, r4
 8000ec8:	d96a      	bls.n	8000fa0 <__udivmoddi4+0x2ac>
 8000eca:	3b02      	subs	r3, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ed6:	eba4 040e 	sub.w	r4, r4, lr
 8000eda:	42ac      	cmp	r4, r5
 8000edc:	46c8      	mov	r8, r9
 8000ede:	46ae      	mov	lr, r5
 8000ee0:	d356      	bcc.n	8000f90 <__udivmoddi4+0x29c>
 8000ee2:	d053      	beq.n	8000f8c <__udivmoddi4+0x298>
 8000ee4:	b156      	cbz	r6, 8000efc <__udivmoddi4+0x208>
 8000ee6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eea:	eb64 040e 	sbc.w	r4, r4, lr
 8000eee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef2:	40ca      	lsrs	r2, r1
 8000ef4:	40cc      	lsrs	r4, r1
 8000ef6:	4317      	orrs	r7, r2
 8000ef8:	e9c6 7400 	strd	r7, r4, [r6]
 8000efc:	4618      	mov	r0, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f04:	f1c3 0120 	rsb	r1, r3, #32
 8000f08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f10:	fa25 f101 	lsr.w	r1, r5, r1
 8000f14:	409d      	lsls	r5, r3
 8000f16:	432a      	orrs	r2, r5
 8000f18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f24:	fb07 1510 	mls	r5, r7, r0, r1
 8000f28:	0c11      	lsrs	r1, r2, #16
 8000f2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f32:	428d      	cmp	r5, r1
 8000f34:	fa04 f403 	lsl.w	r4, r4, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x258>
 8000f3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f42:	d22f      	bcs.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f44:	428d      	cmp	r5, r1
 8000f46:	d92d      	bls.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1b49      	subs	r1, r1, r5
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f54:	fb07 1115 	mls	r1, r7, r5, r1
 8000f58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f60:	4291      	cmp	r1, r2
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x282>
 8000f64:	eb1c 0202 	adds.w	r2, ip, r2
 8000f68:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f6c:	d216      	bcs.n	8000f9c <__udivmoddi4+0x2a8>
 8000f6e:	4291      	cmp	r1, r2
 8000f70:	d914      	bls.n	8000f9c <__udivmoddi4+0x2a8>
 8000f72:	3d02      	subs	r5, #2
 8000f74:	4462      	add	r2, ip
 8000f76:	1a52      	subs	r2, r2, r1
 8000f78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f7c:	e738      	b.n	8000df0 <__udivmoddi4+0xfc>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000f84:	4639      	mov	r1, r7
 8000f86:	e6e6      	b.n	8000d56 <__udivmoddi4+0x62>
 8000f88:	4610      	mov	r0, r2
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x90>
 8000f8c:	4548      	cmp	r0, r9
 8000f8e:	d2a9      	bcs.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f90:	ebb9 0802 	subs.w	r8, r9, r2
 8000f94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	e7a3      	b.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f9c:	4645      	mov	r5, r8
 8000f9e:	e7ea      	b.n	8000f76 <__udivmoddi4+0x282>
 8000fa0:	462b      	mov	r3, r5
 8000fa2:	e794      	b.n	8000ece <__udivmoddi4+0x1da>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	e7d1      	b.n	8000f4c <__udivmoddi4+0x258>
 8000fa8:	46d0      	mov	r8, sl
 8000faa:	e77b      	b.n	8000ea4 <__udivmoddi4+0x1b0>
 8000fac:	3d02      	subs	r5, #2
 8000fae:	4462      	add	r2, ip
 8000fb0:	e732      	b.n	8000e18 <__udivmoddi4+0x124>
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	e70a      	b.n	8000dcc <__udivmoddi4+0xd8>
 8000fb6:	4464      	add	r4, ip
 8000fb8:	3802      	subs	r0, #2
 8000fba:	e742      	b.n	8000e42 <__udivmoddi4+0x14e>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_DMA_Init+0x5c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a13      	ldr	r2, [pc, #76]	; (800101c <MX_DMA_Init+0x5c>)
 8000fd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_DMA_Init+0x5c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2039      	movs	r0, #57	; 0x39
 8000fe8:	f003 f905 	bl	80041f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000fec:	2039      	movs	r0, #57	; 0x39
 8000fee:	f003 f91e 	bl	800422e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	203b      	movs	r0, #59	; 0x3b
 8000ff8:	f003 f8fd 	bl	80041f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ffc:	203b      	movs	r0, #59	; 0x3b
 8000ffe:	f003 f916 	bl	800422e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2105      	movs	r1, #5
 8001006:	2045      	movs	r0, #69	; 0x45
 8001008:	f003 f8f5 	bl	80041f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800100c:	2045      	movs	r0, #69	; 0x45
 800100e:	f003 f90e 	bl	800422e <HAL_NVIC_EnableIRQ>

}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800

08001020 <flashInit>:
#ifdef _USE_HW_CLI
static void cliFlash(cli_args_t *args);
#endif

bool flashInit(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

#ifdef _USE_HW_CLI
	cliAdd("flash", cliFlash);
 8001024:	4903      	ldr	r1, [pc, #12]	; (8001034 <flashInit+0x14>)
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <flashInit+0x18>)
 8001028:	f001 fe2c 	bl	8002c84 <cliAdd>
#endif

	return true;
 800102c:	2301      	movs	r3, #1
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	080011ed 	.word	0x080011ed
 8001038:	080147f8 	.word	0x080147f8

0800103c <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	bool ret = false;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  uint16_t start_sector_num = -1;
 800104c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001050:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t sector_count = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	85bb      	strh	r3, [r7, #44]	; 0x2c

  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
 800105a:	e00f      	b.n	800107c <flashErase+0x40>
  {
  	if(flashInSector(i, addr, length) == true)
 800105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105e:	b29b      	uxth	r3, r3
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f869 	bl	800113c <flashInSector>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <flashErase+0x3a>
  	{
  		if(start_sector_num < 0)
  		{
  			start_sector_num = i;
  		}
  		sector_count++;
 8001070:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001072:	3301      	adds	r3, #1
 8001074:	85bb      	strh	r3, [r7, #44]	; 0x2c
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001078:	3301      	adds	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
 800107c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107e:	2b07      	cmp	r3, #7
 8001080:	ddec      	ble.n	800105c <flashErase+0x20>
  	}
  }

  if(sector_count > 0)
 8001082:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d01f      	beq.n	80010c8 <flashErase+0x8c>
  {
  	HAL_FLASH_Unlock();
 8001088:	f003 fcde 	bl	8004a48 <HAL_FLASH_Unlock>

    init.TypeErase   = FLASH_TYPEERASE_SECTORS;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
    init.Banks       = FLASH_BANK_1;
 8001090:	2301      	movs	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
    init.Sector      = start_sector_num;
 8001094:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001096:	61bb      	str	r3, [r7, #24]
    init.NbSectors   = sector_count;
 8001098:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800109a:	61fb      	str	r3, [r7, #28]
    init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800109c:	2302      	movs	r3, #2
 800109e:	623b      	str	r3, [r7, #32]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 80010a0:	f107 020c 	add.w	r2, r7, #12
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 fe3e 	bl	8004d2c <HAL_FLASHEx_Erase>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if(status == HAL_OK)
 80010b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <flashErase+0x88>
    {
    	ret = true;
 80010be:	2301      	movs	r3, #1
 80010c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    HAL_FLASH_Lock();
 80010c4:	f003 fce2 	bl	8004a8c <HAL_FLASH_Lock>
  }

  return ret;
 80010c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3730      	adds	r7, #48	; 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
	bool ret = true;
 80010e0:	2301      	movs	r3, #1
 80010e2:	77fb      	strb	r3, [r7, #31]
	HAL_StatusTypeDef status;

	HAL_FLASH_Unlock();
 80010e4:	f003 fcb0 	bl	8004a48 <HAL_FLASH_Unlock>

	for(int i=0; i<length; i++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	e01b      	b.n	8001126 <flashWrite+0x52>
	{
		uint16_t data;

		data = p_data[i+0] << 0;
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	4413      	add	r3, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	82fb      	strh	r3, [r7, #22]

		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint16_t)data);
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	18d1      	adds	r1, r2, r3
 80010fe:	8afb      	ldrh	r3, [r7, #22]
 8001100:	2200      	movs	r2, #0
 8001102:	461c      	mov	r4, r3
 8001104:	4615      	mov	r5, r2
 8001106:	4622      	mov	r2, r4
 8001108:	462b      	mov	r3, r5
 800110a:	2000      	movs	r0, #0
 800110c:	f003 fc48 	bl	80049a0 <HAL_FLASH_Program>
 8001110:	4603      	mov	r3, r0
 8001112:	757b      	strb	r3, [r7, #21]
		if(status != HAL_OK)
 8001114:	7d7b      	ldrb	r3, [r7, #21]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <flashWrite+0x4c>
		{
			ret = false;
 800111a:	2300      	movs	r3, #0
 800111c:	77fb      	strb	r3, [r7, #31]
			break;
 800111e:	e006      	b.n	800112e <flashWrite+0x5a>
	for(int i=0; i<length; i++)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	3301      	adds	r3, #1
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	d8df      	bhi.n	80010ee <flashWrite+0x1a>
		}
	}

	HAL_FLASH_Lock();
 800112e:	f003 fcad 	bl	8004a8c <HAL_FLASH_Lock>

	return ret;
 8001132:	7ffb      	ldrb	r3, [r7, #31]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bdb0      	pop	{r4, r5, r7, pc}

0800113c <flashInSector>:

	return ret;
}

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 800113c:	b480      	push	{r7}
 800113e:	b08b      	sub	sp, #44	; 0x2c
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	81fb      	strh	r3, [r7, #14]
	bool ret = false;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t sector_start;
	uint32_t sector_end;
	uint32_t flash_start;
	uint32_t flash_end;

	sector_start = flash_tbl[sector_num].addr;
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	4a25      	ldr	r2, [pc, #148]	; (80011e8 <flashInSector+0xac>)
 8001154:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001158:	623b      	str	r3, [r7, #32]
	sector_end = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <flashInSector+0xac>)
 800115e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	4920      	ldr	r1, [pc, #128]	; (80011e8 <flashInSector+0xac>)
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	440b      	add	r3, r1
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4413      	add	r3, r2
 800116e:	3b01      	subs	r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
	flash_start = addr;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	61bb      	str	r3, [r7, #24]
	flash_end = addr + length - 1;
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	3b01      	subs	r3, #1
 800117e:	617b      	str	r3, [r7, #20]

	if(sector_start >= flash_start && sector_start <= flash_end)
 8001180:	6a3a      	ldr	r2, [r7, #32]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	429a      	cmp	r2, r3
 8001186:	d306      	bcc.n	8001196 <flashInSector+0x5a>
 8001188:	6a3a      	ldr	r2, [r7, #32]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	d802      	bhi.n	8001196 <flashInSector+0x5a>
	{
		ret = true;
 8001190:	2301      	movs	r3, #1
 8001192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

  if (sector_end >= flash_start && sector_end <= flash_end)
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	429a      	cmp	r2, r3
 800119c:	d306      	bcc.n	80011ac <flashInSector+0x70>
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d802      	bhi.n	80011ac <flashInSector+0x70>
  {
    ret = true;
 80011a6:	2301      	movs	r3, #1
 80011a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d306      	bcc.n	80011c2 <flashInSector+0x86>
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d802      	bhi.n	80011c2 <flashInSector+0x86>
  {
    ret = true;
 80011bc:	2301      	movs	r3, #1
 80011be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d306      	bcc.n	80011d8 <flashInSector+0x9c>
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d802      	bhi.n	80011d8 <flashInSector+0x9c>
  {
    ret = true;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 80011d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80011dc:	4618      	mov	r0, r3
 80011de:	372c      	adds	r7, #44	; 0x2c
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	20000000 	.word	0x20000000

080011ec <cliFlash>:


#ifdef _USE_HW_CLI

void cliFlash(cli_args_t *args)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(args->argc == 1 && args->isStr(0, "info") == true)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d121      	bne.n	8001246 <cliFlash+0x5a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	495c      	ldr	r1, [pc, #368]	; (8001378 <cliFlash+0x18c>)
 8001208:	2000      	movs	r0, #0
 800120a:	4798      	blx	r3
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d019      	beq.n	8001246 <cliFlash+0x5a>
	{
		for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
 8001216:	e010      	b.n	800123a <cliFlash+0x4e>
		{
			cliPrintf("0x%X : %dKB\n", flash_tbl[i].addr, flash_tbl[i].length / 1024);
 8001218:	4a58      	ldr	r2, [pc, #352]	; (800137c <cliFlash+0x190>)
 800121a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001220:	4a56      	ldr	r2, [pc, #344]	; (800137c <cliFlash+0x190>)
 8001222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	0a9b      	lsrs	r3, r3, #10
 800122c:	461a      	mov	r2, r3
 800122e:	4854      	ldr	r0, [pc, #336]	; (8001380 <cliFlash+0x194>)
 8001230:	f001 fc18 	bl	8002a64 <cliPrintf>
		for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	3301      	adds	r3, #1
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
 800123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123c:	2b07      	cmp	r3, #7
 800123e:	ddeb      	ble.n	8001218 <cliFlash+0x2c>
		}

		ret = true;
 8001240:	2301      	movs	r3, #1
 8001242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d12b      	bne.n	80012a6 <cliFlash+0xba>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	494c      	ldr	r1, [pc, #304]	; (8001384 <cliFlash+0x198>)
 8001254:	2000      	movs	r0, #0
 8001256:	4798      	blx	r3
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d023      	beq.n	80012a6 <cliFlash+0xba>
	{
		uint32_t addr;
		uint32_t length;

		addr = (uint32_t)args->getData(1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2001      	movs	r0, #1
 8001264:	4798      	blx	r3
 8001266:	4603      	mov	r3, r0
 8001268:	623b      	str	r3, [r7, #32]
		length = (uint32_t)args->getData(2);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2002      	movs	r0, #2
 8001270:	4798      	blx	r3
 8001272:	4603      	mov	r3, r0
 8001274:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<length; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
 800127a:	e00d      	b.n	8001298 <cliFlash+0xac>
		{
			cliPrintf("0x%X : 0x%X\n", addr + i, *((uint8_t *)(addr + i)));
 800127c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	18d1      	adds	r1, r2, r3
 8001282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	483e      	ldr	r0, [pc, #248]	; (8001388 <cliFlash+0x19c>)
 800128e:	f001 fbe9 	bl	8002a64 <cliPrintf>
		for(int i=0; i<length; i++)
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	3301      	adds	r3, #1
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8ed      	bhi.n	800127c <cliFlash+0x90>
		}

		ret = true;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(args->argc == 3 && args->isStr(0, "erase") == true)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d121      	bne.n	80012f2 <cliFlash+0x106>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4936      	ldr	r1, [pc, #216]	; (800138c <cliFlash+0x1a0>)
 80012b4:	2000      	movs	r0, #0
 80012b6:	4798      	blx	r3
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d019      	beq.n	80012f2 <cliFlash+0x106>
	{
		uint32_t addr;
		uint32_t length;

		addr = (uint32_t)args->getData(1);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2001      	movs	r0, #1
 80012c4:	4798      	blx	r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]
		length = (uint32_t)args->getData(2);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2002      	movs	r0, #2
 80012d0:	4798      	blx	r3
 80012d2:	4603      	mov	r3, r0
 80012d4:	617b      	str	r3, [r7, #20]

		if(flashErase(addr, length) == true)
 80012d6:	6979      	ldr	r1, [r7, #20]
 80012d8:	69b8      	ldr	r0, [r7, #24]
 80012da:	f7ff feaf 	bl	800103c <flashErase>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <cliFlash+0x100>
		{
			cliPrintf("Erase OK\n");
 80012e4:	482a      	ldr	r0, [pc, #168]	; (8001390 <cliFlash+0x1a4>)
 80012e6:	f001 fbbd 	bl	8002a64 <cliPrintf>
 80012ea:	e002      	b.n	80012f2 <cliFlash+0x106>
		}
		else
		{
			cliPrintf("Erase Fail\n");
 80012ec:	4829      	ldr	r0, [pc, #164]	; (8001394 <cliFlash+0x1a8>)
 80012ee:	f001 fbb9 	bl	8002a64 <cliPrintf>
		}
	}


  if (args->argc == 3 && args->isStr(0, "write") == true)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d127      	bne.n	800134a <cliFlash+0x15e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4926      	ldr	r1, [pc, #152]	; (8001398 <cliFlash+0x1ac>)
 8001300:	2000      	movs	r0, #0
 8001302:	4798      	blx	r3
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d01f      	beq.n	800134a <cliFlash+0x15e>
  {
    uint32_t addr;
    uint32_t data;

    addr   = (uint32_t)args->getData(1);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2001      	movs	r0, #1
 8001310:	4798      	blx	r3
 8001312:	4603      	mov	r3, r0
 8001314:	613b      	str	r3, [r7, #16]
    data   = (uint32_t)args->getData(2);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2002      	movs	r0, #2
 800131c:	4798      	blx	r3
 800131e:	4603      	mov	r3, r0
 8001320:	60fb      	str	r3, [r7, #12]

    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	2204      	movs	r2, #4
 8001328:	4619      	mov	r1, r3
 800132a:	6938      	ldr	r0, [r7, #16]
 800132c:	f7ff fed2 	bl	80010d4 <flashWrite>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <cliFlash+0x152>
    {
      cliPrintf("Write OK\n");
 8001336:	4819      	ldr	r0, [pc, #100]	; (800139c <cliFlash+0x1b0>)
 8001338:	f001 fb94 	bl	8002a64 <cliPrintf>
 800133c:	e002      	b.n	8001344 <cliFlash+0x158>
    }
    else
    {
      cliPrintf("Write Fail\n");
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <cliFlash+0x1b4>)
 8001340:	f001 fb90 	bl	8002a64 <cliPrintf>
    }

    ret = true;
 8001344:	2301      	movs	r3, #1
 8001346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (ret != true)
 800134a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00b      	beq.n	8001370 <cliFlash+0x184>
  {
    cliPrintf("flash info\n");
 8001358:	4812      	ldr	r0, [pc, #72]	; (80013a4 <cliFlash+0x1b8>)
 800135a:	f001 fb83 	bl	8002a64 <cliPrintf>
    cliPrintf("flash read  addr length\n");
 800135e:	4812      	ldr	r0, [pc, #72]	; (80013a8 <cliFlash+0x1bc>)
 8001360:	f001 fb80 	bl	8002a64 <cliPrintf>
    cliPrintf("flash erase addr length\n");
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <cliFlash+0x1c0>)
 8001366:	f001 fb7d 	bl	8002a64 <cliPrintf>
    cliPrintf("flash write addr data\n");
 800136a:	4811      	ldr	r0, [pc, #68]	; (80013b0 <cliFlash+0x1c4>)
 800136c:	f001 fb7a 	bl	8002a64 <cliPrintf>
  }
}
 8001370:	bf00      	nop
 8001372:	3730      	adds	r7, #48	; 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	08014800 	.word	0x08014800
 800137c:	20000000 	.word	0x20000000
 8001380:	08014808 	.word	0x08014808
 8001384:	08014818 	.word	0x08014818
 8001388:	08014820 	.word	0x08014820
 800138c:	08014830 	.word	0x08014830
 8001390:	08014838 	.word	0x08014838
 8001394:	08014844 	.word	0x08014844
 8001398:	08014850 	.word	0x08014850
 800139c:	08014858 	.word	0x08014858
 80013a0:	08014864 	.word	0x08014864
 80013a4:	08014870 	.word	0x08014870
 80013a8:	0801487c 	.word	0x0801487c
 80013ac:	08014898 	.word	0x08014898
 80013b0:	080148b4 	.word	0x080148b4

080013b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b37      	ldr	r3, [pc, #220]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a36      	ldr	r2, [pc, #216]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b34      	ldr	r3, [pc, #208]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b30      	ldr	r3, [pc, #192]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a2f      	ldr	r2, [pc, #188]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a28      	ldr	r2, [pc, #160]	; (80014ac <MX_GPIO_Init+0xf8>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a21      	ldr	r2, [pc, #132]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	481b      	ldr	r0, [pc, #108]	; (80014b0 <MX_GPIO_Init+0xfc>)
 8001442:	f003 ff31 	bl	80052a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	211c      	movs	r1, #28
 800144a:	481a      	ldr	r0, [pc, #104]	; (80014b4 <MX_GPIO_Init+0x100>)
 800144c:	f003 ff2c 	bl	80052a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4811      	ldr	r0, [pc, #68]	; (80014b0 <MX_GPIO_Init+0xfc>)
 800146a:	f003 fd81 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800146e:	231c      	movs	r3, #28
 8001470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <MX_GPIO_Init+0x100>)
 8001486:	f003 fd73 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800148a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_GPIO_Init+0x104>)
 80014a0:	f003 fd66 	bl	8004f70 <HAL_GPIO_Init>

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f002 fd28 	bl	8003f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f820 	bl	8001508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f7ff ff74 	bl	80013b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80014cc:	f7ff fd78 	bl	8000fc0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80014d0:	f00f faec 	bl	8010aac <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 80014d4:	f000 f886 	bl	80015e4 <MX_SDIO_SD_Init>
  MX_SPI4_Init();
 80014d8:	f000 f9a4 	bl	8001824 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  cliInit();
 80014dc:	f000 fda8 	bl	8002030 <cliInit>
  ledInit();
 80014e0:	f002 f840 	bl	8003564 <ledInit>
  gpioInit();
 80014e4:	f001 fef0 	bl	80032c8 <gpioInit>
  sdInit();
 80014e8:	f002 f8e6 	bl	80036b8 <sdInit>
  fatfsInit();
 80014ec:	f001 fcee 	bl	8002ecc <fatfsInit>
  flashInit();
 80014f0:	f7ff fd96 	bl	8001020 <flashInit>
  spiInit();
 80014f4:	f002 fbbc 	bl	8003c70 <spiInit>

  cliOpen(_DEF_UART1, 115200);
 80014f8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80014fc:	2000      	movs	r0, #0
 80014fe:	f000 fde3 	bl	80020c8 <cliOpen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	cliMain();
 8001502:	f000 fe99 	bl	8002238 <cliMain>
 8001506:	e7fc      	b.n	8001502 <main+0x46>

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b094      	sub	sp, #80	; 0x50
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	2230      	movs	r2, #48	; 0x30
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f011 f92e 	bl	8012778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <SystemClock_Config+0xc8>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a26      	ldr	r2, [pc, #152]	; (80015d0 <SystemClock_Config+0xc8>)
 8001536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
 800153c:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <SystemClock_Config+0xc8>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <SystemClock_Config+0xcc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a20      	ldr	r2, [pc, #128]	; (80015d4 <SystemClock_Config+0xcc>)
 8001552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <SystemClock_Config+0xcc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001564:	2301      	movs	r3, #1
 8001566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156e:	2302      	movs	r3, #2
 8001570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001578:	2319      	movs	r3, #25
 800157a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800157c:	23c0      	movs	r3, #192	; 0xc0
 800157e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001580:	2302      	movs	r3, #2
 8001582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001584:	2304      	movs	r3, #4
 8001586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001588:	f107 0320 	add.w	r3, r7, #32
 800158c:	4618      	mov	r0, r3
 800158e:	f005 f90f 	bl	80067b0 <HAL_RCC_OscConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001598:	f000 f81e 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159c:	230f      	movs	r3, #15
 800159e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a0:	2302      	movs	r3, #2
 80015a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2103      	movs	r1, #3
 80015b8:	4618      	mov	r0, r3
 80015ba:	f005 fb71 	bl	8006ca0 <HAL_RCC_ClockConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015c4:	f000 f808 	bl	80015d8 <Error_Handler>
  }
}
 80015c8:	bf00      	nop
 80015ca:	3750      	adds	r7, #80	; 0x50
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40007000 	.word	0x40007000

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <Error_Handler+0x8>
	...

080015e4 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_SDIO_SD_Init+0x58>)
 80015ea:	4a15      	ldr	r2, [pc, #84]	; (8001640 <MX_SDIO_SD_Init+0x5c>)
 80015ec:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <MX_SDIO_SD_Init+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_SDIO_SD_Init+0x58>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <MX_SDIO_SD_Init+0x58>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_SDIO_SD_Init+0x58>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <MX_SDIO_SD_Init+0x58>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MX_SDIO_SD_Init+0x58>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8001612:	480a      	ldr	r0, [pc, #40]	; (800163c <MX_SDIO_SD_Init+0x58>)
 8001614:	f005 fcfc 	bl	8007010 <HAL_SD_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800161e:	f7ff ffdb 	bl	80015d8 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8001622:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_SDIO_SD_Init+0x58>)
 8001628:	f006 fad4 	bl	8007bd4 <HAL_SD_ConfigWideBusOperation>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8001632:	f7ff ffd1 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000338 	.word	0x20000338
 8001640:	40012c00 	.word	0x40012c00

08001644 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a68      	ldr	r2, [pc, #416]	; (8001804 <HAL_SD_MspInit+0x1c0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	f040 80ca 	bne.w	80017fc <HAL_SD_MspInit+0x1b8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	4b66      	ldr	r3, [pc, #408]	; (8001808 <HAL_SD_MspInit+0x1c4>)
 800166e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001670:	4a65      	ldr	r2, [pc, #404]	; (8001808 <HAL_SD_MspInit+0x1c4>)
 8001672:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001676:	6453      	str	r3, [r2, #68]	; 0x44
 8001678:	4b63      	ldr	r3, [pc, #396]	; (8001808 <HAL_SD_MspInit+0x1c4>)
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	4b5f      	ldr	r3, [pc, #380]	; (8001808 <HAL_SD_MspInit+0x1c4>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	4a5e      	ldr	r2, [pc, #376]	; (8001808 <HAL_SD_MspInit+0x1c4>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6313      	str	r3, [r2, #48]	; 0x30
 8001694:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <HAL_SD_MspInit+0x1c4>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	4b58      	ldr	r3, [pc, #352]	; (8001808 <HAL_SD_MspInit+0x1c4>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	4a57      	ldr	r2, [pc, #348]	; (8001808 <HAL_SD_MspInit+0x1c4>)
 80016aa:	f043 0302 	orr.w	r3, r3, #2
 80016ae:	6313      	str	r3, [r2, #48]	; 0x30
 80016b0:	4b55      	ldr	r3, [pc, #340]	; (8001808 <HAL_SD_MspInit+0x1c4>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80016bc:	f44f 7350 	mov.w	r3, #832	; 0x340
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80016ce:	230c      	movs	r3, #12
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	484c      	ldr	r0, [pc, #304]	; (800180c <HAL_SD_MspInit+0x1c8>)
 80016da:	f003 fc49 	bl	8004f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 80016de:	f248 03a0 	movw	r3, #32928	; 0x80a0
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80016f0:	230c      	movs	r3, #12
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	4845      	ldr	r0, [pc, #276]	; (8001810 <HAL_SD_MspInit+0x1cc>)
 80016fc:	f003 fc38 	bl	8004f70 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001700:	4b44      	ldr	r3, [pc, #272]	; (8001814 <HAL_SD_MspInit+0x1d0>)
 8001702:	4a45      	ldr	r2, [pc, #276]	; (8001818 <HAL_SD_MspInit+0x1d4>)
 8001704:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001706:	4b43      	ldr	r3, [pc, #268]	; (8001814 <HAL_SD_MspInit+0x1d0>)
 8001708:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800170c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170e:	4b41      	ldr	r3, [pc, #260]	; (8001814 <HAL_SD_MspInit+0x1d0>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001714:	4b3f      	ldr	r3, [pc, #252]	; (8001814 <HAL_SD_MspInit+0x1d0>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800171a:	4b3e      	ldr	r3, [pc, #248]	; (8001814 <HAL_SD_MspInit+0x1d0>)
 800171c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001720:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001722:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <HAL_SD_MspInit+0x1d0>)
 8001724:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001728:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800172a:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <HAL_SD_MspInit+0x1d0>)
 800172c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001730:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001732:	4b38      	ldr	r3, [pc, #224]	; (8001814 <HAL_SD_MspInit+0x1d0>)
 8001734:	2220      	movs	r2, #32
 8001736:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001738:	4b36      	ldr	r3, [pc, #216]	; (8001814 <HAL_SD_MspInit+0x1d0>)
 800173a:	2200      	movs	r2, #0
 800173c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800173e:	4b35      	ldr	r3, [pc, #212]	; (8001814 <HAL_SD_MspInit+0x1d0>)
 8001740:	2204      	movs	r2, #4
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001744:	4b33      	ldr	r3, [pc, #204]	; (8001814 <HAL_SD_MspInit+0x1d0>)
 8001746:	2203      	movs	r2, #3
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800174a:	4b32      	ldr	r3, [pc, #200]	; (8001814 <HAL_SD_MspInit+0x1d0>)
 800174c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001752:	4b30      	ldr	r3, [pc, #192]	; (8001814 <HAL_SD_MspInit+0x1d0>)
 8001754:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001758:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800175a:	482e      	ldr	r0, [pc, #184]	; (8001814 <HAL_SD_MspInit+0x1d0>)
 800175c:	f002 fd82 	bl	8004264 <HAL_DMA_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8001766:	f7ff ff37 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a29      	ldr	r2, [pc, #164]	; (8001814 <HAL_SD_MspInit+0x1d0>)
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
 8001770:	4a28      	ldr	r2, [pc, #160]	; (8001814 <HAL_SD_MspInit+0x1d0>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001776:	4b29      	ldr	r3, [pc, #164]	; (800181c <HAL_SD_MspInit+0x1d8>)
 8001778:	4a29      	ldr	r2, [pc, #164]	; (8001820 <HAL_SD_MspInit+0x1dc>)
 800177a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_SD_MspInit+0x1d8>)
 800177e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001782:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001784:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_SD_MspInit+0x1d8>)
 8001786:	2240      	movs	r2, #64	; 0x40
 8001788:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <HAL_SD_MspInit+0x1d8>)
 800178c:	2200      	movs	r2, #0
 800178e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001790:	4b22      	ldr	r3, [pc, #136]	; (800181c <HAL_SD_MspInit+0x1d8>)
 8001792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001796:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001798:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_SD_MspInit+0x1d8>)
 800179a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800179e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <HAL_SD_MspInit+0x1d8>)
 80017a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <HAL_SD_MspInit+0x1d8>)
 80017aa:	2220      	movs	r2, #32
 80017ac:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_SD_MspInit+0x1d8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_SD_MspInit+0x1d8>)
 80017b6:	2204      	movs	r2, #4
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_SD_MspInit+0x1d8>)
 80017bc:	2203      	movs	r2, #3
 80017be:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80017c0:	4b16      	ldr	r3, [pc, #88]	; (800181c <HAL_SD_MspInit+0x1d8>)
 80017c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_SD_MspInit+0x1d8>)
 80017ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017ce:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80017d0:	4812      	ldr	r0, [pc, #72]	; (800181c <HAL_SD_MspInit+0x1d8>)
 80017d2:	f002 fd47 	bl	8004264 <HAL_DMA_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 80017dc:	f7ff fefc 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a0e      	ldr	r2, [pc, #56]	; (800181c <HAL_SD_MspInit+0x1d8>)
 80017e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80017e6:	4a0d      	ldr	r2, [pc, #52]	; (800181c <HAL_SD_MspInit+0x1d8>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2105      	movs	r1, #5
 80017f0:	2031      	movs	r0, #49	; 0x31
 80017f2:	f002 fd00 	bl	80041f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80017f6:	2031      	movs	r0, #49	; 0x31
 80017f8:	f002 fd19 	bl	800422e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40012c00 	.word	0x40012c00
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000
 8001810:	40020400 	.word	0x40020400
 8001814:	200003bc 	.word	0x200003bc
 8001818:	40026458 	.word	0x40026458
 800181c:	2000041c 	.word	0x2000041c
 8001820:	400264a0 	.word	0x400264a0

08001824 <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <MX_SPI4_Init+0x64>)
 800182a:	4a18      	ldr	r2, [pc, #96]	; (800188c <MX_SPI4_Init+0x68>)
 800182c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <MX_SPI4_Init+0x64>)
 8001830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001834:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <MX_SPI4_Init+0x64>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <MX_SPI4_Init+0x64>)
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_SPI4_Init+0x64>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <MX_SPI4_Init+0x64>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_SPI4_Init+0x64>)
 8001850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001854:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_SPI4_Init+0x64>)
 8001858:	2200      	movs	r2, #0
 800185a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <MX_SPI4_Init+0x64>)
 800185e:	2200      	movs	r2, #0
 8001860:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_SPI4_Init+0x64>)
 8001864:	2200      	movs	r2, #0
 8001866:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <MX_SPI4_Init+0x64>)
 800186a:	2200      	movs	r2, #0
 800186c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_SPI4_Init+0x64>)
 8001870:	220a      	movs	r2, #10
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <MX_SPI4_Init+0x64>)
 8001876:	f006 ff0f 	bl	8008698 <HAL_SPI_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001880:	f7ff feaa 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	2000047c 	.word	0x2000047c
 800188c:	40013400 	.word	0x40013400

08001890 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a45      	ldr	r2, [pc, #276]	; (80019c4 <HAL_SPI_MspInit+0x134>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	f040 8083 	bne.w	80019ba <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	4b43      	ldr	r3, [pc, #268]	; (80019c8 <HAL_SPI_MspInit+0x138>)
 80018ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018bc:	4a42      	ldr	r2, [pc, #264]	; (80019c8 <HAL_SPI_MspInit+0x138>)
 80018be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018c2:	6453      	str	r3, [r2, #68]	; 0x44
 80018c4:	4b40      	ldr	r3, [pc, #256]	; (80019c8 <HAL_SPI_MspInit+0x138>)
 80018c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	4b3c      	ldr	r3, [pc, #240]	; (80019c8 <HAL_SPI_MspInit+0x138>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <HAL_SPI_MspInit+0x138>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6313      	str	r3, [r2, #48]	; 0x30
 80018e0:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_SPI_MspInit+0x138>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <HAL_SPI_MspInit+0x138>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	4a34      	ldr	r2, [pc, #208]	; (80019c8 <HAL_SPI_MspInit+0x138>)
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	6313      	str	r3, [r2, #48]	; 0x30
 80018fc:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <HAL_SPI_MspInit+0x138>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PA1     ------> SPI4_MOSI
    PB13     ------> SPI4_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001908:	2302      	movs	r3, #2
 800190a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001918:	2305      	movs	r3, #5
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	482a      	ldr	r0, [pc, #168]	; (80019cc <HAL_SPI_MspInit+0x13c>)
 8001924:	f003 fb24 	bl	8004f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 800193a:	2306      	movs	r3, #6
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	4822      	ldr	r0, [pc, #136]	; (80019d0 <HAL_SPI_MspInit+0x140>)
 8001946:	f003 fb13 	bl	8004f70 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800194a:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <HAL_SPI_MspInit+0x144>)
 800194c:	4a22      	ldr	r2, [pc, #136]	; (80019d8 <HAL_SPI_MspInit+0x148>)
 800194e:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001950:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_SPI_MspInit+0x144>)
 8001952:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001956:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HAL_SPI_MspInit+0x144>)
 800195a:	2240      	movs	r2, #64	; 0x40
 800195c:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_SPI_MspInit+0x144>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_SPI_MspInit+0x144>)
 8001966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800196a:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_SPI_MspInit+0x144>)
 800196e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001972:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001974:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <HAL_SPI_MspInit+0x144>)
 8001976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800197a:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_SPI_MspInit+0x144>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <HAL_SPI_MspInit+0x144>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_SPI_MspInit+0x144>)
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800198e:	4811      	ldr	r0, [pc, #68]	; (80019d4 <HAL_SPI_MspInit+0x144>)
 8001990:	f002 fc68 	bl	8004264 <HAL_DMA_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 800199a:	f7ff fe1d 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a0c      	ldr	r2, [pc, #48]	; (80019d4 <HAL_SPI_MspInit+0x144>)
 80019a2:	649a      	str	r2, [r3, #72]	; 0x48
 80019a4:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <HAL_SPI_MspInit+0x144>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	2054      	movs	r0, #84	; 0x54
 80019b0:	f002 fc21 	bl	80041f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80019b4:	2054      	movs	r0, #84	; 0x54
 80019b6:	f002 fc3a 	bl	800422e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80019ba:	bf00      	nop
 80019bc:	3728      	adds	r7, #40	; 0x28
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40013400 	.word	0x40013400
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020000 	.word	0x40020000
 80019d0:	40020400 	.word	0x40020400
 80019d4:	200004d4 	.word	0x200004d4
 80019d8:	40026428 	.word	0x40026428

080019dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_MspInit+0x4c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <HAL_MspInit+0x4c>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_MspInit+0x4c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_MspInit+0x4c>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_MspInit+0x4c>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_MspInit+0x4c>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a30:	e7fe      	b.n	8001a30 <NMI_Handler+0x4>

08001a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler+0x4>

08001a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a78:	f002 fa9e 	bl	8003fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <SDIO_IRQHandler+0x10>)
 8001a86:	f005 fd3b 	bl	8007500 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000338 	.word	0x20000338

08001a94 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <DMA2_Stream1_IRQHandler+0x10>)
 8001a9a:	f002 fd0b 	bl	80044b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200004d4 	.word	0x200004d4

08001aa8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <DMA2_Stream3_IRQHandler+0x10>)
 8001aae:	f002 fd01 	bl	80044b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200003bc 	.word	0x200003bc

08001abc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <OTG_FS_IRQHandler+0x10>)
 8001ac2:	f003 fd68 	bl	8005596 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000235c 	.word	0x2000235c

08001ad0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <DMA2_Stream6_IRQHandler+0x10>)
 8001ad6:	f002 fced 	bl	80044b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000041c 	.word	0x2000041c

08001ae4 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <SPI4_IRQHandler+0x10>)
 8001aea:	f006 fe5f 	bl	80087ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000047c 	.word	0x2000047c

08001af8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return 1;
 8001afc:	2301      	movs	r3, #1
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_kill>:

int _kill(int pid, int sig)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b12:	f010 fecd 	bl	80128b0 <__errno>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2216      	movs	r2, #22
 8001b1a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <_exit>:

void _exit (int status)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ffe7 	bl	8001b08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b3a:	e7fe      	b.n	8001b3a <_exit+0x12>

08001b3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	e00a      	b.n	8001b64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b4e:	f3af 8000 	nop.w
 8001b52:	4601      	mov	r1, r0
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	60ba      	str	r2, [r7, #8]
 8001b5a:	b2ca      	uxtb	r2, r1
 8001b5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3301      	adds	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	dbf0      	blt.n	8001b4e <_read+0x12>
  }

  return len;
 8001b6c:	687b      	ldr	r3, [r7, #4]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	e009      	b.n	8001b9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	60ba      	str	r2, [r7, #8]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	dbf1      	blt.n	8001b88 <_write+0x12>
  }
  return len;
 8001ba4:	687b      	ldr	r3, [r7, #4]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <_close>:

int _close(int file)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bd6:	605a      	str	r2, [r3, #4]
  return 0;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_isatty>:

int _isatty(int file)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <_sbrk+0x5c>)
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <_sbrk+0x60>)
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <_sbrk+0x64>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <_sbrk+0x68>)
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d207      	bcs.n	8001c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c48:	f010 fe32 	bl	80128b0 <__errno>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	220c      	movs	r2, #12
 8001c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	e009      	b.n	8001c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <_sbrk+0x64>)
 8001c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20020000 	.word	0x20020000
 8001c78:	00000400 	.word	0x00000400
 8001c7c:	20000534 	.word	0x20000534
 8001c80:	20002bb0 	.word	0x20002bb0

08001c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <SystemInit+0x20>)
 8001c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <SystemInit+0x20>)
 8001c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cac:	f7ff ffea 	bl	8001c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb0:	480c      	ldr	r0, [pc, #48]	; (8001ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cb2:	490d      	ldr	r1, [pc, #52]	; (8001ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb8:	e002      	b.n	8001cc0 <LoopCopyDataInit>

08001cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cbe:	3304      	adds	r3, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc4:	d3f9      	bcc.n	8001cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc8:	4c0a      	ldr	r4, [pc, #40]	; (8001cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ccc:	e001      	b.n	8001cd2 <LoopFillZerobss>

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd0:	3204      	adds	r2, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd6:	f010 fdf1 	bl	80128bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cda:	f7ff fbef 	bl	80014bc <main>
  bx  lr    
 8001cde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce8:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 8001cec:	080156bc 	.word	0x080156bc
  ldr r2, =_sbss
 8001cf0:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 8001cf4:	20002bac 	.word	0x20002bac

08001cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf8:	e7fe      	b.n	8001cf8 <ADC_IRQHandler>

08001cfa <delay>:
#include "common.h"



void delay(uint32_t ms)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f002 f978 	bl	8003ff8 <HAL_Delay>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <millis>:


uint32_t millis(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001d14:	f002 f964 	bl	8003fe0 <HAL_GetTick>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <SD_CheckStatus+0x80>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 8001d30:	f001 fd00 	bl	8003734 <sdIsInit>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f083 0301 	eor.w	r3, r3, #1
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <SD_CheckStatus+0x80>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <SD_CheckStatus+0x80>)
 8001d4e:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 8001d50:	f001 fcfc 	bl	800374c <sdIsDetected>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f083 0301 	eor.w	r3, r3, #1
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <SD_CheckStatus+0x80>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f043 0302 	orr.w	r3, r3, #2
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <SD_CheckStatus+0x80>)
 8001d6e:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 8001d70:	200a      	movs	r0, #10
 8001d72:	f001 fd6f 	bl	8003854 <sdIsReady>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f083 0301 	eor.w	r3, r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d007      	beq.n	8001d92 <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <SD_CheckStatus+0x80>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SD_CheckStatus+0x80>)
 8001d90:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001d92:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <SD_CheckStatus+0x80>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	b2db      	uxtb	r3, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000044 	.word	0x20000044

08001da4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <SD_initialize+0x40>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]

  if (sdIsInit() != true)
 8001db4:	f001 fcbe 	bl	8003734 <sdIsInit>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f083 0301 	eor.w	r3, r3, #1
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <SD_initialize+0x30>
  {
    Stat |= STA_NOINIT;
 8001dc4:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <SD_initialize+0x40>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SD_initialize+0x40>)
 8001dd2:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <SD_initialize+0x40>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000044 	.word	0x20000044

08001de8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff93 	bl	8001d20 <SD_CheckStatus>
 8001dfa:	4603      	mov	r3, r0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	4603      	mov	r3, r0
 8001e12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	75fb      	strb	r3, [r7, #23]


  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 8001e18:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f001 fd37 	bl	8003894 <sdReadBlocks>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <SD_read+0x2c>
  {
    res = RES_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	4603      	mov	r3, r0
 8001e48:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	75fb      	strb	r3, [r7, #23]

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 8001e4e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f001 fd66 	bl	8003928 <sdWriteBlocks>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <SD_write+0x2c>
  {
    res = RES_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	; 0x30
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	603a      	str	r2, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001e86:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <SD_ioctl+0xac>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <SD_ioctl+0x28>
 8001e94:	2303      	movs	r3, #3
 8001e96:	e03c      	b.n	8001f12 <SD_ioctl+0xa2>

  switch (cmd)
 8001e98:	79bb      	ldrb	r3, [r7, #6]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d834      	bhi.n	8001f08 <SD_ioctl+0x98>
 8001e9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ea4 <SD_ioctl+0x34>)
 8001ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea4:	08001eb5 	.word	0x08001eb5
 8001ea8:	08001ebd 	.word	0x08001ebd
 8001eac:	08001ed5 	.word	0x08001ed5
 8001eb0:	08001eef 	.word	0x08001eef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001eba:	e028      	b.n	8001f0e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    sdGetInfo(&sd_info);
 8001ebc:	f107 0308 	add.w	r3, r7, #8
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f001 fc59 	bl	8003778 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 8001ec6:	6a3a      	ldr	r2, [r7, #32]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001ed2:	e01c      	b.n	8001f0e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    sdGetInfo(&sd_info);
 8001ed4:	f107 0308 	add.w	r3, r7, #8
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f001 fc4d 	bl	8003778 <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001eec:	e00f      	b.n	8001f0e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    sdGetInfo(&sd_info);
 8001eee:	f107 0308 	add.w	r3, r7, #8
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f001 fc40 	bl	8003778 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	0a5a      	lsrs	r2, r3, #9
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f06:	e002      	b.n	8001f0e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8001f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3730      	adds	r7, #48	; 0x30
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000044 	.word	0x20000044

08001f20 <cdcAvailable>:
bool rx_full=false;



uint32_t cdcAvailable(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % BUF_SIZE;
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <cdcAvailable+0x24>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <cdcAvailable+0x28>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f34:	607b      	str	r3, [r7, #4]

	return ret;
 8001f36:	687b      	ldr	r3, [r7, #4]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	20000738 	.word	0x20000738
 8001f48:	2000073c 	.word	0x2000073c

08001f4c <cdcRead>:

uint8_t cdcRead(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	71fb      	strb	r3, [r7, #7]

	ret = rx_buf[rx_out];
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <cdcRead+0x3c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <cdcRead+0x40>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <cdcRead+0x3c>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <cdcRead+0x44>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d006      	beq.n	8001f7a <cdcRead+0x2e>
	{
		rx_out = (rx_out + 1) % BUF_SIZE;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <cdcRead+0x3c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f76:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <cdcRead+0x3c>)
 8001f78:	6013      	str	r3, [r2, #0]
	}

	return ret;
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	2000073c 	.word	0x2000073c
 8001f8c:	20000538 	.word	0x20000538
 8001f90:	20000738 	.word	0x20000738

08001f94 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
	rx_buf[rx_in] = rx_data;
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <cdcDataIn+0x3c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	490c      	ldr	r1, [pc, #48]	; (8001fd4 <cdcDataIn+0x40>)
 8001fa4:	79fa      	ldrb	r2, [r7, #7]
 8001fa6:	54ca      	strb	r2, [r1, r3]

	uint8_t next_rx_in = (rx_in + 1) % BUF_SIZE;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <cdcDataIn+0x3c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]

	if(next_rx_in != rx_out)
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <cdcDataIn+0x44>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d002      	beq.n	8001fc2 <cdcDataIn+0x2e>
	{
		rx_in = next_rx_in;
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <cdcDataIn+0x3c>)
 8001fc0:	6013      	str	r3, [r2, #0]
	}
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000738 	.word	0x20000738
 8001fd4:	20000538 	.word	0x20000538
 8001fd8:	2000073c 	.word	0x2000073c

08001fdc <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t len)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
	uint32_t pre_time = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
	uint8_t ret;

	pre_time = millis();
 8001fea:	f7ff fe91 	bl	8001d10 <millis>
 8001fee:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(p_data, len);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f00e fe84 	bl	8010d04 <CDC_Transmit_FS>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 8002000:	7afb      	ldrb	r3, [r7, #11]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <cdcWrite+0x2e>
			{
				return len;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	e00e      	b.n	8002028 <cdcWrite+0x4c>
			}
			else if(ret == USBD_FAIL)
 800200a:	7afb      	ldrb	r3, [r7, #11]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d101      	bne.n	8002014 <cdcWrite+0x38>
			{
				return 0;
 8002010:	2300      	movs	r3, #0
 8002012:	e009      	b.n	8002028 <cdcWrite+0x4c>
			}

			if(millis() - pre_time >= 100)
 8002014:	f7ff fe7c 	bl	8001d10 <millis>
 8002018:	4602      	mov	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b63      	cmp	r3, #99	; 0x63
 8002020:	d800      	bhi.n	8002024 <cdcWrite+0x48>
		ret = CDC_Transmit_FS(p_data, len);
 8002022:	e7e5      	b.n	8001ff0 <cdcWrite+0x14>
			{
				break;
 8002024:	bf00      	nop
			}
	}

	return 0;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <cliInit+0x74>)
 8002036:	2200      	movs	r2, #0
 8002038:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 800203a:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <cliInit+0x74>)
 800203c:	2200      	movs	r2, #0
 800203e:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <cliInit+0x74>)
 8002042:	2200      	movs	r2, #0
 8002044:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <cliInit+0x74>)
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <cliInit+0x74>)
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <cliInit+0x74>)
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <cliInit+0x74>)
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <cliInit+0x74>)
 8002068:	4a0f      	ldr	r2, [pc, #60]	; (80020a8 <cliInit+0x78>)
 800206a:	f8c3 2474 	str.w	r2, [r3, #1140]	; 0x474
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <cliInit+0x74>)
 8002070:	4a0e      	ldr	r2, [pc, #56]	; (80020ac <cliInit+0x7c>)
 8002072:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <cliInit+0x74>)
 8002078:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <cliInit+0x80>)
 800207a:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <cliInit+0x74>)
 8002080:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <cliInit+0x84>)
 8002082:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

  cliLineClean(&cli_node);
 8002086:	4807      	ldr	r0, [pc, #28]	; (80020a4 <cliInit+0x74>)
 8002088:	f000 fb5c 	bl	8002744 <cliLineClean>


  cliAdd("help", cliShowList);
 800208c:	490a      	ldr	r1, [pc, #40]	; (80020b8 <cliInit+0x88>)
 800208e:	480b      	ldr	r0, [pc, #44]	; (80020bc <cliInit+0x8c>)
 8002090:	f000 fdf8 	bl	8002c84 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8002094:	490a      	ldr	r1, [pc, #40]	; (80020c0 <cliInit+0x90>)
 8002096:	480b      	ldr	r0, [pc, #44]	; (80020c4 <cliInit+0x94>)
 8002098:	f000 fdf4 	bl	8002c84 <cliAdd>

  return true;
 800209c:	2301      	movs	r3, #1
}
 800209e:	4618      	mov	r0, r3
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000740 	.word	0x20000740
 80020a8:	08002b15 	.word	0x08002b15
 80020ac:	08002b65 	.word	0x08002b65
 80020b0:	08002bbd 	.word	0x08002bbd
 80020b4:	08002c05 	.word	0x08002c05
 80020b8:	08002d19 	.word	0x08002d19
 80020bc:	080148cc 	.word	0x080148cc
 80020c0:	08002d89 	.word	0x08002d89
 80020c4:	080148d4 	.word	0x080148d4

080020c8 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 80020d4:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <cliOpen+0x38>)
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <cliOpen+0x38>)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f001 fe83 	bl	8003df0 <uartOpen>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b04      	ldr	r3, [pc, #16]	; (8002100 <cliOpen+0x38>)
 80020f0:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 80020f2:	4b03      	ldr	r3, [pc, #12]	; (8002100 <cliOpen+0x38>)
 80020f4:	7a1b      	ldrb	r3, [r3, #8]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000740 	.word	0x20000740

08002104 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 800210c:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <cliShowLog+0xdc>)
 800210e:	7a5b      	ldrb	r3, [r3, #9]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d061      	beq.n	80021d8 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	7a98      	ldrb	r0, [r3, #10]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 800211e:	461a      	mov	r2, r3
 8002120:	4930      	ldr	r1, [pc, #192]	; (80021e4 <cliShowLog+0xe0>)
 8002122:	f001 febf 	bl	8003ea4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	7a98      	ldrb	r0, [r3, #10]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8002130:	461a      	mov	r2, r3
 8002132:	492d      	ldr	r1, [pc, #180]	; (80021e8 <cliShowLog+0xe4>)
 8002134:	f001 feb6 	bl	8003ea4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7a98      	ldrb	r0, [r3, #10]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 8002142:	461a      	mov	r2, r3
 8002144:	4929      	ldr	r1, [pc, #164]	; (80021ec <cliShowLog+0xe8>)
 8002146:	f001 fead 	bl	8003ea4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	7a98      	ldrb	r0, [r3, #10]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002154:	461a      	mov	r2, r3
 8002156:	4926      	ldr	r1, [pc, #152]	; (80021f0 <cliShowLog+0xec>)
 8002158:	f001 fea4 	bl	8003ea4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7a98      	ldrb	r0, [r3, #10]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002166:	461a      	mov	r2, r3
 8002168:	4922      	ldr	r1, [pc, #136]	; (80021f4 <cliShowLog+0xf0>)
 800216a:	f001 fe9b 	bl	8003ea4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7a98      	ldrb	r0, [r3, #10]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002178:	461a      	mov	r2, r3
 800217a:	491f      	ldr	r1, [pc, #124]	; (80021f8 <cliShowLog+0xf4>)
 800217c:	f001 fe92 	bl	8003ea4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7a98      	ldrb	r0, [r3, #10]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800218a:	461a      	mov	r2, r3
 800218c:	491b      	ldr	r1, [pc, #108]	; (80021fc <cliShowLog+0xf8>)
 800218e:	f001 fe89 	bl	8003ea4 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	e012      	b.n	80021be <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7a98      	ldrb	r0, [r3, #10]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4613      	mov	r3, r2
 80021a0:	015b      	lsls	r3, r3, #5
 80021a2:	4413      	add	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4913      	ldr	r1, [pc, #76]	; (8002200 <cliShowLog+0xfc>)
 80021b4:	f001 fe76 	bl	8003ea4 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3301      	adds	r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80021c4:	461a      	mov	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4293      	cmp	r3, r2
 80021ca:	dbe5      	blt.n	8002198 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7a9b      	ldrb	r3, [r3, #10]
 80021d0:	490c      	ldr	r1, [pc, #48]	; (8002204 <cliShowLog+0x100>)
 80021d2:	4618      	mov	r0, r3
 80021d4:	f001 fe66 	bl	8003ea4 <uartPrintf>
  }
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000740 	.word	0x20000740
 80021e4:	080148d8 	.word	0x080148d8
 80021e8:	080148e8 	.word	0x080148e8
 80021ec:	080148f8 	.word	0x080148f8
 80021f0:	08014908 	.word	0x08014908
 80021f4:	08014918 	.word	0x08014918
 80021f8:	08014928 	.word	0x08014928
 80021fc:	08014938 	.word	0x08014938
 8002200:	08014948 	.word	0x08014948
 8002204:	08014958 	.word	0x08014958

08002208 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4906      	ldr	r1, [pc, #24]	; (8002230 <cliShowPrompt+0x28>)
 8002216:	4618      	mov	r0, r3
 8002218:	f001 fe44 	bl	8003ea4 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4904      	ldr	r1, [pc, #16]	; (8002234 <cliShowPrompt+0x2c>)
 8002222:	4618      	mov	r0, r3
 8002224:	f001 fe3e 	bl	8003ea4 <uartPrintf>
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	0801495c 	.word	0x0801495c
 8002234:	08014960 	.word	0x08014960

08002238 <cliMain>:

bool cliMain(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 800223c:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <cliMain+0x40>)
 800223e:	7a1b      	ldrb	r3, [r3, #8]
 8002240:	f083 0301 	eor.w	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <cliMain+0x16>
  {
    return false;
 800224a:	2300      	movs	r3, #0
 800224c:	e012      	b.n	8002274 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <cliMain+0x40>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f001 fde8 	bl	8003e28 <uartAvailable>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <cliMain+0x40>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f001 fdf3 	bl	8003e4e <uartRead>
 8002268:	4603      	mov	r3, r0
 800226a:	4619      	mov	r1, r3
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <cliMain+0x40>)
 800226e:	f000 f805 	bl	800227c <cliUpdate>
  }

  return true;
 8002272:	2301      	movs	r3, #1
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000740 	.word	0x20000740

0800227c <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	; 0x30
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8002288:	2300      	movs	r3, #0
 800228a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002294:	61fb      	str	r3, [r7, #28]

  if (p_cli->state == CLI_RX_IDLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7c1b      	ldrb	r3, [r3, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f040 816d 	bne.w	800257a <cliUpdate+0x2fe>
  {
    switch(rx_data)
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	2b7f      	cmp	r3, #127	; 0x7f
 80022a4:	d02a      	beq.n	80022fc <cliUpdate+0x80>
 80022a6:	2b7f      	cmp	r3, #127	; 0x7f
 80022a8:	f300 80da 	bgt.w	8002460 <cliUpdate+0x1e4>
 80022ac:	2b1b      	cmp	r3, #27
 80022ae:	d021      	beq.n	80022f4 <cliUpdate+0x78>
 80022b0:	2b1b      	cmp	r3, #27
 80022b2:	f300 80d5 	bgt.w	8002460 <cliUpdate+0x1e4>
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d062      	beq.n	8002380 <cliUpdate+0x104>
 80022ba:	2b0d      	cmp	r3, #13
 80022bc:	f040 80d0 	bne.w	8002460 <cliUpdate+0x1e4>
    {
      // 엔터
      case CLI_KEY_ENTER:
        if (line->count > 0)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fa54 	bl	8002778 <cliLineAdd>
          cliRunCmd(p_cli);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 fb25 	bl	8002920 <cliRunCmd>
        }

        line->count = 0;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff8b 	bl	8002208 <cliShowPrompt>
        break;
 80022f2:	e142      	b.n	800257a <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	741a      	strb	r2, [r3, #16]
        break;
 80022fa:	e13e      	b.n	800257a <cliUpdate+0x2fe>

      // DEL
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002308:	429a      	cmp	r2, r3
 800230a:	f080 8131 	bcs.w	8002570 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 800231e:	2301      	movs	r3, #1
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002322:	e013      	b.n	800234c <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800232a:	461a      	mov	r2, r3
 800232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232e:	441a      	add	r2, r3
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002336:	4619      	mov	r1, r3
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	440b      	add	r3, r1
 800233c:	3b01      	subs	r3, #1
 800233e:	69f9      	ldr	r1, [r7, #28]
 8002340:	5c89      	ldrb	r1, [r1, r2]
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	3301      	adds	r3, #1
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234c:	7efb      	ldrb	r3, [r7, #27]
 800234e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002350:	429a      	cmp	r2, r3
 8002352:	dbe7      	blt.n	8002324 <cliUpdate+0xa8>
          }

          line->count--;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800235a:	3b01      	subs	r3, #1
 800235c:	b2da      	uxtb	r2, r3
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800236a:	461a      	mov	r2, r3
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	2100      	movs	r1, #0
 8002370:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	498d      	ldr	r1, [pc, #564]	; (80025ac <cliUpdate+0x330>)
 8002378:	4618      	mov	r0, r3
 800237a:	f001 fd93 	bl	8003ea4 <uartPrintf>
        }
        break;
 800237e:	e0f7      	b.n	8002570 <cliUpdate+0x2f4>

      // 백스페이스
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002386:	2b00      	cmp	r3, #0
 8002388:	d055      	beq.n	8002436 <cliUpdate+0x1ba>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002390:	2b00      	cmp	r3, #0
 8002392:	d050      	beq.n	8002436 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d10e      	bne.n	80023c2 <cliUpdate+0x146>
          {
            line->count--;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023ba:	461a      	mov	r2, r3
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d231      	bcs.n	8002436 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e6:	e013      	b.n	8002410 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ee:	461a      	mov	r2, r3
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f2:	441a      	add	r2, r3
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023fa:	4619      	mov	r1, r3
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	440b      	add	r3, r1
 8002400:	3b01      	subs	r3, #1
 8002402:	69f9      	ldr	r1, [r7, #28]
 8002404:	5c89      	ldrb	r1, [r1, r2]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	3301      	adds	r3, #1
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002410:	7ebb      	ldrb	r3, [r7, #26]
 8002412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002414:	429a      	cmp	r2, r3
 8002416:	dbe7      	blt.n	80023e8 <cliUpdate+0x16c>
            }

            line->count--;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800241e:	3b01      	subs	r3, #1
 8002420:	b2da      	uxtb	r2, r3
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800242e:	461a      	mov	r2, r3
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2100      	movs	r1, #0
 8002434:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8099 	beq.w	8002574 <cliUpdate+0x2f8>
        {
          line->cursor--;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002448:	3b01      	subs	r3, #1
 800244a:	b2da      	uxtb	r2, r3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	4956      	ldr	r1, [pc, #344]	; (80025b0 <cliUpdate+0x334>)
 8002458:	4618      	mov	r0, r3
 800245a:	f001 fd23 	bl	8003ea4 <uartPrintf>
        }
        break;
 800245e:	e089      	b.n	8002574 <cliUpdate+0x2f8>

      default:
        if ((line->count + 1) < line->buf_len)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002466:	3301      	adds	r3, #1
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800246e:	4293      	cmp	r3, r2
 8002470:	f280 8082 	bge.w	8002578 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002480:	429a      	cmp	r2, r3
 8002482:	d124      	bne.n	80024ce <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	1cf9      	adds	r1, r7, #3
 800248a:	2201      	movs	r2, #1
 800248c:	4618      	mov	r0, r3
 800248e:	f001 fcf2 	bl	8003e76 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002498:	461a      	mov	r2, r3
 800249a:	78f9      	ldrb	r1, [r7, #3]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	5499      	strb	r1, [r3, r2]
            line->count++;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024a6:	3301      	adds	r3, #1
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b6:	3301      	adds	r3, #1
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024c6:	461a      	mov	r2, r3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2100      	movs	r1, #0
 80024cc:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024da:	429a      	cmp	r2, r3
 80024dc:	d24c      	bcs.n	8002578 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
 80024f2:	e013      	b.n	800251c <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024fa:	461a      	mov	r2, r3
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	1e5a      	subs	r2, r3, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002508:	4619      	mov	r1, r3
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	1acb      	subs	r3, r1, r3
 800250e:	69f9      	ldr	r1, [r7, #28]
 8002510:	5c89      	ldrb	r1, [r1, r2]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	3301      	adds	r3, #1
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
 800251c:	7e7b      	ldrb	r3, [r7, #25]
 800251e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002520:	429a      	cmp	r2, r3
 8002522:	dbe7      	blt.n	80024f4 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800252a:	461a      	mov	r2, r3
 800252c:	78f9      	ldrb	r1, [r7, #3]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	5499      	strb	r1, [r3, r2]
            line->count++;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002538:	3301      	adds	r3, #1
 800253a:	b2da      	uxtb	r2, r3
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002548:	3301      	adds	r3, #1
 800254a:	b2da      	uxtb	r2, r3
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002558:	461a      	mov	r2, r3
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	2100      	movs	r1, #0
 800255e:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	4913      	ldr	r1, [pc, #76]	; (80025b4 <cliUpdate+0x338>)
 8002568:	4618      	mov	r0, r3
 800256a:	f001 fc9b 	bl	8003ea4 <uartPrintf>
          }
        }
        break;
 800256e:	e003      	b.n	8002578 <cliUpdate+0x2fc>
        break;
 8002570:	bf00      	nop
 8002572:	e002      	b.n	800257a <cliUpdate+0x2fe>
        break;
 8002574:	bf00      	nop
 8002576:	e000      	b.n	800257a <cliUpdate+0x2fe>
        break;
 8002578:	bf00      	nop
    }
  }

  switch(p_cli->state)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7c1b      	ldrb	r3, [r3, #16]
 800257e:	3b01      	subs	r3, #1
 8002580:	2b03      	cmp	r3, #3
 8002582:	f200 80d2 	bhi.w	800272a <cliUpdate+0x4ae>
 8002586:	a201      	add	r2, pc, #4	; (adr r2, 800258c <cliUpdate+0x310>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	0800259d 	.word	0x0800259d
 8002590:	080025a5 	.word	0x080025a5
 8002594:	080025b9 	.word	0x080025b9
 8002598:	08002721 	.word	0x08002721
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	741a      	strb	r2, [r3, #16]
      break;
 80025a2:	e0c2      	b.n	800272a <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2203      	movs	r2, #3
 80025a8:	741a      	strb	r2, [r3, #16]
      break;
 80025aa:	e0be      	b.n	800272a <cliUpdate+0x4ae>
 80025ac:	08014968 	.word	0x08014968
 80025b0:	08014970 	.word	0x08014970
 80025b4:	08014978 	.word	0x08014978

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	2b44      	cmp	r3, #68	; 0x44
 80025c2:	d11a      	bne.n	80025fa <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d015      	beq.n	80025fa <cliUpdate+0x37e>
        {
          line->cursor--;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 80025de:	231b      	movs	r3, #27
 80025e0:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80025e2:	235b      	movs	r3, #91	; 0x5b
 80025e4:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	f107 010c 	add.w	r1, r7, #12
 80025f2:	2203      	movs	r2, #3
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 fc3e 	bl	8003e76 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	2b43      	cmp	r3, #67	; 0x43
 80025fe:	d11d      	bne.n	800263c <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800260c:	429a      	cmp	r2, r3
 800260e:	d215      	bcs.n	800263c <cliUpdate+0x3c0>
        {
          line->cursor++;
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002616:	3301      	adds	r3, #1
 8002618:	b2da      	uxtb	r2, r3
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 8002620:	231b      	movs	r3, #27
 8002622:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8002624:	235b      	movs	r3, #91	; 0x5b
 8002626:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	f107 010c 	add.w	r1, r7, #12
 8002634:	2203      	movs	r2, #3
 8002636:	4618      	mov	r0, r3
 8002638:	f001 fc1d 	bl	8003e76 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	2b41      	cmp	r3, #65	; 0x41
 8002640:	d10c      	bne.n	800265c <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8002642:	2101      	movs	r1, #1
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f8e1 	bl	800280c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002654:	4619      	mov	r1, r3
 8002656:	4610      	mov	r0, r2
 8002658:	f001 fc24 	bl	8003ea4 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	2b42      	cmp	r3, #66	; 0x42
 8002660:	d10c      	bne.n	800267c <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8002662:	2100      	movs	r1, #0
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f8d1 	bl	800280c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	781a      	ldrb	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002674:	4619      	mov	r1, r3
 8002676:	4610      	mov	r0, r2
 8002678:	f001 fc14 	bl	8003ea4 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	2b31      	cmp	r3, #49	; 0x31
 8002680:	d10f      	bne.n	80026a2 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	7818      	ldrb	r0, [r3, #0]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800268c:	461a      	mov	r2, r3
 800268e:	492b      	ldr	r1, [pc, #172]	; (800273c <cliUpdate+0x4c0>)
 8002690:	f001 fc08 	bl	8003ea4 <uartPrintf>
        line->cursor = 0;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2204      	movs	r2, #4
 80026a0:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	2b34      	cmp	r3, #52	; 0x34
 80026a6:	d13f      	bne.n	8002728 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d210      	bcs.n	80026da <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026be:	b29a      	uxth	r2, r3
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	8afa      	ldrh	r2, [r7, #22]
 80026d2:	491b      	ldr	r1, [pc, #108]	; (8002740 <cliUpdate+0x4c4>)
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 fbe5 	bl	8003ea4 <uartPrintf>
        }
        if (line->cursor > line->count)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d910      	bls.n	800270c <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	8afa      	ldrh	r2, [r7, #22]
 8002704:	490d      	ldr	r1, [pc, #52]	; (800273c <cliUpdate+0x4c0>)
 8002706:	4618      	mov	r0, r3
 8002708:	f001 fbcc 	bl	8003ea4 <uartPrintf>
        }
        line->cursor = line->count;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2204      	movs	r2, #4
 800271c:	741a      	strb	r2, [r3, #16]
      }
      break;
 800271e:	e003      	b.n	8002728 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	741a      	strb	r2, [r3, #16]
      break;
 8002726:	e000      	b.n	800272a <cliUpdate+0x4ae>
      break;
 8002728:	bf00      	nop
  }

  cliShowLog(p_cli);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff fcea 	bl	8002104 <cliShowLog>

  return ret;
 8002730:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002734:	4618      	mov	r0, r3
 8002736:	3730      	adds	r7, #48	; 0x30
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	08014984 	.word	0x08014984
 8002740:	0801498c 	.word	0x0801498c

08002744 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
  p_cli->line.cursor  = 0;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	223f      	movs	r2, #63	; 0x3f
 8002760:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
  p_cli->line.buf[0]  = 0;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002786:	461a      	mov	r2, r3
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	015b      	lsls	r3, r3, #5
 800278e:	4413      	add	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	440b      	add	r3, r1
 8002796:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4610      	mov	r0, r2
 800279e:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 80027a2:	2243      	movs	r2, #67	; 0x43
 80027a4:	4619      	mov	r1, r3
 80027a6:	f010 f8b8 	bl	801291a <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d807      	bhi.n	80027c4 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80027ba:	3301      	adds	r3, #1
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80027ca:	b25a      	sxtb	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <cliLineAdd+0x90>)
 80027dc:	fb83 1302 	smull	r1, r3, r3, r2
 80027e0:	1059      	asrs	r1, r3, #1
 80027e2:	17d3      	asrs	r3, r2, #31
 80027e4:	1ac9      	subs	r1, r1, r3
 80027e6:	460b      	mov	r3, r1
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	1ad1      	subs	r1, r2, r3
 80027ee:	b2ca      	uxtb	r2, r1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	66666667 	.word	0x66666667

0800280c <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800281e:	2b00      	cmp	r3, #0
 8002820:	d076      	beq.n	8002910 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7818      	ldrb	r0, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8002836:	461a      	mov	r2, r3
 8002838:	4937      	ldr	r1, [pc, #220]	; (8002918 <cliLineChange+0x10c>)
 800283a:	f001 fb33 	bl	8003ea4 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7818      	ldrb	r0, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8002852:	461a      	mov	r2, r3
 8002854:	4931      	ldr	r1, [pc, #196]	; (800291c <cliLineChange+0x110>)
 8002856:	f001 fb25 	bl	8003ea4 <uartPrintf>
  }


  if (key_up == true)
 800285a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d125      	bne.n	80028ae <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002868:	2b00      	cmp	r3, #0
 800286a:	d006      	beq.n	800287a <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002872:	b25a      	sxtb	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002880:	461a      	mov	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002888:	4413      	add	r3, r2
 800288a:	3b01      	subs	r3, #1
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8002892:	fb93 f1f2 	sdiv	r1, r3, r2
 8002896:	fb01 f202 	mul.w	r2, r1, r2
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	b25a      	sxtb	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	e013      	b.n	80028d6 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80028b4:	3301      	adds	r3, #1
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 80028bc:	fb93 f1f2 	sdiv	r1, r3, r2
 80028c0:	fb01 f202 	mul.w	r2, r1, r2
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	b25a      	sxtb	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80028d4:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	015b      	lsls	r3, r3, #5
 80028e0:	4413      	add	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	4403      	add	r3, r0
 80028e8:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 80028ec:	f201 23e7 	addw	r3, r1, #743	; 0x2e7
 80028f0:	4611      	mov	r1, r2
 80028f2:	2243      	movs	r2, #67	; 0x43
 80028f4:	4618      	mov	r0, r3
 80028f6:	f010 f810 	bl	801291a <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

  p_cli->hist_line_new = false;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800290e:	e000      	b.n	8002912 <cliLineChange+0x106>
    return;
 8002910:	bf00      	nop
}
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	08014984 	.word	0x08014984
 800291c:	08014994 	.word	0x08014994

08002920 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002928:	2300      	movs	r3, #0
 800292a:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f851 	bl	80029d4 <cliParseArgs>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d046      	beq.n	80029c6 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8002938:	4825      	ldr	r0, [pc, #148]	; (80029d0 <cliRunCmd+0xb0>)
 800293a:	f000 f893 	bl	8002a64 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002944:	4618      	mov	r0, r3
 8002946:	f000 f8b1 	bl	8002aac <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	e033      	b.n	80029b8 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	4413      	add	r3, r2
 8002968:	3304      	adds	r3, #4
 800296a:	4619      	mov	r1, r3
 800296c:	f7fd fc38 	bl	80001e0 <strcmp>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d11d      	bne.n	80029b2 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f503 728c 	add.w	r2, r3, #280	; 0x118
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	f202 426c 	addw	r2, r2, #1132	; 0x46c
 80029ac:	4610      	mov	r0, r2
 80029ae:	4798      	blx	r3
        break;
 80029b0:	e009      	b.n	80029c6 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3301      	adds	r3, #1
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80029be:	461a      	mov	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4293      	cmp	r3, r2
 80029c4:	dbc4      	blt.n	8002950 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 80029c6:	7afb      	ldrb	r3, [r7, #11]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	0801499c 	.word	0x0801499c

080029d4 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80029dc:	2300      	movs	r3, #0
 80029de:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 80029f2:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80029fa:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 80029fc:	8afb      	ldrh	r3, [r7, #22]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4413      	add	r3, r2
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002a08:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <cliParseArgs+0x8c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f107 0208 	add.w	r2, r7, #8
 8002a10:	4619      	mov	r1, r3
 8002a12:	6938      	ldr	r0, [r7, #16]
 8002a14:	f00f fef2 	bl	80127fc <strtok_r>
 8002a18:	61b8      	str	r0, [r7, #24]
 8002a1a:	e010      	b.n	8002a3e <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8002a1c:	8afb      	ldrh	r3, [r7, #22]
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	82fa      	strh	r2, [r7, #22]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <cliParseArgs+0x8c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f107 0208 	add.w	r2, r7, #8
 8002a34:	4619      	mov	r1, r3
 8002a36:	2000      	movs	r0, #0
 8002a38:	f00f fee0 	bl	80127fc <strtok_r>
 8002a3c:	61b8      	str	r0, [r7, #24]
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1eb      	bne.n	8002a1c <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	8afa      	ldrh	r2, [r7, #22]
 8002a48:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 8002a4c:	8afb      	ldrh	r3, [r7, #22]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <cliParseArgs+0x82>
  {
    ret = true;
 8002a52:	2301      	movs	r3, #1
 8002a54:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8002a56:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3720      	adds	r7, #32
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000048 	.word	0x20000048

08002a64 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8002a64:	b40f      	push	{r0, r1, r2, r3}
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8002a6c:	f107 031c 	add.w	r3, r7, #28
 8002a70:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <cliPrintf+0x44>)
 8002a74:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f103 0011 	add.w	r0, r3, #17
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a84:	f00f fe6a 	bl	801275c <vsniprintf>
 8002a88:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	7818      	ldrb	r0, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3311      	adds	r3, #17
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	4619      	mov	r1, r3
 8002a96:	f001 f9ee 	bl	8003e76 <uartWrite>
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002aa4:	b004      	add	sp, #16
 8002aa6:	4770      	bx	lr
 8002aa8:	20000740 	.word	0x20000740

08002aac <cliToUpper>:

void cliToUpper(char *str)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	81fb      	strh	r3, [r7, #14]
 8002ab8:	e018      	b.n	8002aec <cliToUpper+0x40>
  {
    str_ch = str[i];
 8002aba:	89fb      	ldrh	r3, [r7, #14]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8002ac4:	7b7b      	ldrb	r3, [r7, #13]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d014      	beq.n	8002af4 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8002aca:	7b7b      	ldrb	r3, [r7, #13]
 8002acc:	2b60      	cmp	r3, #96	; 0x60
 8002ace:	d905      	bls.n	8002adc <cliToUpper+0x30>
 8002ad0:	7b7b      	ldrb	r3, [r7, #13]
 8002ad2:	2b7a      	cmp	r3, #122	; 0x7a
 8002ad4:	d802      	bhi.n	8002adc <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8002ad6:	7b7b      	ldrb	r3, [r7, #13]
 8002ad8:	3b20      	subs	r3, #32
 8002ada:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8002adc:	89fb      	ldrh	r3, [r7, #14]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	7b7a      	ldrb	r2, [r7, #13]
 8002ae4:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002ae6:	89fb      	ldrh	r3, [r7, #14]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	81fb      	strh	r3, [r7, #14]
 8002aec:	89fb      	ldrh	r3, [r7, #14]
 8002aee:	2b0f      	cmp	r3, #15
 8002af0:	d9e3      	bls.n	8002aba <cliToUpper+0xe>
 8002af2:	e000      	b.n	8002af6 <cliToUpper+0x4a>
      break;
 8002af4:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8002af6:	89fb      	ldrh	r3, [r7, #14]
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d105      	bne.n	8002b08 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8002afc:	89fb      	ldrh	r3, [r7, #14]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	4413      	add	r3, r2
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002b22:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <cliArgsGetData+0x4c>)
 8002b24:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d301      	bcc.n	8002b38 <cliArgsGetData+0x24>
  {
    return 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	e00e      	b.n	8002b56 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f00f fccc 	bl	80124e8 <strtoul>
 8002b50:	4603      	mov	r3, r0
 8002b52:	60fb      	str	r3, [r7, #12]

  return ret;
 8002b54:	68fb      	ldr	r3, [r7, #12]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000740 	.word	0x20000740

08002b64 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002b74:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <cliArgsGetFloat+0x54>)
 8002b76:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d302      	bcc.n	8002b8c <cliArgsGetFloat+0x28>
  {
    return 0;
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	e00d      	b.n	8002ba8 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f00f fbcb 	bl	8012338 <strtof>
 8002ba2:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
}
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000740 	.word	0x20000740

08002bbc <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002bca:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <cliArgsGetStr+0x44>)
 8002bcc:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d301      	bcc.n	8002be0 <cliArgsGetStr+0x24>
  {
    return 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e008      	b.n	8002bf2 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60fb      	str	r3, [r7, #12]

  return ret;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000740 	.word	0x20000740

08002c04 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	6039      	str	r1, [r7, #0]
 8002c0e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002c10:	2300      	movs	r3, #0
 8002c12:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <cliArgsIsStr+0x50>)
 8002c16:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d301      	bcc.n	8002c2a <cliArgsIsStr+0x26>
  {
    return 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e010      	b.n	8002c4c <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	6838      	ldr	r0, [r7, #0]
 8002c3c:	f7fd fad0 	bl	80001e0 <strcmp>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <cliArgsIsStr+0x46>
  {
    ret = true;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000740 	.word	0x20000740

08002c58 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <cliKeepLoop+0x28>)
 8002c60:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f001 f8de 	bl	8003e28 <uartAvailable>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <cliKeepLoop+0x1e>
  {
    return true;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8002c76:	2300      	movs	r3, #0
  }
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000740 	.word	0x20000740

08002c84 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8002c92:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <cliAdd+0x90>)
 8002c94:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8002c9c:	2b0f      	cmp	r3, #15
 8002c9e:	d901      	bls.n	8002ca4 <cliAdd+0x20>
  {
    return false;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e032      	b.n	8002d0a <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8002caa:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8002cac:	89fa      	ldrh	r2, [r7, #14]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f00f fe21 	bl	801290a <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8002cc8:	89fa      	ldrh	r2, [r7, #14]
 8002cca:	6939      	ldr	r1, [r7, #16]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8002cde:	89fa      	ldrh	r2, [r7, #14]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4413      	add	r3, r2
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff feda 	bl	8002aac <cliToUpper>

  p_cli->cmd_count++;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8002cfe:	3301      	adds	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f8a3 232a 	strh.w	r2, [r3, #810]	; 0x32a

  return ret;
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000740 	.word	0x20000740

08002d18 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002d20:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <cliShowList+0x60>)
 8002d22:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002d24:	4815      	ldr	r0, [pc, #84]	; (8002d7c <cliShowList+0x64>)
 8002d26:	f7ff fe9d 	bl	8002a64 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8002d2a:	4815      	ldr	r0, [pc, #84]	; (8002d80 <cliShowList+0x68>)
 8002d2c:	f7ff fe9a 	bl	8002a64 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e012      	b.n	8002d5c <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	4413      	add	r3, r2
 8002d48:	3304      	adds	r3, #4
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fe8a 	bl	8002a64 <cliPrintf>
    cliPrintf("\r\n");
 8002d50:	480a      	ldr	r0, [pc, #40]	; (8002d7c <cliShowList+0x64>)
 8002d52:	f7ff fe87 	bl	8002a64 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4293      	cmp	r3, r2
 8002d68:	dbe5      	blt.n	8002d36 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8002d6a:	4806      	ldr	r0, [pc, #24]	; (8002d84 <cliShowList+0x6c>)
 8002d6c:	f7ff fe7a 	bl	8002a64 <cliPrintf>
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000740 	.word	0x20000740
 8002d7c:	0801499c 	.word	0x0801499c
 8002d80:	080149a0 	.word	0x080149a0
 8002d84:	080149c0 	.word	0x080149c0

08002d88 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	; 0x30
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002d90:	2310      	movs	r3, #16
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d103      	bne.n	8002db0 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8002da8:	4840      	ldr	r0, [pc, #256]	; (8002eac <cliMemoryDump+0x124>)
 8002daa:	f7ff fe5b 	bl	8002a64 <cliPrintf>
 8002dae:	e07a      	b.n	8002ea6 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	dd09      	ble.n	8002dca <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	3304      	adds	r3, #4
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f00f fb91 	bl	80124e8 <strtoul>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f00f fb88 	bl	80124e8 <strtoul>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002de0:	4833      	ldr	r0, [pc, #204]	; (8002eb0 <cliMemoryDump+0x128>)
 8002de2:	f7ff fe3f 	bl	8002a64 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dea:	e058      	b.n	8002e9e <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8002dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d104      	bne.n	8002e00 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	4619      	mov	r1, r3
 8002dfa:	482e      	ldr	r0, [pc, #184]	; (8002eb4 <cliMemoryDump+0x12c>)
 8002dfc:	f7ff fe32 	bl	8002a64 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4619      	mov	r1, r3
 8002e06:	482c      	ldr	r0, [pc, #176]	; (8002eb8 <cliMemoryDump+0x130>)
 8002e08:	f7ff fe2c 	bl	8002a64 <cliPrintf>

    if ((idx%4) == 3)
 8002e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0e:	425a      	negs	r2, r3
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	f002 0203 	and.w	r2, r2, #3
 8002e18:	bf58      	it	pl
 8002e1a:	4253      	negpl	r3, r2
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d138      	bne.n	8002e92 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8002e20:	4826      	ldr	r0, [pc, #152]	; (8002ebc <cliMemoryDump+0x134>)
 8002e22:	f7ff fe1f 	bl	8002a64 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	623b      	str	r3, [r7, #32]
 8002e2a:	e02c      	b.n	8002e86 <cliMemoryDump+0xfe>
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002e30:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	e01d      	b.n	8002e74 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8002e38:	f107 020c 	add.w	r2, r7, #12
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	4413      	add	r3, r2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b1f      	cmp	r3, #31
 8002e44:	d910      	bls.n	8002e68 <cliMemoryDump+0xe0>
 8002e46:	f107 020c 	add.w	r2, r7, #12
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b7e      	cmp	r3, #126	; 0x7e
 8002e52:	d809      	bhi.n	8002e68 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8002e54:	f107 020c 	add.w	r2, r7, #12
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4817      	ldr	r0, [pc, #92]	; (8002ec0 <cliMemoryDump+0x138>)
 8002e62:	f7ff fdff 	bl	8002a64 <cliPrintf>
 8002e66:	e002      	b.n	8002e6e <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8002e68:	4816      	ldr	r0, [pc, #88]	; (8002ec4 <cliMemoryDump+0x13c>)
 8002e6a:	f7ff fdfb 	bl	8002a64 <cliPrintf>
        for (i=0;i<4;i++)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3301      	adds	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	ddde      	ble.n	8002e38 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	3301      	adds	r3, #1
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	ddcf      	ble.n	8002e2c <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8002e8c:	480e      	ldr	r0, [pc, #56]	; (8002ec8 <cliMemoryDump+0x140>)
 8002e8e:	f7ff fde9 	bl	8002a64 <cliPrintf>
    }
    addr++;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	3304      	adds	r3, #4
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	dba2      	blt.n	8002dec <cliMemoryDump+0x64>
  }
}
 8002ea6:	3730      	adds	r7, #48	; 0x30
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	080149e0 	.word	0x080149e0
 8002eb0:	080149f4 	.word	0x080149f4
 8002eb4:	080149fc 	.word	0x080149fc
 8002eb8:	08014a08 	.word	0x08014a08
 8002ebc:	08014a10 	.word	0x08014a10
 8002ec0:	08014a14 	.word	0x08014a14
 8002ec4:	08014a18 	.word	0x08014a18
 8002ec8:	08014a1c 	.word	0x08014a1c

08002ecc <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
	bool ret = false;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	71fb      	strb	r3, [r7, #7]

	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8002ed6:	490d      	ldr	r1, [pc, #52]	; (8002f0c <fatfsInit+0x40>)
 8002ed8:	480d      	ldr	r0, [pc, #52]	; (8002f10 <fatfsInit+0x44>)
 8002eda:	f00b fd33 	bl	800e944 <FATFS_LinkDriver>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <fatfsInit+0x2e>
	{
		if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	4909      	ldr	r1, [pc, #36]	; (8002f0c <fatfsInit+0x40>)
 8002ee8:	480a      	ldr	r0, [pc, #40]	; (8002f14 <fatfsInit+0x48>)
 8002eea:	f00a f925 	bl	800d138 <f_mount>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <fatfsInit+0x2e>
		{
			is_init = true;
 8002ef4:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <fatfsInit+0x4c>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
		}
	}

	#ifdef _USE_HW_CLI
		cliAdd("fatfs", cliFatfs);
 8002efa:	4908      	ldr	r1, [pc, #32]	; (8002f1c <fatfsInit+0x50>)
 8002efc:	4808      	ldr	r0, [pc, #32]	; (8002f20 <fatfsInit+0x54>)
 8002efe:	f7ff fec1 	bl	8002c84 <cliAdd>
	#endif

	return ret;
 8002f02:	79fb      	ldrb	r3, [r7, #7]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20000dfc 	.word	0x20000dfc
 8002f10:	08014e84 	.word	0x08014e84
 8002f14:	20000bc8 	.word	0x20000bc8
 8002f18:	20000bc4 	.word	0x20000bc4
 8002f1c:	08002ff9 	.word	0x08002ff9
 8002f20:	08014a2c 	.word	0x08014a2c

08002f24 <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char *path)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b0d6      	sub	sp, #344	; 0x158
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002f2e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002f32:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dir;
	FILINFO fno;

	res = f_opendir(&dir, path);
 8002f34:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002f38:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002f3c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8002f40:	6819      	ldr	r1, [r3, #0]
 8002f42:	4610      	mov	r0, r2
 8002f44:	f00b f871 	bl	800e02a <f_opendir>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	if(res == FR_OK)
 8002f4e:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d144      	bne.n	8002fe0 <fatfsDir+0xbc>
	{
		for(;;)
		{
			res = f_readdir(&dir, &fno);
 8002f56:	f107 0208 	add.w	r2, r7, #8
 8002f5a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f00b f90b 	bl	800e17c <f_readdir>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			if(res != FR_OK || fno.fname[0] == 0)
 8002f6c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d130      	bne.n	8002fd6 <fatfsDir+0xb2>
 8002f74:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002f78:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f7c:	7d9b      	ldrb	r3, [r3, #22]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d029      	beq.n	8002fd6 <fatfsDir+0xb2>
				break;

			if(fno.fattrib & AM_DIR)
 8002f82:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002f86:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f8a:	7a1b      	ldrb	r3, [r3, #8]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00c      	beq.n	8002fae <fatfsDir+0x8a>
			{
				cliPrintf(" %s/%s \n", path, fno.fname);
 8002f94:	f107 0308 	add.w	r3, r7, #8
 8002f98:	f103 0216 	add.w	r2, r3, #22
 8002f9c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002fa0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	4812      	ldr	r0, [pc, #72]	; (8002ff0 <fatfsDir+0xcc>)
 8002fa8:	f7ff fd5c 	bl	8002a64 <cliPrintf>
 8002fac:	e7d3      	b.n	8002f56 <fatfsDir+0x32>
			}
			else
			{
				cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 8002fae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002fb2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f107 0308 	add.w	r3, r7, #8
 8002fbe:	f103 0216 	add.w	r2, r3, #22
 8002fc2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002fc6:	f5a3 71aa 	sub.w	r1, r3, #340	; 0x154
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6809      	ldr	r1, [r1, #0]
 8002fce:	4809      	ldr	r0, [pc, #36]	; (8002ff4 <fatfsDir+0xd0>)
 8002fd0:	f7ff fd48 	bl	8002a64 <cliPrintf>
			res = f_readdir(&dir, &fno);
 8002fd4:	e7bf      	b.n	8002f56 <fatfsDir+0x32>
			}
		}

		f_closedir(&dir);
 8002fd6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f00b f8a8 	bl	800e130 <f_closedir>
	}

	return res;
 8002fe0:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	08014a34 	.word	0x08014a34
 8002ff4:	08014a40 	.word	0x08014a40

08002ff8 <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003004:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003008:	6018      	str	r0, [r3, #0]
	bool ret = false;
 800300a:	2300      	movs	r3, #0
 800300c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267

	if(args->argc == 1 && args->isStr(0, "info") == true)
 8003010:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003014:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d14d      	bne.n	80030bc <cliFatfs+0xc4>
 8003020:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003024:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	4990      	ldr	r1, [pc, #576]	; (8003270 <cliFatfs+0x278>)
 800302e:	2000      	movs	r0, #0
 8003030:	4798      	blx	r3
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d041      	beq.n	80030bc <cliFatfs+0xc4>
	{
		cliPrintf("fatfs init \t: %d\n", is_init);
 8003038:	4b8e      	ldr	r3, [pc, #568]	; (8003274 <cliFatfs+0x27c>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	4619      	mov	r1, r3
 800303e:	488e      	ldr	r0, [pc, #568]	; (8003278 <cliFatfs+0x280>)
 8003040:	f7ff fd10 	bl	8002a64 <cliPrintf>

		if(is_init == true)
 8003044:	4b8b      	ldr	r3, [pc, #556]	; (8003274 <cliFatfs+0x27c>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d034      	beq.n	80030b6 <cliFatfs+0xbe>
			FATFS *fs;
			DWORD fre_clust, fre_sect, tot_sect;
			FRESULT res;

			/* Get volume information and free clusters of drive 1 */
			res = f_getfree("", &fre_clust, &fs);
 800304c:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8003050:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003054:	4619      	mov	r1, r3
 8003056:	4889      	ldr	r0, [pc, #548]	; (800327c <cliFatfs+0x284>)
 8003058:	f00b f8dd 	bl	800e216 <f_getfree>
 800305c:	4603      	mov	r3, r0
 800305e:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if(res == FR_OK)
 8003062:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8003066:	2b00      	cmp	r3, #0
 8003068:	d11f      	bne.n	80030aa <cliFatfs+0xb2>
			{
				/* Get total sectors and free sectors */
				tot_sect = (fs->n_fatent - 2) * fs->csize;
 800306a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	3b02      	subs	r3, #2
 8003072:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8003076:	8952      	ldrh	r2, [r2, #10]
 8003078:	fb02 f303 	mul.w	r3, r2, r3
 800307c:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
				fre_sect = fre_clust * fs->csize;
 8003080:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003084:	895b      	ldrh	r3, [r3, #10]
 8003086:	461a      	mov	r2, r3
 8003088:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800308c:	fb02 f303 	mul.w	r3, r2, r3
 8003090:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

				/* Print the free space (assuming 512 bytes/sector) */
				cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect/2, fre_sect/2);
 8003094:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8003098:	0859      	lsrs	r1, r3, #1
 800309a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	461a      	mov	r2, r3
 80030a2:	4877      	ldr	r0, [pc, #476]	; (8003280 <cliFatfs+0x288>)
 80030a4:	f7ff fcde 	bl	8002a64 <cliPrintf>
 80030a8:	e005      	b.n	80030b6 <cliFatfs+0xbe>
			}
			else
			{
				cliPrintf(" err : %d\n", res);
 80030aa:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80030ae:	4619      	mov	r1, r3
 80030b0:	4874      	ldr	r0, [pc, #464]	; (8003284 <cliFatfs+0x28c>)
 80030b2:	f7ff fcd7 	bl	8002a64 <cliPrintf>
			}
		}

		ret = true;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(args->argc == 1 && args->isStr(0, "dir") == true)
 80030bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80030c0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d11e      	bne.n	800310a <cliFatfs+0x112>
 80030cc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80030d0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	496b      	ldr	r1, [pc, #428]	; (8003288 <cliFatfs+0x290>)
 80030da:	2000      	movs	r0, #0
 80030dc:	4798      	blx	r3
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d012      	beq.n	800310a <cliFatfs+0x112>
	{
		FRESULT res;

		res = fatfsDir("/");
 80030e4:	4869      	ldr	r0, [pc, #420]	; (800328c <cliFatfs+0x294>)
 80030e6:	f7ff ff1d 	bl	8002f24 <fatfsDir>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
		if(res != FR_OK)
 80030f0:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <cliFatfs+0x10c>
		{
			cliPrintf(" err : %d\n", res);
 80030f8:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80030fc:	4619      	mov	r1, r3
 80030fe:	4861      	ldr	r0, [pc, #388]	; (8003284 <cliFatfs+0x28c>)
 8003100:	f7ff fcb0 	bl	8002a64 <cliPrintf>
		}

		ret = true;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(args->argc == 1 && args->isStr(0, "test") == true)
 800310a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800310e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	2b01      	cmp	r3, #1
 8003118:	f040 8095 	bne.w	8003246 <cliFatfs+0x24e>
 800311c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003120:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	4959      	ldr	r1, [pc, #356]	; (8003290 <cliFatfs+0x298>)
 800312a:	2000      	movs	r0, #0
 800312c:	4798      	blx	r3
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8088 	beq.w	8003246 <cliFatfs+0x24e>
	{
		FRESULT fp_ret;
		FIL log_file;
		uint32_t pre_time;

		pre_time = millis();
 8003136:	f7fe fdeb 	bl	8001d10 <millis>
 800313a:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 800313e:	f107 0308 	add.w	r3, r7, #8
 8003142:	220b      	movs	r2, #11
 8003144:	4953      	ldr	r1, [pc, #332]	; (8003294 <cliFatfs+0x29c>)
 8003146:	4618      	mov	r0, r3
 8003148:	f00a f83c 	bl	800d1c4 <f_open>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
		if(fp_ret == FR_OK)
 8003152:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8003156:	2b00      	cmp	r3, #0
 8003158:	d165      	bne.n	8003226 <cliFatfs+0x22e>
		{
			f_printf(&log_file, "test1, ");
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	494e      	ldr	r1, [pc, #312]	; (8003298 <cliFatfs+0x2a0>)
 8003160:	4618      	mov	r0, r3
 8003162:	f00b f985 	bl	800e470 <f_printf>
			f_printf(&log_file, "test2, ");
 8003166:	f107 0308 	add.w	r3, r7, #8
 800316a:	494c      	ldr	r1, [pc, #304]	; (800329c <cliFatfs+0x2a4>)
 800316c:	4618      	mov	r0, r3
 800316e:	f00b f97f 	bl	800e470 <f_printf>
			f_printf(&log_file, "test3, ");
 8003172:	f107 0308 	add.w	r3, r7, #8
 8003176:	494a      	ldr	r1, [pc, #296]	; (80032a0 <cliFatfs+0x2a8>)
 8003178:	4618      	mov	r0, r3
 800317a:	f00b f979 	bl	800e470 <f_printf>
			f_printf(&log_file, ", ");
 800317e:	f107 0308 	add.w	r3, r7, #8
 8003182:	4948      	ldr	r1, [pc, #288]	; (80032a4 <cliFatfs+0x2ac>)
 8003184:	4618      	mov	r0, r3
 8003186:	f00b f973 	bl	800e470 <f_printf>
			f_printf(&log_file, "\n");
 800318a:	f107 0308 	add.w	r3, r7, #8
 800318e:	4946      	ldr	r1, [pc, #280]	; (80032a8 <cliFatfs+0x2b0>)
 8003190:	4618      	mov	r0, r3
 8003192:	f00b f96d 	bl	800e470 <f_printf>

			for(int i=0; i<8; i++)
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 800319c:	e00c      	b.n	80031b8 <cliFatfs+0x1c0>
			{
				f_printf(&log_file, "%d \n", i);
 800319e:	f107 0308 	add.w	r3, r7, #8
 80031a2:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80031a6:	4941      	ldr	r1, [pc, #260]	; (80032ac <cliFatfs+0x2b4>)
 80031a8:	4618      	mov	r0, r3
 80031aa:	f00b f961 	bl	800e470 <f_printf>
			for(int i=0; i<8; i++)
 80031ae:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80031b2:	3301      	adds	r3, #1
 80031b4:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80031b8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80031bc:	2b07      	cmp	r3, #7
 80031be:	ddee      	ble.n	800319e <cliFatfs+0x1a6>
			}

			f_rewind(&log_file);
 80031c0:	f107 0308 	add.w	r3, r7, #8
 80031c4:	2100      	movs	r1, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f00a fd26 	bl	800dc18 <f_lseek>


			UINT len;
			uint8_t data;

			while(cliKeepLoop())
 80031cc:	e01c      	b.n	8003208 <cliFatfs+0x210>
			{
				len = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
				fp_ret = f_read(&log_file, &data, 1, &len);
 80031d4:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80031d8:	f207 213b 	addw	r1, r7, #571	; 0x23b
 80031dc:	f107 0008 	add.w	r0, r7, #8
 80031e0:	2201      	movs	r2, #1
 80031e2:	f00a f9bd 	bl	800d560 <f_read>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

				if(fp_ret != FR_OK)
 80031ec:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10f      	bne.n	8003214 <cliFatfs+0x21c>
				{
					break;
				}

				if(len == 0)
 80031f4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <cliFatfs+0x220>
				{
					break;
				}

				cliPrintf("%c", data);
 80031fc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8003200:	4619      	mov	r1, r3
 8003202:	482b      	ldr	r0, [pc, #172]	; (80032b0 <cliFatfs+0x2b8>)
 8003204:	f7ff fc2e 	bl	8002a64 <cliPrintf>
			while(cliKeepLoop())
 8003208:	f7ff fd26 	bl	8002c58 <cliKeepLoop>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1dd      	bne.n	80031ce <cliFatfs+0x1d6>
 8003212:	e002      	b.n	800321a <cliFatfs+0x222>
					break;
 8003214:	bf00      	nop
 8003216:	e000      	b.n	800321a <cliFatfs+0x222>
					break;
 8003218:	bf00      	nop
			}

			f_close(&log_file);
 800321a:	f107 0308 	add.w	r3, r7, #8
 800321e:	4618      	mov	r0, r3
 8003220:	f00a fcd0 	bl	800dbc4 <f_close>
 8003224:	e002      	b.n	800322c <cliFatfs+0x234>
		}
		else
		{
			cliPrintf("f_open fail\r\n");
 8003226:	4823      	ldr	r0, [pc, #140]	; (80032b4 <cliFatfs+0x2bc>)
 8003228:	f7ff fc1c 	bl	8002a64 <cliPrintf>
		}

		cliPrintf("%d ms\r\n", millis() - pre_time);
 800322c:	f7fe fd70 	bl	8001d10 <millis>
 8003230:	4602      	mov	r2, r0
 8003232:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	4619      	mov	r1, r3
 800323a:	481f      	ldr	r0, [pc, #124]	; (80032b8 <cliFatfs+0x2c0>)
 800323c:	f7ff fc12 	bl	8002a64 <cliPrintf>

		ret = true;
 8003240:	2301      	movs	r3, #1
 8003242:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(ret != true)
 8003246:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800324a:	f083 0301 	eor.w	r3, r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <cliFatfs+0x26e>
	{
		cliPrintf("fatfs info\n");
 8003254:	4819      	ldr	r0, [pc, #100]	; (80032bc <cliFatfs+0x2c4>)
 8003256:	f7ff fc05 	bl	8002a64 <cliPrintf>
		cliPrintf("fatfs dir\n");
 800325a:	4819      	ldr	r0, [pc, #100]	; (80032c0 <cliFatfs+0x2c8>)
 800325c:	f7ff fc02 	bl	8002a64 <cliPrintf>
		cliPrintf("fatfs test\n");
 8003260:	4818      	ldr	r0, [pc, #96]	; (80032c4 <cliFatfs+0x2cc>)
 8003262:	f7ff fbff 	bl	8002a64 <cliPrintf>
	}
}
 8003266:	bf00      	nop
 8003268:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	08014a54 	.word	0x08014a54
 8003274:	20000bc4 	.word	0x20000bc4
 8003278:	08014a5c 	.word	0x08014a5c
 800327c:	08014a70 	.word	0x08014a70
 8003280:	08014a74 	.word	0x08014a74
 8003284:	08014aa8 	.word	0x08014aa8
 8003288:	08014ab4 	.word	0x08014ab4
 800328c:	08014ab8 	.word	0x08014ab8
 8003290:	08014abc 	.word	0x08014abc
 8003294:	08014ac4 	.word	0x08014ac4
 8003298:	08014acc 	.word	0x08014acc
 800329c:	08014ad4 	.word	0x08014ad4
 80032a0:	08014adc 	.word	0x08014adc
 80032a4:	08014ae4 	.word	0x08014ae4
 80032a8:	08014ae8 	.word	0x08014ae8
 80032ac:	08014aec 	.word	0x08014aec
 80032b0:	08014af4 	.word	0x08014af4
 80032b4:	08014af8 	.word	0x08014af8
 80032b8:	08014b08 	.word	0x08014b08
 80032bc:	08014b10 	.word	0x08014b10
 80032c0:	08014b1c 	.word	0x08014b1c
 80032c4:	08014b28 	.word	0x08014b28

080032c8 <gpioInit>:
static void cliGpio(cli_args_t *args);
#endif


bool gpioInit(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
	bool ret = true;
 80032ce:	2301      	movs	r3, #1
 80032d0:	71fb      	strb	r3, [r7, #7]

#ifdef _USE_HW_CLI
	cliAdd("gpio", cliGpio);
 80032d2:	4904      	ldr	r1, [pc, #16]	; (80032e4 <gpioInit+0x1c>)
 80032d4:	4804      	ldr	r0, [pc, #16]	; (80032e8 <gpioInit+0x20>)
 80032d6:	f7ff fcd5 	bl	8002c84 <cliAdd>
#endif

	return ret;
 80032da:	79fb      	ldrb	r3, [r7, #7]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	08003401 	.word	0x08003401
 80032e8:	08014b34 	.word	0x08014b34

080032ec <gpioPinWrite>:

	return ret;
}

void gpioPinWrite(uint8_t ch, bool value)
{
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	460a      	mov	r2, r1
 80032f6:	71fb      	strb	r3, [r7, #7]
 80032f8:	4613      	mov	r3, r2
 80032fa:	71bb      	strb	r3, [r7, #6]
	if(ch >= GPIO_MAX_CH)
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d140      	bne.n	8003384 <gpioPinWrite+0x98>
	{
		return;
	}

	if(value)
 8003302:	79bb      	ldrb	r3, [r7, #6]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01e      	beq.n	8003346 <gpioPinWrite+0x5a>
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8003308:	79fa      	ldrb	r2, [r7, #7]
 800330a:	4920      	ldr	r1, [pc, #128]	; (800338c <gpioPinWrite+0xa0>)
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	79fa      	ldrb	r2, [r7, #7]
 800331a:	491c      	ldr	r1, [pc, #112]	; (800338c <gpioPinWrite+0xa0>)
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	3304      	adds	r3, #4
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	b299      	uxth	r1, r3
 800332c:	79fa      	ldrb	r2, [r7, #7]
 800332e:	4c17      	ldr	r4, [pc, #92]	; (800338c <gpioPinWrite+0xa0>)
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4423      	add	r3, r4
 800333a:	3309      	adds	r3, #9
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	f001 ffb2 	bl	80052a8 <HAL_GPIO_WritePin>
 8003344:	e01f      	b.n	8003386 <gpioPinWrite+0x9a>
	}
	else
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8003346:	79fa      	ldrb	r2, [r7, #7]
 8003348:	4910      	ldr	r1, [pc, #64]	; (800338c <gpioPinWrite+0xa0>)
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	79fa      	ldrb	r2, [r7, #7]
 8003358:	490c      	ldr	r1, [pc, #48]	; (800338c <gpioPinWrite+0xa0>)
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	3304      	adds	r3, #4
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	b299      	uxth	r1, r3
 800336a:	79fa      	ldrb	r2, [r7, #7]
 800336c:	4c07      	ldr	r4, [pc, #28]	; (800338c <gpioPinWrite+0xa0>)
 800336e:	4613      	mov	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4423      	add	r3, r4
 8003378:	330a      	adds	r3, #10
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	f001 ff93 	bl	80052a8 <HAL_GPIO_WritePin>
 8003382:	e000      	b.n	8003386 <gpioPinWrite+0x9a>
		return;
 8003384:	bf00      	nop
	}
}
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	bd90      	pop	{r4, r7, pc}
 800338c:	08014e98 	.word	0x08014e98

08003390 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 800339a:	2300      	movs	r3, #0
 800339c:	73fb      	strb	r3, [r7, #15]

	if(ch >= GPIO_MAX_CH)
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <gpioPinRead+0x18>
	{
		return false;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e024      	b.n	80033f2 <gpioPinRead+0x62>
	}

	if(HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 80033a8:	79fa      	ldrb	r2, [r7, #7]
 80033aa:	4914      	ldr	r1, [pc, #80]	; (80033fc <gpioPinRead+0x6c>)
 80033ac:	4613      	mov	r3, r2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	79fa      	ldrb	r2, [r7, #7]
 80033ba:	4910      	ldr	r1, [pc, #64]	; (80033fc <gpioPinRead+0x6c>)
 80033bc:	4613      	mov	r3, r2
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	3304      	adds	r3, #4
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	4619      	mov	r1, r3
 80033ce:	f001 ff53 	bl	8005278 <HAL_GPIO_ReadPin>
 80033d2:	4603      	mov	r3, r0
 80033d4:	4618      	mov	r0, r3
 80033d6:	79fa      	ldrb	r2, [r7, #7]
 80033d8:	4908      	ldr	r1, [pc, #32]	; (80033fc <gpioPinRead+0x6c>)
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	3309      	adds	r3, #9
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	4298      	cmp	r0, r3
 80033ea:	d101      	bne.n	80033f0 <gpioPinRead+0x60>
	{
		ret = true;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	08014e98 	.word	0x08014e98

08003400 <cliGpio>:


#ifdef _USE_HW_CLI

void cliGpio(cli_args_t *args)
{
 8003400:	b590      	push	{r4, r7, lr}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003408:	2300      	movs	r3, #0
 800340a:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 1 && args->isStr(0, "show") == true)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d129      	bne.n	8003468 <cliGpio+0x68>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	4948      	ldr	r1, [pc, #288]	; (800353c <cliGpio+0x13c>)
 800341a:	2000      	movs	r0, #0
 800341c:	4798      	blx	r3
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d021      	beq.n	8003468 <cliGpio+0x68>
	{
		while(cliKeepLoop())
 8003424:	e019      	b.n	800345a <cliGpio+0x5a>
		{
			for(int i=0; i<GPIO_MAX_CH; i++)
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	e00c      	b.n	8003446 <cliGpio+0x46>
			{
				cliPrintf("%d", gpioPinRead(i));
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ffad 	bl	8003390 <gpioPinRead>
 8003436:	4603      	mov	r3, r0
 8003438:	4619      	mov	r1, r3
 800343a:	4841      	ldr	r0, [pc, #260]	; (8003540 <cliGpio+0x140>)
 800343c:	f7ff fb12 	bl	8002a64 <cliPrintf>
			for(int i=0; i<GPIO_MAX_CH; i++)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	3301      	adds	r3, #1
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	ddef      	ble.n	800342c <cliGpio+0x2c>
			}
			cliPrintf("\n");
 800344c:	483d      	ldr	r0, [pc, #244]	; (8003544 <cliGpio+0x144>)
 800344e:	f7ff fb09 	bl	8002a64 <cliPrintf>
			delay(300);
 8003452:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003456:	f7fe fc50 	bl	8001cfa <delay>
		while(cliKeepLoop())
 800345a:	f7ff fbfd 	bl	8002c58 <cliKeepLoop>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e0      	bne.n	8003426 <cliGpio+0x26>
		}

		ret = true;
 8003464:	2301      	movs	r3, #1
 8003466:	75fb      	strb	r3, [r7, #23]
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d124      	bne.n	80034ba <cliGpio+0xba>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	4934      	ldr	r1, [pc, #208]	; (8003548 <cliGpio+0x148>)
 8003476:	2000      	movs	r0, #0
 8003478:	4798      	blx	r3
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01c      	beq.n	80034ba <cliGpio+0xba>
	{
		uint8_t ch;

		ch = (uint8_t)args->getData(1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2001      	movs	r0, #1
 8003486:	4798      	blx	r3
 8003488:	4603      	mov	r3, r0
 800348a:	73fb      	strb	r3, [r7, #15]

		while(cliKeepLoop())
 800348c:	e00e      	b.n	80034ac <cliGpio+0xac>
		{
			cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 800348e:	7bfc      	ldrb	r4, [r7, #15]
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff ff7c 	bl	8003390 <gpioPinRead>
 8003498:	4603      	mov	r3, r0
 800349a:	461a      	mov	r2, r3
 800349c:	4621      	mov	r1, r4
 800349e:	482b      	ldr	r0, [pc, #172]	; (800354c <cliGpio+0x14c>)
 80034a0:	f7ff fae0 	bl	8002a64 <cliPrintf>
			delay(300);
 80034a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80034a8:	f7fe fc27 	bl	8001cfa <delay>
		while(cliKeepLoop())
 80034ac:	f7ff fbd4 	bl	8002c58 <cliKeepLoop>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1eb      	bne.n	800348e <cliGpio+0x8e>
		}

		ret = true;
 80034b6:	2301      	movs	r3, #1
 80034b8:	75fb      	strb	r3, [r7, #23]
	}

	if(args->argc == 3 && args->isStr(0, "write") == true)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d126      	bne.n	8003510 <cliGpio+0x110>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	4922      	ldr	r1, [pc, #136]	; (8003550 <cliGpio+0x150>)
 80034c8:	2000      	movs	r0, #0
 80034ca:	4798      	blx	r3
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d01e      	beq.n	8003510 <cliGpio+0x110>
	{
		uint8_t ch;
		uint8_t data;

		ch = (uint8_t)args->getData(1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2001      	movs	r0, #1
 80034d8:	4798      	blx	r3
 80034da:	4603      	mov	r3, r0
 80034dc:	73bb      	strb	r3, [r7, #14]
		data = (uint8_t)args->getData(2);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2002      	movs	r0, #2
 80034e4:	4798      	blx	r3
 80034e6:	4603      	mov	r3, r0
 80034e8:	737b      	strb	r3, [r7, #13]

		gpioPinWrite(ch, data);
 80034ea:	7b7b      	ldrb	r3, [r7, #13]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	7bbb      	ldrb	r3, [r7, #14]
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fef6 	bl	80032ec <gpioPinWrite>

		cliPrintf("gpio write %d : %d\n", ch, data);
 8003500:	7bbb      	ldrb	r3, [r7, #14]
 8003502:	7b7a      	ldrb	r2, [r7, #13]
 8003504:	4619      	mov	r1, r3
 8003506:	4813      	ldr	r0, [pc, #76]	; (8003554 <cliGpio+0x154>)
 8003508:	f7ff faac 	bl	8002a64 <cliPrintf>

		ret = true;
 800350c:	2301      	movs	r3, #1
 800350e:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	f083 0301 	eor.w	r3, r3, #1
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <cliGpio+0x132>
	{
		cliPrintf("gpio show\n");
 800351c:	480e      	ldr	r0, [pc, #56]	; (8003558 <cliGpio+0x158>)
 800351e:	f7ff faa1 	bl	8002a64 <cliPrintf>
		cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8003522:	2100      	movs	r1, #0
 8003524:	480d      	ldr	r0, [pc, #52]	; (800355c <cliGpio+0x15c>)
 8003526:	f7ff fa9d 	bl	8002a64 <cliPrintf>
		cliPrintf("gpio write ch[0~%d]\n", GPIO_MAX_CH-1);
 800352a:	2100      	movs	r1, #0
 800352c:	480c      	ldr	r0, [pc, #48]	; (8003560 <cliGpio+0x160>)
 800352e:	f7ff fa99 	bl	8002a64 <cliPrintf>
	}
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	bd90      	pop	{r4, r7, pc}
 800353a:	bf00      	nop
 800353c:	08014b3c 	.word	0x08014b3c
 8003540:	08014b44 	.word	0x08014b44
 8003544:	08014b48 	.word	0x08014b48
 8003548:	08014b4c 	.word	0x08014b4c
 800354c:	08014b54 	.word	0x08014b54
 8003550:	08014b68 	.word	0x08014b68
 8003554:	08014b70 	.word	0x08014b70
 8003558:	08014b84 	.word	0x08014b84
 800355c:	08014b90 	.word	0x08014b90
 8003560:	08014ba4 	.word	0x08014ba4

08003564 <ledInit>:
				{GPIOC, GPIO_PIN_13, GPIO_PIN_RESET, GPIO_PIN_SET},
		};


bool ledInit(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
	for(int i=0; i<LED_MAX_CH; i++)
 800356a:	2300      	movs	r3, #0
 800356c:	607b      	str	r3, [r7, #4]
 800356e:	e007      	b.n	8003580 <ledInit+0x1c>
	{
		ledOff(i);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f813 	bl	80035a0 <ledOff>
	for(int i=0; i<LED_MAX_CH; i++)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3301      	adds	r3, #1
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	ddf4      	ble.n	8003570 <ledInit+0xc>
	}

#ifdef _USE_HW_CLI
	cliAdd("led", cliLed);
 8003586:	4904      	ldr	r1, [pc, #16]	; (8003598 <ledInit+0x34>)
 8003588:	4804      	ldr	r0, [pc, #16]	; (800359c <ledInit+0x38>)
 800358a:	f7ff fb7b 	bl	8002c84 <cliAdd>
#endif

	return true;
 800358e:	2301      	movs	r3, #1
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	08003619 	.word	0x08003619
 800359c:	08014bbc 	.word	0x08014bbc

080035a0 <ledOff>:

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d111      	bne.n	80035d4 <ledOff+0x34>

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <ledOff+0x3c>)
 80035b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	4a08      	ldr	r2, [pc, #32]	; (80035dc <ledOff+0x3c>)
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4413      	add	r3, r2
 80035c0:	8899      	ldrh	r1, [r3, #4]
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	4a05      	ldr	r2, [pc, #20]	; (80035dc <ledOff+0x3c>)
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4413      	add	r3, r2
 80035ca:	79db      	ldrb	r3, [r3, #7]
 80035cc:	461a      	mov	r2, r3
 80035ce:	f001 fe6b 	bl	80052a8 <HAL_GPIO_WritePin>
 80035d2:	e000      	b.n	80035d6 <ledOff+0x36>
	if(ch >= LED_MAX_CH) return;
 80035d4:	bf00      	nop
}
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	2000004c 	.word	0x2000004c

080035e0 <ledToggle>:

void ledToggle(uint8_t ch)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10d      	bne.n	800360c <ledToggle+0x2c>

	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	4a08      	ldr	r2, [pc, #32]	; (8003614 <ledToggle+0x34>)
 80035f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	4906      	ldr	r1, [pc, #24]	; (8003614 <ledToggle+0x34>)
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	440b      	add	r3, r1
 8003600:	889b      	ldrh	r3, [r3, #4]
 8003602:	4619      	mov	r1, r3
 8003604:	4610      	mov	r0, r2
 8003606:	f001 fe68 	bl	80052da <HAL_GPIO_TogglePin>
 800360a:	e000      	b.n	800360e <ledToggle+0x2e>
	if(ch >= LED_MAX_CH) return;
 800360c:	bf00      	nop
}
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	2000004c 	.word	0x2000004c

08003618 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003620:	2300      	movs	r3, #0
 8003622:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 3 && args->isStr(0, "toggle") == true)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	2b03      	cmp	r3, #3
 800362a:	d133      	bne.n	8003694 <cliLed+0x7c>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	491f      	ldr	r1, [pc, #124]	; (80036b0 <cliLed+0x98>)
 8003632:	2000      	movs	r0, #0
 8003634:	4798      	blx	r3
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d02b      	beq.n	8003694 <cliLed+0x7c>
	{
		uint8_t led_ch;
		uint32_t toggle_time;
		uint32_t pre_time;

		led_ch = (uint8_t)args->getData(1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2001      	movs	r0, #1
 8003642:	4798      	blx	r3
 8003644:	4603      	mov	r3, r0
 8003646:	75bb      	strb	r3, [r7, #22]
		toggle_time = (uint32_t)args->getData(2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2002      	movs	r0, #2
 800364e:	4798      	blx	r3
 8003650:	4603      	mov	r3, r0
 8003652:	60fb      	str	r3, [r7, #12]

		if(led_ch > 0)
 8003654:	7dbb      	ldrb	r3, [r7, #22]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <cliLed+0x48>
		{
			led_ch--;
 800365a:	7dbb      	ldrb	r3, [r7, #22]
 800365c:	3b01      	subs	r3, #1
 800365e:	75bb      	strb	r3, [r7, #22]
		}

		pre_time = millis();
 8003660:	f7fe fb56 	bl	8001d10 <millis>
 8003664:	6138      	str	r0, [r7, #16]
		while(cliKeepLoop())
 8003666:	e00e      	b.n	8003686 <cliLed+0x6e>
		{
			if(millis() - pre_time >= toggle_time)
 8003668:	f7fe fb52 	bl	8001d10 <millis>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	429a      	cmp	r2, r3
 8003676:	d806      	bhi.n	8003686 <cliLed+0x6e>
			{
				pre_time = millis();
 8003678:	f7fe fb4a 	bl	8001d10 <millis>
 800367c:	6138      	str	r0, [r7, #16]
				ledToggle(led_ch);
 800367e:	7dbb      	ldrb	r3, [r7, #22]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ffad 	bl	80035e0 <ledToggle>
		while(cliKeepLoop())
 8003686:	f7ff fae7 	bl	8002c58 <cliKeepLoop>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1eb      	bne.n	8003668 <cliLed+0x50>
			}
		}

		ret = true;
 8003690:	2301      	movs	r3, #1
 8003692:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	f083 0301 	eor.w	r3, r3, #1
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <cliLed+0x90>
	{
		cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 80036a0:	2101      	movs	r1, #1
 80036a2:	4804      	ldr	r0, [pc, #16]	; (80036b4 <cliLed+0x9c>)
 80036a4:	f7ff f9de 	bl	8002a64 <cliPrintf>
	}
}
 80036a8:	bf00      	nop
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	08014bc0 	.word	0x08014bc0
 80036b4:	08014bc8 	.word	0x08014bc8

080036b8 <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
	bool ret = false;
 80036be:	2300      	movs	r3, #0
 80036c0:	71fb      	strb	r3, [r7, #7]

  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <sdInit+0x68>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	611a      	str	r2, [r3, #16]

	is_detected = false;
 80036c8:	4b16      	ldr	r3, [pc, #88]	; (8003724 <sdInit+0x6c>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]
	if(gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 80036ce:	2000      	movs	r0, #0
 80036d0:	f7ff fe5e 	bl	8003390 <gpioPinRead>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <sdInit+0x28>
	{
		is_detected = true;
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <sdInit+0x6c>)
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
	}

	if(is_detected == true)
 80036e0:	4b10      	ldr	r3, [pc, #64]	; (8003724 <sdInit+0x6c>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00f      	beq.n	8003708 <sdInit+0x50>
	{
		if(HAL_SD_Init(&hsd) == HAL_OK)
 80036e8:	480d      	ldr	r0, [pc, #52]	; (8003720 <sdInit+0x68>)
 80036ea:	f003 fc91 	bl	8007010 <HAL_SD_Init>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d109      	bne.n	8003708 <sdInit+0x50>
		{
			if(HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 80036f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036f8:	4809      	ldr	r0, [pc, #36]	; (8003720 <sdInit+0x68>)
 80036fa:	f004 fa6b 	bl	8007bd4 <HAL_SD_ConfigWideBusOperation>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <sdInit+0x50>
			{
				ret = true;
 8003704:	2301      	movs	r3, #1
 8003706:	71fb      	strb	r3, [r7, #7]
			}
		}
	}

	is_init = ret;
 8003708:	4a07      	ldr	r2, [pc, #28]	; (8003728 <sdInit+0x70>)
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	7013      	strb	r3, [r2, #0]

	#ifdef _USE_HW_CLI
		cliAdd("sd", cliSd);
 800370e:	4907      	ldr	r1, [pc, #28]	; (800372c <sdInit+0x74>)
 8003710:	4807      	ldr	r0, [pc, #28]	; (8003730 <sdInit+0x78>)
 8003712:	f7ff fab7 	bl	8002c84 <cliAdd>
	#endif

	return ret;
 8003716:	79fb      	ldrb	r3, [r7, #7]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20000338 	.word	0x20000338
 8003724:	20000e01 	.word	0x20000e01
 8003728:	20000e00 	.word	0x20000e00
 800372c:	08003a01 	.word	0x08003a01
 8003730:	08014be8 	.word	0x08014be8

08003734 <sdIsInit>:

	return ret;
}

bool sdIsInit(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
	return is_init;
 8003738:	4b03      	ldr	r3, [pc, #12]	; (8003748 <sdIsInit+0x14>)
 800373a:	781b      	ldrb	r3, [r3, #0]
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20000e00 	.word	0x20000e00

0800374c <sdIsDetected>:

bool sdIsDetected(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
	if(gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8003750:	2000      	movs	r0, #0
 8003752:	f7ff fe1d 	bl	8003390 <gpioPinRead>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <sdIsDetected+0x18>
	{
		is_detected = true;
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <sdIsDetected+0x28>)
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	e002      	b.n	800376a <sdIsDetected+0x1e>
	}
	else
	{
		is_detected = false;
 8003764:	4b03      	ldr	r3, [pc, #12]	; (8003774 <sdIsDetected+0x28>)
 8003766:	2200      	movs	r2, #0
 8003768:	701a      	strb	r2, [r3, #0]
	}

	return is_detected;
 800376a:	4b02      	ldr	r3, [pc, #8]	; (8003774 <sdIsDetected+0x28>)
 800376c:	781b      	ldrb	r3, [r3, #0]
}
 800376e:	4618      	mov	r0, r3
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000e01 	.word	0x20000e01

08003778 <sdGetInfo>:

bool sdGetInfo(sd_info_t *p_info)
{
 8003778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800377c:	b08c      	sub	sp, #48	; 0x30
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003782:	2300      	movs	r3, #0
 8003784:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	sd_info_t *p_sd_info = (sd_info_t *)p_info;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_SD_CardInfoTypeDef card_info;

	if(is_init == true)
 800378c:	4b24      	ldr	r3, [pc, #144]	; (8003820 <sdGetInfo+0xa8>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d03d      	beq.n	8003810 <sdGetInfo+0x98>
	{
		HAL_SD_GetCardInfo(&hsd, &card_info);
 8003794:	f107 0308 	add.w	r3, r7, #8
 8003798:	4619      	mov	r1, r3
 800379a:	4822      	ldr	r0, [pc, #136]	; (8003824 <sdGetInfo+0xac>)
 800379c:	f004 f9ee 	bl	8007b7c <HAL_SD_GetCardInfo>

		p_sd_info->card_type 					= card_info.CardType;
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 80037c4:	6a3a      	ldr	r2, [r7, #32]
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 80037ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t) p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2200      	movs	r2, #0
 80037d6:	469a      	mov	sl, r3
 80037d8:	4693      	mov	fp, r2
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	2200      	movs	r2, #0
 80037e0:	4698      	mov	r8, r3
 80037e2:	4691      	mov	r9, r2
 80037e4:	fb08 f20b 	mul.w	r2, r8, fp
 80037e8:	fb0a f309 	mul.w	r3, sl, r9
 80037ec:	4413      	add	r3, r2
 80037ee:	fbaa 4508 	umull	r4, r5, sl, r8
 80037f2:	442b      	add	r3, r5
 80037f4:	461d      	mov	r5, r3
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	0d22      	lsrs	r2, r4, #20
 8003800:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8003804:	0d2b      	lsrs	r3, r5, #20
 8003806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003808:	621a      	str	r2, [r3, #32]

    ret = true;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	return ret;
 8003810:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003814:	4618      	mov	r0, r3
 8003816:	3730      	adds	r7, #48	; 0x30
 8003818:	46bd      	mov	sp, r7
 800381a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800381e:	bf00      	nop
 8003820:	20000e00 	.word	0x20000e00
 8003824:	20000338 	.word	0x20000338

08003828 <sdIsBusy>:

bool sdIsBusy(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
	bool is_busy;

	if(HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER)
 800382e:	4808      	ldr	r0, [pc, #32]	; (8003850 <sdIsBusy+0x28>)
 8003830:	f004 fa6a 	bl	8007d08 <HAL_SD_GetCardState>
 8003834:	4603      	mov	r3, r0
 8003836:	2b04      	cmp	r3, #4
 8003838:	d102      	bne.n	8003840 <sdIsBusy+0x18>
	{
		is_busy = false;
 800383a:	2300      	movs	r3, #0
 800383c:	71fb      	strb	r3, [r7, #7]
 800383e:	e001      	b.n	8003844 <sdIsBusy+0x1c>
	}
	else
	{
		is_busy = true;
 8003840:	2301      	movs	r3, #1
 8003842:	71fb      	strb	r3, [r7, #7]
	}

	return is_busy;
 8003844:	79fb      	ldrb	r3, [r7, #7]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000338 	.word	0x20000338

08003854 <sdIsReady>:

bool sdIsReady(uint32_t timeout)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	uint32_t pre_time;

	pre_time = millis();
 800385c:	f7fe fa58 	bl	8001d10 <millis>
 8003860:	60f8      	str	r0, [r7, #12]
	while(millis() - pre_time < timeout)
 8003862:	e009      	b.n	8003878 <sdIsReady+0x24>
	{
		if(sdIsBusy() == false)
 8003864:	f7ff ffe0 	bl	8003828 <sdIsBusy>
 8003868:	4603      	mov	r3, r0
 800386a:	f083 0301 	eor.w	r3, r3, #1
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <sdIsReady+0x24>
		{
			return true;
 8003874:	2301      	movs	r3, #1
 8003876:	e008      	b.n	800388a <sdIsReady+0x36>
	while(millis() - pre_time < timeout)
 8003878:	f7fe fa4a 	bl	8001d10 <millis>
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	429a      	cmp	r2, r3
 8003886:	d8ed      	bhi.n	8003864 <sdIsReady+0x10>
		}
	}

	return false;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <sdReadBlocks>:

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
	bool ret = false;
 80038a2:	2300      	movs	r3, #0
 80038a4:	75fb      	strb	r3, [r7, #23]
	uint32_t pre_time;

	is_rx_done = false;
 80038a6:	4b1e      	ldr	r3, [pc, #120]	; (8003920 <sdReadBlocks+0x8c>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
	if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	481c      	ldr	r0, [pc, #112]	; (8003924 <sdReadBlocks+0x90>)
 80038b4:	f003 fc5c 	bl	8007170 <HAL_SD_ReadBlocks_DMA>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d12a      	bne.n	8003914 <sdReadBlocks+0x80>
	{
		pre_time = millis();
 80038be:	f7fe fa27 	bl	8001d10 <millis>
 80038c2:	6138      	str	r0, [r7, #16]
		while(is_rx_done == false)
 80038c4:	e007      	b.n	80038d6 <sdReadBlocks+0x42>
		{
			if(millis() - pre_time >= timeout_ms)
 80038c6:	f7fe fa23 	bl	8001d10 <millis>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d908      	bls.n	80038e8 <sdReadBlocks+0x54>
		while(is_rx_done == false)
 80038d6:	4b12      	ldr	r3, [pc, #72]	; (8003920 <sdReadBlocks+0x8c>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f083 0301 	eor.w	r3, r3, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1ef      	bne.n	80038c6 <sdReadBlocks+0x32>
 80038e6:	e00d      	b.n	8003904 <sdReadBlocks+0x70>
			{
				break;
 80038e8:	bf00      	nop
			}
		}

		while(sdIsBusy() == true)
 80038ea:	e00b      	b.n	8003904 <sdReadBlocks+0x70>
			{
				if(millis() - pre_time >= timeout_ms)
 80038ec:	f7fe fa10 	bl	8001d10 <millis>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d803      	bhi.n	8003904 <sdReadBlocks+0x70>
				{
					is_rx_done = false;
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <sdReadBlocks+0x8c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	701a      	strb	r2, [r3, #0]
					break;
 8003902:	e004      	b.n	800390e <sdReadBlocks+0x7a>
		while(sdIsBusy() == true)
 8003904:	f7ff ff90 	bl	8003828 <sdIsBusy>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1ee      	bne.n	80038ec <sdReadBlocks+0x58>
				}
			}

			ret = is_rx_done;
 800390e:	4b04      	ldr	r3, [pc, #16]	; (8003920 <sdReadBlocks+0x8c>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003914:	7dfb      	ldrb	r3, [r7, #23]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000e02 	.word	0x20000e02
 8003924:	20000338 	.word	0x20000338

08003928 <sdWriteBlocks>:

bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
	bool ret = false;
 8003936:	2300      	movs	r3, #0
 8003938:	75fb      	strb	r3, [r7, #23]
	uint32_t pre_time;

	is_tx_done = false;
 800393a:	4b1f      	ldr	r3, [pc, #124]	; (80039b8 <sdWriteBlocks+0x90>)
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
	if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	481d      	ldr	r0, [pc, #116]	; (80039bc <sdWriteBlocks+0x94>)
 8003948:	f003 fcf4 	bl	8007334 <HAL_SD_WriteBlocks_DMA>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d12d      	bne.n	80039ae <sdWriteBlocks+0x86>
	{
		pre_time = millis();
 8003952:	f7fe f9dd 	bl	8001d10 <millis>
 8003956:	6138      	str	r0, [r7, #16]
		while(is_tx_done == false)
 8003958:	e007      	b.n	800396a <sdWriteBlocks+0x42>
		{
			if(millis() - pre_time >= timeout_ms)
 800395a:	f7fe f9d9 	bl	8001d10 <millis>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d908      	bls.n	800397c <sdWriteBlocks+0x54>
		while(is_tx_done == false)
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <sdWriteBlocks+0x90>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f083 0301 	eor.w	r3, r3, #1
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1ef      	bne.n	800395a <sdWriteBlocks+0x32>
 800397a:	e000      	b.n	800397e <sdWriteBlocks+0x56>
			{
				break;
 800397c:	bf00      	nop
			}
		}

		pre_time = millis();
 800397e:	f7fe f9c7 	bl	8001d10 <millis>
 8003982:	6138      	str	r0, [r7, #16]
		while(sdIsBusy() == true)
 8003984:	e00b      	b.n	800399e <sdWriteBlocks+0x76>
		{
			if(millis() - pre_time >= timeout_ms)
 8003986:	f7fe f9c3 	bl	8001d10 <millis>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d803      	bhi.n	800399e <sdWriteBlocks+0x76>
			{
				is_tx_done = false;
 8003996:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <sdWriteBlocks+0x90>)
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
				break;
 800399c:	e004      	b.n	80039a8 <sdWriteBlocks+0x80>
		while(sdIsBusy() == true)
 800399e:	f7ff ff43 	bl	8003828 <sdIsBusy>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1ee      	bne.n	8003986 <sdWriteBlocks+0x5e>
			}
		}

		ret = is_tx_done;
 80039a8:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <sdWriteBlocks+0x90>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000e03 	.word	0x20000e03
 80039bc:	20000338 	.word	0x20000338

080039c0 <HAL_SD_TxCpltCallback>:
	return ret;
}


__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	is_tx_done = true;
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <HAL_SD_TxCpltCallback+0x1c>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	701a      	strb	r2, [r3, #0]
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000e03 	.word	0x20000e03

080039e0 <HAL_SD_RxCpltCallback>:

__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	is_rx_done = true;
 80039e8:	4b04      	ldr	r3, [pc, #16]	; (80039fc <HAL_SD_RxCpltCallback+0x1c>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	701a      	strb	r2, [r3, #0]
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20000e02 	.word	0x20000e02

08003a00 <cliSd>:

#ifdef _USE_HW_CLI

void cliSd(cli_args_t *args)
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003a0c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003a10:	6018      	str	r0, [r3, #0]
	bool ret = false;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

	if(args->argc == 1 && args->isStr(0, "info") == true)
 8003a18:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003a1c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	f040 8094 	bne.w	8003b52 <cliSd+0x152>
 8003a2a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003a2e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	497a      	ldr	r1, [pc, #488]	; (8003c20 <cliSd+0x220>)
 8003a38:	2000      	movs	r0, #0
 8003a3a:	4798      	blx	r3
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8087 	beq.w	8003b52 <cliSd+0x152>
	{
		sd_info_t sd_info;

		cliPrintf("sd init : %d\n", is_init);
 8003a44:	4b77      	ldr	r3, [pc, #476]	; (8003c24 <cliSd+0x224>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4877      	ldr	r0, [pc, #476]	; (8003c28 <cliSd+0x228>)
 8003a4c:	f7ff f80a 	bl	8002a64 <cliPrintf>
		cliPrintf("sd connected : %d\n", is_detected);
 8003a50:	4b76      	ldr	r3, [pc, #472]	; (8003c2c <cliSd+0x22c>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	4619      	mov	r1, r3
 8003a56:	4876      	ldr	r0, [pc, #472]	; (8003c30 <cliSd+0x230>)
 8003a58:	f7ff f804 	bl	8002a64 <cliPrintf>

		if(is_init == true)
 8003a5c:	4b71      	ldr	r3, [pc, #452]	; (8003c24 <cliSd+0x224>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d073      	beq.n	8003b4c <cliSd+0x14c>
		{
			if(sdGetInfo(&sd_info) == true)
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fe85 	bl	8003778 <sdGetInfo>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d06b      	beq.n	8003b4c <cliSd+0x14c>
			{
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 8003a74:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003a78:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	486c      	ldr	r0, [pc, #432]	; (8003c34 <cliSd+0x234>)
 8003a82:	f7fe ffef 	bl	8002a64 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 8003a86:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003a8a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4619      	mov	r1, r3
 8003a92:	4869      	ldr	r0, [pc, #420]	; (8003c38 <cliSd+0x238>)
 8003a94:	f7fe ffe6 	bl	8002a64 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 8003a98:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003a9c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4865      	ldr	r0, [pc, #404]	; (8003c3c <cliSd+0x23c>)
 8003aa6:	f7fe ffdd 	bl	8002a64 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 8003aaa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003aae:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4862      	ldr	r0, [pc, #392]	; (8003c40 <cliSd+0x240>)
 8003ab8:	f7fe ffd4 	bl	8002a64 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 8003abc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003ac0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	485e      	ldr	r0, [pc, #376]	; (8003c44 <cliSd+0x244>)
 8003aca:	f7fe ffcb 	bl	8002a64 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 8003ace:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003ad2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	485b      	ldr	r0, [pc, #364]	; (8003c48 <cliSd+0x248>)
 8003adc:	f7fe ffc2 	bl	8002a64 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 8003ae0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003ae4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	4619      	mov	r1, r3
 8003aec:	4857      	ldr	r0, [pc, #348]	; (8003c4c <cliSd+0x24c>)
 8003aee:	f7fe ffb9 	bl	8002a64 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 8003af2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003af6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	4619      	mov	r1, r3
 8003afe:	4854      	ldr	r0, [pc, #336]	; (8003c50 <cliSd+0x250>)
 8003b00:	f7fe ffb0 	bl	8002a64 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 8003b04:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003b08:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003b0c:	6a18      	ldr	r0, [r3, #32]
 8003b0e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003b12:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	0a9c      	lsrs	r4, r3, #10
 8003b1a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003b1e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003b22:	6a1a      	ldr	r2, [r3, #32]
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	0a99      	lsrs	r1, r3, #10
 8003b2e:	4b49      	ldr	r3, [pc, #292]	; (8003c54 <cliSd+0x254>)
 8003b30:	fba3 2301 	umull	r2, r3, r3, r1
 8003b34:	08da      	lsrs	r2, r3, #3
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	1aca      	subs	r2, r1, r3
 8003b40:	4613      	mov	r3, r2
 8003b42:	4622      	mov	r2, r4
 8003b44:	4601      	mov	r1, r0
 8003b46:	4844      	ldr	r0, [pc, #272]	; (8003c58 <cliSd+0x258>)
 8003b48:	f7fe ff8c 	bl	8002a64 <cliPrintf>
			}
		}

		ret = true;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 8003b52:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003b56:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d147      	bne.n	8003bf2 <cliSd+0x1f2>
 8003b62:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003b66:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	493b      	ldr	r1, [pc, #236]	; (8003c5c <cliSd+0x25c>)
 8003b70:	2000      	movs	r0, #0
 8003b72:	4798      	blx	r3
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d03b      	beq.n	8003bf2 <cliSd+0x1f2>
	{
		uint32_t number;
		uint32_t buf[512/4];

		number = args->getData(1);
 8003b7a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003b7e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2001      	movs	r0, #1
 8003b88:	4798      	blx	r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

		if(sdReadBlocks(number, (uint8_t *)buf, 1, 1000) == true)
 8003b90:	f107 010c 	add.w	r1, r7, #12
 8003b94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8003b9e:	f7ff fe79 	bl	8003894 <sdReadBlocks>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01e      	beq.n	8003be6 <cliSd+0x1e6>
		{
			for(int i=0; i<512/4; i++)
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003bae:	e015      	b.n	8003bdc <cliSd+0x1dc>
			{
				cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 8003bb0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003bb4:	0099      	lsls	r1, r3, #2
 8003bb6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003bba:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003bbe:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8003bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc6:	460a      	mov	r2, r1
 8003bc8:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8003bcc:	4824      	ldr	r0, [pc, #144]	; (8003c60 <cliSd+0x260>)
 8003bce:	f7fe ff49 	bl	8002a64 <cliPrintf>
			for(int i=0; i<512/4; i++)
 8003bd2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003bdc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003be0:	2b7f      	cmp	r3, #127	; 0x7f
 8003be2:	dde5      	ble.n	8003bb0 <cliSd+0x1b0>
 8003be4:	e002      	b.n	8003bec <cliSd+0x1ec>
			}
		}
		else
		{
			cliPrintf("sdRead Fail\n");
 8003be6:	481f      	ldr	r0, [pc, #124]	; (8003c64 <cliSd+0x264>)
 8003be8:	f7fe ff3c 	bl	8002a64 <cliPrintf>
		}

		ret = true;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}

	if(ret != true)
 8003bf2:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8003bf6:	f083 0301 	eor.w	r3, r3, #1
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d009      	beq.n	8003c14 <cliSd+0x214>
	{
		cliPrintf("sd info\n");
 8003c00:	4819      	ldr	r0, [pc, #100]	; (8003c68 <cliSd+0x268>)
 8003c02:	f7fe ff2f 	bl	8002a64 <cliPrintf>

		if(is_init == true)
 8003c06:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <cliSd+0x224>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <cliSd+0x214>
		{
			cliPrintf("sd read block_number\n");
 8003c0e:	4817      	ldr	r0, [pc, #92]	; (8003c6c <cliSd+0x26c>)
 8003c10:	f7fe ff28 	bl	8002a64 <cliPrintf>
		}
	}
}
 8003c14:	bf00      	nop
 8003c16:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd90      	pop	{r4, r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	08014bec 	.word	0x08014bec
 8003c24:	20000e00 	.word	0x20000e00
 8003c28:	08014bf4 	.word	0x08014bf4
 8003c2c:	20000e01 	.word	0x20000e01
 8003c30:	08014c04 	.word	0x08014c04
 8003c34:	08014c18 	.word	0x08014c18
 8003c38:	08014c38 	.word	0x08014c38
 8003c3c:	08014c58 	.word	0x08014c58
 8003c40:	08014c78 	.word	0x08014c78
 8003c44:	08014c98 	.word	0x08014c98
 8003c48:	08014cb8 	.word	0x08014cb8
 8003c4c:	08014cd8 	.word	0x08014cd8
 8003c50:	08014cf8 	.word	0x08014cf8
 8003c54:	cccccccd 	.word	0xcccccccd
 8003c58:	08014d18 	.word	0x08014d18
 8003c5c:	08014d44 	.word	0x08014d44
 8003c60:	08014d4c 	.word	0x08014d4c
 8003c64:	08014d60 	.word	0x08014d60
 8003c68:	08014d70 	.word	0x08014d70
 8003c6c:	08014d7c 	.word	0x08014d7c

08003c70 <spiInit>:
#ifdef _USE_HW_CLI
	static void cliSpi(cli_args_t *agrs);
#endif

bool spiInit(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
	bool ret = true;
 8003c76:	2301      	movs	r3, #1
 8003c78:	70fb      	strb	r3, [r7, #3]

	for(int i=0; i<SPI_MAX_CH; i++)
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	607b      	str	r3, [r7, #4]
 8003c7e:	e03d      	b.n	8003cfc <spiInit+0x8c>
	{
		spi_tbl[i].is_open = false;
 8003c80:	4924      	ldr	r1, [pc, #144]	; (8003d14 <spiInit+0xa4>)
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
		spi_tbl[i].is_tx_done = false;
 8003c92:	4920      	ldr	r1, [pc, #128]	; (8003d14 <spiInit+0xa4>)
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]
		spi_tbl[i].is_error = false;
 8003ca6:	491b      	ldr	r1, [pc, #108]	; (8003d14 <spiInit+0xa4>)
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	701a      	strb	r2, [r3, #0]
		spi_tbl[i].func_tx = NULL;
 8003cba:	4916      	ldr	r1, [pc, #88]	; (8003d14 <spiInit+0xa4>)
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3304      	adds	r3, #4
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
		spi_tbl[i].h_dma_tx = NULL;
 8003cce:	4911      	ldr	r1, [pc, #68]	; (8003d14 <spiInit+0xa4>)
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	330c      	adds	r3, #12
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
		spi_tbl[i].h_dma_rx = NULL;
 8003ce2:	490c      	ldr	r1, [pc, #48]	; (8003d14 <spiInit+0xa4>)
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	3310      	adds	r3, #16
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
	for(int i=0; i<SPI_MAX_CH; i++)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	607b      	str	r3, [r7, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	ddbe      	ble.n	8003c80 <spiInit+0x10>
	}

#ifdef _USE_HW_CLI
	cliAdd("spi", cliSpi);
 8003d02:	4905      	ldr	r1, [pc, #20]	; (8003d18 <spiInit+0xa8>)
 8003d04:	4805      	ldr	r0, [pc, #20]	; (8003d1c <spiInit+0xac>)
 8003d06:	f7fe ffbd 	bl	8002c84 <cliAdd>
#endif

	return ret;
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000e04 	.word	0x20000e04
 8003d18:	08003d4d 	.word	0x08003d4d
 8003d1c:	08014d94 	.word	0x08014d94

08003d20 <HAL_SPI_ErrorCallback>:

	p_spi->func_tx = func;
}

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_SPI_ErrorCallback+0x28>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d102      	bne.n	8003d3c <HAL_SPI_ErrorCallback+0x1c>
	{
		spi_tbl[_DEF_SPI1].is_error = true;
 8003d36:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <HAL_SPI_ErrorCallback+0x28>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	709a      	strb	r2, [r3, #2]
	}
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	20000e04 	.word	0x20000e04

08003d4c <cliSpi>:
}

#ifdef _USE_HW_CLI

void cliSpi(cli_args_t *args)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]

	if(args->argc == 2 && args->isStr(0, "info") == true)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d12f      	bne.n	8003dc0 <cliSpi+0x74>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	491d      	ldr	r1, [pc, #116]	; (8003ddc <cliSpi+0x90>)
 8003d66:	2000      	movs	r0, #0
 8003d68:	4798      	blx	r3
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d027      	beq.n	8003dc0 <cliSpi+0x74>
	{
		uint8_t ch;
		ch = args->getData(1);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2001      	movs	r0, #1
 8003d76:	4798      	blx	r3
 8003d78:	4603      	mov	r3, r0
 8003d7a:	73bb      	strb	r3, [r7, #14]

		spi_t *spi_info = &spi_tbl[ch];
 8003d7c:	7bba      	ldrb	r2, [r7, #14]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4a16      	ldr	r2, [pc, #88]	; (8003de0 <cliSpi+0x94>)
 8003d88:	4413      	add	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]

		cliPrintf("spi init : %d\n", spi_info->is_open);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	4619      	mov	r1, r3
 8003d92:	4814      	ldr	r0, [pc, #80]	; (8003de4 <cliSpi+0x98>)
 8003d94:	f7fe fe66 	bl	8002a64 <cliPrintf>

		if(spi_info->is_open == true)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00d      	beq.n	8003dbc <cliSpi+0x70>
		{
			if(spi_info->h_spi->Init.Mode == SPI_MODE_MASTER && spi_info->h_spi->Init.Direction == SPI_DIRECTION_2LINES)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003daa:	d107      	bne.n	8003dbc <cliSpi+0x70>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d102      	bne.n	8003dbc <cliSpi+0x70>
			{
				cliPrintf("Mode : Transmit Only Master\n");
 8003db6:	480c      	ldr	r0, [pc, #48]	; (8003de8 <cliSpi+0x9c>)
 8003db8:	f7fe fe54 	bl	8002a64 <cliPrintf>
			}

		}

		ret = true;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
	}

	if(ret != true)
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	f083 0301 	eor.w	r3, r3, #1
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <cliSpi+0x88>
	{
		cliPrintf("spi info ch[1~%d]\n", SPI_MAX_CH);
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4807      	ldr	r0, [pc, #28]	; (8003dec <cliSpi+0xa0>)
 8003dd0:	f7fe fe48 	bl	8002a64 <cliPrintf>
	}
}
 8003dd4:	bf00      	nop
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	08014d98 	.word	0x08014d98
 8003de0:	20000e04 	.word	0x20000e04
 8003de4:	08014da0 	.word	0x08014da0
 8003de8:	08014db0 	.word	0x08014db0
 8003dec:	08014dd0 	.word	0x08014dd0

08003df0 <uartOpen>:
{
	return true;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	6039      	str	r1, [r7, #0]
 8003dfa:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <uartOpen+0x24>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	4a06      	ldr	r2, [pc, #24]	; (8003e24 <uartOpen+0x34>)
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	54d1      	strb	r1, [r2, r3]
			ret = true;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
			break;
 8003e12:	bf00      	nop
			qbuffer[ch].out = qbuffer[ch].in;
			break;
			#endif
	}

	return ret;
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	20000e18 	.word	0x20000e18

08003e28 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	71fb      	strb	r3, [r7, #7]
	uint32_t ret;

	switch(ch)
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <uartAvailable+0x14>
 8003e38:	2b01      	cmp	r3, #1
		case _DEF_UART2:
			#ifdef _USE_UART2
			qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
			ret = qbufferAvailable(&qbuffer[ch]);
			#endif
			break;
 8003e3a:	e003      	b.n	8003e44 <uartAvailable+0x1c>
			ret = cdcAvailable();
 8003e3c:	f7fe f870 	bl	8001f20 <cdcAvailable>
 8003e40:	60f8      	str	r0, [r7, #12]
			break;
 8003e42:	bf00      	nop
	}

	return ret;
 8003e44:	68fb      	ldr	r3, [r7, #12]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	4603      	mov	r3, r0
 8003e56:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <uartRead+0x14>
 8003e5e:	2b01      	cmp	r3, #1

		case _DEF_UART2:
			#ifdef _USE_UART2
			qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
			#endif
			break;
 8003e60:	e004      	b.n	8003e6c <uartRead+0x1e>
			ret = cdcRead();
 8003e62:	f7fe f873 	bl	8001f4c <cdcRead>
 8003e66:	4603      	mov	r3, r0
 8003e68:	73fb      	strb	r3, [r7, #15]
			break;
 8003e6a:	bf00      	nop
	}

	return ret;
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b086      	sub	sp, #24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	73fb      	strb	r3, [r7, #15]

	#ifdef _USE_UART2
	HAL_StatusTypeDef status;
	#endif

	switch(ch)
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <uartWrite+0x18>
 8003e8a:	2b01      	cmp	r3, #1
			if(status == HAL_OK)
			{
				ret = length;
			}
			#endif
			break;
 8003e8c:	e005      	b.n	8003e9a <uartWrite+0x24>
			ret = cdcWrite(p_data, length);
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	68b8      	ldr	r0, [r7, #8]
 8003e92:	f7fe f8a3 	bl	8001fdc <cdcWrite>
 8003e96:	6178      	str	r0, [r7, #20]
			break;
 8003e98:	bf00      	nop
	}

	return ret;
 8003e9a:	697b      	ldr	r3, [r7, #20]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8003ea4:	b40e      	push	{r1, r2, r3}
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b0c7      	sub	sp, #284	; 0x11c
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	4602      	mov	r2, r0
 8003eae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003eb2:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003eb6:	701a      	strb	r2, [r3, #0]
	char buf[256];
	va_list args;
	int len;
	uint32_t ret;

	va_start(args, fmt);
 8003eb8:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003ebc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ec0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ec4:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf, 256, fmt, args);
 8003ec6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003eca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ece:	f107 0010 	add.w	r0, r7, #16
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003ed8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003edc:	f00e fc3e 	bl	801275c <vsniprintf>
 8003ee0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	ret = uartWrite(ch, (uint8_t *)buf, len);
 8003ee4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003ee8:	f107 0110 	add.w	r1, r7, #16
 8003eec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ef0:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff ffbd 	bl	8003e76 <uartWrite>
 8003efc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	va_end(args);

	return ret;
 8003f00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f10:	b003      	add	sp, #12
 8003f12:	4770      	bx	lr

08003f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f18:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <HAL_Init+0x40>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a0d      	ldr	r2, [pc, #52]	; (8003f54 <HAL_Init+0x40>)
 8003f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_Init+0x40>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <HAL_Init+0x40>)
 8003f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <HAL_Init+0x40>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <HAL_Init+0x40>)
 8003f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f3c:	2003      	movs	r0, #3
 8003f3e:	f000 f94f 	bl	80041e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f42:	200f      	movs	r0, #15
 8003f44:	f000 f808 	bl	8003f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f48:	f7fd fd48 	bl	80019dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40023c00 	.word	0x40023c00

08003f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f60:	4b12      	ldr	r3, [pc, #72]	; (8003fac <HAL_InitTick+0x54>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <HAL_InitTick+0x58>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 f967 	bl	800424a <HAL_SYSTICK_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e00e      	b.n	8003fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b0f      	cmp	r3, #15
 8003f8a:	d80a      	bhi.n	8003fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	f04f 30ff 	mov.w	r0, #4294967295
 8003f94:	f000 f92f 	bl	80041f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f98:	4a06      	ldr	r2, [pc, #24]	; (8003fb4 <HAL_InitTick+0x5c>)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e000      	b.n	8003fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20000040 	.word	0x20000040
 8003fb0:	20000058 	.word	0x20000058
 8003fb4:	20000054 	.word	0x20000054

08003fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fbc:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <HAL_IncTick+0x20>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_IncTick+0x24>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <HAL_IncTick+0x24>)
 8003fca:	6013      	str	r3, [r2, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000058 	.word	0x20000058
 8003fdc:	20000e1c 	.word	0x20000e1c

08003fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fe4:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <HAL_GetTick+0x14>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000e1c 	.word	0x20000e1c

08003ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004000:	f7ff ffee 	bl	8003fe0 <HAL_GetTick>
 8004004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d005      	beq.n	800401e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004012:	4b0a      	ldr	r3, [pc, #40]	; (800403c <HAL_Delay+0x44>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800401e:	bf00      	nop
 8004020:	f7ff ffde 	bl	8003fe0 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	429a      	cmp	r2, r3
 800402e:	d8f7      	bhi.n	8004020 <HAL_Delay+0x28>
  {
  }
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000058 	.word	0x20000058

08004040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <__NVIC_SetPriorityGrouping+0x44>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800405c:	4013      	ands	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800406c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004072:	4a04      	ldr	r2, [pc, #16]	; (8004084 <__NVIC_SetPriorityGrouping+0x44>)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	60d3      	str	r3, [r2, #12]
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	e000ed00 	.word	0xe000ed00

08004088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800408c:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <__NVIC_GetPriorityGrouping+0x18>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	0a1b      	lsrs	r3, r3, #8
 8004092:	f003 0307 	and.w	r3, r3, #7
}
 8004096:	4618      	mov	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	db0b      	blt.n	80040ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	f003 021f 	and.w	r2, r3, #31
 80040bc:	4907      	ldr	r1, [pc, #28]	; (80040dc <__NVIC_EnableIRQ+0x38>)
 80040be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	2001      	movs	r0, #1
 80040c6:	fa00 f202 	lsl.w	r2, r0, r2
 80040ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	e000e100 	.word	0xe000e100

080040e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	6039      	str	r1, [r7, #0]
 80040ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	db0a      	blt.n	800410a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	490c      	ldr	r1, [pc, #48]	; (800412c <__NVIC_SetPriority+0x4c>)
 80040fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fe:	0112      	lsls	r2, r2, #4
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	440b      	add	r3, r1
 8004104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004108:	e00a      	b.n	8004120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	b2da      	uxtb	r2, r3
 800410e:	4908      	ldr	r1, [pc, #32]	; (8004130 <__NVIC_SetPriority+0x50>)
 8004110:	79fb      	ldrb	r3, [r7, #7]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	3b04      	subs	r3, #4
 8004118:	0112      	lsls	r2, r2, #4
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	440b      	add	r3, r1
 800411e:	761a      	strb	r2, [r3, #24]
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	e000e100 	.word	0xe000e100
 8004130:	e000ed00 	.word	0xe000ed00

08004134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004134:	b480      	push	{r7}
 8004136:	b089      	sub	sp, #36	; 0x24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f1c3 0307 	rsb	r3, r3, #7
 800414e:	2b04      	cmp	r3, #4
 8004150:	bf28      	it	cs
 8004152:	2304      	movcs	r3, #4
 8004154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3304      	adds	r3, #4
 800415a:	2b06      	cmp	r3, #6
 800415c:	d902      	bls.n	8004164 <NVIC_EncodePriority+0x30>
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	3b03      	subs	r3, #3
 8004162:	e000      	b.n	8004166 <NVIC_EncodePriority+0x32>
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004168:	f04f 32ff 	mov.w	r2, #4294967295
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43da      	mvns	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	401a      	ands	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800417c:	f04f 31ff 	mov.w	r1, #4294967295
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	fa01 f303 	lsl.w	r3, r1, r3
 8004186:	43d9      	mvns	r1, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800418c:	4313      	orrs	r3, r2
         );
}
 800418e:	4618      	mov	r0, r3
 8004190:	3724      	adds	r7, #36	; 0x24
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041ac:	d301      	bcc.n	80041b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041ae:	2301      	movs	r3, #1
 80041b0:	e00f      	b.n	80041d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041b2:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <SysTick_Config+0x40>)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041ba:	210f      	movs	r1, #15
 80041bc:	f04f 30ff 	mov.w	r0, #4294967295
 80041c0:	f7ff ff8e 	bl	80040e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <SysTick_Config+0x40>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041ca:	4b04      	ldr	r3, [pc, #16]	; (80041dc <SysTick_Config+0x40>)
 80041cc:	2207      	movs	r2, #7
 80041ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	e000e010 	.word	0xe000e010

080041e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff ff29 	bl	8004040 <__NVIC_SetPriorityGrouping>
}
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b086      	sub	sp, #24
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	4603      	mov	r3, r0
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004208:	f7ff ff3e 	bl	8004088 <__NVIC_GetPriorityGrouping>
 800420c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	6978      	ldr	r0, [r7, #20]
 8004214:	f7ff ff8e 	bl	8004134 <NVIC_EncodePriority>
 8004218:	4602      	mov	r2, r0
 800421a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff ff5d 	bl	80040e0 <__NVIC_SetPriority>
}
 8004226:	bf00      	nop
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	4603      	mov	r3, r0
 8004236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff ff31 	bl	80040a4 <__NVIC_EnableIRQ>
}
 8004242:	bf00      	nop
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff ffa2 	bl	800419c <SysTick_Config>
 8004258:	4603      	mov	r3, r0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004270:	f7ff feb6 	bl	8003fe0 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e099      	b.n	80043b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042a0:	e00f      	b.n	80042c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042a2:	f7ff fe9d 	bl	8003fe0 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b05      	cmp	r3, #5
 80042ae:	d908      	bls.n	80042c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2203      	movs	r2, #3
 80042ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e078      	b.n	80043b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e8      	bne.n	80042a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4b38      	ldr	r3, [pc, #224]	; (80043bc <HAL_DMA_Init+0x158>)
 80042dc:	4013      	ands	r3, r2
 80042de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	2b04      	cmp	r3, #4
 800431a:	d107      	bne.n	800432c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	4313      	orrs	r3, r2
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f023 0307 	bic.w	r3, r3, #7
 8004342:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4313      	orrs	r3, r2
 800434c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2b04      	cmp	r3, #4
 8004354:	d117      	bne.n	8004386 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00e      	beq.n	8004386 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fa9d 	bl	80048a8 <DMA_CheckFifoParam>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2240      	movs	r2, #64	; 0x40
 8004378:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004382:	2301      	movs	r3, #1
 8004384:	e016      	b.n	80043b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fa54 	bl	800483c <DMA_CalcBaseAndBitshift>
 8004394:	4603      	mov	r3, r0
 8004396:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439c:	223f      	movs	r2, #63	; 0x3f
 800439e:	409a      	lsls	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	f010803f 	.word	0xf010803f

080043c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_DMA_Start_IT+0x26>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e040      	b.n	8004468 <HAL_DMA_Start_IT+0xa8>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d12f      	bne.n	800445a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2202      	movs	r2, #2
 80043fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f9e6 	bl	80047e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004418:	223f      	movs	r2, #63	; 0x3f
 800441a:	409a      	lsls	r2, r3
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0216 	orr.w	r2, r2, #22
 800442e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	2b00      	cmp	r3, #0
 8004436:	d007      	beq.n	8004448 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0208 	orr.w	r2, r2, #8
 8004446:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	e005      	b.n	8004466 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004462:	2302      	movs	r3, #2
 8004464:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004466:	7dfb      	ldrb	r3, [r7, #23]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d004      	beq.n	800448e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2280      	movs	r2, #128	; 0x80
 8004488:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e00c      	b.n	80044a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2205      	movs	r2, #5
 8004492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0201 	bic.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044c0:	4b8e      	ldr	r3, [pc, #568]	; (80046fc <HAL_DMA_IRQHandler+0x248>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a8e      	ldr	r2, [pc, #568]	; (8004700 <HAL_DMA_IRQHandler+0x24c>)
 80044c6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ca:	0a9b      	lsrs	r3, r3, #10
 80044cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044de:	2208      	movs	r2, #8
 80044e0:	409a      	lsls	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d01a      	beq.n	8004520 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d013      	beq.n	8004520 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0204 	bic.w	r2, r2, #4
 8004506:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450c:	2208      	movs	r2, #8
 800450e:	409a      	lsls	r2, r3
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004518:	f043 0201 	orr.w	r2, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004524:	2201      	movs	r2, #1
 8004526:	409a      	lsls	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d012      	beq.n	8004556 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004542:	2201      	movs	r2, #1
 8004544:	409a      	lsls	r2, r3
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	f043 0202 	orr.w	r2, r3, #2
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455a:	2204      	movs	r2, #4
 800455c:	409a      	lsls	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4013      	ands	r3, r2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d012      	beq.n	800458c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00b      	beq.n	800458c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004578:	2204      	movs	r2, #4
 800457a:	409a      	lsls	r2, r3
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004584:	f043 0204 	orr.w	r2, r3, #4
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004590:	2210      	movs	r2, #16
 8004592:	409a      	lsls	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4013      	ands	r3, r2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d043      	beq.n	8004624 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d03c      	beq.n	8004624 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ae:	2210      	movs	r2, #16
 80045b0:	409a      	lsls	r2, r3
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d018      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d108      	bne.n	80045e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d024      	beq.n	8004624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	4798      	blx	r3
 80045e2:	e01f      	b.n	8004624 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d01b      	beq.n	8004624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
 80045f4:	e016      	b.n	8004624 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d107      	bne.n	8004614 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0208 	bic.w	r2, r2, #8
 8004612:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004628:	2220      	movs	r2, #32
 800462a:	409a      	lsls	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 808f 	beq.w	8004754 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8087 	beq.w	8004754 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464a:	2220      	movs	r2, #32
 800464c:	409a      	lsls	r2, r3
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b05      	cmp	r3, #5
 800465c:	d136      	bne.n	80046cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0216 	bic.w	r2, r2, #22
 800466c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695a      	ldr	r2, [r3, #20]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800467c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	d103      	bne.n	800468e <HAL_DMA_IRQHandler+0x1da>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468a:	2b00      	cmp	r3, #0
 800468c:	d007      	beq.n	800469e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0208 	bic.w	r2, r2, #8
 800469c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a2:	223f      	movs	r2, #63	; 0x3f
 80046a4:	409a      	lsls	r2, r3
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d07e      	beq.n	80047c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	4798      	blx	r3
        }
        return;
 80046ca:	e079      	b.n	80047c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01d      	beq.n	8004716 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10d      	bne.n	8004704 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d031      	beq.n	8004754 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	4798      	blx	r3
 80046f8:	e02c      	b.n	8004754 <HAL_DMA_IRQHandler+0x2a0>
 80046fa:	bf00      	nop
 80046fc:	20000040 	.word	0x20000040
 8004700:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004708:	2b00      	cmp	r3, #0
 800470a:	d023      	beq.n	8004754 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
 8004714:	e01e      	b.n	8004754 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10f      	bne.n	8004744 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0210 	bic.w	r2, r2, #16
 8004732:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	2b00      	cmp	r3, #0
 800475a:	d032      	beq.n	80047c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d022      	beq.n	80047ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2205      	movs	r2, #5
 800476c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0201 	bic.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	3301      	adds	r3, #1
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	429a      	cmp	r2, r3
 800478a:	d307      	bcc.n	800479c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f2      	bne.n	8004780 <HAL_DMA_IRQHandler+0x2cc>
 800479a:	e000      	b.n	800479e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800479c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	4798      	blx	r3
 80047be:	e000      	b.n	80047c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80047c0:	bf00      	nop
    }
  }
}
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2b40      	cmp	r3, #64	; 0x40
 800480c:	d108      	bne.n	8004820 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800481e:	e007      	b.n	8004830 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	60da      	str	r2, [r3, #12]
}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	3b10      	subs	r3, #16
 800484c:	4a14      	ldr	r2, [pc, #80]	; (80048a0 <DMA_CalcBaseAndBitshift+0x64>)
 800484e:	fba2 2303 	umull	r2, r3, r2, r3
 8004852:	091b      	lsrs	r3, r3, #4
 8004854:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004856:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <DMA_CalcBaseAndBitshift+0x68>)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b03      	cmp	r3, #3
 8004868:	d909      	bls.n	800487e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004872:	f023 0303 	bic.w	r3, r3, #3
 8004876:	1d1a      	adds	r2, r3, #4
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	659a      	str	r2, [r3, #88]	; 0x58
 800487c:	e007      	b.n	800488e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	aaaaaaab 	.word	0xaaaaaaab
 80048a4:	08014ea4 	.word	0x08014ea4

080048a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d11f      	bne.n	8004902 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d856      	bhi.n	8004976 <DMA_CheckFifoParam+0xce>
 80048c8:	a201      	add	r2, pc, #4	; (adr r2, 80048d0 <DMA_CheckFifoParam+0x28>)
 80048ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ce:	bf00      	nop
 80048d0:	080048e1 	.word	0x080048e1
 80048d4:	080048f3 	.word	0x080048f3
 80048d8:	080048e1 	.word	0x080048e1
 80048dc:	08004977 	.word	0x08004977
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d046      	beq.n	800497a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048f0:	e043      	b.n	800497a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048fa:	d140      	bne.n	800497e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004900:	e03d      	b.n	800497e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800490a:	d121      	bne.n	8004950 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d837      	bhi.n	8004982 <DMA_CheckFifoParam+0xda>
 8004912:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <DMA_CheckFifoParam+0x70>)
 8004914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004918:	08004929 	.word	0x08004929
 800491c:	0800492f 	.word	0x0800492f
 8004920:	08004929 	.word	0x08004929
 8004924:	08004941 	.word	0x08004941
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	73fb      	strb	r3, [r7, #15]
      break;
 800492c:	e030      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d025      	beq.n	8004986 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800493e:	e022      	b.n	8004986 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004948:	d11f      	bne.n	800498a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800494e:	e01c      	b.n	800498a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d903      	bls.n	800495e <DMA_CheckFifoParam+0xb6>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b03      	cmp	r3, #3
 800495a:	d003      	beq.n	8004964 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800495c:	e018      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
      break;
 8004962:	e015      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00e      	beq.n	800498e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
      break;
 8004974:	e00b      	b.n	800498e <DMA_CheckFifoParam+0xe6>
      break;
 8004976:	bf00      	nop
 8004978:	e00a      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
      break;
 800497a:	bf00      	nop
 800497c:	e008      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
      break;
 800497e:	bf00      	nop
 8004980:	e006      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
      break;
 8004982:	bf00      	nop
 8004984:	e004      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
      break;
 8004986:	bf00      	nop
 8004988:	e002      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
      break;   
 800498a:	bf00      	nop
 800498c:	e000      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
      break;
 800498e:	bf00      	nop
    }
  } 
  
  return status; 
 8004990:	7bfb      	ldrb	r3, [r7, #15]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop

080049a0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80049b2:	4b23      	ldr	r3, [pc, #140]	; (8004a40 <HAL_FLASH_Program+0xa0>)
 80049b4:	7e1b      	ldrb	r3, [r3, #24]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_FLASH_Program+0x1e>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e03b      	b.n	8004a36 <HAL_FLASH_Program+0x96>
 80049be:	4b20      	ldr	r3, [pc, #128]	; (8004a40 <HAL_FLASH_Program+0xa0>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80049c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80049c8:	f000 f870 	bl	8004aac <FLASH_WaitForLastOperation>
 80049cc:	4603      	mov	r3, r0
 80049ce:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d12b      	bne.n	8004a2e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d105      	bne.n	80049e8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80049dc:	783b      	ldrb	r3, [r7, #0]
 80049de:	4619      	mov	r1, r3
 80049e0:	68b8      	ldr	r0, [r7, #8]
 80049e2:	f000 f91b 	bl	8004c1c <FLASH_Program_Byte>
 80049e6:	e016      	b.n	8004a16 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d105      	bne.n	80049fa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80049ee:	883b      	ldrh	r3, [r7, #0]
 80049f0:	4619      	mov	r1, r3
 80049f2:	68b8      	ldr	r0, [r7, #8]
 80049f4:	f000 f8ee 	bl	8004bd4 <FLASH_Program_HalfWord>
 80049f8:	e00d      	b.n	8004a16 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d105      	bne.n	8004a0c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	4619      	mov	r1, r3
 8004a04:	68b8      	ldr	r0, [r7, #8]
 8004a06:	f000 f8c3 	bl	8004b90 <FLASH_Program_Word>
 8004a0a:	e004      	b.n	8004a16 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a10:	68b8      	ldr	r0, [r7, #8]
 8004a12:	f000 f88b 	bl	8004b2c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a1a:	f000 f847 	bl	8004aac <FLASH_WaitForLastOperation>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004a22:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <HAL_FLASH_Program+0xa4>)
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	4a07      	ldr	r2, [pc, #28]	; (8004a44 <HAL_FLASH_Program+0xa4>)
 8004a28:	f023 0301 	bic.w	r3, r3, #1
 8004a2c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a2e:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <HAL_FLASH_Program+0xa0>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000e20 	.word	0x20000e20
 8004a44:	40023c00 	.word	0x40023c00

08004a48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a52:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <HAL_FLASH_Unlock+0x38>)
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da0b      	bge.n	8004a72 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a5a:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <HAL_FLASH_Unlock+0x38>)
 8004a5c:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <HAL_FLASH_Unlock+0x3c>)
 8004a5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a60:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <HAL_FLASH_Unlock+0x38>)
 8004a62:	4a09      	ldr	r2, [pc, #36]	; (8004a88 <HAL_FLASH_Unlock+0x40>)
 8004a64:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a66:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <HAL_FLASH_Unlock+0x38>)
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	da01      	bge.n	8004a72 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004a72:	79fb      	ldrb	r3, [r7, #7]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	40023c00 	.word	0x40023c00
 8004a84:	45670123 	.word	0x45670123
 8004a88:	cdef89ab 	.word	0xcdef89ab

08004a8c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_FLASH_Lock+0x1c>)
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	4a04      	ldr	r2, [pc, #16]	; (8004aa8 <HAL_FLASH_Lock+0x1c>)
 8004a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a9a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	40023c00 	.word	0x40023c00

08004aac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ab8:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <FLASH_WaitForLastOperation+0x78>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004abe:	f7ff fa8f 	bl	8003fe0 <HAL_GetTick>
 8004ac2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004ac4:	e010      	b.n	8004ae8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d00c      	beq.n	8004ae8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <FLASH_WaitForLastOperation+0x38>
 8004ad4:	f7ff fa84 	bl	8003fe0 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d201      	bcs.n	8004ae8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e019      	b.n	8004b1c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <FLASH_WaitForLastOperation+0x7c>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e8      	bne.n	8004ac6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004af4:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <FLASH_WaitForLastOperation+0x7c>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004b00:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <FLASH_WaitForLastOperation+0x7c>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004b06:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <FLASH_WaitForLastOperation+0x7c>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004b12:	f000 f8a5 	bl	8004c60 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
  
}  
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20000e20 	.word	0x20000e20
 8004b28:	40023c00 	.word	0x40023c00

08004b2c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b38:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <FLASH_Program_DoubleWord+0x60>)
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	4a13      	ldr	r2, [pc, #76]	; (8004b8c <FLASH_Program_DoubleWord+0x60>)
 8004b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004b44:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <FLASH_Program_DoubleWord+0x60>)
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	4a10      	ldr	r2, [pc, #64]	; (8004b8c <FLASH_Program_DoubleWord+0x60>)
 8004b4a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004b4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004b50:	4b0e      	ldr	r3, [pc, #56]	; (8004b8c <FLASH_Program_DoubleWord+0x60>)
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	4a0d      	ldr	r2, [pc, #52]	; (8004b8c <FLASH_Program_DoubleWord+0x60>)
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004b62:	f3bf 8f6f 	isb	sy
}
 8004b66:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004b68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	000a      	movs	r2, r1
 8004b76:	2300      	movs	r3, #0
 8004b78:	68f9      	ldr	r1, [r7, #12]
 8004b7a:	3104      	adds	r1, #4
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	600b      	str	r3, [r1, #0]
}
 8004b80:	bf00      	nop
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	40023c00 	.word	0x40023c00

08004b90 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <FLASH_Program_Word+0x40>)
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	4a0c      	ldr	r2, [pc, #48]	; (8004bd0 <FLASH_Program_Word+0x40>)
 8004ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <FLASH_Program_Word+0x40>)
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <FLASH_Program_Word+0x40>)
 8004bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004bb2:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <FLASH_Program_Word+0x40>)
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	4a06      	ldr	r2, [pc, #24]	; (8004bd0 <FLASH_Program_Word+0x40>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	601a      	str	r2, [r3, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40023c00 	.word	0x40023c00

08004bd4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004be0:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <FLASH_Program_HalfWord+0x44>)
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	4a0c      	ldr	r2, [pc, #48]	; (8004c18 <FLASH_Program_HalfWord+0x44>)
 8004be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004bec:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <FLASH_Program_HalfWord+0x44>)
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <FLASH_Program_HalfWord+0x44>)
 8004bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004bf8:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <FLASH_Program_HalfWord+0x44>)
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	4a06      	ldr	r2, [pc, #24]	; (8004c18 <FLASH_Program_HalfWord+0x44>)
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	887a      	ldrh	r2, [r7, #2]
 8004c08:	801a      	strh	r2, [r3, #0]
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40023c00 	.word	0x40023c00

08004c1c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c28:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <FLASH_Program_Byte+0x40>)
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	4a0b      	ldr	r2, [pc, #44]	; (8004c5c <FLASH_Program_Byte+0x40>)
 8004c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <FLASH_Program_Byte+0x40>)
 8004c36:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <FLASH_Program_Byte+0x40>)
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c3c:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <FLASH_Program_Byte+0x40>)
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	4a06      	ldr	r2, [pc, #24]	; (8004c5c <FLASH_Program_Byte+0x40>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	701a      	strb	r2, [r3, #0]
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40023c00 	.word	0x40023c00

08004c60 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004c64:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004c70:	4b2d      	ldr	r3, [pc, #180]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	f043 0310 	orr.w	r3, r3, #16
 8004c78:	4a2b      	ldr	r2, [pc, #172]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004c7a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004c7c:	4b29      	ldr	r3, [pc, #164]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004c7e:	2210      	movs	r2, #16
 8004c80:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004c82:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d008      	beq.n	8004ca0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004c8e:	4b26      	ldr	r3, [pc, #152]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f043 0308 	orr.w	r3, r3, #8
 8004c96:	4a24      	ldr	r2, [pc, #144]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004c98:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004c9a:	4b22      	ldr	r3, [pc, #136]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004ca0:	4b20      	ldr	r3, [pc, #128]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004cac:	4b1e      	ldr	r3, [pc, #120]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	f043 0304 	orr.w	r3, r3, #4
 8004cb4:	4a1c      	ldr	r2, [pc, #112]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004cb6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004cb8:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004cba:	2240      	movs	r2, #64	; 0x40
 8004cbc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004cbe:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d008      	beq.n	8004cdc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004cca:	4b17      	ldr	r3, [pc, #92]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	f043 0302 	orr.w	r3, r3, #2
 8004cd2:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004cd4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004cd6:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004cd8:	2280      	movs	r2, #128	; 0x80
 8004cda:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004cdc:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d009      	beq.n	8004cfc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	4a0d      	ldr	r2, [pc, #52]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004cf2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cfa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004cfc:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004d08:	4b07      	ldr	r3, [pc, #28]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	f043 0320 	orr.w	r3, r3, #32
 8004d10:	4a05      	ldr	r2, [pc, #20]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004d12:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004d14:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004d16:	2202      	movs	r2, #2
 8004d18:	60da      	str	r2, [r3, #12]
  }
}
 8004d1a:	bf00      	nop
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	40023c00 	.word	0x40023c00
 8004d28:	20000e20 	.word	0x20000e20

08004d2c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004d3e:	4b31      	ldr	r3, [pc, #196]	; (8004e04 <HAL_FLASHEx_Erase+0xd8>)
 8004d40:	7e1b      	ldrb	r3, [r3, #24]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_FLASHEx_Erase+0x1e>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e058      	b.n	8004dfc <HAL_FLASHEx_Erase+0xd0>
 8004d4a:	4b2e      	ldr	r3, [pc, #184]	; (8004e04 <HAL_FLASHEx_Erase+0xd8>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d54:	f7ff feaa 	bl	8004aac <FLASH_WaitForLastOperation>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d148      	bne.n	8004df4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	f04f 32ff 	mov.w	r2, #4294967295
 8004d68:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d115      	bne.n	8004d9e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	f000 f844 	bl	8004e0c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d88:	f7ff fe90 	bl	8004aac <FLASH_WaitForLastOperation>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004d90:	4b1d      	ldr	r3, [pc, #116]	; (8004e08 <HAL_FLASHEx_Erase+0xdc>)
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	4a1c      	ldr	r2, [pc, #112]	; (8004e08 <HAL_FLASHEx_Erase+0xdc>)
 8004d96:	f023 0304 	bic.w	r3, r3, #4
 8004d9a:	6113      	str	r3, [r2, #16]
 8004d9c:	e028      	b.n	8004df0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	60bb      	str	r3, [r7, #8]
 8004da4:	e01c      	b.n	8004de0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	4619      	mov	r1, r3
 8004dae:	68b8      	ldr	r0, [r7, #8]
 8004db0:	f000 f850 	bl	8004e54 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004db8:	f7ff fe78 	bl	8004aac <FLASH_WaitForLastOperation>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004dc0:	4b11      	ldr	r3, [pc, #68]	; (8004e08 <HAL_FLASHEx_Erase+0xdc>)
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	4a10      	ldr	r2, [pc, #64]	; (8004e08 <HAL_FLASHEx_Erase+0xdc>)
 8004dc6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004dca:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	601a      	str	r2, [r3, #0]
          break;
 8004dd8:	e00a      	b.n	8004df0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4413      	add	r3, r2
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d3da      	bcc.n	8004da6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004df0:	f000 f878 	bl	8004ee4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004df4:	4b03      	ldr	r3, [pc, #12]	; (8004e04 <HAL_FLASHEx_Erase+0xd8>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	761a      	strb	r2, [r3, #24]

  return status;
 8004dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000e20 	.word	0x20000e20
 8004e08:	40023c00 	.word	0x40023c00

08004e0c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	6039      	str	r1, [r7, #0]
 8004e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e18:	4b0d      	ldr	r3, [pc, #52]	; (8004e50 <FLASH_MassErase+0x44>)
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	4a0c      	ldr	r2, [pc, #48]	; (8004e50 <FLASH_MassErase+0x44>)
 8004e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004e24:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <FLASH_MassErase+0x44>)
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <FLASH_MassErase+0x44>)
 8004e2a:	f043 0304 	orr.w	r3, r3, #4
 8004e2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <FLASH_MassErase+0x44>)
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	4a05      	ldr	r2, [pc, #20]	; (8004e50 <FLASH_MassErase+0x44>)
 8004e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e40:	6113      	str	r3, [r2, #16]
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40023c00 	.word	0x40023c00

08004e54 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004e64:	78fb      	ldrb	r3, [r7, #3]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	e010      	b.n	8004e92 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d103      	bne.n	8004e7e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	e009      	b.n	8004e92 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d103      	bne.n	8004e8c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	e002      	b.n	8004e92 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004e8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004e90:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e92:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <FLASH_Erase_Sector+0x8c>)
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <FLASH_Erase_Sector+0x8c>)
 8004e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004e9e:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <FLASH_Erase_Sector+0x8c>)
 8004ea0:	691a      	ldr	r2, [r3, #16]
 8004ea2:	490f      	ldr	r1, [pc, #60]	; (8004ee0 <FLASH_Erase_Sector+0x8c>)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <FLASH_Erase_Sector+0x8c>)
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	4a0c      	ldr	r2, [pc, #48]	; (8004ee0 <FLASH_Erase_Sector+0x8c>)
 8004eb0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004eb4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <FLASH_Erase_Sector+0x8c>)
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	4a07      	ldr	r2, [pc, #28]	; (8004ee0 <FLASH_Erase_Sector+0x8c>)
 8004ec2:	f043 0302 	orr.w	r3, r3, #2
 8004ec6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004ec8:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <FLASH_Erase_Sector+0x8c>)
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <FLASH_Erase_Sector+0x8c>)
 8004ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed2:	6113      	str	r3, [r2, #16]
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	40023c00 	.word	0x40023c00

08004ee4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004ee8:	4b20      	ldr	r3, [pc, #128]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d017      	beq.n	8004f24 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004ef4:	4b1d      	ldr	r3, [pc, #116]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1c      	ldr	r2, [pc, #112]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004efa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004efe:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004f00:	4b1a      	ldr	r3, [pc, #104]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a19      	ldr	r2, [pc, #100]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004f06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	4b17      	ldr	r3, [pc, #92]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a16      	ldr	r2, [pc, #88]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004f12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f16:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f18:	4b14      	ldr	r3, [pc, #80]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a13      	ldr	r2, [pc, #76]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f22:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004f24:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d017      	beq.n	8004f60 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004f30:	4b0e      	ldr	r3, [pc, #56]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a0d      	ldr	r2, [pc, #52]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004f36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f3a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004f42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	4b08      	ldr	r3, [pc, #32]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a07      	ldr	r2, [pc, #28]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f52:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f54:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a04      	ldr	r2, [pc, #16]	; (8004f6c <FLASH_FlushCaches+0x88>)
 8004f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f5e:	6013      	str	r3, [r2, #0]
  }
}
 8004f60:	bf00      	nop
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40023c00 	.word	0x40023c00

08004f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b089      	sub	sp, #36	; 0x24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	e159      	b.n	8005240 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	f040 8148 	bne.w	800523a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d005      	beq.n	8004fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d130      	bne.n	8005024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	2203      	movs	r2, #3
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	43db      	mvns	r3, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4013      	ands	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	091b      	lsrs	r3, r3, #4
 800500e:	f003 0201 	and.w	r2, r3, #1
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4313      	orrs	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	2b03      	cmp	r3, #3
 800502e:	d017      	beq.n	8005060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	2203      	movs	r2, #3
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4313      	orrs	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f003 0303 	and.w	r3, r3, #3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d123      	bne.n	80050b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	08da      	lsrs	r2, r3, #3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3208      	adds	r2, #8
 8005074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	220f      	movs	r2, #15
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	43db      	mvns	r3, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4013      	ands	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	08da      	lsrs	r2, r3, #3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3208      	adds	r2, #8
 80050ae:	69b9      	ldr	r1, [r7, #24]
 80050b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	2203      	movs	r2, #3
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	43db      	mvns	r3, r3
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	4013      	ands	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f003 0203 	and.w	r2, r3, #3
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4313      	orrs	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 80a2 	beq.w	800523a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f6:	2300      	movs	r3, #0
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	4b57      	ldr	r3, [pc, #348]	; (8005258 <HAL_GPIO_Init+0x2e8>)
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	4a56      	ldr	r2, [pc, #344]	; (8005258 <HAL_GPIO_Init+0x2e8>)
 8005100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005104:	6453      	str	r3, [r2, #68]	; 0x44
 8005106:	4b54      	ldr	r3, [pc, #336]	; (8005258 <HAL_GPIO_Init+0x2e8>)
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005112:	4a52      	ldr	r2, [pc, #328]	; (800525c <HAL_GPIO_Init+0x2ec>)
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	089b      	lsrs	r3, r3, #2
 8005118:	3302      	adds	r3, #2
 800511a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800511e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	220f      	movs	r2, #15
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43db      	mvns	r3, r3
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4013      	ands	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a49      	ldr	r2, [pc, #292]	; (8005260 <HAL_GPIO_Init+0x2f0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d019      	beq.n	8005172 <HAL_GPIO_Init+0x202>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a48      	ldr	r2, [pc, #288]	; (8005264 <HAL_GPIO_Init+0x2f4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d013      	beq.n	800516e <HAL_GPIO_Init+0x1fe>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a47      	ldr	r2, [pc, #284]	; (8005268 <HAL_GPIO_Init+0x2f8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00d      	beq.n	800516a <HAL_GPIO_Init+0x1fa>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a46      	ldr	r2, [pc, #280]	; (800526c <HAL_GPIO_Init+0x2fc>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d007      	beq.n	8005166 <HAL_GPIO_Init+0x1f6>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a45      	ldr	r2, [pc, #276]	; (8005270 <HAL_GPIO_Init+0x300>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d101      	bne.n	8005162 <HAL_GPIO_Init+0x1f2>
 800515e:	2304      	movs	r3, #4
 8005160:	e008      	b.n	8005174 <HAL_GPIO_Init+0x204>
 8005162:	2307      	movs	r3, #7
 8005164:	e006      	b.n	8005174 <HAL_GPIO_Init+0x204>
 8005166:	2303      	movs	r3, #3
 8005168:	e004      	b.n	8005174 <HAL_GPIO_Init+0x204>
 800516a:	2302      	movs	r3, #2
 800516c:	e002      	b.n	8005174 <HAL_GPIO_Init+0x204>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <HAL_GPIO_Init+0x204>
 8005172:	2300      	movs	r3, #0
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	f002 0203 	and.w	r2, r2, #3
 800517a:	0092      	lsls	r2, r2, #2
 800517c:	4093      	lsls	r3, r2
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005184:	4935      	ldr	r1, [pc, #212]	; (800525c <HAL_GPIO_Init+0x2ec>)
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	089b      	lsrs	r3, r3, #2
 800518a:	3302      	adds	r3, #2
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005192:	4b38      	ldr	r3, [pc, #224]	; (8005274 <HAL_GPIO_Init+0x304>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	43db      	mvns	r3, r3
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4013      	ands	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051b6:	4a2f      	ldr	r2, [pc, #188]	; (8005274 <HAL_GPIO_Init+0x304>)
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051bc:	4b2d      	ldr	r3, [pc, #180]	; (8005274 <HAL_GPIO_Init+0x304>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	43db      	mvns	r3, r3
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4013      	ands	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051e0:	4a24      	ldr	r2, [pc, #144]	; (8005274 <HAL_GPIO_Init+0x304>)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051e6:	4b23      	ldr	r3, [pc, #140]	; (8005274 <HAL_GPIO_Init+0x304>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	43db      	mvns	r3, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4013      	ands	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800520a:	4a1a      	ldr	r2, [pc, #104]	; (8005274 <HAL_GPIO_Init+0x304>)
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005210:	4b18      	ldr	r3, [pc, #96]	; (8005274 <HAL_GPIO_Init+0x304>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005234:	4a0f      	ldr	r2, [pc, #60]	; (8005274 <HAL_GPIO_Init+0x304>)
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	3301      	adds	r3, #1
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	2b0f      	cmp	r3, #15
 8005244:	f67f aea2 	bls.w	8004f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	3724      	adds	r7, #36	; 0x24
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40023800 	.word	0x40023800
 800525c:	40013800 	.word	0x40013800
 8005260:	40020000 	.word	0x40020000
 8005264:	40020400 	.word	0x40020400
 8005268:	40020800 	.word	0x40020800
 800526c:	40020c00 	.word	0x40020c00
 8005270:	40021000 	.word	0x40021000
 8005274:	40013c00 	.word	0x40013c00

08005278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	887b      	ldrh	r3, [r7, #2]
 800528a:	4013      	ands	r3, r2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
 8005294:	e001      	b.n	800529a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005296:	2300      	movs	r3, #0
 8005298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800529a:	7bfb      	ldrb	r3, [r7, #15]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	807b      	strh	r3, [r7, #2]
 80052b4:	4613      	mov	r3, r2
 80052b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052b8:	787b      	ldrb	r3, [r7, #1]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052be:	887a      	ldrh	r2, [r7, #2]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80052c4:	e003      	b.n	80052ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80052c6:	887b      	ldrh	r3, [r7, #2]
 80052c8:	041a      	lsls	r2, r3, #16
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	619a      	str	r2, [r3, #24]
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	460b      	mov	r3, r1
 80052e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80052ec:	887a      	ldrh	r2, [r7, #2]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4013      	ands	r3, r2
 80052f2:	041a      	lsls	r2, r3, #16
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	43d9      	mvns	r1, r3
 80052f8:	887b      	ldrh	r3, [r7, #2]
 80052fa:	400b      	ands	r3, r1
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	619a      	str	r2, [r3, #24]
}
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b086      	sub	sp, #24
 8005312:	af02      	add	r7, sp, #8
 8005314:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e101      	b.n	8005524 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f00b fe2a 	bl	8010f94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2203      	movs	r2, #3
 8005344:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800534e:	d102      	bne.n	8005356 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f004 f9b9 	bl	80096d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	7c1a      	ldrb	r2, [r3, #16]
 8005368:	f88d 2000 	strb.w	r2, [sp]
 800536c:	3304      	adds	r3, #4
 800536e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005370:	f004 f898 	bl	80094a4 <USB_CoreInit>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e0ce      	b.n	8005524 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f004 f9b1 	bl	80096f4 <USB_SetCurrentMode>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0bf      	b.n	8005524 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053a4:	2300      	movs	r3, #0
 80053a6:	73fb      	strb	r3, [r7, #15]
 80053a8:	e04a      	b.n	8005440 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80053aa:	7bfa      	ldrb	r2, [r7, #15]
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	3315      	adds	r3, #21
 80053ba:	2201      	movs	r2, #1
 80053bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80053be:	7bfa      	ldrb	r2, [r7, #15]
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	440b      	add	r3, r1
 80053cc:	3314      	adds	r3, #20
 80053ce:	7bfa      	ldrb	r2, [r7, #15]
 80053d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80053d2:	7bfa      	ldrb	r2, [r7, #15]
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	b298      	uxth	r0, r3
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	4613      	mov	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	440b      	add	r3, r1
 80053e4:	332e      	adds	r3, #46	; 0x2e
 80053e6:	4602      	mov	r2, r0
 80053e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80053ea:	7bfa      	ldrb	r2, [r7, #15]
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	4613      	mov	r3, r2
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	4413      	add	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	440b      	add	r3, r1
 80053f8:	3318      	adds	r3, #24
 80053fa:	2200      	movs	r2, #0
 80053fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80053fe:	7bfa      	ldrb	r2, [r7, #15]
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	331c      	adds	r3, #28
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005412:	7bfa      	ldrb	r2, [r7, #15]
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	3320      	adds	r3, #32
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005426:	7bfa      	ldrb	r2, [r7, #15]
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	4613      	mov	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	4413      	add	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	3324      	adds	r3, #36	; 0x24
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800543a:	7bfb      	ldrb	r3, [r7, #15]
 800543c:	3301      	adds	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	791b      	ldrb	r3, [r3, #4]
 8005444:	7bfa      	ldrb	r2, [r7, #15]
 8005446:	429a      	cmp	r2, r3
 8005448:	d3af      	bcc.n	80053aa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800544a:	2300      	movs	r3, #0
 800544c:	73fb      	strb	r3, [r7, #15]
 800544e:	e044      	b.n	80054da <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005450:	7bfa      	ldrb	r2, [r7, #15]
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	4613      	mov	r3, r2
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	4413      	add	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	f203 2355 	addw	r3, r3, #597	; 0x255
 8005462:	2200      	movs	r2, #0
 8005464:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005466:	7bfa      	ldrb	r2, [r7, #15]
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	440b      	add	r3, r1
 8005474:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8005478:	7bfa      	ldrb	r2, [r7, #15]
 800547a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800547c:	7bfa      	ldrb	r2, [r7, #15]
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005492:	7bfa      	ldrb	r2, [r7, #15]
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	4613      	mov	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	440b      	add	r3, r1
 80054a0:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054a8:	7bfa      	ldrb	r2, [r7, #15]
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	4613      	mov	r3, r2
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054be:	7bfa      	ldrb	r2, [r7, #15]
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	3301      	adds	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	791b      	ldrb	r3, [r3, #4]
 80054de:	7bfa      	ldrb	r2, [r7, #15]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d3b5      	bcc.n	8005450 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	7c1a      	ldrb	r2, [r3, #16]
 80054ec:	f88d 2000 	strb.w	r2, [sp]
 80054f0:	3304      	adds	r3, #4
 80054f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054f4:	f004 f94a 	bl	800978c <USB_DevInit>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2202      	movs	r2, #2
 8005502:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e00c      	b.n	8005524 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4618      	mov	r0, r3
 800551e:	f005 f98e 	bl	800a83e <USB_DevDisconnect>

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_PCD_Start+0x1c>
 8005544:	2302      	movs	r3, #2
 8005546:	e022      	b.n	800558e <HAL_PCD_Start+0x62>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005558:	2b00      	cmp	r3, #0
 800555a:	d009      	beq.n	8005570 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005560:	2b01      	cmp	r3, #1
 8005562:	d105      	bne.n	8005570 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f004 f89b 	bl	80096b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f005 f93c 	bl	800a7fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005596:	b590      	push	{r4, r7, lr}
 8005598:	b08d      	sub	sp, #52	; 0x34
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f005 f9fa 	bl	800a9a6 <USB_GetMode>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f040 848c 	bne.w	8005ed2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f005 f95e 	bl	800a880 <USB_ReadInterrupts>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 8482 	beq.w	8005ed0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	0a1b      	lsrs	r3, r3, #8
 80055d6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f005 f94b 	bl	800a880 <USB_ReadInterrupts>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d107      	bne.n	8005604 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695a      	ldr	r2, [r3, #20]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f002 0202 	and.w	r2, r2, #2
 8005602:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f005 f939 	bl	800a880 <USB_ReadInterrupts>
 800560e:	4603      	mov	r3, r0
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	2b10      	cmp	r3, #16
 8005616:	d161      	bne.n	80056dc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0210 	bic.w	r2, r2, #16
 8005626:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	f003 020f 	and.w	r2, r3, #15
 8005634:	4613      	mov	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	4413      	add	r3, r2
 8005644:	3304      	adds	r3, #4
 8005646:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	0c5b      	lsrs	r3, r3, #17
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	2b02      	cmp	r3, #2
 8005652:	d124      	bne.n	800569e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800565a:	4013      	ands	r3, r2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d035      	beq.n	80056cc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	091b      	lsrs	r3, r3, #4
 8005668:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800566a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800566e:	b29b      	uxth	r3, r3
 8005670:	461a      	mov	r2, r3
 8005672:	6a38      	ldr	r0, [r7, #32]
 8005674:	f004 ff70 	bl	800a558 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005684:	441a      	add	r2, r3
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	695a      	ldr	r2, [r3, #20]
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	091b      	lsrs	r3, r3, #4
 8005692:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005696:	441a      	add	r2, r3
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	615a      	str	r2, [r3, #20]
 800569c:	e016      	b.n	80056cc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	0c5b      	lsrs	r3, r3, #17
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	2b06      	cmp	r3, #6
 80056a8:	d110      	bne.n	80056cc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80056b0:	2208      	movs	r2, #8
 80056b2:	4619      	mov	r1, r3
 80056b4:	6a38      	ldr	r0, [r7, #32]
 80056b6:	f004 ff4f 	bl	800a558 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	091b      	lsrs	r3, r3, #4
 80056c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056c6:	441a      	add	r2, r3
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0210 	orr.w	r2, r2, #16
 80056da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f005 f8cd 	bl	800a880 <USB_ReadInterrupts>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056f0:	f040 80a7 	bne.w	8005842 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f005 f8d2 	bl	800a8a6 <USB_ReadDevAllOutEpInterrupt>
 8005702:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005704:	e099      	b.n	800583a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 808e 	beq.w	800582e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	4611      	mov	r1, r2
 800571c:	4618      	mov	r0, r3
 800571e:	f005 f8f6 	bl	800a90e <USB_ReadDevOutEPInterrupt>
 8005722:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00c      	beq.n	8005748 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573a:	461a      	mov	r2, r3
 800573c:	2301      	movs	r3, #1
 800573e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fea2 	bl	800648c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00c      	beq.n	800576c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575e:	461a      	mov	r2, r3
 8005760:	2308      	movs	r3, #8
 8005762:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 ff78 	bl	800665c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	2b00      	cmp	r3, #0
 8005774:	d008      	beq.n	8005788 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005782:	461a      	mov	r2, r3
 8005784:	2310      	movs	r3, #16
 8005786:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d030      	beq.n	80057f4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579a:	2b80      	cmp	r3, #128	; 0x80
 800579c:	d109      	bne.n	80057b2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057b0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80057b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	4413      	add	r3, r2
 80057c4:	3304      	adds	r3, #4
 80057c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	78db      	ldrb	r3, [r3, #3]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d108      	bne.n	80057e2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	2200      	movs	r2, #0
 80057d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f00b fcd5 	bl	801118c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ee:	461a      	mov	r2, r3
 80057f0:	2302      	movs	r3, #2
 80057f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f003 0320 	and.w	r3, r3, #32
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d008      	beq.n	8005810 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580a:	461a      	mov	r2, r3
 800580c:	2320      	movs	r3, #32
 800580e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d009      	beq.n	800582e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005826:	461a      	mov	r2, r3
 8005828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800582c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	3301      	adds	r3, #1
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	f47f af62 	bne.w	8005706 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f005 f81a 	bl	800a880 <USB_ReadInterrupts>
 800584c:	4603      	mov	r3, r0
 800584e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005852:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005856:	f040 80db 	bne.w	8005a10 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4618      	mov	r0, r3
 8005860:	f005 f83b 	bl	800a8da <USB_ReadDevAllInEpInterrupt>
 8005864:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800586a:	e0cd      	b.n	8005a08 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 80c2 	beq.w	80059fc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	4611      	mov	r1, r2
 8005882:	4618      	mov	r0, r3
 8005884:	f005 f861 	bl	800a94a <USB_ReadDevInEPInterrupt>
 8005888:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	d057      	beq.n	8005944 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	2201      	movs	r2, #1
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	43db      	mvns	r3, r3
 80058ae:	69f9      	ldr	r1, [r7, #28]
 80058b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b4:	4013      	ands	r3, r2
 80058b6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c4:	461a      	mov	r2, r3
 80058c6:	2301      	movs	r3, #1
 80058c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	799b      	ldrb	r3, [r3, #6]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d132      	bne.n	8005938 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d6:	4613      	mov	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	440b      	add	r3, r1
 80058e0:	3320      	adds	r3, #32
 80058e2:	6819      	ldr	r1, [r3, #0]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e8:	4613      	mov	r3, r2
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4403      	add	r3, r0
 80058f2:	331c      	adds	r3, #28
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4419      	add	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fc:	4613      	mov	r3, r2
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	4413      	add	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4403      	add	r3, r0
 8005906:	3320      	adds	r3, #32
 8005908:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	2b00      	cmp	r3, #0
 800590e:	d113      	bne.n	8005938 <HAL_PCD_IRQHandler+0x3a2>
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005914:	4613      	mov	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	4413      	add	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	3324      	adds	r3, #36	; 0x24
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d108      	bne.n	8005938 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6818      	ldr	r0, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005930:	461a      	mov	r2, r3
 8005932:	2101      	movs	r1, #1
 8005934:	f005 f868 	bl	800aa08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	b2db      	uxtb	r3, r3
 800593c:	4619      	mov	r1, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f00b fba9 	bl	8011096 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d008      	beq.n	8005960 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595a:	461a      	mov	r2, r3
 800595c:	2308      	movs	r3, #8
 800595e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f003 0310 	and.w	r3, r3, #16
 8005966:	2b00      	cmp	r3, #0
 8005968:	d008      	beq.n	800597c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005976:	461a      	mov	r2, r3
 8005978:	2310      	movs	r3, #16
 800597a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	d008      	beq.n	8005998 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005992:	461a      	mov	r2, r3
 8005994:	2340      	movs	r3, #64	; 0x40
 8005996:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d023      	beq.n	80059ea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80059a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059a4:	6a38      	ldr	r0, [r7, #32]
 80059a6:	f004 f855 	bl	8009a54 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80059aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ac:	4613      	mov	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	3310      	adds	r3, #16
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	4413      	add	r3, r2
 80059ba:	3304      	adds	r3, #4
 80059bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	78db      	ldrb	r3, [r3, #3]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d108      	bne.n	80059d8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2200      	movs	r2, #0
 80059ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f00b fbec 	bl	80111b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e4:	461a      	mov	r2, r3
 80059e6:	2302      	movs	r3, #2
 80059e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80059f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fcbb 	bl	8006372 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	3301      	adds	r3, #1
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	085b      	lsrs	r3, r3, #1
 8005a06:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f47f af2e 	bne.w	800586c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f004 ff33 	bl	800a880 <USB_ReadInterrupts>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a24:	d122      	bne.n	8005a6c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a34:	f023 0301 	bic.w	r3, r3, #1
 8005a38:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d108      	bne.n	8005a56 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fea2 	bl	8006798 <HAL_PCDEx_LPM_Callback>
 8005a54:	e002      	b.n	8005a5c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f00b fb8a 	bl	8011170 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695a      	ldr	r2, [r3, #20]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005a6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f004 ff05 	bl	800a880 <USB_ReadInterrupts>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a80:	d112      	bne.n	8005aa8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d102      	bne.n	8005a98 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f00b fb46 	bl	8011124 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695a      	ldr	r2, [r3, #20]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005aa6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f004 fee7 	bl	800a880 <USB_ReadInterrupts>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005abc:	f040 80b7 	bne.w	8005c2e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ace:	f023 0301 	bic.w	r3, r3, #1
 8005ad2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2110      	movs	r1, #16
 8005ada:	4618      	mov	r0, r3
 8005adc:	f003 ffba 	bl	8009a54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae4:	e046      	b.n	8005b74 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af2:	461a      	mov	r2, r3
 8005af4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005af8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b26:	461a      	mov	r2, r3
 8005b28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b2c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b5e:	0151      	lsls	r1, r2, #5
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	440a      	add	r2, r1
 8005b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b6c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	3301      	adds	r3, #1
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	791b      	ldrb	r3, [r3, #4]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d3b2      	bcc.n	8005ae6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	69fa      	ldr	r2, [r7, #28]
 8005b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005b92:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	7bdb      	ldrb	r3, [r3, #15]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d016      	beq.n	8005bca <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bac:	f043 030b 	orr.w	r3, r3, #11
 8005bb0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bc2:	f043 030b 	orr.w	r3, r3, #11
 8005bc6:	6453      	str	r3, [r2, #68]	; 0x44
 8005bc8:	e015      	b.n	8005bf6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005bdc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005be0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bf0:	f043 030b 	orr.w	r3, r3, #11
 8005bf4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c04:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c08:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6818      	ldr	r0, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f004 fef5 	bl	800aa08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695a      	ldr	r2, [r3, #20]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005c2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f004 fe24 	bl	800a880 <USB_ReadInterrupts>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c42:	d123      	bne.n	8005c8c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f004 feba 	bl	800a9c2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f003 ff77 	bl	8009b46 <USB_GetDevSpeed>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681c      	ldr	r4, [r3, #0]
 8005c64:	f001 f9c8 	bl	8006ff8 <HAL_RCC_GetHCLKFreq>
 8005c68:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c6e:	461a      	mov	r2, r3
 8005c70:	4620      	mov	r0, r4
 8005c72:	f003 fc7b 	bl	800956c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f00b fa35 	bl	80110e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695a      	ldr	r2, [r3, #20]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005c8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f004 fdf5 	bl	800a880 <USB_ReadInterrupts>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d10a      	bne.n	8005cb6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f00b fa12 	bl	80110ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695a      	ldr	r2, [r3, #20]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f002 0208 	and.w	r2, r2, #8
 8005cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f004 fde0 	bl	800a880 <USB_ReadInterrupts>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc6:	2b80      	cmp	r3, #128	; 0x80
 8005cc8:	d123      	bne.n	8005d12 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cda:	e014      	b.n	8005d06 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	440b      	add	r3, r1
 8005cea:	f203 2357 	addw	r3, r3, #599	; 0x257
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d105      	bne.n	8005d00 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fb08 	bl	8006310 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	3301      	adds	r3, #1
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	791b      	ldrb	r3, [r3, #4]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d3e4      	bcc.n	8005cdc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f004 fdb2 	bl	800a880 <USB_ReadInterrupts>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d26:	d13c      	bne.n	8005da2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d28:	2301      	movs	r3, #1
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2c:	e02b      	b.n	8005d86 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d42:	4613      	mov	r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	4413      	add	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	440b      	add	r3, r1
 8005d4c:	3318      	adds	r3, #24
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d115      	bne.n	8005d80 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005d54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	da12      	bge.n	8005d80 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5e:	4613      	mov	r3, r2
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	440b      	add	r3, r1
 8005d68:	3317      	adds	r3, #23
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fac8 	bl	8006310 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	3301      	adds	r3, #1
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	791b      	ldrb	r3, [r3, #4]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d3cd      	bcc.n	8005d2e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695a      	ldr	r2, [r3, #20]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005da0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f004 fd6a 	bl	800a880 <USB_ReadInterrupts>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005db2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005db6:	d156      	bne.n	8005e66 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005db8:	2301      	movs	r3, #1
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
 8005dbc:	e045      	b.n	8005e4a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	440b      	add	r3, r1
 8005ddc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d12e      	bne.n	8005e44 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005de6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	da2b      	bge.n	8005e44 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8005df8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d121      	bne.n	8005e44 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005e00:	6879      	ldr	r1, [r7, #4]
 8005e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e04:	4613      	mov	r3, r2
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8005e12:	2201      	movs	r2, #1
 8005e14:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e40:	6053      	str	r3, [r2, #4]
            break;
 8005e42:	e008      	b.n	8005e56 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	3301      	adds	r3, #1
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	791b      	ldrb	r3, [r3, #4]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d3b3      	bcc.n	8005dbe <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695a      	ldr	r2, [r3, #20]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f004 fd08 	bl	800a880 <USB_ReadInterrupts>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7a:	d10a      	bne.n	8005e92 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f00b f9a9 	bl	80111d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695a      	ldr	r2, [r3, #20]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005e90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f004 fcf2 	bl	800a880 <USB_ReadInterrupts>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d115      	bne.n	8005ed2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f00b f999 	bl	80111f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6859      	ldr	r1, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	605a      	str	r2, [r3, #4]
 8005ece:	e000      	b.n	8005ed2 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005ed0:	bf00      	nop
    }
  }
}
 8005ed2:	3734      	adds	r7, #52	; 0x34
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd90      	pop	{r4, r7, pc}

08005ed8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_PCD_SetAddress+0x1a>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e012      	b.n	8005f18 <HAL_PCD_SetAddress+0x40>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	78fa      	ldrb	r2, [r7, #3]
 8005efe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	78fa      	ldrb	r2, [r7, #3]
 8005f06:	4611      	mov	r1, r2
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f004 fc51 	bl	800a7b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	4608      	mov	r0, r1
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	4603      	mov	r3, r0
 8005f30:	70fb      	strb	r3, [r7, #3]
 8005f32:	460b      	mov	r3, r1
 8005f34:	803b      	strh	r3, [r7, #0]
 8005f36:	4613      	mov	r3, r2
 8005f38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	da0f      	bge.n	8005f66 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	f003 020f 	and.w	r2, r3, #15
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	3310      	adds	r3, #16
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	4413      	add	r3, r2
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	705a      	strb	r2, [r3, #1]
 8005f64:	e00f      	b.n	8005f86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	f003 020f 	and.w	r2, r3, #15
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f86:	78fb      	ldrb	r3, [r7, #3]
 8005f88:	f003 030f 	and.w	r3, r3, #15
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f92:	883a      	ldrh	r2, [r7, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	78ba      	ldrb	r2, [r7, #2]
 8005f9c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	785b      	ldrb	r3, [r3, #1]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d004      	beq.n	8005fb0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005fb0:	78bb      	ldrb	r3, [r7, #2]
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d102      	bne.n	8005fbc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <HAL_PCD_EP_Open+0xaa>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	e00e      	b.n	8005fe8 <HAL_PCD_EP_Open+0xc8>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68f9      	ldr	r1, [r7, #12]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f003 fdd9 	bl	8009b90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8005fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006000:	2b00      	cmp	r3, #0
 8006002:	da0f      	bge.n	8006024 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	f003 020f 	and.w	r2, r3, #15
 800600a:	4613      	mov	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	3310      	adds	r3, #16
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	4413      	add	r3, r2
 8006018:	3304      	adds	r3, #4
 800601a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2201      	movs	r2, #1
 8006020:	705a      	strb	r2, [r3, #1]
 8006022:	e00f      	b.n	8006044 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	f003 020f 	and.w	r2, r3, #15
 800602a:	4613      	mov	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	4413      	add	r3, r2
 800603a:	3304      	adds	r3, #4
 800603c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	b2da      	uxtb	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_PCD_EP_Close+0x6e>
 800605a:	2302      	movs	r3, #2
 800605c:	e00e      	b.n	800607c <HAL_PCD_EP_Close+0x8c>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68f9      	ldr	r1, [r7, #12]
 800606c:	4618      	mov	r0, r3
 800606e:	f003 fe17 	bl	8009ca0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	607a      	str	r2, [r7, #4]
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	460b      	mov	r3, r1
 8006092:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006094:	7afb      	ldrb	r3, [r7, #11]
 8006096:	f003 020f 	and.w	r2, r3, #15
 800609a:	4613      	mov	r3, r2
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	3304      	adds	r3, #4
 80060ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2200      	movs	r2, #0
 80060be:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2200      	movs	r2, #0
 80060c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060c6:	7afb      	ldrb	r3, [r7, #11]
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	799b      	ldrb	r3, [r3, #6]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d102      	bne.n	80060e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	799b      	ldrb	r3, [r3, #6]
 80060e8:	461a      	mov	r2, r3
 80060ea:	6979      	ldr	r1, [r7, #20]
 80060ec:	f003 feb4 	bl	8009e58 <USB_EPStartXfer>

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	460b      	mov	r3, r1
 8006104:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	f003 020f 	and.w	r2, r3, #15
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	4613      	mov	r3, r2
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	440b      	add	r3, r1
 8006118:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800611c:	681b      	ldr	r3, [r3, #0]
}
 800611e:	4618      	mov	r0, r3
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b086      	sub	sp, #24
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
 8006136:	460b      	mov	r3, r1
 8006138:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800613a:	7afb      	ldrb	r3, [r7, #11]
 800613c:	f003 020f 	and.w	r2, r3, #15
 8006140:	4613      	mov	r3, r2
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	3310      	adds	r3, #16
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	3304      	adds	r3, #4
 8006150:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2200      	movs	r2, #0
 8006162:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2201      	movs	r2, #1
 8006168:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800616a:	7afb      	ldrb	r3, [r7, #11]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	b2da      	uxtb	r2, r3
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	799b      	ldrb	r3, [r3, #6]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d102      	bne.n	8006184 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	799b      	ldrb	r3, [r3, #6]
 800618c:	461a      	mov	r2, r3
 800618e:	6979      	ldr	r1, [r7, #20]
 8006190:	f003 fe62 	bl	8009e58 <USB_EPStartXfer>

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	460b      	mov	r3, r1
 80061a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	f003 030f 	and.w	r3, r3, #15
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	7912      	ldrb	r2, [r2, #4]
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d901      	bls.n	80061bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e04f      	b.n	800625c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	da0f      	bge.n	80061e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	f003 020f 	and.w	r2, r3, #15
 80061ca:	4613      	mov	r3, r2
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	3310      	adds	r3, #16
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	4413      	add	r3, r2
 80061d8:	3304      	adds	r3, #4
 80061da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2201      	movs	r2, #1
 80061e0:	705a      	strb	r2, [r3, #1]
 80061e2:	e00d      	b.n	8006200 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061e4:	78fa      	ldrb	r2, [r7, #3]
 80061e6:	4613      	mov	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	4413      	add	r3, r2
 80061f6:	3304      	adds	r3, #4
 80061f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2201      	movs	r2, #1
 8006204:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006206:	78fb      	ldrb	r3, [r7, #3]
 8006208:	f003 030f 	and.w	r3, r3, #15
 800620c:	b2da      	uxtb	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_PCD_EP_SetStall+0x82>
 800621c:	2302      	movs	r3, #2
 800621e:	e01d      	b.n	800625c <HAL_PCD_EP_SetStall+0xbe>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68f9      	ldr	r1, [r7, #12]
 800622e:	4618      	mov	r0, r3
 8006230:	f004 f9ea 	bl	800a608 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	2b00      	cmp	r3, #0
 800623c:	d109      	bne.n	8006252 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	7999      	ldrb	r1, [r3, #6]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800624c:	461a      	mov	r2, r3
 800624e:	f004 fbdb 	bl	800aa08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	460b      	mov	r3, r1
 800626e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	f003 030f 	and.w	r3, r3, #15
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	7912      	ldrb	r2, [r2, #4]
 800627a:	4293      	cmp	r3, r2
 800627c:	d901      	bls.n	8006282 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e042      	b.n	8006308 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006286:	2b00      	cmp	r3, #0
 8006288:	da0f      	bge.n	80062aa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	f003 020f 	and.w	r2, r3, #15
 8006290:	4613      	mov	r3, r2
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	3310      	adds	r3, #16
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	4413      	add	r3, r2
 800629e:	3304      	adds	r3, #4
 80062a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	705a      	strb	r2, [r3, #1]
 80062a8:	e00f      	b.n	80062ca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062aa:	78fb      	ldrb	r3, [r7, #3]
 80062ac:	f003 020f 	and.w	r2, r3, #15
 80062b0:	4613      	mov	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	4413      	add	r3, r2
 80062c0:	3304      	adds	r3, #4
 80062c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <HAL_PCD_EP_ClrStall+0x86>
 80062e6:	2302      	movs	r3, #2
 80062e8:	e00e      	b.n	8006308 <HAL_PCD_EP_ClrStall+0xa4>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68f9      	ldr	r1, [r7, #12]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f004 f9f3 	bl	800a6e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800631c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006320:	2b00      	cmp	r3, #0
 8006322:	da0c      	bge.n	800633e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	f003 020f 	and.w	r2, r3, #15
 800632a:	4613      	mov	r3, r2
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	4413      	add	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	3310      	adds	r3, #16
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	4413      	add	r3, r2
 8006338:	3304      	adds	r3, #4
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	e00c      	b.n	8006358 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	f003 020f 	and.w	r2, r3, #15
 8006344:	4613      	mov	r3, r2
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	4413      	add	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	4413      	add	r3, r2
 8006354:	3304      	adds	r3, #4
 8006356:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68f9      	ldr	r1, [r7, #12]
 800635e:	4618      	mov	r0, r3
 8006360:	f004 f812 	bl	800a388 <USB_EPStopXfer>
 8006364:	4603      	mov	r3, r0
 8006366:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006368:	7afb      	ldrb	r3, [r7, #11]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b08a      	sub	sp, #40	; 0x28
 8006376:	af02      	add	r7, sp, #8
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	3310      	adds	r3, #16
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	4413      	add	r3, r2
 8006396:	3304      	adds	r3, #4
 8006398:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	695a      	ldr	r2, [r3, #20]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d901      	bls.n	80063aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e06b      	b.n	8006482 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	691a      	ldr	r2, [r3, #16]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d902      	bls.n	80063c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	3303      	adds	r3, #3
 80063ca:	089b      	lsrs	r3, r3, #2
 80063cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063ce:	e02a      	b.n	8006426 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d902      	bls.n	80063ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	3303      	adds	r3, #3
 80063f0:	089b      	lsrs	r3, r3, #2
 80063f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68d9      	ldr	r1, [r3, #12]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	4603      	mov	r3, r0
 8006408:	6978      	ldr	r0, [r7, #20]
 800640a:	f004 f867 	bl	800a4dc <USB_WritePacket>

    ep->xfer_buff  += len;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	441a      	add	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	695a      	ldr	r2, [r3, #20]
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	441a      	add	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	429a      	cmp	r2, r3
 800643a:	d809      	bhi.n	8006450 <PCD_WriteEmptyTxFifo+0xde>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	695a      	ldr	r2, [r3, #20]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006444:	429a      	cmp	r2, r3
 8006446:	d203      	bcs.n	8006450 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1bf      	bne.n	80063d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	429a      	cmp	r2, r3
 800645a:	d811      	bhi.n	8006480 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	2201      	movs	r2, #1
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	43db      	mvns	r3, r3
 8006476:	6939      	ldr	r1, [r7, #16]
 8006478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800647c:	4013      	ands	r3, r2
 800647e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3720      	adds	r7, #32
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	333c      	adds	r3, #60	; 0x3c
 80064a4:	3304      	adds	r3, #4
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	799b      	ldrb	r3, [r3, #6]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d17b      	bne.n	80065ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d015      	beq.n	80064f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	4a61      	ldr	r2, [pc, #388]	; (8006654 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	f240 80b9 	bls.w	8006648 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 80b3 	beq.w	8006648 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ee:	461a      	mov	r2, r3
 80064f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f4:	6093      	str	r3, [r2, #8]
 80064f6:	e0a7      	b.n	8006648 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d009      	beq.n	8006516 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650e:	461a      	mov	r2, r3
 8006510:	2320      	movs	r3, #32
 8006512:	6093      	str	r3, [r2, #8]
 8006514:	e098      	b.n	8006648 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800651c:	2b00      	cmp	r3, #0
 800651e:	f040 8093 	bne.w	8006648 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	4a4b      	ldr	r2, [pc, #300]	; (8006654 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d90f      	bls.n	800654a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006540:	461a      	mov	r2, r3
 8006542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006546:	6093      	str	r3, [r2, #8]
 8006548:	e07e      	b.n	8006648 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	4613      	mov	r3, r2
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	4413      	add	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	4413      	add	r3, r2
 800655c:	3304      	adds	r3, #4
 800655e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a1a      	ldr	r2, [r3, #32]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	0159      	lsls	r1, r3, #5
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	440b      	add	r3, r1
 800656c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006576:	1ad2      	subs	r2, r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d114      	bne.n	80065ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d109      	bne.n	800659e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006594:	461a      	mov	r2, r3
 8006596:	2101      	movs	r1, #1
 8006598:	f004 fa36 	bl	800aa08 <USB_EP0_OutStart>
 800659c:	e006      	b.n	80065ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	441a      	add	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f00a fd54 	bl	8011060 <HAL_PCD_DataOutStageCallback>
 80065b8:	e046      	b.n	8006648 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	4a26      	ldr	r2, [pc, #152]	; (8006658 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d124      	bne.n	800660c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d8:	461a      	mov	r2, r3
 80065da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065de:	6093      	str	r3, [r2, #8]
 80065e0:	e032      	b.n	8006648 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d008      	beq.n	80065fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f8:	461a      	mov	r2, r3
 80065fa:	2320      	movs	r3, #32
 80065fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f00a fd2b 	bl	8011060 <HAL_PCD_DataOutStageCallback>
 800660a:	e01d      	b.n	8006648 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d114      	bne.n	800663c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	4613      	mov	r3, r2
 8006618:	00db      	lsls	r3, r3, #3
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	440b      	add	r3, r1
 8006620:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d108      	bne.n	800663c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006634:	461a      	mov	r2, r3
 8006636:	2100      	movs	r1, #0
 8006638:	f004 f9e6 	bl	800aa08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	b2db      	uxtb	r3, r3
 8006640:	4619      	mov	r1, r3
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f00a fd0c 	bl	8011060 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3720      	adds	r7, #32
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	4f54300a 	.word	0x4f54300a
 8006658:	4f54310a 	.word	0x4f54310a

0800665c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	333c      	adds	r3, #60	; 0x3c
 8006674:	3304      	adds	r3, #4
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4a15      	ldr	r2, [pc, #84]	; (80066e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d90e      	bls.n	80066b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006698:	2b00      	cmp	r3, #0
 800669a:	d009      	beq.n	80066b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a8:	461a      	mov	r2, r3
 80066aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f00a fcc3 	bl	801103c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4a0a      	ldr	r2, [pc, #40]	; (80066e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d90c      	bls.n	80066d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	799b      	ldrb	r3, [r3, #6]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d108      	bne.n	80066d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6818      	ldr	r0, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80066d0:	461a      	mov	r2, r3
 80066d2:	2101      	movs	r1, #1
 80066d4:	f004 f998 	bl	800aa08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	4f54300a 	.word	0x4f54300a

080066e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	70fb      	strb	r3, [r7, #3]
 80066f4:	4613      	mov	r3, r2
 80066f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d107      	bne.n	8006716 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006706:	883b      	ldrh	r3, [r7, #0]
 8006708:	0419      	lsls	r1, r3, #16
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	430a      	orrs	r2, r1
 8006712:	629a      	str	r2, [r3, #40]	; 0x28
 8006714:	e028      	b.n	8006768 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671c:	0c1b      	lsrs	r3, r3, #16
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	4413      	add	r3, r2
 8006722:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006724:	2300      	movs	r3, #0
 8006726:	73fb      	strb	r3, [r7, #15]
 8006728:	e00d      	b.n	8006746 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	3340      	adds	r3, #64	; 0x40
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	0c1b      	lsrs	r3, r3, #16
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	4413      	add	r3, r2
 800673e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006740:	7bfb      	ldrb	r3, [r7, #15]
 8006742:	3301      	adds	r3, #1
 8006744:	73fb      	strb	r3, [r7, #15]
 8006746:	7bfa      	ldrb	r2, [r7, #15]
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	3b01      	subs	r3, #1
 800674c:	429a      	cmp	r2, r3
 800674e:	d3ec      	bcc.n	800672a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006750:	883b      	ldrh	r3, [r7, #0]
 8006752:	0418      	lsls	r0, r3, #16
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6819      	ldr	r1, [r3, #0]
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	3b01      	subs	r3, #1
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	4302      	orrs	r2, r0
 8006760:	3340      	adds	r3, #64	; 0x40
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	440b      	add	r3, r1
 8006766:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	460b      	mov	r3, r1
 8006780:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	887a      	ldrh	r2, [r7, #2]
 8006788:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e267      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d075      	beq.n	80068ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067ce:	4b88      	ldr	r3, [pc, #544]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 030c 	and.w	r3, r3, #12
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d00c      	beq.n	80067f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067da:	4b85      	ldr	r3, [pc, #532]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d112      	bne.n	800680c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067e6:	4b82      	ldr	r3, [pc, #520]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067f2:	d10b      	bne.n	800680c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067f4:	4b7e      	ldr	r3, [pc, #504]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d05b      	beq.n	80068b8 <HAL_RCC_OscConfig+0x108>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d157      	bne.n	80068b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e242      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006814:	d106      	bne.n	8006824 <HAL_RCC_OscConfig+0x74>
 8006816:	4b76      	ldr	r3, [pc, #472]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a75      	ldr	r2, [pc, #468]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 800681c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	e01d      	b.n	8006860 <HAL_RCC_OscConfig+0xb0>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800682c:	d10c      	bne.n	8006848 <HAL_RCC_OscConfig+0x98>
 800682e:	4b70      	ldr	r3, [pc, #448]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a6f      	ldr	r2, [pc, #444]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 8006834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	4b6d      	ldr	r3, [pc, #436]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a6c      	ldr	r2, [pc, #432]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 8006840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	e00b      	b.n	8006860 <HAL_RCC_OscConfig+0xb0>
 8006848:	4b69      	ldr	r3, [pc, #420]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a68      	ldr	r2, [pc, #416]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 800684e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	4b66      	ldr	r3, [pc, #408]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a65      	ldr	r2, [pc, #404]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 800685a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800685e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d013      	beq.n	8006890 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006868:	f7fd fbba 	bl	8003fe0 <HAL_GetTick>
 800686c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800686e:	e008      	b.n	8006882 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006870:	f7fd fbb6 	bl	8003fe0 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b64      	cmp	r3, #100	; 0x64
 800687c:	d901      	bls.n	8006882 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e207      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006882:	4b5b      	ldr	r3, [pc, #364]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0f0      	beq.n	8006870 <HAL_RCC_OscConfig+0xc0>
 800688e:	e014      	b.n	80068ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006890:	f7fd fba6 	bl	8003fe0 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006898:	f7fd fba2 	bl	8003fe0 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b64      	cmp	r3, #100	; 0x64
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e1f3      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068aa:	4b51      	ldr	r3, [pc, #324]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1f0      	bne.n	8006898 <HAL_RCC_OscConfig+0xe8>
 80068b6:	e000      	b.n	80068ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d063      	beq.n	800698e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068c6:	4b4a      	ldr	r3, [pc, #296]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f003 030c 	and.w	r3, r3, #12
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00b      	beq.n	80068ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068d2:	4b47      	ldr	r3, [pc, #284]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068da:	2b08      	cmp	r3, #8
 80068dc:	d11c      	bne.n	8006918 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068de:	4b44      	ldr	r3, [pc, #272]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d116      	bne.n	8006918 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ea:	4b41      	ldr	r3, [pc, #260]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d005      	beq.n	8006902 <HAL_RCC_OscConfig+0x152>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d001      	beq.n	8006902 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e1c7      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006902:	4b3b      	ldr	r3, [pc, #236]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	4937      	ldr	r1, [pc, #220]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 8006912:	4313      	orrs	r3, r2
 8006914:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006916:	e03a      	b.n	800698e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d020      	beq.n	8006962 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006920:	4b34      	ldr	r3, [pc, #208]	; (80069f4 <HAL_RCC_OscConfig+0x244>)
 8006922:	2201      	movs	r2, #1
 8006924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006926:	f7fd fb5b 	bl	8003fe0 <HAL_GetTick>
 800692a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800692c:	e008      	b.n	8006940 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800692e:	f7fd fb57 	bl	8003fe0 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d901      	bls.n	8006940 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e1a8      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006940:	4b2b      	ldr	r3, [pc, #172]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0f0      	beq.n	800692e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800694c:	4b28      	ldr	r3, [pc, #160]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	4925      	ldr	r1, [pc, #148]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 800695c:	4313      	orrs	r3, r2
 800695e:	600b      	str	r3, [r1, #0]
 8006960:	e015      	b.n	800698e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006962:	4b24      	ldr	r3, [pc, #144]	; (80069f4 <HAL_RCC_OscConfig+0x244>)
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006968:	f7fd fb3a 	bl	8003fe0 <HAL_GetTick>
 800696c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800696e:	e008      	b.n	8006982 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006970:	f7fd fb36 	bl	8003fe0 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d901      	bls.n	8006982 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e187      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006982:	4b1b      	ldr	r3, [pc, #108]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1f0      	bne.n	8006970 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0308 	and.w	r3, r3, #8
 8006996:	2b00      	cmp	r3, #0
 8006998:	d036      	beq.n	8006a08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d016      	beq.n	80069d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069a2:	4b15      	ldr	r3, [pc, #84]	; (80069f8 <HAL_RCC_OscConfig+0x248>)
 80069a4:	2201      	movs	r2, #1
 80069a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a8:	f7fd fb1a 	bl	8003fe0 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069b0:	f7fd fb16 	bl	8003fe0 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e167      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069c2:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <HAL_RCC_OscConfig+0x240>)
 80069c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0f0      	beq.n	80069b0 <HAL_RCC_OscConfig+0x200>
 80069ce:	e01b      	b.n	8006a08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069d0:	4b09      	ldr	r3, [pc, #36]	; (80069f8 <HAL_RCC_OscConfig+0x248>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069d6:	f7fd fb03 	bl	8003fe0 <HAL_GetTick>
 80069da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069dc:	e00e      	b.n	80069fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069de:	f7fd faff 	bl	8003fe0 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d907      	bls.n	80069fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e150      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
 80069f0:	40023800 	.word	0x40023800
 80069f4:	42470000 	.word	0x42470000
 80069f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069fc:	4b88      	ldr	r3, [pc, #544]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 80069fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1ea      	bne.n	80069de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 8097 	beq.w	8006b44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a16:	2300      	movs	r3, #0
 8006a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a1a:	4b81      	ldr	r3, [pc, #516]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10f      	bne.n	8006a46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a26:	2300      	movs	r3, #0
 8006a28:	60bb      	str	r3, [r7, #8]
 8006a2a:	4b7d      	ldr	r3, [pc, #500]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	4a7c      	ldr	r2, [pc, #496]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a34:	6413      	str	r3, [r2, #64]	; 0x40
 8006a36:	4b7a      	ldr	r3, [pc, #488]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a3e:	60bb      	str	r3, [r7, #8]
 8006a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a42:	2301      	movs	r3, #1
 8006a44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a46:	4b77      	ldr	r3, [pc, #476]	; (8006c24 <HAL_RCC_OscConfig+0x474>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d118      	bne.n	8006a84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a52:	4b74      	ldr	r3, [pc, #464]	; (8006c24 <HAL_RCC_OscConfig+0x474>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a73      	ldr	r2, [pc, #460]	; (8006c24 <HAL_RCC_OscConfig+0x474>)
 8006a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a5e:	f7fd fabf 	bl	8003fe0 <HAL_GetTick>
 8006a62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a64:	e008      	b.n	8006a78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a66:	f7fd fabb 	bl	8003fe0 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d901      	bls.n	8006a78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e10c      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a78:	4b6a      	ldr	r3, [pc, #424]	; (8006c24 <HAL_RCC_OscConfig+0x474>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0f0      	beq.n	8006a66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d106      	bne.n	8006a9a <HAL_RCC_OscConfig+0x2ea>
 8006a8c:	4b64      	ldr	r3, [pc, #400]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a90:	4a63      	ldr	r2, [pc, #396]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006a92:	f043 0301 	orr.w	r3, r3, #1
 8006a96:	6713      	str	r3, [r2, #112]	; 0x70
 8006a98:	e01c      	b.n	8006ad4 <HAL_RCC_OscConfig+0x324>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	2b05      	cmp	r3, #5
 8006aa0:	d10c      	bne.n	8006abc <HAL_RCC_OscConfig+0x30c>
 8006aa2:	4b5f      	ldr	r3, [pc, #380]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa6:	4a5e      	ldr	r2, [pc, #376]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006aa8:	f043 0304 	orr.w	r3, r3, #4
 8006aac:	6713      	str	r3, [r2, #112]	; 0x70
 8006aae:	4b5c      	ldr	r3, [pc, #368]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab2:	4a5b      	ldr	r2, [pc, #364]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006ab4:	f043 0301 	orr.w	r3, r3, #1
 8006ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8006aba:	e00b      	b.n	8006ad4 <HAL_RCC_OscConfig+0x324>
 8006abc:	4b58      	ldr	r3, [pc, #352]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac0:	4a57      	ldr	r2, [pc, #348]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006ac2:	f023 0301 	bic.w	r3, r3, #1
 8006ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac8:	4b55      	ldr	r3, [pc, #340]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006acc:	4a54      	ldr	r2, [pc, #336]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006ace:	f023 0304 	bic.w	r3, r3, #4
 8006ad2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d015      	beq.n	8006b08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006adc:	f7fd fa80 	bl	8003fe0 <HAL_GetTick>
 8006ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ae2:	e00a      	b.n	8006afa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ae4:	f7fd fa7c 	bl	8003fe0 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d901      	bls.n	8006afa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e0cb      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006afa:	4b49      	ldr	r3, [pc, #292]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0ee      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x334>
 8006b06:	e014      	b.n	8006b32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b08:	f7fd fa6a 	bl	8003fe0 <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b0e:	e00a      	b.n	8006b26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b10:	f7fd fa66 	bl	8003fe0 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e0b5      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b26:	4b3e      	ldr	r3, [pc, #248]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1ee      	bne.n	8006b10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d105      	bne.n	8006b44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b38:	4b39      	ldr	r3, [pc, #228]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	4a38      	ldr	r2, [pc, #224]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 80a1 	beq.w	8006c90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b4e:	4b34      	ldr	r3, [pc, #208]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 030c 	and.w	r3, r3, #12
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d05c      	beq.n	8006c14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d141      	bne.n	8006be6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b62:	4b31      	ldr	r3, [pc, #196]	; (8006c28 <HAL_RCC_OscConfig+0x478>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b68:	f7fd fa3a 	bl	8003fe0 <HAL_GetTick>
 8006b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b6e:	e008      	b.n	8006b82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b70:	f7fd fa36 	bl	8003fe0 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e087      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b82:	4b27      	ldr	r3, [pc, #156]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1f0      	bne.n	8006b70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69da      	ldr	r2, [r3, #28]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	431a      	orrs	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	019b      	lsls	r3, r3, #6
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba4:	085b      	lsrs	r3, r3, #1
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	041b      	lsls	r3, r3, #16
 8006baa:	431a      	orrs	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb0:	061b      	lsls	r3, r3, #24
 8006bb2:	491b      	ldr	r1, [pc, #108]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bb8:	4b1b      	ldr	r3, [pc, #108]	; (8006c28 <HAL_RCC_OscConfig+0x478>)
 8006bba:	2201      	movs	r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bbe:	f7fd fa0f 	bl	8003fe0 <HAL_GetTick>
 8006bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bc6:	f7fd fa0b 	bl	8003fe0 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e05c      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bd8:	4b11      	ldr	r3, [pc, #68]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0f0      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x416>
 8006be4:	e054      	b.n	8006c90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006be6:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <HAL_RCC_OscConfig+0x478>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bec:	f7fd f9f8 	bl	8003fe0 <HAL_GetTick>
 8006bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bf4:	f7fd f9f4 	bl	8003fe0 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e045      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <HAL_RCC_OscConfig+0x470>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f0      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x444>
 8006c12:	e03d      	b.n	8006c90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d107      	bne.n	8006c2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e038      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
 8006c20:	40023800 	.word	0x40023800
 8006c24:	40007000 	.word	0x40007000
 8006c28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c2c:	4b1b      	ldr	r3, [pc, #108]	; (8006c9c <HAL_RCC_OscConfig+0x4ec>)
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d028      	beq.n	8006c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d121      	bne.n	8006c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d11a      	bne.n	8006c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d111      	bne.n	8006c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c72:	085b      	lsrs	r3, r3, #1
 8006c74:	3b01      	subs	r3, #1
 8006c76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d107      	bne.n	8006c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d001      	beq.n	8006c90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e000      	b.n	8006c92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	40023800 	.word	0x40023800

08006ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d101      	bne.n	8006cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e0cc      	b.n	8006e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cb4:	4b68      	ldr	r3, [pc, #416]	; (8006e58 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d90c      	bls.n	8006cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cc2:	4b65      	ldr	r3, [pc, #404]	; (8006e58 <HAL_RCC_ClockConfig+0x1b8>)
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cca:	4b63      	ldr	r3, [pc, #396]	; (8006e58 <HAL_RCC_ClockConfig+0x1b8>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d001      	beq.n	8006cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e0b8      	b.n	8006e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d020      	beq.n	8006d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cf4:	4b59      	ldr	r3, [pc, #356]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	4a58      	ldr	r2, [pc, #352]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006cfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0308 	and.w	r3, r3, #8
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d005      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d0c:	4b53      	ldr	r3, [pc, #332]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	4a52      	ldr	r2, [pc, #328]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006d12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d18:	4b50      	ldr	r3, [pc, #320]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	494d      	ldr	r1, [pc, #308]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d044      	beq.n	8006dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d107      	bne.n	8006d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d3e:	4b47      	ldr	r3, [pc, #284]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d119      	bne.n	8006d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e07f      	b.n	8006e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d003      	beq.n	8006d5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d107      	bne.n	8006d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d5e:	4b3f      	ldr	r3, [pc, #252]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d109      	bne.n	8006d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e06f      	b.n	8006e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d6e:	4b3b      	ldr	r3, [pc, #236]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e067      	b.n	8006e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d7e:	4b37      	ldr	r3, [pc, #220]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f023 0203 	bic.w	r2, r3, #3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	4934      	ldr	r1, [pc, #208]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d90:	f7fd f926 	bl	8003fe0 <HAL_GetTick>
 8006d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d96:	e00a      	b.n	8006dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d98:	f7fd f922 	bl	8003fe0 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e04f      	b.n	8006e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dae:	4b2b      	ldr	r3, [pc, #172]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 020c 	and.w	r2, r3, #12
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d1eb      	bne.n	8006d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dc0:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <HAL_RCC_ClockConfig+0x1b8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0307 	and.w	r3, r3, #7
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d20c      	bcs.n	8006de8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dce:	4b22      	ldr	r3, [pc, #136]	; (8006e58 <HAL_RCC_ClockConfig+0x1b8>)
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	b2d2      	uxtb	r2, r2
 8006dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dd6:	4b20      	ldr	r3, [pc, #128]	; (8006e58 <HAL_RCC_ClockConfig+0x1b8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0307 	and.w	r3, r3, #7
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d001      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e032      	b.n	8006e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d008      	beq.n	8006e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006df4:	4b19      	ldr	r3, [pc, #100]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	4916      	ldr	r1, [pc, #88]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0308 	and.w	r3, r3, #8
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d009      	beq.n	8006e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e12:	4b12      	ldr	r3, [pc, #72]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	490e      	ldr	r1, [pc, #56]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e26:	f000 f821 	bl	8006e6c <HAL_RCC_GetSysClockFreq>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	4b0b      	ldr	r3, [pc, #44]	; (8006e5c <HAL_RCC_ClockConfig+0x1bc>)
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	091b      	lsrs	r3, r3, #4
 8006e32:	f003 030f 	and.w	r3, r3, #15
 8006e36:	490a      	ldr	r1, [pc, #40]	; (8006e60 <HAL_RCC_ClockConfig+0x1c0>)
 8006e38:	5ccb      	ldrb	r3, [r1, r3]
 8006e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e3e:	4a09      	ldr	r2, [pc, #36]	; (8006e64 <HAL_RCC_ClockConfig+0x1c4>)
 8006e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e42:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <HAL_RCC_ClockConfig+0x1c8>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fd f886 	bl	8003f58 <HAL_InitTick>

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	40023c00 	.word	0x40023c00
 8006e5c:	40023800 	.word	0x40023800
 8006e60:	08014e74 	.word	0x08014e74
 8006e64:	20000040 	.word	0x20000040
 8006e68:	20000054 	.word	0x20000054

08006e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e70:	b090      	sub	sp, #64	; 0x40
 8006e72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	637b      	str	r3, [r7, #52]	; 0x34
 8006e78:	2300      	movs	r3, #0
 8006e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e84:	4b59      	ldr	r3, [pc, #356]	; (8006fec <HAL_RCC_GetSysClockFreq+0x180>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f003 030c 	and.w	r3, r3, #12
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d00d      	beq.n	8006eac <HAL_RCC_GetSysClockFreq+0x40>
 8006e90:	2b08      	cmp	r3, #8
 8006e92:	f200 80a1 	bhi.w	8006fd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <HAL_RCC_GetSysClockFreq+0x34>
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d003      	beq.n	8006ea6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e9e:	e09b      	b.n	8006fd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ea0:	4b53      	ldr	r3, [pc, #332]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006ea2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006ea4:	e09b      	b.n	8006fde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ea6:	4b53      	ldr	r3, [pc, #332]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ea8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006eaa:	e098      	b.n	8006fde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006eac:	4b4f      	ldr	r3, [pc, #316]	; (8006fec <HAL_RCC_GetSysClockFreq+0x180>)
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006eb6:	4b4d      	ldr	r3, [pc, #308]	; (8006fec <HAL_RCC_GetSysClockFreq+0x180>)
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d028      	beq.n	8006f14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ec2:	4b4a      	ldr	r3, [pc, #296]	; (8006fec <HAL_RCC_GetSysClockFreq+0x180>)
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	099b      	lsrs	r3, r3, #6
 8006ec8:	2200      	movs	r2, #0
 8006eca:	623b      	str	r3, [r7, #32]
 8006ecc:	627a      	str	r2, [r7, #36]	; 0x24
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	4b47      	ldr	r3, [pc, #284]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ed8:	fb03 f201 	mul.w	r2, r3, r1
 8006edc:	2300      	movs	r3, #0
 8006ede:	fb00 f303 	mul.w	r3, r0, r3
 8006ee2:	4413      	add	r3, r2
 8006ee4:	4a43      	ldr	r2, [pc, #268]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ee6:	fba0 1202 	umull	r1, r2, r0, r2
 8006eea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eec:	460a      	mov	r2, r1
 8006eee:	62ba      	str	r2, [r7, #40]	; 0x28
 8006ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ef2:	4413      	add	r3, r2
 8006ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef8:	2200      	movs	r2, #0
 8006efa:	61bb      	str	r3, [r7, #24]
 8006efc:	61fa      	str	r2, [r7, #28]
 8006efe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006f06:	f7f9 fea7 	bl	8000c58 <__aeabi_uldivmod>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	4613      	mov	r3, r2
 8006f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f12:	e053      	b.n	8006fbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f14:	4b35      	ldr	r3, [pc, #212]	; (8006fec <HAL_RCC_GetSysClockFreq+0x180>)
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	099b      	lsrs	r3, r3, #6
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	613b      	str	r3, [r7, #16]
 8006f1e:	617a      	str	r2, [r7, #20]
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006f26:	f04f 0b00 	mov.w	fp, #0
 8006f2a:	4652      	mov	r2, sl
 8006f2c:	465b      	mov	r3, fp
 8006f2e:	f04f 0000 	mov.w	r0, #0
 8006f32:	f04f 0100 	mov.w	r1, #0
 8006f36:	0159      	lsls	r1, r3, #5
 8006f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f3c:	0150      	lsls	r0, r2, #5
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	ebb2 080a 	subs.w	r8, r2, sl
 8006f46:	eb63 090b 	sbc.w	r9, r3, fp
 8006f4a:	f04f 0200 	mov.w	r2, #0
 8006f4e:	f04f 0300 	mov.w	r3, #0
 8006f52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006f56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006f5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006f5e:	ebb2 0408 	subs.w	r4, r2, r8
 8006f62:	eb63 0509 	sbc.w	r5, r3, r9
 8006f66:	f04f 0200 	mov.w	r2, #0
 8006f6a:	f04f 0300 	mov.w	r3, #0
 8006f6e:	00eb      	lsls	r3, r5, #3
 8006f70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f74:	00e2      	lsls	r2, r4, #3
 8006f76:	4614      	mov	r4, r2
 8006f78:	461d      	mov	r5, r3
 8006f7a:	eb14 030a 	adds.w	r3, r4, sl
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	eb45 030b 	adc.w	r3, r5, fp
 8006f84:	607b      	str	r3, [r7, #4]
 8006f86:	f04f 0200 	mov.w	r2, #0
 8006f8a:	f04f 0300 	mov.w	r3, #0
 8006f8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f92:	4629      	mov	r1, r5
 8006f94:	028b      	lsls	r3, r1, #10
 8006f96:	4621      	mov	r1, r4
 8006f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	028a      	lsls	r2, r1, #10
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	60bb      	str	r3, [r7, #8]
 8006faa:	60fa      	str	r2, [r7, #12]
 8006fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fb0:	f7f9 fe52 	bl	8000c58 <__aeabi_uldivmod>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4613      	mov	r3, r2
 8006fba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fbc:	4b0b      	ldr	r3, [pc, #44]	; (8006fec <HAL_RCC_GetSysClockFreq+0x180>)
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	0c1b      	lsrs	r3, r3, #16
 8006fc2:	f003 0303 	and.w	r3, r3, #3
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006fcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006fd6:	e002      	b.n	8006fde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fd8:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006fda:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3740      	adds	r7, #64	; 0x40
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fea:	bf00      	nop
 8006fec:	40023800 	.word	0x40023800
 8006ff0:	00f42400 	.word	0x00f42400
 8006ff4:	017d7840 	.word	0x017d7840

08006ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ffc:	4b03      	ldr	r3, [pc, #12]	; (800700c <HAL_RCC_GetHCLKFreq+0x14>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
}
 8007000:	4618      	mov	r0, r3
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	20000040 	.word	0x20000040

08007010 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e022      	b.n	8007068 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d105      	bne.n	800703a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7fa fb05 	bl	8001644 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2203      	movs	r2, #3
 800703e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f814 	bl	8007070 <HAL_SD_InitCard>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e00a      	b.n	8007068 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007070:	b5b0      	push	{r4, r5, r7, lr}
 8007072:	b08e      	sub	sp, #56	; 0x38
 8007074:	af04      	add	r7, sp, #16
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007078:	2300      	movs	r3, #0
 800707a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007080:	2300      	movs	r3, #0
 8007082:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007084:	2300      	movs	r3, #0
 8007086:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007088:	2300      	movs	r3, #0
 800708a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800708c:	2376      	movs	r3, #118	; 0x76
 800708e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681d      	ldr	r5, [r3, #0]
 8007094:	466c      	mov	r4, sp
 8007096:	f107 0314 	add.w	r3, r7, #20
 800709a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800709e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80070a2:	f107 0308 	add.w	r3, r7, #8
 80070a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070a8:	4628      	mov	r0, r5
 80070aa:	f001 fc87 	bl	80089bc <SDIO_Init>
 80070ae:	4603      	mov	r3, r0
 80070b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80070b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e04f      	b.n	8007160 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80070c0:	4b29      	ldr	r3, [pc, #164]	; (8007168 <HAL_SD_InitCard+0xf8>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f001 fcbf 	bl	8008a4e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80070d0:	4b25      	ldr	r3, [pc, #148]	; (8007168 <HAL_SD_InitCard+0xf8>)
 80070d2:	2201      	movs	r2, #1
 80070d4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80070d6:	2002      	movs	r0, #2
 80070d8:	f7fc ff8e 	bl	8003ff8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 f80f 	bl	8008100 <SD_PowerON>
 80070e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00b      	beq.n	8007102 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	431a      	orrs	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e02e      	b.n	8007160 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 ff2e 	bl	8007f64 <SD_InitCard>
 8007108:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	431a      	orrs	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e01b      	b.n	8007160 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007130:	4618      	mov	r0, r3
 8007132:	f001 fd1e 	bl	8008b72 <SDMMC_CmdBlockLength>
 8007136:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00f      	beq.n	800715e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a0a      	ldr	r2, [pc, #40]	; (800716c <HAL_SD_InitCard+0xfc>)
 8007144:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	431a      	orrs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3728      	adds	r7, #40	; 0x28
 8007164:	46bd      	mov	sp, r7
 8007166:	bdb0      	pop	{r4, r5, r7, pc}
 8007168:	422580a0 	.word	0x422580a0
 800716c:	004005ff 	.word	0x004005ff

08007170 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b08c      	sub	sp, #48	; 0x30
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
 800717c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d107      	bne.n	8007198 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e0c0      	b.n	800731a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	f040 80b9 	bne.w	8007318 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80071ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	441a      	add	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d907      	bls.n	80071ca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e0a7      	b.n	800731a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2203      	movs	r2, #3
 80071ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2200      	movs	r2, #0
 80071d8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80071e8:	f043 0302 	orr.w	r3, r3, #2
 80071ec:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	4a4c      	ldr	r2, [pc, #304]	; (8007324 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80071f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fa:	4a4b      	ldr	r2, [pc, #300]	; (8007328 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80071fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	2200      	movs	r2, #0
 8007204:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	2200      	movs	r2, #0
 800720c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3380      	adds	r3, #128	; 0x80
 8007234:	4619      	mov	r1, r3
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	025b      	lsls	r3, r3, #9
 800723c:	089b      	lsrs	r3, r3, #2
 800723e:	f7fd f8bf 	bl	80043c0 <HAL_DMA_Start_IT>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d017      	beq.n	8007278 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007256:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a33      	ldr	r2, [pc, #204]	; (800732c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800725e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e050      	b.n	800731a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007278:	4b2d      	ldr	r3, [pc, #180]	; (8007330 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800727a:	2201      	movs	r2, #1
 800727c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007282:	2b01      	cmp	r3, #1
 8007284:	d002      	beq.n	800728c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	025b      	lsls	r3, r3, #9
 800728a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800728c:	f04f 33ff 	mov.w	r3, #4294967295
 8007290:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	025b      	lsls	r3, r3, #9
 8007296:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007298:	2390      	movs	r3, #144	; 0x90
 800729a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800729c:	2302      	movs	r3, #2
 800729e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80072a4:	2301      	movs	r3, #1
 80072a6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f107 0210 	add.w	r2, r7, #16
 80072b0:	4611      	mov	r1, r2
 80072b2:	4618      	mov	r0, r3
 80072b4:	f001 fc31 	bl	8008b1a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d90a      	bls.n	80072d4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2282      	movs	r2, #130	; 0x82
 80072c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072ca:	4618      	mov	r0, r3
 80072cc:	f001 fc95 	bl	8008bfa <SDMMC_CmdReadMultiBlock>
 80072d0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80072d2:	e009      	b.n	80072e8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2281      	movs	r2, #129	; 0x81
 80072d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072e0:	4618      	mov	r0, r3
 80072e2:	f001 fc68 	bl	8008bb6 <SDMMC_CmdReadSingleBlock>
 80072e6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d012      	beq.n	8007314 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a0e      	ldr	r2, [pc, #56]	; (800732c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80072f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fc:	431a      	orrs	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e002      	b.n	800731a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	e000      	b.n	800731a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8007318:	2302      	movs	r3, #2
  }
}
 800731a:	4618      	mov	r0, r3
 800731c:	3730      	adds	r7, #48	; 0x30
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	08007d73 	.word	0x08007d73
 8007328:	08007de5 	.word	0x08007de5
 800732c:	004005ff 	.word	0x004005ff
 8007330:	4225858c 	.word	0x4225858c

08007334 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b08c      	sub	sp, #48	; 0x30
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d107      	bne.n	800735c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007350:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e0c5      	b.n	80074e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b01      	cmp	r3, #1
 8007366:	f040 80be 	bne.w	80074e6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	441a      	add	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800737a:	429a      	cmp	r2, r3
 800737c:	d907      	bls.n	800738e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e0ac      	b.n	80074e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2203      	movs	r2, #3
 8007392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2200      	movs	r2, #0
 800739c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	6812      	ldr	r2, [r2, #0]
 80073a8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80073ac:	f043 0302 	orr.w	r3, r3, #2
 80073b0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b6:	4a4e      	ldr	r2, [pc, #312]	; (80074f0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80073b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073be:	4a4d      	ldr	r2, [pc, #308]	; (80074f4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80073c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c6:	2200      	movs	r2, #0
 80073c8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d002      	beq.n	80073d8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	025b      	lsls	r3, r3, #9
 80073d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d90a      	bls.n	80073f4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	22a0      	movs	r2, #160	; 0xa0
 80073e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ea:	4618      	mov	r0, r3
 80073ec:	f001 fc49 	bl	8008c82 <SDMMC_CmdWriteMultiBlock>
 80073f0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80073f2:	e009      	b.n	8007408 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2290      	movs	r2, #144	; 0x90
 80073f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007400:	4618      	mov	r0, r3
 8007402:	f001 fc1c 	bl	8008c3e <SDMMC_CmdWriteSingleBlock>
 8007406:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d012      	beq.n	8007434 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a39      	ldr	r2, [pc, #228]	; (80074f8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007414:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800741a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741c:	431a      	orrs	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e059      	b.n	80074e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007434:	4b31      	ldr	r3, [pc, #196]	; (80074fc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8007436:	2201      	movs	r2, #1
 8007438:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743e:	2240      	movs	r2, #64	; 0x40
 8007440:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007462:	68b9      	ldr	r1, [r7, #8]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3380      	adds	r3, #128	; 0x80
 800746a:	461a      	mov	r2, r3
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	025b      	lsls	r3, r3, #9
 8007470:	089b      	lsrs	r3, r3, #2
 8007472:	f7fc ffa5 	bl	80043c0 <HAL_DMA_Start_IT>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01c      	beq.n	80074b6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	6812      	ldr	r2, [r2, #0]
 8007486:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800748a:	f023 0302 	bic.w	r3, r3, #2
 800748e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a18      	ldr	r2, [pc, #96]	; (80074f8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007496:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e018      	b.n	80074e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80074b6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ba:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	025b      	lsls	r3, r3, #9
 80074c0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80074c2:	2390      	movs	r3, #144	; 0x90
 80074c4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80074c6:	2300      	movs	r3, #0
 80074c8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80074ce:	2301      	movs	r3, #1
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f107 0210 	add.w	r2, r7, #16
 80074da:	4611      	mov	r1, r2
 80074dc:	4618      	mov	r0, r3
 80074de:	f001 fb1c 	bl	8008b1a <SDIO_ConfigData>

      return HAL_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	e000      	b.n	80074e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80074e6:	2302      	movs	r3, #2
  }
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3730      	adds	r7, #48	; 0x30
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	08007d49 	.word	0x08007d49
 80074f4:	08007de5 	.word	0x08007de5
 80074f8:	004005ff 	.word	0x004005ff
 80074fc:	4225858c 	.word	0x4225858c

08007500 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d008      	beq.n	800752e <HAL_SD_IRQHandler+0x2e>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 f810 	bl	800854c <SD_Read_IT>
 800752c:	e165      	b.n	80077fa <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 808f 	beq.w	800765c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007546:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	6812      	ldr	r2, [r2, #0]
 8007552:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8007556:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800755a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f022 0201 	bic.w	r2, r2, #1
 800756a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f003 0308 	and.w	r3, r3, #8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d039      	beq.n	80075ea <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f003 0302 	and.w	r3, r3, #2
 800757c:	2b00      	cmp	r3, #0
 800757e:	d104      	bne.n	800758a <HAL_SD_IRQHandler+0x8a>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f003 0320 	and.w	r3, r3, #32
 8007586:	2b00      	cmp	r3, #0
 8007588:	d011      	beq.n	80075ae <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4618      	mov	r0, r3
 8007590:	f001 fb9a 	bl	8008cc8 <SDMMC_CmdStopTransfer>
 8007594:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d008      	beq.n	80075ae <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f92f 	bl	800780c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f240 523a 	movw	r2, #1338	; 0x53a
 80075b6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d104      	bne.n	80075da <HAL_SD_IRQHandler+0xda>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7fc fa00 	bl	80039e0 <HAL_SD_RxCpltCallback>
 80075e0:	e10b      	b.n	80077fa <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7fc f9ec 	bl	80039c0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80075e8:	e107      	b.n	80077fa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 8102 	beq.w	80077fa <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d011      	beq.n	8007624 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4618      	mov	r0, r3
 8007606:	f001 fb5f 	bl	8008cc8 <SDMMC_CmdStopTransfer>
 800760a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d008      	beq.n	8007624 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	431a      	orrs	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f8f4 	bl	800780c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	f040 80e5 	bne.w	80077fa <HAL_SD_IRQHandler+0x2fa>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b00      	cmp	r3, #0
 8007638:	f040 80df 	bne.w	80077fa <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0208 	bic.w	r2, r2, #8
 800764a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7fc f9b3 	bl	80039c0 <HAL_SD_TxCpltCallback>
}
 800765a:	e0ce      	b.n	80077fa <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d008      	beq.n	800767c <HAL_SD_IRQHandler+0x17c>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 ffba 	bl	80085ee <SD_Write_IT>
 800767a:	e0be      	b.n	80077fa <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007682:	f240 233a 	movw	r3, #570	; 0x23a
 8007686:	4013      	ands	r3, r2
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 80b6 	beq.w	80077fa <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d005      	beq.n	80076a8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	f043 0202 	orr.w	r2, r3, #2
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ae:	f003 0308 	and.w	r3, r3, #8
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d005      	beq.n	80076c2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ba:	f043 0208 	orr.w	r2, r3, #8
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c8:	f003 0320 	and.w	r3, r3, #32
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d005      	beq.n	80076dc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d4:	f043 0220 	orr.w	r2, r3, #32
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e2:	f003 0310 	and.w	r3, r3, #16
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	f043 0210 	orr.w	r2, r3, #16
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007700:	2b00      	cmp	r3, #0
 8007702:	d005      	beq.n	8007710 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007708:	f043 0208 	orr.w	r2, r3, #8
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f240 723a 	movw	r2, #1850	; 0x73a
 8007718:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	6812      	ldr	r2, [r2, #0]
 8007724:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8007728:	f023 0302 	bic.w	r3, r3, #2
 800772c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4618      	mov	r0, r3
 8007734:	f001 fac8 	bl	8008cc8 <SDMMC_CmdStopTransfer>
 8007738:	4602      	mov	r2, r0
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773e:	431a      	orrs	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f003 0308 	and.w	r3, r3, #8
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00a      	beq.n	8007764 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f855 	bl	800780c <HAL_SD_ErrorCallback>
}
 8007762:	e04a      	b.n	80077fa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800776a:	2b00      	cmp	r3, #0
 800776c:	d045      	beq.n	80077fa <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f003 0310 	and.w	r3, r3, #16
 8007774:	2b00      	cmp	r3, #0
 8007776:	d104      	bne.n	8007782 <HAL_SD_IRQHandler+0x282>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f003 0320 	and.w	r3, r3, #32
 800777e:	2b00      	cmp	r3, #0
 8007780:	d011      	beq.n	80077a6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007786:	4a1f      	ldr	r2, [pc, #124]	; (8007804 <HAL_SD_IRQHandler+0x304>)
 8007788:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778e:	4618      	mov	r0, r3
 8007790:	f7fc fe6e 	bl	8004470 <HAL_DMA_Abort_IT>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d02f      	beq.n	80077fa <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 fb72 	bl	8007e88 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80077a4:	e029      	b.n	80077fa <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d104      	bne.n	80077ba <HAL_SD_IRQHandler+0x2ba>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d011      	beq.n	80077de <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077be:	4a12      	ldr	r2, [pc, #72]	; (8007808 <HAL_SD_IRQHandler+0x308>)
 80077c0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fc fe52 	bl	8004470 <HAL_DMA_Abort_IT>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d013      	beq.n	80077fa <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 fb8d 	bl	8007ef6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80077dc:	e00d      	b.n	80077fa <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f814 	bl	8007820 <HAL_SD_AbortCallback>
}
 80077f8:	e7ff      	b.n	80077fa <HAL_SD_IRQHandler+0x2fa>
 80077fa:	bf00      	nop
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	08007e89 	.word	0x08007e89
 8007808:	08007ef7 	.word	0x08007ef7

0800780c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007842:	0f9b      	lsrs	r3, r3, #30
 8007844:	b2da      	uxtb	r2, r3
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800784e:	0e9b      	lsrs	r3, r3, #26
 8007850:	b2db      	uxtb	r3, r3
 8007852:	f003 030f 	and.w	r3, r3, #15
 8007856:	b2da      	uxtb	r2, r3
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007860:	0e1b      	lsrs	r3, r3, #24
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f003 0303 	and.w	r3, r3, #3
 8007868:	b2da      	uxtb	r2, r3
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007872:	0c1b      	lsrs	r3, r3, #16
 8007874:	b2da      	uxtb	r2, r3
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800787e:	0a1b      	lsrs	r3, r3, #8
 8007880:	b2da      	uxtb	r2, r3
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800788a:	b2da      	uxtb	r2, r3
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007894:	0d1b      	lsrs	r3, r3, #20
 8007896:	b29a      	uxth	r2, r3
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078a0:	0c1b      	lsrs	r3, r3, #16
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078b2:	0bdb      	lsrs	r3, r3, #15
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078c4:	0b9b      	lsrs	r3, r3, #14
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078d6:	0b5b      	lsrs	r3, r3, #13
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078e8:	0b1b      	lsrs	r3, r3, #12
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2200      	movs	r2, #0
 80078fa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007900:	2b00      	cmp	r3, #0
 8007902:	d163      	bne.n	80079cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007908:	009a      	lsls	r2, r3, #2
 800790a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800790e:	4013      	ands	r3, r2
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007914:	0f92      	lsrs	r2, r2, #30
 8007916:	431a      	orrs	r2, r3
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007920:	0edb      	lsrs	r3, r3, #27
 8007922:	b2db      	uxtb	r3, r3
 8007924:	f003 0307 	and.w	r3, r3, #7
 8007928:	b2da      	uxtb	r2, r3
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007932:	0e1b      	lsrs	r3, r3, #24
 8007934:	b2db      	uxtb	r3, r3
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	b2da      	uxtb	r2, r3
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007944:	0d5b      	lsrs	r3, r3, #21
 8007946:	b2db      	uxtb	r3, r3
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	b2da      	uxtb	r2, r3
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007956:	0c9b      	lsrs	r3, r3, #18
 8007958:	b2db      	uxtb	r3, r3
 800795a:	f003 0307 	and.w	r3, r3, #7
 800795e:	b2da      	uxtb	r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007968:	0bdb      	lsrs	r3, r3, #15
 800796a:	b2db      	uxtb	r3, r3
 800796c:	f003 0307 	and.w	r3, r3, #7
 8007970:	b2da      	uxtb	r2, r3
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	7e1b      	ldrb	r3, [r3, #24]
 8007984:	b2db      	uxtb	r3, r3
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	3302      	adds	r3, #2
 800798c:	2201      	movs	r2, #1
 800798e:	fa02 f303 	lsl.w	r3, r2, r3
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007996:	fb03 f202 	mul.w	r2, r3, r2
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	7a1b      	ldrb	r3, [r3, #8]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	f003 030f 	and.w	r3, r3, #15
 80079a8:	2201      	movs	r2, #1
 80079aa:	409a      	lsls	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80079b8:	0a52      	lsrs	r2, r2, #9
 80079ba:	fb03 f202 	mul.w	r2, r3, r2
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079c8:	661a      	str	r2, [r3, #96]	; 0x60
 80079ca:	e031      	b.n	8007a30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d11d      	bne.n	8007a10 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079d8:	041b      	lsls	r3, r3, #16
 80079da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079e2:	0c1b      	lsrs	r3, r3, #16
 80079e4:	431a      	orrs	r2, r3
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	3301      	adds	r3, #1
 80079f0:	029a      	lsls	r2, r3, #10
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a04:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	661a      	str	r2, [r3, #96]	; 0x60
 8007a0e:	e00f      	b.n	8007a30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a58      	ldr	r2, [pc, #352]	; (8007b78 <HAL_SD_GetCardCSD+0x344>)
 8007a16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e09d      	b.n	8007b6c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a34:	0b9b      	lsrs	r3, r3, #14
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a46:	09db      	lsrs	r3, r3, #7
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a68:	0fdb      	lsrs	r3, r3, #31
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a74:	0f5b      	lsrs	r3, r3, #29
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	f003 0303 	and.w	r3, r3, #3
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a86:	0e9b      	lsrs	r3, r3, #26
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	f003 0307 	and.w	r3, r3, #7
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a98:	0d9b      	lsrs	r3, r3, #22
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	f003 030f 	and.w	r3, r3, #15
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aaa:	0d5b      	lsrs	r3, r3, #21
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac6:	0c1b      	lsrs	r3, r3, #16
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ada:	0bdb      	lsrs	r3, r3, #15
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aee:	0b9b      	lsrs	r3, r3, #14
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b02:	0b5b      	lsrs	r3, r3, #13
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b16:	0b1b      	lsrs	r3, r3, #12
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2a:	0a9b      	lsrs	r3, r3, #10
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3e:	0a1b      	lsrs	r3, r3, #8
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	f003 0303 	and.w	r3, r3, #3
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b52:	085b      	lsrs	r3, r3, #1
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	004005ff 	.word	0x004005ff

08007b7c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007bd4:	b5b0      	push	{r4, r5, r7, lr}
 8007bd6:	b08e      	sub	sp, #56	; 0x38
 8007bd8:	af04      	add	r7, sp, #16
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2203      	movs	r2, #3
 8007be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d02e      	beq.n	8007c52 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bfa:	d106      	bne.n	8007c0a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	639a      	str	r2, [r3, #56]	; 0x38
 8007c08:	e029      	b.n	8007c5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c10:	d10a      	bne.n	8007c28 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fb2a 	bl	800826c <SD_WideBus_Enable>
 8007c18:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	431a      	orrs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	639a      	str	r2, [r3, #56]	; 0x38
 8007c26:	e01a      	b.n	8007c5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10a      	bne.n	8007c44 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fb67 	bl	8008302 <SD_WideBus_Disable>
 8007c34:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	431a      	orrs	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	639a      	str	r2, [r3, #56]	; 0x38
 8007c42:	e00c      	b.n	8007c5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	639a      	str	r2, [r3, #56]	; 0x38
 8007c50:	e005      	b.n	8007c5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00b      	beq.n	8007c7e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a26      	ldr	r2, [pc, #152]	; (8007d04 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007c6c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c7c:	e01f      	b.n	8007cbe <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681d      	ldr	r5, [r3, #0]
 8007ca4:	466c      	mov	r4, sp
 8007ca6:	f107 0314 	add.w	r3, r7, #20
 8007caa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007cae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007cb2:	f107 0308 	add.w	r3, r7, #8
 8007cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f000 fe7f 	bl	80089bc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 ff53 	bl	8008b72 <SDMMC_CmdBlockLength>
 8007ccc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00c      	beq.n	8007cee <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a0a      	ldr	r2, [pc, #40]	; (8007d04 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007cda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3728      	adds	r7, #40	; 0x28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bdb0      	pop	{r4, r5, r7, pc}
 8007d02:	bf00      	nop
 8007d04:	004005ff 	.word	0x004005ff

08007d08 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007d14:	f107 030c 	add.w	r3, r7, #12
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fa7e 	bl	800821c <SD_SendStatus>
 8007d20:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	431a      	orrs	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	0a5b      	lsrs	r3, r3, #9
 8007d38:	f003 030f 	and.w	r3, r3, #15
 8007d3c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007d3e:	693b      	ldr	r3, [r7, #16]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d54:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d64:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007d66:	bf00      	nop
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d84:	2b82      	cmp	r3, #130	; 0x82
 8007d86:	d111      	bne.n	8007dac <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 ff9b 	bl	8008cc8 <SDMMC_CmdStopTransfer>
 8007d92:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d008      	beq.n	8007dac <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	431a      	orrs	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f7ff fd30 	bl	800780c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f022 0208 	bic.w	r2, r2, #8
 8007dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f240 523a 	movw	r2, #1338	; 0x53a
 8007dc4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f7fb fe03 	bl	80039e0 <HAL_SD_RxCpltCallback>
#endif
}
 8007dda:	bf00      	nop
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
	...

08007de4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7fc fce8 	bl	80047c8 <HAL_DMA_GetError>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d03e      	beq.n	8007e7c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e04:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d002      	beq.n	8007e1a <SD_DMAError+0x36>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d12d      	bne.n	8007e76 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a19      	ldr	r2, [pc, #100]	; (8007e84 <SD_DMAError+0xa0>)
 8007e20:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007e30:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007e3e:	6978      	ldr	r0, [r7, #20]
 8007e40:	f7ff ff62 	bl	8007d08 <HAL_SD_GetCardState>
 8007e44:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2b06      	cmp	r3, #6
 8007e4a:	d002      	beq.n	8007e52 <SD_DMAError+0x6e>
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2b05      	cmp	r3, #5
 8007e50:	d10a      	bne.n	8007e68 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 ff36 	bl	8008cc8 <SDMMC_CmdStopTransfer>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e62:	431a      	orrs	r2, r3
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	2200      	movs	r2, #0
 8007e74:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007e76:	6978      	ldr	r0, [r7, #20]
 8007e78:	f7ff fcc8 	bl	800780c <HAL_SD_ErrorCallback>
#endif
  }
}
 8007e7c:	bf00      	nop
 8007e7e:	3718      	adds	r7, #24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	004005ff 	.word	0x004005ff

08007e88 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e94:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f240 523a 	movw	r2, #1338	; 0x53a
 8007e9e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f7ff ff31 	bl	8007d08 <HAL_SD_GetCardState>
 8007ea6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2b06      	cmp	r3, #6
 8007eba:	d002      	beq.n	8007ec2 <SD_DMATxAbort+0x3a>
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	2b05      	cmp	r3, #5
 8007ec0:	d10a      	bne.n	8007ed8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 fefe 	bl	8008cc8 <SDMMC_CmdStopTransfer>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d103      	bne.n	8007ee8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7ff fc9d 	bl	8007820 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007ee6:	e002      	b.n	8007eee <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f7ff fc8f 	bl	800780c <HAL_SD_ErrorCallback>
}
 8007eee:	bf00      	nop
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f02:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f240 523a 	movw	r2, #1338	; 0x53a
 8007f0c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7ff fefa 	bl	8007d08 <HAL_SD_GetCardState>
 8007f14:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b06      	cmp	r3, #6
 8007f28:	d002      	beq.n	8007f30 <SD_DMARxAbort+0x3a>
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2b05      	cmp	r3, #5
 8007f2e:	d10a      	bne.n	8007f46 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 fec7 	bl	8008cc8 <SDMMC_CmdStopTransfer>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f40:	431a      	orrs	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d103      	bne.n	8007f56 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f7ff fc66 	bl	8007820 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007f54:	e002      	b.n	8007f5c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f7ff fc58 	bl	800780c <HAL_SD_ErrorCallback>
}
 8007f5c:	bf00      	nop
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007f64:	b5b0      	push	{r4, r5, r7, lr}
 8007f66:	b094      	sub	sp, #80	; 0x50
 8007f68:	af04      	add	r7, sp, #16
 8007f6a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f000 fd78 	bl	8008a6a <SDIO_GetPowerState>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d102      	bne.n	8007f86 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007f84:	e0b8      	b.n	80080f8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d02f      	beq.n	8007fee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 ffa2 	bl	8008edc <SDMMC_CmdSendCID>
 8007f98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <SD_InitCard+0x40>
    {
      return errorstate;
 8007fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa2:	e0a9      	b.n	80080f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2100      	movs	r1, #0
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fda2 	bl	8008af4 <SDIO_GetResponse>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2104      	movs	r1, #4
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 fd99 	bl	8008af4 <SDIO_GetResponse>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2108      	movs	r1, #8
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 fd90 	bl	8008af4 <SDIO_GetResponse>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	210c      	movs	r1, #12
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 fd87 	bl	8008af4 <SDIO_GetResponse>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d00d      	beq.n	8008012 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f107 020e 	add.w	r2, r7, #14
 8007ffe:	4611      	mov	r1, r2
 8008000:	4618      	mov	r0, r3
 8008002:	f000 ffa8 	bl	8008f56 <SDMMC_CmdSetRelAdd>
 8008006:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <SD_InitCard+0xae>
    {
      return errorstate;
 800800e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008010:	e072      	b.n	80080f8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008016:	2b03      	cmp	r3, #3
 8008018:	d036      	beq.n	8008088 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800801a:	89fb      	ldrh	r3, [r7, #14]
 800801c:	461a      	mov	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800802a:	041b      	lsls	r3, r3, #16
 800802c:	4619      	mov	r1, r3
 800802e:	4610      	mov	r0, r2
 8008030:	f000 ff72 	bl	8008f18 <SDMMC_CmdSendCSD>
 8008034:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <SD_InitCard+0xdc>
    {
      return errorstate;
 800803c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800803e:	e05b      	b.n	80080f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f000 fd54 	bl	8008af4 <SDIO_GetResponse>
 800804c:	4602      	mov	r2, r0
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2104      	movs	r1, #4
 8008058:	4618      	mov	r0, r3
 800805a:	f000 fd4b 	bl	8008af4 <SDIO_GetResponse>
 800805e:	4602      	mov	r2, r0
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2108      	movs	r1, #8
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fd42 	bl	8008af4 <SDIO_GetResponse>
 8008070:	4602      	mov	r2, r0
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	210c      	movs	r1, #12
 800807c:	4618      	mov	r0, r3
 800807e:	f000 fd39 	bl	8008af4 <SDIO_GetResponse>
 8008082:	4602      	mov	r2, r0
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2104      	movs	r1, #4
 800808e:	4618      	mov	r0, r3
 8008090:	f000 fd30 	bl	8008af4 <SDIO_GetResponse>
 8008094:	4603      	mov	r3, r0
 8008096:	0d1a      	lsrs	r2, r3, #20
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800809c:	f107 0310 	add.w	r3, r7, #16
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff fbc6 	bl	8007834 <HAL_SD_GetCardCSD>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80080b2:	e021      	b.n	80080f8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6819      	ldr	r1, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080bc:	041b      	lsls	r3, r3, #16
 80080be:	2200      	movs	r2, #0
 80080c0:	461c      	mov	r4, r3
 80080c2:	4615      	mov	r5, r2
 80080c4:	4622      	mov	r2, r4
 80080c6:	462b      	mov	r3, r5
 80080c8:	4608      	mov	r0, r1
 80080ca:	f000 fe1f 	bl	8008d0c <SDMMC_CmdSelDesel>
 80080ce:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80080d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <SD_InitCard+0x176>
  {
    return errorstate;
 80080d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d8:	e00e      	b.n	80080f8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681d      	ldr	r5, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	466c      	mov	r4, sp
 80080e2:	f103 0210 	add.w	r2, r3, #16
 80080e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80080e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80080ec:	3304      	adds	r3, #4
 80080ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080f0:	4628      	mov	r0, r5
 80080f2:	f000 fc63 	bl	80089bc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3740      	adds	r7, #64	; 0x40
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bdb0      	pop	{r4, r5, r7, pc}

08008100 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	617b      	str	r3, [r7, #20]
 8008110:	2300      	movs	r3, #0
 8008112:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4618      	mov	r0, r3
 800811a:	f000 fe1a 	bl	8008d52 <SDMMC_CmdGoIdleState>
 800811e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	e072      	b.n	8008210 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fe2d 	bl	8008d8e <SDMMC_CmdOperCond>
 8008134:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00d      	beq.n	8008158 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4618      	mov	r0, r3
 8008148:	f000 fe03 	bl	8008d52 <SDMMC_CmdGoIdleState>
 800814c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d004      	beq.n	800815e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	e05b      	b.n	8008210 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008162:	2b01      	cmp	r3, #1
 8008164:	d137      	bne.n	80081d6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2100      	movs	r1, #0
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fe2d 	bl	8008dcc <SDMMC_CmdAppCommand>
 8008172:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d02d      	beq.n	80081d6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800817a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800817e:	e047      	b.n	8008210 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2100      	movs	r1, #0
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fe20 	bl	8008dcc <SDMMC_CmdAppCommand>
 800818c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <SD_PowerON+0x98>
    {
      return errorstate;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	e03b      	b.n	8008210 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	491e      	ldr	r1, [pc, #120]	; (8008218 <SD_PowerON+0x118>)
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 fe36 	bl	8008e10 <SDMMC_CmdAppOperCommand>
 80081a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80081b0:	e02e      	b.n	8008210 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2100      	movs	r1, #0
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 fc9b 	bl	8008af4 <SDIO_GetResponse>
 80081be:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	0fdb      	lsrs	r3, r3, #31
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d101      	bne.n	80081cc <SD_PowerON+0xcc>
 80081c8:	2301      	movs	r3, #1
 80081ca:	e000      	b.n	80081ce <SD_PowerON+0xce>
 80081cc:	2300      	movs	r3, #0
 80081ce:	613b      	str	r3, [r7, #16]

    count++;
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	3301      	adds	r3, #1
 80081d4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80081dc:	4293      	cmp	r3, r2
 80081de:	d802      	bhi.n	80081e6 <SD_PowerON+0xe6>
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0cc      	beq.n	8008180 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d902      	bls.n	80081f6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80081f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081f4:	e00c      	b.n	8008210 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	645a      	str	r2, [r3, #68]	; 0x44
 8008206:	e002      	b.n	800820e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	c1100000 	.word	0xc1100000

0800821c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d102      	bne.n	8008232 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800822c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008230:	e018      	b.n	8008264 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800823a:	041b      	lsls	r3, r3, #16
 800823c:	4619      	mov	r1, r3
 800823e:	4610      	mov	r0, r2
 8008240:	f000 feaa 	bl	8008f98 <SDMMC_CmdSendStatus>
 8008244:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <SD_SendStatus+0x34>
  {
    return errorstate;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	e009      	b.n	8008264 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2100      	movs	r1, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f000 fc4c 	bl	8008af4 <SDIO_GetResponse>
 800825c:	4602      	mov	r2, r0
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008274:	2300      	movs	r3, #0
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	2300      	movs	r3, #0
 800827a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2100      	movs	r1, #0
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fc36 	bl	8008af4 <SDIO_GetResponse>
 8008288:	4603      	mov	r3, r0
 800828a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800828e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008292:	d102      	bne.n	800829a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008298:	e02f      	b.n	80082fa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800829a:	f107 030c 	add.w	r3, r7, #12
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f879 	bl	8008398 <SD_FindSCR>
 80082a6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	e023      	b.n	80082fa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d01c      	beq.n	80082f6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082c4:	041b      	lsls	r3, r3, #16
 80082c6:	4619      	mov	r1, r3
 80082c8:	4610      	mov	r0, r2
 80082ca:	f000 fd7f 	bl	8008dcc <SDMMC_CmdAppCommand>
 80082ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	e00f      	b.n	80082fa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2102      	movs	r1, #2
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 fdb8 	bl	8008e56 <SDMMC_CmdBusWidth>
 80082e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d001      	beq.n	80082f2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	e003      	b.n	80082fa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80082f2:	2300      	movs	r3, #0
 80082f4:	e001      	b.n	80082fa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80082f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b086      	sub	sp, #24
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800830a:	2300      	movs	r3, #0
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	2300      	movs	r3, #0
 8008310:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2100      	movs	r1, #0
 8008318:	4618      	mov	r0, r3
 800831a:	f000 fbeb 	bl	8008af4 <SDIO_GetResponse>
 800831e:	4603      	mov	r3, r0
 8008320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008324:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008328:	d102      	bne.n	8008330 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800832a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800832e:	e02f      	b.n	8008390 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008330:	f107 030c 	add.w	r3, r7, #12
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f82e 	bl	8008398 <SD_FindSCR>
 800833c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	e023      	b.n	8008390 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01c      	beq.n	800838c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800835a:	041b      	lsls	r3, r3, #16
 800835c:	4619      	mov	r1, r3
 800835e:	4610      	mov	r0, r2
 8008360:	f000 fd34 	bl	8008dcc <SDMMC_CmdAppCommand>
 8008364:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	e00f      	b.n	8008390 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2100      	movs	r1, #0
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fd6d 	bl	8008e56 <SDMMC_CmdBusWidth>
 800837c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	e003      	b.n	8008390 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008388:	2300      	movs	r3, #0
 800838a:	e001      	b.n	8008390 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800838c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008398:	b590      	push	{r4, r7, lr}
 800839a:	b08f      	sub	sp, #60	; 0x3c
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80083a2:	f7fb fe1d 	bl	8003fe0 <HAL_GetTick>
 80083a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80083ac:	2300      	movs	r3, #0
 80083ae:	60bb      	str	r3, [r7, #8]
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2108      	movs	r1, #8
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 fbd7 	bl	8008b72 <SDMMC_CmdBlockLength>
 80083c4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	e0b9      	b.n	8008544 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d8:	041b      	lsls	r3, r3, #16
 80083da:	4619      	mov	r1, r3
 80083dc:	4610      	mov	r0, r2
 80083de:	f000 fcf5 	bl	8008dcc <SDMMC_CmdAppCommand>
 80083e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80083e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <SD_FindSCR+0x56>
  {
    return errorstate;
 80083ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ec:	e0aa      	b.n	8008544 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80083ee:	f04f 33ff 	mov.w	r3, #4294967295
 80083f2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80083f4:	2308      	movs	r3, #8
 80083f6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80083f8:	2330      	movs	r3, #48	; 0x30
 80083fa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80083fc:	2302      	movs	r3, #2
 80083fe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008400:	2300      	movs	r3, #0
 8008402:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008404:	2301      	movs	r3, #1
 8008406:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f107 0210 	add.w	r2, r7, #16
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fb81 	bl	8008b1a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4618      	mov	r0, r3
 800841e:	f000 fd3c 	bl	8008e9a <SDMMC_CmdSendSCR>
 8008422:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008426:	2b00      	cmp	r3, #0
 8008428:	d02a      	beq.n	8008480 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842c:	e08a      	b.n	8008544 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00f      	beq.n	800845c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6819      	ldr	r1, [r3, #0]
 8008440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	f107 0208 	add.w	r2, r7, #8
 8008448:	18d4      	adds	r4, r2, r3
 800844a:	4608      	mov	r0, r1
 800844c:	f000 fae1 	bl	8008a12 <SDIO_ReadFIFO>
 8008450:	4603      	mov	r3, r0
 8008452:	6023      	str	r3, [r4, #0]
      index++;
 8008454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008456:	3301      	adds	r3, #1
 8008458:	637b      	str	r3, [r7, #52]	; 0x34
 800845a:	e006      	b.n	800846a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d012      	beq.n	8008490 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800846a:	f7fb fdb9 	bl	8003fe0 <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008478:	d102      	bne.n	8008480 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800847a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800847e:	e061      	b.n	8008544 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008486:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800848a:	2b00      	cmp	r3, #0
 800848c:	d0cf      	beq.n	800842e <SD_FindSCR+0x96>
 800848e:	e000      	b.n	8008492 <SD_FindSCR+0xfa>
      break;
 8008490:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008498:	f003 0308 	and.w	r3, r3, #8
 800849c:	2b00      	cmp	r3, #0
 800849e:	d106      	bne.n	80084ae <SD_FindSCR+0x116>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d005      	beq.n	80084ba <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2208      	movs	r2, #8
 80084b4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80084b6:	2308      	movs	r3, #8
 80084b8:	e044      	b.n	8008544 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c0:	f003 0302 	and.w	r3, r3, #2
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d005      	beq.n	80084d4 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2202      	movs	r2, #2
 80084ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80084d0:	2302      	movs	r3, #2
 80084d2:	e037      	b.n	8008544 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084da:	f003 0320 	and.w	r3, r3, #32
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2220      	movs	r2, #32
 80084e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80084ea:	2320      	movs	r3, #32
 80084ec:	e02a      	b.n	8008544 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80084f6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	061a      	lsls	r2, r3, #24
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	021b      	lsls	r3, r3, #8
 8008500:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008504:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	0a1b      	lsrs	r3, r3, #8
 800850a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800850e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	0e1b      	lsrs	r3, r3, #24
 8008514:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008518:	601a      	str	r2, [r3, #0]
    scr++;
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	3304      	adds	r3, #4
 800851e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	061a      	lsls	r2, r3, #24
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	021b      	lsls	r3, r3, #8
 8008528:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800852c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	0a1b      	lsrs	r3, r3, #8
 8008532:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008536:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	0e1b      	lsrs	r3, r3, #24
 800853c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800853e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008540:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	373c      	adds	r7, #60	; 0x3c
 8008548:	46bd      	mov	sp, r7
 800854a:	bd90      	pop	{r4, r7, pc}

0800854c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008558:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d03f      	beq.n	80085e6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008566:	2300      	movs	r3, #0
 8008568:	617b      	str	r3, [r7, #20]
 800856a:	e033      	b.n	80085d4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4618      	mov	r0, r3
 8008572:	f000 fa4e 	bl	8008a12 <SDIO_ReadFIFO>
 8008576:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	b2da      	uxtb	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3301      	adds	r3, #1
 8008584:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	3b01      	subs	r3, #1
 800858a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	0a1b      	lsrs	r3, r3, #8
 8008590:	b2da      	uxtb	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3301      	adds	r3, #1
 800859a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	3b01      	subs	r3, #1
 80085a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	0c1b      	lsrs	r3, r3, #16
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3301      	adds	r3, #1
 80085b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	0e1b      	lsrs	r3, r3, #24
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3301      	adds	r3, #1
 80085c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	3301      	adds	r3, #1
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2b07      	cmp	r3, #7
 80085d8:	d9c8      	bls.n	800856c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80085e6:	bf00      	nop
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b086      	sub	sp, #24
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008600:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d043      	beq.n	8008690 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008608:	2300      	movs	r3, #0
 800860a:	617b      	str	r3, [r7, #20]
 800860c:	e037      	b.n	800867e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	3301      	adds	r3, #1
 8008618:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	3b01      	subs	r3, #1
 800861e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	021a      	lsls	r2, r3, #8
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	4313      	orrs	r3, r2
 800862a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	3301      	adds	r3, #1
 8008630:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	3b01      	subs	r3, #1
 8008636:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	041a      	lsls	r2, r3, #16
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	4313      	orrs	r3, r2
 8008642:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3301      	adds	r3, #1
 8008648:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	3b01      	subs	r3, #1
 800864e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	061a      	lsls	r2, r3, #24
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	4313      	orrs	r3, r2
 800865a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	3301      	adds	r3, #1
 8008660:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	3b01      	subs	r3, #1
 8008666:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f107 0208 	add.w	r2, r7, #8
 8008670:	4611      	mov	r1, r2
 8008672:	4618      	mov	r0, r3
 8008674:	f000 f9da 	bl	8008a2c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	3301      	adds	r3, #1
 800867c:	617b      	str	r3, [r7, #20]
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2b07      	cmp	r3, #7
 8008682:	d9c4      	bls.n	800860e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008690:	bf00      	nop
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e07b      	b.n	80087a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d108      	bne.n	80086c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086ba:	d009      	beq.n	80086d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	61da      	str	r2, [r3, #28]
 80086c2:	e005      	b.n	80086d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d106      	bne.n	80086f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7f9 f8d0 	bl	8001890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008706:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008718:	431a      	orrs	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	f003 0302 	and.w	r3, r3, #2
 800872c:	431a      	orrs	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	431a      	orrs	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008740:	431a      	orrs	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800874a:	431a      	orrs	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a1b      	ldr	r3, [r3, #32]
 8008750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008754:	ea42 0103 	orr.w	r1, r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	430a      	orrs	r2, r1
 8008766:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	0c1b      	lsrs	r3, r3, #16
 800876e:	f003 0104 	and.w	r1, r3, #4
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008776:	f003 0210 	and.w	r2, r3, #16
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	430a      	orrs	r2, r1
 8008780:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	69da      	ldr	r2, [r3, #28]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008790:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
	...

080087ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10e      	bne.n	80087ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d009      	beq.n	80087ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d004      	beq.n	80087ec <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	4798      	blx	r3
    return;
 80087ea:	e0ce      	b.n	800898a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d009      	beq.n	800880a <HAL_SPI_IRQHandler+0x5e>
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d004      	beq.n	800880a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	4798      	blx	r3
    return;
 8008808:	e0bf      	b.n	800898a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	f003 0320 	and.w	r3, r3, #32
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10a      	bne.n	800882a <HAL_SPI_IRQHandler+0x7e>
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800881a:	2b00      	cmp	r3, #0
 800881c:	d105      	bne.n	800882a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 80b0 	beq.w	800898a <HAL_SPI_IRQHandler+0x1de>
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	f003 0320 	and.w	r3, r3, #32
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 80aa 	beq.w	800898a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800883c:	2b00      	cmp	r3, #0
 800883e:	d023      	beq.n	8008888 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b03      	cmp	r3, #3
 800884a:	d011      	beq.n	8008870 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008850:	f043 0204 	orr.w	r2, r3, #4
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008858:	2300      	movs	r3, #0
 800885a:	617b      	str	r3, [r7, #20]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	617b      	str	r3, [r7, #20]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	617b      	str	r3, [r7, #20]
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	e00b      	b.n	8008888 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008870:	2300      	movs	r3, #0
 8008872:	613b      	str	r3, [r7, #16]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	613b      	str	r3, [r7, #16]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	613b      	str	r3, [r7, #16]
 8008884:	693b      	ldr	r3, [r7, #16]
        return;
 8008886:	e080      	b.n	800898a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	f003 0320 	and.w	r3, r3, #32
 800888e:	2b00      	cmp	r3, #0
 8008890:	d014      	beq.n	80088bc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008896:	f043 0201 	orr.w	r2, r3, #1
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800889e:	2300      	movs	r3, #0
 80088a0:	60fb      	str	r3, [r7, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	60fb      	str	r3, [r7, #12]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088b8:	601a      	str	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00c      	beq.n	80088e0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ca:	f043 0208 	orr.w	r2, r3, #8
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80088d2:	2300      	movs	r3, #0
 80088d4:	60bb      	str	r3, [r7, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	60bb      	str	r3, [r7, #8]
 80088de:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d04f      	beq.n	8008988 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80088f6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	f003 0302 	and.w	r3, r3, #2
 8008906:	2b00      	cmp	r3, #0
 8008908:	d104      	bne.n	8008914 <HAL_SPI_IRQHandler+0x168>
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d034      	beq.n	800897e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 0203 	bic.w	r2, r2, #3
 8008922:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008928:	2b00      	cmp	r3, #0
 800892a:	d011      	beq.n	8008950 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008930:	4a17      	ldr	r2, [pc, #92]	; (8008990 <HAL_SPI_IRQHandler+0x1e4>)
 8008932:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008938:	4618      	mov	r0, r3
 800893a:	f7fb fd99 	bl	8004470 <HAL_DMA_Abort_IT>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d005      	beq.n	8008950 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008948:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008954:	2b00      	cmp	r3, #0
 8008956:	d016      	beq.n	8008986 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800895c:	4a0c      	ldr	r2, [pc, #48]	; (8008990 <HAL_SPI_IRQHandler+0x1e4>)
 800895e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008964:	4618      	mov	r0, r3
 8008966:	f7fb fd83 	bl	8004470 <HAL_DMA_Abort_IT>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00a      	beq.n	8008986 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008974:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800897c:	e003      	b.n	8008986 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7fb f9ce 	bl	8003d20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008984:	e000      	b.n	8008988 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008986:	bf00      	nop
    return;
 8008988:	bf00      	nop
  }
}
 800898a:	3720      	adds	r7, #32
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	08008995 	.word	0x08008995

08008994 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f7fb f9b6 	bl	8003d20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80089b4:	bf00      	nop
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80089bc:	b084      	sub	sp, #16
 80089be:	b480      	push	{r7}
 80089c0:	b085      	sub	sp, #20
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	f107 001c 	add.w	r0, r7, #28
 80089ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80089ce:	2300      	movs	r3, #0
 80089d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80089d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80089d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80089d6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80089da:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80089de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80089e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80089e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80089e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80089f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	431a      	orrs	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	b004      	add	sp, #16
 8008a10:	4770      	bx	lr

08008a12 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b083      	sub	sp, #12
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2203      	movs	r2, #3
 8008a5a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b083      	sub	sp, #12
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0303 	and.w	r3, r3, #3
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b085      	sub	sp, #20
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008aa4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008aaa:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008ab0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008ac0:	f023 030f 	bic.w	r3, r3, #15
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3714      	adds	r7, #20
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b083      	sub	sp, #12
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	b2db      	uxtb	r3, r3
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	3314      	adds	r3, #20
 8008b02:	461a      	mov	r2, r3
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	4413      	add	r3, r2
 8008b08:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
}  
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b085      	sub	sp, #20
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008b40:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008b46:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008b4c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b58:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0

}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b088      	sub	sp, #32
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008b80:	2310      	movs	r3, #16
 8008b82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b84:	2340      	movs	r3, #64	; 0x40
 8008b86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b92:	f107 0308 	add.w	r3, r7, #8
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7ff ff74 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba2:	2110      	movs	r1, #16
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fa19 	bl	8008fdc <SDMMC_GetCmdResp1>
 8008baa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bac:	69fb      	ldr	r3, [r7, #28]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b088      	sub	sp, #32
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008bc4:	2311      	movs	r3, #17
 8008bc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008bc8:	2340      	movs	r3, #64	; 0x40
 8008bca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008bd6:	f107 0308 	add.w	r3, r7, #8
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff ff52 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008be6:	2111      	movs	r1, #17
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f9f7 	bl	8008fdc <SDMMC_GetCmdResp1>
 8008bee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bf0:	69fb      	ldr	r3, [r7, #28]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3720      	adds	r7, #32
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b088      	sub	sp, #32
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008c08:	2312      	movs	r3, #18
 8008c0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c0c:	2340      	movs	r3, #64	; 0x40
 8008c0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c10:	2300      	movs	r3, #0
 8008c12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c1a:	f107 0308 	add.w	r3, r7, #8
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7ff ff30 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c2a:	2112      	movs	r1, #18
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f9d5 	bl	8008fdc <SDMMC_GetCmdResp1>
 8008c32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c34:	69fb      	ldr	r3, [r7, #28]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3720      	adds	r7, #32
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b088      	sub	sp, #32
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008c4c:	2318      	movs	r3, #24
 8008c4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c50:	2340      	movs	r3, #64	; 0x40
 8008c52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c54:	2300      	movs	r3, #0
 8008c56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c5e:	f107 0308 	add.w	r3, r7, #8
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7ff ff0e 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c6e:	2118      	movs	r1, #24
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f9b3 	bl	8008fdc <SDMMC_GetCmdResp1>
 8008c76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c78:	69fb      	ldr	r3, [r7, #28]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3720      	adds	r7, #32
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b088      	sub	sp, #32
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008c90:	2319      	movs	r3, #25
 8008c92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c94:	2340      	movs	r3, #64	; 0x40
 8008c96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ca0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ca2:	f107 0308 	add.w	r3, r7, #8
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7ff feec 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cb2:	2119      	movs	r1, #25
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f991 	bl	8008fdc <SDMMC_GetCmdResp1>
 8008cba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cbc:	69fb      	ldr	r3, [r7, #28]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3720      	adds	r7, #32
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
	...

08008cc8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b088      	sub	sp, #32
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008cd4:	230c      	movs	r3, #12
 8008cd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008cd8:	2340      	movs	r3, #64	; 0x40
 8008cda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ce4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ce6:	f107 0308 	add.w	r3, r7, #8
 8008cea:	4619      	mov	r1, r3
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7ff feca 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008cf2:	4a05      	ldr	r2, [pc, #20]	; (8008d08 <SDMMC_CmdStopTransfer+0x40>)
 8008cf4:	210c      	movs	r1, #12
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f970 	bl	8008fdc <SDMMC_GetCmdResp1>
 8008cfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cfe:	69fb      	ldr	r3, [r7, #28]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3720      	adds	r7, #32
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	05f5e100 	.word	0x05f5e100

08008d0c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b08a      	sub	sp, #40	; 0x28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008d1c:	2307      	movs	r3, #7
 8008d1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d20:	2340      	movs	r3, #64	; 0x40
 8008d22:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d24:	2300      	movs	r3, #0
 8008d26:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d2c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d2e:	f107 0310 	add.w	r3, r7, #16
 8008d32:	4619      	mov	r1, r3
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f7ff fea6 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d3e:	2107      	movs	r1, #7
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 f94b 	bl	8008fdc <SDMMC_GetCmdResp1>
 8008d46:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3728      	adds	r7, #40	; 0x28
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b088      	sub	sp, #32
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008d62:	2300      	movs	r3, #0
 8008d64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d66:	2300      	movs	r3, #0
 8008d68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d70:	f107 0308 	add.w	r3, r7, #8
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7ff fe85 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fb65 	bl	800944c <SDMMC_GetCmdError>
 8008d82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d84:	69fb      	ldr	r3, [r7, #28]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3720      	adds	r7, #32
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b088      	sub	sp, #32
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008d96:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008d9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008d9c:	2308      	movs	r3, #8
 8008d9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008da0:	2340      	movs	r3, #64	; 0x40
 8008da2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008da4:	2300      	movs	r3, #0
 8008da6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dae:	f107 0308 	add.w	r3, r7, #8
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff fe66 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 faf8 	bl	80093b0 <SDMMC_GetCmdResp7>
 8008dc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dc2:	69fb      	ldr	r3, [r7, #28]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3720      	adds	r7, #32
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b088      	sub	sp, #32
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008dda:	2337      	movs	r3, #55	; 0x37
 8008ddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dde:	2340      	movs	r3, #64	; 0x40
 8008de0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008de2:	2300      	movs	r3, #0
 8008de4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dec:	f107 0308 	add.w	r3, r7, #8
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff fe47 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dfc:	2137      	movs	r1, #55	; 0x37
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f8ec 	bl	8008fdc <SDMMC_GetCmdResp1>
 8008e04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e06:	69fb      	ldr	r3, [r7, #28]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3720      	adds	r7, #32
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b088      	sub	sp, #32
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008e26:	2329      	movs	r3, #41	; 0x29
 8008e28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e2a:	2340      	movs	r3, #64	; 0x40
 8008e2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e38:	f107 0308 	add.w	r3, r7, #8
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff fe21 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f9ff 	bl	8009248 <SDMMC_GetCmdResp3>
 8008e4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3720      	adds	r7, #32
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b088      	sub	sp, #32
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008e64:	2306      	movs	r3, #6
 8008e66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e68:	2340      	movs	r3, #64	; 0x40
 8008e6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e76:	f107 0308 	add.w	r3, r7, #8
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7ff fe02 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e86:	2106      	movs	r1, #6
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f8a7 	bl	8008fdc <SDMMC_GetCmdResp1>
 8008e8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e90:	69fb      	ldr	r3, [r7, #28]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3720      	adds	r7, #32
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b088      	sub	sp, #32
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008ea6:	2333      	movs	r3, #51	; 0x33
 8008ea8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008eaa:	2340      	movs	r3, #64	; 0x40
 8008eac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008eb8:	f107 0308 	add.w	r3, r7, #8
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7ff fde1 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ec8:	2133      	movs	r1, #51	; 0x33
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f886 	bl	8008fdc <SDMMC_GetCmdResp1>
 8008ed0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ed2:	69fb      	ldr	r3, [r7, #28]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3720      	adds	r7, #32
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b088      	sub	sp, #32
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008ee8:	2302      	movs	r3, #2
 8008eea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008eec:	23c0      	movs	r3, #192	; 0xc0
 8008eee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ef8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008efa:	f107 0308 	add.w	r3, r7, #8
 8008efe:	4619      	mov	r1, r3
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff fdc0 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f956 	bl	80091b8 <SDMMC_GetCmdResp2>
 8008f0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f0e:	69fb      	ldr	r3, [r7, #28]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3720      	adds	r7, #32
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008f26:	2309      	movs	r3, #9
 8008f28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008f2a:	23c0      	movs	r3, #192	; 0xc0
 8008f2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f38:	f107 0308 	add.w	r3, r7, #8
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7ff fda1 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f937 	bl	80091b8 <SDMMC_GetCmdResp2>
 8008f4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f4c:	69fb      	ldr	r3, [r7, #28]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3720      	adds	r7, #32
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b088      	sub	sp, #32
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008f60:	2300      	movs	r3, #0
 8008f62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008f64:	2303      	movs	r3, #3
 8008f66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f68:	2340      	movs	r3, #64	; 0x40
 8008f6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f76:	f107 0308 	add.w	r3, r7, #8
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f7ff fd82 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	2103      	movs	r1, #3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f99c 	bl	80092c4 <SDMMC_GetCmdResp6>
 8008f8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f8e:	69fb      	ldr	r3, [r7, #28]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3720      	adds	r7, #32
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b088      	sub	sp, #32
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008fa6:	230d      	movs	r3, #13
 8008fa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008faa:	2340      	movs	r3, #64	; 0x40
 8008fac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fb8:	f107 0308 	add.w	r3, r7, #8
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff fd61 	bl	8008a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fc8:	210d      	movs	r1, #13
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f806 	bl	8008fdc <SDMMC_GetCmdResp1>
 8008fd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fd2:	69fb      	ldr	r3, [r7, #28]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3720      	adds	r7, #32
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b088      	sub	sp, #32
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008fea:	4b70      	ldr	r3, [pc, #448]	; (80091ac <SDMMC_GetCmdResp1+0x1d0>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a70      	ldr	r2, [pc, #448]	; (80091b0 <SDMMC_GetCmdResp1+0x1d4>)
 8008ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff4:	0a5a      	lsrs	r2, r3, #9
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	fb02 f303 	mul.w	r3, r2, r3
 8008ffc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	1e5a      	subs	r2, r3, #1
 8009002:	61fa      	str	r2, [r7, #28]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d102      	bne.n	800900e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009008:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800900c:	e0c9      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009012:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0ef      	beq.n	8008ffe <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1ea      	bne.n	8008ffe <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902c:	f003 0304 	and.w	r3, r3, #4
 8009030:	2b00      	cmp	r3, #0
 8009032:	d004      	beq.n	800903e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2204      	movs	r2, #4
 8009038:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800903a:	2304      	movs	r3, #4
 800903c:	e0b1      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d004      	beq.n	8009054 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2201      	movs	r2, #1
 800904e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009050:	2301      	movs	r3, #1
 8009052:	e0a6      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	22c5      	movs	r2, #197	; 0xc5
 8009058:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f7ff fd3d 	bl	8008ada <SDIO_GetCommandResponse>
 8009060:	4603      	mov	r3, r0
 8009062:	461a      	mov	r2, r3
 8009064:	7afb      	ldrb	r3, [r7, #11]
 8009066:	4293      	cmp	r3, r2
 8009068:	d001      	beq.n	800906e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800906a:	2301      	movs	r3, #1
 800906c:	e099      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800906e:	2100      	movs	r1, #0
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f7ff fd3f 	bl	8008af4 <SDIO_GetResponse>
 8009076:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	4b4e      	ldr	r3, [pc, #312]	; (80091b4 <SDMMC_GetCmdResp1+0x1d8>)
 800907c:	4013      	ands	r3, r2
 800907e:	2b00      	cmp	r3, #0
 8009080:	d101      	bne.n	8009086 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009082:	2300      	movs	r3, #0
 8009084:	e08d      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	2b00      	cmp	r3, #0
 800908a:	da02      	bge.n	8009092 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800908c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009090:	e087      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800909c:	2340      	movs	r3, #64	; 0x40
 800909e:	e080      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80090aa:	2380      	movs	r3, #128	; 0x80
 80090ac:	e079      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d002      	beq.n	80090be <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80090b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090bc:	e071      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80090c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090cc:	e069      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80090d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090dc:	e061      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d002      	beq.n	80090ee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80090e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090ec:	e059      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80090f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090fc:	e051      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800910c:	e049      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009118:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800911c:	e041      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d002      	beq.n	800912e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800912c:	e039      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d002      	beq.n	800913e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800913c:	e031      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009148:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800914c:	e029      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d002      	beq.n	800915e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009158:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800915c:	e021      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d002      	beq.n	800916e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009168:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800916c:	e019      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d002      	beq.n	800917e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009178:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800917c:	e011      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d002      	beq.n	800918e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009188:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800918c:	e009      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f003 0308 	and.w	r3, r3, #8
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009198:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800919c:	e001      	b.n	80091a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800919e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3720      	adds	r7, #32
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	20000040 	.word	0x20000040
 80091b0:	10624dd3 	.word	0x10624dd3
 80091b4:	fdffe008 	.word	0xfdffe008

080091b8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091c0:	4b1f      	ldr	r3, [pc, #124]	; (8009240 <SDMMC_GetCmdResp2+0x88>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a1f      	ldr	r2, [pc, #124]	; (8009244 <SDMMC_GetCmdResp2+0x8c>)
 80091c6:	fba2 2303 	umull	r2, r3, r2, r3
 80091ca:	0a5b      	lsrs	r3, r3, #9
 80091cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80091d0:	fb02 f303 	mul.w	r3, r2, r3
 80091d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	1e5a      	subs	r2, r3, #1
 80091da:	60fa      	str	r2, [r7, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d102      	bne.n	80091e6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091e4:	e026      	b.n	8009234 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0ef      	beq.n	80091d6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1ea      	bne.n	80091d6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009204:	f003 0304 	and.w	r3, r3, #4
 8009208:	2b00      	cmp	r3, #0
 800920a:	d004      	beq.n	8009216 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2204      	movs	r2, #4
 8009210:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009212:	2304      	movs	r3, #4
 8009214:	e00e      	b.n	8009234 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d004      	beq.n	800922c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009228:	2301      	movs	r3, #1
 800922a:	e003      	b.n	8009234 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	22c5      	movs	r2, #197	; 0xc5
 8009230:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	20000040 	.word	0x20000040
 8009244:	10624dd3 	.word	0x10624dd3

08009248 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009250:	4b1a      	ldr	r3, [pc, #104]	; (80092bc <SDMMC_GetCmdResp3+0x74>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a1a      	ldr	r2, [pc, #104]	; (80092c0 <SDMMC_GetCmdResp3+0x78>)
 8009256:	fba2 2303 	umull	r2, r3, r2, r3
 800925a:	0a5b      	lsrs	r3, r3, #9
 800925c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009260:	fb02 f303 	mul.w	r3, r2, r3
 8009264:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	1e5a      	subs	r2, r3, #1
 800926a:	60fa      	str	r2, [r7, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d102      	bne.n	8009276 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009270:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009274:	e01b      	b.n	80092ae <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800927a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009282:	2b00      	cmp	r3, #0
 8009284:	d0ef      	beq.n	8009266 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1ea      	bne.n	8009266 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009294:	f003 0304 	and.w	r3, r3, #4
 8009298:	2b00      	cmp	r3, #0
 800929a:	d004      	beq.n	80092a6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2204      	movs	r2, #4
 80092a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092a2:	2304      	movs	r3, #4
 80092a4:	e003      	b.n	80092ae <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	22c5      	movs	r2, #197	; 0xc5
 80092aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	20000040 	.word	0x20000040
 80092c0:	10624dd3 	.word	0x10624dd3

080092c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b088      	sub	sp, #32
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	460b      	mov	r3, r1
 80092ce:	607a      	str	r2, [r7, #4]
 80092d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092d2:	4b35      	ldr	r3, [pc, #212]	; (80093a8 <SDMMC_GetCmdResp6+0xe4>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a35      	ldr	r2, [pc, #212]	; (80093ac <SDMMC_GetCmdResp6+0xe8>)
 80092d8:	fba2 2303 	umull	r2, r3, r2, r3
 80092dc:	0a5b      	lsrs	r3, r3, #9
 80092de:	f241 3288 	movw	r2, #5000	; 0x1388
 80092e2:	fb02 f303 	mul.w	r3, r2, r3
 80092e6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	1e5a      	subs	r2, r3, #1
 80092ec:	61fa      	str	r2, [r7, #28]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d102      	bne.n	80092f8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092f6:	e052      	b.n	800939e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0ef      	beq.n	80092e8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1ea      	bne.n	80092e8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009316:	f003 0304 	and.w	r3, r3, #4
 800931a:	2b00      	cmp	r3, #0
 800931c:	d004      	beq.n	8009328 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2204      	movs	r2, #4
 8009322:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009324:	2304      	movs	r3, #4
 8009326:	e03a      	b.n	800939e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	2b00      	cmp	r3, #0
 8009332:	d004      	beq.n	800933e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2201      	movs	r2, #1
 8009338:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800933a:	2301      	movs	r3, #1
 800933c:	e02f      	b.n	800939e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f7ff fbcb 	bl	8008ada <SDIO_GetCommandResponse>
 8009344:	4603      	mov	r3, r0
 8009346:	461a      	mov	r2, r3
 8009348:	7afb      	ldrb	r3, [r7, #11]
 800934a:	4293      	cmp	r3, r2
 800934c:	d001      	beq.n	8009352 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800934e:	2301      	movs	r3, #1
 8009350:	e025      	b.n	800939e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	22c5      	movs	r2, #197	; 0xc5
 8009356:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009358:	2100      	movs	r1, #0
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f7ff fbca 	bl	8008af4 <SDIO_GetResponse>
 8009360:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d106      	bne.n	800937a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	0c1b      	lsrs	r3, r3, #16
 8009370:	b29a      	uxth	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009376:	2300      	movs	r3, #0
 8009378:	e011      	b.n	800939e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009388:	e009      	b.n	800939e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009398:	e001      	b.n	800939e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800939a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3720      	adds	r7, #32
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	20000040 	.word	0x20000040
 80093ac:	10624dd3 	.word	0x10624dd3

080093b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093b8:	4b22      	ldr	r3, [pc, #136]	; (8009444 <SDMMC_GetCmdResp7+0x94>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a22      	ldr	r2, [pc, #136]	; (8009448 <SDMMC_GetCmdResp7+0x98>)
 80093be:	fba2 2303 	umull	r2, r3, r2, r3
 80093c2:	0a5b      	lsrs	r3, r3, #9
 80093c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c8:	fb02 f303 	mul.w	r3, r2, r3
 80093cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	1e5a      	subs	r2, r3, #1
 80093d2:	60fa      	str	r2, [r7, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093dc:	e02c      	b.n	8009438 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d0ef      	beq.n	80093ce <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1ea      	bne.n	80093ce <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fc:	f003 0304 	and.w	r3, r3, #4
 8009400:	2b00      	cmp	r3, #0
 8009402:	d004      	beq.n	800940e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2204      	movs	r2, #4
 8009408:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800940a:	2304      	movs	r3, #4
 800940c:	e014      	b.n	8009438 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	d004      	beq.n	8009424 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009420:	2301      	movs	r3, #1
 8009422:	e009      	b.n	8009438 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2240      	movs	r2, #64	; 0x40
 8009434:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009436:	2300      	movs	r3, #0
  
}
 8009438:	4618      	mov	r0, r3
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	20000040 	.word	0x20000040
 8009448:	10624dd3 	.word	0x10624dd3

0800944c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009454:	4b11      	ldr	r3, [pc, #68]	; (800949c <SDMMC_GetCmdError+0x50>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a11      	ldr	r2, [pc, #68]	; (80094a0 <SDMMC_GetCmdError+0x54>)
 800945a:	fba2 2303 	umull	r2, r3, r2, r3
 800945e:	0a5b      	lsrs	r3, r3, #9
 8009460:	f241 3288 	movw	r2, #5000	; 0x1388
 8009464:	fb02 f303 	mul.w	r3, r2, r3
 8009468:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	1e5a      	subs	r2, r3, #1
 800946e:	60fa      	str	r2, [r7, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d102      	bne.n	800947a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009474:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009478:	e009      	b.n	800948e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009482:	2b00      	cmp	r3, #0
 8009484:	d0f1      	beq.n	800946a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	22c5      	movs	r2, #197	; 0xc5
 800948a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	20000040 	.word	0x20000040
 80094a0:	10624dd3 	.word	0x10624dd3

080094a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094a4:	b084      	sub	sp, #16
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b084      	sub	sp, #16
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	f107 001c 	add.w	r0, r7, #28
 80094b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094b6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d123      	bne.n	8009506 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80094d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80094e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d105      	bne.n	80094fa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f001 fae2 	bl	800aac4 <USB_CoreReset>
 8009500:	4603      	mov	r3, r0
 8009502:	73fb      	strb	r3, [r7, #15]
 8009504:	e01b      	b.n	800953e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f001 fad6 	bl	800aac4 <USB_CoreReset>
 8009518:	4603      	mov	r3, r0
 800951a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800951c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009520:	2b00      	cmp	r3, #0
 8009522:	d106      	bne.n	8009532 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009528:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	639a      	str	r2, [r3, #56]	; 0x38
 8009530:	e005      	b.n	800953e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009536:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800953e:	7fbb      	ldrb	r3, [r7, #30]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d10b      	bne.n	800955c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f043 0206 	orr.w	r2, r3, #6
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	f043 0220 	orr.w	r2, r3, #32
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800955c:	7bfb      	ldrb	r3, [r7, #15]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009568:	b004      	add	sp, #16
 800956a:	4770      	bx	lr

0800956c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800956c:	b480      	push	{r7}
 800956e:	b087      	sub	sp, #28
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	4613      	mov	r3, r2
 8009578:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	2b02      	cmp	r3, #2
 800957e:	d165      	bne.n	800964c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	4a41      	ldr	r2, [pc, #260]	; (8009688 <USB_SetTurnaroundTime+0x11c>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d906      	bls.n	8009596 <USB_SetTurnaroundTime+0x2a>
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	4a40      	ldr	r2, [pc, #256]	; (800968c <USB_SetTurnaroundTime+0x120>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d202      	bcs.n	8009596 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009590:	230f      	movs	r3, #15
 8009592:	617b      	str	r3, [r7, #20]
 8009594:	e062      	b.n	800965c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	4a3c      	ldr	r2, [pc, #240]	; (800968c <USB_SetTurnaroundTime+0x120>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d306      	bcc.n	80095ac <USB_SetTurnaroundTime+0x40>
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	4a3b      	ldr	r2, [pc, #236]	; (8009690 <USB_SetTurnaroundTime+0x124>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d202      	bcs.n	80095ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80095a6:	230e      	movs	r3, #14
 80095a8:	617b      	str	r3, [r7, #20]
 80095aa:	e057      	b.n	800965c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	4a38      	ldr	r2, [pc, #224]	; (8009690 <USB_SetTurnaroundTime+0x124>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d306      	bcc.n	80095c2 <USB_SetTurnaroundTime+0x56>
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	4a37      	ldr	r2, [pc, #220]	; (8009694 <USB_SetTurnaroundTime+0x128>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d202      	bcs.n	80095c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80095bc:	230d      	movs	r3, #13
 80095be:	617b      	str	r3, [r7, #20]
 80095c0:	e04c      	b.n	800965c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	4a33      	ldr	r2, [pc, #204]	; (8009694 <USB_SetTurnaroundTime+0x128>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d306      	bcc.n	80095d8 <USB_SetTurnaroundTime+0x6c>
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	4a32      	ldr	r2, [pc, #200]	; (8009698 <USB_SetTurnaroundTime+0x12c>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d802      	bhi.n	80095d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80095d2:	230c      	movs	r3, #12
 80095d4:	617b      	str	r3, [r7, #20]
 80095d6:	e041      	b.n	800965c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	4a2f      	ldr	r2, [pc, #188]	; (8009698 <USB_SetTurnaroundTime+0x12c>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d906      	bls.n	80095ee <USB_SetTurnaroundTime+0x82>
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	4a2e      	ldr	r2, [pc, #184]	; (800969c <USB_SetTurnaroundTime+0x130>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d802      	bhi.n	80095ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80095e8:	230b      	movs	r3, #11
 80095ea:	617b      	str	r3, [r7, #20]
 80095ec:	e036      	b.n	800965c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	4a2a      	ldr	r2, [pc, #168]	; (800969c <USB_SetTurnaroundTime+0x130>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d906      	bls.n	8009604 <USB_SetTurnaroundTime+0x98>
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	4a29      	ldr	r2, [pc, #164]	; (80096a0 <USB_SetTurnaroundTime+0x134>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d802      	bhi.n	8009604 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80095fe:	230a      	movs	r3, #10
 8009600:	617b      	str	r3, [r7, #20]
 8009602:	e02b      	b.n	800965c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	4a26      	ldr	r2, [pc, #152]	; (80096a0 <USB_SetTurnaroundTime+0x134>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d906      	bls.n	800961a <USB_SetTurnaroundTime+0xae>
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	4a25      	ldr	r2, [pc, #148]	; (80096a4 <USB_SetTurnaroundTime+0x138>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d202      	bcs.n	800961a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009614:	2309      	movs	r3, #9
 8009616:	617b      	str	r3, [r7, #20]
 8009618:	e020      	b.n	800965c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	4a21      	ldr	r2, [pc, #132]	; (80096a4 <USB_SetTurnaroundTime+0x138>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d306      	bcc.n	8009630 <USB_SetTurnaroundTime+0xc4>
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	4a20      	ldr	r2, [pc, #128]	; (80096a8 <USB_SetTurnaroundTime+0x13c>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d802      	bhi.n	8009630 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800962a:	2308      	movs	r3, #8
 800962c:	617b      	str	r3, [r7, #20]
 800962e:	e015      	b.n	800965c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	4a1d      	ldr	r2, [pc, #116]	; (80096a8 <USB_SetTurnaroundTime+0x13c>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d906      	bls.n	8009646 <USB_SetTurnaroundTime+0xda>
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	4a1c      	ldr	r2, [pc, #112]	; (80096ac <USB_SetTurnaroundTime+0x140>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d202      	bcs.n	8009646 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009640:	2307      	movs	r3, #7
 8009642:	617b      	str	r3, [r7, #20]
 8009644:	e00a      	b.n	800965c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009646:	2306      	movs	r3, #6
 8009648:	617b      	str	r3, [r7, #20]
 800964a:	e007      	b.n	800965c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800964c:	79fb      	ldrb	r3, [r7, #7]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d102      	bne.n	8009658 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009652:	2309      	movs	r3, #9
 8009654:	617b      	str	r3, [r7, #20]
 8009656:	e001      	b.n	800965c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009658:	2309      	movs	r3, #9
 800965a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	68da      	ldr	r2, [r3, #12]
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	029b      	lsls	r3, r3, #10
 8009670:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009674:	431a      	orrs	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	371c      	adds	r7, #28
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	00d8acbf 	.word	0x00d8acbf
 800968c:	00e4e1c0 	.word	0x00e4e1c0
 8009690:	00f42400 	.word	0x00f42400
 8009694:	01067380 	.word	0x01067380
 8009698:	011a499f 	.word	0x011a499f
 800969c:	01312cff 	.word	0x01312cff
 80096a0:	014ca43f 	.word	0x014ca43f
 80096a4:	016e3600 	.word	0x016e3600
 80096a8:	01a6ab1f 	.word	0x01a6ab1f
 80096ac:	01e84800 	.word	0x01e84800

080096b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	f043 0201 	orr.w	r2, r3, #1
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b083      	sub	sp, #12
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f023 0201 	bic.w	r2, r3, #1
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	460b      	mov	r3, r1
 80096fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009700:	2300      	movs	r3, #0
 8009702:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009710:	78fb      	ldrb	r3, [r7, #3]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d115      	bne.n	8009742 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009722:	200a      	movs	r0, #10
 8009724:	f7fa fc68 	bl	8003ff8 <HAL_Delay>
      ms += 10U;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	330a      	adds	r3, #10
 800972c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f001 f939 	bl	800a9a6 <USB_GetMode>
 8009734:	4603      	mov	r3, r0
 8009736:	2b01      	cmp	r3, #1
 8009738:	d01e      	beq.n	8009778 <USB_SetCurrentMode+0x84>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2bc7      	cmp	r3, #199	; 0xc7
 800973e:	d9f0      	bls.n	8009722 <USB_SetCurrentMode+0x2e>
 8009740:	e01a      	b.n	8009778 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009742:	78fb      	ldrb	r3, [r7, #3]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d115      	bne.n	8009774 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009754:	200a      	movs	r0, #10
 8009756:	f7fa fc4f 	bl	8003ff8 <HAL_Delay>
      ms += 10U;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	330a      	adds	r3, #10
 800975e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f001 f920 	bl	800a9a6 <USB_GetMode>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d005      	beq.n	8009778 <USB_SetCurrentMode+0x84>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2bc7      	cmp	r3, #199	; 0xc7
 8009770:	d9f0      	bls.n	8009754 <USB_SetCurrentMode+0x60>
 8009772:	e001      	b.n	8009778 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e005      	b.n	8009784 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2bc8      	cmp	r3, #200	; 0xc8
 800977c:	d101      	bne.n	8009782 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e000      	b.n	8009784 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800978c:	b084      	sub	sp, #16
 800978e:	b580      	push	{r7, lr}
 8009790:	b086      	sub	sp, #24
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800979a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80097a6:	2300      	movs	r3, #0
 80097a8:	613b      	str	r3, [r7, #16]
 80097aa:	e009      	b.n	80097c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	3340      	adds	r3, #64	; 0x40
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	2200      	movs	r2, #0
 80097b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	3301      	adds	r3, #1
 80097be:	613b      	str	r3, [r7, #16]
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	2b0e      	cmp	r3, #14
 80097c4:	d9f2      	bls.n	80097ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80097c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d11c      	bne.n	8009808 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097dc:	f043 0302 	orr.w	r3, r3, #2
 80097e0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	639a      	str	r2, [r3, #56]	; 0x38
 8009806:	e00b      	b.n	8009820 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009818:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009826:	461a      	mov	r2, r3
 8009828:	2300      	movs	r3, #0
 800982a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800982c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009830:	2b01      	cmp	r3, #1
 8009832:	d10d      	bne.n	8009850 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009838:	2b00      	cmp	r3, #0
 800983a:	d104      	bne.n	8009846 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800983c:	2100      	movs	r1, #0
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f968 	bl	8009b14 <USB_SetDevSpeed>
 8009844:	e008      	b.n	8009858 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009846:	2101      	movs	r1, #1
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f963 	bl	8009b14 <USB_SetDevSpeed>
 800984e:	e003      	b.n	8009858 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009850:	2103      	movs	r1, #3
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f95e 	bl	8009b14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009858:	2110      	movs	r1, #16
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f8fa 	bl	8009a54 <USB_FlushTxFifo>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f924 	bl	8009ab8 <USB_FlushRxFifo>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d001      	beq.n	800987a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009880:	461a      	mov	r2, r3
 8009882:	2300      	movs	r3, #0
 8009884:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800988c:	461a      	mov	r2, r3
 800988e:	2300      	movs	r3, #0
 8009890:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009898:	461a      	mov	r2, r3
 800989a:	2300      	movs	r3, #0
 800989c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800989e:	2300      	movs	r3, #0
 80098a0:	613b      	str	r3, [r7, #16]
 80098a2:	e043      	b.n	800992c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098ba:	d118      	bne.n	80098ee <USB_DevInit+0x162>
    {
      if (i == 0U)
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10a      	bne.n	80098d8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ce:	461a      	mov	r2, r3
 80098d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80098d4:	6013      	str	r3, [r2, #0]
 80098d6:	e013      	b.n	8009900 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	015a      	lsls	r2, r3, #5
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4413      	add	r3, r2
 80098e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e4:	461a      	mov	r2, r3
 80098e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80098ea:	6013      	str	r3, [r2, #0]
 80098ec:	e008      	b.n	8009900 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	015a      	lsls	r2, r3, #5
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	4413      	add	r3, r2
 80098f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098fa:	461a      	mov	r2, r3
 80098fc:	2300      	movs	r3, #0
 80098fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	4413      	add	r3, r2
 8009908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800990c:	461a      	mov	r2, r3
 800990e:	2300      	movs	r3, #0
 8009910:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	4413      	add	r3, r2
 800991a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800991e:	461a      	mov	r2, r3
 8009920:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009924:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	3301      	adds	r3, #1
 800992a:	613b      	str	r3, [r7, #16]
 800992c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009930:	461a      	mov	r2, r3
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	4293      	cmp	r3, r2
 8009936:	d3b5      	bcc.n	80098a4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009938:	2300      	movs	r3, #0
 800993a:	613b      	str	r3, [r7, #16]
 800993c:	e043      	b.n	80099c6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009954:	d118      	bne.n	8009988 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10a      	bne.n	8009972 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	4413      	add	r3, r2
 8009964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009968:	461a      	mov	r2, r3
 800996a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800996e:	6013      	str	r3, [r2, #0]
 8009970:	e013      	b.n	800999a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	4413      	add	r3, r2
 800997a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800997e:	461a      	mov	r2, r3
 8009980:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009984:	6013      	str	r3, [r2, #0]
 8009986:	e008      	b.n	800999a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	015a      	lsls	r2, r3, #5
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4413      	add	r3, r2
 8009990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009994:	461a      	mov	r2, r3
 8009996:	2300      	movs	r3, #0
 8009998:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	015a      	lsls	r2, r3, #5
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a6:	461a      	mov	r2, r3
 80099a8:	2300      	movs	r3, #0
 80099aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b8:	461a      	mov	r2, r3
 80099ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80099be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	3301      	adds	r3, #1
 80099c4:	613b      	str	r3, [r7, #16]
 80099c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80099ca:	461a      	mov	r2, r3
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d3b5      	bcc.n	800993e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80099f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80099f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d105      	bne.n	8009a08 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	f043 0210 	orr.w	r2, r3, #16
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	699a      	ldr	r2, [r3, #24]
 8009a0c:	4b10      	ldr	r3, [pc, #64]	; (8009a50 <USB_DevInit+0x2c4>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a14:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d005      	beq.n	8009a28 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	f043 0208 	orr.w	r2, r3, #8
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d107      	bne.n	8009a40 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a38:	f043 0304 	orr.w	r3, r3, #4
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3718      	adds	r7, #24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a4c:	b004      	add	sp, #16
 8009a4e:	4770      	bx	lr
 8009a50:	803c3800 	.word	0x803c3800

08009a54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3301      	adds	r3, #1
 8009a66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009a6e:	d901      	bls.n	8009a74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a70:	2303      	movs	r3, #3
 8009a72:	e01b      	b.n	8009aac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	daf2      	bge.n	8009a62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	019b      	lsls	r3, r3, #6
 8009a84:	f043 0220 	orr.w	r2, r3, #32
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009a98:	d901      	bls.n	8009a9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e006      	b.n	8009aac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	f003 0320 	and.w	r3, r3, #32
 8009aa6:	2b20      	cmp	r3, #32
 8009aa8:	d0f0      	beq.n	8009a8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009ad0:	d901      	bls.n	8009ad6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	e018      	b.n	8009b08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	daf2      	bge.n	8009ac4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2210      	movs	r2, #16
 8009ae6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	3301      	adds	r3, #1
 8009aec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009af4:	d901      	bls.n	8009afa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e006      	b.n	8009b08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	f003 0310 	and.w	r3, r3, #16
 8009b02:	2b10      	cmp	r3, #16
 8009b04:	d0f0      	beq.n	8009ae8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	78fb      	ldrb	r3, [r7, #3]
 8009b2e:	68f9      	ldr	r1, [r7, #12]
 8009b30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b34:	4313      	orrs	r3, r2
 8009b36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3714      	adds	r7, #20
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr

08009b46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b087      	sub	sp, #28
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	f003 0306 	and.w	r3, r3, #6
 8009b5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d102      	bne.n	8009b6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009b66:	2300      	movs	r3, #0
 8009b68:	75fb      	strb	r3, [r7, #23]
 8009b6a:	e00a      	b.n	8009b82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d002      	beq.n	8009b78 <USB_GetDevSpeed+0x32>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2b06      	cmp	r3, #6
 8009b76:	d102      	bne.n	8009b7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009b78:	2302      	movs	r3, #2
 8009b7a:	75fb      	strb	r3, [r7, #23]
 8009b7c:	e001      	b.n	8009b82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009b7e:	230f      	movs	r3, #15
 8009b80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	371c      	adds	r7, #28
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	785b      	ldrb	r3, [r3, #1]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d13a      	bne.n	8009c22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb2:	69da      	ldr	r2, [r3, #28]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	f003 030f 	and.w	r3, r3, #15
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	68f9      	ldr	r1, [r7, #12]
 8009bc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	015a      	lsls	r2, r3, #5
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d155      	bne.n	8009c90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	015a      	lsls	r2, r3, #5
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	791b      	ldrb	r3, [r3, #4]
 8009bfe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	059b      	lsls	r3, r3, #22
 8009c06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	0151      	lsls	r1, r2, #5
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	440a      	add	r2, r1
 8009c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c1e:	6013      	str	r3, [r2, #0]
 8009c20:	e036      	b.n	8009c90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c28:	69da      	ldr	r2, [r3, #28]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	f003 030f 	and.w	r3, r3, #15
 8009c32:	2101      	movs	r1, #1
 8009c34:	fa01 f303 	lsl.w	r3, r1, r3
 8009c38:	041b      	lsls	r3, r3, #16
 8009c3a:	68f9      	ldr	r1, [r7, #12]
 8009c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c40:	4313      	orrs	r3, r2
 8009c42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	015a      	lsls	r2, r3, #5
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d11a      	bne.n	8009c90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	015a      	lsls	r2, r3, #5
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	4413      	add	r3, r2
 8009c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	791b      	ldrb	r3, [r3, #4]
 8009c74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c76:	430b      	orrs	r3, r1
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	0151      	lsls	r1, r2, #5
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	440a      	add	r2, r1
 8009c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3714      	adds	r7, #20
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
	...

08009ca0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	785b      	ldrb	r3, [r3, #1]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d161      	bne.n	8009d80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	015a      	lsls	r2, r3, #5
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cd2:	d11f      	bne.n	8009d14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	015a      	lsls	r2, r3, #5
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	4413      	add	r3, r2
 8009cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	0151      	lsls	r1, r2, #5
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	440a      	add	r2, r1
 8009cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009cf2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	015a      	lsls	r2, r3, #5
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	0151      	lsls	r1, r2, #5
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	440a      	add	r2, r1
 8009d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	f003 030f 	and.w	r3, r3, #15
 8009d24:	2101      	movs	r1, #1
 8009d26:	fa01 f303 	lsl.w	r3, r1, r3
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	43db      	mvns	r3, r3
 8009d2e:	68f9      	ldr	r1, [r7, #12]
 8009d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d34:	4013      	ands	r3, r2
 8009d36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d3e:	69da      	ldr	r2, [r3, #28]
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	f003 030f 	and.w	r3, r3, #15
 8009d48:	2101      	movs	r1, #1
 8009d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	43db      	mvns	r3, r3
 8009d52:	68f9      	ldr	r1, [r7, #12]
 8009d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d58:	4013      	ands	r3, r2
 8009d5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	015a      	lsls	r2, r3, #5
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	4413      	add	r3, r2
 8009d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	0159      	lsls	r1, r3, #5
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	440b      	add	r3, r1
 8009d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d76:	4619      	mov	r1, r3
 8009d78:	4b35      	ldr	r3, [pc, #212]	; (8009e50 <USB_DeactivateEndpoint+0x1b0>)
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	600b      	str	r3, [r1, #0]
 8009d7e:	e060      	b.n	8009e42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d96:	d11f      	bne.n	8009dd8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	015a      	lsls	r2, r3, #5
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	0151      	lsls	r1, r2, #5
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	440a      	add	r2, r1
 8009dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009db2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009db6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	015a      	lsls	r2, r3, #5
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	0151      	lsls	r1, r2, #5
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	440a      	add	r2, r1
 8009dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	f003 030f 	and.w	r3, r3, #15
 8009de8:	2101      	movs	r1, #1
 8009dea:	fa01 f303 	lsl.w	r3, r1, r3
 8009dee:	041b      	lsls	r3, r3, #16
 8009df0:	43db      	mvns	r3, r3
 8009df2:	68f9      	ldr	r1, [r7, #12]
 8009df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009df8:	4013      	ands	r3, r2
 8009dfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e02:	69da      	ldr	r2, [r3, #28]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	f003 030f 	and.w	r3, r3, #15
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e12:	041b      	lsls	r3, r3, #16
 8009e14:	43db      	mvns	r3, r3
 8009e16:	68f9      	ldr	r1, [r7, #12]
 8009e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	0159      	lsls	r1, r3, #5
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	440b      	add	r3, r1
 8009e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4b05      	ldr	r3, [pc, #20]	; (8009e54 <USB_DeactivateEndpoint+0x1b4>)
 8009e3e:	4013      	ands	r3, r2
 8009e40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	ec337800 	.word	0xec337800
 8009e54:	eff37800 	.word	0xeff37800

08009e58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b08a      	sub	sp, #40	; 0x28
 8009e5c:	af02      	add	r7, sp, #8
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	4613      	mov	r3, r2
 8009e64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	785b      	ldrb	r3, [r3, #1]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	f040 817a 	bne.w	800a16e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d132      	bne.n	8009ee8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	015a      	lsls	r2, r3, #5
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	4413      	add	r3, r2
 8009e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	69ba      	ldr	r2, [r7, #24]
 8009e92:	0151      	lsls	r1, r2, #5
 8009e94:	69fa      	ldr	r2, [r7, #28]
 8009e96:	440a      	add	r2, r1
 8009e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ea0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ea4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	015a      	lsls	r2, r3, #5
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	4413      	add	r3, r2
 8009eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	69ba      	ldr	r2, [r7, #24]
 8009eb6:	0151      	lsls	r1, r2, #5
 8009eb8:	69fa      	ldr	r2, [r7, #28]
 8009eba:	440a      	add	r2, r1
 8009ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ec0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ec4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	69ba      	ldr	r2, [r7, #24]
 8009ed6:	0151      	lsls	r1, r2, #5
 8009ed8:	69fa      	ldr	r2, [r7, #28]
 8009eda:	440a      	add	r2, r1
 8009edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ee0:	0cdb      	lsrs	r3, r3, #19
 8009ee2:	04db      	lsls	r3, r3, #19
 8009ee4:	6113      	str	r3, [r2, #16]
 8009ee6:	e092      	b.n	800a00e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	015a      	lsls	r2, r3, #5
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	4413      	add	r3, r2
 8009ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	69ba      	ldr	r2, [r7, #24]
 8009ef8:	0151      	lsls	r1, r2, #5
 8009efa:	69fa      	ldr	r2, [r7, #28]
 8009efc:	440a      	add	r2, r1
 8009efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f02:	0cdb      	lsrs	r3, r3, #19
 8009f04:	04db      	lsls	r3, r3, #19
 8009f06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	015a      	lsls	r2, r3, #5
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	4413      	add	r3, r2
 8009f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	69ba      	ldr	r2, [r7, #24]
 8009f18:	0151      	lsls	r1, r2, #5
 8009f1a:	69fa      	ldr	r2, [r7, #28]
 8009f1c:	440a      	add	r2, r1
 8009f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f2a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d11a      	bne.n	8009f68 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	691a      	ldr	r2, [r3, #16]
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d903      	bls.n	8009f46 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	689a      	ldr	r2, [r3, #8]
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	015a      	lsls	r2, r3, #5
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	69ba      	ldr	r2, [r7, #24]
 8009f56:	0151      	lsls	r1, r2, #5
 8009f58:	69fa      	ldr	r2, [r7, #28]
 8009f5a:	440a      	add	r2, r1
 8009f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f64:	6113      	str	r3, [r2, #16]
 8009f66:	e01b      	b.n	8009fa0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f74:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	6919      	ldr	r1, [r3, #16]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	440b      	add	r3, r1
 8009f80:	1e59      	subs	r1, r3, #1
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f8a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009f8c:	4ba2      	ldr	r3, [pc, #648]	; (800a218 <USB_EPStartXfer+0x3c0>)
 8009f8e:	400b      	ands	r3, r1
 8009f90:	69b9      	ldr	r1, [r7, #24]
 8009f92:	0148      	lsls	r0, r1, #5
 8009f94:	69f9      	ldr	r1, [r7, #28]
 8009f96:	4401      	add	r1, r0
 8009f98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	015a      	lsls	r2, r3, #5
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fac:	691a      	ldr	r2, [r3, #16]
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fb6:	69b9      	ldr	r1, [r7, #24]
 8009fb8:	0148      	lsls	r0, r1, #5
 8009fba:	69f9      	ldr	r1, [r7, #28]
 8009fbc:	4401      	add	r1, r0
 8009fbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	791b      	ldrb	r3, [r3, #4]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d11f      	bne.n	800a00e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	015a      	lsls	r2, r3, #5
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	0151      	lsls	r1, r2, #5
 8009fe0:	69fa      	ldr	r2, [r7, #28]
 8009fe2:	440a      	add	r2, r1
 8009fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fe8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009fec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	015a      	lsls	r2, r3, #5
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	69ba      	ldr	r2, [r7, #24]
 8009ffe:	0151      	lsls	r1, r2, #5
 800a000:	69fa      	ldr	r2, [r7, #28]
 800a002:	440a      	add	r2, r1
 800a004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a008:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a00c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a00e:	79fb      	ldrb	r3, [r7, #7]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d14b      	bne.n	800a0ac <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d009      	beq.n	800a030 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	015a      	lsls	r2, r3, #5
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	4413      	add	r3, r2
 800a024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a028:	461a      	mov	r2, r3
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	791b      	ldrb	r3, [r3, #4]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d128      	bne.n	800a08a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a044:	2b00      	cmp	r3, #0
 800a046:	d110      	bne.n	800a06a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	015a      	lsls	r2, r3, #5
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	4413      	add	r3, r2
 800a050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	69ba      	ldr	r2, [r7, #24]
 800a058:	0151      	lsls	r1, r2, #5
 800a05a:	69fa      	ldr	r2, [r7, #28]
 800a05c:	440a      	add	r2, r1
 800a05e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a066:	6013      	str	r3, [r2, #0]
 800a068:	e00f      	b.n	800a08a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	015a      	lsls	r2, r3, #5
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	4413      	add	r3, r2
 800a072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	69ba      	ldr	r2, [r7, #24]
 800a07a:	0151      	lsls	r1, r2, #5
 800a07c:	69fa      	ldr	r2, [r7, #28]
 800a07e:	440a      	add	r2, r1
 800a080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a088:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	015a      	lsls	r2, r3, #5
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	4413      	add	r3, r2
 800a092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	69ba      	ldr	r2, [r7, #24]
 800a09a:	0151      	lsls	r1, r2, #5
 800a09c:	69fa      	ldr	r2, [r7, #28]
 800a09e:	440a      	add	r2, r1
 800a0a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0a8:	6013      	str	r3, [r2, #0]
 800a0aa:	e165      	b.n	800a378 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	015a      	lsls	r2, r3, #5
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	69ba      	ldr	r2, [r7, #24]
 800a0bc:	0151      	lsls	r1, r2, #5
 800a0be:	69fa      	ldr	r2, [r7, #28]
 800a0c0:	440a      	add	r2, r1
 800a0c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	791b      	ldrb	r3, [r3, #4]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d015      	beq.n	800a100 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f000 814d 	beq.w	800a378 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	f003 030f 	and.w	r3, r3, #15
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a0f4:	69f9      	ldr	r1, [r7, #28]
 800a0f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	634b      	str	r3, [r1, #52]	; 0x34
 800a0fe:	e13b      	b.n	800a378 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d110      	bne.n	800a132 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	4413      	add	r3, r2
 800a118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	69ba      	ldr	r2, [r7, #24]
 800a120:	0151      	lsls	r1, r2, #5
 800a122:	69fa      	ldr	r2, [r7, #28]
 800a124:	440a      	add	r2, r1
 800a126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a12a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a12e:	6013      	str	r3, [r2, #0]
 800a130:	e00f      	b.n	800a152 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	015a      	lsls	r2, r3, #5
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	4413      	add	r3, r2
 800a13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	69ba      	ldr	r2, [r7, #24]
 800a142:	0151      	lsls	r1, r2, #5
 800a144:	69fa      	ldr	r2, [r7, #28]
 800a146:	440a      	add	r2, r1
 800a148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a14c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a150:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	68d9      	ldr	r1, [r3, #12]
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	781a      	ldrb	r2, [r3, #0]
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	b298      	uxth	r0, r3
 800a160:	79fb      	ldrb	r3, [r7, #7]
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	4603      	mov	r3, r0
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 f9b8 	bl	800a4dc <USB_WritePacket>
 800a16c:	e104      	b.n	800a378 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	015a      	lsls	r2, r3, #5
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	4413      	add	r3, r2
 800a176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	69ba      	ldr	r2, [r7, #24]
 800a17e:	0151      	lsls	r1, r2, #5
 800a180:	69fa      	ldr	r2, [r7, #28]
 800a182:	440a      	add	r2, r1
 800a184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a188:	0cdb      	lsrs	r3, r3, #19
 800a18a:	04db      	lsls	r3, r3, #19
 800a18c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	4413      	add	r3, r2
 800a196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	69ba      	ldr	r2, [r7, #24]
 800a19e:	0151      	lsls	r1, r2, #5
 800a1a0:	69fa      	ldr	r2, [r7, #28]
 800a1a2:	440a      	add	r2, r1
 800a1a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1b0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d131      	bne.n	800a21c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d003      	beq.n	800a1c8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	689a      	ldr	r2, [r3, #8]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	689a      	ldr	r2, [r3, #8]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	015a      	lsls	r2, r3, #5
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1dc:	691a      	ldr	r2, [r3, #16]
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	6a1b      	ldr	r3, [r3, #32]
 800a1e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1e6:	69b9      	ldr	r1, [r7, #24]
 800a1e8:	0148      	lsls	r0, r1, #5
 800a1ea:	69f9      	ldr	r1, [r7, #28]
 800a1ec:	4401      	add	r1, r0
 800a1ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	015a      	lsls	r2, r3, #5
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	69ba      	ldr	r2, [r7, #24]
 800a206:	0151      	lsls	r1, r2, #5
 800a208:	69fa      	ldr	r2, [r7, #28]
 800a20a:	440a      	add	r2, r1
 800a20c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a210:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a214:	6113      	str	r3, [r2, #16]
 800a216:	e061      	b.n	800a2dc <USB_EPStartXfer+0x484>
 800a218:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d123      	bne.n	800a26c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	015a      	lsls	r2, r3, #5
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	4413      	add	r3, r2
 800a22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a230:	691a      	ldr	r2, [r3, #16]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a23a:	69b9      	ldr	r1, [r7, #24]
 800a23c:	0148      	lsls	r0, r1, #5
 800a23e:	69f9      	ldr	r1, [r7, #28]
 800a240:	4401      	add	r1, r0
 800a242:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a246:	4313      	orrs	r3, r2
 800a248:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	015a      	lsls	r2, r3, #5
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	4413      	add	r3, r2
 800a252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	69ba      	ldr	r2, [r7, #24]
 800a25a:	0151      	lsls	r1, r2, #5
 800a25c:	69fa      	ldr	r2, [r7, #28]
 800a25e:	440a      	add	r2, r1
 800a260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a268:	6113      	str	r3, [r2, #16]
 800a26a:	e037      	b.n	800a2dc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	691a      	ldr	r2, [r3, #16]
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	4413      	add	r3, r2
 800a276:	1e5a      	subs	r2, r3, #1
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a280:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	8afa      	ldrh	r2, [r7, #22]
 800a288:	fb03 f202 	mul.w	r2, r3, r2
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	015a      	lsls	r2, r3, #5
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	4413      	add	r3, r2
 800a298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a29c:	691a      	ldr	r2, [r3, #16]
 800a29e:	8afb      	ldrh	r3, [r7, #22]
 800a2a0:	04d9      	lsls	r1, r3, #19
 800a2a2:	4b38      	ldr	r3, [pc, #224]	; (800a384 <USB_EPStartXfer+0x52c>)
 800a2a4:	400b      	ands	r3, r1
 800a2a6:	69b9      	ldr	r1, [r7, #24]
 800a2a8:	0148      	lsls	r0, r1, #5
 800a2aa:	69f9      	ldr	r1, [r7, #28]
 800a2ac:	4401      	add	r1, r0
 800a2ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	015a      	lsls	r2, r3, #5
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	4413      	add	r3, r2
 800a2be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2c2:	691a      	ldr	r2, [r3, #16]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	6a1b      	ldr	r3, [r3, #32]
 800a2c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2cc:	69b9      	ldr	r1, [r7, #24]
 800a2ce:	0148      	lsls	r0, r1, #5
 800a2d0:	69f9      	ldr	r1, [r7, #28]
 800a2d2:	4401      	add	r1, r0
 800a2d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a2dc:	79fb      	ldrb	r3, [r7, #7]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d10d      	bne.n	800a2fe <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d009      	beq.n	800a2fe <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	68d9      	ldr	r1, [r3, #12]
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	015a      	lsls	r2, r3, #5
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fa:	460a      	mov	r2, r1
 800a2fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	791b      	ldrb	r3, [r3, #4]
 800a302:	2b01      	cmp	r3, #1
 800a304:	d128      	bne.n	800a358 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a312:	2b00      	cmp	r3, #0
 800a314:	d110      	bne.n	800a338 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	015a      	lsls	r2, r3, #5
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	4413      	add	r3, r2
 800a31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	69ba      	ldr	r2, [r7, #24]
 800a326:	0151      	lsls	r1, r2, #5
 800a328:	69fa      	ldr	r2, [r7, #28]
 800a32a:	440a      	add	r2, r1
 800a32c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a330:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a334:	6013      	str	r3, [r2, #0]
 800a336:	e00f      	b.n	800a358 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	015a      	lsls	r2, r3, #5
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	4413      	add	r3, r2
 800a340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	69ba      	ldr	r2, [r7, #24]
 800a348:	0151      	lsls	r1, r2, #5
 800a34a:	69fa      	ldr	r2, [r7, #28]
 800a34c:	440a      	add	r2, r1
 800a34e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a356:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	015a      	lsls	r2, r3, #5
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	4413      	add	r3, r2
 800a360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	69ba      	ldr	r2, [r7, #24]
 800a368:	0151      	lsls	r1, r2, #5
 800a36a:	69fa      	ldr	r2, [r7, #28]
 800a36c:	440a      	add	r2, r1
 800a36e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a372:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a376:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3720      	adds	r7, #32
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	1ff80000 	.word	0x1ff80000

0800a388 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a388:	b480      	push	{r7}
 800a38a:	b087      	sub	sp, #28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a392:	2300      	movs	r3, #0
 800a394:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	785b      	ldrb	r3, [r3, #1]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d14a      	bne.n	800a43c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	015a      	lsls	r2, r3, #5
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3be:	f040 8086 	bne.w	800a4ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	015a      	lsls	r2, r3, #5
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	7812      	ldrb	r2, [r2, #0]
 800a3d6:	0151      	lsls	r1, r2, #5
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	440a      	add	r2, r1
 800a3dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a3e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	015a      	lsls	r2, r3, #5
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	7812      	ldrb	r2, [r2, #0]
 800a3fa:	0151      	lsls	r1, r2, #5
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	440a      	add	r2, r1
 800a400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a404:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a408:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	3301      	adds	r3, #1
 800a40e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f242 7210 	movw	r2, #10000	; 0x2710
 800a416:	4293      	cmp	r3, r2
 800a418:	d902      	bls.n	800a420 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	75fb      	strb	r3, [r7, #23]
          break;
 800a41e:	e056      	b.n	800a4ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	015a      	lsls	r2, r3, #5
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	4413      	add	r3, r2
 800a42a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a438:	d0e7      	beq.n	800a40a <USB_EPStopXfer+0x82>
 800a43a:	e048      	b.n	800a4ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	015a      	lsls	r2, r3, #5
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	4413      	add	r3, r2
 800a446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a454:	d13b      	bne.n	800a4ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	7812      	ldrb	r2, [r2, #0]
 800a46a:	0151      	lsls	r1, r2, #5
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	440a      	add	r2, r1
 800a470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a474:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a478:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	015a      	lsls	r2, r3, #5
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	4413      	add	r3, r2
 800a484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	7812      	ldrb	r2, [r2, #0]
 800a48e:	0151      	lsls	r1, r2, #5
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	440a      	add	r2, r1
 800a494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a498:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a49c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f242 7210 	movw	r2, #10000	; 0x2710
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d902      	bls.n	800a4b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	75fb      	strb	r3, [r7, #23]
          break;
 800a4b2:	e00c      	b.n	800a4ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	015a      	lsls	r2, r3, #5
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4cc:	d0e7      	beq.n	800a49e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	371c      	adds	r7, #28
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b089      	sub	sp, #36	; 0x24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	71fb      	strb	r3, [r7, #7]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a4fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d123      	bne.n	800a54a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a502:	88bb      	ldrh	r3, [r7, #4]
 800a504:	3303      	adds	r3, #3
 800a506:	089b      	lsrs	r3, r3, #2
 800a508:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a50a:	2300      	movs	r3, #0
 800a50c:	61bb      	str	r3, [r7, #24]
 800a50e:	e018      	b.n	800a542 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a510:	79fb      	ldrb	r3, [r7, #7]
 800a512:	031a      	lsls	r2, r3, #12
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	4413      	add	r3, r2
 800a518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a51c:	461a      	mov	r2, r3
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	3301      	adds	r3, #1
 800a528:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	3301      	adds	r3, #1
 800a52e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	3301      	adds	r3, #1
 800a534:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	3301      	adds	r3, #1
 800a53a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	3301      	adds	r3, #1
 800a540:	61bb      	str	r3, [r7, #24]
 800a542:	69ba      	ldr	r2, [r7, #24]
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	429a      	cmp	r2, r3
 800a548:	d3e2      	bcc.n	800a510 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3724      	adds	r7, #36	; 0x24
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a558:	b480      	push	{r7}
 800a55a:	b08b      	sub	sp, #44	; 0x2c
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	4613      	mov	r3, r2
 800a564:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a56e:	88fb      	ldrh	r3, [r7, #6]
 800a570:	089b      	lsrs	r3, r3, #2
 800a572:	b29b      	uxth	r3, r3
 800a574:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a576:	88fb      	ldrh	r3, [r7, #6]
 800a578:	f003 0303 	and.w	r3, r3, #3
 800a57c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a57e:	2300      	movs	r3, #0
 800a580:	623b      	str	r3, [r7, #32]
 800a582:	e014      	b.n	800a5ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a592:	3301      	adds	r3, #1
 800a594:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a598:	3301      	adds	r3, #1
 800a59a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	3301      	adds	r3, #1
 800a5a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a5a8:	6a3b      	ldr	r3, [r7, #32]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	623b      	str	r3, [r7, #32]
 800a5ae:	6a3a      	ldr	r2, [r7, #32]
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d3e6      	bcc.n	800a584 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a5b6:	8bfb      	ldrh	r3, [r7, #30]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d01e      	beq.n	800a5fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	f107 0310 	add.w	r3, r7, #16
 800a5cc:	6812      	ldr	r2, [r2, #0]
 800a5ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a5d0:	693a      	ldr	r2, [r7, #16]
 800a5d2:	6a3b      	ldr	r3, [r7, #32]
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	00db      	lsls	r3, r3, #3
 800a5d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e0:	701a      	strb	r2, [r3, #0]
      i++;
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a5ee:	8bfb      	ldrh	r3, [r7, #30]
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a5f4:	8bfb      	ldrh	r3, [r7, #30]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1ea      	bne.n	800a5d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	372c      	adds	r7, #44	; 0x2c
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	785b      	ldrb	r3, [r3, #1]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d12c      	bne.n	800a67e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	015a      	lsls	r2, r3, #5
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	4413      	add	r3, r2
 800a62c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	db12      	blt.n	800a65c <USB_EPSetStall+0x54>
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00f      	beq.n	800a65c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4413      	add	r3, r2
 800a644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	0151      	lsls	r1, r2, #5
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	440a      	add	r2, r1
 800a652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a656:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a65a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	015a      	lsls	r2, r3, #5
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	4413      	add	r3, r2
 800a664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	0151      	lsls	r1, r2, #5
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	440a      	add	r2, r1
 800a672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a676:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a67a:	6013      	str	r3, [r2, #0]
 800a67c:	e02b      	b.n	800a6d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	015a      	lsls	r2, r3, #5
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	4413      	add	r3, r2
 800a686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	db12      	blt.n	800a6b6 <USB_EPSetStall+0xae>
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00f      	beq.n	800a6b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	0151      	lsls	r1, r2, #5
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	440a      	add	r2, r1
 800a6ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	0151      	lsls	r1, r2, #5
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	440a      	add	r2, r1
 800a6cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a6d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3714      	adds	r7, #20
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	785b      	ldrb	r3, [r3, #1]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d128      	bne.n	800a752 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	0151      	lsls	r1, r2, #5
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	440a      	add	r2, r1
 800a716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a71a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a71e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	791b      	ldrb	r3, [r3, #4]
 800a724:	2b03      	cmp	r3, #3
 800a726:	d003      	beq.n	800a730 <USB_EPClearStall+0x4c>
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	791b      	ldrb	r3, [r3, #4]
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d138      	bne.n	800a7a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	015a      	lsls	r2, r3, #5
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	4413      	add	r3, r2
 800a738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	0151      	lsls	r1, r2, #5
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	440a      	add	r2, r1
 800a746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a74a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	e027      	b.n	800a7a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	015a      	lsls	r2, r3, #5
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	4413      	add	r3, r2
 800a75a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	0151      	lsls	r1, r2, #5
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	440a      	add	r2, r1
 800a768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a76c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a770:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	791b      	ldrb	r3, [r3, #4]
 800a776:	2b03      	cmp	r3, #3
 800a778:	d003      	beq.n	800a782 <USB_EPClearStall+0x9e>
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	791b      	ldrb	r3, [r3, #4]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d10f      	bne.n	800a7a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	015a      	lsls	r2, r3, #5
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	4413      	add	r3, r2
 800a78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	0151      	lsls	r1, r2, #5
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	440a      	add	r2, r1
 800a798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a79c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a7d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	78fb      	ldrb	r3, [r7, #3]
 800a7de:	011b      	lsls	r3, r3, #4
 800a7e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a7e4:	68f9      	ldr	r1, [r7, #12]
 800a7e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3714      	adds	r7, #20
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a816:	f023 0303 	bic.w	r3, r3, #3
 800a81a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a82a:	f023 0302 	bic.w	r3, r3, #2
 800a82e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3714      	adds	r7, #20
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a83e:	b480      	push	{r7}
 800a840:	b085      	sub	sp, #20
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a858:	f023 0303 	bic.w	r3, r3, #3
 800a85c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a86c:	f043 0302 	orr.w	r3, r3, #2
 800a870:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	695b      	ldr	r3, [r3, #20]
 800a88c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	4013      	ands	r3, r2
 800a896:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a898:	68fb      	ldr	r3, [r7, #12]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3714      	adds	r7, #20
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b085      	sub	sp, #20
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c2:	69db      	ldr	r3, [r3, #28]
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	0c1b      	lsrs	r3, r3, #16
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3714      	adds	r7, #20
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b085      	sub	sp, #20
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	b29b      	uxth	r3, r3
}
 800a902:	4618      	mov	r0, r3
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a90e:	b480      	push	{r7}
 800a910:	b085      	sub	sp, #20
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	460b      	mov	r3, r1
 800a918:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a91e:	78fb      	ldrb	r3, [r7, #3]
 800a920:	015a      	lsls	r2, r3, #5
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	4413      	add	r3, r2
 800a926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	4013      	ands	r3, r2
 800a93a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a93c:	68bb      	ldr	r3, [r7, #8]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b087      	sub	sp, #28
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	460b      	mov	r3, r1
 800a954:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a96e:	78fb      	ldrb	r3, [r7, #3]
 800a970:	f003 030f 	and.w	r3, r3, #15
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	fa22 f303 	lsr.w	r3, r2, r3
 800a97a:	01db      	lsls	r3, r3, #7
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	4313      	orrs	r3, r2
 800a982:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a984:	78fb      	ldrb	r3, [r7, #3]
 800a986:	015a      	lsls	r2, r3, #5
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	4413      	add	r3, r2
 800a98c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	693a      	ldr	r2, [r7, #16]
 800a994:	4013      	ands	r3, r2
 800a996:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a998:	68bb      	ldr	r3, [r7, #8]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	371c      	adds	r7, #28
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b083      	sub	sp, #12
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	695b      	ldr	r3, [r3, #20]
 800a9b2:	f003 0301 	and.w	r3, r3, #1
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr

0800a9c2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9c2:	b480      	push	{r7}
 800a9c4:	b085      	sub	sp, #20
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a9e0:	f023 0307 	bic.w	r3, r3, #7
 800a9e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b087      	sub	sp, #28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	460b      	mov	r3, r1
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	333c      	adds	r3, #60	; 0x3c
 800aa1e:	3304      	adds	r3, #4
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	4a26      	ldr	r2, [pc, #152]	; (800aac0 <USB_EP0_OutStart+0xb8>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d90a      	bls.n	800aa42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa3c:	d101      	bne.n	800aa42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	e037      	b.n	800aab2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa48:	461a      	mov	r2, r3
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa54:	691b      	ldr	r3, [r3, #16]
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa68:	691b      	ldr	r3, [r3, #16]
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa70:	f043 0318 	orr.w	r3, r3, #24
 800aa74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800aa88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aa8a:	7afb      	ldrb	r3, [r7, #11]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d10f      	bne.n	800aab0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa96:	461a      	mov	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	697a      	ldr	r2, [r7, #20]
 800aaa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaaa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800aaae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	371c      	adds	r7, #28
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	4f54300a 	.word	0x4f54300a

0800aac4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aacc:	2300      	movs	r3, #0
 800aace:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	3301      	adds	r3, #1
 800aad4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800aadc:	d901      	bls.n	800aae2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aade:	2303      	movs	r3, #3
 800aae0:	e01b      	b.n	800ab1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	daf2      	bge.n	800aad0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aaea:	2300      	movs	r3, #0
 800aaec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	f043 0201 	orr.w	r2, r3, #1
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	3301      	adds	r3, #1
 800aafe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ab06:	d901      	bls.n	800ab0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab08:	2303      	movs	r3, #3
 800ab0a:	e006      	b.n	800ab1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	691b      	ldr	r3, [r3, #16]
 800ab10:	f003 0301 	and.w	r3, r3, #1
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d0f0      	beq.n	800aafa <USB_CoreReset+0x36>

  return HAL_OK;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3714      	adds	r7, #20
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
	...

0800ab28 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	4603      	mov	r3, r0
 800ab30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ab32:	79fb      	ldrb	r3, [r7, #7]
 800ab34:	4a08      	ldr	r2, [pc, #32]	; (800ab58 <disk_status+0x30>)
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	79fa      	ldrb	r2, [r7, #7]
 800ab40:	4905      	ldr	r1, [pc, #20]	; (800ab58 <disk_status+0x30>)
 800ab42:	440a      	add	r2, r1
 800ab44:	7b12      	ldrb	r2, [r2, #12]
 800ab46:	4610      	mov	r0, r2
 800ab48:	4798      	blx	r3
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ab4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	20000e6c 	.word	0x20000e6c

0800ab5c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	4603      	mov	r3, r0
 800ab64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ab66:	2300      	movs	r3, #0
 800ab68:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ab6a:	79fb      	ldrb	r3, [r7, #7]
 800ab6c:	4a0d      	ldr	r2, [pc, #52]	; (800aba4 <disk_initialize+0x48>)
 800ab6e:	5cd3      	ldrb	r3, [r2, r3]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d111      	bne.n	800ab98 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ab74:	79fb      	ldrb	r3, [r7, #7]
 800ab76:	4a0b      	ldr	r2, [pc, #44]	; (800aba4 <disk_initialize+0x48>)
 800ab78:	2101      	movs	r1, #1
 800ab7a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ab7c:	79fb      	ldrb	r3, [r7, #7]
 800ab7e:	4a09      	ldr	r2, [pc, #36]	; (800aba4 <disk_initialize+0x48>)
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	79fa      	ldrb	r2, [r7, #7]
 800ab8a:	4906      	ldr	r1, [pc, #24]	; (800aba4 <disk_initialize+0x48>)
 800ab8c:	440a      	add	r2, r1
 800ab8e:	7b12      	ldrb	r2, [r2, #12]
 800ab90:	4610      	mov	r0, r2
 800ab92:	4798      	blx	r3
 800ab94:	4603      	mov	r3, r0
 800ab96:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	20000e6c 	.word	0x20000e6c

0800aba8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aba8:	b590      	push	{r4, r7, lr}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	60b9      	str	r1, [r7, #8]
 800abb0:	607a      	str	r2, [r7, #4]
 800abb2:	603b      	str	r3, [r7, #0]
 800abb4:	4603      	mov	r3, r0
 800abb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
 800abba:	4a0a      	ldr	r2, [pc, #40]	; (800abe4 <disk_read+0x3c>)
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	4413      	add	r3, r2
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	689c      	ldr	r4, [r3, #8]
 800abc4:	7bfb      	ldrb	r3, [r7, #15]
 800abc6:	4a07      	ldr	r2, [pc, #28]	; (800abe4 <disk_read+0x3c>)
 800abc8:	4413      	add	r3, r2
 800abca:	7b18      	ldrb	r0, [r3, #12]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	68b9      	ldr	r1, [r7, #8]
 800abd2:	47a0      	blx	r4
 800abd4:	4603      	mov	r3, r0
 800abd6:	75fb      	strb	r3, [r7, #23]
  return res;
 800abd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	371c      	adds	r7, #28
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd90      	pop	{r4, r7, pc}
 800abe2:	bf00      	nop
 800abe4:	20000e6c 	.word	0x20000e6c

0800abe8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800abe8:	b590      	push	{r4, r7, lr}
 800abea:	b087      	sub	sp, #28
 800abec:	af00      	add	r7, sp, #0
 800abee:	60b9      	str	r1, [r7, #8]
 800abf0:	607a      	str	r2, [r7, #4]
 800abf2:	603b      	str	r3, [r7, #0]
 800abf4:	4603      	mov	r3, r0
 800abf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
 800abfa:	4a0a      	ldr	r2, [pc, #40]	; (800ac24 <disk_write+0x3c>)
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	4413      	add	r3, r2
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	68dc      	ldr	r4, [r3, #12]
 800ac04:	7bfb      	ldrb	r3, [r7, #15]
 800ac06:	4a07      	ldr	r2, [pc, #28]	; (800ac24 <disk_write+0x3c>)
 800ac08:	4413      	add	r3, r2
 800ac0a:	7b18      	ldrb	r0, [r3, #12]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	68b9      	ldr	r1, [r7, #8]
 800ac12:	47a0      	blx	r4
 800ac14:	4603      	mov	r3, r0
 800ac16:	75fb      	strb	r3, [r7, #23]
  return res;
 800ac18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	371c      	adds	r7, #28
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd90      	pop	{r4, r7, pc}
 800ac22:	bf00      	nop
 800ac24:	20000e6c 	.word	0x20000e6c

0800ac28 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	4603      	mov	r3, r0
 800ac30:	603a      	str	r2, [r7, #0]
 800ac32:	71fb      	strb	r3, [r7, #7]
 800ac34:	460b      	mov	r3, r1
 800ac36:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ac38:	79fb      	ldrb	r3, [r7, #7]
 800ac3a:	4a09      	ldr	r2, [pc, #36]	; (800ac60 <disk_ioctl+0x38>)
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	691b      	ldr	r3, [r3, #16]
 800ac44:	79fa      	ldrb	r2, [r7, #7]
 800ac46:	4906      	ldr	r1, [pc, #24]	; (800ac60 <disk_ioctl+0x38>)
 800ac48:	440a      	add	r2, r1
 800ac4a:	7b10      	ldrb	r0, [r2, #12]
 800ac4c:	79b9      	ldrb	r1, [r7, #6]
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	4798      	blx	r3
 800ac52:	4603      	mov	r3, r0
 800ac54:	73fb      	strb	r3, [r7, #15]
  return res;
 800ac56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	20000e6c 	.word	0x20000e6c

0800ac64 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800ac64:	b480      	push	{r7}
 800ac66:	af00      	add	r7, sp, #0
  return 0;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ac84:	89fb      	ldrh	r3, [r7, #14]
 800ac86:	021b      	lsls	r3, r3, #8
 800ac88:	b21a      	sxth	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	b21b      	sxth	r3, r3
 800ac90:	4313      	orrs	r3, r2
 800ac92:	b21b      	sxth	r3, r3
 800ac94:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ac96:	89fb      	ldrh	r3, [r7, #14]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3714      	adds	r7, #20
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	3303      	adds	r3, #3
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	021b      	lsls	r3, r3, #8
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	3202      	adds	r2, #2
 800acbc:	7812      	ldrb	r2, [r2, #0]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	021b      	lsls	r3, r3, #8
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	3201      	adds	r2, #1
 800acca:	7812      	ldrb	r2, [r2, #0]
 800accc:	4313      	orrs	r3, r2
 800acce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	021b      	lsls	r3, r3, #8
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	7812      	ldrb	r2, [r2, #0]
 800acd8:	4313      	orrs	r3, r2
 800acda:	60fb      	str	r3, [r7, #12]
	return rv;
 800acdc:	68fb      	ldr	r3, [r7, #12]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800acea:	b480      	push	{r7}
 800acec:	b083      	sub	sp, #12
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	460b      	mov	r3, r1
 800acf4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	1c5a      	adds	r2, r3, #1
 800acfa:	607a      	str	r2, [r7, #4]
 800acfc:	887a      	ldrh	r2, [r7, #2]
 800acfe:	b2d2      	uxtb	r2, r2
 800ad00:	701a      	strb	r2, [r3, #0]
 800ad02:	887b      	ldrh	r3, [r7, #2]
 800ad04:	0a1b      	lsrs	r3, r3, #8
 800ad06:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	1c5a      	adds	r2, r3, #1
 800ad0c:	607a      	str	r2, [r7, #4]
 800ad0e:	887a      	ldrh	r2, [r7, #2]
 800ad10:	b2d2      	uxtb	r2, r2
 800ad12:	701a      	strb	r2, [r3, #0]
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	607a      	str	r2, [r7, #4]
 800ad30:	683a      	ldr	r2, [r7, #0]
 800ad32:	b2d2      	uxtb	r2, r2
 800ad34:	701a      	strb	r2, [r3, #0]
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	0a1b      	lsrs	r3, r3, #8
 800ad3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	1c5a      	adds	r2, r3, #1
 800ad40:	607a      	str	r2, [r7, #4]
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	b2d2      	uxtb	r2, r2
 800ad46:	701a      	strb	r2, [r3, #0]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	0a1b      	lsrs	r3, r3, #8
 800ad4c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	1c5a      	adds	r2, r3, #1
 800ad52:	607a      	str	r2, [r7, #4]
 800ad54:	683a      	ldr	r2, [r7, #0]
 800ad56:	b2d2      	uxtb	r2, r2
 800ad58:	701a      	strb	r2, [r3, #0]
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	0a1b      	lsrs	r3, r3, #8
 800ad5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	1c5a      	adds	r2, r3, #1
 800ad64:	607a      	str	r2, [r7, #4]
 800ad66:	683a      	ldr	r2, [r7, #0]
 800ad68:	b2d2      	uxtb	r2, r2
 800ad6a:	701a      	strb	r2, [r3, #0]
}
 800ad6c:	bf00      	nop
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ad78:	b480      	push	{r7}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00d      	beq.n	800adae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	1c53      	adds	r3, r2, #1
 800ad96:	613b      	str	r3, [r7, #16]
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	1c59      	adds	r1, r3, #1
 800ad9c:	6179      	str	r1, [r7, #20]
 800ad9e:	7812      	ldrb	r2, [r2, #0]
 800ada0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	3b01      	subs	r3, #1
 800ada6:	607b      	str	r3, [r7, #4]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1f1      	bne.n	800ad92 <mem_cpy+0x1a>
	}
}
 800adae:	bf00      	nop
 800adb0:	371c      	adds	r7, #28
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800adba:	b480      	push	{r7}
 800adbc:	b087      	sub	sp, #28
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	60f8      	str	r0, [r7, #12]
 800adc2:	60b9      	str	r1, [r7, #8]
 800adc4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	1c5a      	adds	r2, r3, #1
 800adce:	617a      	str	r2, [r7, #20]
 800add0:	68ba      	ldr	r2, [r7, #8]
 800add2:	b2d2      	uxtb	r2, r2
 800add4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	3b01      	subs	r3, #1
 800adda:	607b      	str	r3, [r7, #4]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1f3      	bne.n	800adca <mem_set+0x10>
}
 800ade2:	bf00      	nop
 800ade4:	bf00      	nop
 800ade6:	371c      	adds	r7, #28
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800adf0:	b480      	push	{r7}
 800adf2:	b089      	sub	sp, #36	; 0x24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	61fb      	str	r3, [r7, #28]
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ae04:	2300      	movs	r3, #0
 800ae06:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	1c5a      	adds	r2, r3, #1
 800ae0c:	61fa      	str	r2, [r7, #28]
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	4619      	mov	r1, r3
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	1c5a      	adds	r2, r3, #1
 800ae16:	61ba      	str	r2, [r7, #24]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	1acb      	subs	r3, r1, r3
 800ae1c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3b01      	subs	r3, #1
 800ae22:	607b      	str	r3, [r7, #4]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d002      	beq.n	800ae30 <mem_cmp+0x40>
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d0eb      	beq.n	800ae08 <mem_cmp+0x18>

	return r;
 800ae30:	697b      	ldr	r3, [r7, #20]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3724      	adds	r7, #36	; 0x24
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr

0800ae3e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ae3e:	b480      	push	{r7}
 800ae40:	b083      	sub	sp, #12
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ae48:	e002      	b.n	800ae50 <chk_chr+0x12>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	607b      	str	r3, [r7, #4]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d005      	beq.n	800ae64 <chk_chr+0x26>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d1f2      	bne.n	800ae4a <chk_chr+0xc>
	return *str;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	781b      	ldrb	r3, [r3, #0]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	370c      	adds	r7, #12
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60bb      	str	r3, [r7, #8]
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	e029      	b.n	800aedc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ae88:	4a27      	ldr	r2, [pc, #156]	; (800af28 <chk_lock+0xb4>)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	011b      	lsls	r3, r3, #4
 800ae8e:	4413      	add	r3, r2
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d01d      	beq.n	800aed2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ae96:	4a24      	ldr	r2, [pc, #144]	; (800af28 <chk_lock+0xb4>)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	011b      	lsls	r3, r3, #4
 800ae9c:	4413      	add	r3, r2
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d116      	bne.n	800aed6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aea8:	4a1f      	ldr	r2, [pc, #124]	; (800af28 <chk_lock+0xb4>)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	011b      	lsls	r3, r3, #4
 800aeae:	4413      	add	r3, r2
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d10c      	bne.n	800aed6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aebc:	4a1a      	ldr	r2, [pc, #104]	; (800af28 <chk_lock+0xb4>)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	011b      	lsls	r3, r3, #4
 800aec2:	4413      	add	r3, r2
 800aec4:	3308      	adds	r3, #8
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aecc:	429a      	cmp	r2, r3
 800aece:	d102      	bne.n	800aed6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aed0:	e007      	b.n	800aee2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800aed2:	2301      	movs	r3, #1
 800aed4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	3301      	adds	r3, #1
 800aeda:	60fb      	str	r3, [r7, #12]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d9d2      	bls.n	800ae88 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	d109      	bne.n	800aefc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d102      	bne.n	800aef4 <chk_lock+0x80>
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d101      	bne.n	800aef8 <chk_lock+0x84>
 800aef4:	2300      	movs	r3, #0
 800aef6:	e010      	b.n	800af1a <chk_lock+0xa6>
 800aef8:	2312      	movs	r3, #18
 800aefa:	e00e      	b.n	800af1a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d108      	bne.n	800af14 <chk_lock+0xa0>
 800af02:	4a09      	ldr	r2, [pc, #36]	; (800af28 <chk_lock+0xb4>)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	011b      	lsls	r3, r3, #4
 800af08:	4413      	add	r3, r2
 800af0a:	330c      	adds	r3, #12
 800af0c:	881b      	ldrh	r3, [r3, #0]
 800af0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af12:	d101      	bne.n	800af18 <chk_lock+0xa4>
 800af14:	2310      	movs	r3, #16
 800af16:	e000      	b.n	800af1a <chk_lock+0xa6>
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3714      	adds	r7, #20
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	20000e4c 	.word	0x20000e4c

0800af2c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af32:	2300      	movs	r3, #0
 800af34:	607b      	str	r3, [r7, #4]
 800af36:	e002      	b.n	800af3e <enq_lock+0x12>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	3301      	adds	r3, #1
 800af3c:	607b      	str	r3, [r7, #4]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d806      	bhi.n	800af52 <enq_lock+0x26>
 800af44:	4a09      	ldr	r2, [pc, #36]	; (800af6c <enq_lock+0x40>)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	011b      	lsls	r3, r3, #4
 800af4a:	4413      	add	r3, r2
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d1f2      	bne.n	800af38 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b02      	cmp	r3, #2
 800af56:	bf14      	ite	ne
 800af58:	2301      	movne	r3, #1
 800af5a:	2300      	moveq	r3, #0
 800af5c:	b2db      	uxtb	r3, r3
}
 800af5e:	4618      	mov	r0, r3
 800af60:	370c      	adds	r7, #12
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	20000e4c 	.word	0x20000e4c

0800af70 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af7a:	2300      	movs	r3, #0
 800af7c:	60fb      	str	r3, [r7, #12]
 800af7e:	e01f      	b.n	800afc0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800af80:	4a41      	ldr	r2, [pc, #260]	; (800b088 <inc_lock+0x118>)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	011b      	lsls	r3, r3, #4
 800af86:	4413      	add	r3, r2
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d113      	bne.n	800afba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800af92:	4a3d      	ldr	r2, [pc, #244]	; (800b088 <inc_lock+0x118>)
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	011b      	lsls	r3, r3, #4
 800af98:	4413      	add	r3, r2
 800af9a:	3304      	adds	r3, #4
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d109      	bne.n	800afba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800afa6:	4a38      	ldr	r2, [pc, #224]	; (800b088 <inc_lock+0x118>)
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	011b      	lsls	r3, r3, #4
 800afac:	4413      	add	r3, r2
 800afae:	3308      	adds	r3, #8
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d006      	beq.n	800afc8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3301      	adds	r3, #1
 800afbe:	60fb      	str	r3, [r7, #12]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d9dc      	bls.n	800af80 <inc_lock+0x10>
 800afc6:	e000      	b.n	800afca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800afc8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d132      	bne.n	800b036 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800afd0:	2300      	movs	r3, #0
 800afd2:	60fb      	str	r3, [r7, #12]
 800afd4:	e002      	b.n	800afdc <inc_lock+0x6c>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	3301      	adds	r3, #1
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d806      	bhi.n	800aff0 <inc_lock+0x80>
 800afe2:	4a29      	ldr	r2, [pc, #164]	; (800b088 <inc_lock+0x118>)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	011b      	lsls	r3, r3, #4
 800afe8:	4413      	add	r3, r2
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1f2      	bne.n	800afd6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2b02      	cmp	r3, #2
 800aff4:	d101      	bne.n	800affa <inc_lock+0x8a>
 800aff6:	2300      	movs	r3, #0
 800aff8:	e040      	b.n	800b07c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	4922      	ldr	r1, [pc, #136]	; (800b088 <inc_lock+0x118>)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	011b      	lsls	r3, r3, #4
 800b004:	440b      	add	r3, r1
 800b006:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	689a      	ldr	r2, [r3, #8]
 800b00c:	491e      	ldr	r1, [pc, #120]	; (800b088 <inc_lock+0x118>)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	011b      	lsls	r3, r3, #4
 800b012:	440b      	add	r3, r1
 800b014:	3304      	adds	r3, #4
 800b016:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	695a      	ldr	r2, [r3, #20]
 800b01c:	491a      	ldr	r1, [pc, #104]	; (800b088 <inc_lock+0x118>)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	011b      	lsls	r3, r3, #4
 800b022:	440b      	add	r3, r1
 800b024:	3308      	adds	r3, #8
 800b026:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b028:	4a17      	ldr	r2, [pc, #92]	; (800b088 <inc_lock+0x118>)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	011b      	lsls	r3, r3, #4
 800b02e:	4413      	add	r3, r2
 800b030:	330c      	adds	r3, #12
 800b032:	2200      	movs	r2, #0
 800b034:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d009      	beq.n	800b050 <inc_lock+0xe0>
 800b03c:	4a12      	ldr	r2, [pc, #72]	; (800b088 <inc_lock+0x118>)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	011b      	lsls	r3, r3, #4
 800b042:	4413      	add	r3, r2
 800b044:	330c      	adds	r3, #12
 800b046:	881b      	ldrh	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <inc_lock+0xe0>
 800b04c:	2300      	movs	r3, #0
 800b04e:	e015      	b.n	800b07c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d108      	bne.n	800b068 <inc_lock+0xf8>
 800b056:	4a0c      	ldr	r2, [pc, #48]	; (800b088 <inc_lock+0x118>)
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	011b      	lsls	r3, r3, #4
 800b05c:	4413      	add	r3, r2
 800b05e:	330c      	adds	r3, #12
 800b060:	881b      	ldrh	r3, [r3, #0]
 800b062:	3301      	adds	r3, #1
 800b064:	b29a      	uxth	r2, r3
 800b066:	e001      	b.n	800b06c <inc_lock+0xfc>
 800b068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b06c:	4906      	ldr	r1, [pc, #24]	; (800b088 <inc_lock+0x118>)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	011b      	lsls	r3, r3, #4
 800b072:	440b      	add	r3, r1
 800b074:	330c      	adds	r3, #12
 800b076:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	3301      	adds	r3, #1
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3714      	adds	r7, #20
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr
 800b088:	20000e4c 	.word	0x20000e4c

0800b08c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3b01      	subs	r3, #1
 800b098:	607b      	str	r3, [r7, #4]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d825      	bhi.n	800b0ec <dec_lock+0x60>
		n = Files[i].ctr;
 800b0a0:	4a17      	ldr	r2, [pc, #92]	; (800b100 <dec_lock+0x74>)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	011b      	lsls	r3, r3, #4
 800b0a6:	4413      	add	r3, r2
 800b0a8:	330c      	adds	r3, #12
 800b0aa:	881b      	ldrh	r3, [r3, #0]
 800b0ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b0ae:	89fb      	ldrh	r3, [r7, #14]
 800b0b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0b4:	d101      	bne.n	800b0ba <dec_lock+0x2e>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b0ba:	89fb      	ldrh	r3, [r7, #14]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d002      	beq.n	800b0c6 <dec_lock+0x3a>
 800b0c0:	89fb      	ldrh	r3, [r7, #14]
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b0c6:	4a0e      	ldr	r2, [pc, #56]	; (800b100 <dec_lock+0x74>)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	011b      	lsls	r3, r3, #4
 800b0cc:	4413      	add	r3, r2
 800b0ce:	330c      	adds	r3, #12
 800b0d0:	89fa      	ldrh	r2, [r7, #14]
 800b0d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b0d4:	89fb      	ldrh	r3, [r7, #14]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d105      	bne.n	800b0e6 <dec_lock+0x5a>
 800b0da:	4a09      	ldr	r2, [pc, #36]	; (800b100 <dec_lock+0x74>)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	011b      	lsls	r3, r3, #4
 800b0e0:	4413      	add	r3, r2
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	737b      	strb	r3, [r7, #13]
 800b0ea:	e001      	b.n	800b0f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b0f0:	7b7b      	ldrb	r3, [r7, #13]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3714      	adds	r7, #20
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	20000e4c 	.word	0x20000e4c

0800b104 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b10c:	2300      	movs	r3, #0
 800b10e:	60fb      	str	r3, [r7, #12]
 800b110:	e010      	b.n	800b134 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b112:	4a0d      	ldr	r2, [pc, #52]	; (800b148 <clear_lock+0x44>)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	011b      	lsls	r3, r3, #4
 800b118:	4413      	add	r3, r2
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d105      	bne.n	800b12e <clear_lock+0x2a>
 800b122:	4a09      	ldr	r2, [pc, #36]	; (800b148 <clear_lock+0x44>)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	011b      	lsls	r3, r3, #4
 800b128:	4413      	add	r3, r2
 800b12a:	2200      	movs	r2, #0
 800b12c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3301      	adds	r3, #1
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2b01      	cmp	r3, #1
 800b138:	d9eb      	bls.n	800b112 <clear_lock+0xe>
	}
}
 800b13a:	bf00      	nop
 800b13c:	bf00      	nop
 800b13e:	3714      	adds	r7, #20
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	20000e4c 	.word	0x20000e4c

0800b14c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b086      	sub	sp, #24
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	78db      	ldrb	r3, [r3, #3]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d034      	beq.n	800b1ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b164:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	7858      	ldrb	r0, [r3, #1]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b170:	2301      	movs	r3, #1
 800b172:	697a      	ldr	r2, [r7, #20]
 800b174:	f7ff fd38 	bl	800abe8 <disk_write>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d002      	beq.n	800b184 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b17e:	2301      	movs	r3, #1
 800b180:	73fb      	strb	r3, [r7, #15]
 800b182:	e022      	b.n	800b1ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18e:	697a      	ldr	r2, [r7, #20]
 800b190:	1ad2      	subs	r2, r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	429a      	cmp	r2, r3
 800b198:	d217      	bcs.n	800b1ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	789b      	ldrb	r3, [r3, #2]
 800b19e:	613b      	str	r3, [r7, #16]
 800b1a0:	e010      	b.n	800b1c4 <sync_window+0x78>
					wsect += fs->fsize;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	7858      	ldrb	r0, [r3, #1]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	697a      	ldr	r2, [r7, #20]
 800b1ba:	f7ff fd15 	bl	800abe8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	613b      	str	r3, [r7, #16]
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d8eb      	bhi.n	800b1a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3718      	adds	r7, #24
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d01b      	beq.n	800b224 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7ff ffad 	bl	800b14c <sync_window>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d113      	bne.n	800b224 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	7858      	ldrb	r0, [r3, #1]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b206:	2301      	movs	r3, #1
 800b208:	683a      	ldr	r2, [r7, #0]
 800b20a:	f7ff fccd 	bl	800aba8 <disk_read>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d004      	beq.n	800b21e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b214:	f04f 33ff 	mov.w	r3, #4294967295
 800b218:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	683a      	ldr	r2, [r7, #0]
 800b222:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800b224:	7bfb      	ldrb	r3, [r7, #15]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
	...

0800b230 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f7ff ff87 	bl	800b14c <sync_window>
 800b23e:	4603      	mov	r3, r0
 800b240:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b242:	7bfb      	ldrb	r3, [r7, #15]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d158      	bne.n	800b2fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	2b03      	cmp	r3, #3
 800b24e:	d148      	bne.n	800b2e2 <sync_fs+0xb2>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	791b      	ldrb	r3, [r3, #4]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d144      	bne.n	800b2e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	3334      	adds	r3, #52	; 0x34
 800b25c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b260:	2100      	movs	r1, #0
 800b262:	4618      	mov	r0, r3
 800b264:	f7ff fda9 	bl	800adba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3334      	adds	r3, #52	; 0x34
 800b26c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b270:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b274:	4618      	mov	r0, r3
 800b276:	f7ff fd38 	bl	800acea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	3334      	adds	r3, #52	; 0x34
 800b27e:	4921      	ldr	r1, [pc, #132]	; (800b304 <sync_fs+0xd4>)
 800b280:	4618      	mov	r0, r3
 800b282:	f7ff fd4d 	bl	800ad20 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	3334      	adds	r3, #52	; 0x34
 800b28a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b28e:	491e      	ldr	r1, [pc, #120]	; (800b308 <sync_fs+0xd8>)
 800b290:	4618      	mov	r0, r3
 800b292:	f7ff fd45 	bl	800ad20 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	3334      	adds	r3, #52	; 0x34
 800b29a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	4610      	mov	r0, r2
 800b2a6:	f7ff fd3b 	bl	800ad20 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	3334      	adds	r3, #52	; 0x34
 800b2ae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	f7ff fd31 	bl	800ad20 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a1b      	ldr	r3, [r3, #32]
 800b2c2:	1c5a      	adds	r2, r3, #1
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	7858      	ldrb	r0, [r3, #1]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	f7ff fc86 	bl	800abe8 <disk_write>
			fs->fsi_flag = 0;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	785b      	ldrb	r3, [r3, #1]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7ff fc9c 	bl	800ac28 <disk_ioctl>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d001      	beq.n	800b2fa <sync_fs+0xca>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	41615252 	.word	0x41615252
 800b308:	61417272 	.word	0x61417272

0800b30c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	3b02      	subs	r3, #2
 800b31a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	3b02      	subs	r3, #2
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	429a      	cmp	r2, r3
 800b326:	d301      	bcc.n	800b32c <clust2sect+0x20>
 800b328:	2300      	movs	r3, #0
 800b32a:	e008      	b.n	800b33e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	895b      	ldrh	r3, [r3, #10]
 800b330:	461a      	mov	r2, r3
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	fb03 f202 	mul.w	r2, r3, r2
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b33c:	4413      	add	r3, r2
}
 800b33e:	4618      	mov	r0, r3
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr

0800b34a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b086      	sub	sp, #24
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
 800b352:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d904      	bls.n	800b36a <get_fat+0x20>
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	683a      	ldr	r2, [r7, #0]
 800b366:	429a      	cmp	r2, r3
 800b368:	d302      	bcc.n	800b370 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b36a:	2301      	movs	r3, #1
 800b36c:	617b      	str	r3, [r7, #20]
 800b36e:	e08f      	b.n	800b490 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b370:	f04f 33ff 	mov.w	r3, #4294967295
 800b374:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	2b03      	cmp	r3, #3
 800b37c:	d062      	beq.n	800b444 <get_fat+0xfa>
 800b37e:	2b03      	cmp	r3, #3
 800b380:	dc7c      	bgt.n	800b47c <get_fat+0x132>
 800b382:	2b01      	cmp	r3, #1
 800b384:	d002      	beq.n	800b38c <get_fat+0x42>
 800b386:	2b02      	cmp	r3, #2
 800b388:	d042      	beq.n	800b410 <get_fat+0xc6>
 800b38a:	e077      	b.n	800b47c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	60fb      	str	r3, [r7, #12]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	085b      	lsrs	r3, r3, #1
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	4413      	add	r3, r2
 800b398:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	0a5b      	lsrs	r3, r3, #9
 800b3a2:	4413      	add	r3, r2
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	6938      	ldr	r0, [r7, #16]
 800b3a8:	f7ff ff14 	bl	800b1d4 <move_window>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d167      	bne.n	800b482 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	1c5a      	adds	r2, r3, #1
 800b3b6:	60fa      	str	r2, [r7, #12]
 800b3b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	0a5b      	lsrs	r3, r3, #9
 800b3ce:	4413      	add	r3, r2
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	6938      	ldr	r0, [r7, #16]
 800b3d4:	f7ff fefe 	bl	800b1d4 <move_window>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d153      	bne.n	800b486 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3ec:	021b      	lsls	r3, r3, #8
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	f003 0301 	and.w	r3, r3, #1
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d002      	beq.n	800b406 <get_fat+0xbc>
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	091b      	lsrs	r3, r3, #4
 800b404:	e002      	b.n	800b40c <get_fat+0xc2>
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b40c:	617b      	str	r3, [r7, #20]
			break;
 800b40e:	e03f      	b.n	800b490 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	0a1b      	lsrs	r3, r3, #8
 800b418:	4413      	add	r3, r2
 800b41a:	4619      	mov	r1, r3
 800b41c:	6938      	ldr	r0, [r7, #16]
 800b41e:	f7ff fed9 	bl	800b1d4 <move_window>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d130      	bne.n	800b48a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	005b      	lsls	r3, r3, #1
 800b432:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b436:	4413      	add	r3, r2
 800b438:	4618      	mov	r0, r3
 800b43a:	f7ff fc1b 	bl	800ac74 <ld_word>
 800b43e:	4603      	mov	r3, r0
 800b440:	617b      	str	r3, [r7, #20]
			break;
 800b442:	e025      	b.n	800b490 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	09db      	lsrs	r3, r3, #7
 800b44c:	4413      	add	r3, r2
 800b44e:	4619      	mov	r1, r3
 800b450:	6938      	ldr	r0, [r7, #16]
 800b452:	f7ff febf 	bl	800b1d4 <move_window>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d118      	bne.n	800b48e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b46a:	4413      	add	r3, r2
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7ff fc19 	bl	800aca4 <ld_dword>
 800b472:	4603      	mov	r3, r0
 800b474:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b478:	617b      	str	r3, [r7, #20]
			break;
 800b47a:	e009      	b.n	800b490 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b47c:	2301      	movs	r3, #1
 800b47e:	617b      	str	r3, [r7, #20]
 800b480:	e006      	b.n	800b490 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b482:	bf00      	nop
 800b484:	e004      	b.n	800b490 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b486:	bf00      	nop
 800b488:	e002      	b.n	800b490 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b48a:	bf00      	nop
 800b48c:	e000      	b.n	800b490 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b48e:	bf00      	nop
		}
	}

	return val;
 800b490:	697b      	ldr	r3, [r7, #20]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3718      	adds	r7, #24
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b49a:	b590      	push	{r4, r7, lr}
 800b49c:	b089      	sub	sp, #36	; 0x24
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	60f8      	str	r0, [r7, #12]
 800b4a2:	60b9      	str	r1, [r7, #8]
 800b4a4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b4a6:	2302      	movs	r3, #2
 800b4a8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	f240 80d9 	bls.w	800b664 <put_fat+0x1ca>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	699b      	ldr	r3, [r3, #24]
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	f080 80d3 	bcs.w	800b664 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	2b03      	cmp	r3, #3
 800b4c4:	f000 8096 	beq.w	800b5f4 <put_fat+0x15a>
 800b4c8:	2b03      	cmp	r3, #3
 800b4ca:	f300 80cb 	bgt.w	800b664 <put_fat+0x1ca>
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d002      	beq.n	800b4d8 <put_fat+0x3e>
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	d06e      	beq.n	800b5b4 <put_fat+0x11a>
 800b4d6:	e0c5      	b.n	800b664 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	61bb      	str	r3, [r7, #24]
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	085b      	lsrs	r3, r3, #1
 800b4e0:	69ba      	ldr	r2, [r7, #24]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	0a5b      	lsrs	r3, r3, #9
 800b4ee:	4413      	add	r3, r2
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	68f8      	ldr	r0, [r7, #12]
 800b4f4:	f7ff fe6e 	bl	800b1d4 <move_window>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4fc:	7ffb      	ldrb	r3, [r7, #31]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f040 80a9 	bne.w	800b656 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b50a:	69bb      	ldr	r3, [r7, #24]
 800b50c:	1c59      	adds	r1, r3, #1
 800b50e:	61b9      	str	r1, [r7, #24]
 800b510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b514:	4413      	add	r3, r2
 800b516:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	f003 0301 	and.w	r3, r3, #1
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d00d      	beq.n	800b53e <put_fat+0xa4>
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	b25b      	sxtb	r3, r3
 800b528:	f003 030f 	and.w	r3, r3, #15
 800b52c:	b25a      	sxtb	r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	b2db      	uxtb	r3, r3
 800b532:	011b      	lsls	r3, r3, #4
 800b534:	b25b      	sxtb	r3, r3
 800b536:	4313      	orrs	r3, r2
 800b538:	b25b      	sxtb	r3, r3
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	e001      	b.n	800b542 <put_fat+0xa8>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	b2db      	uxtb	r3, r3
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2201      	movs	r2, #1
 800b54a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	0a5b      	lsrs	r3, r3, #9
 800b554:	4413      	add	r3, r2
 800b556:	4619      	mov	r1, r3
 800b558:	68f8      	ldr	r0, [r7, #12]
 800b55a:	f7ff fe3b 	bl	800b1d4 <move_window>
 800b55e:	4603      	mov	r3, r0
 800b560:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b562:	7ffb      	ldrb	r3, [r7, #31]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d178      	bne.n	800b65a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b574:	4413      	add	r3, r2
 800b576:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	f003 0301 	and.w	r3, r3, #1
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d003      	beq.n	800b58a <put_fat+0xf0>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	091b      	lsrs	r3, r3, #4
 800b586:	b2db      	uxtb	r3, r3
 800b588:	e00e      	b.n	800b5a8 <put_fat+0x10e>
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	b25b      	sxtb	r3, r3
 800b590:	f023 030f 	bic.w	r3, r3, #15
 800b594:	b25a      	sxtb	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	0a1b      	lsrs	r3, r3, #8
 800b59a:	b25b      	sxtb	r3, r3
 800b59c:	f003 030f 	and.w	r3, r3, #15
 800b5a0:	b25b      	sxtb	r3, r3
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	b25b      	sxtb	r3, r3
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	697a      	ldr	r2, [r7, #20]
 800b5aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	70da      	strb	r2, [r3, #3]
			break;
 800b5b2:	e057      	b.n	800b664 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	0a1b      	lsrs	r3, r3, #8
 800b5bc:	4413      	add	r3, r2
 800b5be:	4619      	mov	r1, r3
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f7ff fe07 	bl	800b1d4 <move_window>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5ca:	7ffb      	ldrb	r3, [r7, #31]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d146      	bne.n	800b65e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	005b      	lsls	r3, r3, #1
 800b5da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b5de:	4413      	add	r3, r2
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	b292      	uxth	r2, r2
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7ff fb7f 	bl	800acea <st_word>
			fs->wflag = 1;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	70da      	strb	r2, [r3, #3]
			break;
 800b5f2:	e037      	b.n	800b664 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	09db      	lsrs	r3, r3, #7
 800b5fc:	4413      	add	r3, r2
 800b5fe:	4619      	mov	r1, r3
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	f7ff fde7 	bl	800b1d4 <move_window>
 800b606:	4603      	mov	r3, r0
 800b608:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b60a:	7ffb      	ldrb	r3, [r7, #31]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d128      	bne.n	800b662 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b624:	4413      	add	r3, r2
 800b626:	4618      	mov	r0, r3
 800b628:	f7ff fb3c 	bl	800aca4 <ld_dword>
 800b62c:	4603      	mov	r3, r0
 800b62e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b632:	4323      	orrs	r3, r4
 800b634:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b644:	4413      	add	r3, r2
 800b646:	6879      	ldr	r1, [r7, #4]
 800b648:	4618      	mov	r0, r3
 800b64a:	f7ff fb69 	bl	800ad20 <st_dword>
			fs->wflag = 1;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2201      	movs	r2, #1
 800b652:	70da      	strb	r2, [r3, #3]
			break;
 800b654:	e006      	b.n	800b664 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b656:	bf00      	nop
 800b658:	e004      	b.n	800b664 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b65a:	bf00      	nop
 800b65c:	e002      	b.n	800b664 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b65e:	bf00      	nop
 800b660:	e000      	b.n	800b664 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b662:	bf00      	nop
		}
	}
	return res;
 800b664:	7ffb      	ldrb	r3, [r7, #31]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3724      	adds	r7, #36	; 0x24
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd90      	pop	{r4, r7, pc}

0800b66e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b088      	sub	sp, #32
 800b672:	af00      	add	r7, sp, #0
 800b674:	60f8      	str	r0, [r7, #12]
 800b676:	60b9      	str	r1, [r7, #8]
 800b678:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b67a:	2300      	movs	r3, #0
 800b67c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	2b01      	cmp	r3, #1
 800b688:	d904      	bls.n	800b694 <remove_chain+0x26>
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	699b      	ldr	r3, [r3, #24]
 800b68e:	68ba      	ldr	r2, [r7, #8]
 800b690:	429a      	cmp	r2, r3
 800b692:	d301      	bcc.n	800b698 <remove_chain+0x2a>
 800b694:	2302      	movs	r3, #2
 800b696:	e04b      	b.n	800b730 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00c      	beq.n	800b6b8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b69e:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a2:	6879      	ldr	r1, [r7, #4]
 800b6a4:	69b8      	ldr	r0, [r7, #24]
 800b6a6:	f7ff fef8 	bl	800b49a <put_fat>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b6ae:	7ffb      	ldrb	r3, [r7, #31]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d001      	beq.n	800b6b8 <remove_chain+0x4a>
 800b6b4:	7ffb      	ldrb	r3, [r7, #31]
 800b6b6:	e03b      	b.n	800b730 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b6b8:	68b9      	ldr	r1, [r7, #8]
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f7ff fe45 	bl	800b34a <get_fat>
 800b6c0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d031      	beq.n	800b72c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d101      	bne.n	800b6d2 <remove_chain+0x64>
 800b6ce:	2302      	movs	r3, #2
 800b6d0:	e02e      	b.n	800b730 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d8:	d101      	bne.n	800b6de <remove_chain+0x70>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e028      	b.n	800b730 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b6de:	2200      	movs	r2, #0
 800b6e0:	68b9      	ldr	r1, [r7, #8]
 800b6e2:	69b8      	ldr	r0, [r7, #24]
 800b6e4:	f7ff fed9 	bl	800b49a <put_fat>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b6ec:	7ffb      	ldrb	r3, [r7, #31]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d001      	beq.n	800b6f6 <remove_chain+0x88>
 800b6f2:	7ffb      	ldrb	r3, [r7, #31]
 800b6f4:	e01c      	b.n	800b730 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	695a      	ldr	r2, [r3, #20]
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	699b      	ldr	r3, [r3, #24]
 800b6fe:	3b02      	subs	r3, #2
 800b700:	429a      	cmp	r2, r3
 800b702:	d20b      	bcs.n	800b71c <remove_chain+0xae>
			fs->free_clst++;
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	695b      	ldr	r3, [r3, #20]
 800b708:	1c5a      	adds	r2, r3, #1
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	791b      	ldrb	r3, [r3, #4]
 800b712:	f043 0301 	orr.w	r3, r3, #1
 800b716:	b2da      	uxtb	r2, r3
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	699b      	ldr	r3, [r3, #24]
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	429a      	cmp	r2, r3
 800b728:	d3c6      	bcc.n	800b6b8 <remove_chain+0x4a>
 800b72a:	e000      	b.n	800b72e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b72c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	3720      	adds	r7, #32
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b088      	sub	sp, #32
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d10d      	bne.n	800b76a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d004      	beq.n	800b764 <create_chain+0x2c>
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	69ba      	ldr	r2, [r7, #24]
 800b760:	429a      	cmp	r2, r3
 800b762:	d31b      	bcc.n	800b79c <create_chain+0x64>
 800b764:	2301      	movs	r3, #1
 800b766:	61bb      	str	r3, [r7, #24]
 800b768:	e018      	b.n	800b79c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7ff fdec 	bl	800b34a <get_fat>
 800b772:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2b01      	cmp	r3, #1
 800b778:	d801      	bhi.n	800b77e <create_chain+0x46>
 800b77a:	2301      	movs	r3, #1
 800b77c:	e070      	b.n	800b860 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b784:	d101      	bne.n	800b78a <create_chain+0x52>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	e06a      	b.n	800b860 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	699b      	ldr	r3, [r3, #24]
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	429a      	cmp	r2, r3
 800b792:	d201      	bcs.n	800b798 <create_chain+0x60>
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	e063      	b.n	800b860 <create_chain+0x128>
		scl = clst;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	69fa      	ldr	r2, [r7, #28]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d307      	bcc.n	800b7c0 <create_chain+0x88>
				ncl = 2;
 800b7b0:	2302      	movs	r3, #2
 800b7b2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b7b4:	69fa      	ldr	r2, [r7, #28]
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d901      	bls.n	800b7c0 <create_chain+0x88>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	e04f      	b.n	800b860 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b7c0:	69f9      	ldr	r1, [r7, #28]
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f7ff fdc1 	bl	800b34a <get_fat>
 800b7c8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00e      	beq.n	800b7ee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d003      	beq.n	800b7de <create_chain+0xa6>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7dc:	d101      	bne.n	800b7e2 <create_chain+0xaa>
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	e03e      	b.n	800b860 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b7e2:	69fa      	ldr	r2, [r7, #28]
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d1da      	bne.n	800b7a0 <create_chain+0x68>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	e038      	b.n	800b860 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b7ee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b7f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f4:	69f9      	ldr	r1, [r7, #28]
 800b7f6:	6938      	ldr	r0, [r7, #16]
 800b7f8:	f7ff fe4f 	bl	800b49a <put_fat>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b800:	7dfb      	ldrb	r3, [r7, #23]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d109      	bne.n	800b81a <create_chain+0xe2>
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d006      	beq.n	800b81a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b80c:	69fa      	ldr	r2, [r7, #28]
 800b80e:	6839      	ldr	r1, [r7, #0]
 800b810:	6938      	ldr	r0, [r7, #16]
 800b812:	f7ff fe42 	bl	800b49a <put_fat>
 800b816:	4603      	mov	r3, r0
 800b818:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b81a:	7dfb      	ldrb	r3, [r7, #23]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d116      	bne.n	800b84e <create_chain+0x116>
		fs->last_clst = ncl;
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	69fa      	ldr	r2, [r7, #28]
 800b824:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	695a      	ldr	r2, [r3, #20]
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	3b02      	subs	r3, #2
 800b830:	429a      	cmp	r2, r3
 800b832:	d804      	bhi.n	800b83e <create_chain+0x106>
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	695b      	ldr	r3, [r3, #20]
 800b838:	1e5a      	subs	r2, r3, #1
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	791b      	ldrb	r3, [r3, #4]
 800b842:	f043 0301 	orr.w	r3, r3, #1
 800b846:	b2da      	uxtb	r2, r3
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	711a      	strb	r2, [r3, #4]
 800b84c:	e007      	b.n	800b85e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b84e:	7dfb      	ldrb	r3, [r7, #23]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d102      	bne.n	800b85a <create_chain+0x122>
 800b854:	f04f 33ff 	mov.w	r3, #4294967295
 800b858:	e000      	b.n	800b85c <create_chain+0x124>
 800b85a:	2301      	movs	r3, #1
 800b85c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b85e:	69fb      	ldr	r3, [r7, #28]
}
 800b860:	4618      	mov	r0, r3
 800b862:	3720      	adds	r7, #32
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b868:	b480      	push	{r7}
 800b86a:	b087      	sub	sp, #28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87c:	3304      	adds	r3, #4
 800b87e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	0a5b      	lsrs	r3, r3, #9
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	8952      	ldrh	r2, [r2, #10]
 800b888:	fbb3 f3f2 	udiv	r3, r3, r2
 800b88c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	1d1a      	adds	r2, r3, #4
 800b892:	613a      	str	r2, [r7, #16]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d101      	bne.n	800b8a2 <clmt_clust+0x3a>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	e010      	b.n	800b8c4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d307      	bcc.n	800b8ba <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b8aa:	697a      	ldr	r2, [r7, #20]
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	1ad3      	subs	r3, r2, r3
 800b8b0:	617b      	str	r3, [r7, #20]
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b8b8:	e7e9      	b.n	800b88e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b8ba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	4413      	add	r3, r2
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	371c      	adds	r7, #28
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8e6:	d204      	bcs.n	800b8f2 <dir_sdi+0x22>
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	f003 031f 	and.w	r3, r3, #31
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d001      	beq.n	800b8f6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	e063      	b.n	800b9be <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	683a      	ldr	r2, [r7, #0]
 800b8fa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d106      	bne.n	800b916 <dir_sdi+0x46>
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	d902      	bls.n	800b916 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b914:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d10c      	bne.n	800b936 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	095b      	lsrs	r3, r3, #5
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	8912      	ldrh	r2, [r2, #8]
 800b924:	4293      	cmp	r3, r2
 800b926:	d301      	bcc.n	800b92c <dir_sdi+0x5c>
 800b928:	2302      	movs	r3, #2
 800b92a:	e048      	b.n	800b9be <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	61da      	str	r2, [r3, #28]
 800b934:	e029      	b.n	800b98a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	895b      	ldrh	r3, [r3, #10]
 800b93a:	025b      	lsls	r3, r3, #9
 800b93c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b93e:	e019      	b.n	800b974 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6979      	ldr	r1, [r7, #20]
 800b944:	4618      	mov	r0, r3
 800b946:	f7ff fd00 	bl	800b34a <get_fat>
 800b94a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b952:	d101      	bne.n	800b958 <dir_sdi+0x88>
 800b954:	2301      	movs	r3, #1
 800b956:	e032      	b.n	800b9be <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d904      	bls.n	800b968 <dir_sdi+0x98>
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	697a      	ldr	r2, [r7, #20]
 800b964:	429a      	cmp	r2, r3
 800b966:	d301      	bcc.n	800b96c <dir_sdi+0x9c>
 800b968:	2302      	movs	r3, #2
 800b96a:	e028      	b.n	800b9be <dir_sdi+0xee>
			ofs -= csz;
 800b96c:	683a      	ldr	r2, [r7, #0]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d2e1      	bcs.n	800b940 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b97c:	6979      	ldr	r1, [r7, #20]
 800b97e:	6938      	ldr	r0, [r7, #16]
 800b980:	f7ff fcc4 	bl	800b30c <clust2sect>
 800b984:	4602      	mov	r2, r0
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	69db      	ldr	r3, [r3, #28]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d101      	bne.n	800b99c <dir_sdi+0xcc>
 800b998:	2302      	movs	r3, #2
 800b99a:	e010      	b.n	800b9be <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	69da      	ldr	r2, [r3, #28]
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	0a5b      	lsrs	r3, r3, #9
 800b9a4:	441a      	add	r2, r3
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9b6:	441a      	add	r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b086      	sub	sp, #24
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
 800b9ce:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	695b      	ldr	r3, [r3, #20]
 800b9da:	3320      	adds	r3, #32
 800b9dc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	69db      	ldr	r3, [r3, #28]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d003      	beq.n	800b9ee <dir_next+0x28>
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9ec:	d301      	bcc.n	800b9f2 <dir_next+0x2c>
 800b9ee:	2304      	movs	r3, #4
 800b9f0:	e0aa      	b.n	800bb48 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f040 8098 	bne.w	800bb2e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	69db      	ldr	r3, [r3, #28]
 800ba02:	1c5a      	adds	r2, r3, #1
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	699b      	ldr	r3, [r3, #24]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10b      	bne.n	800ba28 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	095b      	lsrs	r3, r3, #5
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	8912      	ldrh	r2, [r2, #8]
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	f0c0 8088 	bcc.w	800bb2e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2200      	movs	r2, #0
 800ba22:	61da      	str	r2, [r3, #28]
 800ba24:	2304      	movs	r3, #4
 800ba26:	e08f      	b.n	800bb48 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	0a5b      	lsrs	r3, r3, #9
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	8952      	ldrh	r2, [r2, #10]
 800ba30:	3a01      	subs	r2, #1
 800ba32:	4013      	ands	r3, r2
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d17a      	bne.n	800bb2e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	699b      	ldr	r3, [r3, #24]
 800ba3e:	4619      	mov	r1, r3
 800ba40:	4610      	mov	r0, r2
 800ba42:	f7ff fc82 	bl	800b34a <get_fat>
 800ba46:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d801      	bhi.n	800ba52 <dir_next+0x8c>
 800ba4e:	2302      	movs	r3, #2
 800ba50:	e07a      	b.n	800bb48 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba58:	d101      	bne.n	800ba5e <dir_next+0x98>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e074      	b.n	800bb48 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	699b      	ldr	r3, [r3, #24]
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d358      	bcc.n	800bb1a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d104      	bne.n	800ba78 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	61da      	str	r2, [r3, #28]
 800ba74:	2304      	movs	r3, #4
 800ba76:	e067      	b.n	800bb48 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	699b      	ldr	r3, [r3, #24]
 800ba7e:	4619      	mov	r1, r3
 800ba80:	4610      	mov	r0, r2
 800ba82:	f7ff fe59 	bl	800b738 <create_chain>
 800ba86:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d101      	bne.n	800ba92 <dir_next+0xcc>
 800ba8e:	2307      	movs	r3, #7
 800ba90:	e05a      	b.n	800bb48 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d101      	bne.n	800ba9c <dir_next+0xd6>
 800ba98:	2302      	movs	r3, #2
 800ba9a:	e055      	b.n	800bb48 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa2:	d101      	bne.n	800baa8 <dir_next+0xe2>
 800baa4:	2301      	movs	r3, #1
 800baa6:	e04f      	b.n	800bb48 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f7ff fb4f 	bl	800b14c <sync_window>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <dir_next+0xf2>
 800bab4:	2301      	movs	r3, #1
 800bab6:	e047      	b.n	800bb48 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	3334      	adds	r3, #52	; 0x34
 800babc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bac0:	2100      	movs	r1, #0
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7ff f979 	bl	800adba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bac8:	2300      	movs	r3, #0
 800baca:	613b      	str	r3, [r7, #16]
 800bacc:	6979      	ldr	r1, [r7, #20]
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f7ff fc1c 	bl	800b30c <clust2sect>
 800bad4:	4602      	mov	r2, r0
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	631a      	str	r2, [r3, #48]	; 0x30
 800bada:	e012      	b.n	800bb02 <dir_next+0x13c>
						fs->wflag = 1;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2201      	movs	r2, #1
 800bae0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f7ff fb32 	bl	800b14c <sync_window>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d001      	beq.n	800baf2 <dir_next+0x12c>
 800baee:	2301      	movs	r3, #1
 800baf0:	e02a      	b.n	800bb48 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	3301      	adds	r3, #1
 800baf6:	613b      	str	r3, [r7, #16]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bafc:	1c5a      	adds	r2, r3, #1
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	631a      	str	r2, [r3, #48]	; 0x30
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	895b      	ldrh	r3, [r3, #10]
 800bb06:	461a      	mov	r2, r3
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d3e6      	bcc.n	800badc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	1ad2      	subs	r2, r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bb20:	6979      	ldr	r1, [r7, #20]
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f7ff fbf2 	bl	800b30c <clust2sect>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb40:	441a      	add	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3718      	adds	r7, #24
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b086      	sub	sp, #24
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bb60:	2100      	movs	r1, #0
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f7ff feb4 	bl	800b8d0 <dir_sdi>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb6c:	7dfb      	ldrb	r3, [r7, #23]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d12b      	bne.n	800bbca <dir_alloc+0x7a>
		n = 0;
 800bb72:	2300      	movs	r3, #0
 800bb74:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	69db      	ldr	r3, [r3, #28]
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	f7ff fb29 	bl	800b1d4 <move_window>
 800bb82:	4603      	mov	r3, r0
 800bb84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb86:	7dfb      	ldrb	r3, [r7, #23]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d11d      	bne.n	800bbc8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6a1b      	ldr	r3, [r3, #32]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	2be5      	cmp	r3, #229	; 0xe5
 800bb94:	d004      	beq.n	800bba0 <dir_alloc+0x50>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6a1b      	ldr	r3, [r3, #32]
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d107      	bne.n	800bbb0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	3301      	adds	r3, #1
 800bba4:	613b      	str	r3, [r7, #16]
 800bba6:	693a      	ldr	r2, [r7, #16]
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d102      	bne.n	800bbb4 <dir_alloc+0x64>
 800bbae:	e00c      	b.n	800bbca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bbb4:	2101      	movs	r1, #1
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f7ff ff05 	bl	800b9c6 <dir_next>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bbc0:	7dfb      	ldrb	r3, [r7, #23]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d0d7      	beq.n	800bb76 <dir_alloc+0x26>
 800bbc6:	e000      	b.n	800bbca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bbc8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bbca:	7dfb      	ldrb	r3, [r7, #23]
 800bbcc:	2b04      	cmp	r3, #4
 800bbce:	d101      	bne.n	800bbd4 <dir_alloc+0x84>
 800bbd0:	2307      	movs	r3, #7
 800bbd2:	75fb      	strb	r3, [r7, #23]
	return res;
 800bbd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3718      	adds	r7, #24
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b084      	sub	sp, #16
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
 800bbe6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	331a      	adds	r3, #26
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7ff f841 	bl	800ac74 <ld_word>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	2b03      	cmp	r3, #3
 800bbfc:	d109      	bne.n	800bc12 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	3314      	adds	r3, #20
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7ff f836 	bl	800ac74 <ld_word>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	041b      	lsls	r3, r3, #16
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bc12:	68fb      	ldr	r3, [r7, #12]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	331a      	adds	r3, #26
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	b292      	uxth	r2, r2
 800bc30:	4611      	mov	r1, r2
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7ff f859 	bl	800acea <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	2b03      	cmp	r3, #3
 800bc3e:	d109      	bne.n	800bc54 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	f103 0214 	add.w	r2, r3, #20
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	0c1b      	lsrs	r3, r3, #16
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	4610      	mov	r0, r2
 800bc50:	f7ff f84b 	bl	800acea <st_word>
	}
}
 800bc54:	bf00      	nop
 800bc56:	3710      	adds	r7, #16
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bc5c:	b590      	push	{r4, r7, lr}
 800bc5e:	b087      	sub	sp, #28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	331a      	adds	r3, #26
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7ff f802 	bl	800ac74 <ld_word>
 800bc70:	4603      	mov	r3, r0
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d001      	beq.n	800bc7a <cmp_lfn+0x1e>
 800bc76:	2300      	movs	r3, #0
 800bc78:	e059      	b.n	800bd2e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc82:	1e5a      	subs	r2, r3, #1
 800bc84:	4613      	mov	r3, r2
 800bc86:	005b      	lsls	r3, r3, #1
 800bc88:	4413      	add	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4413      	add	r3, r2
 800bc8e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bc90:	2301      	movs	r3, #1
 800bc92:	81fb      	strh	r3, [r7, #14]
 800bc94:	2300      	movs	r3, #0
 800bc96:	613b      	str	r3, [r7, #16]
 800bc98:	e033      	b.n	800bd02 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bc9a:	4a27      	ldr	r2, [pc, #156]	; (800bd38 <cmp_lfn+0xdc>)
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	4413      	add	r3, r2
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	461a      	mov	r2, r3
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	4413      	add	r3, r2
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f7fe ffe3 	bl	800ac74 <ld_word>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bcb2:	89fb      	ldrh	r3, [r7, #14]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d01a      	beq.n	800bcee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	2bfe      	cmp	r3, #254	; 0xfe
 800bcbc:	d812      	bhi.n	800bce4 <cmp_lfn+0x88>
 800bcbe:	89bb      	ldrh	r3, [r7, #12]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f002 fea1 	bl	800ea08 <ff_wtoupper>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	461c      	mov	r4, r3
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	1c5a      	adds	r2, r3, #1
 800bcce:	617a      	str	r2, [r7, #20]
 800bcd0:	005b      	lsls	r3, r3, #1
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f002 fe95 	bl	800ea08 <ff_wtoupper>
 800bcde:	4603      	mov	r3, r0
 800bce0:	429c      	cmp	r4, r3
 800bce2:	d001      	beq.n	800bce8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bce4:	2300      	movs	r3, #0
 800bce6:	e022      	b.n	800bd2e <cmp_lfn+0xd2>
			}
			wc = uc;
 800bce8:	89bb      	ldrh	r3, [r7, #12]
 800bcea:	81fb      	strh	r3, [r7, #14]
 800bcec:	e006      	b.n	800bcfc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bcee:	89bb      	ldrh	r3, [r7, #12]
 800bcf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d001      	beq.n	800bcfc <cmp_lfn+0xa0>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	e018      	b.n	800bd2e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	613b      	str	r3, [r7, #16]
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	2b0c      	cmp	r3, #12
 800bd06:	d9c8      	bls.n	800bc9a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00b      	beq.n	800bd2c <cmp_lfn+0xd0>
 800bd14:	89fb      	ldrh	r3, [r7, #14]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d008      	beq.n	800bd2c <cmp_lfn+0xd0>
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	005b      	lsls	r3, r3, #1
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	4413      	add	r3, r2
 800bd22:	881b      	ldrh	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d001      	beq.n	800bd2c <cmp_lfn+0xd0>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	e000      	b.n	800bd2e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bd2c:	2301      	movs	r3, #1
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	371c      	adds	r7, #28
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd90      	pop	{r4, r7, pc}
 800bd36:	bf00      	nop
 800bd38:	08014f2c 	.word	0x08014f2c

0800bd3c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b086      	sub	sp, #24
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	331a      	adds	r3, #26
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7fe ff92 	bl	800ac74 <ld_word>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d001      	beq.n	800bd5a <pick_lfn+0x1e>
 800bd56:	2300      	movs	r3, #0
 800bd58:	e04d      	b.n	800bdf6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd62:	1e5a      	subs	r2, r3, #1
 800bd64:	4613      	mov	r3, r2
 800bd66:	005b      	lsls	r3, r3, #1
 800bd68:	4413      	add	r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	4413      	add	r3, r2
 800bd6e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bd70:	2301      	movs	r3, #1
 800bd72:	81fb      	strh	r3, [r7, #14]
 800bd74:	2300      	movs	r3, #0
 800bd76:	613b      	str	r3, [r7, #16]
 800bd78:	e028      	b.n	800bdcc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bd7a:	4a21      	ldr	r2, [pc, #132]	; (800be00 <pick_lfn+0xc4>)
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	4413      	add	r3, r2
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	461a      	mov	r2, r3
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	4413      	add	r3, r2
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7fe ff73 	bl	800ac74 <ld_word>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bd92:	89fb      	ldrh	r3, [r7, #14]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00f      	beq.n	800bdb8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	2bfe      	cmp	r3, #254	; 0xfe
 800bd9c:	d901      	bls.n	800bda2 <pick_lfn+0x66>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	e029      	b.n	800bdf6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bda2:	89bb      	ldrh	r3, [r7, #12]
 800bda4:	81fb      	strh	r3, [r7, #14]
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	1c5a      	adds	r2, r3, #1
 800bdaa:	617a      	str	r2, [r7, #20]
 800bdac:	005b      	lsls	r3, r3, #1
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	89fa      	ldrh	r2, [r7, #14]
 800bdb4:	801a      	strh	r2, [r3, #0]
 800bdb6:	e006      	b.n	800bdc6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bdb8:	89bb      	ldrh	r3, [r7, #12]
 800bdba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d001      	beq.n	800bdc6 <pick_lfn+0x8a>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	e017      	b.n	800bdf6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	613b      	str	r3, [r7, #16]
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	2b0c      	cmp	r3, #12
 800bdd0:	d9d3      	bls.n	800bd7a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d00a      	beq.n	800bdf4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	2bfe      	cmp	r3, #254	; 0xfe
 800bde2:	d901      	bls.n	800bde8 <pick_lfn+0xac>
 800bde4:	2300      	movs	r3, #0
 800bde6:	e006      	b.n	800bdf6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	005b      	lsls	r3, r3, #1
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	4413      	add	r3, r2
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800bdf4:	2301      	movs	r3, #1
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3718      	adds	r7, #24
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	08014f2c 	.word	0x08014f2c

0800be04 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b088      	sub	sp, #32
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	4611      	mov	r1, r2
 800be10:	461a      	mov	r2, r3
 800be12:	460b      	mov	r3, r1
 800be14:	71fb      	strb	r3, [r7, #7]
 800be16:	4613      	mov	r3, r2
 800be18:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	330d      	adds	r3, #13
 800be1e:	79ba      	ldrb	r2, [r7, #6]
 800be20:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	330b      	adds	r3, #11
 800be26:	220f      	movs	r2, #15
 800be28:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	330c      	adds	r3, #12
 800be2e:	2200      	movs	r2, #0
 800be30:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	331a      	adds	r3, #26
 800be36:	2100      	movs	r1, #0
 800be38:	4618      	mov	r0, r3
 800be3a:	f7fe ff56 	bl	800acea <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800be3e:	79fb      	ldrb	r3, [r7, #7]
 800be40:	1e5a      	subs	r2, r3, #1
 800be42:	4613      	mov	r3, r2
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	4413      	add	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	4413      	add	r3, r2
 800be4c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800be4e:	2300      	movs	r3, #0
 800be50:	82fb      	strh	r3, [r7, #22]
 800be52:	2300      	movs	r3, #0
 800be54:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800be56:	8afb      	ldrh	r3, [r7, #22]
 800be58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d007      	beq.n	800be70 <put_lfn+0x6c>
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	1c5a      	adds	r2, r3, #1
 800be64:	61fa      	str	r2, [r7, #28]
 800be66:	005b      	lsls	r3, r3, #1
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	4413      	add	r3, r2
 800be6c:	881b      	ldrh	r3, [r3, #0]
 800be6e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800be70:	4a17      	ldr	r2, [pc, #92]	; (800bed0 <put_lfn+0xcc>)
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	4413      	add	r3, r2
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	461a      	mov	r2, r3
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	4413      	add	r3, r2
 800be7e:	8afa      	ldrh	r2, [r7, #22]
 800be80:	4611      	mov	r1, r2
 800be82:	4618      	mov	r0, r3
 800be84:	f7fe ff31 	bl	800acea <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800be88:	8afb      	ldrh	r3, [r7, #22]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d102      	bne.n	800be94 <put_lfn+0x90>
 800be8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be92:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800be94:	69bb      	ldr	r3, [r7, #24]
 800be96:	3301      	adds	r3, #1
 800be98:	61bb      	str	r3, [r7, #24]
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	2b0c      	cmp	r3, #12
 800be9e:	d9da      	bls.n	800be56 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bea0:	8afb      	ldrh	r3, [r7, #22]
 800bea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d006      	beq.n	800beb8 <put_lfn+0xb4>
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	005b      	lsls	r3, r3, #1
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	4413      	add	r3, r2
 800beb2:	881b      	ldrh	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d103      	bne.n	800bec0 <put_lfn+0xbc>
 800beb8:	79fb      	ldrb	r3, [r7, #7]
 800beba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bebe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	79fa      	ldrb	r2, [r7, #7]
 800bec4:	701a      	strb	r2, [r3, #0]
}
 800bec6:	bf00      	nop
 800bec8:	3720      	adds	r7, #32
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	08014f2c 	.word	0x08014f2c

0800bed4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b08c      	sub	sp, #48	; 0x30
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	607a      	str	r2, [r7, #4]
 800bee0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bee2:	220b      	movs	r2, #11
 800bee4:	68b9      	ldr	r1, [r7, #8]
 800bee6:	68f8      	ldr	r0, [r7, #12]
 800bee8:	f7fe ff46 	bl	800ad78 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	2b05      	cmp	r3, #5
 800bef0:	d92b      	bls.n	800bf4a <gen_numname+0x76>
		sr = seq;
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bef6:	e022      	b.n	800bf3e <gen_numname+0x6a>
			wc = *lfn++;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	1c9a      	adds	r2, r3, #2
 800befc:	607a      	str	r2, [r7, #4]
 800befe:	881b      	ldrh	r3, [r3, #0]
 800bf00:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bf02:	2300      	movs	r3, #0
 800bf04:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf06:	e017      	b.n	800bf38 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	005a      	lsls	r2, r3, #1
 800bf0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf0e:	f003 0301 	and.w	r3, r3, #1
 800bf12:	4413      	add	r3, r2
 800bf14:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bf16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf18:	085b      	lsrs	r3, r3, #1
 800bf1a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d005      	beq.n	800bf32 <gen_numname+0x5e>
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bf2c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bf30:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf34:	3301      	adds	r3, #1
 800bf36:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3a:	2b0f      	cmp	r3, #15
 800bf3c:	d9e4      	bls.n	800bf08 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	881b      	ldrh	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1d8      	bne.n	800bef8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bf4a:	2307      	movs	r3, #7
 800bf4c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	f003 030f 	and.w	r3, r3, #15
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	3330      	adds	r3, #48	; 0x30
 800bf5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bf5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf62:	2b39      	cmp	r3, #57	; 0x39
 800bf64:	d904      	bls.n	800bf70 <gen_numname+0x9c>
 800bf66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf6a:	3307      	adds	r3, #7
 800bf6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf72:	1e5a      	subs	r2, r3, #1
 800bf74:	62ba      	str	r2, [r7, #40]	; 0x28
 800bf76:	3330      	adds	r3, #48	; 0x30
 800bf78:	443b      	add	r3, r7
 800bf7a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bf7e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	091b      	lsrs	r3, r3, #4
 800bf86:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1df      	bne.n	800bf4e <gen_numname+0x7a>
	ns[i] = '~';
 800bf8e:	f107 0214 	add.w	r2, r7, #20
 800bf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf94:	4413      	add	r3, r2
 800bf96:	227e      	movs	r2, #126	; 0x7e
 800bf98:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	627b      	str	r3, [r7, #36]	; 0x24
 800bf9e:	e002      	b.n	800bfa6 <gen_numname+0xd2>
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	627b      	str	r3, [r7, #36]	; 0x24
 800bfa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d205      	bcs.n	800bfba <gen_numname+0xe6>
 800bfae:	68fa      	ldr	r2, [r7, #12]
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb2:	4413      	add	r3, r2
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	2b20      	cmp	r3, #32
 800bfb8:	d1f2      	bne.n	800bfa0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbc:	2b07      	cmp	r3, #7
 800bfbe:	d807      	bhi.n	800bfd0 <gen_numname+0xfc>
 800bfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc2:	1c5a      	adds	r2, r3, #1
 800bfc4:	62ba      	str	r2, [r7, #40]	; 0x28
 800bfc6:	3330      	adds	r3, #48	; 0x30
 800bfc8:	443b      	add	r3, r7
 800bfca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bfce:	e000      	b.n	800bfd2 <gen_numname+0xfe>
 800bfd0:	2120      	movs	r1, #32
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd4:	1c5a      	adds	r2, r3, #1
 800bfd6:	627a      	str	r2, [r7, #36]	; 0x24
 800bfd8:	68fa      	ldr	r2, [r7, #12]
 800bfda:	4413      	add	r3, r2
 800bfdc:	460a      	mov	r2, r1
 800bfde:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe2:	2b07      	cmp	r3, #7
 800bfe4:	d9e9      	bls.n	800bfba <gen_numname+0xe6>
}
 800bfe6:	bf00      	nop
 800bfe8:	bf00      	nop
 800bfea:	3730      	adds	r7, #48	; 0x30
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bff8:	2300      	movs	r3, #0
 800bffa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bffc:	230b      	movs	r3, #11
 800bffe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c000:	7bfb      	ldrb	r3, [r7, #15]
 800c002:	b2da      	uxtb	r2, r3
 800c004:	0852      	lsrs	r2, r2, #1
 800c006:	01db      	lsls	r3, r3, #7
 800c008:	4313      	orrs	r3, r2
 800c00a:	b2da      	uxtb	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	1c59      	adds	r1, r3, #1
 800c010:	6079      	str	r1, [r7, #4]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	4413      	add	r3, r2
 800c016:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	3b01      	subs	r3, #1
 800c01c:	60bb      	str	r3, [r7, #8]
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d1ed      	bne.n	800c000 <sum_sfn+0x10>
	return sum;
 800c024:	7bfb      	ldrb	r3, [r7, #15]
}
 800c026:	4618      	mov	r0, r3
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b086      	sub	sp, #24
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c03c:	2304      	movs	r3, #4
 800c03e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c046:	23ff      	movs	r3, #255	; 0xff
 800c048:	757b      	strb	r3, [r7, #21]
 800c04a:	23ff      	movs	r3, #255	; 0xff
 800c04c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c04e:	e081      	b.n	800c154 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	69db      	ldr	r3, [r3, #28]
 800c054:	4619      	mov	r1, r3
 800c056:	6938      	ldr	r0, [r7, #16]
 800c058:	f7ff f8bc 	bl	800b1d4 <move_window>
 800c05c:	4603      	mov	r3, r0
 800c05e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c060:	7dfb      	ldrb	r3, [r7, #23]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d17c      	bne.n	800c160 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a1b      	ldr	r3, [r3, #32]
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c06e:	7dbb      	ldrb	r3, [r7, #22]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d102      	bne.n	800c07a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c074:	2304      	movs	r3, #4
 800c076:	75fb      	strb	r3, [r7, #23]
 800c078:	e077      	b.n	800c16a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	330b      	adds	r3, #11
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c086:	73fb      	strb	r3, [r7, #15]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	7bfa      	ldrb	r2, [r7, #15]
 800c08c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c08e:	7dbb      	ldrb	r3, [r7, #22]
 800c090:	2be5      	cmp	r3, #229	; 0xe5
 800c092:	d00e      	beq.n	800c0b2 <dir_read+0x80>
 800c094:	7dbb      	ldrb	r3, [r7, #22]
 800c096:	2b2e      	cmp	r3, #46	; 0x2e
 800c098:	d00b      	beq.n	800c0b2 <dir_read+0x80>
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
 800c09c:	f023 0320 	bic.w	r3, r3, #32
 800c0a0:	2b08      	cmp	r3, #8
 800c0a2:	bf0c      	ite	eq
 800c0a4:	2301      	moveq	r3, #1
 800c0a6:	2300      	movne	r3, #0
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d002      	beq.n	800c0b8 <dir_read+0x86>
				ord = 0xFF;
 800c0b2:	23ff      	movs	r3, #255	; 0xff
 800c0b4:	757b      	strb	r3, [r7, #21]
 800c0b6:	e044      	b.n	800c142 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c0b8:	7bfb      	ldrb	r3, [r7, #15]
 800c0ba:	2b0f      	cmp	r3, #15
 800c0bc:	d12f      	bne.n	800c11e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c0be:	7dbb      	ldrb	r3, [r7, #22]
 800c0c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d00d      	beq.n	800c0e4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6a1b      	ldr	r3, [r3, #32]
 800c0cc:	7b5b      	ldrb	r3, [r3, #13]
 800c0ce:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c0d0:	7dbb      	ldrb	r3, [r7, #22]
 800c0d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0d6:	75bb      	strb	r3, [r7, #22]
 800c0d8:	7dbb      	ldrb	r3, [r7, #22]
 800c0da:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	695a      	ldr	r2, [r3, #20]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c0e4:	7dba      	ldrb	r2, [r7, #22]
 800c0e6:	7d7b      	ldrb	r3, [r7, #21]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d115      	bne.n	800c118 <dir_read+0xe6>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6a1b      	ldr	r3, [r3, #32]
 800c0f0:	330d      	adds	r3, #13
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	7d3a      	ldrb	r2, [r7, #20]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d10e      	bne.n	800c118 <dir_read+0xe6>
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	68da      	ldr	r2, [r3, #12]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6a1b      	ldr	r3, [r3, #32]
 800c102:	4619      	mov	r1, r3
 800c104:	4610      	mov	r0, r2
 800c106:	f7ff fe19 	bl	800bd3c <pick_lfn>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d003      	beq.n	800c118 <dir_read+0xe6>
 800c110:	7d7b      	ldrb	r3, [r7, #21]
 800c112:	3b01      	subs	r3, #1
 800c114:	b2db      	uxtb	r3, r3
 800c116:	e000      	b.n	800c11a <dir_read+0xe8>
 800c118:	23ff      	movs	r3, #255	; 0xff
 800c11a:	757b      	strb	r3, [r7, #21]
 800c11c:	e011      	b.n	800c142 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c11e:	7d7b      	ldrb	r3, [r7, #21]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d109      	bne.n	800c138 <dir_read+0x106>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a1b      	ldr	r3, [r3, #32]
 800c128:	4618      	mov	r0, r3
 800c12a:	f7ff ff61 	bl	800bff0 <sum_sfn>
 800c12e:	4603      	mov	r3, r0
 800c130:	461a      	mov	r2, r3
 800c132:	7d3b      	ldrb	r3, [r7, #20]
 800c134:	4293      	cmp	r3, r2
 800c136:	d015      	beq.n	800c164 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f04f 32ff 	mov.w	r2, #4294967295
 800c13e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800c140:	e010      	b.n	800c164 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c142:	2100      	movs	r1, #0
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f7ff fc3e 	bl	800b9c6 <dir_next>
 800c14a:	4603      	mov	r3, r0
 800c14c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c14e:	7dfb      	ldrb	r3, [r7, #23]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d109      	bne.n	800c168 <dir_read+0x136>
	while (dp->sect) {
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	69db      	ldr	r3, [r3, #28]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f47f af79 	bne.w	800c050 <dir_read+0x1e>
 800c15e:	e004      	b.n	800c16a <dir_read+0x138>
		if (res != FR_OK) break;
 800c160:	bf00      	nop
 800c162:	e002      	b.n	800c16a <dir_read+0x138>
					break;
 800c164:	bf00      	nop
 800c166:	e000      	b.n	800c16a <dir_read+0x138>
		if (res != FR_OK) break;
 800c168:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c16a:	7dfb      	ldrb	r3, [r7, #23]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d002      	beq.n	800c176 <dir_read+0x144>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	61da      	str	r2, [r3, #28]
	return res;
 800c176:	7dfb      	ldrb	r3, [r7, #23]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3718      	adds	r7, #24
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c18e:	2100      	movs	r1, #0
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7ff fb9d 	bl	800b8d0 <dir_sdi>
 800c196:	4603      	mov	r3, r0
 800c198:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c19a:	7dfb      	ldrb	r3, [r7, #23]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d001      	beq.n	800c1a4 <dir_find+0x24>
 800c1a0:	7dfb      	ldrb	r3, [r7, #23]
 800c1a2:	e0a9      	b.n	800c2f8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c1a4:	23ff      	movs	r3, #255	; 0xff
 800c1a6:	753b      	strb	r3, [r7, #20]
 800c1a8:	7d3b      	ldrb	r3, [r7, #20]
 800c1aa:	757b      	strb	r3, [r7, #21]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c1b2:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	69db      	ldr	r3, [r3, #28]
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	6938      	ldr	r0, [r7, #16]
 800c1bc:	f7ff f80a 	bl	800b1d4 <move_window>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c1c4:	7dfb      	ldrb	r3, [r7, #23]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f040 8090 	bne.w	800c2ec <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a1b      	ldr	r3, [r3, #32]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c1d4:	7dbb      	ldrb	r3, [r7, #22]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d102      	bne.n	800c1e0 <dir_find+0x60>
 800c1da:	2304      	movs	r3, #4
 800c1dc:	75fb      	strb	r3, [r7, #23]
 800c1de:	e08a      	b.n	800c2f6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6a1b      	ldr	r3, [r3, #32]
 800c1e4:	330b      	adds	r3, #11
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1ec:	73fb      	strb	r3, [r7, #15]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	7bfa      	ldrb	r2, [r7, #15]
 800c1f2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c1f4:	7dbb      	ldrb	r3, [r7, #22]
 800c1f6:	2be5      	cmp	r3, #229	; 0xe5
 800c1f8:	d007      	beq.n	800c20a <dir_find+0x8a>
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
 800c1fc:	f003 0308 	and.w	r3, r3, #8
 800c200:	2b00      	cmp	r3, #0
 800c202:	d009      	beq.n	800c218 <dir_find+0x98>
 800c204:	7bfb      	ldrb	r3, [r7, #15]
 800c206:	2b0f      	cmp	r3, #15
 800c208:	d006      	beq.n	800c218 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c20a:	23ff      	movs	r3, #255	; 0xff
 800c20c:	757b      	strb	r3, [r7, #21]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f04f 32ff 	mov.w	r2, #4294967295
 800c214:	631a      	str	r2, [r3, #48]	; 0x30
 800c216:	e05e      	b.n	800c2d6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c218:	7bfb      	ldrb	r3, [r7, #15]
 800c21a:	2b0f      	cmp	r3, #15
 800c21c:	d136      	bne.n	800c28c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d154      	bne.n	800c2d6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c22c:	7dbb      	ldrb	r3, [r7, #22]
 800c22e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00d      	beq.n	800c252 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a1b      	ldr	r3, [r3, #32]
 800c23a:	7b5b      	ldrb	r3, [r3, #13]
 800c23c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c23e:	7dbb      	ldrb	r3, [r7, #22]
 800c240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c244:	75bb      	strb	r3, [r7, #22]
 800c246:	7dbb      	ldrb	r3, [r7, #22]
 800c248:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	695a      	ldr	r2, [r3, #20]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c252:	7dba      	ldrb	r2, [r7, #22]
 800c254:	7d7b      	ldrb	r3, [r7, #21]
 800c256:	429a      	cmp	r2, r3
 800c258:	d115      	bne.n	800c286 <dir_find+0x106>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6a1b      	ldr	r3, [r3, #32]
 800c25e:	330d      	adds	r3, #13
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	7d3a      	ldrb	r2, [r7, #20]
 800c264:	429a      	cmp	r2, r3
 800c266:	d10e      	bne.n	800c286 <dir_find+0x106>
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	68da      	ldr	r2, [r3, #12]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6a1b      	ldr	r3, [r3, #32]
 800c270:	4619      	mov	r1, r3
 800c272:	4610      	mov	r0, r2
 800c274:	f7ff fcf2 	bl	800bc5c <cmp_lfn>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d003      	beq.n	800c286 <dir_find+0x106>
 800c27e:	7d7b      	ldrb	r3, [r7, #21]
 800c280:	3b01      	subs	r3, #1
 800c282:	b2db      	uxtb	r3, r3
 800c284:	e000      	b.n	800c288 <dir_find+0x108>
 800c286:	23ff      	movs	r3, #255	; 0xff
 800c288:	757b      	strb	r3, [r7, #21]
 800c28a:	e024      	b.n	800c2d6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c28c:	7d7b      	ldrb	r3, [r7, #21]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d109      	bne.n	800c2a6 <dir_find+0x126>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6a1b      	ldr	r3, [r3, #32]
 800c296:	4618      	mov	r0, r3
 800c298:	f7ff feaa 	bl	800bff0 <sum_sfn>
 800c29c:	4603      	mov	r3, r0
 800c29e:	461a      	mov	r2, r3
 800c2a0:	7d3b      	ldrb	r3, [r7, #20]
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d024      	beq.n	800c2f0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c2ac:	f003 0301 	and.w	r3, r3, #1
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d10a      	bne.n	800c2ca <dir_find+0x14a>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6a18      	ldr	r0, [r3, #32]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	3324      	adds	r3, #36	; 0x24
 800c2bc:	220b      	movs	r2, #11
 800c2be:	4619      	mov	r1, r3
 800c2c0:	f7fe fd96 	bl	800adf0 <mem_cmp>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d014      	beq.n	800c2f4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c2ca:	23ff      	movs	r3, #255	; 0xff
 800c2cc:	757b      	strb	r3, [r7, #21]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7ff fb74 	bl	800b9c6 <dir_next>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c2e2:	7dfb      	ldrb	r3, [r7, #23]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f43f af65 	beq.w	800c1b4 <dir_find+0x34>
 800c2ea:	e004      	b.n	800c2f6 <dir_find+0x176>
		if (res != FR_OK) break;
 800c2ec:	bf00      	nop
 800c2ee:	e002      	b.n	800c2f6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c2f0:	bf00      	nop
 800c2f2:	e000      	b.n	800c2f6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c2f4:	bf00      	nop

	return res;
 800c2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3718      	adds	r7, #24
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b08c      	sub	sp, #48	; 0x30
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c314:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d001      	beq.n	800c320 <dir_register+0x20>
 800c31c:	2306      	movs	r3, #6
 800c31e:	e0e0      	b.n	800c4e2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c320:	2300      	movs	r3, #0
 800c322:	627b      	str	r3, [r7, #36]	; 0x24
 800c324:	e002      	b.n	800c32c <dir_register+0x2c>
 800c326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c328:	3301      	adds	r3, #1
 800c32a:	627b      	str	r3, [r7, #36]	; 0x24
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	68da      	ldr	r2, [r3, #12]
 800c330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c332:	005b      	lsls	r3, r3, #1
 800c334:	4413      	add	r3, r2
 800c336:	881b      	ldrh	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d1f4      	bne.n	800c326 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c342:	f107 030c 	add.w	r3, r7, #12
 800c346:	220c      	movs	r2, #12
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fe fd15 	bl	800ad78 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c34e:	7dfb      	ldrb	r3, [r7, #23]
 800c350:	f003 0301 	and.w	r3, r3, #1
 800c354:	2b00      	cmp	r3, #0
 800c356:	d032      	beq.n	800c3be <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2240      	movs	r2, #64	; 0x40
 800c35c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c360:	2301      	movs	r3, #1
 800c362:	62bb      	str	r3, [r7, #40]	; 0x28
 800c364:	e016      	b.n	800c394 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	68da      	ldr	r2, [r3, #12]
 800c370:	f107 010c 	add.w	r1, r7, #12
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	f7ff fdad 	bl	800bed4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f7ff ff00 	bl	800c180 <dir_find>
 800c380:	4603      	mov	r3, r0
 800c382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d106      	bne.n	800c39c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c390:	3301      	adds	r3, #1
 800c392:	62bb      	str	r3, [r7, #40]	; 0x28
 800c394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c396:	2b63      	cmp	r3, #99	; 0x63
 800c398:	d9e5      	bls.n	800c366 <dir_register+0x66>
 800c39a:	e000      	b.n	800c39e <dir_register+0x9e>
			if (res != FR_OK) break;
 800c39c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a0:	2b64      	cmp	r3, #100	; 0x64
 800c3a2:	d101      	bne.n	800c3a8 <dir_register+0xa8>
 800c3a4:	2307      	movs	r3, #7
 800c3a6:	e09c      	b.n	800c4e2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c3a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3ac:	2b04      	cmp	r3, #4
 800c3ae:	d002      	beq.n	800c3b6 <dir_register+0xb6>
 800c3b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3b4:	e095      	b.n	800c4e2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c3b6:	7dfa      	ldrb	r2, [r7, #23]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c3be:	7dfb      	ldrb	r3, [r7, #23]
 800c3c0:	f003 0302 	and.w	r3, r3, #2
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d007      	beq.n	800c3d8 <dir_register+0xd8>
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ca:	330c      	adds	r3, #12
 800c3cc:	4a47      	ldr	r2, [pc, #284]	; (800c4ec <dir_register+0x1ec>)
 800c3ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c3d2:	089b      	lsrs	r3, r3, #2
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	e000      	b.n	800c3da <dir_register+0xda>
 800c3d8:	2301      	movs	r3, #1
 800c3da:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c3dc:	6a39      	ldr	r1, [r7, #32]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f7ff fbb6 	bl	800bb50 <dir_alloc>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c3ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d148      	bne.n	800c484 <dir_register+0x184>
 800c3f2:	6a3b      	ldr	r3, [r7, #32]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	623b      	str	r3, [r7, #32]
 800c3f8:	6a3b      	ldr	r3, [r7, #32]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d042      	beq.n	800c484 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	695a      	ldr	r2, [r3, #20]
 800c402:	6a3b      	ldr	r3, [r7, #32]
 800c404:	015b      	lsls	r3, r3, #5
 800c406:	1ad3      	subs	r3, r2, r3
 800c408:	4619      	mov	r1, r3
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f7ff fa60 	bl	800b8d0 <dir_sdi>
 800c410:	4603      	mov	r3, r0
 800c412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d132      	bne.n	800c484 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	3324      	adds	r3, #36	; 0x24
 800c422:	4618      	mov	r0, r3
 800c424:	f7ff fde4 	bl	800bff0 <sum_sfn>
 800c428:	4603      	mov	r3, r0
 800c42a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	69db      	ldr	r3, [r3, #28]
 800c430:	4619      	mov	r1, r3
 800c432:	69f8      	ldr	r0, [r7, #28]
 800c434:	f7fe fece 	bl	800b1d4 <move_window>
 800c438:	4603      	mov	r3, r0
 800c43a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c43e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c442:	2b00      	cmp	r3, #0
 800c444:	d11d      	bne.n	800c482 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c446:	69fb      	ldr	r3, [r7, #28]
 800c448:	68d8      	ldr	r0, [r3, #12]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6a19      	ldr	r1, [r3, #32]
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	b2da      	uxtb	r2, r3
 800c452:	7efb      	ldrb	r3, [r7, #27]
 800c454:	f7ff fcd6 	bl	800be04 <put_lfn>
				fs->wflag = 1;
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	2201      	movs	r2, #1
 800c45c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c45e:	2100      	movs	r1, #0
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f7ff fab0 	bl	800b9c6 <dir_next>
 800c466:	4603      	mov	r3, r0
 800c468:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c46c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c470:	2b00      	cmp	r3, #0
 800c472:	d107      	bne.n	800c484 <dir_register+0x184>
 800c474:	6a3b      	ldr	r3, [r7, #32]
 800c476:	3b01      	subs	r3, #1
 800c478:	623b      	str	r3, [r7, #32]
 800c47a:	6a3b      	ldr	r3, [r7, #32]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d1d5      	bne.n	800c42c <dir_register+0x12c>
 800c480:	e000      	b.n	800c484 <dir_register+0x184>
				if (res != FR_OK) break;
 800c482:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c484:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d128      	bne.n	800c4de <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	69db      	ldr	r3, [r3, #28]
 800c490:	4619      	mov	r1, r3
 800c492:	69f8      	ldr	r0, [r7, #28]
 800c494:	f7fe fe9e 	bl	800b1d4 <move_window>
 800c498:	4603      	mov	r3, r0
 800c49a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c49e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d11b      	bne.n	800c4de <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6a1b      	ldr	r3, [r3, #32]
 800c4aa:	2220      	movs	r2, #32
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7fe fc83 	bl	800adba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6a18      	ldr	r0, [r3, #32]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	3324      	adds	r3, #36	; 0x24
 800c4bc:	220b      	movs	r2, #11
 800c4be:	4619      	mov	r1, r3
 800c4c0:	f7fe fc5a 	bl	800ad78 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a1b      	ldr	r3, [r3, #32]
 800c4ce:	330c      	adds	r3, #12
 800c4d0:	f002 0218 	and.w	r2, r2, #24
 800c4d4:	b2d2      	uxtb	r2, r2
 800c4d6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c4d8:	69fb      	ldr	r3, [r7, #28]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c4de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3730      	adds	r7, #48	; 0x30
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	4ec4ec4f 	.word	0x4ec4ec4f

0800c4f0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b088      	sub	sp, #32
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	2200      	movs	r2, #0
 800c504:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	69db      	ldr	r3, [r3, #28]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f000 80c9 	beq.w	800c6a2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c518:	d032      	beq.n	800c580 <get_fileinfo+0x90>
			i = j = 0;
 800c51a:	2300      	movs	r3, #0
 800c51c:	61bb      	str	r3, [r7, #24]
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c522:	e01b      	b.n	800c55c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c524:	89fb      	ldrh	r3, [r7, #14]
 800c526:	2100      	movs	r1, #0
 800c528:	4618      	mov	r0, r3
 800c52a:	f002 fa31 	bl	800e990 <ff_convert>
 800c52e:	4603      	mov	r3, r0
 800c530:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c532:	89fb      	ldrh	r3, [r7, #14]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d102      	bne.n	800c53e <get_fileinfo+0x4e>
 800c538:	2300      	movs	r3, #0
 800c53a:	61fb      	str	r3, [r7, #28]
 800c53c:	e01a      	b.n	800c574 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	2bfe      	cmp	r3, #254	; 0xfe
 800c542:	d902      	bls.n	800c54a <get_fileinfo+0x5a>
 800c544:	2300      	movs	r3, #0
 800c546:	61fb      	str	r3, [r7, #28]
 800c548:	e014      	b.n	800c574 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	1c5a      	adds	r2, r3, #1
 800c54e:	61fa      	str	r2, [r7, #28]
 800c550:	89fa      	ldrh	r2, [r7, #14]
 800c552:	b2d1      	uxtb	r1, r2
 800c554:	683a      	ldr	r2, [r7, #0]
 800c556:	4413      	add	r3, r2
 800c558:	460a      	mov	r2, r1
 800c55a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	68da      	ldr	r2, [r3, #12]
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	1c59      	adds	r1, r3, #1
 800c564:	61b9      	str	r1, [r7, #24]
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	4413      	add	r3, r2
 800c56a:	881b      	ldrh	r3, [r3, #0]
 800c56c:	81fb      	strh	r3, [r7, #14]
 800c56e:	89fb      	ldrh	r3, [r7, #14]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d1d7      	bne.n	800c524 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c574:	683a      	ldr	r2, [r7, #0]
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	4413      	add	r3, r2
 800c57a:	3316      	adds	r3, #22
 800c57c:	2200      	movs	r2, #0
 800c57e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c580:	2300      	movs	r3, #0
 800c582:	61bb      	str	r3, [r7, #24]
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c588:	683a      	ldr	r2, [r7, #0]
 800c58a:	69fb      	ldr	r3, [r7, #28]
 800c58c:	4413      	add	r3, r2
 800c58e:	3316      	adds	r3, #22
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c594:	e04c      	b.n	800c630 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a1a      	ldr	r2, [r3, #32]
 800c59a:	69fb      	ldr	r3, [r7, #28]
 800c59c:	1c59      	adds	r1, r3, #1
 800c59e:	61f9      	str	r1, [r7, #28]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c5a6:	7dfb      	ldrb	r3, [r7, #23]
 800c5a8:	2b20      	cmp	r3, #32
 800c5aa:	d100      	bne.n	800c5ae <get_fileinfo+0xbe>
 800c5ac:	e040      	b.n	800c630 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c5ae:	7dfb      	ldrb	r3, [r7, #23]
 800c5b0:	2b05      	cmp	r3, #5
 800c5b2:	d101      	bne.n	800c5b8 <get_fileinfo+0xc8>
 800c5b4:	23e5      	movs	r3, #229	; 0xe5
 800c5b6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	2b09      	cmp	r3, #9
 800c5bc:	d10f      	bne.n	800c5de <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800c5be:	89bb      	ldrh	r3, [r7, #12]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d105      	bne.n	800c5d0 <get_fileinfo+0xe0>
 800c5c4:	683a      	ldr	r2, [r7, #0]
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	3316      	adds	r3, #22
 800c5cc:	222e      	movs	r2, #46	; 0x2e
 800c5ce:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	1c5a      	adds	r2, r3, #1
 800c5d4:	61ba      	str	r2, [r7, #24]
 800c5d6:	683a      	ldr	r2, [r7, #0]
 800c5d8:	4413      	add	r3, r2
 800c5da:	222e      	movs	r2, #46	; 0x2e
 800c5dc:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c5de:	683a      	ldr	r2, [r7, #0]
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	3309      	adds	r3, #9
 800c5e6:	7dfa      	ldrb	r2, [r7, #23]
 800c5e8:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c5ea:	89bb      	ldrh	r3, [r7, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d11c      	bne.n	800c62a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c5f0:	7dfb      	ldrb	r3, [r7, #23]
 800c5f2:	2b40      	cmp	r3, #64	; 0x40
 800c5f4:	d913      	bls.n	800c61e <get_fileinfo+0x12e>
 800c5f6:	7dfb      	ldrb	r3, [r7, #23]
 800c5f8:	2b5a      	cmp	r3, #90	; 0x5a
 800c5fa:	d810      	bhi.n	800c61e <get_fileinfo+0x12e>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6a1b      	ldr	r3, [r3, #32]
 800c600:	330c      	adds	r3, #12
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	461a      	mov	r2, r3
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	2b08      	cmp	r3, #8
 800c60a:	d901      	bls.n	800c610 <get_fileinfo+0x120>
 800c60c:	2310      	movs	r3, #16
 800c60e:	e000      	b.n	800c612 <get_fileinfo+0x122>
 800c610:	2308      	movs	r3, #8
 800c612:	4013      	ands	r3, r2
 800c614:	2b00      	cmp	r3, #0
 800c616:	d002      	beq.n	800c61e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800c618:	7dfb      	ldrb	r3, [r7, #23]
 800c61a:	3320      	adds	r3, #32
 800c61c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c61e:	683a      	ldr	r2, [r7, #0]
 800c620:	69bb      	ldr	r3, [r7, #24]
 800c622:	4413      	add	r3, r2
 800c624:	3316      	adds	r3, #22
 800c626:	7dfa      	ldrb	r2, [r7, #23]
 800c628:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c62a:	69bb      	ldr	r3, [r7, #24]
 800c62c:	3301      	adds	r3, #1
 800c62e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	2b0a      	cmp	r3, #10
 800c634:	d9af      	bls.n	800c596 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800c636:	89bb      	ldrh	r3, [r7, #12]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d10d      	bne.n	800c658 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800c63c:	683a      	ldr	r2, [r7, #0]
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	4413      	add	r3, r2
 800c642:	3316      	adds	r3, #22
 800c644:	2200      	movs	r2, #0
 800c646:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6a1b      	ldr	r3, [r3, #32]
 800c64c:	330c      	adds	r3, #12
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d101      	bne.n	800c658 <get_fileinfo+0x168>
 800c654:	2300      	movs	r3, #0
 800c656:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c658:	683a      	ldr	r2, [r7, #0]
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	4413      	add	r3, r2
 800c65e:	3309      	adds	r3, #9
 800c660:	2200      	movs	r2, #0
 800c662:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6a1b      	ldr	r3, [r3, #32]
 800c668:	7ada      	ldrb	r2, [r3, #11]
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6a1b      	ldr	r3, [r3, #32]
 800c672:	331c      	adds	r3, #28
 800c674:	4618      	mov	r0, r3
 800c676:	f7fe fb15 	bl	800aca4 <ld_dword>
 800c67a:	4602      	mov	r2, r0
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6a1b      	ldr	r3, [r3, #32]
 800c684:	3316      	adds	r3, #22
 800c686:	4618      	mov	r0, r3
 800c688:	f7fe fb0c 	bl	800aca4 <ld_dword>
 800c68c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	b29a      	uxth	r2, r3
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	80da      	strh	r2, [r3, #6]
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	0c1b      	lsrs	r3, r3, #16
 800c69a:	b29a      	uxth	r2, r3
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	809a      	strh	r2, [r3, #4]
 800c6a0:	e000      	b.n	800c6a4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c6a2:	bf00      	nop
}
 800c6a4:	3720      	adds	r7, #32
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
	...

0800c6ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b08a      	sub	sp, #40	; 0x28
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	613b      	str	r3, [r7, #16]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	60fb      	str	r3, [r7, #12]
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	617b      	str	r3, [r7, #20]
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	1c5a      	adds	r2, r3, #1
 800c6d0:	61ba      	str	r2, [r7, #24]
 800c6d2:	693a      	ldr	r2, [r7, #16]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c6da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6dc:	2b1f      	cmp	r3, #31
 800c6de:	d940      	bls.n	800c762 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c6e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6e2:	2b2f      	cmp	r3, #47	; 0x2f
 800c6e4:	d006      	beq.n	800c6f4 <create_name+0x48>
 800c6e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6e8:	2b5c      	cmp	r3, #92	; 0x5c
 800c6ea:	d110      	bne.n	800c70e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c6ec:	e002      	b.n	800c6f4 <create_name+0x48>
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	61bb      	str	r3, [r7, #24]
 800c6f4:	693a      	ldr	r2, [r7, #16]
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	2b2f      	cmp	r3, #47	; 0x2f
 800c6fe:	d0f6      	beq.n	800c6ee <create_name+0x42>
 800c700:	693a      	ldr	r2, [r7, #16]
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	4413      	add	r3, r2
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	2b5c      	cmp	r3, #92	; 0x5c
 800c70a:	d0f0      	beq.n	800c6ee <create_name+0x42>
			break;
 800c70c:	e02a      	b.n	800c764 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	2bfe      	cmp	r3, #254	; 0xfe
 800c712:	d901      	bls.n	800c718 <create_name+0x6c>
 800c714:	2306      	movs	r3, #6
 800c716:	e17d      	b.n	800ca14 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c71e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c720:	2101      	movs	r1, #1
 800c722:	4618      	mov	r0, r3
 800c724:	f002 f934 	bl	800e990 <ff_convert>
 800c728:	4603      	mov	r3, r0
 800c72a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c72c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d101      	bne.n	800c736 <create_name+0x8a>
 800c732:	2306      	movs	r3, #6
 800c734:	e16e      	b.n	800ca14 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c738:	2b7f      	cmp	r3, #127	; 0x7f
 800c73a:	d809      	bhi.n	800c750 <create_name+0xa4>
 800c73c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c73e:	4619      	mov	r1, r3
 800c740:	488d      	ldr	r0, [pc, #564]	; (800c978 <create_name+0x2cc>)
 800c742:	f7fe fb7c 	bl	800ae3e <chk_chr>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d001      	beq.n	800c750 <create_name+0xa4>
 800c74c:	2306      	movs	r3, #6
 800c74e:	e161      	b.n	800ca14 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	1c5a      	adds	r2, r3, #1
 800c754:	617a      	str	r2, [r7, #20]
 800c756:	005b      	lsls	r3, r3, #1
 800c758:	68fa      	ldr	r2, [r7, #12]
 800c75a:	4413      	add	r3, r2
 800c75c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c75e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c760:	e7b4      	b.n	800c6cc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c762:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c764:	693a      	ldr	r2, [r7, #16]
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	441a      	add	r2, r3
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c76e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c770:	2b1f      	cmp	r3, #31
 800c772:	d801      	bhi.n	800c778 <create_name+0xcc>
 800c774:	2304      	movs	r3, #4
 800c776:	e000      	b.n	800c77a <create_name+0xce>
 800c778:	2300      	movs	r3, #0
 800c77a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c77e:	e011      	b.n	800c7a4 <create_name+0xf8>
		w = lfn[di - 1];
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c786:	3b01      	subs	r3, #1
 800c788:	005b      	lsls	r3, r3, #1
 800c78a:	68fa      	ldr	r2, [r7, #12]
 800c78c:	4413      	add	r3, r2
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c794:	2b20      	cmp	r3, #32
 800c796:	d002      	beq.n	800c79e <create_name+0xf2>
 800c798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c79a:	2b2e      	cmp	r3, #46	; 0x2e
 800c79c:	d106      	bne.n	800c7ac <create_name+0x100>
		di--;
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	3b01      	subs	r3, #1
 800c7a2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1ea      	bne.n	800c780 <create_name+0xd4>
 800c7aa:	e000      	b.n	800c7ae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c7ac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	005b      	lsls	r3, r3, #1
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d101      	bne.n	800c7c4 <create_name+0x118>
 800c7c0:	2306      	movs	r3, #6
 800c7c2:	e127      	b.n	800ca14 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	3324      	adds	r3, #36	; 0x24
 800c7c8:	220b      	movs	r2, #11
 800c7ca:	2120      	movs	r1, #32
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7fe faf4 	bl	800adba <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	61bb      	str	r3, [r7, #24]
 800c7d6:	e002      	b.n	800c7de <create_name+0x132>
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	61bb      	str	r3, [r7, #24]
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	005b      	lsls	r3, r3, #1
 800c7e2:	68fa      	ldr	r2, [r7, #12]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	2b20      	cmp	r3, #32
 800c7ea:	d0f5      	beq.n	800c7d8 <create_name+0x12c>
 800c7ec:	69bb      	ldr	r3, [r7, #24]
 800c7ee:	005b      	lsls	r3, r3, #1
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	881b      	ldrh	r3, [r3, #0]
 800c7f6:	2b2e      	cmp	r3, #46	; 0x2e
 800c7f8:	d0ee      	beq.n	800c7d8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d009      	beq.n	800c814 <create_name+0x168>
 800c800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c804:	f043 0303 	orr.w	r3, r3, #3
 800c808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c80c:	e002      	b.n	800c814 <create_name+0x168>
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	3b01      	subs	r3, #1
 800c812:	617b      	str	r3, [r7, #20]
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d009      	beq.n	800c82e <create_name+0x182>
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c820:	3b01      	subs	r3, #1
 800c822:	005b      	lsls	r3, r3, #1
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	4413      	add	r3, r2
 800c828:	881b      	ldrh	r3, [r3, #0]
 800c82a:	2b2e      	cmp	r3, #46	; 0x2e
 800c82c:	d1ef      	bne.n	800c80e <create_name+0x162>

	i = b = 0; ni = 8;
 800c82e:	2300      	movs	r3, #0
 800c830:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c834:	2300      	movs	r3, #0
 800c836:	623b      	str	r3, [r7, #32]
 800c838:	2308      	movs	r3, #8
 800c83a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	1c5a      	adds	r2, r3, #1
 800c840:	61ba      	str	r2, [r7, #24]
 800c842:	005b      	lsls	r3, r3, #1
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	4413      	add	r3, r2
 800c848:	881b      	ldrh	r3, [r3, #0]
 800c84a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c84c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c84e:	2b00      	cmp	r3, #0
 800c850:	f000 8090 	beq.w	800c974 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c854:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c856:	2b20      	cmp	r3, #32
 800c858:	d006      	beq.n	800c868 <create_name+0x1bc>
 800c85a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c85c:	2b2e      	cmp	r3, #46	; 0x2e
 800c85e:	d10a      	bne.n	800c876 <create_name+0x1ca>
 800c860:	69ba      	ldr	r2, [r7, #24]
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	429a      	cmp	r2, r3
 800c866:	d006      	beq.n	800c876 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c86c:	f043 0303 	orr.w	r3, r3, #3
 800c870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c874:	e07d      	b.n	800c972 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c876:	6a3a      	ldr	r2, [r7, #32]
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d203      	bcs.n	800c886 <create_name+0x1da>
 800c87e:	69ba      	ldr	r2, [r7, #24]
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	429a      	cmp	r2, r3
 800c884:	d123      	bne.n	800c8ce <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	2b0b      	cmp	r3, #11
 800c88a:	d106      	bne.n	800c89a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c88c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c890:	f043 0303 	orr.w	r3, r3, #3
 800c894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c898:	e075      	b.n	800c986 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c89a:	69ba      	ldr	r2, [r7, #24]
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d005      	beq.n	800c8ae <create_name+0x202>
 800c8a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8a6:	f043 0303 	orr.w	r3, r3, #3
 800c8aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c8ae:	69ba      	ldr	r2, [r7, #24]
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d866      	bhi.n	800c984 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	61bb      	str	r3, [r7, #24]
 800c8ba:	2308      	movs	r3, #8
 800c8bc:	623b      	str	r3, [r7, #32]
 800c8be:	230b      	movs	r3, #11
 800c8c0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c8c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c8cc:	e051      	b.n	800c972 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c8ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8d0:	2b7f      	cmp	r3, #127	; 0x7f
 800c8d2:	d914      	bls.n	800c8fe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c8d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8d6:	2100      	movs	r1, #0
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f002 f859 	bl	800e990 <ff_convert>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c8e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d004      	beq.n	800c8f2 <create_name+0x246>
 800c8e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8ea:	3b80      	subs	r3, #128	; 0x80
 800c8ec:	4a23      	ldr	r2, [pc, #140]	; (800c97c <create_name+0x2d0>)
 800c8ee:	5cd3      	ldrb	r3, [r2, r3]
 800c8f0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c8f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8f6:	f043 0302 	orr.w	r3, r3, #2
 800c8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c8fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c900:	2b00      	cmp	r3, #0
 800c902:	d007      	beq.n	800c914 <create_name+0x268>
 800c904:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c906:	4619      	mov	r1, r3
 800c908:	481d      	ldr	r0, [pc, #116]	; (800c980 <create_name+0x2d4>)
 800c90a:	f7fe fa98 	bl	800ae3e <chk_chr>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d008      	beq.n	800c926 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c914:	235f      	movs	r3, #95	; 0x5f
 800c916:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c91c:	f043 0303 	orr.w	r3, r3, #3
 800c920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c924:	e01b      	b.n	800c95e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c928:	2b40      	cmp	r3, #64	; 0x40
 800c92a:	d909      	bls.n	800c940 <create_name+0x294>
 800c92c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c92e:	2b5a      	cmp	r3, #90	; 0x5a
 800c930:	d806      	bhi.n	800c940 <create_name+0x294>
					b |= 2;
 800c932:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c936:	f043 0302 	orr.w	r3, r3, #2
 800c93a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c93e:	e00e      	b.n	800c95e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c942:	2b60      	cmp	r3, #96	; 0x60
 800c944:	d90b      	bls.n	800c95e <create_name+0x2b2>
 800c946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c948:	2b7a      	cmp	r3, #122	; 0x7a
 800c94a:	d808      	bhi.n	800c95e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c94c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c950:	f043 0301 	orr.w	r3, r3, #1
 800c954:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c958:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c95a:	3b20      	subs	r3, #32
 800c95c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c95e:	6a3b      	ldr	r3, [r7, #32]
 800c960:	1c5a      	adds	r2, r3, #1
 800c962:	623a      	str	r2, [r7, #32]
 800c964:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c966:	b2d1      	uxtb	r1, r2
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	4413      	add	r3, r2
 800c96c:	460a      	mov	r2, r1
 800c96e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c972:	e763      	b.n	800c83c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c974:	bf00      	nop
 800c976:	e006      	b.n	800c986 <create_name+0x2da>
 800c978:	08014de4 	.word	0x08014de4
 800c97c:	08014eac 	.word	0x08014eac
 800c980:	08014df0 	.word	0x08014df0
			if (si > di) break;			/* No extension */
 800c984:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c98c:	2be5      	cmp	r3, #229	; 0xe5
 800c98e:	d103      	bne.n	800c998 <create_name+0x2ec>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2205      	movs	r2, #5
 800c994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	2b08      	cmp	r3, #8
 800c99c:	d104      	bne.n	800c9a8 <create_name+0x2fc>
 800c99e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c9a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c9ac:	f003 030c 	and.w	r3, r3, #12
 800c9b0:	2b0c      	cmp	r3, #12
 800c9b2:	d005      	beq.n	800c9c0 <create_name+0x314>
 800c9b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c9b8:	f003 0303 	and.w	r3, r3, #3
 800c9bc:	2b03      	cmp	r3, #3
 800c9be:	d105      	bne.n	800c9cc <create_name+0x320>
 800c9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9c4:	f043 0302 	orr.w	r3, r3, #2
 800c9c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c9cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9d0:	f003 0302 	and.w	r3, r3, #2
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d117      	bne.n	800ca08 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c9d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c9dc:	f003 0303 	and.w	r3, r3, #3
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d105      	bne.n	800c9f0 <create_name+0x344>
 800c9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9e8:	f043 0310 	orr.w	r3, r3, #16
 800c9ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c9f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c9f4:	f003 030c 	and.w	r3, r3, #12
 800c9f8:	2b04      	cmp	r3, #4
 800c9fa:	d105      	bne.n	800ca08 <create_name+0x35c>
 800c9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca00:	f043 0308 	orr.w	r3, r3, #8
 800ca04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ca0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ca12:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3728      	adds	r7, #40	; 0x28
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b086      	sub	sp, #24
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ca30:	e002      	b.n	800ca38 <follow_path+0x1c>
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	3301      	adds	r3, #1
 800ca36:	603b      	str	r3, [r7, #0]
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	2b2f      	cmp	r3, #47	; 0x2f
 800ca3e:	d0f8      	beq.n	800ca32 <follow_path+0x16>
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	2b5c      	cmp	r3, #92	; 0x5c
 800ca46:	d0f4      	beq.n	800ca32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	2b1f      	cmp	r3, #31
 800ca54:	d80a      	bhi.n	800ca6c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2280      	movs	r2, #128	; 0x80
 800ca5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ca5e:	2100      	movs	r1, #0
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f7fe ff35 	bl	800b8d0 <dir_sdi>
 800ca66:	4603      	mov	r3, r0
 800ca68:	75fb      	strb	r3, [r7, #23]
 800ca6a:	e043      	b.n	800caf4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ca6c:	463b      	mov	r3, r7
 800ca6e:	4619      	mov	r1, r3
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff fe1b 	bl	800c6ac <create_name>
 800ca76:	4603      	mov	r3, r0
 800ca78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ca7a:	7dfb      	ldrb	r3, [r7, #23]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d134      	bne.n	800caea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f7ff fb7d 	bl	800c180 <dir_find>
 800ca86:	4603      	mov	r3, r0
 800ca88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca90:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ca92:	7dfb      	ldrb	r3, [r7, #23]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d00a      	beq.n	800caae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ca98:	7dfb      	ldrb	r3, [r7, #23]
 800ca9a:	2b04      	cmp	r3, #4
 800ca9c:	d127      	bne.n	800caee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ca9e:	7afb      	ldrb	r3, [r7, #11]
 800caa0:	f003 0304 	and.w	r3, r3, #4
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d122      	bne.n	800caee <follow_path+0xd2>
 800caa8:	2305      	movs	r3, #5
 800caaa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800caac:	e01f      	b.n	800caee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800caae:	7afb      	ldrb	r3, [r7, #11]
 800cab0:	f003 0304 	and.w	r3, r3, #4
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d11c      	bne.n	800caf2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	799b      	ldrb	r3, [r3, #6]
 800cabc:	f003 0310 	and.w	r3, r3, #16
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d102      	bne.n	800caca <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cac4:	2305      	movs	r3, #5
 800cac6:	75fb      	strb	r3, [r7, #23]
 800cac8:	e014      	b.n	800caf4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	695b      	ldr	r3, [r3, #20]
 800cad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cad8:	4413      	add	r3, r2
 800cada:	4619      	mov	r1, r3
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f7ff f87e 	bl	800bbde <ld_clust>
 800cae2:	4602      	mov	r2, r0
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cae8:	e7c0      	b.n	800ca6c <follow_path+0x50>
			if (res != FR_OK) break;
 800caea:	bf00      	nop
 800caec:	e002      	b.n	800caf4 <follow_path+0xd8>
				break;
 800caee:	bf00      	nop
 800caf0:	e000      	b.n	800caf4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800caf2:	bf00      	nop
			}
		}
	}

	return res;
 800caf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3718      	adds	r7, #24
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cafe:	b480      	push	{r7}
 800cb00:	b087      	sub	sp, #28
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cb06:	f04f 33ff 	mov.w	r3, #4294967295
 800cb0a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d031      	beq.n	800cb78 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	617b      	str	r3, [r7, #20]
 800cb1a:	e002      	b.n	800cb22 <get_ldnumber+0x24>
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	617b      	str	r3, [r7, #20]
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	2b1f      	cmp	r3, #31
 800cb28:	d903      	bls.n	800cb32 <get_ldnumber+0x34>
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	2b3a      	cmp	r3, #58	; 0x3a
 800cb30:	d1f4      	bne.n	800cb1c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	2b3a      	cmp	r3, #58	; 0x3a
 800cb38:	d11c      	bne.n	800cb74 <get_ldnumber+0x76>
			tp = *path;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	1c5a      	adds	r2, r3, #1
 800cb44:	60fa      	str	r2, [r7, #12]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	3b30      	subs	r3, #48	; 0x30
 800cb4a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	2b09      	cmp	r3, #9
 800cb50:	d80e      	bhi.n	800cb70 <get_ldnumber+0x72>
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d10a      	bne.n	800cb70 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d807      	bhi.n	800cb70 <get_ldnumber+0x72>
					vol = (int)i;
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	3301      	adds	r3, #1
 800cb68:	617b      	str	r3, [r7, #20]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	697a      	ldr	r2, [r7, #20]
 800cb6e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	e002      	b.n	800cb7a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cb74:	2300      	movs	r3, #0
 800cb76:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cb78:	693b      	ldr	r3, [r7, #16]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	371c      	adds	r7, #28
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
	...

0800cb88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	70da      	strb	r2, [r3, #3]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb9e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cba0:	6839      	ldr	r1, [r7, #0]
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7fe fb16 	bl	800b1d4 <move_window>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d001      	beq.n	800cbb2 <check_fs+0x2a>
 800cbae:	2304      	movs	r3, #4
 800cbb0:	e038      	b.n	800cc24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	3334      	adds	r3, #52	; 0x34
 800cbb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7fe f85a 	bl	800ac74 <ld_word>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d001      	beq.n	800cbd0 <check_fs+0x48>
 800cbcc:	2303      	movs	r3, #3
 800cbce:	e029      	b.n	800cc24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbd6:	2be9      	cmp	r3, #233	; 0xe9
 800cbd8:	d009      	beq.n	800cbee <check_fs+0x66>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbe0:	2beb      	cmp	r3, #235	; 0xeb
 800cbe2:	d11e      	bne.n	800cc22 <check_fs+0x9a>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800cbea:	2b90      	cmp	r3, #144	; 0x90
 800cbec:	d119      	bne.n	800cc22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	3334      	adds	r3, #52	; 0x34
 800cbf2:	3336      	adds	r3, #54	; 0x36
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fe f855 	bl	800aca4 <ld_dword>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cc00:	4a0a      	ldr	r2, [pc, #40]	; (800cc2c <check_fs+0xa4>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d101      	bne.n	800cc0a <check_fs+0x82>
 800cc06:	2300      	movs	r3, #0
 800cc08:	e00c      	b.n	800cc24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	3334      	adds	r3, #52	; 0x34
 800cc0e:	3352      	adds	r3, #82	; 0x52
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7fe f847 	bl	800aca4 <ld_dword>
 800cc16:	4603      	mov	r3, r0
 800cc18:	4a05      	ldr	r2, [pc, #20]	; (800cc30 <check_fs+0xa8>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d101      	bne.n	800cc22 <check_fs+0x9a>
 800cc1e:	2300      	movs	r3, #0
 800cc20:	e000      	b.n	800cc24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cc22:	2302      	movs	r3, #2
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3708      	adds	r7, #8
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	00544146 	.word	0x00544146
 800cc30:	33544146 	.word	0x33544146

0800cc34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b096      	sub	sp, #88	; 0x58
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	2200      	movs	r2, #0
 800cc46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cc48:	68f8      	ldr	r0, [r7, #12]
 800cc4a:	f7ff ff58 	bl	800cafe <get_ldnumber>
 800cc4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cc50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	da01      	bge.n	800cc5a <find_volume+0x26>
 800cc56:	230b      	movs	r3, #11
 800cc58:	e22d      	b.n	800d0b6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cc5a:	4aa1      	ldr	r2, [pc, #644]	; (800cee0 <find_volume+0x2ac>)
 800cc5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d101      	bne.n	800cc6e <find_volume+0x3a>
 800cc6a:	230c      	movs	r3, #12
 800cc6c:	e223      	b.n	800d0b6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cc74:	79fb      	ldrb	r3, [r7, #7]
 800cc76:	f023 0301 	bic.w	r3, r3, #1
 800cc7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d01a      	beq.n	800ccba <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc86:	785b      	ldrb	r3, [r3, #1]
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7fd ff4d 	bl	800ab28 <disk_status>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cc94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cc98:	f003 0301 	and.w	r3, r3, #1
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d10c      	bne.n	800ccba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cca0:	79fb      	ldrb	r3, [r7, #7]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d007      	beq.n	800ccb6 <find_volume+0x82>
 800cca6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ccaa:	f003 0304 	and.w	r3, r3, #4
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d001      	beq.n	800ccb6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ccb2:	230a      	movs	r3, #10
 800ccb4:	e1ff      	b.n	800d0b6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	e1fd      	b.n	800d0b6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ccba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ccc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccc2:	b2da      	uxtb	r2, r3
 800ccc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ccc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccca:	785b      	ldrb	r3, [r3, #1]
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7fd ff45 	bl	800ab5c <disk_initialize>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ccd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ccdc:	f003 0301 	and.w	r3, r3, #1
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d001      	beq.n	800cce8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cce4:	2303      	movs	r3, #3
 800cce6:	e1e6      	b.n	800d0b6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cce8:	79fb      	ldrb	r3, [r7, #7]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d007      	beq.n	800ccfe <find_volume+0xca>
 800ccee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ccf2:	f003 0304 	and.w	r3, r3, #4
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d001      	beq.n	800ccfe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ccfa:	230a      	movs	r3, #10
 800ccfc:	e1db      	b.n	800d0b6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cd02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cd04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd06:	f7ff ff3f 	bl	800cb88 <check_fs>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cd10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d149      	bne.n	800cdac <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cd18:	2300      	movs	r3, #0
 800cd1a:	643b      	str	r3, [r7, #64]	; 0x40
 800cd1c:	e01e      	b.n	800cd5c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd20:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd26:	011b      	lsls	r3, r3, #4
 800cd28:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cd2c:	4413      	add	r3, r2
 800cd2e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd32:	3304      	adds	r3, #4
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d006      	beq.n	800cd48 <find_volume+0x114>
 800cd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3c:	3308      	adds	r3, #8
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7fd ffb0 	bl	800aca4 <ld_dword>
 800cd44:	4602      	mov	r2, r0
 800cd46:	e000      	b.n	800cd4a <find_volume+0x116>
 800cd48:	2200      	movs	r2, #0
 800cd4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	3358      	adds	r3, #88	; 0x58
 800cd50:	443b      	add	r3, r7
 800cd52:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cd56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd58:	3301      	adds	r3, #1
 800cd5a:	643b      	str	r3, [r7, #64]	; 0x40
 800cd5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd5e:	2b03      	cmp	r3, #3
 800cd60:	d9dd      	bls.n	800cd1e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cd62:	2300      	movs	r3, #0
 800cd64:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cd66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d002      	beq.n	800cd72 <find_volume+0x13e>
 800cd6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cd72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	3358      	adds	r3, #88	; 0x58
 800cd78:	443b      	add	r3, r7
 800cd7a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cd7e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cd80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d005      	beq.n	800cd92 <find_volume+0x15e>
 800cd86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cd88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd8a:	f7ff fefd 	bl	800cb88 <check_fs>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	e000      	b.n	800cd94 <find_volume+0x160>
 800cd92:	2303      	movs	r3, #3
 800cd94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cd98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d905      	bls.n	800cdac <find_volume+0x178>
 800cda0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cda2:	3301      	adds	r3, #1
 800cda4:	643b      	str	r3, [r7, #64]	; 0x40
 800cda6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cda8:	2b03      	cmp	r3, #3
 800cdaa:	d9e2      	bls.n	800cd72 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cdac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cdb0:	2b04      	cmp	r3, #4
 800cdb2:	d101      	bne.n	800cdb8 <find_volume+0x184>
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	e17e      	b.n	800d0b6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cdb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d901      	bls.n	800cdc4 <find_volume+0x190>
 800cdc0:	230d      	movs	r3, #13
 800cdc2:	e178      	b.n	800d0b6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc6:	3334      	adds	r3, #52	; 0x34
 800cdc8:	330b      	adds	r3, #11
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7fd ff52 	bl	800ac74 <ld_word>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdd6:	d001      	beq.n	800cddc <find_volume+0x1a8>
 800cdd8:	230d      	movs	r3, #13
 800cdda:	e16c      	b.n	800d0b6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdde:	3334      	adds	r3, #52	; 0x34
 800cde0:	3316      	adds	r3, #22
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7fd ff46 	bl	800ac74 <ld_word>
 800cde8:	4603      	mov	r3, r0
 800cdea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cdec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d106      	bne.n	800ce00 <find_volume+0x1cc>
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf4:	3334      	adds	r3, #52	; 0x34
 800cdf6:	3324      	adds	r3, #36	; 0x24
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7fd ff53 	bl	800aca4 <ld_dword>
 800cdfe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ce00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ce04:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ce06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce08:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ce10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce12:	789b      	ldrb	r3, [r3, #2]
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d005      	beq.n	800ce24 <find_volume+0x1f0>
 800ce18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1a:	789b      	ldrb	r3, [r3, #2]
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d001      	beq.n	800ce24 <find_volume+0x1f0>
 800ce20:	230d      	movs	r3, #13
 800ce22:	e148      	b.n	800d0b6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ce24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce26:	789b      	ldrb	r3, [r3, #2]
 800ce28:	461a      	mov	r2, r3
 800ce2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce2c:	fb02 f303 	mul.w	r3, r2, r3
 800ce30:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ce32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ce3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce40:	895b      	ldrh	r3, [r3, #10]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d008      	beq.n	800ce58 <find_volume+0x224>
 800ce46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce48:	895b      	ldrh	r3, [r3, #10]
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4e:	895b      	ldrh	r3, [r3, #10]
 800ce50:	3b01      	subs	r3, #1
 800ce52:	4013      	ands	r3, r2
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d001      	beq.n	800ce5c <find_volume+0x228>
 800ce58:	230d      	movs	r3, #13
 800ce5a:	e12c      	b.n	800d0b6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ce5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5e:	3334      	adds	r3, #52	; 0x34
 800ce60:	3311      	adds	r3, #17
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fd ff06 	bl	800ac74 <ld_word>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ce70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce72:	891b      	ldrh	r3, [r3, #8]
 800ce74:	f003 030f 	and.w	r3, r3, #15
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d001      	beq.n	800ce82 <find_volume+0x24e>
 800ce7e:	230d      	movs	r3, #13
 800ce80:	e119      	b.n	800d0b6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ce82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce84:	3334      	adds	r3, #52	; 0x34
 800ce86:	3313      	adds	r3, #19
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7fd fef3 	bl	800ac74 <ld_word>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ce92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d106      	bne.n	800cea6 <find_volume+0x272>
 800ce98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9a:	3334      	adds	r3, #52	; 0x34
 800ce9c:	3320      	adds	r3, #32
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7fd ff00 	bl	800aca4 <ld_dword>
 800cea4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea8:	3334      	adds	r3, #52	; 0x34
 800ceaa:	330e      	adds	r3, #14
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7fd fee1 	bl	800ac74 <ld_word>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ceb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d101      	bne.n	800cec0 <find_volume+0x28c>
 800cebc:	230d      	movs	r3, #13
 800cebe:	e0fa      	b.n	800d0b6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cec0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cec4:	4413      	add	r3, r2
 800cec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cec8:	8912      	ldrh	r2, [r2, #8]
 800ceca:	0912      	lsrs	r2, r2, #4
 800cecc:	b292      	uxth	r2, r2
 800cece:	4413      	add	r3, r2
 800ced0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ced2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ced4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d204      	bcs.n	800cee4 <find_volume+0x2b0>
 800ceda:	230d      	movs	r3, #13
 800cedc:	e0eb      	b.n	800d0b6 <find_volume+0x482>
 800cede:	bf00      	nop
 800cee0:	20000e40 	.word	0x20000e40
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee8:	1ad3      	subs	r3, r2, r3
 800ceea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ceec:	8952      	ldrh	r2, [r2, #10]
 800ceee:	fbb3 f3f2 	udiv	r3, r3, r2
 800cef2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d101      	bne.n	800cefe <find_volume+0x2ca>
 800cefa:	230d      	movs	r3, #13
 800cefc:	e0db      	b.n	800d0b6 <find_volume+0x482>
		fmt = FS_FAT32;
 800cefe:	2303      	movs	r3, #3
 800cf00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf06:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d802      	bhi.n	800cf14 <find_volume+0x2e0>
 800cf0e:	2302      	movs	r3, #2
 800cf10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf16:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d802      	bhi.n	800cf24 <find_volume+0x2f0>
 800cf1e:	2301      	movs	r3, #1
 800cf20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf26:	1c9a      	adds	r2, r3, #2
 800cf28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800cf2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf30:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cf32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cf34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf36:	441a      	add	r2, r3
 800cf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800cf3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf40:	441a      	add	r2, r3
 800cf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf44:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800cf46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf4a:	2b03      	cmp	r3, #3
 800cf4c:	d11e      	bne.n	800cf8c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf50:	3334      	adds	r3, #52	; 0x34
 800cf52:	332a      	adds	r3, #42	; 0x2a
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fd fe8d 	bl	800ac74 <ld_word>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d001      	beq.n	800cf64 <find_volume+0x330>
 800cf60:	230d      	movs	r3, #13
 800cf62:	e0a8      	b.n	800d0b6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf66:	891b      	ldrh	r3, [r3, #8]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d001      	beq.n	800cf70 <find_volume+0x33c>
 800cf6c:	230d      	movs	r3, #13
 800cf6e:	e0a2      	b.n	800d0b6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf72:	3334      	adds	r3, #52	; 0x34
 800cf74:	332c      	adds	r3, #44	; 0x2c
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7fd fe94 	bl	800aca4 <ld_dword>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf80:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf84:	699b      	ldr	r3, [r3, #24]
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	647b      	str	r3, [r7, #68]	; 0x44
 800cf8a:	e01f      	b.n	800cfcc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8e:	891b      	ldrh	r3, [r3, #8]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d101      	bne.n	800cf98 <find_volume+0x364>
 800cf94:	230d      	movs	r3, #13
 800cf96:	e08e      	b.n	800d0b6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf9e:	441a      	add	r2, r3
 800cfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cfa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	d103      	bne.n	800cfb4 <find_volume+0x380>
 800cfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfae:	699b      	ldr	r3, [r3, #24]
 800cfb0:	005b      	lsls	r3, r3, #1
 800cfb2:	e00a      	b.n	800cfca <find_volume+0x396>
 800cfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb6:	699a      	ldr	r2, [r3, #24]
 800cfb8:	4613      	mov	r3, r2
 800cfba:	005b      	lsls	r3, r3, #1
 800cfbc:	4413      	add	r3, r2
 800cfbe:	085a      	lsrs	r2, r3, #1
 800cfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc2:	699b      	ldr	r3, [r3, #24]
 800cfc4:	f003 0301 	and.w	r3, r3, #1
 800cfc8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cfca:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfce:	69da      	ldr	r2, [r3, #28]
 800cfd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfd2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cfd6:	0a5b      	lsrs	r3, r3, #9
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d201      	bcs.n	800cfe0 <find_volume+0x3ac>
 800cfdc:	230d      	movs	r3, #13
 800cfde:	e06a      	b.n	800d0b6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe2:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe6:	615a      	str	r2, [r3, #20]
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfea:	695a      	ldr	r2, [r3, #20]
 800cfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfee:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800cff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff2:	2280      	movs	r2, #128	; 0x80
 800cff4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cff6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cffa:	2b03      	cmp	r3, #3
 800cffc:	d149      	bne.n	800d092 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d000:	3334      	adds	r3, #52	; 0x34
 800d002:	3330      	adds	r3, #48	; 0x30
 800d004:	4618      	mov	r0, r3
 800d006:	f7fd fe35 	bl	800ac74 <ld_word>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d140      	bne.n	800d092 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d012:	3301      	adds	r3, #1
 800d014:	4619      	mov	r1, r3
 800d016:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d018:	f7fe f8dc 	bl	800b1d4 <move_window>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d137      	bne.n	800d092 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d024:	2200      	movs	r2, #0
 800d026:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02a:	3334      	adds	r3, #52	; 0x34
 800d02c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d030:	4618      	mov	r0, r3
 800d032:	f7fd fe1f 	bl	800ac74 <ld_word>
 800d036:	4603      	mov	r3, r0
 800d038:	461a      	mov	r2, r3
 800d03a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d03e:	429a      	cmp	r2, r3
 800d040:	d127      	bne.n	800d092 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d044:	3334      	adds	r3, #52	; 0x34
 800d046:	4618      	mov	r0, r3
 800d048:	f7fd fe2c 	bl	800aca4 <ld_dword>
 800d04c:	4603      	mov	r3, r0
 800d04e:	4a1c      	ldr	r2, [pc, #112]	; (800d0c0 <find_volume+0x48c>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d11e      	bne.n	800d092 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d056:	3334      	adds	r3, #52	; 0x34
 800d058:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7fd fe21 	bl	800aca4 <ld_dword>
 800d062:	4603      	mov	r3, r0
 800d064:	4a17      	ldr	r2, [pc, #92]	; (800d0c4 <find_volume+0x490>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d113      	bne.n	800d092 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06c:	3334      	adds	r3, #52	; 0x34
 800d06e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d072:	4618      	mov	r0, r3
 800d074:	f7fd fe16 	bl	800aca4 <ld_dword>
 800d078:	4602      	mov	r2, r0
 800d07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d080:	3334      	adds	r3, #52	; 0x34
 800d082:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d086:	4618      	mov	r0, r3
 800d088:	f7fd fe0c 	bl	800aca4 <ld_dword>
 800d08c:	4602      	mov	r2, r0
 800d08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d090:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d094:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d098:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d09a:	4b0b      	ldr	r3, [pc, #44]	; (800d0c8 <find_volume+0x494>)
 800d09c:	881b      	ldrh	r3, [r3, #0]
 800d09e:	3301      	adds	r3, #1
 800d0a0:	b29a      	uxth	r2, r3
 800d0a2:	4b09      	ldr	r3, [pc, #36]	; (800d0c8 <find_volume+0x494>)
 800d0a4:	801a      	strh	r2, [r3, #0]
 800d0a6:	4b08      	ldr	r3, [pc, #32]	; (800d0c8 <find_volume+0x494>)
 800d0a8:	881a      	ldrh	r2, [r3, #0]
 800d0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ac:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d0ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d0b0:	f7fe f828 	bl	800b104 <clear_lock>
#endif
	return FR_OK;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3758      	adds	r7, #88	; 0x58
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	41615252 	.word	0x41615252
 800d0c4:	61417272 	.word	0x61417272
 800d0c8:	20000e48 	.word	0x20000e48

0800d0cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d0d6:	2309      	movs	r3, #9
 800d0d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d01c      	beq.n	800d11a <validate+0x4e>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d018      	beq.n	800d11a <validate+0x4e>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d013      	beq.n	800d11a <validate+0x4e>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	889a      	ldrh	r2, [r3, #4]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	88db      	ldrh	r3, [r3, #6]
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d10c      	bne.n	800d11a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	785b      	ldrb	r3, [r3, #1]
 800d106:	4618      	mov	r0, r3
 800d108:	f7fd fd0e 	bl	800ab28 <disk_status>
 800d10c:	4603      	mov	r3, r0
 800d10e:	f003 0301 	and.w	r3, r3, #1
 800d112:	2b00      	cmp	r3, #0
 800d114:	d101      	bne.n	800d11a <validate+0x4e>
			res = FR_OK;
 800d116:	2300      	movs	r3, #0
 800d118:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d11a:	7bfb      	ldrb	r3, [r7, #15]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d102      	bne.n	800d126 <validate+0x5a>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	e000      	b.n	800d128 <validate+0x5c>
 800d126:	2300      	movs	r3, #0
 800d128:	683a      	ldr	r2, [r7, #0]
 800d12a:	6013      	str	r3, [r2, #0]
	return res;
 800d12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3710      	adds	r7, #16
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
	...

0800d138 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b088      	sub	sp, #32
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	4613      	mov	r3, r2
 800d144:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d14a:	f107 0310 	add.w	r3, r7, #16
 800d14e:	4618      	mov	r0, r3
 800d150:	f7ff fcd5 	bl	800cafe <get_ldnumber>
 800d154:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d156:	69fb      	ldr	r3, [r7, #28]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	da01      	bge.n	800d160 <f_mount+0x28>
 800d15c:	230b      	movs	r3, #11
 800d15e:	e02b      	b.n	800d1b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d160:	4a17      	ldr	r2, [pc, #92]	; (800d1c0 <f_mount+0x88>)
 800d162:	69fb      	ldr	r3, [r7, #28]
 800d164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d168:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d005      	beq.n	800d17c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d170:	69b8      	ldr	r0, [r7, #24]
 800d172:	f7fd ffc7 	bl	800b104 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	2200      	movs	r2, #0
 800d17a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d002      	beq.n	800d188 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2200      	movs	r2, #0
 800d186:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d188:	68fa      	ldr	r2, [r7, #12]
 800d18a:	490d      	ldr	r1, [pc, #52]	; (800d1c0 <f_mount+0x88>)
 800d18c:	69fb      	ldr	r3, [r7, #28]
 800d18e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d002      	beq.n	800d19e <f_mount+0x66>
 800d198:	79fb      	ldrb	r3, [r7, #7]
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d001      	beq.n	800d1a2 <f_mount+0x6a>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	e00a      	b.n	800d1b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d1a2:	f107 010c 	add.w	r1, r7, #12
 800d1a6:	f107 0308 	add.w	r3, r7, #8
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7ff fd41 	bl	800cc34 <find_volume>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d1b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3720      	adds	r7, #32
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	20000e40 	.word	0x20000e40

0800d1c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b09a      	sub	sp, #104	; 0x68
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	4613      	mov	r3, r2
 800d1d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d101      	bne.n	800d1dc <f_open+0x18>
 800d1d8:	2309      	movs	r3, #9
 800d1da:	e1bd      	b.n	800d558 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d1dc:	79fb      	ldrb	r3, [r7, #7]
 800d1de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d1e4:	79fa      	ldrb	r2, [r7, #7]
 800d1e6:	f107 0110 	add.w	r1, r7, #16
 800d1ea:	f107 0308 	add.w	r3, r7, #8
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7ff fd20 	bl	800cc34 <find_volume>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d1fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f040 81a1 	bne.w	800d546 <f_open+0x382>
		dj.obj.fs = fs;
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800d208:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d20c:	f001 fba9 	bl	800e962 <ff_memalloc>
 800d210:	65b8      	str	r0, [r7, #88]	; 0x58
 800d212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d214:	2b00      	cmp	r3, #0
 800d216:	d101      	bne.n	800d21c <f_open+0x58>
 800d218:	2311      	movs	r3, #17
 800d21a:	e19d      	b.n	800d558 <f_open+0x394>
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d220:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d222:	68ba      	ldr	r2, [r7, #8]
 800d224:	f107 0314 	add.w	r3, r7, #20
 800d228:	4611      	mov	r1, r2
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7ff fbf6 	bl	800ca1c <follow_path>
 800d230:	4603      	mov	r3, r0
 800d232:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d236:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d11a      	bne.n	800d274 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d23e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d242:	b25b      	sxtb	r3, r3
 800d244:	2b00      	cmp	r3, #0
 800d246:	da03      	bge.n	800d250 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800d248:	2306      	movs	r3, #6
 800d24a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d24e:	e011      	b.n	800d274 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d250:	79fb      	ldrb	r3, [r7, #7]
 800d252:	f023 0301 	bic.w	r3, r3, #1
 800d256:	2b00      	cmp	r3, #0
 800d258:	bf14      	ite	ne
 800d25a:	2301      	movne	r3, #1
 800d25c:	2300      	moveq	r3, #0
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	461a      	mov	r2, r3
 800d262:	f107 0314 	add.w	r3, r7, #20
 800d266:	4611      	mov	r1, r2
 800d268:	4618      	mov	r0, r3
 800d26a:	f7fd fe03 	bl	800ae74 <chk_lock>
 800d26e:	4603      	mov	r3, r0
 800d270:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d274:	79fb      	ldrb	r3, [r7, #7]
 800d276:	f003 031c 	and.w	r3, r3, #28
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d07f      	beq.n	800d37e <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 800d27e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d282:	2b00      	cmp	r3, #0
 800d284:	d017      	beq.n	800d2b6 <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d286:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d28a:	2b04      	cmp	r3, #4
 800d28c:	d10e      	bne.n	800d2ac <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d28e:	f7fd fe4d 	bl	800af2c <enq_lock>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d006      	beq.n	800d2a6 <f_open+0xe2>
 800d298:	f107 0314 	add.w	r3, r7, #20
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7ff f82f 	bl	800c300 <dir_register>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	e000      	b.n	800d2a8 <f_open+0xe4>
 800d2a6:	2312      	movs	r3, #18
 800d2a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d2ac:	79fb      	ldrb	r3, [r7, #7]
 800d2ae:	f043 0308 	orr.w	r3, r3, #8
 800d2b2:	71fb      	strb	r3, [r7, #7]
 800d2b4:	e010      	b.n	800d2d8 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d2b6:	7ebb      	ldrb	r3, [r7, #26]
 800d2b8:	f003 0311 	and.w	r3, r3, #17
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d003      	beq.n	800d2c8 <f_open+0x104>
					res = FR_DENIED;
 800d2c0:	2307      	movs	r3, #7
 800d2c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d2c6:	e007      	b.n	800d2d8 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d2c8:	79fb      	ldrb	r3, [r7, #7]
 800d2ca:	f003 0304 	and.w	r3, r3, #4
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d002      	beq.n	800d2d8 <f_open+0x114>
 800d2d2:	2308      	movs	r3, #8
 800d2d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d2d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d168      	bne.n	800d3b2 <f_open+0x1ee>
 800d2e0:	79fb      	ldrb	r3, [r7, #7]
 800d2e2:	f003 0308 	and.w	r3, r3, #8
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d063      	beq.n	800d3b2 <f_open+0x1ee>
				dw = GET_FATTIME();
 800d2ea:	f7fd fcbb 	bl	800ac64 <get_fattime>
 800d2ee:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f2:	330e      	adds	r3, #14
 800d2f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7fd fd12 	bl	800ad20 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2fe:	3316      	adds	r3, #22
 800d300:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d302:	4618      	mov	r0, r3
 800d304:	f7fd fd0c 	bl	800ad20 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d30a:	330b      	adds	r3, #11
 800d30c:	2220      	movs	r2, #32
 800d30e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d314:	4611      	mov	r1, r2
 800d316:	4618      	mov	r0, r3
 800d318:	f7fe fc61 	bl	800bbde <ld_clust>
 800d31c:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d322:	2200      	movs	r2, #0
 800d324:	4618      	mov	r0, r3
 800d326:	f7fe fc79 	bl	800bc1c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d32c:	331c      	adds	r3, #28
 800d32e:	2100      	movs	r1, #0
 800d330:	4618      	mov	r0, r3
 800d332:	f7fd fcf5 	bl	800ad20 <st_dword>
					fs->wflag = 1;
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	2201      	movs	r2, #1
 800d33a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d33c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d037      	beq.n	800d3b2 <f_open+0x1ee>
						dw = fs->winsect;
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d346:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800d348:	f107 0314 	add.w	r3, r7, #20
 800d34c:	2200      	movs	r2, #0
 800d34e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d350:	4618      	mov	r0, r3
 800d352:	f7fe f98c 	bl	800b66e <remove_chain>
 800d356:	4603      	mov	r3, r0
 800d358:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d35c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d360:	2b00      	cmp	r3, #0
 800d362:	d126      	bne.n	800d3b2 <f_open+0x1ee>
							res = move_window(fs, dw);
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d368:	4618      	mov	r0, r3
 800d36a:	f7fd ff33 	bl	800b1d4 <move_window>
 800d36e:	4603      	mov	r3, r0
 800d370:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d378:	3a01      	subs	r2, #1
 800d37a:	611a      	str	r2, [r3, #16]
 800d37c:	e019      	b.n	800d3b2 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d37e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d382:	2b00      	cmp	r3, #0
 800d384:	d115      	bne.n	800d3b2 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d386:	7ebb      	ldrb	r3, [r7, #26]
 800d388:	f003 0310 	and.w	r3, r3, #16
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d003      	beq.n	800d398 <f_open+0x1d4>
					res = FR_NO_FILE;
 800d390:	2304      	movs	r3, #4
 800d392:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d396:	e00c      	b.n	800d3b2 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d398:	79fb      	ldrb	r3, [r7, #7]
 800d39a:	f003 0302 	and.w	r3, r3, #2
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d007      	beq.n	800d3b2 <f_open+0x1ee>
 800d3a2:	7ebb      	ldrb	r3, [r7, #26]
 800d3a4:	f003 0301 	and.w	r3, r3, #1
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d002      	beq.n	800d3b2 <f_open+0x1ee>
						res = FR_DENIED;
 800d3ac:	2307      	movs	r3, #7
 800d3ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d3b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d128      	bne.n	800d40c <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d3ba:	79fb      	ldrb	r3, [r7, #7]
 800d3bc:	f003 0308 	and.w	r3, r3, #8
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d003      	beq.n	800d3cc <f_open+0x208>
				mode |= FA_MODIFIED;
 800d3c4:	79fb      	ldrb	r3, [r7, #7]
 800d3c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3ca:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d3d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d3da:	79fb      	ldrb	r3, [r7, #7]
 800d3dc:	f023 0301 	bic.w	r3, r3, #1
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	bf14      	ite	ne
 800d3e4:	2301      	movne	r3, #1
 800d3e6:	2300      	moveq	r3, #0
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	f107 0314 	add.w	r3, r7, #20
 800d3f0:	4611      	mov	r1, r2
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7fd fdbc 	bl	800af70 <inc_lock>
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	691b      	ldr	r3, [r3, #16]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d102      	bne.n	800d40c <f_open+0x248>
 800d406:	2302      	movs	r3, #2
 800d408:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d40c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d410:	2b00      	cmp	r3, #0
 800d412:	f040 8095 	bne.w	800d540 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d41a:	4611      	mov	r1, r2
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7fe fbde 	bl	800bbde <ld_clust>
 800d422:	4602      	mov	r2, r0
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d42a:	331c      	adds	r3, #28
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7fd fc39 	bl	800aca4 <ld_dword>
 800d432:	4602      	mov	r2, r0
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2200      	movs	r2, #0
 800d43c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d43e:	693a      	ldr	r2, [r7, #16]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	88da      	ldrh	r2, [r3, #6]
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	79fa      	ldrb	r2, [r7, #7]
 800d450:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2200      	movs	r2, #0
 800d456:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2200      	movs	r2, #0
 800d45c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2200      	movs	r2, #0
 800d462:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	3330      	adds	r3, #48	; 0x30
 800d468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d46c:	2100      	movs	r1, #0
 800d46e:	4618      	mov	r0, r3
 800d470:	f7fd fca3 	bl	800adba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d474:	79fb      	ldrb	r3, [r7, #7]
 800d476:	f003 0320 	and.w	r3, r3, #32
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d060      	beq.n	800d540 <f_open+0x37c>
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d05c      	beq.n	800d540 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	68da      	ldr	r2, [r3, #12]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	895b      	ldrh	r3, [r3, #10]
 800d492:	025b      	lsls	r3, r3, #9
 800d494:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4a2:	e016      	b.n	800d4d2 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7fd ff4e 	bl	800b34a <get_fat>
 800d4ae:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d4b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d802      	bhi.n	800d4bc <f_open+0x2f8>
 800d4b6:	2302      	movs	r3, #2
 800d4b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d4bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c2:	d102      	bne.n	800d4ca <f_open+0x306>
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d4ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d4cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ce:	1ad3      	subs	r3, r2, r3
 800d4d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d103      	bne.n	800d4e2 <f_open+0x31e>
 800d4da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d4dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d8e0      	bhi.n	800d4a4 <f_open+0x2e0>
				}
				fp->clust = clst;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4e6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d4e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d127      	bne.n	800d540 <f_open+0x37c>
 800d4f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d022      	beq.n	800d540 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fd ff04 	bl	800b30c <clust2sect>
 800d504:	64b8      	str	r0, [r7, #72]	; 0x48
 800d506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d103      	bne.n	800d514 <f_open+0x350>
						res = FR_INT_ERR;
 800d50c:	2302      	movs	r3, #2
 800d50e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d512:	e015      	b.n	800d540 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d516:	0a5a      	lsrs	r2, r3, #9
 800d518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d51a:	441a      	add	r2, r3
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	7858      	ldrb	r0, [r3, #1]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	6a1a      	ldr	r2, [r3, #32]
 800d52e:	2301      	movs	r3, #1
 800d530:	f7fd fb3a 	bl	800aba8 <disk_read>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d002      	beq.n	800d540 <f_open+0x37c>
 800d53a:	2301      	movs	r3, #1
 800d53c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800d540:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d542:	f001 fa1a 	bl	800e97a <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d546:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d002      	beq.n	800d554 <f_open+0x390>
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2200      	movs	r2, #0
 800d552:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d554:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3768      	adds	r7, #104	; 0x68
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b08e      	sub	sp, #56	; 0x38
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	607a      	str	r2, [r7, #4]
 800d56c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	2200      	movs	r2, #0
 800d576:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f107 0214 	add.w	r2, r7, #20
 800d57e:	4611      	mov	r1, r2
 800d580:	4618      	mov	r0, r3
 800d582:	f7ff fda3 	bl	800d0cc <validate>
 800d586:	4603      	mov	r3, r0
 800d588:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d58c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d590:	2b00      	cmp	r3, #0
 800d592:	d107      	bne.n	800d5a4 <f_read+0x44>
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	7d5b      	ldrb	r3, [r3, #21]
 800d598:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d59c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d002      	beq.n	800d5aa <f_read+0x4a>
 800d5a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5a8:	e115      	b.n	800d7d6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	7d1b      	ldrb	r3, [r3, #20]
 800d5ae:	f003 0301 	and.w	r3, r3, #1
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d101      	bne.n	800d5ba <f_read+0x5a>
 800d5b6:	2307      	movs	r3, #7
 800d5b8:	e10d      	b.n	800d7d6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	68da      	ldr	r2, [r3, #12]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	699b      	ldr	r3, [r3, #24]
 800d5c2:	1ad3      	subs	r3, r2, r3
 800d5c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d5c6:	687a      	ldr	r2, [r7, #4]
 800d5c8:	6a3b      	ldr	r3, [r7, #32]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	f240 80fe 	bls.w	800d7cc <f_read+0x26c>
 800d5d0:	6a3b      	ldr	r3, [r7, #32]
 800d5d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d5d4:	e0fa      	b.n	800d7cc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	699b      	ldr	r3, [r3, #24]
 800d5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	f040 80c6 	bne.w	800d770 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	699b      	ldr	r3, [r3, #24]
 800d5e8:	0a5b      	lsrs	r3, r3, #9
 800d5ea:	697a      	ldr	r2, [r7, #20]
 800d5ec:	8952      	ldrh	r2, [r2, #10]
 800d5ee:	3a01      	subs	r2, #1
 800d5f0:	4013      	ands	r3, r2
 800d5f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d12f      	bne.n	800d65a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	699b      	ldr	r3, [r3, #24]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d103      	bne.n	800d60a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	689b      	ldr	r3, [r3, #8]
 800d606:	633b      	str	r3, [r7, #48]	; 0x30
 800d608:	e013      	b.n	800d632 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d007      	beq.n	800d622 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	699b      	ldr	r3, [r3, #24]
 800d616:	4619      	mov	r1, r3
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f7fe f925 	bl	800b868 <clmt_clust>
 800d61e:	6338      	str	r0, [r7, #48]	; 0x30
 800d620:	e007      	b.n	800d632 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d622:	68fa      	ldr	r2, [r7, #12]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	69db      	ldr	r3, [r3, #28]
 800d628:	4619      	mov	r1, r3
 800d62a:	4610      	mov	r0, r2
 800d62c:	f7fd fe8d 	bl	800b34a <get_fat>
 800d630:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d634:	2b01      	cmp	r3, #1
 800d636:	d804      	bhi.n	800d642 <f_read+0xe2>
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2202      	movs	r2, #2
 800d63c:	755a      	strb	r2, [r3, #21]
 800d63e:	2302      	movs	r3, #2
 800d640:	e0c9      	b.n	800d7d6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d648:	d104      	bne.n	800d654 <f_read+0xf4>
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2201      	movs	r2, #1
 800d64e:	755a      	strb	r2, [r3, #21]
 800d650:	2301      	movs	r3, #1
 800d652:	e0c0      	b.n	800d7d6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d658:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d65a:	697a      	ldr	r2, [r7, #20]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	69db      	ldr	r3, [r3, #28]
 800d660:	4619      	mov	r1, r3
 800d662:	4610      	mov	r0, r2
 800d664:	f7fd fe52 	bl	800b30c <clust2sect>
 800d668:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d104      	bne.n	800d67a <f_read+0x11a>
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2202      	movs	r2, #2
 800d674:	755a      	strb	r2, [r3, #21]
 800d676:	2302      	movs	r3, #2
 800d678:	e0ad      	b.n	800d7d6 <f_read+0x276>
			sect += csect;
 800d67a:	69ba      	ldr	r2, [r7, #24]
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	4413      	add	r3, r2
 800d680:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	0a5b      	lsrs	r3, r3, #9
 800d686:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d039      	beq.n	800d702 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d68e:	69fa      	ldr	r2, [r7, #28]
 800d690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d692:	4413      	add	r3, r2
 800d694:	697a      	ldr	r2, [r7, #20]
 800d696:	8952      	ldrh	r2, [r2, #10]
 800d698:	4293      	cmp	r3, r2
 800d69a:	d905      	bls.n	800d6a8 <f_read+0x148>
					cc = fs->csize - csect;
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	895b      	ldrh	r3, [r3, #10]
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	69fb      	ldr	r3, [r7, #28]
 800d6a4:	1ad3      	subs	r3, r2, r3
 800d6a6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	7858      	ldrb	r0, [r3, #1]
 800d6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ae:	69ba      	ldr	r2, [r7, #24]
 800d6b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d6b2:	f7fd fa79 	bl	800aba8 <disk_read>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d004      	beq.n	800d6c6 <f_read+0x166>
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2201      	movs	r2, #1
 800d6c0:	755a      	strb	r2, [r3, #21]
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e087      	b.n	800d7d6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	7d1b      	ldrb	r3, [r3, #20]
 800d6ca:	b25b      	sxtb	r3, r3
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	da14      	bge.n	800d6fa <f_read+0x19a>
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6a1a      	ldr	r2, [r3, #32]
 800d6d4:	69bb      	ldr	r3, [r7, #24]
 800d6d6:	1ad3      	subs	r3, r2, r3
 800d6d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d90d      	bls.n	800d6fa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	6a1a      	ldr	r2, [r3, #32]
 800d6e2:	69bb      	ldr	r3, [r7, #24]
 800d6e4:	1ad3      	subs	r3, r2, r3
 800d6e6:	025b      	lsls	r3, r3, #9
 800d6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ea:	18d0      	adds	r0, r2, r3
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	3330      	adds	r3, #48	; 0x30
 800d6f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	f7fd fb3f 	bl	800ad78 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fc:	025b      	lsls	r3, r3, #9
 800d6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d700:	e050      	b.n	800d7a4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	6a1b      	ldr	r3, [r3, #32]
 800d706:	69ba      	ldr	r2, [r7, #24]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d02e      	beq.n	800d76a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	7d1b      	ldrb	r3, [r3, #20]
 800d710:	b25b      	sxtb	r3, r3
 800d712:	2b00      	cmp	r3, #0
 800d714:	da18      	bge.n	800d748 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	7858      	ldrb	r0, [r3, #1]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	6a1a      	ldr	r2, [r3, #32]
 800d724:	2301      	movs	r3, #1
 800d726:	f7fd fa5f 	bl	800abe8 <disk_write>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d004      	beq.n	800d73a <f_read+0x1da>
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2201      	movs	r2, #1
 800d734:	755a      	strb	r2, [r3, #21]
 800d736:	2301      	movs	r3, #1
 800d738:	e04d      	b.n	800d7d6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	7d1b      	ldrb	r3, [r3, #20]
 800d73e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d742:	b2da      	uxtb	r2, r3
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	7858      	ldrb	r0, [r3, #1]
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d752:	2301      	movs	r3, #1
 800d754:	69ba      	ldr	r2, [r7, #24]
 800d756:	f7fd fa27 	bl	800aba8 <disk_read>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d004      	beq.n	800d76a <f_read+0x20a>
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2201      	movs	r2, #1
 800d764:	755a      	strb	r2, [r3, #21]
 800d766:	2301      	movs	r3, #1
 800d768:	e035      	b.n	800d7d6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	69ba      	ldr	r2, [r7, #24]
 800d76e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	699b      	ldr	r3, [r3, #24]
 800d774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d778:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d77c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d77e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	429a      	cmp	r2, r3
 800d784:	d901      	bls.n	800d78a <f_read+0x22a>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	699b      	ldr	r3, [r3, #24]
 800d794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d798:	4413      	add	r3, r2
 800d79a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d79c:	4619      	mov	r1, r3
 800d79e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7a0:	f7fd faea 	bl	800ad78 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d7a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a8:	4413      	add	r3, r2
 800d7aa:	627b      	str	r3, [r7, #36]	; 0x24
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	699a      	ldr	r2, [r3, #24]
 800d7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b2:	441a      	add	r2, r3
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	619a      	str	r2, [r3, #24]
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7be:	441a      	add	r2, r3
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	601a      	str	r2, [r3, #0]
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c8:	1ad3      	subs	r3, r2, r3
 800d7ca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	f47f af01 	bne.w	800d5d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d7d4:	2300      	movs	r3, #0
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3738      	adds	r7, #56	; 0x38
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}

0800d7de <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d7de:	b580      	push	{r7, lr}
 800d7e0:	b08c      	sub	sp, #48	; 0x30
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	60f8      	str	r0, [r7, #12]
 800d7e6:	60b9      	str	r1, [r7, #8]
 800d7e8:	607a      	str	r2, [r7, #4]
 800d7ea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f107 0210 	add.w	r2, r7, #16
 800d7fc:	4611      	mov	r1, r2
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7ff fc64 	bl	800d0cc <validate>
 800d804:	4603      	mov	r3, r0
 800d806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d80a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d107      	bne.n	800d822 <f_write+0x44>
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	7d5b      	ldrb	r3, [r3, #21]
 800d816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d81a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d002      	beq.n	800d828 <f_write+0x4a>
 800d822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d826:	e14b      	b.n	800dac0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	7d1b      	ldrb	r3, [r3, #20]
 800d82c:	f003 0302 	and.w	r3, r3, #2
 800d830:	2b00      	cmp	r3, #0
 800d832:	d101      	bne.n	800d838 <f_write+0x5a>
 800d834:	2307      	movs	r3, #7
 800d836:	e143      	b.n	800dac0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	699a      	ldr	r2, [r3, #24]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	441a      	add	r2, r3
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	699b      	ldr	r3, [r3, #24]
 800d844:	429a      	cmp	r2, r3
 800d846:	f080 812d 	bcs.w	800daa4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	699b      	ldr	r3, [r3, #24]
 800d84e:	43db      	mvns	r3, r3
 800d850:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d852:	e127      	b.n	800daa4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	699b      	ldr	r3, [r3, #24]
 800d858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f040 80e3 	bne.w	800da28 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	699b      	ldr	r3, [r3, #24]
 800d866:	0a5b      	lsrs	r3, r3, #9
 800d868:	693a      	ldr	r2, [r7, #16]
 800d86a:	8952      	ldrh	r2, [r2, #10]
 800d86c:	3a01      	subs	r2, #1
 800d86e:	4013      	ands	r3, r2
 800d870:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d143      	bne.n	800d900 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	699b      	ldr	r3, [r3, #24]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d10c      	bne.n	800d89a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	689b      	ldr	r3, [r3, #8]
 800d884:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d11a      	bne.n	800d8c2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2100      	movs	r1, #0
 800d890:	4618      	mov	r0, r3
 800d892:	f7fd ff51 	bl	800b738 <create_chain>
 800d896:	62b8      	str	r0, [r7, #40]	; 0x28
 800d898:	e013      	b.n	800d8c2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d007      	beq.n	800d8b2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	699b      	ldr	r3, [r3, #24]
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	68f8      	ldr	r0, [r7, #12]
 800d8aa:	f7fd ffdd 	bl	800b868 <clmt_clust>
 800d8ae:	62b8      	str	r0, [r7, #40]	; 0x28
 800d8b0:	e007      	b.n	800d8c2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d8b2:	68fa      	ldr	r2, [r7, #12]
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	69db      	ldr	r3, [r3, #28]
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	4610      	mov	r0, r2
 800d8bc:	f7fd ff3c 	bl	800b738 <create_chain>
 800d8c0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f000 80f2 	beq.w	800daae <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d104      	bne.n	800d8da <f_write+0xfc>
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2202      	movs	r2, #2
 800d8d4:	755a      	strb	r2, [r3, #21]
 800d8d6:	2302      	movs	r3, #2
 800d8d8:	e0f2      	b.n	800dac0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e0:	d104      	bne.n	800d8ec <f_write+0x10e>
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	755a      	strb	r2, [r3, #21]
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	e0e9      	b.n	800dac0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8f0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	689b      	ldr	r3, [r3, #8]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d102      	bne.n	800d900 <f_write+0x122>
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8fe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	7d1b      	ldrb	r3, [r3, #20]
 800d904:	b25b      	sxtb	r3, r3
 800d906:	2b00      	cmp	r3, #0
 800d908:	da18      	bge.n	800d93c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	7858      	ldrb	r0, [r3, #1]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6a1a      	ldr	r2, [r3, #32]
 800d918:	2301      	movs	r3, #1
 800d91a:	f7fd f965 	bl	800abe8 <disk_write>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d004      	beq.n	800d92e <f_write+0x150>
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2201      	movs	r2, #1
 800d928:	755a      	strb	r2, [r3, #21]
 800d92a:	2301      	movs	r3, #1
 800d92c:	e0c8      	b.n	800dac0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	7d1b      	ldrb	r3, [r3, #20]
 800d932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d936:	b2da      	uxtb	r2, r3
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d93c:	693a      	ldr	r2, [r7, #16]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	69db      	ldr	r3, [r3, #28]
 800d942:	4619      	mov	r1, r3
 800d944:	4610      	mov	r0, r2
 800d946:	f7fd fce1 	bl	800b30c <clust2sect>
 800d94a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d104      	bne.n	800d95c <f_write+0x17e>
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2202      	movs	r2, #2
 800d956:	755a      	strb	r2, [r3, #21]
 800d958:	2302      	movs	r3, #2
 800d95a:	e0b1      	b.n	800dac0 <f_write+0x2e2>
			sect += csect;
 800d95c:	697a      	ldr	r2, [r7, #20]
 800d95e:	69bb      	ldr	r3, [r7, #24]
 800d960:	4413      	add	r3, r2
 800d962:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	0a5b      	lsrs	r3, r3, #9
 800d968:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d96a:	6a3b      	ldr	r3, [r7, #32]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d03c      	beq.n	800d9ea <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d970:	69ba      	ldr	r2, [r7, #24]
 800d972:	6a3b      	ldr	r3, [r7, #32]
 800d974:	4413      	add	r3, r2
 800d976:	693a      	ldr	r2, [r7, #16]
 800d978:	8952      	ldrh	r2, [r2, #10]
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d905      	bls.n	800d98a <f_write+0x1ac>
					cc = fs->csize - csect;
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	895b      	ldrh	r3, [r3, #10]
 800d982:	461a      	mov	r2, r3
 800d984:	69bb      	ldr	r3, [r7, #24]
 800d986:	1ad3      	subs	r3, r2, r3
 800d988:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	7858      	ldrb	r0, [r3, #1]
 800d98e:	6a3b      	ldr	r3, [r7, #32]
 800d990:	697a      	ldr	r2, [r7, #20]
 800d992:	69f9      	ldr	r1, [r7, #28]
 800d994:	f7fd f928 	bl	800abe8 <disk_write>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d004      	beq.n	800d9a8 <f_write+0x1ca>
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	755a      	strb	r2, [r3, #21]
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e08b      	b.n	800dac0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	6a1a      	ldr	r2, [r3, #32]
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	1ad3      	subs	r3, r2, r3
 800d9b0:	6a3a      	ldr	r2, [r7, #32]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d915      	bls.n	800d9e2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6a1a      	ldr	r2, [r3, #32]
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	1ad3      	subs	r3, r2, r3
 800d9c4:	025b      	lsls	r3, r3, #9
 800d9c6:	69fa      	ldr	r2, [r7, #28]
 800d9c8:	4413      	add	r3, r2
 800d9ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	f7fd f9d2 	bl	800ad78 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	7d1b      	ldrb	r3, [r3, #20]
 800d9d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9dc:	b2da      	uxtb	r2, r3
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d9e2:	6a3b      	ldr	r3, [r7, #32]
 800d9e4:	025b      	lsls	r3, r3, #9
 800d9e6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d9e8:	e03f      	b.n	800da6a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	6a1b      	ldr	r3, [r3, #32]
 800d9ee:	697a      	ldr	r2, [r7, #20]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d016      	beq.n	800da22 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	699a      	ldr	r2, [r3, #24]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d210      	bcs.n	800da22 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	7858      	ldrb	r0, [r3, #1]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da0a:	2301      	movs	r3, #1
 800da0c:	697a      	ldr	r2, [r7, #20]
 800da0e:	f7fd f8cb 	bl	800aba8 <disk_read>
 800da12:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800da14:	2b00      	cmp	r3, #0
 800da16:	d004      	beq.n	800da22 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2201      	movs	r2, #1
 800da1c:	755a      	strb	r2, [r3, #21]
 800da1e:	2301      	movs	r3, #1
 800da20:	e04e      	b.n	800dac0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	697a      	ldr	r2, [r7, #20]
 800da26:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	699b      	ldr	r3, [r3, #24]
 800da2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da30:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800da34:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800da36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d901      	bls.n	800da42 <f_write+0x264>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	699b      	ldr	r3, [r3, #24]
 800da4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da50:	4413      	add	r3, r2
 800da52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da54:	69f9      	ldr	r1, [r7, #28]
 800da56:	4618      	mov	r0, r3
 800da58:	f7fd f98e 	bl	800ad78 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	7d1b      	ldrb	r3, [r3, #20]
 800da60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da64:	b2da      	uxtb	r2, r3
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800da6a:	69fa      	ldr	r2, [r7, #28]
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	4413      	add	r3, r2
 800da70:	61fb      	str	r3, [r7, #28]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	699a      	ldr	r2, [r3, #24]
 800da76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da78:	441a      	add	r2, r3
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	619a      	str	r2, [r3, #24]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	68da      	ldr	r2, [r3, #12]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	699b      	ldr	r3, [r3, #24]
 800da86:	429a      	cmp	r2, r3
 800da88:	bf38      	it	cc
 800da8a:	461a      	movcc	r2, r3
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	60da      	str	r2, [r3, #12]
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da96:	441a      	add	r2, r3
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	601a      	str	r2, [r3, #0]
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa0:	1ad3      	subs	r3, r2, r3
 800daa2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	f47f aed4 	bne.w	800d854 <f_write+0x76>
 800daac:	e000      	b.n	800dab0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800daae:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	7d1b      	ldrb	r3, [r3, #20]
 800dab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dab8:	b2da      	uxtb	r2, r3
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3730      	adds	r7, #48	; 0x30
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b086      	sub	sp, #24
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f107 0208 	add.w	r2, r7, #8
 800dad6:	4611      	mov	r1, r2
 800dad8:	4618      	mov	r0, r3
 800dada:	f7ff faf7 	bl	800d0cc <validate>
 800dade:	4603      	mov	r3, r0
 800dae0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dae2:	7dfb      	ldrb	r3, [r7, #23]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d168      	bne.n	800dbba <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	7d1b      	ldrb	r3, [r3, #20]
 800daec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d062      	beq.n	800dbba <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	7d1b      	ldrb	r3, [r3, #20]
 800daf8:	b25b      	sxtb	r3, r3
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	da15      	bge.n	800db2a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	7858      	ldrb	r0, [r3, #1]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6a1a      	ldr	r2, [r3, #32]
 800db0c:	2301      	movs	r3, #1
 800db0e:	f7fd f86b 	bl	800abe8 <disk_write>
 800db12:	4603      	mov	r3, r0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d001      	beq.n	800db1c <f_sync+0x54>
 800db18:	2301      	movs	r3, #1
 800db1a:	e04f      	b.n	800dbbc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	7d1b      	ldrb	r3, [r3, #20]
 800db20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db24:	b2da      	uxtb	r2, r3
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800db2a:	f7fd f89b 	bl	800ac64 <get_fattime>
 800db2e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800db30:	68ba      	ldr	r2, [r7, #8]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db36:	4619      	mov	r1, r3
 800db38:	4610      	mov	r0, r2
 800db3a:	f7fd fb4b 	bl	800b1d4 <move_window>
 800db3e:	4603      	mov	r3, r0
 800db40:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800db42:	7dfb      	ldrb	r3, [r7, #23]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d138      	bne.n	800dbba <f_sync+0xf2>
					dir = fp->dir_ptr;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db4c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	330b      	adds	r3, #11
 800db52:	781a      	ldrb	r2, [r3, #0]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	330b      	adds	r3, #11
 800db58:	f042 0220 	orr.w	r2, r2, #32
 800db5c:	b2d2      	uxtb	r2, r2
 800db5e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6818      	ldr	r0, [r3, #0]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	689b      	ldr	r3, [r3, #8]
 800db68:	461a      	mov	r2, r3
 800db6a:	68f9      	ldr	r1, [r7, #12]
 800db6c:	f7fe f856 	bl	800bc1c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f103 021c 	add.w	r2, r3, #28
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	4619      	mov	r1, r3
 800db7c:	4610      	mov	r0, r2
 800db7e:	f7fd f8cf 	bl	800ad20 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	3316      	adds	r3, #22
 800db86:	6939      	ldr	r1, [r7, #16]
 800db88:	4618      	mov	r0, r3
 800db8a:	f7fd f8c9 	bl	800ad20 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	3312      	adds	r3, #18
 800db92:	2100      	movs	r1, #0
 800db94:	4618      	mov	r0, r3
 800db96:	f7fd f8a8 	bl	800acea <st_word>
					fs->wflag = 1;
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	2201      	movs	r2, #1
 800db9e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fd fb44 	bl	800b230 <sync_fs>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	7d1b      	ldrb	r3, [r3, #20]
 800dbb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbb4:	b2da      	uxtb	r2, r3
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dbba:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3718      	adds	r7, #24
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7ff ff7b 	bl	800dac8 <f_sync>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dbd6:	7bfb      	ldrb	r3, [r7, #15]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d118      	bne.n	800dc0e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f107 0208 	add.w	r2, r7, #8
 800dbe2:	4611      	mov	r1, r2
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7ff fa71 	bl	800d0cc <validate>
 800dbea:	4603      	mov	r3, r0
 800dbec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dbee:	7bfb      	ldrb	r3, [r7, #15]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d10c      	bne.n	800dc0e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	691b      	ldr	r3, [r3, #16]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7fd fa47 	bl	800b08c <dec_lock>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dc02:	7bfb      	ldrb	r3, [r7, #15]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d102      	bne.n	800dc0e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dc0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3710      	adds	r7, #16
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b090      	sub	sp, #64	; 0x40
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f107 0208 	add.w	r2, r7, #8
 800dc28:	4611      	mov	r1, r2
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7ff fa4e 	bl	800d0cc <validate>
 800dc30:	4603      	mov	r3, r0
 800dc32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800dc36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d103      	bne.n	800dc46 <f_lseek+0x2e>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	7d5b      	ldrb	r3, [r3, #21]
 800dc42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800dc46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d002      	beq.n	800dc54 <f_lseek+0x3c>
 800dc4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc52:	e1e6      	b.n	800e022 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	f000 80d1 	beq.w	800de00 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc64:	d15a      	bne.n	800dd1c <f_lseek+0x104>
			tbl = fp->cltbl;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800dc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6e:	1d1a      	adds	r2, r3, #4
 800dc70:	627a      	str	r2, [r7, #36]	; 0x24
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	617b      	str	r3, [r7, #20]
 800dc76:	2302      	movs	r3, #2
 800dc78:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	689b      	ldr	r3, [r3, #8]
 800dc7e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800dc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d03a      	beq.n	800dcfc <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	613b      	str	r3, [r7, #16]
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc90:	3302      	adds	r3, #2
 800dc92:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800dc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc96:	60fb      	str	r3, [r7, #12]
 800dc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7fd fb51 	bl	800b34a <get_fat>
 800dca8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800dcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d804      	bhi.n	800dcba <f_lseek+0xa2>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2202      	movs	r2, #2
 800dcb4:	755a      	strb	r2, [r3, #21]
 800dcb6:	2302      	movs	r3, #2
 800dcb8:	e1b3      	b.n	800e022 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcc0:	d104      	bne.n	800dccc <f_lseek+0xb4>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	755a      	strb	r2, [r3, #21]
 800dcc8:	2301      	movs	r3, #1
 800dcca:	e1aa      	b.n	800e022 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d0de      	beq.n	800dc94 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800dcd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d809      	bhi.n	800dcf2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800dcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce0:	1d1a      	adds	r2, r3, #4
 800dce2:	627a      	str	r2, [r7, #36]	; 0x24
 800dce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dce6:	601a      	str	r2, [r3, #0]
 800dce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcea:	1d1a      	adds	r2, r3, #4
 800dcec:	627a      	str	r2, [r7, #36]	; 0x24
 800dcee:	693a      	ldr	r2, [r7, #16]
 800dcf0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	699b      	ldr	r3, [r3, #24]
 800dcf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d3c4      	bcc.n	800dc86 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd02:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800dd04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d803      	bhi.n	800dd14 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0e:	2200      	movs	r2, #0
 800dd10:	601a      	str	r2, [r3, #0]
 800dd12:	e184      	b.n	800e01e <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800dd14:	2311      	movs	r3, #17
 800dd16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dd1a:	e180      	b.n	800e01e <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	68db      	ldr	r3, [r3, #12]
 800dd20:	683a      	ldr	r2, [r7, #0]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d902      	bls.n	800dd2c <f_lseek+0x114>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	68db      	ldr	r3, [r3, #12]
 800dd2a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	683a      	ldr	r2, [r7, #0]
 800dd30:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	f000 8172 	beq.w	800e01e <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	3b01      	subs	r3, #1
 800dd3e:	4619      	mov	r1, r3
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f7fd fd91 	bl	800b868 <clmt_clust>
 800dd46:	4602      	mov	r2, r0
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800dd4c:	68ba      	ldr	r2, [r7, #8]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	69db      	ldr	r3, [r3, #28]
 800dd52:	4619      	mov	r1, r3
 800dd54:	4610      	mov	r0, r2
 800dd56:	f7fd fad9 	bl	800b30c <clust2sect>
 800dd5a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800dd5c:	69bb      	ldr	r3, [r7, #24]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d104      	bne.n	800dd6c <f_lseek+0x154>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2202      	movs	r2, #2
 800dd66:	755a      	strb	r2, [r3, #21]
 800dd68:	2302      	movs	r3, #2
 800dd6a:	e15a      	b.n	800e022 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	0a5b      	lsrs	r3, r3, #9
 800dd72:	68ba      	ldr	r2, [r7, #8]
 800dd74:	8952      	ldrh	r2, [r2, #10]
 800dd76:	3a01      	subs	r2, #1
 800dd78:	4013      	ands	r3, r2
 800dd7a:	69ba      	ldr	r2, [r7, #24]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	699b      	ldr	r3, [r3, #24]
 800dd84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f000 8148 	beq.w	800e01e <f_lseek+0x406>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a1b      	ldr	r3, [r3, #32]
 800dd92:	69ba      	ldr	r2, [r7, #24]
 800dd94:	429a      	cmp	r2, r3
 800dd96:	f000 8142 	beq.w	800e01e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	7d1b      	ldrb	r3, [r3, #20]
 800dd9e:	b25b      	sxtb	r3, r3
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	da18      	bge.n	800ddd6 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	7858      	ldrb	r0, [r3, #1]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6a1a      	ldr	r2, [r3, #32]
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	f7fc ff18 	bl	800abe8 <disk_write>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d004      	beq.n	800ddc8 <f_lseek+0x1b0>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	755a      	strb	r2, [r3, #21]
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	e12c      	b.n	800e022 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	7d1b      	ldrb	r3, [r3, #20]
 800ddcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddd0:	b2da      	uxtb	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	7858      	ldrb	r0, [r3, #1]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dde0:	2301      	movs	r3, #1
 800dde2:	69ba      	ldr	r2, [r7, #24]
 800dde4:	f7fc fee0 	bl	800aba8 <disk_read>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d004      	beq.n	800ddf8 <f_lseek+0x1e0>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	755a      	strb	r2, [r3, #21]
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	e114      	b.n	800e022 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	69ba      	ldr	r2, [r7, #24]
 800ddfc:	621a      	str	r2, [r3, #32]
 800ddfe:	e10e      	b.n	800e01e <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	68db      	ldr	r3, [r3, #12]
 800de04:	683a      	ldr	r2, [r7, #0]
 800de06:	429a      	cmp	r2, r3
 800de08:	d908      	bls.n	800de1c <f_lseek+0x204>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	7d1b      	ldrb	r3, [r3, #20]
 800de0e:	f003 0302 	and.w	r3, r3, #2
 800de12:	2b00      	cmp	r3, #0
 800de14:	d102      	bne.n	800de1c <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	68db      	ldr	r3, [r3, #12]
 800de1a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	699b      	ldr	r3, [r3, #24]
 800de20:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800de22:	2300      	movs	r3, #0
 800de24:	637b      	str	r3, [r7, #52]	; 0x34
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de2a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	f000 80a7 	beq.w	800df82 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	895b      	ldrh	r3, [r3, #10]
 800de38:	025b      	lsls	r3, r3, #9
 800de3a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800de3c:	6a3b      	ldr	r3, [r7, #32]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d01b      	beq.n	800de7a <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	1e5a      	subs	r2, r3, #1
 800de46:	69fb      	ldr	r3, [r7, #28]
 800de48:	fbb2 f2f3 	udiv	r2, r2, r3
 800de4c:	6a3b      	ldr	r3, [r7, #32]
 800de4e:	1e59      	subs	r1, r3, #1
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800de56:	429a      	cmp	r2, r3
 800de58:	d30f      	bcc.n	800de7a <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800de5a:	6a3b      	ldr	r3, [r7, #32]
 800de5c:	1e5a      	subs	r2, r3, #1
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	425b      	negs	r3, r3
 800de62:	401a      	ands	r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	699b      	ldr	r3, [r3, #24]
 800de6c:	683a      	ldr	r2, [r7, #0]
 800de6e:	1ad3      	subs	r3, r2, r3
 800de70:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	69db      	ldr	r3, [r3, #28]
 800de76:	63bb      	str	r3, [r7, #56]	; 0x38
 800de78:	e022      	b.n	800dec0 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800de80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de82:	2b00      	cmp	r3, #0
 800de84:	d119      	bne.n	800deba <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2100      	movs	r1, #0
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fd fc54 	bl	800b738 <create_chain>
 800de90:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800de92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de94:	2b01      	cmp	r3, #1
 800de96:	d104      	bne.n	800dea2 <f_lseek+0x28a>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2202      	movs	r2, #2
 800de9c:	755a      	strb	r2, [r3, #21]
 800de9e:	2302      	movs	r3, #2
 800dea0:	e0bf      	b.n	800e022 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dea8:	d104      	bne.n	800deb4 <f_lseek+0x29c>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2201      	movs	r2, #1
 800deae:	755a      	strb	r2, [r3, #21]
 800deb0:	2301      	movs	r3, #1
 800deb2:	e0b6      	b.n	800e022 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800deb8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800debe:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800dec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d05d      	beq.n	800df82 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800dec6:	e03a      	b.n	800df3e <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800dec8:	683a      	ldr	r2, [r7, #0]
 800deca:	69fb      	ldr	r3, [r7, #28]
 800decc:	1ad3      	subs	r3, r2, r3
 800dece:	603b      	str	r3, [r7, #0]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	699a      	ldr	r2, [r3, #24]
 800ded4:	69fb      	ldr	r3, [r7, #28]
 800ded6:	441a      	add	r2, r3
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	7d1b      	ldrb	r3, [r3, #20]
 800dee0:	f003 0302 	and.w	r3, r3, #2
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d00b      	beq.n	800df00 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800deec:	4618      	mov	r0, r3
 800deee:	f7fd fc23 	bl	800b738 <create_chain>
 800def2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800def4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def6:	2b00      	cmp	r3, #0
 800def8:	d108      	bne.n	800df0c <f_lseek+0x2f4>
							ofs = 0; break;
 800defa:	2300      	movs	r3, #0
 800defc:	603b      	str	r3, [r7, #0]
 800defe:	e022      	b.n	800df46 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df04:	4618      	mov	r0, r3
 800df06:	f7fd fa20 	bl	800b34a <get_fat>
 800df0a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800df0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df12:	d104      	bne.n	800df1e <f_lseek+0x306>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2201      	movs	r2, #1
 800df18:	755a      	strb	r2, [r3, #21]
 800df1a:	2301      	movs	r3, #1
 800df1c:	e081      	b.n	800e022 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800df1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df20:	2b01      	cmp	r3, #1
 800df22:	d904      	bls.n	800df2e <f_lseek+0x316>
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	699b      	ldr	r3, [r3, #24]
 800df28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d304      	bcc.n	800df38 <f_lseek+0x320>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2202      	movs	r2, #2
 800df32:	755a      	strb	r2, [r3, #21]
 800df34:	2302      	movs	r3, #2
 800df36:	e074      	b.n	800e022 <f_lseek+0x40a>
					fp->clust = clst;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df3c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800df3e:	683a      	ldr	r2, [r7, #0]
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	429a      	cmp	r2, r3
 800df44:	d8c0      	bhi.n	800dec8 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	699a      	ldr	r2, [r3, #24]
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	441a      	add	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d012      	beq.n	800df82 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df60:	4618      	mov	r0, r3
 800df62:	f7fd f9d3 	bl	800b30c <clust2sect>
 800df66:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800df68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d104      	bne.n	800df78 <f_lseek+0x360>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2202      	movs	r2, #2
 800df72:	755a      	strb	r2, [r3, #21]
 800df74:	2302      	movs	r3, #2
 800df76:	e054      	b.n	800e022 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	0a5b      	lsrs	r3, r3, #9
 800df7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df7e:	4413      	add	r3, r2
 800df80:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	699a      	ldr	r2, [r3, #24]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d90a      	bls.n	800dfa4 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	699a      	ldr	r2, [r3, #24]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	7d1b      	ldrb	r3, [r3, #20]
 800df9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df9e:	b2da      	uxtb	r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	699b      	ldr	r3, [r3, #24]
 800dfa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d036      	beq.n	800e01e <f_lseek+0x406>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6a1b      	ldr	r3, [r3, #32]
 800dfb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d031      	beq.n	800e01e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	7d1b      	ldrb	r3, [r3, #20]
 800dfbe:	b25b      	sxtb	r3, r3
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	da18      	bge.n	800dff6 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	7858      	ldrb	r0, [r3, #1]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a1a      	ldr	r2, [r3, #32]
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	f7fc fe08 	bl	800abe8 <disk_write>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d004      	beq.n	800dfe8 <f_lseek+0x3d0>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	755a      	strb	r2, [r3, #21]
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	e01c      	b.n	800e022 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	7d1b      	ldrb	r3, [r3, #20]
 800dfec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dff0:	b2da      	uxtb	r2, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	7858      	ldrb	r0, [r3, #1]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e000:	2301      	movs	r3, #1
 800e002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e004:	f7fc fdd0 	bl	800aba8 <disk_read>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d004      	beq.n	800e018 <f_lseek+0x400>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2201      	movs	r2, #1
 800e012:	755a      	strb	r2, [r3, #21]
 800e014:	2301      	movs	r3, #1
 800e016:	e004      	b.n	800e022 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e01c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e01e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e022:	4618      	mov	r0, r3
 800e024:	3740      	adds	r7, #64	; 0x40
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b086      	sub	sp, #24
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
 800e032:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d101      	bne.n	800e03e <f_opendir+0x14>
 800e03a:	2309      	movs	r3, #9
 800e03c:	e074      	b.n	800e128 <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e042:	f107 0108 	add.w	r1, r7, #8
 800e046:	463b      	mov	r3, r7
 800e048:	2200      	movs	r2, #0
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7fe fdf2 	bl	800cc34 <find_volume>
 800e050:	4603      	mov	r3, r0
 800e052:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e054:	7dfb      	ldrb	r3, [r7, #23]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d15f      	bne.n	800e11a <f_opendir+0xf0>
		obj->fs = fs;
 800e05a:	68ba      	ldr	r2, [r7, #8]
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800e060:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e064:	f000 fc7d 	bl	800e962 <ff_memalloc>
 800e068:	60f8      	str	r0, [r7, #12]
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d101      	bne.n	800e074 <f_opendir+0x4a>
 800e070:	2311      	movs	r3, #17
 800e072:	e059      	b.n	800e128 <f_opendir+0xfe>
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	4619      	mov	r1, r3
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f7fe fccc 	bl	800ca1c <follow_path>
 800e084:	4603      	mov	r3, r0
 800e086:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e088:	7dfb      	ldrb	r3, [r7, #23]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d13d      	bne.n	800e10a <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e094:	b25b      	sxtb	r3, r3
 800e096:	2b00      	cmp	r3, #0
 800e098:	db12      	blt.n	800e0c0 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	799b      	ldrb	r3, [r3, #6]
 800e09e:	f003 0310 	and.w	r3, r3, #16
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d00a      	beq.n	800e0bc <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e0a6:	68ba      	ldr	r2, [r7, #8]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6a1b      	ldr	r3, [r3, #32]
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	4610      	mov	r0, r2
 800e0b0:	f7fd fd95 	bl	800bbde <ld_clust>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	609a      	str	r2, [r3, #8]
 800e0ba:	e001      	b.n	800e0c0 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e0bc:	2305      	movs	r3, #5
 800e0be:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e0c0:	7dfb      	ldrb	r3, [r7, #23]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d121      	bne.n	800e10a <f_opendir+0xe0>
				obj->id = fs->id;
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	88da      	ldrh	r2, [r3, #6]
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e0ce:	2100      	movs	r1, #0
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f7fd fbfd 	bl	800b8d0 <dir_sdi>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e0da:	7dfb      	ldrb	r3, [r7, #23]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d114      	bne.n	800e10a <f_opendir+0xe0>
					if (obj->sclust) {
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	689b      	ldr	r3, [r3, #8]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d00d      	beq.n	800e104 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f7fc ff40 	bl	800af70 <inc_lock>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	691b      	ldr	r3, [r3, #16]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d105      	bne.n	800e10a <f_opendir+0xe0>
 800e0fe:	2312      	movs	r3, #18
 800e100:	75fb      	strb	r3, [r7, #23]
 800e102:	e002      	b.n	800e10a <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	2200      	movs	r2, #0
 800e108:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	f000 fc35 	bl	800e97a <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e110:	7dfb      	ldrb	r3, [r7, #23]
 800e112:	2b04      	cmp	r3, #4
 800e114:	d101      	bne.n	800e11a <f_opendir+0xf0>
 800e116:	2305      	movs	r3, #5
 800e118:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e11a:	7dfb      	ldrb	r3, [r7, #23]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d002      	beq.n	800e126 <f_opendir+0xfc>
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	2200      	movs	r2, #0
 800e124:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e126:	7dfb      	ldrb	r3, [r7, #23]
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3718      	adds	r7, #24
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f107 0208 	add.w	r2, r7, #8
 800e13e:	4611      	mov	r1, r2
 800e140:	4618      	mov	r0, r3
 800e142:	f7fe ffc3 	bl	800d0cc <validate>
 800e146:	4603      	mov	r3, r0
 800e148:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e14a:	7bfb      	ldrb	r3, [r7, #15]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d110      	bne.n	800e172 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	691b      	ldr	r3, [r3, #16]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d006      	beq.n	800e166 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	691b      	ldr	r3, [r3, #16]
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7fc ff95 	bl	800b08c <dec_lock>
 800e162:	4603      	mov	r3, r0
 800e164:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e166:	7bfb      	ldrb	r3, [r7, #15]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d102      	bne.n	800e172 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2200      	movs	r2, #0
 800e170:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e172:	7bfb      	ldrb	r3, [r7, #15]
}
 800e174:	4618      	mov	r0, r3
 800e176:	3710      	adds	r7, #16
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b086      	sub	sp, #24
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f107 020c 	add.w	r2, r7, #12
 800e18c:	4611      	mov	r1, r2
 800e18e:	4618      	mov	r0, r3
 800e190:	f7fe ff9c 	bl	800d0cc <validate>
 800e194:	4603      	mov	r3, r0
 800e196:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e198:	7dfb      	ldrb	r3, [r7, #23]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d136      	bne.n	800e20c <f_readdir+0x90>
		if (!fno) {
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d106      	bne.n	800e1b2 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e1a4:	2100      	movs	r1, #0
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f7fd fb92 	bl	800b8d0 <dir_sdi>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	75fb      	strb	r3, [r7, #23]
 800e1b0:	e02c      	b.n	800e20c <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 800e1b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e1b6:	f000 fbd4 	bl	800e962 <ff_memalloc>
 800e1ba:	6138      	str	r0, [r7, #16]
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d101      	bne.n	800e1c6 <f_readdir+0x4a>
 800e1c2:	2311      	movs	r3, #17
 800e1c4:	e023      	b.n	800e20e <f_readdir+0x92>
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	693a      	ldr	r2, [r7, #16]
 800e1ca:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800e1cc:	2100      	movs	r1, #0
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f7fd ff2f 	bl	800c032 <dir_read>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e1d8:	7dfb      	ldrb	r3, [r7, #23]
 800e1da:	2b04      	cmp	r3, #4
 800e1dc:	d101      	bne.n	800e1e2 <f_readdir+0x66>
 800e1de:	2300      	movs	r3, #0
 800e1e0:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800e1e2:	7dfb      	ldrb	r3, [r7, #23]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d10e      	bne.n	800e206 <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e1e8:	6839      	ldr	r1, [r7, #0]
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f7fe f980 	bl	800c4f0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e1f0:	2100      	movs	r1, #0
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f7fd fbe7 	bl	800b9c6 <dir_next>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e1fc:	7dfb      	ldrb	r3, [r7, #23]
 800e1fe:	2b04      	cmp	r3, #4
 800e200:	d101      	bne.n	800e206 <f_readdir+0x8a>
 800e202:	2300      	movs	r3, #0
 800e204:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800e206:	6938      	ldr	r0, [r7, #16]
 800e208:	f000 fbb7 	bl	800e97a <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800e20c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3718      	adds	r7, #24
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b092      	sub	sp, #72	; 0x48
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	60f8      	str	r0, [r7, #12]
 800e21e:	60b9      	str	r1, [r7, #8]
 800e220:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800e222:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e226:	f107 030c 	add.w	r3, r7, #12
 800e22a:	2200      	movs	r2, #0
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7fe fd01 	bl	800cc34 <find_volume>
 800e232:	4603      	mov	r3, r0
 800e234:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800e238:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f040 8099 	bne.w	800e374 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800e242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800e248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24a:	695a      	ldr	r2, [r3, #20]
 800e24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24e:	699b      	ldr	r3, [r3, #24]
 800e250:	3b02      	subs	r3, #2
 800e252:	429a      	cmp	r2, r3
 800e254:	d804      	bhi.n	800e260 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800e256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e258:	695a      	ldr	r2, [r3, #20]
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	601a      	str	r2, [r3, #0]
 800e25e:	e089      	b.n	800e374 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800e260:	2300      	movs	r3, #0
 800e262:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800e264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d128      	bne.n	800e2be <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800e26c:	2302      	movs	r3, #2
 800e26e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e272:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800e274:	f107 0314 	add.w	r3, r7, #20
 800e278:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7fd f865 	bl	800b34a <get_fat>
 800e280:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800e282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e288:	d103      	bne.n	800e292 <f_getfree+0x7c>
 800e28a:	2301      	movs	r3, #1
 800e28c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e290:	e063      	b.n	800e35a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800e292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e294:	2b01      	cmp	r3, #1
 800e296:	d103      	bne.n	800e2a0 <f_getfree+0x8a>
 800e298:	2302      	movs	r3, #2
 800e29a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e29e:	e05c      	b.n	800e35a <f_getfree+0x144>
					if (stat == 0) nfree++;
 800e2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d102      	bne.n	800e2ac <f_getfree+0x96>
 800e2a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800e2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b4:	699b      	ldr	r3, [r3, #24]
 800e2b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d3db      	bcc.n	800e274 <f_getfree+0x5e>
 800e2bc:	e04d      	b.n	800e35a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800e2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c0:	699b      	ldr	r3, [r3, #24]
 800e2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c8:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	637b      	str	r3, [r7, #52]	; 0x34
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800e2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d113      	bne.n	800e300 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800e2d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2dc:	1c5a      	adds	r2, r3, #1
 800e2de:	63ba      	str	r2, [r7, #56]	; 0x38
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	f7fc ff77 	bl	800b1d4 <move_window>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800e2ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d131      	bne.n	800e358 <f_getfree+0x142>
							p = fs->win;
 800e2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f6:	3334      	adds	r3, #52	; 0x34
 800e2f8:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800e2fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2fe:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800e300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	2b02      	cmp	r3, #2
 800e306:	d10f      	bne.n	800e328 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800e308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e30a:	f7fc fcb3 	bl	800ac74 <ld_word>
 800e30e:	4603      	mov	r3, r0
 800e310:	2b00      	cmp	r3, #0
 800e312:	d102      	bne.n	800e31a <f_getfree+0x104>
 800e314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e316:	3301      	adds	r3, #1
 800e318:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800e31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31c:	3302      	adds	r3, #2
 800e31e:	633b      	str	r3, [r7, #48]	; 0x30
 800e320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e322:	3b02      	subs	r3, #2
 800e324:	637b      	str	r3, [r7, #52]	; 0x34
 800e326:	e010      	b.n	800e34a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800e328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e32a:	f7fc fcbb 	bl	800aca4 <ld_dword>
 800e32e:	4603      	mov	r3, r0
 800e330:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e334:	2b00      	cmp	r3, #0
 800e336:	d102      	bne.n	800e33e <f_getfree+0x128>
 800e338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e33a:	3301      	adds	r3, #1
 800e33c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800e33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e340:	3304      	adds	r3, #4
 800e342:	633b      	str	r3, [r7, #48]	; 0x30
 800e344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e346:	3b04      	subs	r3, #4
 800e348:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800e34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e34c:	3b01      	subs	r3, #1
 800e34e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e352:	2b00      	cmp	r3, #0
 800e354:	d1bd      	bne.n	800e2d2 <f_getfree+0xbc>
 800e356:	e000      	b.n	800e35a <f_getfree+0x144>
							if (res != FR_OK) break;
 800e358:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e35e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800e360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e362:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e364:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800e366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e368:	791a      	ldrb	r2, [r3, #4]
 800e36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36c:	f042 0201 	orr.w	r2, r2, #1
 800e370:	b2d2      	uxtb	r2, r2
 800e372:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800e374:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3748      	adds	r7, #72	; 0x48
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	460b      	mov	r3, r1
 800e38a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800e38c:	78fb      	ldrb	r3, [r7, #3]
 800e38e:	2b0a      	cmp	r3, #10
 800e390:	d103      	bne.n	800e39a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800e392:	210d      	movs	r1, #13
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f7ff fff3 	bl	800e380 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	db25      	blt.n	800e3f2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	1c5a      	adds	r2, r3, #1
 800e3aa:	60fa      	str	r2, [r7, #12]
 800e3ac:	687a      	ldr	r2, [r7, #4]
 800e3ae:	4413      	add	r3, r2
 800e3b0:	78fa      	ldrb	r2, [r7, #3]
 800e3b2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2b3c      	cmp	r3, #60	; 0x3c
 800e3b8:	dd12      	ble.n	800e3e0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6818      	ldr	r0, [r3, #0]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f103 010c 	add.w	r1, r3, #12
 800e3c4:	68fa      	ldr	r2, [r7, #12]
 800e3c6:	f107 0308 	add.w	r3, r7, #8
 800e3ca:	f7ff fa08 	bl	800d7de <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800e3ce:	68ba      	ldr	r2, [r7, #8]
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d101      	bne.n	800e3da <putc_bfd+0x5a>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e001      	b.n	800e3de <putc_bfd+0x5e>
 800e3da:	f04f 33ff 	mov.w	r3, #4294967295
 800e3de:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	68fa      	ldr	r2, [r7, #12]
 800e3e4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	689b      	ldr	r3, [r3, #8]
 800e3ea:	1c5a      	adds	r2, r3, #1
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	609a      	str	r2, [r3, #8]
 800e3f0:	e000      	b.n	800e3f4 <putc_bfd+0x74>
	if (i < 0) return;
 800e3f2:	bf00      	nop
}
 800e3f4:	3710      	adds	r7, #16
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b084      	sub	sp, #16
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	2b00      	cmp	r3, #0
 800e408:	db16      	blt.n	800e438 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6818      	ldr	r0, [r3, #0]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f103 010c 	add.w	r1, r3, #12
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	461a      	mov	r2, r3
 800e41a:	f107 030c 	add.w	r3, r7, #12
 800e41e:	f7ff f9de 	bl	800d7de <f_write>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d107      	bne.n	800e438 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	68fa      	ldr	r2, [r7, #12]
 800e42e:	4293      	cmp	r3, r2
 800e430:	d102      	bne.n	800e438 <putc_flush+0x3e>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	689b      	ldr	r3, [r3, #8]
 800e436:	e001      	b.n	800e43c <putc_flush+0x42>
	return EOF;
 800e438:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3710      	adds	r7, #16
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	683a      	ldr	r2, [r7, #0]
 800e452:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2200      	movs	r2, #0
 800e458:	605a      	str	r2, [r3, #4]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	685a      	ldr	r2, [r3, #4]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	609a      	str	r2, [r3, #8]
}
 800e462:	bf00      	nop
 800e464:	370c      	adds	r7, #12
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr
	...

0800e470 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800e470:	b40e      	push	{r1, r2, r3}
 800e472:	b580      	push	{r7, lr}
 800e474:	b0a7      	sub	sp, #156	; 0x9c
 800e476:	af00      	add	r7, sp, #0
 800e478:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800e47a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e47e:	6879      	ldr	r1, [r7, #4]
 800e480:	4618      	mov	r0, r3
 800e482:	f7ff ffdf 	bl	800e444 <putc_init>

	va_start(arp, fmt);
 800e486:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e48a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800e48c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e490:	1c5a      	adds	r2, r3, #1
 800e492:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800e49c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	f000 81f2 	beq.w	800e88a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800e4a6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e4aa:	2b25      	cmp	r3, #37	; 0x25
 800e4ac:	d008      	beq.n	800e4c0 <f_printf+0x50>
			putc_bfd(&pb, c);
 800e4ae:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800e4b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e4b6:	4611      	mov	r1, r2
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7ff ff61 	bl	800e380 <putc_bfd>
			continue;
 800e4be:	e1e3      	b.n	800e888 <f_printf+0x418>
		}
		w = f = 0;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800e4cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e4d0:	1c5a      	adds	r2, r3, #1
 800e4d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800e4dc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e4e0:	2b30      	cmp	r3, #48	; 0x30
 800e4e2:	d10b      	bne.n	800e4fc <f_printf+0x8c>
			f = 1; c = *fmt++;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e4ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e4ee:	1c5a      	adds	r2, r3, #1
 800e4f0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800e4fa:	e024      	b.n	800e546 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800e4fc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e500:	2b2d      	cmp	r3, #45	; 0x2d
 800e502:	d120      	bne.n	800e546 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800e504:	2302      	movs	r3, #2
 800e506:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e50a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e50e:	1c5a      	adds	r2, r3, #1
 800e510:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800e51a:	e014      	b.n	800e546 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800e51c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e520:	4613      	mov	r3, r2
 800e522:	009b      	lsls	r3, r3, #2
 800e524:	4413      	add	r3, r2
 800e526:	005b      	lsls	r3, r3, #1
 800e528:	461a      	mov	r2, r3
 800e52a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e52e:	4413      	add	r3, r2
 800e530:	3b30      	subs	r3, #48	; 0x30
 800e532:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800e536:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e53a:	1c5a      	adds	r2, r3, #1
 800e53c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800e546:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e54a:	2b2f      	cmp	r3, #47	; 0x2f
 800e54c:	d903      	bls.n	800e556 <f_printf+0xe6>
 800e54e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e552:	2b39      	cmp	r3, #57	; 0x39
 800e554:	d9e2      	bls.n	800e51c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800e556:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e55a:	2b6c      	cmp	r3, #108	; 0x6c
 800e55c:	d003      	beq.n	800e566 <f_printf+0xf6>
 800e55e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e562:	2b4c      	cmp	r3, #76	; 0x4c
 800e564:	d10d      	bne.n	800e582 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800e566:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e56a:	f043 0304 	orr.w	r3, r3, #4
 800e56e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e572:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e576:	1c5a      	adds	r2, r3, #1
 800e578:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800e582:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e586:	2b00      	cmp	r3, #0
 800e588:	f000 8181 	beq.w	800e88e <f_printf+0x41e>
		d = c;
 800e58c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e590:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800e594:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e598:	2b60      	cmp	r3, #96	; 0x60
 800e59a:	d908      	bls.n	800e5ae <f_printf+0x13e>
 800e59c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e5a0:	2b7a      	cmp	r3, #122	; 0x7a
 800e5a2:	d804      	bhi.n	800e5ae <f_printf+0x13e>
 800e5a4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e5a8:	3b20      	subs	r3, #32
 800e5aa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800e5ae:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e5b2:	3b42      	subs	r3, #66	; 0x42
 800e5b4:	2b16      	cmp	r3, #22
 800e5b6:	f200 8098 	bhi.w	800e6ea <f_printf+0x27a>
 800e5ba:	a201      	add	r2, pc, #4	; (adr r2, 800e5c0 <f_printf+0x150>)
 800e5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c0:	0800e6cb 	.word	0x0800e6cb
 800e5c4:	0800e6b3 	.word	0x0800e6b3
 800e5c8:	0800e6db 	.word	0x0800e6db
 800e5cc:	0800e6eb 	.word	0x0800e6eb
 800e5d0:	0800e6eb 	.word	0x0800e6eb
 800e5d4:	0800e6eb 	.word	0x0800e6eb
 800e5d8:	0800e6eb 	.word	0x0800e6eb
 800e5dc:	0800e6eb 	.word	0x0800e6eb
 800e5e0:	0800e6eb 	.word	0x0800e6eb
 800e5e4:	0800e6eb 	.word	0x0800e6eb
 800e5e8:	0800e6eb 	.word	0x0800e6eb
 800e5ec:	0800e6eb 	.word	0x0800e6eb
 800e5f0:	0800e6eb 	.word	0x0800e6eb
 800e5f4:	0800e6d3 	.word	0x0800e6d3
 800e5f8:	0800e6eb 	.word	0x0800e6eb
 800e5fc:	0800e6eb 	.word	0x0800e6eb
 800e600:	0800e6eb 	.word	0x0800e6eb
 800e604:	0800e61d 	.word	0x0800e61d
 800e608:	0800e6eb 	.word	0x0800e6eb
 800e60c:	0800e6db 	.word	0x0800e6db
 800e610:	0800e6eb 	.word	0x0800e6eb
 800e614:	0800e6eb 	.word	0x0800e6eb
 800e618:	0800e6e3 	.word	0x0800e6e3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800e61c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e61e:	1d1a      	adds	r2, r3, #4
 800e620:	67ba      	str	r2, [r7, #120]	; 0x78
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800e626:	2300      	movs	r3, #0
 800e628:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e62c:	e004      	b.n	800e638 <f_printf+0x1c8>
 800e62e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e632:	3301      	adds	r3, #1
 800e634:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e638:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e63a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e63e:	4413      	add	r3, r2
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1f3      	bne.n	800e62e <f_printf+0x1be>
			if (!(f & 2)) {
 800e646:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e64a:	f003 0302 	and.w	r3, r3, #2
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d11a      	bne.n	800e688 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800e652:	e005      	b.n	800e660 <f_printf+0x1f0>
 800e654:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e658:	2120      	movs	r1, #32
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7ff fe90 	bl	800e380 <putc_bfd>
 800e660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e664:	1c5a      	adds	r2, r3, #1
 800e666:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e66a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e66e:	429a      	cmp	r2, r3
 800e670:	d8f0      	bhi.n	800e654 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800e672:	e009      	b.n	800e688 <f_printf+0x218>
 800e674:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e676:	1c5a      	adds	r2, r3, #1
 800e678:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e67a:	781a      	ldrb	r2, [r3, #0]
 800e67c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e680:	4611      	mov	r1, r2
 800e682:	4618      	mov	r0, r3
 800e684:	f7ff fe7c 	bl	800e380 <putc_bfd>
 800e688:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d1f1      	bne.n	800e674 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800e690:	e005      	b.n	800e69e <f_printf+0x22e>
 800e692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e696:	2120      	movs	r1, #32
 800e698:	4618      	mov	r0, r3
 800e69a:	f7ff fe71 	bl	800e380 <putc_bfd>
 800e69e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e6a2:	1c5a      	adds	r2, r3, #1
 800e6a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e6a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d8f0      	bhi.n	800e692 <f_printf+0x222>
			continue;
 800e6b0:	e0ea      	b.n	800e888 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800e6b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6b4:	1d1a      	adds	r2, r3, #4
 800e6b6:	67ba      	str	r2, [r7, #120]	; 0x78
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	b2da      	uxtb	r2, r3
 800e6bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e6c0:	4611      	mov	r1, r2
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7ff fe5c 	bl	800e380 <putc_bfd>
 800e6c8:	e0de      	b.n	800e888 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800e6ca:	2302      	movs	r3, #2
 800e6cc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800e6d0:	e014      	b.n	800e6fc <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800e6d2:	2308      	movs	r3, #8
 800e6d4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800e6d8:	e010      	b.n	800e6fc <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800e6da:	230a      	movs	r3, #10
 800e6dc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800e6e0:	e00c      	b.n	800e6fc <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800e6e2:	2310      	movs	r3, #16
 800e6e4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800e6e8:	e008      	b.n	800e6fc <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800e6ea:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800e6ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e6f2:	4611      	mov	r1, r2
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7ff fe43 	bl	800e380 <putc_bfd>
 800e6fa:	e0c5      	b.n	800e888 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800e6fc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e700:	f003 0304 	and.w	r3, r3, #4
 800e704:	2b00      	cmp	r3, #0
 800e706:	d004      	beq.n	800e712 <f_printf+0x2a2>
 800e708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e70a:	1d1a      	adds	r2, r3, #4
 800e70c:	67ba      	str	r2, [r7, #120]	; 0x78
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	e00c      	b.n	800e72c <f_printf+0x2bc>
 800e712:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e716:	2b44      	cmp	r3, #68	; 0x44
 800e718:	d104      	bne.n	800e724 <f_printf+0x2b4>
 800e71a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e71c:	1d1a      	adds	r2, r3, #4
 800e71e:	67ba      	str	r2, [r7, #120]	; 0x78
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	e003      	b.n	800e72c <f_printf+0x2bc>
 800e724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e726:	1d1a      	adds	r2, r3, #4
 800e728:	67ba      	str	r2, [r7, #120]	; 0x78
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800e730:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e734:	2b44      	cmp	r3, #68	; 0x44
 800e736:	d10e      	bne.n	800e756 <f_printf+0x2e6>
 800e738:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	da0a      	bge.n	800e756 <f_printf+0x2e6>
			v = 0 - v;
 800e740:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e744:	425b      	negs	r3, r3
 800e746:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800e74a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e74e:	f043 0308 	orr.w	r3, r3, #8
 800e752:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800e756:	2300      	movs	r3, #0
 800e758:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800e75c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800e760:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e764:	fbb3 f1f2 	udiv	r1, r3, r2
 800e768:	fb01 f202 	mul.w	r2, r1, r2
 800e76c:	1a9b      	subs	r3, r3, r2
 800e76e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800e772:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800e776:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e77a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e77e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800e782:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e786:	2b09      	cmp	r3, #9
 800e788:	d90b      	bls.n	800e7a2 <f_printf+0x332>
 800e78a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e78e:	2b78      	cmp	r3, #120	; 0x78
 800e790:	d101      	bne.n	800e796 <f_printf+0x326>
 800e792:	2227      	movs	r2, #39	; 0x27
 800e794:	e000      	b.n	800e798 <f_printf+0x328>
 800e796:	2207      	movs	r2, #7
 800e798:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e79c:	4413      	add	r3, r2
 800e79e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800e7a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e7a6:	1c5a      	adds	r2, r3, #1
 800e7a8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800e7ac:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800e7b0:	3230      	adds	r2, #48	; 0x30
 800e7b2:	b2d2      	uxtb	r2, r2
 800e7b4:	3398      	adds	r3, #152	; 0x98
 800e7b6:	443b      	add	r3, r7
 800e7b8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800e7bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d003      	beq.n	800e7cc <f_printf+0x35c>
 800e7c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e7c8:	2b1f      	cmp	r3, #31
 800e7ca:	d9c7      	bls.n	800e75c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800e7cc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e7d0:	f003 0308 	and.w	r3, r3, #8
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d009      	beq.n	800e7ec <f_printf+0x37c>
 800e7d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e7dc:	1c5a      	adds	r2, r3, #1
 800e7de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800e7e2:	3398      	adds	r3, #152	; 0x98
 800e7e4:	443b      	add	r3, r7
 800e7e6:	222d      	movs	r2, #45	; 0x2d
 800e7e8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800e7ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e7f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e7f4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e7f8:	f003 0301 	and.w	r3, r3, #1
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d001      	beq.n	800e804 <f_printf+0x394>
 800e800:	2330      	movs	r3, #48	; 0x30
 800e802:	e000      	b.n	800e806 <f_printf+0x396>
 800e804:	2320      	movs	r3, #32
 800e806:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800e80a:	e007      	b.n	800e81c <f_printf+0x3ac>
 800e80c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800e810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e814:	4611      	mov	r1, r2
 800e816:	4618      	mov	r0, r3
 800e818:	f7ff fdb2 	bl	800e380 <putc_bfd>
 800e81c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e820:	f003 0302 	and.w	r3, r3, #2
 800e824:	2b00      	cmp	r3, #0
 800e826:	d108      	bne.n	800e83a <f_printf+0x3ca>
 800e828:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e82c:	1c5a      	adds	r2, r3, #1
 800e82e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e832:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e836:	429a      	cmp	r2, r3
 800e838:	d8e8      	bhi.n	800e80c <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800e83a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e83e:	3b01      	subs	r3, #1
 800e840:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e844:	f107 020c 	add.w	r2, r7, #12
 800e848:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e84c:	4413      	add	r3, r2
 800e84e:	781a      	ldrb	r2, [r3, #0]
 800e850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e854:	4611      	mov	r1, r2
 800e856:	4618      	mov	r0, r3
 800e858:	f7ff fd92 	bl	800e380 <putc_bfd>
		} while (i);
 800e85c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e860:	2b00      	cmp	r3, #0
 800e862:	d1ea      	bne.n	800e83a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800e864:	e007      	b.n	800e876 <f_printf+0x406>
 800e866:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800e86a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e86e:	4611      	mov	r1, r2
 800e870:	4618      	mov	r0, r3
 800e872:	f7ff fd85 	bl	800e380 <putc_bfd>
 800e876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e87a:	1c5a      	adds	r2, r3, #1
 800e87c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e880:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e884:	429a      	cmp	r2, r3
 800e886:	d8ee      	bhi.n	800e866 <f_printf+0x3f6>
		c = *fmt++;
 800e888:	e600      	b.n	800e48c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800e88a:	bf00      	nop
 800e88c:	e000      	b.n	800e890 <f_printf+0x420>
		if (!c) break;
 800e88e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800e890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e894:	4618      	mov	r0, r3
 800e896:	f7ff fdb0 	bl	800e3fa <putc_flush>
 800e89a:	4603      	mov	r3, r0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	379c      	adds	r7, #156	; 0x9c
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e8a6:	b003      	add	sp, #12
 800e8a8:	4770      	bx	lr
 800e8aa:	bf00      	nop

0800e8ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b087      	sub	sp, #28
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	4613      	mov	r3, r2
 800e8b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e8c2:	4b1f      	ldr	r3, [pc, #124]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e8c4:	7b9b      	ldrb	r3, [r3, #14]
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	2b01      	cmp	r3, #1
 800e8ca:	d831      	bhi.n	800e930 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e8cc:	4b1c      	ldr	r3, [pc, #112]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e8ce:	7b9b      	ldrb	r3, [r3, #14]
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	4b1a      	ldr	r3, [pc, #104]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e8d6:	2100      	movs	r1, #0
 800e8d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e8da:	4b19      	ldr	r3, [pc, #100]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e8dc:	7b9b      	ldrb	r3, [r3, #14]
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	4a17      	ldr	r2, [pc, #92]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e8e2:	009b      	lsls	r3, r3, #2
 800e8e4:	4413      	add	r3, r2
 800e8e6:	68fa      	ldr	r2, [r7, #12]
 800e8e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e8ea:	4b15      	ldr	r3, [pc, #84]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e8ec:	7b9b      	ldrb	r3, [r3, #14]
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	4b13      	ldr	r3, [pc, #76]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e8f4:	4413      	add	r3, r2
 800e8f6:	79fa      	ldrb	r2, [r7, #7]
 800e8f8:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800e8fa:	4b11      	ldr	r3, [pc, #68]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e8fc:	7b9b      	ldrb	r3, [r3, #14]
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	1c5a      	adds	r2, r3, #1
 800e902:	b2d1      	uxtb	r1, r2
 800e904:	4a0e      	ldr	r2, [pc, #56]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e906:	7391      	strb	r1, [r2, #14]
 800e908:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e90a:	7dbb      	ldrb	r3, [r7, #22]
 800e90c:	3330      	adds	r3, #48	; 0x30
 800e90e:	b2da      	uxtb	r2, r3
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	3301      	adds	r3, #1
 800e918:	223a      	movs	r2, #58	; 0x3a
 800e91a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	3302      	adds	r3, #2
 800e920:	222f      	movs	r2, #47	; 0x2f
 800e922:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	3303      	adds	r3, #3
 800e928:	2200      	movs	r2, #0
 800e92a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e92c:	2300      	movs	r3, #0
 800e92e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e930:	7dfb      	ldrb	r3, [r7, #23]
}
 800e932:	4618      	mov	r0, r3
 800e934:	371c      	adds	r7, #28
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr
 800e93e:	bf00      	nop
 800e940:	20000e6c 	.word	0x20000e6c

0800e944 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b082      	sub	sp, #8
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e94e:	2200      	movs	r2, #0
 800e950:	6839      	ldr	r1, [r7, #0]
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f7ff ffaa 	bl	800e8ac <FATFS_LinkDriverEx>
 800e958:	4603      	mov	r3, r0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3708      	adds	r7, #8
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}

0800e962 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800e962:	b580      	push	{r7, lr}
 800e964:	b082      	sub	sp, #8
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f002 fe1c 	bl	80115a8 <malloc>
 800e970:	4603      	mov	r3, r0
}
 800e972:	4618      	mov	r0, r3
 800e974:	3708      	adds	r7, #8
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}

0800e97a <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b082      	sub	sp, #8
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f002 fe18 	bl	80115b8 <free>
}
 800e988:	bf00      	nop
 800e98a:	3708      	adds	r7, #8
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e990:	b480      	push	{r7}
 800e992:	b085      	sub	sp, #20
 800e994:	af00      	add	r7, sp, #0
 800e996:	4603      	mov	r3, r0
 800e998:	6039      	str	r1, [r7, #0]
 800e99a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e99c:	88fb      	ldrh	r3, [r7, #6]
 800e99e:	2b7f      	cmp	r3, #127	; 0x7f
 800e9a0:	d802      	bhi.n	800e9a8 <ff_convert+0x18>
		c = chr;
 800e9a2:	88fb      	ldrh	r3, [r7, #6]
 800e9a4:	81fb      	strh	r3, [r7, #14]
 800e9a6:	e025      	b.n	800e9f4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d00b      	beq.n	800e9c6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e9ae:	88fb      	ldrh	r3, [r7, #6]
 800e9b0:	2bff      	cmp	r3, #255	; 0xff
 800e9b2:	d805      	bhi.n	800e9c0 <ff_convert+0x30>
 800e9b4:	88fb      	ldrh	r3, [r7, #6]
 800e9b6:	3b80      	subs	r3, #128	; 0x80
 800e9b8:	4a12      	ldr	r2, [pc, #72]	; (800ea04 <ff_convert+0x74>)
 800e9ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9be:	e000      	b.n	800e9c2 <ff_convert+0x32>
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	81fb      	strh	r3, [r7, #14]
 800e9c4:	e016      	b.n	800e9f4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	81fb      	strh	r3, [r7, #14]
 800e9ca:	e009      	b.n	800e9e0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e9cc:	89fb      	ldrh	r3, [r7, #14]
 800e9ce:	4a0d      	ldr	r2, [pc, #52]	; (800ea04 <ff_convert+0x74>)
 800e9d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9d4:	88fa      	ldrh	r2, [r7, #6]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d006      	beq.n	800e9e8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e9da:	89fb      	ldrh	r3, [r7, #14]
 800e9dc:	3301      	adds	r3, #1
 800e9de:	81fb      	strh	r3, [r7, #14]
 800e9e0:	89fb      	ldrh	r3, [r7, #14]
 800e9e2:	2b7f      	cmp	r3, #127	; 0x7f
 800e9e4:	d9f2      	bls.n	800e9cc <ff_convert+0x3c>
 800e9e6:	e000      	b.n	800e9ea <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e9e8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e9ea:	89fb      	ldrh	r3, [r7, #14]
 800e9ec:	3380      	adds	r3, #128	; 0x80
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	b2db      	uxtb	r3, r3
 800e9f2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e9f4:	89fb      	ldrh	r3, [r7, #14]
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3714      	adds	r7, #20
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr
 800ea02:	bf00      	nop
 800ea04:	08014f3c 	.word	0x08014f3c

0800ea08 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b087      	sub	sp, #28
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	4603      	mov	r3, r0
 800ea10:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ea12:	88fb      	ldrh	r3, [r7, #6]
 800ea14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea18:	d201      	bcs.n	800ea1e <ff_wtoupper+0x16>
 800ea1a:	4b3e      	ldr	r3, [pc, #248]	; (800eb14 <ff_wtoupper+0x10c>)
 800ea1c:	e000      	b.n	800ea20 <ff_wtoupper+0x18>
 800ea1e:	4b3e      	ldr	r3, [pc, #248]	; (800eb18 <ff_wtoupper+0x110>)
 800ea20:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	1c9a      	adds	r2, r3, #2
 800ea26:	617a      	str	r2, [r7, #20]
 800ea28:	881b      	ldrh	r3, [r3, #0]
 800ea2a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ea2c:	8a7b      	ldrh	r3, [r7, #18]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d068      	beq.n	800eb04 <ff_wtoupper+0xfc>
 800ea32:	88fa      	ldrh	r2, [r7, #6]
 800ea34:	8a7b      	ldrh	r3, [r7, #18]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d364      	bcc.n	800eb04 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	1c9a      	adds	r2, r3, #2
 800ea3e:	617a      	str	r2, [r7, #20]
 800ea40:	881b      	ldrh	r3, [r3, #0]
 800ea42:	823b      	strh	r3, [r7, #16]
 800ea44:	8a3b      	ldrh	r3, [r7, #16]
 800ea46:	0a1b      	lsrs	r3, r3, #8
 800ea48:	81fb      	strh	r3, [r7, #14]
 800ea4a:	8a3b      	ldrh	r3, [r7, #16]
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ea50:	88fa      	ldrh	r2, [r7, #6]
 800ea52:	8a79      	ldrh	r1, [r7, #18]
 800ea54:	8a3b      	ldrh	r3, [r7, #16]
 800ea56:	440b      	add	r3, r1
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	da49      	bge.n	800eaf0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ea5c:	89fb      	ldrh	r3, [r7, #14]
 800ea5e:	2b08      	cmp	r3, #8
 800ea60:	d84f      	bhi.n	800eb02 <ff_wtoupper+0xfa>
 800ea62:	a201      	add	r2, pc, #4	; (adr r2, 800ea68 <ff_wtoupper+0x60>)
 800ea64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea68:	0800ea8d 	.word	0x0800ea8d
 800ea6c:	0800ea9f 	.word	0x0800ea9f
 800ea70:	0800eab5 	.word	0x0800eab5
 800ea74:	0800eabd 	.word	0x0800eabd
 800ea78:	0800eac5 	.word	0x0800eac5
 800ea7c:	0800eacd 	.word	0x0800eacd
 800ea80:	0800ead5 	.word	0x0800ead5
 800ea84:	0800eadd 	.word	0x0800eadd
 800ea88:	0800eae5 	.word	0x0800eae5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ea8c:	88fa      	ldrh	r2, [r7, #6]
 800ea8e:	8a7b      	ldrh	r3, [r7, #18]
 800ea90:	1ad3      	subs	r3, r2, r3
 800ea92:	005b      	lsls	r3, r3, #1
 800ea94:	697a      	ldr	r2, [r7, #20]
 800ea96:	4413      	add	r3, r2
 800ea98:	881b      	ldrh	r3, [r3, #0]
 800ea9a:	80fb      	strh	r3, [r7, #6]
 800ea9c:	e027      	b.n	800eaee <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ea9e:	88fa      	ldrh	r2, [r7, #6]
 800eaa0:	8a7b      	ldrh	r3, [r7, #18]
 800eaa2:	1ad3      	subs	r3, r2, r3
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	f003 0301 	and.w	r3, r3, #1
 800eaaa:	b29b      	uxth	r3, r3
 800eaac:	88fa      	ldrh	r2, [r7, #6]
 800eaae:	1ad3      	subs	r3, r2, r3
 800eab0:	80fb      	strh	r3, [r7, #6]
 800eab2:	e01c      	b.n	800eaee <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800eab4:	88fb      	ldrh	r3, [r7, #6]
 800eab6:	3b10      	subs	r3, #16
 800eab8:	80fb      	strh	r3, [r7, #6]
 800eaba:	e018      	b.n	800eaee <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800eabc:	88fb      	ldrh	r3, [r7, #6]
 800eabe:	3b20      	subs	r3, #32
 800eac0:	80fb      	strh	r3, [r7, #6]
 800eac2:	e014      	b.n	800eaee <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800eac4:	88fb      	ldrh	r3, [r7, #6]
 800eac6:	3b30      	subs	r3, #48	; 0x30
 800eac8:	80fb      	strh	r3, [r7, #6]
 800eaca:	e010      	b.n	800eaee <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800eacc:	88fb      	ldrh	r3, [r7, #6]
 800eace:	3b1a      	subs	r3, #26
 800ead0:	80fb      	strh	r3, [r7, #6]
 800ead2:	e00c      	b.n	800eaee <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ead4:	88fb      	ldrh	r3, [r7, #6]
 800ead6:	3308      	adds	r3, #8
 800ead8:	80fb      	strh	r3, [r7, #6]
 800eada:	e008      	b.n	800eaee <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800eadc:	88fb      	ldrh	r3, [r7, #6]
 800eade:	3b50      	subs	r3, #80	; 0x50
 800eae0:	80fb      	strh	r3, [r7, #6]
 800eae2:	e004      	b.n	800eaee <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800eae4:	88fb      	ldrh	r3, [r7, #6]
 800eae6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800eaea:	80fb      	strh	r3, [r7, #6]
 800eaec:	bf00      	nop
			}
			break;
 800eaee:	e008      	b.n	800eb02 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800eaf0:	89fb      	ldrh	r3, [r7, #14]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d195      	bne.n	800ea22 <ff_wtoupper+0x1a>
 800eaf6:	8a3b      	ldrh	r3, [r7, #16]
 800eaf8:	005b      	lsls	r3, r3, #1
 800eafa:	697a      	ldr	r2, [r7, #20]
 800eafc:	4413      	add	r3, r2
 800eafe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800eb00:	e78f      	b.n	800ea22 <ff_wtoupper+0x1a>
			break;
 800eb02:	bf00      	nop
	}

	return chr;
 800eb04:	88fb      	ldrh	r3, [r7, #6]
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	371c      	adds	r7, #28
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr
 800eb12:	bf00      	nop
 800eb14:	0801503c 	.word	0x0801503c
 800eb18:	08015230 	.word	0x08015230

0800eb1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	460b      	mov	r3, r1
 800eb26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800eb28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800eb2c:	f002 fcf8 	bl	8011520 <USBD_static_malloc>
 800eb30:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d109      	bne.n	800eb4c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	32b0      	adds	r2, #176	; 0xb0
 800eb42:	2100      	movs	r1, #0
 800eb44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800eb48:	2302      	movs	r3, #2
 800eb4a:	e0d4      	b.n	800ecf6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800eb4c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800eb50:	2100      	movs	r1, #0
 800eb52:	68f8      	ldr	r0, [r7, #12]
 800eb54:	f003 fe10 	bl	8012778 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	32b0      	adds	r2, #176	; 0xb0
 800eb62:	68f9      	ldr	r1, [r7, #12]
 800eb64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	32b0      	adds	r2, #176	; 0xb0
 800eb72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	7c1b      	ldrb	r3, [r3, #16]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d138      	bne.n	800ebf6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800eb84:	4b5e      	ldr	r3, [pc, #376]	; (800ed00 <USBD_CDC_Init+0x1e4>)
 800eb86:	7819      	ldrb	r1, [r3, #0]
 800eb88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb8c:	2202      	movs	r2, #2
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f002 fba3 	bl	80112da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800eb94:	4b5a      	ldr	r3, [pc, #360]	; (800ed00 <USBD_CDC_Init+0x1e4>)
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	f003 020f 	and.w	r2, r3, #15
 800eb9c:	6879      	ldr	r1, [r7, #4]
 800eb9e:	4613      	mov	r3, r2
 800eba0:	009b      	lsls	r3, r3, #2
 800eba2:	4413      	add	r3, r2
 800eba4:	009b      	lsls	r3, r3, #2
 800eba6:	440b      	add	r3, r1
 800eba8:	3324      	adds	r3, #36	; 0x24
 800ebaa:	2201      	movs	r2, #1
 800ebac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ebae:	4b55      	ldr	r3, [pc, #340]	; (800ed04 <USBD_CDC_Init+0x1e8>)
 800ebb0:	7819      	ldrb	r1, [r3, #0]
 800ebb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebb6:	2202      	movs	r2, #2
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f002 fb8e 	bl	80112da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ebbe:	4b51      	ldr	r3, [pc, #324]	; (800ed04 <USBD_CDC_Init+0x1e8>)
 800ebc0:	781b      	ldrb	r3, [r3, #0]
 800ebc2:	f003 020f 	and.w	r2, r3, #15
 800ebc6:	6879      	ldr	r1, [r7, #4]
 800ebc8:	4613      	mov	r3, r2
 800ebca:	009b      	lsls	r3, r3, #2
 800ebcc:	4413      	add	r3, r2
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	440b      	add	r3, r1
 800ebd2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ebda:	4b4b      	ldr	r3, [pc, #300]	; (800ed08 <USBD_CDC_Init+0x1ec>)
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	f003 020f 	and.w	r2, r3, #15
 800ebe2:	6879      	ldr	r1, [r7, #4]
 800ebe4:	4613      	mov	r3, r2
 800ebe6:	009b      	lsls	r3, r3, #2
 800ebe8:	4413      	add	r3, r2
 800ebea:	009b      	lsls	r3, r3, #2
 800ebec:	440b      	add	r3, r1
 800ebee:	3326      	adds	r3, #38	; 0x26
 800ebf0:	2210      	movs	r2, #16
 800ebf2:	801a      	strh	r2, [r3, #0]
 800ebf4:	e035      	b.n	800ec62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ebf6:	4b42      	ldr	r3, [pc, #264]	; (800ed00 <USBD_CDC_Init+0x1e4>)
 800ebf8:	7819      	ldrb	r1, [r3, #0]
 800ebfa:	2340      	movs	r3, #64	; 0x40
 800ebfc:	2202      	movs	r2, #2
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f002 fb6b 	bl	80112da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ec04:	4b3e      	ldr	r3, [pc, #248]	; (800ed00 <USBD_CDC_Init+0x1e4>)
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	f003 020f 	and.w	r2, r3, #15
 800ec0c:	6879      	ldr	r1, [r7, #4]
 800ec0e:	4613      	mov	r3, r2
 800ec10:	009b      	lsls	r3, r3, #2
 800ec12:	4413      	add	r3, r2
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	440b      	add	r3, r1
 800ec18:	3324      	adds	r3, #36	; 0x24
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ec1e:	4b39      	ldr	r3, [pc, #228]	; (800ed04 <USBD_CDC_Init+0x1e8>)
 800ec20:	7819      	ldrb	r1, [r3, #0]
 800ec22:	2340      	movs	r3, #64	; 0x40
 800ec24:	2202      	movs	r2, #2
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f002 fb57 	bl	80112da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ec2c:	4b35      	ldr	r3, [pc, #212]	; (800ed04 <USBD_CDC_Init+0x1e8>)
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	f003 020f 	and.w	r2, r3, #15
 800ec34:	6879      	ldr	r1, [r7, #4]
 800ec36:	4613      	mov	r3, r2
 800ec38:	009b      	lsls	r3, r3, #2
 800ec3a:	4413      	add	r3, r2
 800ec3c:	009b      	lsls	r3, r3, #2
 800ec3e:	440b      	add	r3, r1
 800ec40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ec44:	2201      	movs	r2, #1
 800ec46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ec48:	4b2f      	ldr	r3, [pc, #188]	; (800ed08 <USBD_CDC_Init+0x1ec>)
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	f003 020f 	and.w	r2, r3, #15
 800ec50:	6879      	ldr	r1, [r7, #4]
 800ec52:	4613      	mov	r3, r2
 800ec54:	009b      	lsls	r3, r3, #2
 800ec56:	4413      	add	r3, r2
 800ec58:	009b      	lsls	r3, r3, #2
 800ec5a:	440b      	add	r3, r1
 800ec5c:	3326      	adds	r3, #38	; 0x26
 800ec5e:	2210      	movs	r2, #16
 800ec60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ec62:	4b29      	ldr	r3, [pc, #164]	; (800ed08 <USBD_CDC_Init+0x1ec>)
 800ec64:	7819      	ldrb	r1, [r3, #0]
 800ec66:	2308      	movs	r3, #8
 800ec68:	2203      	movs	r2, #3
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f002 fb35 	bl	80112da <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ec70:	4b25      	ldr	r3, [pc, #148]	; (800ed08 <USBD_CDC_Init+0x1ec>)
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	f003 020f 	and.w	r2, r3, #15
 800ec78:	6879      	ldr	r1, [r7, #4]
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	009b      	lsls	r3, r3, #2
 800ec7e:	4413      	add	r3, r2
 800ec80:	009b      	lsls	r3, r3, #2
 800ec82:	440b      	add	r3, r1
 800ec84:	3324      	adds	r3, #36	; 0x24
 800ec86:	2201      	movs	r2, #1
 800ec88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ec98:	687a      	ldr	r2, [r7, #4]
 800ec9a:	33b0      	adds	r3, #176	; 0xb0
 800ec9c:	009b      	lsls	r3, r3, #2
 800ec9e:	4413      	add	r3, r2
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d101      	bne.n	800ecc4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ecc0:	2302      	movs	r3, #2
 800ecc2:	e018      	b.n	800ecf6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	7c1b      	ldrb	r3, [r3, #16]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d10a      	bne.n	800ece2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800eccc:	4b0d      	ldr	r3, [pc, #52]	; (800ed04 <USBD_CDC_Init+0x1e8>)
 800ecce:	7819      	ldrb	r1, [r3, #0]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ecd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f002 fbec 	bl	80114b8 <USBD_LL_PrepareReceive>
 800ece0:	e008      	b.n	800ecf4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ece2:	4b08      	ldr	r3, [pc, #32]	; (800ed04 <USBD_CDC_Init+0x1e8>)
 800ece4:	7819      	ldrb	r1, [r3, #0]
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ecec:	2340      	movs	r3, #64	; 0x40
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f002 fbe2 	bl	80114b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ecf4:	2300      	movs	r3, #0
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	200000e3 	.word	0x200000e3
 800ed04:	200000e4 	.word	0x200000e4
 800ed08:	200000e5 	.word	0x200000e5

0800ed0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	460b      	mov	r3, r1
 800ed16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ed18:	4b3a      	ldr	r3, [pc, #232]	; (800ee04 <USBD_CDC_DeInit+0xf8>)
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f002 fb01 	bl	8011326 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ed24:	4b37      	ldr	r3, [pc, #220]	; (800ee04 <USBD_CDC_DeInit+0xf8>)
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	f003 020f 	and.w	r2, r3, #15
 800ed2c:	6879      	ldr	r1, [r7, #4]
 800ed2e:	4613      	mov	r3, r2
 800ed30:	009b      	lsls	r3, r3, #2
 800ed32:	4413      	add	r3, r2
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	440b      	add	r3, r1
 800ed38:	3324      	adds	r3, #36	; 0x24
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ed3e:	4b32      	ldr	r3, [pc, #200]	; (800ee08 <USBD_CDC_DeInit+0xfc>)
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	4619      	mov	r1, r3
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f002 faee 	bl	8011326 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ed4a:	4b2f      	ldr	r3, [pc, #188]	; (800ee08 <USBD_CDC_DeInit+0xfc>)
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	f003 020f 	and.w	r2, r3, #15
 800ed52:	6879      	ldr	r1, [r7, #4]
 800ed54:	4613      	mov	r3, r2
 800ed56:	009b      	lsls	r3, r3, #2
 800ed58:	4413      	add	r3, r2
 800ed5a:	009b      	lsls	r3, r3, #2
 800ed5c:	440b      	add	r3, r1
 800ed5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ed62:	2200      	movs	r2, #0
 800ed64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ed66:	4b29      	ldr	r3, [pc, #164]	; (800ee0c <USBD_CDC_DeInit+0x100>)
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	4619      	mov	r1, r3
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f002 fada 	bl	8011326 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ed72:	4b26      	ldr	r3, [pc, #152]	; (800ee0c <USBD_CDC_DeInit+0x100>)
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	f003 020f 	and.w	r2, r3, #15
 800ed7a:	6879      	ldr	r1, [r7, #4]
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	4413      	add	r3, r2
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	440b      	add	r3, r1
 800ed86:	3324      	adds	r3, #36	; 0x24
 800ed88:	2200      	movs	r2, #0
 800ed8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ed8c:	4b1f      	ldr	r3, [pc, #124]	; (800ee0c <USBD_CDC_DeInit+0x100>)
 800ed8e:	781b      	ldrb	r3, [r3, #0]
 800ed90:	f003 020f 	and.w	r2, r3, #15
 800ed94:	6879      	ldr	r1, [r7, #4]
 800ed96:	4613      	mov	r3, r2
 800ed98:	009b      	lsls	r3, r3, #2
 800ed9a:	4413      	add	r3, r2
 800ed9c:	009b      	lsls	r3, r3, #2
 800ed9e:	440b      	add	r3, r1
 800eda0:	3326      	adds	r3, #38	; 0x26
 800eda2:	2200      	movs	r2, #0
 800eda4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	32b0      	adds	r2, #176	; 0xb0
 800edb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d01f      	beq.n	800edf8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800edbe:	687a      	ldr	r2, [r7, #4]
 800edc0:	33b0      	adds	r3, #176	; 0xb0
 800edc2:	009b      	lsls	r3, r3, #2
 800edc4:	4413      	add	r3, r2
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	685b      	ldr	r3, [r3, #4]
 800edca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	32b0      	adds	r2, #176	; 0xb0
 800edd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edda:	4618      	mov	r0, r3
 800eddc:	f002 fbae 	bl	801153c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	32b0      	adds	r2, #176	; 0xb0
 800edea:	2100      	movs	r1, #0
 800edec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800edf8:	2300      	movs	r3, #0
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3708      	adds	r7, #8
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
 800ee02:	bf00      	nop
 800ee04:	200000e3 	.word	0x200000e3
 800ee08:	200000e4 	.word	0x200000e4
 800ee0c:	200000e5 	.word	0x200000e5

0800ee10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b086      	sub	sp, #24
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	32b0      	adds	r2, #176	; 0xb0
 800ee24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee32:	2300      	movs	r3, #0
 800ee34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d101      	bne.n	800ee40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ee3c:	2303      	movs	r3, #3
 800ee3e:	e0bf      	b.n	800efc0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d050      	beq.n	800eeee <USBD_CDC_Setup+0xde>
 800ee4c:	2b20      	cmp	r3, #32
 800ee4e:	f040 80af 	bne.w	800efb0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	88db      	ldrh	r3, [r3, #6]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d03a      	beq.n	800eed0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	b25b      	sxtb	r3, r3
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	da1b      	bge.n	800ee9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	33b0      	adds	r3, #176	; 0xb0
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	4413      	add	r3, r2
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	689b      	ldr	r3, [r3, #8]
 800ee76:	683a      	ldr	r2, [r7, #0]
 800ee78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ee7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ee7c:	683a      	ldr	r2, [r7, #0]
 800ee7e:	88d2      	ldrh	r2, [r2, #6]
 800ee80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	88db      	ldrh	r3, [r3, #6]
 800ee86:	2b07      	cmp	r3, #7
 800ee88:	bf28      	it	cs
 800ee8a:	2307      	movcs	r3, #7
 800ee8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	89fa      	ldrh	r2, [r7, #14]
 800ee92:	4619      	mov	r1, r3
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f001 fd89 	bl	80109ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ee9a:	e090      	b.n	800efbe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	785a      	ldrb	r2, [r3, #1]
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	88db      	ldrh	r3, [r3, #6]
 800eeaa:	2b3f      	cmp	r3, #63	; 0x3f
 800eeac:	d803      	bhi.n	800eeb6 <USBD_CDC_Setup+0xa6>
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	88db      	ldrh	r3, [r3, #6]
 800eeb2:	b2da      	uxtb	r2, r3
 800eeb4:	e000      	b.n	800eeb8 <USBD_CDC_Setup+0xa8>
 800eeb6:	2240      	movs	r2, #64	; 0x40
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800eebe:	6939      	ldr	r1, [r7, #16]
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800eec6:	461a      	mov	r2, r3
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f001 fd9b 	bl	8010a04 <USBD_CtlPrepareRx>
      break;
 800eece:	e076      	b.n	800efbe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eed6:	687a      	ldr	r2, [r7, #4]
 800eed8:	33b0      	adds	r3, #176	; 0xb0
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	4413      	add	r3, r2
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	683a      	ldr	r2, [r7, #0]
 800eee4:	7850      	ldrb	r0, [r2, #1]
 800eee6:	2200      	movs	r2, #0
 800eee8:	6839      	ldr	r1, [r7, #0]
 800eeea:	4798      	blx	r3
      break;
 800eeec:	e067      	b.n	800efbe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	785b      	ldrb	r3, [r3, #1]
 800eef2:	2b0b      	cmp	r3, #11
 800eef4:	d851      	bhi.n	800ef9a <USBD_CDC_Setup+0x18a>
 800eef6:	a201      	add	r2, pc, #4	; (adr r2, 800eefc <USBD_CDC_Setup+0xec>)
 800eef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eefc:	0800ef2d 	.word	0x0800ef2d
 800ef00:	0800efa9 	.word	0x0800efa9
 800ef04:	0800ef9b 	.word	0x0800ef9b
 800ef08:	0800ef9b 	.word	0x0800ef9b
 800ef0c:	0800ef9b 	.word	0x0800ef9b
 800ef10:	0800ef9b 	.word	0x0800ef9b
 800ef14:	0800ef9b 	.word	0x0800ef9b
 800ef18:	0800ef9b 	.word	0x0800ef9b
 800ef1c:	0800ef9b 	.word	0x0800ef9b
 800ef20:	0800ef9b 	.word	0x0800ef9b
 800ef24:	0800ef57 	.word	0x0800ef57
 800ef28:	0800ef81 	.word	0x0800ef81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef32:	b2db      	uxtb	r3, r3
 800ef34:	2b03      	cmp	r3, #3
 800ef36:	d107      	bne.n	800ef48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ef38:	f107 030a 	add.w	r3, r7, #10
 800ef3c:	2202      	movs	r2, #2
 800ef3e:	4619      	mov	r1, r3
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f001 fd33 	bl	80109ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ef46:	e032      	b.n	800efae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ef48:	6839      	ldr	r1, [r7, #0]
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f001 fcbd 	bl	80108ca <USBD_CtlError>
            ret = USBD_FAIL;
 800ef50:	2303      	movs	r3, #3
 800ef52:	75fb      	strb	r3, [r7, #23]
          break;
 800ef54:	e02b      	b.n	800efae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef5c:	b2db      	uxtb	r3, r3
 800ef5e:	2b03      	cmp	r3, #3
 800ef60:	d107      	bne.n	800ef72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ef62:	f107 030d 	add.w	r3, r7, #13
 800ef66:	2201      	movs	r2, #1
 800ef68:	4619      	mov	r1, r3
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f001 fd1e 	bl	80109ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ef70:	e01d      	b.n	800efae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ef72:	6839      	ldr	r1, [r7, #0]
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f001 fca8 	bl	80108ca <USBD_CtlError>
            ret = USBD_FAIL;
 800ef7a:	2303      	movs	r3, #3
 800ef7c:	75fb      	strb	r3, [r7, #23]
          break;
 800ef7e:	e016      	b.n	800efae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef86:	b2db      	uxtb	r3, r3
 800ef88:	2b03      	cmp	r3, #3
 800ef8a:	d00f      	beq.n	800efac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ef8c:	6839      	ldr	r1, [r7, #0]
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f001 fc9b 	bl	80108ca <USBD_CtlError>
            ret = USBD_FAIL;
 800ef94:	2303      	movs	r3, #3
 800ef96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ef98:	e008      	b.n	800efac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ef9a:	6839      	ldr	r1, [r7, #0]
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f001 fc94 	bl	80108ca <USBD_CtlError>
          ret = USBD_FAIL;
 800efa2:	2303      	movs	r3, #3
 800efa4:	75fb      	strb	r3, [r7, #23]
          break;
 800efa6:	e002      	b.n	800efae <USBD_CDC_Setup+0x19e>
          break;
 800efa8:	bf00      	nop
 800efaa:	e008      	b.n	800efbe <USBD_CDC_Setup+0x1ae>
          break;
 800efac:	bf00      	nop
      }
      break;
 800efae:	e006      	b.n	800efbe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800efb0:	6839      	ldr	r1, [r7, #0]
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f001 fc89 	bl	80108ca <USBD_CtlError>
      ret = USBD_FAIL;
 800efb8:	2303      	movs	r3, #3
 800efba:	75fb      	strb	r3, [r7, #23]
      break;
 800efbc:	bf00      	nop
  }

  return (uint8_t)ret;
 800efbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	3718      	adds	r7, #24
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}

0800efc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	460b      	mov	r3, r1
 800efd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800efda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	32b0      	adds	r2, #176	; 0xb0
 800efe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d101      	bne.n	800eff2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800efee:	2303      	movs	r3, #3
 800eff0:	e065      	b.n	800f0be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	32b0      	adds	r2, #176	; 0xb0
 800effc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f000:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f002:	78fb      	ldrb	r3, [r7, #3]
 800f004:	f003 020f 	and.w	r2, r3, #15
 800f008:	6879      	ldr	r1, [r7, #4]
 800f00a:	4613      	mov	r3, r2
 800f00c:	009b      	lsls	r3, r3, #2
 800f00e:	4413      	add	r3, r2
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	440b      	add	r3, r1
 800f014:	3318      	adds	r3, #24
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d02f      	beq.n	800f07c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f01c:	78fb      	ldrb	r3, [r7, #3]
 800f01e:	f003 020f 	and.w	r2, r3, #15
 800f022:	6879      	ldr	r1, [r7, #4]
 800f024:	4613      	mov	r3, r2
 800f026:	009b      	lsls	r3, r3, #2
 800f028:	4413      	add	r3, r2
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	440b      	add	r3, r1
 800f02e:	3318      	adds	r3, #24
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	78fb      	ldrb	r3, [r7, #3]
 800f034:	f003 010f 	and.w	r1, r3, #15
 800f038:	68f8      	ldr	r0, [r7, #12]
 800f03a:	460b      	mov	r3, r1
 800f03c:	00db      	lsls	r3, r3, #3
 800f03e:	440b      	add	r3, r1
 800f040:	009b      	lsls	r3, r3, #2
 800f042:	4403      	add	r3, r0
 800f044:	331c      	adds	r3, #28
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	fbb2 f1f3 	udiv	r1, r2, r3
 800f04c:	fb01 f303 	mul.w	r3, r1, r3
 800f050:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f052:	2b00      	cmp	r3, #0
 800f054:	d112      	bne.n	800f07c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f056:	78fb      	ldrb	r3, [r7, #3]
 800f058:	f003 020f 	and.w	r2, r3, #15
 800f05c:	6879      	ldr	r1, [r7, #4]
 800f05e:	4613      	mov	r3, r2
 800f060:	009b      	lsls	r3, r3, #2
 800f062:	4413      	add	r3, r2
 800f064:	009b      	lsls	r3, r3, #2
 800f066:	440b      	add	r3, r1
 800f068:	3318      	adds	r3, #24
 800f06a:	2200      	movs	r2, #0
 800f06c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f06e:	78f9      	ldrb	r1, [r7, #3]
 800f070:	2300      	movs	r3, #0
 800f072:	2200      	movs	r2, #0
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f002 f9fe 	bl	8011476 <USBD_LL_Transmit>
 800f07a:	e01f      	b.n	800f0bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	2200      	movs	r2, #0
 800f080:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f08a:	687a      	ldr	r2, [r7, #4]
 800f08c:	33b0      	adds	r3, #176	; 0xb0
 800f08e:	009b      	lsls	r3, r3, #2
 800f090:	4413      	add	r3, r2
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	691b      	ldr	r3, [r3, #16]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d010      	beq.n	800f0bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	33b0      	adds	r3, #176	; 0xb0
 800f0a4:	009b      	lsls	r3, r3, #2
 800f0a6:	4413      	add	r3, r2
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	691b      	ldr	r3, [r3, #16]
 800f0ac:	68ba      	ldr	r2, [r7, #8]
 800f0ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f0b2:	68ba      	ldr	r2, [r7, #8]
 800f0b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f0b8:	78fa      	ldrb	r2, [r7, #3]
 800f0ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f0bc:	2300      	movs	r3, #0
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3710      	adds	r7, #16
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}

0800f0c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f0c6:	b580      	push	{r7, lr}
 800f0c8:	b084      	sub	sp, #16
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	32b0      	adds	r2, #176	; 0xb0
 800f0dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	32b0      	adds	r2, #176	; 0xb0
 800f0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d101      	bne.n	800f0f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f0f4:	2303      	movs	r3, #3
 800f0f6:	e01a      	b.n	800f12e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f0f8:	78fb      	ldrb	r3, [r7, #3]
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f002 f9fc 	bl	80114fa <USBD_LL_GetRxDataSize>
 800f102:	4602      	mov	r2, r0
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f110:	687a      	ldr	r2, [r7, #4]
 800f112:	33b0      	adds	r3, #176	; 0xb0
 800f114:	009b      	lsls	r3, r3, #2
 800f116:	4413      	add	r3, r2
 800f118:	685b      	ldr	r3, [r3, #4]
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	68fa      	ldr	r2, [r7, #12]
 800f11e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f122:	68fa      	ldr	r2, [r7, #12]
 800f124:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f128:	4611      	mov	r1, r2
 800f12a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f12c:	2300      	movs	r3, #0
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3710      	adds	r7, #16
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}

0800f136 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f136:	b580      	push	{r7, lr}
 800f138:	b084      	sub	sp, #16
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	32b0      	adds	r2, #176	; 0xb0
 800f148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f14c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d101      	bne.n	800f158 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f154:	2303      	movs	r3, #3
 800f156:	e025      	b.n	800f1a4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f15e:	687a      	ldr	r2, [r7, #4]
 800f160:	33b0      	adds	r3, #176	; 0xb0
 800f162:	009b      	lsls	r3, r3, #2
 800f164:	4413      	add	r3, r2
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d01a      	beq.n	800f1a2 <USBD_CDC_EP0_RxReady+0x6c>
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f172:	2bff      	cmp	r3, #255	; 0xff
 800f174:	d015      	beq.n	800f1a2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f17c:	687a      	ldr	r2, [r7, #4]
 800f17e:	33b0      	adds	r3, #176	; 0xb0
 800f180:	009b      	lsls	r3, r3, #2
 800f182:	4413      	add	r3, r2
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	689b      	ldr	r3, [r3, #8]
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800f18e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f190:	68fa      	ldr	r2, [r7, #12]
 800f192:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f196:	b292      	uxth	r2, r2
 800f198:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	22ff      	movs	r2, #255	; 0xff
 800f19e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f1a2:	2300      	movs	r3, #0
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b086      	sub	sp, #24
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f1b4:	2182      	movs	r1, #130	; 0x82
 800f1b6:	4818      	ldr	r0, [pc, #96]	; (800f218 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f1b8:	f000 fd4f 	bl	800fc5a <USBD_GetEpDesc>
 800f1bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f1be:	2101      	movs	r1, #1
 800f1c0:	4815      	ldr	r0, [pc, #84]	; (800f218 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f1c2:	f000 fd4a 	bl	800fc5a <USBD_GetEpDesc>
 800f1c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f1c8:	2181      	movs	r1, #129	; 0x81
 800f1ca:	4813      	ldr	r0, [pc, #76]	; (800f218 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f1cc:	f000 fd45 	bl	800fc5a <USBD_GetEpDesc>
 800f1d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d002      	beq.n	800f1de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	2210      	movs	r2, #16
 800f1dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d006      	beq.n	800f1f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f1ec:	711a      	strb	r2, [r3, #4]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d006      	beq.n	800f206 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f200:	711a      	strb	r2, [r3, #4]
 800f202:	2200      	movs	r2, #0
 800f204:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2243      	movs	r2, #67	; 0x43
 800f20a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f20c:	4b02      	ldr	r3, [pc, #8]	; (800f218 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3718      	adds	r7, #24
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	200000a0 	.word	0x200000a0

0800f21c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b086      	sub	sp, #24
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f224:	2182      	movs	r1, #130	; 0x82
 800f226:	4818      	ldr	r0, [pc, #96]	; (800f288 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f228:	f000 fd17 	bl	800fc5a <USBD_GetEpDesc>
 800f22c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f22e:	2101      	movs	r1, #1
 800f230:	4815      	ldr	r0, [pc, #84]	; (800f288 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f232:	f000 fd12 	bl	800fc5a <USBD_GetEpDesc>
 800f236:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f238:	2181      	movs	r1, #129	; 0x81
 800f23a:	4813      	ldr	r0, [pc, #76]	; (800f288 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f23c:	f000 fd0d 	bl	800fc5a <USBD_GetEpDesc>
 800f240:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d002      	beq.n	800f24e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	2210      	movs	r2, #16
 800f24c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d006      	beq.n	800f262 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	2200      	movs	r2, #0
 800f258:	711a      	strb	r2, [r3, #4]
 800f25a:	2200      	movs	r2, #0
 800f25c:	f042 0202 	orr.w	r2, r2, #2
 800f260:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d006      	beq.n	800f276 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2200      	movs	r2, #0
 800f26c:	711a      	strb	r2, [r3, #4]
 800f26e:	2200      	movs	r2, #0
 800f270:	f042 0202 	orr.w	r2, r2, #2
 800f274:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2243      	movs	r2, #67	; 0x43
 800f27a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f27c:	4b02      	ldr	r3, [pc, #8]	; (800f288 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3718      	adds	r7, #24
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	200000a0 	.word	0x200000a0

0800f28c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b086      	sub	sp, #24
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f294:	2182      	movs	r1, #130	; 0x82
 800f296:	4818      	ldr	r0, [pc, #96]	; (800f2f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f298:	f000 fcdf 	bl	800fc5a <USBD_GetEpDesc>
 800f29c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f29e:	2101      	movs	r1, #1
 800f2a0:	4815      	ldr	r0, [pc, #84]	; (800f2f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f2a2:	f000 fcda 	bl	800fc5a <USBD_GetEpDesc>
 800f2a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f2a8:	2181      	movs	r1, #129	; 0x81
 800f2aa:	4813      	ldr	r0, [pc, #76]	; (800f2f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f2ac:	f000 fcd5 	bl	800fc5a <USBD_GetEpDesc>
 800f2b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d002      	beq.n	800f2be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	2210      	movs	r2, #16
 800f2bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d006      	beq.n	800f2d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f2cc:	711a      	strb	r2, [r3, #4]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d006      	beq.n	800f2e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f2e0:	711a      	strb	r2, [r3, #4]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2243      	movs	r2, #67	; 0x43
 800f2ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f2ec:	4b02      	ldr	r3, [pc, #8]	; (800f2f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3718      	adds	r7, #24
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	200000a0 	.word	0x200000a0

0800f2fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	220a      	movs	r2, #10
 800f308:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f30a:	4b03      	ldr	r3, [pc, #12]	; (800f318 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	370c      	adds	r7, #12
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr
 800f318:	2000005c 	.word	0x2000005c

0800f31c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b083      	sub	sp, #12
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d101      	bne.n	800f330 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f32c:	2303      	movs	r3, #3
 800f32e:	e009      	b.n	800f344 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f336:	687a      	ldr	r2, [r7, #4]
 800f338:	33b0      	adds	r3, #176	; 0xb0
 800f33a:	009b      	lsls	r3, r3, #2
 800f33c:	4413      	add	r3, r2
 800f33e:	683a      	ldr	r2, [r7, #0]
 800f340:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f342:	2300      	movs	r3, #0
}
 800f344:	4618      	mov	r0, r3
 800f346:	370c      	adds	r7, #12
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr

0800f350 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f350:	b480      	push	{r7}
 800f352:	b087      	sub	sp, #28
 800f354:	af00      	add	r7, sp, #0
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	60b9      	str	r1, [r7, #8]
 800f35a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	32b0      	adds	r2, #176	; 0xb0
 800f366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f36a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d101      	bne.n	800f376 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f372:	2303      	movs	r3, #3
 800f374:	e008      	b.n	800f388 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	68ba      	ldr	r2, [r7, #8]
 800f37a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	687a      	ldr	r2, [r7, #4]
 800f382:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f386:	2300      	movs	r3, #0
}
 800f388:	4618      	mov	r0, r3
 800f38a:	371c      	adds	r7, #28
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr

0800f394 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f394:	b480      	push	{r7}
 800f396:	b085      	sub	sp, #20
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	32b0      	adds	r2, #176	; 0xb0
 800f3a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d101      	bne.n	800f3b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f3b4:	2303      	movs	r3, #3
 800f3b6:	e004      	b.n	800f3c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	683a      	ldr	r2, [r7, #0]
 800f3bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f3c0:	2300      	movs	r3, #0
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3714      	adds	r7, #20
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr
	...

0800f3d0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	32b0      	adds	r2, #176	; 0xb0
 800f3e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3e6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d101      	bne.n	800f3f6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f3f2:	2303      	movs	r3, #3
 800f3f4:	e025      	b.n	800f442 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d11f      	bne.n	800f440 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	2201      	movs	r2, #1
 800f404:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f408:	4b10      	ldr	r3, [pc, #64]	; (800f44c <USBD_CDC_TransmitPacket+0x7c>)
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	f003 020f 	and.w	r2, r3, #15
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	4613      	mov	r3, r2
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	4413      	add	r3, r2
 800f41e:	009b      	lsls	r3, r3, #2
 800f420:	4403      	add	r3, r0
 800f422:	3318      	adds	r3, #24
 800f424:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f426:	4b09      	ldr	r3, [pc, #36]	; (800f44c <USBD_CDC_TransmitPacket+0x7c>)
 800f428:	7819      	ldrb	r1, [r3, #0]
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f002 f81d 	bl	8011476 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f43c:	2300      	movs	r3, #0
 800f43e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f440:	7bfb      	ldrb	r3, [r7, #15]
}
 800f442:	4618      	mov	r0, r3
 800f444:	3710      	adds	r7, #16
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}
 800f44a:	bf00      	nop
 800f44c:	200000e3 	.word	0x200000e3

0800f450 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	32b0      	adds	r2, #176	; 0xb0
 800f462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f466:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	32b0      	adds	r2, #176	; 0xb0
 800f472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d101      	bne.n	800f47e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f47a:	2303      	movs	r3, #3
 800f47c:	e018      	b.n	800f4b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	7c1b      	ldrb	r3, [r3, #16]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d10a      	bne.n	800f49c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f486:	4b0c      	ldr	r3, [pc, #48]	; (800f4b8 <USBD_CDC_ReceivePacket+0x68>)
 800f488:	7819      	ldrb	r1, [r3, #0]
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f490:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f002 f80f 	bl	80114b8 <USBD_LL_PrepareReceive>
 800f49a:	e008      	b.n	800f4ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f49c:	4b06      	ldr	r3, [pc, #24]	; (800f4b8 <USBD_CDC_ReceivePacket+0x68>)
 800f49e:	7819      	ldrb	r1, [r3, #0]
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f4a6:	2340      	movs	r3, #64	; 0x40
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f002 f805 	bl	80114b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f4ae:	2300      	movs	r3, #0
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3710      	adds	r7, #16
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}
 800f4b8:	200000e4 	.word	0x200000e4

0800f4bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b086      	sub	sp, #24
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	60f8      	str	r0, [r7, #12]
 800f4c4:	60b9      	str	r1, [r7, #8]
 800f4c6:	4613      	mov	r3, r2
 800f4c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d101      	bne.n	800f4d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f4d0:	2303      	movs	r3, #3
 800f4d2:	e01f      	b.n	800f514 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d003      	beq.n	800f4fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	68ba      	ldr	r2, [r7, #8]
 800f4f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	79fa      	ldrb	r2, [r7, #7]
 800f506:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f508:	68f8      	ldr	r0, [r7, #12]
 800f50a:	f001 fe7f 	bl	801120c <USBD_LL_Init>
 800f50e:	4603      	mov	r3, r0
 800f510:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f512:	7dfb      	ldrb	r3, [r7, #23]
}
 800f514:	4618      	mov	r0, r3
 800f516:	3718      	adds	r7, #24
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b084      	sub	sp, #16
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f526:	2300      	movs	r3, #0
 800f528:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d101      	bne.n	800f534 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f530:	2303      	movs	r3, #3
 800f532:	e025      	b.n	800f580 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	683a      	ldr	r2, [r7, #0]
 800f538:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	32ae      	adds	r2, #174	; 0xae
 800f546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d00f      	beq.n	800f570 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	32ae      	adds	r2, #174	; 0xae
 800f55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f560:	f107 020e 	add.w	r2, r7, #14
 800f564:	4610      	mov	r0, r2
 800f566:	4798      	blx	r3
 800f568:	4602      	mov	r2, r0
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f576:	1c5a      	adds	r2, r3, #1
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800f57e:	2300      	movs	r3, #0
}
 800f580:	4618      	mov	r0, r3
 800f582:	3710      	adds	r7, #16
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f001 fe87 	bl	80112a4 <USBD_LL_Start>
 800f596:	4603      	mov	r3, r0
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3708      	adds	r7, #8
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}

0800f5a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	b083      	sub	sp, #12
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f5a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	370c      	adds	r7, #12
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f5b6:	b580      	push	{r7, lr}
 800f5b8:	b084      	sub	sp, #16
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
 800f5be:	460b      	mov	r3, r1
 800f5c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d009      	beq.n	800f5e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	78fa      	ldrb	r2, [r7, #3]
 800f5da:	4611      	mov	r1, r2
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	4798      	blx	r3
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3710      	adds	r7, #16
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}

0800f5ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f5ee:	b580      	push	{r7, lr}
 800f5f0:	b084      	sub	sp, #16
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	78fa      	ldrb	r2, [r7, #3]
 800f608:	4611      	mov	r1, r2
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	4798      	blx	r3
 800f60e:	4603      	mov	r3, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d001      	beq.n	800f618 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f614:	2303      	movs	r3, #3
 800f616:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f618:	7bfb      	ldrb	r3, [r7, #15]
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3710      	adds	r7, #16
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}

0800f622 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f622:	b580      	push	{r7, lr}
 800f624:	b084      	sub	sp, #16
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
 800f62a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f632:	6839      	ldr	r1, [r7, #0]
 800f634:	4618      	mov	r0, r3
 800f636:	f001 f90e 	bl	8010856 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2201      	movs	r2, #1
 800f63e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f648:	461a      	mov	r2, r3
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f656:	f003 031f 	and.w	r3, r3, #31
 800f65a:	2b02      	cmp	r3, #2
 800f65c:	d01a      	beq.n	800f694 <USBD_LL_SetupStage+0x72>
 800f65e:	2b02      	cmp	r3, #2
 800f660:	d822      	bhi.n	800f6a8 <USBD_LL_SetupStage+0x86>
 800f662:	2b00      	cmp	r3, #0
 800f664:	d002      	beq.n	800f66c <USBD_LL_SetupStage+0x4a>
 800f666:	2b01      	cmp	r3, #1
 800f668:	d00a      	beq.n	800f680 <USBD_LL_SetupStage+0x5e>
 800f66a:	e01d      	b.n	800f6a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f672:	4619      	mov	r1, r3
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 fb65 	bl	800fd44 <USBD_StdDevReq>
 800f67a:	4603      	mov	r3, r0
 800f67c:	73fb      	strb	r3, [r7, #15]
      break;
 800f67e:	e020      	b.n	800f6c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f686:	4619      	mov	r1, r3
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 fbcd 	bl	800fe28 <USBD_StdItfReq>
 800f68e:	4603      	mov	r3, r0
 800f690:	73fb      	strb	r3, [r7, #15]
      break;
 800f692:	e016      	b.n	800f6c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f69a:	4619      	mov	r1, r3
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f000 fc2f 	bl	800ff00 <USBD_StdEPReq>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	73fb      	strb	r3, [r7, #15]
      break;
 800f6a6:	e00c      	b.n	800f6c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f6ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f6b2:	b2db      	uxtb	r3, r3
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f001 fe54 	bl	8011364 <USBD_LL_StallEP>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	73fb      	strb	r3, [r7, #15]
      break;
 800f6c0:	bf00      	nop
  }

  return ret;
 800f6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3710      	adds	r7, #16
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b086      	sub	sp, #24
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	607a      	str	r2, [r7, #4]
 800f6d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f6de:	7afb      	ldrb	r3, [r7, #11]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d16e      	bne.n	800f7c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f6ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f6f2:	2b03      	cmp	r3, #3
 800f6f4:	f040 8098 	bne.w	800f828 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	689a      	ldr	r2, [r3, #8]
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	429a      	cmp	r2, r3
 800f702:	d913      	bls.n	800f72c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	689a      	ldr	r2, [r3, #8]
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	1ad2      	subs	r2, r2, r3
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	68da      	ldr	r2, [r3, #12]
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	689b      	ldr	r3, [r3, #8]
 800f71a:	4293      	cmp	r3, r2
 800f71c:	bf28      	it	cs
 800f71e:	4613      	movcs	r3, r2
 800f720:	461a      	mov	r2, r3
 800f722:	6879      	ldr	r1, [r7, #4]
 800f724:	68f8      	ldr	r0, [r7, #12]
 800f726:	f001 f98a 	bl	8010a3e <USBD_CtlContinueRx>
 800f72a:	e07d      	b.n	800f828 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f732:	f003 031f 	and.w	r3, r3, #31
 800f736:	2b02      	cmp	r3, #2
 800f738:	d014      	beq.n	800f764 <USBD_LL_DataOutStage+0x98>
 800f73a:	2b02      	cmp	r3, #2
 800f73c:	d81d      	bhi.n	800f77a <USBD_LL_DataOutStage+0xae>
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d002      	beq.n	800f748 <USBD_LL_DataOutStage+0x7c>
 800f742:	2b01      	cmp	r3, #1
 800f744:	d003      	beq.n	800f74e <USBD_LL_DataOutStage+0x82>
 800f746:	e018      	b.n	800f77a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f748:	2300      	movs	r3, #0
 800f74a:	75bb      	strb	r3, [r7, #22]
            break;
 800f74c:	e018      	b.n	800f780 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f754:	b2db      	uxtb	r3, r3
 800f756:	4619      	mov	r1, r3
 800f758:	68f8      	ldr	r0, [r7, #12]
 800f75a:	f000 fa64 	bl	800fc26 <USBD_CoreFindIF>
 800f75e:	4603      	mov	r3, r0
 800f760:	75bb      	strb	r3, [r7, #22]
            break;
 800f762:	e00d      	b.n	800f780 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f76a:	b2db      	uxtb	r3, r3
 800f76c:	4619      	mov	r1, r3
 800f76e:	68f8      	ldr	r0, [r7, #12]
 800f770:	f000 fa66 	bl	800fc40 <USBD_CoreFindEP>
 800f774:	4603      	mov	r3, r0
 800f776:	75bb      	strb	r3, [r7, #22]
            break;
 800f778:	e002      	b.n	800f780 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f77a:	2300      	movs	r3, #0
 800f77c:	75bb      	strb	r3, [r7, #22]
            break;
 800f77e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f780:	7dbb      	ldrb	r3, [r7, #22]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d119      	bne.n	800f7ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	2b03      	cmp	r3, #3
 800f790:	d113      	bne.n	800f7ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f792:	7dba      	ldrb	r2, [r7, #22]
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	32ae      	adds	r2, #174	; 0xae
 800f798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f79c:	691b      	ldr	r3, [r3, #16]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d00b      	beq.n	800f7ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f7a2:	7dba      	ldrb	r2, [r7, #22]
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f7aa:	7dba      	ldrb	r2, [r7, #22]
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	32ae      	adds	r2, #174	; 0xae
 800f7b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7b4:	691b      	ldr	r3, [r3, #16]
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f7ba:	68f8      	ldr	r0, [r7, #12]
 800f7bc:	f001 f950 	bl	8010a60 <USBD_CtlSendStatus>
 800f7c0:	e032      	b.n	800f828 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f7c2:	7afb      	ldrb	r3, [r7, #11]
 800f7c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	4619      	mov	r1, r3
 800f7cc:	68f8      	ldr	r0, [r7, #12]
 800f7ce:	f000 fa37 	bl	800fc40 <USBD_CoreFindEP>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f7d6:	7dbb      	ldrb	r3, [r7, #22]
 800f7d8:	2bff      	cmp	r3, #255	; 0xff
 800f7da:	d025      	beq.n	800f828 <USBD_LL_DataOutStage+0x15c>
 800f7dc:	7dbb      	ldrb	r3, [r7, #22]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d122      	bne.n	800f828 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	2b03      	cmp	r3, #3
 800f7ec:	d117      	bne.n	800f81e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f7ee:	7dba      	ldrb	r2, [r7, #22]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	32ae      	adds	r2, #174	; 0xae
 800f7f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7f8:	699b      	ldr	r3, [r3, #24]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00f      	beq.n	800f81e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f7fe:	7dba      	ldrb	r2, [r7, #22]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f806:	7dba      	ldrb	r2, [r7, #22]
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	32ae      	adds	r2, #174	; 0xae
 800f80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f810:	699b      	ldr	r3, [r3, #24]
 800f812:	7afa      	ldrb	r2, [r7, #11]
 800f814:	4611      	mov	r1, r2
 800f816:	68f8      	ldr	r0, [r7, #12]
 800f818:	4798      	blx	r3
 800f81a:	4603      	mov	r3, r0
 800f81c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f81e:	7dfb      	ldrb	r3, [r7, #23]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d001      	beq.n	800f828 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f824:	7dfb      	ldrb	r3, [r7, #23]
 800f826:	e000      	b.n	800f82a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f828:	2300      	movs	r3, #0
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3718      	adds	r7, #24
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}

0800f832 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f832:	b580      	push	{r7, lr}
 800f834:	b086      	sub	sp, #24
 800f836:	af00      	add	r7, sp, #0
 800f838:	60f8      	str	r0, [r7, #12]
 800f83a:	460b      	mov	r3, r1
 800f83c:	607a      	str	r2, [r7, #4]
 800f83e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f840:	7afb      	ldrb	r3, [r7, #11]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d16f      	bne.n	800f926 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	3314      	adds	r3, #20
 800f84a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f852:	2b02      	cmp	r3, #2
 800f854:	d15a      	bne.n	800f90c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	689a      	ldr	r2, [r3, #8]
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	429a      	cmp	r2, r3
 800f860:	d914      	bls.n	800f88c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	689a      	ldr	r2, [r3, #8]
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	68db      	ldr	r3, [r3, #12]
 800f86a:	1ad2      	subs	r2, r2, r3
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	689b      	ldr	r3, [r3, #8]
 800f874:	461a      	mov	r2, r3
 800f876:	6879      	ldr	r1, [r7, #4]
 800f878:	68f8      	ldr	r0, [r7, #12]
 800f87a:	f001 f8b2 	bl	80109e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f87e:	2300      	movs	r3, #0
 800f880:	2200      	movs	r2, #0
 800f882:	2100      	movs	r1, #0
 800f884:	68f8      	ldr	r0, [r7, #12]
 800f886:	f001 fe17 	bl	80114b8 <USBD_LL_PrepareReceive>
 800f88a:	e03f      	b.n	800f90c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f88c:	693b      	ldr	r3, [r7, #16]
 800f88e:	68da      	ldr	r2, [r3, #12]
 800f890:	693b      	ldr	r3, [r7, #16]
 800f892:	689b      	ldr	r3, [r3, #8]
 800f894:	429a      	cmp	r2, r3
 800f896:	d11c      	bne.n	800f8d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	685a      	ldr	r2, [r3, #4]
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d316      	bcc.n	800f8d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	685a      	ldr	r2, [r3, #4]
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d20f      	bcs.n	800f8d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	2100      	movs	r1, #0
 800f8b6:	68f8      	ldr	r0, [r7, #12]
 800f8b8:	f001 f893 	bl	80109e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	2100      	movs	r1, #0
 800f8ca:	68f8      	ldr	r0, [r7, #12]
 800f8cc:	f001 fdf4 	bl	80114b8 <USBD_LL_PrepareReceive>
 800f8d0:	e01c      	b.n	800f90c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	2b03      	cmp	r3, #3
 800f8dc:	d10f      	bne.n	800f8fe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8e4:	68db      	ldr	r3, [r3, #12]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d009      	beq.n	800f8fe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8f8:	68db      	ldr	r3, [r3, #12]
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f8fe:	2180      	movs	r1, #128	; 0x80
 800f900:	68f8      	ldr	r0, [r7, #12]
 800f902:	f001 fd2f 	bl	8011364 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f906:	68f8      	ldr	r0, [r7, #12]
 800f908:	f001 f8bd 	bl	8010a86 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f912:	2b00      	cmp	r3, #0
 800f914:	d03a      	beq.n	800f98c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f916:	68f8      	ldr	r0, [r7, #12]
 800f918:	f7ff fe42 	bl	800f5a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2200      	movs	r2, #0
 800f920:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f924:	e032      	b.n	800f98c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f926:	7afb      	ldrb	r3, [r7, #11]
 800f928:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f92c:	b2db      	uxtb	r3, r3
 800f92e:	4619      	mov	r1, r3
 800f930:	68f8      	ldr	r0, [r7, #12]
 800f932:	f000 f985 	bl	800fc40 <USBD_CoreFindEP>
 800f936:	4603      	mov	r3, r0
 800f938:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f93a:	7dfb      	ldrb	r3, [r7, #23]
 800f93c:	2bff      	cmp	r3, #255	; 0xff
 800f93e:	d025      	beq.n	800f98c <USBD_LL_DataInStage+0x15a>
 800f940:	7dfb      	ldrb	r3, [r7, #23]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d122      	bne.n	800f98c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f94c:	b2db      	uxtb	r3, r3
 800f94e:	2b03      	cmp	r3, #3
 800f950:	d11c      	bne.n	800f98c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f952:	7dfa      	ldrb	r2, [r7, #23]
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	32ae      	adds	r2, #174	; 0xae
 800f958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f95c:	695b      	ldr	r3, [r3, #20]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d014      	beq.n	800f98c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f962:	7dfa      	ldrb	r2, [r7, #23]
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f96a:	7dfa      	ldrb	r2, [r7, #23]
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	32ae      	adds	r2, #174	; 0xae
 800f970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f974:	695b      	ldr	r3, [r3, #20]
 800f976:	7afa      	ldrb	r2, [r7, #11]
 800f978:	4611      	mov	r1, r2
 800f97a:	68f8      	ldr	r0, [r7, #12]
 800f97c:	4798      	blx	r3
 800f97e:	4603      	mov	r3, r0
 800f980:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f982:	7dbb      	ldrb	r3, [r7, #22]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d001      	beq.n	800f98c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f988:	7dbb      	ldrb	r3, [r7, #22]
 800f98a:	e000      	b.n	800f98e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f98c:	2300      	movs	r3, #0
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3718      	adds	r7, #24
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}

0800f996 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f996:	b580      	push	{r7, lr}
 800f998:	b084      	sub	sp, #16
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d014      	beq.n	800f9fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9d8:	685b      	ldr	r3, [r3, #4]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d00e      	beq.n	800f9fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	687a      	ldr	r2, [r7, #4]
 800f9e8:	6852      	ldr	r2, [r2, #4]
 800f9ea:	b2d2      	uxtb	r2, r2
 800f9ec:	4611      	mov	r1, r2
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	4798      	blx	r3
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d001      	beq.n	800f9fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f9f8:	2303      	movs	r3, #3
 800f9fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f9fc:	2340      	movs	r3, #64	; 0x40
 800f9fe:	2200      	movs	r2, #0
 800fa00:	2100      	movs	r1, #0
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f001 fc69 	bl	80112da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2240      	movs	r2, #64	; 0x40
 800fa14:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa18:	2340      	movs	r3, #64	; 0x40
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	2180      	movs	r1, #128	; 0x80
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f001 fc5b 	bl	80112da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2201      	movs	r2, #1
 800fa28:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2240      	movs	r2, #64	; 0x40
 800fa2e:	621a      	str	r2, [r3, #32]

  return ret;
 800fa30:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fa3a:	b480      	push	{r7}
 800fa3c:	b083      	sub	sp, #12
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
 800fa42:	460b      	mov	r3, r1
 800fa44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	78fa      	ldrb	r2, [r7, #3]
 800fa4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fa4c:	2300      	movs	r3, #0
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	370c      	adds	r7, #12
 800fa52:	46bd      	mov	sp, r7
 800fa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa58:	4770      	bx	lr

0800fa5a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fa5a:	b480      	push	{r7}
 800fa5c:	b083      	sub	sp, #12
 800fa5e:	af00      	add	r7, sp, #0
 800fa60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa68:	b2db      	uxtb	r3, r3
 800fa6a:	2b04      	cmp	r3, #4
 800fa6c:	d006      	beq.n	800fa7c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa74:	b2da      	uxtb	r2, r3
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2204      	movs	r2, #4
 800fa80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fa84:	2300      	movs	r3, #0
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	370c      	adds	r7, #12
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa90:	4770      	bx	lr

0800fa92 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fa92:	b480      	push	{r7}
 800fa94:	b083      	sub	sp, #12
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800faa0:	b2db      	uxtb	r3, r3
 800faa2:	2b04      	cmp	r3, #4
 800faa4:	d106      	bne.n	800fab4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800faac:	b2da      	uxtb	r2, r3
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fab4:	2300      	movs	r3, #0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	370c      	adds	r7, #12
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr

0800fac2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b082      	sub	sp, #8
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	2b03      	cmp	r3, #3
 800fad4:	d110      	bne.n	800faf8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d00b      	beq.n	800faf8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fae6:	69db      	ldr	r3, [r3, #28]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d005      	beq.n	800faf8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faf2:	69db      	ldr	r3, [r3, #28]
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800faf8:	2300      	movs	r3, #0
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3708      	adds	r7, #8
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}

0800fb02 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fb02:	b580      	push	{r7, lr}
 800fb04:	b082      	sub	sp, #8
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	6078      	str	r0, [r7, #4]
 800fb0a:	460b      	mov	r3, r1
 800fb0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	32ae      	adds	r2, #174	; 0xae
 800fb18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d101      	bne.n	800fb24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800fb20:	2303      	movs	r3, #3
 800fb22:	e01c      	b.n	800fb5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	2b03      	cmp	r3, #3
 800fb2e:	d115      	bne.n	800fb5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	32ae      	adds	r2, #174	; 0xae
 800fb3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb3e:	6a1b      	ldr	r3, [r3, #32]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d00b      	beq.n	800fb5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	32ae      	adds	r2, #174	; 0xae
 800fb4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb52:	6a1b      	ldr	r3, [r3, #32]
 800fb54:	78fa      	ldrb	r2, [r7, #3]
 800fb56:	4611      	mov	r1, r2
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fb5c:	2300      	movs	r3, #0
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3708      	adds	r7, #8
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}

0800fb66 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fb66:	b580      	push	{r7, lr}
 800fb68:	b082      	sub	sp, #8
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	6078      	str	r0, [r7, #4]
 800fb6e:	460b      	mov	r3, r1
 800fb70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	32ae      	adds	r2, #174	; 0xae
 800fb7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d101      	bne.n	800fb88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800fb84:	2303      	movs	r3, #3
 800fb86:	e01c      	b.n	800fbc2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb8e:	b2db      	uxtb	r3, r3
 800fb90:	2b03      	cmp	r3, #3
 800fb92:	d115      	bne.n	800fbc0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	32ae      	adds	r2, #174	; 0xae
 800fb9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d00b      	beq.n	800fbc0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	32ae      	adds	r2, #174	; 0xae
 800fbb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbb8:	78fa      	ldrb	r2, [r7, #3]
 800fbba:	4611      	mov	r1, r2
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fbc0:	2300      	movs	r3, #0
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	3708      	adds	r7, #8
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}

0800fbca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fbca:	b480      	push	{r7}
 800fbcc:	b083      	sub	sp, #12
 800fbce:	af00      	add	r7, sp, #0
 800fbd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fbd2:	2300      	movs	r3, #0
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	370c      	adds	r7, #12
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbde:	4770      	bx	lr

0800fbe0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b084      	sub	sp, #16
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2201      	movs	r2, #1
 800fbf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d00e      	beq.n	800fc1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	6852      	ldr	r2, [r2, #4]
 800fc0a:	b2d2      	uxtb	r2, r2
 800fc0c:	4611      	mov	r1, r2
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	4798      	blx	r3
 800fc12:	4603      	mov	r3, r0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d001      	beq.n	800fc1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800fc18:	2303      	movs	r3, #3
 800fc1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fc1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3710      	adds	r7, #16
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}

0800fc26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fc26:	b480      	push	{r7}
 800fc28:	b083      	sub	sp, #12
 800fc2a:	af00      	add	r7, sp, #0
 800fc2c:	6078      	str	r0, [r7, #4]
 800fc2e:	460b      	mov	r3, r1
 800fc30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fc32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	370c      	adds	r7, #12
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3e:	4770      	bx	lr

0800fc40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	460b      	mov	r3, r1
 800fc4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fc4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	370c      	adds	r7, #12
 800fc52:	46bd      	mov	sp, r7
 800fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc58:	4770      	bx	lr

0800fc5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800fc5a:	b580      	push	{r7, lr}
 800fc5c:	b086      	sub	sp, #24
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
 800fc62:	460b      	mov	r3, r1
 800fc64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	885b      	ldrh	r3, [r3, #2]
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	b29b      	uxth	r3, r3
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d920      	bls.n	800fcc4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	b29b      	uxth	r3, r3
 800fc88:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800fc8a:	e013      	b.n	800fcb4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800fc8c:	f107 030a 	add.w	r3, r7, #10
 800fc90:	4619      	mov	r1, r3
 800fc92:	6978      	ldr	r0, [r7, #20]
 800fc94:	f000 f81b 	bl	800fcce <USBD_GetNextDesc>
 800fc98:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	785b      	ldrb	r3, [r3, #1]
 800fc9e:	2b05      	cmp	r3, #5
 800fca0:	d108      	bne.n	800fcb4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	789b      	ldrb	r3, [r3, #2]
 800fcaa:	78fa      	ldrb	r2, [r7, #3]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d008      	beq.n	800fcc2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	885b      	ldrh	r3, [r3, #2]
 800fcb8:	b29a      	uxth	r2, r3
 800fcba:	897b      	ldrh	r3, [r7, #10]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d8e5      	bhi.n	800fc8c <USBD_GetEpDesc+0x32>
 800fcc0:	e000      	b.n	800fcc4 <USBD_GetEpDesc+0x6a>
          break;
 800fcc2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800fcc4:	693b      	ldr	r3, [r7, #16]
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3718      	adds	r7, #24
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}

0800fcce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800fcce:	b480      	push	{r7}
 800fcd0:	b085      	sub	sp, #20
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	6078      	str	r0, [r7, #4]
 800fcd6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	881a      	ldrh	r2, [r3, #0]
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	b29b      	uxth	r3, r3
 800fce6:	4413      	add	r3, r2
 800fce8:	b29a      	uxth	r2, r3
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	4413      	add	r3, r2
 800fcf8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fcfa:	68fb      	ldr	r3, [r7, #12]
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3714      	adds	r7, #20
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr

0800fd08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b087      	sub	sp, #28
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fd26:	8a3b      	ldrh	r3, [r7, #16]
 800fd28:	021b      	lsls	r3, r3, #8
 800fd2a:	b21a      	sxth	r2, r3
 800fd2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fd30:	4313      	orrs	r3, r2
 800fd32:	b21b      	sxth	r3, r3
 800fd34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fd36:	89fb      	ldrh	r3, [r7, #14]
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	371c      	adds	r7, #28
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr

0800fd44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b084      	sub	sp, #16
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fd5a:	2b40      	cmp	r3, #64	; 0x40
 800fd5c:	d005      	beq.n	800fd6a <USBD_StdDevReq+0x26>
 800fd5e:	2b40      	cmp	r3, #64	; 0x40
 800fd60:	d857      	bhi.n	800fe12 <USBD_StdDevReq+0xce>
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d00f      	beq.n	800fd86 <USBD_StdDevReq+0x42>
 800fd66:	2b20      	cmp	r3, #32
 800fd68:	d153      	bne.n	800fe12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	32ae      	adds	r2, #174	; 0xae
 800fd74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd78:	689b      	ldr	r3, [r3, #8]
 800fd7a:	6839      	ldr	r1, [r7, #0]
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	4798      	blx	r3
 800fd80:	4603      	mov	r3, r0
 800fd82:	73fb      	strb	r3, [r7, #15]
      break;
 800fd84:	e04a      	b.n	800fe1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	785b      	ldrb	r3, [r3, #1]
 800fd8a:	2b09      	cmp	r3, #9
 800fd8c:	d83b      	bhi.n	800fe06 <USBD_StdDevReq+0xc2>
 800fd8e:	a201      	add	r2, pc, #4	; (adr r2, 800fd94 <USBD_StdDevReq+0x50>)
 800fd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd94:	0800fde9 	.word	0x0800fde9
 800fd98:	0800fdfd 	.word	0x0800fdfd
 800fd9c:	0800fe07 	.word	0x0800fe07
 800fda0:	0800fdf3 	.word	0x0800fdf3
 800fda4:	0800fe07 	.word	0x0800fe07
 800fda8:	0800fdc7 	.word	0x0800fdc7
 800fdac:	0800fdbd 	.word	0x0800fdbd
 800fdb0:	0800fe07 	.word	0x0800fe07
 800fdb4:	0800fddf 	.word	0x0800fddf
 800fdb8:	0800fdd1 	.word	0x0800fdd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fdbc:	6839      	ldr	r1, [r7, #0]
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f000 fa3c 	bl	801023c <USBD_GetDescriptor>
          break;
 800fdc4:	e024      	b.n	800fe10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fdc6:	6839      	ldr	r1, [r7, #0]
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f000 fba1 	bl	8010510 <USBD_SetAddress>
          break;
 800fdce:	e01f      	b.n	800fe10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fdd0:	6839      	ldr	r1, [r7, #0]
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f000 fbe0 	bl	8010598 <USBD_SetConfig>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	73fb      	strb	r3, [r7, #15]
          break;
 800fddc:	e018      	b.n	800fe10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fdde:	6839      	ldr	r1, [r7, #0]
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f000 fc83 	bl	80106ec <USBD_GetConfig>
          break;
 800fde6:	e013      	b.n	800fe10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fde8:	6839      	ldr	r1, [r7, #0]
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f000 fcb4 	bl	8010758 <USBD_GetStatus>
          break;
 800fdf0:	e00e      	b.n	800fe10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fdf2:	6839      	ldr	r1, [r7, #0]
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f000 fce3 	bl	80107c0 <USBD_SetFeature>
          break;
 800fdfa:	e009      	b.n	800fe10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fdfc:	6839      	ldr	r1, [r7, #0]
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f000 fd07 	bl	8010812 <USBD_ClrFeature>
          break;
 800fe04:	e004      	b.n	800fe10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800fe06:	6839      	ldr	r1, [r7, #0]
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f000 fd5e 	bl	80108ca <USBD_CtlError>
          break;
 800fe0e:	bf00      	nop
      }
      break;
 800fe10:	e004      	b.n	800fe1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800fe12:	6839      	ldr	r1, [r7, #0]
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f000 fd58 	bl	80108ca <USBD_CtlError>
      break;
 800fe1a:	bf00      	nop
  }

  return ret;
 800fe1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3710      	adds	r7, #16
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop

0800fe28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b084      	sub	sp, #16
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe32:	2300      	movs	r3, #0
 800fe34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe3e:	2b40      	cmp	r3, #64	; 0x40
 800fe40:	d005      	beq.n	800fe4e <USBD_StdItfReq+0x26>
 800fe42:	2b40      	cmp	r3, #64	; 0x40
 800fe44:	d852      	bhi.n	800feec <USBD_StdItfReq+0xc4>
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d001      	beq.n	800fe4e <USBD_StdItfReq+0x26>
 800fe4a:	2b20      	cmp	r3, #32
 800fe4c:	d14e      	bne.n	800feec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe54:	b2db      	uxtb	r3, r3
 800fe56:	3b01      	subs	r3, #1
 800fe58:	2b02      	cmp	r3, #2
 800fe5a:	d840      	bhi.n	800fede <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	889b      	ldrh	r3, [r3, #4]
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d836      	bhi.n	800fed4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	889b      	ldrh	r3, [r3, #4]
 800fe6a:	b2db      	uxtb	r3, r3
 800fe6c:	4619      	mov	r1, r3
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f7ff fed9 	bl	800fc26 <USBD_CoreFindIF>
 800fe74:	4603      	mov	r3, r0
 800fe76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fe78:	7bbb      	ldrb	r3, [r7, #14]
 800fe7a:	2bff      	cmp	r3, #255	; 0xff
 800fe7c:	d01d      	beq.n	800feba <USBD_StdItfReq+0x92>
 800fe7e:	7bbb      	ldrb	r3, [r7, #14]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d11a      	bne.n	800feba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800fe84:	7bba      	ldrb	r2, [r7, #14]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	32ae      	adds	r2, #174	; 0xae
 800fe8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe8e:	689b      	ldr	r3, [r3, #8]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d00f      	beq.n	800feb4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800fe94:	7bba      	ldrb	r2, [r7, #14]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fe9c:	7bba      	ldrb	r2, [r7, #14]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	32ae      	adds	r2, #174	; 0xae
 800fea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fea6:	689b      	ldr	r3, [r3, #8]
 800fea8:	6839      	ldr	r1, [r7, #0]
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	4798      	blx	r3
 800feae:	4603      	mov	r3, r0
 800feb0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800feb2:	e004      	b.n	800febe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800feb4:	2303      	movs	r3, #3
 800feb6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800feb8:	e001      	b.n	800febe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800feba:	2303      	movs	r3, #3
 800febc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	88db      	ldrh	r3, [r3, #6]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d110      	bne.n	800fee8 <USBD_StdItfReq+0xc0>
 800fec6:	7bfb      	ldrb	r3, [r7, #15]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d10d      	bne.n	800fee8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 fdc7 	bl	8010a60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fed2:	e009      	b.n	800fee8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800fed4:	6839      	ldr	r1, [r7, #0]
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f000 fcf7 	bl	80108ca <USBD_CtlError>
          break;
 800fedc:	e004      	b.n	800fee8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800fede:	6839      	ldr	r1, [r7, #0]
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f000 fcf2 	bl	80108ca <USBD_CtlError>
          break;
 800fee6:	e000      	b.n	800feea <USBD_StdItfReq+0xc2>
          break;
 800fee8:	bf00      	nop
      }
      break;
 800feea:	e004      	b.n	800fef6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800feec:	6839      	ldr	r1, [r7, #0]
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f000 fceb 	bl	80108ca <USBD_CtlError>
      break;
 800fef4:	bf00      	nop
  }

  return ret;
 800fef6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3710      	adds	r7, #16
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b084      	sub	sp, #16
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	889b      	ldrh	r3, [r3, #4]
 800ff12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ff1c:	2b40      	cmp	r3, #64	; 0x40
 800ff1e:	d007      	beq.n	800ff30 <USBD_StdEPReq+0x30>
 800ff20:	2b40      	cmp	r3, #64	; 0x40
 800ff22:	f200 817f 	bhi.w	8010224 <USBD_StdEPReq+0x324>
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d02a      	beq.n	800ff80 <USBD_StdEPReq+0x80>
 800ff2a:	2b20      	cmp	r3, #32
 800ff2c:	f040 817a 	bne.w	8010224 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ff30:	7bbb      	ldrb	r3, [r7, #14]
 800ff32:	4619      	mov	r1, r3
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f7ff fe83 	bl	800fc40 <USBD_CoreFindEP>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ff3e:	7b7b      	ldrb	r3, [r7, #13]
 800ff40:	2bff      	cmp	r3, #255	; 0xff
 800ff42:	f000 8174 	beq.w	801022e <USBD_StdEPReq+0x32e>
 800ff46:	7b7b      	ldrb	r3, [r7, #13]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	f040 8170 	bne.w	801022e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ff4e:	7b7a      	ldrb	r2, [r7, #13]
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ff56:	7b7a      	ldrb	r2, [r7, #13]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	32ae      	adds	r2, #174	; 0xae
 800ff5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff60:	689b      	ldr	r3, [r3, #8]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	f000 8163 	beq.w	801022e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ff68:	7b7a      	ldrb	r2, [r7, #13]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	32ae      	adds	r2, #174	; 0xae
 800ff6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff72:	689b      	ldr	r3, [r3, #8]
 800ff74:	6839      	ldr	r1, [r7, #0]
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	4798      	blx	r3
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ff7e:	e156      	b.n	801022e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	785b      	ldrb	r3, [r3, #1]
 800ff84:	2b03      	cmp	r3, #3
 800ff86:	d008      	beq.n	800ff9a <USBD_StdEPReq+0x9a>
 800ff88:	2b03      	cmp	r3, #3
 800ff8a:	f300 8145 	bgt.w	8010218 <USBD_StdEPReq+0x318>
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	f000 809b 	beq.w	80100ca <USBD_StdEPReq+0x1ca>
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d03c      	beq.n	8010012 <USBD_StdEPReq+0x112>
 800ff98:	e13e      	b.n	8010218 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffa0:	b2db      	uxtb	r3, r3
 800ffa2:	2b02      	cmp	r3, #2
 800ffa4:	d002      	beq.n	800ffac <USBD_StdEPReq+0xac>
 800ffa6:	2b03      	cmp	r3, #3
 800ffa8:	d016      	beq.n	800ffd8 <USBD_StdEPReq+0xd8>
 800ffaa:	e02c      	b.n	8010006 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ffac:	7bbb      	ldrb	r3, [r7, #14]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d00d      	beq.n	800ffce <USBD_StdEPReq+0xce>
 800ffb2:	7bbb      	ldrb	r3, [r7, #14]
 800ffb4:	2b80      	cmp	r3, #128	; 0x80
 800ffb6:	d00a      	beq.n	800ffce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ffb8:	7bbb      	ldrb	r3, [r7, #14]
 800ffba:	4619      	mov	r1, r3
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f001 f9d1 	bl	8011364 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ffc2:	2180      	movs	r1, #128	; 0x80
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f001 f9cd 	bl	8011364 <USBD_LL_StallEP>
 800ffca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ffcc:	e020      	b.n	8010010 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ffce:	6839      	ldr	r1, [r7, #0]
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f000 fc7a 	bl	80108ca <USBD_CtlError>
              break;
 800ffd6:	e01b      	b.n	8010010 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	885b      	ldrh	r3, [r3, #2]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d10e      	bne.n	800fffe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ffe0:	7bbb      	ldrb	r3, [r7, #14]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d00b      	beq.n	800fffe <USBD_StdEPReq+0xfe>
 800ffe6:	7bbb      	ldrb	r3, [r7, #14]
 800ffe8:	2b80      	cmp	r3, #128	; 0x80
 800ffea:	d008      	beq.n	800fffe <USBD_StdEPReq+0xfe>
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	88db      	ldrh	r3, [r3, #6]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d104      	bne.n	800fffe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fff4:	7bbb      	ldrb	r3, [r7, #14]
 800fff6:	4619      	mov	r1, r3
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f001 f9b3 	bl	8011364 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	f000 fd2e 	bl	8010a60 <USBD_CtlSendStatus>

              break;
 8010004:	e004      	b.n	8010010 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010006:	6839      	ldr	r1, [r7, #0]
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f000 fc5e 	bl	80108ca <USBD_CtlError>
              break;
 801000e:	bf00      	nop
          }
          break;
 8010010:	e107      	b.n	8010222 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010018:	b2db      	uxtb	r3, r3
 801001a:	2b02      	cmp	r3, #2
 801001c:	d002      	beq.n	8010024 <USBD_StdEPReq+0x124>
 801001e:	2b03      	cmp	r3, #3
 8010020:	d016      	beq.n	8010050 <USBD_StdEPReq+0x150>
 8010022:	e04b      	b.n	80100bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010024:	7bbb      	ldrb	r3, [r7, #14]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d00d      	beq.n	8010046 <USBD_StdEPReq+0x146>
 801002a:	7bbb      	ldrb	r3, [r7, #14]
 801002c:	2b80      	cmp	r3, #128	; 0x80
 801002e:	d00a      	beq.n	8010046 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010030:	7bbb      	ldrb	r3, [r7, #14]
 8010032:	4619      	mov	r1, r3
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f001 f995 	bl	8011364 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801003a:	2180      	movs	r1, #128	; 0x80
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f001 f991 	bl	8011364 <USBD_LL_StallEP>
 8010042:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010044:	e040      	b.n	80100c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010046:	6839      	ldr	r1, [r7, #0]
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f000 fc3e 	bl	80108ca <USBD_CtlError>
              break;
 801004e:	e03b      	b.n	80100c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	885b      	ldrh	r3, [r3, #2]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d136      	bne.n	80100c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010058:	7bbb      	ldrb	r3, [r7, #14]
 801005a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801005e:	2b00      	cmp	r3, #0
 8010060:	d004      	beq.n	801006c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010062:	7bbb      	ldrb	r3, [r7, #14]
 8010064:	4619      	mov	r1, r3
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f001 f99b 	bl	80113a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f000 fcf7 	bl	8010a60 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010072:	7bbb      	ldrb	r3, [r7, #14]
 8010074:	4619      	mov	r1, r3
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f7ff fde2 	bl	800fc40 <USBD_CoreFindEP>
 801007c:	4603      	mov	r3, r0
 801007e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010080:	7b7b      	ldrb	r3, [r7, #13]
 8010082:	2bff      	cmp	r3, #255	; 0xff
 8010084:	d01f      	beq.n	80100c6 <USBD_StdEPReq+0x1c6>
 8010086:	7b7b      	ldrb	r3, [r7, #13]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d11c      	bne.n	80100c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801008c:	7b7a      	ldrb	r2, [r7, #13]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010094:	7b7a      	ldrb	r2, [r7, #13]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	32ae      	adds	r2, #174	; 0xae
 801009a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801009e:	689b      	ldr	r3, [r3, #8]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d010      	beq.n	80100c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80100a4:	7b7a      	ldrb	r2, [r7, #13]
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	32ae      	adds	r2, #174	; 0xae
 80100aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100ae:	689b      	ldr	r3, [r3, #8]
 80100b0:	6839      	ldr	r1, [r7, #0]
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	4798      	blx	r3
 80100b6:	4603      	mov	r3, r0
 80100b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80100ba:	e004      	b.n	80100c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80100bc:	6839      	ldr	r1, [r7, #0]
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f000 fc03 	bl	80108ca <USBD_CtlError>
              break;
 80100c4:	e000      	b.n	80100c8 <USBD_StdEPReq+0x1c8>
              break;
 80100c6:	bf00      	nop
          }
          break;
 80100c8:	e0ab      	b.n	8010222 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100d0:	b2db      	uxtb	r3, r3
 80100d2:	2b02      	cmp	r3, #2
 80100d4:	d002      	beq.n	80100dc <USBD_StdEPReq+0x1dc>
 80100d6:	2b03      	cmp	r3, #3
 80100d8:	d032      	beq.n	8010140 <USBD_StdEPReq+0x240>
 80100da:	e097      	b.n	801020c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80100dc:	7bbb      	ldrb	r3, [r7, #14]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d007      	beq.n	80100f2 <USBD_StdEPReq+0x1f2>
 80100e2:	7bbb      	ldrb	r3, [r7, #14]
 80100e4:	2b80      	cmp	r3, #128	; 0x80
 80100e6:	d004      	beq.n	80100f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80100e8:	6839      	ldr	r1, [r7, #0]
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f000 fbed 	bl	80108ca <USBD_CtlError>
                break;
 80100f0:	e091      	b.n	8010216 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80100f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	da0b      	bge.n	8010112 <USBD_StdEPReq+0x212>
 80100fa:	7bbb      	ldrb	r3, [r7, #14]
 80100fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010100:	4613      	mov	r3, r2
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	4413      	add	r3, r2
 8010106:	009b      	lsls	r3, r3, #2
 8010108:	3310      	adds	r3, #16
 801010a:	687a      	ldr	r2, [r7, #4]
 801010c:	4413      	add	r3, r2
 801010e:	3304      	adds	r3, #4
 8010110:	e00b      	b.n	801012a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010112:	7bbb      	ldrb	r3, [r7, #14]
 8010114:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010118:	4613      	mov	r3, r2
 801011a:	009b      	lsls	r3, r3, #2
 801011c:	4413      	add	r3, r2
 801011e:	009b      	lsls	r3, r3, #2
 8010120:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010124:	687a      	ldr	r2, [r7, #4]
 8010126:	4413      	add	r3, r2
 8010128:	3304      	adds	r3, #4
 801012a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	2200      	movs	r2, #0
 8010130:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	2202      	movs	r2, #2
 8010136:	4619      	mov	r1, r3
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f000 fc37 	bl	80109ac <USBD_CtlSendData>
              break;
 801013e:	e06a      	b.n	8010216 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010144:	2b00      	cmp	r3, #0
 8010146:	da11      	bge.n	801016c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010148:	7bbb      	ldrb	r3, [r7, #14]
 801014a:	f003 020f 	and.w	r2, r3, #15
 801014e:	6879      	ldr	r1, [r7, #4]
 8010150:	4613      	mov	r3, r2
 8010152:	009b      	lsls	r3, r3, #2
 8010154:	4413      	add	r3, r2
 8010156:	009b      	lsls	r3, r3, #2
 8010158:	440b      	add	r3, r1
 801015a:	3324      	adds	r3, #36	; 0x24
 801015c:	881b      	ldrh	r3, [r3, #0]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d117      	bne.n	8010192 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010162:	6839      	ldr	r1, [r7, #0]
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f000 fbb0 	bl	80108ca <USBD_CtlError>
                  break;
 801016a:	e054      	b.n	8010216 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801016c:	7bbb      	ldrb	r3, [r7, #14]
 801016e:	f003 020f 	and.w	r2, r3, #15
 8010172:	6879      	ldr	r1, [r7, #4]
 8010174:	4613      	mov	r3, r2
 8010176:	009b      	lsls	r3, r3, #2
 8010178:	4413      	add	r3, r2
 801017a:	009b      	lsls	r3, r3, #2
 801017c:	440b      	add	r3, r1
 801017e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010182:	881b      	ldrh	r3, [r3, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d104      	bne.n	8010192 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010188:	6839      	ldr	r1, [r7, #0]
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f000 fb9d 	bl	80108ca <USBD_CtlError>
                  break;
 8010190:	e041      	b.n	8010216 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010192:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010196:	2b00      	cmp	r3, #0
 8010198:	da0b      	bge.n	80101b2 <USBD_StdEPReq+0x2b2>
 801019a:	7bbb      	ldrb	r3, [r7, #14]
 801019c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80101a0:	4613      	mov	r3, r2
 80101a2:	009b      	lsls	r3, r3, #2
 80101a4:	4413      	add	r3, r2
 80101a6:	009b      	lsls	r3, r3, #2
 80101a8:	3310      	adds	r3, #16
 80101aa:	687a      	ldr	r2, [r7, #4]
 80101ac:	4413      	add	r3, r2
 80101ae:	3304      	adds	r3, #4
 80101b0:	e00b      	b.n	80101ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80101b2:	7bbb      	ldrb	r3, [r7, #14]
 80101b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80101b8:	4613      	mov	r3, r2
 80101ba:	009b      	lsls	r3, r3, #2
 80101bc:	4413      	add	r3, r2
 80101be:	009b      	lsls	r3, r3, #2
 80101c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80101c4:	687a      	ldr	r2, [r7, #4]
 80101c6:	4413      	add	r3, r2
 80101c8:	3304      	adds	r3, #4
 80101ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80101cc:	7bbb      	ldrb	r3, [r7, #14]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d002      	beq.n	80101d8 <USBD_StdEPReq+0x2d8>
 80101d2:	7bbb      	ldrb	r3, [r7, #14]
 80101d4:	2b80      	cmp	r3, #128	; 0x80
 80101d6:	d103      	bne.n	80101e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	2200      	movs	r2, #0
 80101dc:	601a      	str	r2, [r3, #0]
 80101de:	e00e      	b.n	80101fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80101e0:	7bbb      	ldrb	r3, [r7, #14]
 80101e2:	4619      	mov	r1, r3
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f001 f8fb 	bl	80113e0 <USBD_LL_IsStallEP>
 80101ea:	4603      	mov	r3, r0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d003      	beq.n	80101f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	2201      	movs	r2, #1
 80101f4:	601a      	str	r2, [r3, #0]
 80101f6:	e002      	b.n	80101fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	2200      	movs	r2, #0
 80101fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	2202      	movs	r2, #2
 8010202:	4619      	mov	r1, r3
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f000 fbd1 	bl	80109ac <USBD_CtlSendData>
              break;
 801020a:	e004      	b.n	8010216 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801020c:	6839      	ldr	r1, [r7, #0]
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f000 fb5b 	bl	80108ca <USBD_CtlError>
              break;
 8010214:	bf00      	nop
          }
          break;
 8010216:	e004      	b.n	8010222 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010218:	6839      	ldr	r1, [r7, #0]
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f000 fb55 	bl	80108ca <USBD_CtlError>
          break;
 8010220:	bf00      	nop
      }
      break;
 8010222:	e005      	b.n	8010230 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010224:	6839      	ldr	r1, [r7, #0]
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 fb4f 	bl	80108ca <USBD_CtlError>
      break;
 801022c:	e000      	b.n	8010230 <USBD_StdEPReq+0x330>
      break;
 801022e:	bf00      	nop
  }

  return ret;
 8010230:	7bfb      	ldrb	r3, [r7, #15]
}
 8010232:	4618      	mov	r0, r3
 8010234:	3710      	adds	r7, #16
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
	...

0801023c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b084      	sub	sp, #16
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010246:	2300      	movs	r3, #0
 8010248:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801024a:	2300      	movs	r3, #0
 801024c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801024e:	2300      	movs	r3, #0
 8010250:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	885b      	ldrh	r3, [r3, #2]
 8010256:	0a1b      	lsrs	r3, r3, #8
 8010258:	b29b      	uxth	r3, r3
 801025a:	3b01      	subs	r3, #1
 801025c:	2b06      	cmp	r3, #6
 801025e:	f200 8128 	bhi.w	80104b2 <USBD_GetDescriptor+0x276>
 8010262:	a201      	add	r2, pc, #4	; (adr r2, 8010268 <USBD_GetDescriptor+0x2c>)
 8010264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010268:	08010285 	.word	0x08010285
 801026c:	0801029d 	.word	0x0801029d
 8010270:	080102dd 	.word	0x080102dd
 8010274:	080104b3 	.word	0x080104b3
 8010278:	080104b3 	.word	0x080104b3
 801027c:	08010453 	.word	0x08010453
 8010280:	0801047f 	.word	0x0801047f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	687a      	ldr	r2, [r7, #4]
 801028e:	7c12      	ldrb	r2, [r2, #16]
 8010290:	f107 0108 	add.w	r1, r7, #8
 8010294:	4610      	mov	r0, r2
 8010296:	4798      	blx	r3
 8010298:	60f8      	str	r0, [r7, #12]
      break;
 801029a:	e112      	b.n	80104c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	7c1b      	ldrb	r3, [r3, #16]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d10d      	bne.n	80102c0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102ac:	f107 0208 	add.w	r2, r7, #8
 80102b0:	4610      	mov	r0, r2
 80102b2:	4798      	blx	r3
 80102b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	3301      	adds	r3, #1
 80102ba:	2202      	movs	r2, #2
 80102bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80102be:	e100      	b.n	80104c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c8:	f107 0208 	add.w	r2, r7, #8
 80102cc:	4610      	mov	r0, r2
 80102ce:	4798      	blx	r3
 80102d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	3301      	adds	r3, #1
 80102d6:	2202      	movs	r2, #2
 80102d8:	701a      	strb	r2, [r3, #0]
      break;
 80102da:	e0f2      	b.n	80104c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	885b      	ldrh	r3, [r3, #2]
 80102e0:	b2db      	uxtb	r3, r3
 80102e2:	2b05      	cmp	r3, #5
 80102e4:	f200 80ac 	bhi.w	8010440 <USBD_GetDescriptor+0x204>
 80102e8:	a201      	add	r2, pc, #4	; (adr r2, 80102f0 <USBD_GetDescriptor+0xb4>)
 80102ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102ee:	bf00      	nop
 80102f0:	08010309 	.word	0x08010309
 80102f4:	0801033d 	.word	0x0801033d
 80102f8:	08010371 	.word	0x08010371
 80102fc:	080103a5 	.word	0x080103a5
 8010300:	080103d9 	.word	0x080103d9
 8010304:	0801040d 	.word	0x0801040d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d00b      	beq.n	801032c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	7c12      	ldrb	r2, [r2, #16]
 8010320:	f107 0108 	add.w	r1, r7, #8
 8010324:	4610      	mov	r0, r2
 8010326:	4798      	blx	r3
 8010328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801032a:	e091      	b.n	8010450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801032c:	6839      	ldr	r1, [r7, #0]
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f000 facb 	bl	80108ca <USBD_CtlError>
            err++;
 8010334:	7afb      	ldrb	r3, [r7, #11]
 8010336:	3301      	adds	r3, #1
 8010338:	72fb      	strb	r3, [r7, #11]
          break;
 801033a:	e089      	b.n	8010450 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010342:	689b      	ldr	r3, [r3, #8]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d00b      	beq.n	8010360 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801034e:	689b      	ldr	r3, [r3, #8]
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	7c12      	ldrb	r2, [r2, #16]
 8010354:	f107 0108 	add.w	r1, r7, #8
 8010358:	4610      	mov	r0, r2
 801035a:	4798      	blx	r3
 801035c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801035e:	e077      	b.n	8010450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010360:	6839      	ldr	r1, [r7, #0]
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f000 fab1 	bl	80108ca <USBD_CtlError>
            err++;
 8010368:	7afb      	ldrb	r3, [r7, #11]
 801036a:	3301      	adds	r3, #1
 801036c:	72fb      	strb	r3, [r7, #11]
          break;
 801036e:	e06f      	b.n	8010450 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010376:	68db      	ldr	r3, [r3, #12]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d00b      	beq.n	8010394 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010382:	68db      	ldr	r3, [r3, #12]
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	7c12      	ldrb	r2, [r2, #16]
 8010388:	f107 0108 	add.w	r1, r7, #8
 801038c:	4610      	mov	r0, r2
 801038e:	4798      	blx	r3
 8010390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010392:	e05d      	b.n	8010450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010394:	6839      	ldr	r1, [r7, #0]
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f000 fa97 	bl	80108ca <USBD_CtlError>
            err++;
 801039c:	7afb      	ldrb	r3, [r7, #11]
 801039e:	3301      	adds	r3, #1
 80103a0:	72fb      	strb	r3, [r7, #11]
          break;
 80103a2:	e055      	b.n	8010450 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103aa:	691b      	ldr	r3, [r3, #16]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d00b      	beq.n	80103c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103b6:	691b      	ldr	r3, [r3, #16]
 80103b8:	687a      	ldr	r2, [r7, #4]
 80103ba:	7c12      	ldrb	r2, [r2, #16]
 80103bc:	f107 0108 	add.w	r1, r7, #8
 80103c0:	4610      	mov	r0, r2
 80103c2:	4798      	blx	r3
 80103c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80103c6:	e043      	b.n	8010450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80103c8:	6839      	ldr	r1, [r7, #0]
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f000 fa7d 	bl	80108ca <USBD_CtlError>
            err++;
 80103d0:	7afb      	ldrb	r3, [r7, #11]
 80103d2:	3301      	adds	r3, #1
 80103d4:	72fb      	strb	r3, [r7, #11]
          break;
 80103d6:	e03b      	b.n	8010450 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103de:	695b      	ldr	r3, [r3, #20]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d00b      	beq.n	80103fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103ea:	695b      	ldr	r3, [r3, #20]
 80103ec:	687a      	ldr	r2, [r7, #4]
 80103ee:	7c12      	ldrb	r2, [r2, #16]
 80103f0:	f107 0108 	add.w	r1, r7, #8
 80103f4:	4610      	mov	r0, r2
 80103f6:	4798      	blx	r3
 80103f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80103fa:	e029      	b.n	8010450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80103fc:	6839      	ldr	r1, [r7, #0]
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f000 fa63 	bl	80108ca <USBD_CtlError>
            err++;
 8010404:	7afb      	ldrb	r3, [r7, #11]
 8010406:	3301      	adds	r3, #1
 8010408:	72fb      	strb	r3, [r7, #11]
          break;
 801040a:	e021      	b.n	8010450 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010412:	699b      	ldr	r3, [r3, #24]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d00b      	beq.n	8010430 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801041e:	699b      	ldr	r3, [r3, #24]
 8010420:	687a      	ldr	r2, [r7, #4]
 8010422:	7c12      	ldrb	r2, [r2, #16]
 8010424:	f107 0108 	add.w	r1, r7, #8
 8010428:	4610      	mov	r0, r2
 801042a:	4798      	blx	r3
 801042c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801042e:	e00f      	b.n	8010450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010430:	6839      	ldr	r1, [r7, #0]
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f000 fa49 	bl	80108ca <USBD_CtlError>
            err++;
 8010438:	7afb      	ldrb	r3, [r7, #11]
 801043a:	3301      	adds	r3, #1
 801043c:	72fb      	strb	r3, [r7, #11]
          break;
 801043e:	e007      	b.n	8010450 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010440:	6839      	ldr	r1, [r7, #0]
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f000 fa41 	bl	80108ca <USBD_CtlError>
          err++;
 8010448:	7afb      	ldrb	r3, [r7, #11]
 801044a:	3301      	adds	r3, #1
 801044c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801044e:	bf00      	nop
      }
      break;
 8010450:	e037      	b.n	80104c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	7c1b      	ldrb	r3, [r3, #16]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d109      	bne.n	801046e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010462:	f107 0208 	add.w	r2, r7, #8
 8010466:	4610      	mov	r0, r2
 8010468:	4798      	blx	r3
 801046a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801046c:	e029      	b.n	80104c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801046e:	6839      	ldr	r1, [r7, #0]
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f000 fa2a 	bl	80108ca <USBD_CtlError>
        err++;
 8010476:	7afb      	ldrb	r3, [r7, #11]
 8010478:	3301      	adds	r3, #1
 801047a:	72fb      	strb	r3, [r7, #11]
      break;
 801047c:	e021      	b.n	80104c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	7c1b      	ldrb	r3, [r3, #16]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d10d      	bne.n	80104a2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801048e:	f107 0208 	add.w	r2, r7, #8
 8010492:	4610      	mov	r0, r2
 8010494:	4798      	blx	r3
 8010496:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	3301      	adds	r3, #1
 801049c:	2207      	movs	r2, #7
 801049e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80104a0:	e00f      	b.n	80104c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80104a2:	6839      	ldr	r1, [r7, #0]
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f000 fa10 	bl	80108ca <USBD_CtlError>
        err++;
 80104aa:	7afb      	ldrb	r3, [r7, #11]
 80104ac:	3301      	adds	r3, #1
 80104ae:	72fb      	strb	r3, [r7, #11]
      break;
 80104b0:	e007      	b.n	80104c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80104b2:	6839      	ldr	r1, [r7, #0]
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f000 fa08 	bl	80108ca <USBD_CtlError>
      err++;
 80104ba:	7afb      	ldrb	r3, [r7, #11]
 80104bc:	3301      	adds	r3, #1
 80104be:	72fb      	strb	r3, [r7, #11]
      break;
 80104c0:	bf00      	nop
  }

  if (err != 0U)
 80104c2:	7afb      	ldrb	r3, [r7, #11]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d11e      	bne.n	8010506 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	88db      	ldrh	r3, [r3, #6]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d016      	beq.n	80104fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80104d0:	893b      	ldrh	r3, [r7, #8]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d00e      	beq.n	80104f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	88da      	ldrh	r2, [r3, #6]
 80104da:	893b      	ldrh	r3, [r7, #8]
 80104dc:	4293      	cmp	r3, r2
 80104de:	bf28      	it	cs
 80104e0:	4613      	movcs	r3, r2
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80104e6:	893b      	ldrh	r3, [r7, #8]
 80104e8:	461a      	mov	r2, r3
 80104ea:	68f9      	ldr	r1, [r7, #12]
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 fa5d 	bl	80109ac <USBD_CtlSendData>
 80104f2:	e009      	b.n	8010508 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80104f4:	6839      	ldr	r1, [r7, #0]
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f000 f9e7 	bl	80108ca <USBD_CtlError>
 80104fc:	e004      	b.n	8010508 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f000 faae 	bl	8010a60 <USBD_CtlSendStatus>
 8010504:	e000      	b.n	8010508 <USBD_GetDescriptor+0x2cc>
    return;
 8010506:	bf00      	nop
  }
}
 8010508:	3710      	adds	r7, #16
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop

08010510 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	889b      	ldrh	r3, [r3, #4]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d131      	bne.n	8010586 <USBD_SetAddress+0x76>
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	88db      	ldrh	r3, [r3, #6]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d12d      	bne.n	8010586 <USBD_SetAddress+0x76>
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	885b      	ldrh	r3, [r3, #2]
 801052e:	2b7f      	cmp	r3, #127	; 0x7f
 8010530:	d829      	bhi.n	8010586 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	885b      	ldrh	r3, [r3, #2]
 8010536:	b2db      	uxtb	r3, r3
 8010538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801053c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010544:	b2db      	uxtb	r3, r3
 8010546:	2b03      	cmp	r3, #3
 8010548:	d104      	bne.n	8010554 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801054a:	6839      	ldr	r1, [r7, #0]
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f000 f9bc 	bl	80108ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010552:	e01d      	b.n	8010590 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	7bfa      	ldrb	r2, [r7, #15]
 8010558:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801055c:	7bfb      	ldrb	r3, [r7, #15]
 801055e:	4619      	mov	r1, r3
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f000 ff69 	bl	8011438 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f000 fa7a 	bl	8010a60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801056c:	7bfb      	ldrb	r3, [r7, #15]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d004      	beq.n	801057c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2202      	movs	r2, #2
 8010576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801057a:	e009      	b.n	8010590 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2201      	movs	r2, #1
 8010580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010584:	e004      	b.n	8010590 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010586:	6839      	ldr	r1, [r7, #0]
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 f99e 	bl	80108ca <USBD_CtlError>
  }
}
 801058e:	bf00      	nop
 8010590:	bf00      	nop
 8010592:	3710      	adds	r7, #16
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80105a2:	2300      	movs	r3, #0
 80105a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	885b      	ldrh	r3, [r3, #2]
 80105aa:	b2da      	uxtb	r2, r3
 80105ac:	4b4e      	ldr	r3, [pc, #312]	; (80106e8 <USBD_SetConfig+0x150>)
 80105ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80105b0:	4b4d      	ldr	r3, [pc, #308]	; (80106e8 <USBD_SetConfig+0x150>)
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	d905      	bls.n	80105c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80105b8:	6839      	ldr	r1, [r7, #0]
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f000 f985 	bl	80108ca <USBD_CtlError>
    return USBD_FAIL;
 80105c0:	2303      	movs	r3, #3
 80105c2:	e08c      	b.n	80106de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105ca:	b2db      	uxtb	r3, r3
 80105cc:	2b02      	cmp	r3, #2
 80105ce:	d002      	beq.n	80105d6 <USBD_SetConfig+0x3e>
 80105d0:	2b03      	cmp	r3, #3
 80105d2:	d029      	beq.n	8010628 <USBD_SetConfig+0x90>
 80105d4:	e075      	b.n	80106c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80105d6:	4b44      	ldr	r3, [pc, #272]	; (80106e8 <USBD_SetConfig+0x150>)
 80105d8:	781b      	ldrb	r3, [r3, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d020      	beq.n	8010620 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80105de:	4b42      	ldr	r3, [pc, #264]	; (80106e8 <USBD_SetConfig+0x150>)
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	461a      	mov	r2, r3
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80105e8:	4b3f      	ldr	r3, [pc, #252]	; (80106e8 <USBD_SetConfig+0x150>)
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	4619      	mov	r1, r3
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f7fe ffe1 	bl	800f5b6 <USBD_SetClassConfig>
 80105f4:	4603      	mov	r3, r0
 80105f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80105f8:	7bfb      	ldrb	r3, [r7, #15]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d008      	beq.n	8010610 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80105fe:	6839      	ldr	r1, [r7, #0]
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f000 f962 	bl	80108ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2202      	movs	r2, #2
 801060a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801060e:	e065      	b.n	80106dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f000 fa25 	bl	8010a60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2203      	movs	r2, #3
 801061a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801061e:	e05d      	b.n	80106dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f000 fa1d 	bl	8010a60 <USBD_CtlSendStatus>
      break;
 8010626:	e059      	b.n	80106dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010628:	4b2f      	ldr	r3, [pc, #188]	; (80106e8 <USBD_SetConfig+0x150>)
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d112      	bne.n	8010656 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2202      	movs	r2, #2
 8010634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010638:	4b2b      	ldr	r3, [pc, #172]	; (80106e8 <USBD_SetConfig+0x150>)
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	461a      	mov	r2, r3
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010642:	4b29      	ldr	r3, [pc, #164]	; (80106e8 <USBD_SetConfig+0x150>)
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	4619      	mov	r1, r3
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f7fe ffd0 	bl	800f5ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f000 fa06 	bl	8010a60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010654:	e042      	b.n	80106dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010656:	4b24      	ldr	r3, [pc, #144]	; (80106e8 <USBD_SetConfig+0x150>)
 8010658:	781b      	ldrb	r3, [r3, #0]
 801065a:	461a      	mov	r2, r3
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	429a      	cmp	r2, r3
 8010662:	d02a      	beq.n	80106ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	b2db      	uxtb	r3, r3
 801066a:	4619      	mov	r1, r3
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f7fe ffbe 	bl	800f5ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010672:	4b1d      	ldr	r3, [pc, #116]	; (80106e8 <USBD_SetConfig+0x150>)
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	461a      	mov	r2, r3
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801067c:	4b1a      	ldr	r3, [pc, #104]	; (80106e8 <USBD_SetConfig+0x150>)
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	4619      	mov	r1, r3
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f7fe ff97 	bl	800f5b6 <USBD_SetClassConfig>
 8010688:	4603      	mov	r3, r0
 801068a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801068c:	7bfb      	ldrb	r3, [r7, #15]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00f      	beq.n	80106b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010692:	6839      	ldr	r1, [r7, #0]
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f000 f918 	bl	80108ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	b2db      	uxtb	r3, r3
 80106a0:	4619      	mov	r1, r3
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f7fe ffa3 	bl	800f5ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2202      	movs	r2, #2
 80106ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80106b0:	e014      	b.n	80106dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f000 f9d4 	bl	8010a60 <USBD_CtlSendStatus>
      break;
 80106b8:	e010      	b.n	80106dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f000 f9d0 	bl	8010a60 <USBD_CtlSendStatus>
      break;
 80106c0:	e00c      	b.n	80106dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80106c2:	6839      	ldr	r1, [r7, #0]
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f000 f900 	bl	80108ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80106ca:	4b07      	ldr	r3, [pc, #28]	; (80106e8 <USBD_SetConfig+0x150>)
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	4619      	mov	r1, r3
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	f7fe ff8c 	bl	800f5ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80106d6:	2303      	movs	r3, #3
 80106d8:	73fb      	strb	r3, [r7, #15]
      break;
 80106da:	bf00      	nop
  }

  return ret;
 80106dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3710      	adds	r7, #16
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
 80106e6:	bf00      	nop
 80106e8:	20000e7c 	.word	0x20000e7c

080106ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
 80106f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	88db      	ldrh	r3, [r3, #6]
 80106fa:	2b01      	cmp	r3, #1
 80106fc:	d004      	beq.n	8010708 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80106fe:	6839      	ldr	r1, [r7, #0]
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f000 f8e2 	bl	80108ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010706:	e023      	b.n	8010750 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801070e:	b2db      	uxtb	r3, r3
 8010710:	2b02      	cmp	r3, #2
 8010712:	dc02      	bgt.n	801071a <USBD_GetConfig+0x2e>
 8010714:	2b00      	cmp	r3, #0
 8010716:	dc03      	bgt.n	8010720 <USBD_GetConfig+0x34>
 8010718:	e015      	b.n	8010746 <USBD_GetConfig+0x5a>
 801071a:	2b03      	cmp	r3, #3
 801071c:	d00b      	beq.n	8010736 <USBD_GetConfig+0x4a>
 801071e:	e012      	b.n	8010746 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2200      	movs	r2, #0
 8010724:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	3308      	adds	r3, #8
 801072a:	2201      	movs	r2, #1
 801072c:	4619      	mov	r1, r3
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f000 f93c 	bl	80109ac <USBD_CtlSendData>
        break;
 8010734:	e00c      	b.n	8010750 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	3304      	adds	r3, #4
 801073a:	2201      	movs	r2, #1
 801073c:	4619      	mov	r1, r3
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 f934 	bl	80109ac <USBD_CtlSendData>
        break;
 8010744:	e004      	b.n	8010750 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010746:	6839      	ldr	r1, [r7, #0]
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f000 f8be 	bl	80108ca <USBD_CtlError>
        break;
 801074e:	bf00      	nop
}
 8010750:	bf00      	nop
 8010752:	3708      	adds	r7, #8
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010768:	b2db      	uxtb	r3, r3
 801076a:	3b01      	subs	r3, #1
 801076c:	2b02      	cmp	r3, #2
 801076e:	d81e      	bhi.n	80107ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	88db      	ldrh	r3, [r3, #6]
 8010774:	2b02      	cmp	r3, #2
 8010776:	d004      	beq.n	8010782 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010778:	6839      	ldr	r1, [r7, #0]
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f000 f8a5 	bl	80108ca <USBD_CtlError>
        break;
 8010780:	e01a      	b.n	80107b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2201      	movs	r2, #1
 8010786:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801078e:	2b00      	cmp	r3, #0
 8010790:	d005      	beq.n	801079e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	68db      	ldr	r3, [r3, #12]
 8010796:	f043 0202 	orr.w	r2, r3, #2
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	330c      	adds	r3, #12
 80107a2:	2202      	movs	r2, #2
 80107a4:	4619      	mov	r1, r3
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f000 f900 	bl	80109ac <USBD_CtlSendData>
      break;
 80107ac:	e004      	b.n	80107b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80107ae:	6839      	ldr	r1, [r7, #0]
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f000 f88a 	bl	80108ca <USBD_CtlError>
      break;
 80107b6:	bf00      	nop
  }
}
 80107b8:	bf00      	nop
 80107ba:	3708      	adds	r7, #8
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}

080107c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	885b      	ldrh	r3, [r3, #2]
 80107ce:	2b01      	cmp	r3, #1
 80107d0:	d107      	bne.n	80107e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2201      	movs	r2, #1
 80107d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	f000 f940 	bl	8010a60 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80107e0:	e013      	b.n	801080a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	885b      	ldrh	r3, [r3, #2]
 80107e6:	2b02      	cmp	r3, #2
 80107e8:	d10b      	bne.n	8010802 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	889b      	ldrh	r3, [r3, #4]
 80107ee:	0a1b      	lsrs	r3, r3, #8
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	b2da      	uxtb	r2, r3
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f000 f930 	bl	8010a60 <USBD_CtlSendStatus>
}
 8010800:	e003      	b.n	801080a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010802:	6839      	ldr	r1, [r7, #0]
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f000 f860 	bl	80108ca <USBD_CtlError>
}
 801080a:	bf00      	nop
 801080c:	3708      	adds	r7, #8
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}

08010812 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010812:	b580      	push	{r7, lr}
 8010814:	b082      	sub	sp, #8
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
 801081a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010822:	b2db      	uxtb	r3, r3
 8010824:	3b01      	subs	r3, #1
 8010826:	2b02      	cmp	r3, #2
 8010828:	d80b      	bhi.n	8010842 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	885b      	ldrh	r3, [r3, #2]
 801082e:	2b01      	cmp	r3, #1
 8010830:	d10c      	bne.n	801084c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2200      	movs	r2, #0
 8010836:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f000 f910 	bl	8010a60 <USBD_CtlSendStatus>
      }
      break;
 8010840:	e004      	b.n	801084c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010842:	6839      	ldr	r1, [r7, #0]
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	f000 f840 	bl	80108ca <USBD_CtlError>
      break;
 801084a:	e000      	b.n	801084e <USBD_ClrFeature+0x3c>
      break;
 801084c:	bf00      	nop
  }
}
 801084e:	bf00      	nop
 8010850:	3708      	adds	r7, #8
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}

08010856 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010856:	b580      	push	{r7, lr}
 8010858:	b084      	sub	sp, #16
 801085a:	af00      	add	r7, sp, #0
 801085c:	6078      	str	r0, [r7, #4]
 801085e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	781a      	ldrb	r2, [r3, #0]
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	3301      	adds	r3, #1
 8010870:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	781a      	ldrb	r2, [r3, #0]
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	3301      	adds	r3, #1
 801087e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010880:	68f8      	ldr	r0, [r7, #12]
 8010882:	f7ff fa41 	bl	800fd08 <SWAPBYTE>
 8010886:	4603      	mov	r3, r0
 8010888:	461a      	mov	r2, r3
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	3301      	adds	r3, #1
 8010892:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	3301      	adds	r3, #1
 8010898:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801089a:	68f8      	ldr	r0, [r7, #12]
 801089c:	f7ff fa34 	bl	800fd08 <SWAPBYTE>
 80108a0:	4603      	mov	r3, r0
 80108a2:	461a      	mov	r2, r3
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	3301      	adds	r3, #1
 80108ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	3301      	adds	r3, #1
 80108b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80108b4:	68f8      	ldr	r0, [r7, #12]
 80108b6:	f7ff fa27 	bl	800fd08 <SWAPBYTE>
 80108ba:	4603      	mov	r3, r0
 80108bc:	461a      	mov	r2, r3
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	80da      	strh	r2, [r3, #6]
}
 80108c2:	bf00      	nop
 80108c4:	3710      	adds	r7, #16
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}

080108ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108ca:	b580      	push	{r7, lr}
 80108cc:	b082      	sub	sp, #8
 80108ce:	af00      	add	r7, sp, #0
 80108d0:	6078      	str	r0, [r7, #4]
 80108d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80108d4:	2180      	movs	r1, #128	; 0x80
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f000 fd44 	bl	8011364 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80108dc:	2100      	movs	r1, #0
 80108de:	6878      	ldr	r0, [r7, #4]
 80108e0:	f000 fd40 	bl	8011364 <USBD_LL_StallEP>
}
 80108e4:	bf00      	nop
 80108e6:	3708      	adds	r7, #8
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}

080108ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b086      	sub	sp, #24
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80108f8:	2300      	movs	r3, #0
 80108fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d036      	beq.n	8010970 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010906:	6938      	ldr	r0, [r7, #16]
 8010908:	f000 f836 	bl	8010978 <USBD_GetLen>
 801090c:	4603      	mov	r3, r0
 801090e:	3301      	adds	r3, #1
 8010910:	b29b      	uxth	r3, r3
 8010912:	005b      	lsls	r3, r3, #1
 8010914:	b29a      	uxth	r2, r3
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801091a:	7dfb      	ldrb	r3, [r7, #23]
 801091c:	68ba      	ldr	r2, [r7, #8]
 801091e:	4413      	add	r3, r2
 8010920:	687a      	ldr	r2, [r7, #4]
 8010922:	7812      	ldrb	r2, [r2, #0]
 8010924:	701a      	strb	r2, [r3, #0]
  idx++;
 8010926:	7dfb      	ldrb	r3, [r7, #23]
 8010928:	3301      	adds	r3, #1
 801092a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801092c:	7dfb      	ldrb	r3, [r7, #23]
 801092e:	68ba      	ldr	r2, [r7, #8]
 8010930:	4413      	add	r3, r2
 8010932:	2203      	movs	r2, #3
 8010934:	701a      	strb	r2, [r3, #0]
  idx++;
 8010936:	7dfb      	ldrb	r3, [r7, #23]
 8010938:	3301      	adds	r3, #1
 801093a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801093c:	e013      	b.n	8010966 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801093e:	7dfb      	ldrb	r3, [r7, #23]
 8010940:	68ba      	ldr	r2, [r7, #8]
 8010942:	4413      	add	r3, r2
 8010944:	693a      	ldr	r2, [r7, #16]
 8010946:	7812      	ldrb	r2, [r2, #0]
 8010948:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	3301      	adds	r3, #1
 801094e:	613b      	str	r3, [r7, #16]
    idx++;
 8010950:	7dfb      	ldrb	r3, [r7, #23]
 8010952:	3301      	adds	r3, #1
 8010954:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010956:	7dfb      	ldrb	r3, [r7, #23]
 8010958:	68ba      	ldr	r2, [r7, #8]
 801095a:	4413      	add	r3, r2
 801095c:	2200      	movs	r2, #0
 801095e:	701a      	strb	r2, [r3, #0]
    idx++;
 8010960:	7dfb      	ldrb	r3, [r7, #23]
 8010962:	3301      	adds	r3, #1
 8010964:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d1e7      	bne.n	801093e <USBD_GetString+0x52>
 801096e:	e000      	b.n	8010972 <USBD_GetString+0x86>
    return;
 8010970:	bf00      	nop
  }
}
 8010972:	3718      	adds	r7, #24
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010978:	b480      	push	{r7}
 801097a:	b085      	sub	sp, #20
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010980:	2300      	movs	r3, #0
 8010982:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010988:	e005      	b.n	8010996 <USBD_GetLen+0x1e>
  {
    len++;
 801098a:	7bfb      	ldrb	r3, [r7, #15]
 801098c:	3301      	adds	r3, #1
 801098e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	3301      	adds	r3, #1
 8010994:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d1f5      	bne.n	801098a <USBD_GetLen+0x12>
  }

  return len;
 801099e:	7bfb      	ldrb	r3, [r7, #15]
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3714      	adds	r7, #20
 80109a4:	46bd      	mov	sp, r7
 80109a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109aa:	4770      	bx	lr

080109ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b084      	sub	sp, #16
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	60f8      	str	r0, [r7, #12]
 80109b4:	60b9      	str	r1, [r7, #8]
 80109b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	2202      	movs	r2, #2
 80109bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	687a      	ldr	r2, [r7, #4]
 80109c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	687a      	ldr	r2, [r7, #4]
 80109ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	68ba      	ldr	r2, [r7, #8]
 80109d0:	2100      	movs	r1, #0
 80109d2:	68f8      	ldr	r0, [r7, #12]
 80109d4:	f000 fd4f 	bl	8011476 <USBD_LL_Transmit>

  return USBD_OK;
 80109d8:	2300      	movs	r3, #0
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3710      	adds	r7, #16
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}

080109e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80109e2:	b580      	push	{r7, lr}
 80109e4:	b084      	sub	sp, #16
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	60f8      	str	r0, [r7, #12]
 80109ea:	60b9      	str	r1, [r7, #8]
 80109ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	68ba      	ldr	r2, [r7, #8]
 80109f2:	2100      	movs	r1, #0
 80109f4:	68f8      	ldr	r0, [r7, #12]
 80109f6:	f000 fd3e 	bl	8011476 <USBD_LL_Transmit>

  return USBD_OK;
 80109fa:	2300      	movs	r3, #0
}
 80109fc:	4618      	mov	r0, r3
 80109fe:	3710      	adds	r7, #16
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b084      	sub	sp, #16
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	60f8      	str	r0, [r7, #12]
 8010a0c:	60b9      	str	r1, [r7, #8]
 8010a0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	2203      	movs	r2, #3
 8010a14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	687a      	ldr	r2, [r7, #4]
 8010a1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	687a      	ldr	r2, [r7, #4]
 8010a24:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	68ba      	ldr	r2, [r7, #8]
 8010a2c:	2100      	movs	r1, #0
 8010a2e:	68f8      	ldr	r0, [r7, #12]
 8010a30:	f000 fd42 	bl	80114b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010a34:	2300      	movs	r3, #0
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	3710      	adds	r7, #16
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}

08010a3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010a3e:	b580      	push	{r7, lr}
 8010a40:	b084      	sub	sp, #16
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	60f8      	str	r0, [r7, #12]
 8010a46:	60b9      	str	r1, [r7, #8]
 8010a48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	68ba      	ldr	r2, [r7, #8]
 8010a4e:	2100      	movs	r1, #0
 8010a50:	68f8      	ldr	r0, [r7, #12]
 8010a52:	f000 fd31 	bl	80114b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010a56:	2300      	movs	r3, #0
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3710      	adds	r7, #16
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}

08010a60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b082      	sub	sp, #8
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2204      	movs	r2, #4
 8010a6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010a70:	2300      	movs	r3, #0
 8010a72:	2200      	movs	r2, #0
 8010a74:	2100      	movs	r1, #0
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f000 fcfd 	bl	8011476 <USBD_LL_Transmit>

  return USBD_OK;
 8010a7c:	2300      	movs	r3, #0
}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	3708      	adds	r7, #8
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}

08010a86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010a86:	b580      	push	{r7, lr}
 8010a88:	b082      	sub	sp, #8
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	2205      	movs	r2, #5
 8010a92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010a96:	2300      	movs	r3, #0
 8010a98:	2200      	movs	r2, #0
 8010a9a:	2100      	movs	r1, #0
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f000 fd0b 	bl	80114b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010aa2:	2300      	movs	r3, #0
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3708      	adds	r7, #8
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}

08010aac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	4912      	ldr	r1, [pc, #72]	; (8010afc <MX_USB_DEVICE_Init+0x50>)
 8010ab4:	4812      	ldr	r0, [pc, #72]	; (8010b00 <MX_USB_DEVICE_Init+0x54>)
 8010ab6:	f7fe fd01 	bl	800f4bc <USBD_Init>
 8010aba:	4603      	mov	r3, r0
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d001      	beq.n	8010ac4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010ac0:	f7f0 fd8a 	bl	80015d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010ac4:	490f      	ldr	r1, [pc, #60]	; (8010b04 <MX_USB_DEVICE_Init+0x58>)
 8010ac6:	480e      	ldr	r0, [pc, #56]	; (8010b00 <MX_USB_DEVICE_Init+0x54>)
 8010ac8:	f7fe fd28 	bl	800f51c <USBD_RegisterClass>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d001      	beq.n	8010ad6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010ad2:	f7f0 fd81 	bl	80015d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010ad6:	490c      	ldr	r1, [pc, #48]	; (8010b08 <MX_USB_DEVICE_Init+0x5c>)
 8010ad8:	4809      	ldr	r0, [pc, #36]	; (8010b00 <MX_USB_DEVICE_Init+0x54>)
 8010ada:	f7fe fc1f 	bl	800f31c <USBD_CDC_RegisterInterface>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d001      	beq.n	8010ae8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010ae4:	f7f0 fd78 	bl	80015d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010ae8:	4805      	ldr	r0, [pc, #20]	; (8010b00 <MX_USB_DEVICE_Init+0x54>)
 8010aea:	f7fe fd4d 	bl	800f588 <USBD_Start>
 8010aee:	4603      	mov	r3, r0
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d001      	beq.n	8010af8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010af4:	f7f0 fd70 	bl	80015d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010af8:	bf00      	nop
 8010afa:	bd80      	pop	{r7, pc}
 8010afc:	20000104 	.word	0x20000104
 8010b00:	20000e80 	.word	0x20000e80
 8010b04:	20000068 	.word	0x20000068
 8010b08:	200000f0 	.word	0x200000f0

08010b0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010b10:	2200      	movs	r2, #0
 8010b12:	4905      	ldr	r1, [pc, #20]	; (8010b28 <CDC_Init_FS+0x1c>)
 8010b14:	4805      	ldr	r0, [pc, #20]	; (8010b2c <CDC_Init_FS+0x20>)
 8010b16:	f7fe fc1b 	bl	800f350 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010b1a:	4905      	ldr	r1, [pc, #20]	; (8010b30 <CDC_Init_FS+0x24>)
 8010b1c:	4803      	ldr	r0, [pc, #12]	; (8010b2c <CDC_Init_FS+0x20>)
 8010b1e:	f7fe fc39 	bl	800f394 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010b22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	bd80      	pop	{r7, pc}
 8010b28:	2000195c 	.word	0x2000195c
 8010b2c:	20000e80 	.word	0x20000e80
 8010b30:	2000115c 	.word	0x2000115c

08010b34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010b34:	b480      	push	{r7}
 8010b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010b38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b42:	4770      	bx	lr

08010b44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010b44:	b480      	push	{r7}
 8010b46:	b083      	sub	sp, #12
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	6039      	str	r1, [r7, #0]
 8010b4e:	71fb      	strb	r3, [r7, #7]
 8010b50:	4613      	mov	r3, r2
 8010b52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010b54:	79fb      	ldrb	r3, [r7, #7]
 8010b56:	2b23      	cmp	r3, #35	; 0x23
 8010b58:	f200 80a3 	bhi.w	8010ca2 <CDC_Control_FS+0x15e>
 8010b5c:	a201      	add	r2, pc, #4	; (adr r2, 8010b64 <CDC_Control_FS+0x20>)
 8010b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b62:	bf00      	nop
 8010b64:	08010ca3 	.word	0x08010ca3
 8010b68:	08010ca3 	.word	0x08010ca3
 8010b6c:	08010ca3 	.word	0x08010ca3
 8010b70:	08010ca3 	.word	0x08010ca3
 8010b74:	08010ca3 	.word	0x08010ca3
 8010b78:	08010ca3 	.word	0x08010ca3
 8010b7c:	08010ca3 	.word	0x08010ca3
 8010b80:	08010ca3 	.word	0x08010ca3
 8010b84:	08010ca3 	.word	0x08010ca3
 8010b88:	08010ca3 	.word	0x08010ca3
 8010b8c:	08010ca3 	.word	0x08010ca3
 8010b90:	08010ca3 	.word	0x08010ca3
 8010b94:	08010ca3 	.word	0x08010ca3
 8010b98:	08010ca3 	.word	0x08010ca3
 8010b9c:	08010ca3 	.word	0x08010ca3
 8010ba0:	08010ca3 	.word	0x08010ca3
 8010ba4:	08010ca3 	.word	0x08010ca3
 8010ba8:	08010ca3 	.word	0x08010ca3
 8010bac:	08010ca3 	.word	0x08010ca3
 8010bb0:	08010ca3 	.word	0x08010ca3
 8010bb4:	08010ca3 	.word	0x08010ca3
 8010bb8:	08010ca3 	.word	0x08010ca3
 8010bbc:	08010ca3 	.word	0x08010ca3
 8010bc0:	08010ca3 	.word	0x08010ca3
 8010bc4:	08010ca3 	.word	0x08010ca3
 8010bc8:	08010ca3 	.word	0x08010ca3
 8010bcc:	08010ca3 	.word	0x08010ca3
 8010bd0:	08010ca3 	.word	0x08010ca3
 8010bd4:	08010ca3 	.word	0x08010ca3
 8010bd8:	08010ca3 	.word	0x08010ca3
 8010bdc:	08010ca3 	.word	0x08010ca3
 8010be0:	08010ca3 	.word	0x08010ca3
 8010be4:	08010bf5 	.word	0x08010bf5
 8010be8:	08010c4f 	.word	0x08010c4f
 8010bec:	08010ca3 	.word	0x08010ca3
 8010bf0:	08010ca3 	.word	0x08010ca3
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	Linecoding.bitrate = (uint32_t)(pbuf[0]);
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	781b      	ldrb	r3, [r3, #0]
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	4b2e      	ldr	r3, [pc, #184]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010bfc:	601a      	str	r2, [r3, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 8010bfe:	4b2d      	ldr	r3, [pc, #180]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	683a      	ldr	r2, [r7, #0]
 8010c04:	3201      	adds	r2, #1
 8010c06:	7812      	ldrb	r2, [r2, #0]
 8010c08:	0212      	lsls	r2, r2, #8
 8010c0a:	4313      	orrs	r3, r2
 8010c0c:	4a29      	ldr	r2, [pc, #164]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010c0e:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 8010c10:	4b28      	ldr	r3, [pc, #160]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	683a      	ldr	r2, [r7, #0]
 8010c16:	3202      	adds	r2, #2
 8010c18:	7812      	ldrb	r2, [r2, #0]
 8010c1a:	0412      	lsls	r2, r2, #16
 8010c1c:	4313      	orrs	r3, r2
 8010c1e:	4a25      	ldr	r2, [pc, #148]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010c20:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 8010c22:	4b24      	ldr	r3, [pc, #144]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	683a      	ldr	r2, [r7, #0]
 8010c28:	3203      	adds	r2, #3
 8010c2a:	7812      	ldrb	r2, [r2, #0]
 8010c2c:	0612      	lsls	r2, r2, #24
 8010c2e:	4313      	orrs	r3, r2
 8010c30:	4a20      	ldr	r2, [pc, #128]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010c32:	6013      	str	r3, [r2, #0]
    	Linecoding.format = pbuf[4];
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	791a      	ldrb	r2, [r3, #4]
 8010c38:	4b1e      	ldr	r3, [pc, #120]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010c3a:	711a      	strb	r2, [r3, #4]
    	Linecoding.paritytype = pbuf[5];
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	795a      	ldrb	r2, [r3, #5]
 8010c40:	4b1c      	ldr	r3, [pc, #112]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010c42:	715a      	strb	r2, [r3, #5]
    	Linecoding.datatype = pbuf[6];
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	799a      	ldrb	r2, [r3, #6]
 8010c48:	4b1a      	ldr	r3, [pc, #104]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010c4a:	719a      	strb	r2, [r3, #6]
    break;
 8010c4c:	e02a      	b.n	8010ca4 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(Linecoding.bitrate);
 8010c4e:	4b19      	ldr	r3, [pc, #100]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	b2da      	uxtb	r2, r3
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(Linecoding.bitrate>>8);
 8010c58:	4b16      	ldr	r3, [pc, #88]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	0a1a      	lsrs	r2, r3, #8
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	3301      	adds	r3, #1
 8010c62:	b2d2      	uxtb	r2, r2
 8010c64:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(Linecoding.bitrate>>16);
 8010c66:	4b13      	ldr	r3, [pc, #76]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	0c1a      	lsrs	r2, r3, #16
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	3302      	adds	r3, #2
 8010c70:	b2d2      	uxtb	r2, r2
 8010c72:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(Linecoding.bitrate>>24);
 8010c74:	4b0f      	ldr	r3, [pc, #60]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	0e1a      	lsrs	r2, r3, #24
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	3303      	adds	r3, #3
 8010c7e:	b2d2      	uxtb	r2, r2
 8010c80:	701a      	strb	r2, [r3, #0]
      pbuf[4] = Linecoding.format;
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	3304      	adds	r3, #4
 8010c86:	4a0b      	ldr	r2, [pc, #44]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010c88:	7912      	ldrb	r2, [r2, #4]
 8010c8a:	701a      	strb	r2, [r3, #0]
      pbuf[5] = Linecoding.paritytype;
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	3305      	adds	r3, #5
 8010c90:	4a08      	ldr	r2, [pc, #32]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010c92:	7952      	ldrb	r2, [r2, #5]
 8010c94:	701a      	strb	r2, [r3, #0]
      pbuf[6] = Linecoding.datatype;
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	3306      	adds	r3, #6
 8010c9a:	4a06      	ldr	r2, [pc, #24]	; (8010cb4 <CDC_Control_FS+0x170>)
 8010c9c:	7992      	ldrb	r2, [r2, #6]
 8010c9e:	701a      	strb	r2, [r3, #0]
    break;
 8010ca0:	e000      	b.n	8010ca4 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010ca2:	bf00      	nop
  }

  return (USBD_OK);
 8010ca4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	370c      	adds	r7, #12
 8010caa:	46bd      	mov	sp, r7
 8010cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb0:	4770      	bx	lr
 8010cb2:	bf00      	nop
 8010cb4:	200000e8 	.word	0x200000e8

08010cb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b084      	sub	sp, #16
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010cc2:	6879      	ldr	r1, [r7, #4]
 8010cc4:	480e      	ldr	r0, [pc, #56]	; (8010d00 <CDC_Receive_FS+0x48>)
 8010cc6:	f7fe fb65 	bl	800f394 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010cca:	480d      	ldr	r0, [pc, #52]	; (8010d00 <CDC_Receive_FS+0x48>)
 8010ccc:	f7fe fbc0 	bl	800f450 <USBD_CDC_ReceivePacket>

  for(int i=0; i<*Len; i++)
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	60fb      	str	r3, [r7, #12]
 8010cd4:	e009      	b.n	8010cea <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	687a      	ldr	r2, [r7, #4]
 8010cda:	4413      	add	r3, r2
 8010cdc:	781b      	ldrb	r3, [r3, #0]
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7f1 f958 	bl	8001f94 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	60fb      	str	r3, [r7, #12]
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	681a      	ldr	r2, [r3, #0]
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d8f0      	bhi.n	8010cd6 <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 8010cf4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3710      	adds	r7, #16
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	20000e80 	.word	0x20000e80

08010d04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b084      	sub	sp, #16
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	460b      	mov	r3, r1
 8010d0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010d10:	2300      	movs	r3, #0
 8010d12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010d14:	4b0d      	ldr	r3, [pc, #52]	; (8010d4c <CDC_Transmit_FS+0x48>)
 8010d16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d001      	beq.n	8010d2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010d26:	2301      	movs	r3, #1
 8010d28:	e00b      	b.n	8010d42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010d2a:	887b      	ldrh	r3, [r7, #2]
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	6879      	ldr	r1, [r7, #4]
 8010d30:	4806      	ldr	r0, [pc, #24]	; (8010d4c <CDC_Transmit_FS+0x48>)
 8010d32:	f7fe fb0d 	bl	800f350 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010d36:	4805      	ldr	r0, [pc, #20]	; (8010d4c <CDC_Transmit_FS+0x48>)
 8010d38:	f7fe fb4a 	bl	800f3d0 <USBD_CDC_TransmitPacket>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3710      	adds	r7, #16
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	20000e80 	.word	0x20000e80

08010d50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010d50:	b480      	push	{r7}
 8010d52:	b087      	sub	sp, #28
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	60f8      	str	r0, [r7, #12]
 8010d58:	60b9      	str	r1, [r7, #8]
 8010d5a:	4613      	mov	r3, r2
 8010d5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010d62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	371c      	adds	r7, #28
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d70:	4770      	bx	lr
	...

08010d74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d74:	b480      	push	{r7}
 8010d76:	b083      	sub	sp, #12
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	6039      	str	r1, [r7, #0]
 8010d7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	2212      	movs	r2, #18
 8010d84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010d86:	4b03      	ldr	r3, [pc, #12]	; (8010d94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	370c      	adds	r7, #12
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d92:	4770      	bx	lr
 8010d94:	20000120 	.word	0x20000120

08010d98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d98:	b480      	push	{r7}
 8010d9a:	b083      	sub	sp, #12
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	4603      	mov	r3, r0
 8010da0:	6039      	str	r1, [r7, #0]
 8010da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	2204      	movs	r2, #4
 8010da8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010daa:	4b03      	ldr	r3, [pc, #12]	; (8010db8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010dac:	4618      	mov	r0, r3
 8010dae:	370c      	adds	r7, #12
 8010db0:	46bd      	mov	sp, r7
 8010db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db6:	4770      	bx	lr
 8010db8:	20000134 	.word	0x20000134

08010dbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	6039      	str	r1, [r7, #0]
 8010dc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010dc8:	79fb      	ldrb	r3, [r7, #7]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d105      	bne.n	8010dda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010dce:	683a      	ldr	r2, [r7, #0]
 8010dd0:	4907      	ldr	r1, [pc, #28]	; (8010df0 <USBD_FS_ProductStrDescriptor+0x34>)
 8010dd2:	4808      	ldr	r0, [pc, #32]	; (8010df4 <USBD_FS_ProductStrDescriptor+0x38>)
 8010dd4:	f7ff fd8a 	bl	80108ec <USBD_GetString>
 8010dd8:	e004      	b.n	8010de4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010dda:	683a      	ldr	r2, [r7, #0]
 8010ddc:	4904      	ldr	r1, [pc, #16]	; (8010df0 <USBD_FS_ProductStrDescriptor+0x34>)
 8010dde:	4805      	ldr	r0, [pc, #20]	; (8010df4 <USBD_FS_ProductStrDescriptor+0x38>)
 8010de0:	f7ff fd84 	bl	80108ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8010de4:	4b02      	ldr	r3, [pc, #8]	; (8010df0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3708      	adds	r7, #8
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	2000215c 	.word	0x2000215c
 8010df4:	08014e2c 	.word	0x08014e2c

08010df8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b082      	sub	sp, #8
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	4603      	mov	r3, r0
 8010e00:	6039      	str	r1, [r7, #0]
 8010e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010e04:	683a      	ldr	r2, [r7, #0]
 8010e06:	4904      	ldr	r1, [pc, #16]	; (8010e18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010e08:	4804      	ldr	r0, [pc, #16]	; (8010e1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010e0a:	f7ff fd6f 	bl	80108ec <USBD_GetString>
  return USBD_StrDesc;
 8010e0e:	4b02      	ldr	r3, [pc, #8]	; (8010e18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3708      	adds	r7, #8
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}
 8010e18:	2000215c 	.word	0x2000215c
 8010e1c:	08014e44 	.word	0x08014e44

08010e20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	4603      	mov	r3, r0
 8010e28:	6039      	str	r1, [r7, #0]
 8010e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	221a      	movs	r2, #26
 8010e30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010e32:	f000 f843 	bl	8010ebc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010e36:	4b02      	ldr	r3, [pc, #8]	; (8010e40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3708      	adds	r7, #8
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	20000138 	.word	0x20000138

08010e44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b082      	sub	sp, #8
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	6039      	str	r1, [r7, #0]
 8010e4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010e50:	79fb      	ldrb	r3, [r7, #7]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d105      	bne.n	8010e62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010e56:	683a      	ldr	r2, [r7, #0]
 8010e58:	4907      	ldr	r1, [pc, #28]	; (8010e78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010e5a:	4808      	ldr	r0, [pc, #32]	; (8010e7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010e5c:	f7ff fd46 	bl	80108ec <USBD_GetString>
 8010e60:	e004      	b.n	8010e6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010e62:	683a      	ldr	r2, [r7, #0]
 8010e64:	4904      	ldr	r1, [pc, #16]	; (8010e78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010e66:	4805      	ldr	r0, [pc, #20]	; (8010e7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010e68:	f7ff fd40 	bl	80108ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8010e6c:	4b02      	ldr	r3, [pc, #8]	; (8010e78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3708      	adds	r7, #8
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	bf00      	nop
 8010e78:	2000215c 	.word	0x2000215c
 8010e7c:	08014e58 	.word	0x08014e58

08010e80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	4603      	mov	r3, r0
 8010e88:	6039      	str	r1, [r7, #0]
 8010e8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010e8c:	79fb      	ldrb	r3, [r7, #7]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d105      	bne.n	8010e9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010e92:	683a      	ldr	r2, [r7, #0]
 8010e94:	4907      	ldr	r1, [pc, #28]	; (8010eb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010e96:	4808      	ldr	r0, [pc, #32]	; (8010eb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010e98:	f7ff fd28 	bl	80108ec <USBD_GetString>
 8010e9c:	e004      	b.n	8010ea8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010e9e:	683a      	ldr	r2, [r7, #0]
 8010ea0:	4904      	ldr	r1, [pc, #16]	; (8010eb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010ea2:	4805      	ldr	r0, [pc, #20]	; (8010eb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010ea4:	f7ff fd22 	bl	80108ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ea8:	4b02      	ldr	r3, [pc, #8]	; (8010eb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3708      	adds	r7, #8
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	2000215c 	.word	0x2000215c
 8010eb8:	08014e64 	.word	0x08014e64

08010ebc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b084      	sub	sp, #16
 8010ec0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010ec2:	4b0f      	ldr	r3, [pc, #60]	; (8010f00 <Get_SerialNum+0x44>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010ec8:	4b0e      	ldr	r3, [pc, #56]	; (8010f04 <Get_SerialNum+0x48>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010ece:	4b0e      	ldr	r3, [pc, #56]	; (8010f08 <Get_SerialNum+0x4c>)
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010ed4:	68fa      	ldr	r2, [r7, #12]
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	4413      	add	r3, r2
 8010eda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d009      	beq.n	8010ef6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010ee2:	2208      	movs	r2, #8
 8010ee4:	4909      	ldr	r1, [pc, #36]	; (8010f0c <Get_SerialNum+0x50>)
 8010ee6:	68f8      	ldr	r0, [r7, #12]
 8010ee8:	f000 f814 	bl	8010f14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010eec:	2204      	movs	r2, #4
 8010eee:	4908      	ldr	r1, [pc, #32]	; (8010f10 <Get_SerialNum+0x54>)
 8010ef0:	68b8      	ldr	r0, [r7, #8]
 8010ef2:	f000 f80f 	bl	8010f14 <IntToUnicode>
  }
}
 8010ef6:	bf00      	nop
 8010ef8:	3710      	adds	r7, #16
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}
 8010efe:	bf00      	nop
 8010f00:	1fff7a10 	.word	0x1fff7a10
 8010f04:	1fff7a14 	.word	0x1fff7a14
 8010f08:	1fff7a18 	.word	0x1fff7a18
 8010f0c:	2000013a 	.word	0x2000013a
 8010f10:	2000014a 	.word	0x2000014a

08010f14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010f14:	b480      	push	{r7}
 8010f16:	b087      	sub	sp, #28
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	60f8      	str	r0, [r7, #12]
 8010f1c:	60b9      	str	r1, [r7, #8]
 8010f1e:	4613      	mov	r3, r2
 8010f20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010f22:	2300      	movs	r3, #0
 8010f24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010f26:	2300      	movs	r3, #0
 8010f28:	75fb      	strb	r3, [r7, #23]
 8010f2a:	e027      	b.n	8010f7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	0f1b      	lsrs	r3, r3, #28
 8010f30:	2b09      	cmp	r3, #9
 8010f32:	d80b      	bhi.n	8010f4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	0f1b      	lsrs	r3, r3, #28
 8010f38:	b2da      	uxtb	r2, r3
 8010f3a:	7dfb      	ldrb	r3, [r7, #23]
 8010f3c:	005b      	lsls	r3, r3, #1
 8010f3e:	4619      	mov	r1, r3
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	440b      	add	r3, r1
 8010f44:	3230      	adds	r2, #48	; 0x30
 8010f46:	b2d2      	uxtb	r2, r2
 8010f48:	701a      	strb	r2, [r3, #0]
 8010f4a:	e00a      	b.n	8010f62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	0f1b      	lsrs	r3, r3, #28
 8010f50:	b2da      	uxtb	r2, r3
 8010f52:	7dfb      	ldrb	r3, [r7, #23]
 8010f54:	005b      	lsls	r3, r3, #1
 8010f56:	4619      	mov	r1, r3
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	440b      	add	r3, r1
 8010f5c:	3237      	adds	r2, #55	; 0x37
 8010f5e:	b2d2      	uxtb	r2, r2
 8010f60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	011b      	lsls	r3, r3, #4
 8010f66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010f68:	7dfb      	ldrb	r3, [r7, #23]
 8010f6a:	005b      	lsls	r3, r3, #1
 8010f6c:	3301      	adds	r3, #1
 8010f6e:	68ba      	ldr	r2, [r7, #8]
 8010f70:	4413      	add	r3, r2
 8010f72:	2200      	movs	r2, #0
 8010f74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010f76:	7dfb      	ldrb	r3, [r7, #23]
 8010f78:	3301      	adds	r3, #1
 8010f7a:	75fb      	strb	r3, [r7, #23]
 8010f7c:	7dfa      	ldrb	r2, [r7, #23]
 8010f7e:	79fb      	ldrb	r3, [r7, #7]
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d3d3      	bcc.n	8010f2c <IntToUnicode+0x18>
  }
}
 8010f84:	bf00      	nop
 8010f86:	bf00      	nop
 8010f88:	371c      	adds	r7, #28
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f90:	4770      	bx	lr
	...

08010f94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b08a      	sub	sp, #40	; 0x28
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010f9c:	f107 0314 	add.w	r3, r7, #20
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	601a      	str	r2, [r3, #0]
 8010fa4:	605a      	str	r2, [r3, #4]
 8010fa6:	609a      	str	r2, [r3, #8]
 8010fa8:	60da      	str	r2, [r3, #12]
 8010faa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010fb4:	d13a      	bne.n	801102c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	613b      	str	r3, [r7, #16]
 8010fba:	4b1e      	ldr	r3, [pc, #120]	; (8011034 <HAL_PCD_MspInit+0xa0>)
 8010fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fbe:	4a1d      	ldr	r2, [pc, #116]	; (8011034 <HAL_PCD_MspInit+0xa0>)
 8010fc0:	f043 0301 	orr.w	r3, r3, #1
 8010fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8010fc6:	4b1b      	ldr	r3, [pc, #108]	; (8011034 <HAL_PCD_MspInit+0xa0>)
 8010fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fca:	f003 0301 	and.w	r3, r3, #1
 8010fce:	613b      	str	r3, [r7, #16]
 8010fd0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010fd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010fd8:	2302      	movs	r3, #2
 8010fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010fe0:	2303      	movs	r3, #3
 8010fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010fe4:	230a      	movs	r3, #10
 8010fe6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010fe8:	f107 0314 	add.w	r3, r7, #20
 8010fec:	4619      	mov	r1, r3
 8010fee:	4812      	ldr	r0, [pc, #72]	; (8011038 <HAL_PCD_MspInit+0xa4>)
 8010ff0:	f7f3 ffbe 	bl	8004f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010ff4:	4b0f      	ldr	r3, [pc, #60]	; (8011034 <HAL_PCD_MspInit+0xa0>)
 8010ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ff8:	4a0e      	ldr	r2, [pc, #56]	; (8011034 <HAL_PCD_MspInit+0xa0>)
 8010ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ffe:	6353      	str	r3, [r2, #52]	; 0x34
 8011000:	2300      	movs	r3, #0
 8011002:	60fb      	str	r3, [r7, #12]
 8011004:	4b0b      	ldr	r3, [pc, #44]	; (8011034 <HAL_PCD_MspInit+0xa0>)
 8011006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011008:	4a0a      	ldr	r2, [pc, #40]	; (8011034 <HAL_PCD_MspInit+0xa0>)
 801100a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801100e:	6453      	str	r3, [r2, #68]	; 0x44
 8011010:	4b08      	ldr	r3, [pc, #32]	; (8011034 <HAL_PCD_MspInit+0xa0>)
 8011012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011018:	60fb      	str	r3, [r7, #12]
 801101a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801101c:	2200      	movs	r2, #0
 801101e:	2106      	movs	r1, #6
 8011020:	2043      	movs	r0, #67	; 0x43
 8011022:	f7f3 f8e8 	bl	80041f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011026:	2043      	movs	r0, #67	; 0x43
 8011028:	f7f3 f901 	bl	800422e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801102c:	bf00      	nop
 801102e:	3728      	adds	r7, #40	; 0x28
 8011030:	46bd      	mov	sp, r7
 8011032:	bd80      	pop	{r7, pc}
 8011034:	40023800 	.word	0x40023800
 8011038:	40020000 	.word	0x40020000

0801103c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b082      	sub	sp, #8
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8011050:	4619      	mov	r1, r3
 8011052:	4610      	mov	r0, r2
 8011054:	f7fe fae5 	bl	800f622 <USBD_LL_SetupStage>
}
 8011058:	bf00      	nop
 801105a:	3708      	adds	r7, #8
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	460b      	mov	r3, r1
 801106a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8011072:	78fa      	ldrb	r2, [r7, #3]
 8011074:	6879      	ldr	r1, [r7, #4]
 8011076:	4613      	mov	r3, r2
 8011078:	00db      	lsls	r3, r3, #3
 801107a:	4413      	add	r3, r2
 801107c:	009b      	lsls	r3, r3, #2
 801107e:	440b      	add	r3, r1
 8011080:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011084:	681a      	ldr	r2, [r3, #0]
 8011086:	78fb      	ldrb	r3, [r7, #3]
 8011088:	4619      	mov	r1, r3
 801108a:	f7fe fb1f 	bl	800f6cc <USBD_LL_DataOutStage>
}
 801108e:	bf00      	nop
 8011090:	3708      	adds	r7, #8
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}

08011096 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011096:	b580      	push	{r7, lr}
 8011098:	b082      	sub	sp, #8
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
 801109e:	460b      	mov	r3, r1
 80110a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80110a8:	78fa      	ldrb	r2, [r7, #3]
 80110aa:	6879      	ldr	r1, [r7, #4]
 80110ac:	4613      	mov	r3, r2
 80110ae:	00db      	lsls	r3, r3, #3
 80110b0:	4413      	add	r3, r2
 80110b2:	009b      	lsls	r3, r3, #2
 80110b4:	440b      	add	r3, r1
 80110b6:	3320      	adds	r3, #32
 80110b8:	681a      	ldr	r2, [r3, #0]
 80110ba:	78fb      	ldrb	r3, [r7, #3]
 80110bc:	4619      	mov	r1, r3
 80110be:	f7fe fbb8 	bl	800f832 <USBD_LL_DataInStage>
}
 80110c2:	bf00      	nop
 80110c4:	3708      	adds	r7, #8
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}

080110ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110ca:	b580      	push	{r7, lr}
 80110cc:	b082      	sub	sp, #8
 80110ce:	af00      	add	r7, sp, #0
 80110d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80110d8:	4618      	mov	r0, r3
 80110da:	f7fe fcf2 	bl	800fac2 <USBD_LL_SOF>
}
 80110de:	bf00      	nop
 80110e0:	3708      	adds	r7, #8
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}

080110e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110e6:	b580      	push	{r7, lr}
 80110e8:	b084      	sub	sp, #16
 80110ea:	af00      	add	r7, sp, #0
 80110ec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80110ee:	2301      	movs	r3, #1
 80110f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	79db      	ldrb	r3, [r3, #7]
 80110f6:	2b02      	cmp	r3, #2
 80110f8:	d001      	beq.n	80110fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80110fa:	f7f0 fa6d 	bl	80015d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011104:	7bfa      	ldrb	r2, [r7, #15]
 8011106:	4611      	mov	r1, r2
 8011108:	4618      	mov	r0, r3
 801110a:	f7fe fc96 	bl	800fa3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011114:	4618      	mov	r0, r3
 8011116:	f7fe fc3e 	bl	800f996 <USBD_LL_Reset>
}
 801111a:	bf00      	nop
 801111c:	3710      	adds	r7, #16
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}
	...

08011124 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b082      	sub	sp, #8
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011132:	4618      	mov	r0, r3
 8011134:	f7fe fc91 	bl	800fa5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	687a      	ldr	r2, [r7, #4]
 8011144:	6812      	ldr	r2, [r2, #0]
 8011146:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801114a:	f043 0301 	orr.w	r3, r3, #1
 801114e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	7adb      	ldrb	r3, [r3, #11]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d005      	beq.n	8011164 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011158:	4b04      	ldr	r3, [pc, #16]	; (801116c <HAL_PCD_SuspendCallback+0x48>)
 801115a:	691b      	ldr	r3, [r3, #16]
 801115c:	4a03      	ldr	r2, [pc, #12]	; (801116c <HAL_PCD_SuspendCallback+0x48>)
 801115e:	f043 0306 	orr.w	r3, r3, #6
 8011162:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011164:	bf00      	nop
 8011166:	3708      	adds	r7, #8
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}
 801116c:	e000ed00 	.word	0xe000ed00

08011170 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b082      	sub	sp, #8
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801117e:	4618      	mov	r0, r3
 8011180:	f7fe fc87 	bl	800fa92 <USBD_LL_Resume>
}
 8011184:	bf00      	nop
 8011186:	3708      	adds	r7, #8
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b082      	sub	sp, #8
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	460b      	mov	r3, r1
 8011196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801119e:	78fa      	ldrb	r2, [r7, #3]
 80111a0:	4611      	mov	r1, r2
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7fe fcdf 	bl	800fb66 <USBD_LL_IsoOUTIncomplete>
}
 80111a8:	bf00      	nop
 80111aa:	3708      	adds	r7, #8
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}

080111b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b082      	sub	sp, #8
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	460b      	mov	r3, r1
 80111ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80111c2:	78fa      	ldrb	r2, [r7, #3]
 80111c4:	4611      	mov	r1, r2
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7fe fc9b 	bl	800fb02 <USBD_LL_IsoINIncomplete>
}
 80111cc:	bf00      	nop
 80111ce:	3708      	adds	r7, #8
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7fe fcf1 	bl	800fbca <USBD_LL_DevConnected>
}
 80111e8:	bf00      	nop
 80111ea:	3708      	adds	r7, #8
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}

080111f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80111fe:	4618      	mov	r0, r3
 8011200:	f7fe fcee 	bl	800fbe0 <USBD_LL_DevDisconnected>
}
 8011204:	bf00      	nop
 8011206:	3708      	adds	r7, #8
 8011208:	46bd      	mov	sp, r7
 801120a:	bd80      	pop	{r7, pc}

0801120c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b082      	sub	sp, #8
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d13c      	bne.n	8011296 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801121c:	4a20      	ldr	r2, [pc, #128]	; (80112a0 <USBD_LL_Init+0x94>)
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	4a1e      	ldr	r2, [pc, #120]	; (80112a0 <USBD_LL_Init+0x94>)
 8011228:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801122c:	4b1c      	ldr	r3, [pc, #112]	; (80112a0 <USBD_LL_Init+0x94>)
 801122e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011232:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011234:	4b1a      	ldr	r3, [pc, #104]	; (80112a0 <USBD_LL_Init+0x94>)
 8011236:	2204      	movs	r2, #4
 8011238:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801123a:	4b19      	ldr	r3, [pc, #100]	; (80112a0 <USBD_LL_Init+0x94>)
 801123c:	2202      	movs	r2, #2
 801123e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011240:	4b17      	ldr	r3, [pc, #92]	; (80112a0 <USBD_LL_Init+0x94>)
 8011242:	2200      	movs	r2, #0
 8011244:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011246:	4b16      	ldr	r3, [pc, #88]	; (80112a0 <USBD_LL_Init+0x94>)
 8011248:	2202      	movs	r2, #2
 801124a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801124c:	4b14      	ldr	r3, [pc, #80]	; (80112a0 <USBD_LL_Init+0x94>)
 801124e:	2200      	movs	r2, #0
 8011250:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011252:	4b13      	ldr	r3, [pc, #76]	; (80112a0 <USBD_LL_Init+0x94>)
 8011254:	2200      	movs	r2, #0
 8011256:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011258:	4b11      	ldr	r3, [pc, #68]	; (80112a0 <USBD_LL_Init+0x94>)
 801125a:	2200      	movs	r2, #0
 801125c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801125e:	4b10      	ldr	r3, [pc, #64]	; (80112a0 <USBD_LL_Init+0x94>)
 8011260:	2200      	movs	r2, #0
 8011262:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011264:	4b0e      	ldr	r3, [pc, #56]	; (80112a0 <USBD_LL_Init+0x94>)
 8011266:	2200      	movs	r2, #0
 8011268:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801126a:	480d      	ldr	r0, [pc, #52]	; (80112a0 <USBD_LL_Init+0x94>)
 801126c:	f7f4 f84f 	bl	800530e <HAL_PCD_Init>
 8011270:	4603      	mov	r3, r0
 8011272:	2b00      	cmp	r3, #0
 8011274:	d001      	beq.n	801127a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011276:	f7f0 f9af 	bl	80015d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801127a:	2180      	movs	r1, #128	; 0x80
 801127c:	4808      	ldr	r0, [pc, #32]	; (80112a0 <USBD_LL_Init+0x94>)
 801127e:	f7f5 fa7a 	bl	8006776 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011282:	2240      	movs	r2, #64	; 0x40
 8011284:	2100      	movs	r1, #0
 8011286:	4806      	ldr	r0, [pc, #24]	; (80112a0 <USBD_LL_Init+0x94>)
 8011288:	f7f5 fa2e 	bl	80066e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801128c:	2280      	movs	r2, #128	; 0x80
 801128e:	2101      	movs	r1, #1
 8011290:	4803      	ldr	r0, [pc, #12]	; (80112a0 <USBD_LL_Init+0x94>)
 8011292:	f7f5 fa29 	bl	80066e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011296:	2300      	movs	r3, #0
}
 8011298:	4618      	mov	r0, r3
 801129a:	3708      	adds	r7, #8
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}
 80112a0:	2000235c 	.word	0x2000235c

080112a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112ac:	2300      	movs	r3, #0
 80112ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112b0:	2300      	movs	r3, #0
 80112b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80112ba:	4618      	mov	r0, r3
 80112bc:	f7f4 f936 	bl	800552c <HAL_PCD_Start>
 80112c0:	4603      	mov	r3, r0
 80112c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112c4:	7bfb      	ldrb	r3, [r7, #15]
 80112c6:	4618      	mov	r0, r3
 80112c8:	f000 f942 	bl	8011550 <USBD_Get_USB_Status>
 80112cc:	4603      	mov	r3, r0
 80112ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3710      	adds	r7, #16
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}

080112da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80112da:	b580      	push	{r7, lr}
 80112dc:	b084      	sub	sp, #16
 80112de:	af00      	add	r7, sp, #0
 80112e0:	6078      	str	r0, [r7, #4]
 80112e2:	4608      	mov	r0, r1
 80112e4:	4611      	mov	r1, r2
 80112e6:	461a      	mov	r2, r3
 80112e8:	4603      	mov	r3, r0
 80112ea:	70fb      	strb	r3, [r7, #3]
 80112ec:	460b      	mov	r3, r1
 80112ee:	70bb      	strb	r3, [r7, #2]
 80112f0:	4613      	mov	r3, r2
 80112f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112f4:	2300      	movs	r3, #0
 80112f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112f8:	2300      	movs	r3, #0
 80112fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011302:	78bb      	ldrb	r3, [r7, #2]
 8011304:	883a      	ldrh	r2, [r7, #0]
 8011306:	78f9      	ldrb	r1, [r7, #3]
 8011308:	f7f4 fe0a 	bl	8005f20 <HAL_PCD_EP_Open>
 801130c:	4603      	mov	r3, r0
 801130e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011310:	7bfb      	ldrb	r3, [r7, #15]
 8011312:	4618      	mov	r0, r3
 8011314:	f000 f91c 	bl	8011550 <USBD_Get_USB_Status>
 8011318:	4603      	mov	r3, r0
 801131a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801131c:	7bbb      	ldrb	r3, [r7, #14]
}
 801131e:	4618      	mov	r0, r3
 8011320:	3710      	adds	r7, #16
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}

08011326 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011326:	b580      	push	{r7, lr}
 8011328:	b084      	sub	sp, #16
 801132a:	af00      	add	r7, sp, #0
 801132c:	6078      	str	r0, [r7, #4]
 801132e:	460b      	mov	r3, r1
 8011330:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011332:	2300      	movs	r3, #0
 8011334:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011336:	2300      	movs	r3, #0
 8011338:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011340:	78fa      	ldrb	r2, [r7, #3]
 8011342:	4611      	mov	r1, r2
 8011344:	4618      	mov	r0, r3
 8011346:	f7f4 fe53 	bl	8005ff0 <HAL_PCD_EP_Close>
 801134a:	4603      	mov	r3, r0
 801134c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801134e:	7bfb      	ldrb	r3, [r7, #15]
 8011350:	4618      	mov	r0, r3
 8011352:	f000 f8fd 	bl	8011550 <USBD_Get_USB_Status>
 8011356:	4603      	mov	r3, r0
 8011358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801135a:	7bbb      	ldrb	r3, [r7, #14]
}
 801135c:	4618      	mov	r0, r3
 801135e:	3710      	adds	r7, #16
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	460b      	mov	r3, r1
 801136e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011370:	2300      	movs	r3, #0
 8011372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011374:	2300      	movs	r3, #0
 8011376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801137e:	78fa      	ldrb	r2, [r7, #3]
 8011380:	4611      	mov	r1, r2
 8011382:	4618      	mov	r0, r3
 8011384:	f7f4 ff0b 	bl	800619e <HAL_PCD_EP_SetStall>
 8011388:	4603      	mov	r3, r0
 801138a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801138c:	7bfb      	ldrb	r3, [r7, #15]
 801138e:	4618      	mov	r0, r3
 8011390:	f000 f8de 	bl	8011550 <USBD_Get_USB_Status>
 8011394:	4603      	mov	r3, r0
 8011396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011398:	7bbb      	ldrb	r3, [r7, #14]
}
 801139a:	4618      	mov	r0, r3
 801139c:	3710      	adds	r7, #16
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}

080113a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113a2:	b580      	push	{r7, lr}
 80113a4:	b084      	sub	sp, #16
 80113a6:	af00      	add	r7, sp, #0
 80113a8:	6078      	str	r0, [r7, #4]
 80113aa:	460b      	mov	r3, r1
 80113ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113ae:	2300      	movs	r3, #0
 80113b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113b2:	2300      	movs	r3, #0
 80113b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80113bc:	78fa      	ldrb	r2, [r7, #3]
 80113be:	4611      	mov	r1, r2
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7f4 ff4f 	bl	8006264 <HAL_PCD_EP_ClrStall>
 80113c6:	4603      	mov	r3, r0
 80113c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113ca:	7bfb      	ldrb	r3, [r7, #15]
 80113cc:	4618      	mov	r0, r3
 80113ce:	f000 f8bf 	bl	8011550 <USBD_Get_USB_Status>
 80113d2:	4603      	mov	r3, r0
 80113d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3710      	adds	r7, #16
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113e0:	b480      	push	{r7}
 80113e2:	b085      	sub	sp, #20
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	460b      	mov	r3, r1
 80113ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80113f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80113f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	da0b      	bge.n	8011414 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80113fc:	78fb      	ldrb	r3, [r7, #3]
 80113fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011402:	68f9      	ldr	r1, [r7, #12]
 8011404:	4613      	mov	r3, r2
 8011406:	00db      	lsls	r3, r3, #3
 8011408:	4413      	add	r3, r2
 801140a:	009b      	lsls	r3, r3, #2
 801140c:	440b      	add	r3, r1
 801140e:	3316      	adds	r3, #22
 8011410:	781b      	ldrb	r3, [r3, #0]
 8011412:	e00b      	b.n	801142c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011414:	78fb      	ldrb	r3, [r7, #3]
 8011416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801141a:	68f9      	ldr	r1, [r7, #12]
 801141c:	4613      	mov	r3, r2
 801141e:	00db      	lsls	r3, r3, #3
 8011420:	4413      	add	r3, r2
 8011422:	009b      	lsls	r3, r3, #2
 8011424:	440b      	add	r3, r1
 8011426:	f203 2356 	addw	r3, r3, #598	; 0x256
 801142a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801142c:	4618      	mov	r0, r3
 801142e:	3714      	adds	r7, #20
 8011430:	46bd      	mov	sp, r7
 8011432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011436:	4770      	bx	lr

08011438 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b084      	sub	sp, #16
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	460b      	mov	r3, r1
 8011442:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011444:	2300      	movs	r3, #0
 8011446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011448:	2300      	movs	r3, #0
 801144a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011452:	78fa      	ldrb	r2, [r7, #3]
 8011454:	4611      	mov	r1, r2
 8011456:	4618      	mov	r0, r3
 8011458:	f7f4 fd3e 	bl	8005ed8 <HAL_PCD_SetAddress>
 801145c:	4603      	mov	r3, r0
 801145e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011460:	7bfb      	ldrb	r3, [r7, #15]
 8011462:	4618      	mov	r0, r3
 8011464:	f000 f874 	bl	8011550 <USBD_Get_USB_Status>
 8011468:	4603      	mov	r3, r0
 801146a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801146c:	7bbb      	ldrb	r3, [r7, #14]
}
 801146e:	4618      	mov	r0, r3
 8011470:	3710      	adds	r7, #16
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}

08011476 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011476:	b580      	push	{r7, lr}
 8011478:	b086      	sub	sp, #24
 801147a:	af00      	add	r7, sp, #0
 801147c:	60f8      	str	r0, [r7, #12]
 801147e:	607a      	str	r2, [r7, #4]
 8011480:	603b      	str	r3, [r7, #0]
 8011482:	460b      	mov	r3, r1
 8011484:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011486:	2300      	movs	r3, #0
 8011488:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801148a:	2300      	movs	r3, #0
 801148c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011494:	7af9      	ldrb	r1, [r7, #11]
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	687a      	ldr	r2, [r7, #4]
 801149a:	f7f4 fe46 	bl	800612a <HAL_PCD_EP_Transmit>
 801149e:	4603      	mov	r3, r0
 80114a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114a2:	7dfb      	ldrb	r3, [r7, #23]
 80114a4:	4618      	mov	r0, r3
 80114a6:	f000 f853 	bl	8011550 <USBD_Get_USB_Status>
 80114aa:	4603      	mov	r3, r0
 80114ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80114ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	3718      	adds	r7, #24
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}

080114b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b086      	sub	sp, #24
 80114bc:	af00      	add	r7, sp, #0
 80114be:	60f8      	str	r0, [r7, #12]
 80114c0:	607a      	str	r2, [r7, #4]
 80114c2:	603b      	str	r3, [r7, #0]
 80114c4:	460b      	mov	r3, r1
 80114c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114c8:	2300      	movs	r3, #0
 80114ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114cc:	2300      	movs	r3, #0
 80114ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80114d6:	7af9      	ldrb	r1, [r7, #11]
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	687a      	ldr	r2, [r7, #4]
 80114dc:	f7f4 fdd2 	bl	8006084 <HAL_PCD_EP_Receive>
 80114e0:	4603      	mov	r3, r0
 80114e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114e4:	7dfb      	ldrb	r3, [r7, #23]
 80114e6:	4618      	mov	r0, r3
 80114e8:	f000 f832 	bl	8011550 <USBD_Get_USB_Status>
 80114ec:	4603      	mov	r3, r0
 80114ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80114f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3718      	adds	r7, #24
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}

080114fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80114fa:	b580      	push	{r7, lr}
 80114fc:	b082      	sub	sp, #8
 80114fe:	af00      	add	r7, sp, #0
 8011500:	6078      	str	r0, [r7, #4]
 8011502:	460b      	mov	r3, r1
 8011504:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801150c:	78fa      	ldrb	r2, [r7, #3]
 801150e:	4611      	mov	r1, r2
 8011510:	4618      	mov	r0, r3
 8011512:	f7f4 fdf2 	bl	80060fa <HAL_PCD_EP_GetRxCount>
 8011516:	4603      	mov	r3, r0
}
 8011518:	4618      	mov	r0, r3
 801151a:	3708      	adds	r7, #8
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}

08011520 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011520:	b480      	push	{r7}
 8011522:	b083      	sub	sp, #12
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011528:	4b03      	ldr	r3, [pc, #12]	; (8011538 <USBD_static_malloc+0x18>)
}
 801152a:	4618      	mov	r0, r3
 801152c:	370c      	adds	r7, #12
 801152e:	46bd      	mov	sp, r7
 8011530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop
 8011538:	20002840 	.word	0x20002840

0801153c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801153c:	b480      	push	{r7}
 801153e:	b083      	sub	sp, #12
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]

}
 8011544:	bf00      	nop
 8011546:	370c      	adds	r7, #12
 8011548:	46bd      	mov	sp, r7
 801154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154e:	4770      	bx	lr

08011550 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011550:	b480      	push	{r7}
 8011552:	b085      	sub	sp, #20
 8011554:	af00      	add	r7, sp, #0
 8011556:	4603      	mov	r3, r0
 8011558:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801155a:	2300      	movs	r3, #0
 801155c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801155e:	79fb      	ldrb	r3, [r7, #7]
 8011560:	2b03      	cmp	r3, #3
 8011562:	d817      	bhi.n	8011594 <USBD_Get_USB_Status+0x44>
 8011564:	a201      	add	r2, pc, #4	; (adr r2, 801156c <USBD_Get_USB_Status+0x1c>)
 8011566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801156a:	bf00      	nop
 801156c:	0801157d 	.word	0x0801157d
 8011570:	08011583 	.word	0x08011583
 8011574:	08011589 	.word	0x08011589
 8011578:	0801158f 	.word	0x0801158f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801157c:	2300      	movs	r3, #0
 801157e:	73fb      	strb	r3, [r7, #15]
    break;
 8011580:	e00b      	b.n	801159a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011582:	2303      	movs	r3, #3
 8011584:	73fb      	strb	r3, [r7, #15]
    break;
 8011586:	e008      	b.n	801159a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011588:	2301      	movs	r3, #1
 801158a:	73fb      	strb	r3, [r7, #15]
    break;
 801158c:	e005      	b.n	801159a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801158e:	2303      	movs	r3, #3
 8011590:	73fb      	strb	r3, [r7, #15]
    break;
 8011592:	e002      	b.n	801159a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011594:	2303      	movs	r3, #3
 8011596:	73fb      	strb	r3, [r7, #15]
    break;
 8011598:	bf00      	nop
  }
  return usb_status;
 801159a:	7bfb      	ldrb	r3, [r7, #15]
}
 801159c:	4618      	mov	r0, r3
 801159e:	3714      	adds	r7, #20
 80115a0:	46bd      	mov	sp, r7
 80115a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a6:	4770      	bx	lr

080115a8 <malloc>:
 80115a8:	4b02      	ldr	r3, [pc, #8]	; (80115b4 <malloc+0xc>)
 80115aa:	4601      	mov	r1, r0
 80115ac:	6818      	ldr	r0, [r3, #0]
 80115ae:	f000 b82b 	b.w	8011608 <_malloc_r>
 80115b2:	bf00      	nop
 80115b4:	20000318 	.word	0x20000318

080115b8 <free>:
 80115b8:	4b02      	ldr	r3, [pc, #8]	; (80115c4 <free+0xc>)
 80115ba:	4601      	mov	r1, r0
 80115bc:	6818      	ldr	r0, [r3, #0]
 80115be:	f001 b9c9 	b.w	8012954 <_free_r>
 80115c2:	bf00      	nop
 80115c4:	20000318 	.word	0x20000318

080115c8 <sbrk_aligned>:
 80115c8:	b570      	push	{r4, r5, r6, lr}
 80115ca:	4e0e      	ldr	r6, [pc, #56]	; (8011604 <sbrk_aligned+0x3c>)
 80115cc:	460c      	mov	r4, r1
 80115ce:	6831      	ldr	r1, [r6, #0]
 80115d0:	4605      	mov	r5, r0
 80115d2:	b911      	cbnz	r1, 80115da <sbrk_aligned+0x12>
 80115d4:	f001 f94a 	bl	801286c <_sbrk_r>
 80115d8:	6030      	str	r0, [r6, #0]
 80115da:	4621      	mov	r1, r4
 80115dc:	4628      	mov	r0, r5
 80115de:	f001 f945 	bl	801286c <_sbrk_r>
 80115e2:	1c43      	adds	r3, r0, #1
 80115e4:	d00a      	beq.n	80115fc <sbrk_aligned+0x34>
 80115e6:	1cc4      	adds	r4, r0, #3
 80115e8:	f024 0403 	bic.w	r4, r4, #3
 80115ec:	42a0      	cmp	r0, r4
 80115ee:	d007      	beq.n	8011600 <sbrk_aligned+0x38>
 80115f0:	1a21      	subs	r1, r4, r0
 80115f2:	4628      	mov	r0, r5
 80115f4:	f001 f93a 	bl	801286c <_sbrk_r>
 80115f8:	3001      	adds	r0, #1
 80115fa:	d101      	bne.n	8011600 <sbrk_aligned+0x38>
 80115fc:	f04f 34ff 	mov.w	r4, #4294967295
 8011600:	4620      	mov	r0, r4
 8011602:	bd70      	pop	{r4, r5, r6, pc}
 8011604:	20002a64 	.word	0x20002a64

08011608 <_malloc_r>:
 8011608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801160c:	1ccd      	adds	r5, r1, #3
 801160e:	f025 0503 	bic.w	r5, r5, #3
 8011612:	3508      	adds	r5, #8
 8011614:	2d0c      	cmp	r5, #12
 8011616:	bf38      	it	cc
 8011618:	250c      	movcc	r5, #12
 801161a:	2d00      	cmp	r5, #0
 801161c:	4607      	mov	r7, r0
 801161e:	db01      	blt.n	8011624 <_malloc_r+0x1c>
 8011620:	42a9      	cmp	r1, r5
 8011622:	d905      	bls.n	8011630 <_malloc_r+0x28>
 8011624:	230c      	movs	r3, #12
 8011626:	603b      	str	r3, [r7, #0]
 8011628:	2600      	movs	r6, #0
 801162a:	4630      	mov	r0, r6
 801162c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011630:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011704 <_malloc_r+0xfc>
 8011634:	f000 f868 	bl	8011708 <__malloc_lock>
 8011638:	f8d8 3000 	ldr.w	r3, [r8]
 801163c:	461c      	mov	r4, r3
 801163e:	bb5c      	cbnz	r4, 8011698 <_malloc_r+0x90>
 8011640:	4629      	mov	r1, r5
 8011642:	4638      	mov	r0, r7
 8011644:	f7ff ffc0 	bl	80115c8 <sbrk_aligned>
 8011648:	1c43      	adds	r3, r0, #1
 801164a:	4604      	mov	r4, r0
 801164c:	d155      	bne.n	80116fa <_malloc_r+0xf2>
 801164e:	f8d8 4000 	ldr.w	r4, [r8]
 8011652:	4626      	mov	r6, r4
 8011654:	2e00      	cmp	r6, #0
 8011656:	d145      	bne.n	80116e4 <_malloc_r+0xdc>
 8011658:	2c00      	cmp	r4, #0
 801165a:	d048      	beq.n	80116ee <_malloc_r+0xe6>
 801165c:	6823      	ldr	r3, [r4, #0]
 801165e:	4631      	mov	r1, r6
 8011660:	4638      	mov	r0, r7
 8011662:	eb04 0903 	add.w	r9, r4, r3
 8011666:	f001 f901 	bl	801286c <_sbrk_r>
 801166a:	4581      	cmp	r9, r0
 801166c:	d13f      	bne.n	80116ee <_malloc_r+0xe6>
 801166e:	6821      	ldr	r1, [r4, #0]
 8011670:	1a6d      	subs	r5, r5, r1
 8011672:	4629      	mov	r1, r5
 8011674:	4638      	mov	r0, r7
 8011676:	f7ff ffa7 	bl	80115c8 <sbrk_aligned>
 801167a:	3001      	adds	r0, #1
 801167c:	d037      	beq.n	80116ee <_malloc_r+0xe6>
 801167e:	6823      	ldr	r3, [r4, #0]
 8011680:	442b      	add	r3, r5
 8011682:	6023      	str	r3, [r4, #0]
 8011684:	f8d8 3000 	ldr.w	r3, [r8]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d038      	beq.n	80116fe <_malloc_r+0xf6>
 801168c:	685a      	ldr	r2, [r3, #4]
 801168e:	42a2      	cmp	r2, r4
 8011690:	d12b      	bne.n	80116ea <_malloc_r+0xe2>
 8011692:	2200      	movs	r2, #0
 8011694:	605a      	str	r2, [r3, #4]
 8011696:	e00f      	b.n	80116b8 <_malloc_r+0xb0>
 8011698:	6822      	ldr	r2, [r4, #0]
 801169a:	1b52      	subs	r2, r2, r5
 801169c:	d41f      	bmi.n	80116de <_malloc_r+0xd6>
 801169e:	2a0b      	cmp	r2, #11
 80116a0:	d917      	bls.n	80116d2 <_malloc_r+0xca>
 80116a2:	1961      	adds	r1, r4, r5
 80116a4:	42a3      	cmp	r3, r4
 80116a6:	6025      	str	r5, [r4, #0]
 80116a8:	bf18      	it	ne
 80116aa:	6059      	strne	r1, [r3, #4]
 80116ac:	6863      	ldr	r3, [r4, #4]
 80116ae:	bf08      	it	eq
 80116b0:	f8c8 1000 	streq.w	r1, [r8]
 80116b4:	5162      	str	r2, [r4, r5]
 80116b6:	604b      	str	r3, [r1, #4]
 80116b8:	4638      	mov	r0, r7
 80116ba:	f104 060b 	add.w	r6, r4, #11
 80116be:	f000 f829 	bl	8011714 <__malloc_unlock>
 80116c2:	f026 0607 	bic.w	r6, r6, #7
 80116c6:	1d23      	adds	r3, r4, #4
 80116c8:	1af2      	subs	r2, r6, r3
 80116ca:	d0ae      	beq.n	801162a <_malloc_r+0x22>
 80116cc:	1b9b      	subs	r3, r3, r6
 80116ce:	50a3      	str	r3, [r4, r2]
 80116d0:	e7ab      	b.n	801162a <_malloc_r+0x22>
 80116d2:	42a3      	cmp	r3, r4
 80116d4:	6862      	ldr	r2, [r4, #4]
 80116d6:	d1dd      	bne.n	8011694 <_malloc_r+0x8c>
 80116d8:	f8c8 2000 	str.w	r2, [r8]
 80116dc:	e7ec      	b.n	80116b8 <_malloc_r+0xb0>
 80116de:	4623      	mov	r3, r4
 80116e0:	6864      	ldr	r4, [r4, #4]
 80116e2:	e7ac      	b.n	801163e <_malloc_r+0x36>
 80116e4:	4634      	mov	r4, r6
 80116e6:	6876      	ldr	r6, [r6, #4]
 80116e8:	e7b4      	b.n	8011654 <_malloc_r+0x4c>
 80116ea:	4613      	mov	r3, r2
 80116ec:	e7cc      	b.n	8011688 <_malloc_r+0x80>
 80116ee:	230c      	movs	r3, #12
 80116f0:	603b      	str	r3, [r7, #0]
 80116f2:	4638      	mov	r0, r7
 80116f4:	f000 f80e 	bl	8011714 <__malloc_unlock>
 80116f8:	e797      	b.n	801162a <_malloc_r+0x22>
 80116fa:	6025      	str	r5, [r4, #0]
 80116fc:	e7dc      	b.n	80116b8 <_malloc_r+0xb0>
 80116fe:	605b      	str	r3, [r3, #4]
 8011700:	deff      	udf	#255	; 0xff
 8011702:	bf00      	nop
 8011704:	20002a60 	.word	0x20002a60

08011708 <__malloc_lock>:
 8011708:	4801      	ldr	r0, [pc, #4]	; (8011710 <__malloc_lock+0x8>)
 801170a:	f001 b8fc 	b.w	8012906 <__retarget_lock_acquire_recursive>
 801170e:	bf00      	nop
 8011710:	20002ba8 	.word	0x20002ba8

08011714 <__malloc_unlock>:
 8011714:	4801      	ldr	r0, [pc, #4]	; (801171c <__malloc_unlock+0x8>)
 8011716:	f001 b8f7 	b.w	8012908 <__retarget_lock_release_recursive>
 801171a:	bf00      	nop
 801171c:	20002ba8 	.word	0x20002ba8

08011720 <sulp>:
 8011720:	b570      	push	{r4, r5, r6, lr}
 8011722:	4604      	mov	r4, r0
 8011724:	460d      	mov	r5, r1
 8011726:	ec45 4b10 	vmov	d0, r4, r5
 801172a:	4616      	mov	r6, r2
 801172c:	f002 f834 	bl	8013798 <__ulp>
 8011730:	ec51 0b10 	vmov	r0, r1, d0
 8011734:	b17e      	cbz	r6, 8011756 <sulp+0x36>
 8011736:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801173a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801173e:	2b00      	cmp	r3, #0
 8011740:	dd09      	ble.n	8011756 <sulp+0x36>
 8011742:	051b      	lsls	r3, r3, #20
 8011744:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011748:	2400      	movs	r4, #0
 801174a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801174e:	4622      	mov	r2, r4
 8011750:	462b      	mov	r3, r5
 8011752:	f7ee ff61 	bl	8000618 <__aeabi_dmul>
 8011756:	bd70      	pop	{r4, r5, r6, pc}

08011758 <_strtod_l>:
 8011758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801175c:	ed2d 8b02 	vpush	{d8}
 8011760:	b09b      	sub	sp, #108	; 0x6c
 8011762:	4604      	mov	r4, r0
 8011764:	9213      	str	r2, [sp, #76]	; 0x4c
 8011766:	2200      	movs	r2, #0
 8011768:	9216      	str	r2, [sp, #88]	; 0x58
 801176a:	460d      	mov	r5, r1
 801176c:	f04f 0800 	mov.w	r8, #0
 8011770:	f04f 0900 	mov.w	r9, #0
 8011774:	460a      	mov	r2, r1
 8011776:	9215      	str	r2, [sp, #84]	; 0x54
 8011778:	7811      	ldrb	r1, [r2, #0]
 801177a:	292b      	cmp	r1, #43	; 0x2b
 801177c:	d04c      	beq.n	8011818 <_strtod_l+0xc0>
 801177e:	d83a      	bhi.n	80117f6 <_strtod_l+0x9e>
 8011780:	290d      	cmp	r1, #13
 8011782:	d834      	bhi.n	80117ee <_strtod_l+0x96>
 8011784:	2908      	cmp	r1, #8
 8011786:	d834      	bhi.n	80117f2 <_strtod_l+0x9a>
 8011788:	2900      	cmp	r1, #0
 801178a:	d03d      	beq.n	8011808 <_strtod_l+0xb0>
 801178c:	2200      	movs	r2, #0
 801178e:	920a      	str	r2, [sp, #40]	; 0x28
 8011790:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8011792:	7832      	ldrb	r2, [r6, #0]
 8011794:	2a30      	cmp	r2, #48	; 0x30
 8011796:	f040 80b4 	bne.w	8011902 <_strtod_l+0x1aa>
 801179a:	7872      	ldrb	r2, [r6, #1]
 801179c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80117a0:	2a58      	cmp	r2, #88	; 0x58
 80117a2:	d170      	bne.n	8011886 <_strtod_l+0x12e>
 80117a4:	9302      	str	r3, [sp, #8]
 80117a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117a8:	9301      	str	r3, [sp, #4]
 80117aa:	ab16      	add	r3, sp, #88	; 0x58
 80117ac:	9300      	str	r3, [sp, #0]
 80117ae:	4a8e      	ldr	r2, [pc, #568]	; (80119e8 <_strtod_l+0x290>)
 80117b0:	ab17      	add	r3, sp, #92	; 0x5c
 80117b2:	a915      	add	r1, sp, #84	; 0x54
 80117b4:	4620      	mov	r0, r4
 80117b6:	f001 f981 	bl	8012abc <__gethex>
 80117ba:	f010 070f 	ands.w	r7, r0, #15
 80117be:	4605      	mov	r5, r0
 80117c0:	d005      	beq.n	80117ce <_strtod_l+0x76>
 80117c2:	2f06      	cmp	r7, #6
 80117c4:	d12a      	bne.n	801181c <_strtod_l+0xc4>
 80117c6:	3601      	adds	r6, #1
 80117c8:	2300      	movs	r3, #0
 80117ca:	9615      	str	r6, [sp, #84]	; 0x54
 80117cc:	930a      	str	r3, [sp, #40]	; 0x28
 80117ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	f040 857f 	bne.w	80122d4 <_strtod_l+0xb7c>
 80117d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117d8:	b1db      	cbz	r3, 8011812 <_strtod_l+0xba>
 80117da:	4642      	mov	r2, r8
 80117dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80117e0:	ec43 2b10 	vmov	d0, r2, r3
 80117e4:	b01b      	add	sp, #108	; 0x6c
 80117e6:	ecbd 8b02 	vpop	{d8}
 80117ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ee:	2920      	cmp	r1, #32
 80117f0:	d1cc      	bne.n	801178c <_strtod_l+0x34>
 80117f2:	3201      	adds	r2, #1
 80117f4:	e7bf      	b.n	8011776 <_strtod_l+0x1e>
 80117f6:	292d      	cmp	r1, #45	; 0x2d
 80117f8:	d1c8      	bne.n	801178c <_strtod_l+0x34>
 80117fa:	2101      	movs	r1, #1
 80117fc:	910a      	str	r1, [sp, #40]	; 0x28
 80117fe:	1c51      	adds	r1, r2, #1
 8011800:	9115      	str	r1, [sp, #84]	; 0x54
 8011802:	7852      	ldrb	r2, [r2, #1]
 8011804:	2a00      	cmp	r2, #0
 8011806:	d1c3      	bne.n	8011790 <_strtod_l+0x38>
 8011808:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801180a:	9515      	str	r5, [sp, #84]	; 0x54
 801180c:	2b00      	cmp	r3, #0
 801180e:	f040 855f 	bne.w	80122d0 <_strtod_l+0xb78>
 8011812:	4642      	mov	r2, r8
 8011814:	464b      	mov	r3, r9
 8011816:	e7e3      	b.n	80117e0 <_strtod_l+0x88>
 8011818:	2100      	movs	r1, #0
 801181a:	e7ef      	b.n	80117fc <_strtod_l+0xa4>
 801181c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801181e:	b13a      	cbz	r2, 8011830 <_strtod_l+0xd8>
 8011820:	2135      	movs	r1, #53	; 0x35
 8011822:	a818      	add	r0, sp, #96	; 0x60
 8011824:	f002 f8b5 	bl	8013992 <__copybits>
 8011828:	9916      	ldr	r1, [sp, #88]	; 0x58
 801182a:	4620      	mov	r0, r4
 801182c:	f001 fc88 	bl	8013140 <_Bfree>
 8011830:	3f01      	subs	r7, #1
 8011832:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011834:	2f04      	cmp	r7, #4
 8011836:	d806      	bhi.n	8011846 <_strtod_l+0xee>
 8011838:	e8df f007 	tbb	[pc, r7]
 801183c:	201d0314 	.word	0x201d0314
 8011840:	14          	.byte	0x14
 8011841:	00          	.byte	0x00
 8011842:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8011846:	05e9      	lsls	r1, r5, #23
 8011848:	bf48      	it	mi
 801184a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801184e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011852:	0d1b      	lsrs	r3, r3, #20
 8011854:	051b      	lsls	r3, r3, #20
 8011856:	2b00      	cmp	r3, #0
 8011858:	d1b9      	bne.n	80117ce <_strtod_l+0x76>
 801185a:	f001 f829 	bl	80128b0 <__errno>
 801185e:	2322      	movs	r3, #34	; 0x22
 8011860:	6003      	str	r3, [r0, #0]
 8011862:	e7b4      	b.n	80117ce <_strtod_l+0x76>
 8011864:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8011868:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801186c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011870:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8011874:	e7e7      	b.n	8011846 <_strtod_l+0xee>
 8011876:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80119f0 <_strtod_l+0x298>
 801187a:	e7e4      	b.n	8011846 <_strtod_l+0xee>
 801187c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011880:	f04f 38ff 	mov.w	r8, #4294967295
 8011884:	e7df      	b.n	8011846 <_strtod_l+0xee>
 8011886:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011888:	1c5a      	adds	r2, r3, #1
 801188a:	9215      	str	r2, [sp, #84]	; 0x54
 801188c:	785b      	ldrb	r3, [r3, #1]
 801188e:	2b30      	cmp	r3, #48	; 0x30
 8011890:	d0f9      	beq.n	8011886 <_strtod_l+0x12e>
 8011892:	2b00      	cmp	r3, #0
 8011894:	d09b      	beq.n	80117ce <_strtod_l+0x76>
 8011896:	2301      	movs	r3, #1
 8011898:	f04f 0a00 	mov.w	sl, #0
 801189c:	9304      	str	r3, [sp, #16]
 801189e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80118a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80118a6:	46d3      	mov	fp, sl
 80118a8:	220a      	movs	r2, #10
 80118aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80118ac:	7806      	ldrb	r6, [r0, #0]
 80118ae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80118b2:	b2d9      	uxtb	r1, r3
 80118b4:	2909      	cmp	r1, #9
 80118b6:	d926      	bls.n	8011906 <_strtod_l+0x1ae>
 80118b8:	494c      	ldr	r1, [pc, #304]	; (80119ec <_strtod_l+0x294>)
 80118ba:	2201      	movs	r2, #1
 80118bc:	f000 ff64 	bl	8012788 <strncmp>
 80118c0:	2800      	cmp	r0, #0
 80118c2:	d030      	beq.n	8011926 <_strtod_l+0x1ce>
 80118c4:	2000      	movs	r0, #0
 80118c6:	4632      	mov	r2, r6
 80118c8:	9005      	str	r0, [sp, #20]
 80118ca:	465e      	mov	r6, fp
 80118cc:	4603      	mov	r3, r0
 80118ce:	2a65      	cmp	r2, #101	; 0x65
 80118d0:	d001      	beq.n	80118d6 <_strtod_l+0x17e>
 80118d2:	2a45      	cmp	r2, #69	; 0x45
 80118d4:	d113      	bne.n	80118fe <_strtod_l+0x1a6>
 80118d6:	b91e      	cbnz	r6, 80118e0 <_strtod_l+0x188>
 80118d8:	9a04      	ldr	r2, [sp, #16]
 80118da:	4302      	orrs	r2, r0
 80118dc:	d094      	beq.n	8011808 <_strtod_l+0xb0>
 80118de:	2600      	movs	r6, #0
 80118e0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80118e2:	1c6a      	adds	r2, r5, #1
 80118e4:	9215      	str	r2, [sp, #84]	; 0x54
 80118e6:	786a      	ldrb	r2, [r5, #1]
 80118e8:	2a2b      	cmp	r2, #43	; 0x2b
 80118ea:	d074      	beq.n	80119d6 <_strtod_l+0x27e>
 80118ec:	2a2d      	cmp	r2, #45	; 0x2d
 80118ee:	d078      	beq.n	80119e2 <_strtod_l+0x28a>
 80118f0:	f04f 0c00 	mov.w	ip, #0
 80118f4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80118f8:	2909      	cmp	r1, #9
 80118fa:	d97f      	bls.n	80119fc <_strtod_l+0x2a4>
 80118fc:	9515      	str	r5, [sp, #84]	; 0x54
 80118fe:	2700      	movs	r7, #0
 8011900:	e09e      	b.n	8011a40 <_strtod_l+0x2e8>
 8011902:	2300      	movs	r3, #0
 8011904:	e7c8      	b.n	8011898 <_strtod_l+0x140>
 8011906:	f1bb 0f08 	cmp.w	fp, #8
 801190a:	bfd8      	it	le
 801190c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801190e:	f100 0001 	add.w	r0, r0, #1
 8011912:	bfda      	itte	le
 8011914:	fb02 3301 	mlale	r3, r2, r1, r3
 8011918:	9309      	strle	r3, [sp, #36]	; 0x24
 801191a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801191e:	f10b 0b01 	add.w	fp, fp, #1
 8011922:	9015      	str	r0, [sp, #84]	; 0x54
 8011924:	e7c1      	b.n	80118aa <_strtod_l+0x152>
 8011926:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011928:	1c5a      	adds	r2, r3, #1
 801192a:	9215      	str	r2, [sp, #84]	; 0x54
 801192c:	785a      	ldrb	r2, [r3, #1]
 801192e:	f1bb 0f00 	cmp.w	fp, #0
 8011932:	d037      	beq.n	80119a4 <_strtod_l+0x24c>
 8011934:	9005      	str	r0, [sp, #20]
 8011936:	465e      	mov	r6, fp
 8011938:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801193c:	2b09      	cmp	r3, #9
 801193e:	d912      	bls.n	8011966 <_strtod_l+0x20e>
 8011940:	2301      	movs	r3, #1
 8011942:	e7c4      	b.n	80118ce <_strtod_l+0x176>
 8011944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011946:	1c5a      	adds	r2, r3, #1
 8011948:	9215      	str	r2, [sp, #84]	; 0x54
 801194a:	785a      	ldrb	r2, [r3, #1]
 801194c:	3001      	adds	r0, #1
 801194e:	2a30      	cmp	r2, #48	; 0x30
 8011950:	d0f8      	beq.n	8011944 <_strtod_l+0x1ec>
 8011952:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011956:	2b08      	cmp	r3, #8
 8011958:	f200 84c1 	bhi.w	80122de <_strtod_l+0xb86>
 801195c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801195e:	9005      	str	r0, [sp, #20]
 8011960:	2000      	movs	r0, #0
 8011962:	930b      	str	r3, [sp, #44]	; 0x2c
 8011964:	4606      	mov	r6, r0
 8011966:	3a30      	subs	r2, #48	; 0x30
 8011968:	f100 0301 	add.w	r3, r0, #1
 801196c:	d014      	beq.n	8011998 <_strtod_l+0x240>
 801196e:	9905      	ldr	r1, [sp, #20]
 8011970:	4419      	add	r1, r3
 8011972:	9105      	str	r1, [sp, #20]
 8011974:	4633      	mov	r3, r6
 8011976:	eb00 0c06 	add.w	ip, r0, r6
 801197a:	210a      	movs	r1, #10
 801197c:	4563      	cmp	r3, ip
 801197e:	d113      	bne.n	80119a8 <_strtod_l+0x250>
 8011980:	1833      	adds	r3, r6, r0
 8011982:	2b08      	cmp	r3, #8
 8011984:	f106 0601 	add.w	r6, r6, #1
 8011988:	4406      	add	r6, r0
 801198a:	dc1a      	bgt.n	80119c2 <_strtod_l+0x26a>
 801198c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801198e:	230a      	movs	r3, #10
 8011990:	fb03 2301 	mla	r3, r3, r1, r2
 8011994:	9309      	str	r3, [sp, #36]	; 0x24
 8011996:	2300      	movs	r3, #0
 8011998:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801199a:	1c51      	adds	r1, r2, #1
 801199c:	9115      	str	r1, [sp, #84]	; 0x54
 801199e:	7852      	ldrb	r2, [r2, #1]
 80119a0:	4618      	mov	r0, r3
 80119a2:	e7c9      	b.n	8011938 <_strtod_l+0x1e0>
 80119a4:	4658      	mov	r0, fp
 80119a6:	e7d2      	b.n	801194e <_strtod_l+0x1f6>
 80119a8:	2b08      	cmp	r3, #8
 80119aa:	f103 0301 	add.w	r3, r3, #1
 80119ae:	dc03      	bgt.n	80119b8 <_strtod_l+0x260>
 80119b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80119b2:	434f      	muls	r7, r1
 80119b4:	9709      	str	r7, [sp, #36]	; 0x24
 80119b6:	e7e1      	b.n	801197c <_strtod_l+0x224>
 80119b8:	2b10      	cmp	r3, #16
 80119ba:	bfd8      	it	le
 80119bc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80119c0:	e7dc      	b.n	801197c <_strtod_l+0x224>
 80119c2:	2e10      	cmp	r6, #16
 80119c4:	bfdc      	itt	le
 80119c6:	230a      	movle	r3, #10
 80119c8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80119cc:	e7e3      	b.n	8011996 <_strtod_l+0x23e>
 80119ce:	2300      	movs	r3, #0
 80119d0:	9305      	str	r3, [sp, #20]
 80119d2:	2301      	movs	r3, #1
 80119d4:	e780      	b.n	80118d8 <_strtod_l+0x180>
 80119d6:	f04f 0c00 	mov.w	ip, #0
 80119da:	1caa      	adds	r2, r5, #2
 80119dc:	9215      	str	r2, [sp, #84]	; 0x54
 80119de:	78aa      	ldrb	r2, [r5, #2]
 80119e0:	e788      	b.n	80118f4 <_strtod_l+0x19c>
 80119e2:	f04f 0c01 	mov.w	ip, #1
 80119e6:	e7f8      	b.n	80119da <_strtod_l+0x282>
 80119e8:	080152fc 	.word	0x080152fc
 80119ec:	080152ec 	.word	0x080152ec
 80119f0:	7ff00000 	.word	0x7ff00000
 80119f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80119f6:	1c51      	adds	r1, r2, #1
 80119f8:	9115      	str	r1, [sp, #84]	; 0x54
 80119fa:	7852      	ldrb	r2, [r2, #1]
 80119fc:	2a30      	cmp	r2, #48	; 0x30
 80119fe:	d0f9      	beq.n	80119f4 <_strtod_l+0x29c>
 8011a00:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011a04:	2908      	cmp	r1, #8
 8011a06:	f63f af7a 	bhi.w	80118fe <_strtod_l+0x1a6>
 8011a0a:	3a30      	subs	r2, #48	; 0x30
 8011a0c:	9208      	str	r2, [sp, #32]
 8011a0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011a10:	920c      	str	r2, [sp, #48]	; 0x30
 8011a12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011a14:	1c57      	adds	r7, r2, #1
 8011a16:	9715      	str	r7, [sp, #84]	; 0x54
 8011a18:	7852      	ldrb	r2, [r2, #1]
 8011a1a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011a1e:	f1be 0f09 	cmp.w	lr, #9
 8011a22:	d938      	bls.n	8011a96 <_strtod_l+0x33e>
 8011a24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011a26:	1a7f      	subs	r7, r7, r1
 8011a28:	2f08      	cmp	r7, #8
 8011a2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011a2e:	dc03      	bgt.n	8011a38 <_strtod_l+0x2e0>
 8011a30:	9908      	ldr	r1, [sp, #32]
 8011a32:	428f      	cmp	r7, r1
 8011a34:	bfa8      	it	ge
 8011a36:	460f      	movge	r7, r1
 8011a38:	f1bc 0f00 	cmp.w	ip, #0
 8011a3c:	d000      	beq.n	8011a40 <_strtod_l+0x2e8>
 8011a3e:	427f      	negs	r7, r7
 8011a40:	2e00      	cmp	r6, #0
 8011a42:	d14f      	bne.n	8011ae4 <_strtod_l+0x38c>
 8011a44:	9904      	ldr	r1, [sp, #16]
 8011a46:	4301      	orrs	r1, r0
 8011a48:	f47f aec1 	bne.w	80117ce <_strtod_l+0x76>
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	f47f aedb 	bne.w	8011808 <_strtod_l+0xb0>
 8011a52:	2a69      	cmp	r2, #105	; 0x69
 8011a54:	d029      	beq.n	8011aaa <_strtod_l+0x352>
 8011a56:	dc26      	bgt.n	8011aa6 <_strtod_l+0x34e>
 8011a58:	2a49      	cmp	r2, #73	; 0x49
 8011a5a:	d026      	beq.n	8011aaa <_strtod_l+0x352>
 8011a5c:	2a4e      	cmp	r2, #78	; 0x4e
 8011a5e:	f47f aed3 	bne.w	8011808 <_strtod_l+0xb0>
 8011a62:	499b      	ldr	r1, [pc, #620]	; (8011cd0 <_strtod_l+0x578>)
 8011a64:	a815      	add	r0, sp, #84	; 0x54
 8011a66:	f001 fa69 	bl	8012f3c <__match>
 8011a6a:	2800      	cmp	r0, #0
 8011a6c:	f43f aecc 	beq.w	8011808 <_strtod_l+0xb0>
 8011a70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	2b28      	cmp	r3, #40	; 0x28
 8011a76:	d12f      	bne.n	8011ad8 <_strtod_l+0x380>
 8011a78:	4996      	ldr	r1, [pc, #600]	; (8011cd4 <_strtod_l+0x57c>)
 8011a7a:	aa18      	add	r2, sp, #96	; 0x60
 8011a7c:	a815      	add	r0, sp, #84	; 0x54
 8011a7e:	f001 fa71 	bl	8012f64 <__hexnan>
 8011a82:	2805      	cmp	r0, #5
 8011a84:	d128      	bne.n	8011ad8 <_strtod_l+0x380>
 8011a86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011a88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011a8c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011a90:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8011a94:	e69b      	b.n	80117ce <_strtod_l+0x76>
 8011a96:	9f08      	ldr	r7, [sp, #32]
 8011a98:	210a      	movs	r1, #10
 8011a9a:	fb01 2107 	mla	r1, r1, r7, r2
 8011a9e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8011aa2:	9208      	str	r2, [sp, #32]
 8011aa4:	e7b5      	b.n	8011a12 <_strtod_l+0x2ba>
 8011aa6:	2a6e      	cmp	r2, #110	; 0x6e
 8011aa8:	e7d9      	b.n	8011a5e <_strtod_l+0x306>
 8011aaa:	498b      	ldr	r1, [pc, #556]	; (8011cd8 <_strtod_l+0x580>)
 8011aac:	a815      	add	r0, sp, #84	; 0x54
 8011aae:	f001 fa45 	bl	8012f3c <__match>
 8011ab2:	2800      	cmp	r0, #0
 8011ab4:	f43f aea8 	beq.w	8011808 <_strtod_l+0xb0>
 8011ab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011aba:	4988      	ldr	r1, [pc, #544]	; (8011cdc <_strtod_l+0x584>)
 8011abc:	3b01      	subs	r3, #1
 8011abe:	a815      	add	r0, sp, #84	; 0x54
 8011ac0:	9315      	str	r3, [sp, #84]	; 0x54
 8011ac2:	f001 fa3b 	bl	8012f3c <__match>
 8011ac6:	b910      	cbnz	r0, 8011ace <_strtod_l+0x376>
 8011ac8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011aca:	3301      	adds	r3, #1
 8011acc:	9315      	str	r3, [sp, #84]	; 0x54
 8011ace:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8011cec <_strtod_l+0x594>
 8011ad2:	f04f 0800 	mov.w	r8, #0
 8011ad6:	e67a      	b.n	80117ce <_strtod_l+0x76>
 8011ad8:	4881      	ldr	r0, [pc, #516]	; (8011ce0 <_strtod_l+0x588>)
 8011ada:	f000 ff2d 	bl	8012938 <nan>
 8011ade:	ec59 8b10 	vmov	r8, r9, d0
 8011ae2:	e674      	b.n	80117ce <_strtod_l+0x76>
 8011ae4:	9b05      	ldr	r3, [sp, #20]
 8011ae6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ae8:	1afb      	subs	r3, r7, r3
 8011aea:	f1bb 0f00 	cmp.w	fp, #0
 8011aee:	bf08      	it	eq
 8011af0:	46b3      	moveq	fp, r6
 8011af2:	2e10      	cmp	r6, #16
 8011af4:	9308      	str	r3, [sp, #32]
 8011af6:	4635      	mov	r5, r6
 8011af8:	bfa8      	it	ge
 8011afa:	2510      	movge	r5, #16
 8011afc:	f7ee fd12 	bl	8000524 <__aeabi_ui2d>
 8011b00:	2e09      	cmp	r6, #9
 8011b02:	4680      	mov	r8, r0
 8011b04:	4689      	mov	r9, r1
 8011b06:	dd13      	ble.n	8011b30 <_strtod_l+0x3d8>
 8011b08:	4b76      	ldr	r3, [pc, #472]	; (8011ce4 <_strtod_l+0x58c>)
 8011b0a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011b0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011b12:	f7ee fd81 	bl	8000618 <__aeabi_dmul>
 8011b16:	4680      	mov	r8, r0
 8011b18:	4650      	mov	r0, sl
 8011b1a:	4689      	mov	r9, r1
 8011b1c:	f7ee fd02 	bl	8000524 <__aeabi_ui2d>
 8011b20:	4602      	mov	r2, r0
 8011b22:	460b      	mov	r3, r1
 8011b24:	4640      	mov	r0, r8
 8011b26:	4649      	mov	r1, r9
 8011b28:	f7ee fbc0 	bl	80002ac <__adddf3>
 8011b2c:	4680      	mov	r8, r0
 8011b2e:	4689      	mov	r9, r1
 8011b30:	2e0f      	cmp	r6, #15
 8011b32:	dc38      	bgt.n	8011ba6 <_strtod_l+0x44e>
 8011b34:	9b08      	ldr	r3, [sp, #32]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	f43f ae49 	beq.w	80117ce <_strtod_l+0x76>
 8011b3c:	dd24      	ble.n	8011b88 <_strtod_l+0x430>
 8011b3e:	2b16      	cmp	r3, #22
 8011b40:	dc0b      	bgt.n	8011b5a <_strtod_l+0x402>
 8011b42:	4968      	ldr	r1, [pc, #416]	; (8011ce4 <_strtod_l+0x58c>)
 8011b44:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011b48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b4c:	4642      	mov	r2, r8
 8011b4e:	464b      	mov	r3, r9
 8011b50:	f7ee fd62 	bl	8000618 <__aeabi_dmul>
 8011b54:	4680      	mov	r8, r0
 8011b56:	4689      	mov	r9, r1
 8011b58:	e639      	b.n	80117ce <_strtod_l+0x76>
 8011b5a:	9a08      	ldr	r2, [sp, #32]
 8011b5c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8011b60:	4293      	cmp	r3, r2
 8011b62:	db20      	blt.n	8011ba6 <_strtod_l+0x44e>
 8011b64:	4c5f      	ldr	r4, [pc, #380]	; (8011ce4 <_strtod_l+0x58c>)
 8011b66:	f1c6 060f 	rsb	r6, r6, #15
 8011b6a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8011b6e:	4642      	mov	r2, r8
 8011b70:	464b      	mov	r3, r9
 8011b72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b76:	f7ee fd4f 	bl	8000618 <__aeabi_dmul>
 8011b7a:	9b08      	ldr	r3, [sp, #32]
 8011b7c:	1b9e      	subs	r6, r3, r6
 8011b7e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8011b82:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011b86:	e7e3      	b.n	8011b50 <_strtod_l+0x3f8>
 8011b88:	9b08      	ldr	r3, [sp, #32]
 8011b8a:	3316      	adds	r3, #22
 8011b8c:	db0b      	blt.n	8011ba6 <_strtod_l+0x44e>
 8011b8e:	9b05      	ldr	r3, [sp, #20]
 8011b90:	1bdf      	subs	r7, r3, r7
 8011b92:	4b54      	ldr	r3, [pc, #336]	; (8011ce4 <_strtod_l+0x58c>)
 8011b94:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b9c:	4640      	mov	r0, r8
 8011b9e:	4649      	mov	r1, r9
 8011ba0:	f7ee fe64 	bl	800086c <__aeabi_ddiv>
 8011ba4:	e7d6      	b.n	8011b54 <_strtod_l+0x3fc>
 8011ba6:	9b08      	ldr	r3, [sp, #32]
 8011ba8:	1b75      	subs	r5, r6, r5
 8011baa:	441d      	add	r5, r3
 8011bac:	2d00      	cmp	r5, #0
 8011bae:	dd70      	ble.n	8011c92 <_strtod_l+0x53a>
 8011bb0:	f015 030f 	ands.w	r3, r5, #15
 8011bb4:	d00a      	beq.n	8011bcc <_strtod_l+0x474>
 8011bb6:	494b      	ldr	r1, [pc, #300]	; (8011ce4 <_strtod_l+0x58c>)
 8011bb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011bbc:	4642      	mov	r2, r8
 8011bbe:	464b      	mov	r3, r9
 8011bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bc4:	f7ee fd28 	bl	8000618 <__aeabi_dmul>
 8011bc8:	4680      	mov	r8, r0
 8011bca:	4689      	mov	r9, r1
 8011bcc:	f035 050f 	bics.w	r5, r5, #15
 8011bd0:	d04d      	beq.n	8011c6e <_strtod_l+0x516>
 8011bd2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8011bd6:	dd22      	ble.n	8011c1e <_strtod_l+0x4c6>
 8011bd8:	2500      	movs	r5, #0
 8011bda:	46ab      	mov	fp, r5
 8011bdc:	9509      	str	r5, [sp, #36]	; 0x24
 8011bde:	9505      	str	r5, [sp, #20]
 8011be0:	2322      	movs	r3, #34	; 0x22
 8011be2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8011cec <_strtod_l+0x594>
 8011be6:	6023      	str	r3, [r4, #0]
 8011be8:	f04f 0800 	mov.w	r8, #0
 8011bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	f43f aded 	beq.w	80117ce <_strtod_l+0x76>
 8011bf4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	f001 faa2 	bl	8013140 <_Bfree>
 8011bfc:	9905      	ldr	r1, [sp, #20]
 8011bfe:	4620      	mov	r0, r4
 8011c00:	f001 fa9e 	bl	8013140 <_Bfree>
 8011c04:	4659      	mov	r1, fp
 8011c06:	4620      	mov	r0, r4
 8011c08:	f001 fa9a 	bl	8013140 <_Bfree>
 8011c0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c0e:	4620      	mov	r0, r4
 8011c10:	f001 fa96 	bl	8013140 <_Bfree>
 8011c14:	4629      	mov	r1, r5
 8011c16:	4620      	mov	r0, r4
 8011c18:	f001 fa92 	bl	8013140 <_Bfree>
 8011c1c:	e5d7      	b.n	80117ce <_strtod_l+0x76>
 8011c1e:	4b32      	ldr	r3, [pc, #200]	; (8011ce8 <_strtod_l+0x590>)
 8011c20:	9304      	str	r3, [sp, #16]
 8011c22:	2300      	movs	r3, #0
 8011c24:	112d      	asrs	r5, r5, #4
 8011c26:	4640      	mov	r0, r8
 8011c28:	4649      	mov	r1, r9
 8011c2a:	469a      	mov	sl, r3
 8011c2c:	2d01      	cmp	r5, #1
 8011c2e:	dc21      	bgt.n	8011c74 <_strtod_l+0x51c>
 8011c30:	b10b      	cbz	r3, 8011c36 <_strtod_l+0x4de>
 8011c32:	4680      	mov	r8, r0
 8011c34:	4689      	mov	r9, r1
 8011c36:	492c      	ldr	r1, [pc, #176]	; (8011ce8 <_strtod_l+0x590>)
 8011c38:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8011c3c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011c40:	4642      	mov	r2, r8
 8011c42:	464b      	mov	r3, r9
 8011c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c48:	f7ee fce6 	bl	8000618 <__aeabi_dmul>
 8011c4c:	4b27      	ldr	r3, [pc, #156]	; (8011cec <_strtod_l+0x594>)
 8011c4e:	460a      	mov	r2, r1
 8011c50:	400b      	ands	r3, r1
 8011c52:	4927      	ldr	r1, [pc, #156]	; (8011cf0 <_strtod_l+0x598>)
 8011c54:	428b      	cmp	r3, r1
 8011c56:	4680      	mov	r8, r0
 8011c58:	d8be      	bhi.n	8011bd8 <_strtod_l+0x480>
 8011c5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011c5e:	428b      	cmp	r3, r1
 8011c60:	bf86      	itte	hi
 8011c62:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8011cf4 <_strtod_l+0x59c>
 8011c66:	f04f 38ff 	movhi.w	r8, #4294967295
 8011c6a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8011c6e:	2300      	movs	r3, #0
 8011c70:	9304      	str	r3, [sp, #16]
 8011c72:	e07b      	b.n	8011d6c <_strtod_l+0x614>
 8011c74:	07ea      	lsls	r2, r5, #31
 8011c76:	d505      	bpl.n	8011c84 <_strtod_l+0x52c>
 8011c78:	9b04      	ldr	r3, [sp, #16]
 8011c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7e:	f7ee fccb 	bl	8000618 <__aeabi_dmul>
 8011c82:	2301      	movs	r3, #1
 8011c84:	9a04      	ldr	r2, [sp, #16]
 8011c86:	3208      	adds	r2, #8
 8011c88:	f10a 0a01 	add.w	sl, sl, #1
 8011c8c:	106d      	asrs	r5, r5, #1
 8011c8e:	9204      	str	r2, [sp, #16]
 8011c90:	e7cc      	b.n	8011c2c <_strtod_l+0x4d4>
 8011c92:	d0ec      	beq.n	8011c6e <_strtod_l+0x516>
 8011c94:	426d      	negs	r5, r5
 8011c96:	f015 020f 	ands.w	r2, r5, #15
 8011c9a:	d00a      	beq.n	8011cb2 <_strtod_l+0x55a>
 8011c9c:	4b11      	ldr	r3, [pc, #68]	; (8011ce4 <_strtod_l+0x58c>)
 8011c9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ca2:	4640      	mov	r0, r8
 8011ca4:	4649      	mov	r1, r9
 8011ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011caa:	f7ee fddf 	bl	800086c <__aeabi_ddiv>
 8011cae:	4680      	mov	r8, r0
 8011cb0:	4689      	mov	r9, r1
 8011cb2:	112d      	asrs	r5, r5, #4
 8011cb4:	d0db      	beq.n	8011c6e <_strtod_l+0x516>
 8011cb6:	2d1f      	cmp	r5, #31
 8011cb8:	dd1e      	ble.n	8011cf8 <_strtod_l+0x5a0>
 8011cba:	2500      	movs	r5, #0
 8011cbc:	46ab      	mov	fp, r5
 8011cbe:	9509      	str	r5, [sp, #36]	; 0x24
 8011cc0:	9505      	str	r5, [sp, #20]
 8011cc2:	2322      	movs	r3, #34	; 0x22
 8011cc4:	f04f 0800 	mov.w	r8, #0
 8011cc8:	f04f 0900 	mov.w	r9, #0
 8011ccc:	6023      	str	r3, [r4, #0]
 8011cce:	e78d      	b.n	8011bec <_strtod_l+0x494>
 8011cd0:	080152f7 	.word	0x080152f7
 8011cd4:	08015310 	.word	0x08015310
 8011cd8:	080152ee 	.word	0x080152ee
 8011cdc:	080152f1 	.word	0x080152f1
 8011ce0:	080156aa 	.word	0x080156aa
 8011ce4:	08015568 	.word	0x08015568
 8011ce8:	08015540 	.word	0x08015540
 8011cec:	7ff00000 	.word	0x7ff00000
 8011cf0:	7ca00000 	.word	0x7ca00000
 8011cf4:	7fefffff 	.word	0x7fefffff
 8011cf8:	f015 0310 	ands.w	r3, r5, #16
 8011cfc:	bf18      	it	ne
 8011cfe:	236a      	movne	r3, #106	; 0x6a
 8011d00:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80120a4 <_strtod_l+0x94c>
 8011d04:	9304      	str	r3, [sp, #16]
 8011d06:	4640      	mov	r0, r8
 8011d08:	4649      	mov	r1, r9
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	07ea      	lsls	r2, r5, #31
 8011d0e:	d504      	bpl.n	8011d1a <_strtod_l+0x5c2>
 8011d10:	e9da 2300 	ldrd	r2, r3, [sl]
 8011d14:	f7ee fc80 	bl	8000618 <__aeabi_dmul>
 8011d18:	2301      	movs	r3, #1
 8011d1a:	106d      	asrs	r5, r5, #1
 8011d1c:	f10a 0a08 	add.w	sl, sl, #8
 8011d20:	d1f4      	bne.n	8011d0c <_strtod_l+0x5b4>
 8011d22:	b10b      	cbz	r3, 8011d28 <_strtod_l+0x5d0>
 8011d24:	4680      	mov	r8, r0
 8011d26:	4689      	mov	r9, r1
 8011d28:	9b04      	ldr	r3, [sp, #16]
 8011d2a:	b1bb      	cbz	r3, 8011d5c <_strtod_l+0x604>
 8011d2c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8011d30:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	4649      	mov	r1, r9
 8011d38:	dd10      	ble.n	8011d5c <_strtod_l+0x604>
 8011d3a:	2b1f      	cmp	r3, #31
 8011d3c:	f340 811e 	ble.w	8011f7c <_strtod_l+0x824>
 8011d40:	2b34      	cmp	r3, #52	; 0x34
 8011d42:	bfde      	ittt	le
 8011d44:	f04f 33ff 	movle.w	r3, #4294967295
 8011d48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011d4c:	4093      	lslle	r3, r2
 8011d4e:	f04f 0800 	mov.w	r8, #0
 8011d52:	bfcc      	ite	gt
 8011d54:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011d58:	ea03 0901 	andle.w	r9, r3, r1
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	2300      	movs	r3, #0
 8011d60:	4640      	mov	r0, r8
 8011d62:	4649      	mov	r1, r9
 8011d64:	f7ee fec0 	bl	8000ae8 <__aeabi_dcmpeq>
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	d1a6      	bne.n	8011cba <_strtod_l+0x562>
 8011d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d6e:	9300      	str	r3, [sp, #0]
 8011d70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011d72:	4633      	mov	r3, r6
 8011d74:	465a      	mov	r2, fp
 8011d76:	4620      	mov	r0, r4
 8011d78:	f001 fa4a 	bl	8013210 <__s2b>
 8011d7c:	9009      	str	r0, [sp, #36]	; 0x24
 8011d7e:	2800      	cmp	r0, #0
 8011d80:	f43f af2a 	beq.w	8011bd8 <_strtod_l+0x480>
 8011d84:	9a08      	ldr	r2, [sp, #32]
 8011d86:	9b05      	ldr	r3, [sp, #20]
 8011d88:	2a00      	cmp	r2, #0
 8011d8a:	eba3 0307 	sub.w	r3, r3, r7
 8011d8e:	bfa8      	it	ge
 8011d90:	2300      	movge	r3, #0
 8011d92:	930c      	str	r3, [sp, #48]	; 0x30
 8011d94:	2500      	movs	r5, #0
 8011d96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011d9a:	9312      	str	r3, [sp, #72]	; 0x48
 8011d9c:	46ab      	mov	fp, r5
 8011d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011da0:	4620      	mov	r0, r4
 8011da2:	6859      	ldr	r1, [r3, #4]
 8011da4:	f001 f98c 	bl	80130c0 <_Balloc>
 8011da8:	9005      	str	r0, [sp, #20]
 8011daa:	2800      	cmp	r0, #0
 8011dac:	f43f af18 	beq.w	8011be0 <_strtod_l+0x488>
 8011db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011db2:	691a      	ldr	r2, [r3, #16]
 8011db4:	3202      	adds	r2, #2
 8011db6:	f103 010c 	add.w	r1, r3, #12
 8011dba:	0092      	lsls	r2, r2, #2
 8011dbc:	300c      	adds	r0, #12
 8011dbe:	f000 fdac 	bl	801291a <memcpy>
 8011dc2:	ec49 8b10 	vmov	d0, r8, r9
 8011dc6:	aa18      	add	r2, sp, #96	; 0x60
 8011dc8:	a917      	add	r1, sp, #92	; 0x5c
 8011dca:	4620      	mov	r0, r4
 8011dcc:	f001 fd54 	bl	8013878 <__d2b>
 8011dd0:	ec49 8b18 	vmov	d8, r8, r9
 8011dd4:	9016      	str	r0, [sp, #88]	; 0x58
 8011dd6:	2800      	cmp	r0, #0
 8011dd8:	f43f af02 	beq.w	8011be0 <_strtod_l+0x488>
 8011ddc:	2101      	movs	r1, #1
 8011dde:	4620      	mov	r0, r4
 8011de0:	f001 faae 	bl	8013340 <__i2b>
 8011de4:	4683      	mov	fp, r0
 8011de6:	2800      	cmp	r0, #0
 8011de8:	f43f aefa 	beq.w	8011be0 <_strtod_l+0x488>
 8011dec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011dee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011df0:	2e00      	cmp	r6, #0
 8011df2:	bfab      	itete	ge
 8011df4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8011df6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8011df8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8011dfa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8011dfe:	bfac      	ite	ge
 8011e00:	eb06 0a03 	addge.w	sl, r6, r3
 8011e04:	1b9f      	sublt	r7, r3, r6
 8011e06:	9b04      	ldr	r3, [sp, #16]
 8011e08:	1af6      	subs	r6, r6, r3
 8011e0a:	4416      	add	r6, r2
 8011e0c:	4ba0      	ldr	r3, [pc, #640]	; (8012090 <_strtod_l+0x938>)
 8011e0e:	3e01      	subs	r6, #1
 8011e10:	429e      	cmp	r6, r3
 8011e12:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011e16:	f280 80c4 	bge.w	8011fa2 <_strtod_l+0x84a>
 8011e1a:	1b9b      	subs	r3, r3, r6
 8011e1c:	2b1f      	cmp	r3, #31
 8011e1e:	eba2 0203 	sub.w	r2, r2, r3
 8011e22:	f04f 0101 	mov.w	r1, #1
 8011e26:	f300 80b0 	bgt.w	8011f8a <_strtod_l+0x832>
 8011e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8011e2e:	930e      	str	r3, [sp, #56]	; 0x38
 8011e30:	2300      	movs	r3, #0
 8011e32:	930d      	str	r3, [sp, #52]	; 0x34
 8011e34:	eb0a 0602 	add.w	r6, sl, r2
 8011e38:	9b04      	ldr	r3, [sp, #16]
 8011e3a:	45b2      	cmp	sl, r6
 8011e3c:	4417      	add	r7, r2
 8011e3e:	441f      	add	r7, r3
 8011e40:	4653      	mov	r3, sl
 8011e42:	bfa8      	it	ge
 8011e44:	4633      	movge	r3, r6
 8011e46:	42bb      	cmp	r3, r7
 8011e48:	bfa8      	it	ge
 8011e4a:	463b      	movge	r3, r7
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	bfc2      	ittt	gt
 8011e50:	1af6      	subgt	r6, r6, r3
 8011e52:	1aff      	subgt	r7, r7, r3
 8011e54:	ebaa 0a03 	subgt.w	sl, sl, r3
 8011e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	dd17      	ble.n	8011e8e <_strtod_l+0x736>
 8011e5e:	4659      	mov	r1, fp
 8011e60:	461a      	mov	r2, r3
 8011e62:	4620      	mov	r0, r4
 8011e64:	f001 fb2c 	bl	80134c0 <__pow5mult>
 8011e68:	4683      	mov	fp, r0
 8011e6a:	2800      	cmp	r0, #0
 8011e6c:	f43f aeb8 	beq.w	8011be0 <_strtod_l+0x488>
 8011e70:	4601      	mov	r1, r0
 8011e72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011e74:	4620      	mov	r0, r4
 8011e76:	f001 fa79 	bl	801336c <__multiply>
 8011e7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8011e7c:	2800      	cmp	r0, #0
 8011e7e:	f43f aeaf 	beq.w	8011be0 <_strtod_l+0x488>
 8011e82:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011e84:	4620      	mov	r0, r4
 8011e86:	f001 f95b 	bl	8013140 <_Bfree>
 8011e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e8c:	9316      	str	r3, [sp, #88]	; 0x58
 8011e8e:	2e00      	cmp	r6, #0
 8011e90:	f300 808c 	bgt.w	8011fac <_strtod_l+0x854>
 8011e94:	9b08      	ldr	r3, [sp, #32]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	dd08      	ble.n	8011eac <_strtod_l+0x754>
 8011e9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011e9c:	9905      	ldr	r1, [sp, #20]
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	f001 fb0e 	bl	80134c0 <__pow5mult>
 8011ea4:	9005      	str	r0, [sp, #20]
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	f43f ae9a 	beq.w	8011be0 <_strtod_l+0x488>
 8011eac:	2f00      	cmp	r7, #0
 8011eae:	dd08      	ble.n	8011ec2 <_strtod_l+0x76a>
 8011eb0:	9905      	ldr	r1, [sp, #20]
 8011eb2:	463a      	mov	r2, r7
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	f001 fb5d 	bl	8013574 <__lshift>
 8011eba:	9005      	str	r0, [sp, #20]
 8011ebc:	2800      	cmp	r0, #0
 8011ebe:	f43f ae8f 	beq.w	8011be0 <_strtod_l+0x488>
 8011ec2:	f1ba 0f00 	cmp.w	sl, #0
 8011ec6:	dd08      	ble.n	8011eda <_strtod_l+0x782>
 8011ec8:	4659      	mov	r1, fp
 8011eca:	4652      	mov	r2, sl
 8011ecc:	4620      	mov	r0, r4
 8011ece:	f001 fb51 	bl	8013574 <__lshift>
 8011ed2:	4683      	mov	fp, r0
 8011ed4:	2800      	cmp	r0, #0
 8011ed6:	f43f ae83 	beq.w	8011be0 <_strtod_l+0x488>
 8011eda:	9a05      	ldr	r2, [sp, #20]
 8011edc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011ede:	4620      	mov	r0, r4
 8011ee0:	f001 fbd0 	bl	8013684 <__mdiff>
 8011ee4:	4605      	mov	r5, r0
 8011ee6:	2800      	cmp	r0, #0
 8011ee8:	f43f ae7a 	beq.w	8011be0 <_strtod_l+0x488>
 8011eec:	68c3      	ldr	r3, [r0, #12]
 8011eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	60c3      	str	r3, [r0, #12]
 8011ef4:	4659      	mov	r1, fp
 8011ef6:	f001 fba9 	bl	801364c <__mcmp>
 8011efa:	2800      	cmp	r0, #0
 8011efc:	da60      	bge.n	8011fc0 <_strtod_l+0x868>
 8011efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f00:	ea53 0308 	orrs.w	r3, r3, r8
 8011f04:	f040 8084 	bne.w	8012010 <_strtod_l+0x8b8>
 8011f08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d17f      	bne.n	8012010 <_strtod_l+0x8b8>
 8011f10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011f14:	0d1b      	lsrs	r3, r3, #20
 8011f16:	051b      	lsls	r3, r3, #20
 8011f18:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011f1c:	d978      	bls.n	8012010 <_strtod_l+0x8b8>
 8011f1e:	696b      	ldr	r3, [r5, #20]
 8011f20:	b913      	cbnz	r3, 8011f28 <_strtod_l+0x7d0>
 8011f22:	692b      	ldr	r3, [r5, #16]
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	dd73      	ble.n	8012010 <_strtod_l+0x8b8>
 8011f28:	4629      	mov	r1, r5
 8011f2a:	2201      	movs	r2, #1
 8011f2c:	4620      	mov	r0, r4
 8011f2e:	f001 fb21 	bl	8013574 <__lshift>
 8011f32:	4659      	mov	r1, fp
 8011f34:	4605      	mov	r5, r0
 8011f36:	f001 fb89 	bl	801364c <__mcmp>
 8011f3a:	2800      	cmp	r0, #0
 8011f3c:	dd68      	ble.n	8012010 <_strtod_l+0x8b8>
 8011f3e:	9904      	ldr	r1, [sp, #16]
 8011f40:	4a54      	ldr	r2, [pc, #336]	; (8012094 <_strtod_l+0x93c>)
 8011f42:	464b      	mov	r3, r9
 8011f44:	2900      	cmp	r1, #0
 8011f46:	f000 8084 	beq.w	8012052 <_strtod_l+0x8fa>
 8011f4a:	ea02 0109 	and.w	r1, r2, r9
 8011f4e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011f52:	dc7e      	bgt.n	8012052 <_strtod_l+0x8fa>
 8011f54:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011f58:	f77f aeb3 	ble.w	8011cc2 <_strtod_l+0x56a>
 8011f5c:	4b4e      	ldr	r3, [pc, #312]	; (8012098 <_strtod_l+0x940>)
 8011f5e:	4640      	mov	r0, r8
 8011f60:	4649      	mov	r1, r9
 8011f62:	2200      	movs	r2, #0
 8011f64:	f7ee fb58 	bl	8000618 <__aeabi_dmul>
 8011f68:	4b4a      	ldr	r3, [pc, #296]	; (8012094 <_strtod_l+0x93c>)
 8011f6a:	400b      	ands	r3, r1
 8011f6c:	4680      	mov	r8, r0
 8011f6e:	4689      	mov	r9, r1
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	f47f ae3f 	bne.w	8011bf4 <_strtod_l+0x49c>
 8011f76:	2322      	movs	r3, #34	; 0x22
 8011f78:	6023      	str	r3, [r4, #0]
 8011f7a:	e63b      	b.n	8011bf4 <_strtod_l+0x49c>
 8011f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f80:	fa02 f303 	lsl.w	r3, r2, r3
 8011f84:	ea03 0808 	and.w	r8, r3, r8
 8011f88:	e6e8      	b.n	8011d5c <_strtod_l+0x604>
 8011f8a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011f8e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011f92:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011f96:	36e2      	adds	r6, #226	; 0xe2
 8011f98:	fa01 f306 	lsl.w	r3, r1, r6
 8011f9c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8011fa0:	e748      	b.n	8011e34 <_strtod_l+0x6dc>
 8011fa2:	2100      	movs	r1, #0
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8011faa:	e743      	b.n	8011e34 <_strtod_l+0x6dc>
 8011fac:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011fae:	4632      	mov	r2, r6
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	f001 fadf 	bl	8013574 <__lshift>
 8011fb6:	9016      	str	r0, [sp, #88]	; 0x58
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	f47f af6b 	bne.w	8011e94 <_strtod_l+0x73c>
 8011fbe:	e60f      	b.n	8011be0 <_strtod_l+0x488>
 8011fc0:	46ca      	mov	sl, r9
 8011fc2:	d171      	bne.n	80120a8 <_strtod_l+0x950>
 8011fc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011fc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011fca:	b352      	cbz	r2, 8012022 <_strtod_l+0x8ca>
 8011fcc:	4a33      	ldr	r2, [pc, #204]	; (801209c <_strtod_l+0x944>)
 8011fce:	4293      	cmp	r3, r2
 8011fd0:	d12a      	bne.n	8012028 <_strtod_l+0x8d0>
 8011fd2:	9b04      	ldr	r3, [sp, #16]
 8011fd4:	4641      	mov	r1, r8
 8011fd6:	b1fb      	cbz	r3, 8012018 <_strtod_l+0x8c0>
 8011fd8:	4b2e      	ldr	r3, [pc, #184]	; (8012094 <_strtod_l+0x93c>)
 8011fda:	ea09 0303 	and.w	r3, r9, r3
 8011fde:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8011fe6:	d81a      	bhi.n	801201e <_strtod_l+0x8c6>
 8011fe8:	0d1b      	lsrs	r3, r3, #20
 8011fea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011fee:	fa02 f303 	lsl.w	r3, r2, r3
 8011ff2:	4299      	cmp	r1, r3
 8011ff4:	d118      	bne.n	8012028 <_strtod_l+0x8d0>
 8011ff6:	4b2a      	ldr	r3, [pc, #168]	; (80120a0 <_strtod_l+0x948>)
 8011ff8:	459a      	cmp	sl, r3
 8011ffa:	d102      	bne.n	8012002 <_strtod_l+0x8aa>
 8011ffc:	3101      	adds	r1, #1
 8011ffe:	f43f adef 	beq.w	8011be0 <_strtod_l+0x488>
 8012002:	4b24      	ldr	r3, [pc, #144]	; (8012094 <_strtod_l+0x93c>)
 8012004:	ea0a 0303 	and.w	r3, sl, r3
 8012008:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801200c:	f04f 0800 	mov.w	r8, #0
 8012010:	9b04      	ldr	r3, [sp, #16]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d1a2      	bne.n	8011f5c <_strtod_l+0x804>
 8012016:	e5ed      	b.n	8011bf4 <_strtod_l+0x49c>
 8012018:	f04f 33ff 	mov.w	r3, #4294967295
 801201c:	e7e9      	b.n	8011ff2 <_strtod_l+0x89a>
 801201e:	4613      	mov	r3, r2
 8012020:	e7e7      	b.n	8011ff2 <_strtod_l+0x89a>
 8012022:	ea53 0308 	orrs.w	r3, r3, r8
 8012026:	d08a      	beq.n	8011f3e <_strtod_l+0x7e6>
 8012028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801202a:	b1e3      	cbz	r3, 8012066 <_strtod_l+0x90e>
 801202c:	ea13 0f0a 	tst.w	r3, sl
 8012030:	d0ee      	beq.n	8012010 <_strtod_l+0x8b8>
 8012032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012034:	9a04      	ldr	r2, [sp, #16]
 8012036:	4640      	mov	r0, r8
 8012038:	4649      	mov	r1, r9
 801203a:	b1c3      	cbz	r3, 801206e <_strtod_l+0x916>
 801203c:	f7ff fb70 	bl	8011720 <sulp>
 8012040:	4602      	mov	r2, r0
 8012042:	460b      	mov	r3, r1
 8012044:	ec51 0b18 	vmov	r0, r1, d8
 8012048:	f7ee f930 	bl	80002ac <__adddf3>
 801204c:	4680      	mov	r8, r0
 801204e:	4689      	mov	r9, r1
 8012050:	e7de      	b.n	8012010 <_strtod_l+0x8b8>
 8012052:	4013      	ands	r3, r2
 8012054:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012058:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801205c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8012060:	f04f 38ff 	mov.w	r8, #4294967295
 8012064:	e7d4      	b.n	8012010 <_strtod_l+0x8b8>
 8012066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012068:	ea13 0f08 	tst.w	r3, r8
 801206c:	e7e0      	b.n	8012030 <_strtod_l+0x8d8>
 801206e:	f7ff fb57 	bl	8011720 <sulp>
 8012072:	4602      	mov	r2, r0
 8012074:	460b      	mov	r3, r1
 8012076:	ec51 0b18 	vmov	r0, r1, d8
 801207a:	f7ee f915 	bl	80002a8 <__aeabi_dsub>
 801207e:	2200      	movs	r2, #0
 8012080:	2300      	movs	r3, #0
 8012082:	4680      	mov	r8, r0
 8012084:	4689      	mov	r9, r1
 8012086:	f7ee fd2f 	bl	8000ae8 <__aeabi_dcmpeq>
 801208a:	2800      	cmp	r0, #0
 801208c:	d0c0      	beq.n	8012010 <_strtod_l+0x8b8>
 801208e:	e618      	b.n	8011cc2 <_strtod_l+0x56a>
 8012090:	fffffc02 	.word	0xfffffc02
 8012094:	7ff00000 	.word	0x7ff00000
 8012098:	39500000 	.word	0x39500000
 801209c:	000fffff 	.word	0x000fffff
 80120a0:	7fefffff 	.word	0x7fefffff
 80120a4:	08015328 	.word	0x08015328
 80120a8:	4659      	mov	r1, fp
 80120aa:	4628      	mov	r0, r5
 80120ac:	f001 fc3e 	bl	801392c <__ratio>
 80120b0:	ec57 6b10 	vmov	r6, r7, d0
 80120b4:	ee10 0a10 	vmov	r0, s0
 80120b8:	2200      	movs	r2, #0
 80120ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80120be:	4639      	mov	r1, r7
 80120c0:	f7ee fd26 	bl	8000b10 <__aeabi_dcmple>
 80120c4:	2800      	cmp	r0, #0
 80120c6:	d071      	beq.n	80121ac <_strtod_l+0xa54>
 80120c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d17c      	bne.n	80121c8 <_strtod_l+0xa70>
 80120ce:	f1b8 0f00 	cmp.w	r8, #0
 80120d2:	d15a      	bne.n	801218a <_strtod_l+0xa32>
 80120d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d15d      	bne.n	8012198 <_strtod_l+0xa40>
 80120dc:	4b90      	ldr	r3, [pc, #576]	; (8012320 <_strtod_l+0xbc8>)
 80120de:	2200      	movs	r2, #0
 80120e0:	4630      	mov	r0, r6
 80120e2:	4639      	mov	r1, r7
 80120e4:	f7ee fd0a 	bl	8000afc <__aeabi_dcmplt>
 80120e8:	2800      	cmp	r0, #0
 80120ea:	d15c      	bne.n	80121a6 <_strtod_l+0xa4e>
 80120ec:	4630      	mov	r0, r6
 80120ee:	4639      	mov	r1, r7
 80120f0:	4b8c      	ldr	r3, [pc, #560]	; (8012324 <_strtod_l+0xbcc>)
 80120f2:	2200      	movs	r2, #0
 80120f4:	f7ee fa90 	bl	8000618 <__aeabi_dmul>
 80120f8:	4606      	mov	r6, r0
 80120fa:	460f      	mov	r7, r1
 80120fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012100:	9606      	str	r6, [sp, #24]
 8012102:	9307      	str	r3, [sp, #28]
 8012104:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012108:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801210c:	4b86      	ldr	r3, [pc, #536]	; (8012328 <_strtod_l+0xbd0>)
 801210e:	ea0a 0303 	and.w	r3, sl, r3
 8012112:	930d      	str	r3, [sp, #52]	; 0x34
 8012114:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012116:	4b85      	ldr	r3, [pc, #532]	; (801232c <_strtod_l+0xbd4>)
 8012118:	429a      	cmp	r2, r3
 801211a:	f040 8090 	bne.w	801223e <_strtod_l+0xae6>
 801211e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8012122:	ec49 8b10 	vmov	d0, r8, r9
 8012126:	f001 fb37 	bl	8013798 <__ulp>
 801212a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801212e:	ec51 0b10 	vmov	r0, r1, d0
 8012132:	f7ee fa71 	bl	8000618 <__aeabi_dmul>
 8012136:	4642      	mov	r2, r8
 8012138:	464b      	mov	r3, r9
 801213a:	f7ee f8b7 	bl	80002ac <__adddf3>
 801213e:	460b      	mov	r3, r1
 8012140:	4979      	ldr	r1, [pc, #484]	; (8012328 <_strtod_l+0xbd0>)
 8012142:	4a7b      	ldr	r2, [pc, #492]	; (8012330 <_strtod_l+0xbd8>)
 8012144:	4019      	ands	r1, r3
 8012146:	4291      	cmp	r1, r2
 8012148:	4680      	mov	r8, r0
 801214a:	d944      	bls.n	80121d6 <_strtod_l+0xa7e>
 801214c:	ee18 2a90 	vmov	r2, s17
 8012150:	4b78      	ldr	r3, [pc, #480]	; (8012334 <_strtod_l+0xbdc>)
 8012152:	429a      	cmp	r2, r3
 8012154:	d104      	bne.n	8012160 <_strtod_l+0xa08>
 8012156:	ee18 3a10 	vmov	r3, s16
 801215a:	3301      	adds	r3, #1
 801215c:	f43f ad40 	beq.w	8011be0 <_strtod_l+0x488>
 8012160:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8012334 <_strtod_l+0xbdc>
 8012164:	f04f 38ff 	mov.w	r8, #4294967295
 8012168:	9916      	ldr	r1, [sp, #88]	; 0x58
 801216a:	4620      	mov	r0, r4
 801216c:	f000 ffe8 	bl	8013140 <_Bfree>
 8012170:	9905      	ldr	r1, [sp, #20]
 8012172:	4620      	mov	r0, r4
 8012174:	f000 ffe4 	bl	8013140 <_Bfree>
 8012178:	4659      	mov	r1, fp
 801217a:	4620      	mov	r0, r4
 801217c:	f000 ffe0 	bl	8013140 <_Bfree>
 8012180:	4629      	mov	r1, r5
 8012182:	4620      	mov	r0, r4
 8012184:	f000 ffdc 	bl	8013140 <_Bfree>
 8012188:	e609      	b.n	8011d9e <_strtod_l+0x646>
 801218a:	f1b8 0f01 	cmp.w	r8, #1
 801218e:	d103      	bne.n	8012198 <_strtod_l+0xa40>
 8012190:	f1b9 0f00 	cmp.w	r9, #0
 8012194:	f43f ad95 	beq.w	8011cc2 <_strtod_l+0x56a>
 8012198:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80122f0 <_strtod_l+0xb98>
 801219c:	4f60      	ldr	r7, [pc, #384]	; (8012320 <_strtod_l+0xbc8>)
 801219e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80121a2:	2600      	movs	r6, #0
 80121a4:	e7ae      	b.n	8012104 <_strtod_l+0x9ac>
 80121a6:	4f5f      	ldr	r7, [pc, #380]	; (8012324 <_strtod_l+0xbcc>)
 80121a8:	2600      	movs	r6, #0
 80121aa:	e7a7      	b.n	80120fc <_strtod_l+0x9a4>
 80121ac:	4b5d      	ldr	r3, [pc, #372]	; (8012324 <_strtod_l+0xbcc>)
 80121ae:	4630      	mov	r0, r6
 80121b0:	4639      	mov	r1, r7
 80121b2:	2200      	movs	r2, #0
 80121b4:	f7ee fa30 	bl	8000618 <__aeabi_dmul>
 80121b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121ba:	4606      	mov	r6, r0
 80121bc:	460f      	mov	r7, r1
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d09c      	beq.n	80120fc <_strtod_l+0x9a4>
 80121c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80121c6:	e79d      	b.n	8012104 <_strtod_l+0x9ac>
 80121c8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80122f8 <_strtod_l+0xba0>
 80121cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80121d0:	ec57 6b17 	vmov	r6, r7, d7
 80121d4:	e796      	b.n	8012104 <_strtod_l+0x9ac>
 80121d6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80121da:	9b04      	ldr	r3, [sp, #16]
 80121dc:	46ca      	mov	sl, r9
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d1c2      	bne.n	8012168 <_strtod_l+0xa10>
 80121e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80121e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80121e8:	0d1b      	lsrs	r3, r3, #20
 80121ea:	051b      	lsls	r3, r3, #20
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d1bb      	bne.n	8012168 <_strtod_l+0xa10>
 80121f0:	4630      	mov	r0, r6
 80121f2:	4639      	mov	r1, r7
 80121f4:	f7ee fd48 	bl	8000c88 <__aeabi_d2lz>
 80121f8:	f7ee f9e0 	bl	80005bc <__aeabi_l2d>
 80121fc:	4602      	mov	r2, r0
 80121fe:	460b      	mov	r3, r1
 8012200:	4630      	mov	r0, r6
 8012202:	4639      	mov	r1, r7
 8012204:	f7ee f850 	bl	80002a8 <__aeabi_dsub>
 8012208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801220a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801220e:	ea43 0308 	orr.w	r3, r3, r8
 8012212:	4313      	orrs	r3, r2
 8012214:	4606      	mov	r6, r0
 8012216:	460f      	mov	r7, r1
 8012218:	d054      	beq.n	80122c4 <_strtod_l+0xb6c>
 801221a:	a339      	add	r3, pc, #228	; (adr r3, 8012300 <_strtod_l+0xba8>)
 801221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012220:	f7ee fc6c 	bl	8000afc <__aeabi_dcmplt>
 8012224:	2800      	cmp	r0, #0
 8012226:	f47f ace5 	bne.w	8011bf4 <_strtod_l+0x49c>
 801222a:	a337      	add	r3, pc, #220	; (adr r3, 8012308 <_strtod_l+0xbb0>)
 801222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012230:	4630      	mov	r0, r6
 8012232:	4639      	mov	r1, r7
 8012234:	f7ee fc80 	bl	8000b38 <__aeabi_dcmpgt>
 8012238:	2800      	cmp	r0, #0
 801223a:	d095      	beq.n	8012168 <_strtod_l+0xa10>
 801223c:	e4da      	b.n	8011bf4 <_strtod_l+0x49c>
 801223e:	9b04      	ldr	r3, [sp, #16]
 8012240:	b333      	cbz	r3, 8012290 <_strtod_l+0xb38>
 8012242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012244:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012248:	d822      	bhi.n	8012290 <_strtod_l+0xb38>
 801224a:	a331      	add	r3, pc, #196	; (adr r3, 8012310 <_strtod_l+0xbb8>)
 801224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012250:	4630      	mov	r0, r6
 8012252:	4639      	mov	r1, r7
 8012254:	f7ee fc5c 	bl	8000b10 <__aeabi_dcmple>
 8012258:	b1a0      	cbz	r0, 8012284 <_strtod_l+0xb2c>
 801225a:	4639      	mov	r1, r7
 801225c:	4630      	mov	r0, r6
 801225e:	f7ee fc8b 	bl	8000b78 <__aeabi_d2uiz>
 8012262:	2801      	cmp	r0, #1
 8012264:	bf38      	it	cc
 8012266:	2001      	movcc	r0, #1
 8012268:	f7ee f95c 	bl	8000524 <__aeabi_ui2d>
 801226c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801226e:	4606      	mov	r6, r0
 8012270:	460f      	mov	r7, r1
 8012272:	bb23      	cbnz	r3, 80122be <_strtod_l+0xb66>
 8012274:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012278:	9010      	str	r0, [sp, #64]	; 0x40
 801227a:	9311      	str	r3, [sp, #68]	; 0x44
 801227c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012280:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012288:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801228c:	1a9b      	subs	r3, r3, r2
 801228e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012290:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012294:	eeb0 0a48 	vmov.f32	s0, s16
 8012298:	eef0 0a68 	vmov.f32	s1, s17
 801229c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80122a0:	f001 fa7a 	bl	8013798 <__ulp>
 80122a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80122a8:	ec53 2b10 	vmov	r2, r3, d0
 80122ac:	f7ee f9b4 	bl	8000618 <__aeabi_dmul>
 80122b0:	ec53 2b18 	vmov	r2, r3, d8
 80122b4:	f7ed fffa 	bl	80002ac <__adddf3>
 80122b8:	4680      	mov	r8, r0
 80122ba:	4689      	mov	r9, r1
 80122bc:	e78d      	b.n	80121da <_strtod_l+0xa82>
 80122be:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80122c2:	e7db      	b.n	801227c <_strtod_l+0xb24>
 80122c4:	a314      	add	r3, pc, #80	; (adr r3, 8012318 <_strtod_l+0xbc0>)
 80122c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ca:	f7ee fc17 	bl	8000afc <__aeabi_dcmplt>
 80122ce:	e7b3      	b.n	8012238 <_strtod_l+0xae0>
 80122d0:	2300      	movs	r3, #0
 80122d2:	930a      	str	r3, [sp, #40]	; 0x28
 80122d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80122d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80122d8:	6013      	str	r3, [r2, #0]
 80122da:	f7ff ba7c 	b.w	80117d6 <_strtod_l+0x7e>
 80122de:	2a65      	cmp	r2, #101	; 0x65
 80122e0:	f43f ab75 	beq.w	80119ce <_strtod_l+0x276>
 80122e4:	2a45      	cmp	r2, #69	; 0x45
 80122e6:	f43f ab72 	beq.w	80119ce <_strtod_l+0x276>
 80122ea:	2301      	movs	r3, #1
 80122ec:	f7ff bbaa 	b.w	8011a44 <_strtod_l+0x2ec>
 80122f0:	00000000 	.word	0x00000000
 80122f4:	bff00000 	.word	0xbff00000
 80122f8:	00000000 	.word	0x00000000
 80122fc:	3ff00000 	.word	0x3ff00000
 8012300:	94a03595 	.word	0x94a03595
 8012304:	3fdfffff 	.word	0x3fdfffff
 8012308:	35afe535 	.word	0x35afe535
 801230c:	3fe00000 	.word	0x3fe00000
 8012310:	ffc00000 	.word	0xffc00000
 8012314:	41dfffff 	.word	0x41dfffff
 8012318:	94a03595 	.word	0x94a03595
 801231c:	3fcfffff 	.word	0x3fcfffff
 8012320:	3ff00000 	.word	0x3ff00000
 8012324:	3fe00000 	.word	0x3fe00000
 8012328:	7ff00000 	.word	0x7ff00000
 801232c:	7fe00000 	.word	0x7fe00000
 8012330:	7c9fffff 	.word	0x7c9fffff
 8012334:	7fefffff 	.word	0x7fefffff

08012338 <strtof>:
 8012338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801233c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8012400 <strtof+0xc8>
 8012340:	4b2a      	ldr	r3, [pc, #168]	; (80123ec <strtof+0xb4>)
 8012342:	460a      	mov	r2, r1
 8012344:	ed2d 8b02 	vpush	{d8}
 8012348:	4601      	mov	r1, r0
 801234a:	f8d8 0000 	ldr.w	r0, [r8]
 801234e:	f7ff fa03 	bl	8011758 <_strtod_l>
 8012352:	ec55 4b10 	vmov	r4, r5, d0
 8012356:	ee10 2a10 	vmov	r2, s0
 801235a:	ee10 0a10 	vmov	r0, s0
 801235e:	462b      	mov	r3, r5
 8012360:	4629      	mov	r1, r5
 8012362:	f7ee fbf3 	bl	8000b4c <__aeabi_dcmpun>
 8012366:	b190      	cbz	r0, 801238e <strtof+0x56>
 8012368:	2d00      	cmp	r5, #0
 801236a:	4821      	ldr	r0, [pc, #132]	; (80123f0 <strtof+0xb8>)
 801236c:	da09      	bge.n	8012382 <strtof+0x4a>
 801236e:	f000 faeb 	bl	8012948 <nanf>
 8012372:	eeb1 8a40 	vneg.f32	s16, s0
 8012376:	eeb0 0a48 	vmov.f32	s0, s16
 801237a:	ecbd 8b02 	vpop	{d8}
 801237e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012382:	ecbd 8b02 	vpop	{d8}
 8012386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801238a:	f000 badd 	b.w	8012948 <nanf>
 801238e:	4620      	mov	r0, r4
 8012390:	4629      	mov	r1, r5
 8012392:	f7ee fc11 	bl	8000bb8 <__aeabi_d2f>
 8012396:	ee08 0a10 	vmov	s16, r0
 801239a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80123f4 <strtof+0xbc>
 801239e:	eeb0 7ac8 	vabs.f32	s14, s16
 80123a2:	eeb4 7a67 	vcmp.f32	s14, s15
 80123a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123aa:	dd11      	ble.n	80123d0 <strtof+0x98>
 80123ac:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80123b0:	4b11      	ldr	r3, [pc, #68]	; (80123f8 <strtof+0xc0>)
 80123b2:	f04f 32ff 	mov.w	r2, #4294967295
 80123b6:	4620      	mov	r0, r4
 80123b8:	4639      	mov	r1, r7
 80123ba:	f7ee fbc7 	bl	8000b4c <__aeabi_dcmpun>
 80123be:	b980      	cbnz	r0, 80123e2 <strtof+0xaa>
 80123c0:	4b0d      	ldr	r3, [pc, #52]	; (80123f8 <strtof+0xc0>)
 80123c2:	f04f 32ff 	mov.w	r2, #4294967295
 80123c6:	4620      	mov	r0, r4
 80123c8:	4639      	mov	r1, r7
 80123ca:	f7ee fba1 	bl	8000b10 <__aeabi_dcmple>
 80123ce:	b940      	cbnz	r0, 80123e2 <strtof+0xaa>
 80123d0:	ee18 3a10 	vmov	r3, s16
 80123d4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80123d8:	d1cd      	bne.n	8012376 <strtof+0x3e>
 80123da:	4b08      	ldr	r3, [pc, #32]	; (80123fc <strtof+0xc4>)
 80123dc:	402b      	ands	r3, r5
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d0c9      	beq.n	8012376 <strtof+0x3e>
 80123e2:	f8d8 3000 	ldr.w	r3, [r8]
 80123e6:	2222      	movs	r2, #34	; 0x22
 80123e8:	601a      	str	r2, [r3, #0]
 80123ea:	e7c4      	b.n	8012376 <strtof+0x3e>
 80123ec:	20000160 	.word	0x20000160
 80123f0:	080156aa 	.word	0x080156aa
 80123f4:	7f7fffff 	.word	0x7f7fffff
 80123f8:	7fefffff 	.word	0x7fefffff
 80123fc:	7ff00000 	.word	0x7ff00000
 8012400:	20000318 	.word	0x20000318

08012404 <_strtoul_l.constprop.0>:
 8012404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012408:	4f36      	ldr	r7, [pc, #216]	; (80124e4 <_strtoul_l.constprop.0+0xe0>)
 801240a:	4686      	mov	lr, r0
 801240c:	460d      	mov	r5, r1
 801240e:	4628      	mov	r0, r5
 8012410:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012414:	5d3e      	ldrb	r6, [r7, r4]
 8012416:	f016 0608 	ands.w	r6, r6, #8
 801241a:	d1f8      	bne.n	801240e <_strtoul_l.constprop.0+0xa>
 801241c:	2c2d      	cmp	r4, #45	; 0x2d
 801241e:	d130      	bne.n	8012482 <_strtoul_l.constprop.0+0x7e>
 8012420:	782c      	ldrb	r4, [r5, #0]
 8012422:	2601      	movs	r6, #1
 8012424:	1c85      	adds	r5, r0, #2
 8012426:	2b00      	cmp	r3, #0
 8012428:	d057      	beq.n	80124da <_strtoul_l.constprop.0+0xd6>
 801242a:	2b10      	cmp	r3, #16
 801242c:	d109      	bne.n	8012442 <_strtoul_l.constprop.0+0x3e>
 801242e:	2c30      	cmp	r4, #48	; 0x30
 8012430:	d107      	bne.n	8012442 <_strtoul_l.constprop.0+0x3e>
 8012432:	7828      	ldrb	r0, [r5, #0]
 8012434:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012438:	2858      	cmp	r0, #88	; 0x58
 801243a:	d149      	bne.n	80124d0 <_strtoul_l.constprop.0+0xcc>
 801243c:	786c      	ldrb	r4, [r5, #1]
 801243e:	2310      	movs	r3, #16
 8012440:	3502      	adds	r5, #2
 8012442:	f04f 38ff 	mov.w	r8, #4294967295
 8012446:	2700      	movs	r7, #0
 8012448:	fbb8 f8f3 	udiv	r8, r8, r3
 801244c:	fb03 f908 	mul.w	r9, r3, r8
 8012450:	ea6f 0909 	mvn.w	r9, r9
 8012454:	4638      	mov	r0, r7
 8012456:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801245a:	f1bc 0f09 	cmp.w	ip, #9
 801245e:	d815      	bhi.n	801248c <_strtoul_l.constprop.0+0x88>
 8012460:	4664      	mov	r4, ip
 8012462:	42a3      	cmp	r3, r4
 8012464:	dd23      	ble.n	80124ae <_strtoul_l.constprop.0+0xaa>
 8012466:	f1b7 3fff 	cmp.w	r7, #4294967295
 801246a:	d007      	beq.n	801247c <_strtoul_l.constprop.0+0x78>
 801246c:	4580      	cmp	r8, r0
 801246e:	d31b      	bcc.n	80124a8 <_strtoul_l.constprop.0+0xa4>
 8012470:	d101      	bne.n	8012476 <_strtoul_l.constprop.0+0x72>
 8012472:	45a1      	cmp	r9, r4
 8012474:	db18      	blt.n	80124a8 <_strtoul_l.constprop.0+0xa4>
 8012476:	fb00 4003 	mla	r0, r0, r3, r4
 801247a:	2701      	movs	r7, #1
 801247c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012480:	e7e9      	b.n	8012456 <_strtoul_l.constprop.0+0x52>
 8012482:	2c2b      	cmp	r4, #43	; 0x2b
 8012484:	bf04      	itt	eq
 8012486:	782c      	ldrbeq	r4, [r5, #0]
 8012488:	1c85      	addeq	r5, r0, #2
 801248a:	e7cc      	b.n	8012426 <_strtoul_l.constprop.0+0x22>
 801248c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012490:	f1bc 0f19 	cmp.w	ip, #25
 8012494:	d801      	bhi.n	801249a <_strtoul_l.constprop.0+0x96>
 8012496:	3c37      	subs	r4, #55	; 0x37
 8012498:	e7e3      	b.n	8012462 <_strtoul_l.constprop.0+0x5e>
 801249a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801249e:	f1bc 0f19 	cmp.w	ip, #25
 80124a2:	d804      	bhi.n	80124ae <_strtoul_l.constprop.0+0xaa>
 80124a4:	3c57      	subs	r4, #87	; 0x57
 80124a6:	e7dc      	b.n	8012462 <_strtoul_l.constprop.0+0x5e>
 80124a8:	f04f 37ff 	mov.w	r7, #4294967295
 80124ac:	e7e6      	b.n	801247c <_strtoul_l.constprop.0+0x78>
 80124ae:	1c7b      	adds	r3, r7, #1
 80124b0:	d106      	bne.n	80124c0 <_strtoul_l.constprop.0+0xbc>
 80124b2:	2322      	movs	r3, #34	; 0x22
 80124b4:	f8ce 3000 	str.w	r3, [lr]
 80124b8:	4638      	mov	r0, r7
 80124ba:	b932      	cbnz	r2, 80124ca <_strtoul_l.constprop.0+0xc6>
 80124bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124c0:	b106      	cbz	r6, 80124c4 <_strtoul_l.constprop.0+0xc0>
 80124c2:	4240      	negs	r0, r0
 80124c4:	2a00      	cmp	r2, #0
 80124c6:	d0f9      	beq.n	80124bc <_strtoul_l.constprop.0+0xb8>
 80124c8:	b107      	cbz	r7, 80124cc <_strtoul_l.constprop.0+0xc8>
 80124ca:	1e69      	subs	r1, r5, #1
 80124cc:	6011      	str	r1, [r2, #0]
 80124ce:	e7f5      	b.n	80124bc <_strtoul_l.constprop.0+0xb8>
 80124d0:	2430      	movs	r4, #48	; 0x30
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d1b5      	bne.n	8012442 <_strtoul_l.constprop.0+0x3e>
 80124d6:	2308      	movs	r3, #8
 80124d8:	e7b3      	b.n	8012442 <_strtoul_l.constprop.0+0x3e>
 80124da:	2c30      	cmp	r4, #48	; 0x30
 80124dc:	d0a9      	beq.n	8012432 <_strtoul_l.constprop.0+0x2e>
 80124de:	230a      	movs	r3, #10
 80124e0:	e7af      	b.n	8012442 <_strtoul_l.constprop.0+0x3e>
 80124e2:	bf00      	nop
 80124e4:	08015351 	.word	0x08015351

080124e8 <strtoul>:
 80124e8:	4613      	mov	r3, r2
 80124ea:	460a      	mov	r2, r1
 80124ec:	4601      	mov	r1, r0
 80124ee:	4802      	ldr	r0, [pc, #8]	; (80124f8 <strtoul+0x10>)
 80124f0:	6800      	ldr	r0, [r0, #0]
 80124f2:	f7ff bf87 	b.w	8012404 <_strtoul_l.constprop.0>
 80124f6:	bf00      	nop
 80124f8:	20000318 	.word	0x20000318

080124fc <std>:
 80124fc:	2300      	movs	r3, #0
 80124fe:	b510      	push	{r4, lr}
 8012500:	4604      	mov	r4, r0
 8012502:	e9c0 3300 	strd	r3, r3, [r0]
 8012506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801250a:	6083      	str	r3, [r0, #8]
 801250c:	8181      	strh	r1, [r0, #12]
 801250e:	6643      	str	r3, [r0, #100]	; 0x64
 8012510:	81c2      	strh	r2, [r0, #14]
 8012512:	6183      	str	r3, [r0, #24]
 8012514:	4619      	mov	r1, r3
 8012516:	2208      	movs	r2, #8
 8012518:	305c      	adds	r0, #92	; 0x5c
 801251a:	f000 f92d 	bl	8012778 <memset>
 801251e:	4b0d      	ldr	r3, [pc, #52]	; (8012554 <std+0x58>)
 8012520:	6263      	str	r3, [r4, #36]	; 0x24
 8012522:	4b0d      	ldr	r3, [pc, #52]	; (8012558 <std+0x5c>)
 8012524:	62a3      	str	r3, [r4, #40]	; 0x28
 8012526:	4b0d      	ldr	r3, [pc, #52]	; (801255c <std+0x60>)
 8012528:	62e3      	str	r3, [r4, #44]	; 0x2c
 801252a:	4b0d      	ldr	r3, [pc, #52]	; (8012560 <std+0x64>)
 801252c:	6323      	str	r3, [r4, #48]	; 0x30
 801252e:	4b0d      	ldr	r3, [pc, #52]	; (8012564 <std+0x68>)
 8012530:	6224      	str	r4, [r4, #32]
 8012532:	429c      	cmp	r4, r3
 8012534:	d006      	beq.n	8012544 <std+0x48>
 8012536:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801253a:	4294      	cmp	r4, r2
 801253c:	d002      	beq.n	8012544 <std+0x48>
 801253e:	33d0      	adds	r3, #208	; 0xd0
 8012540:	429c      	cmp	r4, r3
 8012542:	d105      	bne.n	8012550 <std+0x54>
 8012544:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801254c:	f000 b9da 	b.w	8012904 <__retarget_lock_init_recursive>
 8012550:	bd10      	pop	{r4, pc}
 8012552:	bf00      	nop
 8012554:	08012681 	.word	0x08012681
 8012558:	080126a3 	.word	0x080126a3
 801255c:	080126db 	.word	0x080126db
 8012560:	080126ff 	.word	0x080126ff
 8012564:	20002a68 	.word	0x20002a68

08012568 <stdio_exit_handler>:
 8012568:	4a02      	ldr	r2, [pc, #8]	; (8012574 <stdio_exit_handler+0xc>)
 801256a:	4903      	ldr	r1, [pc, #12]	; (8012578 <stdio_exit_handler+0x10>)
 801256c:	4803      	ldr	r0, [pc, #12]	; (801257c <stdio_exit_handler+0x14>)
 801256e:	f000 b869 	b.w	8012644 <_fwalk_sglue>
 8012572:	bf00      	nop
 8012574:	20000154 	.word	0x20000154
 8012578:	08014111 	.word	0x08014111
 801257c:	200002cc 	.word	0x200002cc

08012580 <cleanup_stdio>:
 8012580:	6841      	ldr	r1, [r0, #4]
 8012582:	4b0c      	ldr	r3, [pc, #48]	; (80125b4 <cleanup_stdio+0x34>)
 8012584:	4299      	cmp	r1, r3
 8012586:	b510      	push	{r4, lr}
 8012588:	4604      	mov	r4, r0
 801258a:	d001      	beq.n	8012590 <cleanup_stdio+0x10>
 801258c:	f001 fdc0 	bl	8014110 <_fflush_r>
 8012590:	68a1      	ldr	r1, [r4, #8]
 8012592:	4b09      	ldr	r3, [pc, #36]	; (80125b8 <cleanup_stdio+0x38>)
 8012594:	4299      	cmp	r1, r3
 8012596:	d002      	beq.n	801259e <cleanup_stdio+0x1e>
 8012598:	4620      	mov	r0, r4
 801259a:	f001 fdb9 	bl	8014110 <_fflush_r>
 801259e:	68e1      	ldr	r1, [r4, #12]
 80125a0:	4b06      	ldr	r3, [pc, #24]	; (80125bc <cleanup_stdio+0x3c>)
 80125a2:	4299      	cmp	r1, r3
 80125a4:	d004      	beq.n	80125b0 <cleanup_stdio+0x30>
 80125a6:	4620      	mov	r0, r4
 80125a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125ac:	f001 bdb0 	b.w	8014110 <_fflush_r>
 80125b0:	bd10      	pop	{r4, pc}
 80125b2:	bf00      	nop
 80125b4:	20002a68 	.word	0x20002a68
 80125b8:	20002ad0 	.word	0x20002ad0
 80125bc:	20002b38 	.word	0x20002b38

080125c0 <global_stdio_init.part.0>:
 80125c0:	b510      	push	{r4, lr}
 80125c2:	4b0b      	ldr	r3, [pc, #44]	; (80125f0 <global_stdio_init.part.0+0x30>)
 80125c4:	4c0b      	ldr	r4, [pc, #44]	; (80125f4 <global_stdio_init.part.0+0x34>)
 80125c6:	4a0c      	ldr	r2, [pc, #48]	; (80125f8 <global_stdio_init.part.0+0x38>)
 80125c8:	601a      	str	r2, [r3, #0]
 80125ca:	4620      	mov	r0, r4
 80125cc:	2200      	movs	r2, #0
 80125ce:	2104      	movs	r1, #4
 80125d0:	f7ff ff94 	bl	80124fc <std>
 80125d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80125d8:	2201      	movs	r2, #1
 80125da:	2109      	movs	r1, #9
 80125dc:	f7ff ff8e 	bl	80124fc <std>
 80125e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80125e4:	2202      	movs	r2, #2
 80125e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125ea:	2112      	movs	r1, #18
 80125ec:	f7ff bf86 	b.w	80124fc <std>
 80125f0:	20002ba0 	.word	0x20002ba0
 80125f4:	20002a68 	.word	0x20002a68
 80125f8:	08012569 	.word	0x08012569

080125fc <__sfp_lock_acquire>:
 80125fc:	4801      	ldr	r0, [pc, #4]	; (8012604 <__sfp_lock_acquire+0x8>)
 80125fe:	f000 b982 	b.w	8012906 <__retarget_lock_acquire_recursive>
 8012602:	bf00      	nop
 8012604:	20002ba9 	.word	0x20002ba9

08012608 <__sfp_lock_release>:
 8012608:	4801      	ldr	r0, [pc, #4]	; (8012610 <__sfp_lock_release+0x8>)
 801260a:	f000 b97d 	b.w	8012908 <__retarget_lock_release_recursive>
 801260e:	bf00      	nop
 8012610:	20002ba9 	.word	0x20002ba9

08012614 <__sinit>:
 8012614:	b510      	push	{r4, lr}
 8012616:	4604      	mov	r4, r0
 8012618:	f7ff fff0 	bl	80125fc <__sfp_lock_acquire>
 801261c:	6a23      	ldr	r3, [r4, #32]
 801261e:	b11b      	cbz	r3, 8012628 <__sinit+0x14>
 8012620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012624:	f7ff bff0 	b.w	8012608 <__sfp_lock_release>
 8012628:	4b04      	ldr	r3, [pc, #16]	; (801263c <__sinit+0x28>)
 801262a:	6223      	str	r3, [r4, #32]
 801262c:	4b04      	ldr	r3, [pc, #16]	; (8012640 <__sinit+0x2c>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d1f5      	bne.n	8012620 <__sinit+0xc>
 8012634:	f7ff ffc4 	bl	80125c0 <global_stdio_init.part.0>
 8012638:	e7f2      	b.n	8012620 <__sinit+0xc>
 801263a:	bf00      	nop
 801263c:	08012581 	.word	0x08012581
 8012640:	20002ba0 	.word	0x20002ba0

08012644 <_fwalk_sglue>:
 8012644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012648:	4607      	mov	r7, r0
 801264a:	4688      	mov	r8, r1
 801264c:	4614      	mov	r4, r2
 801264e:	2600      	movs	r6, #0
 8012650:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012654:	f1b9 0901 	subs.w	r9, r9, #1
 8012658:	d505      	bpl.n	8012666 <_fwalk_sglue+0x22>
 801265a:	6824      	ldr	r4, [r4, #0]
 801265c:	2c00      	cmp	r4, #0
 801265e:	d1f7      	bne.n	8012650 <_fwalk_sglue+0xc>
 8012660:	4630      	mov	r0, r6
 8012662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012666:	89ab      	ldrh	r3, [r5, #12]
 8012668:	2b01      	cmp	r3, #1
 801266a:	d907      	bls.n	801267c <_fwalk_sglue+0x38>
 801266c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012670:	3301      	adds	r3, #1
 8012672:	d003      	beq.n	801267c <_fwalk_sglue+0x38>
 8012674:	4629      	mov	r1, r5
 8012676:	4638      	mov	r0, r7
 8012678:	47c0      	blx	r8
 801267a:	4306      	orrs	r6, r0
 801267c:	3568      	adds	r5, #104	; 0x68
 801267e:	e7e9      	b.n	8012654 <_fwalk_sglue+0x10>

08012680 <__sread>:
 8012680:	b510      	push	{r4, lr}
 8012682:	460c      	mov	r4, r1
 8012684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012688:	f000 f8de 	bl	8012848 <_read_r>
 801268c:	2800      	cmp	r0, #0
 801268e:	bfab      	itete	ge
 8012690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012692:	89a3      	ldrhlt	r3, [r4, #12]
 8012694:	181b      	addge	r3, r3, r0
 8012696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801269a:	bfac      	ite	ge
 801269c:	6563      	strge	r3, [r4, #84]	; 0x54
 801269e:	81a3      	strhlt	r3, [r4, #12]
 80126a0:	bd10      	pop	{r4, pc}

080126a2 <__swrite>:
 80126a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126a6:	461f      	mov	r7, r3
 80126a8:	898b      	ldrh	r3, [r1, #12]
 80126aa:	05db      	lsls	r3, r3, #23
 80126ac:	4605      	mov	r5, r0
 80126ae:	460c      	mov	r4, r1
 80126b0:	4616      	mov	r6, r2
 80126b2:	d505      	bpl.n	80126c0 <__swrite+0x1e>
 80126b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126b8:	2302      	movs	r3, #2
 80126ba:	2200      	movs	r2, #0
 80126bc:	f000 f8b2 	bl	8012824 <_lseek_r>
 80126c0:	89a3      	ldrh	r3, [r4, #12]
 80126c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80126ca:	81a3      	strh	r3, [r4, #12]
 80126cc:	4632      	mov	r2, r6
 80126ce:	463b      	mov	r3, r7
 80126d0:	4628      	mov	r0, r5
 80126d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126d6:	f000 b8d9 	b.w	801288c <_write_r>

080126da <__sseek>:
 80126da:	b510      	push	{r4, lr}
 80126dc:	460c      	mov	r4, r1
 80126de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126e2:	f000 f89f 	bl	8012824 <_lseek_r>
 80126e6:	1c43      	adds	r3, r0, #1
 80126e8:	89a3      	ldrh	r3, [r4, #12]
 80126ea:	bf15      	itete	ne
 80126ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80126ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80126f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80126f6:	81a3      	strheq	r3, [r4, #12]
 80126f8:	bf18      	it	ne
 80126fa:	81a3      	strhne	r3, [r4, #12]
 80126fc:	bd10      	pop	{r4, pc}

080126fe <__sclose>:
 80126fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012702:	f000 b87f 	b.w	8012804 <_close_r>

08012706 <_vsniprintf_r>:
 8012706:	b530      	push	{r4, r5, lr}
 8012708:	4614      	mov	r4, r2
 801270a:	2c00      	cmp	r4, #0
 801270c:	b09b      	sub	sp, #108	; 0x6c
 801270e:	4605      	mov	r5, r0
 8012710:	461a      	mov	r2, r3
 8012712:	da05      	bge.n	8012720 <_vsniprintf_r+0x1a>
 8012714:	238b      	movs	r3, #139	; 0x8b
 8012716:	6003      	str	r3, [r0, #0]
 8012718:	f04f 30ff 	mov.w	r0, #4294967295
 801271c:	b01b      	add	sp, #108	; 0x6c
 801271e:	bd30      	pop	{r4, r5, pc}
 8012720:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012724:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012728:	bf14      	ite	ne
 801272a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801272e:	4623      	moveq	r3, r4
 8012730:	9302      	str	r3, [sp, #8]
 8012732:	9305      	str	r3, [sp, #20]
 8012734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012738:	9100      	str	r1, [sp, #0]
 801273a:	9104      	str	r1, [sp, #16]
 801273c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012740:	4669      	mov	r1, sp
 8012742:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012744:	f001 f9d0 	bl	8013ae8 <_svfiprintf_r>
 8012748:	1c43      	adds	r3, r0, #1
 801274a:	bfbc      	itt	lt
 801274c:	238b      	movlt	r3, #139	; 0x8b
 801274e:	602b      	strlt	r3, [r5, #0]
 8012750:	2c00      	cmp	r4, #0
 8012752:	d0e3      	beq.n	801271c <_vsniprintf_r+0x16>
 8012754:	9b00      	ldr	r3, [sp, #0]
 8012756:	2200      	movs	r2, #0
 8012758:	701a      	strb	r2, [r3, #0]
 801275a:	e7df      	b.n	801271c <_vsniprintf_r+0x16>

0801275c <vsniprintf>:
 801275c:	b507      	push	{r0, r1, r2, lr}
 801275e:	9300      	str	r3, [sp, #0]
 8012760:	4613      	mov	r3, r2
 8012762:	460a      	mov	r2, r1
 8012764:	4601      	mov	r1, r0
 8012766:	4803      	ldr	r0, [pc, #12]	; (8012774 <vsniprintf+0x18>)
 8012768:	6800      	ldr	r0, [r0, #0]
 801276a:	f7ff ffcc 	bl	8012706 <_vsniprintf_r>
 801276e:	b003      	add	sp, #12
 8012770:	f85d fb04 	ldr.w	pc, [sp], #4
 8012774:	20000318 	.word	0x20000318

08012778 <memset>:
 8012778:	4402      	add	r2, r0
 801277a:	4603      	mov	r3, r0
 801277c:	4293      	cmp	r3, r2
 801277e:	d100      	bne.n	8012782 <memset+0xa>
 8012780:	4770      	bx	lr
 8012782:	f803 1b01 	strb.w	r1, [r3], #1
 8012786:	e7f9      	b.n	801277c <memset+0x4>

08012788 <strncmp>:
 8012788:	b510      	push	{r4, lr}
 801278a:	b16a      	cbz	r2, 80127a8 <strncmp+0x20>
 801278c:	3901      	subs	r1, #1
 801278e:	1884      	adds	r4, r0, r2
 8012790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012794:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012798:	429a      	cmp	r2, r3
 801279a:	d103      	bne.n	80127a4 <strncmp+0x1c>
 801279c:	42a0      	cmp	r0, r4
 801279e:	d001      	beq.n	80127a4 <strncmp+0x1c>
 80127a0:	2a00      	cmp	r2, #0
 80127a2:	d1f5      	bne.n	8012790 <strncmp+0x8>
 80127a4:	1ad0      	subs	r0, r2, r3
 80127a6:	bd10      	pop	{r4, pc}
 80127a8:	4610      	mov	r0, r2
 80127aa:	e7fc      	b.n	80127a6 <strncmp+0x1e>

080127ac <__strtok_r>:
 80127ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127ae:	b908      	cbnz	r0, 80127b4 <__strtok_r+0x8>
 80127b0:	6810      	ldr	r0, [r2, #0]
 80127b2:	b188      	cbz	r0, 80127d8 <__strtok_r+0x2c>
 80127b4:	4604      	mov	r4, r0
 80127b6:	4620      	mov	r0, r4
 80127b8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80127bc:	460f      	mov	r7, r1
 80127be:	f817 6b01 	ldrb.w	r6, [r7], #1
 80127c2:	b91e      	cbnz	r6, 80127cc <__strtok_r+0x20>
 80127c4:	b965      	cbnz	r5, 80127e0 <__strtok_r+0x34>
 80127c6:	6015      	str	r5, [r2, #0]
 80127c8:	4628      	mov	r0, r5
 80127ca:	e005      	b.n	80127d8 <__strtok_r+0x2c>
 80127cc:	42b5      	cmp	r5, r6
 80127ce:	d1f6      	bne.n	80127be <__strtok_r+0x12>
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d1f0      	bne.n	80127b6 <__strtok_r+0xa>
 80127d4:	6014      	str	r4, [r2, #0]
 80127d6:	7003      	strb	r3, [r0, #0]
 80127d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127da:	461c      	mov	r4, r3
 80127dc:	e00c      	b.n	80127f8 <__strtok_r+0x4c>
 80127de:	b915      	cbnz	r5, 80127e6 <__strtok_r+0x3a>
 80127e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80127e4:	460e      	mov	r6, r1
 80127e6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80127ea:	42ab      	cmp	r3, r5
 80127ec:	d1f7      	bne.n	80127de <__strtok_r+0x32>
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d0f3      	beq.n	80127da <__strtok_r+0x2e>
 80127f2:	2300      	movs	r3, #0
 80127f4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80127f8:	6014      	str	r4, [r2, #0]
 80127fa:	e7ed      	b.n	80127d8 <__strtok_r+0x2c>

080127fc <strtok_r>:
 80127fc:	2301      	movs	r3, #1
 80127fe:	f7ff bfd5 	b.w	80127ac <__strtok_r>
	...

08012804 <_close_r>:
 8012804:	b538      	push	{r3, r4, r5, lr}
 8012806:	4d06      	ldr	r5, [pc, #24]	; (8012820 <_close_r+0x1c>)
 8012808:	2300      	movs	r3, #0
 801280a:	4604      	mov	r4, r0
 801280c:	4608      	mov	r0, r1
 801280e:	602b      	str	r3, [r5, #0]
 8012810:	f7ef f9cd 	bl	8001bae <_close>
 8012814:	1c43      	adds	r3, r0, #1
 8012816:	d102      	bne.n	801281e <_close_r+0x1a>
 8012818:	682b      	ldr	r3, [r5, #0]
 801281a:	b103      	cbz	r3, 801281e <_close_r+0x1a>
 801281c:	6023      	str	r3, [r4, #0]
 801281e:	bd38      	pop	{r3, r4, r5, pc}
 8012820:	20002ba4 	.word	0x20002ba4

08012824 <_lseek_r>:
 8012824:	b538      	push	{r3, r4, r5, lr}
 8012826:	4d07      	ldr	r5, [pc, #28]	; (8012844 <_lseek_r+0x20>)
 8012828:	4604      	mov	r4, r0
 801282a:	4608      	mov	r0, r1
 801282c:	4611      	mov	r1, r2
 801282e:	2200      	movs	r2, #0
 8012830:	602a      	str	r2, [r5, #0]
 8012832:	461a      	mov	r2, r3
 8012834:	f7ef f9e2 	bl	8001bfc <_lseek>
 8012838:	1c43      	adds	r3, r0, #1
 801283a:	d102      	bne.n	8012842 <_lseek_r+0x1e>
 801283c:	682b      	ldr	r3, [r5, #0]
 801283e:	b103      	cbz	r3, 8012842 <_lseek_r+0x1e>
 8012840:	6023      	str	r3, [r4, #0]
 8012842:	bd38      	pop	{r3, r4, r5, pc}
 8012844:	20002ba4 	.word	0x20002ba4

08012848 <_read_r>:
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	4d07      	ldr	r5, [pc, #28]	; (8012868 <_read_r+0x20>)
 801284c:	4604      	mov	r4, r0
 801284e:	4608      	mov	r0, r1
 8012850:	4611      	mov	r1, r2
 8012852:	2200      	movs	r2, #0
 8012854:	602a      	str	r2, [r5, #0]
 8012856:	461a      	mov	r2, r3
 8012858:	f7ef f970 	bl	8001b3c <_read>
 801285c:	1c43      	adds	r3, r0, #1
 801285e:	d102      	bne.n	8012866 <_read_r+0x1e>
 8012860:	682b      	ldr	r3, [r5, #0]
 8012862:	b103      	cbz	r3, 8012866 <_read_r+0x1e>
 8012864:	6023      	str	r3, [r4, #0]
 8012866:	bd38      	pop	{r3, r4, r5, pc}
 8012868:	20002ba4 	.word	0x20002ba4

0801286c <_sbrk_r>:
 801286c:	b538      	push	{r3, r4, r5, lr}
 801286e:	4d06      	ldr	r5, [pc, #24]	; (8012888 <_sbrk_r+0x1c>)
 8012870:	2300      	movs	r3, #0
 8012872:	4604      	mov	r4, r0
 8012874:	4608      	mov	r0, r1
 8012876:	602b      	str	r3, [r5, #0]
 8012878:	f7ef f9ce 	bl	8001c18 <_sbrk>
 801287c:	1c43      	adds	r3, r0, #1
 801287e:	d102      	bne.n	8012886 <_sbrk_r+0x1a>
 8012880:	682b      	ldr	r3, [r5, #0]
 8012882:	b103      	cbz	r3, 8012886 <_sbrk_r+0x1a>
 8012884:	6023      	str	r3, [r4, #0]
 8012886:	bd38      	pop	{r3, r4, r5, pc}
 8012888:	20002ba4 	.word	0x20002ba4

0801288c <_write_r>:
 801288c:	b538      	push	{r3, r4, r5, lr}
 801288e:	4d07      	ldr	r5, [pc, #28]	; (80128ac <_write_r+0x20>)
 8012890:	4604      	mov	r4, r0
 8012892:	4608      	mov	r0, r1
 8012894:	4611      	mov	r1, r2
 8012896:	2200      	movs	r2, #0
 8012898:	602a      	str	r2, [r5, #0]
 801289a:	461a      	mov	r2, r3
 801289c:	f7ef f96b 	bl	8001b76 <_write>
 80128a0:	1c43      	adds	r3, r0, #1
 80128a2:	d102      	bne.n	80128aa <_write_r+0x1e>
 80128a4:	682b      	ldr	r3, [r5, #0]
 80128a6:	b103      	cbz	r3, 80128aa <_write_r+0x1e>
 80128a8:	6023      	str	r3, [r4, #0]
 80128aa:	bd38      	pop	{r3, r4, r5, pc}
 80128ac:	20002ba4 	.word	0x20002ba4

080128b0 <__errno>:
 80128b0:	4b01      	ldr	r3, [pc, #4]	; (80128b8 <__errno+0x8>)
 80128b2:	6818      	ldr	r0, [r3, #0]
 80128b4:	4770      	bx	lr
 80128b6:	bf00      	nop
 80128b8:	20000318 	.word	0x20000318

080128bc <__libc_init_array>:
 80128bc:	b570      	push	{r4, r5, r6, lr}
 80128be:	4d0d      	ldr	r5, [pc, #52]	; (80128f4 <__libc_init_array+0x38>)
 80128c0:	4c0d      	ldr	r4, [pc, #52]	; (80128f8 <__libc_init_array+0x3c>)
 80128c2:	1b64      	subs	r4, r4, r5
 80128c4:	10a4      	asrs	r4, r4, #2
 80128c6:	2600      	movs	r6, #0
 80128c8:	42a6      	cmp	r6, r4
 80128ca:	d109      	bne.n	80128e0 <__libc_init_array+0x24>
 80128cc:	4d0b      	ldr	r5, [pc, #44]	; (80128fc <__libc_init_array+0x40>)
 80128ce:	4c0c      	ldr	r4, [pc, #48]	; (8012900 <__libc_init_array+0x44>)
 80128d0:	f001 ff86 	bl	80147e0 <_init>
 80128d4:	1b64      	subs	r4, r4, r5
 80128d6:	10a4      	asrs	r4, r4, #2
 80128d8:	2600      	movs	r6, #0
 80128da:	42a6      	cmp	r6, r4
 80128dc:	d105      	bne.n	80128ea <__libc_init_array+0x2e>
 80128de:	bd70      	pop	{r4, r5, r6, pc}
 80128e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80128e4:	4798      	blx	r3
 80128e6:	3601      	adds	r6, #1
 80128e8:	e7ee      	b.n	80128c8 <__libc_init_array+0xc>
 80128ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80128ee:	4798      	blx	r3
 80128f0:	3601      	adds	r6, #1
 80128f2:	e7f2      	b.n	80128da <__libc_init_array+0x1e>
 80128f4:	080156b4 	.word	0x080156b4
 80128f8:	080156b4 	.word	0x080156b4
 80128fc:	080156b4 	.word	0x080156b4
 8012900:	080156b8 	.word	0x080156b8

08012904 <__retarget_lock_init_recursive>:
 8012904:	4770      	bx	lr

08012906 <__retarget_lock_acquire_recursive>:
 8012906:	4770      	bx	lr

08012908 <__retarget_lock_release_recursive>:
 8012908:	4770      	bx	lr

0801290a <strcpy>:
 801290a:	4603      	mov	r3, r0
 801290c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012910:	f803 2b01 	strb.w	r2, [r3], #1
 8012914:	2a00      	cmp	r2, #0
 8012916:	d1f9      	bne.n	801290c <strcpy+0x2>
 8012918:	4770      	bx	lr

0801291a <memcpy>:
 801291a:	440a      	add	r2, r1
 801291c:	4291      	cmp	r1, r2
 801291e:	f100 33ff 	add.w	r3, r0, #4294967295
 8012922:	d100      	bne.n	8012926 <memcpy+0xc>
 8012924:	4770      	bx	lr
 8012926:	b510      	push	{r4, lr}
 8012928:	f811 4b01 	ldrb.w	r4, [r1], #1
 801292c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012930:	4291      	cmp	r1, r2
 8012932:	d1f9      	bne.n	8012928 <memcpy+0xe>
 8012934:	bd10      	pop	{r4, pc}
	...

08012938 <nan>:
 8012938:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012940 <nan+0x8>
 801293c:	4770      	bx	lr
 801293e:	bf00      	nop
 8012940:	00000000 	.word	0x00000000
 8012944:	7ff80000 	.word	0x7ff80000

08012948 <nanf>:
 8012948:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012950 <nanf+0x8>
 801294c:	4770      	bx	lr
 801294e:	bf00      	nop
 8012950:	7fc00000 	.word	0x7fc00000

08012954 <_free_r>:
 8012954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012956:	2900      	cmp	r1, #0
 8012958:	d044      	beq.n	80129e4 <_free_r+0x90>
 801295a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801295e:	9001      	str	r0, [sp, #4]
 8012960:	2b00      	cmp	r3, #0
 8012962:	f1a1 0404 	sub.w	r4, r1, #4
 8012966:	bfb8      	it	lt
 8012968:	18e4      	addlt	r4, r4, r3
 801296a:	f7fe fecd 	bl	8011708 <__malloc_lock>
 801296e:	4a1e      	ldr	r2, [pc, #120]	; (80129e8 <_free_r+0x94>)
 8012970:	9801      	ldr	r0, [sp, #4]
 8012972:	6813      	ldr	r3, [r2, #0]
 8012974:	b933      	cbnz	r3, 8012984 <_free_r+0x30>
 8012976:	6063      	str	r3, [r4, #4]
 8012978:	6014      	str	r4, [r2, #0]
 801297a:	b003      	add	sp, #12
 801297c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012980:	f7fe bec8 	b.w	8011714 <__malloc_unlock>
 8012984:	42a3      	cmp	r3, r4
 8012986:	d908      	bls.n	801299a <_free_r+0x46>
 8012988:	6825      	ldr	r5, [r4, #0]
 801298a:	1961      	adds	r1, r4, r5
 801298c:	428b      	cmp	r3, r1
 801298e:	bf01      	itttt	eq
 8012990:	6819      	ldreq	r1, [r3, #0]
 8012992:	685b      	ldreq	r3, [r3, #4]
 8012994:	1949      	addeq	r1, r1, r5
 8012996:	6021      	streq	r1, [r4, #0]
 8012998:	e7ed      	b.n	8012976 <_free_r+0x22>
 801299a:	461a      	mov	r2, r3
 801299c:	685b      	ldr	r3, [r3, #4]
 801299e:	b10b      	cbz	r3, 80129a4 <_free_r+0x50>
 80129a0:	42a3      	cmp	r3, r4
 80129a2:	d9fa      	bls.n	801299a <_free_r+0x46>
 80129a4:	6811      	ldr	r1, [r2, #0]
 80129a6:	1855      	adds	r5, r2, r1
 80129a8:	42a5      	cmp	r5, r4
 80129aa:	d10b      	bne.n	80129c4 <_free_r+0x70>
 80129ac:	6824      	ldr	r4, [r4, #0]
 80129ae:	4421      	add	r1, r4
 80129b0:	1854      	adds	r4, r2, r1
 80129b2:	42a3      	cmp	r3, r4
 80129b4:	6011      	str	r1, [r2, #0]
 80129b6:	d1e0      	bne.n	801297a <_free_r+0x26>
 80129b8:	681c      	ldr	r4, [r3, #0]
 80129ba:	685b      	ldr	r3, [r3, #4]
 80129bc:	6053      	str	r3, [r2, #4]
 80129be:	440c      	add	r4, r1
 80129c0:	6014      	str	r4, [r2, #0]
 80129c2:	e7da      	b.n	801297a <_free_r+0x26>
 80129c4:	d902      	bls.n	80129cc <_free_r+0x78>
 80129c6:	230c      	movs	r3, #12
 80129c8:	6003      	str	r3, [r0, #0]
 80129ca:	e7d6      	b.n	801297a <_free_r+0x26>
 80129cc:	6825      	ldr	r5, [r4, #0]
 80129ce:	1961      	adds	r1, r4, r5
 80129d0:	428b      	cmp	r3, r1
 80129d2:	bf04      	itt	eq
 80129d4:	6819      	ldreq	r1, [r3, #0]
 80129d6:	685b      	ldreq	r3, [r3, #4]
 80129d8:	6063      	str	r3, [r4, #4]
 80129da:	bf04      	itt	eq
 80129dc:	1949      	addeq	r1, r1, r5
 80129de:	6021      	streq	r1, [r4, #0]
 80129e0:	6054      	str	r4, [r2, #4]
 80129e2:	e7ca      	b.n	801297a <_free_r+0x26>
 80129e4:	b003      	add	sp, #12
 80129e6:	bd30      	pop	{r4, r5, pc}
 80129e8:	20002a60 	.word	0x20002a60

080129ec <rshift>:
 80129ec:	6903      	ldr	r3, [r0, #16]
 80129ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80129f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80129f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80129fa:	f100 0414 	add.w	r4, r0, #20
 80129fe:	dd45      	ble.n	8012a8c <rshift+0xa0>
 8012a00:	f011 011f 	ands.w	r1, r1, #31
 8012a04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012a08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012a0c:	d10c      	bne.n	8012a28 <rshift+0x3c>
 8012a0e:	f100 0710 	add.w	r7, r0, #16
 8012a12:	4629      	mov	r1, r5
 8012a14:	42b1      	cmp	r1, r6
 8012a16:	d334      	bcc.n	8012a82 <rshift+0x96>
 8012a18:	1a9b      	subs	r3, r3, r2
 8012a1a:	009b      	lsls	r3, r3, #2
 8012a1c:	1eea      	subs	r2, r5, #3
 8012a1e:	4296      	cmp	r6, r2
 8012a20:	bf38      	it	cc
 8012a22:	2300      	movcc	r3, #0
 8012a24:	4423      	add	r3, r4
 8012a26:	e015      	b.n	8012a54 <rshift+0x68>
 8012a28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012a2c:	f1c1 0820 	rsb	r8, r1, #32
 8012a30:	40cf      	lsrs	r7, r1
 8012a32:	f105 0e04 	add.w	lr, r5, #4
 8012a36:	46a1      	mov	r9, r4
 8012a38:	4576      	cmp	r6, lr
 8012a3a:	46f4      	mov	ip, lr
 8012a3c:	d815      	bhi.n	8012a6a <rshift+0x7e>
 8012a3e:	1a9a      	subs	r2, r3, r2
 8012a40:	0092      	lsls	r2, r2, #2
 8012a42:	3a04      	subs	r2, #4
 8012a44:	3501      	adds	r5, #1
 8012a46:	42ae      	cmp	r6, r5
 8012a48:	bf38      	it	cc
 8012a4a:	2200      	movcc	r2, #0
 8012a4c:	18a3      	adds	r3, r4, r2
 8012a4e:	50a7      	str	r7, [r4, r2]
 8012a50:	b107      	cbz	r7, 8012a54 <rshift+0x68>
 8012a52:	3304      	adds	r3, #4
 8012a54:	1b1a      	subs	r2, r3, r4
 8012a56:	42a3      	cmp	r3, r4
 8012a58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012a5c:	bf08      	it	eq
 8012a5e:	2300      	moveq	r3, #0
 8012a60:	6102      	str	r2, [r0, #16]
 8012a62:	bf08      	it	eq
 8012a64:	6143      	streq	r3, [r0, #20]
 8012a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a6a:	f8dc c000 	ldr.w	ip, [ip]
 8012a6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012a72:	ea4c 0707 	orr.w	r7, ip, r7
 8012a76:	f849 7b04 	str.w	r7, [r9], #4
 8012a7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012a7e:	40cf      	lsrs	r7, r1
 8012a80:	e7da      	b.n	8012a38 <rshift+0x4c>
 8012a82:	f851 cb04 	ldr.w	ip, [r1], #4
 8012a86:	f847 cf04 	str.w	ip, [r7, #4]!
 8012a8a:	e7c3      	b.n	8012a14 <rshift+0x28>
 8012a8c:	4623      	mov	r3, r4
 8012a8e:	e7e1      	b.n	8012a54 <rshift+0x68>

08012a90 <__hexdig_fun>:
 8012a90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012a94:	2b09      	cmp	r3, #9
 8012a96:	d802      	bhi.n	8012a9e <__hexdig_fun+0xe>
 8012a98:	3820      	subs	r0, #32
 8012a9a:	b2c0      	uxtb	r0, r0
 8012a9c:	4770      	bx	lr
 8012a9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012aa2:	2b05      	cmp	r3, #5
 8012aa4:	d801      	bhi.n	8012aaa <__hexdig_fun+0x1a>
 8012aa6:	3847      	subs	r0, #71	; 0x47
 8012aa8:	e7f7      	b.n	8012a9a <__hexdig_fun+0xa>
 8012aaa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012aae:	2b05      	cmp	r3, #5
 8012ab0:	d801      	bhi.n	8012ab6 <__hexdig_fun+0x26>
 8012ab2:	3827      	subs	r0, #39	; 0x27
 8012ab4:	e7f1      	b.n	8012a9a <__hexdig_fun+0xa>
 8012ab6:	2000      	movs	r0, #0
 8012ab8:	4770      	bx	lr
	...

08012abc <__gethex>:
 8012abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ac0:	4617      	mov	r7, r2
 8012ac2:	680a      	ldr	r2, [r1, #0]
 8012ac4:	b085      	sub	sp, #20
 8012ac6:	f102 0b02 	add.w	fp, r2, #2
 8012aca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012ace:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012ad2:	4681      	mov	r9, r0
 8012ad4:	468a      	mov	sl, r1
 8012ad6:	9302      	str	r3, [sp, #8]
 8012ad8:	32fe      	adds	r2, #254	; 0xfe
 8012ada:	eb02 030b 	add.w	r3, r2, fp
 8012ade:	46d8      	mov	r8, fp
 8012ae0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8012ae4:	9301      	str	r3, [sp, #4]
 8012ae6:	2830      	cmp	r0, #48	; 0x30
 8012ae8:	d0f7      	beq.n	8012ada <__gethex+0x1e>
 8012aea:	f7ff ffd1 	bl	8012a90 <__hexdig_fun>
 8012aee:	4604      	mov	r4, r0
 8012af0:	2800      	cmp	r0, #0
 8012af2:	d138      	bne.n	8012b66 <__gethex+0xaa>
 8012af4:	49a7      	ldr	r1, [pc, #668]	; (8012d94 <__gethex+0x2d8>)
 8012af6:	2201      	movs	r2, #1
 8012af8:	4640      	mov	r0, r8
 8012afa:	f7ff fe45 	bl	8012788 <strncmp>
 8012afe:	4606      	mov	r6, r0
 8012b00:	2800      	cmp	r0, #0
 8012b02:	d169      	bne.n	8012bd8 <__gethex+0x11c>
 8012b04:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012b08:	465d      	mov	r5, fp
 8012b0a:	f7ff ffc1 	bl	8012a90 <__hexdig_fun>
 8012b0e:	2800      	cmp	r0, #0
 8012b10:	d064      	beq.n	8012bdc <__gethex+0x120>
 8012b12:	465a      	mov	r2, fp
 8012b14:	7810      	ldrb	r0, [r2, #0]
 8012b16:	2830      	cmp	r0, #48	; 0x30
 8012b18:	4690      	mov	r8, r2
 8012b1a:	f102 0201 	add.w	r2, r2, #1
 8012b1e:	d0f9      	beq.n	8012b14 <__gethex+0x58>
 8012b20:	f7ff ffb6 	bl	8012a90 <__hexdig_fun>
 8012b24:	2301      	movs	r3, #1
 8012b26:	fab0 f480 	clz	r4, r0
 8012b2a:	0964      	lsrs	r4, r4, #5
 8012b2c:	465e      	mov	r6, fp
 8012b2e:	9301      	str	r3, [sp, #4]
 8012b30:	4642      	mov	r2, r8
 8012b32:	4615      	mov	r5, r2
 8012b34:	3201      	adds	r2, #1
 8012b36:	7828      	ldrb	r0, [r5, #0]
 8012b38:	f7ff ffaa 	bl	8012a90 <__hexdig_fun>
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	d1f8      	bne.n	8012b32 <__gethex+0x76>
 8012b40:	4994      	ldr	r1, [pc, #592]	; (8012d94 <__gethex+0x2d8>)
 8012b42:	2201      	movs	r2, #1
 8012b44:	4628      	mov	r0, r5
 8012b46:	f7ff fe1f 	bl	8012788 <strncmp>
 8012b4a:	b978      	cbnz	r0, 8012b6c <__gethex+0xb0>
 8012b4c:	b946      	cbnz	r6, 8012b60 <__gethex+0xa4>
 8012b4e:	1c6e      	adds	r6, r5, #1
 8012b50:	4632      	mov	r2, r6
 8012b52:	4615      	mov	r5, r2
 8012b54:	3201      	adds	r2, #1
 8012b56:	7828      	ldrb	r0, [r5, #0]
 8012b58:	f7ff ff9a 	bl	8012a90 <__hexdig_fun>
 8012b5c:	2800      	cmp	r0, #0
 8012b5e:	d1f8      	bne.n	8012b52 <__gethex+0x96>
 8012b60:	1b73      	subs	r3, r6, r5
 8012b62:	009e      	lsls	r6, r3, #2
 8012b64:	e004      	b.n	8012b70 <__gethex+0xb4>
 8012b66:	2400      	movs	r4, #0
 8012b68:	4626      	mov	r6, r4
 8012b6a:	e7e1      	b.n	8012b30 <__gethex+0x74>
 8012b6c:	2e00      	cmp	r6, #0
 8012b6e:	d1f7      	bne.n	8012b60 <__gethex+0xa4>
 8012b70:	782b      	ldrb	r3, [r5, #0]
 8012b72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012b76:	2b50      	cmp	r3, #80	; 0x50
 8012b78:	d13d      	bne.n	8012bf6 <__gethex+0x13a>
 8012b7a:	786b      	ldrb	r3, [r5, #1]
 8012b7c:	2b2b      	cmp	r3, #43	; 0x2b
 8012b7e:	d02f      	beq.n	8012be0 <__gethex+0x124>
 8012b80:	2b2d      	cmp	r3, #45	; 0x2d
 8012b82:	d031      	beq.n	8012be8 <__gethex+0x12c>
 8012b84:	1c69      	adds	r1, r5, #1
 8012b86:	f04f 0b00 	mov.w	fp, #0
 8012b8a:	7808      	ldrb	r0, [r1, #0]
 8012b8c:	f7ff ff80 	bl	8012a90 <__hexdig_fun>
 8012b90:	1e42      	subs	r2, r0, #1
 8012b92:	b2d2      	uxtb	r2, r2
 8012b94:	2a18      	cmp	r2, #24
 8012b96:	d82e      	bhi.n	8012bf6 <__gethex+0x13a>
 8012b98:	f1a0 0210 	sub.w	r2, r0, #16
 8012b9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012ba0:	f7ff ff76 	bl	8012a90 <__hexdig_fun>
 8012ba4:	f100 3cff 	add.w	ip, r0, #4294967295
 8012ba8:	fa5f fc8c 	uxtb.w	ip, ip
 8012bac:	f1bc 0f18 	cmp.w	ip, #24
 8012bb0:	d91d      	bls.n	8012bee <__gethex+0x132>
 8012bb2:	f1bb 0f00 	cmp.w	fp, #0
 8012bb6:	d000      	beq.n	8012bba <__gethex+0xfe>
 8012bb8:	4252      	negs	r2, r2
 8012bba:	4416      	add	r6, r2
 8012bbc:	f8ca 1000 	str.w	r1, [sl]
 8012bc0:	b1dc      	cbz	r4, 8012bfa <__gethex+0x13e>
 8012bc2:	9b01      	ldr	r3, [sp, #4]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	bf14      	ite	ne
 8012bc8:	f04f 0800 	movne.w	r8, #0
 8012bcc:	f04f 0806 	moveq.w	r8, #6
 8012bd0:	4640      	mov	r0, r8
 8012bd2:	b005      	add	sp, #20
 8012bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bd8:	4645      	mov	r5, r8
 8012bda:	4626      	mov	r6, r4
 8012bdc:	2401      	movs	r4, #1
 8012bde:	e7c7      	b.n	8012b70 <__gethex+0xb4>
 8012be0:	f04f 0b00 	mov.w	fp, #0
 8012be4:	1ca9      	adds	r1, r5, #2
 8012be6:	e7d0      	b.n	8012b8a <__gethex+0xce>
 8012be8:	f04f 0b01 	mov.w	fp, #1
 8012bec:	e7fa      	b.n	8012be4 <__gethex+0x128>
 8012bee:	230a      	movs	r3, #10
 8012bf0:	fb03 0002 	mla	r0, r3, r2, r0
 8012bf4:	e7d0      	b.n	8012b98 <__gethex+0xdc>
 8012bf6:	4629      	mov	r1, r5
 8012bf8:	e7e0      	b.n	8012bbc <__gethex+0x100>
 8012bfa:	eba5 0308 	sub.w	r3, r5, r8
 8012bfe:	3b01      	subs	r3, #1
 8012c00:	4621      	mov	r1, r4
 8012c02:	2b07      	cmp	r3, #7
 8012c04:	dc0a      	bgt.n	8012c1c <__gethex+0x160>
 8012c06:	4648      	mov	r0, r9
 8012c08:	f000 fa5a 	bl	80130c0 <_Balloc>
 8012c0c:	4604      	mov	r4, r0
 8012c0e:	b940      	cbnz	r0, 8012c22 <__gethex+0x166>
 8012c10:	4b61      	ldr	r3, [pc, #388]	; (8012d98 <__gethex+0x2dc>)
 8012c12:	4602      	mov	r2, r0
 8012c14:	21e4      	movs	r1, #228	; 0xe4
 8012c16:	4861      	ldr	r0, [pc, #388]	; (8012d9c <__gethex+0x2e0>)
 8012c18:	f001 fabc 	bl	8014194 <__assert_func>
 8012c1c:	3101      	adds	r1, #1
 8012c1e:	105b      	asrs	r3, r3, #1
 8012c20:	e7ef      	b.n	8012c02 <__gethex+0x146>
 8012c22:	f100 0a14 	add.w	sl, r0, #20
 8012c26:	2300      	movs	r3, #0
 8012c28:	495a      	ldr	r1, [pc, #360]	; (8012d94 <__gethex+0x2d8>)
 8012c2a:	f8cd a004 	str.w	sl, [sp, #4]
 8012c2e:	469b      	mov	fp, r3
 8012c30:	45a8      	cmp	r8, r5
 8012c32:	d342      	bcc.n	8012cba <__gethex+0x1fe>
 8012c34:	9801      	ldr	r0, [sp, #4]
 8012c36:	f840 bb04 	str.w	fp, [r0], #4
 8012c3a:	eba0 000a 	sub.w	r0, r0, sl
 8012c3e:	1080      	asrs	r0, r0, #2
 8012c40:	6120      	str	r0, [r4, #16]
 8012c42:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8012c46:	4658      	mov	r0, fp
 8012c48:	f000 fb2c 	bl	80132a4 <__hi0bits>
 8012c4c:	683d      	ldr	r5, [r7, #0]
 8012c4e:	eba8 0000 	sub.w	r0, r8, r0
 8012c52:	42a8      	cmp	r0, r5
 8012c54:	dd59      	ble.n	8012d0a <__gethex+0x24e>
 8012c56:	eba0 0805 	sub.w	r8, r0, r5
 8012c5a:	4641      	mov	r1, r8
 8012c5c:	4620      	mov	r0, r4
 8012c5e:	f000 febb 	bl	80139d8 <__any_on>
 8012c62:	4683      	mov	fp, r0
 8012c64:	b1b8      	cbz	r0, 8012c96 <__gethex+0x1da>
 8012c66:	f108 33ff 	add.w	r3, r8, #4294967295
 8012c6a:	1159      	asrs	r1, r3, #5
 8012c6c:	f003 021f 	and.w	r2, r3, #31
 8012c70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012c74:	f04f 0b01 	mov.w	fp, #1
 8012c78:	fa0b f202 	lsl.w	r2, fp, r2
 8012c7c:	420a      	tst	r2, r1
 8012c7e:	d00a      	beq.n	8012c96 <__gethex+0x1da>
 8012c80:	455b      	cmp	r3, fp
 8012c82:	dd06      	ble.n	8012c92 <__gethex+0x1d6>
 8012c84:	f1a8 0102 	sub.w	r1, r8, #2
 8012c88:	4620      	mov	r0, r4
 8012c8a:	f000 fea5 	bl	80139d8 <__any_on>
 8012c8e:	2800      	cmp	r0, #0
 8012c90:	d138      	bne.n	8012d04 <__gethex+0x248>
 8012c92:	f04f 0b02 	mov.w	fp, #2
 8012c96:	4641      	mov	r1, r8
 8012c98:	4620      	mov	r0, r4
 8012c9a:	f7ff fea7 	bl	80129ec <rshift>
 8012c9e:	4446      	add	r6, r8
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	42b3      	cmp	r3, r6
 8012ca4:	da41      	bge.n	8012d2a <__gethex+0x26e>
 8012ca6:	4621      	mov	r1, r4
 8012ca8:	4648      	mov	r0, r9
 8012caa:	f000 fa49 	bl	8013140 <_Bfree>
 8012cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	6013      	str	r3, [r2, #0]
 8012cb4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8012cb8:	e78a      	b.n	8012bd0 <__gethex+0x114>
 8012cba:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8012cbe:	2a2e      	cmp	r2, #46	; 0x2e
 8012cc0:	d014      	beq.n	8012cec <__gethex+0x230>
 8012cc2:	2b20      	cmp	r3, #32
 8012cc4:	d106      	bne.n	8012cd4 <__gethex+0x218>
 8012cc6:	9b01      	ldr	r3, [sp, #4]
 8012cc8:	f843 bb04 	str.w	fp, [r3], #4
 8012ccc:	f04f 0b00 	mov.w	fp, #0
 8012cd0:	9301      	str	r3, [sp, #4]
 8012cd2:	465b      	mov	r3, fp
 8012cd4:	7828      	ldrb	r0, [r5, #0]
 8012cd6:	9303      	str	r3, [sp, #12]
 8012cd8:	f7ff feda 	bl	8012a90 <__hexdig_fun>
 8012cdc:	9b03      	ldr	r3, [sp, #12]
 8012cde:	f000 000f 	and.w	r0, r0, #15
 8012ce2:	4098      	lsls	r0, r3
 8012ce4:	ea4b 0b00 	orr.w	fp, fp, r0
 8012ce8:	3304      	adds	r3, #4
 8012cea:	e7a1      	b.n	8012c30 <__gethex+0x174>
 8012cec:	45a8      	cmp	r8, r5
 8012cee:	d8e8      	bhi.n	8012cc2 <__gethex+0x206>
 8012cf0:	2201      	movs	r2, #1
 8012cf2:	4628      	mov	r0, r5
 8012cf4:	9303      	str	r3, [sp, #12]
 8012cf6:	f7ff fd47 	bl	8012788 <strncmp>
 8012cfa:	4926      	ldr	r1, [pc, #152]	; (8012d94 <__gethex+0x2d8>)
 8012cfc:	9b03      	ldr	r3, [sp, #12]
 8012cfe:	2800      	cmp	r0, #0
 8012d00:	d1df      	bne.n	8012cc2 <__gethex+0x206>
 8012d02:	e795      	b.n	8012c30 <__gethex+0x174>
 8012d04:	f04f 0b03 	mov.w	fp, #3
 8012d08:	e7c5      	b.n	8012c96 <__gethex+0x1da>
 8012d0a:	da0b      	bge.n	8012d24 <__gethex+0x268>
 8012d0c:	eba5 0800 	sub.w	r8, r5, r0
 8012d10:	4621      	mov	r1, r4
 8012d12:	4642      	mov	r2, r8
 8012d14:	4648      	mov	r0, r9
 8012d16:	f000 fc2d 	bl	8013574 <__lshift>
 8012d1a:	eba6 0608 	sub.w	r6, r6, r8
 8012d1e:	4604      	mov	r4, r0
 8012d20:	f100 0a14 	add.w	sl, r0, #20
 8012d24:	f04f 0b00 	mov.w	fp, #0
 8012d28:	e7ba      	b.n	8012ca0 <__gethex+0x1e4>
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	42b3      	cmp	r3, r6
 8012d2e:	dd73      	ble.n	8012e18 <__gethex+0x35c>
 8012d30:	1b9e      	subs	r6, r3, r6
 8012d32:	42b5      	cmp	r5, r6
 8012d34:	dc34      	bgt.n	8012da0 <__gethex+0x2e4>
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	2b02      	cmp	r3, #2
 8012d3a:	d023      	beq.n	8012d84 <__gethex+0x2c8>
 8012d3c:	2b03      	cmp	r3, #3
 8012d3e:	d025      	beq.n	8012d8c <__gethex+0x2d0>
 8012d40:	2b01      	cmp	r3, #1
 8012d42:	d115      	bne.n	8012d70 <__gethex+0x2b4>
 8012d44:	42b5      	cmp	r5, r6
 8012d46:	d113      	bne.n	8012d70 <__gethex+0x2b4>
 8012d48:	2d01      	cmp	r5, #1
 8012d4a:	d10b      	bne.n	8012d64 <__gethex+0x2a8>
 8012d4c:	9a02      	ldr	r2, [sp, #8]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	6013      	str	r3, [r2, #0]
 8012d52:	2301      	movs	r3, #1
 8012d54:	6123      	str	r3, [r4, #16]
 8012d56:	f8ca 3000 	str.w	r3, [sl]
 8012d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d5c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8012d60:	601c      	str	r4, [r3, #0]
 8012d62:	e735      	b.n	8012bd0 <__gethex+0x114>
 8012d64:	1e69      	subs	r1, r5, #1
 8012d66:	4620      	mov	r0, r4
 8012d68:	f000 fe36 	bl	80139d8 <__any_on>
 8012d6c:	2800      	cmp	r0, #0
 8012d6e:	d1ed      	bne.n	8012d4c <__gethex+0x290>
 8012d70:	4621      	mov	r1, r4
 8012d72:	4648      	mov	r0, r9
 8012d74:	f000 f9e4 	bl	8013140 <_Bfree>
 8012d78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	6013      	str	r3, [r2, #0]
 8012d7e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8012d82:	e725      	b.n	8012bd0 <__gethex+0x114>
 8012d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d1f2      	bne.n	8012d70 <__gethex+0x2b4>
 8012d8a:	e7df      	b.n	8012d4c <__gethex+0x290>
 8012d8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d1dc      	bne.n	8012d4c <__gethex+0x290>
 8012d92:	e7ed      	b.n	8012d70 <__gethex+0x2b4>
 8012d94:	080152ec 	.word	0x080152ec
 8012d98:	08015459 	.word	0x08015459
 8012d9c:	0801546a 	.word	0x0801546a
 8012da0:	f106 38ff 	add.w	r8, r6, #4294967295
 8012da4:	f1bb 0f00 	cmp.w	fp, #0
 8012da8:	d133      	bne.n	8012e12 <__gethex+0x356>
 8012daa:	f1b8 0f00 	cmp.w	r8, #0
 8012dae:	d004      	beq.n	8012dba <__gethex+0x2fe>
 8012db0:	4641      	mov	r1, r8
 8012db2:	4620      	mov	r0, r4
 8012db4:	f000 fe10 	bl	80139d8 <__any_on>
 8012db8:	4683      	mov	fp, r0
 8012dba:	ea4f 1268 	mov.w	r2, r8, asr #5
 8012dbe:	2301      	movs	r3, #1
 8012dc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012dc4:	f008 081f 	and.w	r8, r8, #31
 8012dc8:	fa03 f308 	lsl.w	r3, r3, r8
 8012dcc:	4213      	tst	r3, r2
 8012dce:	4631      	mov	r1, r6
 8012dd0:	4620      	mov	r0, r4
 8012dd2:	bf18      	it	ne
 8012dd4:	f04b 0b02 	orrne.w	fp, fp, #2
 8012dd8:	1bad      	subs	r5, r5, r6
 8012dda:	f7ff fe07 	bl	80129ec <rshift>
 8012dde:	687e      	ldr	r6, [r7, #4]
 8012de0:	f04f 0802 	mov.w	r8, #2
 8012de4:	f1bb 0f00 	cmp.w	fp, #0
 8012de8:	d04a      	beq.n	8012e80 <__gethex+0x3c4>
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	2b02      	cmp	r3, #2
 8012dee:	d016      	beq.n	8012e1e <__gethex+0x362>
 8012df0:	2b03      	cmp	r3, #3
 8012df2:	d018      	beq.n	8012e26 <__gethex+0x36a>
 8012df4:	2b01      	cmp	r3, #1
 8012df6:	d109      	bne.n	8012e0c <__gethex+0x350>
 8012df8:	f01b 0f02 	tst.w	fp, #2
 8012dfc:	d006      	beq.n	8012e0c <__gethex+0x350>
 8012dfe:	f8da 3000 	ldr.w	r3, [sl]
 8012e02:	ea4b 0b03 	orr.w	fp, fp, r3
 8012e06:	f01b 0f01 	tst.w	fp, #1
 8012e0a:	d10f      	bne.n	8012e2c <__gethex+0x370>
 8012e0c:	f048 0810 	orr.w	r8, r8, #16
 8012e10:	e036      	b.n	8012e80 <__gethex+0x3c4>
 8012e12:	f04f 0b01 	mov.w	fp, #1
 8012e16:	e7d0      	b.n	8012dba <__gethex+0x2fe>
 8012e18:	f04f 0801 	mov.w	r8, #1
 8012e1c:	e7e2      	b.n	8012de4 <__gethex+0x328>
 8012e1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e20:	f1c3 0301 	rsb	r3, r3, #1
 8012e24:	930f      	str	r3, [sp, #60]	; 0x3c
 8012e26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d0ef      	beq.n	8012e0c <__gethex+0x350>
 8012e2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012e30:	f104 0214 	add.w	r2, r4, #20
 8012e34:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8012e38:	9301      	str	r3, [sp, #4]
 8012e3a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8012e3e:	2300      	movs	r3, #0
 8012e40:	4694      	mov	ip, r2
 8012e42:	f852 1b04 	ldr.w	r1, [r2], #4
 8012e46:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012e4a:	d01e      	beq.n	8012e8a <__gethex+0x3ce>
 8012e4c:	3101      	adds	r1, #1
 8012e4e:	f8cc 1000 	str.w	r1, [ip]
 8012e52:	f1b8 0f02 	cmp.w	r8, #2
 8012e56:	f104 0214 	add.w	r2, r4, #20
 8012e5a:	d13d      	bne.n	8012ed8 <__gethex+0x41c>
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	3b01      	subs	r3, #1
 8012e60:	42ab      	cmp	r3, r5
 8012e62:	d10b      	bne.n	8012e7c <__gethex+0x3c0>
 8012e64:	1169      	asrs	r1, r5, #5
 8012e66:	2301      	movs	r3, #1
 8012e68:	f005 051f 	and.w	r5, r5, #31
 8012e6c:	fa03 f505 	lsl.w	r5, r3, r5
 8012e70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012e74:	421d      	tst	r5, r3
 8012e76:	bf18      	it	ne
 8012e78:	f04f 0801 	movne.w	r8, #1
 8012e7c:	f048 0820 	orr.w	r8, r8, #32
 8012e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e82:	601c      	str	r4, [r3, #0]
 8012e84:	9b02      	ldr	r3, [sp, #8]
 8012e86:	601e      	str	r6, [r3, #0]
 8012e88:	e6a2      	b.n	8012bd0 <__gethex+0x114>
 8012e8a:	4290      	cmp	r0, r2
 8012e8c:	f842 3c04 	str.w	r3, [r2, #-4]
 8012e90:	d8d6      	bhi.n	8012e40 <__gethex+0x384>
 8012e92:	68a2      	ldr	r2, [r4, #8]
 8012e94:	4593      	cmp	fp, r2
 8012e96:	db17      	blt.n	8012ec8 <__gethex+0x40c>
 8012e98:	6861      	ldr	r1, [r4, #4]
 8012e9a:	4648      	mov	r0, r9
 8012e9c:	3101      	adds	r1, #1
 8012e9e:	f000 f90f 	bl	80130c0 <_Balloc>
 8012ea2:	4682      	mov	sl, r0
 8012ea4:	b918      	cbnz	r0, 8012eae <__gethex+0x3f2>
 8012ea6:	4b1b      	ldr	r3, [pc, #108]	; (8012f14 <__gethex+0x458>)
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	2184      	movs	r1, #132	; 0x84
 8012eac:	e6b3      	b.n	8012c16 <__gethex+0x15a>
 8012eae:	6922      	ldr	r2, [r4, #16]
 8012eb0:	3202      	adds	r2, #2
 8012eb2:	f104 010c 	add.w	r1, r4, #12
 8012eb6:	0092      	lsls	r2, r2, #2
 8012eb8:	300c      	adds	r0, #12
 8012eba:	f7ff fd2e 	bl	801291a <memcpy>
 8012ebe:	4621      	mov	r1, r4
 8012ec0:	4648      	mov	r0, r9
 8012ec2:	f000 f93d 	bl	8013140 <_Bfree>
 8012ec6:	4654      	mov	r4, sl
 8012ec8:	6922      	ldr	r2, [r4, #16]
 8012eca:	1c51      	adds	r1, r2, #1
 8012ecc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012ed0:	6121      	str	r1, [r4, #16]
 8012ed2:	2101      	movs	r1, #1
 8012ed4:	6151      	str	r1, [r2, #20]
 8012ed6:	e7bc      	b.n	8012e52 <__gethex+0x396>
 8012ed8:	6921      	ldr	r1, [r4, #16]
 8012eda:	4559      	cmp	r1, fp
 8012edc:	dd0b      	ble.n	8012ef6 <__gethex+0x43a>
 8012ede:	2101      	movs	r1, #1
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	f7ff fd83 	bl	80129ec <rshift>
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	3601      	adds	r6, #1
 8012eea:	42b3      	cmp	r3, r6
 8012eec:	f6ff aedb 	blt.w	8012ca6 <__gethex+0x1ea>
 8012ef0:	f04f 0801 	mov.w	r8, #1
 8012ef4:	e7c2      	b.n	8012e7c <__gethex+0x3c0>
 8012ef6:	f015 051f 	ands.w	r5, r5, #31
 8012efa:	d0f9      	beq.n	8012ef0 <__gethex+0x434>
 8012efc:	9b01      	ldr	r3, [sp, #4]
 8012efe:	441a      	add	r2, r3
 8012f00:	f1c5 0520 	rsb	r5, r5, #32
 8012f04:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8012f08:	f000 f9cc 	bl	80132a4 <__hi0bits>
 8012f0c:	42a8      	cmp	r0, r5
 8012f0e:	dbe6      	blt.n	8012ede <__gethex+0x422>
 8012f10:	e7ee      	b.n	8012ef0 <__gethex+0x434>
 8012f12:	bf00      	nop
 8012f14:	08015459 	.word	0x08015459

08012f18 <L_shift>:
 8012f18:	f1c2 0208 	rsb	r2, r2, #8
 8012f1c:	0092      	lsls	r2, r2, #2
 8012f1e:	b570      	push	{r4, r5, r6, lr}
 8012f20:	f1c2 0620 	rsb	r6, r2, #32
 8012f24:	6843      	ldr	r3, [r0, #4]
 8012f26:	6804      	ldr	r4, [r0, #0]
 8012f28:	fa03 f506 	lsl.w	r5, r3, r6
 8012f2c:	432c      	orrs	r4, r5
 8012f2e:	40d3      	lsrs	r3, r2
 8012f30:	6004      	str	r4, [r0, #0]
 8012f32:	f840 3f04 	str.w	r3, [r0, #4]!
 8012f36:	4288      	cmp	r0, r1
 8012f38:	d3f4      	bcc.n	8012f24 <L_shift+0xc>
 8012f3a:	bd70      	pop	{r4, r5, r6, pc}

08012f3c <__match>:
 8012f3c:	b530      	push	{r4, r5, lr}
 8012f3e:	6803      	ldr	r3, [r0, #0]
 8012f40:	3301      	adds	r3, #1
 8012f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f46:	b914      	cbnz	r4, 8012f4e <__match+0x12>
 8012f48:	6003      	str	r3, [r0, #0]
 8012f4a:	2001      	movs	r0, #1
 8012f4c:	bd30      	pop	{r4, r5, pc}
 8012f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012f56:	2d19      	cmp	r5, #25
 8012f58:	bf98      	it	ls
 8012f5a:	3220      	addls	r2, #32
 8012f5c:	42a2      	cmp	r2, r4
 8012f5e:	d0f0      	beq.n	8012f42 <__match+0x6>
 8012f60:	2000      	movs	r0, #0
 8012f62:	e7f3      	b.n	8012f4c <__match+0x10>

08012f64 <__hexnan>:
 8012f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f68:	680b      	ldr	r3, [r1, #0]
 8012f6a:	6801      	ldr	r1, [r0, #0]
 8012f6c:	115e      	asrs	r6, r3, #5
 8012f6e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012f72:	f013 031f 	ands.w	r3, r3, #31
 8012f76:	b087      	sub	sp, #28
 8012f78:	bf18      	it	ne
 8012f7a:	3604      	addne	r6, #4
 8012f7c:	2500      	movs	r5, #0
 8012f7e:	1f37      	subs	r7, r6, #4
 8012f80:	4682      	mov	sl, r0
 8012f82:	4690      	mov	r8, r2
 8012f84:	9301      	str	r3, [sp, #4]
 8012f86:	f846 5c04 	str.w	r5, [r6, #-4]
 8012f8a:	46b9      	mov	r9, r7
 8012f8c:	463c      	mov	r4, r7
 8012f8e:	9502      	str	r5, [sp, #8]
 8012f90:	46ab      	mov	fp, r5
 8012f92:	784a      	ldrb	r2, [r1, #1]
 8012f94:	1c4b      	adds	r3, r1, #1
 8012f96:	9303      	str	r3, [sp, #12]
 8012f98:	b342      	cbz	r2, 8012fec <__hexnan+0x88>
 8012f9a:	4610      	mov	r0, r2
 8012f9c:	9105      	str	r1, [sp, #20]
 8012f9e:	9204      	str	r2, [sp, #16]
 8012fa0:	f7ff fd76 	bl	8012a90 <__hexdig_fun>
 8012fa4:	2800      	cmp	r0, #0
 8012fa6:	d14f      	bne.n	8013048 <__hexnan+0xe4>
 8012fa8:	9a04      	ldr	r2, [sp, #16]
 8012faa:	9905      	ldr	r1, [sp, #20]
 8012fac:	2a20      	cmp	r2, #32
 8012fae:	d818      	bhi.n	8012fe2 <__hexnan+0x7e>
 8012fb0:	9b02      	ldr	r3, [sp, #8]
 8012fb2:	459b      	cmp	fp, r3
 8012fb4:	dd13      	ble.n	8012fde <__hexnan+0x7a>
 8012fb6:	454c      	cmp	r4, r9
 8012fb8:	d206      	bcs.n	8012fc8 <__hexnan+0x64>
 8012fba:	2d07      	cmp	r5, #7
 8012fbc:	dc04      	bgt.n	8012fc8 <__hexnan+0x64>
 8012fbe:	462a      	mov	r2, r5
 8012fc0:	4649      	mov	r1, r9
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	f7ff ffa8 	bl	8012f18 <L_shift>
 8012fc8:	4544      	cmp	r4, r8
 8012fca:	d950      	bls.n	801306e <__hexnan+0x10a>
 8012fcc:	2300      	movs	r3, #0
 8012fce:	f1a4 0904 	sub.w	r9, r4, #4
 8012fd2:	f844 3c04 	str.w	r3, [r4, #-4]
 8012fd6:	f8cd b008 	str.w	fp, [sp, #8]
 8012fda:	464c      	mov	r4, r9
 8012fdc:	461d      	mov	r5, r3
 8012fde:	9903      	ldr	r1, [sp, #12]
 8012fe0:	e7d7      	b.n	8012f92 <__hexnan+0x2e>
 8012fe2:	2a29      	cmp	r2, #41	; 0x29
 8012fe4:	d155      	bne.n	8013092 <__hexnan+0x12e>
 8012fe6:	3102      	adds	r1, #2
 8012fe8:	f8ca 1000 	str.w	r1, [sl]
 8012fec:	f1bb 0f00 	cmp.w	fp, #0
 8012ff0:	d04f      	beq.n	8013092 <__hexnan+0x12e>
 8012ff2:	454c      	cmp	r4, r9
 8012ff4:	d206      	bcs.n	8013004 <__hexnan+0xa0>
 8012ff6:	2d07      	cmp	r5, #7
 8012ff8:	dc04      	bgt.n	8013004 <__hexnan+0xa0>
 8012ffa:	462a      	mov	r2, r5
 8012ffc:	4649      	mov	r1, r9
 8012ffe:	4620      	mov	r0, r4
 8013000:	f7ff ff8a 	bl	8012f18 <L_shift>
 8013004:	4544      	cmp	r4, r8
 8013006:	d934      	bls.n	8013072 <__hexnan+0x10e>
 8013008:	f1a8 0204 	sub.w	r2, r8, #4
 801300c:	4623      	mov	r3, r4
 801300e:	f853 1b04 	ldr.w	r1, [r3], #4
 8013012:	f842 1f04 	str.w	r1, [r2, #4]!
 8013016:	429f      	cmp	r7, r3
 8013018:	d2f9      	bcs.n	801300e <__hexnan+0xaa>
 801301a:	1b3b      	subs	r3, r7, r4
 801301c:	f023 0303 	bic.w	r3, r3, #3
 8013020:	3304      	adds	r3, #4
 8013022:	3e03      	subs	r6, #3
 8013024:	3401      	adds	r4, #1
 8013026:	42a6      	cmp	r6, r4
 8013028:	bf38      	it	cc
 801302a:	2304      	movcc	r3, #4
 801302c:	4443      	add	r3, r8
 801302e:	2200      	movs	r2, #0
 8013030:	f843 2b04 	str.w	r2, [r3], #4
 8013034:	429f      	cmp	r7, r3
 8013036:	d2fb      	bcs.n	8013030 <__hexnan+0xcc>
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	b91b      	cbnz	r3, 8013044 <__hexnan+0xe0>
 801303c:	4547      	cmp	r7, r8
 801303e:	d126      	bne.n	801308e <__hexnan+0x12a>
 8013040:	2301      	movs	r3, #1
 8013042:	603b      	str	r3, [r7, #0]
 8013044:	2005      	movs	r0, #5
 8013046:	e025      	b.n	8013094 <__hexnan+0x130>
 8013048:	3501      	adds	r5, #1
 801304a:	2d08      	cmp	r5, #8
 801304c:	f10b 0b01 	add.w	fp, fp, #1
 8013050:	dd06      	ble.n	8013060 <__hexnan+0xfc>
 8013052:	4544      	cmp	r4, r8
 8013054:	d9c3      	bls.n	8012fde <__hexnan+0x7a>
 8013056:	2300      	movs	r3, #0
 8013058:	f844 3c04 	str.w	r3, [r4, #-4]
 801305c:	2501      	movs	r5, #1
 801305e:	3c04      	subs	r4, #4
 8013060:	6822      	ldr	r2, [r4, #0]
 8013062:	f000 000f 	and.w	r0, r0, #15
 8013066:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801306a:	6020      	str	r0, [r4, #0]
 801306c:	e7b7      	b.n	8012fde <__hexnan+0x7a>
 801306e:	2508      	movs	r5, #8
 8013070:	e7b5      	b.n	8012fde <__hexnan+0x7a>
 8013072:	9b01      	ldr	r3, [sp, #4]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d0df      	beq.n	8013038 <__hexnan+0xd4>
 8013078:	f1c3 0320 	rsb	r3, r3, #32
 801307c:	f04f 32ff 	mov.w	r2, #4294967295
 8013080:	40da      	lsrs	r2, r3
 8013082:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013086:	4013      	ands	r3, r2
 8013088:	f846 3c04 	str.w	r3, [r6, #-4]
 801308c:	e7d4      	b.n	8013038 <__hexnan+0xd4>
 801308e:	3f04      	subs	r7, #4
 8013090:	e7d2      	b.n	8013038 <__hexnan+0xd4>
 8013092:	2004      	movs	r0, #4
 8013094:	b007      	add	sp, #28
 8013096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801309a <__ascii_mbtowc>:
 801309a:	b082      	sub	sp, #8
 801309c:	b901      	cbnz	r1, 80130a0 <__ascii_mbtowc+0x6>
 801309e:	a901      	add	r1, sp, #4
 80130a0:	b142      	cbz	r2, 80130b4 <__ascii_mbtowc+0x1a>
 80130a2:	b14b      	cbz	r3, 80130b8 <__ascii_mbtowc+0x1e>
 80130a4:	7813      	ldrb	r3, [r2, #0]
 80130a6:	600b      	str	r3, [r1, #0]
 80130a8:	7812      	ldrb	r2, [r2, #0]
 80130aa:	1e10      	subs	r0, r2, #0
 80130ac:	bf18      	it	ne
 80130ae:	2001      	movne	r0, #1
 80130b0:	b002      	add	sp, #8
 80130b2:	4770      	bx	lr
 80130b4:	4610      	mov	r0, r2
 80130b6:	e7fb      	b.n	80130b0 <__ascii_mbtowc+0x16>
 80130b8:	f06f 0001 	mvn.w	r0, #1
 80130bc:	e7f8      	b.n	80130b0 <__ascii_mbtowc+0x16>
	...

080130c0 <_Balloc>:
 80130c0:	b570      	push	{r4, r5, r6, lr}
 80130c2:	69c6      	ldr	r6, [r0, #28]
 80130c4:	4604      	mov	r4, r0
 80130c6:	460d      	mov	r5, r1
 80130c8:	b976      	cbnz	r6, 80130e8 <_Balloc+0x28>
 80130ca:	2010      	movs	r0, #16
 80130cc:	f7fe fa6c 	bl	80115a8 <malloc>
 80130d0:	4602      	mov	r2, r0
 80130d2:	61e0      	str	r0, [r4, #28]
 80130d4:	b920      	cbnz	r0, 80130e0 <_Balloc+0x20>
 80130d6:	4b18      	ldr	r3, [pc, #96]	; (8013138 <_Balloc+0x78>)
 80130d8:	4818      	ldr	r0, [pc, #96]	; (801313c <_Balloc+0x7c>)
 80130da:	216b      	movs	r1, #107	; 0x6b
 80130dc:	f001 f85a 	bl	8014194 <__assert_func>
 80130e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80130e4:	6006      	str	r6, [r0, #0]
 80130e6:	60c6      	str	r6, [r0, #12]
 80130e8:	69e6      	ldr	r6, [r4, #28]
 80130ea:	68f3      	ldr	r3, [r6, #12]
 80130ec:	b183      	cbz	r3, 8013110 <_Balloc+0x50>
 80130ee:	69e3      	ldr	r3, [r4, #28]
 80130f0:	68db      	ldr	r3, [r3, #12]
 80130f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80130f6:	b9b8      	cbnz	r0, 8013128 <_Balloc+0x68>
 80130f8:	2101      	movs	r1, #1
 80130fa:	fa01 f605 	lsl.w	r6, r1, r5
 80130fe:	1d72      	adds	r2, r6, #5
 8013100:	0092      	lsls	r2, r2, #2
 8013102:	4620      	mov	r0, r4
 8013104:	f001 f864 	bl	80141d0 <_calloc_r>
 8013108:	b160      	cbz	r0, 8013124 <_Balloc+0x64>
 801310a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801310e:	e00e      	b.n	801312e <_Balloc+0x6e>
 8013110:	2221      	movs	r2, #33	; 0x21
 8013112:	2104      	movs	r1, #4
 8013114:	4620      	mov	r0, r4
 8013116:	f001 f85b 	bl	80141d0 <_calloc_r>
 801311a:	69e3      	ldr	r3, [r4, #28]
 801311c:	60f0      	str	r0, [r6, #12]
 801311e:	68db      	ldr	r3, [r3, #12]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d1e4      	bne.n	80130ee <_Balloc+0x2e>
 8013124:	2000      	movs	r0, #0
 8013126:	bd70      	pop	{r4, r5, r6, pc}
 8013128:	6802      	ldr	r2, [r0, #0]
 801312a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801312e:	2300      	movs	r3, #0
 8013130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013134:	e7f7      	b.n	8013126 <_Balloc+0x66>
 8013136:	bf00      	nop
 8013138:	080154ca 	.word	0x080154ca
 801313c:	080154e1 	.word	0x080154e1

08013140 <_Bfree>:
 8013140:	b570      	push	{r4, r5, r6, lr}
 8013142:	69c6      	ldr	r6, [r0, #28]
 8013144:	4605      	mov	r5, r0
 8013146:	460c      	mov	r4, r1
 8013148:	b976      	cbnz	r6, 8013168 <_Bfree+0x28>
 801314a:	2010      	movs	r0, #16
 801314c:	f7fe fa2c 	bl	80115a8 <malloc>
 8013150:	4602      	mov	r2, r0
 8013152:	61e8      	str	r0, [r5, #28]
 8013154:	b920      	cbnz	r0, 8013160 <_Bfree+0x20>
 8013156:	4b09      	ldr	r3, [pc, #36]	; (801317c <_Bfree+0x3c>)
 8013158:	4809      	ldr	r0, [pc, #36]	; (8013180 <_Bfree+0x40>)
 801315a:	218f      	movs	r1, #143	; 0x8f
 801315c:	f001 f81a 	bl	8014194 <__assert_func>
 8013160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013164:	6006      	str	r6, [r0, #0]
 8013166:	60c6      	str	r6, [r0, #12]
 8013168:	b13c      	cbz	r4, 801317a <_Bfree+0x3a>
 801316a:	69eb      	ldr	r3, [r5, #28]
 801316c:	6862      	ldr	r2, [r4, #4]
 801316e:	68db      	ldr	r3, [r3, #12]
 8013170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013174:	6021      	str	r1, [r4, #0]
 8013176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801317a:	bd70      	pop	{r4, r5, r6, pc}
 801317c:	080154ca 	.word	0x080154ca
 8013180:	080154e1 	.word	0x080154e1

08013184 <__multadd>:
 8013184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013188:	690d      	ldr	r5, [r1, #16]
 801318a:	4607      	mov	r7, r0
 801318c:	460c      	mov	r4, r1
 801318e:	461e      	mov	r6, r3
 8013190:	f101 0c14 	add.w	ip, r1, #20
 8013194:	2000      	movs	r0, #0
 8013196:	f8dc 3000 	ldr.w	r3, [ip]
 801319a:	b299      	uxth	r1, r3
 801319c:	fb02 6101 	mla	r1, r2, r1, r6
 80131a0:	0c1e      	lsrs	r6, r3, #16
 80131a2:	0c0b      	lsrs	r3, r1, #16
 80131a4:	fb02 3306 	mla	r3, r2, r6, r3
 80131a8:	b289      	uxth	r1, r1
 80131aa:	3001      	adds	r0, #1
 80131ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80131b0:	4285      	cmp	r5, r0
 80131b2:	f84c 1b04 	str.w	r1, [ip], #4
 80131b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80131ba:	dcec      	bgt.n	8013196 <__multadd+0x12>
 80131bc:	b30e      	cbz	r6, 8013202 <__multadd+0x7e>
 80131be:	68a3      	ldr	r3, [r4, #8]
 80131c0:	42ab      	cmp	r3, r5
 80131c2:	dc19      	bgt.n	80131f8 <__multadd+0x74>
 80131c4:	6861      	ldr	r1, [r4, #4]
 80131c6:	4638      	mov	r0, r7
 80131c8:	3101      	adds	r1, #1
 80131ca:	f7ff ff79 	bl	80130c0 <_Balloc>
 80131ce:	4680      	mov	r8, r0
 80131d0:	b928      	cbnz	r0, 80131de <__multadd+0x5a>
 80131d2:	4602      	mov	r2, r0
 80131d4:	4b0c      	ldr	r3, [pc, #48]	; (8013208 <__multadd+0x84>)
 80131d6:	480d      	ldr	r0, [pc, #52]	; (801320c <__multadd+0x88>)
 80131d8:	21ba      	movs	r1, #186	; 0xba
 80131da:	f000 ffdb 	bl	8014194 <__assert_func>
 80131de:	6922      	ldr	r2, [r4, #16]
 80131e0:	3202      	adds	r2, #2
 80131e2:	f104 010c 	add.w	r1, r4, #12
 80131e6:	0092      	lsls	r2, r2, #2
 80131e8:	300c      	adds	r0, #12
 80131ea:	f7ff fb96 	bl	801291a <memcpy>
 80131ee:	4621      	mov	r1, r4
 80131f0:	4638      	mov	r0, r7
 80131f2:	f7ff ffa5 	bl	8013140 <_Bfree>
 80131f6:	4644      	mov	r4, r8
 80131f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80131fc:	3501      	adds	r5, #1
 80131fe:	615e      	str	r6, [r3, #20]
 8013200:	6125      	str	r5, [r4, #16]
 8013202:	4620      	mov	r0, r4
 8013204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013208:	08015459 	.word	0x08015459
 801320c:	080154e1 	.word	0x080154e1

08013210 <__s2b>:
 8013210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013214:	460c      	mov	r4, r1
 8013216:	4615      	mov	r5, r2
 8013218:	461f      	mov	r7, r3
 801321a:	2209      	movs	r2, #9
 801321c:	3308      	adds	r3, #8
 801321e:	4606      	mov	r6, r0
 8013220:	fb93 f3f2 	sdiv	r3, r3, r2
 8013224:	2100      	movs	r1, #0
 8013226:	2201      	movs	r2, #1
 8013228:	429a      	cmp	r2, r3
 801322a:	db09      	blt.n	8013240 <__s2b+0x30>
 801322c:	4630      	mov	r0, r6
 801322e:	f7ff ff47 	bl	80130c0 <_Balloc>
 8013232:	b940      	cbnz	r0, 8013246 <__s2b+0x36>
 8013234:	4602      	mov	r2, r0
 8013236:	4b19      	ldr	r3, [pc, #100]	; (801329c <__s2b+0x8c>)
 8013238:	4819      	ldr	r0, [pc, #100]	; (80132a0 <__s2b+0x90>)
 801323a:	21d3      	movs	r1, #211	; 0xd3
 801323c:	f000 ffaa 	bl	8014194 <__assert_func>
 8013240:	0052      	lsls	r2, r2, #1
 8013242:	3101      	adds	r1, #1
 8013244:	e7f0      	b.n	8013228 <__s2b+0x18>
 8013246:	9b08      	ldr	r3, [sp, #32]
 8013248:	6143      	str	r3, [r0, #20]
 801324a:	2d09      	cmp	r5, #9
 801324c:	f04f 0301 	mov.w	r3, #1
 8013250:	6103      	str	r3, [r0, #16]
 8013252:	dd16      	ble.n	8013282 <__s2b+0x72>
 8013254:	f104 0909 	add.w	r9, r4, #9
 8013258:	46c8      	mov	r8, r9
 801325a:	442c      	add	r4, r5
 801325c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013260:	4601      	mov	r1, r0
 8013262:	3b30      	subs	r3, #48	; 0x30
 8013264:	220a      	movs	r2, #10
 8013266:	4630      	mov	r0, r6
 8013268:	f7ff ff8c 	bl	8013184 <__multadd>
 801326c:	45a0      	cmp	r8, r4
 801326e:	d1f5      	bne.n	801325c <__s2b+0x4c>
 8013270:	f1a5 0408 	sub.w	r4, r5, #8
 8013274:	444c      	add	r4, r9
 8013276:	1b2d      	subs	r5, r5, r4
 8013278:	1963      	adds	r3, r4, r5
 801327a:	42bb      	cmp	r3, r7
 801327c:	db04      	blt.n	8013288 <__s2b+0x78>
 801327e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013282:	340a      	adds	r4, #10
 8013284:	2509      	movs	r5, #9
 8013286:	e7f6      	b.n	8013276 <__s2b+0x66>
 8013288:	f814 3b01 	ldrb.w	r3, [r4], #1
 801328c:	4601      	mov	r1, r0
 801328e:	3b30      	subs	r3, #48	; 0x30
 8013290:	220a      	movs	r2, #10
 8013292:	4630      	mov	r0, r6
 8013294:	f7ff ff76 	bl	8013184 <__multadd>
 8013298:	e7ee      	b.n	8013278 <__s2b+0x68>
 801329a:	bf00      	nop
 801329c:	08015459 	.word	0x08015459
 80132a0:	080154e1 	.word	0x080154e1

080132a4 <__hi0bits>:
 80132a4:	0c03      	lsrs	r3, r0, #16
 80132a6:	041b      	lsls	r3, r3, #16
 80132a8:	b9d3      	cbnz	r3, 80132e0 <__hi0bits+0x3c>
 80132aa:	0400      	lsls	r0, r0, #16
 80132ac:	2310      	movs	r3, #16
 80132ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80132b2:	bf04      	itt	eq
 80132b4:	0200      	lsleq	r0, r0, #8
 80132b6:	3308      	addeq	r3, #8
 80132b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80132bc:	bf04      	itt	eq
 80132be:	0100      	lsleq	r0, r0, #4
 80132c0:	3304      	addeq	r3, #4
 80132c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80132c6:	bf04      	itt	eq
 80132c8:	0080      	lsleq	r0, r0, #2
 80132ca:	3302      	addeq	r3, #2
 80132cc:	2800      	cmp	r0, #0
 80132ce:	db05      	blt.n	80132dc <__hi0bits+0x38>
 80132d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80132d4:	f103 0301 	add.w	r3, r3, #1
 80132d8:	bf08      	it	eq
 80132da:	2320      	moveq	r3, #32
 80132dc:	4618      	mov	r0, r3
 80132de:	4770      	bx	lr
 80132e0:	2300      	movs	r3, #0
 80132e2:	e7e4      	b.n	80132ae <__hi0bits+0xa>

080132e4 <__lo0bits>:
 80132e4:	6803      	ldr	r3, [r0, #0]
 80132e6:	f013 0207 	ands.w	r2, r3, #7
 80132ea:	d00c      	beq.n	8013306 <__lo0bits+0x22>
 80132ec:	07d9      	lsls	r1, r3, #31
 80132ee:	d422      	bmi.n	8013336 <__lo0bits+0x52>
 80132f0:	079a      	lsls	r2, r3, #30
 80132f2:	bf49      	itett	mi
 80132f4:	085b      	lsrmi	r3, r3, #1
 80132f6:	089b      	lsrpl	r3, r3, #2
 80132f8:	6003      	strmi	r3, [r0, #0]
 80132fa:	2201      	movmi	r2, #1
 80132fc:	bf5c      	itt	pl
 80132fe:	6003      	strpl	r3, [r0, #0]
 8013300:	2202      	movpl	r2, #2
 8013302:	4610      	mov	r0, r2
 8013304:	4770      	bx	lr
 8013306:	b299      	uxth	r1, r3
 8013308:	b909      	cbnz	r1, 801330e <__lo0bits+0x2a>
 801330a:	0c1b      	lsrs	r3, r3, #16
 801330c:	2210      	movs	r2, #16
 801330e:	b2d9      	uxtb	r1, r3
 8013310:	b909      	cbnz	r1, 8013316 <__lo0bits+0x32>
 8013312:	3208      	adds	r2, #8
 8013314:	0a1b      	lsrs	r3, r3, #8
 8013316:	0719      	lsls	r1, r3, #28
 8013318:	bf04      	itt	eq
 801331a:	091b      	lsreq	r3, r3, #4
 801331c:	3204      	addeq	r2, #4
 801331e:	0799      	lsls	r1, r3, #30
 8013320:	bf04      	itt	eq
 8013322:	089b      	lsreq	r3, r3, #2
 8013324:	3202      	addeq	r2, #2
 8013326:	07d9      	lsls	r1, r3, #31
 8013328:	d403      	bmi.n	8013332 <__lo0bits+0x4e>
 801332a:	085b      	lsrs	r3, r3, #1
 801332c:	f102 0201 	add.w	r2, r2, #1
 8013330:	d003      	beq.n	801333a <__lo0bits+0x56>
 8013332:	6003      	str	r3, [r0, #0]
 8013334:	e7e5      	b.n	8013302 <__lo0bits+0x1e>
 8013336:	2200      	movs	r2, #0
 8013338:	e7e3      	b.n	8013302 <__lo0bits+0x1e>
 801333a:	2220      	movs	r2, #32
 801333c:	e7e1      	b.n	8013302 <__lo0bits+0x1e>
	...

08013340 <__i2b>:
 8013340:	b510      	push	{r4, lr}
 8013342:	460c      	mov	r4, r1
 8013344:	2101      	movs	r1, #1
 8013346:	f7ff febb 	bl	80130c0 <_Balloc>
 801334a:	4602      	mov	r2, r0
 801334c:	b928      	cbnz	r0, 801335a <__i2b+0x1a>
 801334e:	4b05      	ldr	r3, [pc, #20]	; (8013364 <__i2b+0x24>)
 8013350:	4805      	ldr	r0, [pc, #20]	; (8013368 <__i2b+0x28>)
 8013352:	f240 1145 	movw	r1, #325	; 0x145
 8013356:	f000 ff1d 	bl	8014194 <__assert_func>
 801335a:	2301      	movs	r3, #1
 801335c:	6144      	str	r4, [r0, #20]
 801335e:	6103      	str	r3, [r0, #16]
 8013360:	bd10      	pop	{r4, pc}
 8013362:	bf00      	nop
 8013364:	08015459 	.word	0x08015459
 8013368:	080154e1 	.word	0x080154e1

0801336c <__multiply>:
 801336c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013370:	4691      	mov	r9, r2
 8013372:	690a      	ldr	r2, [r1, #16]
 8013374:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013378:	429a      	cmp	r2, r3
 801337a:	bfb8      	it	lt
 801337c:	460b      	movlt	r3, r1
 801337e:	460c      	mov	r4, r1
 8013380:	bfbc      	itt	lt
 8013382:	464c      	movlt	r4, r9
 8013384:	4699      	movlt	r9, r3
 8013386:	6927      	ldr	r7, [r4, #16]
 8013388:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801338c:	68a3      	ldr	r3, [r4, #8]
 801338e:	6861      	ldr	r1, [r4, #4]
 8013390:	eb07 060a 	add.w	r6, r7, sl
 8013394:	42b3      	cmp	r3, r6
 8013396:	b085      	sub	sp, #20
 8013398:	bfb8      	it	lt
 801339a:	3101      	addlt	r1, #1
 801339c:	f7ff fe90 	bl	80130c0 <_Balloc>
 80133a0:	b930      	cbnz	r0, 80133b0 <__multiply+0x44>
 80133a2:	4602      	mov	r2, r0
 80133a4:	4b44      	ldr	r3, [pc, #272]	; (80134b8 <__multiply+0x14c>)
 80133a6:	4845      	ldr	r0, [pc, #276]	; (80134bc <__multiply+0x150>)
 80133a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80133ac:	f000 fef2 	bl	8014194 <__assert_func>
 80133b0:	f100 0514 	add.w	r5, r0, #20
 80133b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80133b8:	462b      	mov	r3, r5
 80133ba:	2200      	movs	r2, #0
 80133bc:	4543      	cmp	r3, r8
 80133be:	d321      	bcc.n	8013404 <__multiply+0x98>
 80133c0:	f104 0314 	add.w	r3, r4, #20
 80133c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80133c8:	f109 0314 	add.w	r3, r9, #20
 80133cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80133d0:	9202      	str	r2, [sp, #8]
 80133d2:	1b3a      	subs	r2, r7, r4
 80133d4:	3a15      	subs	r2, #21
 80133d6:	f022 0203 	bic.w	r2, r2, #3
 80133da:	3204      	adds	r2, #4
 80133dc:	f104 0115 	add.w	r1, r4, #21
 80133e0:	428f      	cmp	r7, r1
 80133e2:	bf38      	it	cc
 80133e4:	2204      	movcc	r2, #4
 80133e6:	9201      	str	r2, [sp, #4]
 80133e8:	9a02      	ldr	r2, [sp, #8]
 80133ea:	9303      	str	r3, [sp, #12]
 80133ec:	429a      	cmp	r2, r3
 80133ee:	d80c      	bhi.n	801340a <__multiply+0x9e>
 80133f0:	2e00      	cmp	r6, #0
 80133f2:	dd03      	ble.n	80133fc <__multiply+0x90>
 80133f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d05b      	beq.n	80134b4 <__multiply+0x148>
 80133fc:	6106      	str	r6, [r0, #16]
 80133fe:	b005      	add	sp, #20
 8013400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013404:	f843 2b04 	str.w	r2, [r3], #4
 8013408:	e7d8      	b.n	80133bc <__multiply+0x50>
 801340a:	f8b3 a000 	ldrh.w	sl, [r3]
 801340e:	f1ba 0f00 	cmp.w	sl, #0
 8013412:	d024      	beq.n	801345e <__multiply+0xf2>
 8013414:	f104 0e14 	add.w	lr, r4, #20
 8013418:	46a9      	mov	r9, r5
 801341a:	f04f 0c00 	mov.w	ip, #0
 801341e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013422:	f8d9 1000 	ldr.w	r1, [r9]
 8013426:	fa1f fb82 	uxth.w	fp, r2
 801342a:	b289      	uxth	r1, r1
 801342c:	fb0a 110b 	mla	r1, sl, fp, r1
 8013430:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013434:	f8d9 2000 	ldr.w	r2, [r9]
 8013438:	4461      	add	r1, ip
 801343a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801343e:	fb0a c20b 	mla	r2, sl, fp, ip
 8013442:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013446:	b289      	uxth	r1, r1
 8013448:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801344c:	4577      	cmp	r7, lr
 801344e:	f849 1b04 	str.w	r1, [r9], #4
 8013452:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013456:	d8e2      	bhi.n	801341e <__multiply+0xb2>
 8013458:	9a01      	ldr	r2, [sp, #4]
 801345a:	f845 c002 	str.w	ip, [r5, r2]
 801345e:	9a03      	ldr	r2, [sp, #12]
 8013460:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013464:	3304      	adds	r3, #4
 8013466:	f1b9 0f00 	cmp.w	r9, #0
 801346a:	d021      	beq.n	80134b0 <__multiply+0x144>
 801346c:	6829      	ldr	r1, [r5, #0]
 801346e:	f104 0c14 	add.w	ip, r4, #20
 8013472:	46ae      	mov	lr, r5
 8013474:	f04f 0a00 	mov.w	sl, #0
 8013478:	f8bc b000 	ldrh.w	fp, [ip]
 801347c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013480:	fb09 220b 	mla	r2, r9, fp, r2
 8013484:	4452      	add	r2, sl
 8013486:	b289      	uxth	r1, r1
 8013488:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801348c:	f84e 1b04 	str.w	r1, [lr], #4
 8013490:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013494:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013498:	f8be 1000 	ldrh.w	r1, [lr]
 801349c:	fb09 110a 	mla	r1, r9, sl, r1
 80134a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80134a4:	4567      	cmp	r7, ip
 80134a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80134aa:	d8e5      	bhi.n	8013478 <__multiply+0x10c>
 80134ac:	9a01      	ldr	r2, [sp, #4]
 80134ae:	50a9      	str	r1, [r5, r2]
 80134b0:	3504      	adds	r5, #4
 80134b2:	e799      	b.n	80133e8 <__multiply+0x7c>
 80134b4:	3e01      	subs	r6, #1
 80134b6:	e79b      	b.n	80133f0 <__multiply+0x84>
 80134b8:	08015459 	.word	0x08015459
 80134bc:	080154e1 	.word	0x080154e1

080134c0 <__pow5mult>:
 80134c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134c4:	4615      	mov	r5, r2
 80134c6:	f012 0203 	ands.w	r2, r2, #3
 80134ca:	4606      	mov	r6, r0
 80134cc:	460f      	mov	r7, r1
 80134ce:	d007      	beq.n	80134e0 <__pow5mult+0x20>
 80134d0:	4c25      	ldr	r4, [pc, #148]	; (8013568 <__pow5mult+0xa8>)
 80134d2:	3a01      	subs	r2, #1
 80134d4:	2300      	movs	r3, #0
 80134d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80134da:	f7ff fe53 	bl	8013184 <__multadd>
 80134de:	4607      	mov	r7, r0
 80134e0:	10ad      	asrs	r5, r5, #2
 80134e2:	d03d      	beq.n	8013560 <__pow5mult+0xa0>
 80134e4:	69f4      	ldr	r4, [r6, #28]
 80134e6:	b97c      	cbnz	r4, 8013508 <__pow5mult+0x48>
 80134e8:	2010      	movs	r0, #16
 80134ea:	f7fe f85d 	bl	80115a8 <malloc>
 80134ee:	4602      	mov	r2, r0
 80134f0:	61f0      	str	r0, [r6, #28]
 80134f2:	b928      	cbnz	r0, 8013500 <__pow5mult+0x40>
 80134f4:	4b1d      	ldr	r3, [pc, #116]	; (801356c <__pow5mult+0xac>)
 80134f6:	481e      	ldr	r0, [pc, #120]	; (8013570 <__pow5mult+0xb0>)
 80134f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80134fc:	f000 fe4a 	bl	8014194 <__assert_func>
 8013500:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013504:	6004      	str	r4, [r0, #0]
 8013506:	60c4      	str	r4, [r0, #12]
 8013508:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801350c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013510:	b94c      	cbnz	r4, 8013526 <__pow5mult+0x66>
 8013512:	f240 2171 	movw	r1, #625	; 0x271
 8013516:	4630      	mov	r0, r6
 8013518:	f7ff ff12 	bl	8013340 <__i2b>
 801351c:	2300      	movs	r3, #0
 801351e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013522:	4604      	mov	r4, r0
 8013524:	6003      	str	r3, [r0, #0]
 8013526:	f04f 0900 	mov.w	r9, #0
 801352a:	07eb      	lsls	r3, r5, #31
 801352c:	d50a      	bpl.n	8013544 <__pow5mult+0x84>
 801352e:	4639      	mov	r1, r7
 8013530:	4622      	mov	r2, r4
 8013532:	4630      	mov	r0, r6
 8013534:	f7ff ff1a 	bl	801336c <__multiply>
 8013538:	4639      	mov	r1, r7
 801353a:	4680      	mov	r8, r0
 801353c:	4630      	mov	r0, r6
 801353e:	f7ff fdff 	bl	8013140 <_Bfree>
 8013542:	4647      	mov	r7, r8
 8013544:	106d      	asrs	r5, r5, #1
 8013546:	d00b      	beq.n	8013560 <__pow5mult+0xa0>
 8013548:	6820      	ldr	r0, [r4, #0]
 801354a:	b938      	cbnz	r0, 801355c <__pow5mult+0x9c>
 801354c:	4622      	mov	r2, r4
 801354e:	4621      	mov	r1, r4
 8013550:	4630      	mov	r0, r6
 8013552:	f7ff ff0b 	bl	801336c <__multiply>
 8013556:	6020      	str	r0, [r4, #0]
 8013558:	f8c0 9000 	str.w	r9, [r0]
 801355c:	4604      	mov	r4, r0
 801355e:	e7e4      	b.n	801352a <__pow5mult+0x6a>
 8013560:	4638      	mov	r0, r7
 8013562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013566:	bf00      	nop
 8013568:	08015630 	.word	0x08015630
 801356c:	080154ca 	.word	0x080154ca
 8013570:	080154e1 	.word	0x080154e1

08013574 <__lshift>:
 8013574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013578:	460c      	mov	r4, r1
 801357a:	6849      	ldr	r1, [r1, #4]
 801357c:	6923      	ldr	r3, [r4, #16]
 801357e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013582:	68a3      	ldr	r3, [r4, #8]
 8013584:	4607      	mov	r7, r0
 8013586:	4691      	mov	r9, r2
 8013588:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801358c:	f108 0601 	add.w	r6, r8, #1
 8013590:	42b3      	cmp	r3, r6
 8013592:	db0b      	blt.n	80135ac <__lshift+0x38>
 8013594:	4638      	mov	r0, r7
 8013596:	f7ff fd93 	bl	80130c0 <_Balloc>
 801359a:	4605      	mov	r5, r0
 801359c:	b948      	cbnz	r0, 80135b2 <__lshift+0x3e>
 801359e:	4602      	mov	r2, r0
 80135a0:	4b28      	ldr	r3, [pc, #160]	; (8013644 <__lshift+0xd0>)
 80135a2:	4829      	ldr	r0, [pc, #164]	; (8013648 <__lshift+0xd4>)
 80135a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80135a8:	f000 fdf4 	bl	8014194 <__assert_func>
 80135ac:	3101      	adds	r1, #1
 80135ae:	005b      	lsls	r3, r3, #1
 80135b0:	e7ee      	b.n	8013590 <__lshift+0x1c>
 80135b2:	2300      	movs	r3, #0
 80135b4:	f100 0114 	add.w	r1, r0, #20
 80135b8:	f100 0210 	add.w	r2, r0, #16
 80135bc:	4618      	mov	r0, r3
 80135be:	4553      	cmp	r3, sl
 80135c0:	db33      	blt.n	801362a <__lshift+0xb6>
 80135c2:	6920      	ldr	r0, [r4, #16]
 80135c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80135c8:	f104 0314 	add.w	r3, r4, #20
 80135cc:	f019 091f 	ands.w	r9, r9, #31
 80135d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80135d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80135d8:	d02b      	beq.n	8013632 <__lshift+0xbe>
 80135da:	f1c9 0e20 	rsb	lr, r9, #32
 80135de:	468a      	mov	sl, r1
 80135e0:	2200      	movs	r2, #0
 80135e2:	6818      	ldr	r0, [r3, #0]
 80135e4:	fa00 f009 	lsl.w	r0, r0, r9
 80135e8:	4310      	orrs	r0, r2
 80135ea:	f84a 0b04 	str.w	r0, [sl], #4
 80135ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80135f2:	459c      	cmp	ip, r3
 80135f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80135f8:	d8f3      	bhi.n	80135e2 <__lshift+0x6e>
 80135fa:	ebac 0304 	sub.w	r3, ip, r4
 80135fe:	3b15      	subs	r3, #21
 8013600:	f023 0303 	bic.w	r3, r3, #3
 8013604:	3304      	adds	r3, #4
 8013606:	f104 0015 	add.w	r0, r4, #21
 801360a:	4584      	cmp	ip, r0
 801360c:	bf38      	it	cc
 801360e:	2304      	movcc	r3, #4
 8013610:	50ca      	str	r2, [r1, r3]
 8013612:	b10a      	cbz	r2, 8013618 <__lshift+0xa4>
 8013614:	f108 0602 	add.w	r6, r8, #2
 8013618:	3e01      	subs	r6, #1
 801361a:	4638      	mov	r0, r7
 801361c:	612e      	str	r6, [r5, #16]
 801361e:	4621      	mov	r1, r4
 8013620:	f7ff fd8e 	bl	8013140 <_Bfree>
 8013624:	4628      	mov	r0, r5
 8013626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801362a:	f842 0f04 	str.w	r0, [r2, #4]!
 801362e:	3301      	adds	r3, #1
 8013630:	e7c5      	b.n	80135be <__lshift+0x4a>
 8013632:	3904      	subs	r1, #4
 8013634:	f853 2b04 	ldr.w	r2, [r3], #4
 8013638:	f841 2f04 	str.w	r2, [r1, #4]!
 801363c:	459c      	cmp	ip, r3
 801363e:	d8f9      	bhi.n	8013634 <__lshift+0xc0>
 8013640:	e7ea      	b.n	8013618 <__lshift+0xa4>
 8013642:	bf00      	nop
 8013644:	08015459 	.word	0x08015459
 8013648:	080154e1 	.word	0x080154e1

0801364c <__mcmp>:
 801364c:	b530      	push	{r4, r5, lr}
 801364e:	6902      	ldr	r2, [r0, #16]
 8013650:	690c      	ldr	r4, [r1, #16]
 8013652:	1b12      	subs	r2, r2, r4
 8013654:	d10e      	bne.n	8013674 <__mcmp+0x28>
 8013656:	f100 0314 	add.w	r3, r0, #20
 801365a:	3114      	adds	r1, #20
 801365c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013660:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013664:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013668:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801366c:	42a5      	cmp	r5, r4
 801366e:	d003      	beq.n	8013678 <__mcmp+0x2c>
 8013670:	d305      	bcc.n	801367e <__mcmp+0x32>
 8013672:	2201      	movs	r2, #1
 8013674:	4610      	mov	r0, r2
 8013676:	bd30      	pop	{r4, r5, pc}
 8013678:	4283      	cmp	r3, r0
 801367a:	d3f3      	bcc.n	8013664 <__mcmp+0x18>
 801367c:	e7fa      	b.n	8013674 <__mcmp+0x28>
 801367e:	f04f 32ff 	mov.w	r2, #4294967295
 8013682:	e7f7      	b.n	8013674 <__mcmp+0x28>

08013684 <__mdiff>:
 8013684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013688:	460c      	mov	r4, r1
 801368a:	4606      	mov	r6, r0
 801368c:	4611      	mov	r1, r2
 801368e:	4620      	mov	r0, r4
 8013690:	4690      	mov	r8, r2
 8013692:	f7ff ffdb 	bl	801364c <__mcmp>
 8013696:	1e05      	subs	r5, r0, #0
 8013698:	d110      	bne.n	80136bc <__mdiff+0x38>
 801369a:	4629      	mov	r1, r5
 801369c:	4630      	mov	r0, r6
 801369e:	f7ff fd0f 	bl	80130c0 <_Balloc>
 80136a2:	b930      	cbnz	r0, 80136b2 <__mdiff+0x2e>
 80136a4:	4b3a      	ldr	r3, [pc, #232]	; (8013790 <__mdiff+0x10c>)
 80136a6:	4602      	mov	r2, r0
 80136a8:	f240 2137 	movw	r1, #567	; 0x237
 80136ac:	4839      	ldr	r0, [pc, #228]	; (8013794 <__mdiff+0x110>)
 80136ae:	f000 fd71 	bl	8014194 <__assert_func>
 80136b2:	2301      	movs	r3, #1
 80136b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80136b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136bc:	bfa4      	itt	ge
 80136be:	4643      	movge	r3, r8
 80136c0:	46a0      	movge	r8, r4
 80136c2:	4630      	mov	r0, r6
 80136c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80136c8:	bfa6      	itte	ge
 80136ca:	461c      	movge	r4, r3
 80136cc:	2500      	movge	r5, #0
 80136ce:	2501      	movlt	r5, #1
 80136d0:	f7ff fcf6 	bl	80130c0 <_Balloc>
 80136d4:	b920      	cbnz	r0, 80136e0 <__mdiff+0x5c>
 80136d6:	4b2e      	ldr	r3, [pc, #184]	; (8013790 <__mdiff+0x10c>)
 80136d8:	4602      	mov	r2, r0
 80136da:	f240 2145 	movw	r1, #581	; 0x245
 80136de:	e7e5      	b.n	80136ac <__mdiff+0x28>
 80136e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80136e4:	6926      	ldr	r6, [r4, #16]
 80136e6:	60c5      	str	r5, [r0, #12]
 80136e8:	f104 0914 	add.w	r9, r4, #20
 80136ec:	f108 0514 	add.w	r5, r8, #20
 80136f0:	f100 0e14 	add.w	lr, r0, #20
 80136f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80136f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80136fc:	f108 0210 	add.w	r2, r8, #16
 8013700:	46f2      	mov	sl, lr
 8013702:	2100      	movs	r1, #0
 8013704:	f859 3b04 	ldr.w	r3, [r9], #4
 8013708:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801370c:	fa11 f88b 	uxtah	r8, r1, fp
 8013710:	b299      	uxth	r1, r3
 8013712:	0c1b      	lsrs	r3, r3, #16
 8013714:	eba8 0801 	sub.w	r8, r8, r1
 8013718:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801371c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013720:	fa1f f888 	uxth.w	r8, r8
 8013724:	1419      	asrs	r1, r3, #16
 8013726:	454e      	cmp	r6, r9
 8013728:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801372c:	f84a 3b04 	str.w	r3, [sl], #4
 8013730:	d8e8      	bhi.n	8013704 <__mdiff+0x80>
 8013732:	1b33      	subs	r3, r6, r4
 8013734:	3b15      	subs	r3, #21
 8013736:	f023 0303 	bic.w	r3, r3, #3
 801373a:	3304      	adds	r3, #4
 801373c:	3415      	adds	r4, #21
 801373e:	42a6      	cmp	r6, r4
 8013740:	bf38      	it	cc
 8013742:	2304      	movcc	r3, #4
 8013744:	441d      	add	r5, r3
 8013746:	4473      	add	r3, lr
 8013748:	469e      	mov	lr, r3
 801374a:	462e      	mov	r6, r5
 801374c:	4566      	cmp	r6, ip
 801374e:	d30e      	bcc.n	801376e <__mdiff+0xea>
 8013750:	f10c 0203 	add.w	r2, ip, #3
 8013754:	1b52      	subs	r2, r2, r5
 8013756:	f022 0203 	bic.w	r2, r2, #3
 801375a:	3d03      	subs	r5, #3
 801375c:	45ac      	cmp	ip, r5
 801375e:	bf38      	it	cc
 8013760:	2200      	movcc	r2, #0
 8013762:	4413      	add	r3, r2
 8013764:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013768:	b17a      	cbz	r2, 801378a <__mdiff+0x106>
 801376a:	6107      	str	r7, [r0, #16]
 801376c:	e7a4      	b.n	80136b8 <__mdiff+0x34>
 801376e:	f856 8b04 	ldr.w	r8, [r6], #4
 8013772:	fa11 f288 	uxtah	r2, r1, r8
 8013776:	1414      	asrs	r4, r2, #16
 8013778:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801377c:	b292      	uxth	r2, r2
 801377e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013782:	f84e 2b04 	str.w	r2, [lr], #4
 8013786:	1421      	asrs	r1, r4, #16
 8013788:	e7e0      	b.n	801374c <__mdiff+0xc8>
 801378a:	3f01      	subs	r7, #1
 801378c:	e7ea      	b.n	8013764 <__mdiff+0xe0>
 801378e:	bf00      	nop
 8013790:	08015459 	.word	0x08015459
 8013794:	080154e1 	.word	0x080154e1

08013798 <__ulp>:
 8013798:	b082      	sub	sp, #8
 801379a:	ed8d 0b00 	vstr	d0, [sp]
 801379e:	9a01      	ldr	r2, [sp, #4]
 80137a0:	4b0f      	ldr	r3, [pc, #60]	; (80137e0 <__ulp+0x48>)
 80137a2:	4013      	ands	r3, r2
 80137a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	dc08      	bgt.n	80137be <__ulp+0x26>
 80137ac:	425b      	negs	r3, r3
 80137ae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80137b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80137b6:	da04      	bge.n	80137c2 <__ulp+0x2a>
 80137b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80137bc:	4113      	asrs	r3, r2
 80137be:	2200      	movs	r2, #0
 80137c0:	e008      	b.n	80137d4 <__ulp+0x3c>
 80137c2:	f1a2 0314 	sub.w	r3, r2, #20
 80137c6:	2b1e      	cmp	r3, #30
 80137c8:	bfda      	itte	le
 80137ca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80137ce:	40da      	lsrle	r2, r3
 80137d0:	2201      	movgt	r2, #1
 80137d2:	2300      	movs	r3, #0
 80137d4:	4619      	mov	r1, r3
 80137d6:	4610      	mov	r0, r2
 80137d8:	ec41 0b10 	vmov	d0, r0, r1
 80137dc:	b002      	add	sp, #8
 80137de:	4770      	bx	lr
 80137e0:	7ff00000 	.word	0x7ff00000

080137e4 <__b2d>:
 80137e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137e8:	6906      	ldr	r6, [r0, #16]
 80137ea:	f100 0814 	add.w	r8, r0, #20
 80137ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80137f2:	1f37      	subs	r7, r6, #4
 80137f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80137f8:	4610      	mov	r0, r2
 80137fa:	f7ff fd53 	bl	80132a4 <__hi0bits>
 80137fe:	f1c0 0320 	rsb	r3, r0, #32
 8013802:	280a      	cmp	r0, #10
 8013804:	600b      	str	r3, [r1, #0]
 8013806:	491b      	ldr	r1, [pc, #108]	; (8013874 <__b2d+0x90>)
 8013808:	dc15      	bgt.n	8013836 <__b2d+0x52>
 801380a:	f1c0 0c0b 	rsb	ip, r0, #11
 801380e:	fa22 f30c 	lsr.w	r3, r2, ip
 8013812:	45b8      	cmp	r8, r7
 8013814:	ea43 0501 	orr.w	r5, r3, r1
 8013818:	bf34      	ite	cc
 801381a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801381e:	2300      	movcs	r3, #0
 8013820:	3015      	adds	r0, #21
 8013822:	fa02 f000 	lsl.w	r0, r2, r0
 8013826:	fa23 f30c 	lsr.w	r3, r3, ip
 801382a:	4303      	orrs	r3, r0
 801382c:	461c      	mov	r4, r3
 801382e:	ec45 4b10 	vmov	d0, r4, r5
 8013832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013836:	45b8      	cmp	r8, r7
 8013838:	bf3a      	itte	cc
 801383a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801383e:	f1a6 0708 	subcc.w	r7, r6, #8
 8013842:	2300      	movcs	r3, #0
 8013844:	380b      	subs	r0, #11
 8013846:	d012      	beq.n	801386e <__b2d+0x8a>
 8013848:	f1c0 0120 	rsb	r1, r0, #32
 801384c:	fa23 f401 	lsr.w	r4, r3, r1
 8013850:	4082      	lsls	r2, r0
 8013852:	4322      	orrs	r2, r4
 8013854:	4547      	cmp	r7, r8
 8013856:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801385a:	bf8c      	ite	hi
 801385c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013860:	2200      	movls	r2, #0
 8013862:	4083      	lsls	r3, r0
 8013864:	40ca      	lsrs	r2, r1
 8013866:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801386a:	4313      	orrs	r3, r2
 801386c:	e7de      	b.n	801382c <__b2d+0x48>
 801386e:	ea42 0501 	orr.w	r5, r2, r1
 8013872:	e7db      	b.n	801382c <__b2d+0x48>
 8013874:	3ff00000 	.word	0x3ff00000

08013878 <__d2b>:
 8013878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801387c:	460f      	mov	r7, r1
 801387e:	2101      	movs	r1, #1
 8013880:	ec59 8b10 	vmov	r8, r9, d0
 8013884:	4616      	mov	r6, r2
 8013886:	f7ff fc1b 	bl	80130c0 <_Balloc>
 801388a:	4604      	mov	r4, r0
 801388c:	b930      	cbnz	r0, 801389c <__d2b+0x24>
 801388e:	4602      	mov	r2, r0
 8013890:	4b24      	ldr	r3, [pc, #144]	; (8013924 <__d2b+0xac>)
 8013892:	4825      	ldr	r0, [pc, #148]	; (8013928 <__d2b+0xb0>)
 8013894:	f240 310f 	movw	r1, #783	; 0x30f
 8013898:	f000 fc7c 	bl	8014194 <__assert_func>
 801389c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80138a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80138a4:	bb2d      	cbnz	r5, 80138f2 <__d2b+0x7a>
 80138a6:	9301      	str	r3, [sp, #4]
 80138a8:	f1b8 0300 	subs.w	r3, r8, #0
 80138ac:	d026      	beq.n	80138fc <__d2b+0x84>
 80138ae:	4668      	mov	r0, sp
 80138b0:	9300      	str	r3, [sp, #0]
 80138b2:	f7ff fd17 	bl	80132e4 <__lo0bits>
 80138b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80138ba:	b1e8      	cbz	r0, 80138f8 <__d2b+0x80>
 80138bc:	f1c0 0320 	rsb	r3, r0, #32
 80138c0:	fa02 f303 	lsl.w	r3, r2, r3
 80138c4:	430b      	orrs	r3, r1
 80138c6:	40c2      	lsrs	r2, r0
 80138c8:	6163      	str	r3, [r4, #20]
 80138ca:	9201      	str	r2, [sp, #4]
 80138cc:	9b01      	ldr	r3, [sp, #4]
 80138ce:	61a3      	str	r3, [r4, #24]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	bf14      	ite	ne
 80138d4:	2202      	movne	r2, #2
 80138d6:	2201      	moveq	r2, #1
 80138d8:	6122      	str	r2, [r4, #16]
 80138da:	b1bd      	cbz	r5, 801390c <__d2b+0x94>
 80138dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80138e0:	4405      	add	r5, r0
 80138e2:	603d      	str	r5, [r7, #0]
 80138e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80138e8:	6030      	str	r0, [r6, #0]
 80138ea:	4620      	mov	r0, r4
 80138ec:	b003      	add	sp, #12
 80138ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80138f6:	e7d6      	b.n	80138a6 <__d2b+0x2e>
 80138f8:	6161      	str	r1, [r4, #20]
 80138fa:	e7e7      	b.n	80138cc <__d2b+0x54>
 80138fc:	a801      	add	r0, sp, #4
 80138fe:	f7ff fcf1 	bl	80132e4 <__lo0bits>
 8013902:	9b01      	ldr	r3, [sp, #4]
 8013904:	6163      	str	r3, [r4, #20]
 8013906:	3020      	adds	r0, #32
 8013908:	2201      	movs	r2, #1
 801390a:	e7e5      	b.n	80138d8 <__d2b+0x60>
 801390c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013910:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013914:	6038      	str	r0, [r7, #0]
 8013916:	6918      	ldr	r0, [r3, #16]
 8013918:	f7ff fcc4 	bl	80132a4 <__hi0bits>
 801391c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013920:	e7e2      	b.n	80138e8 <__d2b+0x70>
 8013922:	bf00      	nop
 8013924:	08015459 	.word	0x08015459
 8013928:	080154e1 	.word	0x080154e1

0801392c <__ratio>:
 801392c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013930:	4688      	mov	r8, r1
 8013932:	4669      	mov	r1, sp
 8013934:	4681      	mov	r9, r0
 8013936:	f7ff ff55 	bl	80137e4 <__b2d>
 801393a:	a901      	add	r1, sp, #4
 801393c:	4640      	mov	r0, r8
 801393e:	ec55 4b10 	vmov	r4, r5, d0
 8013942:	f7ff ff4f 	bl	80137e4 <__b2d>
 8013946:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801394a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801394e:	eba3 0c02 	sub.w	ip, r3, r2
 8013952:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013956:	1a9b      	subs	r3, r3, r2
 8013958:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801395c:	ec51 0b10 	vmov	r0, r1, d0
 8013960:	2b00      	cmp	r3, #0
 8013962:	bfd6      	itet	le
 8013964:	460a      	movle	r2, r1
 8013966:	462a      	movgt	r2, r5
 8013968:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801396c:	468b      	mov	fp, r1
 801396e:	462f      	mov	r7, r5
 8013970:	bfd4      	ite	le
 8013972:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013976:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801397a:	4620      	mov	r0, r4
 801397c:	ee10 2a10 	vmov	r2, s0
 8013980:	465b      	mov	r3, fp
 8013982:	4639      	mov	r1, r7
 8013984:	f7ec ff72 	bl	800086c <__aeabi_ddiv>
 8013988:	ec41 0b10 	vmov	d0, r0, r1
 801398c:	b003      	add	sp, #12
 801398e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013992 <__copybits>:
 8013992:	3901      	subs	r1, #1
 8013994:	b570      	push	{r4, r5, r6, lr}
 8013996:	1149      	asrs	r1, r1, #5
 8013998:	6914      	ldr	r4, [r2, #16]
 801399a:	3101      	adds	r1, #1
 801399c:	f102 0314 	add.w	r3, r2, #20
 80139a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80139a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80139a8:	1f05      	subs	r5, r0, #4
 80139aa:	42a3      	cmp	r3, r4
 80139ac:	d30c      	bcc.n	80139c8 <__copybits+0x36>
 80139ae:	1aa3      	subs	r3, r4, r2
 80139b0:	3b11      	subs	r3, #17
 80139b2:	f023 0303 	bic.w	r3, r3, #3
 80139b6:	3211      	adds	r2, #17
 80139b8:	42a2      	cmp	r2, r4
 80139ba:	bf88      	it	hi
 80139bc:	2300      	movhi	r3, #0
 80139be:	4418      	add	r0, r3
 80139c0:	2300      	movs	r3, #0
 80139c2:	4288      	cmp	r0, r1
 80139c4:	d305      	bcc.n	80139d2 <__copybits+0x40>
 80139c6:	bd70      	pop	{r4, r5, r6, pc}
 80139c8:	f853 6b04 	ldr.w	r6, [r3], #4
 80139cc:	f845 6f04 	str.w	r6, [r5, #4]!
 80139d0:	e7eb      	b.n	80139aa <__copybits+0x18>
 80139d2:	f840 3b04 	str.w	r3, [r0], #4
 80139d6:	e7f4      	b.n	80139c2 <__copybits+0x30>

080139d8 <__any_on>:
 80139d8:	f100 0214 	add.w	r2, r0, #20
 80139dc:	6900      	ldr	r0, [r0, #16]
 80139de:	114b      	asrs	r3, r1, #5
 80139e0:	4298      	cmp	r0, r3
 80139e2:	b510      	push	{r4, lr}
 80139e4:	db11      	blt.n	8013a0a <__any_on+0x32>
 80139e6:	dd0a      	ble.n	80139fe <__any_on+0x26>
 80139e8:	f011 011f 	ands.w	r1, r1, #31
 80139ec:	d007      	beq.n	80139fe <__any_on+0x26>
 80139ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80139f2:	fa24 f001 	lsr.w	r0, r4, r1
 80139f6:	fa00 f101 	lsl.w	r1, r0, r1
 80139fa:	428c      	cmp	r4, r1
 80139fc:	d10b      	bne.n	8013a16 <__any_on+0x3e>
 80139fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013a02:	4293      	cmp	r3, r2
 8013a04:	d803      	bhi.n	8013a0e <__any_on+0x36>
 8013a06:	2000      	movs	r0, #0
 8013a08:	bd10      	pop	{r4, pc}
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	e7f7      	b.n	80139fe <__any_on+0x26>
 8013a0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013a12:	2900      	cmp	r1, #0
 8013a14:	d0f5      	beq.n	8013a02 <__any_on+0x2a>
 8013a16:	2001      	movs	r0, #1
 8013a18:	e7f6      	b.n	8013a08 <__any_on+0x30>

08013a1a <__ascii_wctomb>:
 8013a1a:	b149      	cbz	r1, 8013a30 <__ascii_wctomb+0x16>
 8013a1c:	2aff      	cmp	r2, #255	; 0xff
 8013a1e:	bf85      	ittet	hi
 8013a20:	238a      	movhi	r3, #138	; 0x8a
 8013a22:	6003      	strhi	r3, [r0, #0]
 8013a24:	700a      	strbls	r2, [r1, #0]
 8013a26:	f04f 30ff 	movhi.w	r0, #4294967295
 8013a2a:	bf98      	it	ls
 8013a2c:	2001      	movls	r0, #1
 8013a2e:	4770      	bx	lr
 8013a30:	4608      	mov	r0, r1
 8013a32:	4770      	bx	lr

08013a34 <__ssputs_r>:
 8013a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a38:	688e      	ldr	r6, [r1, #8]
 8013a3a:	461f      	mov	r7, r3
 8013a3c:	42be      	cmp	r6, r7
 8013a3e:	680b      	ldr	r3, [r1, #0]
 8013a40:	4682      	mov	sl, r0
 8013a42:	460c      	mov	r4, r1
 8013a44:	4690      	mov	r8, r2
 8013a46:	d82c      	bhi.n	8013aa2 <__ssputs_r+0x6e>
 8013a48:	898a      	ldrh	r2, [r1, #12]
 8013a4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013a4e:	d026      	beq.n	8013a9e <__ssputs_r+0x6a>
 8013a50:	6965      	ldr	r5, [r4, #20]
 8013a52:	6909      	ldr	r1, [r1, #16]
 8013a54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a58:	eba3 0901 	sub.w	r9, r3, r1
 8013a5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013a60:	1c7b      	adds	r3, r7, #1
 8013a62:	444b      	add	r3, r9
 8013a64:	106d      	asrs	r5, r5, #1
 8013a66:	429d      	cmp	r5, r3
 8013a68:	bf38      	it	cc
 8013a6a:	461d      	movcc	r5, r3
 8013a6c:	0553      	lsls	r3, r2, #21
 8013a6e:	d527      	bpl.n	8013ac0 <__ssputs_r+0x8c>
 8013a70:	4629      	mov	r1, r5
 8013a72:	f7fd fdc9 	bl	8011608 <_malloc_r>
 8013a76:	4606      	mov	r6, r0
 8013a78:	b360      	cbz	r0, 8013ad4 <__ssputs_r+0xa0>
 8013a7a:	6921      	ldr	r1, [r4, #16]
 8013a7c:	464a      	mov	r2, r9
 8013a7e:	f7fe ff4c 	bl	801291a <memcpy>
 8013a82:	89a3      	ldrh	r3, [r4, #12]
 8013a84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a8c:	81a3      	strh	r3, [r4, #12]
 8013a8e:	6126      	str	r6, [r4, #16]
 8013a90:	6165      	str	r5, [r4, #20]
 8013a92:	444e      	add	r6, r9
 8013a94:	eba5 0509 	sub.w	r5, r5, r9
 8013a98:	6026      	str	r6, [r4, #0]
 8013a9a:	60a5      	str	r5, [r4, #8]
 8013a9c:	463e      	mov	r6, r7
 8013a9e:	42be      	cmp	r6, r7
 8013aa0:	d900      	bls.n	8013aa4 <__ssputs_r+0x70>
 8013aa2:	463e      	mov	r6, r7
 8013aa4:	6820      	ldr	r0, [r4, #0]
 8013aa6:	4632      	mov	r2, r6
 8013aa8:	4641      	mov	r1, r8
 8013aaa:	f000 fb59 	bl	8014160 <memmove>
 8013aae:	68a3      	ldr	r3, [r4, #8]
 8013ab0:	1b9b      	subs	r3, r3, r6
 8013ab2:	60a3      	str	r3, [r4, #8]
 8013ab4:	6823      	ldr	r3, [r4, #0]
 8013ab6:	4433      	add	r3, r6
 8013ab8:	6023      	str	r3, [r4, #0]
 8013aba:	2000      	movs	r0, #0
 8013abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ac0:	462a      	mov	r2, r5
 8013ac2:	f000 fb9b 	bl	80141fc <_realloc_r>
 8013ac6:	4606      	mov	r6, r0
 8013ac8:	2800      	cmp	r0, #0
 8013aca:	d1e0      	bne.n	8013a8e <__ssputs_r+0x5a>
 8013acc:	6921      	ldr	r1, [r4, #16]
 8013ace:	4650      	mov	r0, sl
 8013ad0:	f7fe ff40 	bl	8012954 <_free_r>
 8013ad4:	230c      	movs	r3, #12
 8013ad6:	f8ca 3000 	str.w	r3, [sl]
 8013ada:	89a3      	ldrh	r3, [r4, #12]
 8013adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ae0:	81a3      	strh	r3, [r4, #12]
 8013ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ae6:	e7e9      	b.n	8013abc <__ssputs_r+0x88>

08013ae8 <_svfiprintf_r>:
 8013ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aec:	4698      	mov	r8, r3
 8013aee:	898b      	ldrh	r3, [r1, #12]
 8013af0:	061b      	lsls	r3, r3, #24
 8013af2:	b09d      	sub	sp, #116	; 0x74
 8013af4:	4607      	mov	r7, r0
 8013af6:	460d      	mov	r5, r1
 8013af8:	4614      	mov	r4, r2
 8013afa:	d50e      	bpl.n	8013b1a <_svfiprintf_r+0x32>
 8013afc:	690b      	ldr	r3, [r1, #16]
 8013afe:	b963      	cbnz	r3, 8013b1a <_svfiprintf_r+0x32>
 8013b00:	2140      	movs	r1, #64	; 0x40
 8013b02:	f7fd fd81 	bl	8011608 <_malloc_r>
 8013b06:	6028      	str	r0, [r5, #0]
 8013b08:	6128      	str	r0, [r5, #16]
 8013b0a:	b920      	cbnz	r0, 8013b16 <_svfiprintf_r+0x2e>
 8013b0c:	230c      	movs	r3, #12
 8013b0e:	603b      	str	r3, [r7, #0]
 8013b10:	f04f 30ff 	mov.w	r0, #4294967295
 8013b14:	e0d0      	b.n	8013cb8 <_svfiprintf_r+0x1d0>
 8013b16:	2340      	movs	r3, #64	; 0x40
 8013b18:	616b      	str	r3, [r5, #20]
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8013b1e:	2320      	movs	r3, #32
 8013b20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b24:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b28:	2330      	movs	r3, #48	; 0x30
 8013b2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013cd0 <_svfiprintf_r+0x1e8>
 8013b2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b32:	f04f 0901 	mov.w	r9, #1
 8013b36:	4623      	mov	r3, r4
 8013b38:	469a      	mov	sl, r3
 8013b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b3e:	b10a      	cbz	r2, 8013b44 <_svfiprintf_r+0x5c>
 8013b40:	2a25      	cmp	r2, #37	; 0x25
 8013b42:	d1f9      	bne.n	8013b38 <_svfiprintf_r+0x50>
 8013b44:	ebba 0b04 	subs.w	fp, sl, r4
 8013b48:	d00b      	beq.n	8013b62 <_svfiprintf_r+0x7a>
 8013b4a:	465b      	mov	r3, fp
 8013b4c:	4622      	mov	r2, r4
 8013b4e:	4629      	mov	r1, r5
 8013b50:	4638      	mov	r0, r7
 8013b52:	f7ff ff6f 	bl	8013a34 <__ssputs_r>
 8013b56:	3001      	adds	r0, #1
 8013b58:	f000 80a9 	beq.w	8013cae <_svfiprintf_r+0x1c6>
 8013b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b5e:	445a      	add	r2, fp
 8013b60:	9209      	str	r2, [sp, #36]	; 0x24
 8013b62:	f89a 3000 	ldrb.w	r3, [sl]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	f000 80a1 	beq.w	8013cae <_svfiprintf_r+0x1c6>
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8013b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b76:	f10a 0a01 	add.w	sl, sl, #1
 8013b7a:	9304      	str	r3, [sp, #16]
 8013b7c:	9307      	str	r3, [sp, #28]
 8013b7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b82:	931a      	str	r3, [sp, #104]	; 0x68
 8013b84:	4654      	mov	r4, sl
 8013b86:	2205      	movs	r2, #5
 8013b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b8c:	4850      	ldr	r0, [pc, #320]	; (8013cd0 <_svfiprintf_r+0x1e8>)
 8013b8e:	f7ec fb37 	bl	8000200 <memchr>
 8013b92:	9a04      	ldr	r2, [sp, #16]
 8013b94:	b9d8      	cbnz	r0, 8013bce <_svfiprintf_r+0xe6>
 8013b96:	06d0      	lsls	r0, r2, #27
 8013b98:	bf44      	itt	mi
 8013b9a:	2320      	movmi	r3, #32
 8013b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ba0:	0711      	lsls	r1, r2, #28
 8013ba2:	bf44      	itt	mi
 8013ba4:	232b      	movmi	r3, #43	; 0x2b
 8013ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013baa:	f89a 3000 	ldrb.w	r3, [sl]
 8013bae:	2b2a      	cmp	r3, #42	; 0x2a
 8013bb0:	d015      	beq.n	8013bde <_svfiprintf_r+0xf6>
 8013bb2:	9a07      	ldr	r2, [sp, #28]
 8013bb4:	4654      	mov	r4, sl
 8013bb6:	2000      	movs	r0, #0
 8013bb8:	f04f 0c0a 	mov.w	ip, #10
 8013bbc:	4621      	mov	r1, r4
 8013bbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013bc2:	3b30      	subs	r3, #48	; 0x30
 8013bc4:	2b09      	cmp	r3, #9
 8013bc6:	d94d      	bls.n	8013c64 <_svfiprintf_r+0x17c>
 8013bc8:	b1b0      	cbz	r0, 8013bf8 <_svfiprintf_r+0x110>
 8013bca:	9207      	str	r2, [sp, #28]
 8013bcc:	e014      	b.n	8013bf8 <_svfiprintf_r+0x110>
 8013bce:	eba0 0308 	sub.w	r3, r0, r8
 8013bd2:	fa09 f303 	lsl.w	r3, r9, r3
 8013bd6:	4313      	orrs	r3, r2
 8013bd8:	9304      	str	r3, [sp, #16]
 8013bda:	46a2      	mov	sl, r4
 8013bdc:	e7d2      	b.n	8013b84 <_svfiprintf_r+0x9c>
 8013bde:	9b03      	ldr	r3, [sp, #12]
 8013be0:	1d19      	adds	r1, r3, #4
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	9103      	str	r1, [sp, #12]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	bfbb      	ittet	lt
 8013bea:	425b      	neglt	r3, r3
 8013bec:	f042 0202 	orrlt.w	r2, r2, #2
 8013bf0:	9307      	strge	r3, [sp, #28]
 8013bf2:	9307      	strlt	r3, [sp, #28]
 8013bf4:	bfb8      	it	lt
 8013bf6:	9204      	strlt	r2, [sp, #16]
 8013bf8:	7823      	ldrb	r3, [r4, #0]
 8013bfa:	2b2e      	cmp	r3, #46	; 0x2e
 8013bfc:	d10c      	bne.n	8013c18 <_svfiprintf_r+0x130>
 8013bfe:	7863      	ldrb	r3, [r4, #1]
 8013c00:	2b2a      	cmp	r3, #42	; 0x2a
 8013c02:	d134      	bne.n	8013c6e <_svfiprintf_r+0x186>
 8013c04:	9b03      	ldr	r3, [sp, #12]
 8013c06:	1d1a      	adds	r2, r3, #4
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	9203      	str	r2, [sp, #12]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	bfb8      	it	lt
 8013c10:	f04f 33ff 	movlt.w	r3, #4294967295
 8013c14:	3402      	adds	r4, #2
 8013c16:	9305      	str	r3, [sp, #20]
 8013c18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013ce0 <_svfiprintf_r+0x1f8>
 8013c1c:	7821      	ldrb	r1, [r4, #0]
 8013c1e:	2203      	movs	r2, #3
 8013c20:	4650      	mov	r0, sl
 8013c22:	f7ec faed 	bl	8000200 <memchr>
 8013c26:	b138      	cbz	r0, 8013c38 <_svfiprintf_r+0x150>
 8013c28:	9b04      	ldr	r3, [sp, #16]
 8013c2a:	eba0 000a 	sub.w	r0, r0, sl
 8013c2e:	2240      	movs	r2, #64	; 0x40
 8013c30:	4082      	lsls	r2, r0
 8013c32:	4313      	orrs	r3, r2
 8013c34:	3401      	adds	r4, #1
 8013c36:	9304      	str	r3, [sp, #16]
 8013c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c3c:	4825      	ldr	r0, [pc, #148]	; (8013cd4 <_svfiprintf_r+0x1ec>)
 8013c3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c42:	2206      	movs	r2, #6
 8013c44:	f7ec fadc 	bl	8000200 <memchr>
 8013c48:	2800      	cmp	r0, #0
 8013c4a:	d038      	beq.n	8013cbe <_svfiprintf_r+0x1d6>
 8013c4c:	4b22      	ldr	r3, [pc, #136]	; (8013cd8 <_svfiprintf_r+0x1f0>)
 8013c4e:	bb1b      	cbnz	r3, 8013c98 <_svfiprintf_r+0x1b0>
 8013c50:	9b03      	ldr	r3, [sp, #12]
 8013c52:	3307      	adds	r3, #7
 8013c54:	f023 0307 	bic.w	r3, r3, #7
 8013c58:	3308      	adds	r3, #8
 8013c5a:	9303      	str	r3, [sp, #12]
 8013c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c5e:	4433      	add	r3, r6
 8013c60:	9309      	str	r3, [sp, #36]	; 0x24
 8013c62:	e768      	b.n	8013b36 <_svfiprintf_r+0x4e>
 8013c64:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c68:	460c      	mov	r4, r1
 8013c6a:	2001      	movs	r0, #1
 8013c6c:	e7a6      	b.n	8013bbc <_svfiprintf_r+0xd4>
 8013c6e:	2300      	movs	r3, #0
 8013c70:	3401      	adds	r4, #1
 8013c72:	9305      	str	r3, [sp, #20]
 8013c74:	4619      	mov	r1, r3
 8013c76:	f04f 0c0a 	mov.w	ip, #10
 8013c7a:	4620      	mov	r0, r4
 8013c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c80:	3a30      	subs	r2, #48	; 0x30
 8013c82:	2a09      	cmp	r2, #9
 8013c84:	d903      	bls.n	8013c8e <_svfiprintf_r+0x1a6>
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d0c6      	beq.n	8013c18 <_svfiprintf_r+0x130>
 8013c8a:	9105      	str	r1, [sp, #20]
 8013c8c:	e7c4      	b.n	8013c18 <_svfiprintf_r+0x130>
 8013c8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c92:	4604      	mov	r4, r0
 8013c94:	2301      	movs	r3, #1
 8013c96:	e7f0      	b.n	8013c7a <_svfiprintf_r+0x192>
 8013c98:	ab03      	add	r3, sp, #12
 8013c9a:	9300      	str	r3, [sp, #0]
 8013c9c:	462a      	mov	r2, r5
 8013c9e:	4b0f      	ldr	r3, [pc, #60]	; (8013cdc <_svfiprintf_r+0x1f4>)
 8013ca0:	a904      	add	r1, sp, #16
 8013ca2:	4638      	mov	r0, r7
 8013ca4:	f3af 8000 	nop.w
 8013ca8:	1c42      	adds	r2, r0, #1
 8013caa:	4606      	mov	r6, r0
 8013cac:	d1d6      	bne.n	8013c5c <_svfiprintf_r+0x174>
 8013cae:	89ab      	ldrh	r3, [r5, #12]
 8013cb0:	065b      	lsls	r3, r3, #25
 8013cb2:	f53f af2d 	bmi.w	8013b10 <_svfiprintf_r+0x28>
 8013cb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013cb8:	b01d      	add	sp, #116	; 0x74
 8013cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cbe:	ab03      	add	r3, sp, #12
 8013cc0:	9300      	str	r3, [sp, #0]
 8013cc2:	462a      	mov	r2, r5
 8013cc4:	4b05      	ldr	r3, [pc, #20]	; (8013cdc <_svfiprintf_r+0x1f4>)
 8013cc6:	a904      	add	r1, sp, #16
 8013cc8:	4638      	mov	r0, r7
 8013cca:	f000 f879 	bl	8013dc0 <_printf_i>
 8013cce:	e7eb      	b.n	8013ca8 <_svfiprintf_r+0x1c0>
 8013cd0:	0801563c 	.word	0x0801563c
 8013cd4:	08015646 	.word	0x08015646
 8013cd8:	00000000 	.word	0x00000000
 8013cdc:	08013a35 	.word	0x08013a35
 8013ce0:	08015642 	.word	0x08015642

08013ce4 <_printf_common>:
 8013ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ce8:	4616      	mov	r6, r2
 8013cea:	4699      	mov	r9, r3
 8013cec:	688a      	ldr	r2, [r1, #8]
 8013cee:	690b      	ldr	r3, [r1, #16]
 8013cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013cf4:	4293      	cmp	r3, r2
 8013cf6:	bfb8      	it	lt
 8013cf8:	4613      	movlt	r3, r2
 8013cfa:	6033      	str	r3, [r6, #0]
 8013cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013d00:	4607      	mov	r7, r0
 8013d02:	460c      	mov	r4, r1
 8013d04:	b10a      	cbz	r2, 8013d0a <_printf_common+0x26>
 8013d06:	3301      	adds	r3, #1
 8013d08:	6033      	str	r3, [r6, #0]
 8013d0a:	6823      	ldr	r3, [r4, #0]
 8013d0c:	0699      	lsls	r1, r3, #26
 8013d0e:	bf42      	ittt	mi
 8013d10:	6833      	ldrmi	r3, [r6, #0]
 8013d12:	3302      	addmi	r3, #2
 8013d14:	6033      	strmi	r3, [r6, #0]
 8013d16:	6825      	ldr	r5, [r4, #0]
 8013d18:	f015 0506 	ands.w	r5, r5, #6
 8013d1c:	d106      	bne.n	8013d2c <_printf_common+0x48>
 8013d1e:	f104 0a19 	add.w	sl, r4, #25
 8013d22:	68e3      	ldr	r3, [r4, #12]
 8013d24:	6832      	ldr	r2, [r6, #0]
 8013d26:	1a9b      	subs	r3, r3, r2
 8013d28:	42ab      	cmp	r3, r5
 8013d2a:	dc26      	bgt.n	8013d7a <_printf_common+0x96>
 8013d2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013d30:	1e13      	subs	r3, r2, #0
 8013d32:	6822      	ldr	r2, [r4, #0]
 8013d34:	bf18      	it	ne
 8013d36:	2301      	movne	r3, #1
 8013d38:	0692      	lsls	r2, r2, #26
 8013d3a:	d42b      	bmi.n	8013d94 <_printf_common+0xb0>
 8013d3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013d40:	4649      	mov	r1, r9
 8013d42:	4638      	mov	r0, r7
 8013d44:	47c0      	blx	r8
 8013d46:	3001      	adds	r0, #1
 8013d48:	d01e      	beq.n	8013d88 <_printf_common+0xa4>
 8013d4a:	6823      	ldr	r3, [r4, #0]
 8013d4c:	6922      	ldr	r2, [r4, #16]
 8013d4e:	f003 0306 	and.w	r3, r3, #6
 8013d52:	2b04      	cmp	r3, #4
 8013d54:	bf02      	ittt	eq
 8013d56:	68e5      	ldreq	r5, [r4, #12]
 8013d58:	6833      	ldreq	r3, [r6, #0]
 8013d5a:	1aed      	subeq	r5, r5, r3
 8013d5c:	68a3      	ldr	r3, [r4, #8]
 8013d5e:	bf0c      	ite	eq
 8013d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013d64:	2500      	movne	r5, #0
 8013d66:	4293      	cmp	r3, r2
 8013d68:	bfc4      	itt	gt
 8013d6a:	1a9b      	subgt	r3, r3, r2
 8013d6c:	18ed      	addgt	r5, r5, r3
 8013d6e:	2600      	movs	r6, #0
 8013d70:	341a      	adds	r4, #26
 8013d72:	42b5      	cmp	r5, r6
 8013d74:	d11a      	bne.n	8013dac <_printf_common+0xc8>
 8013d76:	2000      	movs	r0, #0
 8013d78:	e008      	b.n	8013d8c <_printf_common+0xa8>
 8013d7a:	2301      	movs	r3, #1
 8013d7c:	4652      	mov	r2, sl
 8013d7e:	4649      	mov	r1, r9
 8013d80:	4638      	mov	r0, r7
 8013d82:	47c0      	blx	r8
 8013d84:	3001      	adds	r0, #1
 8013d86:	d103      	bne.n	8013d90 <_printf_common+0xac>
 8013d88:	f04f 30ff 	mov.w	r0, #4294967295
 8013d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d90:	3501      	adds	r5, #1
 8013d92:	e7c6      	b.n	8013d22 <_printf_common+0x3e>
 8013d94:	18e1      	adds	r1, r4, r3
 8013d96:	1c5a      	adds	r2, r3, #1
 8013d98:	2030      	movs	r0, #48	; 0x30
 8013d9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013d9e:	4422      	add	r2, r4
 8013da0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013da4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013da8:	3302      	adds	r3, #2
 8013daa:	e7c7      	b.n	8013d3c <_printf_common+0x58>
 8013dac:	2301      	movs	r3, #1
 8013dae:	4622      	mov	r2, r4
 8013db0:	4649      	mov	r1, r9
 8013db2:	4638      	mov	r0, r7
 8013db4:	47c0      	blx	r8
 8013db6:	3001      	adds	r0, #1
 8013db8:	d0e6      	beq.n	8013d88 <_printf_common+0xa4>
 8013dba:	3601      	adds	r6, #1
 8013dbc:	e7d9      	b.n	8013d72 <_printf_common+0x8e>
	...

08013dc0 <_printf_i>:
 8013dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013dc4:	7e0f      	ldrb	r7, [r1, #24]
 8013dc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013dc8:	2f78      	cmp	r7, #120	; 0x78
 8013dca:	4691      	mov	r9, r2
 8013dcc:	4680      	mov	r8, r0
 8013dce:	460c      	mov	r4, r1
 8013dd0:	469a      	mov	sl, r3
 8013dd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013dd6:	d807      	bhi.n	8013de8 <_printf_i+0x28>
 8013dd8:	2f62      	cmp	r7, #98	; 0x62
 8013dda:	d80a      	bhi.n	8013df2 <_printf_i+0x32>
 8013ddc:	2f00      	cmp	r7, #0
 8013dde:	f000 80d4 	beq.w	8013f8a <_printf_i+0x1ca>
 8013de2:	2f58      	cmp	r7, #88	; 0x58
 8013de4:	f000 80c0 	beq.w	8013f68 <_printf_i+0x1a8>
 8013de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013dec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013df0:	e03a      	b.n	8013e68 <_printf_i+0xa8>
 8013df2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013df6:	2b15      	cmp	r3, #21
 8013df8:	d8f6      	bhi.n	8013de8 <_printf_i+0x28>
 8013dfa:	a101      	add	r1, pc, #4	; (adr r1, 8013e00 <_printf_i+0x40>)
 8013dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013e00:	08013e59 	.word	0x08013e59
 8013e04:	08013e6d 	.word	0x08013e6d
 8013e08:	08013de9 	.word	0x08013de9
 8013e0c:	08013de9 	.word	0x08013de9
 8013e10:	08013de9 	.word	0x08013de9
 8013e14:	08013de9 	.word	0x08013de9
 8013e18:	08013e6d 	.word	0x08013e6d
 8013e1c:	08013de9 	.word	0x08013de9
 8013e20:	08013de9 	.word	0x08013de9
 8013e24:	08013de9 	.word	0x08013de9
 8013e28:	08013de9 	.word	0x08013de9
 8013e2c:	08013f71 	.word	0x08013f71
 8013e30:	08013e99 	.word	0x08013e99
 8013e34:	08013f2b 	.word	0x08013f2b
 8013e38:	08013de9 	.word	0x08013de9
 8013e3c:	08013de9 	.word	0x08013de9
 8013e40:	08013f93 	.word	0x08013f93
 8013e44:	08013de9 	.word	0x08013de9
 8013e48:	08013e99 	.word	0x08013e99
 8013e4c:	08013de9 	.word	0x08013de9
 8013e50:	08013de9 	.word	0x08013de9
 8013e54:	08013f33 	.word	0x08013f33
 8013e58:	682b      	ldr	r3, [r5, #0]
 8013e5a:	1d1a      	adds	r2, r3, #4
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	602a      	str	r2, [r5, #0]
 8013e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013e68:	2301      	movs	r3, #1
 8013e6a:	e09f      	b.n	8013fac <_printf_i+0x1ec>
 8013e6c:	6820      	ldr	r0, [r4, #0]
 8013e6e:	682b      	ldr	r3, [r5, #0]
 8013e70:	0607      	lsls	r7, r0, #24
 8013e72:	f103 0104 	add.w	r1, r3, #4
 8013e76:	6029      	str	r1, [r5, #0]
 8013e78:	d501      	bpl.n	8013e7e <_printf_i+0xbe>
 8013e7a:	681e      	ldr	r6, [r3, #0]
 8013e7c:	e003      	b.n	8013e86 <_printf_i+0xc6>
 8013e7e:	0646      	lsls	r6, r0, #25
 8013e80:	d5fb      	bpl.n	8013e7a <_printf_i+0xba>
 8013e82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013e86:	2e00      	cmp	r6, #0
 8013e88:	da03      	bge.n	8013e92 <_printf_i+0xd2>
 8013e8a:	232d      	movs	r3, #45	; 0x2d
 8013e8c:	4276      	negs	r6, r6
 8013e8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e92:	485a      	ldr	r0, [pc, #360]	; (8013ffc <_printf_i+0x23c>)
 8013e94:	230a      	movs	r3, #10
 8013e96:	e012      	b.n	8013ebe <_printf_i+0xfe>
 8013e98:	682b      	ldr	r3, [r5, #0]
 8013e9a:	6820      	ldr	r0, [r4, #0]
 8013e9c:	1d19      	adds	r1, r3, #4
 8013e9e:	6029      	str	r1, [r5, #0]
 8013ea0:	0605      	lsls	r5, r0, #24
 8013ea2:	d501      	bpl.n	8013ea8 <_printf_i+0xe8>
 8013ea4:	681e      	ldr	r6, [r3, #0]
 8013ea6:	e002      	b.n	8013eae <_printf_i+0xee>
 8013ea8:	0641      	lsls	r1, r0, #25
 8013eaa:	d5fb      	bpl.n	8013ea4 <_printf_i+0xe4>
 8013eac:	881e      	ldrh	r6, [r3, #0]
 8013eae:	4853      	ldr	r0, [pc, #332]	; (8013ffc <_printf_i+0x23c>)
 8013eb0:	2f6f      	cmp	r7, #111	; 0x6f
 8013eb2:	bf0c      	ite	eq
 8013eb4:	2308      	moveq	r3, #8
 8013eb6:	230a      	movne	r3, #10
 8013eb8:	2100      	movs	r1, #0
 8013eba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013ebe:	6865      	ldr	r5, [r4, #4]
 8013ec0:	60a5      	str	r5, [r4, #8]
 8013ec2:	2d00      	cmp	r5, #0
 8013ec4:	bfa2      	ittt	ge
 8013ec6:	6821      	ldrge	r1, [r4, #0]
 8013ec8:	f021 0104 	bicge.w	r1, r1, #4
 8013ecc:	6021      	strge	r1, [r4, #0]
 8013ece:	b90e      	cbnz	r6, 8013ed4 <_printf_i+0x114>
 8013ed0:	2d00      	cmp	r5, #0
 8013ed2:	d04b      	beq.n	8013f6c <_printf_i+0x1ac>
 8013ed4:	4615      	mov	r5, r2
 8013ed6:	fbb6 f1f3 	udiv	r1, r6, r3
 8013eda:	fb03 6711 	mls	r7, r3, r1, r6
 8013ede:	5dc7      	ldrb	r7, [r0, r7]
 8013ee0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013ee4:	4637      	mov	r7, r6
 8013ee6:	42bb      	cmp	r3, r7
 8013ee8:	460e      	mov	r6, r1
 8013eea:	d9f4      	bls.n	8013ed6 <_printf_i+0x116>
 8013eec:	2b08      	cmp	r3, #8
 8013eee:	d10b      	bne.n	8013f08 <_printf_i+0x148>
 8013ef0:	6823      	ldr	r3, [r4, #0]
 8013ef2:	07de      	lsls	r6, r3, #31
 8013ef4:	d508      	bpl.n	8013f08 <_printf_i+0x148>
 8013ef6:	6923      	ldr	r3, [r4, #16]
 8013ef8:	6861      	ldr	r1, [r4, #4]
 8013efa:	4299      	cmp	r1, r3
 8013efc:	bfde      	ittt	le
 8013efe:	2330      	movle	r3, #48	; 0x30
 8013f00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013f04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013f08:	1b52      	subs	r2, r2, r5
 8013f0a:	6122      	str	r2, [r4, #16]
 8013f0c:	f8cd a000 	str.w	sl, [sp]
 8013f10:	464b      	mov	r3, r9
 8013f12:	aa03      	add	r2, sp, #12
 8013f14:	4621      	mov	r1, r4
 8013f16:	4640      	mov	r0, r8
 8013f18:	f7ff fee4 	bl	8013ce4 <_printf_common>
 8013f1c:	3001      	adds	r0, #1
 8013f1e:	d14a      	bne.n	8013fb6 <_printf_i+0x1f6>
 8013f20:	f04f 30ff 	mov.w	r0, #4294967295
 8013f24:	b004      	add	sp, #16
 8013f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f2a:	6823      	ldr	r3, [r4, #0]
 8013f2c:	f043 0320 	orr.w	r3, r3, #32
 8013f30:	6023      	str	r3, [r4, #0]
 8013f32:	4833      	ldr	r0, [pc, #204]	; (8014000 <_printf_i+0x240>)
 8013f34:	2778      	movs	r7, #120	; 0x78
 8013f36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013f3a:	6823      	ldr	r3, [r4, #0]
 8013f3c:	6829      	ldr	r1, [r5, #0]
 8013f3e:	061f      	lsls	r7, r3, #24
 8013f40:	f851 6b04 	ldr.w	r6, [r1], #4
 8013f44:	d402      	bmi.n	8013f4c <_printf_i+0x18c>
 8013f46:	065f      	lsls	r7, r3, #25
 8013f48:	bf48      	it	mi
 8013f4a:	b2b6      	uxthmi	r6, r6
 8013f4c:	07df      	lsls	r7, r3, #31
 8013f4e:	bf48      	it	mi
 8013f50:	f043 0320 	orrmi.w	r3, r3, #32
 8013f54:	6029      	str	r1, [r5, #0]
 8013f56:	bf48      	it	mi
 8013f58:	6023      	strmi	r3, [r4, #0]
 8013f5a:	b91e      	cbnz	r6, 8013f64 <_printf_i+0x1a4>
 8013f5c:	6823      	ldr	r3, [r4, #0]
 8013f5e:	f023 0320 	bic.w	r3, r3, #32
 8013f62:	6023      	str	r3, [r4, #0]
 8013f64:	2310      	movs	r3, #16
 8013f66:	e7a7      	b.n	8013eb8 <_printf_i+0xf8>
 8013f68:	4824      	ldr	r0, [pc, #144]	; (8013ffc <_printf_i+0x23c>)
 8013f6a:	e7e4      	b.n	8013f36 <_printf_i+0x176>
 8013f6c:	4615      	mov	r5, r2
 8013f6e:	e7bd      	b.n	8013eec <_printf_i+0x12c>
 8013f70:	682b      	ldr	r3, [r5, #0]
 8013f72:	6826      	ldr	r6, [r4, #0]
 8013f74:	6961      	ldr	r1, [r4, #20]
 8013f76:	1d18      	adds	r0, r3, #4
 8013f78:	6028      	str	r0, [r5, #0]
 8013f7a:	0635      	lsls	r5, r6, #24
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	d501      	bpl.n	8013f84 <_printf_i+0x1c4>
 8013f80:	6019      	str	r1, [r3, #0]
 8013f82:	e002      	b.n	8013f8a <_printf_i+0x1ca>
 8013f84:	0670      	lsls	r0, r6, #25
 8013f86:	d5fb      	bpl.n	8013f80 <_printf_i+0x1c0>
 8013f88:	8019      	strh	r1, [r3, #0]
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	6123      	str	r3, [r4, #16]
 8013f8e:	4615      	mov	r5, r2
 8013f90:	e7bc      	b.n	8013f0c <_printf_i+0x14c>
 8013f92:	682b      	ldr	r3, [r5, #0]
 8013f94:	1d1a      	adds	r2, r3, #4
 8013f96:	602a      	str	r2, [r5, #0]
 8013f98:	681d      	ldr	r5, [r3, #0]
 8013f9a:	6862      	ldr	r2, [r4, #4]
 8013f9c:	2100      	movs	r1, #0
 8013f9e:	4628      	mov	r0, r5
 8013fa0:	f7ec f92e 	bl	8000200 <memchr>
 8013fa4:	b108      	cbz	r0, 8013faa <_printf_i+0x1ea>
 8013fa6:	1b40      	subs	r0, r0, r5
 8013fa8:	6060      	str	r0, [r4, #4]
 8013faa:	6863      	ldr	r3, [r4, #4]
 8013fac:	6123      	str	r3, [r4, #16]
 8013fae:	2300      	movs	r3, #0
 8013fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fb4:	e7aa      	b.n	8013f0c <_printf_i+0x14c>
 8013fb6:	6923      	ldr	r3, [r4, #16]
 8013fb8:	462a      	mov	r2, r5
 8013fba:	4649      	mov	r1, r9
 8013fbc:	4640      	mov	r0, r8
 8013fbe:	47d0      	blx	sl
 8013fc0:	3001      	adds	r0, #1
 8013fc2:	d0ad      	beq.n	8013f20 <_printf_i+0x160>
 8013fc4:	6823      	ldr	r3, [r4, #0]
 8013fc6:	079b      	lsls	r3, r3, #30
 8013fc8:	d413      	bmi.n	8013ff2 <_printf_i+0x232>
 8013fca:	68e0      	ldr	r0, [r4, #12]
 8013fcc:	9b03      	ldr	r3, [sp, #12]
 8013fce:	4298      	cmp	r0, r3
 8013fd0:	bfb8      	it	lt
 8013fd2:	4618      	movlt	r0, r3
 8013fd4:	e7a6      	b.n	8013f24 <_printf_i+0x164>
 8013fd6:	2301      	movs	r3, #1
 8013fd8:	4632      	mov	r2, r6
 8013fda:	4649      	mov	r1, r9
 8013fdc:	4640      	mov	r0, r8
 8013fde:	47d0      	blx	sl
 8013fe0:	3001      	adds	r0, #1
 8013fe2:	d09d      	beq.n	8013f20 <_printf_i+0x160>
 8013fe4:	3501      	adds	r5, #1
 8013fe6:	68e3      	ldr	r3, [r4, #12]
 8013fe8:	9903      	ldr	r1, [sp, #12]
 8013fea:	1a5b      	subs	r3, r3, r1
 8013fec:	42ab      	cmp	r3, r5
 8013fee:	dcf2      	bgt.n	8013fd6 <_printf_i+0x216>
 8013ff0:	e7eb      	b.n	8013fca <_printf_i+0x20a>
 8013ff2:	2500      	movs	r5, #0
 8013ff4:	f104 0619 	add.w	r6, r4, #25
 8013ff8:	e7f5      	b.n	8013fe6 <_printf_i+0x226>
 8013ffa:	bf00      	nop
 8013ffc:	0801564d 	.word	0x0801564d
 8014000:	0801565e 	.word	0x0801565e

08014004 <__sflush_r>:
 8014004:	898a      	ldrh	r2, [r1, #12]
 8014006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801400a:	4605      	mov	r5, r0
 801400c:	0710      	lsls	r0, r2, #28
 801400e:	460c      	mov	r4, r1
 8014010:	d458      	bmi.n	80140c4 <__sflush_r+0xc0>
 8014012:	684b      	ldr	r3, [r1, #4]
 8014014:	2b00      	cmp	r3, #0
 8014016:	dc05      	bgt.n	8014024 <__sflush_r+0x20>
 8014018:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801401a:	2b00      	cmp	r3, #0
 801401c:	dc02      	bgt.n	8014024 <__sflush_r+0x20>
 801401e:	2000      	movs	r0, #0
 8014020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014026:	2e00      	cmp	r6, #0
 8014028:	d0f9      	beq.n	801401e <__sflush_r+0x1a>
 801402a:	2300      	movs	r3, #0
 801402c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014030:	682f      	ldr	r7, [r5, #0]
 8014032:	6a21      	ldr	r1, [r4, #32]
 8014034:	602b      	str	r3, [r5, #0]
 8014036:	d032      	beq.n	801409e <__sflush_r+0x9a>
 8014038:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801403a:	89a3      	ldrh	r3, [r4, #12]
 801403c:	075a      	lsls	r2, r3, #29
 801403e:	d505      	bpl.n	801404c <__sflush_r+0x48>
 8014040:	6863      	ldr	r3, [r4, #4]
 8014042:	1ac0      	subs	r0, r0, r3
 8014044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014046:	b10b      	cbz	r3, 801404c <__sflush_r+0x48>
 8014048:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801404a:	1ac0      	subs	r0, r0, r3
 801404c:	2300      	movs	r3, #0
 801404e:	4602      	mov	r2, r0
 8014050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014052:	6a21      	ldr	r1, [r4, #32]
 8014054:	4628      	mov	r0, r5
 8014056:	47b0      	blx	r6
 8014058:	1c43      	adds	r3, r0, #1
 801405a:	89a3      	ldrh	r3, [r4, #12]
 801405c:	d106      	bne.n	801406c <__sflush_r+0x68>
 801405e:	6829      	ldr	r1, [r5, #0]
 8014060:	291d      	cmp	r1, #29
 8014062:	d82b      	bhi.n	80140bc <__sflush_r+0xb8>
 8014064:	4a29      	ldr	r2, [pc, #164]	; (801410c <__sflush_r+0x108>)
 8014066:	410a      	asrs	r2, r1
 8014068:	07d6      	lsls	r6, r2, #31
 801406a:	d427      	bmi.n	80140bc <__sflush_r+0xb8>
 801406c:	2200      	movs	r2, #0
 801406e:	6062      	str	r2, [r4, #4]
 8014070:	04d9      	lsls	r1, r3, #19
 8014072:	6922      	ldr	r2, [r4, #16]
 8014074:	6022      	str	r2, [r4, #0]
 8014076:	d504      	bpl.n	8014082 <__sflush_r+0x7e>
 8014078:	1c42      	adds	r2, r0, #1
 801407a:	d101      	bne.n	8014080 <__sflush_r+0x7c>
 801407c:	682b      	ldr	r3, [r5, #0]
 801407e:	b903      	cbnz	r3, 8014082 <__sflush_r+0x7e>
 8014080:	6560      	str	r0, [r4, #84]	; 0x54
 8014082:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014084:	602f      	str	r7, [r5, #0]
 8014086:	2900      	cmp	r1, #0
 8014088:	d0c9      	beq.n	801401e <__sflush_r+0x1a>
 801408a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801408e:	4299      	cmp	r1, r3
 8014090:	d002      	beq.n	8014098 <__sflush_r+0x94>
 8014092:	4628      	mov	r0, r5
 8014094:	f7fe fc5e 	bl	8012954 <_free_r>
 8014098:	2000      	movs	r0, #0
 801409a:	6360      	str	r0, [r4, #52]	; 0x34
 801409c:	e7c0      	b.n	8014020 <__sflush_r+0x1c>
 801409e:	2301      	movs	r3, #1
 80140a0:	4628      	mov	r0, r5
 80140a2:	47b0      	blx	r6
 80140a4:	1c41      	adds	r1, r0, #1
 80140a6:	d1c8      	bne.n	801403a <__sflush_r+0x36>
 80140a8:	682b      	ldr	r3, [r5, #0]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d0c5      	beq.n	801403a <__sflush_r+0x36>
 80140ae:	2b1d      	cmp	r3, #29
 80140b0:	d001      	beq.n	80140b6 <__sflush_r+0xb2>
 80140b2:	2b16      	cmp	r3, #22
 80140b4:	d101      	bne.n	80140ba <__sflush_r+0xb6>
 80140b6:	602f      	str	r7, [r5, #0]
 80140b8:	e7b1      	b.n	801401e <__sflush_r+0x1a>
 80140ba:	89a3      	ldrh	r3, [r4, #12]
 80140bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140c0:	81a3      	strh	r3, [r4, #12]
 80140c2:	e7ad      	b.n	8014020 <__sflush_r+0x1c>
 80140c4:	690f      	ldr	r7, [r1, #16]
 80140c6:	2f00      	cmp	r7, #0
 80140c8:	d0a9      	beq.n	801401e <__sflush_r+0x1a>
 80140ca:	0793      	lsls	r3, r2, #30
 80140cc:	680e      	ldr	r6, [r1, #0]
 80140ce:	bf08      	it	eq
 80140d0:	694b      	ldreq	r3, [r1, #20]
 80140d2:	600f      	str	r7, [r1, #0]
 80140d4:	bf18      	it	ne
 80140d6:	2300      	movne	r3, #0
 80140d8:	eba6 0807 	sub.w	r8, r6, r7
 80140dc:	608b      	str	r3, [r1, #8]
 80140de:	f1b8 0f00 	cmp.w	r8, #0
 80140e2:	dd9c      	ble.n	801401e <__sflush_r+0x1a>
 80140e4:	6a21      	ldr	r1, [r4, #32]
 80140e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80140e8:	4643      	mov	r3, r8
 80140ea:	463a      	mov	r2, r7
 80140ec:	4628      	mov	r0, r5
 80140ee:	47b0      	blx	r6
 80140f0:	2800      	cmp	r0, #0
 80140f2:	dc06      	bgt.n	8014102 <__sflush_r+0xfe>
 80140f4:	89a3      	ldrh	r3, [r4, #12]
 80140f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140fa:	81a3      	strh	r3, [r4, #12]
 80140fc:	f04f 30ff 	mov.w	r0, #4294967295
 8014100:	e78e      	b.n	8014020 <__sflush_r+0x1c>
 8014102:	4407      	add	r7, r0
 8014104:	eba8 0800 	sub.w	r8, r8, r0
 8014108:	e7e9      	b.n	80140de <__sflush_r+0xda>
 801410a:	bf00      	nop
 801410c:	dfbffffe 	.word	0xdfbffffe

08014110 <_fflush_r>:
 8014110:	b538      	push	{r3, r4, r5, lr}
 8014112:	690b      	ldr	r3, [r1, #16]
 8014114:	4605      	mov	r5, r0
 8014116:	460c      	mov	r4, r1
 8014118:	b913      	cbnz	r3, 8014120 <_fflush_r+0x10>
 801411a:	2500      	movs	r5, #0
 801411c:	4628      	mov	r0, r5
 801411e:	bd38      	pop	{r3, r4, r5, pc}
 8014120:	b118      	cbz	r0, 801412a <_fflush_r+0x1a>
 8014122:	6a03      	ldr	r3, [r0, #32]
 8014124:	b90b      	cbnz	r3, 801412a <_fflush_r+0x1a>
 8014126:	f7fe fa75 	bl	8012614 <__sinit>
 801412a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d0f3      	beq.n	801411a <_fflush_r+0xa>
 8014132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014134:	07d0      	lsls	r0, r2, #31
 8014136:	d404      	bmi.n	8014142 <_fflush_r+0x32>
 8014138:	0599      	lsls	r1, r3, #22
 801413a:	d402      	bmi.n	8014142 <_fflush_r+0x32>
 801413c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801413e:	f7fe fbe2 	bl	8012906 <__retarget_lock_acquire_recursive>
 8014142:	4628      	mov	r0, r5
 8014144:	4621      	mov	r1, r4
 8014146:	f7ff ff5d 	bl	8014004 <__sflush_r>
 801414a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801414c:	07da      	lsls	r2, r3, #31
 801414e:	4605      	mov	r5, r0
 8014150:	d4e4      	bmi.n	801411c <_fflush_r+0xc>
 8014152:	89a3      	ldrh	r3, [r4, #12]
 8014154:	059b      	lsls	r3, r3, #22
 8014156:	d4e1      	bmi.n	801411c <_fflush_r+0xc>
 8014158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801415a:	f7fe fbd5 	bl	8012908 <__retarget_lock_release_recursive>
 801415e:	e7dd      	b.n	801411c <_fflush_r+0xc>

08014160 <memmove>:
 8014160:	4288      	cmp	r0, r1
 8014162:	b510      	push	{r4, lr}
 8014164:	eb01 0402 	add.w	r4, r1, r2
 8014168:	d902      	bls.n	8014170 <memmove+0x10>
 801416a:	4284      	cmp	r4, r0
 801416c:	4623      	mov	r3, r4
 801416e:	d807      	bhi.n	8014180 <memmove+0x20>
 8014170:	1e43      	subs	r3, r0, #1
 8014172:	42a1      	cmp	r1, r4
 8014174:	d008      	beq.n	8014188 <memmove+0x28>
 8014176:	f811 2b01 	ldrb.w	r2, [r1], #1
 801417a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801417e:	e7f8      	b.n	8014172 <memmove+0x12>
 8014180:	4402      	add	r2, r0
 8014182:	4601      	mov	r1, r0
 8014184:	428a      	cmp	r2, r1
 8014186:	d100      	bne.n	801418a <memmove+0x2a>
 8014188:	bd10      	pop	{r4, pc}
 801418a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801418e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014192:	e7f7      	b.n	8014184 <memmove+0x24>

08014194 <__assert_func>:
 8014194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014196:	4614      	mov	r4, r2
 8014198:	461a      	mov	r2, r3
 801419a:	4b09      	ldr	r3, [pc, #36]	; (80141c0 <__assert_func+0x2c>)
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	4605      	mov	r5, r0
 80141a0:	68d8      	ldr	r0, [r3, #12]
 80141a2:	b14c      	cbz	r4, 80141b8 <__assert_func+0x24>
 80141a4:	4b07      	ldr	r3, [pc, #28]	; (80141c4 <__assert_func+0x30>)
 80141a6:	9100      	str	r1, [sp, #0]
 80141a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80141ac:	4906      	ldr	r1, [pc, #24]	; (80141c8 <__assert_func+0x34>)
 80141ae:	462b      	mov	r3, r5
 80141b0:	f000 f854 	bl	801425c <fiprintf>
 80141b4:	f000 f864 	bl	8014280 <abort>
 80141b8:	4b04      	ldr	r3, [pc, #16]	; (80141cc <__assert_func+0x38>)
 80141ba:	461c      	mov	r4, r3
 80141bc:	e7f3      	b.n	80141a6 <__assert_func+0x12>
 80141be:	bf00      	nop
 80141c0:	20000318 	.word	0x20000318
 80141c4:	0801566f 	.word	0x0801566f
 80141c8:	0801567c 	.word	0x0801567c
 80141cc:	080156aa 	.word	0x080156aa

080141d0 <_calloc_r>:
 80141d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80141d2:	fba1 2402 	umull	r2, r4, r1, r2
 80141d6:	b94c      	cbnz	r4, 80141ec <_calloc_r+0x1c>
 80141d8:	4611      	mov	r1, r2
 80141da:	9201      	str	r2, [sp, #4]
 80141dc:	f7fd fa14 	bl	8011608 <_malloc_r>
 80141e0:	9a01      	ldr	r2, [sp, #4]
 80141e2:	4605      	mov	r5, r0
 80141e4:	b930      	cbnz	r0, 80141f4 <_calloc_r+0x24>
 80141e6:	4628      	mov	r0, r5
 80141e8:	b003      	add	sp, #12
 80141ea:	bd30      	pop	{r4, r5, pc}
 80141ec:	220c      	movs	r2, #12
 80141ee:	6002      	str	r2, [r0, #0]
 80141f0:	2500      	movs	r5, #0
 80141f2:	e7f8      	b.n	80141e6 <_calloc_r+0x16>
 80141f4:	4621      	mov	r1, r4
 80141f6:	f7fe fabf 	bl	8012778 <memset>
 80141fa:	e7f4      	b.n	80141e6 <_calloc_r+0x16>

080141fc <_realloc_r>:
 80141fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014200:	4680      	mov	r8, r0
 8014202:	4614      	mov	r4, r2
 8014204:	460e      	mov	r6, r1
 8014206:	b921      	cbnz	r1, 8014212 <_realloc_r+0x16>
 8014208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801420c:	4611      	mov	r1, r2
 801420e:	f7fd b9fb 	b.w	8011608 <_malloc_r>
 8014212:	b92a      	cbnz	r2, 8014220 <_realloc_r+0x24>
 8014214:	f7fe fb9e 	bl	8012954 <_free_r>
 8014218:	4625      	mov	r5, r4
 801421a:	4628      	mov	r0, r5
 801421c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014220:	f000 f835 	bl	801428e <_malloc_usable_size_r>
 8014224:	4284      	cmp	r4, r0
 8014226:	4607      	mov	r7, r0
 8014228:	d802      	bhi.n	8014230 <_realloc_r+0x34>
 801422a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801422e:	d812      	bhi.n	8014256 <_realloc_r+0x5a>
 8014230:	4621      	mov	r1, r4
 8014232:	4640      	mov	r0, r8
 8014234:	f7fd f9e8 	bl	8011608 <_malloc_r>
 8014238:	4605      	mov	r5, r0
 801423a:	2800      	cmp	r0, #0
 801423c:	d0ed      	beq.n	801421a <_realloc_r+0x1e>
 801423e:	42bc      	cmp	r4, r7
 8014240:	4622      	mov	r2, r4
 8014242:	4631      	mov	r1, r6
 8014244:	bf28      	it	cs
 8014246:	463a      	movcs	r2, r7
 8014248:	f7fe fb67 	bl	801291a <memcpy>
 801424c:	4631      	mov	r1, r6
 801424e:	4640      	mov	r0, r8
 8014250:	f7fe fb80 	bl	8012954 <_free_r>
 8014254:	e7e1      	b.n	801421a <_realloc_r+0x1e>
 8014256:	4635      	mov	r5, r6
 8014258:	e7df      	b.n	801421a <_realloc_r+0x1e>
	...

0801425c <fiprintf>:
 801425c:	b40e      	push	{r1, r2, r3}
 801425e:	b503      	push	{r0, r1, lr}
 8014260:	4601      	mov	r1, r0
 8014262:	ab03      	add	r3, sp, #12
 8014264:	4805      	ldr	r0, [pc, #20]	; (801427c <fiprintf+0x20>)
 8014266:	f853 2b04 	ldr.w	r2, [r3], #4
 801426a:	6800      	ldr	r0, [r0, #0]
 801426c:	9301      	str	r3, [sp, #4]
 801426e:	f000 f83f 	bl	80142f0 <_vfiprintf_r>
 8014272:	b002      	add	sp, #8
 8014274:	f85d eb04 	ldr.w	lr, [sp], #4
 8014278:	b003      	add	sp, #12
 801427a:	4770      	bx	lr
 801427c:	20000318 	.word	0x20000318

08014280 <abort>:
 8014280:	b508      	push	{r3, lr}
 8014282:	2006      	movs	r0, #6
 8014284:	f000 fa0c 	bl	80146a0 <raise>
 8014288:	2001      	movs	r0, #1
 801428a:	f7ed fc4d 	bl	8001b28 <_exit>

0801428e <_malloc_usable_size_r>:
 801428e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014292:	1f18      	subs	r0, r3, #4
 8014294:	2b00      	cmp	r3, #0
 8014296:	bfbc      	itt	lt
 8014298:	580b      	ldrlt	r3, [r1, r0]
 801429a:	18c0      	addlt	r0, r0, r3
 801429c:	4770      	bx	lr

0801429e <__sfputc_r>:
 801429e:	6893      	ldr	r3, [r2, #8]
 80142a0:	3b01      	subs	r3, #1
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	b410      	push	{r4}
 80142a6:	6093      	str	r3, [r2, #8]
 80142a8:	da08      	bge.n	80142bc <__sfputc_r+0x1e>
 80142aa:	6994      	ldr	r4, [r2, #24]
 80142ac:	42a3      	cmp	r3, r4
 80142ae:	db01      	blt.n	80142b4 <__sfputc_r+0x16>
 80142b0:	290a      	cmp	r1, #10
 80142b2:	d103      	bne.n	80142bc <__sfputc_r+0x1e>
 80142b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142b8:	f000 b934 	b.w	8014524 <__swbuf_r>
 80142bc:	6813      	ldr	r3, [r2, #0]
 80142be:	1c58      	adds	r0, r3, #1
 80142c0:	6010      	str	r0, [r2, #0]
 80142c2:	7019      	strb	r1, [r3, #0]
 80142c4:	4608      	mov	r0, r1
 80142c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142ca:	4770      	bx	lr

080142cc <__sfputs_r>:
 80142cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142ce:	4606      	mov	r6, r0
 80142d0:	460f      	mov	r7, r1
 80142d2:	4614      	mov	r4, r2
 80142d4:	18d5      	adds	r5, r2, r3
 80142d6:	42ac      	cmp	r4, r5
 80142d8:	d101      	bne.n	80142de <__sfputs_r+0x12>
 80142da:	2000      	movs	r0, #0
 80142dc:	e007      	b.n	80142ee <__sfputs_r+0x22>
 80142de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142e2:	463a      	mov	r2, r7
 80142e4:	4630      	mov	r0, r6
 80142e6:	f7ff ffda 	bl	801429e <__sfputc_r>
 80142ea:	1c43      	adds	r3, r0, #1
 80142ec:	d1f3      	bne.n	80142d6 <__sfputs_r+0xa>
 80142ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080142f0 <_vfiprintf_r>:
 80142f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142f4:	460d      	mov	r5, r1
 80142f6:	b09d      	sub	sp, #116	; 0x74
 80142f8:	4614      	mov	r4, r2
 80142fa:	4698      	mov	r8, r3
 80142fc:	4606      	mov	r6, r0
 80142fe:	b118      	cbz	r0, 8014308 <_vfiprintf_r+0x18>
 8014300:	6a03      	ldr	r3, [r0, #32]
 8014302:	b90b      	cbnz	r3, 8014308 <_vfiprintf_r+0x18>
 8014304:	f7fe f986 	bl	8012614 <__sinit>
 8014308:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801430a:	07d9      	lsls	r1, r3, #31
 801430c:	d405      	bmi.n	801431a <_vfiprintf_r+0x2a>
 801430e:	89ab      	ldrh	r3, [r5, #12]
 8014310:	059a      	lsls	r2, r3, #22
 8014312:	d402      	bmi.n	801431a <_vfiprintf_r+0x2a>
 8014314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014316:	f7fe faf6 	bl	8012906 <__retarget_lock_acquire_recursive>
 801431a:	89ab      	ldrh	r3, [r5, #12]
 801431c:	071b      	lsls	r3, r3, #28
 801431e:	d501      	bpl.n	8014324 <_vfiprintf_r+0x34>
 8014320:	692b      	ldr	r3, [r5, #16]
 8014322:	b99b      	cbnz	r3, 801434c <_vfiprintf_r+0x5c>
 8014324:	4629      	mov	r1, r5
 8014326:	4630      	mov	r0, r6
 8014328:	f000 f93a 	bl	80145a0 <__swsetup_r>
 801432c:	b170      	cbz	r0, 801434c <_vfiprintf_r+0x5c>
 801432e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014330:	07dc      	lsls	r4, r3, #31
 8014332:	d504      	bpl.n	801433e <_vfiprintf_r+0x4e>
 8014334:	f04f 30ff 	mov.w	r0, #4294967295
 8014338:	b01d      	add	sp, #116	; 0x74
 801433a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801433e:	89ab      	ldrh	r3, [r5, #12]
 8014340:	0598      	lsls	r0, r3, #22
 8014342:	d4f7      	bmi.n	8014334 <_vfiprintf_r+0x44>
 8014344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014346:	f7fe fadf 	bl	8012908 <__retarget_lock_release_recursive>
 801434a:	e7f3      	b.n	8014334 <_vfiprintf_r+0x44>
 801434c:	2300      	movs	r3, #0
 801434e:	9309      	str	r3, [sp, #36]	; 0x24
 8014350:	2320      	movs	r3, #32
 8014352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014356:	f8cd 800c 	str.w	r8, [sp, #12]
 801435a:	2330      	movs	r3, #48	; 0x30
 801435c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014510 <_vfiprintf_r+0x220>
 8014360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014364:	f04f 0901 	mov.w	r9, #1
 8014368:	4623      	mov	r3, r4
 801436a:	469a      	mov	sl, r3
 801436c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014370:	b10a      	cbz	r2, 8014376 <_vfiprintf_r+0x86>
 8014372:	2a25      	cmp	r2, #37	; 0x25
 8014374:	d1f9      	bne.n	801436a <_vfiprintf_r+0x7a>
 8014376:	ebba 0b04 	subs.w	fp, sl, r4
 801437a:	d00b      	beq.n	8014394 <_vfiprintf_r+0xa4>
 801437c:	465b      	mov	r3, fp
 801437e:	4622      	mov	r2, r4
 8014380:	4629      	mov	r1, r5
 8014382:	4630      	mov	r0, r6
 8014384:	f7ff ffa2 	bl	80142cc <__sfputs_r>
 8014388:	3001      	adds	r0, #1
 801438a:	f000 80a9 	beq.w	80144e0 <_vfiprintf_r+0x1f0>
 801438e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014390:	445a      	add	r2, fp
 8014392:	9209      	str	r2, [sp, #36]	; 0x24
 8014394:	f89a 3000 	ldrb.w	r3, [sl]
 8014398:	2b00      	cmp	r3, #0
 801439a:	f000 80a1 	beq.w	80144e0 <_vfiprintf_r+0x1f0>
 801439e:	2300      	movs	r3, #0
 80143a0:	f04f 32ff 	mov.w	r2, #4294967295
 80143a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143a8:	f10a 0a01 	add.w	sl, sl, #1
 80143ac:	9304      	str	r3, [sp, #16]
 80143ae:	9307      	str	r3, [sp, #28]
 80143b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80143b4:	931a      	str	r3, [sp, #104]	; 0x68
 80143b6:	4654      	mov	r4, sl
 80143b8:	2205      	movs	r2, #5
 80143ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143be:	4854      	ldr	r0, [pc, #336]	; (8014510 <_vfiprintf_r+0x220>)
 80143c0:	f7eb ff1e 	bl	8000200 <memchr>
 80143c4:	9a04      	ldr	r2, [sp, #16]
 80143c6:	b9d8      	cbnz	r0, 8014400 <_vfiprintf_r+0x110>
 80143c8:	06d1      	lsls	r1, r2, #27
 80143ca:	bf44      	itt	mi
 80143cc:	2320      	movmi	r3, #32
 80143ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143d2:	0713      	lsls	r3, r2, #28
 80143d4:	bf44      	itt	mi
 80143d6:	232b      	movmi	r3, #43	; 0x2b
 80143d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143dc:	f89a 3000 	ldrb.w	r3, [sl]
 80143e0:	2b2a      	cmp	r3, #42	; 0x2a
 80143e2:	d015      	beq.n	8014410 <_vfiprintf_r+0x120>
 80143e4:	9a07      	ldr	r2, [sp, #28]
 80143e6:	4654      	mov	r4, sl
 80143e8:	2000      	movs	r0, #0
 80143ea:	f04f 0c0a 	mov.w	ip, #10
 80143ee:	4621      	mov	r1, r4
 80143f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143f4:	3b30      	subs	r3, #48	; 0x30
 80143f6:	2b09      	cmp	r3, #9
 80143f8:	d94d      	bls.n	8014496 <_vfiprintf_r+0x1a6>
 80143fa:	b1b0      	cbz	r0, 801442a <_vfiprintf_r+0x13a>
 80143fc:	9207      	str	r2, [sp, #28]
 80143fe:	e014      	b.n	801442a <_vfiprintf_r+0x13a>
 8014400:	eba0 0308 	sub.w	r3, r0, r8
 8014404:	fa09 f303 	lsl.w	r3, r9, r3
 8014408:	4313      	orrs	r3, r2
 801440a:	9304      	str	r3, [sp, #16]
 801440c:	46a2      	mov	sl, r4
 801440e:	e7d2      	b.n	80143b6 <_vfiprintf_r+0xc6>
 8014410:	9b03      	ldr	r3, [sp, #12]
 8014412:	1d19      	adds	r1, r3, #4
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	9103      	str	r1, [sp, #12]
 8014418:	2b00      	cmp	r3, #0
 801441a:	bfbb      	ittet	lt
 801441c:	425b      	neglt	r3, r3
 801441e:	f042 0202 	orrlt.w	r2, r2, #2
 8014422:	9307      	strge	r3, [sp, #28]
 8014424:	9307      	strlt	r3, [sp, #28]
 8014426:	bfb8      	it	lt
 8014428:	9204      	strlt	r2, [sp, #16]
 801442a:	7823      	ldrb	r3, [r4, #0]
 801442c:	2b2e      	cmp	r3, #46	; 0x2e
 801442e:	d10c      	bne.n	801444a <_vfiprintf_r+0x15a>
 8014430:	7863      	ldrb	r3, [r4, #1]
 8014432:	2b2a      	cmp	r3, #42	; 0x2a
 8014434:	d134      	bne.n	80144a0 <_vfiprintf_r+0x1b0>
 8014436:	9b03      	ldr	r3, [sp, #12]
 8014438:	1d1a      	adds	r2, r3, #4
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	9203      	str	r2, [sp, #12]
 801443e:	2b00      	cmp	r3, #0
 8014440:	bfb8      	it	lt
 8014442:	f04f 33ff 	movlt.w	r3, #4294967295
 8014446:	3402      	adds	r4, #2
 8014448:	9305      	str	r3, [sp, #20]
 801444a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014520 <_vfiprintf_r+0x230>
 801444e:	7821      	ldrb	r1, [r4, #0]
 8014450:	2203      	movs	r2, #3
 8014452:	4650      	mov	r0, sl
 8014454:	f7eb fed4 	bl	8000200 <memchr>
 8014458:	b138      	cbz	r0, 801446a <_vfiprintf_r+0x17a>
 801445a:	9b04      	ldr	r3, [sp, #16]
 801445c:	eba0 000a 	sub.w	r0, r0, sl
 8014460:	2240      	movs	r2, #64	; 0x40
 8014462:	4082      	lsls	r2, r0
 8014464:	4313      	orrs	r3, r2
 8014466:	3401      	adds	r4, #1
 8014468:	9304      	str	r3, [sp, #16]
 801446a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801446e:	4829      	ldr	r0, [pc, #164]	; (8014514 <_vfiprintf_r+0x224>)
 8014470:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014474:	2206      	movs	r2, #6
 8014476:	f7eb fec3 	bl	8000200 <memchr>
 801447a:	2800      	cmp	r0, #0
 801447c:	d03f      	beq.n	80144fe <_vfiprintf_r+0x20e>
 801447e:	4b26      	ldr	r3, [pc, #152]	; (8014518 <_vfiprintf_r+0x228>)
 8014480:	bb1b      	cbnz	r3, 80144ca <_vfiprintf_r+0x1da>
 8014482:	9b03      	ldr	r3, [sp, #12]
 8014484:	3307      	adds	r3, #7
 8014486:	f023 0307 	bic.w	r3, r3, #7
 801448a:	3308      	adds	r3, #8
 801448c:	9303      	str	r3, [sp, #12]
 801448e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014490:	443b      	add	r3, r7
 8014492:	9309      	str	r3, [sp, #36]	; 0x24
 8014494:	e768      	b.n	8014368 <_vfiprintf_r+0x78>
 8014496:	fb0c 3202 	mla	r2, ip, r2, r3
 801449a:	460c      	mov	r4, r1
 801449c:	2001      	movs	r0, #1
 801449e:	e7a6      	b.n	80143ee <_vfiprintf_r+0xfe>
 80144a0:	2300      	movs	r3, #0
 80144a2:	3401      	adds	r4, #1
 80144a4:	9305      	str	r3, [sp, #20]
 80144a6:	4619      	mov	r1, r3
 80144a8:	f04f 0c0a 	mov.w	ip, #10
 80144ac:	4620      	mov	r0, r4
 80144ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144b2:	3a30      	subs	r2, #48	; 0x30
 80144b4:	2a09      	cmp	r2, #9
 80144b6:	d903      	bls.n	80144c0 <_vfiprintf_r+0x1d0>
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d0c6      	beq.n	801444a <_vfiprintf_r+0x15a>
 80144bc:	9105      	str	r1, [sp, #20]
 80144be:	e7c4      	b.n	801444a <_vfiprintf_r+0x15a>
 80144c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80144c4:	4604      	mov	r4, r0
 80144c6:	2301      	movs	r3, #1
 80144c8:	e7f0      	b.n	80144ac <_vfiprintf_r+0x1bc>
 80144ca:	ab03      	add	r3, sp, #12
 80144cc:	9300      	str	r3, [sp, #0]
 80144ce:	462a      	mov	r2, r5
 80144d0:	4b12      	ldr	r3, [pc, #72]	; (801451c <_vfiprintf_r+0x22c>)
 80144d2:	a904      	add	r1, sp, #16
 80144d4:	4630      	mov	r0, r6
 80144d6:	f3af 8000 	nop.w
 80144da:	4607      	mov	r7, r0
 80144dc:	1c78      	adds	r0, r7, #1
 80144de:	d1d6      	bne.n	801448e <_vfiprintf_r+0x19e>
 80144e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144e2:	07d9      	lsls	r1, r3, #31
 80144e4:	d405      	bmi.n	80144f2 <_vfiprintf_r+0x202>
 80144e6:	89ab      	ldrh	r3, [r5, #12]
 80144e8:	059a      	lsls	r2, r3, #22
 80144ea:	d402      	bmi.n	80144f2 <_vfiprintf_r+0x202>
 80144ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144ee:	f7fe fa0b 	bl	8012908 <__retarget_lock_release_recursive>
 80144f2:	89ab      	ldrh	r3, [r5, #12]
 80144f4:	065b      	lsls	r3, r3, #25
 80144f6:	f53f af1d 	bmi.w	8014334 <_vfiprintf_r+0x44>
 80144fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80144fc:	e71c      	b.n	8014338 <_vfiprintf_r+0x48>
 80144fe:	ab03      	add	r3, sp, #12
 8014500:	9300      	str	r3, [sp, #0]
 8014502:	462a      	mov	r2, r5
 8014504:	4b05      	ldr	r3, [pc, #20]	; (801451c <_vfiprintf_r+0x22c>)
 8014506:	a904      	add	r1, sp, #16
 8014508:	4630      	mov	r0, r6
 801450a:	f7ff fc59 	bl	8013dc0 <_printf_i>
 801450e:	e7e4      	b.n	80144da <_vfiprintf_r+0x1ea>
 8014510:	0801563c 	.word	0x0801563c
 8014514:	08015646 	.word	0x08015646
 8014518:	00000000 	.word	0x00000000
 801451c:	080142cd 	.word	0x080142cd
 8014520:	08015642 	.word	0x08015642

08014524 <__swbuf_r>:
 8014524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014526:	460e      	mov	r6, r1
 8014528:	4614      	mov	r4, r2
 801452a:	4605      	mov	r5, r0
 801452c:	b118      	cbz	r0, 8014536 <__swbuf_r+0x12>
 801452e:	6a03      	ldr	r3, [r0, #32]
 8014530:	b90b      	cbnz	r3, 8014536 <__swbuf_r+0x12>
 8014532:	f7fe f86f 	bl	8012614 <__sinit>
 8014536:	69a3      	ldr	r3, [r4, #24]
 8014538:	60a3      	str	r3, [r4, #8]
 801453a:	89a3      	ldrh	r3, [r4, #12]
 801453c:	071a      	lsls	r2, r3, #28
 801453e:	d525      	bpl.n	801458c <__swbuf_r+0x68>
 8014540:	6923      	ldr	r3, [r4, #16]
 8014542:	b31b      	cbz	r3, 801458c <__swbuf_r+0x68>
 8014544:	6823      	ldr	r3, [r4, #0]
 8014546:	6922      	ldr	r2, [r4, #16]
 8014548:	1a98      	subs	r0, r3, r2
 801454a:	6963      	ldr	r3, [r4, #20]
 801454c:	b2f6      	uxtb	r6, r6
 801454e:	4283      	cmp	r3, r0
 8014550:	4637      	mov	r7, r6
 8014552:	dc04      	bgt.n	801455e <__swbuf_r+0x3a>
 8014554:	4621      	mov	r1, r4
 8014556:	4628      	mov	r0, r5
 8014558:	f7ff fdda 	bl	8014110 <_fflush_r>
 801455c:	b9e0      	cbnz	r0, 8014598 <__swbuf_r+0x74>
 801455e:	68a3      	ldr	r3, [r4, #8]
 8014560:	3b01      	subs	r3, #1
 8014562:	60a3      	str	r3, [r4, #8]
 8014564:	6823      	ldr	r3, [r4, #0]
 8014566:	1c5a      	adds	r2, r3, #1
 8014568:	6022      	str	r2, [r4, #0]
 801456a:	701e      	strb	r6, [r3, #0]
 801456c:	6962      	ldr	r2, [r4, #20]
 801456e:	1c43      	adds	r3, r0, #1
 8014570:	429a      	cmp	r2, r3
 8014572:	d004      	beq.n	801457e <__swbuf_r+0x5a>
 8014574:	89a3      	ldrh	r3, [r4, #12]
 8014576:	07db      	lsls	r3, r3, #31
 8014578:	d506      	bpl.n	8014588 <__swbuf_r+0x64>
 801457a:	2e0a      	cmp	r6, #10
 801457c:	d104      	bne.n	8014588 <__swbuf_r+0x64>
 801457e:	4621      	mov	r1, r4
 8014580:	4628      	mov	r0, r5
 8014582:	f7ff fdc5 	bl	8014110 <_fflush_r>
 8014586:	b938      	cbnz	r0, 8014598 <__swbuf_r+0x74>
 8014588:	4638      	mov	r0, r7
 801458a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801458c:	4621      	mov	r1, r4
 801458e:	4628      	mov	r0, r5
 8014590:	f000 f806 	bl	80145a0 <__swsetup_r>
 8014594:	2800      	cmp	r0, #0
 8014596:	d0d5      	beq.n	8014544 <__swbuf_r+0x20>
 8014598:	f04f 37ff 	mov.w	r7, #4294967295
 801459c:	e7f4      	b.n	8014588 <__swbuf_r+0x64>
	...

080145a0 <__swsetup_r>:
 80145a0:	b538      	push	{r3, r4, r5, lr}
 80145a2:	4b2a      	ldr	r3, [pc, #168]	; (801464c <__swsetup_r+0xac>)
 80145a4:	4605      	mov	r5, r0
 80145a6:	6818      	ldr	r0, [r3, #0]
 80145a8:	460c      	mov	r4, r1
 80145aa:	b118      	cbz	r0, 80145b4 <__swsetup_r+0x14>
 80145ac:	6a03      	ldr	r3, [r0, #32]
 80145ae:	b90b      	cbnz	r3, 80145b4 <__swsetup_r+0x14>
 80145b0:	f7fe f830 	bl	8012614 <__sinit>
 80145b4:	89a3      	ldrh	r3, [r4, #12]
 80145b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80145ba:	0718      	lsls	r0, r3, #28
 80145bc:	d422      	bmi.n	8014604 <__swsetup_r+0x64>
 80145be:	06d9      	lsls	r1, r3, #27
 80145c0:	d407      	bmi.n	80145d2 <__swsetup_r+0x32>
 80145c2:	2309      	movs	r3, #9
 80145c4:	602b      	str	r3, [r5, #0]
 80145c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80145ca:	81a3      	strh	r3, [r4, #12]
 80145cc:	f04f 30ff 	mov.w	r0, #4294967295
 80145d0:	e034      	b.n	801463c <__swsetup_r+0x9c>
 80145d2:	0758      	lsls	r0, r3, #29
 80145d4:	d512      	bpl.n	80145fc <__swsetup_r+0x5c>
 80145d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145d8:	b141      	cbz	r1, 80145ec <__swsetup_r+0x4c>
 80145da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80145de:	4299      	cmp	r1, r3
 80145e0:	d002      	beq.n	80145e8 <__swsetup_r+0x48>
 80145e2:	4628      	mov	r0, r5
 80145e4:	f7fe f9b6 	bl	8012954 <_free_r>
 80145e8:	2300      	movs	r3, #0
 80145ea:	6363      	str	r3, [r4, #52]	; 0x34
 80145ec:	89a3      	ldrh	r3, [r4, #12]
 80145ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80145f2:	81a3      	strh	r3, [r4, #12]
 80145f4:	2300      	movs	r3, #0
 80145f6:	6063      	str	r3, [r4, #4]
 80145f8:	6923      	ldr	r3, [r4, #16]
 80145fa:	6023      	str	r3, [r4, #0]
 80145fc:	89a3      	ldrh	r3, [r4, #12]
 80145fe:	f043 0308 	orr.w	r3, r3, #8
 8014602:	81a3      	strh	r3, [r4, #12]
 8014604:	6923      	ldr	r3, [r4, #16]
 8014606:	b94b      	cbnz	r3, 801461c <__swsetup_r+0x7c>
 8014608:	89a3      	ldrh	r3, [r4, #12]
 801460a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801460e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014612:	d003      	beq.n	801461c <__swsetup_r+0x7c>
 8014614:	4621      	mov	r1, r4
 8014616:	4628      	mov	r0, r5
 8014618:	f000 f884 	bl	8014724 <__smakebuf_r>
 801461c:	89a0      	ldrh	r0, [r4, #12]
 801461e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014622:	f010 0301 	ands.w	r3, r0, #1
 8014626:	d00a      	beq.n	801463e <__swsetup_r+0x9e>
 8014628:	2300      	movs	r3, #0
 801462a:	60a3      	str	r3, [r4, #8]
 801462c:	6963      	ldr	r3, [r4, #20]
 801462e:	425b      	negs	r3, r3
 8014630:	61a3      	str	r3, [r4, #24]
 8014632:	6923      	ldr	r3, [r4, #16]
 8014634:	b943      	cbnz	r3, 8014648 <__swsetup_r+0xa8>
 8014636:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801463a:	d1c4      	bne.n	80145c6 <__swsetup_r+0x26>
 801463c:	bd38      	pop	{r3, r4, r5, pc}
 801463e:	0781      	lsls	r1, r0, #30
 8014640:	bf58      	it	pl
 8014642:	6963      	ldrpl	r3, [r4, #20]
 8014644:	60a3      	str	r3, [r4, #8]
 8014646:	e7f4      	b.n	8014632 <__swsetup_r+0x92>
 8014648:	2000      	movs	r0, #0
 801464a:	e7f7      	b.n	801463c <__swsetup_r+0x9c>
 801464c:	20000318 	.word	0x20000318

08014650 <_raise_r>:
 8014650:	291f      	cmp	r1, #31
 8014652:	b538      	push	{r3, r4, r5, lr}
 8014654:	4604      	mov	r4, r0
 8014656:	460d      	mov	r5, r1
 8014658:	d904      	bls.n	8014664 <_raise_r+0x14>
 801465a:	2316      	movs	r3, #22
 801465c:	6003      	str	r3, [r0, #0]
 801465e:	f04f 30ff 	mov.w	r0, #4294967295
 8014662:	bd38      	pop	{r3, r4, r5, pc}
 8014664:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014666:	b112      	cbz	r2, 801466e <_raise_r+0x1e>
 8014668:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801466c:	b94b      	cbnz	r3, 8014682 <_raise_r+0x32>
 801466e:	4620      	mov	r0, r4
 8014670:	f000 f830 	bl	80146d4 <_getpid_r>
 8014674:	462a      	mov	r2, r5
 8014676:	4601      	mov	r1, r0
 8014678:	4620      	mov	r0, r4
 801467a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801467e:	f000 b817 	b.w	80146b0 <_kill_r>
 8014682:	2b01      	cmp	r3, #1
 8014684:	d00a      	beq.n	801469c <_raise_r+0x4c>
 8014686:	1c59      	adds	r1, r3, #1
 8014688:	d103      	bne.n	8014692 <_raise_r+0x42>
 801468a:	2316      	movs	r3, #22
 801468c:	6003      	str	r3, [r0, #0]
 801468e:	2001      	movs	r0, #1
 8014690:	e7e7      	b.n	8014662 <_raise_r+0x12>
 8014692:	2400      	movs	r4, #0
 8014694:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014698:	4628      	mov	r0, r5
 801469a:	4798      	blx	r3
 801469c:	2000      	movs	r0, #0
 801469e:	e7e0      	b.n	8014662 <_raise_r+0x12>

080146a0 <raise>:
 80146a0:	4b02      	ldr	r3, [pc, #8]	; (80146ac <raise+0xc>)
 80146a2:	4601      	mov	r1, r0
 80146a4:	6818      	ldr	r0, [r3, #0]
 80146a6:	f7ff bfd3 	b.w	8014650 <_raise_r>
 80146aa:	bf00      	nop
 80146ac:	20000318 	.word	0x20000318

080146b0 <_kill_r>:
 80146b0:	b538      	push	{r3, r4, r5, lr}
 80146b2:	4d07      	ldr	r5, [pc, #28]	; (80146d0 <_kill_r+0x20>)
 80146b4:	2300      	movs	r3, #0
 80146b6:	4604      	mov	r4, r0
 80146b8:	4608      	mov	r0, r1
 80146ba:	4611      	mov	r1, r2
 80146bc:	602b      	str	r3, [r5, #0]
 80146be:	f7ed fa23 	bl	8001b08 <_kill>
 80146c2:	1c43      	adds	r3, r0, #1
 80146c4:	d102      	bne.n	80146cc <_kill_r+0x1c>
 80146c6:	682b      	ldr	r3, [r5, #0]
 80146c8:	b103      	cbz	r3, 80146cc <_kill_r+0x1c>
 80146ca:	6023      	str	r3, [r4, #0]
 80146cc:	bd38      	pop	{r3, r4, r5, pc}
 80146ce:	bf00      	nop
 80146d0:	20002ba4 	.word	0x20002ba4

080146d4 <_getpid_r>:
 80146d4:	f7ed ba10 	b.w	8001af8 <_getpid>

080146d8 <__swhatbuf_r>:
 80146d8:	b570      	push	{r4, r5, r6, lr}
 80146da:	460c      	mov	r4, r1
 80146dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146e0:	2900      	cmp	r1, #0
 80146e2:	b096      	sub	sp, #88	; 0x58
 80146e4:	4615      	mov	r5, r2
 80146e6:	461e      	mov	r6, r3
 80146e8:	da0d      	bge.n	8014706 <__swhatbuf_r+0x2e>
 80146ea:	89a3      	ldrh	r3, [r4, #12]
 80146ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80146f0:	f04f 0100 	mov.w	r1, #0
 80146f4:	bf0c      	ite	eq
 80146f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80146fa:	2340      	movne	r3, #64	; 0x40
 80146fc:	2000      	movs	r0, #0
 80146fe:	6031      	str	r1, [r6, #0]
 8014700:	602b      	str	r3, [r5, #0]
 8014702:	b016      	add	sp, #88	; 0x58
 8014704:	bd70      	pop	{r4, r5, r6, pc}
 8014706:	466a      	mov	r2, sp
 8014708:	f000 f848 	bl	801479c <_fstat_r>
 801470c:	2800      	cmp	r0, #0
 801470e:	dbec      	blt.n	80146ea <__swhatbuf_r+0x12>
 8014710:	9901      	ldr	r1, [sp, #4]
 8014712:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014716:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801471a:	4259      	negs	r1, r3
 801471c:	4159      	adcs	r1, r3
 801471e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014722:	e7eb      	b.n	80146fc <__swhatbuf_r+0x24>

08014724 <__smakebuf_r>:
 8014724:	898b      	ldrh	r3, [r1, #12]
 8014726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014728:	079d      	lsls	r5, r3, #30
 801472a:	4606      	mov	r6, r0
 801472c:	460c      	mov	r4, r1
 801472e:	d507      	bpl.n	8014740 <__smakebuf_r+0x1c>
 8014730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014734:	6023      	str	r3, [r4, #0]
 8014736:	6123      	str	r3, [r4, #16]
 8014738:	2301      	movs	r3, #1
 801473a:	6163      	str	r3, [r4, #20]
 801473c:	b002      	add	sp, #8
 801473e:	bd70      	pop	{r4, r5, r6, pc}
 8014740:	ab01      	add	r3, sp, #4
 8014742:	466a      	mov	r2, sp
 8014744:	f7ff ffc8 	bl	80146d8 <__swhatbuf_r>
 8014748:	9900      	ldr	r1, [sp, #0]
 801474a:	4605      	mov	r5, r0
 801474c:	4630      	mov	r0, r6
 801474e:	f7fc ff5b 	bl	8011608 <_malloc_r>
 8014752:	b948      	cbnz	r0, 8014768 <__smakebuf_r+0x44>
 8014754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014758:	059a      	lsls	r2, r3, #22
 801475a:	d4ef      	bmi.n	801473c <__smakebuf_r+0x18>
 801475c:	f023 0303 	bic.w	r3, r3, #3
 8014760:	f043 0302 	orr.w	r3, r3, #2
 8014764:	81a3      	strh	r3, [r4, #12]
 8014766:	e7e3      	b.n	8014730 <__smakebuf_r+0xc>
 8014768:	89a3      	ldrh	r3, [r4, #12]
 801476a:	6020      	str	r0, [r4, #0]
 801476c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014770:	81a3      	strh	r3, [r4, #12]
 8014772:	9b00      	ldr	r3, [sp, #0]
 8014774:	6163      	str	r3, [r4, #20]
 8014776:	9b01      	ldr	r3, [sp, #4]
 8014778:	6120      	str	r0, [r4, #16]
 801477a:	b15b      	cbz	r3, 8014794 <__smakebuf_r+0x70>
 801477c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014780:	4630      	mov	r0, r6
 8014782:	f000 f81d 	bl	80147c0 <_isatty_r>
 8014786:	b128      	cbz	r0, 8014794 <__smakebuf_r+0x70>
 8014788:	89a3      	ldrh	r3, [r4, #12]
 801478a:	f023 0303 	bic.w	r3, r3, #3
 801478e:	f043 0301 	orr.w	r3, r3, #1
 8014792:	81a3      	strh	r3, [r4, #12]
 8014794:	89a3      	ldrh	r3, [r4, #12]
 8014796:	431d      	orrs	r5, r3
 8014798:	81a5      	strh	r5, [r4, #12]
 801479a:	e7cf      	b.n	801473c <__smakebuf_r+0x18>

0801479c <_fstat_r>:
 801479c:	b538      	push	{r3, r4, r5, lr}
 801479e:	4d07      	ldr	r5, [pc, #28]	; (80147bc <_fstat_r+0x20>)
 80147a0:	2300      	movs	r3, #0
 80147a2:	4604      	mov	r4, r0
 80147a4:	4608      	mov	r0, r1
 80147a6:	4611      	mov	r1, r2
 80147a8:	602b      	str	r3, [r5, #0]
 80147aa:	f7ed fa0c 	bl	8001bc6 <_fstat>
 80147ae:	1c43      	adds	r3, r0, #1
 80147b0:	d102      	bne.n	80147b8 <_fstat_r+0x1c>
 80147b2:	682b      	ldr	r3, [r5, #0]
 80147b4:	b103      	cbz	r3, 80147b8 <_fstat_r+0x1c>
 80147b6:	6023      	str	r3, [r4, #0]
 80147b8:	bd38      	pop	{r3, r4, r5, pc}
 80147ba:	bf00      	nop
 80147bc:	20002ba4 	.word	0x20002ba4

080147c0 <_isatty_r>:
 80147c0:	b538      	push	{r3, r4, r5, lr}
 80147c2:	4d06      	ldr	r5, [pc, #24]	; (80147dc <_isatty_r+0x1c>)
 80147c4:	2300      	movs	r3, #0
 80147c6:	4604      	mov	r4, r0
 80147c8:	4608      	mov	r0, r1
 80147ca:	602b      	str	r3, [r5, #0]
 80147cc:	f7ed fa0b 	bl	8001be6 <_isatty>
 80147d0:	1c43      	adds	r3, r0, #1
 80147d2:	d102      	bne.n	80147da <_isatty_r+0x1a>
 80147d4:	682b      	ldr	r3, [r5, #0]
 80147d6:	b103      	cbz	r3, 80147da <_isatty_r+0x1a>
 80147d8:	6023      	str	r3, [r4, #0]
 80147da:	bd38      	pop	{r3, r4, r5, pc}
 80147dc:	20002ba4 	.word	0x20002ba4

080147e0 <_init>:
 80147e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147e2:	bf00      	nop
 80147e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147e6:	bc08      	pop	{r3}
 80147e8:	469e      	mov	lr, r3
 80147ea:	4770      	bx	lr

080147ec <_fini>:
 80147ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147ee:	bf00      	nop
 80147f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147f2:	bc08      	pop	{r3}
 80147f4:	469e      	mov	lr, r3
 80147f6:	4770      	bx	lr
