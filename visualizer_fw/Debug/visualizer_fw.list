
visualizer_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b598  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d61c  0801b740  0801b740  0002b740  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028d5c  08028d5c  00040368  2**0
                  CONTENTS
  4 .ARM          00000008  08028d5c  08028d5c  00038d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028d64  08028d64  00040368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028d64  08028d64  00038d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028d68  08028d68  00038d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  08028d6c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006dc4  20000380  080290d4  00040380  2**6
                  ALLOC
 10 ._user_heap_stack 00000604  20007144  080290d4  00047144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040368  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040398  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026750  00000000  00000000  000403db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007599  00000000  00000000  00066b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002180  00000000  00000000  0006e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001939  00000000  00000000  00070248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ef2  00000000  00000000  00071b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032c17  00000000  00000000  00092a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097714  00000000  00000000  000c568a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009a80  00000000  00000000  0015cda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00166820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000380 	.word	0x20000380
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801b720 	.word	0x0801b720

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000384 	.word	0x20000384
 80001dc:	0801b720 	.word	0x0801b720

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b9a6 	b.w	8000fbc <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f83c 	bl	8000cf4 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff33 	bl	8000afc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fca9 	bl	8000618 <__aeabi_dmul>
 8000cc6:	f7ff ff57 	bl	8000b78 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc2a 	bl	8000524 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fca0 	bl	8000618 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fae2 	bl	80002a8 <__aeabi_dsub>
 8000ce4:	f7ff ff48 	bl	8000b78 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9e08      	ldr	r6, [sp, #32]
 8000cfa:	460d      	mov	r5, r1
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	460f      	mov	r7, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14a      	bne.n	8000d9a <__udivmoddi4+0xa6>
 8000d04:	428a      	cmp	r2, r1
 8000d06:	4694      	mov	ip, r2
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0xe2>
 8000d0a:	fab2 f382 	clz	r3, r2
 8000d0e:	b143      	cbz	r3, 8000d22 <__udivmoddi4+0x2e>
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	f1c3 0220 	rsb	r2, r3, #32
 8000d18:	409f      	lsls	r7, r3
 8000d1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	409c      	lsls	r4, r3
 8000d22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d26:	fa1f f58c 	uxth.w	r5, ip
 8000d2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d2e:	0c22      	lsrs	r2, r4, #16
 8000d30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d38:	fb01 f005 	mul.w	r0, r1, r5
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	d90a      	bls.n	8000d56 <__udivmoddi4+0x62>
 8000d40:	eb1c 0202 	adds.w	r2, ip, r2
 8000d44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d48:	f080 811c 	bcs.w	8000f84 <__udivmoddi4+0x290>
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	f240 8119 	bls.w	8000f84 <__udivmoddi4+0x290>
 8000d52:	3902      	subs	r1, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	1a12      	subs	r2, r2, r0
 8000d58:	b2a4      	uxth	r4, r4
 8000d5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d66:	fb00 f505 	mul.w	r5, r0, r5
 8000d6a:	42a5      	cmp	r5, r4
 8000d6c:	d90a      	bls.n	8000d84 <__udivmoddi4+0x90>
 8000d6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x294>
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x294>
 8000d80:	4464      	add	r4, ip
 8000d82:	3802      	subs	r0, #2
 8000d84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	b11e      	cbz	r6, 8000d96 <__udivmoddi4+0xa2>
 8000d8e:	40dc      	lsrs	r4, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	e9c6 4300 	strd	r4, r3, [r6]
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0xbc>
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f000 80ed 	beq.w	8000f7e <__udivmoddi4+0x28a>
 8000da4:	2100      	movs	r1, #0
 8000da6:	e9c6 0500 	strd	r0, r5, [r6]
 8000daa:	4608      	mov	r0, r1
 8000dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db0:	fab3 f183 	clz	r1, r3
 8000db4:	2900      	cmp	r1, #0
 8000db6:	d149      	bne.n	8000e4c <__udivmoddi4+0x158>
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	d302      	bcc.n	8000dc2 <__udivmoddi4+0xce>
 8000dbc:	4282      	cmp	r2, r0
 8000dbe:	f200 80f8 	bhi.w	8000fb2 <__udivmoddi4+0x2be>
 8000dc2:	1a84      	subs	r4, r0, r2
 8000dc4:	eb65 0203 	sbc.w	r2, r5, r3
 8000dc8:	2001      	movs	r0, #1
 8000dca:	4617      	mov	r7, r2
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d0e2      	beq.n	8000d96 <__udivmoddi4+0xa2>
 8000dd0:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd4:	e7df      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000dd6:	b902      	cbnz	r2, 8000dda <__udivmoddi4+0xe6>
 8000dd8:	deff      	udf	#255	; 0xff
 8000dda:	fab2 f382 	clz	r3, r2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8090 	bne.w	8000f04 <__udivmoddi4+0x210>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	2101      	movs	r1, #1
 8000df0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df4:	fb07 2015 	mls	r0, r7, r5, r2
 8000df8:	0c22      	lsrs	r2, r4, #16
 8000dfa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dfe:	fb0e f005 	mul.w	r0, lr, r5
 8000e02:	4290      	cmp	r0, r2
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x124>
 8000e06:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x122>
 8000e10:	4290      	cmp	r0, r2
 8000e12:	f200 80cb 	bhi.w	8000fac <__udivmoddi4+0x2b8>
 8000e16:	4645      	mov	r5, r8
 8000e18:	1a12      	subs	r2, r2, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e20:	fb07 2210 	mls	r2, r7, r0, r2
 8000e24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e28:	fb0e fe00 	mul.w	lr, lr, r0
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x14e>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x14c>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f200 80bb 	bhi.w	8000fb6 <__udivmoddi4+0x2c2>
 8000e40:	4610      	mov	r0, r2
 8000e42:	eba4 040e 	sub.w	r4, r4, lr
 8000e46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4a:	e79f      	b.n	8000d8c <__udivmoddi4+0x98>
 8000e4c:	f1c1 0720 	rsb	r7, r1, #32
 8000e50:	408b      	lsls	r3, r1
 8000e52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e62:	40fd      	lsrs	r5, r7
 8000e64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e68:	4323      	orrs	r3, r4
 8000e6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	fb09 5518 	mls	r5, r9, r8, r5
 8000e76:	0c1c      	lsrs	r4, r3, #16
 8000e78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e80:	42a5      	cmp	r5, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8a:	d90b      	bls.n	8000ea4 <__udivmoddi4+0x1b0>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e94:	f080 8088 	bcs.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e98:	42a5      	cmp	r5, r4
 8000e9a:	f240 8085 	bls.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea2:	4464      	add	r4, ip
 8000ea4:	1b64      	subs	r4, r4, r5
 8000ea6:	b29d      	uxth	r5, r3
 8000ea8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eac:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x1da>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec4:	d26c      	bcs.n	8000fa0 <__udivmoddi4+0x2ac>
 8000ec6:	45a6      	cmp	lr, r4
 8000ec8:	d96a      	bls.n	8000fa0 <__udivmoddi4+0x2ac>
 8000eca:	3b02      	subs	r3, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ed6:	eba4 040e 	sub.w	r4, r4, lr
 8000eda:	42ac      	cmp	r4, r5
 8000edc:	46c8      	mov	r8, r9
 8000ede:	46ae      	mov	lr, r5
 8000ee0:	d356      	bcc.n	8000f90 <__udivmoddi4+0x29c>
 8000ee2:	d053      	beq.n	8000f8c <__udivmoddi4+0x298>
 8000ee4:	b156      	cbz	r6, 8000efc <__udivmoddi4+0x208>
 8000ee6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eea:	eb64 040e 	sbc.w	r4, r4, lr
 8000eee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef2:	40ca      	lsrs	r2, r1
 8000ef4:	40cc      	lsrs	r4, r1
 8000ef6:	4317      	orrs	r7, r2
 8000ef8:	e9c6 7400 	strd	r7, r4, [r6]
 8000efc:	4618      	mov	r0, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f04:	f1c3 0120 	rsb	r1, r3, #32
 8000f08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f10:	fa25 f101 	lsr.w	r1, r5, r1
 8000f14:	409d      	lsls	r5, r3
 8000f16:	432a      	orrs	r2, r5
 8000f18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f24:	fb07 1510 	mls	r5, r7, r0, r1
 8000f28:	0c11      	lsrs	r1, r2, #16
 8000f2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f32:	428d      	cmp	r5, r1
 8000f34:	fa04 f403 	lsl.w	r4, r4, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x258>
 8000f3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f42:	d22f      	bcs.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f44:	428d      	cmp	r5, r1
 8000f46:	d92d      	bls.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1b49      	subs	r1, r1, r5
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f54:	fb07 1115 	mls	r1, r7, r5, r1
 8000f58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f60:	4291      	cmp	r1, r2
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x282>
 8000f64:	eb1c 0202 	adds.w	r2, ip, r2
 8000f68:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f6c:	d216      	bcs.n	8000f9c <__udivmoddi4+0x2a8>
 8000f6e:	4291      	cmp	r1, r2
 8000f70:	d914      	bls.n	8000f9c <__udivmoddi4+0x2a8>
 8000f72:	3d02      	subs	r5, #2
 8000f74:	4462      	add	r2, ip
 8000f76:	1a52      	subs	r2, r2, r1
 8000f78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f7c:	e738      	b.n	8000df0 <__udivmoddi4+0xfc>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000f84:	4639      	mov	r1, r7
 8000f86:	e6e6      	b.n	8000d56 <__udivmoddi4+0x62>
 8000f88:	4610      	mov	r0, r2
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x90>
 8000f8c:	4548      	cmp	r0, r9
 8000f8e:	d2a9      	bcs.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f90:	ebb9 0802 	subs.w	r8, r9, r2
 8000f94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	e7a3      	b.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f9c:	4645      	mov	r5, r8
 8000f9e:	e7ea      	b.n	8000f76 <__udivmoddi4+0x282>
 8000fa0:	462b      	mov	r3, r5
 8000fa2:	e794      	b.n	8000ece <__udivmoddi4+0x1da>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	e7d1      	b.n	8000f4c <__udivmoddi4+0x258>
 8000fa8:	46d0      	mov	r8, sl
 8000faa:	e77b      	b.n	8000ea4 <__udivmoddi4+0x1b0>
 8000fac:	3d02      	subs	r5, #2
 8000fae:	4462      	add	r2, ip
 8000fb0:	e732      	b.n	8000e18 <__udivmoddi4+0x124>
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	e70a      	b.n	8000dcc <__udivmoddi4+0xd8>
 8000fb6:	4464      	add	r4, ip
 8000fb8:	3802      	subs	r0, #2
 8000fba:	e742      	b.n	8000e42 <__udivmoddi4+0x14e>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_DMA_Init+0x5c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a13      	ldr	r2, [pc, #76]	; (800101c <MX_DMA_Init+0x5c>)
 8000fd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_DMA_Init+0x5c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	2039      	movs	r0, #57	; 0x39
 8000fe8:	f006 fae5 	bl	80075b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000fec:	2039      	movs	r0, #57	; 0x39
 8000fee:	f006 fafe 	bl	80075ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	203b      	movs	r0, #59	; 0x3b
 8000ff8:	f006 fadd 	bl	80075b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ffc:	203b      	movs	r0, #59	; 0x3b
 8000ffe:	f006 faf6 	bl	80075ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2105      	movs	r1, #5
 8001006:	2045      	movs	r0, #69	; 0x45
 8001008:	f006 fad5 	bl	80075b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800100c:	2045      	movs	r0, #69	; 0x45
 800100e:	f006 faee 	bl	80075ee <HAL_NVIC_EnableIRQ>

}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800

08001020 <flashInit>:
#ifdef _USE_HW_CLI
static void cliFlash(cli_args_t *args);
#endif

bool flashInit(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

#ifdef _USE_HW_CLI
	cliAdd("flash", cliFlash);
 8001024:	4903      	ldr	r1, [pc, #12]	; (8001034 <flashInit+0x14>)
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <flashInit+0x18>)
 8001028:	f002 fa22 	bl	8003470 <cliAdd>
#endif

	return true;
 800102c:	2301      	movs	r3, #1
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	080011ed 	.word	0x080011ed
 8001038:	0801b740 	.word	0x0801b740

0800103c <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	bool ret = false;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  uint16_t start_sector_num = -1;
 800104c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001050:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t sector_count = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	85bb      	strh	r3, [r7, #44]	; 0x2c

  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
 800105a:	e00f      	b.n	800107c <flashErase+0x40>
  {
  	if(flashInSector(i, addr, length) == true)
 800105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105e:	b29b      	uxth	r3, r3
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f869 	bl	800113c <flashInSector>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <flashErase+0x3a>
  	{
  		if(start_sector_num < 0)
  		{
  			start_sector_num = i;
  		}
  		sector_count++;
 8001070:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001072:	3301      	adds	r3, #1
 8001074:	85bb      	strh	r3, [r7, #44]	; 0x2c
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001078:	3301      	adds	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
 800107c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107e:	2b07      	cmp	r3, #7
 8001080:	ddec      	ble.n	800105c <flashErase+0x20>
  	}
  }

  if(sector_count > 0)
 8001082:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d01f      	beq.n	80010c8 <flashErase+0x8c>
  {
  	HAL_FLASH_Unlock();
 8001088:	f006 ff38 	bl	8007efc <HAL_FLASH_Unlock>

    init.TypeErase   = FLASH_TYPEERASE_SECTORS;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
    init.Banks       = FLASH_BANK_1;
 8001090:	2301      	movs	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
    init.Sector      = start_sector_num;
 8001094:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001096:	61bb      	str	r3, [r7, #24]
    init.NbSectors   = sector_count;
 8001098:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800109a:	61fb      	str	r3, [r7, #28]
    init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800109c:	2302      	movs	r3, #2
 800109e:	623b      	str	r3, [r7, #32]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 80010a0:	f107 020c 	add.w	r2, r7, #12
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f007 f898 	bl	80081e0 <HAL_FLASHEx_Erase>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if(status == HAL_OK)
 80010b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <flashErase+0x88>
    {
    	ret = true;
 80010be:	2301      	movs	r3, #1
 80010c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    HAL_FLASH_Lock();
 80010c4:	f006 ff3c 	bl	8007f40 <HAL_FLASH_Lock>
  }

  return ret;
 80010c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3730      	adds	r7, #48	; 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
	bool ret = true;
 80010e0:	2301      	movs	r3, #1
 80010e2:	77fb      	strb	r3, [r7, #31]
	HAL_StatusTypeDef status;

	HAL_FLASH_Unlock();
 80010e4:	f006 ff0a 	bl	8007efc <HAL_FLASH_Unlock>

	for(int i=0; i<length; i++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	e01b      	b.n	8001126 <flashWrite+0x52>
	{
		uint16_t data;

		data = p_data[i+0] << 0;
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	4413      	add	r3, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	82fb      	strh	r3, [r7, #22]

		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint16_t)data);
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	18d1      	adds	r1, r2, r3
 80010fe:	8afb      	ldrh	r3, [r7, #22]
 8001100:	2200      	movs	r2, #0
 8001102:	461c      	mov	r4, r3
 8001104:	4615      	mov	r5, r2
 8001106:	4622      	mov	r2, r4
 8001108:	462b      	mov	r3, r5
 800110a:	2000      	movs	r0, #0
 800110c:	f006 fea2 	bl	8007e54 <HAL_FLASH_Program>
 8001110:	4603      	mov	r3, r0
 8001112:	757b      	strb	r3, [r7, #21]
		if(status != HAL_OK)
 8001114:	7d7b      	ldrb	r3, [r7, #21]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <flashWrite+0x4c>
		{
			ret = false;
 800111a:	2300      	movs	r3, #0
 800111c:	77fb      	strb	r3, [r7, #31]
			break;
 800111e:	e006      	b.n	800112e <flashWrite+0x5a>
	for(int i=0; i<length; i++)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	3301      	adds	r3, #1
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	d8df      	bhi.n	80010ee <flashWrite+0x1a>
		}
	}

	HAL_FLASH_Lock();
 800112e:	f006 ff07 	bl	8007f40 <HAL_FLASH_Lock>

	return ret;
 8001132:	7ffb      	ldrb	r3, [r7, #31]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bdb0      	pop	{r4, r5, r7, pc}

0800113c <flashInSector>:

	return ret;
}

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 800113c:	b480      	push	{r7}
 800113e:	b08b      	sub	sp, #44	; 0x2c
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	81fb      	strh	r3, [r7, #14]
	bool ret = false;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t sector_start;
	uint32_t sector_end;
	uint32_t flash_start;
	uint32_t flash_end;

	sector_start = flash_tbl[sector_num].addr;
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	4a25      	ldr	r2, [pc, #148]	; (80011e8 <flashInSector+0xac>)
 8001154:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001158:	623b      	str	r3, [r7, #32]
	sector_end = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <flashInSector+0xac>)
 800115e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	4920      	ldr	r1, [pc, #128]	; (80011e8 <flashInSector+0xac>)
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	440b      	add	r3, r1
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4413      	add	r3, r2
 800116e:	3b01      	subs	r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
	flash_start = addr;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	61bb      	str	r3, [r7, #24]
	flash_end = addr + length - 1;
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	3b01      	subs	r3, #1
 800117e:	617b      	str	r3, [r7, #20]

	if(sector_start >= flash_start && sector_start <= flash_end)
 8001180:	6a3a      	ldr	r2, [r7, #32]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	429a      	cmp	r2, r3
 8001186:	d306      	bcc.n	8001196 <flashInSector+0x5a>
 8001188:	6a3a      	ldr	r2, [r7, #32]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	d802      	bhi.n	8001196 <flashInSector+0x5a>
	{
		ret = true;
 8001190:	2301      	movs	r3, #1
 8001192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

  if (sector_end >= flash_start && sector_end <= flash_end)
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	429a      	cmp	r2, r3
 800119c:	d306      	bcc.n	80011ac <flashInSector+0x70>
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d802      	bhi.n	80011ac <flashInSector+0x70>
  {
    ret = true;
 80011a6:	2301      	movs	r3, #1
 80011a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d306      	bcc.n	80011c2 <flashInSector+0x86>
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d802      	bhi.n	80011c2 <flashInSector+0x86>
  {
    ret = true;
 80011bc:	2301      	movs	r3, #1
 80011be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d306      	bcc.n	80011d8 <flashInSector+0x9c>
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d802      	bhi.n	80011d8 <flashInSector+0x9c>
  {
    ret = true;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 80011d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80011dc:	4618      	mov	r0, r3
 80011de:	372c      	adds	r7, #44	; 0x2c
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	20000000 	.word	0x20000000

080011ec <cliFlash>:


#ifdef _USE_HW_CLI

void cliFlash(cli_args_t *args)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(args->argc == 1 && args->isStr(0, "info") == true)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d121      	bne.n	8001246 <cliFlash+0x5a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	495c      	ldr	r1, [pc, #368]	; (8001378 <cliFlash+0x18c>)
 8001208:	2000      	movs	r0, #0
 800120a:	4798      	blx	r3
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d019      	beq.n	8001246 <cliFlash+0x5a>
	{
		for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
 8001216:	e010      	b.n	800123a <cliFlash+0x4e>
		{
			cliPrintf("0x%X : %dKB\n", flash_tbl[i].addr, flash_tbl[i].length / 1024);
 8001218:	4a58      	ldr	r2, [pc, #352]	; (800137c <cliFlash+0x190>)
 800121a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001220:	4a56      	ldr	r2, [pc, #344]	; (800137c <cliFlash+0x190>)
 8001222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	0a9b      	lsrs	r3, r3, #10
 800122c:	461a      	mov	r2, r3
 800122e:	4854      	ldr	r0, [pc, #336]	; (8001380 <cliFlash+0x194>)
 8001230:	f002 f80e 	bl	8003250 <cliPrintf>
		for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	3301      	adds	r3, #1
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
 800123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123c:	2b07      	cmp	r3, #7
 800123e:	ddeb      	ble.n	8001218 <cliFlash+0x2c>
		}

		ret = true;
 8001240:	2301      	movs	r3, #1
 8001242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d12b      	bne.n	80012a6 <cliFlash+0xba>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	494c      	ldr	r1, [pc, #304]	; (8001384 <cliFlash+0x198>)
 8001254:	2000      	movs	r0, #0
 8001256:	4798      	blx	r3
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d023      	beq.n	80012a6 <cliFlash+0xba>
	{
		uint32_t addr;
		uint32_t length;

		addr = (uint32_t)args->getData(1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2001      	movs	r0, #1
 8001264:	4798      	blx	r3
 8001266:	4603      	mov	r3, r0
 8001268:	623b      	str	r3, [r7, #32]
		length = (uint32_t)args->getData(2);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2002      	movs	r0, #2
 8001270:	4798      	blx	r3
 8001272:	4603      	mov	r3, r0
 8001274:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<length; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
 800127a:	e00d      	b.n	8001298 <cliFlash+0xac>
		{
			cliPrintf("0x%X : 0x%X\n", addr + i, *((uint8_t *)(addr + i)));
 800127c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	18d1      	adds	r1, r2, r3
 8001282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	483e      	ldr	r0, [pc, #248]	; (8001388 <cliFlash+0x19c>)
 800128e:	f001 ffdf 	bl	8003250 <cliPrintf>
		for(int i=0; i<length; i++)
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	3301      	adds	r3, #1
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8ed      	bhi.n	800127c <cliFlash+0x90>
		}

		ret = true;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(args->argc == 3 && args->isStr(0, "erase") == true)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d121      	bne.n	80012f2 <cliFlash+0x106>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4936      	ldr	r1, [pc, #216]	; (800138c <cliFlash+0x1a0>)
 80012b4:	2000      	movs	r0, #0
 80012b6:	4798      	blx	r3
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d019      	beq.n	80012f2 <cliFlash+0x106>
	{
		uint32_t addr;
		uint32_t length;

		addr = (uint32_t)args->getData(1);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2001      	movs	r0, #1
 80012c4:	4798      	blx	r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]
		length = (uint32_t)args->getData(2);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2002      	movs	r0, #2
 80012d0:	4798      	blx	r3
 80012d2:	4603      	mov	r3, r0
 80012d4:	617b      	str	r3, [r7, #20]

		if(flashErase(addr, length) == true)
 80012d6:	6979      	ldr	r1, [r7, #20]
 80012d8:	69b8      	ldr	r0, [r7, #24]
 80012da:	f7ff feaf 	bl	800103c <flashErase>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <cliFlash+0x100>
		{
			cliPrintf("Erase OK\n");
 80012e4:	482a      	ldr	r0, [pc, #168]	; (8001390 <cliFlash+0x1a4>)
 80012e6:	f001 ffb3 	bl	8003250 <cliPrintf>
 80012ea:	e002      	b.n	80012f2 <cliFlash+0x106>
		}
		else
		{
			cliPrintf("Erase Fail\n");
 80012ec:	4829      	ldr	r0, [pc, #164]	; (8001394 <cliFlash+0x1a8>)
 80012ee:	f001 ffaf 	bl	8003250 <cliPrintf>
		}
	}


  if (args->argc == 3 && args->isStr(0, "write") == true)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d127      	bne.n	800134a <cliFlash+0x15e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4926      	ldr	r1, [pc, #152]	; (8001398 <cliFlash+0x1ac>)
 8001300:	2000      	movs	r0, #0
 8001302:	4798      	blx	r3
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d01f      	beq.n	800134a <cliFlash+0x15e>
  {
    uint32_t addr;
    uint32_t data;

    addr   = (uint32_t)args->getData(1);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2001      	movs	r0, #1
 8001310:	4798      	blx	r3
 8001312:	4603      	mov	r3, r0
 8001314:	613b      	str	r3, [r7, #16]
    data   = (uint32_t)args->getData(2);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2002      	movs	r0, #2
 800131c:	4798      	blx	r3
 800131e:	4603      	mov	r3, r0
 8001320:	60fb      	str	r3, [r7, #12]

    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	2204      	movs	r2, #4
 8001328:	4619      	mov	r1, r3
 800132a:	6938      	ldr	r0, [r7, #16]
 800132c:	f7ff fed2 	bl	80010d4 <flashWrite>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <cliFlash+0x152>
    {
      cliPrintf("Write OK\n");
 8001336:	4819      	ldr	r0, [pc, #100]	; (800139c <cliFlash+0x1b0>)
 8001338:	f001 ff8a 	bl	8003250 <cliPrintf>
 800133c:	e002      	b.n	8001344 <cliFlash+0x158>
    }
    else
    {
      cliPrintf("Write Fail\n");
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <cliFlash+0x1b4>)
 8001340:	f001 ff86 	bl	8003250 <cliPrintf>
    }

    ret = true;
 8001344:	2301      	movs	r3, #1
 8001346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (ret != true)
 800134a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00b      	beq.n	8001370 <cliFlash+0x184>
  {
    cliPrintf("flash info\n");
 8001358:	4812      	ldr	r0, [pc, #72]	; (80013a4 <cliFlash+0x1b8>)
 800135a:	f001 ff79 	bl	8003250 <cliPrintf>
    cliPrintf("flash read  addr length\n");
 800135e:	4812      	ldr	r0, [pc, #72]	; (80013a8 <cliFlash+0x1bc>)
 8001360:	f001 ff76 	bl	8003250 <cliPrintf>
    cliPrintf("flash erase addr length\n");
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <cliFlash+0x1c0>)
 8001366:	f001 ff73 	bl	8003250 <cliPrintf>
    cliPrintf("flash write addr data\n");
 800136a:	4811      	ldr	r0, [pc, #68]	; (80013b0 <cliFlash+0x1c4>)
 800136c:	f001 ff70 	bl	8003250 <cliPrintf>
  }
}
 8001370:	bf00      	nop
 8001372:	3730      	adds	r7, #48	; 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	0801b748 	.word	0x0801b748
 800137c:	20000000 	.word	0x20000000
 8001380:	0801b750 	.word	0x0801b750
 8001384:	0801b760 	.word	0x0801b760
 8001388:	0801b768 	.word	0x0801b768
 800138c:	0801b778 	.word	0x0801b778
 8001390:	0801b780 	.word	0x0801b780
 8001394:	0801b78c 	.word	0x0801b78c
 8001398:	0801b798 	.word	0x0801b798
 800139c:	0801b7a0 	.word	0x0801b7a0
 80013a0:	0801b7ac 	.word	0x0801b7ac
 80013a4:	0801b7b8 	.word	0x0801b7b8
 80013a8:	0801b7c4 	.word	0x0801b7c4
 80013ac:	0801b7e0 	.word	0x0801b7e0
 80013b0:	0801b7fc 	.word	0x0801b7fc

080013b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b43      	ldr	r3, [pc, #268]	; (80014dc <MX_GPIO_Init+0x128>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a42      	ldr	r2, [pc, #264]	; (80014dc <MX_GPIO_Init+0x128>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b40      	ldr	r3, [pc, #256]	; (80014dc <MX_GPIO_Init+0x128>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <MX_GPIO_Init+0x128>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a3b      	ldr	r2, [pc, #236]	; (80014dc <MX_GPIO_Init+0x128>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b39      	ldr	r3, [pc, #228]	; (80014dc <MX_GPIO_Init+0x128>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b35      	ldr	r3, [pc, #212]	; (80014dc <MX_GPIO_Init+0x128>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a34      	ldr	r2, [pc, #208]	; (80014dc <MX_GPIO_Init+0x128>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b32      	ldr	r3, [pc, #200]	; (80014dc <MX_GPIO_Init+0x128>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <MX_GPIO_Init+0x128>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <MX_GPIO_Init+0x128>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <MX_GPIO_Init+0x128>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	4827      	ldr	r0, [pc, #156]	; (80014e0 <MX_GPIO_Init+0x12c>)
 8001442:	f007 fa6f 	bl	8008924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f248 011c 	movw	r1, #32796	; 0x801c
 800144c:	4825      	ldr	r0, [pc, #148]	; (80014e4 <MX_GPIO_Init+0x130>)
 800144e:	f007 fa69 	bl	8008924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001458:	4823      	ldr	r0, [pc, #140]	; (80014e8 <MX_GPIO_Init+0x134>)
 800145a:	f007 fa63 	bl	8008924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800145e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	481a      	ldr	r0, [pc, #104]	; (80014e0 <MX_GPIO_Init+0x12c>)
 8001478:	f006 ffd4 	bl	8008424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15;
 800147c:	f248 031c 	movw	r3, #32796	; 0x801c
 8001480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	4813      	ldr	r0, [pc, #76]	; (80014e4 <MX_GPIO_Init+0x130>)
 8001496:	f006 ffc5 	bl	8008424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800149a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	480d      	ldr	r0, [pc, #52]	; (80014e8 <MX_GPIO_Init+0x134>)
 80014b4:	f006 ffb6 	bl	8008424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4806      	ldr	r0, [pc, #24]	; (80014e8 <MX_GPIO_Init+0x134>)
 80014ce:	f006 ffa9 	bl	8008424 <HAL_GPIO_Init>

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020400 	.word	0x40020400

080014ec <MX_I2C2_Init>:

__weak I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <MX_I2C2_Init+0x50>)
 80014f2:	4a13      	ldr	r2, [pc, #76]	; (8001540 <MX_I2C2_Init+0x54>)
 80014f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_I2C2_Init+0x50>)
 80014f8:	4a12      	ldr	r2, [pc, #72]	; (8001544 <MX_I2C2_Init+0x58>)
 80014fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_I2C2_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_I2C2_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_I2C2_Init+0x50>)
 800150a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800150e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <MX_I2C2_Init+0x50>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_I2C2_Init+0x50>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <MX_I2C2_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_I2C2_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_I2C2_Init+0x50>)
 800152a:	f007 fa2f 	bl	800898c <HAL_I2C_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001534:	f000 f8a4 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200011e0 	.word	0x200011e0
 8001540:	40005800 	.word	0x40005800
 8001544:	000186a0 	.word	0x000186a0

08001548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154c:	f005 fe9e 	bl	800728c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001550:	f000 f82e 	bl	80015b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001554:	f7ff ff2e 	bl	80013b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001558:	f7ff fd32 	bl	8000fc0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800155c:	f016 fa46 	bl	80179ec <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 8001560:	f000 f894 	bl	800168c <MX_SDIO_SD_Init>
  MX_SPI4_Init();
 8001564:	f000 f8f8 	bl	8001758 <MX_SPI4_Init>
  MX_I2C2_Init();
 8001568:	f7ff ffc0 	bl	80014ec <MX_I2C2_Init>
  MX_SPI1_Init();
 800156c:	f000 f8be 	bl	80016ec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  cliInit();
 8001570:	f001 f93c 	bl	80027ec <cliInit>
  ledInit();
 8001574:	f003 fd20 	bl	8004fb8 <ledInit>
  gpioInit();
 8001578:	f002 fa9c 	bl	8003ab4 <gpioInit>
  flashInit();
 800157c:	f7ff fd50 	bl	8001020 <flashInit>
  spiInit();
 8001580:	f005 fb20 	bl	8006bc4 <spiInit>
  i2cInit();
 8001584:	f002 fbe4 	bl	8003d50 <i2cInit>
  mcp2515Init();
 8001588:	f003 fdc8 	bl	800511c <mcp2515Init>

  if(sdInit() == true)
 800158c:	f004 ff1e 	bl	80063cc <sdInit>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <main+0x52>
  {
  	fatfsInit();
 8001596:	f002 f88f 	bl	80036b8 <fatfsInit>
  }

  lcdInit();
 800159a:	f003 f821 	bl	80045e0 <lcdInit>


  cliOpen(_DEF_UART1, 57600);
 800159e:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80015a2:	2000      	movs	r0, #0
 80015a4:	f001 f96e 	bl	8002884 <cliOpen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	cliMain();
 80015a8:	f001 fa24 	bl	80029f4 <cliMain>
 80015ac:	e7fc      	b.n	80015a8 <main+0x60>
	...

080015b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b094      	sub	sp, #80	; 0x50
 80015b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	2230      	movs	r2, #48	; 0x30
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f018 f87a 	bl	80196b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	4b27      	ldr	r3, [pc, #156]	; (8001678 <SystemClock_Config+0xc8>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	4a26      	ldr	r2, [pc, #152]	; (8001678 <SystemClock_Config+0xc8>)
 80015de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e2:	6413      	str	r3, [r2, #64]	; 0x40
 80015e4:	4b24      	ldr	r3, [pc, #144]	; (8001678 <SystemClock_Config+0xc8>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <SystemClock_Config+0xcc>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a20      	ldr	r2, [pc, #128]	; (800167c <SystemClock_Config+0xcc>)
 80015fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <SystemClock_Config+0xcc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800160c:	2301      	movs	r3, #1
 800160e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001610:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001616:	2302      	movs	r3, #2
 8001618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800161a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800161e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001620:	2319      	movs	r3, #25
 8001622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001624:	23c0      	movs	r3, #192	; 0xc0
 8001626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001628:	2302      	movs	r3, #2
 800162a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800162c:	2304      	movs	r3, #4
 800162e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001630:	f107 0320 	add.w	r3, r7, #32
 8001634:	4618      	mov	r0, r3
 8001636:	f00b fad3 	bl	800cbe0 <HAL_RCC_OscConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001640:	f000 f81e 	bl	8001680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001644:	230f      	movs	r3, #15
 8001646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001648:	2302      	movs	r3, #2
 800164a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	2103      	movs	r1, #3
 8001660:	4618      	mov	r0, r3
 8001662:	f00b fd35 	bl	800d0d0 <HAL_RCC_ClockConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800166c:	f000 f808 	bl	8001680 <Error_Handler>
  }
}
 8001670:	bf00      	nop
 8001672:	3750      	adds	r7, #80	; 0x50
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	40007000 	.word	0x40007000

08001680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
}
 8001686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001688:	e7fe      	b.n	8001688 <Error_Handler+0x8>
	...

0800168c <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_SDIO_SD_Init+0x58>)
 8001692:	4a15      	ldr	r2, [pc, #84]	; (80016e8 <MX_SDIO_SD_Init+0x5c>)
 8001694:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_SDIO_SD_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_SDIO_SD_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <MX_SDIO_SD_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_SDIO_SD_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <MX_SDIO_SD_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_SDIO_SD_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80016ba:	480a      	ldr	r0, [pc, #40]	; (80016e4 <MX_SDIO_SD_Init+0x58>)
 80016bc:	f00b fed4 	bl	800d468 <HAL_SD_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80016c6:	f7ff ffdb 	bl	8001680 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80016ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_SDIO_SD_Init+0x58>)
 80016d0:	f00c fcac 	bl	800e02c <HAL_SD_ConfigWideBusOperation>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 80016da:	f7ff ffd1 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000039c 	.word	0x2000039c
 80016e8:	40012c00 	.word	0x40012c00

080016ec <MX_SPI1_Init>:
__weak SPI_HandleTypeDef hspi4;
__weak DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_SPI1_Init+0x64>)
 80016f2:	4a18      	ldr	r2, [pc, #96]	; (8001754 <MX_SPI1_Init+0x68>)
 80016f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_SPI1_Init+0x64>)
 80016f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_SPI1_Init+0x64>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <MX_SPI1_Init+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_SPI1_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_SPI1_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_SPI1_Init+0x64>)
 8001718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800171c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_SPI1_Init+0x64>)
 8001720:	2218      	movs	r2, #24
 8001722:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <MX_SPI1_Init+0x64>)
 8001726:	2200      	movs	r2, #0
 8001728:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_SPI1_Init+0x64>)
 800172c:	2200      	movs	r2, #0
 800172e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001730:	4b07      	ldr	r3, [pc, #28]	; (8001750 <MX_SPI1_Init+0x64>)
 8001732:	2200      	movs	r2, #0
 8001734:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_SPI1_Init+0x64>)
 8001738:	220a      	movs	r2, #10
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800173c:	4804      	ldr	r0, [pc, #16]	; (8001750 <MX_SPI1_Init+0x64>)
 800173e:	f00d f9d7 	bl	800eaf0 <HAL_SPI_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001748:	f7ff ff9a 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200052a0 	.word	0x200052a0
 8001754:	40013000 	.word	0x40013000

08001758 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_SPI4_Init+0x64>)
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <MX_SPI4_Init+0x68>)
 8001760:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_SPI4_Init+0x64>)
 8001764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001768:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_SPI4_Init+0x64>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_SPI4_Init+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_SPI4_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_SPI4_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_SPI4_Init+0x64>)
 8001784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001788:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_SPI4_Init+0x64>)
 800178c:	2200      	movs	r2, #0
 800178e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <MX_SPI4_Init+0x64>)
 8001792:	2200      	movs	r2, #0
 8001794:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_SPI4_Init+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <MX_SPI4_Init+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_SPI4_Init+0x64>)
 80017a4:	220a      	movs	r2, #10
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_SPI4_Init+0x64>)
 80017aa:	f00d f9a1 	bl	800eaf0 <HAL_SPI_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80017b4:	f7ff ff64 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200052f8 	.word	0x200052f8
 80017c0:	40013400 	.word	0x40013400

080017c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_MspInit+0x4c>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	4a0f      	ldr	r2, [pc, #60]	; (8001810 <HAL_MspInit+0x4c>)
 80017d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d8:	6453      	str	r3, [r2, #68]	; 0x44
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <HAL_MspInit+0x4c>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_MspInit+0x4c>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	4a08      	ldr	r2, [pc, #32]	; (8001810 <HAL_MspInit+0x4c>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6413      	str	r3, [r2, #64]	; 0x40
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_MspInit+0x4c>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001818:	e7fe      	b.n	8001818 <NMI_Handler+0x4>

0800181a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <HardFault_Handler+0x4>

08001820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <MemManage_Handler+0x4>

08001826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <BusFault_Handler+0x4>

0800182c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <UsageFault_Handler+0x4>

08001832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001860:	f005 fd66 	bl	8007330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <I2C2_EV_IRQHandler+0x10>)
 800186e:	f007 fe6f 	bl	8009550 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200011e0 	.word	0x200011e0

0800187c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <I2C2_ER_IRQHandler+0x10>)
 8001882:	f007 ffb8 	bl	80097f6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200011e0 	.word	0x200011e0

08001890 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <SPI1_IRQHandler+0x10>)
 8001896:	f00d fde7 	bl	800f468 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200052a0 	.word	0x200052a0

080018a4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <SDIO_IRQHandler+0x10>)
 80018aa:	f00c f855 	bl	800d958 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	2000039c 	.word	0x2000039c

080018b8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <DMA2_Stream1_IRQHandler+0x10>)
 80018be:	f006 f845 	bl	800794c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20005350 	.word	0x20005350

080018cc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <DMA2_Stream3_IRQHandler+0x10>)
 80018d2:	f006 f83b 	bl	800794c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000420 	.word	0x20000420

080018e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <OTG_FS_IRQHandler+0x10>)
 80018e6:	f00a f86f 	bl	800b9c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200068f4 	.word	0x200068f4

080018f4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <DMA2_Stream6_IRQHandler+0x10>)
 80018fa:	f006 f827 	bl	800794c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000480 	.word	0x20000480

08001908 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <SPI4_IRQHandler+0x10>)
 800190e:	f00d fdab 	bl	800f468 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200052f8 	.word	0x200052f8

0800191c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return 1;
 8001920:	2301      	movs	r3, #1
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_kill>:

int _kill(int pid, int sig)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001936:	f017 ff5b 	bl	80197f0 <__errno>
 800193a:	4603      	mov	r3, r0
 800193c:	2216      	movs	r2, #22
 800193e:	601a      	str	r2, [r3, #0]
  return -1;
 8001940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_exit>:

void _exit (int status)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ffe7 	bl	800192c <_kill>
  while (1) {}    /* Make sure we hang here */
 800195e:	e7fe      	b.n	800195e <_exit+0x12>

08001960 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	e00a      	b.n	8001988 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001972:	f3af 8000 	nop.w
 8001976:	4601      	mov	r1, r0
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	60ba      	str	r2, [r7, #8]
 800197e:	b2ca      	uxtb	r2, r1
 8001980:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	dbf0      	blt.n	8001972 <_read+0x12>
  }

  return len;
 8001990:	687b      	ldr	r3, [r7, #4]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	e009      	b.n	80019c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	60ba      	str	r2, [r7, #8]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dbf1      	blt.n	80019ac <_write+0x12>
  }
  return len;
 80019c8:	687b      	ldr	r3, [r7, #4]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_close>:

int _close(int file)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019fa:	605a      	str	r2, [r3, #4]
  return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <_isatty>:

int _isatty(int file)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a44:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <_sbrk+0x5c>)
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <_sbrk+0x60>)
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a50:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <_sbrk+0x64>)
 8001a5a:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <_sbrk+0x68>)
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d207      	bcs.n	8001a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a6c:	f017 fec0 	bl	80197f0 <__errno>
 8001a70:	4603      	mov	r3, r0
 8001a72:	220c      	movs	r2, #12
 8001a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7a:	e009      	b.n	8001a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a82:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <_sbrk+0x64>)
 8001a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20020000 	.word	0x20020000
 8001a9c:	00000400 	.word	0x00000400
 8001aa0:	200004e0 	.word	0x200004e0
 8001aa4:	20007148 	.word	0x20007148

08001aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <SystemInit+0x20>)
 8001aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <SystemInit+0x20>)
 8001ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ad0:	f7ff ffea 	bl	8001aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad4:	480c      	ldr	r0, [pc, #48]	; (8001b08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ad6:	490d      	ldr	r1, [pc, #52]	; (8001b0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aec:	4c0a      	ldr	r4, [pc, #40]	; (8001b18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001afa:	f017 fe7f 	bl	80197fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001afe:	f7ff fd23 	bl	8001548 <main>
  bx  lr    
 8001b02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b0c:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8001b10:	08028d6c 	.word	0x08028d6c
  ldr r2, =_sbss
 8001b14:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 8001b18:	20007144 	.word	0x20007144

08001b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC_IRQHandler>

08001b1e <delay>:
#include "common.h"



void delay(uint32_t ms)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f005 fc22 	bl	8007370 <HAL_Delay>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <millis>:


uint32_t millis(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001b38:	f005 fc0e 	bl	8007358 <HAL_GetTick>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <SD_CheckStatus+0x80>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 8001b54:	f004 fc8c 	bl	8006470 <sdIsInit>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f083 0301 	eor.w	r3, r3, #1
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <SD_CheckStatus+0x80>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <SD_CheckStatus+0x80>)
 8001b72:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 8001b74:	f004 fc88 	bl	8006488 <sdIsDetected>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f083 0301 	eor.w	r3, r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d007      	beq.n	8001b94 <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <SD_CheckStatus+0x80>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f043 0302 	orr.w	r3, r3, #2
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <SD_CheckStatus+0x80>)
 8001b92:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 8001b94:	200a      	movs	r0, #10
 8001b96:	f004 fcfb 	bl	8006590 <sdIsReady>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f083 0301 	eor.w	r3, r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <SD_CheckStatus+0x80>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SD_CheckStatus+0x80>)
 8001bb4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001bb6:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <SD_CheckStatus+0x80>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b2db      	uxtb	r3, r3
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000044 	.word	0x20000044

08001bc8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <SD_initialize+0x40>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]

  if (sdIsInit() != true)
 8001bd8:	f004 fc4a 	bl	8006470 <sdIsInit>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f083 0301 	eor.w	r3, r3, #1
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <SD_initialize+0x30>
  {
    Stat |= STA_NOINIT;
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <SD_initialize+0x40>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <SD_initialize+0x40>)
 8001bf6:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <SD_initialize+0x40>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b2db      	uxtb	r3, r3
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000044 	.word	0x20000044

08001c0c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff93 	bl	8001b44 <SD_CheckStatus>
 8001c1e:	4603      	mov	r3, r0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	4603      	mov	r3, r0
 8001c36:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	75fb      	strb	r3, [r7, #23]


  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 8001c3c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f004 fcc3 	bl	80065d0 <sdReadBlocks>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <SD_read+0x2c>
  {
    res = RES_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 8001c72:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f004 fcf2 	bl	8006664 <sdWriteBlocks>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <SD_write+0x2c>
  {
    res = RES_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	603a      	str	r2, [r7, #0]
 8001c9e:	71fb      	strb	r3, [r7, #7]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001caa:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <SD_ioctl+0xac>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <SD_ioctl+0x28>
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e03c      	b.n	8001d36 <SD_ioctl+0xa2>

  switch (cmd)
 8001cbc:	79bb      	ldrb	r3, [r7, #6]
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d834      	bhi.n	8001d2c <SD_ioctl+0x98>
 8001cc2:	a201      	add	r2, pc, #4	; (adr r2, 8001cc8 <SD_ioctl+0x34>)
 8001cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc8:	08001cd9 	.word	0x08001cd9
 8001ccc:	08001ce1 	.word	0x08001ce1
 8001cd0:	08001cf9 	.word	0x08001cf9
 8001cd4:	08001d13 	.word	0x08001d13
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001cde:	e028      	b.n	8001d32 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    sdGetInfo(&sd_info);
 8001ce0:	f107 0308 	add.w	r3, r7, #8
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f004 fbe5 	bl	80064b4 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 8001cea:	6a3a      	ldr	r2, [r7, #32]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001cf6:	e01c      	b.n	8001d32 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    sdGetInfo(&sd_info);
 8001cf8:	f107 0308 	add.w	r3, r7, #8
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f004 fbd9 	bl	80064b4 <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001d10:	e00f      	b.n	8001d32 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    sdGetInfo(&sd_info);
 8001d12:	f107 0308 	add.w	r3, r7, #8
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 fbcc 	bl	80064b4 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	0a5a      	lsrs	r2, r3, #9
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001d2a:	e002      	b.n	8001d32 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8001d32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3730      	adds	r7, #48	; 0x30
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000044 	.word	0x20000044

08001d44 <hanFontLoad>:
void hanWanFontLoad(char *HanCode, han_font_t *FontPtr);
void hanUniFontLoad(char *HanCode, han_font_t *FontPtr);
uint16_t hanCnvCodeWan2Johab(uint16_t WanCode);

uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
	// buffer reset
	memset(FontPtr->FontBuffer, 0x00, 32);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	3306      	adds	r3, #6
 8001d52:	2220      	movs	r2, #32
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f017 fcae 	bl	80196b8 <memset>

	FontPtr->Code_Type = PHAN_NULL_CODE;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	809a      	strh	r2, [r3, #4]

	// Identifying if it's a Korean code
	if(!HanCode[0] || HanCode[0] == 0x0A)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <hanFontLoad+0x2e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b0a      	cmp	r3, #10
 8001d70:	d107      	bne.n	8001d82 <hanFontLoad+0x3e>
	{
		FontPtr->Code_Type = PHAN_END_CODE;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2204      	movs	r2, #4
 8001d76:	809a      	strh	r2, [r3, #4]
		FontPtr->Size_Char = 1;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	805a      	strh	r2, [r3, #2]
		return PHAN_END_CODE;
 8001d7e:	2304      	movs	r3, #4
 8001d80:	e03b      	b.n	8001dfa <hanFontLoad+0xb6>
	}
	else if(HanCode[0] & 0x80)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	b25b      	sxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	da2b      	bge.n	8001de4 <hanFontLoad+0xa0>
	{
		uint32_t utf8_code;

		utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	041a      	lsls	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3301      	adds	r3, #1
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	3202      	adds	r2, #2
 8001da0:	7812      	ldrb	r2, [r2, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

		if(utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4a16      	ldr	r2, [pc, #88]	; (8001e04 <hanFontLoad+0xc0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d30e      	bcc.n	8001dcc <hanFontLoad+0x88>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4a15      	ldr	r2, [pc, #84]	; (8001e08 <hanFontLoad+0xc4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d80a      	bhi.n	8001dcc <hanFontLoad+0x88>
		{
			FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2201      	movs	r2, #1
 8001dba:	809a      	strh	r2, [r3, #4]
			FontPtr->Size_Char = 3;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	805a      	strh	r2, [r3, #2]
			hanUniFontLoad(HanCode, FontPtr);
 8001dc2:	6839      	ldr	r1, [r7, #0]
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f91f 	bl	8002008 <hanUniFontLoad>
 8001dca:	e009      	b.n	8001de0 <hanFontLoad+0x9c>
		}
		else
		{
			FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	809a      	strh	r2, [r3, #4]
			FontPtr->Size_Char = 2;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	805a      	strh	r2, [r3, #2]
			hanWanFontLoad(HanCode, FontPtr);
 8001dd8:	6839      	ldr	r1, [r7, #0]
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f816 	bl	8001e0c <hanWanFontLoad>
		}

		return PHAN_HANGUL_CODE;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e00a      	b.n	8001dfa <hanFontLoad+0xb6>
	}
	else // eng code
	{
		FontPtr->Code_Type = PHAN_ENG_CODE;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2202      	movs	r2, #2
 8001de8:	809a      	strh	r2, [r3, #4]
		FontPtr->Size_Char = 1;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2201      	movs	r2, #1
 8001dee:	805a      	strh	r2, [r3, #2]
		hanEngFontLoad(HanCode, FontPtr);
 8001df0:	6839      	ldr	r1, [r7, #0]
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fa30 	bl	8002258 <hanEngFontLoad>
		return PHAN_ENG_CODE;
 8001df8:	2302      	movs	r3, #2
	}

	return FontPtr->Code_Type;
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	00eab080 	.word	0x00eab080
 8001e08:	00ed9fb0 	.word	0x00ed9fb0

08001e0c <hanWanFontLoad>:

// 완성형 한글 코드를 기반으로 한글 폰트를 로드
void hanWanFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
	uint16_t wHanCode;

	// static declaration 은 속도를 높이기 위한것임.
	static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType, uJonType;

	wHanCode = (uint16_t)HanCode[0]<<8 | ((uint16_t)HanCode[1] & 0x00FF);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	b21a      	sxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3301      	adds	r3, #1
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	4313      	orrs	r3, r2
 8001e28:	b21b      	sxth	r3, r3
 8001e2a:	81bb      	strh	r3, [r7, #12]
	wHanCode = hanCnvCodeWan2Johab(wHanCode);
 8001e2c:	89bb      	ldrh	r3, [r7, #12]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fa3c 	bl	80022ac <hanCnvCodeWan2Johab>
 8001e34:	4603      	mov	r3, r0
 8001e36:	81bb      	strh	r3, [r7, #12]

	// seperate phoneme code
	uChosung = (wHanCode>>10) & 0x001F; // Chosung code
 8001e38:	89bb      	ldrh	r3, [r7, #12]
 8001e3a:	0a9b      	lsrs	r3, r3, #10
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <hanWanFontLoad+0x1c8>)
 8001e46:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) & 0x001F;//Joongsung code
 8001e48:	89bb      	ldrh	r3, [r7, #12]
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	4b60      	ldr	r3, [pc, #384]	; (8001fd8 <hanWanFontLoad+0x1cc>)
 8001e56:	801a      	strh	r2, [r3, #0]
	uJongsung  = wHanCode & 0x001F;    //Jongsung code
 8001e58:	89bb      	ldrh	r3, [r7, #12]
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	4b5e      	ldr	r3, [pc, #376]	; (8001fdc <hanWanFontLoad+0x1d0>)
 8001e62:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 8001e64:	4b5b      	ldr	r3, [pc, #364]	; (8001fd4 <hanWanFontLoad+0x1c8>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b5d      	ldr	r3, [pc, #372]	; (8001fe0 <hanWanFontLoad+0x1d4>)
 8001e6c:	5c9b      	ldrb	r3, [r3, r2]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b58      	ldr	r3, [pc, #352]	; (8001fd4 <hanWanFontLoad+0x1c8>)
 8001e72:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 8001e74:	4b58      	ldr	r3, [pc, #352]	; (8001fd8 <hanWanFontLoad+0x1cc>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b5a      	ldr	r3, [pc, #360]	; (8001fe4 <hanWanFontLoad+0x1d8>)
 8001e7c:	5c9b      	ldrb	r3, [r3, r2]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b55      	ldr	r3, [pc, #340]	; (8001fd8 <hanWanFontLoad+0x1cc>)
 8001e82:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8001e84:	4b55      	ldr	r3, [pc, #340]	; (8001fdc <hanWanFontLoad+0x1d0>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b57      	ldr	r3, [pc, #348]	; (8001fe8 <hanWanFontLoad+0x1dc>)
 8001e8c:	5c9b      	ldrb	r3, [r3, r2]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	4b52      	ldr	r3, [pc, #328]	; (8001fdc <hanWanFontLoad+0x1d0>)
 8001e92:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8001e94:	4b51      	ldr	r3, [pc, #324]	; (8001fdc <hanWanFontLoad+0x1d0>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d006      	beq.n	8001eaa <hanWanFontLoad+0x9e>
 8001e9c:	4b4e      	ldr	r3, [pc, #312]	; (8001fd8 <hanWanFontLoad+0x1cc>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b52      	ldr	r3, [pc, #328]	; (8001fec <hanWanFontLoad+0x1e0>)
 8001ea4:	5c9b      	ldrb	r3, [r3, r2]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	e005      	b.n	8001eb6 <hanWanFontLoad+0xaa>
 8001eaa:	4b4b      	ldr	r3, [pc, #300]	; (8001fd8 <hanWanFontLoad+0x1cc>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b4f      	ldr	r3, [pc, #316]	; (8001ff0 <hanWanFontLoad+0x1e4>)
 8001eb2:	5c9b      	ldrb	r3, [r3, r2]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	4a4f      	ldr	r2, [pc, #316]	; (8001ff4 <hanWanFontLoad+0x1e8>)
 8001eb8:	8013      	strh	r3, [r2, #0]

  //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 || uChosung == 16 ) ? 0: 1) + (uJongsung ? 2 : 0);
 8001eba:	4b46      	ldr	r3, [pc, #280]	; (8001fd4 <hanWanFontLoad+0x1c8>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d009      	beq.n	8001ed6 <hanWanFontLoad+0xca>
 8001ec2:	4b44      	ldr	r3, [pc, #272]	; (8001fd4 <hanWanFontLoad+0x1c8>)
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d005      	beq.n	8001ed6 <hanWanFontLoad+0xca>
 8001eca:	4b42      	ldr	r3, [pc, #264]	; (8001fd4 <hanWanFontLoad+0x1c8>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	2b10      	cmp	r3, #16
 8001ed0:	d001      	beq.n	8001ed6 <hanWanFontLoad+0xca>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <hanWanFontLoad+0xcc>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4a40      	ldr	r2, [pc, #256]	; (8001fdc <hanWanFontLoad+0x1d0>)
 8001edc:	8812      	ldrh	r2, [r2, #0]
 8001ede:	2a00      	cmp	r2, #0
 8001ee0:	d001      	beq.n	8001ee6 <hanWanFontLoad+0xda>
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	e000      	b.n	8001ee8 <hanWanFontLoad+0xdc>
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	4413      	add	r3, r2
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	4b42      	ldr	r3, [pc, #264]	; (8001ff8 <hanWanFontLoad+0x1ec>)
 8001eee:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8001ef0:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <hanWanFontLoad+0x1cc>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <hanWanFontLoad+0x1f0>)
 8001ef8:	5c9b      	ldrb	r3, [r3, r2]
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	4b40      	ldr	r3, [pc, #256]	; (8002000 <hanWanFontLoad+0x1f4>)
 8001efe:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	81fb      	strh	r3, [r7, #14]
 8001f04:	e035      	b.n	8001f72 <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 8001f06:	4b3b      	ldr	r3, [pc, #236]	; (8001ff4 <hanWanFontLoad+0x1e8>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <hanWanFontLoad+0x1c8>)
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	441a      	add	r2, r3
 8001f1c:	89fb      	ldrh	r3, [r7, #14]
 8001f1e:	4939      	ldr	r1, [pc, #228]	; (8002004 <hanWanFontLoad+0x1f8>)
 8001f20:	0152      	lsls	r2, r2, #5
 8001f22:	4413      	add	r3, r2
 8001f24:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001f28:	89fb      	ldrh	r3, [r7, #14]
 8001f2a:	b2d1      	uxtb	r1, r2
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	460a      	mov	r2, r1
 8001f32:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8001f34:	89fb      	ldrh	r3, [r7, #14]
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	4413      	add	r3, r2
 8001f3a:	7999      	ldrb	r1, [r3, #6]
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <hanWanFontLoad+0x1ec>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	2316      	movs	r3, #22
 8001f44:	fb02 f303 	mul.w	r3, r2, r3
 8001f48:	33a0      	adds	r3, #160	; 0xa0
 8001f4a:	4a23      	ldr	r2, [pc, #140]	; (8001fd8 <hanWanFontLoad+0x1cc>)
 8001f4c:	8812      	ldrh	r2, [r2, #0]
 8001f4e:	441a      	add	r2, r3
 8001f50:	89fb      	ldrh	r3, [r7, #14]
 8001f52:	482c      	ldr	r0, [pc, #176]	; (8002004 <hanWanFontLoad+0x1f8>)
 8001f54:	0152      	lsls	r2, r2, #5
 8001f56:	4413      	add	r3, r2
 8001f58:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	89fb      	ldrh	r3, [r7, #14]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	b2d1      	uxtb	r1, r2
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	460a      	mov	r2, r1
 8001f6a:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8001f6c:	89fb      	ldrh	r3, [r7, #14]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	81fb      	strh	r3, [r7, #14]
 8001f72:	89fb      	ldrh	r3, [r7, #14]
 8001f74:	2b1f      	cmp	r3, #31
 8001f76:	d9c6      	bls.n	8001f06 <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <hanWanFontLoad+0x1d0>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d025      	beq.n	8001fcc <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8001f80:	2300      	movs	r3, #0
 8001f82:	81fb      	strh	r3, [r7, #14]
 8001f84:	e01f      	b.n	8001fc6 <hanWanFontLoad+0x1ba>
 8001f86:	89fb      	ldrh	r3, [r7, #14]
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	7999      	ldrb	r1, [r3, #6]
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <hanWanFontLoad+0x1f4>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	33f8      	adds	r3, #248	; 0xf8
 8001f9e:	4a0f      	ldr	r2, [pc, #60]	; (8001fdc <hanWanFontLoad+0x1d0>)
 8001fa0:	8812      	ldrh	r2, [r2, #0]
 8001fa2:	441a      	add	r2, r3
 8001fa4:	89fb      	ldrh	r3, [r7, #14]
 8001fa6:	4817      	ldr	r0, [pc, #92]	; (8002004 <hanWanFontLoad+0x1f8>)
 8001fa8:	0152      	lsls	r2, r2, #5
 8001faa:	4413      	add	r3, r2
 8001fac:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	89fb      	ldrh	r3, [r7, #14]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	b2d1      	uxtb	r1, r2
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	460a      	mov	r2, r1
 8001fbe:	719a      	strb	r2, [r3, #6]
 8001fc0:	89fb      	ldrh	r3, [r7, #14]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	81fb      	strh	r3, [r7, #14]
 8001fc6:	89fb      	ldrh	r3, [r7, #14]
 8001fc8:	2b1f      	cmp	r3, #31
 8001fca:	d9dc      	bls.n	8001f86 <hanWanFontLoad+0x17a>
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200004e4 	.word	0x200004e4
 8001fd8:	200004e6 	.word	0x200004e6
 8001fdc:	200004e8 	.word	0x200004e8
 8001fe0:	0801dce8 	.word	0x0801dce8
 8001fe4:	0801dd08 	.word	0x0801dd08
 8001fe8:	0801dd28 	.word	0x0801dd28
 8001fec:	0801ddc0 	.word	0x0801ddc0
 8001ff0:	0801dda8 	.word	0x0801dda8
 8001ff4:	200004ea 	.word	0x200004ea
 8001ff8:	200004ec 	.word	0x200004ec
 8001ffc:	0801ddd8 	.word	0x0801ddd8
 8002000:	200004ee 	.word	0x200004ee
 8002004:	080202c0 	.word	0x080202c0

08002008 <hanUniFontLoad>:

// 유니코드를 기반으로 한글 폰트를 로드
void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint16_t utf16;

  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	031b      	lsls	r3, r3, #12
 8002018:	b21a      	sxth	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3301      	adds	r3, #1
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	019b      	lsls	r3, r3, #6
 8002022:	b21b      	sxth	r3, r3
 8002024:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b21a      	sxth	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3302      	adds	r3, #2
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b21b      	sxth	r3, r3
 8002036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800203a:	b21b      	sxth	r3, r3
 800203c:	4313      	orrs	r3, r2
 800203e:	b21b      	sxth	r3, r3
 8002040:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  utf16 -= 0xac00;
 8002042:	89bb      	ldrh	r3, [r7, #12]
 8002044:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8002048:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 800204a:	89ba      	ldrh	r2, [r7, #12]
 800204c:	0893      	lsrs	r3, r2, #2
 800204e:	4973      	ldr	r1, [pc, #460]	; (800221c <hanUniFontLoad+0x214>)
 8002050:	fba1 3103 	umull	r3, r1, r1, r3
 8002054:	460b      	mov	r3, r1
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	1a5b      	subs	r3, r3, r1
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	b29a      	uxth	r2, r3
 8002060:	4b6f      	ldr	r3, [pc, #444]	; (8002220 <hanUniFontLoad+0x218>)
 8002062:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 8002064:	89bb      	ldrh	r3, [r7, #12]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	4a6c      	ldr	r2, [pc, #432]	; (800221c <hanUniFontLoad+0x214>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 8002070:	89b9      	ldrh	r1, [r7, #12]
 8002072:	4b6c      	ldr	r3, [pc, #432]	; (8002224 <hanUniFontLoad+0x21c>)
 8002074:	fba3 2301 	umull	r2, r3, r3, r1
 8002078:	1aca      	subs	r2, r1, r3
 800207a:	0852      	lsrs	r2, r2, #1
 800207c:	4413      	add	r3, r2
 800207e:	091a      	lsrs	r2, r3, #4
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	00da      	lsls	r2, r3, #3
 8002088:	1ad2      	subs	r2, r2, r3
 800208a:	1a8b      	subs	r3, r1, r2
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b66      	ldr	r3, [pc, #408]	; (8002228 <hanUniFontLoad+0x220>)
 8002090:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 8002092:	89ba      	ldrh	r2, [r7, #12]
 8002094:	4b63      	ldr	r3, [pc, #396]	; (8002224 <hanUniFontLoad+0x21c>)
 8002096:	fba3 1302 	umull	r1, r3, r3, r2
 800209a:	1ad2      	subs	r2, r2, r3
 800209c:	0852      	lsrs	r2, r2, #1
 800209e:	4413      	add	r3, r2
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	4b61      	ldr	r3, [pc, #388]	; (800222c <hanUniFontLoad+0x224>)
 80020a6:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 80020a8:	4b60      	ldr	r3, [pc, #384]	; (800222c <hanUniFontLoad+0x224>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b60      	ldr	r3, [pc, #384]	; (8002230 <hanUniFontLoad+0x228>)
 80020b0:	5c9b      	ldrb	r3, [r3, r2]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	4b5d      	ldr	r3, [pc, #372]	; (800222c <hanUniFontLoad+0x224>)
 80020b6:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 80020b8:	4b5b      	ldr	r3, [pc, #364]	; (8002228 <hanUniFontLoad+0x220>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <hanUniFontLoad+0x22c>)
 80020c0:	5c9b      	ldrb	r3, [r3, r2]
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	4b58      	ldr	r3, [pc, #352]	; (8002228 <hanUniFontLoad+0x220>)
 80020c6:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 80020c8:	4b55      	ldr	r3, [pc, #340]	; (8002220 <hanUniFontLoad+0x218>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b5a      	ldr	r3, [pc, #360]	; (8002238 <hanUniFontLoad+0x230>)
 80020d0:	5c9b      	ldrb	r3, [r3, r2]
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	4b52      	ldr	r3, [pc, #328]	; (8002220 <hanUniFontLoad+0x218>)
 80020d6:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 80020d8:	4b51      	ldr	r3, [pc, #324]	; (8002220 <hanUniFontLoad+0x218>)
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d006      	beq.n	80020ee <hanUniFontLoad+0xe6>
 80020e0:	4b51      	ldr	r3, [pc, #324]	; (8002228 <hanUniFontLoad+0x220>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b55      	ldr	r3, [pc, #340]	; (800223c <hanUniFontLoad+0x234>)
 80020e8:	5c9b      	ldrb	r3, [r3, r2]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	e005      	b.n	80020fa <hanUniFontLoad+0xf2>
 80020ee:	4b4e      	ldr	r3, [pc, #312]	; (8002228 <hanUniFontLoad+0x220>)
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b52      	ldr	r3, [pc, #328]	; (8002240 <hanUniFontLoad+0x238>)
 80020f6:	5c9b      	ldrb	r3, [r3, r2]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	4a52      	ldr	r2, [pc, #328]	; (8002244 <hanUniFontLoad+0x23c>)
 80020fc:	8013      	strh	r3, [r2, #0]

  //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 80020fe:	4b4b      	ldr	r3, [pc, #300]	; (800222c <hanUniFontLoad+0x224>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d009      	beq.n	800211a <hanUniFontLoad+0x112>
 8002106:	4b49      	ldr	r3, [pc, #292]	; (800222c <hanUniFontLoad+0x224>)
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d005      	beq.n	800211a <hanUniFontLoad+0x112>
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <hanUniFontLoad+0x224>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	2b10      	cmp	r3, #16
 8002114:	d001      	beq.n	800211a <hanUniFontLoad+0x112>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <hanUniFontLoad+0x114>
 800211a:	2300      	movs	r3, #0
 800211c:	b29b      	uxth	r3, r3
 800211e:	4a40      	ldr	r2, [pc, #256]	; (8002220 <hanUniFontLoad+0x218>)
 8002120:	8812      	ldrh	r2, [r2, #0]
 8002122:	2a00      	cmp	r2, #0
 8002124:	d001      	beq.n	800212a <hanUniFontLoad+0x122>
 8002126:	2202      	movs	r2, #2
 8002128:	e000      	b.n	800212c <hanUniFontLoad+0x124>
 800212a:	2200      	movs	r2, #0
 800212c:	4413      	add	r3, r2
 800212e:	b29a      	uxth	r2, r3
 8002130:	4b45      	ldr	r3, [pc, #276]	; (8002248 <hanUniFontLoad+0x240>)
 8002132:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8002134:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <hanUniFontLoad+0x220>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b44      	ldr	r3, [pc, #272]	; (800224c <hanUniFontLoad+0x244>)
 800213c:	5c9b      	ldrb	r3, [r3, r2]
 800213e:	b29a      	uxth	r2, r3
 8002140:	4b43      	ldr	r3, [pc, #268]	; (8002250 <hanUniFontLoad+0x248>)
 8002142:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8002144:	2300      	movs	r3, #0
 8002146:	81fb      	strh	r3, [r7, #14]
 8002148:	e035      	b.n	80021b6 <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 800214a:	4b3e      	ldr	r3, [pc, #248]	; (8002244 <hanUniFontLoad+0x23c>)
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	461a      	mov	r2, r3
 800215a:	4b34      	ldr	r3, [pc, #208]	; (800222c <hanUniFontLoad+0x224>)
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	441a      	add	r2, r3
 8002160:	89fb      	ldrh	r3, [r7, #14]
 8002162:	493c      	ldr	r1, [pc, #240]	; (8002254 <hanUniFontLoad+0x24c>)
 8002164:	0152      	lsls	r2, r2, #5
 8002166:	4413      	add	r3, r2
 8002168:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800216c:	89fb      	ldrh	r3, [r7, #14]
 800216e:	b2d1      	uxtb	r1, r2
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	4413      	add	r3, r2
 8002174:	460a      	mov	r2, r1
 8002176:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 8002178:	89fb      	ldrh	r3, [r7, #14]
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	4413      	add	r3, r2
 800217e:	7999      	ldrb	r1, [r3, #6]
 8002180:	4b31      	ldr	r3, [pc, #196]	; (8002248 <hanUniFontLoad+0x240>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	2316      	movs	r3, #22
 8002188:	fb02 f303 	mul.w	r3, r2, r3
 800218c:	33a0      	adds	r3, #160	; 0xa0
 800218e:	4a26      	ldr	r2, [pc, #152]	; (8002228 <hanUniFontLoad+0x220>)
 8002190:	8812      	ldrh	r2, [r2, #0]
 8002192:	441a      	add	r2, r3
 8002194:	89fb      	ldrh	r3, [r7, #14]
 8002196:	482f      	ldr	r0, [pc, #188]	; (8002254 <hanUniFontLoad+0x24c>)
 8002198:	0152      	lsls	r2, r2, #5
 800219a:	4413      	add	r3, r2
 800219c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	89fb      	ldrh	r3, [r7, #14]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	b2d1      	uxtb	r1, r2
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	460a      	mov	r2, r1
 80021ae:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 80021b0:	89fb      	ldrh	r3, [r7, #14]
 80021b2:	3301      	adds	r3, #1
 80021b4:	81fb      	strh	r3, [r7, #14]
 80021b6:	89fb      	ldrh	r3, [r7, #14]
 80021b8:	2b1f      	cmp	r3, #31
 80021ba:	d9c6      	bls.n	800214a <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <hanUniFontLoad+0x218>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d025      	beq.n	8002210 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 80021c4:	2300      	movs	r3, #0
 80021c6:	81fb      	strh	r3, [r7, #14]
 80021c8:	e01f      	b.n	800220a <hanUniFontLoad+0x202>
 80021ca:	89fb      	ldrh	r3, [r7, #14]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	7999      	ldrb	r1, [r3, #6]
 80021d2:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <hanUniFontLoad+0x248>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	33f8      	adds	r3, #248	; 0xf8
 80021e2:	4a0f      	ldr	r2, [pc, #60]	; (8002220 <hanUniFontLoad+0x218>)
 80021e4:	8812      	ldrh	r2, [r2, #0]
 80021e6:	441a      	add	r2, r3
 80021e8:	89fb      	ldrh	r3, [r7, #14]
 80021ea:	481a      	ldr	r0, [pc, #104]	; (8002254 <hanUniFontLoad+0x24c>)
 80021ec:	0152      	lsls	r2, r2, #5
 80021ee:	4413      	add	r3, r2
 80021f0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	89fb      	ldrh	r3, [r7, #14]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	b2d1      	uxtb	r1, r2
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	460a      	mov	r2, r1
 8002202:	719a      	strb	r2, [r3, #6]
 8002204:	89fb      	ldrh	r3, [r7, #14]
 8002206:	3301      	adds	r3, #1
 8002208:	81fb      	strh	r3, [r7, #14]
 800220a:	89fb      	ldrh	r3, [r7, #14]
 800220c:	2b1f      	cmp	r3, #31
 800220e:	d9dc      	bls.n	80021ca <hanUniFontLoad+0x1c2>
  }
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	24924925 	.word	0x24924925
 8002220:	200004f0 	.word	0x200004f0
 8002224:	86186187 	.word	0x86186187
 8002228:	200004f2 	.word	0x200004f2
 800222c:	200004f4 	.word	0x200004f4
 8002230:	0801dd48 	.word	0x0801dd48
 8002234:	0801dd68 	.word	0x0801dd68
 8002238:	0801dd88 	.word	0x0801dd88
 800223c:	0801ddc0 	.word	0x0801ddc0
 8002240:	0801dda8 	.word	0x0801dda8
 8002244:	200004f6 	.word	0x200004f6
 8002248:	200004f8 	.word	0x200004f8
 800224c:	0801ddd8 	.word	0x0801ddd8
 8002250:	200004fa 	.word	0x200004fa
 8002254:	080202c0 	.word	0x080202c0

08002258 <hanEngFontLoad>:

// 영문 코드를 기반으로 영문 폰트를 로드
void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 8002268:	7b7b      	ldrb	r3, [r7, #13]
 800226a:	3b20      	subs	r3, #32
 800226c:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 800226e:	2300      	movs	r3, #0
 8002270:	81fb      	strh	r3, [r7, #14]
 8002272:	e00f      	b.n	8002294 <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 8002274:	7b7a      	ldrb	r2, [r7, #13]
 8002276:	89fb      	ldrh	r3, [r7, #14]
 8002278:	490b      	ldr	r1, [pc, #44]	; (80022a8 <hanEngFontLoad+0x50>)
 800227a:	0112      	lsls	r2, r2, #4
 800227c:	4413      	add	r3, r2
 800227e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8002282:	89fb      	ldrh	r3, [r7, #14]
 8002284:	b2d1      	uxtb	r1, r2
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	4413      	add	r3, r2
 800228a:	460a      	mov	r2, r1
 800228c:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 800228e:	89fb      	ldrh	r3, [r7, #14]
 8002290:	3301      	adds	r3, #1
 8002292:	81fb      	strh	r3, [r7, #14]
 8002294:	89fb      	ldrh	r3, [r7, #14]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	d9ec      	bls.n	8002274 <hanEngFontLoad+0x1c>
  }
}
 800229a:	bf00      	nop
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	0801c4e8 	.word	0x0801c4e8

080022ac <hanCnvCodeWan2Johab>:

// 완성형 코드를 조합형 코드로 변환
uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 80022c2:	89fb      	ldrh	r3, [r7, #14]
 80022c4:	3bb0      	subs	r3, #176	; 0xb0
 80022c6:	225e      	movs	r2, #94	; 0x5e
 80022c8:	fb03 f202 	mul.w	r2, r3, r2
 80022cc:	89bb      	ldrh	r3, [r7, #12]
 80022ce:	3ba1      	subs	r3, #161	; 0xa1
 80022d0:	4413      	add	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 80022d4:	4a05      	ldr	r2, [pc, #20]	; (80022ec <hanCnvCodeWan2Johab+0x40>)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022dc:	b29b      	uxth	r3, r3
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	0801de00 	.word	0x0801de00

080022f0 <ssd1306Init>:
static void ssd1306DrawPixel(uint8_t x, uint8_t y, uint16_t color);

static uint8_t ssd1306_buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];

bool ssd1306Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
	bool ret;

	ret = ssd1306Reset();
 80022f6:	f000 f84f 	bl	8002398 <ssd1306Reset>
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]

	return ret;
 80022fe:	79fb      	ldrb	r3, [r7, #7]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <ssd1306InitDriver>:

bool ssd1306InitDriver(lcd_driver_t *p_driver)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	p_driver->init = ssd1306Init;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <ssd1306InitDriver+0x40>)
 8002314:	601a      	str	r2, [r3, #0]
	p_driver->reset = ssd1306Reset;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a0c      	ldr	r2, [pc, #48]	; (800234c <ssd1306InitDriver+0x44>)
 800231a:	605a      	str	r2, [r3, #4]
	p_driver->setWindow = ssd1306SetWindow;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <ssd1306InitDriver+0x48>)
 8002320:	609a      	str	r2, [r3, #8]
	p_driver->getWidth = ssd1306GetWidth;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <ssd1306InitDriver+0x4c>)
 8002326:	60da      	str	r2, [r3, #12]
	p_driver->getHeight = ssd1306GetHeight;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <ssd1306InitDriver+0x50>)
 800232c:	611a      	str	r2, [r3, #16]
	p_driver->setCallBack = ssd1306SetCallBack;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a0a      	ldr	r2, [pc, #40]	; (800235c <ssd1306InitDriver+0x54>)
 8002332:	615a      	str	r2, [r3, #20]
	p_driver->sendBuffer = ssd1306SendBuffer;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <ssd1306InitDriver+0x58>)
 8002338:	619a      	str	r2, [r3, #24]
	return true;
 800233a:	2301      	movs	r3, #1
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	080022f1 	.word	0x080022f1
 800234c:	08002399 	.word	0x08002399
 8002350:	080024a5 	.word	0x080024a5
 8002354:	080024bf 	.word	0x080024bf
 8002358:	080024cf 	.word	0x080024cf
 800235c:	08002555 	.word	0x08002555
 8002360:	080024e1 	.word	0x080024e1

08002364 <ssd1306WriteCmd>:

bool ssd1306WriteCmd(uint8_t cmd_data)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af02      	add	r7, sp, #8
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
	return i2cWriteByte(i2c_ch, i2c_dev, 0x00, cmd_data, 10);
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <ssd1306WriteCmd+0x2c>)
 8002370:	7818      	ldrb	r0, [r3, #0]
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <ssd1306WriteCmd+0x30>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b299      	uxth	r1, r3
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	220a      	movs	r2, #10
 800237c:	9200      	str	r2, [sp, #0]
 800237e:	2200      	movs	r2, #0
 8002380:	f001 fe92 	bl	80040a8 <i2cWriteByte>
 8002384:	4603      	mov	r3, r0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200004fc 	.word	0x200004fc
 8002394:	20000068 	.word	0x20000068

08002398 <ssd1306Reset>:

bool ssd1306Reset(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
	bool ret;

	ret = i2cBegin(i2c_ch, 800);
 800239e:	4b3f      	ldr	r3, [pc, #252]	; (800249c <ssd1306Reset+0x104>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80023a6:	4618      	mov	r0, r3
 80023a8:	f001 fd06 	bl	8003db8 <i2cBegin>
 80023ac:	4603      	mov	r3, r0
 80023ae:	71fb      	strb	r3, [r7, #7]

	if(ret != true)
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	f083 0301 	eor.w	r3, r3, #1
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <ssd1306Reset+0x28>
	{
		return false;
 80023bc:	2300      	movs	r3, #0
 80023be:	e069      	b.n	8002494 <ssd1306Reset+0xfc>
	}

	if(i2cIsDeviceReady(i2c_ch, i2c_dev) != true)
 80023c0:	4b36      	ldr	r3, [pc, #216]	; (800249c <ssd1306Reset+0x104>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4a36      	ldr	r2, [pc, #216]	; (80024a0 <ssd1306Reset+0x108>)
 80023c6:	7812      	ldrb	r2, [r2, #0]
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f001 fdf0 	bl	8003fb0 <i2cIsDeviceReady>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f083 0301 	eor.w	r3, r3, #1
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <ssd1306Reset+0x48>
	{
		return false;
 80023dc:	2300      	movs	r3, #0
 80023de:	e059      	b.n	8002494 <ssd1306Reset+0xfc>
	}

	/* Init LCD */
	  ssd1306WriteCmd(0xAE); //display off
 80023e0:	20ae      	movs	r0, #174	; 0xae
 80023e2:	f7ff ffbf 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x20); //Set Memory Addressing Mode
 80023e6:	2020      	movs	r0, #32
 80023e8:	f7ff ffbc 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80023ec:	2010      	movs	r0, #16
 80023ee:	f7ff ffb9 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80023f2:	20b0      	movs	r0, #176	; 0xb0
 80023f4:	f7ff ffb6 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xC8); //Set COM Output Scan Direction
 80023f8:	20c8      	movs	r0, #200	; 0xc8
 80023fa:	f7ff ffb3 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x00); //---set low column address
 80023fe:	2000      	movs	r0, #0
 8002400:	f7ff ffb0 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x10); //---set high column address
 8002404:	2010      	movs	r0, #16
 8002406:	f7ff ffad 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x40); //--set start line address
 800240a:	2040      	movs	r0, #64	; 0x40
 800240c:	f7ff ffaa 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x81); //--set contrast control register
 8002410:	2081      	movs	r0, #129	; 0x81
 8002412:	f7ff ffa7 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xFF);
 8002416:	20ff      	movs	r0, #255	; 0xff
 8002418:	f7ff ffa4 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xA1); //--set segment re-map 0 to 127
 800241c:	20a1      	movs	r0, #161	; 0xa1
 800241e:	f7ff ffa1 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xA6); //--set normal display
 8002422:	20a6      	movs	r0, #166	; 0xa6
 8002424:	f7ff ff9e 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xA8); //--set multiplex ratio(1 to 64)
 8002428:	20a8      	movs	r0, #168	; 0xa8
 800242a:	f7ff ff9b 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x3F); //
 800242e:	203f      	movs	r0, #63	; 0x3f
 8002430:	f7ff ff98 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002434:	20a4      	movs	r0, #164	; 0xa4
 8002436:	f7ff ff95 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xD3); //-set display offset
 800243a:	20d3      	movs	r0, #211	; 0xd3
 800243c:	f7ff ff92 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x00); //-not offset
 8002440:	2000      	movs	r0, #0
 8002442:	f7ff ff8f 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xD5); //--set display clock divide ratio/oscillator frequency
 8002446:	20d5      	movs	r0, #213	; 0xd5
 8002448:	f7ff ff8c 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xF0); //--set divide ratio
 800244c:	20f0      	movs	r0, #240	; 0xf0
 800244e:	f7ff ff89 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xD9); //--set pre-charge period
 8002452:	20d9      	movs	r0, #217	; 0xd9
 8002454:	f7ff ff86 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x22); //
 8002458:	2022      	movs	r0, #34	; 0x22
 800245a:	f7ff ff83 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xDA); //--set com pins hardware configuration
 800245e:	20da      	movs	r0, #218	; 0xda
 8002460:	f7ff ff80 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x12);
 8002464:	2012      	movs	r0, #18
 8002466:	f7ff ff7d 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xDB); //--set vcomh
 800246a:	20db      	movs	r0, #219	; 0xdb
 800246c:	f7ff ff7a 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x20); //0x20,0.77xVcc
 8002470:	2020      	movs	r0, #32
 8002472:	f7ff ff77 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x8D); //--set DC-DC enable
 8002476:	208d      	movs	r0, #141	; 0x8d
 8002478:	f7ff ff74 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x14); //
 800247c:	2014      	movs	r0, #20
 800247e:	f7ff ff71 	bl	8002364 <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xAF); //--turn on SSD1306 panel
 8002482:	20af      	movs	r0, #175	; 0xaf
 8002484:	f7ff ff6e 	bl	8002364 <ssd1306WriteCmd>

	  ssd1306Fill(black);
 8002488:	2000      	movs	r0, #0
 800248a:	f000 f873 	bl	8002574 <ssd1306Fill>
	  ssd1306UpdateDraw();
 800248e:	f000 f895 	bl	80025bc <ssd1306UpdateDraw>

	  return true;
 8002492:	2301      	movs	r3, #1
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200004fc 	.word	0x200004fc
 80024a0:	20000068 	.word	0x20000068

080024a4 <ssd1306SetWindow>:

void ssd1306SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]

}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <ssd1306GetWidth>:

uint16_t ssd1306GetWidth(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
	return LCD_WIDTH;
 80024c2:	2380      	movs	r3, #128	; 0x80
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <ssd1306GetHeight>:

uint16_t ssd1306GetHeight(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
	return LCD_HEIGHT;
 80024d2:	2340      	movs	r3, #64	; 0x40
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <ssd1306SendBuffer>:

bool ssd1306SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
	uint16_t *p_buf = (uint16_t *)p_data;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	617b      	str	r3, [r7, #20]

	for(int y=0; y<SSD1306_HEIGHT; y++)
 80024f0:	2300      	movs	r3, #0
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	e01a      	b.n	800252c <ssd1306SendBuffer+0x4c>
	{
		for(int x=0; x<SSD1306_WIDTH; x++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	e011      	b.n	8002520 <ssd1306SendBuffer+0x40>
		{
			ssd1306DrawPixel(x, y, p_buf[y * LCD_WIDTH + x]);
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	b2d8      	uxtb	r0, r3
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	b2d9      	uxtb	r1, r3
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	01da      	lsls	r2, r3, #7
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	4413      	add	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4413      	add	r3, r2
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	f000 f88d 	bl	8002634 <ssd1306DrawPixel>
		for(int x=0; x<SSD1306_WIDTH; x++)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	3301      	adds	r3, #1
 800251e:	61bb      	str	r3, [r7, #24]
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b7f      	cmp	r3, #127	; 0x7f
 8002524:	ddea      	ble.n	80024fc <ssd1306SendBuffer+0x1c>
	for(int y=0; y<SSD1306_HEIGHT; y++)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3301      	adds	r3, #1
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	2b3f      	cmp	r3, #63	; 0x3f
 8002530:	dde1      	ble.n	80024f6 <ssd1306SendBuffer+0x16>
		}
	}

	ssd1306UpdateDraw();
 8002532:	f000 f843 	bl	80025bc <ssd1306UpdateDraw>

	if(frameCallBack != NULL)
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <ssd1306SendBuffer+0x70>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <ssd1306SendBuffer+0x64>
	{
		frameCallBack();
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <ssd1306SendBuffer+0x70>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4798      	blx	r3
	}
	return true;
 8002544:	2301      	movs	r3, #1
}
 8002546:	4618      	mov	r0, r3
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000500 	.word	0x20000500

08002554 <ssd1306SetCallBack>:

bool ssd1306SetCallBack(void (*p_func)(void))
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	frameCallBack = p_func;
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <ssd1306SetCallBack+0x1c>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6013      	str	r3, [r2, #0]

	return true;
 8002562:	2301      	movs	r3, #1
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	20000500 	.word	0x20000500

08002574 <ssd1306Fill>:

void ssd1306Fill(uint16_t color)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	80fb      	strh	r3, [r7, #6]
	uint32_t i;

	for(i=0; i<sizeof(ssd1306_buffer); i++)
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	e00d      	b.n	80025a0 <ssd1306Fill+0x2c>
	{
		ssd1306_buffer[i] = (color > 0) ? 0xFF : 0x00;
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <ssd1306Fill+0x1a>
 800258a:	21ff      	movs	r1, #255	; 0xff
 800258c:	e000      	b.n	8002590 <ssd1306Fill+0x1c>
 800258e:	2100      	movs	r1, #0
 8002590:	4a09      	ldr	r2, [pc, #36]	; (80025b8 <ssd1306Fill+0x44>)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4413      	add	r3, r2
 8002596:	460a      	mov	r2, r1
 8002598:	701a      	strb	r2, [r3, #0]
	for(i=0; i<sizeof(ssd1306_buffer); i++)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3301      	adds	r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a6:	d3ed      	bcc.n	8002584 <ssd1306Fill+0x10>
	}
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000504 	.word	0x20000504

080025bc <ssd1306UpdateDraw>:

bool ssd1306UpdateDraw(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af02      	add	r7, sp, #8
	uint8_t i;

	for(i=0; i<8; i++)
 80025c2:	2300      	movs	r3, #0
 80025c4:	71fb      	strb	r3, [r7, #7]
 80025c6:	e026      	b.n	8002616 <ssd1306UpdateDraw+0x5a>
	{
    ssd1306WriteCmd(0xB0 + i);
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	3b50      	subs	r3, #80	; 0x50
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fec8 	bl	8002364 <ssd1306WriteCmd>
    ssd1306WriteCmd(0x00);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7ff fec5 	bl	8002364 <ssd1306WriteCmd>
    ssd1306WriteCmd(0x10);
 80025da:	2010      	movs	r0, #16
 80025dc:	f7ff fec2 	bl	8002364 <ssd1306WriteCmd>

    if(i2cWriteBytes(i2c_ch, i2c_dev, 0x40, &ssd1306_buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100) == false)
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <ssd1306UpdateDraw+0x6c>)
 80025e2:	7818      	ldrb	r0, [r3, #0]
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <ssd1306UpdateDraw+0x70>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b299      	uxth	r1, r3
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	01db      	lsls	r3, r3, #7
 80025ee:	4a10      	ldr	r2, [pc, #64]	; (8002630 <ssd1306UpdateDraw+0x74>)
 80025f0:	4413      	add	r3, r2
 80025f2:	2264      	movs	r2, #100	; 0x64
 80025f4:	9201      	str	r2, [sp, #4]
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	9200      	str	r2, [sp, #0]
 80025fa:	2240      	movs	r2, #64	; 0x40
 80025fc:	f001 fd74 	bl	80040e8 <i2cWriteBytes>
 8002600:	4603      	mov	r3, r0
 8002602:	f083 0301 	eor.w	r3, r3, #1
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <ssd1306UpdateDraw+0x54>
    {
    	return false;
 800260c:	2300      	movs	r3, #0
 800260e:	e006      	b.n	800261e <ssd1306UpdateDraw+0x62>
	for(i=0; i<8; i++)
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	3301      	adds	r3, #1
 8002614:	71fb      	strb	r3, [r7, #7]
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	2b07      	cmp	r3, #7
 800261a:	d9d5      	bls.n	80025c8 <ssd1306UpdateDraw+0xc>
    }
	}

	return true;
 800261c:	2301      	movs	r3, #1
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200004fc 	.word	0x200004fc
 800262c:	20000068 	.word	0x20000068
 8002630:	20000504 	.word	0x20000504

08002634 <ssd1306DrawPixel>:

void ssd1306DrawPixel(uint8_t x, uint8_t y, uint16_t color)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
 800263e:	460b      	mov	r3, r1
 8002640:	71bb      	strb	r3, [r7, #6]
 8002642:	4613      	mov	r3, r2
 8002644:	80bb      	strh	r3, [r7, #4]
	if(x>=SSD1306_WIDTH || y>=SSD1306_HEIGHT)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db3d      	blt.n	80026ca <ssd1306DrawPixel+0x96>
 800264e:	79bb      	ldrb	r3, [r7, #6]
 8002650:	2b3f      	cmp	r3, #63	; 0x3f
 8002652:	d83a      	bhi.n	80026ca <ssd1306DrawPixel+0x96>
	{
		return;
	}

	if(color > 0)
 8002654:	88bb      	ldrh	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d01a      	beq.n	8002690 <ssd1306DrawPixel+0x5c>
	{
		ssd1306_buffer[x + (y/8) * SSD1306_WIDTH] |= 1 << (y%8);
 800265a:	79fa      	ldrb	r2, [r7, #7]
 800265c:	79bb      	ldrb	r3, [r7, #6]
 800265e:	08db      	lsrs	r3, r3, #3
 8002660:	b2d8      	uxtb	r0, r3
 8002662:	4603      	mov	r3, r0
 8002664:	01db      	lsls	r3, r3, #7
 8002666:	4413      	add	r3, r2
 8002668:	4a1b      	ldr	r2, [pc, #108]	; (80026d8 <ssd1306DrawPixel+0xa4>)
 800266a:	5cd3      	ldrb	r3, [r2, r3]
 800266c:	b25a      	sxtb	r2, r3
 800266e:	79bb      	ldrb	r3, [r7, #6]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	b25b      	sxtb	r3, r3
 800267c:	4313      	orrs	r3, r2
 800267e:	b259      	sxtb	r1, r3
 8002680:	79fa      	ldrb	r2, [r7, #7]
 8002682:	4603      	mov	r3, r0
 8002684:	01db      	lsls	r3, r3, #7
 8002686:	4413      	add	r3, r2
 8002688:	b2c9      	uxtb	r1, r1
 800268a:	4a13      	ldr	r2, [pc, #76]	; (80026d8 <ssd1306DrawPixel+0xa4>)
 800268c:	54d1      	strb	r1, [r2, r3]
 800268e:	e01d      	b.n	80026cc <ssd1306DrawPixel+0x98>
	}
	else
	{
		ssd1306_buffer[x + (y/8) * SSD1306_WIDTH] &= ~(1 << (y%8));
 8002690:	79fa      	ldrb	r2, [r7, #7]
 8002692:	79bb      	ldrb	r3, [r7, #6]
 8002694:	08db      	lsrs	r3, r3, #3
 8002696:	b2d8      	uxtb	r0, r3
 8002698:	4603      	mov	r3, r0
 800269a:	01db      	lsls	r3, r3, #7
 800269c:	4413      	add	r3, r2
 800269e:	4a0e      	ldr	r2, [pc, #56]	; (80026d8 <ssd1306DrawPixel+0xa4>)
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	b25a      	sxtb	r2, r3
 80026a4:	79bb      	ldrb	r3, [r7, #6]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	b25b      	sxtb	r3, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	b25b      	sxtb	r3, r3
 80026b6:	4013      	ands	r3, r2
 80026b8:	b259      	sxtb	r1, r3
 80026ba:	79fa      	ldrb	r2, [r7, #7]
 80026bc:	4603      	mov	r3, r0
 80026be:	01db      	lsls	r3, r3, #7
 80026c0:	4413      	add	r3, r2
 80026c2:	b2c9      	uxtb	r1, r1
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <ssd1306DrawPixel+0xa4>)
 80026c6:	54d1      	strb	r1, [r2, r3]
 80026c8:	e000      	b.n	80026cc <ssd1306DrawPixel+0x98>
		return;
 80026ca:	bf00      	nop
	}
}
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000504 	.word	0x20000504

080026dc <cdcAvailable>:
bool rx_full=false;



uint32_t cdcAvailable(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % BUF_SIZE;
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <cdcAvailable+0x24>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <cdcAvailable+0x28>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f0:	607b      	str	r3, [r7, #4]

	return ret;
 80026f2:	687b      	ldr	r3, [r7, #4]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	20000b04 	.word	0x20000b04
 8002704:	20000b08 	.word	0x20000b08

08002708 <cdcRead>:

uint8_t cdcRead(void)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	71fb      	strb	r3, [r7, #7]

	ret = rx_buf[rx_out];
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <cdcRead+0x3c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a0c      	ldr	r2, [pc, #48]	; (8002748 <cdcRead+0x40>)
 8002718:	5cd3      	ldrb	r3, [r2, r3]
 800271a:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <cdcRead+0x3c>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b0a      	ldr	r3, [pc, #40]	; (800274c <cdcRead+0x44>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d006      	beq.n	8002736 <cdcRead+0x2e>
	{
		rx_out = (rx_out + 1) % BUF_SIZE;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <cdcRead+0x3c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3301      	adds	r3, #1
 800272e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002732:	4a04      	ldr	r2, [pc, #16]	; (8002744 <cdcRead+0x3c>)
 8002734:	6013      	str	r3, [r2, #0]
	}

	return ret;
 8002736:	79fb      	ldrb	r3, [r7, #7]
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	20000b08 	.word	0x20000b08
 8002748:	20000904 	.word	0x20000904
 800274c:	20000b04 	.word	0x20000b04

08002750 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
	rx_buf[rx_in] = rx_data;
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <cdcDataIn+0x3c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	490c      	ldr	r1, [pc, #48]	; (8002790 <cdcDataIn+0x40>)
 8002760:	79fa      	ldrb	r2, [r7, #7]
 8002762:	54ca      	strb	r2, [r1, r3]

	uint8_t next_rx_in = (rx_in + 1) % BUF_SIZE;
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <cdcDataIn+0x3c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	3301      	adds	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]

	if(next_rx_in != rx_out)
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <cdcDataIn+0x44>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d002      	beq.n	800277e <cdcDataIn+0x2e>
	{
		rx_in = next_rx_in;
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	4a04      	ldr	r2, [pc, #16]	; (800278c <cdcDataIn+0x3c>)
 800277c:	6013      	str	r3, [r2, #0]
	}
}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000b04 	.word	0x20000b04
 8002790:	20000904 	.word	0x20000904
 8002794:	20000b08 	.word	0x20000b08

08002798 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t len)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
	uint32_t pre_time = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
	uint8_t ret;

	pre_time = millis();
 80027a6:	f7ff f9c5 	bl	8001b34 <millis>
 80027aa:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(p_data, len);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4619      	mov	r1, r3
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f015 fa46 	bl	8017c44 <CDC_Transmit_FS>
 80027b8:	4603      	mov	r3, r0
 80027ba:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 80027bc:	7afb      	ldrb	r3, [r7, #11]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <cdcWrite+0x2e>
			{
				return len;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	e00e      	b.n	80027e4 <cdcWrite+0x4c>
			}
			else if(ret == USBD_FAIL)
 80027c6:	7afb      	ldrb	r3, [r7, #11]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d101      	bne.n	80027d0 <cdcWrite+0x38>
			{
				return 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e009      	b.n	80027e4 <cdcWrite+0x4c>
			}

			if(millis() - pre_time >= 100)
 80027d0:	f7ff f9b0 	bl	8001b34 <millis>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b63      	cmp	r3, #99	; 0x63
 80027dc:	d800      	bhi.n	80027e0 <cdcWrite+0x48>
		ret = CDC_Transmit_FS(p_data, len);
 80027de:	e7e5      	b.n	80027ac <cdcWrite+0x14>
			{
				break;
 80027e0:	bf00      	nop
			}
	}

	return 0;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <cliInit+0x74>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 80027f6:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <cliInit+0x74>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <cliInit+0x74>)
 80027fe:	2200      	movs	r2, #0
 8002800:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8002802:	4b17      	ldr	r3, [pc, #92]	; (8002860 <cliInit+0x74>)
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <cliInit+0x74>)
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8002812:	4b13      	ldr	r3, [pc, #76]	; (8002860 <cliInit+0x74>)
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <cliInit+0x74>)
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <cliInit+0x74>)
 8002824:	4a0f      	ldr	r2, [pc, #60]	; (8002864 <cliInit+0x78>)
 8002826:	f8c3 2474 	str.w	r2, [r3, #1140]	; 0x474
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <cliInit+0x74>)
 800282c:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <cliInit+0x7c>)
 800282e:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <cliInit+0x74>)
 8002834:	4a0d      	ldr	r2, [pc, #52]	; (800286c <cliInit+0x80>)
 8002836:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <cliInit+0x74>)
 800283c:	4a0c      	ldr	r2, [pc, #48]	; (8002870 <cliInit+0x84>)
 800283e:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

  cliLineClean(&cli_node);
 8002842:	4807      	ldr	r0, [pc, #28]	; (8002860 <cliInit+0x74>)
 8002844:	f000 fb74 	bl	8002f30 <cliLineClean>


  cliAdd("help", cliShowList);
 8002848:	490a      	ldr	r1, [pc, #40]	; (8002874 <cliInit+0x88>)
 800284a:	480b      	ldr	r0, [pc, #44]	; (8002878 <cliInit+0x8c>)
 800284c:	f000 fe10 	bl	8003470 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8002850:	490a      	ldr	r1, [pc, #40]	; (800287c <cliInit+0x90>)
 8002852:	480b      	ldr	r0, [pc, #44]	; (8002880 <cliInit+0x94>)
 8002854:	f000 fe0c 	bl	8003470 <cliAdd>

  return true;
 8002858:	2301      	movs	r3, #1
}
 800285a:	4618      	mov	r0, r3
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000b0c 	.word	0x20000b0c
 8002864:	08003301 	.word	0x08003301
 8002868:	08003351 	.word	0x08003351
 800286c:	080033a9 	.word	0x080033a9
 8002870:	080033f1 	.word	0x080033f1
 8002874:	08003505 	.word	0x08003505
 8002878:	0801b814 	.word	0x0801b814
 800287c:	08003575 	.word	0x08003575
 8002880:	0801b81c 	.word	0x0801b81c

08002884 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	6039      	str	r1, [r7, #0]
 800288e:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8002890:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <cliOpen+0x38>)
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <cliOpen+0x38>)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	6839      	ldr	r1, [r7, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f004 fc61 	bl	8007168 <uartOpen>
 80028a6:	4603      	mov	r3, r0
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b04      	ldr	r3, [pc, #16]	; (80028bc <cliOpen+0x38>)
 80028ac:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 80028ae:	4b03      	ldr	r3, [pc, #12]	; (80028bc <cliOpen+0x38>)
 80028b0:	7a1b      	ldrb	r3, [r3, #8]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000b0c 	.word	0x20000b0c

080028c0 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 80028c8:	4b34      	ldr	r3, [pc, #208]	; (800299c <cliShowLog+0xdc>)
 80028ca:	7a5b      	ldrb	r3, [r3, #9]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d061      	beq.n	8002994 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7a98      	ldrb	r0, [r3, #10]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 80028da:	461a      	mov	r2, r3
 80028dc:	4930      	ldr	r1, [pc, #192]	; (80029a0 <cliShowLog+0xe0>)
 80028de:	f004 fc9d 	bl	800721c <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	7a98      	ldrb	r0, [r3, #10]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 80028ec:	461a      	mov	r2, r3
 80028ee:	492d      	ldr	r1, [pc, #180]	; (80029a4 <cliShowLog+0xe4>)
 80028f0:	f004 fc94 	bl	800721c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	7a98      	ldrb	r0, [r3, #10]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 80028fe:	461a      	mov	r2, r3
 8002900:	4929      	ldr	r1, [pc, #164]	; (80029a8 <cliShowLog+0xe8>)
 8002902:	f004 fc8b 	bl	800721c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7a98      	ldrb	r0, [r3, #10]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002910:	461a      	mov	r2, r3
 8002912:	4926      	ldr	r1, [pc, #152]	; (80029ac <cliShowLog+0xec>)
 8002914:	f004 fc82 	bl	800721c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7a98      	ldrb	r0, [r3, #10]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002922:	461a      	mov	r2, r3
 8002924:	4922      	ldr	r1, [pc, #136]	; (80029b0 <cliShowLog+0xf0>)
 8002926:	f004 fc79 	bl	800721c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	7a98      	ldrb	r0, [r3, #10]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002934:	461a      	mov	r2, r3
 8002936:	491f      	ldr	r1, [pc, #124]	; (80029b4 <cliShowLog+0xf4>)
 8002938:	f004 fc70 	bl	800721c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7a98      	ldrb	r0, [r3, #10]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002946:	461a      	mov	r2, r3
 8002948:	491b      	ldr	r1, [pc, #108]	; (80029b8 <cliShowLog+0xf8>)
 800294a:	f004 fc67 	bl	800721c <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	e012      	b.n	800297a <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7a98      	ldrb	r0, [r3, #10]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4613      	mov	r3, r2
 800295c:	015b      	lsls	r3, r3, #5
 800295e:	4413      	add	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4413      	add	r3, r2
 8002964:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4913      	ldr	r1, [pc, #76]	; (80029bc <cliShowLog+0xfc>)
 8002970:	f004 fc54 	bl	800721c <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	3301      	adds	r3, #1
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002980:	461a      	mov	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4293      	cmp	r3, r2
 8002986:	dbe5      	blt.n	8002954 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7a9b      	ldrb	r3, [r3, #10]
 800298c:	490c      	ldr	r1, [pc, #48]	; (80029c0 <cliShowLog+0x100>)
 800298e:	4618      	mov	r0, r3
 8002990:	f004 fc44 	bl	800721c <uartPrintf>
  }
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000b0c 	.word	0x20000b0c
 80029a0:	0801b820 	.word	0x0801b820
 80029a4:	0801b830 	.word	0x0801b830
 80029a8:	0801b840 	.word	0x0801b840
 80029ac:	0801b850 	.word	0x0801b850
 80029b0:	0801b860 	.word	0x0801b860
 80029b4:	0801b870 	.word	0x0801b870
 80029b8:	0801b880 	.word	0x0801b880
 80029bc:	0801b890 	.word	0x0801b890
 80029c0:	0801b8a0 	.word	0x0801b8a0

080029c4 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	4906      	ldr	r1, [pc, #24]	; (80029ec <cliShowPrompt+0x28>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f004 fc22 	bl	800721c <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	4904      	ldr	r1, [pc, #16]	; (80029f0 <cliShowPrompt+0x2c>)
 80029de:	4618      	mov	r0, r3
 80029e0:	f004 fc1c 	bl	800721c <uartPrintf>
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	0801b8a4 	.word	0x0801b8a4
 80029f0:	0801b8a8 	.word	0x0801b8a8

080029f4 <cliMain>:

bool cliMain(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 80029f8:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <cliMain+0x40>)
 80029fa:	7a1b      	ldrb	r3, [r3, #8]
 80029fc:	f083 0301 	eor.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <cliMain+0x16>
  {
    return false;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e012      	b.n	8002a30 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <cliMain+0x40>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 fbc6 	bl	80071a0 <uartAvailable>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <cliMain+0x40>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f004 fbd1 	bl	80071c6 <uartRead>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4619      	mov	r1, r3
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <cliMain+0x40>)
 8002a2a:	f000 f81d 	bl	8002a68 <cliUpdate>
  }

  return true;
 8002a2e:	2301      	movs	r3, #1
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000b0c 	.word	0x20000b0c

08002a38 <cliAvailable>:

uint32_t cliAvailable(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  return uartAvailable(cli_node.ch);
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <cliAvailable+0x14>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f004 fbad 	bl	80071a0 <uartAvailable>
 8002a46:	4603      	mov	r3, r0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000b0c 	.word	0x20000b0c

08002a50 <cliRead>:

uint8_t cliRead(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  return uartRead(cli_node.ch);
 8002a54:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <cliRead+0x14>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f004 fbb4 	bl	80071c6 <uartRead>
 8002a5e:	4603      	mov	r3, r0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000b0c 	.word	0x20000b0c

08002a68 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08c      	sub	sp, #48	; 0x30
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002a80:	61fb      	str	r3, [r7, #28]

  if (p_cli->state == CLI_RX_IDLE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	7c1b      	ldrb	r3, [r3, #16]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 816d 	bne.w	8002d66 <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a90:	d02a      	beq.n	8002ae8 <cliUpdate+0x80>
 8002a92:	2b7f      	cmp	r3, #127	; 0x7f
 8002a94:	f300 80da 	bgt.w	8002c4c <cliUpdate+0x1e4>
 8002a98:	2b1b      	cmp	r3, #27
 8002a9a:	d021      	beq.n	8002ae0 <cliUpdate+0x78>
 8002a9c:	2b1b      	cmp	r3, #27
 8002a9e:	f300 80d5 	bgt.w	8002c4c <cliUpdate+0x1e4>
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d062      	beq.n	8002b6c <cliUpdate+0x104>
 8002aa6:	2b0d      	cmp	r3, #13
 8002aa8:	f040 80d0 	bne.w	8002c4c <cliUpdate+0x1e4>
    {
      // 엔터
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fa54 	bl	8002f64 <cliLineAdd>
          cliRunCmd(p_cli);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fb25 	bl	800310c <cliRunCmd>
        }

        line->count = 0;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ff73 	bl	80029c4 <cliShowPrompt>
        break;
 8002ade:	e142      	b.n	8002d66 <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	741a      	strb	r2, [r3, #16]
        break;
 8002ae6:	e13e      	b.n	8002d66 <cliUpdate+0x2fe>

      // DEL
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002af4:	429a      	cmp	r2, r3
 8002af6:	f080 8131 	bcs.w	8002d5c <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0e:	e013      	b.n	8002b38 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b16:	461a      	mov	r2, r3
 8002b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1a:	441a      	add	r2, r3
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b22:	4619      	mov	r1, r3
 8002b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b26:	440b      	add	r3, r1
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	69f9      	ldr	r1, [r7, #28]
 8002b2c:	5c89      	ldrb	r1, [r1, r2]
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	3301      	adds	r3, #1
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b38:	7efb      	ldrb	r3, [r7, #27]
 8002b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	dbe7      	blt.n	8002b10 <cliUpdate+0xa8>
          }

          line->count--;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b56:	461a      	mov	r2, r3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	498d      	ldr	r1, [pc, #564]	; (8002d98 <cliUpdate+0x330>)
 8002b64:	4618      	mov	r0, r3
 8002b66:	f004 fb59 	bl	800721c <uartPrintf>
        }
        break;
 8002b6a:	e0f7      	b.n	8002d5c <cliUpdate+0x2f4>

      // 백스페이스
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d055      	beq.n	8002c22 <cliUpdate+0x1ba>
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d050      	beq.n	8002c22 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d10e      	bne.n	8002bae <cliUpdate+0x146>
          {
            line->count--;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2100      	movs	r1, #0
 8002bac:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d231      	bcs.n	8002c22 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd2:	e013      	b.n	8002bfc <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bda:	461a      	mov	r2, r3
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	441a      	add	r2, r3
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be6:	4619      	mov	r1, r3
 8002be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bea:	440b      	add	r3, r1
 8002bec:	3b01      	subs	r3, #1
 8002bee:	69f9      	ldr	r1, [r7, #28]
 8002bf0:	5c89      	ldrb	r1, [r1, r2]
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bfc:	7ebb      	ldrb	r3, [r7, #26]
 8002bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c00:	429a      	cmp	r2, r3
 8002c02:	dbe7      	blt.n	8002bd4 <cliUpdate+0x16c>
            }

            line->count--;
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	2100      	movs	r1, #0
 8002c20:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8099 	beq.w	8002d60 <cliUpdate+0x2f8>
        {
          line->cursor--;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	4956      	ldr	r1, [pc, #344]	; (8002d9c <cliUpdate+0x334>)
 8002c44:	4618      	mov	r0, r3
 8002c46:	f004 fae9 	bl	800721c <uartPrintf>
        }
        break;
 8002c4a:	e089      	b.n	8002d60 <cliUpdate+0x2f8>

      default:
        if ((line->count + 1) < line->buf_len)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c52:	3301      	adds	r3, #1
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	f280 8082 	bge.w	8002d64 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d124      	bne.n	8002cba <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	1cf9      	adds	r1, r7, #3
 8002c76:	2201      	movs	r2, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f004 fab8 	bl	80071ee <uartWrite>

            line->buf[line->cursor] = rx_data;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c84:	461a      	mov	r2, r3
 8002c86:	78f9      	ldrb	r1, [r7, #3]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	5499      	strb	r1, [r3, r2]
            line->count++;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c92:	3301      	adds	r3, #1
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d24c      	bcs.n	8002d64 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cde:	e013      	b.n	8002d08 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	1e5a      	subs	r2, r3, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	1acb      	subs	r3, r1, r3
 8002cfa:	69f9      	ldr	r1, [r7, #28]
 8002cfc:	5c89      	ldrb	r1, [r1, r2]
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	3301      	adds	r3, #1
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
 8002d08:	7e7b      	ldrb	r3, [r7, #25]
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	dbe7      	blt.n	8002ce0 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d16:	461a      	mov	r2, r3
 8002d18:	78f9      	ldrb	r1, [r7, #3]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	5499      	strb	r1, [r3, r2]
            line->count++;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d24:	3301      	adds	r3, #1
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d34:	3301      	adds	r3, #1
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d44:	461a      	mov	r2, r3
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	2100      	movs	r1, #0
 8002d4a:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	4913      	ldr	r1, [pc, #76]	; (8002da0 <cliUpdate+0x338>)
 8002d54:	4618      	mov	r0, r3
 8002d56:	f004 fa61 	bl	800721c <uartPrintf>
          }
        }
        break;
 8002d5a:	e003      	b.n	8002d64 <cliUpdate+0x2fc>
        break;
 8002d5c:	bf00      	nop
 8002d5e:	e002      	b.n	8002d66 <cliUpdate+0x2fe>
        break;
 8002d60:	bf00      	nop
 8002d62:	e000      	b.n	8002d66 <cliUpdate+0x2fe>
        break;
 8002d64:	bf00      	nop
    }
  }

  switch(p_cli->state)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7c1b      	ldrb	r3, [r3, #16]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	f200 80d2 	bhi.w	8002f16 <cliUpdate+0x4ae>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <cliUpdate+0x310>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002d89 	.word	0x08002d89
 8002d7c:	08002d91 	.word	0x08002d91
 8002d80:	08002da5 	.word	0x08002da5
 8002d84:	08002f0d 	.word	0x08002f0d
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	741a      	strb	r2, [r3, #16]
      break;
 8002d8e:	e0c2      	b.n	8002f16 <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2203      	movs	r2, #3
 8002d94:	741a      	strb	r2, [r3, #16]
      break;
 8002d96:	e0be      	b.n	8002f16 <cliUpdate+0x4ae>
 8002d98:	0801b8b0 	.word	0x0801b8b0
 8002d9c:	0801b8b8 	.word	0x0801b8b8
 8002da0:	0801b8c0 	.word	0x0801b8c0

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	2b44      	cmp	r3, #68	; 0x44
 8002dae:	d11a      	bne.n	8002de6 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d015      	beq.n	8002de6 <cliUpdate+0x37e>
        {
          line->cursor--;
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8002dca:	231b      	movs	r3, #27
 8002dcc:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8002dce:	235b      	movs	r3, #91	; 0x5b
 8002dd0:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	f107 010c 	add.w	r1, r7, #12
 8002dde:	2203      	movs	r2, #3
 8002de0:	4618      	mov	r0, r3
 8002de2:	f004 fa04 	bl	80071ee <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	2b43      	cmp	r3, #67	; 0x43
 8002dea:	d11d      	bne.n	8002e28 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d215      	bcs.n	8002e28 <cliUpdate+0x3c0>
        {
          line->cursor++;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e02:	3301      	adds	r3, #1
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 8002e0c:	231b      	movs	r3, #27
 8002e0e:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8002e10:	235b      	movs	r3, #91	; 0x5b
 8002e12:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	f107 010c 	add.w	r1, r7, #12
 8002e20:	2203      	movs	r2, #3
 8002e22:	4618      	mov	r0, r3
 8002e24:	f004 f9e3 	bl	80071ee <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	2b41      	cmp	r3, #65	; 0x41
 8002e2c:	d10c      	bne.n	8002e48 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8002e2e:	2101      	movs	r1, #1
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f8e1 	bl	8002ff8 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002e40:	4619      	mov	r1, r3
 8002e42:	4610      	mov	r0, r2
 8002e44:	f004 f9ea 	bl	800721c <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	2b42      	cmp	r3, #66	; 0x42
 8002e4c:	d10c      	bne.n	8002e68 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8002e4e:	2100      	movs	r1, #0
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f8d1 	bl	8002ff8 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	781a      	ldrb	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002e60:	4619      	mov	r1, r3
 8002e62:	4610      	mov	r0, r2
 8002e64:	f004 f9da 	bl	800721c <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	2b31      	cmp	r3, #49	; 0x31
 8002e6c:	d10f      	bne.n	8002e8e <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	7818      	ldrb	r0, [r3, #0]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e78:	461a      	mov	r2, r3
 8002e7a:	492b      	ldr	r1, [pc, #172]	; (8002f28 <cliUpdate+0x4c0>)
 8002e7c:	f004 f9ce 	bl	800721c <uartPrintf>
        line->cursor = 0;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	2b34      	cmp	r3, #52	; 0x34
 8002e92:	d13f      	bne.n	8002f14 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d210      	bcs.n	8002ec6 <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	8afa      	ldrh	r2, [r7, #22]
 8002ebe:	491b      	ldr	r1, [pc, #108]	; (8002f2c <cliUpdate+0x4c4>)
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f004 f9ab 	bl	800721c <uartPrintf>
        }
        if (line->cursor > line->count)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d910      	bls.n	8002ef8 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	8afa      	ldrh	r2, [r7, #22]
 8002ef0:	490d      	ldr	r1, [pc, #52]	; (8002f28 <cliUpdate+0x4c0>)
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f004 f992 	bl	800721c <uartPrintf>
        }
        line->cursor = line->count;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2204      	movs	r2, #4
 8002f08:	741a      	strb	r2, [r3, #16]
      }
      break;
 8002f0a:	e003      	b.n	8002f14 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	741a      	strb	r2, [r3, #16]
      break;
 8002f12:	e000      	b.n	8002f16 <cliUpdate+0x4ae>
      break;
 8002f14:	bf00      	nop
  }

  cliShowLog(p_cli);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff fcd2 	bl	80028c0 <cliShowLog>

  return ret;
 8002f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3730      	adds	r7, #48	; 0x30
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	0801b8cc 	.word	0x0801b8cc
 8002f2c:	0801b8d4 	.word	0x0801b8d4

08002f30 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
  p_cli->line.cursor  = 0;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	223f      	movs	r2, #63	; 0x3f
 8002f4c:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
  p_cli->line.buf[0]  = 0;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002f72:	461a      	mov	r2, r3
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	015b      	lsls	r3, r3, #5
 8002f7a:	4413      	add	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	440b      	add	r3, r1
 8002f82:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4610      	mov	r0, r2
 8002f8a:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002f8e:	2243      	movs	r2, #67	; 0x43
 8002f90:	4619      	mov	r1, r3
 8002f92:	f016 fc62 	bl	801985a <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d807      	bhi.n	8002fb0 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002fb6:	b25a      	sxtb	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <cliLineAdd+0x90>)
 8002fc8:	fb83 1302 	smull	r1, r3, r3, r2
 8002fcc:	1059      	asrs	r1, r3, #1
 8002fce:	17d3      	asrs	r3, r2, #31
 8002fd0:	1ac9      	subs	r1, r1, r3
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	1ad1      	subs	r1, r2, r3
 8002fda:	b2ca      	uxtb	r2, r1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	66666667 	.word	0x66666667

08002ff8 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800300a:	2b00      	cmp	r3, #0
 800300c:	d076      	beq.n	80030fc <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	7818      	ldrb	r0, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8003022:	461a      	mov	r2, r3
 8003024:	4937      	ldr	r1, [pc, #220]	; (8003104 <cliLineChange+0x10c>)
 8003026:	f004 f8f9 	bl	800721c <uartPrintf>
  }
  if (p_cli->line.count > 0)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7818      	ldrb	r0, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 800303e:	461a      	mov	r2, r3
 8003040:	4931      	ldr	r1, [pc, #196]	; (8003108 <cliLineChange+0x110>)
 8003042:	f004 f8eb 	bl	800721c <uartPrintf>
  }


  if (key_up == true)
 8003046:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d125      	bne.n	800309a <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8003054:	2b00      	cmp	r3, #0
 8003056:	d006      	beq.n	8003066 <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800305e:	b25a      	sxtb	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800306c:	461a      	mov	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8003074:	4413      	add	r3, r2
 8003076:	3b01      	subs	r3, #1
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800307e:	fb93 f1f2 	sdiv	r1, r3, r2
 8003082:	fb01 f202 	mul.w	r2, r1, r2
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	b25a      	sxtb	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8003096:	73fb      	strb	r3, [r7, #15]
 8003098:	e013      	b.n	80030c2 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80030a0:	3301      	adds	r3, #1
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 80030a8:	fb93 f1f2 	sdiv	r1, r3, r2
 80030ac:	fb01 f202 	mul.w	r2, r1, r2
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	b25a      	sxtb	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80030c0:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 80030c2:	7bfa      	ldrb	r2, [r7, #15]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	015b      	lsls	r3, r3, #5
 80030cc:	4413      	add	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	4403      	add	r3, r0
 80030d4:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 80030d8:	f201 23e7 	addw	r3, r1, #743	; 0x2e7
 80030dc:	4611      	mov	r1, r2
 80030de:	2243      	movs	r2, #67	; 0x43
 80030e0:	4618      	mov	r0, r3
 80030e2:	f016 fbba 	bl	801985a <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

  p_cli->hist_line_new = false;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 80030fa:	e000      	b.n	80030fe <cliLineChange+0x106>
    return;
 80030fc:	bf00      	nop
}
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	0801b8cc 	.word	0x0801b8cc
 8003108:	0801b8dc 	.word	0x0801b8dc

0800310c <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003114:	2300      	movs	r3, #0
 8003116:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f851 	bl	80031c0 <cliParseArgs>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d046      	beq.n	80031b2 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8003124:	4825      	ldr	r0, [pc, #148]	; (80031bc <cliRunCmd+0xb0>)
 8003126:	f000 f893 	bl	8003250 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f8b1 	bl	8003298 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	e033      	b.n	80031a4 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	3304      	adds	r3, #4
 8003156:	4619      	mov	r1, r3
 8003158:	f7fd f842 	bl	80001e0 <strcmp>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d11d      	bne.n	800319e <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	f202 426c 	addw	r2, r2, #1132	; 0x46c
 8003198:	4610      	mov	r0, r2
 800319a:	4798      	blx	r3
        break;
 800319c:	e009      	b.n	80031b2 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	3301      	adds	r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80031aa:	461a      	mov	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4293      	cmp	r3, r2
 80031b0:	dbc4      	blt.n	800313c <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 80031b2:	7afb      	ldrb	r3, [r7, #11]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	0801b8e4 	.word	0x0801b8e4

080031c0 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80031c8:	2300      	movs	r3, #0
 80031ca:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 80031de:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80031e6:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 80031e8:	8afb      	ldrh	r3, [r7, #22]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80031f4:	4b15      	ldr	r3, [pc, #84]	; (800324c <cliParseArgs+0x8c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f107 0208 	add.w	r2, r7, #8
 80031fc:	4619      	mov	r1, r3
 80031fe:	6938      	ldr	r0, [r7, #16]
 8003200:	f016 fa9c 	bl	801973c <strtok_r>
 8003204:	61b8      	str	r0, [r7, #24]
 8003206:	e010      	b.n	800322a <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8003208:	8afb      	ldrh	r3, [r7, #22]
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	82fa      	strh	r2, [r7, #22]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <cliParseArgs+0x8c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f107 0208 	add.w	r2, r7, #8
 8003220:	4619      	mov	r1, r3
 8003222:	2000      	movs	r0, #0
 8003224:	f016 fa8a 	bl	801973c <strtok_r>
 8003228:	61b8      	str	r0, [r7, #24]
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1eb      	bne.n	8003208 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	8afa      	ldrh	r2, [r7, #22]
 8003234:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 8003238:	8afb      	ldrh	r3, [r7, #22]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <cliParseArgs+0x82>
  {
    ret = true;
 800323e:	2301      	movs	r3, #1
 8003240:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8003242:	7ffb      	ldrb	r3, [r7, #31]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	2000006c 	.word	0x2000006c

08003250 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8003250:	b40f      	push	{r0, r1, r2, r3}
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8003258:	f107 031c 	add.w	r3, r7, #28
 800325c:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 800325e:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <cliPrintf+0x44>)
 8003260:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f103 0011 	add.w	r0, r3, #17
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003270:	f016 fa14 	bl	801969c <vsniprintf>
 8003274:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	7818      	ldrb	r0, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	3311      	adds	r3, #17
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	4619      	mov	r1, r3
 8003282:	f003 ffb4 	bl	80071ee <uartWrite>
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003290:	b004      	add	sp, #16
 8003292:	4770      	bx	lr
 8003294:	20000b0c 	.word	0x20000b0c

08003298 <cliToUpper>:

void cliToUpper(char *str)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	81fb      	strh	r3, [r7, #14]
 80032a4:	e018      	b.n	80032d8 <cliToUpper+0x40>
  {
    str_ch = str[i];
 80032a6:	89fb      	ldrh	r3, [r7, #14]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4413      	add	r3, r2
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80032b0:	7b7b      	ldrb	r3, [r7, #13]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d014      	beq.n	80032e0 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80032b6:	7b7b      	ldrb	r3, [r7, #13]
 80032b8:	2b60      	cmp	r3, #96	; 0x60
 80032ba:	d905      	bls.n	80032c8 <cliToUpper+0x30>
 80032bc:	7b7b      	ldrb	r3, [r7, #13]
 80032be:	2b7a      	cmp	r3, #122	; 0x7a
 80032c0:	d802      	bhi.n	80032c8 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 80032c2:	7b7b      	ldrb	r3, [r7, #13]
 80032c4:	3b20      	subs	r3, #32
 80032c6:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 80032c8:	89fb      	ldrh	r3, [r7, #14]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	7b7a      	ldrb	r2, [r7, #13]
 80032d0:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80032d2:	89fb      	ldrh	r3, [r7, #14]
 80032d4:	3301      	adds	r3, #1
 80032d6:	81fb      	strh	r3, [r7, #14]
 80032d8:	89fb      	ldrh	r3, [r7, #14]
 80032da:	2b0f      	cmp	r3, #15
 80032dc:	d9e3      	bls.n	80032a6 <cliToUpper+0xe>
 80032de:	e000      	b.n	80032e2 <cliToUpper+0x4a>
      break;
 80032e0:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 80032e2:	89fb      	ldrh	r3, [r7, #14]
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	d105      	bne.n	80032f4 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 80032e8:	89fb      	ldrh	r3, [r7, #14]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
  }
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800330e:	4b0f      	ldr	r3, [pc, #60]	; (800334c <cliArgsGetData+0x4c>)
 8003310:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	b29a      	uxth	r2, r3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 800331c:	429a      	cmp	r2, r3
 800331e:	d301      	bcc.n	8003324 <cliArgsGetData+0x24>
  {
    return 0;
 8003320:	2300      	movs	r3, #0
 8003322:	e00e      	b.n	8003342 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2200      	movs	r2, #0
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f016 f876 	bl	8019428 <strtoul>
 800333c:	4603      	mov	r3, r0
 800333e:	60fb      	str	r3, [r7, #12]

  return ret;
 8003340:	68fb      	ldr	r3, [r7, #12]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000b0c 	.word	0x20000b0c

08003350 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8003360:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <cliArgsGetFloat+0x54>)
 8003362:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	b29a      	uxth	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 800336e:	429a      	cmp	r2, r3
 8003370:	d302      	bcc.n	8003378 <cliArgsGetFloat+0x28>
  {
    return 0;
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	e00d      	b.n	8003394 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f015 ff75 	bl	8019278 <strtof>
 800338e:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	ee07 3a90 	vmov	s15, r3
 8003398:	eeb0 0a67 	vmov.f32	s0, s15
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000b0c 	.word	0x20000b0c

080033a8 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80033b6:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <cliArgsGetStr+0x44>)
 80033b8:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d301      	bcc.n	80033cc <cliArgsGetStr+0x24>
  {
    return 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e008      	b.n	80033de <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60fb      	str	r3, [r7, #12]

  return ret;
 80033dc:	68fb      	ldr	r3, [r7, #12]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000b0c 	.word	0x20000b0c

080033f0 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	6039      	str	r1, [r7, #0]
 80033fa:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <cliArgsIsStr+0x50>)
 8003402:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	b29a      	uxth	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 800340e:	429a      	cmp	r2, r3
 8003410:	d301      	bcc.n	8003416 <cliArgsIsStr+0x26>
  {
    return 0;
 8003412:	2300      	movs	r3, #0
 8003414:	e010      	b.n	8003438 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4619      	mov	r1, r3
 8003426:	6838      	ldr	r0, [r7, #0]
 8003428:	f7fc feda 	bl	80001e0 <strcmp>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <cliArgsIsStr+0x46>
  {
    ret = true;
 8003432:	2301      	movs	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20000b0c 	.word	0x20000b0c

08003444 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <cliKeepLoop+0x28>)
 800344c:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f003 fea4 	bl	80071a0 <uartAvailable>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <cliKeepLoop+0x1e>
  {
    return true;
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8003462:	2300      	movs	r3, #0
  }
}
 8003464:	4618      	mov	r0, r3
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000b0c 	.word	0x20000b0c

08003470 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800347a:	2301      	movs	r3, #1
 800347c:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 800347e:	4b20      	ldr	r3, [pc, #128]	; (8003500 <cliAdd+0x90>)
 8003480:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8003488:	2b0f      	cmp	r3, #15
 800348a:	d901      	bls.n	8003490 <cliAdd+0x20>
  {
    return false;
 800348c:	2300      	movs	r3, #0
 800348e:	e032      	b.n	80034f6 <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8003496:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8003498:	89fa      	ldrh	r2, [r7, #14]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4413      	add	r3, r2
 80034aa:	3304      	adds	r3, #4
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f016 f9cb 	bl	801984a <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80034b4:	89fa      	ldrh	r2, [r7, #14]
 80034b6:	6939      	ldr	r1, [r7, #16]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80034ca:	89fa      	ldrh	r2, [r7, #14]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4413      	add	r3, r2
 80034dc:	3304      	adds	r3, #4
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff feda 	bl	8003298 <cliToUpper>

  p_cli->cmd_count++;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80034ea:	3301      	adds	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f8a3 232a 	strh.w	r2, [r3, #810]	; 0x32a

  return ret;
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000b0c 	.word	0x20000b0c

08003504 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 800350c:	4b15      	ldr	r3, [pc, #84]	; (8003564 <cliShowList+0x60>)
 800350e:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8003510:	4815      	ldr	r0, [pc, #84]	; (8003568 <cliShowList+0x64>)
 8003512:	f7ff fe9d 	bl	8003250 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8003516:	4815      	ldr	r0, [pc, #84]	; (800356c <cliShowList+0x68>)
 8003518:	f7ff fe9a 	bl	8003250 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	e012      	b.n	8003548 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	4413      	add	r3, r2
 8003534:	3304      	adds	r3, #4
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fe8a 	bl	8003250 <cliPrintf>
    cliPrintf("\r\n");
 800353c:	480a      	ldr	r0, [pc, #40]	; (8003568 <cliShowList+0x64>)
 800353e:	f7ff fe87 	bl	8003250 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	3301      	adds	r3, #1
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 800354e:	461a      	mov	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4293      	cmp	r3, r2
 8003554:	dbe5      	blt.n	8003522 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8003556:	4806      	ldr	r0, [pc, #24]	; (8003570 <cliShowList+0x6c>)
 8003558:	f7ff fe7a 	bl	8003250 <cliPrintf>
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20000b0c 	.word	0x20000b0c
 8003568:	0801b8e4 	.word	0x0801b8e4
 800356c:	0801b8e8 	.word	0x0801b8e8
 8003570:	0801b908 	.word	0x0801b908

08003574 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08c      	sub	sp, #48	; 0x30
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 800357c:	2310      	movs	r3, #16
 800357e:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d103      	bne.n	800359c <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8003594:	4840      	ldr	r0, [pc, #256]	; (8003698 <cliMemoryDump+0x124>)
 8003596:	f7ff fe5b 	bl	8003250 <cliPrintf>
 800359a:	e07a      	b.n	8003692 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	dd09      	ble.n	80035b6 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	3304      	adds	r3, #4
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2200      	movs	r2, #0
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f015 ff3b 	bl	8019428 <strtoul>
 80035b2:	4603      	mov	r3, r0
 80035b4:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2200      	movs	r2, #0
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f015 ff32 	bl	8019428 <strtoul>
 80035c4:	4603      	mov	r3, r0
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 80035cc:	4833      	ldr	r0, [pc, #204]	; (800369c <cliMemoryDump+0x128>)
 80035ce:	f7ff fe3f 	bl	8003250 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d6:	e058      	b.n	800368a <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d104      	bne.n	80035ec <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	4619      	mov	r1, r3
 80035e6:	482e      	ldr	r0, [pc, #184]	; (80036a0 <cliMemoryDump+0x12c>)
 80035e8:	f7ff fe32 	bl	8003250 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4619      	mov	r1, r3
 80035f2:	482c      	ldr	r0, [pc, #176]	; (80036a4 <cliMemoryDump+0x130>)
 80035f4:	f7ff fe2c 	bl	8003250 <cliPrintf>

    if ((idx%4) == 3)
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	425a      	negs	r2, r3
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	f002 0203 	and.w	r2, r2, #3
 8003604:	bf58      	it	pl
 8003606:	4253      	negpl	r3, r2
 8003608:	2b03      	cmp	r3, #3
 800360a:	d138      	bne.n	800367e <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 800360c:	4826      	ldr	r0, [pc, #152]	; (80036a8 <cliMemoryDump+0x134>)
 800360e:	f7ff fe1f 	bl	8003250 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8003612:	2300      	movs	r3, #0
 8003614:	623b      	str	r3, [r7, #32]
 8003616:	e02c      	b.n	8003672 <cliMemoryDump+0xfe>
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 800361c:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	e01d      	b.n	8003660 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8003624:	f107 020c 	add.w	r2, r7, #12
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b1f      	cmp	r3, #31
 8003630:	d910      	bls.n	8003654 <cliMemoryDump+0xe0>
 8003632:	f107 020c 	add.w	r2, r7, #12
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b7e      	cmp	r3, #126	; 0x7e
 800363e:	d809      	bhi.n	8003654 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8003640:	f107 020c 	add.w	r2, r7, #12
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	4619      	mov	r1, r3
 800364c:	4817      	ldr	r0, [pc, #92]	; (80036ac <cliMemoryDump+0x138>)
 800364e:	f7ff fdff 	bl	8003250 <cliPrintf>
 8003652:	e002      	b.n	800365a <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8003654:	4816      	ldr	r0, [pc, #88]	; (80036b0 <cliMemoryDump+0x13c>)
 8003656:	f7ff fdfb 	bl	8003250 <cliPrintf>
        for (i=0;i<4;i++)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3301      	adds	r3, #1
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2b03      	cmp	r3, #3
 8003664:	ddde      	ble.n	8003624 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	3304      	adds	r3, #4
 800366a:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	3301      	adds	r3, #1
 8003670:	623b      	str	r3, [r7, #32]
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	2b03      	cmp	r3, #3
 8003676:	ddcf      	ble.n	8003618 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8003678:	480e      	ldr	r0, [pc, #56]	; (80036b4 <cliMemoryDump+0x140>)
 800367a:	f7ff fde9 	bl	8003250 <cliPrintf>
    }
    addr++;
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	3304      	adds	r3, #4
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8003684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003686:	3301      	adds	r3, #1
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800368a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	429a      	cmp	r2, r3
 8003690:	dba2      	blt.n	80035d8 <cliMemoryDump+0x64>
  }
}
 8003692:	3730      	adds	r7, #48	; 0x30
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	0801b928 	.word	0x0801b928
 800369c:	0801b93c 	.word	0x0801b93c
 80036a0:	0801b944 	.word	0x0801b944
 80036a4:	0801b950 	.word	0x0801b950
 80036a8:	0801b958 	.word	0x0801b958
 80036ac:	0801b95c 	.word	0x0801b95c
 80036b0:	0801b960 	.word	0x0801b960
 80036b4:	0801b964 	.word	0x0801b964

080036b8 <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
	bool ret = false;
 80036be:	2300      	movs	r3, #0
 80036c0:	71fb      	strb	r3, [r7, #7]

	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80036c2:	490d      	ldr	r1, [pc, #52]	; (80036f8 <fatfsInit+0x40>)
 80036c4:	480d      	ldr	r0, [pc, #52]	; (80036fc <fatfsInit+0x44>)
 80036c6:	f012 f8dd 	bl	8015884 <FATFS_LinkDriver>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <fatfsInit+0x2e>
	{
		if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 80036d0:	2200      	movs	r2, #0
 80036d2:	4909      	ldr	r1, [pc, #36]	; (80036f8 <fatfsInit+0x40>)
 80036d4:	480a      	ldr	r0, [pc, #40]	; (8003700 <fatfsInit+0x48>)
 80036d6:	f010 fccf 	bl	8014078 <f_mount>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d102      	bne.n	80036e6 <fatfsInit+0x2e>
		{
			is_init = true;
 80036e0:	4b08      	ldr	r3, [pc, #32]	; (8003704 <fatfsInit+0x4c>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]
		}
	}

	#ifdef _USE_HW_CLI
		cliAdd("fatfs", cliFatfs);
 80036e6:	4908      	ldr	r1, [pc, #32]	; (8003708 <fatfsInit+0x50>)
 80036e8:	4808      	ldr	r0, [pc, #32]	; (800370c <fatfsInit+0x54>)
 80036ea:	f7ff fec1 	bl	8003470 <cliAdd>
	#endif

	return ret;
 80036ee:	79fb      	ldrb	r3, [r7, #7]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	200011c8 	.word	0x200011c8
 80036fc:	0801c4d4 	.word	0x0801c4d4
 8003700:	20000f94 	.word	0x20000f94
 8003704:	20000f90 	.word	0x20000f90
 8003708:	080037e5 	.word	0x080037e5
 800370c:	0801b974 	.word	0x0801b974

08003710 <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char *path)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b0d6      	sub	sp, #344	; 0x158
 8003714:	af00      	add	r7, sp, #0
 8003716:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800371a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800371e:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dir;
	FILINFO fno;

	res = f_opendir(&dir, path);
 8003720:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003724:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003728:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800372c:	6819      	ldr	r1, [r3, #0]
 800372e:	4610      	mov	r0, r2
 8003730:	f011 fc1b 	bl	8014f6a <f_opendir>
 8003734:	4603      	mov	r3, r0
 8003736:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	if(res == FR_OK)
 800373a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800373e:	2b00      	cmp	r3, #0
 8003740:	d144      	bne.n	80037cc <fatfsDir+0xbc>
	{
		for(;;)
		{
			res = f_readdir(&dir, &fno);
 8003742:	f107 0208 	add.w	r2, r7, #8
 8003746:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f011 fcb5 	bl	80150bc <f_readdir>
 8003752:	4603      	mov	r3, r0
 8003754:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			if(res != FR_OK || fno.fname[0] == 0)
 8003758:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800375c:	2b00      	cmp	r3, #0
 800375e:	d130      	bne.n	80037c2 <fatfsDir+0xb2>
 8003760:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003764:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003768:	7d9b      	ldrb	r3, [r3, #22]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d029      	beq.n	80037c2 <fatfsDir+0xb2>
				break;

			if(fno.fattrib & AM_DIR)
 800376e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003772:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003776:	7a1b      	ldrb	r3, [r3, #8]
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00c      	beq.n	800379a <fatfsDir+0x8a>
			{
				cliPrintf(" %s/%s \n", path, fno.fname);
 8003780:	f107 0308 	add.w	r3, r7, #8
 8003784:	f103 0216 	add.w	r2, r3, #22
 8003788:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800378c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003790:	6819      	ldr	r1, [r3, #0]
 8003792:	4812      	ldr	r0, [pc, #72]	; (80037dc <fatfsDir+0xcc>)
 8003794:	f7ff fd5c 	bl	8003250 <cliPrintf>
 8003798:	e7d3      	b.n	8003742 <fatfsDir+0x32>
			}
			else
			{
				cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 800379a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800379e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f107 0308 	add.w	r3, r7, #8
 80037aa:	f103 0216 	add.w	r2, r3, #22
 80037ae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80037b2:	f5a3 71aa 	sub.w	r1, r3, #340	; 0x154
 80037b6:	4603      	mov	r3, r0
 80037b8:	6809      	ldr	r1, [r1, #0]
 80037ba:	4809      	ldr	r0, [pc, #36]	; (80037e0 <fatfsDir+0xd0>)
 80037bc:	f7ff fd48 	bl	8003250 <cliPrintf>
			res = f_readdir(&dir, &fno);
 80037c0:	e7bf      	b.n	8003742 <fatfsDir+0x32>
			}
		}

		f_closedir(&dir);
 80037c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80037c6:	4618      	mov	r0, r3
 80037c8:	f011 fc52 	bl	8015070 <f_closedir>
	}

	return res;
 80037cc:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	0801b97c 	.word	0x0801b97c
 80037e0:	0801b988 	.word	0x0801b988

080037e4 <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80037f0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80037f4:	6018      	str	r0, [r3, #0]
	bool ret = false;
 80037f6:	2300      	movs	r3, #0
 80037f8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267

	if(args->argc == 1 && args->isStr(0, "info") == true)
 80037fc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003800:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d14d      	bne.n	80038a8 <cliFatfs+0xc4>
 800380c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003810:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	4990      	ldr	r1, [pc, #576]	; (8003a5c <cliFatfs+0x278>)
 800381a:	2000      	movs	r0, #0
 800381c:	4798      	blx	r3
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d041      	beq.n	80038a8 <cliFatfs+0xc4>
	{
		cliPrintf("fatfs init \t: %d\n", is_init);
 8003824:	4b8e      	ldr	r3, [pc, #568]	; (8003a60 <cliFatfs+0x27c>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	4619      	mov	r1, r3
 800382a:	488e      	ldr	r0, [pc, #568]	; (8003a64 <cliFatfs+0x280>)
 800382c:	f7ff fd10 	bl	8003250 <cliPrintf>

		if(is_init == true)
 8003830:	4b8b      	ldr	r3, [pc, #556]	; (8003a60 <cliFatfs+0x27c>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d034      	beq.n	80038a2 <cliFatfs+0xbe>
			FATFS *fs;
			DWORD fre_clust, fre_sect, tot_sect;
			FRESULT res;

			/* Get volume information and free clusters of drive 1 */
			res = f_getfree("", &fre_clust, &fs);
 8003838:	f507 7211 	add.w	r2, r7, #580	; 0x244
 800383c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003840:	4619      	mov	r1, r3
 8003842:	4889      	ldr	r0, [pc, #548]	; (8003a68 <cliFatfs+0x284>)
 8003844:	f011 fc87 	bl	8015156 <f_getfree>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if(res == FR_OK)
 800384e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8003852:	2b00      	cmp	r3, #0
 8003854:	d11f      	bne.n	8003896 <cliFatfs+0xb2>
			{
				/* Get total sectors and free sectors */
				tot_sect = (fs->n_fatent - 2) * fs->csize;
 8003856:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	3b02      	subs	r3, #2
 800385e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8003862:	8952      	ldrh	r2, [r2, #10]
 8003864:	fb02 f303 	mul.w	r3, r2, r3
 8003868:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
				fre_sect = fre_clust * fs->csize;
 800386c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003870:	895b      	ldrh	r3, [r3, #10]
 8003872:	461a      	mov	r2, r3
 8003874:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003878:	fb02 f303 	mul.w	r3, r2, r3
 800387c:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

				/* Print the free space (assuming 512 bytes/sector) */
				cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect/2, fre_sect/2);
 8003880:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8003884:	0859      	lsrs	r1, r3, #1
 8003886:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800388a:	085b      	lsrs	r3, r3, #1
 800388c:	461a      	mov	r2, r3
 800388e:	4877      	ldr	r0, [pc, #476]	; (8003a6c <cliFatfs+0x288>)
 8003890:	f7ff fcde 	bl	8003250 <cliPrintf>
 8003894:	e005      	b.n	80038a2 <cliFatfs+0xbe>
			}
			else
			{
				cliPrintf(" err : %d\n", res);
 8003896:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800389a:	4619      	mov	r1, r3
 800389c:	4874      	ldr	r0, [pc, #464]	; (8003a70 <cliFatfs+0x28c>)
 800389e:	f7ff fcd7 	bl	8003250 <cliPrintf>
			}
		}

		ret = true;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(args->argc == 1 && args->isStr(0, "dir") == true)
 80038a8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80038ac:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d11e      	bne.n	80038f6 <cliFatfs+0x112>
 80038b8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80038bc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	496b      	ldr	r1, [pc, #428]	; (8003a74 <cliFatfs+0x290>)
 80038c6:	2000      	movs	r0, #0
 80038c8:	4798      	blx	r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d012      	beq.n	80038f6 <cliFatfs+0x112>
	{
		FRESULT res;

		res = fatfsDir("/");
 80038d0:	4869      	ldr	r0, [pc, #420]	; (8003a78 <cliFatfs+0x294>)
 80038d2:	f7ff ff1d 	bl	8003710 <fatfsDir>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
		if(res != FR_OK)
 80038dc:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <cliFatfs+0x10c>
		{
			cliPrintf(" err : %d\n", res);
 80038e4:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80038e8:	4619      	mov	r1, r3
 80038ea:	4861      	ldr	r0, [pc, #388]	; (8003a70 <cliFatfs+0x28c>)
 80038ec:	f7ff fcb0 	bl	8003250 <cliPrintf>
		}

		ret = true;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(args->argc == 1 && args->isStr(0, "test") == true)
 80038f6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80038fa:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	f040 8095 	bne.w	8003a32 <cliFatfs+0x24e>
 8003908:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800390c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	4959      	ldr	r1, [pc, #356]	; (8003a7c <cliFatfs+0x298>)
 8003916:	2000      	movs	r0, #0
 8003918:	4798      	blx	r3
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8088 	beq.w	8003a32 <cliFatfs+0x24e>
	{
		FRESULT fp_ret;
		FIL log_file;
		uint32_t pre_time;

		pre_time = millis();
 8003922:	f7fe f907 	bl	8001b34 <millis>
 8003926:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 800392a:	f107 0308 	add.w	r3, r7, #8
 800392e:	220b      	movs	r2, #11
 8003930:	4953      	ldr	r1, [pc, #332]	; (8003a80 <cliFatfs+0x29c>)
 8003932:	4618      	mov	r0, r3
 8003934:	f010 fbe6 	bl	8014104 <f_open>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
		if(fp_ret == FR_OK)
 800393e:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8003942:	2b00      	cmp	r3, #0
 8003944:	d165      	bne.n	8003a12 <cliFatfs+0x22e>
		{
			f_printf(&log_file, "test1, ");
 8003946:	f107 0308 	add.w	r3, r7, #8
 800394a:	494e      	ldr	r1, [pc, #312]	; (8003a84 <cliFatfs+0x2a0>)
 800394c:	4618      	mov	r0, r3
 800394e:	f011 fd2f 	bl	80153b0 <f_printf>
			f_printf(&log_file, "test2, ");
 8003952:	f107 0308 	add.w	r3, r7, #8
 8003956:	494c      	ldr	r1, [pc, #304]	; (8003a88 <cliFatfs+0x2a4>)
 8003958:	4618      	mov	r0, r3
 800395a:	f011 fd29 	bl	80153b0 <f_printf>
			f_printf(&log_file, "test3, ");
 800395e:	f107 0308 	add.w	r3, r7, #8
 8003962:	494a      	ldr	r1, [pc, #296]	; (8003a8c <cliFatfs+0x2a8>)
 8003964:	4618      	mov	r0, r3
 8003966:	f011 fd23 	bl	80153b0 <f_printf>
			f_printf(&log_file, ", ");
 800396a:	f107 0308 	add.w	r3, r7, #8
 800396e:	4948      	ldr	r1, [pc, #288]	; (8003a90 <cliFatfs+0x2ac>)
 8003970:	4618      	mov	r0, r3
 8003972:	f011 fd1d 	bl	80153b0 <f_printf>
			f_printf(&log_file, "\n");
 8003976:	f107 0308 	add.w	r3, r7, #8
 800397a:	4946      	ldr	r1, [pc, #280]	; (8003a94 <cliFatfs+0x2b0>)
 800397c:	4618      	mov	r0, r3
 800397e:	f011 fd17 	bl	80153b0 <f_printf>

			for(int i=0; i<8; i++)
 8003982:	2300      	movs	r3, #0
 8003984:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8003988:	e00c      	b.n	80039a4 <cliFatfs+0x1c0>
			{
				f_printf(&log_file, "%d \n", i);
 800398a:	f107 0308 	add.w	r3, r7, #8
 800398e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8003992:	4941      	ldr	r1, [pc, #260]	; (8003a98 <cliFatfs+0x2b4>)
 8003994:	4618      	mov	r0, r3
 8003996:	f011 fd0b 	bl	80153b0 <f_printf>
			for(int i=0; i<8; i++)
 800399a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800399e:	3301      	adds	r3, #1
 80039a0:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80039a4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80039a8:	2b07      	cmp	r3, #7
 80039aa:	ddee      	ble.n	800398a <cliFatfs+0x1a6>
			}

			f_rewind(&log_file);
 80039ac:	f107 0308 	add.w	r3, r7, #8
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f011 f8d0 	bl	8014b58 <f_lseek>


			UINT len;
			uint8_t data;

			while(cliKeepLoop())
 80039b8:	e01c      	b.n	80039f4 <cliFatfs+0x210>
			{
				len = 0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
				fp_ret = f_read(&log_file, &data, 1, &len);
 80039c0:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80039c4:	f207 213b 	addw	r1, r7, #571	; 0x23b
 80039c8:	f107 0008 	add.w	r0, r7, #8
 80039cc:	2201      	movs	r2, #1
 80039ce:	f010 fd67 	bl	80144a0 <f_read>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

				if(fp_ret != FR_OK)
 80039d8:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10f      	bne.n	8003a00 <cliFatfs+0x21c>
				{
					break;
				}

				if(len == 0)
 80039e0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00d      	beq.n	8003a04 <cliFatfs+0x220>
				{
					break;
				}

				cliPrintf("%c", data);
 80039e8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 80039ec:	4619      	mov	r1, r3
 80039ee:	482b      	ldr	r0, [pc, #172]	; (8003a9c <cliFatfs+0x2b8>)
 80039f0:	f7ff fc2e 	bl	8003250 <cliPrintf>
			while(cliKeepLoop())
 80039f4:	f7ff fd26 	bl	8003444 <cliKeepLoop>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1dd      	bne.n	80039ba <cliFatfs+0x1d6>
 80039fe:	e002      	b.n	8003a06 <cliFatfs+0x222>
					break;
 8003a00:	bf00      	nop
 8003a02:	e000      	b.n	8003a06 <cliFatfs+0x222>
					break;
 8003a04:	bf00      	nop
			}

			f_close(&log_file);
 8003a06:	f107 0308 	add.w	r3, r7, #8
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f011 f87a 	bl	8014b04 <f_close>
 8003a10:	e002      	b.n	8003a18 <cliFatfs+0x234>
		}
		else
		{
			cliPrintf("f_open fail\r\n");
 8003a12:	4823      	ldr	r0, [pc, #140]	; (8003aa0 <cliFatfs+0x2bc>)
 8003a14:	f7ff fc1c 	bl	8003250 <cliPrintf>
		}

		cliPrintf("%d ms\r\n", millis() - pre_time);
 8003a18:	f7fe f88c 	bl	8001b34 <millis>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	4619      	mov	r1, r3
 8003a26:	481f      	ldr	r0, [pc, #124]	; (8003aa4 <cliFatfs+0x2c0>)
 8003a28:	f7ff fc12 	bl	8003250 <cliPrintf>

		ret = true;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(ret != true)
 8003a32:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8003a36:	f083 0301 	eor.w	r3, r3, #1
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <cliFatfs+0x26e>
	{
		cliPrintf("fatfs info\n");
 8003a40:	4819      	ldr	r0, [pc, #100]	; (8003aa8 <cliFatfs+0x2c4>)
 8003a42:	f7ff fc05 	bl	8003250 <cliPrintf>
		cliPrintf("fatfs dir\n");
 8003a46:	4819      	ldr	r0, [pc, #100]	; (8003aac <cliFatfs+0x2c8>)
 8003a48:	f7ff fc02 	bl	8003250 <cliPrintf>
		cliPrintf("fatfs test\n");
 8003a4c:	4818      	ldr	r0, [pc, #96]	; (8003ab0 <cliFatfs+0x2cc>)
 8003a4e:	f7ff fbff 	bl	8003250 <cliPrintf>
	}
}
 8003a52:	bf00      	nop
 8003a54:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	0801b99c 	.word	0x0801b99c
 8003a60:	20000f90 	.word	0x20000f90
 8003a64:	0801b9a4 	.word	0x0801b9a4
 8003a68:	0801b9b8 	.word	0x0801b9b8
 8003a6c:	0801b9bc 	.word	0x0801b9bc
 8003a70:	0801b9f0 	.word	0x0801b9f0
 8003a74:	0801b9fc 	.word	0x0801b9fc
 8003a78:	0801ba00 	.word	0x0801ba00
 8003a7c:	0801ba04 	.word	0x0801ba04
 8003a80:	0801ba0c 	.word	0x0801ba0c
 8003a84:	0801ba14 	.word	0x0801ba14
 8003a88:	0801ba1c 	.word	0x0801ba1c
 8003a8c:	0801ba24 	.word	0x0801ba24
 8003a90:	0801ba2c 	.word	0x0801ba2c
 8003a94:	0801ba30 	.word	0x0801ba30
 8003a98:	0801ba34 	.word	0x0801ba34
 8003a9c:	0801ba3c 	.word	0x0801ba3c
 8003aa0:	0801ba40 	.word	0x0801ba40
 8003aa4:	0801ba50 	.word	0x0801ba50
 8003aa8:	0801ba58 	.word	0x0801ba58
 8003aac:	0801ba64 	.word	0x0801ba64
 8003ab0:	0801ba70 	.word	0x0801ba70

08003ab4 <gpioInit>:
static void cliGpio(cli_args_t *args);
#endif


bool gpioInit(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
	bool ret = true;
 8003aba:	2301      	movs	r3, #1
 8003abc:	71fb      	strb	r3, [r7, #7]

#ifdef _USE_HW_CLI
	cliAdd("gpio", cliGpio);
 8003abe:	4904      	ldr	r1, [pc, #16]	; (8003ad0 <gpioInit+0x1c>)
 8003ac0:	4804      	ldr	r0, [pc, #16]	; (8003ad4 <gpioInit+0x20>)
 8003ac2:	f7ff fcd5 	bl	8003470 <cliAdd>
#endif

	return ret;
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	08003bed 	.word	0x08003bed
 8003ad4:	0801ba7c 	.word	0x0801ba7c

08003ad8 <gpioPinWrite>:

	return ret;
}

void gpioPinWrite(uint8_t ch, bool value)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	460a      	mov	r2, r1
 8003ae2:	71fb      	strb	r3, [r7, #7]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	71bb      	strb	r3, [r7, #6]
	if(ch >= GPIO_MAX_CH)
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d840      	bhi.n	8003b70 <gpioPinWrite+0x98>
	{
		return;
	}

	if(value)
 8003aee:	79bb      	ldrb	r3, [r7, #6]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01e      	beq.n	8003b32 <gpioPinWrite+0x5a>
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8003af4:	79fa      	ldrb	r2, [r7, #7]
 8003af6:	4920      	ldr	r1, [pc, #128]	; (8003b78 <gpioPinWrite+0xa0>)
 8003af8:	4613      	mov	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	79fa      	ldrb	r2, [r7, #7]
 8003b06:	491c      	ldr	r1, [pc, #112]	; (8003b78 <gpioPinWrite+0xa0>)
 8003b08:	4613      	mov	r3, r2
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	3304      	adds	r3, #4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	b299      	uxth	r1, r3
 8003b18:	79fa      	ldrb	r2, [r7, #7]
 8003b1a:	4c17      	ldr	r4, [pc, #92]	; (8003b78 <gpioPinWrite+0xa0>)
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4423      	add	r3, r4
 8003b26:	3309      	adds	r3, #9
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f004 fefa 	bl	8008924 <HAL_GPIO_WritePin>
 8003b30:	e01f      	b.n	8003b72 <gpioPinWrite+0x9a>
	}
	else
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8003b32:	79fa      	ldrb	r2, [r7, #7]
 8003b34:	4910      	ldr	r1, [pc, #64]	; (8003b78 <gpioPinWrite+0xa0>)
 8003b36:	4613      	mov	r3, r2
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	79fa      	ldrb	r2, [r7, #7]
 8003b44:	490c      	ldr	r1, [pc, #48]	; (8003b78 <gpioPinWrite+0xa0>)
 8003b46:	4613      	mov	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	3304      	adds	r3, #4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	b299      	uxth	r1, r3
 8003b56:	79fa      	ldrb	r2, [r7, #7]
 8003b58:	4c07      	ldr	r4, [pc, #28]	; (8003b78 <gpioPinWrite+0xa0>)
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4423      	add	r3, r4
 8003b64:	330a      	adds	r3, #10
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f004 fedb 	bl	8008924 <HAL_GPIO_WritePin>
 8003b6e:	e000      	b.n	8003b72 <gpioPinWrite+0x9a>
		return;
 8003b70:	bf00      	nop
	}
}
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd90      	pop	{r4, r7, pc}
 8003b78:	080284d4 	.word	0x080284d4

08003b7c <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]

	if(ch >= GPIO_MAX_CH)
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d901      	bls.n	8003b94 <gpioPinRead+0x18>
	{
		return false;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e024      	b.n	8003bde <gpioPinRead+0x62>
	}

	if(HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8003b94:	79fa      	ldrb	r2, [r7, #7]
 8003b96:	4914      	ldr	r1, [pc, #80]	; (8003be8 <gpioPinRead+0x6c>)
 8003b98:	4613      	mov	r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	79fa      	ldrb	r2, [r7, #7]
 8003ba6:	4910      	ldr	r1, [pc, #64]	; (8003be8 <gpioPinRead+0x6c>)
 8003ba8:	4613      	mov	r3, r2
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f004 fe9b 	bl	80088f4 <HAL_GPIO_ReadPin>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	79fa      	ldrb	r2, [r7, #7]
 8003bc4:	4908      	ldr	r1, [pc, #32]	; (8003be8 <gpioPinRead+0x6c>)
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	3309      	adds	r3, #9
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	4298      	cmp	r0, r3
 8003bd6:	d101      	bne.n	8003bdc <gpioPinRead+0x60>
	{
		ret = true;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	080284d4 	.word	0x080284d4

08003bec <cliGpio>:


#ifdef _USE_HW_CLI

void cliGpio(cli_args_t *args)
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 1 && args->isStr(0, "show") == true)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d129      	bne.n	8003c54 <cliGpio+0x68>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	4948      	ldr	r1, [pc, #288]	; (8003d28 <cliGpio+0x13c>)
 8003c06:	2000      	movs	r0, #0
 8003c08:	4798      	blx	r3
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d021      	beq.n	8003c54 <cliGpio+0x68>
	{
		while(cliKeepLoop())
 8003c10:	e019      	b.n	8003c46 <cliGpio+0x5a>
		{
			for(int i=0; i<GPIO_MAX_CH; i++)
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	e00c      	b.n	8003c32 <cliGpio+0x46>
			{
				cliPrintf("%d", gpioPinRead(i));
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff ffad 	bl	8003b7c <gpioPinRead>
 8003c22:	4603      	mov	r3, r0
 8003c24:	4619      	mov	r1, r3
 8003c26:	4841      	ldr	r0, [pc, #260]	; (8003d2c <cliGpio+0x140>)
 8003c28:	f7ff fb12 	bl	8003250 <cliPrintf>
			for(int i=0; i<GPIO_MAX_CH; i++)
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	ddef      	ble.n	8003c18 <cliGpio+0x2c>
			}
			cliPrintf("\n");
 8003c38:	483d      	ldr	r0, [pc, #244]	; (8003d30 <cliGpio+0x144>)
 8003c3a:	f7ff fb09 	bl	8003250 <cliPrintf>
			delay(300);
 8003c3e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003c42:	f7fd ff6c 	bl	8001b1e <delay>
		while(cliKeepLoop())
 8003c46:	f7ff fbfd 	bl	8003444 <cliKeepLoop>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e0      	bne.n	8003c12 <cliGpio+0x26>
		}

		ret = true;
 8003c50:	2301      	movs	r3, #1
 8003c52:	75fb      	strb	r3, [r7, #23]
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d124      	bne.n	8003ca6 <cliGpio+0xba>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	4934      	ldr	r1, [pc, #208]	; (8003d34 <cliGpio+0x148>)
 8003c62:	2000      	movs	r0, #0
 8003c64:	4798      	blx	r3
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d01c      	beq.n	8003ca6 <cliGpio+0xba>
	{
		uint8_t ch;

		ch = (uint8_t)args->getData(1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2001      	movs	r0, #1
 8003c72:	4798      	blx	r3
 8003c74:	4603      	mov	r3, r0
 8003c76:	73fb      	strb	r3, [r7, #15]

		while(cliKeepLoop())
 8003c78:	e00e      	b.n	8003c98 <cliGpio+0xac>
		{
			cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8003c7a:	7bfc      	ldrb	r4, [r7, #15]
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff ff7c 	bl	8003b7c <gpioPinRead>
 8003c84:	4603      	mov	r3, r0
 8003c86:	461a      	mov	r2, r3
 8003c88:	4621      	mov	r1, r4
 8003c8a:	482b      	ldr	r0, [pc, #172]	; (8003d38 <cliGpio+0x14c>)
 8003c8c:	f7ff fae0 	bl	8003250 <cliPrintf>
			delay(300);
 8003c90:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003c94:	f7fd ff43 	bl	8001b1e <delay>
		while(cliKeepLoop())
 8003c98:	f7ff fbd4 	bl	8003444 <cliKeepLoop>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1eb      	bne.n	8003c7a <cliGpio+0x8e>
		}

		ret = true;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
	}

	if(args->argc == 3 && args->isStr(0, "write") == true)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d126      	bne.n	8003cfc <cliGpio+0x110>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	4922      	ldr	r1, [pc, #136]	; (8003d3c <cliGpio+0x150>)
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	4798      	blx	r3
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d01e      	beq.n	8003cfc <cliGpio+0x110>
	{
		uint8_t ch;
		uint8_t data;

		ch = (uint8_t)args->getData(1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2001      	movs	r0, #1
 8003cc4:	4798      	blx	r3
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	73bb      	strb	r3, [r7, #14]
		data = (uint8_t)args->getData(2);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2002      	movs	r0, #2
 8003cd0:	4798      	blx	r3
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	737b      	strb	r3, [r7, #13]

		gpioPinWrite(ch, data);
 8003cd6:	7b7b      	ldrb	r3, [r7, #13]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	bf14      	ite	ne
 8003cdc:	2301      	movne	r3, #1
 8003cde:	2300      	moveq	r3, #0
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	7bbb      	ldrb	r3, [r7, #14]
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fef6 	bl	8003ad8 <gpioPinWrite>

		cliPrintf("gpio write %d : %d\n", ch, data);
 8003cec:	7bbb      	ldrb	r3, [r7, #14]
 8003cee:	7b7a      	ldrb	r2, [r7, #13]
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4813      	ldr	r0, [pc, #76]	; (8003d40 <cliGpio+0x154>)
 8003cf4:	f7ff faac 	bl	8003250 <cliPrintf>

		ret = true;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	f083 0301 	eor.w	r3, r3, #1
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <cliGpio+0x132>
	{
		cliPrintf("gpio show\n");
 8003d08:	480e      	ldr	r0, [pc, #56]	; (8003d44 <cliGpio+0x158>)
 8003d0a:	f7ff faa1 	bl	8003250 <cliPrintf>
		cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8003d0e:	2103      	movs	r1, #3
 8003d10:	480d      	ldr	r0, [pc, #52]	; (8003d48 <cliGpio+0x15c>)
 8003d12:	f7ff fa9d 	bl	8003250 <cliPrintf>
		cliPrintf("gpio write ch[0~%d]\n", GPIO_MAX_CH-1);
 8003d16:	2103      	movs	r1, #3
 8003d18:	480c      	ldr	r0, [pc, #48]	; (8003d4c <cliGpio+0x160>)
 8003d1a:	f7ff fa99 	bl	8003250 <cliPrintf>
	}
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd90      	pop	{r4, r7, pc}
 8003d26:	bf00      	nop
 8003d28:	0801ba84 	.word	0x0801ba84
 8003d2c:	0801ba8c 	.word	0x0801ba8c
 8003d30:	0801ba90 	.word	0x0801ba90
 8003d34:	0801ba94 	.word	0x0801ba94
 8003d38:	0801ba9c 	.word	0x0801ba9c
 8003d3c:	0801bab0 	.word	0x0801bab0
 8003d40:	0801bab8 	.word	0x0801bab8
 8003d44:	0801bacc 	.word	0x0801bacc
 8003d48:	0801bad8 	.word	0x0801bad8
 8003d4c:	0801baec 	.word	0x0801baec

08003d50 <i2cInit>:

static void delayUs(uint32_t us);


bool i2cInit(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i=0; i<I2C_MAX_CH; i++)
 8003d56:	2300      	movs	r3, #0
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	e011      	b.n	8003d80 <i2cInit+0x30>
	{
		i2c_timeout[i] = 10;
 8003d5c:	4a10      	ldr	r2, [pc, #64]	; (8003da0 <i2cInit+0x50>)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	210a      	movs	r1, #10
 8003d62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		i2c_errcount[i] = 0;
 8003d66:	4a0f      	ldr	r2, [pc, #60]	; (8003da4 <i2cInit+0x54>)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		is_begin[i] = false;
 8003d70:	4a0d      	ldr	r2, [pc, #52]	; (8003da8 <i2cInit+0x58>)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4413      	add	r3, r2
 8003d76:	2200      	movs	r2, #0
 8003d78:	701a      	strb	r2, [r3, #0]
	for(i=0; i<I2C_MAX_CH; i++)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	607b      	str	r3, [r7, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0ea      	beq.n	8003d5c <i2cInit+0xc>
	}

#ifdef _USE_HW_CLI
	cliAdd("i2c", cliI2C);
 8003d86:	4909      	ldr	r1, [pc, #36]	; (8003dac <i2cInit+0x5c>)
 8003d88:	4809      	ldr	r0, [pc, #36]	; (8003db0 <i2cInit+0x60>)
 8003d8a:	f7ff fb71 	bl	8003470 <cliAdd>
#endif

	is_init = true;
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <i2cInit+0x64>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	701a      	strb	r2, [r3, #0]
	return true;
 8003d94:	2301      	movs	r3, #1
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	200011cc 	.word	0x200011cc
 8003da4:	200011d0 	.word	0x200011d0
 8003da8:	200011dc 	.word	0x200011dc
 8003dac:	080042c5 	.word	0x080042c5
 8003db0:	0801bb04 	.word	0x0801bb04
 8003db4:	200011d8 	.word	0x200011d8

08003db8 <i2cBegin>:
{
	return is_init;
}

bool i2cBegin(uint8_t ch, uint32_t freq_khz)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	6039      	str	r1, [r7, #0]
 8003dc2:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73fb      	strb	r3, [r7, #15]

	I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8003dc8:	79fa      	ldrb	r2, [r7, #7]
 8003dca:	4929      	ldr	r1, [pc, #164]	; (8003e70 <i2cBegin+0xb8>)
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60bb      	str	r3, [r7, #8]

	if(ch>=I2C_MAX_CH)
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <i2cBegin+0x2c>
	{
		return false;
 8003de0:	2300      	movs	r3, #0
 8003de2:	e041      	b.n	8003e68 <i2cBegin+0xb0>
	}

	switch(ch)
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d13d      	bne.n	8003e66 <i2cBegin+0xae>
	{
		case _DEF_I2C1:
			i2c_freq[ch] = freq_khz;
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	4921      	ldr	r1, [pc, #132]	; (8003e74 <i2cBegin+0xbc>)
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			hi2c2.Instance = I2C2;
 8003df4:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <i2cBegin+0xc0>)
 8003df6:	4a21      	ldr	r2, [pc, #132]	; (8003e7c <i2cBegin+0xc4>)
 8003df8:	601a      	str	r2, [r3, #0]
			hi2c2.Init.ClockSpeed = freq_khz * 1000;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e00:	fb02 f303 	mul.w	r3, r2, r3
 8003e04:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <i2cBegin+0xc0>)
 8003e06:	6053      	str	r3, [r2, #4]
			hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e08:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <i2cBegin+0xc0>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	609a      	str	r2, [r3, #8]
			hi2c2.Init.OwnAddress1 = 0;
 8003e0e:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <i2cBegin+0xc0>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	60da      	str	r2, [r3, #12]
			hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e14:	4b18      	ldr	r3, [pc, #96]	; (8003e78 <i2cBegin+0xc0>)
 8003e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e1a:	611a      	str	r2, [r3, #16]
			hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e1c:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <i2cBegin+0xc0>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	615a      	str	r2, [r3, #20]
			hi2c2.Init.OwnAddress2 = 0;
 8003e22:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <i2cBegin+0xc0>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	619a      	str	r2, [r3, #24]
			hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e28:	4b13      	ldr	r3, [pc, #76]	; (8003e78 <i2cBegin+0xc0>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	61da      	str	r2, [r3, #28]
			hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e2e:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <i2cBegin+0xc0>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	621a      	str	r2, [r3, #32]

			i2cReset(ch);
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f824 	bl	8003e84 <i2cReset>

			HAL_I2C_DeInit(p_handle);
 8003e3c:	68b8      	ldr	r0, [r7, #8]
 8003e3e:	f004 fee9 	bl	8008c14 <HAL_I2C_DeInit>
			if(HAL_I2C_Init(p_handle) != HAL_OK)
 8003e42:	68b8      	ldr	r0, [r7, #8]
 8003e44:	f004 fda2 	bl	800898c <HAL_I2C_Init>
			{

			}

      /* Enable the Analog I2C Filter */
      HAL_I2CEx_ConfigAnalogFilter(p_handle,I2C_ANALOGFILTER_ENABLE);
 8003e48:	2100      	movs	r1, #0
 8003e4a:	68b8      	ldr	r0, [r7, #8]
 8003e4c:	f007 fbfd 	bl	800b64a <HAL_I2CEx_ConfigAnalogFilter>

      /* Configure Digital filter */
      HAL_I2CEx_ConfigDigitalFilter(p_handle, 0);
 8003e50:	2100      	movs	r1, #0
 8003e52:	68b8      	ldr	r0, [r7, #8]
 8003e54:	f007 fc35 	bl	800b6c2 <HAL_I2CEx_ConfigDigitalFilter>

      ret = true;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
      is_begin[ch] = true;
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <i2cBegin+0xc8>)
 8003e60:	2101      	movs	r1, #1
 8003e62:	54d1      	strb	r1, [r2, r3]
      break;
 8003e64:	bf00      	nop
	}

	return ret;
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20000070 	.word	0x20000070
 8003e74:	200011d4 	.word	0x200011d4
 8003e78:	200011e0 	.word	0x200011e0
 8003e7c:	40005800 	.word	0x40005800
 8003e80:	200011dc 	.word	0x200011dc

08003e84 <i2cReset>:
{
	return is_begin[ch];
}

void i2cReset(uint8_t ch)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	; 0x28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  i2c_tbl_t *p_pin = &i2c_tbl[ch];
 8003e8e:	79fa      	ldrb	r2, [r7, #7]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4a44      	ldr	r2, [pc, #272]	; (8003fac <i2cReset+0x128>)
 8003e9a:	4413      	add	r3, r2
 8003e9c:	623b      	str	r3, [r7, #32]


  GPIO_InitStruct.Pin       = p_pin->scl_pin;
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_OD;
 8003ea4:	2311      	movs	r3, #17
 8003ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8003eac:	2303      	movs	r3, #3
 8003eae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(p_pin->scl_port, &GPIO_InitStruct);
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f107 020c 	add.w	r2, r7, #12
 8003eb8:	4611      	mov	r1, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f004 fab2 	bl	8008424 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin       = p_pin->sda_pin;
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_OD;
 8003ec6:	2311      	movs	r3, #17
 8003ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(p_pin->sda_port, &GPIO_InitStruct);
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f107 020c 	add.w	r2, r7, #12
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f004 faa3 	bl	8008424 <HAL_GPIO_Init>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
  */

  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	6858      	ldr	r0, [r3, #4]
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2201      	movs	r2, #1
 8003eea:	4619      	mov	r1, r3
 8003eec:	f004 fd1a 	bl	8008924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_SET);
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	68d8      	ldr	r0, [r3, #12]
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2201      	movs	r2, #1
 8003efc:	4619      	mov	r1, r3
 8003efe:	f004 fd11 	bl	8008924 <HAL_GPIO_WritePin>
  delayUs(5);
 8003f02:	2005      	movs	r0, #5
 8003f04:	f000 f92a 	bl	800415c <delayUs>

  for (int i = 0; i < 9; i++)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0c:	e01a      	b.n	8003f44 <i2cReset+0xc0>
  {

    HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_RESET);
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	6858      	ldr	r0, [r3, #4]
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2200      	movs	r2, #0
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	f004 fd02 	bl	8008924 <HAL_GPIO_WritePin>
    delayUs(5);
 8003f20:	2005      	movs	r0, #5
 8003f22:	f000 f91b 	bl	800415c <delayUs>
    HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	6858      	ldr	r0, [r3, #4]
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2201      	movs	r2, #1
 8003f32:	4619      	mov	r1, r3
 8003f34:	f004 fcf6 	bl	8008924 <HAL_GPIO_WritePin>
    delayUs(5);
 8003f38:	2005      	movs	r0, #5
 8003f3a:	f000 f90f 	bl	800415c <delayUs>
  for (int i = 0; i < 9; i++)
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	3301      	adds	r3, #1
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	dde1      	ble.n	8003f0e <i2cReset+0x8a>
  }

  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_RESET);
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	6858      	ldr	r0, [r3, #4]
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2200      	movs	r2, #0
 8003f56:	4619      	mov	r1, r3
 8003f58:	f004 fce4 	bl	8008924 <HAL_GPIO_WritePin>
  delayUs(5);
 8003f5c:	2005      	movs	r0, #5
 8003f5e:	f000 f8fd 	bl	800415c <delayUs>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_RESET);
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	68d8      	ldr	r0, [r3, #12]
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f004 fcd8 	bl	8008924 <HAL_GPIO_WritePin>
  delayUs(5);
 8003f74:	2005      	movs	r0, #5
 8003f76:	f000 f8f1 	bl	800415c <delayUs>

  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	6858      	ldr	r0, [r3, #4]
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2201      	movs	r2, #1
 8003f86:	4619      	mov	r1, r3
 8003f88:	f004 fccc 	bl	8008924 <HAL_GPIO_WritePin>
  delayUs(5);
 8003f8c:	2005      	movs	r0, #5
 8003f8e:	f000 f8e5 	bl	800415c <delayUs>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_SET);
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	68d8      	ldr	r0, [r3, #12]
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	f004 fcc0 	bl	8008924 <HAL_GPIO_WritePin>
}
 8003fa4:	bf00      	nop
 8003fa6:	3728      	adds	r7, #40	; 0x28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20000070 	.word	0x20000070

08003fb0 <i2cIsDeviceReady>:

bool i2cIsDeviceReady(uint8_t ch, uint8_t dev_addr)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	460a      	mov	r2, r1
 8003fba:	71fb      	strb	r3, [r7, #7]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	71bb      	strb	r3, [r7, #6]
	I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8003fc0:	79fa      	ldrb	r2, [r7, #7]
 8003fc2:	490e      	ldr	r1, [pc, #56]	; (8003ffc <i2cIsDeviceReady+0x4c>)
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_IsDeviceReady(p_handle, dev_addr << 1, 10, 10) == HAL_OK)
 8003fd2:	79bb      	ldrb	r3, [r7, #6]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	b299      	uxth	r1, r3
 8003fda:	230a      	movs	r3, #10
 8003fdc:	220a      	movs	r2, #10
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f005 f988 	bl	80092f4 <HAL_I2C_IsDeviceReady>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d103      	bne.n	8003ff2 <i2cIsDeviceReady+0x42>
  __ASM volatile ("cpsie i" : : : "memory");
 8003fea:	b662      	cpsie	i
}
 8003fec:	bf00      	nop
	{
		__enable_irq();
		return true;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <i2cIsDeviceReady+0x44>
	}

	return false;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20000070 	.word	0x20000070

08004000 <i2cReadByte>:

	return ret;
}

bool i2cReadByte(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t timeout)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af02      	add	r7, sp, #8
 8004006:	607b      	str	r3, [r7, #4]
 8004008:	4603      	mov	r3, r0
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	460b      	mov	r3, r1
 800400e:	81bb      	strh	r3, [r7, #12]
 8004010:	4613      	mov	r3, r2
 8004012:	817b      	strh	r3, [r7, #10]
	return i2cReadBytes(ch, dev_addr, reg_addr, p_data, 1, timeout);
 8004014:	897a      	ldrh	r2, [r7, #10]
 8004016:	89b9      	ldrh	r1, [r7, #12]
 8004018:	7bf8      	ldrb	r0, [r7, #15]
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	2301      	movs	r3, #1
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f000 f806 	bl	8004034 <i2cReadBytes>
 8004028:	4603      	mov	r3, r0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <i2cReadBytes>:

bool i2cReadBytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08c      	sub	sp, #48	; 0x30
 8004038:	af04      	add	r7, sp, #16
 800403a:	607b      	str	r3, [r7, #4]
 800403c:	4603      	mov	r3, r0
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	460b      	mov	r3, r1
 8004042:	81bb      	strh	r3, [r7, #12]
 8004044:	4613      	mov	r3, r2
 8004046:	817b      	strh	r3, [r7, #10]
	bool ret;
	HAL_StatusTypeDef i2c_ret;
	I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8004048:	7bfa      	ldrb	r2, [r7, #15]
 800404a:	4916      	ldr	r1, [pc, #88]	; (80040a4 <i2cReadBytes+0x70>)
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	61bb      	str	r3, [r7, #24]

	if(ch>=I2C_MAX_CH)
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <i2cReadBytes+0x30>
	{
		return false;
 8004060:	2300      	movs	r3, #0
 8004062:	e01a      	b.n	800409a <i2cReadBytes+0x66>
	}

	i2c_ret = HAL_I2C_Mem_Read(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, p_data, length, timeout);
 8004064:	89bb      	ldrh	r3, [r7, #12]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	b299      	uxth	r1, r3
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	b29b      	uxth	r3, r3
 800406e:	8978      	ldrh	r0, [r7, #10]
 8004070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004072:	9202      	str	r2, [sp, #8]
 8004074:	9301      	str	r3, [sp, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	2301      	movs	r3, #1
 800407c:	4602      	mov	r2, r0
 800407e:	69b8      	ldr	r0, [r7, #24]
 8004080:	f004 ff06 	bl	8008e90 <HAL_I2C_Mem_Read>
 8004084:	4603      	mov	r3, r0
 8004086:	75fb      	strb	r3, [r7, #23]

	if(i2c_ret == HAL_OK)
 8004088:	7dfb      	ldrb	r3, [r7, #23]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d102      	bne.n	8004094 <i2cReadBytes+0x60>
	{
		ret = true;
 800408e:	2301      	movs	r3, #1
 8004090:	77fb      	strb	r3, [r7, #31]
 8004092:	e001      	b.n	8004098 <i2cReadBytes+0x64>
	}
	else
	{
		ret = false;
 8004094:	2300      	movs	r3, #0
 8004096:	77fb      	strb	r3, [r7, #31]
	}

	return ret;
 8004098:	7ffb      	ldrb	r3, [r7, #31]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3720      	adds	r7, #32
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20000070 	.word	0x20000070

080040a8 <i2cWriteByte>:

	return ret;
}

bool i2cWriteByte(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t data, uint32_t timeout)
{
 80040a8:	b590      	push	{r4, r7, lr}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	4604      	mov	r4, r0
 80040b0:	4608      	mov	r0, r1
 80040b2:	4611      	mov	r1, r2
 80040b4:	461a      	mov	r2, r3
 80040b6:	4623      	mov	r3, r4
 80040b8:	71fb      	strb	r3, [r7, #7]
 80040ba:	4603      	mov	r3, r0
 80040bc:	80bb      	strh	r3, [r7, #4]
 80040be:	460b      	mov	r3, r1
 80040c0:	807b      	strh	r3, [r7, #2]
 80040c2:	4613      	mov	r3, r2
 80040c4:	71bb      	strb	r3, [r7, #6]
	return i2cWriteBytes(ch, dev_addr, reg_addr, &data, 1, timeout);
 80040c6:	1dbc      	adds	r4, r7, #6
 80040c8:	887a      	ldrh	r2, [r7, #2]
 80040ca:	88b9      	ldrh	r1, [r7, #4]
 80040cc:	79f8      	ldrb	r0, [r7, #7]
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	9301      	str	r3, [sp, #4]
 80040d2:	2301      	movs	r3, #1
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	4623      	mov	r3, r4
 80040d8:	f000 f806 	bl	80040e8 <i2cWriteBytes>
 80040dc:	4603      	mov	r3, r0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd90      	pop	{r4, r7, pc}
	...

080040e8 <i2cWriteBytes>:

bool i2cWriteBytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08c      	sub	sp, #48	; 0x30
 80040ec:	af04      	add	r7, sp, #16
 80040ee:	607b      	str	r3, [r7, #4]
 80040f0:	4603      	mov	r3, r0
 80040f2:	73fb      	strb	r3, [r7, #15]
 80040f4:	460b      	mov	r3, r1
 80040f6:	81bb      	strh	r3, [r7, #12]
 80040f8:	4613      	mov	r3, r2
 80040fa:	817b      	strh	r3, [r7, #10]
	bool ret;
	HAL_StatusTypeDef i2c_ret;
	I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 80040fc:	7bfa      	ldrb	r2, [r7, #15]
 80040fe:	4916      	ldr	r1, [pc, #88]	; (8004158 <i2cWriteBytes+0x70>)
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	61bb      	str	r3, [r7, #24]

	if(ch>=I2C_MAX_CH)
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <i2cWriteBytes+0x30>
	{
		return false;
 8004114:	2300      	movs	r3, #0
 8004116:	e01a      	b.n	800414e <i2cWriteBytes+0x66>
	}

	i2c_ret = HAL_I2C_Mem_Write(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, p_data, length, timeout);
 8004118:	89bb      	ldrh	r3, [r7, #12]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	b299      	uxth	r1, r3
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	b29b      	uxth	r3, r3
 8004122:	8978      	ldrh	r0, [r7, #10]
 8004124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004126:	9202      	str	r2, [sp, #8]
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	2301      	movs	r3, #1
 8004130:	4602      	mov	r2, r0
 8004132:	69b8      	ldr	r0, [r7, #24]
 8004134:	f004 fdb2 	bl	8008c9c <HAL_I2C_Mem_Write>
 8004138:	4603      	mov	r3, r0
 800413a:	75fb      	strb	r3, [r7, #23]

	if(i2c_ret == HAL_OK)
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <i2cWriteBytes+0x60>
	{
		ret = true;
 8004142:	2301      	movs	r3, #1
 8004144:	77fb      	strb	r3, [r7, #31]
 8004146:	e001      	b.n	800414c <i2cWriteBytes+0x64>
	}
	else
	{
		ret = false;
 8004148:	2300      	movs	r3, #0
 800414a:	77fb      	strb	r3, [r7, #31]
	}

	return ret;
 800414c:	7ffb      	ldrb	r3, [r7, #31]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000070 	.word	0x20000070

0800415c <delayUs>:
{
	return i2c_errcount[ch];
}

void delayUs(uint32_t us)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
	volatile uint32_t i;

	for(i=0; i<us*1000; i++)
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e002      	b.n	8004170 <delayUs+0x14>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3301      	adds	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004176:	fb03 f202 	mul.w	r2, r3, r2
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	429a      	cmp	r2, r3
 800417e:	d8f4      	bhi.n	800416a <delayUs+0xe>
	{

	}
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
	UNUSED(hi2c);
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	; 0x28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ac:	f107 0314 	add.w	r3, r7, #20
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	609a      	str	r2, [r3, #8]
 80041b8:	60da      	str	r2, [r3, #12]
 80041ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a29      	ldr	r2, [pc, #164]	; (8004268 <HAL_I2C_MspInit+0xc4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d14c      	bne.n	8004260 <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	4b28      	ldr	r3, [pc, #160]	; (800426c <HAL_I2C_MspInit+0xc8>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	4a27      	ldr	r2, [pc, #156]	; (800426c <HAL_I2C_MspInit+0xc8>)
 80041d0:	f043 0302 	orr.w	r3, r3, #2
 80041d4:	6313      	str	r3, [r2, #48]	; 0x30
 80041d6:	4b25      	ldr	r3, [pc, #148]	; (800426c <HAL_I2C_MspInit+0xc8>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80041e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041e8:	2312      	movs	r3, #18
 80041ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f0:	2303      	movs	r3, #3
 80041f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80041f4:	2304      	movs	r3, #4
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f8:	f107 0314 	add.w	r3, r7, #20
 80041fc:	4619      	mov	r1, r3
 80041fe:	481c      	ldr	r0, [pc, #112]	; (8004270 <HAL_I2C_MspInit+0xcc>)
 8004200:	f004 f910 	bl	8008424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004204:	2308      	movs	r3, #8
 8004206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004208:	2312      	movs	r3, #18
 800420a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004210:	2303      	movs	r3, #3
 8004212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004214:	2309      	movs	r3, #9
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004218:	f107 0314 	add.w	r3, r7, #20
 800421c:	4619      	mov	r1, r3
 800421e:	4814      	ldr	r0, [pc, #80]	; (8004270 <HAL_I2C_MspInit+0xcc>)
 8004220:	f004 f900 	bl	8008424 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	4b10      	ldr	r3, [pc, #64]	; (800426c <HAL_I2C_MspInit+0xc8>)
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	4a0f      	ldr	r2, [pc, #60]	; (800426c <HAL_I2C_MspInit+0xc8>)
 800422e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004232:	6413      	str	r3, [r2, #64]	; 0x40
 8004234:	4b0d      	ldr	r3, [pc, #52]	; (800426c <HAL_I2C_MspInit+0xc8>)
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8004240:	2200      	movs	r2, #0
 8004242:	2100      	movs	r1, #0
 8004244:	2021      	movs	r0, #33	; 0x21
 8004246:	f003 f9b6 	bl	80075b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800424a:	2021      	movs	r0, #33	; 0x21
 800424c:	f003 f9cf 	bl	80075ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8004250:	2200      	movs	r2, #0
 8004252:	2100      	movs	r1, #0
 8004254:	2022      	movs	r0, #34	; 0x22
 8004256:	f003 f9ae 	bl	80075b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800425a:	2022      	movs	r0, #34	; 0x22
 800425c:	f003 f9c7 	bl	80075ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004260:	bf00      	nop
 8004262:	3728      	adds	r7, #40	; 0x28
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40005800 	.word	0x40005800
 800426c:	40023800 	.word	0x40023800
 8004270:	40020400 	.word	0x40020400

08004274 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a0d      	ldr	r2, [pc, #52]	; (80042b8 <HAL_I2C_MspDeInit+0x44>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d114      	bne.n	80042b0 <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8004286:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <HAL_I2C_MspDeInit+0x48>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	4a0c      	ldr	r2, [pc, #48]	; (80042bc <HAL_I2C_MspDeInit+0x48>)
 800428c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004290:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8004292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004296:	480a      	ldr	r0, [pc, #40]	; (80042c0 <HAL_I2C_MspDeInit+0x4c>)
 8004298:	f004 fa48 	bl	800872c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 800429c:	2108      	movs	r1, #8
 800429e:	4808      	ldr	r0, [pc, #32]	; (80042c0 <HAL_I2C_MspDeInit+0x4c>)
 80042a0:	f004 fa44 	bl	800872c <HAL_GPIO_DeInit>

    /* I2C2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80042a4:	2021      	movs	r0, #33	; 0x21
 80042a6:	f003 f9b0 	bl	800760a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80042aa:	2022      	movs	r0, #34	; 0x22
 80042ac:	f003 f9ad 	bl	800760a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40005800 	.word	0x40005800
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40020400 	.word	0x40020400

080042c4 <cliI2C>:

#ifdef _USE_HW_CLI
void cliI2C(cli_args_t *args)
{
 80042c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c6:	b0ad      	sub	sp, #180	; 0xb4
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	6078      	str	r0, [r7, #4]
	bool ret = true;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	uint32_t i;
	uint8_t i2c_data[128];
	uint32_t pre_time;

	if(args->argc == 2)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d16b      	bne.n	80043b2 <cliI2C+0xee>
	{
		print_ch = (uint16_t)args->getData(1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2001      	movs	r0, #1
 80042e0:	4798      	blx	r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		print_ch = constrain(print_ch, 1, I2C_MAX_CH);
 80042e8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d006      	beq.n	80042fe <cliI2C+0x3a>
 80042f0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	bf28      	it	cs
 80042f8:	2301      	movcs	r3, #1
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	e000      	b.n	8004300 <cliI2C+0x3c>
 80042fe:	2301      	movs	r3, #1
 8004300:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		print_ch -= 1;
 8004304:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004308:	3b01      	subs	r3, #1
 800430a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

		if(args->isStr(0, "scan") == true)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4991      	ldr	r1, [pc, #580]	; (8004558 <cliI2C+0x294>)
 8004314:	2000      	movs	r0, #0
 8004316:	4798      	blx	r3
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d022      	beq.n	8004364 <cliI2C+0xa0>
		{
			for(i=0x00; i<= 0x7F; i++)
 800431e:	2300      	movs	r3, #0
 8004320:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004324:	e019      	b.n	800435a <cliI2C+0x96>
			{
				if(i2cIsDeviceReady(print_ch, i) == true)
 8004326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800432a:	b2da      	uxtb	r2, r3
 800432c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004330:	4611      	mov	r1, r2
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fe3c 	bl	8003fb0 <i2cIsDeviceReady>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <cliI2C+0x8c>
				{
					cliPrintf("I2C CH%d Addr 0x%X : OK\n", print_ch+1, i);
 800433e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004342:	3301      	adds	r3, #1
 8004344:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004348:	4619      	mov	r1, r3
 800434a:	4884      	ldr	r0, [pc, #528]	; (800455c <cliI2C+0x298>)
 800434c:	f7fe ff80 	bl	8003250 <cliPrintf>
			for(i=0x00; i<= 0x7F; i++)
 8004350:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004354:	3301      	adds	r3, #1
 8004356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800435a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800435e:	2b7f      	cmp	r3, #127	; 0x7f
 8004360:	d9e1      	bls.n	8004326 <cliI2C+0x62>
 8004362:	e0df      	b.n	8004524 <cliI2C+0x260>
				}
			}
		}
		else if(args->isStr(0, "begin") == true)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	497d      	ldr	r1, [pc, #500]	; (8004560 <cliI2C+0x29c>)
 800436a:	2000      	movs	r0, #0
 800436c:	4798      	blx	r3
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80d7 	beq.w	8004524 <cliI2C+0x260>
		{
			i2c_ret = i2cBegin(print_ch, 400);
 8004376:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800437a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fd1a 	bl	8003db8 <i2cBegin>
 8004384:	4603      	mov	r3, r0
 8004386:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			if(i2c_ret == true)
 800438a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <cliI2C+0xde>
			{
				cliPrintf("I2C CH%d Begin OK\n", print_ch + 1);
 8004392:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004396:	3301      	adds	r3, #1
 8004398:	4619      	mov	r1, r3
 800439a:	4872      	ldr	r0, [pc, #456]	; (8004564 <cliI2C+0x2a0>)
 800439c:	f7fe ff58 	bl	8003250 <cliPrintf>
 80043a0:	e0c0      	b.n	8004524 <cliI2C+0x260>
			}
			else
			{
				cliPrintf("I2C CH%d Begin Fail\n", print_ch + 1);
 80043a2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80043a6:	3301      	adds	r3, #1
 80043a8:	4619      	mov	r1, r3
 80043aa:	486f      	ldr	r0, [pc, #444]	; (8004568 <cliI2C+0x2a4>)
 80043ac:	f7fe ff50 	bl	8003250 <cliPrintf>
 80043b0:	e0b8      	b.n	8004524 <cliI2C+0x260>
			}
		}
	}
	else if(args->argc == 5)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	f040 80b1 	bne.w	800451e <cliI2C+0x25a>
	{
		print_ch = (uint16_t)args->getData(1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2001      	movs	r0, #1
 80043c2:	4798      	blx	r3
 80043c4:	4603      	mov	r3, r0
 80043c6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		print_ch = constrain(print_ch, 1, I2C_MAX_CH);
 80043ca:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d006      	beq.n	80043e0 <cliI2C+0x11c>
 80043d2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	bf28      	it	cs
 80043da:	2301      	movcs	r3, #1
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	e000      	b.n	80043e2 <cliI2C+0x11e>
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		dev_addr = (uint16_t)args->getData(2);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2002      	movs	r0, #2
 80043ec:	4798      	blx	r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
		reg_addr = (uint16_t)args->getData(3);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2003      	movs	r0, #3
 80043fa:	4798      	blx	r3
 80043fc:	4603      	mov	r3, r0
 80043fe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
		length = (uint16_t)args->getData(4);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2004      	movs	r0, #4
 8004408:	4798      	blx	r3
 800440a:	4603      	mov	r3, r0
 800440c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
		ch = print_ch - 1;
 8004410:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004414:	3b01      	subs	r3, #1
 8004416:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

		if(args->isStr(0, "read") == true)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	4953      	ldr	r1, [pc, #332]	; (800456c <cliI2C+0x2a8>)
 8004420:	2000      	movs	r0, #0
 8004422:	4798      	blx	r3
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d03a      	beq.n	80044a0 <cliI2C+0x1dc>
		{
			for(i=0; i<length; i++)
 800442a:	2300      	movs	r3, #0
 800442c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004430:	e02f      	b.n	8004492 <cliI2C+0x1ce>
			{
				i2c_ret = i2cReadByte(ch, dev_addr, reg_addr + i, i2c_data, 100);
 8004432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004436:	b29a      	uxth	r2, r3
 8004438:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800443c:	4413      	add	r3, r2
 800443e:	b29a      	uxth	r2, r3
 8004440:	f107 030c 	add.w	r3, r7, #12
 8004444:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8004448:	f897 0097 	ldrb.w	r0, [r7, #151]	; 0x97
 800444c:	2464      	movs	r4, #100	; 0x64
 800444e:	9400      	str	r4, [sp, #0]
 8004450:	f7ff fdd6 	bl	8004000 <i2cReadByte>
 8004454:	4603      	mov	r3, r0
 8004456:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

				if(i2c_ret == true)
 800445a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <cliI2C+0x1b6>
				{
          cliPrintf("%d I2C - 0x%02X : 0x%02X\n", print_ch, reg_addr+i, i2c_data[0]);
 8004462:	f897 109f 	ldrb.w	r1, [r7, #159]	; 0x9f
 8004466:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 800446a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800446e:	441a      	add	r2, r3
 8004470:	7b3b      	ldrb	r3, [r7, #12]
 8004472:	483f      	ldr	r0, [pc, #252]	; (8004570 <cliI2C+0x2ac>)
 8004474:	f7fe feec 	bl	8003250 <cliPrintf>
 8004478:	e006      	b.n	8004488 <cliI2C+0x1c4>
				}
				else
				{
          cliPrintf("%d I2C - Fail \n", print_ch);
 800447a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800447e:	4619      	mov	r1, r3
 8004480:	483c      	ldr	r0, [pc, #240]	; (8004574 <cliI2C+0x2b0>)
 8004482:	f7fe fee5 	bl	8003250 <cliPrintf>
          break;
 8004486:	e04d      	b.n	8004524 <cliI2C+0x260>
			for(i=0; i<length; i++)
 8004488:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800448c:	3301      	adds	r3, #1
 800448e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004492:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004496:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800449a:	429a      	cmp	r2, r3
 800449c:	d3c9      	bcc.n	8004432 <cliI2C+0x16e>
 800449e:	e041      	b.n	8004524 <cliI2C+0x260>
				}
			}
		}
		else if(args->isStr(0, "write") == true)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	4934      	ldr	r1, [pc, #208]	; (8004578 <cliI2C+0x2b4>)
 80044a6:	2000      	movs	r0, #0
 80044a8:	4798      	blx	r3
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d032      	beq.n	8004516 <cliI2C+0x252>
		{
			pre_time = millis();
 80044b0:	f7fd fb40 	bl	8001b34 <millis>
 80044b4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
			i2c_ret = i2cWriteByte(ch, dev_addr, reg_addr, (uint8_t)length, 100);
 80044b8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 80044c2:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 80044c6:	f897 0097 	ldrb.w	r0, [r7, #151]	; 0x97
 80044ca:	2464      	movs	r4, #100	; 0x64
 80044cc:	9400      	str	r4, [sp, #0]
 80044ce:	f7ff fdeb 	bl	80040a8 <i2cWriteByte>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

			if(i2c_ret == true)
 80044d8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d013      	beq.n	8004508 <cliI2C+0x244>
			{
				cliPrintf("%d I2C - 0x%02X : 0x%02X, %d ms\n", print_ch, reg_addr, length, millis()-pre_time);
 80044e0:	f897 409f 	ldrb.w	r4, [r7, #159]	; 0x9f
 80044e4:	f8b7 509a 	ldrh.w	r5, [r7, #154]	; 0x9a
 80044e8:	f8b7 6098 	ldrh.w	r6, [r7, #152]	; 0x98
 80044ec:	f7fd fb22 	bl	8001b34 <millis>
 80044f0:	4602      	mov	r2, r0
 80044f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	4633      	mov	r3, r6
 80044fc:	462a      	mov	r2, r5
 80044fe:	4621      	mov	r1, r4
 8004500:	481e      	ldr	r0, [pc, #120]	; (800457c <cliI2C+0x2b8>)
 8004502:	f7fe fea5 	bl	8003250 <cliPrintf>
 8004506:	e00d      	b.n	8004524 <cliI2C+0x260>
			}
			else
			{
				cliPrintf("%d I2C - Fail \n", print_ch);
 8004508:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800450c:	4619      	mov	r1, r3
 800450e:	4819      	ldr	r0, [pc, #100]	; (8004574 <cliI2C+0x2b0>)
 8004510:	f7fe fe9e 	bl	8003250 <cliPrintf>
 8004514:	e006      	b.n	8004524 <cliI2C+0x260>
			}
		}
		else
		{
			ret = false;
 8004516:	2300      	movs	r3, #0
 8004518:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800451c:	e002      	b.n	8004524 <cliI2C+0x260>
		}
	}
	else
	{
		ret = false;
 800451e:	2300      	movs	r3, #0
 8004520:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}

	if(ret == false)
 8004524:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004528:	f083 0301 	eor.w	r3, r3, #1
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00d      	beq.n	800454e <cliI2C+0x28a>
	{
    cliPrintf( "i2c begin channel[1~%d]\n", I2C_MAX_CH);
 8004532:	2101      	movs	r1, #1
 8004534:	4812      	ldr	r0, [pc, #72]	; (8004580 <cliI2C+0x2bc>)
 8004536:	f7fe fe8b 	bl	8003250 <cliPrintf>
    cliPrintf( "i2c scan channel[1~%d]\n", I2C_MAX_CH);
 800453a:	2101      	movs	r1, #1
 800453c:	4811      	ldr	r0, [pc, #68]	; (8004584 <cliI2C+0x2c0>)
 800453e:	f7fe fe87 	bl	8003250 <cliPrintf>
    cliPrintf( "i2c read channel dev_addr reg_addr length\n");
 8004542:	4811      	ldr	r0, [pc, #68]	; (8004588 <cliI2C+0x2c4>)
 8004544:	f7fe fe84 	bl	8003250 <cliPrintf>
    cliPrintf( "i2c write channel dev_addr reg_addr data\n");
 8004548:	4810      	ldr	r0, [pc, #64]	; (800458c <cliI2C+0x2c8>)
 800454a:	f7fe fe81 	bl	8003250 <cliPrintf>
	}
}
 800454e:	bf00      	nop
 8004550:	37ac      	adds	r7, #172	; 0xac
 8004552:	46bd      	mov	sp, r7
 8004554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004556:	bf00      	nop
 8004558:	0801bb08 	.word	0x0801bb08
 800455c:	0801bb10 	.word	0x0801bb10
 8004560:	0801bb2c 	.word	0x0801bb2c
 8004564:	0801bb34 	.word	0x0801bb34
 8004568:	0801bb48 	.word	0x0801bb48
 800456c:	0801bb60 	.word	0x0801bb60
 8004570:	0801bb68 	.word	0x0801bb68
 8004574:	0801bb84 	.word	0x0801bb84
 8004578:	0801bb94 	.word	0x0801bb94
 800457c:	0801bb9c 	.word	0x0801bb9c
 8004580:	0801bbc0 	.word	0x0801bbc0
 8004584:	0801bbdc 	.word	0x0801bbdc
 8004588:	0801bbf4 	.word	0x0801bbf4
 800458c:	0801bc20 	.word	0x0801bc20

08004590 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 8004594:	f7fd face 	bl	8001b34 <millis>
 8004598:	4602      	mov	r2, r0
 800459a:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <TransferDoneISR+0x40>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	4a0c      	ldr	r2, [pc, #48]	; (80045d4 <TransferDoneISR+0x44>)
 80045a2:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 80045a4:	f7fd fac6 	bl	8001b34 <millis>
 80045a8:	4603      	mov	r3, r0
 80045aa:	4a09      	ldr	r2, [pc, #36]	; (80045d0 <TransferDoneISR+0x40>)
 80045ac:	6013      	str	r3, [r2, #0]

  if (fps_time > 0)
 80045ae:	4b09      	ldr	r3, [pc, #36]	; (80045d4 <TransferDoneISR+0x44>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 80045b6:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <TransferDoneISR+0x44>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045be:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c2:	4a05      	ldr	r2, [pc, #20]	; (80045d8 <TransferDoneISR+0x48>)
 80045c4:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <TransferDoneISR+0x4c>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]
}
 80045cc:	bf00      	nop
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	20001254 	.word	0x20001254
 80045d4:	20001258 	.word	0x20001258
 80045d8:	2000125c 	.word	0x2000125c
 80045dc:	20001252 	.word	0x20001252

080045e0 <lcdInit>:


bool lcdInit(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af02      	add	r7, sp, #8
  backlight_value = 100;
 80045e6:	4b25      	ldr	r3, [pc, #148]	; (800467c <lcdInit+0x9c>)
 80045e8:	2264      	movs	r2, #100	; 0x64
 80045ea:	701a      	strb	r2, [r3, #0]
#ifdef _USE_HW_ST7735
  is_init = st7735Init();
  st7735InitDriver(&lcd);
#endif
#ifdef _USE_HW_SSD1306
  is_init = ssd1306Init();
 80045ec:	f7fd fe80 	bl	80022f0 <ssd1306Init>
 80045f0:	4603      	mov	r3, r0
 80045f2:	461a      	mov	r2, r3
 80045f4:	4b22      	ldr	r3, [pc, #136]	; (8004680 <lcdInit+0xa0>)
 80045f6:	701a      	strb	r2, [r3, #0]
  ssd1306InitDriver(&lcd);
 80045f8:	4822      	ldr	r0, [pc, #136]	; (8004684 <lcdInit+0xa4>)
 80045fa:	f7fd fe85 	bl	8002308 <ssd1306InitDriver>
#endif

  lcd.setCallBack(TransferDoneISR);
 80045fe:	4b21      	ldr	r3, [pc, #132]	; (8004684 <lcdInit+0xa4>)
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	4821      	ldr	r0, [pc, #132]	; (8004688 <lcdInit+0xa8>)
 8004604:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8004606:	2300      	movs	r3, #0
 8004608:	607b      	str	r3, [r7, #4]
 800460a:	e007      	b.n	800461c <lcdInit+0x3c>
  {
    frame_buffer[0][i] = black;
 800460c:	4a1f      	ldr	r2, [pc, #124]	; (800468c <lcdInit+0xac>)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2100      	movs	r1, #0
 8004612:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3301      	adds	r3, #1
 800461a:	607b      	str	r3, [r7, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004622:	dbf3      	blt.n	800460c <lcdInit+0x2c>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 8004624:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004628:	2100      	movs	r1, #0
 800462a:	4818      	ldr	r0, [pc, #96]	; (800468c <lcdInit+0xac>)
 800462c:	f015 f844 	bl	80196b8 <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 8004630:	4b17      	ldr	r3, [pc, #92]	; (8004690 <lcdInit+0xb0>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	039b      	lsls	r3, r3, #14
 8004636:	4a15      	ldr	r2, [pc, #84]	; (800468c <lcdInit+0xac>)
 8004638:	4413      	add	r3, r2
 800463a:	4a16      	ldr	r2, [pc, #88]	; (8004694 <lcdInit+0xb4>)
 800463c:	6013      	str	r3, [r2, #0]


  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 800463e:	2300      	movs	r3, #0
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	2340      	movs	r3, #64	; 0x40
 8004644:	2280      	movs	r2, #128	; 0x80
 8004646:	2100      	movs	r1, #0
 8004648:	2000      	movs	r0, #0
 800464a:	f000 f9e9 	bl	8004a20 <lcdDrawFillRect>
  lcdUpdateDraw();
 800464e:	f000 f8d3 	bl	80047f8 <lcdUpdateDraw>

  lcdSetBackLight(100);
 8004652:	2064      	movs	r0, #100	; 0x64
 8004654:	f000 f830 	bl	80046b8 <lcdSetBackLight>


  if (is_init != true)
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <lcdInit+0xa0>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	f083 0301 	eor.w	r3, r3, #1
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <lcdInit+0x8a>
  {
    return false;
 8004666:	2300      	movs	r3, #0
 8004668:	e004      	b.n	8004674 <lcdInit+0x94>
  }

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
 800466a:	490b      	ldr	r1, [pc, #44]	; (8004698 <lcdInit+0xb8>)
 800466c:	480b      	ldr	r0, [pc, #44]	; (800469c <lcdInit+0xbc>)
 800466e:	f7fe feff 	bl	8003470 <cliAdd>
#endif

  return true;
 8004672:	2301      	movs	r3, #1
}
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000084 	.word	0x20000084
 8004680:	20001250 	.word	0x20001250
 8004684:	20001234 	.word	0x20001234
 8004688:	08004591 	.word	0x08004591
 800468c:	20001280 	.word	0x20001280
 8004690:	20001251 	.word	0x20001251
 8004694:	20001260 	.word	0x20001260
 8004698:	08004e41 	.word	0x08004e41
 800469c:	08028504 	.word	0x08028504

080046a0 <lcdIsInit>:
{
  return draw_frame_time;
}

bool lcdIsInit(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  return is_init;
 80046a4:	4b03      	ldr	r3, [pc, #12]	; (80046b4 <lcdIsInit+0x14>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20001250 	.word	0x20001250

080046b8 <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	2b64      	cmp	r3, #100	; 0x64
 80046c6:	bf28      	it	cs
 80046c8:	2364      	movcs	r3, #100	; 0x64
 80046ca:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 80046cc:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <lcdSetBackLight+0x48>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	79fa      	ldrb	r2, [r7, #7]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d002      	beq.n	80046dc <lcdSetBackLight+0x24>
  {
    backlight_value = value;
 80046d6:	4a0a      	ldr	r2, [pc, #40]	; (8004700 <lcdSetBackLight+0x48>)
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 80046dc:	4b08      	ldr	r3, [pc, #32]	; (8004700 <lcdSetBackLight+0x48>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d004      	beq.n	80046ee <lcdSetBackLight+0x36>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 80046e4:	2101      	movs	r1, #1
 80046e6:	2001      	movs	r0, #1
 80046e8:	f7ff f9f6 	bl	8003ad8 <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 80046ec:	e003      	b.n	80046f6 <lcdSetBackLight+0x3e>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 80046ee:	2100      	movs	r1, #0
 80046f0:	2001      	movs	r0, #1
 80046f2:	f7ff f9f1 	bl	8003ad8 <gpioPinWrite>
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000084 	.word	0x20000084

08004704 <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 8004704:	4b03      	ldr	r3, [pc, #12]	; (8004714 <lcdDrawPixel+0x10>)
 8004706:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20001260 	.word	0x20001260

08004718 <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 8004718:	b510      	push	{r4, lr}
 800471a:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 800471c:	f000 f898 	bl	8004850 <lcdGetFrameBuffer>
 8004720:	f500 517f 	add.w	r1, r0, #16320	; 0x3fc0

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 8004724:	b2a2      	uxth	r2, r4
 8004726:	1e83      	subs	r3, r0, #2
 8004728:	313e      	adds	r1, #62	; 0x3e
 800472a:	f823 2f02 	strh.w	r2, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 800472e:	428b      	cmp	r3, r1
 8004730:	d1fb      	bne.n	800472a <lcdClearBuffer+0x12>
  }
}
 8004732:	bd10      	pop	{r4, pc}

08004734 <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  return fps_count;
 8004738:	4b03      	ldr	r3, [pc, #12]	; (8004748 <lcdGetFps+0x14>)
 800473a:	681b      	ldr	r3, [r3, #0]
}
 800473c:	4618      	mov	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	2000125c 	.word	0x2000125c

0800474c <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  return fps_time;
 8004750:	4b03      	ldr	r3, [pc, #12]	; (8004760 <lcdGetFpsTime+0x14>)
 8004752:	681b      	ldr	r3, [r3, #0]
}
 8004754:	4618      	mov	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	20001258 	.word	0x20001258

08004764 <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 8004768:	4b08      	ldr	r3, [pc, #32]	; (800478c <lcdDrawAvailable+0x28>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	f083 0301 	eor.w	r3, r3, #1
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	b2db      	uxtb	r3, r3
}
 8004782:	4618      	mov	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	20001252 	.word	0x20001252

08004790 <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 8004790:	b598      	push	{r3, r4, r7, lr}
 8004792:	af00      	add	r7, sp, #0
  if (is_init != true)
 8004794:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <lcdRequestDraw+0x54>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	f083 0301 	eor.w	r3, r3, #1
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <lcdRequestDraw+0x16>
  {
    return false;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e01b      	b.n	80047de <lcdRequestDraw+0x4e>
  }
  if (lcd_request_draw == true)
 80047a6:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <lcdRequestDraw+0x58>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <lcdRequestDraw+0x22>
  {
    return false;
 80047ae:	2300      	movs	r3, #0
 80047b0:	e015      	b.n	80047de <lcdRequestDraw+0x4e>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 80047b2:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <lcdRequestDraw+0x5c>)
 80047b4:	689c      	ldr	r4, [r3, #8]
 80047b6:	233f      	movs	r3, #63	; 0x3f
 80047b8:	227f      	movs	r2, #127	; 0x7f
 80047ba:	2100      	movs	r1, #0
 80047bc:	2000      	movs	r0, #0
 80047be:	47a0      	blx	r4

  lcd_request_draw = true;
 80047c0:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <lcdRequestDraw+0x58>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <lcdRequestDraw+0x5c>)
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	4a09      	ldr	r2, [pc, #36]	; (80047f0 <lcdRequestDraw+0x60>)
 80047cc:	7812      	ldrb	r2, [r2, #0]
 80047ce:	0392      	lsls	r2, r2, #14
 80047d0:	4908      	ldr	r1, [pc, #32]	; (80047f4 <lcdRequestDraw+0x64>)
 80047d2:	1850      	adds	r0, r2, r1
 80047d4:	2200      	movs	r2, #0
 80047d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047da:	4798      	blx	r3

  return true;
 80047dc:	2301      	movs	r3, #1
}
 80047de:	4618      	mov	r0, r3
 80047e0:	bd98      	pop	{r3, r4, r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20001250 	.word	0x20001250
 80047e8:	20001252 	.word	0x20001252
 80047ec:	20001234 	.word	0x20001234
 80047f0:	20001251 	.word	0x20001251
 80047f4:	20001280 	.word	0x20001280

080047f8 <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  if (is_init != true)
 80047fe:	4b13      	ldr	r3, [pc, #76]	; (800484c <lcdUpdateDraw+0x54>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	f083 0301 	eor.w	r3, r3, #1
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d118      	bne.n	800483e <lcdUpdateDraw+0x46>
  {
    return;
  }

  lcdRequestDraw();
 800480c:	f7ff ffc0 	bl	8004790 <lcdRequestDraw>

  pre_time = millis();
 8004810:	f7fd f990 	bl	8001b34 <millis>
 8004814:	6078      	str	r0, [r7, #4]
  while(lcdDrawAvailable() != true)
 8004816:	e009      	b.n	800482c <lcdUpdateDraw+0x34>
  {
    delay(1);
 8004818:	2001      	movs	r0, #1
 800481a:	f7fd f980 	bl	8001b1e <delay>
    if (millis()-pre_time >= 100)
 800481e:	f7fd f989 	bl	8001b34 <millis>
 8004822:	4602      	mov	r2, r0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b63      	cmp	r3, #99	; 0x63
 800482a:	d80a      	bhi.n	8004842 <lcdUpdateDraw+0x4a>
  while(lcdDrawAvailable() != true)
 800482c:	f7ff ff9a 	bl	8004764 <lcdDrawAvailable>
 8004830:	4603      	mov	r3, r0
 8004832:	f083 0301 	eor.w	r3, r3, #1
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1ed      	bne.n	8004818 <lcdUpdateDraw+0x20>
 800483c:	e002      	b.n	8004844 <lcdUpdateDraw+0x4c>
    return;
 800483e:	bf00      	nop
 8004840:	e000      	b.n	8004844 <lcdUpdateDraw+0x4c>
    {
      break;
 8004842:	bf00      	nop
    }
  }
}
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20001250 	.word	0x20001250

08004850 <lcdGetFrameBuffer>:

  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 8004854:	4b03      	ldr	r3, [pc, #12]	; (8004864 <lcdGetFrameBuffer+0x14>)
 8004856:	681b      	ldr	r3, [r3, #0]
}
 8004858:	4618      	mov	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	20001260 	.word	0x20001260

08004868 <lcdDrawLine>:
  return LCD_HEIGHT;
}


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8004868:	b590      	push	{r4, r7, lr}
 800486a:	b089      	sub	sp, #36	; 0x24
 800486c:	af00      	add	r7, sp, #0
 800486e:	4604      	mov	r4, r0
 8004870:	4608      	mov	r0, r1
 8004872:	4611      	mov	r1, r2
 8004874:	461a      	mov	r2, r3
 8004876:	4623      	mov	r3, r4
 8004878:	80fb      	strh	r3, [r7, #6]
 800487a:	4603      	mov	r3, r0
 800487c:	80bb      	strh	r3, [r7, #4]
 800487e:	460b      	mov	r3, r1
 8004880:	807b      	strh	r3, [r7, #2]
 8004882:	4613      	mov	r3, r2
 8004884:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8004886:	f9b7 2000 	ldrsh.w	r2, [r7]
 800488a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004894:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004898:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800489c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048a0:	1acb      	subs	r3, r1, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bfb8      	it	lt
 80048a6:	425b      	neglt	r3, r3
 80048a8:	429a      	cmp	r2, r3
 80048aa:	bfcc      	ite	gt
 80048ac:	2301      	movgt	r3, #1
 80048ae:	2300      	movle	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 80048b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	da01      	bge.n	80048c0 <lcdDrawLine+0x58>
 80048bc:	2300      	movs	r3, #0
 80048be:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 80048c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	da01      	bge.n	80048cc <lcdDrawLine+0x64>
 80048c8:	2300      	movs	r3, #0
 80048ca:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 80048cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	da01      	bge.n	80048d8 <lcdDrawLine+0x70>
 80048d4:	2300      	movs	r3, #0
 80048d6:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 80048d8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	da01      	bge.n	80048e4 <lcdDrawLine+0x7c>
 80048e0:	2300      	movs	r3, #0
 80048e2:	803b      	strh	r3, [r7, #0]


  if (steep)
 80048e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00b      	beq.n	8004904 <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 80048ec:	88fb      	ldrh	r3, [r7, #6]
 80048ee:	833b      	strh	r3, [r7, #24]
 80048f0:	88bb      	ldrh	r3, [r7, #4]
 80048f2:	80fb      	strh	r3, [r7, #6]
 80048f4:	8b3b      	ldrh	r3, [r7, #24]
 80048f6:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 80048f8:	887b      	ldrh	r3, [r7, #2]
 80048fa:	82fb      	strh	r3, [r7, #22]
 80048fc:	883b      	ldrh	r3, [r7, #0]
 80048fe:	807b      	strh	r3, [r7, #2]
 8004900:	8afb      	ldrh	r3, [r7, #22]
 8004902:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8004904:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004908:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800490c:	429a      	cmp	r2, r3
 800490e:	dd0b      	ble.n	8004928 <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	82bb      	strh	r3, [r7, #20]
 8004914:	887b      	ldrh	r3, [r7, #2]
 8004916:	80fb      	strh	r3, [r7, #6]
 8004918:	8abb      	ldrh	r3, [r7, #20]
 800491a:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 800491c:	88bb      	ldrh	r3, [r7, #4]
 800491e:	827b      	strh	r3, [r7, #18]
 8004920:	883b      	ldrh	r3, [r7, #0]
 8004922:	80bb      	strh	r3, [r7, #4]
 8004924:	8a7b      	ldrh	r3, [r7, #18]
 8004926:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8004928:	887a      	ldrh	r2, [r7, #2]
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	b29b      	uxth	r3, r3
 8004930:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8004932:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004936:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	bfb8      	it	lt
 8004940:	425b      	neglt	r3, r3
 8004942:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8004944:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004948:	0fda      	lsrs	r2, r3, #31
 800494a:	4413      	add	r3, r2
 800494c:	105b      	asrs	r3, r3, #1
 800494e:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 8004950:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004954:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004958:	429a      	cmp	r2, r3
 800495a:	da02      	bge.n	8004962 <lcdDrawLine+0xfa>
  {
    ystep = 1;
 800495c:	2301      	movs	r3, #1
 800495e:	83bb      	strh	r3, [r7, #28]
 8004960:	e02d      	b.n	80049be <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 8004962:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004966:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 8004968:	e029      	b.n	80049be <lcdDrawLine+0x156>
  {
    if (steep)
 800496a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d006      	beq.n	8004980 <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 8004972:	88bb      	ldrh	r3, [r7, #4]
 8004974:	88f9      	ldrh	r1, [r7, #6]
 8004976:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fec3 	bl	8004704 <lcdDrawPixel>
 800497e:	e005      	b.n	800498c <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	88b9      	ldrh	r1, [r7, #4]
 8004984:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff febc 	bl	8004704 <lcdDrawPixel>
    }
    err -= dy;
 800498c:	8bfa      	ldrh	r2, [r7, #30]
 800498e:	89fb      	ldrh	r3, [r7, #14]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	b29b      	uxth	r3, r3
 8004994:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 8004996:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800499a:	2b00      	cmp	r3, #0
 800499c:	da09      	bge.n	80049b2 <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 800499e:	88ba      	ldrh	r2, [r7, #4]
 80049a0:	8bbb      	ldrh	r3, [r7, #28]
 80049a2:	4413      	add	r3, r2
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	80bb      	strh	r3, [r7, #4]
      err += dx;
 80049a8:	8bfa      	ldrh	r2, [r7, #30]
 80049aa:	8a3b      	ldrh	r3, [r7, #16]
 80049ac:	4413      	add	r3, r2
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 80049b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3301      	adds	r3, #1
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	80fb      	strh	r3, [r7, #6]
 80049be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80049c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	ddcf      	ble.n	800496a <lcdDrawLine+0x102>
    }
  }
}
 80049ca:	bf00      	nop
 80049cc:	bf00      	nop
 80049ce:	3724      	adds	r7, #36	; 0x24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd90      	pop	{r4, r7, pc}

080049d4 <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80049d4:	b590      	push	{r4, r7, lr}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af02      	add	r7, sp, #8
 80049da:	4604      	mov	r4, r0
 80049dc:	4608      	mov	r0, r1
 80049de:	4611      	mov	r1, r2
 80049e0:	461a      	mov	r2, r3
 80049e2:	4623      	mov	r3, r4
 80049e4:	80fb      	strh	r3, [r7, #6]
 80049e6:	4603      	mov	r3, r0
 80049e8:	80bb      	strh	r3, [r7, #4]
 80049ea:	460b      	mov	r3, r1
 80049ec:	807b      	strh	r3, [r7, #2]
 80049ee:	4613      	mov	r3, r2
 80049f0:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 80049f2:	88ba      	ldrh	r2, [r7, #4]
 80049f4:	887b      	ldrh	r3, [r7, #2]
 80049f6:	4413      	add	r3, r2
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	b21c      	sxth	r4, r3
 8004a00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a04:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004a08:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004a0c:	883b      	ldrh	r3, [r7, #0]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	4623      	mov	r3, r4
 8004a12:	f7ff ff29 	bl	8004868 <lcdDrawLine>
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd90      	pop	{r4, r7, pc}
 8004a1e:	bf00      	nop

08004a20 <lcdDrawFillRect>:
{
  lcdDrawLine(x, y, x+w-1, y, color);
}

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8004a20:	b590      	push	{r4, r7, lr}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4604      	mov	r4, r0
 8004a28:	4608      	mov	r0, r1
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4623      	mov	r3, r4
 8004a30:	80fb      	strh	r3, [r7, #6]
 8004a32:	4603      	mov	r3, r0
 8004a34:	80bb      	strh	r3, [r7, #4]
 8004a36:	460b      	mov	r3, r1
 8004a38:	807b      	strh	r3, [r7, #2]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	81fb      	strh	r3, [r7, #14]
 8004a42:	e00e      	b.n	8004a62 <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 8004a44:	8c3b      	ldrh	r3, [r7, #32]
 8004a46:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004a4a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004a4e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8004a52:	f7ff ffbf 	bl	80049d4 <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 8004a56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	81fb      	strh	r3, [r7, #14]
 8004a62:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004a66:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004a6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a6e:	440b      	add	r3, r1
 8004a70:	429a      	cmp	r2, r3
 8004a72:	dbe7      	blt.n	8004a44 <lcdDrawFillRect+0x24>
  }
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd90      	pop	{r4, r7, pc}
 8004a7e:	bf00      	nop

08004a80 <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 8004a80:	b408      	push	{r3}
 8004a82:	b590      	push	{r4, r7, lr}
 8004a84:	b0d8      	sub	sp, #352	; 0x160
 8004a86:	af02      	add	r7, sp, #8
 8004a88:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004a8c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004a90:	6018      	str	r0, [r3, #0]
 8004a92:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004a96:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004a9a:	6019      	str	r1, [r3, #0]
 8004a9c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004aa0:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8004aa4:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 8004aa6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004aaa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 8004aae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004ab2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  han_font_t FontBuf;
  uint8_t font_width;
  uint8_t font_height;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 8004abc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004ac0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004ac4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8004ac8:	21ff      	movs	r1, #255	; 0xff
 8004aca:	f014 fde7 	bl	801969c <vsniprintf>
 8004ace:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
  va_end (arg);

  if (font_tbl[lcd_font]->data != NULL)
 8004ad2:	4b80      	ldr	r3, [pc, #512]	; (8004cd4 <lcdPrintf+0x254>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4b7f      	ldr	r3, [pc, #508]	; (8004cd8 <lcdPrintf+0x258>)
 8004ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d072      	beq.n	8004bca <lcdPrintf+0x14a>
  {
    for( i=0; i<len; i+=Size_Char )
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004aea:	e067      	b.n	8004bbc <lcdPrintf+0x13c>
    {
      disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 8004aec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004af0:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8004af4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004af8:	4413      	add	r3, r2
 8004afa:	781a      	ldrb	r2, [r3, #0]
 8004afc:	4b75      	ldr	r3, [pc, #468]	; (8004cd4 <lcdPrintf+0x254>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	4619      	mov	r1, r3
 8004b02:	4b75      	ldr	r3, [pc, #468]	; (8004cd8 <lcdPrintf+0x258>)
 8004b04:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8004b08:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004b0c:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8004b10:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004b14:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 8004b18:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004b1c:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	4623      	mov	r3, r4
 8004b26:	6809      	ldr	r1, [r1, #0]
 8004b28:	6800      	ldr	r0, [r0, #0]
 8004b2a:	f000 f92d 	bl	8004d88 <disEngFont>

      Size_Char = 1;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      font_width = font_tbl[lcd_font]->width;
 8004b34:	4b67      	ldr	r3, [pc, #412]	; (8004cd4 <lcdPrintf+0x254>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4b67      	ldr	r3, [pc, #412]	; (8004cd8 <lcdPrintf+0x258>)
 8004b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      font_height = font_tbl[lcd_font]->height;
 8004b46:	4b63      	ldr	r3, [pc, #396]	; (8004cd4 <lcdPrintf+0x254>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	4b62      	ldr	r3, [pc, #392]	; (8004cd8 <lcdPrintf+0x258>)
 8004b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b52:	785b      	ldrb	r3, [r3, #1]
 8004b54:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
      x += font_width;
 8004b58:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8004b5c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004b60:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004b64:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8004b68:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8004b6c:	6809      	ldr	r1, [r1, #0]
 8004b6e:	440a      	add	r2, r1
 8004b70:	601a      	str	r2, [r3, #0]

      if ((x+font_width) > HW_LCD_WIDTH)
 8004b72:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8004b76:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004b7a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4413      	add	r3, r2
 8004b82:	2b80      	cmp	r3, #128	; 0x80
 8004b84:	dd13      	ble.n	8004bae <lcdPrintf+0x12e>
      {
        x  = x_Pre;
 8004b86:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004b8a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004b8e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004b92:	601a      	str	r2, [r3, #0]
        y += font_height;
 8004b94:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 8004b98:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004b9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004ba0:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8004ba4:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 8004ba8:	6809      	ldr	r1, [r1, #0]
 8004baa:	440a      	add	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]
    for( i=0; i<len; i+=Size_Char )
 8004bae:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004bb2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004bbc:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004bc0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	db91      	blt.n	8004aec <lcdPrintf+0x6c>
      }

      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
    }
  }
}
 8004bc8:	e07b      	b.n	8004cc2 <lcdPrintf+0x242>
    for( i=0; i<len; i+=Size_Char )
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004bd0:	e06f      	b.n	8004cb2 <lcdPrintf+0x232>
      hanFontLoad( &print_buffer[i], &FontBuf );
 8004bd2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004bd6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004bda:	4413      	add	r3, r2
 8004bdc:	f107 0214 	add.w	r2, r7, #20
 8004be0:	4611      	mov	r1, r2
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fd f8ae 	bl	8001d44 <hanFontLoad>
      disHanFont( x, y, &FontBuf, color);
 8004be8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004bec:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	f107 0214 	add.w	r2, r7, #20
 8004bf6:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8004bfa:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 8004bfe:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8004c02:	f5a0 70a6 	sub.w	r0, r0, #332	; 0x14c
 8004c06:	6809      	ldr	r1, [r1, #0]
 8004c08:	6800      	ldr	r0, [r0, #0]
 8004c0a:	f000 f867 	bl	8004cdc <disHanFont>
      Size_Char = FontBuf.Size_Char;
 8004c0e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c12:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004c16:	885b      	ldrh	r3, [r3, #2]
 8004c18:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      if (Size_Char >= 2)
 8004c1c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	dd0e      	ble.n	8004c42 <lcdPrintf+0x1c2>
        font_width = 16;
 8004c24:	2310      	movs	r3, #16
 8004c26:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 2*8;
 8004c2a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c2e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c32:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004c36:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	3210      	adds	r2, #16
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e00d      	b.n	8004c5e <lcdPrintf+0x1de>
        font_width = 8;
 8004c42:	2308      	movs	r3, #8
 8004c44:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 1*8;
 8004c48:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c4c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c50:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004c54:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	3208      	adds	r2, #8
 8004c5c:	601a      	str	r2, [r3, #0]
      if ((x+font_width) > HW_LCD_WIDTH)
 8004c5e:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8004c62:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c66:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	2b80      	cmp	r3, #128	; 0x80
 8004c70:	dd11      	ble.n	8004c96 <lcdPrintf+0x216>
        x  = x_Pre;
 8004c72:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c76:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c7a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004c7e:	601a      	str	r2, [r3, #0]
        y += 16;
 8004c80:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c84:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004c88:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004c8c:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8004c90:	6812      	ldr	r2, [r2, #0]
 8004c92:	3210      	adds	r2, #16
 8004c94:	601a      	str	r2, [r3, #0]
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8004c96:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004c9e:	889b      	ldrh	r3, [r3, #4]
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d00d      	beq.n	8004cc0 <lcdPrintf+0x240>
    for( i=0; i<len; i+=Size_Char )
 8004ca4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004ca8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004cac:	4413      	add	r3, r2
 8004cae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004cb2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004cb6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	db89      	blt.n	8004bd2 <lcdPrintf+0x152>
}
 8004cbe:	e000      	b.n	8004cc2 <lcdPrintf+0x242>
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8004cc0:	bf00      	nop
}
 8004cc2:	bf00      	nop
 8004cc4:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004cce:	b001      	add	sp, #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20000085 	.word	0x20000085
 8004cd8:	20000088 	.word	0x20000088

08004cdc <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	885b      	ldrh	r3, [r3, #2]
 8004cee:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 8004cf0:	8b3b      	ldrh	r3, [r7, #24]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <disHanFont+0x1e>
  {
    FontSize = 2;
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	83fb      	strh	r3, [r7, #30]
 8004cfe:	e03a      	b.n	8004d76 <disHanFont+0x9a>
  {
    index_x = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8004d04:	2300      	movs	r3, #0
 8004d06:	83bb      	strh	r3, [r7, #28]
 8004d08:	e02e      	b.n	8004d68 <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 8004d0a:	8bfb      	ldrh	r3, [r7, #30]
 8004d0c:	8b3a      	ldrh	r2, [r7, #24]
 8004d0e:	fb03 f202 	mul.w	r2, r3, r2
 8004d12:	8bbb      	ldrh	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	4413      	add	r3, r2
 8004d1a:	799b      	ldrb	r3, [r3, #6]
 8004d1c:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 8004d1e:	2300      	movs	r3, #0
 8004d20:	837b      	strh	r3, [r7, #26]
 8004d22:	e01b      	b.n	8004d5c <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 8004d24:	7d7a      	ldrb	r2, [r7, #21]
 8004d26:	8b7b      	ldrh	r3, [r7, #26]
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00d      	beq.n	8004d50 <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	8afb      	ldrh	r3, [r7, #22]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	b298      	uxth	r0, r3
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	8bfb      	ldrh	r3, [r7, #30]
 8004d44:	4413      	add	r3, r2
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	887a      	ldrh	r2, [r7, #2]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	f7ff fcda 	bl	8004704 <lcdDrawPixel>
        }
        index_x++;
 8004d50:	8afb      	ldrh	r3, [r7, #22]
 8004d52:	3301      	adds	r3, #1
 8004d54:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 8004d56:	8b7b      	ldrh	r3, [r7, #26]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	837b      	strh	r3, [r7, #26]
 8004d5c:	8b7b      	ldrh	r3, [r7, #26]
 8004d5e:	2b07      	cmp	r3, #7
 8004d60:	d9e0      	bls.n	8004d24 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8004d62:	8bbb      	ldrh	r3, [r7, #28]
 8004d64:	3301      	adds	r3, #1
 8004d66:	83bb      	strh	r3, [r7, #28]
 8004d68:	8bba      	ldrh	r2, [r7, #28]
 8004d6a:	8b3b      	ldrh	r3, [r7, #24]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d3cc      	bcc.n	8004d0a <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8004d70:	8bfb      	ldrh	r3, [r7, #30]
 8004d72:	3301      	adds	r3, #1
 8004d74:	83fb      	strh	r3, [r7, #30]
 8004d76:	8bfb      	ldrh	r3, [r7, #30]
 8004d78:	2b0f      	cmp	r3, #15
 8004d7a:	d9c1      	bls.n	8004d00 <disHanFont+0x24>
      }
    }
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	3720      	adds	r7, #32
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop

08004d88 <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	71fb      	strb	r3, [r7, #7]
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	e035      	b.n	8004e0a <disEngFont+0x82>
  {
    b = font->data[(ch - 32) * font->height + i];
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	3b20      	subs	r3, #32
 8004da6:	6839      	ldr	r1, [r7, #0]
 8004da8:	7849      	ldrb	r1, [r1, #1]
 8004daa:	fb01 f303 	mul.w	r3, r1, r3
 8004dae:	4619      	mov	r1, r3
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	440b      	add	r3, r1
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	4413      	add	r3, r2
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++)
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	e01a      	b.n	8004df8 <disEngFont+0x70>
    {
      if ((b << j) & 0x8000)
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00f      	beq.n	8004df2 <disEngFont+0x6a>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	4413      	add	r3, r2
 8004ddc:	b298      	uxth	r0, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	4413      	add	r3, r2
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004dec:	4619      	mov	r1, r3
 8004dee:	f7ff fc89 	bl	8004704 <lcdDrawPixel>
    for (j = 0; j < font->width; j++)
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	3301      	adds	r3, #1
 8004df6:	61bb      	str	r3, [r7, #24]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d3de      	bcc.n	8004dc2 <disEngFont+0x3a>
  for (i = 0; i < font->height; i++)
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	3301      	adds	r3, #1
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	785b      	ldrb	r3, [r3, #1]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d3c3      	bcc.n	8004d9e <disEngFont+0x16>
      }
    }
  }
}
 8004e16:	bf00      	nop
 8004e18:	bf00      	nop
 8004e1a:	3720      	adds	r7, #32
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	71fb      	strb	r3, [r7, #7]
  lcd_font = font;
 8004e2a:	4a04      	ldr	r2, [pc, #16]	; (8004e3c <lcdSetFont+0x1c>)
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	7013      	strb	r3, [r2, #0]
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	20000085 	.word	0x20000085

08004e40 <cliLcd>:
}

#ifdef _USE_HW_CLI

void cliLcd(cli_args_t *args)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	73fb      	strb	r3, [r7, #15]

	if(args->argc == 1 && args->isStr(0, "test") == true)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d163      	bne.n	8004f1c <cliLcd+0xdc>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	494e      	ldr	r1, [pc, #312]	; (8004f94 <cliLcd+0x154>)
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	4798      	blx	r3
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d05b      	beq.n	8004f1c <cliLcd+0xdc>
	{
		lcdSetFont(LCD_FONT_HAN);
 8004e64:	2003      	movs	r0, #3
 8004e66:	f7ff ffdb 	bl	8004e20 <lcdSetFont>

		while(cliKeepLoop())
 8004e6a:	e04b      	b.n	8004f04 <cliLcd+0xc4>
		{
			if(lcdDrawAvailable() == true)
 8004e6c:	f7ff fc7a 	bl	8004764 <lcdDrawAvailable>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d046      	beq.n	8004f04 <cliLcd+0xc4>
			{
				lcdClearBuffer(black);
 8004e76:	2000      	movs	r0, #0
 8004e78:	f7ff fc4e 	bl	8004718 <lcdClearBuffer>

				lcdPrintf(25, 16*0, green, "[LCD Test]");
 8004e7c:	4b46      	ldr	r3, [pc, #280]	; (8004f98 <cliLcd+0x158>)
 8004e7e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004e82:	2100      	movs	r1, #0
 8004e84:	2019      	movs	r0, #25
 8004e86:	f7ff fdfb 	bl	8004a80 <lcdPrintf>

				lcdPrintf(0, 16*1, white, "%d fps", lcdGetFps());
 8004e8a:	f7ff fc53 	bl	8004734 <lcdGetFps>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	4b42      	ldr	r3, [pc, #264]	; (8004f9c <cliLcd+0x15c>)
 8004e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e98:	2110      	movs	r1, #16
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	f7ff fdf0 	bl	8004a80 <lcdPrintf>
				lcdPrintf(0, 16*2, white, "%d ms", lcdGetFpsTime());
 8004ea0:	f7ff fc54 	bl	800474c <lcdGetFpsTime>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	4b3d      	ldr	r3, [pc, #244]	; (8004fa0 <cliLcd+0x160>)
 8004eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eae:	2120      	movs	r1, #32
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	f7ff fde5 	bl	8004a80 <lcdPrintf>
				lcdPrintf(0, 16*3, white, "%d ms", millis());
 8004eb6:	f7fc fe3d 	bl	8001b34 <millis>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	4b38      	ldr	r3, [pc, #224]	; (8004fa0 <cliLcd+0x160>)
 8004ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ec4:	2130      	movs	r1, #48	; 0x30
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	f7ff fdda 	bl	8004a80 <lcdPrintf>

				lcdDrawFillRect(0, 70, 10, 10, red);
 8004ecc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	230a      	movs	r3, #10
 8004ed4:	220a      	movs	r2, #10
 8004ed6:	2146      	movs	r1, #70	; 0x46
 8004ed8:	2000      	movs	r0, #0
 8004eda:	f7ff fda1 	bl	8004a20 <lcdDrawFillRect>
				lcdDrawFillRect(10, 70, 10, 10, green);
 8004ede:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	230a      	movs	r3, #10
 8004ee6:	220a      	movs	r2, #10
 8004ee8:	2146      	movs	r1, #70	; 0x46
 8004eea:	200a      	movs	r0, #10
 8004eec:	f7ff fd98 	bl	8004a20 <lcdDrawFillRect>
				lcdDrawFillRect(20, 70, 10, 10, blue);
 8004ef0:	231f      	movs	r3, #31
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	230a      	movs	r3, #10
 8004ef6:	220a      	movs	r2, #10
 8004ef8:	2146      	movs	r1, #70	; 0x46
 8004efa:	2014      	movs	r0, #20
 8004efc:	f7ff fd90 	bl	8004a20 <lcdDrawFillRect>

				lcdRequestDraw();
 8004f00:	f7ff fc46 	bl	8004790 <lcdRequestDraw>
		while(cliKeepLoop())
 8004f04:	f7fe fa9e 	bl	8003444 <cliKeepLoop>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1ae      	bne.n	8004e6c <cliLcd+0x2c>
			}
		}

		lcdClearBuffer(black);
 8004f0e:	2000      	movs	r0, #0
 8004f10:	f7ff fc02 	bl	8004718 <lcdClearBuffer>
		lcdUpdateDraw();
 8004f14:	f7ff fc70 	bl	80047f8 <lcdUpdateDraw>

		ret = true;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	73fb      	strb	r3, [r7, #15]
	}

	if(args->argc == 2 && args->isStr(0, "bl") == true)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d126      	bne.n	8004f72 <cliLcd+0x132>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	491e      	ldr	r1, [pc, #120]	; (8004fa4 <cliLcd+0x164>)
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	4798      	blx	r3
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01e      	beq.n	8004f72 <cliLcd+0x132>
	{
		char *bl_status;

		bl_status = args->getStr(1);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	2001      	movs	r0, #1
 8004f3a:	4798      	blx	r3
 8004f3c:	60b8      	str	r0, [r7, #8]

		if(bl_status != NULL)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d014      	beq.n	8004f6e <cliLcd+0x12e>
		{
			if(strcmp(bl_status, "on") == 0)
 8004f44:	4918      	ldr	r1, [pc, #96]	; (8004fa8 <cliLcd+0x168>)
 8004f46:	68b8      	ldr	r0, [r7, #8]
 8004f48:	f7fb f94a 	bl	80001e0 <strcmp>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d103      	bne.n	8004f5a <cliLcd+0x11a>
			{
				lcdSetBackLight(100);
 8004f52:	2064      	movs	r0, #100	; 0x64
 8004f54:	f7ff fbb0 	bl	80046b8 <lcdSetBackLight>
 8004f58:	e009      	b.n	8004f6e <cliLcd+0x12e>
			}
			else if(strcmp(bl_status, "off") == 0)
 8004f5a:	4914      	ldr	r1, [pc, #80]	; (8004fac <cliLcd+0x16c>)
 8004f5c:	68b8      	ldr	r0, [r7, #8]
 8004f5e:	f7fb f93f 	bl	80001e0 <strcmp>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d102      	bne.n	8004f6e <cliLcd+0x12e>
			{
				lcdSetBackLight(0);
 8004f68:	2000      	movs	r0, #0
 8004f6a:	f7ff fba5 	bl	80046b8 <lcdSetBackLight>
			else
			{
			}
		}

		ret = true;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	73fb      	strb	r3, [r7, #15]
	}

	if(ret != true)
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	f083 0301 	eor.w	r3, r3, #1
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <cliLcd+0x14a>
	{
		cliPrintf("lcd test\n");
 8004f7e:	480c      	ldr	r0, [pc, #48]	; (8004fb0 <cliLcd+0x170>)
 8004f80:	f7fe f966 	bl	8003250 <cliPrintf>
		cliPrintf("lcd bl on/off\n");
 8004f84:	480b      	ldr	r0, [pc, #44]	; (8004fb4 <cliLcd+0x174>)
 8004f86:	f7fe f963 	bl	8003250 <cliPrintf>
	}
}
 8004f8a:	bf00      	nop
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	08028508 	.word	0x08028508
 8004f98:	08028510 	.word	0x08028510
 8004f9c:	0802851c 	.word	0x0802851c
 8004fa0:	08028524 	.word	0x08028524
 8004fa4:	0802852c 	.word	0x0802852c
 8004fa8:	08028530 	.word	0x08028530
 8004fac:	08028534 	.word	0x08028534
 8004fb0:	08028538 	.word	0x08028538
 8004fb4:	08028544 	.word	0x08028544

08004fb8 <ledInit>:
				{GPIOC, GPIO_PIN_13, GPIO_PIN_RESET, GPIO_PIN_SET},
		};


bool ledInit(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
	for(int i=0; i<LED_MAX_CH; i++)
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	607b      	str	r3, [r7, #4]
 8004fc2:	e007      	b.n	8004fd4 <ledInit+0x1c>
	{
		ledOff(i);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 f813 	bl	8004ff4 <ledOff>
	for(int i=0; i<LED_MAX_CH; i++)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	607b      	str	r3, [r7, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	ddf4      	ble.n	8004fc4 <ledInit+0xc>
	}

#ifdef _USE_HW_CLI
	cliAdd("led", cliLed);
 8004fda:	4904      	ldr	r1, [pc, #16]	; (8004fec <ledInit+0x34>)
 8004fdc:	4804      	ldr	r0, [pc, #16]	; (8004ff0 <ledInit+0x38>)
 8004fde:	f7fe fa47 	bl	8003470 <cliAdd>
#endif

	return true;
 8004fe2:	2301      	movs	r3, #1
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	0800506d 	.word	0x0800506d
 8004ff0:	0801bc4c 	.word	0x0801bc4c

08004ff4 <ledOff>:

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d111      	bne.n	8005028 <ledOff+0x34>

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	4a0a      	ldr	r2, [pc, #40]	; (8005030 <ledOff+0x3c>)
 8005008:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	4a08      	ldr	r2, [pc, #32]	; (8005030 <ledOff+0x3c>)
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	4413      	add	r3, r2
 8005014:	8899      	ldrh	r1, [r3, #4]
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	4a05      	ldr	r2, [pc, #20]	; (8005030 <ledOff+0x3c>)
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	4413      	add	r3, r2
 800501e:	79db      	ldrb	r3, [r3, #7]
 8005020:	461a      	mov	r2, r3
 8005022:	f003 fc7f 	bl	8008924 <HAL_GPIO_WritePin>
 8005026:	e000      	b.n	800502a <ledOff+0x36>
	if(ch >= LED_MAX_CH) return;
 8005028:	bf00      	nop
}
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	20000098 	.word	0x20000098

08005034 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	4603      	mov	r3, r0
 800503c:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 800503e:	79fb      	ldrb	r3, [r7, #7]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10d      	bne.n	8005060 <ledToggle+0x2c>

	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	4a08      	ldr	r2, [pc, #32]	; (8005068 <ledToggle+0x34>)
 8005048:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	4906      	ldr	r1, [pc, #24]	; (8005068 <ledToggle+0x34>)
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	440b      	add	r3, r1
 8005054:	889b      	ldrh	r3, [r3, #4]
 8005056:	4619      	mov	r1, r3
 8005058:	4610      	mov	r0, r2
 800505a:	f003 fc7c 	bl	8008956 <HAL_GPIO_TogglePin>
 800505e:	e000      	b.n	8005062 <ledToggle+0x2e>
	if(ch >= LED_MAX_CH) return;
 8005060:	bf00      	nop
}
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20000098 	.word	0x20000098

0800506c <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8005074:	2300      	movs	r3, #0
 8005076:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 3 && args->isStr(0, "toggle") == true)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d133      	bne.n	80050e8 <cliLed+0x7c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	491f      	ldr	r1, [pc, #124]	; (8005104 <cliLed+0x98>)
 8005086:	2000      	movs	r0, #0
 8005088:	4798      	blx	r3
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d02b      	beq.n	80050e8 <cliLed+0x7c>
	{
		uint8_t led_ch;
		uint32_t toggle_time;
		uint32_t pre_time;

		led_ch = (uint8_t)args->getData(1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2001      	movs	r0, #1
 8005096:	4798      	blx	r3
 8005098:	4603      	mov	r3, r0
 800509a:	75bb      	strb	r3, [r7, #22]
		toggle_time = (uint32_t)args->getData(2);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2002      	movs	r0, #2
 80050a2:	4798      	blx	r3
 80050a4:	4603      	mov	r3, r0
 80050a6:	60fb      	str	r3, [r7, #12]

		if(led_ch > 0)
 80050a8:	7dbb      	ldrb	r3, [r7, #22]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <cliLed+0x48>
		{
			led_ch--;
 80050ae:	7dbb      	ldrb	r3, [r7, #22]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	75bb      	strb	r3, [r7, #22]
		}

		pre_time = millis();
 80050b4:	f7fc fd3e 	bl	8001b34 <millis>
 80050b8:	6138      	str	r0, [r7, #16]
		while(cliKeepLoop())
 80050ba:	e00e      	b.n	80050da <cliLed+0x6e>
		{
			if(millis() - pre_time >= toggle_time)
 80050bc:	f7fc fd3a 	bl	8001b34 <millis>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d806      	bhi.n	80050da <cliLed+0x6e>
			{
				pre_time = millis();
 80050cc:	f7fc fd32 	bl	8001b34 <millis>
 80050d0:	6138      	str	r0, [r7, #16]
				ledToggle(led_ch);
 80050d2:	7dbb      	ldrb	r3, [r7, #22]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff ffad 	bl	8005034 <ledToggle>
		while(cliKeepLoop())
 80050da:	f7fe f9b3 	bl	8003444 <cliKeepLoop>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1eb      	bne.n	80050bc <cliLed+0x50>
			}
		}

		ret = true;
 80050e4:	2301      	movs	r3, #1
 80050e6:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
 80050ea:	f083 0301 	eor.w	r3, r3, #1
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <cliLed+0x90>
	{
		cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 80050f4:	2101      	movs	r1, #1
 80050f6:	4804      	ldr	r0, [pc, #16]	; (8005108 <cliLed+0x9c>)
 80050f8:	f7fe f8aa 	bl	8003250 <cliPrintf>
	}
}
 80050fc:	bf00      	nop
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	0801bc50 	.word	0x0801bc50
 8005108:	0801bc58 	.word	0x0801bc58

0800510c <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliMCP2515(cli_args_t *args);
#endif

static void TransferDoneISR(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0

}
 8005110:	bf00      	nop
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <mcp2515Init>:

bool mcp2515Init(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af00      	add	r7, sp, #0
	bool ret = true;
 8005122:	2301      	movs	r3, #1
 8005124:	74fb      	strb	r3, [r7, #19]

	ret = spiBegin(spi_ch);
 8005126:	2301      	movs	r3, #1
 8005128:	4618      	mov	r0, r3
 800512a:	f001 fd9d 	bl	8006c68 <spiBegin>
 800512e:	4603      	mov	r3, r0
 8005130:	74fb      	strb	r3, [r7, #19]
	spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 8005132:	2301      	movs	r3, #1
 8005134:	4945      	ldr	r1, [pc, #276]	; (800524c <mcp2515Init+0x130>)
 8005136:	4618      	mov	r0, r3
 8005138:	f001 fe82 	bl	8006e40 <spiAttachTxInterrupt>

	gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 800513c:	2101      	movs	r1, #1
 800513e:	2004      	movs	r0, #4
 8005140:	f7fe fcca 	bl	8003ad8 <gpioPinWrite>

	is_init = mcp2515Reset();
 8005144:	f000 f88a 	bl	800525c <mcp2515Reset>
 8005148:	4603      	mov	r3, r0
 800514a:	461a      	mov	r2, r3
 800514c:	4b40      	ldr	r3, [pc, #256]	; (8005250 <mcp2515Init+0x134>)
 800514e:	701a      	strb	r2, [r3, #0]

	if(is_init == true)
 8005150:	4b3f      	ldr	r3, [pc, #252]	; (8005250 <mcp2515Init+0x134>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d06f      	beq.n	8005238 <mcp2515Init+0x11c>
	{
		uint8_t zeros[14];

		memset(zeros, 0, sizeof(zeros));
 8005158:	1d3b      	adds	r3, r7, #4
 800515a:	220e      	movs	r2, #14
 800515c:	2100      	movs	r1, #0
 800515e:	4618      	mov	r0, r3
 8005160:	f014 faaa 	bl	80196b8 <memset>
		mcp2515WriteRegs(MCP_TXB0CTRL, zeros, 14);
 8005164:	1d3b      	adds	r3, r7, #4
 8005166:	220e      	movs	r2, #14
 8005168:	4619      	mov	r1, r3
 800516a:	2030      	movs	r0, #48	; 0x30
 800516c:	f000 fbf6 	bl	800595c <mcp2515WriteRegs>
		mcp2515WriteRegs(MCP_TXB1CTRL, zeros, 14);
 8005170:	1d3b      	adds	r3, r7, #4
 8005172:	220e      	movs	r2, #14
 8005174:	4619      	mov	r1, r3
 8005176:	2040      	movs	r0, #64	; 0x40
 8005178:	f000 fbf0 	bl	800595c <mcp2515WriteRegs>
    mcp2515WriteRegs(MCP_TXB2CTRL, zeros, 14);
 800517c:	1d3b      	adds	r3, r7, #4
 800517e:	220e      	movs	r2, #14
 8005180:	4619      	mov	r1, r3
 8005182:	2050      	movs	r0, #80	; 0x50
 8005184:	f000 fbea 	bl	800595c <mcp2515WriteRegs>

    mcp2515WriteReg(MCP_RXB0CTRL, 0);
 8005188:	2100      	movs	r1, #0
 800518a:	2060      	movs	r0, #96	; 0x60
 800518c:	f000 fbbd 	bl	800590a <mcp2515WriteReg>
    mcp2515WriteReg(MCP_RXB1CTRL, 0);
 8005190:	2100      	movs	r1, #0
 8005192:	2070      	movs	r0, #112	; 0x70
 8005194:	f000 fbb9 	bl	800590a <mcp2515WriteReg>

    mcp2515WriteReg(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 8005198:	21a3      	movs	r1, #163	; 0xa3
 800519a:	202b      	movs	r0, #43	; 0x2b
 800519c:	f000 fbb5 	bl	800590a <mcp2515WriteReg>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    mcp2515ModifyReg(MCP_RXB0CTRL,
 80051a0:	2260      	movs	r2, #96	; 0x60
 80051a2:	2304      	movs	r3, #4
 80051a4:	4313      	orrs	r3, r2
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2203      	movs	r2, #3
 80051aa:	4313      	orrs	r3, r2
 80051ac:	b2d9      	uxtb	r1, r3
 80051ae:	2200      	movs	r2, #0
 80051b0:	2304      	movs	r3, #4
 80051b2:	4313      	orrs	r3, r2
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2200      	movs	r2, #0
 80051b8:	4313      	orrs	r3, r2
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	2060      	movs	r0, #96	; 0x60
 80051c0:	f000 fbf9 	bl	80059b6 <mcp2515ModifyReg>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
									 RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    mcp2515ModifyReg(MCP_RXB1CTRL,
 80051c4:	2260      	movs	r2, #96	; 0x60
 80051c6:	2307      	movs	r3, #7
 80051c8:	4313      	orrs	r3, r2
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2100      	movs	r1, #0
 80051ce:	2201      	movs	r2, #1
 80051d0:	430a      	orrs	r2, r1
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	4619      	mov	r1, r3
 80051d6:	2070      	movs	r0, #112	; 0x70
 80051d8:	f000 fbed 	bl	80059b6 <mcp2515ModifyReg>
	                 RXBnCTRL_RXM_MASK | RXB1CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    for(int i=0; i<MCP_FILTER_MAX; i++)
 80051dc:	2300      	movs	r3, #0
 80051de:	61fb      	str	r3, [r7, #28]
 80051e0:	e011      	b.n	8005206 <mcp2515Init+0xea>
    {
    	bool ext;

    	if(i == 1)
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d102      	bne.n	80051ee <mcp2515Init+0xd2>
    	{
    		ext = true;
 80051e8:	2301      	movs	r3, #1
 80051ea:	76fb      	strb	r3, [r7, #27]
 80051ec:	e001      	b.n	80051f2 <mcp2515Init+0xd6>
    	}
    	else
    	{
    		ext = false;
 80051ee:	2300      	movs	r3, #0
 80051f0:	76fb      	strb	r3, [r7, #27]
    	}
    	mcp2515SetFilter(i, ext, 0);
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	7ef9      	ldrb	r1, [r7, #27]
 80051f8:	2200      	movs	r2, #0
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f9ce 	bl	800559c <mcp2515SetFilter>
    for(int i=0; i<MCP_FILTER_MAX; i++)
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	3301      	adds	r3, #1
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	2b05      	cmp	r3, #5
 800520a:	ddea      	ble.n	80051e2 <mcp2515Init+0xc6>
    }
  	for(int i=0; i<MCP_MASK_MAX; i++)
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	e009      	b.n	8005226 <mcp2515Init+0x10a>
  	{
  		mcp2515SetFilterMask(i, true, 0);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2200      	movs	r2, #0
 8005218:	2101      	movs	r1, #1
 800521a:	4618      	mov	r0, r3
 800521c:	f000 f98c 	bl	8005538 <mcp2515SetFilterMask>
  	for(int i=0; i<MCP_MASK_MAX; i++)
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	3301      	adds	r3, #1
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b01      	cmp	r3, #1
 800522a:	ddf2      	ble.n	8005212 <mcp2515Init+0xf6>
  	}

  	mcp2515SetMode(MCP_MODE_LOOPBACK);
 800522c:	2002      	movs	r0, #2
 800522e:	f000 f834 	bl	800529a <mcp2515SetMode>
  	mcp2515SetBaud(MCP_BAUD_125K);
 8005232:	2000      	movs	r0, #0
 8005234:	f000 f878 	bl	8005328 <mcp2515SetBaud>
	}

#ifdef _USE_HW_CLI
	cliAdd("mcp2515", cliMCP2515);
 8005238:	4906      	ldr	r1, [pc, #24]	; (8005254 <mcp2515Init+0x138>)
 800523a:	4807      	ldr	r0, [pc, #28]	; (8005258 <mcp2515Init+0x13c>)
 800523c:	f7fe f918 	bl	8003470 <cliAdd>
#endif

	return ret;
 8005240:	7cfb      	ldrb	r3, [r7, #19]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3720      	adds	r7, #32
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	0800510d 	.word	0x0800510d
 8005250:	20005280 	.word	0x20005280
 8005254:	08005bf9 	.word	0x08005bf9
 8005258:	0801bc78 	.word	0x0801bc78

0800525c <mcp2515Reset>:

bool mcp2515Reset(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af02      	add	r7, sp, #8
	bool ret;
	uint8_t buf[1];

	buf[0] = MCP_INST_RESET;
 8005262:	23c0      	movs	r3, #192	; 0xc0
 8005264:	713b      	strb	r3, [r7, #4]
	gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8005266:	2100      	movs	r1, #0
 8005268:	2004      	movs	r0, #4
 800526a:	f7fe fc35 	bl	8003ad8 <gpioPinWrite>
	ret = spiTransfer(spi_ch, buf, buf, 1, 10);
 800526e:	2001      	movs	r0, #1
 8005270:	1d3a      	adds	r2, r7, #4
 8005272:	1d39      	adds	r1, r7, #4
 8005274:	230a      	movs	r3, #10
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	2301      	movs	r3, #1
 800527a:	f001 fd91 	bl	8006da0 <spiTransfer>
 800527e:	4603      	mov	r3, r0
 8005280:	71fb      	strb	r3, [r7, #7]
	gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8005282:	2101      	movs	r1, #1
 8005284:	2004      	movs	r0, #4
 8005286:	f7fe fc27 	bl	8003ad8 <gpioPinWrite>

	delay(10);
 800528a:	200a      	movs	r0, #10
 800528c:	f7fc fc47 	bl	8001b1e <delay>

	return ret;
 8005290:	79fb      	ldrb	r3, [r7, #7]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <mcp2515SetMode>:

bool mcp2515SetMode(McpMode mode)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b084      	sub	sp, #16
 800529e:	af00      	add	r7, sp, #0
 80052a0:	4603      	mov	r3, r0
 80052a2:	71fb      	strb	r3, [r7, #7]
	bool ret;
	uint8_t data = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	73fb      	strb	r3, [r7, #15]
	uint8_t mask = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	73bb      	strb	r3, [r7, #14]
	uint32_t pre_time;

	data = ((uint8_t)mode)<<5;
 80052ac:	79fb      	ldrb	r3, [r7, #7]
 80052ae:	015b      	lsls	r3, r3, #5
 80052b0:	73fb      	strb	r3, [r7, #15]
	mask = 0x07<<5;
 80052b2:	23e0      	movs	r3, #224	; 0xe0
 80052b4:	73bb      	strb	r3, [r7, #14]

	ret = mcp2515ModifyReg(MCP_CANCTRL, mask, data);
 80052b6:	7bfa      	ldrb	r2, [r7, #15]
 80052b8:	7bbb      	ldrb	r3, [r7, #14]
 80052ba:	4619      	mov	r1, r3
 80052bc:	200f      	movs	r0, #15
 80052be:	f000 fb7a 	bl	80059b6 <mcp2515ModifyReg>
 80052c2:	4603      	mov	r3, r0
 80052c4:	737b      	strb	r3, [r7, #13]

	pre_time = millis();
 80052c6:	f7fc fc35 	bl	8001b34 <millis>
 80052ca:	60b8      	str	r0, [r7, #8]
	while(millis()-pre_time < 10)
 80052cc:	e00a      	b.n	80052e4 <mcp2515SetMode+0x4a>
	{
		if((mcp2515ReadReg(MCP_CANSTAT)&mask) == data)
 80052ce:	200e      	movs	r0, #14
 80052d0:	f000 fac7 	bl	8005862 <mcp2515ReadReg>
 80052d4:	4603      	mov	r3, r0
 80052d6:	461a      	mov	r2, r3
 80052d8:	7bbb      	ldrb	r3, [r7, #14]
 80052da:	4013      	ands	r3, r2
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	7bfa      	ldrb	r2, [r7, #15]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d007      	beq.n	80052f4 <mcp2515SetMode+0x5a>
	while(millis()-pre_time < 10)
 80052e4:	f7fc fc26 	bl	8001b34 <millis>
 80052e8:	4602      	mov	r2, r0
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b09      	cmp	r3, #9
 80052f0:	d9ed      	bls.n	80052ce <mcp2515SetMode+0x34>
 80052f2:	e000      	b.n	80052f6 <mcp2515SetMode+0x5c>
		{
			break;
 80052f4:	bf00      	nop
		}
	}

	return ret;
 80052f6:	7b7b      	ldrb	r3, [r7, #13]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <mcp2515GetMode>:

McpMode mcp2515GetMode(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
	McpMode ret;
	uint8_t data;

	data = (mcp2515ReadReg(MCP_CANSTAT) >> 5) & 0x07;
 8005306:	200e      	movs	r0, #14
 8005308:	f000 faab 	bl	8005862 <mcp2515ReadReg>
 800530c:	4603      	mov	r3, r0
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	71fb      	strb	r3, [r7, #7]
	ret = data;
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	71bb      	strb	r3, [r7, #6]

	return ret;
 800531c:	79bb      	ldrb	r3, [r7, #6]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <mcp2515SetBaud>:

bool mcp2515SetBaud(McpBaud baud)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	71fb      	strb	r3, [r7, #7]
	uint8_t cfg1;
	uint8_t cfg2;
	uint8_t cfg3;
	McpMode mode;

	mode = mcp2515GetMode();
 8005332:	f7ff ffe5 	bl	8005300 <mcp2515GetMode>
 8005336:	4603      	mov	r3, r0
 8005338:	733b      	strb	r3, [r7, #12]

	switch(baud)
 800533a:	79fb      	ldrb	r3, [r7, #7]
 800533c:	2b03      	cmp	r3, #3
 800533e:	d827      	bhi.n	8005390 <mcp2515SetBaud+0x68>
 8005340:	a201      	add	r2, pc, #4	; (adr r2, 8005348 <mcp2515SetBaud+0x20>)
 8005342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005346:	bf00      	nop
 8005348:	08005359 	.word	0x08005359
 800534c:	08005367 	.word	0x08005367
 8005350:	08005375 	.word	0x08005375
 8005354:	08005383 	.word	0x08005383
	{
		case MCP_BAUD_125K:
			cfg1 = 0x01;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
			cfg2 = 0xB1;
 800535c:	23b1      	movs	r3, #177	; 0xb1
 800535e:	73bb      	strb	r3, [r7, #14]
			cfg3 = 0x85;
 8005360:	2385      	movs	r3, #133	; 0x85
 8005362:	737b      	strb	r3, [r7, #13]
			break;
 8005364:	e014      	b.n	8005390 <mcp2515SetBaud+0x68>

    case MCP_BAUD_250K:
      cfg1 = 0x00;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]
      cfg2 = 0xB1;
 800536a:	23b1      	movs	r3, #177	; 0xb1
 800536c:	73bb      	strb	r3, [r7, #14]
      cfg3 = 0x85;
 800536e:	2385      	movs	r3, #133	; 0x85
 8005370:	737b      	strb	r3, [r7, #13]
      break;
 8005372:	e00d      	b.n	8005390 <mcp2515SetBaud+0x68>

    case MCP_BAUD_500K:
      cfg1 = 0x00;
 8005374:	2300      	movs	r3, #0
 8005376:	73fb      	strb	r3, [r7, #15]
      cfg2 = 0x90;
 8005378:	2390      	movs	r3, #144	; 0x90
 800537a:	73bb      	strb	r3, [r7, #14]
      cfg3 = 0x82;
 800537c:	2382      	movs	r3, #130	; 0x82
 800537e:	737b      	strb	r3, [r7, #13]
      break;
 8005380:	e006      	b.n	8005390 <mcp2515SetBaud+0x68>

    case MCP_BAUD_1000K:
      cfg1 = 0x00;
 8005382:	2300      	movs	r3, #0
 8005384:	73fb      	strb	r3, [r7, #15]
      cfg2 = 0x80;
 8005386:	2380      	movs	r3, #128	; 0x80
 8005388:	73bb      	strb	r3, [r7, #14]
      cfg3 = 0x80;
 800538a:	2380      	movs	r3, #128	; 0x80
 800538c:	737b      	strb	r3, [r7, #13]
      break;
 800538e:	bf00      	nop
	}

	mcp2515SetMode(MCP_MODE_CONFIG);
 8005390:	2004      	movs	r0, #4
 8005392:	f7ff ff82 	bl	800529a <mcp2515SetMode>

	ret = mcp2515WriteReg(MCP_CNF1, cfg1);
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	4619      	mov	r1, r3
 800539a:	202a      	movs	r0, #42	; 0x2a
 800539c:	f000 fab5 	bl	800590a <mcp2515WriteReg>
 80053a0:	4603      	mov	r3, r0
 80053a2:	72fb      	strb	r3, [r7, #11]
	ret = mcp2515WriteReg(MCP_CNF2, cfg2);
 80053a4:	7bbb      	ldrb	r3, [r7, #14]
 80053a6:	4619      	mov	r1, r3
 80053a8:	2029      	movs	r0, #41	; 0x29
 80053aa:	f000 faae 	bl	800590a <mcp2515WriteReg>
 80053ae:	4603      	mov	r3, r0
 80053b0:	72fb      	strb	r3, [r7, #11]
	ret = mcp2515WriteReg(MCP_CNF3, cfg3);
 80053b2:	7b7b      	ldrb	r3, [r7, #13]
 80053b4:	4619      	mov	r1, r3
 80053b6:	2028      	movs	r0, #40	; 0x28
 80053b8:	f000 faa7 	bl	800590a <mcp2515WriteReg>
 80053bc:	4603      	mov	r3, r0
 80053be:	72fb      	strb	r3, [r7, #11]
	is_baud = baud;
 80053c0:	4a05      	ldr	r2, [pc, #20]	; (80053d8 <mcp2515SetBaud+0xb0>)
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	7013      	strb	r3, [r2, #0]

	mcp2515SetMode(mode);
 80053c6:	7b3b      	ldrb	r3, [r7, #12]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff ff66 	bl	800529a <mcp2515SetMode>

	return ret;
 80053ce:	7afb      	ldrb	r3, [r7, #11]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	20005281 	.word	0x20005281

080053dc <mcp2515GetBaud>:

McpBaud mcp2515GetBaud(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
	return is_baud;
 80053e0:	4b03      	ldr	r3, [pc, #12]	; (80053f0 <mcp2515GetBaud+0x14>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20005281 	.word	0x20005281

080053f4 <mcp2515ReadStatus>:

uint8_t mcp2515ReadStatus(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af02      	add	r7, sp, #8
	uint8_t ret = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2];

	buf[0] = MCP_INST_READ_STATUS;
 80053fe:	23a0      	movs	r3, #160	; 0xa0
 8005400:	713b      	strb	r3, [r7, #4]
	buf[1] = 0;
 8005402:	2300      	movs	r3, #0
 8005404:	717b      	strb	r3, [r7, #5]

	gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8005406:	2100      	movs	r1, #0
 8005408:	2004      	movs	r0, #4
 800540a:	f7fe fb65 	bl	8003ad8 <gpioPinWrite>
	if(spiTransfer(spi_ch, buf, buf, 2, 10) == true)
 800540e:	2001      	movs	r0, #1
 8005410:	1d3a      	adds	r2, r7, #4
 8005412:	1d39      	adds	r1, r7, #4
 8005414:	230a      	movs	r3, #10
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	2302      	movs	r3, #2
 800541a:	f001 fcc1 	bl	8006da0 <spiTransfer>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <mcp2515ReadStatus+0x34>
	{
		ret = buf[1];
 8005424:	797b      	ldrb	r3, [r7, #5]
 8005426:	71fb      	strb	r3, [r7, #7]
	}
	gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8005428:	2101      	movs	r1, #1
 800542a:	2004      	movs	r0, #4
 800542c:	f7fe fb54 	bl	8003ad8 <gpioPinWrite>

	return ret;
 8005430:	79fb      	ldrb	r3, [r7, #7]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <mcp2515ReadErrorFlags>:

uint8_t mcp2515ReadErrorFlags(void)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	af00      	add	r7, sp, #0
	return mcp2515ReadReg(MCP_EFLG);
 800543e:	202d      	movs	r0, #45	; 0x2d
 8005440:	f000 fa0f 	bl	8005862 <mcp2515ReadReg>
 8005444:	4603      	mov	r3, r0
}
 8005446:	4618      	mov	r0, r3
 8005448:	bd80      	pop	{r7, pc}

0800544a <mcp2515PrepareID>:

void mcp2515PrepareID(uint8_t *buffer, const bool ext, const uint32_t id)
{
 800544a:	b480      	push	{r7}
 800544c:	b087      	sub	sp, #28
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	460b      	mov	r3, r1
 8005454:	607a      	str	r2, [r7, #4]
 8005456:	72fb      	strb	r3, [r7, #11]
	uint16_t canid = (uint16_t)(id & 0x0FFFF);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	82fb      	strh	r3, [r7, #22]

	if(ext)
 800545c:	7afb      	ldrb	r3, [r7, #11]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d046      	beq.n	80054f0 <mcp2515PrepareID+0xa6>
	{
		buffer[MCP_EID0] = (uint8_t)(canid & 0xFF);
 8005462:	2303      	movs	r3, #3
 8005464:	461a      	mov	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4413      	add	r3, r2
 800546a:	8afa      	ldrh	r2, [r7, #22]
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	701a      	strb	r2, [r3, #0]
    buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 8005470:	8afb      	ldrh	r3, [r7, #22]
 8005472:	0a1b      	lsrs	r3, r3, #8
 8005474:	b29a      	uxth	r2, r3
 8005476:	2302      	movs	r3, #2
 8005478:	4619      	mov	r1, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	440b      	add	r3, r1
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]
    canid = (uint16_t)(id >> 16);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	0c1b      	lsrs	r3, r3, #16
 8005486:	82fb      	strh	r3, [r7, #22]
    buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 8005488:	8afb      	ldrh	r3, [r7, #22]
 800548a:	b2da      	uxtb	r2, r3
 800548c:	2301      	movs	r3, #1
 800548e:	4619      	mov	r1, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	440b      	add	r3, r1
 8005494:	f002 0203 	and.w	r2, r2, #3
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	701a      	strb	r2, [r3, #0]
    buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 800549c:	2301      	movs	r3, #1
 800549e:	461a      	mov	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	7819      	ldrb	r1, [r3, #0]
 80054a6:	8afb      	ldrh	r3, [r7, #22]
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f023 031f 	bic.w	r3, r3, #31
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	2301      	movs	r3, #1
 80054b6:	4618      	mov	r0, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4403      	add	r3, r0
 80054bc:	440a      	add	r2, r1
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	701a      	strb	r2, [r3, #0]
    buffer[MCP_SIDL] |= 0x08;
 80054c2:	2301      	movs	r3, #1
 80054c4:	461a      	mov	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	781a      	ldrb	r2, [r3, #0]
 80054cc:	2301      	movs	r3, #1
 80054ce:	4619      	mov	r1, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	440b      	add	r3, r1
 80054d4:	f042 0208 	orr.w	r2, r2, #8
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]
    buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 80054dc:	8afb      	ldrh	r3, [r7, #22]
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	2300      	movs	r3, #0
 80054e4:	4619      	mov	r1, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	440b      	add	r3, r1
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]
    buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
    buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
    buffer[MCP_EID0] = 0;
    buffer[MCP_EID8] = 0;
	}
}
 80054ee:	e01d      	b.n	800552c <mcp2515PrepareID+0xe2>
    buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 80054f0:	8afb      	ldrh	r3, [r7, #22]
 80054f2:	08db      	lsrs	r3, r3, #3
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	2300      	movs	r3, #0
 80054f8:	4619      	mov	r1, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	440b      	add	r3, r1
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	701a      	strb	r2, [r3, #0]
    buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 8005502:	8afb      	ldrh	r3, [r7, #22]
 8005504:	b2da      	uxtb	r2, r3
 8005506:	2301      	movs	r3, #1
 8005508:	4619      	mov	r1, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	440b      	add	r3, r1
 800550e:	0152      	lsls	r2, r2, #5
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	701a      	strb	r2, [r3, #0]
    buffer[MCP_EID0] = 0;
 8005514:	2303      	movs	r3, #3
 8005516:	461a      	mov	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]
    buffer[MCP_EID8] = 0;
 8005520:	2302      	movs	r3, #2
 8005522:	461a      	mov	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	2200      	movs	r2, #0
 800552a:	701a      	strb	r2, [r3, #0]
}
 800552c:	bf00      	nop
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <mcp2515SetFilterMask>:

bool mcp2515SetFilterMask(uint8_t index, const bool ext, const uint32_t data)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	603a      	str	r2, [r7, #0]
 8005542:	71fb      	strb	r3, [r7, #7]
 8005544:	460b      	mov	r3, r1
 8005546:	71bb      	strb	r3, [r7, #6]
	bool ret;
	uint8_t buf[4];
	McpMode mode;

	if(index >= MCP_MASK_MAX) return false;
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d901      	bls.n	8005552 <mcp2515SetFilterMask+0x1a>
 800554e:	2300      	movs	r3, #0
 8005550:	e01f      	b.n	8005592 <mcp2515SetFilterMask+0x5a>

	mcp2515PrepareID(buf, ext, data);
 8005552:	79b9      	ldrb	r1, [r7, #6]
 8005554:	f107 0308 	add.w	r3, r7, #8
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff ff75 	bl	800544a <mcp2515PrepareID>

	mode = mcp2515GetMode();
 8005560:	f7ff fece 	bl	8005300 <mcp2515GetMode>
 8005564:	4603      	mov	r3, r0
 8005566:	73fb      	strb	r3, [r7, #15]
	mcp2515SetMode(MCP_MODE_CONFIG);
 8005568:	2004      	movs	r0, #4
 800556a:	f7ff fe96 	bl	800529a <mcp2515SetMode>

	ret = mcp2515WriteRegs(MCP_RXMSIDH(index), buf, 4);
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	3308      	adds	r3, #8
 8005572:	b2db      	uxtb	r3, r3
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	b2db      	uxtb	r3, r3
 8005578:	f107 0108 	add.w	r1, r7, #8
 800557c:	2204      	movs	r2, #4
 800557e:	4618      	mov	r0, r3
 8005580:	f000 f9ec 	bl	800595c <mcp2515WriteRegs>
 8005584:	4603      	mov	r3, r0
 8005586:	73bb      	strb	r3, [r7, #14]

	mcp2515SetMode(mode);
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff fe85 	bl	800529a <mcp2515SetMode>

	return ret;
 8005590:	7bbb      	ldrb	r3, [r7, #14]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <mcp2515SetFilter>:

bool mcp2515SetFilter(uint8_t index, const bool ext, const uint32_t data)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	603a      	str	r2, [r7, #0]
 80055a6:	71fb      	strb	r3, [r7, #7]
 80055a8:	460b      	mov	r3, r1
 80055aa:	71bb      	strb	r3, [r7, #6]
	bool ret;
	uint8_t buf[4];
	McpMode mode;
	const uint8_t rxf_addr[MCP_FILTER_MAX] = {0x00, 0x04, 0x08, 0x10, 0x14, 0x18};
 80055ac:	4a18      	ldr	r2, [pc, #96]	; (8005610 <mcp2515SetFilter+0x74>)
 80055ae:	f107 0308 	add.w	r3, r7, #8
 80055b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055b6:	6018      	str	r0, [r3, #0]
 80055b8:	3304      	adds	r3, #4
 80055ba:	8019      	strh	r1, [r3, #0]

	if(index >= MCP_FILTER_MAX) return false;
 80055bc:	79fb      	ldrb	r3, [r7, #7]
 80055be:	2b05      	cmp	r3, #5
 80055c0:	d901      	bls.n	80055c6 <mcp2515SetFilter+0x2a>
 80055c2:	2300      	movs	r3, #0
 80055c4:	e01f      	b.n	8005606 <mcp2515SetFilter+0x6a>

	mcp2515PrepareID(buf, ext, data);
 80055c6:	79b9      	ldrb	r1, [r7, #6]
 80055c8:	f107 0310 	add.w	r3, r7, #16
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff ff3b 	bl	800544a <mcp2515PrepareID>

	mode = mcp2515GetMode();
 80055d4:	f7ff fe94 	bl	8005300 <mcp2515GetMode>
 80055d8:	4603      	mov	r3, r0
 80055da:	75fb      	strb	r3, [r7, #23]
	mcp2515SetMode(MCP_MODE_CONFIG);
 80055dc:	2004      	movs	r0, #4
 80055de:	f7ff fe5c 	bl	800529a <mcp2515SetMode>

	ret = mcp2515WriteRegs(rxf_addr[index], buf, 4);
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	3318      	adds	r3, #24
 80055e6:	443b      	add	r3, r7
 80055e8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80055ec:	f107 0110 	add.w	r1, r7, #16
 80055f0:	2204      	movs	r2, #4
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 f9b2 	bl	800595c <mcp2515WriteRegs>
 80055f8:	4603      	mov	r3, r0
 80055fa:	75bb      	strb	r3, [r7, #22]

	mcp2515SetMode(mode);
 80055fc:	7dfb      	ldrb	r3, [r7, #23]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff fe4b 	bl	800529a <mcp2515SetMode>

	return ret;
 8005604:	7dbb      	ldrb	r3, [r7, #22]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	0801bc80 	.word	0x0801bc80

08005614 <mcp2515SendMsg>:

bool mcp2515SendMsg(mcp_msg_t *p_msg)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800561c:	2300      	movs	r3, #0
 800561e:	77fb      	strb	r3, [r7, #31]
	uint8_t tx_i;
	uint8_t reg;

	for(int i=0; i<3; i++)
 8005620:	2300      	movs	r3, #0
 8005622:	61bb      	str	r3, [r7, #24]
 8005624:	e017      	b.n	8005656 <mcp2515SendMsg+0x42>
	{
		reg = mcp2515ReadReg(MCP_TXBCTRL(i));
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	b2db      	uxtb	r3, r3
 800562e:	3330      	adds	r3, #48	; 0x30
 8005630:	b2db      	uxtb	r3, r3
 8005632:	4618      	mov	r0, r3
 8005634:	f000 f915 	bl	8005862 <mcp2515ReadReg>
 8005638:	4603      	mov	r3, r0
 800563a:	75fb      	strb	r3, [r7, #23]

		if((ret & (1<<3)) == 0x00)
 800563c:	7ffb      	ldrb	r3, [r7, #31]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d104      	bne.n	8005650 <mcp2515SendMsg+0x3c>
		{
			tx_i = i;
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	77bb      	strb	r3, [r7, #30]
			ret = true;
 800564a:	2301      	movs	r3, #1
 800564c:	77fb      	strb	r3, [r7, #31]
			break;
 800564e:	e005      	b.n	800565c <mcp2515SendMsg+0x48>
	for(int i=0; i<3; i++)
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	3301      	adds	r3, #1
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	2b02      	cmp	r3, #2
 800565a:	dde4      	ble.n	8005626 <mcp2515SendMsg+0x12>
		}
	}

	if(ret != true)
 800565c:	7ffb      	ldrb	r3, [r7, #31]
 800565e:	f083 0301 	eor.w	r3, r3, #1
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <mcp2515SendMsg+0x58>
	{
		return false;
 8005668:	2300      	movs	r3, #0
 800566a:	e050      	b.n	800570e <mcp2515SendMsg+0xfa>
	}

	uint8_t data[13];

  mcp2515PrepareID(data, p_msg->ext, p_msg->id);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	7899      	ldrb	r1, [r3, #2]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	f107 0308 	add.w	r3, r7, #8
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff fee5 	bl	800544a <mcp2515PrepareID>
  data[MCP_DLC] = p_msg->dlc;
 8005680:	2304      	movs	r3, #4
 8005682:	4619      	mov	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	78da      	ldrb	r2, [r3, #3]
 8005688:	f101 0320 	add.w	r3, r1, #32
 800568c:	443b      	add	r3, r7
 800568e:	f803 2c18 	strb.w	r2, [r3, #-24]

  memcpy(&data[MCP_DATA], p_msg->data, p_msg->dlc);
 8005692:	2305      	movs	r3, #5
 8005694:	461a      	mov	r2, r3
 8005696:	f107 0308 	add.w	r3, r7, #8
 800569a:	1898      	adds	r0, r3, r2
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	1d19      	adds	r1, r3, #4
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	78db      	ldrb	r3, [r3, #3]
 80056a4:	461a      	mov	r2, r3
 80056a6:	f014 f8d8 	bl	801985a <memcpy>

  ret = mcp2515WriteRegs(MCP_TXBSIDH(tx_i), data, 5 + p_msg->dlc);
 80056aa:	7fbb      	ldrb	r3, [r7, #30]
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	3331      	adds	r3, #49	; 0x31
 80056b2:	b2d8      	uxtb	r0, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	78db      	ldrb	r3, [r3, #3]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3305      	adds	r3, #5
 80056bc:	b29a      	uxth	r2, r3
 80056be:	f107 0308 	add.w	r3, r7, #8
 80056c2:	4619      	mov	r1, r3
 80056c4:	f000 f94a 	bl	800595c <mcp2515WriteRegs>
 80056c8:	4603      	mov	r3, r0
 80056ca:	77fb      	strb	r3, [r7, #31]

  ret = mcp2515ModifyReg(MCP_TXBCTRL(tx_i), (1<<3), (1<<3));
 80056cc:	7fbb      	ldrb	r3, [r7, #30]
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	3330      	adds	r3, #48	; 0x30
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2208      	movs	r2, #8
 80056d8:	2108      	movs	r1, #8
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 f96b 	bl	80059b6 <mcp2515ModifyReg>
 80056e0:	4603      	mov	r3, r0
 80056e2:	77fb      	strb	r3, [r7, #31]
  if (ret == true)
 80056e4:	7ffb      	ldrb	r3, [r7, #31]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d010      	beq.n	800570c <mcp2515SendMsg+0xf8>
  {
    reg = mcp2515ReadReg(MCP_TXBCTRL(tx_i));
 80056ea:	7fbb      	ldrb	r3, [r7, #30]
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	3330      	adds	r3, #48	; 0x30
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 f8b4 	bl	8005862 <mcp2515ReadReg>
 80056fa:	4603      	mov	r3, r0
 80056fc:	75fb      	strb	r3, [r7, #23]

    if (reg & (0x70))
 80056fe:	7dfb      	ldrb	r3, [r7, #23]
 8005700:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <mcp2515SendMsg+0xf8>
    {
      ret = false;
 8005708:	2300      	movs	r3, #0
 800570a:	77fb      	strb	r3, [r7, #31]
    }
  }

  return ret;
 800570c:	7ffb      	ldrb	r3, [r7, #31]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3720      	adds	r7, #32
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <mcp2515ReadMsg>:

bool mcp2515ReadMsg(mcp_msg_t *p_msg)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b08a      	sub	sp, #40	; 0x28
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800571e:	2300      	movs	r3, #0
 8005720:	76fb      	strb	r3, [r7, #27]
	uint8_t rx_i = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t reg;

	reg = mcp2515ReadStatus();
 8005728:	f7ff fe64 	bl	80053f4 <mcp2515ReadStatus>
 800572c:	4603      	mov	r3, r0
 800572e:	76bb      	strb	r3, [r7, #26]

	if(reg & (1<<0))
 8005730:	7ebb      	ldrb	r3, [r7, #26]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <mcp2515ReadMsg+0x2c>
	{
		rx_i = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005740:	e00a      	b.n	8005758 <mcp2515ReadMsg+0x42>
	}
	else if (reg & (1<<1))
 8005742:	7ebb      	ldrb	r3, [r7, #26]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <mcp2515ReadMsg+0x3e>
	{
		rx_i = 1;
 800574c:	2301      	movs	r3, #1
 800574e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005752:	e001      	b.n	8005758 <mcp2515ReadMsg+0x42>
	}
	else
	{
		return false;
 8005754:	2300      	movs	r3, #0
 8005756:	e080      	b.n	800585a <mcp2515ReadMsg+0x144>
	}

	uint8_t tbufdata[13];

	mcp2515ReadRegs(MCP_RXBSIDH(rx_i), tbufdata, 13);
 8005758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	b2db      	uxtb	r3, r3
 8005760:	3361      	adds	r3, #97	; 0x61
 8005762:	b2db      	uxtb	r3, r3
 8005764:	f107 010c 	add.w	r1, r7, #12
 8005768:	220d      	movs	r2, #13
 800576a:	4618      	mov	r0, r3
 800576c:	f000 f8a0 	bl	80058b0 <mcp2515ReadRegs>

	uint32_t id;

	id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 8005770:	2300      	movs	r3, #0
 8005772:	3328      	adds	r3, #40	; 0x28
 8005774:	443b      	add	r3, r7
 8005776:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	2201      	movs	r2, #1
 800577e:	3228      	adds	r2, #40	; 0x28
 8005780:	443a      	add	r2, r7
 8005782:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8005786:	0952      	lsrs	r2, r2, #5
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	4413      	add	r3, r2
 800578c:	623b      	str	r3, [r7, #32]
	p_msg->ext = false;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	709a      	strb	r2, [r3, #2]

	if((tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) == TXB_EXIDE_MASK)
 8005794:	2301      	movs	r3, #1
 8005796:	3328      	adds	r3, #40	; 0x28
 8005798:	443b      	add	r3, r7
 800579a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800579e:	2208      	movs	r2, #8
 80057a0:	4013      	ands	r3, r2
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2208      	movs	r2, #8
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d11f      	bne.n	80057ea <mcp2515ReadMsg+0xd4>
	{
		id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	009a      	lsls	r2, r3, #2
 80057ae:	2301      	movs	r3, #1
 80057b0:	3328      	adds	r3, #40	; 0x28
 80057b2:	443b      	add	r3, r7
 80057b4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80057b8:	f003 0303 	and.w	r3, r3, #3
 80057bc:	4413      	add	r3, r2
 80057be:	623b      	str	r3, [r7, #32]
		id = (id<<8) + tbufdata[MCP_EID8];
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	2202      	movs	r2, #2
 80057c6:	3228      	adds	r2, #40	; 0x28
 80057c8:	443a      	add	r2, r7
 80057ca:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80057ce:	4413      	add	r3, r2
 80057d0:	623b      	str	r3, [r7, #32]
		id = (id<<8) + tbufdata[MCP_EID0];
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	2203      	movs	r2, #3
 80057d8:	3228      	adds	r2, #40	; 0x28
 80057da:	443a      	add	r2, r7
 80057dc:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80057e0:	4413      	add	r3, r2
 80057e2:	623b      	str	r3, [r7, #32]
		p_msg->ext = true;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	709a      	strb	r2, [r3, #2]
	}

	uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 80057ea:	2304      	movs	r3, #4
 80057ec:	3328      	adds	r3, #40	; 0x28
 80057ee:	443b      	add	r3, r7
 80057f0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80057f4:	220f      	movs	r2, #15
 80057f6:	4013      	ands	r3, r2
 80057f8:	767b      	strb	r3, [r7, #25]
	if(dlc > 8)
 80057fa:	7e7b      	ldrb	r3, [r7, #25]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d901      	bls.n	8005804 <mcp2515ReadMsg+0xee>
	{
		return false;
 8005800:	2300      	movs	r3, #0
 8005802:	e02a      	b.n	800585a <mcp2515ReadMsg+0x144>
	}

	p_msg->id = id;
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	b29a      	uxth	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	801a      	strh	r2, [r3, #0]
	p_msg->dlc = dlc;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	7e7a      	ldrb	r2, [r7, #25]
 8005810:	70da      	strb	r2, [r3, #3]

	for(int i=0; i<dlc; i++)
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	e00e      	b.n	8005836 <mcp2515ReadMsg+0x120>
	{
		p_msg->data[i] = tbufdata[5 + i];
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	3305      	adds	r3, #5
 800581c:	3328      	adds	r3, #40	; 0x28
 800581e:	443b      	add	r3, r7
 8005820:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	4413      	add	r3, r2
 800582a:	3304      	adds	r3, #4
 800582c:	460a      	mov	r2, r1
 800582e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<dlc; i++)
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	3301      	adds	r3, #1
 8005834:	61fb      	str	r3, [r7, #28]
 8005836:	7e7b      	ldrb	r3, [r7, #25]
 8005838:	69fa      	ldr	r2, [r7, #28]
 800583a:	429a      	cmp	r2, r3
 800583c:	dbec      	blt.n	8005818 <mcp2515ReadMsg+0x102>
	}

	ret = mcp2515ModifyReg(MCP_CANINTF, 1<<rx_i, 0);
 800583e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005842:	2201      	movs	r2, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2200      	movs	r2, #0
 800584c:	4619      	mov	r1, r3
 800584e:	202c      	movs	r0, #44	; 0x2c
 8005850:	f000 f8b1 	bl	80059b6 <mcp2515ModifyReg>
 8005854:	4603      	mov	r3, r0
 8005856:	76fb      	strb	r3, [r7, #27]

	return ret;
 8005858:	7efb      	ldrb	r3, [r7, #27]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3728      	adds	r7, #40	; 0x28
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <mcp2515ReadReg>:

uint8_t mcp2515ReadReg(uint8_t addr)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b086      	sub	sp, #24
 8005866:	af02      	add	r7, sp, #8
 8005868:	4603      	mov	r3, r0
 800586a:	71fb      	strb	r3, [r7, #7]
	uint8_t ret = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[3];

	buf[0] = MCP_INST_READ;
 8005870:	2303      	movs	r3, #3
 8005872:	733b      	strb	r3, [r7, #12]
	buf[1] = addr;
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	737b      	strb	r3, [r7, #13]

	gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8005878:	2100      	movs	r1, #0
 800587a:	2004      	movs	r0, #4
 800587c:	f7fe f92c 	bl	8003ad8 <gpioPinWrite>
	if(spiTransfer(spi_ch, buf, buf, 3, 10) == true)
 8005880:	2001      	movs	r0, #1
 8005882:	f107 020c 	add.w	r2, r7, #12
 8005886:	f107 010c 	add.w	r1, r7, #12
 800588a:	230a      	movs	r3, #10
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	2303      	movs	r3, #3
 8005890:	f001 fa86 	bl	8006da0 <spiTransfer>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <mcp2515ReadReg+0x3c>
	{
		ret = buf[2];
 800589a:	7bbb      	ldrb	r3, [r7, #14]
 800589c:	73fb      	strb	r3, [r7, #15]
	}
	gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 800589e:	2101      	movs	r1, #1
 80058a0:	2004      	movs	r0, #4
 80058a2:	f7fe f919 	bl	8003ad8 <gpioPinWrite>

	return ret;
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <mcp2515ReadRegs>:

bool mcp2515ReadRegs(uint8_t addr, uint8_t *p_data, uint16_t length)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	4603      	mov	r3, r0
 80058b8:	6039      	str	r1, [r7, #0]
 80058ba:	71fb      	strb	r3, [r7, #7]
 80058bc:	4613      	mov	r3, r2
 80058be:	80bb      	strh	r3, [r7, #4]
  bool ret;
  uint8_t buf[2];


  buf[0] = MCP_INST_READ;
 80058c0:	2303      	movs	r3, #3
 80058c2:	733b      	strb	r3, [r7, #12]
  buf[1] = addr;
 80058c4:	79fb      	ldrb	r3, [r7, #7]
 80058c6:	737b      	strb	r3, [r7, #13]

  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 80058c8:	2100      	movs	r1, #0
 80058ca:	2004      	movs	r0, #4
 80058cc:	f7fe f904 	bl	8003ad8 <gpioPinWrite>

  spiTransfer(spi_ch, buf, buf, 2, 10);
 80058d0:	2001      	movs	r0, #1
 80058d2:	f107 020c 	add.w	r2, r7, #12
 80058d6:	f107 010c 	add.w	r1, r7, #12
 80058da:	230a      	movs	r3, #10
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	2302      	movs	r3, #2
 80058e0:	f001 fa5e 	bl	8006da0 <spiTransfer>

  ret = spiTransfer(spi_ch, p_data, p_data, length, 10);
 80058e4:	2001      	movs	r0, #1
 80058e6:	88bb      	ldrh	r3, [r7, #4]
 80058e8:	220a      	movs	r2, #10
 80058ea:	9200      	str	r2, [sp, #0]
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	f001 fa56 	bl	8006da0 <spiTransfer>
 80058f4:	4603      	mov	r3, r0
 80058f6:	73fb      	strb	r3, [r7, #15]

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80058f8:	2101      	movs	r1, #1
 80058fa:	2004      	movs	r0, #4
 80058fc:	f7fe f8ec 	bl	8003ad8 <gpioPinWrite>

  return ret;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <mcp2515WriteReg>:

bool mcp2515WriteReg(uint8_t addr, uint8_t data)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b086      	sub	sp, #24
 800590e:	af02      	add	r7, sp, #8
 8005910:	4603      	mov	r3, r0
 8005912:	460a      	mov	r2, r1
 8005914:	71fb      	strb	r3, [r7, #7]
 8005916:	4613      	mov	r3, r2
 8005918:	71bb      	strb	r3, [r7, #6]
	bool ret = 0;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[3];

	buf[0] = MCP_INST_WRITE;
 800591e:	2302      	movs	r3, #2
 8005920:	733b      	strb	r3, [r7, #12]
	buf[1] = addr;
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	737b      	strb	r3, [r7, #13]
	buf[2] = data;
 8005926:	79bb      	ldrb	r3, [r7, #6]
 8005928:	73bb      	strb	r3, [r7, #14]

	gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 800592a:	2100      	movs	r1, #0
 800592c:	2004      	movs	r0, #4
 800592e:	f7fe f8d3 	bl	8003ad8 <gpioPinWrite>
	ret = spiTransfer(spi_ch, buf, buf, 3, 10);
 8005932:	2001      	movs	r0, #1
 8005934:	f107 020c 	add.w	r2, r7, #12
 8005938:	f107 010c 	add.w	r1, r7, #12
 800593c:	230a      	movs	r3, #10
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	2303      	movs	r3, #3
 8005942:	f001 fa2d 	bl	8006da0 <spiTransfer>
 8005946:	4603      	mov	r3, r0
 8005948:	73fb      	strb	r3, [r7, #15]
	gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 800594a:	2101      	movs	r1, #1
 800594c:	2004      	movs	r0, #4
 800594e:	f7fe f8c3 	bl	8003ad8 <gpioPinWrite>

	return ret;
 8005952:	7bfb      	ldrb	r3, [r7, #15]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <mcp2515WriteRegs>:

bool mcp2515WriteRegs(uint8_t addr, uint8_t *p_data, uint16_t length)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af02      	add	r7, sp, #8
 8005962:	4603      	mov	r3, r0
 8005964:	6039      	str	r1, [r7, #0]
 8005966:	71fb      	strb	r3, [r7, #7]
 8005968:	4613      	mov	r3, r2
 800596a:	80bb      	strh	r3, [r7, #4]
	bool ret;
	uint8_t buf[2];

	buf[0] = MCP_INST_WRITE;
 800596c:	2302      	movs	r3, #2
 800596e:	733b      	strb	r3, [r7, #12]
	buf[1] = addr;
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	737b      	strb	r3, [r7, #13]

	gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8005974:	2100      	movs	r1, #0
 8005976:	2004      	movs	r0, #4
 8005978:	f7fe f8ae 	bl	8003ad8 <gpioPinWrite>

	spiTransfer(spi_ch, buf, buf, 2, 10);
 800597c:	2001      	movs	r0, #1
 800597e:	f107 020c 	add.w	r2, r7, #12
 8005982:	f107 010c 	add.w	r1, r7, #12
 8005986:	230a      	movs	r3, #10
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	2302      	movs	r3, #2
 800598c:	f001 fa08 	bl	8006da0 <spiTransfer>

	ret = spiTransfer(spi_ch, p_data, NULL, length, 10);
 8005990:	2001      	movs	r0, #1
 8005992:	88bb      	ldrh	r3, [r7, #4]
 8005994:	220a      	movs	r2, #10
 8005996:	9200      	str	r2, [sp, #0]
 8005998:	2200      	movs	r2, #0
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	f001 fa00 	bl	8006da0 <spiTransfer>
 80059a0:	4603      	mov	r3, r0
 80059a2:	73fb      	strb	r3, [r7, #15]

	gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80059a4:	2101      	movs	r1, #1
 80059a6:	2004      	movs	r0, #4
 80059a8:	f7fe f896 	bl	8003ad8 <gpioPinWrite>

	return ret;
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <mcp2515ModifyReg>:

bool mcp2515ModifyReg(uint8_t addr, uint8_t mask, uint8_t data)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b086      	sub	sp, #24
 80059ba:	af02      	add	r7, sp, #8
 80059bc:	4603      	mov	r3, r0
 80059be:	71fb      	strb	r3, [r7, #7]
 80059c0:	460b      	mov	r3, r1
 80059c2:	71bb      	strb	r3, [r7, #6]
 80059c4:	4613      	mov	r3, r2
 80059c6:	717b      	strb	r3, [r7, #5]
	bool ret = 0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[4];

	buf[0] = MCP_INST_BIT_MODIFY;
 80059cc:	2305      	movs	r3, #5
 80059ce:	723b      	strb	r3, [r7, #8]
	buf[1] = addr;
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	727b      	strb	r3, [r7, #9]
	buf[2] = mask;
 80059d4:	79bb      	ldrb	r3, [r7, #6]
 80059d6:	72bb      	strb	r3, [r7, #10]
	buf[3] = data;
 80059d8:	797b      	ldrb	r3, [r7, #5]
 80059da:	72fb      	strb	r3, [r7, #11]

	gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 80059dc:	2100      	movs	r1, #0
 80059de:	2004      	movs	r0, #4
 80059e0:	f7fe f87a 	bl	8003ad8 <gpioPinWrite>
	ret = spiTransfer(spi_ch, buf, buf, 4, 10);
 80059e4:	2001      	movs	r0, #1
 80059e6:	f107 0208 	add.w	r2, r7, #8
 80059ea:	f107 0108 	add.w	r1, r7, #8
 80059ee:	230a      	movs	r3, #10
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	2304      	movs	r3, #4
 80059f4:	f001 f9d4 	bl	8006da0 <spiTransfer>
 80059f8:	4603      	mov	r3, r0
 80059fa:	73fb      	strb	r3, [r7, #15]
	gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80059fc:	2101      	movs	r1, #1
 80059fe:	2004      	movs	r0, #4
 8005a00:	f7fe f86a 	bl	8003ad8 <gpioPinWrite>

	return ret;
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <mcp2515info>:

#ifdef _USE_HW_CLI

void mcp2515info(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08c      	sub	sp, #48	; 0x30
 8005a14:	af00      	add	r7, sp, #0
	uint8_t reg;
	uint8_t reg_bits;

	reg = mcp2515ReadReg(0x0E);
 8005a16:	200e      	movs	r0, #14
 8005a18:	f7ff ff23 	bl	8005862 <mcp2515ReadReg>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	reg_bits = (reg >> 5) & 0x07;
 8005a22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	cliPrintf("is_init \t: %d\n", is_init);
 8005a2c:	4b5d      	ldr	r3, [pc, #372]	; (8005ba4 <mcp2515info+0x194>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	4619      	mov	r1, r3
 8005a32:	485d      	ldr	r0, [pc, #372]	; (8005ba8 <mcp2515info+0x198>)
 8005a34:	f7fd fc0c 	bl	8003250 <cliPrintf>

	cliPrintf("Operation Mode \t: ");
 8005a38:	485c      	ldr	r0, [pc, #368]	; (8005bac <mcp2515info+0x19c>)
 8005a3a:	f7fd fc09 	bl	8003250 <cliPrintf>
	if(reg_bits == 0x00) cliPrintf("Normal");
 8005a3e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d102      	bne.n	8005a4c <mcp2515info+0x3c>
 8005a46:	485a      	ldr	r0, [pc, #360]	; (8005bb0 <mcp2515info+0x1a0>)
 8005a48:	f7fd fc02 	bl	8003250 <cliPrintf>
	if(reg_bits == 0x01) cliPrintf("Sleep");
 8005a4c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d102      	bne.n	8005a5a <mcp2515info+0x4a>
 8005a54:	4857      	ldr	r0, [pc, #348]	; (8005bb4 <mcp2515info+0x1a4>)
 8005a56:	f7fd fbfb 	bl	8003250 <cliPrintf>
	if(reg_bits == 0x02) cliPrintf("Loopback");
 8005a5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d102      	bne.n	8005a68 <mcp2515info+0x58>
 8005a62:	4855      	ldr	r0, [pc, #340]	; (8005bb8 <mcp2515info+0x1a8>)
 8005a64:	f7fd fbf4 	bl	8003250 <cliPrintf>
	if(reg_bits == 0x03) cliPrintf("Listen-Only");
 8005a68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d102      	bne.n	8005a76 <mcp2515info+0x66>
 8005a70:	4852      	ldr	r0, [pc, #328]	; (8005bbc <mcp2515info+0x1ac>)
 8005a72:	f7fd fbed 	bl	8003250 <cliPrintf>
	if(reg_bits == 0x04) cliPrintf("Configuration");
 8005a76:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d102      	bne.n	8005a84 <mcp2515info+0x74>
 8005a7e:	4850      	ldr	r0, [pc, #320]	; (8005bc0 <mcp2515info+0x1b0>)
 8005a80:	f7fd fbe6 	bl	8003250 <cliPrintf>
	cliPrintf("\n");
 8005a84:	484f      	ldr	r0, [pc, #316]	; (8005bc4 <mcp2515info+0x1b4>)
 8005a86:	f7fd fbe3 	bl	8003250 <cliPrintf>

  uint32_t Fosc;
  uint32_t BRP;
  uint32_t Tq;
  uint32_t SJW;
  uint32_t SyncSeg = 1;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t PhaseSeg1;
  uint32_t PhaseSeg2;
  uint32_t Tbit;
  uint32_t NBR;

  Fosc = 8;
 8005a8e:	2308      	movs	r3, #8
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
  BRP = ((mcp2515ReadReg(0x2A) >> 0) & 0x3F) + 1;
 8005a92:	202a      	movs	r0, #42	; 0x2a
 8005a94:	f7ff fee5 	bl	8005862 <mcp2515ReadReg>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	623b      	str	r3, [r7, #32]
  Tq = 2 * BRP * 1000 / 8;
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005aa8:	fb02 f303 	mul.w	r3, r2, r3
 8005aac:	08db      	lsrs	r3, r3, #3
 8005aae:	61fb      	str	r3, [r7, #28]
  SJW = ((mcp2515ReadReg(0x2A) >> 6) & 0x03) + 1;
 8005ab0:	202a      	movs	r0, #42	; 0x2a
 8005ab2:	f7ff fed6 	bl	8005862 <mcp2515ReadReg>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	099b      	lsrs	r3, r3, #6
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	61bb      	str	r3, [r7, #24]

  cliPrintf("Fosc \t\t: %dMhz\n", Fosc);
 8005ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ac6:	4840      	ldr	r0, [pc, #256]	; (8005bc8 <mcp2515info+0x1b8>)
 8005ac8:	f7fd fbc2 	bl	8003250 <cliPrintf>
  cliPrintf("BRP  \t\t: %d\n", BRP);
 8005acc:	6a39      	ldr	r1, [r7, #32]
 8005ace:	483f      	ldr	r0, [pc, #252]	; (8005bcc <mcp2515info+0x1bc>)
 8005ad0:	f7fd fbbe 	bl	8003250 <cliPrintf>
  cliPrintf("Tq   \t\t: %d ns, %d Mhz\n", Tq, 1000/Tq);
 8005ad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	69f9      	ldr	r1, [r7, #28]
 8005ae2:	483b      	ldr	r0, [pc, #236]	; (8005bd0 <mcp2515info+0x1c0>)
 8005ae4:	f7fd fbb4 	bl	8003250 <cliPrintf>
  cliPrintf("SJW  \t\t: %d Tq\n", SJW);
 8005ae8:	69b9      	ldr	r1, [r7, #24]
 8005aea:	483a      	ldr	r0, [pc, #232]	; (8005bd4 <mcp2515info+0x1c4>)
 8005aec:	f7fd fbb0 	bl	8003250 <cliPrintf>

  PropSeg = ((mcp2515ReadReg(0x29) >> 0) & 0x07) + 1;
 8005af0:	2029      	movs	r0, #41	; 0x29
 8005af2:	f7ff feb6 	bl	8005862 <mcp2515ReadReg>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	3301      	adds	r3, #1
 8005afe:	617b      	str	r3, [r7, #20]
  PhaseSeg1 = ((mcp2515ReadReg(0x29) >> 3) & 0x07) + 1;
 8005b00:	2029      	movs	r0, #41	; 0x29
 8005b02:	f7ff feae 	bl	8005862 <mcp2515ReadReg>
 8005b06:	4603      	mov	r3, r0
 8005b08:	08db      	lsrs	r3, r3, #3
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	3301      	adds	r3, #1
 8005b12:	613b      	str	r3, [r7, #16]
  PhaseSeg2 = ((mcp2515ReadReg(0x28) >> 0) & 0x07) + 1;
 8005b14:	2028      	movs	r0, #40	; 0x28
 8005b16:	f7ff fea4 	bl	8005862 <mcp2515ReadReg>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	3301      	adds	r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]
  Tbit = SyncSeg + PropSeg + PhaseSeg1 + PhaseSeg2;
 8005b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	441a      	add	r2, r3
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4413      	add	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]
  NBR = 1000000 / (Tbit * Tq);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	fb02 f303 	mul.w	r3, r2, r3
 8005b3c:	4a26      	ldr	r2, [pc, #152]	; (8005bd8 <mcp2515info+0x1c8>)
 8005b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b42:	607b      	str	r3, [r7, #4]

  cliPrintf("SyncSeg        \t: %d Tq\n", SyncSeg);
 8005b44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b46:	4825      	ldr	r0, [pc, #148]	; (8005bdc <mcp2515info+0x1cc>)
 8005b48:	f7fd fb82 	bl	8003250 <cliPrintf>
  cliPrintf("PropSeg        \t: %d Tq\n", PropSeg);
 8005b4c:	6979      	ldr	r1, [r7, #20]
 8005b4e:	4824      	ldr	r0, [pc, #144]	; (8005be0 <mcp2515info+0x1d0>)
 8005b50:	f7fd fb7e 	bl	8003250 <cliPrintf>
  cliPrintf("PhaseSeg1(PS1) \t: %d Tq\n", PhaseSeg1);
 8005b54:	6939      	ldr	r1, [r7, #16]
 8005b56:	4823      	ldr	r0, [pc, #140]	; (8005be4 <mcp2515info+0x1d4>)
 8005b58:	f7fd fb7a 	bl	8003250 <cliPrintf>
  cliPrintf("PhaseSeg2(PS2) \t: %d Tq\n", PhaseSeg2);
 8005b5c:	68f9      	ldr	r1, [r7, #12]
 8005b5e:	4822      	ldr	r0, [pc, #136]	; (8005be8 <mcp2515info+0x1d8>)
 8005b60:	f7fd fb76 	bl	8003250 <cliPrintf>
  cliPrintf("Tbit           \t: %d Tq, %d ns\n", Tbit, Tbit * Tq);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	fb02 f303 	mul.w	r3, r2, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	481e      	ldr	r0, [pc, #120]	; (8005bec <mcp2515info+0x1dc>)
 8005b72:	f7fd fb6d 	bl	8003250 <cliPrintf>
  cliPrintf("Sample Point   \t: %d%% \n", (SyncSeg+PropSeg+PhaseSeg1) * 100 / Tbit);
 8005b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	441a      	add	r2, r3
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	4413      	add	r3, r2
 8005b80:	2264      	movs	r2, #100	; 0x64
 8005b82:	fb03 f202 	mul.w	r2, r3, r2
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4818      	ldr	r0, [pc, #96]	; (8005bf0 <mcp2515info+0x1e0>)
 8005b90:	f7fd fb5e 	bl	8003250 <cliPrintf>
  cliPrintf("NBR            \t: %d Kbps\n", NBR);
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	4817      	ldr	r0, [pc, #92]	; (8005bf4 <mcp2515info+0x1e4>)
 8005b98:	f7fd fb5a 	bl	8003250 <cliPrintf>
}
 8005b9c:	bf00      	nop
 8005b9e:	3730      	adds	r7, #48	; 0x30
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	20005280 	.word	0x20005280
 8005ba8:	0801bc88 	.word	0x0801bc88
 8005bac:	0801bc98 	.word	0x0801bc98
 8005bb0:	0801bcac 	.word	0x0801bcac
 8005bb4:	0801bcb4 	.word	0x0801bcb4
 8005bb8:	0801bcbc 	.word	0x0801bcbc
 8005bbc:	0801bcc8 	.word	0x0801bcc8
 8005bc0:	0801bcd4 	.word	0x0801bcd4
 8005bc4:	0801bce4 	.word	0x0801bce4
 8005bc8:	0801bce8 	.word	0x0801bce8
 8005bcc:	0801bcf8 	.word	0x0801bcf8
 8005bd0:	0801bd08 	.word	0x0801bd08
 8005bd4:	0801bd20 	.word	0x0801bd20
 8005bd8:	000f4240 	.word	0x000f4240
 8005bdc:	0801bd30 	.word	0x0801bd30
 8005be0:	0801bd4c 	.word	0x0801bd4c
 8005be4:	0801bd68 	.word	0x0801bd68
 8005be8:	0801bd84 	.word	0x0801bd84
 8005bec:	0801bda0 	.word	0x0801bda0
 8005bf0:	0801bdc0 	.word	0x0801bdc0
 8005bf4:	0801bddc 	.word	0x0801bddc

08005bf8 <cliMCP2515>:

void cliMCP2515(cli_args_t *args)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b094      	sub	sp, #80	; 0x50
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8005c00:	2300      	movs	r3, #0
 8005c02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if(args->argc == 1 && args->isStr(0, "info") == true)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d10c      	bne.n	8005c28 <cliMCP2515+0x30>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	49b5      	ldr	r1, [pc, #724]	; (8005ee8 <cliMCP2515+0x2f0>)
 8005c14:	2000      	movs	r0, #0
 8005c16:	4798      	blx	r3
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d004      	beq.n	8005c28 <cliMCP2515+0x30>
	{
		mcp2515info();
 8005c1e:	f7ff fef7 	bl	8005a10 <mcp2515info>
		ret = true;
 8005c22:	2301      	movs	r3, #1
 8005c24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	}

	if(args->argc == 1 && args->isStr(0, "reg_info") == true)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	f040 80be 	bne.w	8005dae <cliMCP2515+0x1b6>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	49ad      	ldr	r1, [pc, #692]	; (8005eec <cliMCP2515+0x2f4>)
 8005c38:	2000      	movs	r0, #0
 8005c3a:	4798      	blx	r3
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 80b5 	beq.w	8005dae <cliMCP2515+0x1b6>
	{
    cliPrintf("BFPCTRL    0x%02X : 0x%02X\n", 0x0C, mcp2515ReadReg(0x0C));
 8005c44:	200c      	movs	r0, #12
 8005c46:	f7ff fe0c 	bl	8005862 <mcp2515ReadReg>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	210c      	movs	r1, #12
 8005c50:	48a7      	ldr	r0, [pc, #668]	; (8005ef0 <cliMCP2515+0x2f8>)
 8005c52:	f7fd fafd 	bl	8003250 <cliPrintf>
    cliPrintf("TXRTSCTRL  0x%02X : 0x%02X\n", 0x0D, mcp2515ReadReg(0x0D));
 8005c56:	200d      	movs	r0, #13
 8005c58:	f7ff fe03 	bl	8005862 <mcp2515ReadReg>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	461a      	mov	r2, r3
 8005c60:	210d      	movs	r1, #13
 8005c62:	48a4      	ldr	r0, [pc, #656]	; (8005ef4 <cliMCP2515+0x2fc>)
 8005c64:	f7fd faf4 	bl	8003250 <cliPrintf>
    cliPrintf("CANSTAT    0x%02X : 0x%02X\n", 0x0E, mcp2515ReadReg(0x0E));
 8005c68:	200e      	movs	r0, #14
 8005c6a:	f7ff fdfa 	bl	8005862 <mcp2515ReadReg>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	461a      	mov	r2, r3
 8005c72:	210e      	movs	r1, #14
 8005c74:	48a0      	ldr	r0, [pc, #640]	; (8005ef8 <cliMCP2515+0x300>)
 8005c76:	f7fd faeb 	bl	8003250 <cliPrintf>
    cliPrintf("CANCTRL    0x%02X : 0x%02X\n", 0x0F, mcp2515ReadReg(0x0F));
 8005c7a:	200f      	movs	r0, #15
 8005c7c:	f7ff fdf1 	bl	8005862 <mcp2515ReadReg>
 8005c80:	4603      	mov	r3, r0
 8005c82:	461a      	mov	r2, r3
 8005c84:	210f      	movs	r1, #15
 8005c86:	489d      	ldr	r0, [pc, #628]	; (8005efc <cliMCP2515+0x304>)
 8005c88:	f7fd fae2 	bl	8003250 <cliPrintf>
    cliPrintf("TEC        0x%02X : 0x%02X\n", 0x1C, mcp2515ReadReg(0x1C));
 8005c8c:	201c      	movs	r0, #28
 8005c8e:	f7ff fde8 	bl	8005862 <mcp2515ReadReg>
 8005c92:	4603      	mov	r3, r0
 8005c94:	461a      	mov	r2, r3
 8005c96:	211c      	movs	r1, #28
 8005c98:	4899      	ldr	r0, [pc, #612]	; (8005f00 <cliMCP2515+0x308>)
 8005c9a:	f7fd fad9 	bl	8003250 <cliPrintf>
    cliPrintf("REC        0x%02X : 0x%02X\n", 0x1D, mcp2515ReadReg(0x1D));
 8005c9e:	201d      	movs	r0, #29
 8005ca0:	f7ff fddf 	bl	8005862 <mcp2515ReadReg>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	211d      	movs	r1, #29
 8005caa:	4896      	ldr	r0, [pc, #600]	; (8005f04 <cliMCP2515+0x30c>)
 8005cac:	f7fd fad0 	bl	8003250 <cliPrintf>
    cliPrintf("CNF3       0x%02X : 0x%02X\n", 0x28, mcp2515ReadReg(0x28));
 8005cb0:	2028      	movs	r0, #40	; 0x28
 8005cb2:	f7ff fdd6 	bl	8005862 <mcp2515ReadReg>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	461a      	mov	r2, r3
 8005cba:	2128      	movs	r1, #40	; 0x28
 8005cbc:	4892      	ldr	r0, [pc, #584]	; (8005f08 <cliMCP2515+0x310>)
 8005cbe:	f7fd fac7 	bl	8003250 <cliPrintf>
    cliPrintf("CNF2       0x%02X : 0x%02X\n", 0x29, mcp2515ReadReg(0x29));
 8005cc2:	2029      	movs	r0, #41	; 0x29
 8005cc4:	f7ff fdcd 	bl	8005862 <mcp2515ReadReg>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	461a      	mov	r2, r3
 8005ccc:	2129      	movs	r1, #41	; 0x29
 8005cce:	488f      	ldr	r0, [pc, #572]	; (8005f0c <cliMCP2515+0x314>)
 8005cd0:	f7fd fabe 	bl	8003250 <cliPrintf>
    cliPrintf("CNF1       0x%02X : 0x%02X\n", 0x2A, mcp2515ReadReg(0x2A));
 8005cd4:	202a      	movs	r0, #42	; 0x2a
 8005cd6:	f7ff fdc4 	bl	8005862 <mcp2515ReadReg>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	461a      	mov	r2, r3
 8005cde:	212a      	movs	r1, #42	; 0x2a
 8005ce0:	488b      	ldr	r0, [pc, #556]	; (8005f10 <cliMCP2515+0x318>)
 8005ce2:	f7fd fab5 	bl	8003250 <cliPrintf>
    cliPrintf("CANINTE    0x%02X : 0x%02X\n", 0x2B, mcp2515ReadReg(0x2B));
 8005ce6:	202b      	movs	r0, #43	; 0x2b
 8005ce8:	f7ff fdbb 	bl	8005862 <mcp2515ReadReg>
 8005cec:	4603      	mov	r3, r0
 8005cee:	461a      	mov	r2, r3
 8005cf0:	212b      	movs	r1, #43	; 0x2b
 8005cf2:	4888      	ldr	r0, [pc, #544]	; (8005f14 <cliMCP2515+0x31c>)
 8005cf4:	f7fd faac 	bl	8003250 <cliPrintf>
    cliPrintf("CANINTF    0x%02X : 0x%02X\n", 0x2C, mcp2515ReadReg(0x2C));
 8005cf8:	202c      	movs	r0, #44	; 0x2c
 8005cfa:	f7ff fdb2 	bl	8005862 <mcp2515ReadReg>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	461a      	mov	r2, r3
 8005d02:	212c      	movs	r1, #44	; 0x2c
 8005d04:	4884      	ldr	r0, [pc, #528]	; (8005f18 <cliMCP2515+0x320>)
 8005d06:	f7fd faa3 	bl	8003250 <cliPrintf>
    cliPrintf("EFLG       0x%02X : 0x%02X\n", 0x2D, mcp2515ReadReg(0x2D));
 8005d0a:	202d      	movs	r0, #45	; 0x2d
 8005d0c:	f7ff fda9 	bl	8005862 <mcp2515ReadReg>
 8005d10:	4603      	mov	r3, r0
 8005d12:	461a      	mov	r2, r3
 8005d14:	212d      	movs	r1, #45	; 0x2d
 8005d16:	4881      	ldr	r0, [pc, #516]	; (8005f1c <cliMCP2515+0x324>)
 8005d18:	f7fd fa9a 	bl	8003250 <cliPrintf>
    cliPrintf("TXB0CTRL   0x%02X : 0x%02X\n", 0x30, mcp2515ReadReg(0x30));
 8005d1c:	2030      	movs	r0, #48	; 0x30
 8005d1e:	f7ff fda0 	bl	8005862 <mcp2515ReadReg>
 8005d22:	4603      	mov	r3, r0
 8005d24:	461a      	mov	r2, r3
 8005d26:	2130      	movs	r1, #48	; 0x30
 8005d28:	487d      	ldr	r0, [pc, #500]	; (8005f20 <cliMCP2515+0x328>)
 8005d2a:	f7fd fa91 	bl	8003250 <cliPrintf>
    cliPrintf("TXB1CTRL   0x%02X : 0x%02X\n", 0x40, mcp2515ReadReg(0x40));
 8005d2e:	2040      	movs	r0, #64	; 0x40
 8005d30:	f7ff fd97 	bl	8005862 <mcp2515ReadReg>
 8005d34:	4603      	mov	r3, r0
 8005d36:	461a      	mov	r2, r3
 8005d38:	2140      	movs	r1, #64	; 0x40
 8005d3a:	487a      	ldr	r0, [pc, #488]	; (8005f24 <cliMCP2515+0x32c>)
 8005d3c:	f7fd fa88 	bl	8003250 <cliPrintf>
    cliPrintf("TXB2CTRL   0x%02X : 0x%02X\n", 0x50, mcp2515ReadReg(0x50));
 8005d40:	2050      	movs	r0, #80	; 0x50
 8005d42:	f7ff fd8e 	bl	8005862 <mcp2515ReadReg>
 8005d46:	4603      	mov	r3, r0
 8005d48:	461a      	mov	r2, r3
 8005d4a:	2150      	movs	r1, #80	; 0x50
 8005d4c:	4876      	ldr	r0, [pc, #472]	; (8005f28 <cliMCP2515+0x330>)
 8005d4e:	f7fd fa7f 	bl	8003250 <cliPrintf>
    cliPrintf("RXB0CTRL   0x%02X : 0x%02X\n", 0x60, mcp2515ReadReg(0x60));
 8005d52:	2060      	movs	r0, #96	; 0x60
 8005d54:	f7ff fd85 	bl	8005862 <mcp2515ReadReg>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	2160      	movs	r1, #96	; 0x60
 8005d5e:	4873      	ldr	r0, [pc, #460]	; (8005f2c <cliMCP2515+0x334>)
 8005d60:	f7fd fa76 	bl	8003250 <cliPrintf>
    cliPrintf("RXB1CTRL   0x%02X : 0x%02X\n", 0x70, mcp2515ReadReg(0x70));
 8005d64:	2070      	movs	r0, #112	; 0x70
 8005d66:	f7ff fd7c 	bl	8005862 <mcp2515ReadReg>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	2170      	movs	r1, #112	; 0x70
 8005d70:	486f      	ldr	r0, [pc, #444]	; (8005f30 <cliMCP2515+0x338>)
 8005d72:	f7fd fa6d 	bl	8003250 <cliPrintf>

    uint32_t pre_time;

    pre_time = millis();
 8005d76:	f7fb fedd 	bl	8001b34 <millis>
 8005d7a:	6338      	str	r0, [r7, #48]	; 0x30
    for(int i=0; i<1000; i++)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d80:	e005      	b.n	8005d8e <cliMCP2515+0x196>
    {
    	mcp2515ReadReg(0x2A);
 8005d82:	202a      	movs	r0, #42	; 0x2a
 8005d84:	f7ff fd6d 	bl	8005862 <mcp2515ReadReg>
    for(int i=0; i<1000; i++)
 8005d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d94:	dbf5      	blt.n	8005d82 <cliMCP2515+0x18a>
    }
    cliPrintf("%d ms\n", millis()-pre_time);
 8005d96:	f7fb fecd 	bl	8001b34 <millis>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	4619      	mov	r1, r3
 8005da2:	4864      	ldr	r0, [pc, #400]	; (8005f34 <cliMCP2515+0x33c>)
 8005da4:	f7fd fa54 	bl	8003250 <cliPrintf>

    ret = true;
 8005da8:	2301      	movs	r3, #1
 8005daa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	}

	if(args->argc == 3 && args->isStr(0, "read_reg") == true)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d140      	bne.n	8005e38 <cliMCP2515+0x240>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	495f      	ldr	r1, [pc, #380]	; (8005f38 <cliMCP2515+0x340>)
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	4798      	blx	r3
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d038      	beq.n	8005e38 <cliMCP2515+0x240>
	{
		uint8_t addr;
		uint16_t length;
		uint8_t buf[2];

		addr = (uint8_t)args->getData(1);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	2001      	movs	r0, #1
 8005dcc:	4798      	blx	r3
 8005dce:	4603      	mov	r3, r0
 8005dd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		length = (uint8_t)args->getData(2);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2002      	movs	r0, #2
 8005dda:	4798      	blx	r3
 8005ddc:	4603      	mov	r3, r0
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	85bb      	strh	r3, [r7, #44]	; 0x2c

		for(int i=0; i<length; i++)
 8005de2:	2300      	movs	r3, #0
 8005de4:	647b      	str	r3, [r7, #68]	; 0x44
 8005de6:	e023      	b.n	8005e30 <cliMCP2515+0x238>
		{
			if(mcp2515ReadRegs(addr + i, buf, 1) == true)
 8005de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005df0:	4413      	add	r3, r2
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	f107 0120 	add.w	r1, r7, #32
 8005df8:	2201      	movs	r2, #1
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff fd58 	bl	80058b0 <mcp2515ReadRegs>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <cliMCP2515+0x224>
			{
				cliPrintf("0x%02X : 0x%02X\n", addr + i, buf[0]);
 8005e06:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005e12:	4619      	mov	r1, r3
 8005e14:	4849      	ldr	r0, [pc, #292]	; (8005f3c <cliMCP2515+0x344>)
 8005e16:	f7fd fa1b 	bl	8003250 <cliPrintf>
 8005e1a:	e003      	b.n	8005e24 <cliMCP2515+0x22c>
			}
			else
			{
				cliPrintf("spi fail\n");
 8005e1c:	4848      	ldr	r0, [pc, #288]	; (8005f40 <cliMCP2515+0x348>)
 8005e1e:	f7fd fa17 	bl	8003250 <cliPrintf>
				break;
 8005e22:	e009      	b.n	8005e38 <cliMCP2515+0x240>
			}

			ret = true;
 8005e24:	2301      	movs	r3, #1
 8005e26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		for(int i=0; i<length; i++)
 8005e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e34:	429a      	cmp	r2, r3
 8005e36:	dbd7      	blt.n	8005de8 <cliMCP2515+0x1f0>
		}
	}

	if(args->argc == 2 && args->isStr(0, "set_baud") == true)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	f040 8093 	bne.w	8005f68 <cliMCP2515+0x370>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	493f      	ldr	r1, [pc, #252]	; (8005f44 <cliMCP2515+0x34c>)
 8005e48:	2000      	movs	r0, #0
 8005e4a:	4798      	blx	r3
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 808a 	beq.w	8005f68 <cliMCP2515+0x370>
	{
		bool update = false;
 8005e54:	2300      	movs	r3, #0
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		if(args->isStr(1, "125k"))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	493a      	ldr	r1, [pc, #232]	; (8005f48 <cliMCP2515+0x350>)
 8005e60:	2001      	movs	r0, #1
 8005e62:	4798      	blx	r3
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <cliMCP2515+0x27e>
		{
			mcp2515SetBaud(MCP_BAUD_125K);
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	f7ff fa5c 	bl	8005328 <mcp2515SetBaud>
			update = true;
 8005e70:	2301      	movs	r3, #1
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		}
    if (args->isStr(1, "250k"))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	4934      	ldr	r1, [pc, #208]	; (8005f4c <cliMCP2515+0x354>)
 8005e7c:	2001      	movs	r0, #1
 8005e7e:	4798      	blx	r3
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <cliMCP2515+0x29a>
    {
      mcp2515SetBaud(MCP_BAUD_250K);
 8005e86:	2001      	movs	r0, #1
 8005e88:	f7ff fa4e 	bl	8005328 <mcp2515SetBaud>
      update = true;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }
    if (args->isStr(1, "500k"))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	492e      	ldr	r1, [pc, #184]	; (8005f50 <cliMCP2515+0x358>)
 8005e98:	2001      	movs	r0, #1
 8005e9a:	4798      	blx	r3
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d005      	beq.n	8005eae <cliMCP2515+0x2b6>
    {
      mcp2515SetBaud(MCP_BAUD_500K);
 8005ea2:	2002      	movs	r0, #2
 8005ea4:	f7ff fa40 	bl	8005328 <mcp2515SetBaud>
      update = true;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }
    if (args->isStr(1, "1000k"))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	4928      	ldr	r1, [pc, #160]	; (8005f54 <cliMCP2515+0x35c>)
 8005eb4:	2001      	movs	r0, #1
 8005eb6:	4798      	blx	r3
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d005      	beq.n	8005eca <cliMCP2515+0x2d2>
    {
      mcp2515SetBaud(MCP_BAUD_1000K);
 8005ebe:	2003      	movs	r0, #3
 8005ec0:	f7ff fa32 	bl	8005328 <mcp2515SetBaud>
      update = true;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if(update == true)
 8005eca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d044      	beq.n	8005f5c <cliMCP2515+0x364>
    {
    	cliPrintf("Baud %s OK\n", args->getStr(1));
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2001      	movs	r0, #1
 8005ed8:	4798      	blx	r3
 8005eda:	4603      	mov	r3, r0
 8005edc:	4619      	mov	r1, r3
 8005ede:	481e      	ldr	r0, [pc, #120]	; (8005f58 <cliMCP2515+0x360>)
 8005ee0:	f7fd f9b6 	bl	8003250 <cliPrintf>
 8005ee4:	e03d      	b.n	8005f62 <cliMCP2515+0x36a>
 8005ee6:	bf00      	nop
 8005ee8:	0801bdf8 	.word	0x0801bdf8
 8005eec:	0801be00 	.word	0x0801be00
 8005ef0:	0801be0c 	.word	0x0801be0c
 8005ef4:	0801be28 	.word	0x0801be28
 8005ef8:	0801be44 	.word	0x0801be44
 8005efc:	0801be60 	.word	0x0801be60
 8005f00:	0801be7c 	.word	0x0801be7c
 8005f04:	0801be98 	.word	0x0801be98
 8005f08:	0801beb4 	.word	0x0801beb4
 8005f0c:	0801bed0 	.word	0x0801bed0
 8005f10:	0801beec 	.word	0x0801beec
 8005f14:	0801bf08 	.word	0x0801bf08
 8005f18:	0801bf24 	.word	0x0801bf24
 8005f1c:	0801bf40 	.word	0x0801bf40
 8005f20:	0801bf5c 	.word	0x0801bf5c
 8005f24:	0801bf78 	.word	0x0801bf78
 8005f28:	0801bf94 	.word	0x0801bf94
 8005f2c:	0801bfb0 	.word	0x0801bfb0
 8005f30:	0801bfcc 	.word	0x0801bfcc
 8005f34:	0801bfe8 	.word	0x0801bfe8
 8005f38:	0801bff0 	.word	0x0801bff0
 8005f3c:	0801bffc 	.word	0x0801bffc
 8005f40:	0801c010 	.word	0x0801c010
 8005f44:	0801c01c 	.word	0x0801c01c
 8005f48:	0801c028 	.word	0x0801c028
 8005f4c:	0801c030 	.word	0x0801c030
 8005f50:	0801c038 	.word	0x0801c038
 8005f54:	0801c040 	.word	0x0801c040
 8005f58:	0801c048 	.word	0x0801c048
    }
    else
    {
    	cliPrintf("Wrong Baud\n");
 8005f5c:	48bc      	ldr	r0, [pc, #752]	; (8006250 <cliMCP2515+0x658>)
 8005f5e:	f7fd f977 	bl	8003250 <cliPrintf>
    }

    ret = true;
 8005f62:	2301      	movs	r3, #1
 8005f64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	}

	if(args->argc == 2 && args->isStr(0, "set_mode") == true)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d156      	bne.n	800601e <cliMCP2515+0x426>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	49b7      	ldr	r1, [pc, #732]	; (8006254 <cliMCP2515+0x65c>)
 8005f76:	2000      	movs	r0, #0
 8005f78:	4798      	blx	r3
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d04e      	beq.n	800601e <cliMCP2515+0x426>
	{
		bool update = false;
 8005f80:	2300      	movs	r3, #0
 8005f82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

    if (args->isStr(1, "normal"))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	49b3      	ldr	r1, [pc, #716]	; (8006258 <cliMCP2515+0x660>)
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	4798      	blx	r3
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <cliMCP2515+0x3aa>
    {
      mcp2515SetMode(MCP_MODE_NORMAL);
 8005f96:	2000      	movs	r0, #0
 8005f98:	f7ff f97f 	bl	800529a <mcp2515SetMode>
      update = true;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    }
    if (args->isStr(1, "loopback"))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	49ad      	ldr	r1, [pc, #692]	; (800625c <cliMCP2515+0x664>)
 8005fa8:	2001      	movs	r0, #1
 8005faa:	4798      	blx	r3
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d005      	beq.n	8005fbe <cliMCP2515+0x3c6>
    {
      mcp2515SetMode(MCP_MODE_LOOPBACK);
 8005fb2:	2002      	movs	r0, #2
 8005fb4:	f7ff f971 	bl	800529a <mcp2515SetMode>
      update = true;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    }
    if (args->isStr(1, "listen"))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	49a7      	ldr	r1, [pc, #668]	; (8006260 <cliMCP2515+0x668>)
 8005fc4:	2001      	movs	r0, #1
 8005fc6:	4798      	blx	r3
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d005      	beq.n	8005fda <cliMCP2515+0x3e2>
    {
      mcp2515SetMode(MCP_MODE_LISTEN);
 8005fce:	2003      	movs	r0, #3
 8005fd0:	f7ff f963 	bl	800529a <mcp2515SetMode>
      update = true;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    }
    if (args->isStr(1, "config"))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	49a1      	ldr	r1, [pc, #644]	; (8006264 <cliMCP2515+0x66c>)
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	4798      	blx	r3
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d005      	beq.n	8005ff6 <cliMCP2515+0x3fe>
    {
      mcp2515SetMode(MCP_MODE_CONFIG);
 8005fea:	2004      	movs	r0, #4
 8005fec:	f7ff f955 	bl	800529a <mcp2515SetMode>
      update = true;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    }
    if (update == true)
 8005ff6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d009      	beq.n	8006012 <cliMCP2515+0x41a>
    {
      cliPrintf("Mode %s OK\n", args->getStr(1));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2001      	movs	r0, #1
 8006004:	4798      	blx	r3
 8006006:	4603      	mov	r3, r0
 8006008:	4619      	mov	r1, r3
 800600a:	4897      	ldr	r0, [pc, #604]	; (8006268 <cliMCP2515+0x670>)
 800600c:	f7fd f920 	bl	8003250 <cliPrintf>
 8006010:	e002      	b.n	8006018 <cliMCP2515+0x420>
    }
    else
    {
      cliPrintf("Wrong Mode\n");
 8006012:	4896      	ldr	r0, [pc, #600]	; (800626c <cliMCP2515+0x674>)
 8006014:	f7fd f91c 	bl	8003250 <cliPrintf>
    }

    ret = true;
 8006018:	2301      	movs	r3, #1
 800601a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	}

	if(args->argc == 1 && args->isStr(0, "test") == true)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	2b01      	cmp	r3, #1
 8006024:	f040 809b 	bne.w	800615e <cliMCP2515+0x566>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	4990      	ldr	r1, [pc, #576]	; (8006270 <cliMCP2515+0x678>)
 800602e:	2000      	movs	r0, #0
 8006030:	4798      	blx	r3
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8092 	beq.w	800615e <cliMCP2515+0x566>
	{
		uint8_t rx_data;
		mcp_msg_t rx_msg;
		uint8_t cnt = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

		while(1)
		{
			if(mcp2515ReadMsg(&rx_msg) == true)
 8006040:	f107 0314 	add.w	r3, r7, #20
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff fb66 	bl	8005716 <mcp2515ReadMsg>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01e      	beq.n	800608e <cliMCP2515+0x496>
			{
				cliPrintf("id : 0x%X, dlc : %d, ext : %d", rx_msg.id, rx_msg.dlc, rx_msg.ext);
 8006050:	8abb      	ldrh	r3, [r7, #20]
 8006052:	4619      	mov	r1, r3
 8006054:	7dfb      	ldrb	r3, [r7, #23]
 8006056:	461a      	mov	r2, r3
 8006058:	7dbb      	ldrb	r3, [r7, #22]
 800605a:	4886      	ldr	r0, [pc, #536]	; (8006274 <cliMCP2515+0x67c>)
 800605c:	f7fd f8f8 	bl	8003250 <cliPrintf>

				for(int i=0; i<rx_msg.dlc; i++)
 8006060:	2300      	movs	r3, #0
 8006062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006064:	e00b      	b.n	800607e <cliMCP2515+0x486>
				{
					cliPrintf("0x%02X ", rx_msg.data[i]);
 8006066:	f107 0218 	add.w	r2, r7, #24
 800606a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606c:	4413      	add	r3, r2
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	4619      	mov	r1, r3
 8006072:	4881      	ldr	r0, [pc, #516]	; (8006278 <cliMCP2515+0x680>)
 8006074:	f7fd f8ec 	bl	8003250 <cliPrintf>
				for(int i=0; i<rx_msg.dlc; i++)
 8006078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607a:	3301      	adds	r3, #1
 800607c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800607e:	7dfb      	ldrb	r3, [r7, #23]
 8006080:	461a      	mov	r2, r3
 8006082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006084:	4293      	cmp	r3, r2
 8006086:	dbee      	blt.n	8006066 <cliMCP2515+0x46e>
				}
				cliPrintf("\n");
 8006088:	487c      	ldr	r0, [pc, #496]	; (800627c <cliMCP2515+0x684>)
 800608a:	f7fd f8e1 	bl	8003250 <cliPrintf>
			}

			if(cliAvailable() > 0)
 800608e:	f7fc fcd3 	bl	8002a38 <cliAvailable>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0d3      	beq.n	8006040 <cliMCP2515+0x448>
			{
				rx_data = cliRead();
 8006098:	f7fc fcda 	bl	8002a50 <cliRead>
 800609c:	4603      	mov	r3, r0
 800609e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

				if(rx_data <= 0x20)
 80060a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	d955      	bls.n	8006156 <cliMCP2515+0x55e>
				{
					break;
				}
				if(rx_data == '1')
 80060aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060ae:	2b31      	cmp	r3, #49	; 0x31
 80060b0:	d129      	bne.n	8006106 <cliMCP2515+0x50e>
				{
          mcp_msg_t msg;
          msg.id  = 0x123;
 80060b2:	f240 1323 	movw	r3, #291	; 0x123
 80060b6:	813b      	strh	r3, [r7, #8]
          msg.ext = true;
 80060b8:	2301      	movs	r3, #1
 80060ba:	72bb      	strb	r3, [r7, #10]
          msg.dlc = 8;
 80060bc:	2308      	movs	r3, #8
 80060be:	72fb      	strb	r3, [r7, #11]
          msg.data[0] = 0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	733b      	strb	r3, [r7, #12]
          msg.data[1] = 1;
 80060c4:	2301      	movs	r3, #1
 80060c6:	737b      	strb	r3, [r7, #13]
          msg.data[2] = 2;
 80060c8:	2302      	movs	r3, #2
 80060ca:	73bb      	strb	r3, [r7, #14]
          msg.data[3] = 3;
 80060cc:	2303      	movs	r3, #3
 80060ce:	73fb      	strb	r3, [r7, #15]
          msg.data[4] = 4;
 80060d0:	2304      	movs	r3, #4
 80060d2:	743b      	strb	r3, [r7, #16]
          msg.data[5] = 5;
 80060d4:	2305      	movs	r3, #5
 80060d6:	747b      	strb	r3, [r7, #17]
          msg.data[6] = 6;
 80060d8:	2306      	movs	r3, #6
 80060da:	74bb      	strb	r3, [r7, #18]
          msg.data[7] = cnt++;
 80060dc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 80060e6:	74fb      	strb	r3, [r7, #19]

          if(mcp2515SendMsg(&msg) == true)
 80060e8:	f107 0308 	add.w	r3, r7, #8
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff fa91 	bl	8005614 <mcp2515SendMsg>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <cliMCP2515+0x508>
          {
          	cliPrintf("SendMsg OK\n");
 80060f8:	4861      	ldr	r0, [pc, #388]	; (8006280 <cliMCP2515+0x688>)
 80060fa:	f7fd f8a9 	bl	8003250 <cliPrintf>
 80060fe:	e002      	b.n	8006106 <cliMCP2515+0x50e>
          }
          else
          {
          	cliPrintf("SendMsg Fail\n");
 8006100:	4860      	ldr	r0, [pc, #384]	; (8006284 <cliMCP2515+0x68c>)
 8006102:	f7fd f8a5 	bl	8003250 <cliPrintf>
          }
				}
				if(rx_data == 's')
 8006106:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800610a:	2b73      	cmp	r3, #115	; 0x73
 800610c:	d198      	bne.n	8006040 <cliMCP2515+0x448>
				{
					uint8_t status;

					cliPrintf("Status : ");
 800610e:	485e      	ldr	r0, [pc, #376]	; (8006288 <cliMCP2515+0x690>)
 8006110:	f7fd f89e 	bl	8003250 <cliPrintf>

					status = mcp2515ReadStatus();
 8006114:	f7ff f96e 	bl	80053f4 <mcp2515ReadStatus>
 8006118:	4603      	mov	r3, r0
 800611a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					for(int i=0; i<8; i++)
 800611e:	2300      	movs	r3, #0
 8006120:	637b      	str	r3, [r7, #52]	; 0x34
 8006122:	e00a      	b.n	800613a <cliMCP2515+0x542>
						{
							cliPrintf("1");
						}
						else
						{
							cliPrintf("0");
 8006124:	4859      	ldr	r0, [pc, #356]	; (800628c <cliMCP2515+0x694>)
 8006126:	f7fd f893 	bl	8003250 <cliPrintf>
						}
						status <<= 1;
 800612a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					for(int i=0; i<8; i++)
 8006134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006136:	3301      	adds	r3, #1
 8006138:	637b      	str	r3, [r7, #52]	; 0x34
 800613a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613c:	2b07      	cmp	r3, #7
 800613e:	ddf1      	ble.n	8006124 <cliMCP2515+0x52c>
					}
					cliPrintf("  ErrFlag : 0x%X", mcp2515ReadErrorFlags());
 8006140:	f7ff f97b 	bl	800543a <mcp2515ReadErrorFlags>
 8006144:	4603      	mov	r3, r0
 8006146:	4619      	mov	r1, r3
 8006148:	4851      	ldr	r0, [pc, #324]	; (8006290 <cliMCP2515+0x698>)
 800614a:	f7fd f881 	bl	8003250 <cliPrintf>
					cliPrintf("\n");
 800614e:	484b      	ldr	r0, [pc, #300]	; (800627c <cliMCP2515+0x684>)
 8006150:	f7fd f87e 	bl	8003250 <cliPrintf>
			if(mcp2515ReadMsg(&rx_msg) == true)
 8006154:	e774      	b.n	8006040 <cliMCP2515+0x448>
					break;
 8006156:	bf00      	nop
				}
			}
		}

		ret = true;
 8006158:	2301      	movs	r3, #1
 800615a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	}

	if(args->argc == 1 && args->isStr(0, "show") == true)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	2b01      	cmp	r3, #1
 8006164:	f040 80f7 	bne.w	8006356 <cliMCP2515+0x75e>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	4949      	ldr	r1, [pc, #292]	; (8006294 <cliMCP2515+0x69c>)
 800616e:	2000      	movs	r0, #0
 8006170:	4798      	blx	r3
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80ee 	beq.w	8006356 <cliMCP2515+0x75e>
	  McpMode mode;
	  McpBaud baud;
	  int16_t x;
	  int16_t y;

	  if (lcdIsInit() != true)
 800617a:	f7fe fa91 	bl	80046a0 <lcdIsInit>
 800617e:	4603      	mov	r3, r0
 8006180:	f083 0301 	eor.w	r3, r3, #1
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	f040 8102 	bne.w	8006390 <cliMCP2515+0x798>
	  {
	    return;
	  }

	  if (millis()-pre_time >= (1000/30) && lcdDrawAvailable() == true)
 800618c:	f7fb fcd2 	bl	8001b34 <millis>
 8006190:	4602      	mov	r2, r0
 8006192:	4b41      	ldr	r3, [pc, #260]	; (8006298 <cliMCP2515+0x6a0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b20      	cmp	r3, #32
 800619a:	f240 80dc 	bls.w	8006356 <cliMCP2515+0x75e>
 800619e:	f7fe fae1 	bl	8004764 <lcdDrawAvailable>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80d6 	beq.w	8006356 <cliMCP2515+0x75e>
	  {
	    pre_time = millis();
 80061aa:	f7fb fcc3 	bl	8001b34 <millis>
 80061ae:	4603      	mov	r3, r0
 80061b0:	4a39      	ldr	r2, [pc, #228]	; (8006298 <cliMCP2515+0x6a0>)
 80061b2:	6013      	str	r3, [r2, #0]

	    lcdClearBuffer(black);
 80061b4:	2000      	movs	r0, #0
 80061b6:	f7fe faaf 	bl	8004718 <lcdClearBuffer>
	    lcdSetFont(LCD_FONT_HAN);
 80061ba:	2003      	movs	r0, #3
 80061bc:	f7fe fe30 	bl	8004e20 <lcdSetFont>
	    lcdPrintf(24,16*0, white, " [CAN 통신]");
 80061c0:	4b36      	ldr	r3, [pc, #216]	; (800629c <cliMCP2515+0x6a4>)
 80061c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061c6:	2100      	movs	r1, #0
 80061c8:	2018      	movs	r0, #24
 80061ca:	f7fe fc59 	bl	8004a80 <lcdPrintf>
	    lcdSetFont(LCD_FONT_07x10);
 80061ce:	2000      	movs	r0, #0
 80061d0:	f7fe fe26 	bl	8004e20 <lcdSetFont>

	    mode = mcp2515GetMode();
 80061d4:	f7ff f894 	bl	8005300 <mcp2515GetMode>
 80061d8:	4603      	mov	r3, r0
 80061da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	    baud = mcp2515GetBaud();
 80061de:	f7ff f8fd 	bl	80053dc <mcp2515GetBaud>
 80061e2:	4603      	mov	r3, r0
 80061e4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	    x = 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	84fb      	strh	r3, [r7, #38]	; 0x26
	    y = 18 + 12*0;
 80061ec:	2312      	movs	r3, #18
 80061ee:	84bb      	strh	r3, [r7, #36]	; 0x24
	    switch(mode)
 80061f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d86d      	bhi.n	80062d4 <cliMCP2515+0x6dc>
 80061f8:	a201      	add	r2, pc, #4	; (adr r2, 8006200 <cliMCP2515+0x608>)
 80061fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fe:	bf00      	nop
 8006200:	08006215 	.word	0x08006215
 8006204:	08006229 	.word	0x08006229
 8006208:	0800623d 	.word	0x0800623d
 800620c:	080062ad 	.word	0x080062ad
 8006210:	080062c1 	.word	0x080062c1
	    {
	      case MCP_MODE_NORMAL:
	        lcdPrintf(x, y, white, "Mode : Normal");
 8006214:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	; 0x26
 8006218:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 800621c:	4b20      	ldr	r3, [pc, #128]	; (80062a0 <cliMCP2515+0x6a8>)
 800621e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006222:	f7fe fc2d 	bl	8004a80 <lcdPrintf>
	        break;
 8006226:	e055      	b.n	80062d4 <cliMCP2515+0x6dc>
	      case MCP_MODE_SLEEP:
	        lcdPrintf(x, y, white, "Mode : Sleep");
 8006228:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	; 0x26
 800622c:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 8006230:	4b1c      	ldr	r3, [pc, #112]	; (80062a4 <cliMCP2515+0x6ac>)
 8006232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006236:	f7fe fc23 	bl	8004a80 <lcdPrintf>
	        break;
 800623a:	e04b      	b.n	80062d4 <cliMCP2515+0x6dc>
	      case MCP_MODE_LOOPBACK:
	        lcdPrintf(x, y, white, "Mode : Loopback");
 800623c:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	; 0x26
 8006240:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 8006244:	4b18      	ldr	r3, [pc, #96]	; (80062a8 <cliMCP2515+0x6b0>)
 8006246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800624a:	f7fe fc19 	bl	8004a80 <lcdPrintf>
	        break;
 800624e:	e041      	b.n	80062d4 <cliMCP2515+0x6dc>
 8006250:	0801c054 	.word	0x0801c054
 8006254:	0801c060 	.word	0x0801c060
 8006258:	0801c06c 	.word	0x0801c06c
 800625c:	0801c074 	.word	0x0801c074
 8006260:	0801c080 	.word	0x0801c080
 8006264:	0801c088 	.word	0x0801c088
 8006268:	0801c090 	.word	0x0801c090
 800626c:	0801c09c 	.word	0x0801c09c
 8006270:	0801c0a8 	.word	0x0801c0a8
 8006274:	0801c0b0 	.word	0x0801c0b0
 8006278:	0801c0d0 	.word	0x0801c0d0
 800627c:	0801bce4 	.word	0x0801bce4
 8006280:	0801c0d8 	.word	0x0801c0d8
 8006284:	0801c0e4 	.word	0x0801c0e4
 8006288:	0801c0f4 	.word	0x0801c0f4
 800628c:	0801c100 	.word	0x0801c100
 8006290:	0801c104 	.word	0x0801c104
 8006294:	0801c118 	.word	0x0801c118
 8006298:	20005284 	.word	0x20005284
 800629c:	0801c120 	.word	0x0801c120
 80062a0:	0801c130 	.word	0x0801c130
 80062a4:	0801c140 	.word	0x0801c140
 80062a8:	0801c150 	.word	0x0801c150
	      case MCP_MODE_LISTEN:
	        lcdPrintf(x, y, white, "Mode : Listen");
 80062ac:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	; 0x26
 80062b0:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 80062b4:	4b38      	ldr	r3, [pc, #224]	; (8006398 <cliMCP2515+0x7a0>)
 80062b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062ba:	f7fe fbe1 	bl	8004a80 <lcdPrintf>
	        break;
 80062be:	e009      	b.n	80062d4 <cliMCP2515+0x6dc>
	      case MCP_MODE_CONFIG:
	        lcdPrintf(x, y, white, "Mode : Config");
 80062c0:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	; 0x26
 80062c4:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 80062c8:	4b34      	ldr	r3, [pc, #208]	; (800639c <cliMCP2515+0x7a4>)
 80062ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062ce:	f7fe fbd7 	bl	8004a80 <lcdPrintf>
	        break;
 80062d2:	bf00      	nop
	    }

	    x = 0;
 80062d4:	2300      	movs	r3, #0
 80062d6:	84fb      	strh	r3, [r7, #38]	; 0x26
	    y = 18 + 12*1;
 80062d8:	231e      	movs	r3, #30
 80062da:	84bb      	strh	r3, [r7, #36]	; 0x24
	    switch(baud)
 80062dc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80062e0:	2b03      	cmp	r3, #3
 80062e2:	d833      	bhi.n	800634c <cliMCP2515+0x754>
 80062e4:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <cliMCP2515+0x6f4>)
 80062e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ea:	bf00      	nop
 80062ec:	080062fd 	.word	0x080062fd
 80062f0:	08006311 	.word	0x08006311
 80062f4:	08006325 	.word	0x08006325
 80062f8:	08006339 	.word	0x08006339
	    {
	      case MCP_BAUD_125K:
	        lcdPrintf(x, y, white, "Baud : 125Kbps");
 80062fc:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	; 0x26
 8006300:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 8006304:	4b26      	ldr	r3, [pc, #152]	; (80063a0 <cliMCP2515+0x7a8>)
 8006306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800630a:	f7fe fbb9 	bl	8004a80 <lcdPrintf>
	        break;
 800630e:	e01d      	b.n	800634c <cliMCP2515+0x754>
	      case MCP_BAUD_250K:
	        lcdPrintf(x, y, white, "Baud : 250Kbps");
 8006310:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	; 0x26
 8006314:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 8006318:	4b22      	ldr	r3, [pc, #136]	; (80063a4 <cliMCP2515+0x7ac>)
 800631a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800631e:	f7fe fbaf 	bl	8004a80 <lcdPrintf>
	        break;
 8006322:	e013      	b.n	800634c <cliMCP2515+0x754>
	      case MCP_BAUD_500K:
	        lcdPrintf(x, y, white, "Baud : 500Kbps");
 8006324:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	; 0x26
 8006328:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 800632c:	4b1e      	ldr	r3, [pc, #120]	; (80063a8 <cliMCP2515+0x7b0>)
 800632e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006332:	f7fe fba5 	bl	8004a80 <lcdPrintf>
	        break;
 8006336:	e009      	b.n	800634c <cliMCP2515+0x754>
	      case MCP_BAUD_1000K:
	        lcdPrintf(x, y, white, "Baud : 1Mbps");
 8006338:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	; 0x26
 800633c:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 8006340:	4b1a      	ldr	r3, [pc, #104]	; (80063ac <cliMCP2515+0x7b4>)
 8006342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006346:	f7fe fb9b 	bl	8004a80 <lcdPrintf>
	        break;
 800634a:	bf00      	nop
	    }

	    lcdRequestDraw();
 800634c:	f7fe fa20 	bl	8004790 <lcdRequestDraw>

	    ret = true;
 8006350:	2301      	movs	r3, #1
 8006352:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  }
	}

	if(ret != true)
 8006356:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800635a:	f083 0301 	eor.w	r3, r3, #1
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d016      	beq.n	8006392 <cliMCP2515+0x79a>
	{
    cliPrintf("mcp2515 info\n");
 8006364:	4812      	ldr	r0, [pc, #72]	; (80063b0 <cliMCP2515+0x7b8>)
 8006366:	f7fc ff73 	bl	8003250 <cliPrintf>
    cliPrintf("mcp2515 reg_info\n");
 800636a:	4812      	ldr	r0, [pc, #72]	; (80063b4 <cliMCP2515+0x7bc>)
 800636c:	f7fc ff70 	bl	8003250 <cliPrintf>
    cliPrintf("mcp2515 read_reg addr length\n");
 8006370:	4811      	ldr	r0, [pc, #68]	; (80063b8 <cliMCP2515+0x7c0>)
 8006372:	f7fc ff6d 	bl	8003250 <cliPrintf>
    cliPrintf("mcp2515 set_baud 125k:250k:500k:1000k\n");
 8006376:	4811      	ldr	r0, [pc, #68]	; (80063bc <cliMCP2515+0x7c4>)
 8006378:	f7fc ff6a 	bl	8003250 <cliPrintf>
    cliPrintf("mcp2515 set_mode normal:loopback:listen:config\n");
 800637c:	4810      	ldr	r0, [pc, #64]	; (80063c0 <cliMCP2515+0x7c8>)
 800637e:	f7fc ff67 	bl	8003250 <cliPrintf>
    cliPrintf("mcp2515 test\n");
 8006382:	4810      	ldr	r0, [pc, #64]	; (80063c4 <cliMCP2515+0x7cc>)
 8006384:	f7fc ff64 	bl	8003250 <cliPrintf>
    cliPrintf("mcp2515 show\n");
 8006388:	480f      	ldr	r0, [pc, #60]	; (80063c8 <cliMCP2515+0x7d0>)
 800638a:	f7fc ff61 	bl	8003250 <cliPrintf>
 800638e:	e000      	b.n	8006392 <cliMCP2515+0x79a>
	    return;
 8006390:	bf00      	nop
	}
}
 8006392:	3750      	adds	r7, #80	; 0x50
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	0801c160 	.word	0x0801c160
 800639c:	0801c170 	.word	0x0801c170
 80063a0:	0801c180 	.word	0x0801c180
 80063a4:	0801c190 	.word	0x0801c190
 80063a8:	0801c1a0 	.word	0x0801c1a0
 80063ac:	0801c1b0 	.word	0x0801c1b0
 80063b0:	0801c1c0 	.word	0x0801c1c0
 80063b4:	0801c1d0 	.word	0x0801c1d0
 80063b8:	0801c1e4 	.word	0x0801c1e4
 80063bc:	0801c204 	.word	0x0801c204
 80063c0:	0801c22c 	.word	0x0801c22c
 80063c4:	0801c25c 	.word	0x0801c25c
 80063c8:	0801c26c 	.word	0x0801c26c

080063cc <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
  bool ret = false;
 80063d2:	2300      	movs	r3, #0
 80063d4:	71fb      	strb	r3, [r7, #7]


  hsd.Instance            = SDIO;
 80063d6:	4b20      	ldr	r3, [pc, #128]	; (8006458 <sdInit+0x8c>)
 80063d8:	4a20      	ldr	r2, [pc, #128]	; (800645c <sdInit+0x90>)
 80063da:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge      = SDIO_CLOCK_EDGE_RISING;
 80063dc:	4b1e      	ldr	r3, [pc, #120]	; (8006458 <sdInit+0x8c>)
 80063de:	2200      	movs	r2, #0
 80063e0:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass    = SDIO_CLOCK_BYPASS_DISABLE;
 80063e2:	4b1d      	ldr	r3, [pc, #116]	; (8006458 <sdInit+0x8c>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80063e8:	4b1b      	ldr	r3, [pc, #108]	; (8006458 <sdInit+0x8c>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide        = SDIO_BUS_WIDE_1B;
 80063ee:	4b1a      	ldr	r3, [pc, #104]	; (8006458 <sdInit+0x8c>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80063f4:	4b18      	ldr	r3, [pc, #96]	; (8006458 <sdInit+0x8c>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv       = SDIO_TRANSFER_CLK_DIV;
 80063fa:	4b17      	ldr	r3, [pc, #92]	; (8006458 <sdInit+0x8c>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	619a      	str	r2, [r3, #24]


  is_detected = false;
 8006400:	4b17      	ldr	r3, [pc, #92]	; (8006460 <sdInit+0x94>)
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8006406:	2000      	movs	r0, #0
 8006408:	f7fd fbb8 	bl	8003b7c <gpioPinRead>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <sdInit+0x4c>
  {
    is_detected = true;
 8006412:	4b13      	ldr	r3, [pc, #76]	; (8006460 <sdInit+0x94>)
 8006414:	2201      	movs	r2, #1
 8006416:	701a      	strb	r2, [r3, #0]
  }

  if (is_detected == true)
 8006418:	4b11      	ldr	r3, [pc, #68]	; (8006460 <sdInit+0x94>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00f      	beq.n	8006440 <sdInit+0x74>
  {
    if (HAL_SD_Init(&hsd) == HAL_OK)
 8006420:	480d      	ldr	r0, [pc, #52]	; (8006458 <sdInit+0x8c>)
 8006422:	f007 f821 	bl	800d468 <HAL_SD_Init>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d109      	bne.n	8006440 <sdInit+0x74>
    {
      if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 800642c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006430:	4809      	ldr	r0, [pc, #36]	; (8006458 <sdInit+0x8c>)
 8006432:	f007 fdfb 	bl	800e02c <HAL_SD_ConfigWideBusOperation>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <sdInit+0x74>
      {
        ret = true;
 800643c:	2301      	movs	r3, #1
 800643e:	71fb      	strb	r3, [r7, #7]
      }
    }
  }

  is_init = ret;
 8006440:	4a08      	ldr	r2, [pc, #32]	; (8006464 <sdInit+0x98>)
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	7013      	strb	r3, [r2, #0]


#ifdef _USE_HW_CLI
  cliAdd("sd", cliSd);
 8006446:	4908      	ldr	r1, [pc, #32]	; (8006468 <sdInit+0x9c>)
 8006448:	4808      	ldr	r0, [pc, #32]	; (800646c <sdInit+0xa0>)
 800644a:	f7fd f811 	bl	8003470 <cliAdd>
#endif

  return ret;
 800644e:	79fb      	ldrb	r3, [r7, #7]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	2000039c 	.word	0x2000039c
 800645c:	40012c00 	.word	0x40012c00
 8006460:	20005289 	.word	0x20005289
 8006464:	20005288 	.word	0x20005288
 8006468:	08006959 	.word	0x08006959
 800646c:	0801c27c 	.word	0x0801c27c

08006470 <sdIsInit>:

  return ret;
}

bool sdIsInit(void)
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  return is_init;
 8006474:	4b03      	ldr	r3, [pc, #12]	; (8006484 <sdIsInit+0x14>)
 8006476:	781b      	ldrb	r3, [r3, #0]
}
 8006478:	4618      	mov	r0, r3
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	20005288 	.word	0x20005288

08006488 <sdIsDetected>:

bool sdIsDetected(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 800648c:	2000      	movs	r0, #0
 800648e:	f7fd fb75 	bl	8003b7c <gpioPinRead>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d003      	beq.n	80064a0 <sdIsDetected+0x18>
  {
    is_detected = true;
 8006498:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <sdIsDetected+0x28>)
 800649a:	2201      	movs	r2, #1
 800649c:	701a      	strb	r2, [r3, #0]
 800649e:	e002      	b.n	80064a6 <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 80064a0:	4b03      	ldr	r3, [pc, #12]	; (80064b0 <sdIsDetected+0x28>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 80064a6:	4b02      	ldr	r3, [pc, #8]	; (80064b0 <sdIsDetected+0x28>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20005289 	.word	0x20005289

080064b4 <sdGetInfo>:

bool sdGetInfo(sd_info_t *p_info)
{
 80064b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064b8:	b08c      	sub	sp, #48	; 0x30
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80064be:	2300      	movs	r3, #0
 80064c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 80064c8:	4b24      	ldr	r3, [pc, #144]	; (800655c <sdGetInfo+0xa8>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d03d      	beq.n	800654c <sdGetInfo+0x98>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 80064d0:	f107 0308 	add.w	r3, r7, #8
 80064d4:	4619      	mov	r1, r3
 80064d6:	4822      	ldr	r0, [pc, #136]	; (8006560 <sdGetInfo+0xac>)
 80064d8:	f007 fd7c 	bl	800dfd4 <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f2:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 8006500:	6a3a      	ldr	r2, [r7, #32]
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 8006506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650a:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t) p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	2200      	movs	r2, #0
 8006512:	469a      	mov	sl, r3
 8006514:	4693      	mov	fp, r2
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	2200      	movs	r2, #0
 800651c:	4698      	mov	r8, r3
 800651e:	4691      	mov	r9, r2
 8006520:	fb08 f20b 	mul.w	r2, r8, fp
 8006524:	fb0a f309 	mul.w	r3, sl, r9
 8006528:	4413      	add	r3, r2
 800652a:	fbaa 4508 	umull	r4, r5, sl, r8
 800652e:	442b      	add	r3, r5
 8006530:	461d      	mov	r5, r3
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	f04f 0300 	mov.w	r3, #0
 800653a:	0d22      	lsrs	r2, r4, #20
 800653c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8006540:	0d2b      	lsrs	r3, r5, #20
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	621a      	str	r2, [r3, #32]
    ret = true;
 8006546:	2301      	movs	r3, #1
 8006548:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 800654c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006550:	4618      	mov	r0, r3
 8006552:	3730      	adds	r7, #48	; 0x30
 8006554:	46bd      	mov	sp, r7
 8006556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800655a:	bf00      	nop
 800655c:	20005288 	.word	0x20005288
 8006560:	2000039c 	.word	0x2000039c

08006564 <sdIsBusy>:

bool sdIsBusy(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 800656a:	4808      	ldr	r0, [pc, #32]	; (800658c <sdIsBusy+0x28>)
 800656c:	f007 fdf8 	bl	800e160 <HAL_SD_GetCardState>
 8006570:	4603      	mov	r3, r0
 8006572:	2b04      	cmp	r3, #4
 8006574:	d102      	bne.n	800657c <sdIsBusy+0x18>
  {
    is_busy = false;
 8006576:	2300      	movs	r3, #0
 8006578:	71fb      	strb	r3, [r7, #7]
 800657a:	e001      	b.n	8006580 <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 800657c:	2301      	movs	r3, #1
 800657e:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 8006580:	79fb      	ldrb	r3, [r7, #7]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	2000039c 	.word	0x2000039c

08006590 <sdIsReady>:

bool sdIsReady(uint32_t timeout)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t pre_time;

  pre_time = millis();
 8006598:	f7fb facc 	bl	8001b34 <millis>
 800659c:	60f8      	str	r0, [r7, #12]

  while(millis() - pre_time < timeout)
 800659e:	e009      	b.n	80065b4 <sdIsReady+0x24>
  {
    if (sdIsBusy() == false)
 80065a0:	f7ff ffe0 	bl	8006564 <sdIsBusy>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f083 0301 	eor.w	r3, r3, #1
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <sdIsReady+0x24>
    {
      return true;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e008      	b.n	80065c6 <sdIsReady+0x36>
  while(millis() - pre_time < timeout)
 80065b4:	f7fb fabe 	bl	8001b34 <millis>
 80065b8:	4602      	mov	r2, r0
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d8ed      	bhi.n	80065a0 <sdIsReady+0x10>
    }
  }

  return false;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <sdReadBlocks>:

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
  bool ret = false;
 80065de:	2300      	movs	r3, #0
 80065e0:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 80065e2:	4b1e      	ldr	r3, [pc, #120]	; (800665c <sdReadBlocks+0x8c>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	68b9      	ldr	r1, [r7, #8]
 80065ee:	481c      	ldr	r0, [pc, #112]	; (8006660 <sdReadBlocks+0x90>)
 80065f0:	f006 ffea 	bl	800d5c8 <HAL_SD_ReadBlocks_DMA>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d12a      	bne.n	8006650 <sdReadBlocks+0x80>
  {

    pre_time = millis();
 80065fa:	f7fb fa9b 	bl	8001b34 <millis>
 80065fe:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 8006600:	e007      	b.n	8006612 <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 8006602:	f7fb fa97 	bl	8001b34 <millis>
 8006606:	4602      	mov	r2, r0
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d908      	bls.n	8006624 <sdReadBlocks+0x54>
    while(is_rx_done == false)
 8006612:	4b12      	ldr	r3, [pc, #72]	; (800665c <sdReadBlocks+0x8c>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	f083 0301 	eor.w	r3, r3, #1
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1ef      	bne.n	8006602 <sdReadBlocks+0x32>
 8006622:	e00d      	b.n	8006640 <sdReadBlocks+0x70>
      {
        break;
 8006624:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 8006626:	e00b      	b.n	8006640 <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 8006628:	f7fb fa84 	bl	8001b34 <millis>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d803      	bhi.n	8006640 <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 8006638:	4b08      	ldr	r3, [pc, #32]	; (800665c <sdReadBlocks+0x8c>)
 800663a:	2200      	movs	r2, #0
 800663c:	701a      	strb	r2, [r3, #0]
        break;
 800663e:	e004      	b.n	800664a <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 8006640:	f7ff ff90 	bl	8006564 <sdIsBusy>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1ee      	bne.n	8006628 <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 800664a:	4b04      	ldr	r3, [pc, #16]	; (800665c <sdReadBlocks+0x8c>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006650:	7dfb      	ldrb	r3, [r7, #23]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	2000528a 	.word	0x2000528a
 8006660:	2000039c 	.word	0x2000039c

08006664 <sdWriteBlocks>:

bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8006672:	2300      	movs	r3, #0
 8006674:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_tx_done = false;
 8006676:	4b1f      	ldr	r3, [pc, #124]	; (80066f4 <sdWriteBlocks+0x90>)
 8006678:	2200      	movs	r2, #0
 800667a:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	481d      	ldr	r0, [pc, #116]	; (80066f8 <sdWriteBlocks+0x94>)
 8006684:	f007 f882 	bl	800d78c <HAL_SD_WriteBlocks_DMA>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d12d      	bne.n	80066ea <sdWriteBlocks+0x86>
  {
    pre_time = millis();
 800668e:	f7fb fa51 	bl	8001b34 <millis>
 8006692:	6138      	str	r0, [r7, #16]
    while(is_tx_done == false)
 8006694:	e007      	b.n	80066a6 <sdWriteBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 8006696:	f7fb fa4d 	bl	8001b34 <millis>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d908      	bls.n	80066b8 <sdWriteBlocks+0x54>
    while(is_tx_done == false)
 80066a6:	4b13      	ldr	r3, [pc, #76]	; (80066f4 <sdWriteBlocks+0x90>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f083 0301 	eor.w	r3, r3, #1
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1ef      	bne.n	8006696 <sdWriteBlocks+0x32>
 80066b6:	e000      	b.n	80066ba <sdWriteBlocks+0x56>
      {
        break;
 80066b8:	bf00      	nop
      }
    }
    pre_time = millis();
 80066ba:	f7fb fa3b 	bl	8001b34 <millis>
 80066be:	6138      	str	r0, [r7, #16]
    while(sdIsBusy() == true)
 80066c0:	e00b      	b.n	80066da <sdWriteBlocks+0x76>
    {
      if (millis()-pre_time >= timeout_ms)
 80066c2:	f7fb fa37 	bl	8001b34 <millis>
 80066c6:	4602      	mov	r2, r0
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d803      	bhi.n	80066da <sdWriteBlocks+0x76>
      {
        is_tx_done = false;
 80066d2:	4b08      	ldr	r3, [pc, #32]	; (80066f4 <sdWriteBlocks+0x90>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	701a      	strb	r2, [r3, #0]
        break;
 80066d8:	e004      	b.n	80066e4 <sdWriteBlocks+0x80>
    while(sdIsBusy() == true)
 80066da:	f7ff ff43 	bl	8006564 <sdIsBusy>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1ee      	bne.n	80066c2 <sdWriteBlocks+0x5e>
      }
    }
    ret = is_tx_done;
 80066e4:	4b03      	ldr	r3, [pc, #12]	; (80066f4 <sdWriteBlocks+0x90>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80066ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	2000528b 	.word	0x2000528b
 80066f8:	2000039c 	.word	0x2000039c

080066fc <HAL_SD_RxCpltCallback>:




void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 8006704:	4b04      	ldr	r3, [pc, #16]	; (8006718 <HAL_SD_RxCpltCallback+0x1c>)
 8006706:	2201      	movs	r2, #1
 8006708:	701a      	strb	r2, [r3, #0]
}
 800670a:	bf00      	nop
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	2000528a 	.word	0x2000528a

0800671c <HAL_SD_TxCpltCallback>:

void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 8006724:	4b04      	ldr	r3, [pc, #16]	; (8006738 <HAL_SD_TxCpltCallback+0x1c>)
 8006726:	2201      	movs	r2, #1
 8006728:	701a      	strb	r2, [r3, #0]
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	2000528b 	.word	0x2000528b

0800673c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08c      	sub	sp, #48	; 0x30
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006744:	f107 031c 	add.w	r3, r7, #28
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	605a      	str	r2, [r3, #4]
 800674e:	609a      	str	r2, [r3, #8]
 8006750:	60da      	str	r2, [r3, #12]
 8006752:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a77      	ldr	r2, [pc, #476]	; (8006938 <HAL_SD_MspInit+0x1fc>)
 800675a:	4293      	cmp	r3, r2
 800675c:	f040 80e8 	bne.w	8006930 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8006760:	2300      	movs	r3, #0
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	4b75      	ldr	r3, [pc, #468]	; (800693c <HAL_SD_MspInit+0x200>)
 8006766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006768:	4a74      	ldr	r2, [pc, #464]	; (800693c <HAL_SD_MspInit+0x200>)
 800676a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800676e:	6313      	str	r3, [r2, #48]	; 0x30
 8006770:	4b72      	ldr	r3, [pc, #456]	; (800693c <HAL_SD_MspInit+0x200>)
 8006772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800677c:	2300      	movs	r3, #0
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	4b6e      	ldr	r3, [pc, #440]	; (800693c <HAL_SD_MspInit+0x200>)
 8006782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006784:	4a6d      	ldr	r2, [pc, #436]	; (800693c <HAL_SD_MspInit+0x200>)
 8006786:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800678a:	6453      	str	r3, [r2, #68]	; 0x44
 800678c:	4b6b      	ldr	r3, [pc, #428]	; (800693c <HAL_SD_MspInit+0x200>)
 800678e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006798:	2300      	movs	r3, #0
 800679a:	613b      	str	r3, [r7, #16]
 800679c:	4b67      	ldr	r3, [pc, #412]	; (800693c <HAL_SD_MspInit+0x200>)
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	4a66      	ldr	r2, [pc, #408]	; (800693c <HAL_SD_MspInit+0x200>)
 80067a2:	f043 0301 	orr.w	r3, r3, #1
 80067a6:	6313      	str	r3, [r2, #48]	; 0x30
 80067a8:	4b64      	ldr	r3, [pc, #400]	; (800693c <HAL_SD_MspInit+0x200>)
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	613b      	str	r3, [r7, #16]
 80067b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	4b60      	ldr	r3, [pc, #384]	; (800693c <HAL_SD_MspInit+0x200>)
 80067ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067bc:	4a5f      	ldr	r2, [pc, #380]	; (800693c <HAL_SD_MspInit+0x200>)
 80067be:	f043 0302 	orr.w	r3, r3, #2
 80067c2:	6313      	str	r3, [r2, #48]	; 0x30
 80067c4:	4b5d      	ldr	r3, [pc, #372]	; (800693c <HAL_SD_MspInit+0x200>)
 80067c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80067d0:	f44f 7350 	mov.w	r3, #832	; 0x340
 80067d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067d6:	2302      	movs	r3, #2
 80067d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067da:	2301      	movs	r3, #1
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80067de:	2301      	movs	r3, #1
 80067e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80067e2:	230c      	movs	r3, #12
 80067e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067e6:	f107 031c 	add.w	r3, r7, #28
 80067ea:	4619      	mov	r1, r3
 80067ec:	4854      	ldr	r0, [pc, #336]	; (8006940 <HAL_SD_MspInit+0x204>)
 80067ee:	f001 fe19 	bl	8008424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 80067f2:	f248 03a0 	movw	r3, #32928	; 0x80a0
 80067f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067f8:	2302      	movs	r3, #2
 80067fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067fc:	2301      	movs	r3, #1
 80067fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006800:	2301      	movs	r3, #1
 8006802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006804:	230c      	movs	r3, #12
 8006806:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006808:	f107 031c 	add.w	r3, r7, #28
 800680c:	4619      	mov	r1, r3
 800680e:	484d      	ldr	r0, [pc, #308]	; (8006944 <HAL_SD_MspInit+0x208>)
 8006810:	f001 fe08 	bl	8008424 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006814:	4b4c      	ldr	r3, [pc, #304]	; (8006948 <HAL_SD_MspInit+0x20c>)
 8006816:	4a4d      	ldr	r2, [pc, #308]	; (800694c <HAL_SD_MspInit+0x210>)
 8006818:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800681a:	4b4b      	ldr	r3, [pc, #300]	; (8006948 <HAL_SD_MspInit+0x20c>)
 800681c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006820:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006822:	4b49      	ldr	r3, [pc, #292]	; (8006948 <HAL_SD_MspInit+0x20c>)
 8006824:	2200      	movs	r2, #0
 8006826:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006828:	4b47      	ldr	r3, [pc, #284]	; (8006948 <HAL_SD_MspInit+0x20c>)
 800682a:	2200      	movs	r2, #0
 800682c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800682e:	4b46      	ldr	r3, [pc, #280]	; (8006948 <HAL_SD_MspInit+0x20c>)
 8006830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006834:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006836:	4b44      	ldr	r3, [pc, #272]	; (8006948 <HAL_SD_MspInit+0x20c>)
 8006838:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800683c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800683e:	4b42      	ldr	r3, [pc, #264]	; (8006948 <HAL_SD_MspInit+0x20c>)
 8006840:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006844:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006846:	4b40      	ldr	r3, [pc, #256]	; (8006948 <HAL_SD_MspInit+0x20c>)
 8006848:	2220      	movs	r2, #32
 800684a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800684c:	4b3e      	ldr	r3, [pc, #248]	; (8006948 <HAL_SD_MspInit+0x20c>)
 800684e:	2200      	movs	r2, #0
 8006850:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006852:	4b3d      	ldr	r3, [pc, #244]	; (8006948 <HAL_SD_MspInit+0x20c>)
 8006854:	2204      	movs	r2, #4
 8006856:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006858:	4b3b      	ldr	r3, [pc, #236]	; (8006948 <HAL_SD_MspInit+0x20c>)
 800685a:	2203      	movs	r2, #3
 800685c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800685e:	4b3a      	ldr	r3, [pc, #232]	; (8006948 <HAL_SD_MspInit+0x20c>)
 8006860:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006864:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006866:	4b38      	ldr	r3, [pc, #224]	; (8006948 <HAL_SD_MspInit+0x20c>)
 8006868:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800686c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800686e:	4836      	ldr	r0, [pc, #216]	; (8006948 <HAL_SD_MspInit+0x20c>)
 8006870:	f000 fee6 	bl	8007640 <HAL_DMA_Init>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 800687a:	f7fa ff01 	bl	8001680 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a31      	ldr	r2, [pc, #196]	; (8006948 <HAL_SD_MspInit+0x20c>)
 8006882:	641a      	str	r2, [r3, #64]	; 0x40
 8006884:	4a30      	ldr	r2, [pc, #192]	; (8006948 <HAL_SD_MspInit+0x20c>)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800688a:	4b31      	ldr	r3, [pc, #196]	; (8006950 <HAL_SD_MspInit+0x214>)
 800688c:	4a31      	ldr	r2, [pc, #196]	; (8006954 <HAL_SD_MspInit+0x218>)
 800688e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006890:	4b2f      	ldr	r3, [pc, #188]	; (8006950 <HAL_SD_MspInit+0x214>)
 8006892:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006896:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006898:	4b2d      	ldr	r3, [pc, #180]	; (8006950 <HAL_SD_MspInit+0x214>)
 800689a:	2240      	movs	r2, #64	; 0x40
 800689c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800689e:	4b2c      	ldr	r3, [pc, #176]	; (8006950 <HAL_SD_MspInit+0x214>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80068a4:	4b2a      	ldr	r3, [pc, #168]	; (8006950 <HAL_SD_MspInit+0x214>)
 80068a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068aa:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80068ac:	4b28      	ldr	r3, [pc, #160]	; (8006950 <HAL_SD_MspInit+0x214>)
 80068ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068b2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80068b4:	4b26      	ldr	r3, [pc, #152]	; (8006950 <HAL_SD_MspInit+0x214>)
 80068b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80068ba:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80068bc:	4b24      	ldr	r3, [pc, #144]	; (8006950 <HAL_SD_MspInit+0x214>)
 80068be:	2220      	movs	r2, #32
 80068c0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80068c2:	4b23      	ldr	r3, [pc, #140]	; (8006950 <HAL_SD_MspInit+0x214>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80068c8:	4b21      	ldr	r3, [pc, #132]	; (8006950 <HAL_SD_MspInit+0x214>)
 80068ca:	2204      	movs	r2, #4
 80068cc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80068ce:	4b20      	ldr	r3, [pc, #128]	; (8006950 <HAL_SD_MspInit+0x214>)
 80068d0:	2203      	movs	r2, #3
 80068d2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80068d4:	4b1e      	ldr	r3, [pc, #120]	; (8006950 <HAL_SD_MspInit+0x214>)
 80068d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80068da:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80068dc:	4b1c      	ldr	r3, [pc, #112]	; (8006950 <HAL_SD_MspInit+0x214>)
 80068de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80068e4:	481a      	ldr	r0, [pc, #104]	; (8006950 <HAL_SD_MspInit+0x214>)
 80068e6:	f000 feab 	bl	8007640 <HAL_DMA_Init>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 80068f0:	f7fa fec6 	bl	8001680 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a16      	ldr	r2, [pc, #88]	; (8006950 <HAL_SD_MspInit+0x214>)
 80068f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80068fa:	4a15      	ldr	r2, [pc, #84]	; (8006950 <HAL_SD_MspInit+0x214>)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 4, 0);
 8006900:	2200      	movs	r2, #0
 8006902:	2104      	movs	r1, #4
 8006904:	2031      	movs	r0, #49	; 0x31
 8006906:	f000 fe56 	bl	80075b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800690a:	2031      	movs	r0, #49	; 0x31
 800690c:	f000 fe6f 	bl	80075ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 8006910:	2200      	movs	r2, #0
 8006912:	2103      	movs	r1, #3
 8006914:	203b      	movs	r0, #59	; 0x3b
 8006916:	f000 fe4e 	bl	80075b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800691a:	203b      	movs	r0, #59	; 0x3b
 800691c:	f000 fe67 	bl	80075ee <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 8006920:	2200      	movs	r2, #0
 8006922:	2103      	movs	r1, #3
 8006924:	2045      	movs	r0, #69	; 0x45
 8006926:	f000 fe46 	bl	80075b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800692a:	2045      	movs	r0, #69	; 0x45
 800692c:	f000 fe5f 	bl	80075ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8006930:	bf00      	nop
 8006932:	3730      	adds	r7, #48	; 0x30
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	40012c00 	.word	0x40012c00
 800693c:	40023800 	.word	0x40023800
 8006940:	40020000 	.word	0x40020000
 8006944:	40020400 	.word	0x40020400
 8006948:	20000420 	.word	0x20000420
 800694c:	40026458 	.word	0x40026458
 8006950:	20000480 	.word	0x20000480
 8006954:	400264a0 	.word	0x400264a0

08006958 <cliSd>:



#ifdef _USE_HW_CLI
void cliSd(cli_args_t *args)
{
 8006958:	b590      	push	{r4, r7, lr}
 800695a:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800695e:	af00      	add	r7, sp, #0
 8006960:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006964:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8006968:	6018      	str	r0, [r3, #0]
  bool ret = false;
 800696a:	2300      	movs	r3, #0
 800696c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8006970:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006974:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	2b01      	cmp	r3, #1
 800697e:	f040 8094 	bne.w	8006aaa <cliSd+0x152>
 8006982:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006986:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	4979      	ldr	r1, [pc, #484]	; (8006b74 <cliSd+0x21c>)
 8006990:	2000      	movs	r0, #0
 8006992:	4798      	blx	r3
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 8087 	beq.w	8006aaa <cliSd+0x152>
  {
    sd_info_t sd_info;

    cliPrintf("sd init      : %d\n", is_init);
 800699c:	4b76      	ldr	r3, [pc, #472]	; (8006b78 <cliSd+0x220>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	4619      	mov	r1, r3
 80069a2:	4876      	ldr	r0, [pc, #472]	; (8006b7c <cliSd+0x224>)
 80069a4:	f7fc fc54 	bl	8003250 <cliPrintf>
    cliPrintf("sd connected : %d\n", is_detected);
 80069a8:	4b75      	ldr	r3, [pc, #468]	; (8006b80 <cliSd+0x228>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	4619      	mov	r1, r3
 80069ae:	4875      	ldr	r0, [pc, #468]	; (8006b84 <cliSd+0x22c>)
 80069b0:	f7fc fc4e 	bl	8003250 <cliPrintf>

    if (is_init == true)
 80069b4:	4b70      	ldr	r3, [pc, #448]	; (8006b78 <cliSd+0x220>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d073      	beq.n	8006aa4 <cliSd+0x14c>
    {
      if (sdGetInfo(&sd_info) == true)
 80069bc:	f107 030c 	add.w	r3, r7, #12
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7ff fd77 	bl	80064b4 <sdGetInfo>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d06b      	beq.n	8006aa4 <cliSd+0x14c>
      {
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 80069cc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80069d0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4619      	mov	r1, r3
 80069d8:	486b      	ldr	r0, [pc, #428]	; (8006b88 <cliSd+0x230>)
 80069da:	f7fc fc39 	bl	8003250 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 80069de:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80069e2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4619      	mov	r1, r3
 80069ea:	4868      	ldr	r0, [pc, #416]	; (8006b8c <cliSd+0x234>)
 80069ec:	f7fc fc30 	bl	8003250 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 80069f0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80069f4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	4619      	mov	r1, r3
 80069fc:	4864      	ldr	r0, [pc, #400]	; (8006b90 <cliSd+0x238>)
 80069fe:	f7fc fc27 	bl	8003250 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 8006a02:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006a06:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4861      	ldr	r0, [pc, #388]	; (8006b94 <cliSd+0x23c>)
 8006a10:	f7fc fc1e 	bl	8003250 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 8006a14:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006a18:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	485d      	ldr	r0, [pc, #372]	; (8006b98 <cliSd+0x240>)
 8006a22:	f7fc fc15 	bl	8003250 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 8006a26:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006a2a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	4619      	mov	r1, r3
 8006a32:	485a      	ldr	r0, [pc, #360]	; (8006b9c <cliSd+0x244>)
 8006a34:	f7fc fc0c 	bl	8003250 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 8006a38:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006a3c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	4619      	mov	r1, r3
 8006a44:	4856      	ldr	r0, [pc, #344]	; (8006ba0 <cliSd+0x248>)
 8006a46:	f7fc fc03 	bl	8003250 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 8006a4a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006a4e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	4619      	mov	r1, r3
 8006a56:	4853      	ldr	r0, [pc, #332]	; (8006ba4 <cliSd+0x24c>)
 8006a58:	f7fc fbfa 	bl	8003250 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 8006a5c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006a60:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8006a64:	6a18      	ldr	r0, [r3, #32]
 8006a66:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006a6a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	0a9c      	lsrs	r4, r3, #10
 8006a72:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006a76:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8006a7a:	6a1a      	ldr	r2, [r3, #32]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	0a99      	lsrs	r1, r3, #10
 8006a86:	4b48      	ldr	r3, [pc, #288]	; (8006ba8 <cliSd+0x250>)
 8006a88:	fba3 2301 	umull	r2, r3, r3, r1
 8006a8c:	08da      	lsrs	r2, r3, #3
 8006a8e:	4613      	mov	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	1aca      	subs	r2, r1, r3
 8006a98:	4613      	mov	r3, r2
 8006a9a:	4622      	mov	r2, r4
 8006a9c:	4601      	mov	r1, r0
 8006a9e:	4843      	ldr	r0, [pc, #268]	; (8006bac <cliSd+0x254>)
 8006aa0:	f7fc fbd6 	bl	8003250 <cliPrintf>
      }
    }
    ret = true;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8006aaa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006aae:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d146      	bne.n	8006b48 <cliSd+0x1f0>
 8006aba:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006abe:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	493a      	ldr	r1, [pc, #232]	; (8006bb0 <cliSd+0x258>)
 8006ac8:	2000      	movs	r0, #0
 8006aca:	4798      	blx	r3
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d03a      	beq.n	8006b48 <cliSd+0x1f0>
  {
    uint32_t number;
    uint32_t buf[512/4];

    number = args->getData(1);
 8006ad2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006ad6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2001      	movs	r0, #1
 8006ae0:	4798      	blx	r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 8006ae8:	f107 010c 	add.w	r1, r7, #12
 8006aec:	2364      	movs	r3, #100	; 0x64
 8006aee:	2201      	movs	r2, #1
 8006af0:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8006af4:	f7ff fd6c 	bl	80065d0 <sdReadBlocks>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01e      	beq.n	8006b3c <cliSd+0x1e4>
    {
      for (int i=0; i<512/4; i++)
 8006afe:	2300      	movs	r3, #0
 8006b00:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8006b04:	e015      	b.n	8006b32 <cliSd+0x1da>
      {
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 8006b06:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006b0a:	0099      	lsls	r1, r3, #2
 8006b0c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006b10:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8006b14:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8006b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1c:	460a      	mov	r2, r1
 8006b1e:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8006b22:	4824      	ldr	r0, [pc, #144]	; (8006bb4 <cliSd+0x25c>)
 8006b24:	f7fc fb94 	bl	8003250 <cliPrintf>
      for (int i=0; i<512/4; i++)
 8006b28:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8006b32:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006b36:	2b7f      	cmp	r3, #127	; 0x7f
 8006b38:	dde5      	ble.n	8006b06 <cliSd+0x1ae>
 8006b3a:	e002      	b.n	8006b42 <cliSd+0x1ea>
      }
    }
    else
    {
      cliPrintf("sdRead Fail\n");
 8006b3c:	481e      	ldr	r0, [pc, #120]	; (8006bb8 <cliSd+0x260>)
 8006b3e:	f7fc fb87 	bl	8003250 <cliPrintf>
    }

    ret = true;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (ret != true)
 8006b48:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006b4c:	f083 0301 	eor.w	r3, r3, #1
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d009      	beq.n	8006b6a <cliSd+0x212>
  {
    cliPrintf("sd info\n");
 8006b56:	4819      	ldr	r0, [pc, #100]	; (8006bbc <cliSd+0x264>)
 8006b58:	f7fc fb7a 	bl	8003250 <cliPrintf>

    if (is_init == true)
 8006b5c:	4b06      	ldr	r3, [pc, #24]	; (8006b78 <cliSd+0x220>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <cliSd+0x212>
    {
      cliPrintf("sd read block_number\n");
 8006b64:	4816      	ldr	r0, [pc, #88]	; (8006bc0 <cliSd+0x268>)
 8006b66:	f7fc fb73 	bl	8003250 <cliPrintf>
    }
  }
}
 8006b6a:	bf00      	nop
 8006b6c:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd90      	pop	{r4, r7, pc}
 8006b74:	0801c280 	.word	0x0801c280
 8006b78:	20005288 	.word	0x20005288
 8006b7c:	0801c288 	.word	0x0801c288
 8006b80:	20005289 	.word	0x20005289
 8006b84:	0801c29c 	.word	0x0801c29c
 8006b88:	0801c2b0 	.word	0x0801c2b0
 8006b8c:	0801c2d0 	.word	0x0801c2d0
 8006b90:	0801c2f0 	.word	0x0801c2f0
 8006b94:	0801c310 	.word	0x0801c310
 8006b98:	0801c330 	.word	0x0801c330
 8006b9c:	0801c350 	.word	0x0801c350
 8006ba0:	0801c370 	.word	0x0801c370
 8006ba4:	0801c390 	.word	0x0801c390
 8006ba8:	cccccccd 	.word	0xcccccccd
 8006bac:	0801c3b0 	.word	0x0801c3b0
 8006bb0:	0801c3dc 	.word	0x0801c3dc
 8006bb4:	0801c3e4 	.word	0x0801c3e4
 8006bb8:	0801c3f8 	.word	0x0801c3f8
 8006bbc:	0801c408 	.word	0x0801c408
 8006bc0:	0801c414 	.word	0x0801c414

08006bc4 <spiInit>:
SPI_HandleTypeDef hspi4;
DMA_HandleTypeDef hdma_spi4_tx;


bool spiInit(void)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
  bool ret = true;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	70fb      	strb	r3, [r7, #3]


  for (int i=0; i<SPI_MAX_CH; i++)
 8006bce:	2300      	movs	r3, #0
 8006bd0:	607b      	str	r3, [r7, #4]
 8006bd2:	e03d      	b.n	8006c50 <spiInit+0x8c>
  {
    spi_tbl[i].is_open = false;
 8006bd4:	4923      	ldr	r1, [pc, #140]	; (8006c64 <spiInit+0xa0>)
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	440b      	add	r3, r1
 8006be2:	2200      	movs	r2, #0
 8006be4:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 8006be6:	491f      	ldr	r1, [pc, #124]	; (8006c64 <spiInit+0xa0>)
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	440b      	add	r3, r1
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_error = false;
 8006bfa:	491a      	ldr	r1, [pc, #104]	; (8006c64 <spiInit+0xa0>)
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	440b      	add	r3, r1
 8006c08:	3302      	adds	r3, #2
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 8006c0e:	4915      	ldr	r1, [pc, #84]	; (8006c64 <spiInit+0xa0>)
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_rx = NULL;
 8006c22:	4910      	ldr	r1, [pc, #64]	; (8006c64 <spiInit+0xa0>)
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	4613      	mov	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	440b      	add	r3, r1
 8006c30:	3310      	adds	r3, #16
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_tx = NULL;
 8006c36:	490b      	ldr	r1, [pc, #44]	; (8006c64 <spiInit+0xa0>)
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	440b      	add	r3, r1
 8006c44:	330c      	adds	r3, #12
 8006c46:	2200      	movs	r2, #0
 8006c48:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	607b      	str	r3, [r7, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	ddbe      	ble.n	8006bd4 <spiInit+0x10>
  }

  return ret;
 8006c56:	78fb      	ldrb	r3, [r7, #3]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	2000528c 	.word	0x2000528c

08006c68 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8006c72:	2300      	movs	r3, #0
 8006c74:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 8006c76:	79fa      	ldrb	r2, [r7, #7]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4a41      	ldr	r2, [pc, #260]	; (8006d88 <spiBegin+0x120>)
 8006c82:	4413      	add	r3, r2
 8006c84:	60bb      	str	r3, [r7, #8]

  switch(ch)
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <spiBegin+0x2a>
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d03b      	beq.n	8006d08 <spiBegin+0xa0>
 8006c90:	e075      	b.n	8006d7e <spiBegin+0x116>
  {
    case _DEF_SPI1:
      p_spi->h_spi = &hspi4;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	4a3d      	ldr	r2, [pc, #244]	; (8006d8c <spiBegin+0x124>)
 8006c96:	609a      	str	r2, [r3, #8]
      p_spi->h_dma_tx = &hdma_spi4_tx;
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4a3d      	ldr	r2, [pc, #244]	; (8006d90 <spiBegin+0x128>)
 8006c9c:	60da      	str	r2, [r3, #12]

      hspi4.Instance              = SPI4;
 8006c9e:	4b3b      	ldr	r3, [pc, #236]	; (8006d8c <spiBegin+0x124>)
 8006ca0:	4a3c      	ldr	r2, [pc, #240]	; (8006d94 <spiBegin+0x12c>)
 8006ca2:	601a      	str	r2, [r3, #0]
      hspi4.Init.Mode             = SPI_MODE_MASTER;
 8006ca4:	4b39      	ldr	r3, [pc, #228]	; (8006d8c <spiBegin+0x124>)
 8006ca6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006caa:	605a      	str	r2, [r3, #4]
      hspi4.Init.Direction        = SPI_DIRECTION_2LINES;
 8006cac:	4b37      	ldr	r3, [pc, #220]	; (8006d8c <spiBegin+0x124>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	609a      	str	r2, [r3, #8]
      hspi4.Init.DataSize         = SPI_DATASIZE_8BIT;
 8006cb2:	4b36      	ldr	r3, [pc, #216]	; (8006d8c <spiBegin+0x124>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	60da      	str	r2, [r3, #12]
      hspi4.Init.CLKPolarity      = SPI_POLARITY_LOW;
 8006cb8:	4b34      	ldr	r3, [pc, #208]	; (8006d8c <spiBegin+0x124>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	611a      	str	r2, [r3, #16]
      hspi4.Init.CLKPhase         = SPI_PHASE_1EDGE;
 8006cbe:	4b33      	ldr	r3, [pc, #204]	; (8006d8c <spiBegin+0x124>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	615a      	str	r2, [r3, #20]
      hspi4.Init.NSS              = SPI_NSS_SOFT;
 8006cc4:	4b31      	ldr	r3, [pc, #196]	; (8006d8c <spiBegin+0x124>)
 8006cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cca:	619a      	str	r2, [r3, #24]
      hspi4.Init.BaudRatePrescaler= SPI_BAUDRATEPRESCALER_2;
 8006ccc:	4b2f      	ldr	r3, [pc, #188]	; (8006d8c <spiBegin+0x124>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	61da      	str	r2, [r3, #28]
      hspi4.Init.FirstBit         = SPI_FIRSTBIT_MSB;
 8006cd2:	4b2e      	ldr	r3, [pc, #184]	; (8006d8c <spiBegin+0x124>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	621a      	str	r2, [r3, #32]
      hspi4.Init.TIMode           = SPI_TIMODE_DISABLE;
 8006cd8:	4b2c      	ldr	r3, [pc, #176]	; (8006d8c <spiBegin+0x124>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	625a      	str	r2, [r3, #36]	; 0x24
      hspi4.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 8006cde:	4b2b      	ldr	r3, [pc, #172]	; (8006d8c <spiBegin+0x124>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	629a      	str	r2, [r3, #40]	; 0x28
      hspi4.Init.CRCPolynomial    = 10;
 8006ce4:	4b29      	ldr	r3, [pc, #164]	; (8006d8c <spiBegin+0x124>)
 8006ce6:	220a      	movs	r2, #10
 8006ce8:	62da      	str	r2, [r3, #44]	; 0x2c

      HAL_SPI_DeInit(&hspi4);
 8006cea:	4828      	ldr	r0, [pc, #160]	; (8006d8c <spiBegin+0x124>)
 8006cec:	f007 ff89 	bl	800ec02 <HAL_SPI_DeInit>
      if (HAL_SPI_Init(&hspi4) == HAL_OK)
 8006cf0:	4826      	ldr	r0, [pc, #152]	; (8006d8c <spiBegin+0x124>)
 8006cf2:	f007 fefd 	bl	800eaf0 <HAL_SPI_Init>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d13d      	bne.n	8006d78 <spiBegin+0x110>
      {
        p_spi->is_open = true;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	701a      	strb	r2, [r3, #0]
        ret = true;
 8006d02:	2301      	movs	r3, #1
 8006d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d06:	e037      	b.n	8006d78 <spiBegin+0x110>

    case _DEF_SPI2:
      p_spi->h_spi = &hspi1;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4a23      	ldr	r2, [pc, #140]	; (8006d98 <spiBegin+0x130>)
 8006d0c:	609a      	str	r2, [r3, #8]

      hspi1.Instance              = SPI1;
 8006d0e:	4b22      	ldr	r3, [pc, #136]	; (8006d98 <spiBegin+0x130>)
 8006d10:	4a22      	ldr	r2, [pc, #136]	; (8006d9c <spiBegin+0x134>)
 8006d12:	601a      	str	r2, [r3, #0]
      hspi1.Init.Mode             = SPI_MODE_MASTER;
 8006d14:	4b20      	ldr	r3, [pc, #128]	; (8006d98 <spiBegin+0x130>)
 8006d16:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006d1a:	605a      	str	r2, [r3, #4]
      hspi1.Init.Direction        = SPI_DIRECTION_2LINES;
 8006d1c:	4b1e      	ldr	r3, [pc, #120]	; (8006d98 <spiBegin+0x130>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	609a      	str	r2, [r3, #8]
      hspi1.Init.DataSize         = SPI_DATASIZE_8BIT;
 8006d22:	4b1d      	ldr	r3, [pc, #116]	; (8006d98 <spiBegin+0x130>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	60da      	str	r2, [r3, #12]
      hspi1.Init.CLKPolarity      = SPI_POLARITY_LOW;
 8006d28:	4b1b      	ldr	r3, [pc, #108]	; (8006d98 <spiBegin+0x130>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	611a      	str	r2, [r3, #16]
      hspi1.Init.CLKPhase         = SPI_PHASE_1EDGE;
 8006d2e:	4b1a      	ldr	r3, [pc, #104]	; (8006d98 <spiBegin+0x130>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	615a      	str	r2, [r3, #20]
      hspi1.Init.NSS              = SPI_NSS_SOFT;
 8006d34:	4b18      	ldr	r3, [pc, #96]	; (8006d98 <spiBegin+0x130>)
 8006d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d3a:	619a      	str	r2, [r3, #24]
      hspi1.Init.BaudRatePrescaler= SPI_BAUDRATEPRESCALER_16;
 8006d3c:	4b16      	ldr	r3, [pc, #88]	; (8006d98 <spiBegin+0x130>)
 8006d3e:	2218      	movs	r2, #24
 8006d40:	61da      	str	r2, [r3, #28]
      hspi1.Init.FirstBit         = SPI_FIRSTBIT_MSB;
 8006d42:	4b15      	ldr	r3, [pc, #84]	; (8006d98 <spiBegin+0x130>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	621a      	str	r2, [r3, #32]
      hspi1.Init.TIMode           = SPI_TIMODE_DISABLE;
 8006d48:	4b13      	ldr	r3, [pc, #76]	; (8006d98 <spiBegin+0x130>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	625a      	str	r2, [r3, #36]	; 0x24
      hspi1.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 8006d4e:	4b12      	ldr	r3, [pc, #72]	; (8006d98 <spiBegin+0x130>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	629a      	str	r2, [r3, #40]	; 0x28
      hspi1.Init.CRCPolynomial    = 10;
 8006d54:	4b10      	ldr	r3, [pc, #64]	; (8006d98 <spiBegin+0x130>)
 8006d56:	220a      	movs	r2, #10
 8006d58:	62da      	str	r2, [r3, #44]	; 0x2c

      HAL_SPI_DeInit(&hspi1);
 8006d5a:	480f      	ldr	r0, [pc, #60]	; (8006d98 <spiBegin+0x130>)
 8006d5c:	f007 ff51 	bl	800ec02 <HAL_SPI_DeInit>
      if (HAL_SPI_Init(&hspi1) == HAL_OK)
 8006d60:	480d      	ldr	r0, [pc, #52]	; (8006d98 <spiBegin+0x130>)
 8006d62:	f007 fec5 	bl	800eaf0 <HAL_SPI_Init>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d107      	bne.n	8006d7c <spiBegin+0x114>
      {
        p_spi->is_open = true;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	701a      	strb	r2, [r3, #0]
        ret = true;
 8006d72:	2301      	movs	r3, #1
 8006d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d76:	e001      	b.n	8006d7c <spiBegin+0x114>
      break;
 8006d78:	bf00      	nop
 8006d7a:	e000      	b.n	8006d7e <spiBegin+0x116>
      break;
 8006d7c:	bf00      	nop
  }

  return ret;
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	2000528c 	.word	0x2000528c
 8006d8c:	200052f8 	.word	0x200052f8
 8006d90:	20005350 	.word	0x20005350
 8006d94:	40013400 	.word	0x40013400
 8006d98:	200052a0 	.word	0x200052a0
 8006d9c:	40013000 	.word	0x40013000

08006da0 <spiTransfer>:

  return ret;
}

bool spiTransfer(uint8_t ch, uint8_t *tx_buf, uint8_t *rx_buf, uint32_t length, uint32_t timeout)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af02      	add	r7, sp, #8
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	607a      	str	r2, [r7, #4]
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	4603      	mov	r3, r0
 8006dae:	73fb      	strb	r3, [r7, #15]
  bool ret = true;
 8006db0:	2301      	movs	r3, #1
 8006db2:	75bb      	strb	r3, [r7, #22]
  HAL_StatusTypeDef status;
  spi_t  *p_spi = &spi_tbl[ch];
 8006db4:	7bfa      	ldrb	r2, [r7, #15]
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4a1f      	ldr	r2, [pc, #124]	; (8006e3c <spiTransfer+0x9c>)
 8006dc0:	4413      	add	r3, r2
 8006dc2:	613b      	str	r3, [r7, #16]

  if (p_spi->is_open == false) return false;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	f083 0301 	eor.w	r3, r3, #1
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <spiTransfer+0x36>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	e02e      	b.n	8006e34 <spiTransfer+0x94>

  if (rx_buf == NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10a      	bne.n	8006df2 <spiTransfer+0x52>
  {
    status =  HAL_SPI_Transmit(p_spi->h_spi, tx_buf, length, timeout);
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	6898      	ldr	r0, [r3, #8]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	68b9      	ldr	r1, [r7, #8]
 8006de8:	f007 ff33 	bl	800ec52 <HAL_SPI_Transmit>
 8006dec:	4603      	mov	r3, r0
 8006dee:	75fb      	strb	r3, [r7, #23]
 8006df0:	e01a      	b.n	8006e28 <spiTransfer+0x88>
  }
  else if (tx_buf == NULL)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <spiTransfer+0x6e>
  {
    status =  HAL_SPI_Receive(p_spi->h_spi, rx_buf, length, timeout);
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	6898      	ldr	r0, [r3, #8]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	f008 f868 	bl	800eed8 <HAL_SPI_Receive>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	75fb      	strb	r3, [r7, #23]
 8006e0c:	e00c      	b.n	8006e28 <spiTransfer+0x88>
  }
  else
  {
    status =  HAL_SPI_TransmitReceive(p_spi->h_spi, tx_buf, rx_buf, length, timeout);
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	6898      	ldr	r0, [r3, #8]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	68b9      	ldr	r1, [r7, #8]
 8006e20:	f008 f972 	bl	800f108 <HAL_SPI_TransmitReceive>
 8006e24:	4603      	mov	r3, r0
 8006e26:	75fb      	strb	r3, [r7, #23]
  }

  if (status != HAL_OK)
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <spiTransfer+0x92>
  {
    return false;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e000      	b.n	8006e34 <spiTransfer+0x94>
  }

  return ret;
 8006e32:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	2000528c 	.word	0x2000528c

08006e40 <spiAttachTxInterrupt>:

  return p_spi->is_tx_done;
}

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4603      	mov	r3, r0
 8006e48:	6039      	str	r1, [r7, #0]
 8006e4a:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 8006e4c:	79fa      	ldrb	r2, [r7, #7]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4a0a      	ldr	r2, [pc, #40]	; (8006e80 <spiAttachTxInterrupt+0x40>)
 8006e58:	4413      	add	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false)     return;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	f083 0301 	eor.w	r3, r3, #1
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d103      	bne.n	8006e72 <spiAttachTxInterrupt+0x32>

  p_spi->func_tx = func;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	605a      	str	r2, [r3, #4]
 8006e70:	e000      	b.n	8006e74 <spiAttachTxInterrupt+0x34>
  if (p_spi->is_open == false)     return;
 8006e72:	bf00      	nop
}
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	2000528c 	.word	0x2000528c

08006e84 <HAL_SPI_ErrorCallback>:



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	4b06      	ldr	r3, [pc, #24]	; (8006eac <HAL_SPI_ErrorCallback+0x28>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d102      	bne.n	8006ea0 <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 8006e9a:	4b04      	ldr	r3, [pc, #16]	; (8006eac <HAL_SPI_ErrorCallback+0x28>)
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	709a      	strb	r2, [r3, #2]
  }
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	2000528c 	.word	0x2000528c

08006eb0 <HAL_SPI_MspInit>:
    }
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08e      	sub	sp, #56	; 0x38
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	605a      	str	r2, [r3, #4]
 8006ec2:	609a      	str	r2, [r3, #8]
 8006ec4:	60da      	str	r2, [r3, #12]
 8006ec6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a7c      	ldr	r2, [pc, #496]	; (80070c0 <HAL_SPI_MspInit+0x210>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d152      	bne.n	8006f78 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */
  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	623b      	str	r3, [r7, #32]
 8006ed6:	4b7b      	ldr	r3, [pc, #492]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eda:	4a7a      	ldr	r2, [pc, #488]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006edc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8006ee2:	4b78      	ldr	r3, [pc, #480]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eea:	623b      	str	r3, [r7, #32]
 8006eec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	4b74      	ldr	r3, [pc, #464]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	4a73      	ldr	r2, [pc, #460]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006ef8:	f043 0301 	orr.w	r3, r3, #1
 8006efc:	6313      	str	r3, [r2, #48]	; 0x30
 8006efe:	4b71      	ldr	r3, [pc, #452]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61bb      	str	r3, [r7, #24]
 8006f0e:	4b6d      	ldr	r3, [pc, #436]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	4a6c      	ldr	r2, [pc, #432]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006f14:	f043 0302 	orr.w	r3, r3, #2
 8006f18:	6313      	str	r3, [r2, #48]	; 0x30
 8006f1a:	4b6a      	ldr	r3, [pc, #424]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	61bb      	str	r3, [r7, #24]
 8006f24:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006f26:	23a0      	movs	r3, #160	; 0xa0
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f32:	2303      	movs	r3, #3
 8006f34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006f36:	2305      	movs	r3, #5
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f3e:	4619      	mov	r1, r3
 8006f40:	4861      	ldr	r0, [pc, #388]	; (80070c8 <HAL_SPI_MspInit+0x218>)
 8006f42:	f001 fa6f 	bl	8008424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006f46:	2310      	movs	r3, #16
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f52:	2303      	movs	r3, #3
 8006f54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006f56:	2305      	movs	r3, #5
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f5e:	4619      	mov	r1, r3
 8006f60:	485a      	ldr	r0, [pc, #360]	; (80070cc <HAL_SPI_MspInit+0x21c>)
 8006f62:	f001 fa5f 	bl	8008424 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8006f66:	2200      	movs	r2, #0
 8006f68:	2105      	movs	r1, #5
 8006f6a:	2023      	movs	r0, #35	; 0x23
 8006f6c:	f000 fb23 	bl	80075b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006f70:	2023      	movs	r0, #35	; 0x23
 8006f72:	f000 fb3c 	bl	80075ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */
    HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8006f76:	e09e      	b.n	80070b6 <HAL_SPI_MspInit+0x206>
  else if(spiHandle->Instance==SPI4)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a54      	ldr	r2, [pc, #336]	; (80070d0 <HAL_SPI_MspInit+0x220>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	f040 8099 	bne.w	80070b6 <HAL_SPI_MspInit+0x206>
    __HAL_RCC_DMA2_CLK_ENABLE();
 8006f84:	2300      	movs	r3, #0
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	4b4e      	ldr	r3, [pc, #312]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	4a4d      	ldr	r2, [pc, #308]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006f8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f92:	6313      	str	r3, [r2, #48]	; 0x30
 8006f94:	4b4b      	ldr	r3, [pc, #300]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	613b      	str	r3, [r7, #16]
 8006fa4:	4b47      	ldr	r3, [pc, #284]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa8:	4a46      	ldr	r2, [pc, #280]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006faa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006fae:	6453      	str	r3, [r2, #68]	; 0x44
 8006fb0:	4b44      	ldr	r3, [pc, #272]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fb8:	613b      	str	r3, [r7, #16]
 8006fba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	4b40      	ldr	r3, [pc, #256]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc4:	4a3f      	ldr	r2, [pc, #252]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006fc6:	f043 0301 	orr.w	r3, r3, #1
 8006fca:	6313      	str	r3, [r2, #48]	; 0x30
 8006fcc:	4b3d      	ldr	r3, [pc, #244]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60bb      	str	r3, [r7, #8]
 8006fdc:	4b39      	ldr	r3, [pc, #228]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	4a38      	ldr	r2, [pc, #224]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006fe2:	f043 0302 	orr.w	r3, r3, #2
 8006fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8006fe8:	4b36      	ldr	r3, [pc, #216]	; (80070c4 <HAL_SPI_MspInit+0x214>)
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	60bb      	str	r3, [r7, #8]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007000:	2303      	movs	r3, #3
 8007002:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007004:	2305      	movs	r3, #5
 8007006:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800700c:	4619      	mov	r1, r3
 800700e:	482e      	ldr	r0, [pc, #184]	; (80070c8 <HAL_SPI_MspInit+0x218>)
 8007010:	f001 fa08 	bl	8008424 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800701a:	2302      	movs	r3, #2
 800701c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800701e:	2300      	movs	r3, #0
 8007020:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007022:	2303      	movs	r3, #3
 8007024:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8007026:	2306      	movs	r3, #6
 8007028:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800702a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800702e:	4619      	mov	r1, r3
 8007030:	4826      	ldr	r0, [pc, #152]	; (80070cc <HAL_SPI_MspInit+0x21c>)
 8007032:	f001 f9f7 	bl	8008424 <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8007036:	4b27      	ldr	r3, [pc, #156]	; (80070d4 <HAL_SPI_MspInit+0x224>)
 8007038:	4a27      	ldr	r2, [pc, #156]	; (80070d8 <HAL_SPI_MspInit+0x228>)
 800703a:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 800703c:	4b25      	ldr	r3, [pc, #148]	; (80070d4 <HAL_SPI_MspInit+0x224>)
 800703e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007042:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007044:	4b23      	ldr	r3, [pc, #140]	; (80070d4 <HAL_SPI_MspInit+0x224>)
 8007046:	2240      	movs	r2, #64	; 0x40
 8007048:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800704a:	4b22      	ldr	r3, [pc, #136]	; (80070d4 <HAL_SPI_MspInit+0x224>)
 800704c:	2200      	movs	r2, #0
 800704e:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007050:	4b20      	ldr	r3, [pc, #128]	; (80070d4 <HAL_SPI_MspInit+0x224>)
 8007052:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007056:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007058:	4b1e      	ldr	r3, [pc, #120]	; (80070d4 <HAL_SPI_MspInit+0x224>)
 800705a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800705e:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007060:	4b1c      	ldr	r3, [pc, #112]	; (80070d4 <HAL_SPI_MspInit+0x224>)
 8007062:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007066:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8007068:	4b1a      	ldr	r3, [pc, #104]	; (80070d4 <HAL_SPI_MspInit+0x224>)
 800706a:	2200      	movs	r2, #0
 800706c:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800706e:	4b19      	ldr	r3, [pc, #100]	; (80070d4 <HAL_SPI_MspInit+0x224>)
 8007070:	2200      	movs	r2, #0
 8007072:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007074:	4b17      	ldr	r3, [pc, #92]	; (80070d4 <HAL_SPI_MspInit+0x224>)
 8007076:	2200      	movs	r2, #0
 8007078:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800707a:	4816      	ldr	r0, [pc, #88]	; (80070d4 <HAL_SPI_MspInit+0x224>)
 800707c:	f000 fae0 	bl	8007640 <HAL_DMA_Init>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <HAL_SPI_MspInit+0x1da>
      Error_Handler();
 8007086:	f7fa fafb 	bl	8001680 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a11      	ldr	r2, [pc, #68]	; (80070d4 <HAL_SPI_MspInit+0x224>)
 800708e:	649a      	str	r2, [r3, #72]	; 0x48
 8007090:	4a10      	ldr	r2, [pc, #64]	; (80070d4 <HAL_SPI_MspInit+0x224>)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8007096:	2200      	movs	r2, #0
 8007098:	2105      	movs	r1, #5
 800709a:	2054      	movs	r0, #84	; 0x54
 800709c:	f000 fa8b 	bl	80075b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80070a0:	2054      	movs	r0, #84	; 0x54
 80070a2:	f000 faa4 	bl	80075ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80070a6:	2200      	movs	r2, #0
 80070a8:	2105      	movs	r1, #5
 80070aa:	2039      	movs	r0, #57	; 0x39
 80070ac:	f000 fa83 	bl	80075b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80070b0:	2039      	movs	r0, #57	; 0x39
 80070b2:	f000 fa9c 	bl	80075ee <HAL_NVIC_EnableIRQ>
}
 80070b6:	bf00      	nop
 80070b8:	3738      	adds	r7, #56	; 0x38
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	40013000 	.word	0x40013000
 80070c4:	40023800 	.word	0x40023800
 80070c8:	40020000 	.word	0x40020000
 80070cc:	40020400 	.word	0x40020400
 80070d0:	40013400 	.word	0x40013400
 80070d4:	20005350 	.word	0x20005350
 80070d8:	40026428 	.word	0x40026428

080070dc <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a1a      	ldr	r2, [pc, #104]	; (8007154 <HAL_SPI_MspDeInit+0x78>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d111      	bne.n	8007112 <HAL_SPI_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80070ee:	4b1a      	ldr	r3, [pc, #104]	; (8007158 <HAL_SPI_MspDeInit+0x7c>)
 80070f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f2:	4a19      	ldr	r2, [pc, #100]	; (8007158 <HAL_SPI_MspDeInit+0x7c>)
 80070f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 80070fa:	21a0      	movs	r1, #160	; 0xa0
 80070fc:	4817      	ldr	r0, [pc, #92]	; (800715c <HAL_SPI_MspDeInit+0x80>)
 80070fe:	f001 fb15 	bl	800872c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8007102:	2110      	movs	r1, #16
 8007104:	4816      	ldr	r0, [pc, #88]	; (8007160 <HAL_SPI_MspDeInit+0x84>)
 8007106:	f001 fb11 	bl	800872c <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 800710a:	2023      	movs	r0, #35	; 0x23
 800710c:	f000 fa7d 	bl	800760a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }
}
 8007110:	e01b      	b.n	800714a <HAL_SPI_MspDeInit+0x6e>
  else if(spiHandle->Instance==SPI4)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a13      	ldr	r2, [pc, #76]	; (8007164 <HAL_SPI_MspDeInit+0x88>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d116      	bne.n	800714a <HAL_SPI_MspDeInit+0x6e>
    __HAL_RCC_SPI4_CLK_DISABLE();
 800711c:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <HAL_SPI_MspDeInit+0x7c>)
 800711e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007120:	4a0d      	ldr	r2, [pc, #52]	; (8007158 <HAL_SPI_MspDeInit+0x7c>)
 8007122:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007126:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
 8007128:	2102      	movs	r1, #2
 800712a:	480c      	ldr	r0, [pc, #48]	; (800715c <HAL_SPI_MspDeInit+0x80>)
 800712c:	f001 fafe 	bl	800872c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 8007130:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007134:	480a      	ldr	r0, [pc, #40]	; (8007160 <HAL_SPI_MspDeInit+0x84>)
 8007136:	f001 faf9 	bl	800872c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmatx);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fb2c 	bl	800779c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(SPI4_IRQn);
 8007144:	2054      	movs	r0, #84	; 0x54
 8007146:	f000 fa60 	bl	800760a <HAL_NVIC_DisableIRQ>
}
 800714a:	bf00      	nop
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40013000 	.word	0x40013000
 8007158:	40023800 	.word	0x40023800
 800715c:	40020000 	.word	0x40020000
 8007160:	40020400 	.word	0x40020400
 8007164:	40013400 	.word	0x40013400

08007168 <uartOpen>:
{
	return true;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	6039      	str	r1, [r7, #0]
 8007172:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8007174:	2300      	movs	r3, #0
 8007176:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8007178:	79fb      	ldrb	r3, [r7, #7]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d106      	bne.n	800718c <uartOpen+0x24>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 800717e:	79fb      	ldrb	r3, [r7, #7]
 8007180:	4a06      	ldr	r2, [pc, #24]	; (800719c <uartOpen+0x34>)
 8007182:	2101      	movs	r1, #1
 8007184:	54d1      	strb	r1, [r2, r3]
			ret = true;
 8007186:	2301      	movs	r3, #1
 8007188:	73fb      	strb	r3, [r7, #15]
			break;
 800718a:	bf00      	nop
			qbuffer[ch].out = qbuffer[ch].in;
			break;
			#endif
	}

	return ret;
 800718c:	7bfb      	ldrb	r3, [r7, #15]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	200053b0 	.word	0x200053b0

080071a0 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	71fb      	strb	r3, [r7, #7]
	uint32_t ret;

	switch(ch)
 80071aa:	79fb      	ldrb	r3, [r7, #7]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <uartAvailable+0x14>
 80071b0:	2b01      	cmp	r3, #1
		case _DEF_UART2:
			#ifdef _USE_UART2
			qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
			ret = qbufferAvailable(&qbuffer[ch]);
			#endif
			break;
 80071b2:	e003      	b.n	80071bc <uartAvailable+0x1c>
			ret = cdcAvailable();
 80071b4:	f7fb fa92 	bl	80026dc <cdcAvailable>
 80071b8:	60f8      	str	r0, [r7, #12]
			break;
 80071ba:	bf00      	nop
	}

	return ret;
 80071bc:	68fb      	ldr	r3, [r7, #12]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	4603      	mov	r3, r0
 80071ce:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 80071d0:	79fb      	ldrb	r3, [r7, #7]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <uartRead+0x14>
 80071d6:	2b01      	cmp	r3, #1

		case _DEF_UART2:
			#ifdef _USE_UART2
			qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
			#endif
			break;
 80071d8:	e004      	b.n	80071e4 <uartRead+0x1e>
			ret = cdcRead();
 80071da:	f7fb fa95 	bl	8002708 <cdcRead>
 80071de:	4603      	mov	r3, r0
 80071e0:	73fb      	strb	r3, [r7, #15]
			break;
 80071e2:	bf00      	nop
	}

	return ret;
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b086      	sub	sp, #24
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	4603      	mov	r3, r0
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	607a      	str	r2, [r7, #4]
 80071fa:	73fb      	strb	r3, [r7, #15]

	#ifdef _USE_UART2
	HAL_StatusTypeDef status;
	#endif

	switch(ch)
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <uartWrite+0x18>
 8007202:	2b01      	cmp	r3, #1
			if(status == HAL_OK)
			{
				ret = length;
			}
			#endif
			break;
 8007204:	e005      	b.n	8007212 <uartWrite+0x24>
			ret = cdcWrite(p_data, length);
 8007206:	6879      	ldr	r1, [r7, #4]
 8007208:	68b8      	ldr	r0, [r7, #8]
 800720a:	f7fb fac5 	bl	8002798 <cdcWrite>
 800720e:	6178      	str	r0, [r7, #20]
			break;
 8007210:	bf00      	nop
	}

	return ret;
 8007212:	697b      	ldr	r3, [r7, #20]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800721c:	b40e      	push	{r1, r2, r3}
 800721e:	b580      	push	{r7, lr}
 8007220:	b0c7      	sub	sp, #284	; 0x11c
 8007222:	af00      	add	r7, sp, #0
 8007224:	4602      	mov	r2, r0
 8007226:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800722a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800722e:	701a      	strb	r2, [r3, #0]
	char buf[256];
	va_list args;
	int len;
	uint32_t ret;

	va_start(args, fmt);
 8007230:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8007234:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007238:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800723c:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf, 256, fmt, args);
 800723e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007242:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007246:	f107 0010 	add.w	r0, r7, #16
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007254:	f012 fa22 	bl	801969c <vsniprintf>
 8007258:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	ret = uartWrite(ch, (uint8_t *)buf, len);
 800725c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007260:	f107 0110 	add.w	r1, r7, #16
 8007264:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007268:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff ffbd 	bl	80071ee <uartWrite>
 8007274:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	va_end(args);

	return ret;
 8007278:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800727c:	4618      	mov	r0, r3
 800727e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8007282:	46bd      	mov	sp, r7
 8007284:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007288:	b003      	add	sp, #12
 800728a:	4770      	bx	lr

0800728c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007290:	4b0e      	ldr	r3, [pc, #56]	; (80072cc <HAL_Init+0x40>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a0d      	ldr	r2, [pc, #52]	; (80072cc <HAL_Init+0x40>)
 8007296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800729a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800729c:	4b0b      	ldr	r3, [pc, #44]	; (80072cc <HAL_Init+0x40>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a0a      	ldr	r2, [pc, #40]	; (80072cc <HAL_Init+0x40>)
 80072a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80072a8:	4b08      	ldr	r3, [pc, #32]	; (80072cc <HAL_Init+0x40>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a07      	ldr	r2, [pc, #28]	; (80072cc <HAL_Init+0x40>)
 80072ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072b4:	2003      	movs	r0, #3
 80072b6:	f000 f973 	bl	80075a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80072ba:	2000      	movs	r0, #0
 80072bc:	f000 f808 	bl	80072d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80072c0:	f7fa fa80 	bl	80017c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	40023c00 	.word	0x40023c00

080072d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80072d8:	4b12      	ldr	r3, [pc, #72]	; (8007324 <HAL_InitTick+0x54>)
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	4b12      	ldr	r3, [pc, #72]	; (8007328 <HAL_InitTick+0x58>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	4619      	mov	r1, r3
 80072e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80072ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 f999 	bl	8007626 <HAL_SYSTICK_Config>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e00e      	b.n	800731c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b0f      	cmp	r3, #15
 8007302:	d80a      	bhi.n	800731a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007304:	2200      	movs	r2, #0
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	f04f 30ff 	mov.w	r0, #4294967295
 800730c:	f000 f953 	bl	80075b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007310:	4a06      	ldr	r2, [pc, #24]	; (800732c <HAL_InitTick+0x5c>)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	e000      	b.n	800731c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
}
 800731c:	4618      	mov	r0, r3
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	20000040 	.word	0x20000040
 8007328:	200000a4 	.word	0x200000a4
 800732c:	200000a0 	.word	0x200000a0

08007330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007334:	4b06      	ldr	r3, [pc, #24]	; (8007350 <HAL_IncTick+0x20>)
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	461a      	mov	r2, r3
 800733a:	4b06      	ldr	r3, [pc, #24]	; (8007354 <HAL_IncTick+0x24>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4413      	add	r3, r2
 8007340:	4a04      	ldr	r2, [pc, #16]	; (8007354 <HAL_IncTick+0x24>)
 8007342:	6013      	str	r3, [r2, #0]
}
 8007344:	bf00      	nop
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	200000a4 	.word	0x200000a4
 8007354:	200053b4 	.word	0x200053b4

08007358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0
  return uwTick;
 800735c:	4b03      	ldr	r3, [pc, #12]	; (800736c <HAL_GetTick+0x14>)
 800735e:	681b      	ldr	r3, [r3, #0]
}
 8007360:	4618      	mov	r0, r3
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	200053b4 	.word	0x200053b4

08007370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007378:	f7ff ffee 	bl	8007358 <HAL_GetTick>
 800737c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007388:	d005      	beq.n	8007396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800738a:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <HAL_Delay+0x44>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4413      	add	r3, r2
 8007394:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007396:	bf00      	nop
 8007398:	f7ff ffde 	bl	8007358 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d8f7      	bhi.n	8007398 <HAL_Delay+0x28>
  {
  }
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	200000a4 	.word	0x200000a4

080073b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073c8:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <__NVIC_SetPriorityGrouping+0x44>)
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80073d4:	4013      	ands	r3, r2
 80073d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80073e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80073e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073ea:	4a04      	ldr	r2, [pc, #16]	; (80073fc <__NVIC_SetPriorityGrouping+0x44>)
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	60d3      	str	r3, [r2, #12]
}
 80073f0:	bf00      	nop
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	e000ed00 	.word	0xe000ed00

08007400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007404:	4b04      	ldr	r3, [pc, #16]	; (8007418 <__NVIC_GetPriorityGrouping+0x18>)
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	0a1b      	lsrs	r3, r3, #8
 800740a:	f003 0307 	and.w	r3, r3, #7
}
 800740e:	4618      	mov	r0, r3
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	e000ed00 	.word	0xe000ed00

0800741c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800742a:	2b00      	cmp	r3, #0
 800742c:	db0b      	blt.n	8007446 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800742e:	79fb      	ldrb	r3, [r7, #7]
 8007430:	f003 021f 	and.w	r2, r3, #31
 8007434:	4907      	ldr	r1, [pc, #28]	; (8007454 <__NVIC_EnableIRQ+0x38>)
 8007436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800743a:	095b      	lsrs	r3, r3, #5
 800743c:	2001      	movs	r0, #1
 800743e:	fa00 f202 	lsl.w	r2, r0, r2
 8007442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	e000e100 	.word	0xe000e100

08007458 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007466:	2b00      	cmp	r3, #0
 8007468:	db12      	blt.n	8007490 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800746a:	79fb      	ldrb	r3, [r7, #7]
 800746c:	f003 021f 	and.w	r2, r3, #31
 8007470:	490a      	ldr	r1, [pc, #40]	; (800749c <__NVIC_DisableIRQ+0x44>)
 8007472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007476:	095b      	lsrs	r3, r3, #5
 8007478:	2001      	movs	r0, #1
 800747a:	fa00 f202 	lsl.w	r2, r0, r2
 800747e:	3320      	adds	r3, #32
 8007480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007484:	f3bf 8f4f 	dsb	sy
}
 8007488:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800748a:	f3bf 8f6f 	isb	sy
}
 800748e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	e000e100 	.word	0xe000e100

080074a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	4603      	mov	r3, r0
 80074a8:	6039      	str	r1, [r7, #0]
 80074aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	db0a      	blt.n	80074ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	490c      	ldr	r1, [pc, #48]	; (80074ec <__NVIC_SetPriority+0x4c>)
 80074ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074be:	0112      	lsls	r2, r2, #4
 80074c0:	b2d2      	uxtb	r2, r2
 80074c2:	440b      	add	r3, r1
 80074c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80074c8:	e00a      	b.n	80074e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	4908      	ldr	r1, [pc, #32]	; (80074f0 <__NVIC_SetPriority+0x50>)
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	f003 030f 	and.w	r3, r3, #15
 80074d6:	3b04      	subs	r3, #4
 80074d8:	0112      	lsls	r2, r2, #4
 80074da:	b2d2      	uxtb	r2, r2
 80074dc:	440b      	add	r3, r1
 80074de:	761a      	strb	r2, [r3, #24]
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	e000e100 	.word	0xe000e100
 80074f0:	e000ed00 	.word	0xe000ed00

080074f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b089      	sub	sp, #36	; 0x24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	f1c3 0307 	rsb	r3, r3, #7
 800750e:	2b04      	cmp	r3, #4
 8007510:	bf28      	it	cs
 8007512:	2304      	movcs	r3, #4
 8007514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	3304      	adds	r3, #4
 800751a:	2b06      	cmp	r3, #6
 800751c:	d902      	bls.n	8007524 <NVIC_EncodePriority+0x30>
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	3b03      	subs	r3, #3
 8007522:	e000      	b.n	8007526 <NVIC_EncodePriority+0x32>
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007528:	f04f 32ff 	mov.w	r2, #4294967295
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	fa02 f303 	lsl.w	r3, r2, r3
 8007532:	43da      	mvns	r2, r3
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	401a      	ands	r2, r3
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800753c:	f04f 31ff 	mov.w	r1, #4294967295
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	fa01 f303 	lsl.w	r3, r1, r3
 8007546:	43d9      	mvns	r1, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800754c:	4313      	orrs	r3, r2
         );
}
 800754e:	4618      	mov	r0, r3
 8007550:	3724      	adds	r7, #36	; 0x24
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
	...

0800755c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3b01      	subs	r3, #1
 8007568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800756c:	d301      	bcc.n	8007572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800756e:	2301      	movs	r3, #1
 8007570:	e00f      	b.n	8007592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007572:	4a0a      	ldr	r2, [pc, #40]	; (800759c <SysTick_Config+0x40>)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3b01      	subs	r3, #1
 8007578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800757a:	210f      	movs	r1, #15
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	f7ff ff8e 	bl	80074a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <SysTick_Config+0x40>)
 8007586:	2200      	movs	r2, #0
 8007588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800758a:	4b04      	ldr	r3, [pc, #16]	; (800759c <SysTick_Config+0x40>)
 800758c:	2207      	movs	r2, #7
 800758e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	e000e010 	.word	0xe000e010

080075a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7ff ff05 	bl	80073b8 <__NVIC_SetPriorityGrouping>
}
 80075ae:	bf00      	nop
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b086      	sub	sp, #24
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	4603      	mov	r3, r0
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	607a      	str	r2, [r7, #4]
 80075c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80075c8:	f7ff ff1a 	bl	8007400 <__NVIC_GetPriorityGrouping>
 80075cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	68b9      	ldr	r1, [r7, #8]
 80075d2:	6978      	ldr	r0, [r7, #20]
 80075d4:	f7ff ff8e 	bl	80074f4 <NVIC_EncodePriority>
 80075d8:	4602      	mov	r2, r0
 80075da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075de:	4611      	mov	r1, r2
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff ff5d 	bl	80074a0 <__NVIC_SetPriority>
}
 80075e6:	bf00      	nop
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	4603      	mov	r3, r0
 80075f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80075f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff ff0d 	bl	800741c <__NVIC_EnableIRQ>
}
 8007602:	bf00      	nop
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
 8007610:	4603      	mov	r3, r0
 8007612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff ff1d 	bl	8007458 <__NVIC_DisableIRQ>
}
 800761e:	bf00      	nop
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff ff94 	bl	800755c <SysTick_Config>
 8007634:	4603      	mov	r3, r0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800764c:	f7ff fe84 	bl	8007358 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e099      	b.n	8007790 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2202      	movs	r2, #2
 8007660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f022 0201 	bic.w	r2, r2, #1
 800767a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800767c:	e00f      	b.n	800769e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800767e:	f7ff fe6b 	bl	8007358 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b05      	cmp	r3, #5
 800768a:	d908      	bls.n	800769e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2220      	movs	r2, #32
 8007690:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2203      	movs	r2, #3
 8007696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e078      	b.n	8007790 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e8      	bne.n	800767e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	4b38      	ldr	r3, [pc, #224]	; (8007798 <HAL_DMA_Init+0x158>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	2b04      	cmp	r3, #4
 80076f6:	d107      	bne.n	8007708 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007700:	4313      	orrs	r3, r2
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f023 0307 	bic.w	r3, r3, #7
 800771e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	4313      	orrs	r3, r2
 8007728:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	2b04      	cmp	r3, #4
 8007730:	d117      	bne.n	8007762 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	4313      	orrs	r3, r2
 800773a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00e      	beq.n	8007762 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fb09 	bl	8007d5c <DMA_CheckFifoParam>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d008      	beq.n	8007762 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2240      	movs	r2, #64	; 0x40
 8007754:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800775e:	2301      	movs	r3, #1
 8007760:	e016      	b.n	8007790 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fac0 	bl	8007cf0 <DMA_CalcBaseAndBitshift>
 8007770:	4603      	mov	r3, r0
 8007772:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007778:	223f      	movs	r2, #63	; 0x3f
 800777a:	409a      	lsls	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	f010803f 	.word	0xf010803f

0800779c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e050      	b.n	8007850 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d101      	bne.n	80077be <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80077ba:	2302      	movs	r3, #2
 80077bc:	e048      	b.n	8007850 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0201 	bic.w	r2, r2, #1
 80077cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2200      	movs	r2, #0
 80077dc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2200      	movs	r2, #0
 80077e4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2200      	movs	r2, #0
 80077ec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2200      	movs	r2, #0
 80077f4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2221      	movs	r2, #33	; 0x21
 80077fc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fa76 	bl	8007cf0 <DMA_CalcBaseAndBitshift>
 8007804:	4603      	mov	r3, r0
 8007806:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007830:	223f      	movs	r2, #63	; 0x3f
 8007832:	409a      	lsls	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
 8007864:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007876:	2b01      	cmp	r3, #1
 8007878:	d101      	bne.n	800787e <HAL_DMA_Start_IT+0x26>
 800787a:	2302      	movs	r3, #2
 800787c:	e040      	b.n	8007900 <HAL_DMA_Start_IT+0xa8>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b01      	cmp	r3, #1
 8007890:	d12f      	bne.n	80078f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2202      	movs	r2, #2
 8007896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	68b9      	ldr	r1, [r7, #8]
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f000 f9f4 	bl	8007c94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b0:	223f      	movs	r2, #63	; 0x3f
 80078b2:	409a      	lsls	r2, r3
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0216 	orr.w	r2, r2, #22
 80078c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d007      	beq.n	80078e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f042 0208 	orr.w	r2, r2, #8
 80078de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f042 0201 	orr.w	r2, r2, #1
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	e005      	b.n	80078fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80078fa:	2302      	movs	r3, #2
 80078fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80078fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b02      	cmp	r3, #2
 800791a:	d004      	beq.n	8007926 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2280      	movs	r2, #128	; 0x80
 8007920:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e00c      	b.n	8007940 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2205      	movs	r2, #5
 800792a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 0201 	bic.w	r2, r2, #1
 800793c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007958:	4b8e      	ldr	r3, [pc, #568]	; (8007b94 <HAL_DMA_IRQHandler+0x248>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a8e      	ldr	r2, [pc, #568]	; (8007b98 <HAL_DMA_IRQHandler+0x24c>)
 800795e:	fba2 2303 	umull	r2, r3, r2, r3
 8007962:	0a9b      	lsrs	r3, r3, #10
 8007964:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007976:	2208      	movs	r2, #8
 8007978:	409a      	lsls	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4013      	ands	r3, r2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d01a      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0304 	and.w	r3, r3, #4
 800798c:	2b00      	cmp	r3, #0
 800798e:	d013      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 0204 	bic.w	r2, r2, #4
 800799e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a4:	2208      	movs	r2, #8
 80079a6:	409a      	lsls	r2, r3
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b0:	f043 0201 	orr.w	r2, r3, #1
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079bc:	2201      	movs	r2, #1
 80079be:	409a      	lsls	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4013      	ands	r3, r2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d012      	beq.n	80079ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00b      	beq.n	80079ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079da:	2201      	movs	r2, #1
 80079dc:	409a      	lsls	r2, r3
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e6:	f043 0202 	orr.w	r2, r3, #2
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f2:	2204      	movs	r2, #4
 80079f4:	409a      	lsls	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	4013      	ands	r3, r2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d012      	beq.n	8007a24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0302 	and.w	r3, r3, #2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00b      	beq.n	8007a24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a10:	2204      	movs	r2, #4
 8007a12:	409a      	lsls	r2, r3
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1c:	f043 0204 	orr.w	r2, r3, #4
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a28:	2210      	movs	r2, #16
 8007a2a:	409a      	lsls	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4013      	ands	r3, r2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d043      	beq.n	8007abc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0308 	and.w	r3, r3, #8
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d03c      	beq.n	8007abc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a46:	2210      	movs	r2, #16
 8007a48:	409a      	lsls	r2, r3
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d018      	beq.n	8007a8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d108      	bne.n	8007a7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d024      	beq.n	8007abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
 8007a7a:	e01f      	b.n	8007abc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d01b      	beq.n	8007abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	4798      	blx	r3
 8007a8c:	e016      	b.n	8007abc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d107      	bne.n	8007aac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0208 	bic.w	r2, r2, #8
 8007aaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	409a      	lsls	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 808f 	beq.w	8007bec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0310 	and.w	r3, r3, #16
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 8087 	beq.w	8007bec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	409a      	lsls	r2, r3
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b05      	cmp	r3, #5
 8007af4:	d136      	bne.n	8007b64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f022 0216 	bic.w	r2, r2, #22
 8007b04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	695a      	ldr	r2, [r3, #20]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d103      	bne.n	8007b26 <HAL_DMA_IRQHandler+0x1da>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d007      	beq.n	8007b36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 0208 	bic.w	r2, r2, #8
 8007b34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b3a:	223f      	movs	r2, #63	; 0x3f
 8007b3c:	409a      	lsls	r2, r3
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d07e      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	4798      	blx	r3
        }
        return;
 8007b62:	e079      	b.n	8007c58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d01d      	beq.n	8007bae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10d      	bne.n	8007b9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d031      	beq.n	8007bec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	4798      	blx	r3
 8007b90:	e02c      	b.n	8007bec <HAL_DMA_IRQHandler+0x2a0>
 8007b92:	bf00      	nop
 8007b94:	20000040 	.word	0x20000040
 8007b98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d023      	beq.n	8007bec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	4798      	blx	r3
 8007bac:	e01e      	b.n	8007bec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10f      	bne.n	8007bdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f022 0210 	bic.w	r2, r2, #16
 8007bca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d003      	beq.n	8007bec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d032      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d022      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2205      	movs	r2, #5
 8007c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 0201 	bic.w	r2, r2, #1
 8007c16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	60bb      	str	r3, [r7, #8]
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d307      	bcc.n	8007c34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1f2      	bne.n	8007c18 <HAL_DMA_IRQHandler+0x2cc>
 8007c32:	e000      	b.n	8007c36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007c34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d005      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	4798      	blx	r3
 8007c56:	e000      	b.n	8007c5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007c58:	bf00      	nop
    }
  }
}
 8007c5a:	3718      	adds	r7, #24
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c6e:	b2db      	uxtb	r3, r3
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007cb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	2b40      	cmp	r3, #64	; 0x40
 8007cc0:	d108      	bne.n	8007cd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007cd2:	e007      	b.n	8007ce4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	60da      	str	r2, [r3, #12]
}
 8007ce4:	bf00      	nop
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	3b10      	subs	r3, #16
 8007d00:	4a14      	ldr	r2, [pc, #80]	; (8007d54 <DMA_CalcBaseAndBitshift+0x64>)
 8007d02:	fba2 2303 	umull	r2, r3, r2, r3
 8007d06:	091b      	lsrs	r3, r3, #4
 8007d08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007d0a:	4a13      	ldr	r2, [pc, #76]	; (8007d58 <DMA_CalcBaseAndBitshift+0x68>)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4413      	add	r3, r2
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d909      	bls.n	8007d32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007d26:	f023 0303 	bic.w	r3, r3, #3
 8007d2a:	1d1a      	adds	r2, r3, #4
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	659a      	str	r2, [r3, #88]	; 0x58
 8007d30:	e007      	b.n	8007d42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007d3a:	f023 0303 	bic.w	r3, r3, #3
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	aaaaaaab 	.word	0xaaaaaaab
 8007d58:	08028554 	.word	0x08028554

08007d5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d11f      	bne.n	8007db6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b03      	cmp	r3, #3
 8007d7a:	d856      	bhi.n	8007e2a <DMA_CheckFifoParam+0xce>
 8007d7c:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <DMA_CheckFifoParam+0x28>)
 8007d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d82:	bf00      	nop
 8007d84:	08007d95 	.word	0x08007d95
 8007d88:	08007da7 	.word	0x08007da7
 8007d8c:	08007d95 	.word	0x08007d95
 8007d90:	08007e2b 	.word	0x08007e2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d046      	beq.n	8007e2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007da4:	e043      	b.n	8007e2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007daa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007dae:	d140      	bne.n	8007e32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007db4:	e03d      	b.n	8007e32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dbe:	d121      	bne.n	8007e04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d837      	bhi.n	8007e36 <DMA_CheckFifoParam+0xda>
 8007dc6:	a201      	add	r2, pc, #4	; (adr r2, 8007dcc <DMA_CheckFifoParam+0x70>)
 8007dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dcc:	08007ddd 	.word	0x08007ddd
 8007dd0:	08007de3 	.word	0x08007de3
 8007dd4:	08007ddd 	.word	0x08007ddd
 8007dd8:	08007df5 	.word	0x08007df5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	73fb      	strb	r3, [r7, #15]
      break;
 8007de0:	e030      	b.n	8007e44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d025      	beq.n	8007e3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007df2:	e022      	b.n	8007e3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007dfc:	d11f      	bne.n	8007e3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007e02:	e01c      	b.n	8007e3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d903      	bls.n	8007e12 <DMA_CheckFifoParam+0xb6>
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d003      	beq.n	8007e18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007e10:	e018      	b.n	8007e44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	73fb      	strb	r3, [r7, #15]
      break;
 8007e16:	e015      	b.n	8007e44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00e      	beq.n	8007e42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	73fb      	strb	r3, [r7, #15]
      break;
 8007e28:	e00b      	b.n	8007e42 <DMA_CheckFifoParam+0xe6>
      break;
 8007e2a:	bf00      	nop
 8007e2c:	e00a      	b.n	8007e44 <DMA_CheckFifoParam+0xe8>
      break;
 8007e2e:	bf00      	nop
 8007e30:	e008      	b.n	8007e44 <DMA_CheckFifoParam+0xe8>
      break;
 8007e32:	bf00      	nop
 8007e34:	e006      	b.n	8007e44 <DMA_CheckFifoParam+0xe8>
      break;
 8007e36:	bf00      	nop
 8007e38:	e004      	b.n	8007e44 <DMA_CheckFifoParam+0xe8>
      break;
 8007e3a:	bf00      	nop
 8007e3c:	e002      	b.n	8007e44 <DMA_CheckFifoParam+0xe8>
      break;   
 8007e3e:	bf00      	nop
 8007e40:	e000      	b.n	8007e44 <DMA_CheckFifoParam+0xe8>
      break;
 8007e42:	bf00      	nop
    }
  } 
  
  return status; 
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop

08007e54 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007e66:	4b23      	ldr	r3, [pc, #140]	; (8007ef4 <HAL_FLASH_Program+0xa0>)
 8007e68:	7e1b      	ldrb	r3, [r3, #24]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d101      	bne.n	8007e72 <HAL_FLASH_Program+0x1e>
 8007e6e:	2302      	movs	r3, #2
 8007e70:	e03b      	b.n	8007eea <HAL_FLASH_Program+0x96>
 8007e72:	4b20      	ldr	r3, [pc, #128]	; (8007ef4 <HAL_FLASH_Program+0xa0>)
 8007e74:	2201      	movs	r2, #1
 8007e76:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007e7c:	f000 f870 	bl	8007f60 <FLASH_WaitForLastOperation>
 8007e80:	4603      	mov	r3, r0
 8007e82:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8007e84:	7dfb      	ldrb	r3, [r7, #23]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d12b      	bne.n	8007ee2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d105      	bne.n	8007e9c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007e90:	783b      	ldrb	r3, [r7, #0]
 8007e92:	4619      	mov	r1, r3
 8007e94:	68b8      	ldr	r0, [r7, #8]
 8007e96:	f000 f91b 	bl	80080d0 <FLASH_Program_Byte>
 8007e9a:	e016      	b.n	8007eca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d105      	bne.n	8007eae <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8007ea2:	883b      	ldrh	r3, [r7, #0]
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	68b8      	ldr	r0, [r7, #8]
 8007ea8:	f000 f8ee 	bl	8008088 <FLASH_Program_HalfWord>
 8007eac:	e00d      	b.n	8007eca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d105      	bne.n	8007ec0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	68b8      	ldr	r0, [r7, #8]
 8007eba:	f000 f8c3 	bl	8008044 <FLASH_Program_Word>
 8007ebe:	e004      	b.n	8007eca <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec4:	68b8      	ldr	r0, [r7, #8]
 8007ec6:	f000 f88b 	bl	8007fe0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007eca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007ece:	f000 f847 	bl	8007f60 <FLASH_WaitForLastOperation>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8007ed6:	4b08      	ldr	r3, [pc, #32]	; (8007ef8 <HAL_FLASH_Program+0xa4>)
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	4a07      	ldr	r2, [pc, #28]	; (8007ef8 <HAL_FLASH_Program+0xa4>)
 8007edc:	f023 0301 	bic.w	r3, r3, #1
 8007ee0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007ee2:	4b04      	ldr	r3, [pc, #16]	; (8007ef4 <HAL_FLASH_Program+0xa0>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	200053b8 	.word	0x200053b8
 8007ef8:	40023c00 	.word	0x40023c00

08007efc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007f06:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <HAL_FLASH_Unlock+0x38>)
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	da0b      	bge.n	8007f26 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007f0e:	4b09      	ldr	r3, [pc, #36]	; (8007f34 <HAL_FLASH_Unlock+0x38>)
 8007f10:	4a09      	ldr	r2, [pc, #36]	; (8007f38 <HAL_FLASH_Unlock+0x3c>)
 8007f12:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007f14:	4b07      	ldr	r3, [pc, #28]	; (8007f34 <HAL_FLASH_Unlock+0x38>)
 8007f16:	4a09      	ldr	r2, [pc, #36]	; (8007f3c <HAL_FLASH_Unlock+0x40>)
 8007f18:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007f1a:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <HAL_FLASH_Unlock+0x38>)
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	da01      	bge.n	8007f26 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007f26:	79fb      	ldrb	r3, [r7, #7]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	40023c00 	.word	0x40023c00
 8007f38:	45670123 	.word	0x45670123
 8007f3c:	cdef89ab 	.word	0xcdef89ab

08007f40 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007f44:	4b05      	ldr	r3, [pc, #20]	; (8007f5c <HAL_FLASH_Lock+0x1c>)
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	4a04      	ldr	r2, [pc, #16]	; (8007f5c <HAL_FLASH_Lock+0x1c>)
 8007f4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f4e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	40023c00 	.word	0x40023c00

08007f60 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007f6c:	4b1a      	ldr	r3, [pc, #104]	; (8007fd8 <FLASH_WaitForLastOperation+0x78>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007f72:	f7ff f9f1 	bl	8007358 <HAL_GetTick>
 8007f76:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007f78:	e010      	b.n	8007f9c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f80:	d00c      	beq.n	8007f9c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d007      	beq.n	8007f98 <FLASH_WaitForLastOperation+0x38>
 8007f88:	f7ff f9e6 	bl	8007358 <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d201      	bcs.n	8007f9c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e019      	b.n	8007fd0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007f9c:	4b0f      	ldr	r3, [pc, #60]	; (8007fdc <FLASH_WaitForLastOperation+0x7c>)
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1e8      	bne.n	8007f7a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007fa8:	4b0c      	ldr	r3, [pc, #48]	; (8007fdc <FLASH_WaitForLastOperation+0x7c>)
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007fb4:	4b09      	ldr	r3, [pc, #36]	; (8007fdc <FLASH_WaitForLastOperation+0x7c>)
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007fba:	4b08      	ldr	r3, [pc, #32]	; (8007fdc <FLASH_WaitForLastOperation+0x7c>)
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007fc6:	f000 f8a5 	bl	8008114 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e000      	b.n	8007fd0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
  
}  
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	200053b8 	.word	0x200053b8
 8007fdc:	40023c00 	.word	0x40023c00

08007fe0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007fec:	4b14      	ldr	r3, [pc, #80]	; (8008040 <FLASH_Program_DoubleWord+0x60>)
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	4a13      	ldr	r2, [pc, #76]	; (8008040 <FLASH_Program_DoubleWord+0x60>)
 8007ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ff6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007ff8:	4b11      	ldr	r3, [pc, #68]	; (8008040 <FLASH_Program_DoubleWord+0x60>)
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	4a10      	ldr	r2, [pc, #64]	; (8008040 <FLASH_Program_DoubleWord+0x60>)
 8007ffe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008002:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008004:	4b0e      	ldr	r3, [pc, #56]	; (8008040 <FLASH_Program_DoubleWord+0x60>)
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	4a0d      	ldr	r2, [pc, #52]	; (8008040 <FLASH_Program_DoubleWord+0x60>)
 800800a:	f043 0301 	orr.w	r3, r3, #1
 800800e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8008016:	f3bf 8f6f 	isb	sy
}
 800801a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800801c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008020:	f04f 0200 	mov.w	r2, #0
 8008024:	f04f 0300 	mov.w	r3, #0
 8008028:	000a      	movs	r2, r1
 800802a:	2300      	movs	r3, #0
 800802c:	68f9      	ldr	r1, [r7, #12]
 800802e:	3104      	adds	r1, #4
 8008030:	4613      	mov	r3, r2
 8008032:	600b      	str	r3, [r1, #0]
}
 8008034:	bf00      	nop
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	40023c00 	.word	0x40023c00

08008044 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800804e:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <FLASH_Program_Word+0x40>)
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	4a0c      	ldr	r2, [pc, #48]	; (8008084 <FLASH_Program_Word+0x40>)
 8008054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008058:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800805a:	4b0a      	ldr	r3, [pc, #40]	; (8008084 <FLASH_Program_Word+0x40>)
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	4a09      	ldr	r2, [pc, #36]	; (8008084 <FLASH_Program_Word+0x40>)
 8008060:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008064:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008066:	4b07      	ldr	r3, [pc, #28]	; (8008084 <FLASH_Program_Word+0x40>)
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	4a06      	ldr	r2, [pc, #24]	; (8008084 <FLASH_Program_Word+0x40>)
 800806c:	f043 0301 	orr.w	r3, r3, #1
 8008070:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	601a      	str	r2, [r3, #0]
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr
 8008084:	40023c00 	.word	0x40023c00

08008088 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008094:	4b0d      	ldr	r3, [pc, #52]	; (80080cc <FLASH_Program_HalfWord+0x44>)
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	4a0c      	ldr	r2, [pc, #48]	; (80080cc <FLASH_Program_HalfWord+0x44>)
 800809a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800809e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80080a0:	4b0a      	ldr	r3, [pc, #40]	; (80080cc <FLASH_Program_HalfWord+0x44>)
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	4a09      	ldr	r2, [pc, #36]	; (80080cc <FLASH_Program_HalfWord+0x44>)
 80080a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80080ac:	4b07      	ldr	r3, [pc, #28]	; (80080cc <FLASH_Program_HalfWord+0x44>)
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	4a06      	ldr	r2, [pc, #24]	; (80080cc <FLASH_Program_HalfWord+0x44>)
 80080b2:	f043 0301 	orr.w	r3, r3, #1
 80080b6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	887a      	ldrh	r2, [r7, #2]
 80080bc:	801a      	strh	r2, [r3, #0]
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	40023c00 	.word	0x40023c00

080080d0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80080dc:	4b0c      	ldr	r3, [pc, #48]	; (8008110 <FLASH_Program_Byte+0x40>)
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	4a0b      	ldr	r2, [pc, #44]	; (8008110 <FLASH_Program_Byte+0x40>)
 80080e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80080e8:	4b09      	ldr	r3, [pc, #36]	; (8008110 <FLASH_Program_Byte+0x40>)
 80080ea:	4a09      	ldr	r2, [pc, #36]	; (8008110 <FLASH_Program_Byte+0x40>)
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80080f0:	4b07      	ldr	r3, [pc, #28]	; (8008110 <FLASH_Program_Byte+0x40>)
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	4a06      	ldr	r2, [pc, #24]	; (8008110 <FLASH_Program_Byte+0x40>)
 80080f6:	f043 0301 	orr.w	r3, r3, #1
 80080fa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	78fa      	ldrb	r2, [r7, #3]
 8008100:	701a      	strb	r2, [r3, #0]
}
 8008102:	bf00      	nop
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	40023c00 	.word	0x40023c00

08008114 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8008118:	4b2f      	ldr	r3, [pc, #188]	; (80081d8 <FLASH_SetErrorCode+0xc4>)
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	f003 0310 	and.w	r3, r3, #16
 8008120:	2b00      	cmp	r3, #0
 8008122:	d008      	beq.n	8008136 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008124:	4b2d      	ldr	r3, [pc, #180]	; (80081dc <FLASH_SetErrorCode+0xc8>)
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	f043 0310 	orr.w	r3, r3, #16
 800812c:	4a2b      	ldr	r2, [pc, #172]	; (80081dc <FLASH_SetErrorCode+0xc8>)
 800812e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8008130:	4b29      	ldr	r3, [pc, #164]	; (80081d8 <FLASH_SetErrorCode+0xc4>)
 8008132:	2210      	movs	r2, #16
 8008134:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8008136:	4b28      	ldr	r3, [pc, #160]	; (80081d8 <FLASH_SetErrorCode+0xc4>)
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f003 0320 	and.w	r3, r3, #32
 800813e:	2b00      	cmp	r3, #0
 8008140:	d008      	beq.n	8008154 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8008142:	4b26      	ldr	r3, [pc, #152]	; (80081dc <FLASH_SetErrorCode+0xc8>)
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	f043 0308 	orr.w	r3, r3, #8
 800814a:	4a24      	ldr	r2, [pc, #144]	; (80081dc <FLASH_SetErrorCode+0xc8>)
 800814c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800814e:	4b22      	ldr	r3, [pc, #136]	; (80081d8 <FLASH_SetErrorCode+0xc4>)
 8008150:	2220      	movs	r2, #32
 8008152:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8008154:	4b20      	ldr	r3, [pc, #128]	; (80081d8 <FLASH_SetErrorCode+0xc4>)
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815c:	2b00      	cmp	r3, #0
 800815e:	d008      	beq.n	8008172 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8008160:	4b1e      	ldr	r3, [pc, #120]	; (80081dc <FLASH_SetErrorCode+0xc8>)
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	f043 0304 	orr.w	r3, r3, #4
 8008168:	4a1c      	ldr	r2, [pc, #112]	; (80081dc <FLASH_SetErrorCode+0xc8>)
 800816a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800816c:	4b1a      	ldr	r3, [pc, #104]	; (80081d8 <FLASH_SetErrorCode+0xc4>)
 800816e:	2240      	movs	r2, #64	; 0x40
 8008170:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8008172:	4b19      	ldr	r3, [pc, #100]	; (80081d8 <FLASH_SetErrorCode+0xc4>)
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800817a:	2b00      	cmp	r3, #0
 800817c:	d008      	beq.n	8008190 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800817e:	4b17      	ldr	r3, [pc, #92]	; (80081dc <FLASH_SetErrorCode+0xc8>)
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	f043 0302 	orr.w	r3, r3, #2
 8008186:	4a15      	ldr	r2, [pc, #84]	; (80081dc <FLASH_SetErrorCode+0xc8>)
 8008188:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800818a:	4b13      	ldr	r3, [pc, #76]	; (80081d8 <FLASH_SetErrorCode+0xc4>)
 800818c:	2280      	movs	r2, #128	; 0x80
 800818e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8008190:	4b11      	ldr	r3, [pc, #68]	; (80081d8 <FLASH_SetErrorCode+0xc4>)
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008198:	2b00      	cmp	r3, #0
 800819a:	d009      	beq.n	80081b0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800819c:	4b0f      	ldr	r3, [pc, #60]	; (80081dc <FLASH_SetErrorCode+0xc8>)
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	f043 0301 	orr.w	r3, r3, #1
 80081a4:	4a0d      	ldr	r2, [pc, #52]	; (80081dc <FLASH_SetErrorCode+0xc8>)
 80081a6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80081a8:	4b0b      	ldr	r3, [pc, #44]	; (80081d8 <FLASH_SetErrorCode+0xc4>)
 80081aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081ae:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80081b0:	4b09      	ldr	r3, [pc, #36]	; (80081d8 <FLASH_SetErrorCode+0xc4>)
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	f003 0302 	and.w	r3, r3, #2
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d008      	beq.n	80081ce <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80081bc:	4b07      	ldr	r3, [pc, #28]	; (80081dc <FLASH_SetErrorCode+0xc8>)
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	f043 0320 	orr.w	r3, r3, #32
 80081c4:	4a05      	ldr	r2, [pc, #20]	; (80081dc <FLASH_SetErrorCode+0xc8>)
 80081c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80081c8:	4b03      	ldr	r3, [pc, #12]	; (80081d8 <FLASH_SetErrorCode+0xc4>)
 80081ca:	2202      	movs	r2, #2
 80081cc:	60da      	str	r2, [r3, #12]
  }
}
 80081ce:	bf00      	nop
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	40023c00 	.word	0x40023c00
 80081dc:	200053b8 	.word	0x200053b8

080081e0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80081f2:	4b31      	ldr	r3, [pc, #196]	; (80082b8 <HAL_FLASHEx_Erase+0xd8>)
 80081f4:	7e1b      	ldrb	r3, [r3, #24]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <HAL_FLASHEx_Erase+0x1e>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e058      	b.n	80082b0 <HAL_FLASHEx_Erase+0xd0>
 80081fe:	4b2e      	ldr	r3, [pc, #184]	; (80082b8 <HAL_FLASHEx_Erase+0xd8>)
 8008200:	2201      	movs	r2, #1
 8008202:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008204:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008208:	f7ff feaa 	bl	8007f60 <FLASH_WaitForLastOperation>
 800820c:	4603      	mov	r3, r0
 800820e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d148      	bne.n	80082a8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	f04f 32ff 	mov.w	r2, #4294967295
 800821c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d115      	bne.n	8008252 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	b2da      	uxtb	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	4619      	mov	r1, r3
 8008232:	4610      	mov	r0, r2
 8008234:	f000 f844 	bl	80082c0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008238:	f24c 3050 	movw	r0, #50000	; 0xc350
 800823c:	f7ff fe90 	bl	8007f60 <FLASH_WaitForLastOperation>
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8008244:	4b1d      	ldr	r3, [pc, #116]	; (80082bc <HAL_FLASHEx_Erase+0xdc>)
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	4a1c      	ldr	r2, [pc, #112]	; (80082bc <HAL_FLASHEx_Erase+0xdc>)
 800824a:	f023 0304 	bic.w	r3, r3, #4
 800824e:	6113      	str	r3, [r2, #16]
 8008250:	e028      	b.n	80082a4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	60bb      	str	r3, [r7, #8]
 8008258:	e01c      	b.n	8008294 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	b2db      	uxtb	r3, r3
 8008260:	4619      	mov	r1, r3
 8008262:	68b8      	ldr	r0, [r7, #8]
 8008264:	f000 f850 	bl	8008308 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008268:	f24c 3050 	movw	r0, #50000	; 0xc350
 800826c:	f7ff fe78 	bl	8007f60 <FLASH_WaitForLastOperation>
 8008270:	4603      	mov	r3, r0
 8008272:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8008274:	4b11      	ldr	r3, [pc, #68]	; (80082bc <HAL_FLASHEx_Erase+0xdc>)
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	4a10      	ldr	r2, [pc, #64]	; (80082bc <HAL_FLASHEx_Erase+0xdc>)
 800827a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800827e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8008280:	7bfb      	ldrb	r3, [r7, #15]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	601a      	str	r2, [r3, #0]
          break;
 800828c:	e00a      	b.n	80082a4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	3301      	adds	r3, #1
 8008292:	60bb      	str	r3, [r7, #8]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	4413      	add	r3, r2
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d3da      	bcc.n	800825a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80082a4:	f000 f878 	bl	8008398 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80082a8:	4b03      	ldr	r3, [pc, #12]	; (80082b8 <HAL_FLASHEx_Erase+0xd8>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	761a      	strb	r2, [r3, #24]

  return status;
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	200053b8 	.word	0x200053b8
 80082bc:	40023c00 	.word	0x40023c00

080082c0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	6039      	str	r1, [r7, #0]
 80082ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80082cc:	4b0d      	ldr	r3, [pc, #52]	; (8008304 <FLASH_MassErase+0x44>)
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	4a0c      	ldr	r2, [pc, #48]	; (8008304 <FLASH_MassErase+0x44>)
 80082d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80082d8:	4b0a      	ldr	r3, [pc, #40]	; (8008304 <FLASH_MassErase+0x44>)
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	4a09      	ldr	r2, [pc, #36]	; (8008304 <FLASH_MassErase+0x44>)
 80082de:	f043 0304 	orr.w	r3, r3, #4
 80082e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80082e4:	4b07      	ldr	r3, [pc, #28]	; (8008304 <FLASH_MassErase+0x44>)
 80082e6:	691a      	ldr	r2, [r3, #16]
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	021b      	lsls	r3, r3, #8
 80082ec:	4313      	orrs	r3, r2
 80082ee:	4a05      	ldr	r2, [pc, #20]	; (8008304 <FLASH_MassErase+0x44>)
 80082f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f4:	6113      	str	r3, [r2, #16]
}
 80082f6:	bf00      	nop
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	40023c00 	.word	0x40023c00

08008308 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d102      	bne.n	8008324 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800831e:	2300      	movs	r3, #0
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	e010      	b.n	8008346 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d103      	bne.n	8008332 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800832a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	e009      	b.n	8008346 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	2b02      	cmp	r3, #2
 8008336:	d103      	bne.n	8008340 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8008338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800833c:	60fb      	str	r3, [r7, #12]
 800833e:	e002      	b.n	8008346 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8008340:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008344:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008346:	4b13      	ldr	r3, [pc, #76]	; (8008394 <FLASH_Erase_Sector+0x8c>)
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	4a12      	ldr	r2, [pc, #72]	; (8008394 <FLASH_Erase_Sector+0x8c>)
 800834c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008350:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8008352:	4b10      	ldr	r3, [pc, #64]	; (8008394 <FLASH_Erase_Sector+0x8c>)
 8008354:	691a      	ldr	r2, [r3, #16]
 8008356:	490f      	ldr	r1, [pc, #60]	; (8008394 <FLASH_Erase_Sector+0x8c>)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4313      	orrs	r3, r2
 800835c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800835e:	4b0d      	ldr	r3, [pc, #52]	; (8008394 <FLASH_Erase_Sector+0x8c>)
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	4a0c      	ldr	r2, [pc, #48]	; (8008394 <FLASH_Erase_Sector+0x8c>)
 8008364:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008368:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800836a:	4b0a      	ldr	r3, [pc, #40]	; (8008394 <FLASH_Erase_Sector+0x8c>)
 800836c:	691a      	ldr	r2, [r3, #16]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	00db      	lsls	r3, r3, #3
 8008372:	4313      	orrs	r3, r2
 8008374:	4a07      	ldr	r2, [pc, #28]	; (8008394 <FLASH_Erase_Sector+0x8c>)
 8008376:	f043 0302 	orr.w	r3, r3, #2
 800837a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800837c:	4b05      	ldr	r3, [pc, #20]	; (8008394 <FLASH_Erase_Sector+0x8c>)
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	4a04      	ldr	r2, [pc, #16]	; (8008394 <FLASH_Erase_Sector+0x8c>)
 8008382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008386:	6113      	str	r3, [r2, #16]
}
 8008388:	bf00      	nop
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	40023c00 	.word	0x40023c00

08008398 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008398:	b480      	push	{r7}
 800839a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800839c:	4b20      	ldr	r3, [pc, #128]	; (8008420 <FLASH_FlushCaches+0x88>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d017      	beq.n	80083d8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80083a8:	4b1d      	ldr	r3, [pc, #116]	; (8008420 <FLASH_FlushCaches+0x88>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a1c      	ldr	r2, [pc, #112]	; (8008420 <FLASH_FlushCaches+0x88>)
 80083ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083b2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80083b4:	4b1a      	ldr	r3, [pc, #104]	; (8008420 <FLASH_FlushCaches+0x88>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a19      	ldr	r2, [pc, #100]	; (8008420 <FLASH_FlushCaches+0x88>)
 80083ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80083be:	6013      	str	r3, [r2, #0]
 80083c0:	4b17      	ldr	r3, [pc, #92]	; (8008420 <FLASH_FlushCaches+0x88>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a16      	ldr	r2, [pc, #88]	; (8008420 <FLASH_FlushCaches+0x88>)
 80083c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083ca:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80083cc:	4b14      	ldr	r3, [pc, #80]	; (8008420 <FLASH_FlushCaches+0x88>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a13      	ldr	r2, [pc, #76]	; (8008420 <FLASH_FlushCaches+0x88>)
 80083d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80083d6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80083d8:	4b11      	ldr	r3, [pc, #68]	; (8008420 <FLASH_FlushCaches+0x88>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d017      	beq.n	8008414 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80083e4:	4b0e      	ldr	r3, [pc, #56]	; (8008420 <FLASH_FlushCaches+0x88>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a0d      	ldr	r2, [pc, #52]	; (8008420 <FLASH_FlushCaches+0x88>)
 80083ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083ee:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80083f0:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <FLASH_FlushCaches+0x88>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a0a      	ldr	r2, [pc, #40]	; (8008420 <FLASH_FlushCaches+0x88>)
 80083f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	4b08      	ldr	r3, [pc, #32]	; (8008420 <FLASH_FlushCaches+0x88>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a07      	ldr	r2, [pc, #28]	; (8008420 <FLASH_FlushCaches+0x88>)
 8008402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008406:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008408:	4b05      	ldr	r3, [pc, #20]	; (8008420 <FLASH_FlushCaches+0x88>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a04      	ldr	r2, [pc, #16]	; (8008420 <FLASH_FlushCaches+0x88>)
 800840e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008412:	6013      	str	r3, [r2, #0]
  }
}
 8008414:	bf00      	nop
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	40023c00 	.word	0x40023c00

08008424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008424:	b480      	push	{r7}
 8008426:	b089      	sub	sp, #36	; 0x24
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800842e:	2300      	movs	r3, #0
 8008430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008432:	2300      	movs	r3, #0
 8008434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008436:	2300      	movs	r3, #0
 8008438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800843a:	2300      	movs	r3, #0
 800843c:	61fb      	str	r3, [r7, #28]
 800843e:	e159      	b.n	80086f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008440:	2201      	movs	r2, #1
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	fa02 f303 	lsl.w	r3, r2, r3
 8008448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	4013      	ands	r3, r2
 8008452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	429a      	cmp	r2, r3
 800845a:	f040 8148 	bne.w	80086ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f003 0303 	and.w	r3, r3, #3
 8008466:	2b01      	cmp	r3, #1
 8008468:	d005      	beq.n	8008476 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008472:	2b02      	cmp	r3, #2
 8008474:	d130      	bne.n	80084d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	2203      	movs	r2, #3
 8008482:	fa02 f303 	lsl.w	r3, r2, r3
 8008486:	43db      	mvns	r3, r3
 8008488:	69ba      	ldr	r2, [r7, #24]
 800848a:	4013      	ands	r3, r2
 800848c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	fa02 f303 	lsl.w	r3, r2, r3
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	4313      	orrs	r3, r2
 800849e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80084ac:	2201      	movs	r2, #1
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	fa02 f303 	lsl.w	r3, r2, r3
 80084b4:	43db      	mvns	r3, r3
 80084b6:	69ba      	ldr	r2, [r7, #24]
 80084b8:	4013      	ands	r3, r2
 80084ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	091b      	lsrs	r3, r3, #4
 80084c2:	f003 0201 	and.w	r2, r3, #1
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	fa02 f303 	lsl.w	r3, r2, r3
 80084cc:	69ba      	ldr	r2, [r7, #24]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	69ba      	ldr	r2, [r7, #24]
 80084d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f003 0303 	and.w	r3, r3, #3
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d017      	beq.n	8008514 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	2203      	movs	r2, #3
 80084f0:	fa02 f303 	lsl.w	r3, r2, r3
 80084f4:	43db      	mvns	r3, r3
 80084f6:	69ba      	ldr	r2, [r7, #24]
 80084f8:	4013      	ands	r3, r2
 80084fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	689a      	ldr	r2, [r3, #8]
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	fa02 f303 	lsl.w	r3, r2, r3
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	4313      	orrs	r3, r2
 800850c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f003 0303 	and.w	r3, r3, #3
 800851c:	2b02      	cmp	r3, #2
 800851e:	d123      	bne.n	8008568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	08da      	lsrs	r2, r3, #3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3208      	adds	r2, #8
 8008528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	f003 0307 	and.w	r3, r3, #7
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	220f      	movs	r2, #15
 8008538:	fa02 f303 	lsl.w	r3, r2, r3
 800853c:	43db      	mvns	r3, r3
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	4013      	ands	r3, r2
 8008542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	691a      	ldr	r2, [r3, #16]
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	f003 0307 	and.w	r3, r3, #7
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	fa02 f303 	lsl.w	r3, r2, r3
 8008554:	69ba      	ldr	r2, [r7, #24]
 8008556:	4313      	orrs	r3, r2
 8008558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	08da      	lsrs	r2, r3, #3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	3208      	adds	r2, #8
 8008562:	69b9      	ldr	r1, [r7, #24]
 8008564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	2203      	movs	r2, #3
 8008574:	fa02 f303 	lsl.w	r3, r2, r3
 8008578:	43db      	mvns	r3, r3
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	4013      	ands	r3, r2
 800857e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f003 0203 	and.w	r2, r3, #3
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	005b      	lsls	r3, r3, #1
 800858c:	fa02 f303 	lsl.w	r3, r2, r3
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	4313      	orrs	r3, r2
 8008594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 80a2 	beq.w	80086ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085aa:	2300      	movs	r3, #0
 80085ac:	60fb      	str	r3, [r7, #12]
 80085ae:	4b57      	ldr	r3, [pc, #348]	; (800870c <HAL_GPIO_Init+0x2e8>)
 80085b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b2:	4a56      	ldr	r2, [pc, #344]	; (800870c <HAL_GPIO_Init+0x2e8>)
 80085b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085b8:	6453      	str	r3, [r2, #68]	; 0x44
 80085ba:	4b54      	ldr	r3, [pc, #336]	; (800870c <HAL_GPIO_Init+0x2e8>)
 80085bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80085c6:	4a52      	ldr	r2, [pc, #328]	; (8008710 <HAL_GPIO_Init+0x2ec>)
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	089b      	lsrs	r3, r3, #2
 80085cc:	3302      	adds	r3, #2
 80085ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	f003 0303 	and.w	r3, r3, #3
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	220f      	movs	r2, #15
 80085de:	fa02 f303 	lsl.w	r3, r2, r3
 80085e2:	43db      	mvns	r3, r3
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	4013      	ands	r3, r2
 80085e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a49      	ldr	r2, [pc, #292]	; (8008714 <HAL_GPIO_Init+0x2f0>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d019      	beq.n	8008626 <HAL_GPIO_Init+0x202>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a48      	ldr	r2, [pc, #288]	; (8008718 <HAL_GPIO_Init+0x2f4>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d013      	beq.n	8008622 <HAL_GPIO_Init+0x1fe>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a47      	ldr	r2, [pc, #284]	; (800871c <HAL_GPIO_Init+0x2f8>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d00d      	beq.n	800861e <HAL_GPIO_Init+0x1fa>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a46      	ldr	r2, [pc, #280]	; (8008720 <HAL_GPIO_Init+0x2fc>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d007      	beq.n	800861a <HAL_GPIO_Init+0x1f6>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a45      	ldr	r2, [pc, #276]	; (8008724 <HAL_GPIO_Init+0x300>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d101      	bne.n	8008616 <HAL_GPIO_Init+0x1f2>
 8008612:	2304      	movs	r3, #4
 8008614:	e008      	b.n	8008628 <HAL_GPIO_Init+0x204>
 8008616:	2307      	movs	r3, #7
 8008618:	e006      	b.n	8008628 <HAL_GPIO_Init+0x204>
 800861a:	2303      	movs	r3, #3
 800861c:	e004      	b.n	8008628 <HAL_GPIO_Init+0x204>
 800861e:	2302      	movs	r3, #2
 8008620:	e002      	b.n	8008628 <HAL_GPIO_Init+0x204>
 8008622:	2301      	movs	r3, #1
 8008624:	e000      	b.n	8008628 <HAL_GPIO_Init+0x204>
 8008626:	2300      	movs	r3, #0
 8008628:	69fa      	ldr	r2, [r7, #28]
 800862a:	f002 0203 	and.w	r2, r2, #3
 800862e:	0092      	lsls	r2, r2, #2
 8008630:	4093      	lsls	r3, r2
 8008632:	69ba      	ldr	r2, [r7, #24]
 8008634:	4313      	orrs	r3, r2
 8008636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008638:	4935      	ldr	r1, [pc, #212]	; (8008710 <HAL_GPIO_Init+0x2ec>)
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	089b      	lsrs	r3, r3, #2
 800863e:	3302      	adds	r3, #2
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008646:	4b38      	ldr	r3, [pc, #224]	; (8008728 <HAL_GPIO_Init+0x304>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	43db      	mvns	r3, r3
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	4013      	ands	r3, r2
 8008654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	4313      	orrs	r3, r2
 8008668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800866a:	4a2f      	ldr	r2, [pc, #188]	; (8008728 <HAL_GPIO_Init+0x304>)
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008670:	4b2d      	ldr	r3, [pc, #180]	; (8008728 <HAL_GPIO_Init+0x304>)
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	43db      	mvns	r3, r3
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	4013      	ands	r3, r2
 800867e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d003      	beq.n	8008694 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800868c:	69ba      	ldr	r2, [r7, #24]
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	4313      	orrs	r3, r2
 8008692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008694:	4a24      	ldr	r2, [pc, #144]	; (8008728 <HAL_GPIO_Init+0x304>)
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800869a:	4b23      	ldr	r3, [pc, #140]	; (8008728 <HAL_GPIO_Init+0x304>)
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	43db      	mvns	r3, r3
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	4013      	ands	r3, r2
 80086a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80086be:	4a1a      	ldr	r2, [pc, #104]	; (8008728 <HAL_GPIO_Init+0x304>)
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80086c4:	4b18      	ldr	r3, [pc, #96]	; (8008728 <HAL_GPIO_Init+0x304>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	43db      	mvns	r3, r3
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	4013      	ands	r3, r2
 80086d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d003      	beq.n	80086e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80086e8:	4a0f      	ldr	r2, [pc, #60]	; (8008728 <HAL_GPIO_Init+0x304>)
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	3301      	adds	r3, #1
 80086f2:	61fb      	str	r3, [r7, #28]
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	2b0f      	cmp	r3, #15
 80086f8:	f67f aea2 	bls.w	8008440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80086fc:	bf00      	nop
 80086fe:	bf00      	nop
 8008700:	3724      	adds	r7, #36	; 0x24
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	40023800 	.word	0x40023800
 8008710:	40013800 	.word	0x40013800
 8008714:	40020000 	.word	0x40020000
 8008718:	40020400 	.word	0x40020400
 800871c:	40020800 	.word	0x40020800
 8008720:	40020c00 	.word	0x40020c00
 8008724:	40021000 	.word	0x40021000
 8008728:	40013c00 	.word	0x40013c00

0800872c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008736:	2300      	movs	r3, #0
 8008738:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800873a:	2300      	movs	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800873e:	2300      	movs	r3, #0
 8008740:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008742:	2300      	movs	r3, #0
 8008744:	617b      	str	r3, [r7, #20]
 8008746:	e0bb      	b.n	80088c0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008748:	2201      	movs	r2, #1
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	fa02 f303 	lsl.w	r3, r2, r3
 8008750:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	4013      	ands	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	429a      	cmp	r2, r3
 8008760:	f040 80ab 	bne.w	80088ba <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008764:	4a5c      	ldr	r2, [pc, #368]	; (80088d8 <HAL_GPIO_DeInit+0x1ac>)
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	089b      	lsrs	r3, r3, #2
 800876a:	3302      	adds	r3, #2
 800876c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008770:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f003 0303 	and.w	r3, r3, #3
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	220f      	movs	r2, #15
 800877c:	fa02 f303 	lsl.w	r3, r2, r3
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	4013      	ands	r3, r2
 8008784:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a54      	ldr	r2, [pc, #336]	; (80088dc <HAL_GPIO_DeInit+0x1b0>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d019      	beq.n	80087c2 <HAL_GPIO_DeInit+0x96>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a53      	ldr	r2, [pc, #332]	; (80088e0 <HAL_GPIO_DeInit+0x1b4>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d013      	beq.n	80087be <HAL_GPIO_DeInit+0x92>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a52      	ldr	r2, [pc, #328]	; (80088e4 <HAL_GPIO_DeInit+0x1b8>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d00d      	beq.n	80087ba <HAL_GPIO_DeInit+0x8e>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a51      	ldr	r2, [pc, #324]	; (80088e8 <HAL_GPIO_DeInit+0x1bc>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d007      	beq.n	80087b6 <HAL_GPIO_DeInit+0x8a>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a50      	ldr	r2, [pc, #320]	; (80088ec <HAL_GPIO_DeInit+0x1c0>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d101      	bne.n	80087b2 <HAL_GPIO_DeInit+0x86>
 80087ae:	2304      	movs	r3, #4
 80087b0:	e008      	b.n	80087c4 <HAL_GPIO_DeInit+0x98>
 80087b2:	2307      	movs	r3, #7
 80087b4:	e006      	b.n	80087c4 <HAL_GPIO_DeInit+0x98>
 80087b6:	2303      	movs	r3, #3
 80087b8:	e004      	b.n	80087c4 <HAL_GPIO_DeInit+0x98>
 80087ba:	2302      	movs	r3, #2
 80087bc:	e002      	b.n	80087c4 <HAL_GPIO_DeInit+0x98>
 80087be:	2301      	movs	r3, #1
 80087c0:	e000      	b.n	80087c4 <HAL_GPIO_DeInit+0x98>
 80087c2:	2300      	movs	r3, #0
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	f002 0203 	and.w	r2, r2, #3
 80087ca:	0092      	lsls	r2, r2, #2
 80087cc:	4093      	lsls	r3, r2
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d132      	bne.n	800883a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80087d4:	4b46      	ldr	r3, [pc, #280]	; (80088f0 <HAL_GPIO_DeInit+0x1c4>)
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	43db      	mvns	r3, r3
 80087dc:	4944      	ldr	r1, [pc, #272]	; (80088f0 <HAL_GPIO_DeInit+0x1c4>)
 80087de:	4013      	ands	r3, r2
 80087e0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80087e2:	4b43      	ldr	r3, [pc, #268]	; (80088f0 <HAL_GPIO_DeInit+0x1c4>)
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	43db      	mvns	r3, r3
 80087ea:	4941      	ldr	r1, [pc, #260]	; (80088f0 <HAL_GPIO_DeInit+0x1c4>)
 80087ec:	4013      	ands	r3, r2
 80087ee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80087f0:	4b3f      	ldr	r3, [pc, #252]	; (80088f0 <HAL_GPIO_DeInit+0x1c4>)
 80087f2:	68da      	ldr	r2, [r3, #12]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	43db      	mvns	r3, r3
 80087f8:	493d      	ldr	r1, [pc, #244]	; (80088f0 <HAL_GPIO_DeInit+0x1c4>)
 80087fa:	4013      	ands	r3, r2
 80087fc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80087fe:	4b3c      	ldr	r3, [pc, #240]	; (80088f0 <HAL_GPIO_DeInit+0x1c4>)
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	43db      	mvns	r3, r3
 8008806:	493a      	ldr	r1, [pc, #232]	; (80088f0 <HAL_GPIO_DeInit+0x1c4>)
 8008808:	4013      	ands	r3, r2
 800880a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f003 0303 	and.w	r3, r3, #3
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	220f      	movs	r2, #15
 8008816:	fa02 f303 	lsl.w	r3, r2, r3
 800881a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800881c:	4a2e      	ldr	r2, [pc, #184]	; (80088d8 <HAL_GPIO_DeInit+0x1ac>)
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	089b      	lsrs	r3, r3, #2
 8008822:	3302      	adds	r3, #2
 8008824:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	43da      	mvns	r2, r3
 800882c:	482a      	ldr	r0, [pc, #168]	; (80088d8 <HAL_GPIO_DeInit+0x1ac>)
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	089b      	lsrs	r3, r3, #2
 8008832:	400a      	ands	r2, r1
 8008834:	3302      	adds	r3, #2
 8008836:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	005b      	lsls	r3, r3, #1
 8008842:	2103      	movs	r1, #3
 8008844:	fa01 f303 	lsl.w	r3, r1, r3
 8008848:	43db      	mvns	r3, r3
 800884a:	401a      	ands	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	08da      	lsrs	r2, r3, #3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	3208      	adds	r2, #8
 8008858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f003 0307 	and.w	r3, r3, #7
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	220f      	movs	r2, #15
 8008866:	fa02 f303 	lsl.w	r3, r2, r3
 800886a:	43db      	mvns	r3, r3
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	08d2      	lsrs	r2, r2, #3
 8008870:	4019      	ands	r1, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	3208      	adds	r2, #8
 8008876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68da      	ldr	r2, [r3, #12]
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	2103      	movs	r1, #3
 8008884:	fa01 f303 	lsl.w	r3, r1, r3
 8008888:	43db      	mvns	r3, r3
 800888a:	401a      	ands	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	2101      	movs	r1, #1
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	fa01 f303 	lsl.w	r3, r1, r3
 800889c:	43db      	mvns	r3, r3
 800889e:	401a      	ands	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	689a      	ldr	r2, [r3, #8]
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	005b      	lsls	r3, r3, #1
 80088ac:	2103      	movs	r1, #3
 80088ae:	fa01 f303 	lsl.w	r3, r1, r3
 80088b2:	43db      	mvns	r3, r3
 80088b4:	401a      	ands	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	3301      	adds	r3, #1
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	2b0f      	cmp	r3, #15
 80088c4:	f67f af40 	bls.w	8008748 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80088c8:	bf00      	nop
 80088ca:	bf00      	nop
 80088cc:	371c      	adds	r7, #28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	40013800 	.word	0x40013800
 80088dc:	40020000 	.word	0x40020000
 80088e0:	40020400 	.word	0x40020400
 80088e4:	40020800 	.word	0x40020800
 80088e8:	40020c00 	.word	0x40020c00
 80088ec:	40021000 	.word	0x40021000
 80088f0:	40013c00 	.word	0x40013c00

080088f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	460b      	mov	r3, r1
 80088fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691a      	ldr	r2, [r3, #16]
 8008904:	887b      	ldrh	r3, [r7, #2]
 8008906:	4013      	ands	r3, r2
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800890c:	2301      	movs	r3, #1
 800890e:	73fb      	strb	r3, [r7, #15]
 8008910:	e001      	b.n	8008916 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008912:	2300      	movs	r3, #0
 8008914:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008916:	7bfb      	ldrb	r3, [r7, #15]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	807b      	strh	r3, [r7, #2]
 8008930:	4613      	mov	r3, r2
 8008932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008934:	787b      	ldrb	r3, [r7, #1]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800893a:	887a      	ldrh	r2, [r7, #2]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008940:	e003      	b.n	800894a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008942:	887b      	ldrh	r3, [r7, #2]
 8008944:	041a      	lsls	r2, r3, #16
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	619a      	str	r2, [r3, #24]
}
 800894a:	bf00      	nop
 800894c:	370c      	adds	r7, #12
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008956:	b480      	push	{r7}
 8008958:	b085      	sub	sp, #20
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	460b      	mov	r3, r1
 8008960:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008968:	887a      	ldrh	r2, [r7, #2]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	4013      	ands	r3, r2
 800896e:	041a      	lsls	r2, r3, #16
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	43d9      	mvns	r1, r3
 8008974:	887b      	ldrh	r3, [r7, #2]
 8008976:	400b      	ands	r3, r1
 8008978:	431a      	orrs	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	619a      	str	r2, [r3, #24]
}
 800897e:	bf00      	nop
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
	...

0800898c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e12b      	b.n	8008bf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d106      	bne.n	80089b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f7fb fbf6 	bl	80041a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2224      	movs	r2, #36	; 0x24
 80089bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 0201 	bic.w	r2, r2, #1
 80089ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80089f0:	f004 fd26 	bl	800d440 <HAL_RCC_GetPCLK1Freq>
 80089f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	4a81      	ldr	r2, [pc, #516]	; (8008c00 <HAL_I2C_Init+0x274>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d807      	bhi.n	8008a10 <HAL_I2C_Init+0x84>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4a80      	ldr	r2, [pc, #512]	; (8008c04 <HAL_I2C_Init+0x278>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	bf94      	ite	ls
 8008a08:	2301      	movls	r3, #1
 8008a0a:	2300      	movhi	r3, #0
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	e006      	b.n	8008a1e <HAL_I2C_Init+0x92>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4a7d      	ldr	r2, [pc, #500]	; (8008c08 <HAL_I2C_Init+0x27c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	bf94      	ite	ls
 8008a18:	2301      	movls	r3, #1
 8008a1a:	2300      	movhi	r3, #0
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e0e7      	b.n	8008bf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	4a78      	ldr	r2, [pc, #480]	; (8008c0c <HAL_I2C_Init+0x280>)
 8008a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a2e:	0c9b      	lsrs	r3, r3, #18
 8008a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	6a1b      	ldr	r3, [r3, #32]
 8008a4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	4a6a      	ldr	r2, [pc, #424]	; (8008c00 <HAL_I2C_Init+0x274>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d802      	bhi.n	8008a60 <HAL_I2C_Init+0xd4>
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	e009      	b.n	8008a74 <HAL_I2C_Init+0xe8>
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008a66:	fb02 f303 	mul.w	r3, r2, r3
 8008a6a:	4a69      	ldr	r2, [pc, #420]	; (8008c10 <HAL_I2C_Init+0x284>)
 8008a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a70:	099b      	lsrs	r3, r3, #6
 8008a72:	3301      	adds	r3, #1
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	6812      	ldr	r2, [r2, #0]
 8008a78:	430b      	orrs	r3, r1
 8008a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008a86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	495c      	ldr	r1, [pc, #368]	; (8008c00 <HAL_I2C_Init+0x274>)
 8008a90:	428b      	cmp	r3, r1
 8008a92:	d819      	bhi.n	8008ac8 <HAL_I2C_Init+0x13c>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	1e59      	subs	r1, r3, #1
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	005b      	lsls	r3, r3, #1
 8008a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008aa2:	1c59      	adds	r1, r3, #1
 8008aa4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008aa8:	400b      	ands	r3, r1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00a      	beq.n	8008ac4 <HAL_I2C_Init+0x138>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	1e59      	subs	r1, r3, #1
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	005b      	lsls	r3, r3, #1
 8008ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8008abc:	3301      	adds	r3, #1
 8008abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ac2:	e051      	b.n	8008b68 <HAL_I2C_Init+0x1dc>
 8008ac4:	2304      	movs	r3, #4
 8008ac6:	e04f      	b.n	8008b68 <HAL_I2C_Init+0x1dc>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d111      	bne.n	8008af4 <HAL_I2C_Init+0x168>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	1e58      	subs	r0, r3, #1
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6859      	ldr	r1, [r3, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	005b      	lsls	r3, r3, #1
 8008adc:	440b      	add	r3, r1
 8008ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	bf0c      	ite	eq
 8008aec:	2301      	moveq	r3, #1
 8008aee:	2300      	movne	r3, #0
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	e012      	b.n	8008b1a <HAL_I2C_Init+0x18e>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	1e58      	subs	r0, r3, #1
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6859      	ldr	r1, [r3, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	440b      	add	r3, r1
 8008b02:	0099      	lsls	r1, r3, #2
 8008b04:	440b      	add	r3, r1
 8008b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	bf0c      	ite	eq
 8008b14:	2301      	moveq	r3, #1
 8008b16:	2300      	movne	r3, #0
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <HAL_I2C_Init+0x196>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e022      	b.n	8008b68 <HAL_I2C_Init+0x1dc>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10e      	bne.n	8008b48 <HAL_I2C_Init+0x1bc>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	1e58      	subs	r0, r3, #1
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6859      	ldr	r1, [r3, #4]
 8008b32:	460b      	mov	r3, r1
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	440b      	add	r3, r1
 8008b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b46:	e00f      	b.n	8008b68 <HAL_I2C_Init+0x1dc>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	1e58      	subs	r0, r3, #1
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6859      	ldr	r1, [r3, #4]
 8008b50:	460b      	mov	r3, r1
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	440b      	add	r3, r1
 8008b56:	0099      	lsls	r1, r3, #2
 8008b58:	440b      	add	r3, r1
 8008b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b5e:	3301      	adds	r3, #1
 8008b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b68:	6879      	ldr	r1, [r7, #4]
 8008b6a:	6809      	ldr	r1, [r1, #0]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	69da      	ldr	r2, [r3, #28]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	431a      	orrs	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	430a      	orrs	r2, r1
 8008b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008b96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	6911      	ldr	r1, [r2, #16]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	68d2      	ldr	r2, [r2, #12]
 8008ba2:	4311      	orrs	r1, r2
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	6812      	ldr	r2, [r2, #0]
 8008ba8:	430b      	orrs	r3, r1
 8008baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	695a      	ldr	r2, [r3, #20]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	431a      	orrs	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f042 0201 	orr.w	r2, r2, #1
 8008bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	000186a0 	.word	0x000186a0
 8008c04:	001e847f 	.word	0x001e847f
 8008c08:	003d08ff 	.word	0x003d08ff
 8008c0c:	431bde83 	.word	0x431bde83
 8008c10:	10624dd3 	.word	0x10624dd3

08008c14 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d101      	bne.n	8008c26 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e021      	b.n	8008c6a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2224      	movs	r2, #36	; 0x24
 8008c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f022 0201 	bic.w	r2, r2, #1
 8008c3c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7fb fb18 	bl	8004274 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	695b      	ldr	r3, [r3, #20]
 8008c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c84:	2b80      	cmp	r3, #128	; 0x80
 8008c86:	d103      	bne.n	8008c90 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	611a      	str	r2, [r3, #16]
  }
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af02      	add	r7, sp, #8
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	4608      	mov	r0, r1
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	461a      	mov	r2, r3
 8008caa:	4603      	mov	r3, r0
 8008cac:	817b      	strh	r3, [r7, #10]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	813b      	strh	r3, [r7, #8]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008cb6:	f7fe fb4f 	bl	8007358 <HAL_GetTick>
 8008cba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b20      	cmp	r3, #32
 8008cc6:	f040 80d9 	bne.w	8008e7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	2319      	movs	r3, #25
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	496d      	ldr	r1, [pc, #436]	; (8008e88 <HAL_I2C_Mem_Write+0x1ec>)
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f002 fa35 	bl	800b144 <I2C_WaitOnFlagUntilTimeout>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	e0cc      	b.n	8008e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d101      	bne.n	8008cf2 <HAL_I2C_Mem_Write+0x56>
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e0c5      	b.n	8008e7e <HAL_I2C_Mem_Write+0x1e2>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d007      	beq.n	8008d18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f042 0201 	orr.w	r2, r2, #1
 8008d16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2221      	movs	r2, #33	; 0x21
 8008d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2240      	movs	r2, #64	; 0x40
 8008d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6a3a      	ldr	r2, [r7, #32]
 8008d42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008d48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4a4d      	ldr	r2, [pc, #308]	; (8008e8c <HAL_I2C_Mem_Write+0x1f0>)
 8008d58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008d5a:	88f8      	ldrh	r0, [r7, #6]
 8008d5c:	893a      	ldrh	r2, [r7, #8]
 8008d5e:	8979      	ldrh	r1, [r7, #10]
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	9301      	str	r3, [sp, #4]
 8008d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	4603      	mov	r3, r0
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f001 ffc4 	bl	800acf8 <I2C_RequestMemoryWrite>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d052      	beq.n	8008e1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e081      	b.n	8008e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f002 fafa 	bl	800b378 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00d      	beq.n	8008da6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8e:	2b04      	cmp	r3, #4
 8008d90:	d107      	bne.n	8008da2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008da0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e06b      	b.n	8008e7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	781a      	ldrb	r2, [r3, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db6:	1c5a      	adds	r2, r3, #1
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	695b      	ldr	r3, [r3, #20]
 8008ddc:	f003 0304 	and.w	r3, r3, #4
 8008de0:	2b04      	cmp	r3, #4
 8008de2:	d11b      	bne.n	8008e1c <HAL_I2C_Mem_Write+0x180>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d017      	beq.n	8008e1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	781a      	ldrb	r2, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e06:	3b01      	subs	r3, #1
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	3b01      	subs	r3, #1
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1aa      	bne.n	8008d7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f002 faed 	bl	800b408 <I2C_WaitOnBTFFlagUntilTimeout>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00d      	beq.n	8008e50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	d107      	bne.n	8008e4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e016      	b.n	8008e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2220      	movs	r2, #32
 8008e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	e000      	b.n	8008e7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008e7c:	2302      	movs	r3, #2
  }
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3718      	adds	r7, #24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	00100002 	.word	0x00100002
 8008e8c:	ffff0000 	.word	0xffff0000

08008e90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08c      	sub	sp, #48	; 0x30
 8008e94:	af02      	add	r7, sp, #8
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	4608      	mov	r0, r1
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	817b      	strh	r3, [r7, #10]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	813b      	strh	r3, [r7, #8]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008eaa:	f7fe fa55 	bl	8007358 <HAL_GetTick>
 8008eae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b20      	cmp	r3, #32
 8008eba:	f040 8214 	bne.w	80092e6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	2319      	movs	r3, #25
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	497b      	ldr	r1, [pc, #492]	; (80090b4 <HAL_I2C_Mem_Read+0x224>)
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f002 f93b 	bl	800b144 <I2C_WaitOnFlagUntilTimeout>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	e207      	b.n	80092e8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d101      	bne.n	8008ee6 <HAL_I2C_Mem_Read+0x56>
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	e200      	b.n	80092e8 <HAL_I2C_Mem_Read+0x458>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0301 	and.w	r3, r3, #1
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d007      	beq.n	8008f0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f042 0201 	orr.w	r2, r2, #1
 8008f0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2222      	movs	r2, #34	; 0x22
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2240      	movs	r2, #64	; 0x40
 8008f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	4a5b      	ldr	r2, [pc, #364]	; (80090b8 <HAL_I2C_Mem_Read+0x228>)
 8008f4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f4e:	88f8      	ldrh	r0, [r7, #6]
 8008f50:	893a      	ldrh	r2, [r7, #8]
 8008f52:	8979      	ldrh	r1, [r7, #10]
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	9301      	str	r3, [sp, #4]
 8008f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f001 ff60 	bl	800ae24 <I2C_RequestMemoryRead>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e1bc      	b.n	80092e8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d113      	bne.n	8008f9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f76:	2300      	movs	r3, #0
 8008f78:	623b      	str	r3, [r7, #32]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	623b      	str	r3, [r7, #32]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	623b      	str	r3, [r7, #32]
 8008f8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	e190      	b.n	80092c0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d11b      	bne.n	8008fde <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	61fb      	str	r3, [r7, #28]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	695b      	ldr	r3, [r3, #20]
 8008fc0:	61fb      	str	r3, [r7, #28]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	61fb      	str	r3, [r7, #28]
 8008fca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fda:	601a      	str	r2, [r3, #0]
 8008fdc:	e170      	b.n	80092c0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d11b      	bne.n	800901e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ff4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009004:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009006:	2300      	movs	r3, #0
 8009008:	61bb      	str	r3, [r7, #24]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	61bb      	str	r3, [r7, #24]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	61bb      	str	r3, [r7, #24]
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	e150      	b.n	80092c0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800901e:	2300      	movs	r3, #0
 8009020:	617b      	str	r3, [r7, #20]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	695b      	ldr	r3, [r3, #20]
 8009028:	617b      	str	r3, [r7, #20]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	617b      	str	r3, [r7, #20]
 8009032:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009034:	e144      	b.n	80092c0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800903a:	2b03      	cmp	r3, #3
 800903c:	f200 80f1 	bhi.w	8009222 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009044:	2b01      	cmp	r3, #1
 8009046:	d123      	bne.n	8009090 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800904a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f002 fa55 	bl	800b4fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e145      	b.n	80092e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	691a      	ldr	r2, [r3, #16]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	b2d2      	uxtb	r2, r2
 8009068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009078:	3b01      	subs	r3, #1
 800907a:	b29a      	uxth	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009084:	b29b      	uxth	r3, r3
 8009086:	3b01      	subs	r3, #1
 8009088:	b29a      	uxth	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800908e:	e117      	b.n	80092c0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009094:	2b02      	cmp	r3, #2
 8009096:	d14e      	bne.n	8009136 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	2200      	movs	r2, #0
 80090a0:	4906      	ldr	r1, [pc, #24]	; (80090bc <HAL_I2C_Mem_Read+0x22c>)
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f002 f84e 	bl	800b144 <I2C_WaitOnFlagUntilTimeout>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d008      	beq.n	80090c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e11a      	b.n	80092e8 <HAL_I2C_Mem_Read+0x458>
 80090b2:	bf00      	nop
 80090b4:	00100002 	.word	0x00100002
 80090b8:	ffff0000 	.word	0xffff0000
 80090bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	691a      	ldr	r2, [r3, #16]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090da:	b2d2      	uxtb	r2, r2
 80090dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ec:	3b01      	subs	r3, #1
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	3b01      	subs	r3, #1
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	691a      	ldr	r2, [r3, #16]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	b2d2      	uxtb	r2, r2
 800910e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	1c5a      	adds	r2, r3, #1
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800911e:	3b01      	subs	r3, #1
 8009120:	b29a      	uxth	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800912a:	b29b      	uxth	r3, r3
 800912c:	3b01      	subs	r3, #1
 800912e:	b29a      	uxth	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009134:	e0c4      	b.n	80092c0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	2200      	movs	r2, #0
 800913e:	496c      	ldr	r1, [pc, #432]	; (80092f0 <HAL_I2C_Mem_Read+0x460>)
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f001 ffff 	bl	800b144 <I2C_WaitOnFlagUntilTimeout>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e0cb      	b.n	80092e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800915e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	691a      	ldr	r2, [r3, #16]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916a:	b2d2      	uxtb	r2, r2
 800916c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009172:	1c5a      	adds	r2, r3, #1
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800917c:	3b01      	subs	r3, #1
 800917e:	b29a      	uxth	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009188:	b29b      	uxth	r3, r3
 800918a:	3b01      	subs	r3, #1
 800918c:	b29a      	uxth	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009198:	2200      	movs	r2, #0
 800919a:	4955      	ldr	r1, [pc, #340]	; (80092f0 <HAL_I2C_Mem_Read+0x460>)
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f001 ffd1 	bl	800b144 <I2C_WaitOnFlagUntilTimeout>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d001      	beq.n	80091ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e09d      	b.n	80092e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	691a      	ldr	r2, [r3, #16]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c6:	b2d2      	uxtb	r2, r2
 80091c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091d8:	3b01      	subs	r3, #1
 80091da:	b29a      	uxth	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	3b01      	subs	r3, #1
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	691a      	ldr	r2, [r3, #16]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f8:	b2d2      	uxtb	r2, r2
 80091fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	1c5a      	adds	r2, r3, #1
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800920a:	3b01      	subs	r3, #1
 800920c:	b29a      	uxth	r2, r3
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009216:	b29b      	uxth	r3, r3
 8009218:	3b01      	subs	r3, #1
 800921a:	b29a      	uxth	r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009220:	e04e      	b.n	80092c0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009224:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f002 f968 	bl	800b4fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e058      	b.n	80092e8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	691a      	ldr	r2, [r3, #16]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009240:	b2d2      	uxtb	r2, r2
 8009242:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009248:	1c5a      	adds	r2, r3, #1
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009252:	3b01      	subs	r3, #1
 8009254:	b29a      	uxth	r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800925e:	b29b      	uxth	r3, r3
 8009260:	3b01      	subs	r3, #1
 8009262:	b29a      	uxth	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	f003 0304 	and.w	r3, r3, #4
 8009272:	2b04      	cmp	r3, #4
 8009274:	d124      	bne.n	80092c0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800927a:	2b03      	cmp	r3, #3
 800927c:	d107      	bne.n	800928e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800928c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	691a      	ldr	r2, [r3, #16]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	b2d2      	uxtb	r2, r2
 800929a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a0:	1c5a      	adds	r2, r3, #1
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092aa:	3b01      	subs	r3, #1
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	3b01      	subs	r3, #1
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f47f aeb6 	bne.w	8009036 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2220      	movs	r2, #32
 80092ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	e000      	b.n	80092e8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80092e6:	2302      	movs	r3, #2
  }
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3728      	adds	r7, #40	; 0x28
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	00010004 	.word	0x00010004

080092f4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b08a      	sub	sp, #40	; 0x28
 80092f8:	af02      	add	r7, sp, #8
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	607a      	str	r2, [r7, #4]
 80092fe:	603b      	str	r3, [r7, #0]
 8009300:	460b      	mov	r3, r1
 8009302:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009304:	f7fe f828 	bl	8007358 <HAL_GetTick>
 8009308:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800930a:	2300      	movs	r3, #0
 800930c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b20      	cmp	r3, #32
 8009318:	f040 8111 	bne.w	800953e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	2319      	movs	r3, #25
 8009322:	2201      	movs	r2, #1
 8009324:	4988      	ldr	r1, [pc, #544]	; (8009548 <HAL_I2C_IsDeviceReady+0x254>)
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f001 ff0c 	bl	800b144 <I2C_WaitOnFlagUntilTimeout>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009332:	2302      	movs	r3, #2
 8009334:	e104      	b.n	8009540 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800933c:	2b01      	cmp	r3, #1
 800933e:	d101      	bne.n	8009344 <HAL_I2C_IsDeviceReady+0x50>
 8009340:	2302      	movs	r3, #2
 8009342:	e0fd      	b.n	8009540 <HAL_I2C_IsDeviceReady+0x24c>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0301 	and.w	r3, r3, #1
 8009356:	2b01      	cmp	r3, #1
 8009358:	d007      	beq.n	800936a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f042 0201 	orr.w	r2, r2, #1
 8009368:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009378:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2224      	movs	r2, #36	; 0x24
 800937e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4a70      	ldr	r2, [pc, #448]	; (800954c <HAL_I2C_IsDeviceReady+0x258>)
 800938c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800939c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f001 feca 	bl	800b144 <I2C_WaitOnFlagUntilTimeout>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00d      	beq.n	80093d2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093c4:	d103      	bne.n	80093ce <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093cc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e0b6      	b.n	8009540 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80093d2:	897b      	ldrh	r3, [r7, #10]
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	461a      	mov	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80093e0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80093e2:	f7fd ffb9 	bl	8007358 <HAL_GetTick>
 80093e6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	f003 0302 	and.w	r3, r3, #2
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	bf0c      	ite	eq
 80093f6:	2301      	moveq	r3, #1
 80093f8:	2300      	movne	r3, #0
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800940c:	bf0c      	ite	eq
 800940e:	2301      	moveq	r3, #1
 8009410:	2300      	movne	r3, #0
 8009412:	b2db      	uxtb	r3, r3
 8009414:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009416:	e025      	b.n	8009464 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009418:	f7fd ff9e 	bl	8007358 <HAL_GetTick>
 800941c:	4602      	mov	r2, r0
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	429a      	cmp	r2, r3
 8009426:	d302      	bcc.n	800942e <HAL_I2C_IsDeviceReady+0x13a>
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d103      	bne.n	8009436 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	22a0      	movs	r2, #160	; 0xa0
 8009432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	f003 0302 	and.w	r3, r3, #2
 8009440:	2b02      	cmp	r3, #2
 8009442:	bf0c      	ite	eq
 8009444:	2301      	moveq	r3, #1
 8009446:	2300      	movne	r3, #0
 8009448:	b2db      	uxtb	r3, r3
 800944a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800945a:	bf0c      	ite	eq
 800945c:	2301      	moveq	r3, #1
 800945e:	2300      	movne	r3, #0
 8009460:	b2db      	uxtb	r3, r3
 8009462:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2ba0      	cmp	r3, #160	; 0xa0
 800946e:	d005      	beq.n	800947c <HAL_I2C_IsDeviceReady+0x188>
 8009470:	7dfb      	ldrb	r3, [r7, #23]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d102      	bne.n	800947c <HAL_I2C_IsDeviceReady+0x188>
 8009476:	7dbb      	ldrb	r3, [r7, #22]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d0cd      	beq.n	8009418 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2220      	movs	r2, #32
 8009480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b02      	cmp	r3, #2
 8009490:	d129      	bne.n	80094e6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094a0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094a2:	2300      	movs	r3, #0
 80094a4:	613b      	str	r3, [r7, #16]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	613b      	str	r3, [r7, #16]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	613b      	str	r3, [r7, #16]
 80094b6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	2319      	movs	r3, #25
 80094be:	2201      	movs	r2, #1
 80094c0:	4921      	ldr	r1, [pc, #132]	; (8009548 <HAL_I2C_IsDeviceReady+0x254>)
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f001 fe3e 	bl	800b144 <I2C_WaitOnFlagUntilTimeout>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e036      	b.n	8009540 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	e02c      	b.n	8009540 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094f4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80094fe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	2319      	movs	r3, #25
 8009506:	2201      	movs	r2, #1
 8009508:	490f      	ldr	r1, [pc, #60]	; (8009548 <HAL_I2C_IsDeviceReady+0x254>)
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f001 fe1a 	bl	800b144 <I2C_WaitOnFlagUntilTimeout>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e012      	b.n	8009540 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	3301      	adds	r3, #1
 800951e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009520:	69ba      	ldr	r2, [r7, #24]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	429a      	cmp	r2, r3
 8009526:	f4ff af32 	bcc.w	800938e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2220      	movs	r2, #32
 800952e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e000      	b.n	8009540 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800953e:	2302      	movs	r3, #2
  }
}
 8009540:	4618      	mov	r0, r3
 8009542:	3720      	adds	r7, #32
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	00100002 	.word	0x00100002
 800954c:	ffff0000 	.word	0xffff0000

08009550 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8009558:	2300      	movs	r3, #0
 800955a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009568:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009570:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009578:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800957a:	7bfb      	ldrb	r3, [r7, #15]
 800957c:	2b10      	cmp	r3, #16
 800957e:	d003      	beq.n	8009588 <HAL_I2C_EV_IRQHandler+0x38>
 8009580:	7bfb      	ldrb	r3, [r7, #15]
 8009582:	2b40      	cmp	r3, #64	; 0x40
 8009584:	f040 80b1 	bne.w	80096ea <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10d      	bne.n	80095be <HAL_I2C_EV_IRQHandler+0x6e>
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80095a8:	d003      	beq.n	80095b2 <HAL_I2C_EV_IRQHandler+0x62>
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80095b0:	d101      	bne.n	80095b6 <HAL_I2C_EV_IRQHandler+0x66>
 80095b2:	2301      	movs	r3, #1
 80095b4:	e000      	b.n	80095b8 <HAL_I2C_EV_IRQHandler+0x68>
 80095b6:	2300      	movs	r3, #0
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	f000 8114 	beq.w	80097e6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00b      	beq.n	80095e0 <HAL_I2C_EV_IRQHandler+0x90>
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d006      	beq.n	80095e0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f002 f81e 	bl	800b614 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fd70 	bl	800a0be <I2C_Master_SB>
 80095de:	e083      	b.n	80096e8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	f003 0308 	and.w	r3, r3, #8
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d008      	beq.n	80095fc <HAL_I2C_EV_IRQHandler+0xac>
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d003      	beq.n	80095fc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fde8 	bl	800a1ca <I2C_Master_ADD10>
 80095fa:	e075      	b.n	80096e8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	f003 0302 	and.w	r3, r3, #2
 8009602:	2b00      	cmp	r3, #0
 8009604:	d008      	beq.n	8009618 <HAL_I2C_EV_IRQHandler+0xc8>
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 fe04 	bl	800a21e <I2C_Master_ADDR>
 8009616:	e067      	b.n	80096e8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	f003 0304 	and.w	r3, r3, #4
 800961e:	2b00      	cmp	r3, #0
 8009620:	d036      	beq.n	8009690 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800962c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009630:	f000 80db 	beq.w	80097ea <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00d      	beq.n	800965a <HAL_I2C_EV_IRQHandler+0x10a>
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009644:	2b00      	cmp	r3, #0
 8009646:	d008      	beq.n	800965a <HAL_I2C_EV_IRQHandler+0x10a>
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	f003 0304 	and.w	r3, r3, #4
 800964e:	2b00      	cmp	r3, #0
 8009650:	d103      	bne.n	800965a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f9cc 	bl	80099f0 <I2C_MasterTransmit_TXE>
 8009658:	e046      	b.n	80096e8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	f003 0304 	and.w	r3, r3, #4
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 80c2 	beq.w	80097ea <HAL_I2C_EV_IRQHandler+0x29a>
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800966c:	2b00      	cmp	r3, #0
 800966e:	f000 80bc 	beq.w	80097ea <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009672:	7bbb      	ldrb	r3, [r7, #14]
 8009674:	2b21      	cmp	r3, #33	; 0x21
 8009676:	d103      	bne.n	8009680 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fa55 	bl	8009b28 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800967e:	e0b4      	b.n	80097ea <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8009680:	7bfb      	ldrb	r3, [r7, #15]
 8009682:	2b40      	cmp	r3, #64	; 0x40
 8009684:	f040 80b1 	bne.w	80097ea <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fac3 	bl	8009c14 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800968e:	e0ac      	b.n	80097ea <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800969a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800969e:	f000 80a4 	beq.w	80097ea <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00d      	beq.n	80096c8 <HAL_I2C_EV_IRQHandler+0x178>
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d008      	beq.n	80096c8 <HAL_I2C_EV_IRQHandler+0x178>
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	f003 0304 	and.w	r3, r3, #4
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d103      	bne.n	80096c8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fb3f 	bl	8009d44 <I2C_MasterReceive_RXNE>
 80096c6:	e00f      	b.n	80096e8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	f003 0304 	and.w	r3, r3, #4
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f000 808b 	beq.w	80097ea <HAL_I2C_EV_IRQHandler+0x29a>
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f000 8085 	beq.w	80097ea <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fbf7 	bl	8009ed4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80096e6:	e080      	b.n	80097ea <HAL_I2C_EV_IRQHandler+0x29a>
 80096e8:	e07f      	b.n	80097ea <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d004      	beq.n	80096fc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	695b      	ldr	r3, [r3, #20]
 80096f8:	61fb      	str	r3, [r7, #28]
 80096fa:	e007      	b.n	800970c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b00      	cmp	r3, #0
 8009714:	d011      	beq.n	800973a <HAL_I2C_EV_IRQHandler+0x1ea>
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00c      	beq.n	800973a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009724:	2b00      	cmp	r3, #0
 8009726:	d003      	beq.n	8009730 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8009730:	69b9      	ldr	r1, [r7, #24]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 ffc2 	bl	800a6bc <I2C_Slave_ADDR>
 8009738:	e05a      	b.n	80097f0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	f003 0310 	and.w	r3, r3, #16
 8009740:	2b00      	cmp	r3, #0
 8009742:	d008      	beq.n	8009756 <HAL_I2C_EV_IRQHandler+0x206>
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fffc 	bl	800a74c <I2C_Slave_STOPF>
 8009754:	e04c      	b.n	80097f0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	2b21      	cmp	r3, #33	; 0x21
 800975a:	d002      	beq.n	8009762 <HAL_I2C_EV_IRQHandler+0x212>
 800975c:	7bbb      	ldrb	r3, [r7, #14]
 800975e:	2b29      	cmp	r3, #41	; 0x29
 8009760:	d120      	bne.n	80097a4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00d      	beq.n	8009788 <HAL_I2C_EV_IRQHandler+0x238>
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009772:	2b00      	cmp	r3, #0
 8009774:	d008      	beq.n	8009788 <HAL_I2C_EV_IRQHandler+0x238>
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	f003 0304 	and.w	r3, r3, #4
 800977c:	2b00      	cmp	r3, #0
 800977e:	d103      	bne.n	8009788 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fedd 	bl	800a540 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009786:	e032      	b.n	80097ee <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	f003 0304 	and.w	r3, r3, #4
 800978e:	2b00      	cmp	r3, #0
 8009790:	d02d      	beq.n	80097ee <HAL_I2C_EV_IRQHandler+0x29e>
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009798:	2b00      	cmp	r3, #0
 800979a:	d028      	beq.n	80097ee <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 ff0c 	bl	800a5ba <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80097a2:	e024      	b.n	80097ee <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00d      	beq.n	80097ca <HAL_I2C_EV_IRQHandler+0x27a>
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d008      	beq.n	80097ca <HAL_I2C_EV_IRQHandler+0x27a>
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	f003 0304 	and.w	r3, r3, #4
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d103      	bne.n	80097ca <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 ff1a 	bl	800a5fc <I2C_SlaveReceive_RXNE>
 80097c8:	e012      	b.n	80097f0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00d      	beq.n	80097f0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d008      	beq.n	80097f0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 ff4a 	bl	800a678 <I2C_SlaveReceive_BTF>
 80097e4:	e004      	b.n	80097f0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80097e6:	bf00      	nop
 80097e8:	e002      	b.n	80097f0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80097ea:	bf00      	nop
 80097ec:	e000      	b.n	80097f0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80097ee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80097f0:	3720      	adds	r7, #32
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b08a      	sub	sp, #40	; 0x28
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	695b      	ldr	r3, [r3, #20]
 8009804:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800980e:	2300      	movs	r3, #0
 8009810:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009818:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00d      	beq.n	8009840 <HAL_I2C_ER_IRQHandler+0x4a>
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800982a:	2b00      	cmp	r3, #0
 800982c:	d008      	beq.n	8009840 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009830:	f043 0301 	orr.w	r3, r3, #1
 8009834:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800983e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009840:	6a3b      	ldr	r3, [r7, #32]
 8009842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00d      	beq.n	8009866 <HAL_I2C_ER_IRQHandler+0x70>
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009850:	2b00      	cmp	r3, #0
 8009852:	d008      	beq.n	8009866 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	f043 0302 	orr.w	r3, r3, #2
 800985a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8009864:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800986c:	2b00      	cmp	r3, #0
 800986e:	d03e      	beq.n	80098ee <HAL_I2C_ER_IRQHandler+0xf8>
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009876:	2b00      	cmp	r3, #0
 8009878:	d039      	beq.n	80098ee <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800987a:	7efb      	ldrb	r3, [r7, #27]
 800987c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009882:	b29b      	uxth	r3, r3
 8009884:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800988c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009892:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009894:	7ebb      	ldrb	r3, [r7, #26]
 8009896:	2b20      	cmp	r3, #32
 8009898:	d112      	bne.n	80098c0 <HAL_I2C_ER_IRQHandler+0xca>
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10f      	bne.n	80098c0 <HAL_I2C_ER_IRQHandler+0xca>
 80098a0:	7cfb      	ldrb	r3, [r7, #19]
 80098a2:	2b21      	cmp	r3, #33	; 0x21
 80098a4:	d008      	beq.n	80098b8 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80098a6:	7cfb      	ldrb	r3, [r7, #19]
 80098a8:	2b29      	cmp	r3, #41	; 0x29
 80098aa:	d005      	beq.n	80098b8 <HAL_I2C_ER_IRQHandler+0xc2>
 80098ac:	7cfb      	ldrb	r3, [r7, #19]
 80098ae:	2b28      	cmp	r3, #40	; 0x28
 80098b0:	d106      	bne.n	80098c0 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2b21      	cmp	r3, #33	; 0x21
 80098b6:	d103      	bne.n	80098c0 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f001 f877 	bl	800a9ac <I2C_Slave_AF>
 80098be:	e016      	b.n	80098ee <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098c8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	f043 0304 	orr.w	r3, r3, #4
 80098d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80098d2:	7efb      	ldrb	r3, [r7, #27]
 80098d4:	2b10      	cmp	r3, #16
 80098d6:	d002      	beq.n	80098de <HAL_I2C_ER_IRQHandler+0xe8>
 80098d8:	7efb      	ldrb	r3, [r7, #27]
 80098da:	2b40      	cmp	r3, #64	; 0x40
 80098dc:	d107      	bne.n	80098ee <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098ec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00d      	beq.n	8009914 <HAL_I2C_ER_IRQHandler+0x11e>
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d008      	beq.n	8009914 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8009902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009904:	f043 0308 	orr.w	r3, r3, #8
 8009908:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8009912:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	2b00      	cmp	r3, #0
 8009918:	d008      	beq.n	800992c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800991e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009920:	431a      	orrs	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f001 f8b4 	bl	800aa94 <I2C_ITError>
  }
}
 800992c:	bf00      	nop
 800992e:	3728      	adds	r7, #40	; 0x28
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	460b      	mov	r3, r1
 800998e:	70fb      	strb	r3, [r7, #3]
 8009990:	4613      	mov	r3, r2
 8009992:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a06:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d150      	bne.n	8009ab8 <I2C_MasterTransmit_TXE+0xc8>
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
 8009a18:	2b21      	cmp	r3, #33	; 0x21
 8009a1a:	d14d      	bne.n	8009ab8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	2b08      	cmp	r3, #8
 8009a20:	d01d      	beq.n	8009a5e <I2C_MasterTransmit_TXE+0x6e>
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b20      	cmp	r3, #32
 8009a26:	d01a      	beq.n	8009a5e <I2C_MasterTransmit_TXE+0x6e>
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a2e:	d016      	beq.n	8009a5e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	685a      	ldr	r2, [r3, #4]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009a3e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2211      	movs	r2, #17
 8009a44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2220      	movs	r2, #32
 8009a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7ff ff6c 	bl	8009934 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009a5c:	e060      	b.n	8009b20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009a6c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a7c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2220      	movs	r2, #32
 8009a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	2b40      	cmp	r3, #64	; 0x40
 8009a96:	d107      	bne.n	8009aa8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f7ff ff87 	bl	80099b4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009aa6:	e03b      	b.n	8009b20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f7ff ff3f 	bl	8009934 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009ab6:	e033      	b.n	8009b20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
 8009aba:	2b21      	cmp	r3, #33	; 0x21
 8009abc:	d005      	beq.n	8009aca <I2C_MasterTransmit_TXE+0xda>
 8009abe:	7bbb      	ldrb	r3, [r7, #14]
 8009ac0:	2b40      	cmp	r3, #64	; 0x40
 8009ac2:	d12d      	bne.n	8009b20 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
 8009ac6:	2b22      	cmp	r3, #34	; 0x22
 8009ac8:	d12a      	bne.n	8009b20 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d108      	bne.n	8009ae6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ae2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009ae4:	e01c      	b.n	8009b20 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b40      	cmp	r3, #64	; 0x40
 8009af0:	d103      	bne.n	8009afa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f88e 	bl	8009c14 <I2C_MemoryTransmit_TXE_BTF>
}
 8009af8:	e012      	b.n	8009b20 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afe:	781a      	ldrb	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0a:	1c5a      	adds	r2, r3, #1
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	3b01      	subs	r3, #1
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009b1e:	e7ff      	b.n	8009b20 <I2C_MasterTransmit_TXE+0x130>
 8009b20:	bf00      	nop
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b34:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b21      	cmp	r3, #33	; 0x21
 8009b40:	d164      	bne.n	8009c0c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d012      	beq.n	8009b72 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b50:	781a      	ldrb	r2, [r3, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	1c5a      	adds	r2, r3, #1
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8009b70:	e04c      	b.n	8009c0c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2b08      	cmp	r3, #8
 8009b76:	d01d      	beq.n	8009bb4 <I2C_MasterTransmit_BTF+0x8c>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2b20      	cmp	r3, #32
 8009b7c:	d01a      	beq.n	8009bb4 <I2C_MasterTransmit_BTF+0x8c>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009b84:	d016      	beq.n	8009bb4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	685a      	ldr	r2, [r3, #4]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009b94:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2211      	movs	r2, #17
 8009b9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7ff fec1 	bl	8009934 <HAL_I2C_MasterTxCpltCallback>
}
 8009bb2:	e02b      	b.n	8009c0c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	685a      	ldr	r2, [r3, #4]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009bc2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bd2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2220      	movs	r2, #32
 8009bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b40      	cmp	r3, #64	; 0x40
 8009bec:	d107      	bne.n	8009bfe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7ff fedc 	bl	80099b4 <HAL_I2C_MemTxCpltCallback>
}
 8009bfc:	e006      	b.n	8009c0c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7ff fe94 	bl	8009934 <HAL_I2C_MasterTxCpltCallback>
}
 8009c0c:	bf00      	nop
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c22:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d11d      	bne.n	8009c68 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d10b      	bne.n	8009c4c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c44:	1c9a      	adds	r2, r3, #2
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8009c4a:	e077      	b.n	8009d3c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	121b      	asrs	r3, r3, #8
 8009c54:	b2da      	uxtb	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c60:	1c5a      	adds	r2, r3, #1
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009c66:	e069      	b.n	8009d3c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d10b      	bne.n	8009c88 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c74:	b2da      	uxtb	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009c86:	e059      	b.n	8009d3c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d152      	bne.n	8009d36 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
 8009c92:	2b22      	cmp	r3, #34	; 0x22
 8009c94:	d10d      	bne.n	8009cb2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ca4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009caa:	1c5a      	adds	r2, r3, #1
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009cb0:	e044      	b.n	8009d3c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d015      	beq.n	8009ce8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
 8009cbe:	2b21      	cmp	r3, #33	; 0x21
 8009cc0:	d112      	bne.n	8009ce8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc6:	781a      	ldrb	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009ce6:	e029      	b.n	8009d3c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d124      	bne.n	8009d3c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
 8009cf4:	2b21      	cmp	r3, #33	; 0x21
 8009cf6:	d121      	bne.n	8009d3c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	685a      	ldr	r2, [r3, #4]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009d06:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d16:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2220      	movs	r2, #32
 8009d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7ff fe40 	bl	80099b4 <HAL_I2C_MemTxCpltCallback>
}
 8009d34:	e002      	b.n	8009d3c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7fe ff9b 	bl	8008c72 <I2C_Flush_DR>
}
 8009d3c:	bf00      	nop
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	2b22      	cmp	r3, #34	; 0x22
 8009d56:	f040 80b9 	bne.w	8009ecc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2b03      	cmp	r3, #3
 8009d6c:	d921      	bls.n	8009db2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	691a      	ldr	r2, [r3, #16]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d78:	b2d2      	uxtb	r2, r2
 8009d7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d80:	1c5a      	adds	r2, r3, #1
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	2b03      	cmp	r3, #3
 8009d9c:	f040 8096 	bne.w	8009ecc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	685a      	ldr	r2, [r3, #4]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dae:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8009db0:	e08c      	b.n	8009ecc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d07f      	beq.n	8009eba <I2C_MasterReceive_RXNE+0x176>
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d002      	beq.n	8009dc6 <I2C_MasterReceive_RXNE+0x82>
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d179      	bne.n	8009eba <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f001 fb66 	bl	800b498 <I2C_WaitOnSTOPRequestThroughIT>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d14c      	bne.n	8009e6c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009de0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	685a      	ldr	r2, [r3, #4]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009df0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	691a      	ldr	r2, [r3, #16]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	b2d2      	uxtb	r2, r2
 8009dfe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e04:	1c5a      	adds	r2, r3, #1
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	3b01      	subs	r3, #1
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2220      	movs	r2, #32
 8009e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b40      	cmp	r3, #64	; 0x40
 8009e2a:	d10a      	bne.n	8009e42 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7ff fdc4 	bl	80099c8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009e40:	e044      	b.n	8009ecc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b08      	cmp	r3, #8
 8009e4e:	d002      	beq.n	8009e56 <I2C_MasterReceive_RXNE+0x112>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2b20      	cmp	r3, #32
 8009e54:	d103      	bne.n	8009e5e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8009e5c:	e002      	b.n	8009e64 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2212      	movs	r2, #18
 8009e62:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff fd6f 	bl	8009948 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009e6a:	e02f      	b.n	8009ecc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009e7a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	691a      	ldr	r2, [r3, #16]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e86:	b2d2      	uxtb	r2, r2
 8009e88:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	1c5a      	adds	r2, r3, #1
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2220      	movs	r2, #32
 8009ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7fa f96b 	bl	800418e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009eb8:	e008      	b.n	8009ecc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	685a      	ldr	r2, [r3, #4]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ec8:	605a      	str	r2, [r3, #4]
}
 8009eca:	e7ff      	b.n	8009ecc <I2C_MasterReceive_RXNE+0x188>
 8009ecc:	bf00      	nop
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	2b04      	cmp	r3, #4
 8009eea:	d11b      	bne.n	8009f24 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	685a      	ldr	r2, [r3, #4]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009efa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	691a      	ldr	r2, [r3, #16]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f06:	b2d2      	uxtb	r2, r2
 8009f08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	b29a      	uxth	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8009f22:	e0c8      	b.n	800a0b6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	2b03      	cmp	r3, #3
 8009f2c:	d129      	bne.n	8009f82 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f3c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2b04      	cmp	r3, #4
 8009f42:	d00a      	beq.n	8009f5a <I2C_MasterReceive_BTF+0x86>
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d007      	beq.n	8009f5a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f58:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	691a      	ldr	r2, [r3, #16]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f64:	b2d2      	uxtb	r2, r2
 8009f66:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6c:	1c5a      	adds	r2, r3, #1
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009f80:	e099      	b.n	800a0b6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	2b02      	cmp	r3, #2
 8009f8a:	f040 8081 	bne.w	800a090 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d002      	beq.n	8009f9a <I2C_MasterReceive_BTF+0xc6>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b10      	cmp	r3, #16
 8009f98:	d108      	bne.n	8009fac <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fa8:	601a      	str	r2, [r3, #0]
 8009faa:	e019      	b.n	8009fe0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	d002      	beq.n	8009fb8 <I2C_MasterReceive_BTF+0xe4>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d108      	bne.n	8009fca <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009fc6:	601a      	str	r2, [r3, #0]
 8009fc8:	e00a      	b.n	8009fe0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2b10      	cmp	r3, #16
 8009fce:	d007      	beq.n	8009fe0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fde:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	691a      	ldr	r2, [r3, #16]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fea:	b2d2      	uxtb	r2, r2
 8009fec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff2:	1c5a      	adds	r2, r3, #1
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	3b01      	subs	r3, #1
 800a000:	b29a      	uxth	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	691a      	ldr	r2, [r3, #16]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a010:	b2d2      	uxtb	r2, r2
 800a012:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a018:	1c5a      	adds	r2, r3, #1
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a022:	b29b      	uxth	r3, r3
 800a024:	3b01      	subs	r3, #1
 800a026:	b29a      	uxth	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685a      	ldr	r2, [r3, #4]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a03a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2220      	movs	r2, #32
 800a040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b40      	cmp	r3, #64	; 0x40
 800a04e:	d10a      	bne.n	800a066 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff fcb2 	bl	80099c8 <HAL_I2C_MemRxCpltCallback>
}
 800a064:	e027      	b.n	800a0b6 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2b08      	cmp	r3, #8
 800a072:	d002      	beq.n	800a07a <I2C_MasterReceive_BTF+0x1a6>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b20      	cmp	r3, #32
 800a078:	d103      	bne.n	800a082 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	631a      	str	r2, [r3, #48]	; 0x30
 800a080:	e002      	b.n	800a088 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2212      	movs	r2, #18
 800a086:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7ff fc5d 	bl	8009948 <HAL_I2C_MasterRxCpltCallback>
}
 800a08e:	e012      	b.n	800a0b6 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	691a      	ldr	r2, [r3, #16]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09a:	b2d2      	uxtb	r2, r2
 800a09c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a2:	1c5a      	adds	r2, r3, #1
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a0b6:	bf00      	nop
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800a0be:	b480      	push	{r7}
 800a0c0:	b083      	sub	sp, #12
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	2b40      	cmp	r3, #64	; 0x40
 800a0d0:	d117      	bne.n	800a102 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d109      	bne.n	800a0ee <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0ea:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800a0ec:	e067      	b.n	800a1be <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	f043 0301 	orr.w	r3, r3, #1
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	611a      	str	r2, [r3, #16]
}
 800a100:	e05d      	b.n	800a1be <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a10a:	d133      	bne.n	800a174 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b21      	cmp	r3, #33	; 0x21
 800a116:	d109      	bne.n	800a12c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	461a      	mov	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a128:	611a      	str	r2, [r3, #16]
 800a12a:	e008      	b.n	800a13e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a130:	b2db      	uxtb	r3, r3
 800a132:	f043 0301 	orr.w	r3, r3, #1
 800a136:	b2da      	uxtb	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a142:	2b00      	cmp	r3, #0
 800a144:	d004      	beq.n	800a150 <I2C_Master_SB+0x92>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a14a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d108      	bne.n	800a162 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a154:	2b00      	cmp	r3, #0
 800a156:	d032      	beq.n	800a1be <I2C_Master_SB+0x100>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d02d      	beq.n	800a1be <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a170:	605a      	str	r2, [r3, #4]
}
 800a172:	e024      	b.n	800a1be <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10e      	bne.n	800a19a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a180:	b29b      	uxth	r3, r3
 800a182:	11db      	asrs	r3, r3, #7
 800a184:	b2db      	uxtb	r3, r3
 800a186:	f003 0306 	and.w	r3, r3, #6
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	f063 030f 	orn	r3, r3, #15
 800a190:	b2da      	uxtb	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	611a      	str	r2, [r3, #16]
}
 800a198:	e011      	b.n	800a1be <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d10d      	bne.n	800a1be <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	11db      	asrs	r3, r3, #7
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	f003 0306 	and.w	r3, r3, #6
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	f063 030e 	orn	r3, r3, #14
 800a1b6:	b2da      	uxtb	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	611a      	str	r2, [r3, #16]
}
 800a1be:	bf00      	nop
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b083      	sub	sp, #12
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1d6:	b2da      	uxtb	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d004      	beq.n	800a1f0 <I2C_Master_ADD10+0x26>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d108      	bne.n	800a202 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00c      	beq.n	800a212 <I2C_Master_ADD10+0x48>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d007      	beq.n	800a212 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a210:	605a      	str	r2, [r3, #4]
  }
}
 800a212:	bf00      	nop
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800a21e:	b480      	push	{r7}
 800a220:	b091      	sub	sp, #68	; 0x44
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a22c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a234:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a242:	b2db      	uxtb	r3, r3
 800a244:	2b22      	cmp	r3, #34	; 0x22
 800a246:	f040 8169 	bne.w	800a51c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10f      	bne.n	800a272 <I2C_Master_ADDR+0x54>
 800a252:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a256:	2b40      	cmp	r3, #64	; 0x40
 800a258:	d10b      	bne.n	800a272 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a25a:	2300      	movs	r3, #0
 800a25c:	633b      	str	r3, [r7, #48]	; 0x30
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	695b      	ldr	r3, [r3, #20]
 800a264:	633b      	str	r3, [r7, #48]	; 0x30
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	699b      	ldr	r3, [r3, #24]
 800a26c:	633b      	str	r3, [r7, #48]	; 0x30
 800a26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a270:	e160      	b.n	800a534 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a276:	2b00      	cmp	r3, #0
 800a278:	d11d      	bne.n	800a2b6 <I2C_Master_ADDR+0x98>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a282:	d118      	bne.n	800a2b6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a284:	2300      	movs	r3, #0
 800a286:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a298:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2a8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2ae:	1c5a      	adds	r2, r3, #1
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	651a      	str	r2, [r3, #80]	; 0x50
 800a2b4:	e13e      	b.n	800a534 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d113      	bne.n	800a2e8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	695b      	ldr	r3, [r3, #20]
 800a2ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	e115      	b.n	800a514 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	f040 808a 	bne.w	800a408 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800a2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a2fa:	d137      	bne.n	800a36c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a30a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a31a:	d113      	bne.n	800a344 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a32a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a32c:	2300      	movs	r3, #0
 800a32e:	627b      	str	r3, [r7, #36]	; 0x24
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	627b      	str	r3, [r7, #36]	; 0x24
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	699b      	ldr	r3, [r3, #24]
 800a33e:	627b      	str	r3, [r7, #36]	; 0x24
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	e0e7      	b.n	800a514 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a344:	2300      	movs	r3, #0
 800a346:	623b      	str	r3, [r7, #32]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	695b      	ldr	r3, [r3, #20]
 800a34e:	623b      	str	r3, [r7, #32]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	623b      	str	r3, [r7, #32]
 800a358:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a368:	601a      	str	r2, [r3, #0]
 800a36a:	e0d3      	b.n	800a514 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36e:	2b08      	cmp	r3, #8
 800a370:	d02e      	beq.n	800a3d0 <I2C_Master_ADDR+0x1b2>
 800a372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a374:	2b20      	cmp	r3, #32
 800a376:	d02b      	beq.n	800a3d0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800a378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a37a:	2b12      	cmp	r3, #18
 800a37c:	d102      	bne.n	800a384 <I2C_Master_ADDR+0x166>
 800a37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a380:	2b01      	cmp	r3, #1
 800a382:	d125      	bne.n	800a3d0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800a384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a386:	2b04      	cmp	r3, #4
 800a388:	d00e      	beq.n	800a3a8 <I2C_Master_ADDR+0x18a>
 800a38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d00b      	beq.n	800a3a8 <I2C_Master_ADDR+0x18a>
 800a390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a392:	2b10      	cmp	r3, #16
 800a394:	d008      	beq.n	800a3a8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3a4:	601a      	str	r2, [r3, #0]
 800a3a6:	e007      	b.n	800a3b8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a3b6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	61fb      	str	r3, [r7, #28]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	695b      	ldr	r3, [r3, #20]
 800a3c2:	61fb      	str	r3, [r7, #28]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	699b      	ldr	r3, [r3, #24]
 800a3ca:	61fb      	str	r3, [r7, #28]
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	e0a1      	b.n	800a514 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3de:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	61bb      	str	r3, [r7, #24]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	61bb      	str	r3, [r7, #24]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	61bb      	str	r3, [r7, #24]
 800a3f4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a404:	601a      	str	r2, [r3, #0]
 800a406:	e085      	b.n	800a514 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d14d      	bne.n	800a4ae <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800a412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a414:	2b04      	cmp	r3, #4
 800a416:	d016      	beq.n	800a446 <I2C_Master_ADDR+0x228>
 800a418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d013      	beq.n	800a446 <I2C_Master_ADDR+0x228>
 800a41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a420:	2b10      	cmp	r3, #16
 800a422:	d010      	beq.n	800a446 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a432:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	e007      	b.n	800a456 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a454:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a464:	d117      	bne.n	800a496 <I2C_Master_ADDR+0x278>
 800a466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a468:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a46c:	d00b      	beq.n	800a486 <I2C_Master_ADDR+0x268>
 800a46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a470:	2b01      	cmp	r3, #1
 800a472:	d008      	beq.n	800a486 <I2C_Master_ADDR+0x268>
 800a474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a476:	2b08      	cmp	r3, #8
 800a478:	d005      	beq.n	800a486 <I2C_Master_ADDR+0x268>
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	2b10      	cmp	r3, #16
 800a47e:	d002      	beq.n	800a486 <I2C_Master_ADDR+0x268>
 800a480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a482:	2b20      	cmp	r3, #32
 800a484:	d107      	bne.n	800a496 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a494:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a496:	2300      	movs	r3, #0
 800a498:	617b      	str	r3, [r7, #20]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	695b      	ldr	r3, [r3, #20]
 800a4a0:	617b      	str	r3, [r7, #20]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	699b      	ldr	r3, [r3, #24]
 800a4a8:	617b      	str	r3, [r7, #20]
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	e032      	b.n	800a514 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a4bc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4cc:	d117      	bne.n	800a4fe <I2C_Master_ADDR+0x2e0>
 800a4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a4d4:	d00b      	beq.n	800a4ee <I2C_Master_ADDR+0x2d0>
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d008      	beq.n	800a4ee <I2C_Master_ADDR+0x2d0>
 800a4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4de:	2b08      	cmp	r3, #8
 800a4e0:	d005      	beq.n	800a4ee <I2C_Master_ADDR+0x2d0>
 800a4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e4:	2b10      	cmp	r3, #16
 800a4e6:	d002      	beq.n	800a4ee <I2C_Master_ADDR+0x2d0>
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ea:	2b20      	cmp	r3, #32
 800a4ec:	d107      	bne.n	800a4fe <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a4fc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4fe:	2300      	movs	r3, #0
 800a500:	613b      	str	r3, [r7, #16]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	613b      	str	r3, [r7, #16]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	699b      	ldr	r3, [r3, #24]
 800a510:	613b      	str	r3, [r7, #16]
 800a512:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800a51a:	e00b      	b.n	800a534 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a51c:	2300      	movs	r3, #0
 800a51e:	60fb      	str	r3, [r7, #12]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	695b      	ldr	r3, [r3, #20]
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	699b      	ldr	r3, [r3, #24]
 800a52e:	60fb      	str	r3, [r7, #12]
 800a530:	68fb      	ldr	r3, [r7, #12]
}
 800a532:	e7ff      	b.n	800a534 <I2C_Master_ADDR+0x316>
 800a534:	bf00      	nop
 800a536:	3744      	adds	r7, #68	; 0x44
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a54e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a554:	b29b      	uxth	r3, r3
 800a556:	2b00      	cmp	r3, #0
 800a558:	d02b      	beq.n	800a5b2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55e:	781a      	ldrb	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56a:	1c5a      	adds	r2, r3, #1
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a574:	b29b      	uxth	r3, r3
 800a576:	3b01      	subs	r3, #1
 800a578:	b29a      	uxth	r2, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a582:	b29b      	uxth	r3, r3
 800a584:	2b00      	cmp	r3, #0
 800a586:	d114      	bne.n	800a5b2 <I2C_SlaveTransmit_TXE+0x72>
 800a588:	7bfb      	ldrb	r3, [r7, #15]
 800a58a:	2b29      	cmp	r3, #41	; 0x29
 800a58c:	d111      	bne.n	800a5b2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	685a      	ldr	r2, [r3, #4]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a59c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2221      	movs	r2, #33	; 0x21
 800a5a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2228      	movs	r2, #40	; 0x28
 800a5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f7ff f9d5 	bl	800995c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a5b2:	bf00      	nop
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b083      	sub	sp, #12
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d011      	beq.n	800a5f0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d0:	781a      	ldrb	r2, [r3, #0]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5dc:	1c5a      	adds	r2, r3, #1
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a60a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a610:	b29b      	uxth	r3, r3
 800a612:	2b00      	cmp	r3, #0
 800a614:	d02c      	beq.n	800a670 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	691a      	ldr	r2, [r3, #16]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a620:	b2d2      	uxtb	r2, r2
 800a622:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a628:	1c5a      	adds	r2, r3, #1
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a632:	b29b      	uxth	r3, r3
 800a634:	3b01      	subs	r3, #1
 800a636:	b29a      	uxth	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a640:	b29b      	uxth	r3, r3
 800a642:	2b00      	cmp	r3, #0
 800a644:	d114      	bne.n	800a670 <I2C_SlaveReceive_RXNE+0x74>
 800a646:	7bfb      	ldrb	r3, [r7, #15]
 800a648:	2b2a      	cmp	r3, #42	; 0x2a
 800a64a:	d111      	bne.n	800a670 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	685a      	ldr	r2, [r3, #4]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a65a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2222      	movs	r2, #34	; 0x22
 800a660:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2228      	movs	r2, #40	; 0x28
 800a666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7ff f980 	bl	8009970 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a670:	bf00      	nop
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a684:	b29b      	uxth	r3, r3
 800a686:	2b00      	cmp	r3, #0
 800a688:	d012      	beq.n	800a6b0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	691a      	ldr	r2, [r3, #16]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	b2d2      	uxtb	r2, r2
 800a696:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69c:	1c5a      	adds	r2, r3, #1
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a6d6:	2b28      	cmp	r3, #40	; 0x28
 800a6d8:	d125      	bne.n	800a726 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	685a      	ldr	r2, [r3, #4]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6e8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	f003 0304 	and.w	r3, r3, #4
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d101      	bne.n	800a6f8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d103      	bne.n	800a70a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	81bb      	strh	r3, [r7, #12]
 800a708:	e002      	b.n	800a710 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800a718:	89ba      	ldrh	r2, [r7, #12]
 800a71a:	7bfb      	ldrb	r3, [r7, #15]
 800a71c:	4619      	mov	r1, r3
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7ff f930 	bl	8009984 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a724:	e00e      	b.n	800a744 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a726:	2300      	movs	r3, #0
 800a728:	60bb      	str	r3, [r7, #8]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	60bb      	str	r3, [r7, #8]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	699b      	ldr	r3, [r3, #24]
 800a738:	60bb      	str	r3, [r7, #8]
 800a73a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800a744:	bf00      	nop
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a75a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a76a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800a76c:	2300      	movs	r3, #0
 800a76e:	60bb      	str	r3, [r7, #8]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	695b      	ldr	r3, [r3, #20]
 800a776:	60bb      	str	r3, [r7, #8]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f042 0201 	orr.w	r2, r2, #1
 800a786:	601a      	str	r2, [r3, #0]
 800a788:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a798:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7a8:	d172      	bne.n	800a890 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
 800a7ac:	2b22      	cmp	r3, #34	; 0x22
 800a7ae:	d002      	beq.n	800a7b6 <I2C_Slave_STOPF+0x6a>
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7b4:	d135      	bne.n	800a822 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	b29a      	uxth	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d005      	beq.n	800a7da <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d2:	f043 0204 	orr.w	r2, r3, #4
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fd fa36 	bl	8007c60 <HAL_DMA_GetState>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d049      	beq.n	800a88e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fe:	4a69      	ldr	r2, [pc, #420]	; (800a9a4 <I2C_Slave_STOPF+0x258>)
 800a800:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a806:	4618      	mov	r0, r3
 800a808:	f7fd f87e 	bl	8007908 <HAL_DMA_Abort_IT>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d03d      	beq.n	800a88e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a81c:	4610      	mov	r0, r2
 800a81e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a820:	e035      	b.n	800a88e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	b29a      	uxth	r2, r3
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a834:	b29b      	uxth	r3, r3
 800a836:	2b00      	cmp	r3, #0
 800a838:	d005      	beq.n	800a846 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83e:	f043 0204 	orr.w	r2, r3, #4
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	685a      	ldr	r2, [r3, #4]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a854:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fd fa00 	bl	8007c60 <HAL_DMA_GetState>
 800a860:	4603      	mov	r3, r0
 800a862:	2b01      	cmp	r3, #1
 800a864:	d014      	beq.n	800a890 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a86a:	4a4e      	ldr	r2, [pc, #312]	; (800a9a4 <I2C_Slave_STOPF+0x258>)
 800a86c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a872:	4618      	mov	r0, r3
 800a874:	f7fd f848 	bl	8007908 <HAL_DMA_Abort_IT>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d008      	beq.n	800a890 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a888:	4610      	mov	r0, r2
 800a88a:	4798      	blx	r3
 800a88c:	e000      	b.n	800a890 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a88e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a894:	b29b      	uxth	r3, r3
 800a896:	2b00      	cmp	r3, #0
 800a898:	d03e      	beq.n	800a918 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	695b      	ldr	r3, [r3, #20]
 800a8a0:	f003 0304 	and.w	r3, r3, #4
 800a8a4:	2b04      	cmp	r3, #4
 800a8a6:	d112      	bne.n	800a8ce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	691a      	ldr	r2, [r3, #16]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b2:	b2d2      	uxtb	r2, r2
 800a8b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ba:	1c5a      	adds	r2, r3, #1
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	695b      	ldr	r3, [r3, #20]
 800a8d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8d8:	2b40      	cmp	r3, #64	; 0x40
 800a8da:	d112      	bne.n	800a902 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	691a      	ldr	r2, [r3, #16]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e6:	b2d2      	uxtb	r2, r2
 800a8e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ee:	1c5a      	adds	r2, r3, #1
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a906:	b29b      	uxth	r3, r3
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d005      	beq.n	800a918 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a910:	f043 0204 	orr.w	r2, r3, #4
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d003      	beq.n	800a928 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 f8b7 	bl	800aa94 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800a926:	e039      	b.n	800a99c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a928:	7bfb      	ldrb	r3, [r7, #15]
 800a92a:	2b2a      	cmp	r3, #42	; 0x2a
 800a92c:	d109      	bne.n	800a942 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2228      	movs	r2, #40	; 0x28
 800a938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7ff f817 	bl	8009970 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	2b28      	cmp	r3, #40	; 0x28
 800a94c:	d111      	bne.n	800a972 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a15      	ldr	r2, [pc, #84]	; (800a9a8 <I2C_Slave_STOPF+0x25c>)
 800a952:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2220      	movs	r2, #32
 800a95e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff f818 	bl	80099a0 <HAL_I2C_ListenCpltCallback>
}
 800a970:	e014      	b.n	800a99c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a976:	2b22      	cmp	r3, #34	; 0x22
 800a978:	d002      	beq.n	800a980 <I2C_Slave_STOPF+0x234>
 800a97a:	7bfb      	ldrb	r3, [r7, #15]
 800a97c:	2b22      	cmp	r3, #34	; 0x22
 800a97e:	d10d      	bne.n	800a99c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2220      	movs	r2, #32
 800a98a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7fe ffea 	bl	8009970 <HAL_I2C_SlaveRxCpltCallback>
}
 800a99c:	bf00      	nop
 800a99e:	3710      	adds	r7, #16
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	0800aff5 	.word	0x0800aff5
 800a9a8:	ffff0000 	.word	0xffff0000

0800a9ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	2b08      	cmp	r3, #8
 800a9c6:	d002      	beq.n	800a9ce <I2C_Slave_AF+0x22>
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	2b20      	cmp	r3, #32
 800a9cc:	d129      	bne.n	800aa22 <I2C_Slave_AF+0x76>
 800a9ce:	7bfb      	ldrb	r3, [r7, #15]
 800a9d0:	2b28      	cmp	r3, #40	; 0x28
 800a9d2:	d126      	bne.n	800aa22 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4a2e      	ldr	r2, [pc, #184]	; (800aa90 <I2C_Slave_AF+0xe4>)
 800a9d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	685a      	ldr	r2, [r3, #4]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a9e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a9f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa02:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2220      	movs	r2, #32
 800aa0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7fe ffc0 	bl	80099a0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800aa20:	e031      	b.n	800aa86 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
 800aa24:	2b21      	cmp	r3, #33	; 0x21
 800aa26:	d129      	bne.n	800aa7c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a19      	ldr	r2, [pc, #100]	; (800aa90 <I2C_Slave_AF+0xe4>)
 800aa2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2221      	movs	r2, #33	; 0x21
 800aa32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2220      	movs	r2, #32
 800aa38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	685a      	ldr	r2, [r3, #4]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800aa52:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aa5c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa6c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7fe f8ff 	bl	8008c72 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7fe ff71 	bl	800995c <HAL_I2C_SlaveTxCpltCallback>
}
 800aa7a:	e004      	b.n	800aa86 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aa84:	615a      	str	r2, [r3, #20]
}
 800aa86:	bf00      	nop
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	ffff0000 	.word	0xffff0000

0800aa94 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaa2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aaaa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
 800aaae:	2b10      	cmp	r3, #16
 800aab0:	d002      	beq.n	800aab8 <I2C_ITError+0x24>
 800aab2:	7bbb      	ldrb	r3, [r7, #14]
 800aab4:	2b40      	cmp	r3, #64	; 0x40
 800aab6:	d10a      	bne.n	800aace <I2C_ITError+0x3a>
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
 800aaba:	2b22      	cmp	r3, #34	; 0x22
 800aabc:	d107      	bne.n	800aace <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aacc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800aace:	7bfb      	ldrb	r3, [r7, #15]
 800aad0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aad4:	2b28      	cmp	r3, #40	; 0x28
 800aad6:	d107      	bne.n	800aae8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2228      	movs	r2, #40	; 0x28
 800aae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800aae6:	e015      	b.n	800ab14 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aaf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaf6:	d00a      	beq.n	800ab0e <I2C_ITError+0x7a>
 800aaf8:	7bfb      	ldrb	r3, [r7, #15]
 800aafa:	2b60      	cmp	r3, #96	; 0x60
 800aafc:	d007      	beq.n	800ab0e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2220      	movs	r2, #32
 800ab02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab22:	d162      	bne.n	800abea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab32:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d020      	beq.n	800ab84 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab46:	4a6a      	ldr	r2, [pc, #424]	; (800acf0 <I2C_ITError+0x25c>)
 800ab48:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fc feda 	bl	8007908 <HAL_DMA_Abort_IT>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f000 8089 	beq.w	800ac6e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f022 0201 	bic.w	r2, r2, #1
 800ab6a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2220      	movs	r2, #32
 800ab70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ab7e:	4610      	mov	r0, r2
 800ab80:	4798      	blx	r3
 800ab82:	e074      	b.n	800ac6e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab88:	4a59      	ldr	r2, [pc, #356]	; (800acf0 <I2C_ITError+0x25c>)
 800ab8a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7fc feb9 	bl	8007908 <HAL_DMA_Abort_IT>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d068      	beq.n	800ac6e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	695b      	ldr	r3, [r3, #20]
 800aba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aba6:	2b40      	cmp	r3, #64	; 0x40
 800aba8:	d10b      	bne.n	800abc2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	691a      	ldr	r2, [r3, #16]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb4:	b2d2      	uxtb	r2, r2
 800abb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbc:	1c5a      	adds	r2, r3, #1
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f022 0201 	bic.w	r2, r2, #1
 800abd0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2220      	movs	r2, #32
 800abd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800abe4:	4610      	mov	r0, r2
 800abe6:	4798      	blx	r3
 800abe8:	e041      	b.n	800ac6e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	2b60      	cmp	r3, #96	; 0x60
 800abf4:	d125      	bne.n	800ac42 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2220      	movs	r2, #32
 800abfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac0e:	2b40      	cmp	r3, #64	; 0x40
 800ac10:	d10b      	bne.n	800ac2a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	691a      	ldr	r2, [r3, #16]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1c:	b2d2      	uxtb	r2, r2
 800ac1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac24:	1c5a      	adds	r2, r3, #1
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f022 0201 	bic.w	r2, r2, #1
 800ac38:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7fe fece 	bl	80099dc <HAL_I2C_AbortCpltCallback>
 800ac40:	e015      	b.n	800ac6e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	695b      	ldr	r3, [r3, #20]
 800ac48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4c:	2b40      	cmp	r3, #64	; 0x40
 800ac4e:	d10b      	bne.n	800ac68 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	691a      	ldr	r2, [r3, #16]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5a:	b2d2      	uxtb	r2, r2
 800ac5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac62:	1c5a      	adds	r2, r3, #1
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7f9 fa90 	bl	800418e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac72:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	f003 0301 	and.w	r3, r3, #1
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10e      	bne.n	800ac9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d109      	bne.n	800ac9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d104      	bne.n	800ac9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d007      	beq.n	800acac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	685a      	ldr	r2, [r3, #4]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800acaa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acb2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb8:	f003 0304 	and.w	r3, r3, #4
 800acbc:	2b04      	cmp	r3, #4
 800acbe:	d113      	bne.n	800ace8 <I2C_ITError+0x254>
 800acc0:	7bfb      	ldrb	r3, [r7, #15]
 800acc2:	2b28      	cmp	r3, #40	; 0x28
 800acc4:	d110      	bne.n	800ace8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a0a      	ldr	r2, [pc, #40]	; (800acf4 <I2C_ITError+0x260>)
 800acca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2220      	movs	r2, #32
 800acd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7fe fe5c 	bl	80099a0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ace8:	bf00      	nop
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	0800aff5 	.word	0x0800aff5
 800acf4:	ffff0000 	.word	0xffff0000

0800acf8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b088      	sub	sp, #32
 800acfc:	af02      	add	r7, sp, #8
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	4608      	mov	r0, r1
 800ad02:	4611      	mov	r1, r2
 800ad04:	461a      	mov	r2, r3
 800ad06:	4603      	mov	r3, r0
 800ad08:	817b      	strh	r3, [r7, #10]
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	813b      	strh	r3, [r7, #8]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	6a3b      	ldr	r3, [r7, #32]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f000 fa08 	bl	800b144 <I2C_WaitOnFlagUntilTimeout>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00d      	beq.n	800ad56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad48:	d103      	bne.n	800ad52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ad52:	2303      	movs	r3, #3
 800ad54:	e05f      	b.n	800ae16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ad56:	897b      	ldrh	r3, [r7, #10]
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ad64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad68:	6a3a      	ldr	r2, [r7, #32]
 800ad6a:	492d      	ldr	r1, [pc, #180]	; (800ae20 <I2C_RequestMemoryWrite+0x128>)
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	f000 fa63 	bl	800b238 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d001      	beq.n	800ad7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e04c      	b.n	800ae16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	617b      	str	r3, [r7, #20]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	695b      	ldr	r3, [r3, #20]
 800ad86:	617b      	str	r3, [r7, #20]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	617b      	str	r3, [r7, #20]
 800ad90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad94:	6a39      	ldr	r1, [r7, #32]
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 faee 	bl	800b378 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00d      	beq.n	800adbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada6:	2b04      	cmp	r3, #4
 800ada8:	d107      	bne.n	800adba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	e02b      	b.n	800ae16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800adbe:	88fb      	ldrh	r3, [r7, #6]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d105      	bne.n	800add0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800adc4:	893b      	ldrh	r3, [r7, #8]
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	611a      	str	r2, [r3, #16]
 800adce:	e021      	b.n	800ae14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800add0:	893b      	ldrh	r3, [r7, #8]
 800add2:	0a1b      	lsrs	r3, r3, #8
 800add4:	b29b      	uxth	r3, r3
 800add6:	b2da      	uxtb	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ade0:	6a39      	ldr	r1, [r7, #32]
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f000 fac8 	bl	800b378 <I2C_WaitOnTXEFlagUntilTimeout>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00d      	beq.n	800ae0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf2:	2b04      	cmp	r3, #4
 800adf4:	d107      	bne.n	800ae06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e005      	b.n	800ae16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae0a:	893b      	ldrh	r3, [r7, #8]
 800ae0c:	b2da      	uxtb	r2, r3
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3718      	adds	r7, #24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	00010002 	.word	0x00010002

0800ae24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b088      	sub	sp, #32
 800ae28:	af02      	add	r7, sp, #8
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	4608      	mov	r0, r1
 800ae2e:	4611      	mov	r1, r2
 800ae30:	461a      	mov	r2, r3
 800ae32:	4603      	mov	r3, r0
 800ae34:	817b      	strh	r3, [r7, #10]
 800ae36:	460b      	mov	r3, r1
 800ae38:	813b      	strh	r3, [r7, #8]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ae4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	6a3b      	ldr	r3, [r7, #32]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	f000 f96a 	bl	800b144 <I2C_WaitOnFlagUntilTimeout>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00d      	beq.n	800ae92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae84:	d103      	bne.n	800ae8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	e0aa      	b.n	800afe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ae92:	897b      	ldrh	r3, [r7, #10]
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	461a      	mov	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aea0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea4:	6a3a      	ldr	r2, [r7, #32]
 800aea6:	4952      	ldr	r1, [pc, #328]	; (800aff0 <I2C_RequestMemoryRead+0x1cc>)
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f000 f9c5 	bl	800b238 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d001      	beq.n	800aeb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e097      	b.n	800afe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aeb8:	2300      	movs	r3, #0
 800aeba:	617b      	str	r3, [r7, #20]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	695b      	ldr	r3, [r3, #20]
 800aec2:	617b      	str	r3, [r7, #20]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	617b      	str	r3, [r7, #20]
 800aecc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aed0:	6a39      	ldr	r1, [r7, #32]
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f000 fa50 	bl	800b378 <I2C_WaitOnTXEFlagUntilTimeout>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d00d      	beq.n	800aefa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee2:	2b04      	cmp	r3, #4
 800aee4:	d107      	bne.n	800aef6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aef4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	e076      	b.n	800afe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aefa:	88fb      	ldrh	r3, [r7, #6]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d105      	bne.n	800af0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800af00:	893b      	ldrh	r3, [r7, #8]
 800af02:	b2da      	uxtb	r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	611a      	str	r2, [r3, #16]
 800af0a:	e021      	b.n	800af50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800af0c:	893b      	ldrh	r3, [r7, #8]
 800af0e:	0a1b      	lsrs	r3, r3, #8
 800af10:	b29b      	uxth	r3, r3
 800af12:	b2da      	uxtb	r2, r3
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af1c:	6a39      	ldr	r1, [r7, #32]
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f000 fa2a 	bl	800b378 <I2C_WaitOnTXEFlagUntilTimeout>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00d      	beq.n	800af46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2e:	2b04      	cmp	r3, #4
 800af30:	d107      	bne.n	800af42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	e050      	b.n	800afe8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800af46:	893b      	ldrh	r3, [r7, #8]
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af52:	6a39      	ldr	r1, [r7, #32]
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f000 fa0f 	bl	800b378 <I2C_WaitOnTXEFlagUntilTimeout>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00d      	beq.n	800af7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af64:	2b04      	cmp	r3, #4
 800af66:	d107      	bne.n	800af78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	e035      	b.n	800afe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	6a3b      	ldr	r3, [r7, #32]
 800af92:	2200      	movs	r2, #0
 800af94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f000 f8d3 	bl	800b144 <I2C_WaitOnFlagUntilTimeout>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d00d      	beq.n	800afc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afb2:	d103      	bne.n	800afbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800afbc:	2303      	movs	r3, #3
 800afbe:	e013      	b.n	800afe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800afc0:	897b      	ldrh	r3, [r7, #10]
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	f043 0301 	orr.w	r3, r3, #1
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	6a3a      	ldr	r2, [r7, #32]
 800afd4:	4906      	ldr	r1, [pc, #24]	; (800aff0 <I2C_RequestMemoryRead+0x1cc>)
 800afd6:	68f8      	ldr	r0, [r7, #12]
 800afd8:	f000 f92e 	bl	800b238 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	e000      	b.n	800afe8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800afe6:	2300      	movs	r3, #0
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3718      	adds	r7, #24
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	00010002 	.word	0x00010002

0800aff4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800affc:	2300      	movs	r3, #0
 800affe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b004:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b00c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b00e:	4b4b      	ldr	r3, [pc, #300]	; (800b13c <I2C_DMAAbort+0x148>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	08db      	lsrs	r3, r3, #3
 800b014:	4a4a      	ldr	r2, [pc, #296]	; (800b140 <I2C_DMAAbort+0x14c>)
 800b016:	fba2 2303 	umull	r2, r3, r2, r3
 800b01a:	0a1a      	lsrs	r2, r3, #8
 800b01c:	4613      	mov	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	00da      	lsls	r2, r3, #3
 800b024:	1ad3      	subs	r3, r2, r3
 800b026:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d106      	bne.n	800b03c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b032:	f043 0220 	orr.w	r2, r3, #32
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800b03a:	e00a      	b.n	800b052 <I2C_DMAAbort+0x5e>
    }
    count--;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	3b01      	subs	r3, #1
 800b040:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b04c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b050:	d0ea      	beq.n	800b028 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b056:	2b00      	cmp	r3, #0
 800b058:	d003      	beq.n	800b062 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b05e:	2200      	movs	r2, #0
 800b060:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b066:	2b00      	cmp	r3, #0
 800b068:	d003      	beq.n	800b072 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b06e:	2200      	movs	r2, #0
 800b070:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b080:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2200      	movs	r2, #0
 800b086:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d003      	beq.n	800b098 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b094:	2200      	movs	r2, #0
 800b096:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d003      	beq.n	800b0a8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f022 0201 	bic.w	r2, r2, #1
 800b0b6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	2b60      	cmp	r3, #96	; 0x60
 800b0c2:	d10e      	bne.n	800b0e2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	2220      	movs	r2, #32
 800b0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b0da:	6978      	ldr	r0, [r7, #20]
 800b0dc:	f7fe fc7e 	bl	80099dc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b0e0:	e027      	b.n	800b132 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b0e2:	7cfb      	ldrb	r3, [r7, #19]
 800b0e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b0e8:	2b28      	cmp	r3, #40	; 0x28
 800b0ea:	d117      	bne.n	800b11c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f042 0201 	orr.w	r2, r2, #1
 800b0fa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b10a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	2200      	movs	r2, #0
 800b110:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2228      	movs	r2, #40	; 0x28
 800b116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b11a:	e007      	b.n	800b12c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	2220      	movs	r2, #32
 800b120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	2200      	movs	r2, #0
 800b128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800b12c:	6978      	ldr	r0, [r7, #20]
 800b12e:	f7f9 f82e 	bl	800418e <HAL_I2C_ErrorCallback>
}
 800b132:	bf00      	nop
 800b134:	3718      	adds	r7, #24
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	20000040 	.word	0x20000040
 800b140:	14f8b589 	.word	0x14f8b589

0800b144 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	603b      	str	r3, [r7, #0]
 800b150:	4613      	mov	r3, r2
 800b152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b154:	e048      	b.n	800b1e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b15c:	d044      	beq.n	800b1e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b15e:	f7fc f8fb 	bl	8007358 <HAL_GetTick>
 800b162:	4602      	mov	r2, r0
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	683a      	ldr	r2, [r7, #0]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d302      	bcc.n	800b174 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d139      	bne.n	800b1e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	0c1b      	lsrs	r3, r3, #16
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d10d      	bne.n	800b19a <I2C_WaitOnFlagUntilTimeout+0x56>
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	695b      	ldr	r3, [r3, #20]
 800b184:	43da      	mvns	r2, r3
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	4013      	ands	r3, r2
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	bf0c      	ite	eq
 800b190:	2301      	moveq	r3, #1
 800b192:	2300      	movne	r3, #0
 800b194:	b2db      	uxtb	r3, r3
 800b196:	461a      	mov	r2, r3
 800b198:	e00c      	b.n	800b1b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	43da      	mvns	r2, r3
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	4013      	ands	r3, r2
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	bf0c      	ite	eq
 800b1ac:	2301      	moveq	r3, #1
 800b1ae:	2300      	movne	r3, #0
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	79fb      	ldrb	r3, [r7, #7]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d116      	bne.n	800b1e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2220      	movs	r2, #32
 800b1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d4:	f043 0220 	orr.w	r2, r3, #32
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e023      	b.n	800b230 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	0c1b      	lsrs	r3, r3, #16
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d10d      	bne.n	800b20e <I2C_WaitOnFlagUntilTimeout+0xca>
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	695b      	ldr	r3, [r3, #20]
 800b1f8:	43da      	mvns	r2, r3
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	2b00      	cmp	r3, #0
 800b202:	bf0c      	ite	eq
 800b204:	2301      	moveq	r3, #1
 800b206:	2300      	movne	r3, #0
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	461a      	mov	r2, r3
 800b20c:	e00c      	b.n	800b228 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	43da      	mvns	r2, r3
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	4013      	ands	r3, r2
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	bf0c      	ite	eq
 800b220:	2301      	moveq	r3, #1
 800b222:	2300      	movne	r3, #0
 800b224:	b2db      	uxtb	r3, r3
 800b226:	461a      	mov	r2, r3
 800b228:	79fb      	ldrb	r3, [r7, #7]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d093      	beq.n	800b156 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
 800b244:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b246:	e071      	b.n	800b32c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b256:	d123      	bne.n	800b2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b266:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b270:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2220      	movs	r2, #32
 800b27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b28c:	f043 0204 	orr.w	r2, r3, #4
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2200      	movs	r2, #0
 800b298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	e067      	b.n	800b370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a6:	d041      	beq.n	800b32c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2a8:	f7fc f856 	bl	8007358 <HAL_GetTick>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d302      	bcc.n	800b2be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d136      	bne.n	800b32c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	0c1b      	lsrs	r3, r3, #16
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d10c      	bne.n	800b2e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	695b      	ldr	r3, [r3, #20]
 800b2ce:	43da      	mvns	r2, r3
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	bf14      	ite	ne
 800b2da:	2301      	movne	r3, #1
 800b2dc:	2300      	moveq	r3, #0
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	e00b      	b.n	800b2fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	699b      	ldr	r3, [r3, #24]
 800b2e8:	43da      	mvns	r2, r3
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	bf14      	ite	ne
 800b2f4:	2301      	movne	r3, #1
 800b2f6:	2300      	moveq	r3, #0
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d016      	beq.n	800b32c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2200      	movs	r2, #0
 800b302:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2220      	movs	r2, #32
 800b308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b318:	f043 0220 	orr.w	r2, r3, #32
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b328:	2301      	movs	r3, #1
 800b32a:	e021      	b.n	800b370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	0c1b      	lsrs	r3, r3, #16
 800b330:	b2db      	uxtb	r3, r3
 800b332:	2b01      	cmp	r3, #1
 800b334:	d10c      	bne.n	800b350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	695b      	ldr	r3, [r3, #20]
 800b33c:	43da      	mvns	r2, r3
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	4013      	ands	r3, r2
 800b342:	b29b      	uxth	r3, r3
 800b344:	2b00      	cmp	r3, #0
 800b346:	bf14      	ite	ne
 800b348:	2301      	movne	r3, #1
 800b34a:	2300      	moveq	r3, #0
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	e00b      	b.n	800b368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	699b      	ldr	r3, [r3, #24]
 800b356:	43da      	mvns	r2, r3
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	4013      	ands	r3, r2
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	2b00      	cmp	r3, #0
 800b360:	bf14      	ite	ne
 800b362:	2301      	movne	r3, #1
 800b364:	2300      	moveq	r3, #0
 800b366:	b2db      	uxtb	r3, r3
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f47f af6d 	bne.w	800b248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b384:	e034      	b.n	800b3f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f000 f915 	bl	800b5b6 <I2C_IsAcknowledgeFailed>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d001      	beq.n	800b396 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	e034      	b.n	800b400 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b39c:	d028      	beq.n	800b3f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b39e:	f7fb ffdb 	bl	8007358 <HAL_GetTick>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	1ad3      	subs	r3, r2, r3
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d302      	bcc.n	800b3b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d11d      	bne.n	800b3f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	695b      	ldr	r3, [r3, #20]
 800b3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3be:	2b80      	cmp	r3, #128	; 0x80
 800b3c0:	d016      	beq.n	800b3f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2220      	movs	r2, #32
 800b3cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3dc:	f043 0220 	orr.w	r2, r3, #32
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e007      	b.n	800b400 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	695b      	ldr	r3, [r3, #20]
 800b3f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3fa:	2b80      	cmp	r3, #128	; 0x80
 800b3fc:	d1c3      	bne.n	800b386 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3710      	adds	r7, #16
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b414:	e034      	b.n	800b480 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f000 f8cd 	bl	800b5b6 <I2C_IsAcknowledgeFailed>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b422:	2301      	movs	r3, #1
 800b424:	e034      	b.n	800b490 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b42c:	d028      	beq.n	800b480 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b42e:	f7fb ff93 	bl	8007358 <HAL_GetTick>
 800b432:	4602      	mov	r2, r0
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	1ad3      	subs	r3, r2, r3
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d302      	bcc.n	800b444 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d11d      	bne.n	800b480 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	695b      	ldr	r3, [r3, #20]
 800b44a:	f003 0304 	and.w	r3, r3, #4
 800b44e:	2b04      	cmp	r3, #4
 800b450:	d016      	beq.n	800b480 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2200      	movs	r2, #0
 800b456:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2220      	movs	r2, #32
 800b45c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b46c:	f043 0220 	orr.w	r2, r3, #32
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b47c:	2301      	movs	r3, #1
 800b47e:	e007      	b.n	800b490 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	695b      	ldr	r3, [r3, #20]
 800b486:	f003 0304 	and.w	r3, r3, #4
 800b48a:	2b04      	cmp	r3, #4
 800b48c:	d1c3      	bne.n	800b416 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800b4a4:	4b13      	ldr	r3, [pc, #76]	; (800b4f4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	08db      	lsrs	r3, r3, #3
 800b4aa:	4a13      	ldr	r2, [pc, #76]	; (800b4f8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800b4ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b4b0:	0a1a      	lsrs	r2, r3, #8
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	4413      	add	r3, r2
 800b4b8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d107      	bne.n	800b4d6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ca:	f043 0220 	orr.w	r2, r3, #32
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e008      	b.n	800b4e8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4e4:	d0e9      	beq.n	800b4ba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800b4e6:	2300      	movs	r3, #0
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3714      	adds	r7, #20
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	20000040 	.word	0x20000040
 800b4f8:	14f8b589 	.word	0x14f8b589

0800b4fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	60b9      	str	r1, [r7, #8]
 800b506:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b508:	e049      	b.n	800b59e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	695b      	ldr	r3, [r3, #20]
 800b510:	f003 0310 	and.w	r3, r3, #16
 800b514:	2b10      	cmp	r3, #16
 800b516:	d119      	bne.n	800b54c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f06f 0210 	mvn.w	r2, #16
 800b520:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2220      	movs	r2, #32
 800b52c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2200      	movs	r2, #0
 800b544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	e030      	b.n	800b5ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b54c:	f7fb ff04 	bl	8007358 <HAL_GetTick>
 800b550:	4602      	mov	r2, r0
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d302      	bcc.n	800b562 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d11d      	bne.n	800b59e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	695b      	ldr	r3, [r3, #20]
 800b568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b56c:	2b40      	cmp	r3, #64	; 0x40
 800b56e:	d016      	beq.n	800b59e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2220      	movs	r2, #32
 800b57a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2200      	movs	r2, #0
 800b582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b58a:	f043 0220 	orr.w	r2, r3, #32
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2200      	movs	r2, #0
 800b596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e007      	b.n	800b5ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5a8:	2b40      	cmp	r3, #64	; 0x40
 800b5aa:	d1ae      	bne.n	800b50a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b5b6:	b480      	push	{r7}
 800b5b8:	b083      	sub	sp, #12
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	695b      	ldr	r3, [r3, #20]
 800b5c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5cc:	d11b      	bne.n	800b606 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b5d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2220      	movs	r2, #32
 800b5e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f2:	f043 0204 	orr.w	r2, r3, #4
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e000      	b.n	800b608 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b620:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800b624:	d103      	bne.n	800b62e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2201      	movs	r2, #1
 800b62a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b62c:	e007      	b.n	800b63e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b632:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800b636:	d102      	bne.n	800b63e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2208      	movs	r2, #8
 800b63c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b63e:	bf00      	nop
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr

0800b64a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b64a:	b480      	push	{r7}
 800b64c:	b083      	sub	sp, #12
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	2b20      	cmp	r3, #32
 800b65e:	d129      	bne.n	800b6b4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2224      	movs	r2, #36	; 0x24
 800b664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f022 0201 	bic.w	r2, r2, #1
 800b676:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f022 0210 	bic.w	r2, r2, #16
 800b686:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	683a      	ldr	r2, [r7, #0]
 800b694:	430a      	orrs	r2, r1
 800b696:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f042 0201 	orr.w	r2, r2, #1
 800b6a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2220      	movs	r2, #32
 800b6ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	e000      	b.n	800b6b6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800b6b4:	2302      	movs	r3, #2
  }
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b085      	sub	sp, #20
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b20      	cmp	r3, #32
 800b6da:	d12a      	bne.n	800b732 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2224      	movs	r2, #36	; 0x24
 800b6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f022 0201 	bic.w	r2, r2, #1
 800b6f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800b6fc:	89fb      	ldrh	r3, [r7, #14]
 800b6fe:	f023 030f 	bic.w	r3, r3, #15
 800b702:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	b29a      	uxth	r2, r3
 800b708:	89fb      	ldrh	r3, [r7, #14]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	89fa      	ldrh	r2, [r7, #14]
 800b714:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f042 0201 	orr.w	r2, r2, #1
 800b724:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2220      	movs	r2, #32
 800b72a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b72e:	2300      	movs	r3, #0
 800b730:	e000      	b.n	800b734 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800b732:	2302      	movs	r3, #2
  }
}
 800b734:	4618      	mov	r0, r3
 800b736:	3714      	adds	r7, #20
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af02      	add	r7, sp, #8
 800b746:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d101      	bne.n	800b752 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b74e:	2301      	movs	r3, #1
 800b750:	e101      	b.n	800b956 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	2b00      	cmp	r3, #0
 800b762:	d106      	bne.n	800b772 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f00c fbb1 	bl	8017ed4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2203      	movs	r2, #3
 800b776:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b780:	d102      	bne.n	800b788 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4618      	mov	r0, r3
 800b78e:	f004 ff40 	bl	8010612 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6818      	ldr	r0, [r3, #0]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	7c1a      	ldrb	r2, [r3, #16]
 800b79a:	f88d 2000 	strb.w	r2, [sp]
 800b79e:	3304      	adds	r3, #4
 800b7a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b7a2:	f004 fe1f 	bl	80103e4 <USB_CoreInit>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d005      	beq.n	800b7b8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2202      	movs	r2, #2
 800b7b0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e0ce      	b.n	800b956 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2100      	movs	r1, #0
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f004 ff38 	bl	8010634 <USB_SetCurrentMode>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d005      	beq.n	800b7d6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2202      	movs	r2, #2
 800b7ce:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e0bf      	b.n	800b956 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	73fb      	strb	r3, [r7, #15]
 800b7da:	e04a      	b.n	800b872 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b7dc:	7bfa      	ldrb	r2, [r7, #15]
 800b7de:	6879      	ldr	r1, [r7, #4]
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	00db      	lsls	r3, r3, #3
 800b7e4:	4413      	add	r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	440b      	add	r3, r1
 800b7ea:	3315      	adds	r3, #21
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b7f0:	7bfa      	ldrb	r2, [r7, #15]
 800b7f2:	6879      	ldr	r1, [r7, #4]
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	00db      	lsls	r3, r3, #3
 800b7f8:	4413      	add	r3, r2
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	440b      	add	r3, r1
 800b7fe:	3314      	adds	r3, #20
 800b800:	7bfa      	ldrb	r2, [r7, #15]
 800b802:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b804:	7bfa      	ldrb	r2, [r7, #15]
 800b806:	7bfb      	ldrb	r3, [r7, #15]
 800b808:	b298      	uxth	r0, r3
 800b80a:	6879      	ldr	r1, [r7, #4]
 800b80c:	4613      	mov	r3, r2
 800b80e:	00db      	lsls	r3, r3, #3
 800b810:	4413      	add	r3, r2
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	440b      	add	r3, r1
 800b816:	332e      	adds	r3, #46	; 0x2e
 800b818:	4602      	mov	r2, r0
 800b81a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b81c:	7bfa      	ldrb	r2, [r7, #15]
 800b81e:	6879      	ldr	r1, [r7, #4]
 800b820:	4613      	mov	r3, r2
 800b822:	00db      	lsls	r3, r3, #3
 800b824:	4413      	add	r3, r2
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	440b      	add	r3, r1
 800b82a:	3318      	adds	r3, #24
 800b82c:	2200      	movs	r2, #0
 800b82e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b830:	7bfa      	ldrb	r2, [r7, #15]
 800b832:	6879      	ldr	r1, [r7, #4]
 800b834:	4613      	mov	r3, r2
 800b836:	00db      	lsls	r3, r3, #3
 800b838:	4413      	add	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	440b      	add	r3, r1
 800b83e:	331c      	adds	r3, #28
 800b840:	2200      	movs	r2, #0
 800b842:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b844:	7bfa      	ldrb	r2, [r7, #15]
 800b846:	6879      	ldr	r1, [r7, #4]
 800b848:	4613      	mov	r3, r2
 800b84a:	00db      	lsls	r3, r3, #3
 800b84c:	4413      	add	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	440b      	add	r3, r1
 800b852:	3320      	adds	r3, #32
 800b854:	2200      	movs	r2, #0
 800b856:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b858:	7bfa      	ldrb	r2, [r7, #15]
 800b85a:	6879      	ldr	r1, [r7, #4]
 800b85c:	4613      	mov	r3, r2
 800b85e:	00db      	lsls	r3, r3, #3
 800b860:	4413      	add	r3, r2
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	440b      	add	r3, r1
 800b866:	3324      	adds	r3, #36	; 0x24
 800b868:	2200      	movs	r2, #0
 800b86a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b86c:	7bfb      	ldrb	r3, [r7, #15]
 800b86e:	3301      	adds	r3, #1
 800b870:	73fb      	strb	r3, [r7, #15]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	791b      	ldrb	r3, [r3, #4]
 800b876:	7bfa      	ldrb	r2, [r7, #15]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d3af      	bcc.n	800b7dc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b87c:	2300      	movs	r3, #0
 800b87e:	73fb      	strb	r3, [r7, #15]
 800b880:	e044      	b.n	800b90c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b882:	7bfa      	ldrb	r2, [r7, #15]
 800b884:	6879      	ldr	r1, [r7, #4]
 800b886:	4613      	mov	r3, r2
 800b888:	00db      	lsls	r3, r3, #3
 800b88a:	4413      	add	r3, r2
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	440b      	add	r3, r1
 800b890:	f203 2355 	addw	r3, r3, #597	; 0x255
 800b894:	2200      	movs	r2, #0
 800b896:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b898:	7bfa      	ldrb	r2, [r7, #15]
 800b89a:	6879      	ldr	r1, [r7, #4]
 800b89c:	4613      	mov	r3, r2
 800b89e:	00db      	lsls	r3, r3, #3
 800b8a0:	4413      	add	r3, r2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	440b      	add	r3, r1
 800b8a6:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800b8aa:	7bfa      	ldrb	r2, [r7, #15]
 800b8ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b8ae:	7bfa      	ldrb	r2, [r7, #15]
 800b8b0:	6879      	ldr	r1, [r7, #4]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	00db      	lsls	r3, r3, #3
 800b8b6:	4413      	add	r3, r2
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	440b      	add	r3, r1
 800b8bc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b8c4:	7bfa      	ldrb	r2, [r7, #15]
 800b8c6:	6879      	ldr	r1, [r7, #4]
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	00db      	lsls	r3, r3, #3
 800b8cc:	4413      	add	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	440b      	add	r3, r1
 800b8d2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b8da:	7bfa      	ldrb	r2, [r7, #15]
 800b8dc:	6879      	ldr	r1, [r7, #4]
 800b8de:	4613      	mov	r3, r2
 800b8e0:	00db      	lsls	r3, r3, #3
 800b8e2:	4413      	add	r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	440b      	add	r3, r1
 800b8e8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b8f0:	7bfa      	ldrb	r2, [r7, #15]
 800b8f2:	6879      	ldr	r1, [r7, #4]
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	00db      	lsls	r3, r3, #3
 800b8f8:	4413      	add	r3, r2
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	440b      	add	r3, r1
 800b8fe:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800b902:	2200      	movs	r2, #0
 800b904:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b906:	7bfb      	ldrb	r3, [r7, #15]
 800b908:	3301      	adds	r3, #1
 800b90a:	73fb      	strb	r3, [r7, #15]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	791b      	ldrb	r3, [r3, #4]
 800b910:	7bfa      	ldrb	r2, [r7, #15]
 800b912:	429a      	cmp	r2, r3
 800b914:	d3b5      	bcc.n	800b882 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6818      	ldr	r0, [r3, #0]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	7c1a      	ldrb	r2, [r3, #16]
 800b91e:	f88d 2000 	strb.w	r2, [sp]
 800b922:	3304      	adds	r3, #4
 800b924:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b926:	f004 fed1 	bl	80106cc <USB_DevInit>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d005      	beq.n	800b93c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2202      	movs	r2, #2
 800b934:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	e00c      	b.n	800b956 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2201      	movs	r2, #1
 800b946:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4618      	mov	r0, r3
 800b950:	f005 ff15 	bl	801177e <USB_DevDisconnect>

  return HAL_OK;
 800b954:	2300      	movs	r3, #0
}
 800b956:	4618      	mov	r0, r3
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b084      	sub	sp, #16
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800b972:	2b01      	cmp	r3, #1
 800b974:	d101      	bne.n	800b97a <HAL_PCD_Start+0x1c>
 800b976:	2302      	movs	r3, #2
 800b978:	e022      	b.n	800b9c0 <HAL_PCD_Start+0x62>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2201      	movs	r2, #1
 800b97e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d009      	beq.n	800b9a2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b992:	2b01      	cmp	r3, #1
 800b994:	d105      	bne.n	800b9a2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b99a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f004 fe22 	bl	80105f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f005 fec3 	bl	801173c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b9c8:	b590      	push	{r4, r7, lr}
 800b9ca:	b08d      	sub	sp, #52	; 0x34
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f005 ff81 	bl	80118e6 <USB_GetMode>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f040 848c 	bne.w	800c304 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f005 fee5 	bl	80117c0 <USB_ReadInterrupts>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 8482 	beq.w	800c302 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	0a1b      	lsrs	r3, r3, #8
 800ba08:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f005 fed2 	bl	80117c0 <USB_ReadInterrupts>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	f003 0302 	and.w	r3, r3, #2
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d107      	bne.n	800ba36 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	695a      	ldr	r2, [r3, #20]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f002 0202 	and.w	r2, r2, #2
 800ba34:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f005 fec0 	bl	80117c0 <USB_ReadInterrupts>
 800ba40:	4603      	mov	r3, r0
 800ba42:	f003 0310 	and.w	r3, r3, #16
 800ba46:	2b10      	cmp	r3, #16
 800ba48:	d161      	bne.n	800bb0e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	699a      	ldr	r2, [r3, #24]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f022 0210 	bic.w	r2, r2, #16
 800ba58:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800ba5a:	6a3b      	ldr	r3, [r7, #32]
 800ba5c:	6a1b      	ldr	r3, [r3, #32]
 800ba5e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	f003 020f 	and.w	r2, r3, #15
 800ba66:	4613      	mov	r3, r2
 800ba68:	00db      	lsls	r3, r3, #3
 800ba6a:	4413      	add	r3, r2
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	4413      	add	r3, r2
 800ba76:	3304      	adds	r3, #4
 800ba78:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	0c5b      	lsrs	r3, r3, #17
 800ba7e:	f003 030f 	and.w	r3, r3, #15
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d124      	bne.n	800bad0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ba86:	69ba      	ldr	r2, [r7, #24]
 800ba88:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d035      	beq.n	800bafe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	091b      	lsrs	r3, r3, #4
 800ba9a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ba9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	461a      	mov	r2, r3
 800baa4:	6a38      	ldr	r0, [r7, #32]
 800baa6:	f005 fcf7 	bl	8011498 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	68da      	ldr	r2, [r3, #12]
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	091b      	lsrs	r3, r3, #4
 800bab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bab6:	441a      	add	r2, r3
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	695a      	ldr	r2, [r3, #20]
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	091b      	lsrs	r3, r3, #4
 800bac4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bac8:	441a      	add	r2, r3
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	615a      	str	r2, [r3, #20]
 800bace:	e016      	b.n	800bafe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	0c5b      	lsrs	r3, r3, #17
 800bad4:	f003 030f 	and.w	r3, r3, #15
 800bad8:	2b06      	cmp	r3, #6
 800bada:	d110      	bne.n	800bafe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800bae2:	2208      	movs	r2, #8
 800bae4:	4619      	mov	r1, r3
 800bae6:	6a38      	ldr	r0, [r7, #32]
 800bae8:	f005 fcd6 	bl	8011498 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	695a      	ldr	r2, [r3, #20]
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	091b      	lsrs	r3, r3, #4
 800baf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800baf8:	441a      	add	r2, r3
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	699a      	ldr	r2, [r3, #24]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f042 0210 	orr.w	r2, r2, #16
 800bb0c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f005 fe54 	bl	80117c0 <USB_ReadInterrupts>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bb22:	f040 80a7 	bne.w	800bc74 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800bb26:	2300      	movs	r3, #0
 800bb28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f005 fe59 	bl	80117e6 <USB_ReadDevAllOutEpInterrupt>
 800bb34:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800bb36:	e099      	b.n	800bc6c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800bb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3a:	f003 0301 	and.w	r3, r3, #1
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	f000 808e 	beq.w	800bc60 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb4a:	b2d2      	uxtb	r2, r2
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f005 fe7d 	bl	801184e <USB_ReadDevOutEPInterrupt>
 800bb54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	f003 0301 	and.w	r3, r3, #1
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00c      	beq.n	800bb7a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800bb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb62:	015a      	lsls	r2, r3, #5
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	4413      	add	r3, r2
 800bb68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	2301      	movs	r3, #1
 800bb70:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800bb72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 fea1 	bl	800c8bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	f003 0308 	and.w	r3, r3, #8
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00c      	beq.n	800bb9e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb86:	015a      	lsls	r2, r3, #5
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb90:	461a      	mov	r2, r3
 800bb92:	2308      	movs	r3, #8
 800bb94:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800bb96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 ff77 	bl	800ca8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	f003 0310 	and.w	r3, r3, #16
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d008      	beq.n	800bbba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800bba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbaa:	015a      	lsls	r2, r3, #5
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	4413      	add	r3, r2
 800bbb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	2310      	movs	r3, #16
 800bbb8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	f003 0302 	and.w	r3, r3, #2
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d030      	beq.n	800bc26 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800bbc4:	6a3b      	ldr	r3, [r7, #32]
 800bbc6:	695b      	ldr	r3, [r3, #20]
 800bbc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbcc:	2b80      	cmp	r3, #128	; 0x80
 800bbce:	d109      	bne.n	800bbe4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	69fa      	ldr	r2, [r7, #28]
 800bbda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bbe2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800bbe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	00db      	lsls	r3, r3, #3
 800bbea:	4413      	add	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	3304      	adds	r3, #4
 800bbf8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	78db      	ldrb	r3, [r3, #3]
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d108      	bne.n	800bc14 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	2200      	movs	r2, #0
 800bc06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800bc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f00c fa5c 	bl	80180cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc16:	015a      	lsls	r2, r3, #5
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc20:	461a      	mov	r2, r3
 800bc22:	2302      	movs	r3, #2
 800bc24:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	f003 0320 	and.w	r3, r3, #32
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d008      	beq.n	800bc42 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc32:	015a      	lsls	r2, r3, #5
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	4413      	add	r3, r2
 800bc38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	2320      	movs	r3, #32
 800bc40:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d009      	beq.n	800bc60 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800bc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4e:	015a      	lsls	r2, r3, #5
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	4413      	add	r3, r2
 800bc54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc58:	461a      	mov	r2, r3
 800bc5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc5e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800bc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc62:	3301      	adds	r3, #1
 800bc64:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800bc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc68:	085b      	lsrs	r3, r3, #1
 800bc6a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800bc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f47f af62 	bne.w	800bb38 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f005 fda1 	bl	80117c0 <USB_ReadInterrupts>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc88:	f040 80db 	bne.w	800be42 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4618      	mov	r0, r3
 800bc92:	f005 fdc2 	bl	801181a <USB_ReadDevAllInEpInterrupt>
 800bc96:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800bc9c:	e0cd      	b.n	800be3a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800bc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca0:	f003 0301 	and.w	r3, r3, #1
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f000 80c2 	beq.w	800be2e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcb0:	b2d2      	uxtb	r2, r2
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f005 fde8 	bl	801188a <USB_ReadDevInEPInterrupt>
 800bcba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	f003 0301 	and.w	r3, r3, #1
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d057      	beq.n	800bd76 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc8:	f003 030f 	and.w	r3, r3, #15
 800bccc:	2201      	movs	r2, #1
 800bcce:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	43db      	mvns	r3, r3
 800bce0:	69f9      	ldr	r1, [r7, #28]
 800bce2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bce6:	4013      	ands	r3, r2
 800bce8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800bcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcec:	015a      	lsls	r2, r3, #5
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	799b      	ldrb	r3, [r3, #6]
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d132      	bne.n	800bd6a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800bd04:	6879      	ldr	r1, [r7, #4]
 800bd06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd08:	4613      	mov	r3, r2
 800bd0a:	00db      	lsls	r3, r3, #3
 800bd0c:	4413      	add	r3, r2
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	440b      	add	r3, r1
 800bd12:	3320      	adds	r3, #32
 800bd14:	6819      	ldr	r1, [r3, #0]
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	00db      	lsls	r3, r3, #3
 800bd1e:	4413      	add	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4403      	add	r3, r0
 800bd24:	331c      	adds	r3, #28
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4419      	add	r1, r3
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd2e:	4613      	mov	r3, r2
 800bd30:	00db      	lsls	r3, r3, #3
 800bd32:	4413      	add	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4403      	add	r3, r0
 800bd38:	3320      	adds	r3, #32
 800bd3a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800bd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d113      	bne.n	800bd6a <HAL_PCD_IRQHandler+0x3a2>
 800bd42:	6879      	ldr	r1, [r7, #4]
 800bd44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd46:	4613      	mov	r3, r2
 800bd48:	00db      	lsls	r3, r3, #3
 800bd4a:	4413      	add	r3, r2
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	440b      	add	r3, r1
 800bd50:	3324      	adds	r3, #36	; 0x24
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d108      	bne.n	800bd6a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6818      	ldr	r0, [r3, #0]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800bd62:	461a      	mov	r2, r3
 800bd64:	2101      	movs	r1, #1
 800bd66:	f005 fdef 	bl	8011948 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	4619      	mov	r1, r3
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f00c f930 	bl	8017fd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	f003 0308 	and.w	r3, r3, #8
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d008      	beq.n	800bd92 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800bd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd82:	015a      	lsls	r2, r3, #5
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	4413      	add	r3, r2
 800bd88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	2308      	movs	r3, #8
 800bd90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	f003 0310 	and.w	r3, r3, #16
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d008      	beq.n	800bdae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9e:	015a      	lsls	r2, r3, #5
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	4413      	add	r3, r2
 800bda4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda8:	461a      	mov	r2, r3
 800bdaa:	2310      	movs	r3, #16
 800bdac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d008      	beq.n	800bdca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdba:	015a      	lsls	r2, r3, #5
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	2340      	movs	r3, #64	; 0x40
 800bdc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	f003 0302 	and.w	r3, r3, #2
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d023      	beq.n	800be1c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800bdd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdd6:	6a38      	ldr	r0, [r7, #32]
 800bdd8:	f004 fddc 	bl	8010994 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800bddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdde:	4613      	mov	r3, r2
 800bde0:	00db      	lsls	r3, r3, #3
 800bde2:	4413      	add	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	3310      	adds	r3, #16
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	4413      	add	r3, r2
 800bdec:	3304      	adds	r3, #4
 800bdee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	78db      	ldrb	r3, [r3, #3]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d108      	bne.n	800be0a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be00:	b2db      	uxtb	r3, r3
 800be02:	4619      	mov	r1, r3
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f00c f973 	bl	80180f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	015a      	lsls	r2, r3, #5
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	4413      	add	r3, r2
 800be12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be16:	461a      	mov	r2, r3
 800be18:	2302      	movs	r3, #2
 800be1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be22:	2b00      	cmp	r3, #0
 800be24:	d003      	beq.n	800be2e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800be26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fcbb 	bl	800c7a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800be2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be30:	3301      	adds	r3, #1
 800be32:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800be34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be36:	085b      	lsrs	r3, r3, #1
 800be38:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f47f af2e 	bne.w	800bc9e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4618      	mov	r0, r3
 800be48:	f005 fcba 	bl	80117c0 <USB_ReadInterrupts>
 800be4c:	4603      	mov	r3, r0
 800be4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be56:	d122      	bne.n	800be9e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	69fa      	ldr	r2, [r7, #28]
 800be62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be66:	f023 0301 	bic.w	r3, r3, #1
 800be6a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800be72:	2b01      	cmp	r3, #1
 800be74:	d108      	bne.n	800be88 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800be7e:	2100      	movs	r1, #0
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 fea1 	bl	800cbc8 <HAL_PCDEx_LPM_Callback>
 800be86:	e002      	b.n	800be8e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f00c f911 	bl	80180b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	695a      	ldr	r2, [r3, #20]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800be9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f005 fc8c 	bl	80117c0 <USB_ReadInterrupts>
 800bea8:	4603      	mov	r3, r0
 800beaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800beae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800beb2:	d112      	bne.n	800beda <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	f003 0301 	and.w	r3, r3, #1
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d102      	bne.n	800beca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f00c f8cd 	bl	8018064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	695a      	ldr	r2, [r3, #20]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800bed8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4618      	mov	r0, r3
 800bee0:	f005 fc6e 	bl	80117c0 <USB_ReadInterrupts>
 800bee4:	4603      	mov	r3, r0
 800bee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800beea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beee:	f040 80b7 	bne.w	800c060 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	69fa      	ldr	r2, [r7, #28]
 800befc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf00:	f023 0301 	bic.w	r3, r3, #1
 800bf04:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2110      	movs	r1, #16
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f004 fd41 	bl	8010994 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bf12:	2300      	movs	r3, #0
 800bf14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf16:	e046      	b.n	800bfa6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800bf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1a:	015a      	lsls	r2, r3, #5
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	4413      	add	r3, r2
 800bf20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf24:	461a      	mov	r2, r3
 800bf26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bf2a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bf2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2e:	015a      	lsls	r2, r3, #5
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	4413      	add	r3, r2
 800bf34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf3c:	0151      	lsls	r1, r2, #5
 800bf3e:	69fa      	ldr	r2, [r7, #28]
 800bf40:	440a      	add	r2, r1
 800bf42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bf4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4e:	015a      	lsls	r2, r3, #5
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	4413      	add	r3, r2
 800bf54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf58:	461a      	mov	r2, r3
 800bf5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bf5e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf62:	015a      	lsls	r2, r3, #5
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	4413      	add	r3, r2
 800bf68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf70:	0151      	lsls	r1, r2, #5
 800bf72:	69fa      	ldr	r2, [r7, #28]
 800bf74:	440a      	add	r2, r1
 800bf76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf82:	015a      	lsls	r2, r3, #5
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	4413      	add	r3, r2
 800bf88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf90:	0151      	lsls	r1, r2, #5
 800bf92:	69fa      	ldr	r2, [r7, #28]
 800bf94:	440a      	add	r2, r1
 800bf96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bf9e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	791b      	ldrb	r3, [r3, #4]
 800bfaa:	461a      	mov	r2, r3
 800bfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d3b2      	bcc.n	800bf18 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bfb2:	69fb      	ldr	r3, [r7, #28]
 800bfb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfb8:	69db      	ldr	r3, [r3, #28]
 800bfba:	69fa      	ldr	r2, [r7, #28]
 800bfbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bfc0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800bfc4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	7bdb      	ldrb	r3, [r3, #15]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d016      	beq.n	800bffc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfd8:	69fa      	ldr	r2, [r7, #28]
 800bfda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bfde:	f043 030b 	orr.w	r3, r3, #11
 800bfe2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfee:	69fa      	ldr	r2, [r7, #28]
 800bff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bff4:	f043 030b 	orr.w	r3, r3, #11
 800bff8:	6453      	str	r3, [r2, #68]	; 0x44
 800bffa:	e015      	b.n	800c028 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c002:	695b      	ldr	r3, [r3, #20]
 800c004:	69fa      	ldr	r2, [r7, #28]
 800c006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c00a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c00e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800c012:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c01a:	691b      	ldr	r3, [r3, #16]
 800c01c:	69fa      	ldr	r2, [r7, #28]
 800c01e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c022:	f043 030b 	orr.w	r3, r3, #11
 800c026:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	69fa      	ldr	r2, [r7, #28]
 800c032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c036:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c03a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6818      	ldr	r0, [r3, #0]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c04a:	461a      	mov	r2, r3
 800c04c:	f005 fc7c 	bl	8011948 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	695a      	ldr	r2, [r3, #20]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c05e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4618      	mov	r0, r3
 800c066:	f005 fbab 	bl	80117c0 <USB_ReadInterrupts>
 800c06a:	4603      	mov	r3, r0
 800c06c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c074:	d123      	bne.n	800c0be <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4618      	mov	r0, r3
 800c07c:	f005 fc41 	bl	8011902 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4618      	mov	r0, r3
 800c086:	f004 fcfe 	bl	8010a86 <USB_GetDevSpeed>
 800c08a:	4603      	mov	r3, r0
 800c08c:	461a      	mov	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681c      	ldr	r4, [r3, #0]
 800c096:	f001 f9c7 	bl	800d428 <HAL_RCC_GetHCLKFreq>
 800c09a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f004 fa02 	bl	80104ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f00b ffbc 	bl	8018026 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	695a      	ldr	r2, [r3, #20]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800c0bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f005 fb7c 	bl	80117c0 <USB_ReadInterrupts>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	f003 0308 	and.w	r3, r3, #8
 800c0ce:	2b08      	cmp	r3, #8
 800c0d0:	d10a      	bne.n	800c0e8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f00b ff99 	bl	801800a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	695a      	ldr	r2, [r3, #20]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f002 0208 	and.w	r2, r2, #8
 800c0e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f005 fb67 	bl	80117c0 <USB_ReadInterrupts>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0f8:	2b80      	cmp	r3, #128	; 0x80
 800c0fa:	d123      	bne.n	800c144 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800c0fc:	6a3b      	ldr	r3, [r7, #32]
 800c0fe:	699b      	ldr	r3, [r3, #24]
 800c100:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c104:	6a3b      	ldr	r3, [r7, #32]
 800c106:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c108:	2301      	movs	r3, #1
 800c10a:	627b      	str	r3, [r7, #36]	; 0x24
 800c10c:	e014      	b.n	800c138 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800c10e:	6879      	ldr	r1, [r7, #4]
 800c110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c112:	4613      	mov	r3, r2
 800c114:	00db      	lsls	r3, r3, #3
 800c116:	4413      	add	r3, r2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	440b      	add	r3, r1
 800c11c:	f203 2357 	addw	r3, r3, #599	; 0x257
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	2b01      	cmp	r3, #1
 800c124:	d105      	bne.n	800c132 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800c126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	4619      	mov	r1, r3
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 fb08 	bl	800c742 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c134:	3301      	adds	r3, #1
 800c136:	627b      	str	r3, [r7, #36]	; 0x24
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	791b      	ldrb	r3, [r3, #4]
 800c13c:	461a      	mov	r2, r3
 800c13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c140:	4293      	cmp	r3, r2
 800c142:	d3e4      	bcc.n	800c10e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4618      	mov	r0, r3
 800c14a:	f005 fb39 	bl	80117c0 <USB_ReadInterrupts>
 800c14e:	4603      	mov	r3, r0
 800c150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c158:	d13c      	bne.n	800c1d4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c15a:	2301      	movs	r3, #1
 800c15c:	627b      	str	r3, [r7, #36]	; 0x24
 800c15e:	e02b      	b.n	800c1b8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800c160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c162:	015a      	lsls	r2, r3, #5
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	4413      	add	r3, r2
 800c168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c170:	6879      	ldr	r1, [r7, #4]
 800c172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c174:	4613      	mov	r3, r2
 800c176:	00db      	lsls	r3, r3, #3
 800c178:	4413      	add	r3, r2
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	440b      	add	r3, r1
 800c17e:	3318      	adds	r3, #24
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	2b01      	cmp	r3, #1
 800c184:	d115      	bne.n	800c1b2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800c186:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c188:	2b00      	cmp	r3, #0
 800c18a:	da12      	bge.n	800c1b2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800c18c:	6879      	ldr	r1, [r7, #4]
 800c18e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c190:	4613      	mov	r3, r2
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	4413      	add	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	440b      	add	r3, r1
 800c19a:	3317      	adds	r3, #23
 800c19c:	2201      	movs	r2, #1
 800c19e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800c1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fac8 	bl	800c742 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	627b      	str	r3, [r7, #36]	; 0x24
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	791b      	ldrb	r3, [r3, #4]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d3cd      	bcc.n	800c160 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	695a      	ldr	r2, [r3, #20]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800c1d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f005 faf1 	bl	80117c0 <USB_ReadInterrupts>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1e8:	d156      	bne.n	800c298 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	627b      	str	r3, [r7, #36]	; 0x24
 800c1ee:	e045      	b.n	800c27c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f2:	015a      	lsls	r2, r3, #5
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c200:	6879      	ldr	r1, [r7, #4]
 800c202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c204:	4613      	mov	r3, r2
 800c206:	00db      	lsls	r3, r3, #3
 800c208:	4413      	add	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	440b      	add	r3, r1
 800c20e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	2b01      	cmp	r3, #1
 800c216:	d12e      	bne.n	800c276 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c218:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	da2b      	bge.n	800c276 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800c22a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c22e:	429a      	cmp	r2, r3
 800c230:	d121      	bne.n	800c276 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800c232:	6879      	ldr	r1, [r7, #4]
 800c234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c236:	4613      	mov	r3, r2
 800c238:	00db      	lsls	r3, r3, #3
 800c23a:	4413      	add	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	440b      	add	r3, r1
 800c240:	f203 2357 	addw	r3, r3, #599	; 0x257
 800c244:	2201      	movs	r2, #1
 800c246:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800c248:	6a3b      	ldr	r3, [r7, #32]
 800c24a:	699b      	ldr	r3, [r3, #24]
 800c24c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c250:	6a3b      	ldr	r3, [r7, #32]
 800c252:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800c254:	6a3b      	ldr	r3, [r7, #32]
 800c256:	695b      	ldr	r3, [r3, #20]
 800c258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d10a      	bne.n	800c276 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	69fa      	ldr	r2, [r7, #28]
 800c26a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c26e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c272:	6053      	str	r3, [r2, #4]
            break;
 800c274:	e008      	b.n	800c288 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c278:	3301      	adds	r3, #1
 800c27a:	627b      	str	r3, [r7, #36]	; 0x24
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	791b      	ldrb	r3, [r3, #4]
 800c280:	461a      	mov	r2, r3
 800c282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c284:	4293      	cmp	r3, r2
 800c286:	d3b3      	bcc.n	800c1f0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	695a      	ldr	r2, [r3, #20]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800c296:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f005 fa8f 	bl	80117c0 <USB_ReadInterrupts>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2ac:	d10a      	bne.n	800c2c4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f00b ff30 	bl	8018114 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	695a      	ldr	r2, [r3, #20]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800c2c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f005 fa79 	bl	80117c0 <USB_ReadInterrupts>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	f003 0304 	and.w	r3, r3, #4
 800c2d4:	2b04      	cmp	r3, #4
 800c2d6:	d115      	bne.n	800c304 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	f003 0304 	and.w	r3, r3, #4
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d002      	beq.n	800c2f0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f00b ff20 	bl	8018130 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	6859      	ldr	r1, [r3, #4]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	69ba      	ldr	r2, [r7, #24]
 800c2fc:	430a      	orrs	r2, r1
 800c2fe:	605a      	str	r2, [r3, #4]
 800c300:	e000      	b.n	800c304 <HAL_PCD_IRQHandler+0x93c>
      return;
 800c302:	bf00      	nop
    }
  }
}
 800c304:	3734      	adds	r7, #52	; 0x34
 800c306:	46bd      	mov	sp, r7
 800c308:	bd90      	pop	{r4, r7, pc}

0800c30a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b082      	sub	sp, #8
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
 800c312:	460b      	mov	r3, r1
 800c314:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d101      	bne.n	800c324 <HAL_PCD_SetAddress+0x1a>
 800c320:	2302      	movs	r3, #2
 800c322:	e012      	b.n	800c34a <HAL_PCD_SetAddress+0x40>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2201      	movs	r2, #1
 800c328:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	78fa      	ldrb	r2, [r7, #3]
 800c330:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	78fa      	ldrb	r2, [r7, #3]
 800c338:	4611      	mov	r1, r2
 800c33a:	4618      	mov	r0, r3
 800c33c:	f005 f9d8 	bl	80116f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b084      	sub	sp, #16
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	4608      	mov	r0, r1
 800c35c:	4611      	mov	r1, r2
 800c35e:	461a      	mov	r2, r3
 800c360:	4603      	mov	r3, r0
 800c362:	70fb      	strb	r3, [r7, #3]
 800c364:	460b      	mov	r3, r1
 800c366:	803b      	strh	r3, [r7, #0]
 800c368:	4613      	mov	r3, r2
 800c36a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c370:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c374:	2b00      	cmp	r3, #0
 800c376:	da0f      	bge.n	800c398 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c378:	78fb      	ldrb	r3, [r7, #3]
 800c37a:	f003 020f 	and.w	r2, r3, #15
 800c37e:	4613      	mov	r3, r2
 800c380:	00db      	lsls	r3, r3, #3
 800c382:	4413      	add	r3, r2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	3310      	adds	r3, #16
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	4413      	add	r3, r2
 800c38c:	3304      	adds	r3, #4
 800c38e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2201      	movs	r2, #1
 800c394:	705a      	strb	r2, [r3, #1]
 800c396:	e00f      	b.n	800c3b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c398:	78fb      	ldrb	r3, [r7, #3]
 800c39a:	f003 020f 	and.w	r2, r3, #15
 800c39e:	4613      	mov	r3, r2
 800c3a0:	00db      	lsls	r3, r3, #3
 800c3a2:	4413      	add	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	3304      	adds	r3, #4
 800c3b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c3b8:	78fb      	ldrb	r3, [r7, #3]
 800c3ba:	f003 030f 	and.w	r3, r3, #15
 800c3be:	b2da      	uxtb	r2, r3
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c3c4:	883a      	ldrh	r2, [r7, #0]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	78ba      	ldrb	r2, [r7, #2]
 800c3ce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	785b      	ldrb	r3, [r3, #1]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d004      	beq.n	800c3e2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	b29a      	uxth	r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c3e2:	78bb      	ldrb	r3, [r7, #2]
 800c3e4:	2b02      	cmp	r3, #2
 800c3e6:	d102      	bne.n	800c3ee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d101      	bne.n	800c3fc <HAL_PCD_EP_Open+0xaa>
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	e00e      	b.n	800c41a <HAL_PCD_EP_Open+0xc8>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2201      	movs	r2, #1
 800c400:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	68f9      	ldr	r1, [r7, #12]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f004 fb60 	bl	8010ad0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800c418:	7afb      	ldrb	r3, [r7, #11]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b084      	sub	sp, #16
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	460b      	mov	r3, r1
 800c42c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c42e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c432:	2b00      	cmp	r3, #0
 800c434:	da0f      	bge.n	800c456 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c436:	78fb      	ldrb	r3, [r7, #3]
 800c438:	f003 020f 	and.w	r2, r3, #15
 800c43c:	4613      	mov	r3, r2
 800c43e:	00db      	lsls	r3, r3, #3
 800c440:	4413      	add	r3, r2
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	3310      	adds	r3, #16
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	4413      	add	r3, r2
 800c44a:	3304      	adds	r3, #4
 800c44c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2201      	movs	r2, #1
 800c452:	705a      	strb	r2, [r3, #1]
 800c454:	e00f      	b.n	800c476 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c456:	78fb      	ldrb	r3, [r7, #3]
 800c458:	f003 020f 	and.w	r2, r3, #15
 800c45c:	4613      	mov	r3, r2
 800c45e:	00db      	lsls	r3, r3, #3
 800c460:	4413      	add	r3, r2
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	4413      	add	r3, r2
 800c46c:	3304      	adds	r3, #4
 800c46e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2200      	movs	r2, #0
 800c474:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c476:	78fb      	ldrb	r3, [r7, #3]
 800c478:	f003 030f 	and.w	r3, r3, #15
 800c47c:	b2da      	uxtb	r2, r3
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d101      	bne.n	800c490 <HAL_PCD_EP_Close+0x6e>
 800c48c:	2302      	movs	r3, #2
 800c48e:	e00e      	b.n	800c4ae <HAL_PCD_EP_Close+0x8c>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	68f9      	ldr	r1, [r7, #12]
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f004 fb9e 	bl	8010be0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b086      	sub	sp, #24
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	60f8      	str	r0, [r7, #12]
 800c4be:	607a      	str	r2, [r7, #4]
 800c4c0:	603b      	str	r3, [r7, #0]
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c4c6:	7afb      	ldrb	r3, [r7, #11]
 800c4c8:	f003 020f 	and.w	r2, r3, #15
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	00db      	lsls	r3, r3, #3
 800c4d0:	4413      	add	r3, r2
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800c4d8:	68fa      	ldr	r2, [r7, #12]
 800c4da:	4413      	add	r3, r2
 800c4dc:	3304      	adds	r3, #4
 800c4de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	683a      	ldr	r2, [r7, #0]
 800c4ea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c4f8:	7afb      	ldrb	r3, [r7, #11]
 800c4fa:	f003 030f 	and.w	r3, r3, #15
 800c4fe:	b2da      	uxtb	r2, r3
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	799b      	ldrb	r3, [r3, #6]
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d102      	bne.n	800c512 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	6818      	ldr	r0, [r3, #0]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	799b      	ldrb	r3, [r3, #6]
 800c51a:	461a      	mov	r2, r3
 800c51c:	6979      	ldr	r1, [r7, #20]
 800c51e:	f004 fc3b 	bl	8010d98 <USB_EPStartXfer>

  return HAL_OK;
 800c522:	2300      	movs	r3, #0
}
 800c524:	4618      	mov	r0, r3
 800c526:	3718      	adds	r7, #24
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	460b      	mov	r3, r1
 800c536:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c538:	78fb      	ldrb	r3, [r7, #3]
 800c53a:	f003 020f 	and.w	r2, r3, #15
 800c53e:	6879      	ldr	r1, [r7, #4]
 800c540:	4613      	mov	r3, r2
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	4413      	add	r3, r2
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	440b      	add	r3, r1
 800c54a:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800c54e:	681b      	ldr	r3, [r3, #0]
}
 800c550:	4618      	mov	r0, r3
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b086      	sub	sp, #24
 800c560:	af00      	add	r7, sp, #0
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	607a      	str	r2, [r7, #4]
 800c566:	603b      	str	r3, [r7, #0]
 800c568:	460b      	mov	r3, r1
 800c56a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c56c:	7afb      	ldrb	r3, [r7, #11]
 800c56e:	f003 020f 	and.w	r2, r3, #15
 800c572:	4613      	mov	r3, r2
 800c574:	00db      	lsls	r3, r3, #3
 800c576:	4413      	add	r3, r2
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	3310      	adds	r3, #16
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	4413      	add	r3, r2
 800c580:	3304      	adds	r3, #4
 800c582:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	683a      	ldr	r2, [r7, #0]
 800c58e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	2200      	movs	r2, #0
 800c594:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	2201      	movs	r2, #1
 800c59a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c59c:	7afb      	ldrb	r3, [r7, #11]
 800c59e:	f003 030f 	and.w	r3, r3, #15
 800c5a2:	b2da      	uxtb	r2, r3
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	799b      	ldrb	r3, [r3, #6]
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d102      	bne.n	800c5b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	6818      	ldr	r0, [r3, #0]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	799b      	ldrb	r3, [r3, #6]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	6979      	ldr	r1, [r7, #20]
 800c5c2:	f004 fbe9 	bl	8010d98 <USB_EPStartXfer>

  return HAL_OK;
 800c5c6:	2300      	movs	r3, #0
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3718      	adds	r7, #24
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	460b      	mov	r3, r1
 800c5da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c5dc:	78fb      	ldrb	r3, [r7, #3]
 800c5de:	f003 030f 	and.w	r3, r3, #15
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	7912      	ldrb	r2, [r2, #4]
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d901      	bls.n	800c5ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e04f      	b.n	800c68e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c5ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	da0f      	bge.n	800c616 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c5f6:	78fb      	ldrb	r3, [r7, #3]
 800c5f8:	f003 020f 	and.w	r2, r3, #15
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	00db      	lsls	r3, r3, #3
 800c600:	4413      	add	r3, r2
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	3310      	adds	r3, #16
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	4413      	add	r3, r2
 800c60a:	3304      	adds	r3, #4
 800c60c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2201      	movs	r2, #1
 800c612:	705a      	strb	r2, [r3, #1]
 800c614:	e00d      	b.n	800c632 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c616:	78fa      	ldrb	r2, [r7, #3]
 800c618:	4613      	mov	r3, r2
 800c61a:	00db      	lsls	r3, r3, #3
 800c61c:	4413      	add	r3, r2
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	4413      	add	r3, r2
 800c628:	3304      	adds	r3, #4
 800c62a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2200      	movs	r2, #0
 800c630:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2201      	movs	r2, #1
 800c636:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c638:	78fb      	ldrb	r3, [r7, #3]
 800c63a:	f003 030f 	and.w	r3, r3, #15
 800c63e:	b2da      	uxtb	r2, r3
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d101      	bne.n	800c652 <HAL_PCD_EP_SetStall+0x82>
 800c64e:	2302      	movs	r3, #2
 800c650:	e01d      	b.n	800c68e <HAL_PCD_EP_SetStall+0xbe>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2201      	movs	r2, #1
 800c656:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	68f9      	ldr	r1, [r7, #12]
 800c660:	4618      	mov	r0, r3
 800c662:	f004 ff71 	bl	8011548 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c666:	78fb      	ldrb	r3, [r7, #3]
 800c668:	f003 030f 	and.w	r3, r3, #15
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d109      	bne.n	800c684 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6818      	ldr	r0, [r3, #0]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	7999      	ldrb	r1, [r3, #6]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800c67e:	461a      	mov	r2, r3
 800c680:	f005 f962 	bl	8011948 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3710      	adds	r7, #16
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b084      	sub	sp, #16
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
 800c69e:	460b      	mov	r3, r1
 800c6a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c6a2:	78fb      	ldrb	r3, [r7, #3]
 800c6a4:	f003 030f 	and.w	r3, r3, #15
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	7912      	ldrb	r2, [r2, #4]
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d901      	bls.n	800c6b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e042      	b.n	800c73a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c6b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	da0f      	bge.n	800c6dc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c6bc:	78fb      	ldrb	r3, [r7, #3]
 800c6be:	f003 020f 	and.w	r2, r3, #15
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	00db      	lsls	r3, r3, #3
 800c6c6:	4413      	add	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	3310      	adds	r3, #16
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	4413      	add	r3, r2
 800c6d0:	3304      	adds	r3, #4
 800c6d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	705a      	strb	r2, [r3, #1]
 800c6da:	e00f      	b.n	800c6fc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c6dc:	78fb      	ldrb	r3, [r7, #3]
 800c6de:	f003 020f 	and.w	r2, r3, #15
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	00db      	lsls	r3, r3, #3
 800c6e6:	4413      	add	r3, r2
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	3304      	adds	r3, #4
 800c6f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2200      	movs	r2, #0
 800c700:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c702:	78fb      	ldrb	r3, [r7, #3]
 800c704:	f003 030f 	and.w	r3, r3, #15
 800c708:	b2da      	uxtb	r2, r3
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800c714:	2b01      	cmp	r3, #1
 800c716:	d101      	bne.n	800c71c <HAL_PCD_EP_ClrStall+0x86>
 800c718:	2302      	movs	r3, #2
 800c71a:	e00e      	b.n	800c73a <HAL_PCD_EP_ClrStall+0xa4>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2201      	movs	r2, #1
 800c720:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	68f9      	ldr	r1, [r7, #12]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f004 ff7a 	bl	8011624 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800c738:	2300      	movs	r3, #0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b084      	sub	sp, #16
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	460b      	mov	r3, r1
 800c74c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c74e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c752:	2b00      	cmp	r3, #0
 800c754:	da0c      	bge.n	800c770 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c756:	78fb      	ldrb	r3, [r7, #3]
 800c758:	f003 020f 	and.w	r2, r3, #15
 800c75c:	4613      	mov	r3, r2
 800c75e:	00db      	lsls	r3, r3, #3
 800c760:	4413      	add	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	3310      	adds	r3, #16
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	4413      	add	r3, r2
 800c76a:	3304      	adds	r3, #4
 800c76c:	60fb      	str	r3, [r7, #12]
 800c76e:	e00c      	b.n	800c78a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c770:	78fb      	ldrb	r3, [r7, #3]
 800c772:	f003 020f 	and.w	r2, r3, #15
 800c776:	4613      	mov	r3, r2
 800c778:	00db      	lsls	r3, r3, #3
 800c77a:	4413      	add	r3, r2
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	4413      	add	r3, r2
 800c786:	3304      	adds	r3, #4
 800c788:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	68f9      	ldr	r1, [r7, #12]
 800c790:	4618      	mov	r0, r3
 800c792:	f004 fd99 	bl	80112c8 <USB_EPStopXfer>
 800c796:	4603      	mov	r3, r0
 800c798:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c79a:	7afb      	ldrb	r3, [r7, #11]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3710      	adds	r7, #16
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b08a      	sub	sp, #40	; 0x28
 800c7a8:	af02      	add	r7, sp, #8
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c7b8:	683a      	ldr	r2, [r7, #0]
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	00db      	lsls	r3, r3, #3
 800c7be:	4413      	add	r3, r2
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	3310      	adds	r3, #16
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	695a      	ldr	r2, [r3, #20]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	691b      	ldr	r3, [r3, #16]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d901      	bls.n	800c7dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e06b      	b.n	800c8b4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	691a      	ldr	r2, [r3, #16]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	695b      	ldr	r3, [r3, #20]
 800c7e4:	1ad3      	subs	r3, r2, r3
 800c7e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	69fa      	ldr	r2, [r7, #28]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d902      	bls.n	800c7f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	3303      	adds	r3, #3
 800c7fc:	089b      	lsrs	r3, r3, #2
 800c7fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c800:	e02a      	b.n	800c858 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	691a      	ldr	r2, [r3, #16]
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	695b      	ldr	r3, [r3, #20]
 800c80a:	1ad3      	subs	r3, r2, r3
 800c80c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	69fa      	ldr	r2, [r7, #28]
 800c814:	429a      	cmp	r2, r3
 800c816:	d902      	bls.n	800c81e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	3303      	adds	r3, #3
 800c822:	089b      	lsrs	r3, r3, #2
 800c824:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	68d9      	ldr	r1, [r3, #12]
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	b2da      	uxtb	r2, r3
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	4603      	mov	r3, r0
 800c83a:	6978      	ldr	r0, [r7, #20]
 800c83c:	f004 fdee 	bl	801141c <USB_WritePacket>

    ep->xfer_buff  += len;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	68da      	ldr	r2, [r3, #12]
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	441a      	add	r2, r3
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	695a      	ldr	r2, [r3, #20]
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	441a      	add	r2, r3
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	015a      	lsls	r2, r3, #5
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	4413      	add	r3, r2
 800c860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c864:	699b      	ldr	r3, [r3, #24]
 800c866:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c868:	69ba      	ldr	r2, [r7, #24]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d809      	bhi.n	800c882 <PCD_WriteEmptyTxFifo+0xde>
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	695a      	ldr	r2, [r3, #20]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c876:	429a      	cmp	r2, r3
 800c878:	d203      	bcs.n	800c882 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	691b      	ldr	r3, [r3, #16]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d1bf      	bne.n	800c802 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	691a      	ldr	r2, [r3, #16]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	695b      	ldr	r3, [r3, #20]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d811      	bhi.n	800c8b2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	f003 030f 	and.w	r3, r3, #15
 800c894:	2201      	movs	r2, #1
 800c896:	fa02 f303 	lsl.w	r3, r2, r3
 800c89a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	43db      	mvns	r3, r3
 800c8a8:	6939      	ldr	r1, [r7, #16]
 800c8aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8ae:	4013      	ands	r3, r2
 800c8b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3720      	adds	r7, #32
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b088      	sub	sp, #32
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	333c      	adds	r3, #60	; 0x3c
 800c8d4:	3304      	adds	r3, #4
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	015a      	lsls	r2, r3, #5
 800c8de:	69bb      	ldr	r3, [r7, #24]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	799b      	ldrb	r3, [r3, #6]
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d17b      	bne.n	800c9ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	f003 0308 	and.w	r3, r3, #8
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d015      	beq.n	800c928 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	4a61      	ldr	r2, [pc, #388]	; (800ca84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c900:	4293      	cmp	r3, r2
 800c902:	f240 80b9 	bls.w	800ca78 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f000 80b3 	beq.w	800ca78 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	015a      	lsls	r2, r3, #5
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	4413      	add	r3, r2
 800c91a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c91e:	461a      	mov	r2, r3
 800c920:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c924:	6093      	str	r3, [r2, #8]
 800c926:	e0a7      	b.n	800ca78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	f003 0320 	and.w	r3, r3, #32
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d009      	beq.n	800c946 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	015a      	lsls	r2, r3, #5
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	4413      	add	r3, r2
 800c93a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c93e:	461a      	mov	r2, r3
 800c940:	2320      	movs	r3, #32
 800c942:	6093      	str	r3, [r2, #8]
 800c944:	e098      	b.n	800ca78 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f040 8093 	bne.w	800ca78 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	4a4b      	ldr	r2, [pc, #300]	; (800ca84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d90f      	bls.n	800c97a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00a      	beq.n	800c97a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	015a      	lsls	r2, r3, #5
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	4413      	add	r3, r2
 800c96c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c970:	461a      	mov	r2, r3
 800c972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c976:	6093      	str	r3, [r2, #8]
 800c978:	e07e      	b.n	800ca78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c97a:	683a      	ldr	r2, [r7, #0]
 800c97c:	4613      	mov	r3, r2
 800c97e:	00db      	lsls	r3, r3, #3
 800c980:	4413      	add	r3, r2
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	4413      	add	r3, r2
 800c98c:	3304      	adds	r3, #4
 800c98e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6a1a      	ldr	r2, [r3, #32]
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	0159      	lsls	r1, r3, #5
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	440b      	add	r3, r1
 800c99c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9a6:	1ad2      	subs	r2, r2, r3
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d114      	bne.n	800c9dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d109      	bne.n	800c9ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6818      	ldr	r0, [r3, #0]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	2101      	movs	r1, #1
 800c9c8:	f004 ffbe 	bl	8011948 <USB_EP0_OutStart>
 800c9cc:	e006      	b.n	800c9dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	68da      	ldr	r2, [r3, #12]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	695b      	ldr	r3, [r3, #20]
 800c9d6:	441a      	add	r2, r3
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f00b fadc 	bl	8017fa0 <HAL_PCD_DataOutStageCallback>
 800c9e8:	e046      	b.n	800ca78 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	4a26      	ldr	r2, [pc, #152]	; (800ca88 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d124      	bne.n	800ca3c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00a      	beq.n	800ca12 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	015a      	lsls	r2, r3, #5
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	4413      	add	r3, r2
 800ca04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca08:	461a      	mov	r2, r3
 800ca0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca0e:	6093      	str	r3, [r2, #8]
 800ca10:	e032      	b.n	800ca78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	f003 0320 	and.w	r3, r3, #32
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d008      	beq.n	800ca2e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	015a      	lsls	r2, r3, #5
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	4413      	add	r3, r2
 800ca24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca28:	461a      	mov	r2, r3
 800ca2a:	2320      	movs	r3, #32
 800ca2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	4619      	mov	r1, r3
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f00b fab3 	bl	8017fa0 <HAL_PCD_DataOutStageCallback>
 800ca3a:	e01d      	b.n	800ca78 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d114      	bne.n	800ca6c <PCD_EP_OutXfrComplete_int+0x1b0>
 800ca42:	6879      	ldr	r1, [r7, #4]
 800ca44:	683a      	ldr	r2, [r7, #0]
 800ca46:	4613      	mov	r3, r2
 800ca48:	00db      	lsls	r3, r3, #3
 800ca4a:	4413      	add	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	440b      	add	r3, r1
 800ca50:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d108      	bne.n	800ca6c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6818      	ldr	r0, [r3, #0]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800ca64:	461a      	mov	r2, r3
 800ca66:	2100      	movs	r1, #0
 800ca68:	f004 ff6e 	bl	8011948 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	4619      	mov	r1, r3
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f00b fa94 	bl	8017fa0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3720      	adds	r7, #32
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	4f54300a 	.word	0x4f54300a
 800ca88:	4f54310a 	.word	0x4f54310a

0800ca8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b086      	sub	sp, #24
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	333c      	adds	r3, #60	; 0x3c
 800caa4:	3304      	adds	r3, #4
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	015a      	lsls	r2, r3, #5
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	4413      	add	r3, r2
 800cab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	4a15      	ldr	r2, [pc, #84]	; (800cb14 <PCD_EP_OutSetupPacket_int+0x88>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d90e      	bls.n	800cae0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d009      	beq.n	800cae0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	015a      	lsls	r2, r3, #5
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	4413      	add	r3, r2
 800cad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cad8:	461a      	mov	r2, r3
 800cada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cade:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f00b fa4b 	bl	8017f7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	4a0a      	ldr	r2, [pc, #40]	; (800cb14 <PCD_EP_OutSetupPacket_int+0x88>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d90c      	bls.n	800cb08 <PCD_EP_OutSetupPacket_int+0x7c>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	799b      	ldrb	r3, [r3, #6]
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d108      	bne.n	800cb08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6818      	ldr	r0, [r3, #0]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800cb00:	461a      	mov	r2, r3
 800cb02:	2101      	movs	r1, #1
 800cb04:	f004 ff20 	bl	8011948 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3718      	adds	r7, #24
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	4f54300a 	.word	0x4f54300a

0800cb18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b085      	sub	sp, #20
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	460b      	mov	r3, r1
 800cb22:	70fb      	strb	r3, [r7, #3]
 800cb24:	4613      	mov	r3, r2
 800cb26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800cb30:	78fb      	ldrb	r3, [r7, #3]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d107      	bne.n	800cb46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800cb36:	883b      	ldrh	r3, [r7, #0]
 800cb38:	0419      	lsls	r1, r3, #16
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	68ba      	ldr	r2, [r7, #8]
 800cb40:	430a      	orrs	r2, r1
 800cb42:	629a      	str	r2, [r3, #40]	; 0x28
 800cb44:	e028      	b.n	800cb98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb4c:	0c1b      	lsrs	r3, r3, #16
 800cb4e:	68ba      	ldr	r2, [r7, #8]
 800cb50:	4413      	add	r3, r2
 800cb52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cb54:	2300      	movs	r3, #0
 800cb56:	73fb      	strb	r3, [r7, #15]
 800cb58:	e00d      	b.n	800cb76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	7bfb      	ldrb	r3, [r7, #15]
 800cb60:	3340      	adds	r3, #64	; 0x40
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	4413      	add	r3, r2
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	0c1b      	lsrs	r3, r3, #16
 800cb6a:	68ba      	ldr	r2, [r7, #8]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cb70:	7bfb      	ldrb	r3, [r7, #15]
 800cb72:	3301      	adds	r3, #1
 800cb74:	73fb      	strb	r3, [r7, #15]
 800cb76:	7bfa      	ldrb	r2, [r7, #15]
 800cb78:	78fb      	ldrb	r3, [r7, #3]
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d3ec      	bcc.n	800cb5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800cb80:	883b      	ldrh	r3, [r7, #0]
 800cb82:	0418      	lsls	r0, r3, #16
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6819      	ldr	r1, [r3, #0]
 800cb88:	78fb      	ldrb	r3, [r7, #3]
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	68ba      	ldr	r2, [r7, #8]
 800cb8e:	4302      	orrs	r2, r0
 800cb90:	3340      	adds	r3, #64	; 0x40
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	440b      	add	r3, r1
 800cb96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3714      	adds	r7, #20
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr

0800cba6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800cba6:	b480      	push	{r7}
 800cba8:	b083      	sub	sp, #12
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
 800cbae:	460b      	mov	r3, r1
 800cbb0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	887a      	ldrh	r2, [r7, #2]
 800cbb8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800cbba:	2300      	movs	r3, #0
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800cbd4:	bf00      	nop
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d101      	bne.n	800cbf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e267      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f003 0301 	and.w	r3, r3, #1
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d075      	beq.n	800ccea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cbfe:	4b88      	ldr	r3, [pc, #544]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	f003 030c 	and.w	r3, r3, #12
 800cc06:	2b04      	cmp	r3, #4
 800cc08:	d00c      	beq.n	800cc24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cc0a:	4b85      	ldr	r3, [pc, #532]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cc12:	2b08      	cmp	r3, #8
 800cc14:	d112      	bne.n	800cc3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cc16:	4b82      	ldr	r3, [pc, #520]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc22:	d10b      	bne.n	800cc3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc24:	4b7e      	ldr	r3, [pc, #504]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d05b      	beq.n	800cce8 <HAL_RCC_OscConfig+0x108>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d157      	bne.n	800cce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	e242      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc44:	d106      	bne.n	800cc54 <HAL_RCC_OscConfig+0x74>
 800cc46:	4b76      	ldr	r3, [pc, #472]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a75      	ldr	r2, [pc, #468]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cc4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc50:	6013      	str	r3, [r2, #0]
 800cc52:	e01d      	b.n	800cc90 <HAL_RCC_OscConfig+0xb0>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cc5c:	d10c      	bne.n	800cc78 <HAL_RCC_OscConfig+0x98>
 800cc5e:	4b70      	ldr	r3, [pc, #448]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a6f      	ldr	r2, [pc, #444]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cc64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cc68:	6013      	str	r3, [r2, #0]
 800cc6a:	4b6d      	ldr	r3, [pc, #436]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a6c      	ldr	r2, [pc, #432]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cc70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc74:	6013      	str	r3, [r2, #0]
 800cc76:	e00b      	b.n	800cc90 <HAL_RCC_OscConfig+0xb0>
 800cc78:	4b69      	ldr	r3, [pc, #420]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a68      	ldr	r2, [pc, #416]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cc7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc82:	6013      	str	r3, [r2, #0]
 800cc84:	4b66      	ldr	r3, [pc, #408]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a65      	ldr	r2, [pc, #404]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cc8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d013      	beq.n	800ccc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc98:	f7fa fb5e 	bl	8007358 <HAL_GetTick>
 800cc9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc9e:	e008      	b.n	800ccb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cca0:	f7fa fb5a 	bl	8007358 <HAL_GetTick>
 800cca4:	4602      	mov	r2, r0
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	1ad3      	subs	r3, r2, r3
 800ccaa:	2b64      	cmp	r3, #100	; 0x64
 800ccac:	d901      	bls.n	800ccb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ccae:	2303      	movs	r3, #3
 800ccb0:	e207      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ccb2:	4b5b      	ldr	r3, [pc, #364]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d0f0      	beq.n	800cca0 <HAL_RCC_OscConfig+0xc0>
 800ccbe:	e014      	b.n	800ccea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ccc0:	f7fa fb4a 	bl	8007358 <HAL_GetTick>
 800ccc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ccc6:	e008      	b.n	800ccda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ccc8:	f7fa fb46 	bl	8007358 <HAL_GetTick>
 800cccc:	4602      	mov	r2, r0
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	1ad3      	subs	r3, r2, r3
 800ccd2:	2b64      	cmp	r3, #100	; 0x64
 800ccd4:	d901      	bls.n	800ccda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ccd6:	2303      	movs	r3, #3
 800ccd8:	e1f3      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ccda:	4b51      	ldr	r3, [pc, #324]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d1f0      	bne.n	800ccc8 <HAL_RCC_OscConfig+0xe8>
 800cce6:	e000      	b.n	800ccea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f003 0302 	and.w	r3, r3, #2
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d063      	beq.n	800cdbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ccf6:	4b4a      	ldr	r3, [pc, #296]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	f003 030c 	and.w	r3, r3, #12
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00b      	beq.n	800cd1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cd02:	4b47      	ldr	r3, [pc, #284]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800cd0a:	2b08      	cmp	r3, #8
 800cd0c:	d11c      	bne.n	800cd48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cd0e:	4b44      	ldr	r3, [pc, #272]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d116      	bne.n	800cd48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cd1a:	4b41      	ldr	r3, [pc, #260]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f003 0302 	and.w	r3, r3, #2
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d005      	beq.n	800cd32 <HAL_RCC_OscConfig+0x152>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d001      	beq.n	800cd32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e1c7      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd32:	4b3b      	ldr	r3, [pc, #236]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	691b      	ldr	r3, [r3, #16]
 800cd3e:	00db      	lsls	r3, r3, #3
 800cd40:	4937      	ldr	r1, [pc, #220]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cd42:	4313      	orrs	r3, r2
 800cd44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cd46:	e03a      	b.n	800cdbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	68db      	ldr	r3, [r3, #12]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d020      	beq.n	800cd92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cd50:	4b34      	ldr	r3, [pc, #208]	; (800ce24 <HAL_RCC_OscConfig+0x244>)
 800cd52:	2201      	movs	r2, #1
 800cd54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd56:	f7fa faff 	bl	8007358 <HAL_GetTick>
 800cd5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd5c:	e008      	b.n	800cd70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cd5e:	f7fa fafb 	bl	8007358 <HAL_GetTick>
 800cd62:	4602      	mov	r2, r0
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	1ad3      	subs	r3, r2, r3
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	d901      	bls.n	800cd70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800cd6c:	2303      	movs	r3, #3
 800cd6e:	e1a8      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd70:	4b2b      	ldr	r3, [pc, #172]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f003 0302 	and.w	r3, r3, #2
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d0f0      	beq.n	800cd5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd7c:	4b28      	ldr	r3, [pc, #160]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	691b      	ldr	r3, [r3, #16]
 800cd88:	00db      	lsls	r3, r3, #3
 800cd8a:	4925      	ldr	r1, [pc, #148]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	600b      	str	r3, [r1, #0]
 800cd90:	e015      	b.n	800cdbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cd92:	4b24      	ldr	r3, [pc, #144]	; (800ce24 <HAL_RCC_OscConfig+0x244>)
 800cd94:	2200      	movs	r2, #0
 800cd96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd98:	f7fa fade 	bl	8007358 <HAL_GetTick>
 800cd9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd9e:	e008      	b.n	800cdb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cda0:	f7fa fada 	bl	8007358 <HAL_GetTick>
 800cda4:	4602      	mov	r2, r0
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	1ad3      	subs	r3, r2, r3
 800cdaa:	2b02      	cmp	r3, #2
 800cdac:	d901      	bls.n	800cdb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800cdae:	2303      	movs	r3, #3
 800cdb0:	e187      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cdb2:	4b1b      	ldr	r3, [pc, #108]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f003 0302 	and.w	r3, r3, #2
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1f0      	bne.n	800cda0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f003 0308 	and.w	r3, r3, #8
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d036      	beq.n	800ce38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	695b      	ldr	r3, [r3, #20]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d016      	beq.n	800ce00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cdd2:	4b15      	ldr	r3, [pc, #84]	; (800ce28 <HAL_RCC_OscConfig+0x248>)
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdd8:	f7fa fabe 	bl	8007358 <HAL_GetTick>
 800cddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cdde:	e008      	b.n	800cdf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cde0:	f7fa faba 	bl	8007358 <HAL_GetTick>
 800cde4:	4602      	mov	r2, r0
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	2b02      	cmp	r3, #2
 800cdec:	d901      	bls.n	800cdf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cdee:	2303      	movs	r3, #3
 800cdf0:	e167      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cdf2:	4b0b      	ldr	r3, [pc, #44]	; (800ce20 <HAL_RCC_OscConfig+0x240>)
 800cdf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdf6:	f003 0302 	and.w	r3, r3, #2
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d0f0      	beq.n	800cde0 <HAL_RCC_OscConfig+0x200>
 800cdfe:	e01b      	b.n	800ce38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ce00:	4b09      	ldr	r3, [pc, #36]	; (800ce28 <HAL_RCC_OscConfig+0x248>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ce06:	f7fa faa7 	bl	8007358 <HAL_GetTick>
 800ce0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ce0c:	e00e      	b.n	800ce2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ce0e:	f7fa faa3 	bl	8007358 <HAL_GetTick>
 800ce12:	4602      	mov	r2, r0
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	1ad3      	subs	r3, r2, r3
 800ce18:	2b02      	cmp	r3, #2
 800ce1a:	d907      	bls.n	800ce2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ce1c:	2303      	movs	r3, #3
 800ce1e:	e150      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
 800ce20:	40023800 	.word	0x40023800
 800ce24:	42470000 	.word	0x42470000
 800ce28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ce2c:	4b88      	ldr	r3, [pc, #544]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800ce2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce30:	f003 0302 	and.w	r3, r3, #2
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1ea      	bne.n	800ce0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f003 0304 	and.w	r3, r3, #4
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	f000 8097 	beq.w	800cf74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ce46:	2300      	movs	r3, #0
 800ce48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ce4a:	4b81      	ldr	r3, [pc, #516]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800ce4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d10f      	bne.n	800ce76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ce56:	2300      	movs	r3, #0
 800ce58:	60bb      	str	r3, [r7, #8]
 800ce5a:	4b7d      	ldr	r3, [pc, #500]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800ce5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce5e:	4a7c      	ldr	r2, [pc, #496]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800ce60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce64:	6413      	str	r3, [r2, #64]	; 0x40
 800ce66:	4b7a      	ldr	r3, [pc, #488]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800ce68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce6e:	60bb      	str	r3, [r7, #8]
 800ce70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ce72:	2301      	movs	r3, #1
 800ce74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce76:	4b77      	ldr	r3, [pc, #476]	; (800d054 <HAL_RCC_OscConfig+0x474>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d118      	bne.n	800ceb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ce82:	4b74      	ldr	r3, [pc, #464]	; (800d054 <HAL_RCC_OscConfig+0x474>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	4a73      	ldr	r2, [pc, #460]	; (800d054 <HAL_RCC_OscConfig+0x474>)
 800ce88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ce8e:	f7fa fa63 	bl	8007358 <HAL_GetTick>
 800ce92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce94:	e008      	b.n	800cea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce96:	f7fa fa5f 	bl	8007358 <HAL_GetTick>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	1ad3      	subs	r3, r2, r3
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	d901      	bls.n	800cea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800cea4:	2303      	movs	r3, #3
 800cea6:	e10c      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cea8:	4b6a      	ldr	r3, [pc, #424]	; (800d054 <HAL_RCC_OscConfig+0x474>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d0f0      	beq.n	800ce96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d106      	bne.n	800ceca <HAL_RCC_OscConfig+0x2ea>
 800cebc:	4b64      	ldr	r3, [pc, #400]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800cebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cec0:	4a63      	ldr	r2, [pc, #396]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800cec2:	f043 0301 	orr.w	r3, r3, #1
 800cec6:	6713      	str	r3, [r2, #112]	; 0x70
 800cec8:	e01c      	b.n	800cf04 <HAL_RCC_OscConfig+0x324>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	2b05      	cmp	r3, #5
 800ced0:	d10c      	bne.n	800ceec <HAL_RCC_OscConfig+0x30c>
 800ced2:	4b5f      	ldr	r3, [pc, #380]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800ced4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ced6:	4a5e      	ldr	r2, [pc, #376]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800ced8:	f043 0304 	orr.w	r3, r3, #4
 800cedc:	6713      	str	r3, [r2, #112]	; 0x70
 800cede:	4b5c      	ldr	r3, [pc, #368]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800cee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cee2:	4a5b      	ldr	r2, [pc, #364]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800cee4:	f043 0301 	orr.w	r3, r3, #1
 800cee8:	6713      	str	r3, [r2, #112]	; 0x70
 800ceea:	e00b      	b.n	800cf04 <HAL_RCC_OscConfig+0x324>
 800ceec:	4b58      	ldr	r3, [pc, #352]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800ceee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cef0:	4a57      	ldr	r2, [pc, #348]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800cef2:	f023 0301 	bic.w	r3, r3, #1
 800cef6:	6713      	str	r3, [r2, #112]	; 0x70
 800cef8:	4b55      	ldr	r3, [pc, #340]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800cefa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cefc:	4a54      	ldr	r2, [pc, #336]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800cefe:	f023 0304 	bic.w	r3, r3, #4
 800cf02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	689b      	ldr	r3, [r3, #8]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d015      	beq.n	800cf38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf0c:	f7fa fa24 	bl	8007358 <HAL_GetTick>
 800cf10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cf12:	e00a      	b.n	800cf2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cf14:	f7fa fa20 	bl	8007358 <HAL_GetTick>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	1ad3      	subs	r3, r2, r3
 800cf1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d901      	bls.n	800cf2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800cf26:	2303      	movs	r3, #3
 800cf28:	e0cb      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cf2a:	4b49      	ldr	r3, [pc, #292]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800cf2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf2e:	f003 0302 	and.w	r3, r3, #2
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d0ee      	beq.n	800cf14 <HAL_RCC_OscConfig+0x334>
 800cf36:	e014      	b.n	800cf62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cf38:	f7fa fa0e 	bl	8007358 <HAL_GetTick>
 800cf3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cf3e:	e00a      	b.n	800cf56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cf40:	f7fa fa0a 	bl	8007358 <HAL_GetTick>
 800cf44:	4602      	mov	r2, r0
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	1ad3      	subs	r3, r2, r3
 800cf4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d901      	bls.n	800cf56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800cf52:	2303      	movs	r3, #3
 800cf54:	e0b5      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cf56:	4b3e      	ldr	r3, [pc, #248]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800cf58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf5a:	f003 0302 	and.w	r3, r3, #2
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d1ee      	bne.n	800cf40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cf62:	7dfb      	ldrb	r3, [r7, #23]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d105      	bne.n	800cf74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cf68:	4b39      	ldr	r3, [pc, #228]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800cf6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6c:	4a38      	ldr	r2, [pc, #224]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800cf6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	699b      	ldr	r3, [r3, #24]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	f000 80a1 	beq.w	800d0c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cf7e:	4b34      	ldr	r3, [pc, #208]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	f003 030c 	and.w	r3, r3, #12
 800cf86:	2b08      	cmp	r3, #8
 800cf88:	d05c      	beq.n	800d044 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	699b      	ldr	r3, [r3, #24]
 800cf8e:	2b02      	cmp	r3, #2
 800cf90:	d141      	bne.n	800d016 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf92:	4b31      	ldr	r3, [pc, #196]	; (800d058 <HAL_RCC_OscConfig+0x478>)
 800cf94:	2200      	movs	r2, #0
 800cf96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cf98:	f7fa f9de 	bl	8007358 <HAL_GetTick>
 800cf9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf9e:	e008      	b.n	800cfb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cfa0:	f7fa f9da 	bl	8007358 <HAL_GetTick>
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	1ad3      	subs	r3, r2, r3
 800cfaa:	2b02      	cmp	r3, #2
 800cfac:	d901      	bls.n	800cfb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800cfae:	2303      	movs	r3, #3
 800cfb0:	e087      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cfb2:	4b27      	ldr	r3, [pc, #156]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1f0      	bne.n	800cfa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	69da      	ldr	r2, [r3, #28]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	431a      	orrs	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfcc:	019b      	lsls	r3, r3, #6
 800cfce:	431a      	orrs	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd4:	085b      	lsrs	r3, r3, #1
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	041b      	lsls	r3, r3, #16
 800cfda:	431a      	orrs	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe0:	061b      	lsls	r3, r3, #24
 800cfe2:	491b      	ldr	r1, [pc, #108]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cfe8:	4b1b      	ldr	r3, [pc, #108]	; (800d058 <HAL_RCC_OscConfig+0x478>)
 800cfea:	2201      	movs	r2, #1
 800cfec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cfee:	f7fa f9b3 	bl	8007358 <HAL_GetTick>
 800cff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cff4:	e008      	b.n	800d008 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cff6:	f7fa f9af 	bl	8007358 <HAL_GetTick>
 800cffa:	4602      	mov	r2, r0
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	2b02      	cmp	r3, #2
 800d002:	d901      	bls.n	800d008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d004:	2303      	movs	r3, #3
 800d006:	e05c      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d008:	4b11      	ldr	r3, [pc, #68]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d010:	2b00      	cmp	r3, #0
 800d012:	d0f0      	beq.n	800cff6 <HAL_RCC_OscConfig+0x416>
 800d014:	e054      	b.n	800d0c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d016:	4b10      	ldr	r3, [pc, #64]	; (800d058 <HAL_RCC_OscConfig+0x478>)
 800d018:	2200      	movs	r2, #0
 800d01a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d01c:	f7fa f99c 	bl	8007358 <HAL_GetTick>
 800d020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d022:	e008      	b.n	800d036 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d024:	f7fa f998 	bl	8007358 <HAL_GetTick>
 800d028:	4602      	mov	r2, r0
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	2b02      	cmp	r3, #2
 800d030:	d901      	bls.n	800d036 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800d032:	2303      	movs	r3, #3
 800d034:	e045      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d036:	4b06      	ldr	r3, [pc, #24]	; (800d050 <HAL_RCC_OscConfig+0x470>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d1f0      	bne.n	800d024 <HAL_RCC_OscConfig+0x444>
 800d042:	e03d      	b.n	800d0c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	699b      	ldr	r3, [r3, #24]
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d107      	bne.n	800d05c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800d04c:	2301      	movs	r3, #1
 800d04e:	e038      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
 800d050:	40023800 	.word	0x40023800
 800d054:	40007000 	.word	0x40007000
 800d058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d05c:	4b1b      	ldr	r3, [pc, #108]	; (800d0cc <HAL_RCC_OscConfig+0x4ec>)
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	699b      	ldr	r3, [r3, #24]
 800d066:	2b01      	cmp	r3, #1
 800d068:	d028      	beq.n	800d0bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d074:	429a      	cmp	r2, r3
 800d076:	d121      	bne.n	800d0bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d082:	429a      	cmp	r2, r3
 800d084:	d11a      	bne.n	800d0bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d086:	68fa      	ldr	r2, [r7, #12]
 800d088:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d08c:	4013      	ands	r3, r2
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d094:	4293      	cmp	r3, r2
 800d096:	d111      	bne.n	800d0bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0a2:	085b      	lsrs	r3, r3, #1
 800d0a4:	3b01      	subs	r3, #1
 800d0a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d107      	bne.n	800d0bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d001      	beq.n	800d0c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e000      	b.n	800d0c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800d0c0:	2300      	movs	r3, #0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3718      	adds	r7, #24
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	40023800 	.word	0x40023800

0800d0d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b084      	sub	sp, #16
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d101      	bne.n	800d0e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e0cc      	b.n	800d27e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d0e4:	4b68      	ldr	r3, [pc, #416]	; (800d288 <HAL_RCC_ClockConfig+0x1b8>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f003 0307 	and.w	r3, r3, #7
 800d0ec:	683a      	ldr	r2, [r7, #0]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d90c      	bls.n	800d10c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d0f2:	4b65      	ldr	r3, [pc, #404]	; (800d288 <HAL_RCC_ClockConfig+0x1b8>)
 800d0f4:	683a      	ldr	r2, [r7, #0]
 800d0f6:	b2d2      	uxtb	r2, r2
 800d0f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d0fa:	4b63      	ldr	r3, [pc, #396]	; (800d288 <HAL_RCC_ClockConfig+0x1b8>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f003 0307 	and.w	r3, r3, #7
 800d102:	683a      	ldr	r2, [r7, #0]
 800d104:	429a      	cmp	r2, r3
 800d106:	d001      	beq.n	800d10c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d108:	2301      	movs	r3, #1
 800d10a:	e0b8      	b.n	800d27e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f003 0302 	and.w	r3, r3, #2
 800d114:	2b00      	cmp	r3, #0
 800d116:	d020      	beq.n	800d15a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f003 0304 	and.w	r3, r3, #4
 800d120:	2b00      	cmp	r3, #0
 800d122:	d005      	beq.n	800d130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d124:	4b59      	ldr	r3, [pc, #356]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	4a58      	ldr	r2, [pc, #352]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d12a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d12e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f003 0308 	and.w	r3, r3, #8
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d005      	beq.n	800d148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d13c:	4b53      	ldr	r3, [pc, #332]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d13e:	689b      	ldr	r3, [r3, #8]
 800d140:	4a52      	ldr	r2, [pc, #328]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d142:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d148:	4b50      	ldr	r3, [pc, #320]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d14a:	689b      	ldr	r3, [r3, #8]
 800d14c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	689b      	ldr	r3, [r3, #8]
 800d154:	494d      	ldr	r1, [pc, #308]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d156:	4313      	orrs	r3, r2
 800d158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f003 0301 	and.w	r3, r3, #1
 800d162:	2b00      	cmp	r3, #0
 800d164:	d044      	beq.n	800d1f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d107      	bne.n	800d17e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d16e:	4b47      	ldr	r3, [pc, #284]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d176:	2b00      	cmp	r3, #0
 800d178:	d119      	bne.n	800d1ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d17a:	2301      	movs	r3, #1
 800d17c:	e07f      	b.n	800d27e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	2b02      	cmp	r3, #2
 800d184:	d003      	beq.n	800d18e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d18a:	2b03      	cmp	r3, #3
 800d18c:	d107      	bne.n	800d19e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d18e:	4b3f      	ldr	r3, [pc, #252]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d196:	2b00      	cmp	r3, #0
 800d198:	d109      	bne.n	800d1ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	e06f      	b.n	800d27e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d19e:	4b3b      	ldr	r3, [pc, #236]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f003 0302 	and.w	r3, r3, #2
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d101      	bne.n	800d1ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	e067      	b.n	800d27e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d1ae:	4b37      	ldr	r3, [pc, #220]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	f023 0203 	bic.w	r2, r3, #3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	4934      	ldr	r1, [pc, #208]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d1c0:	f7fa f8ca 	bl	8007358 <HAL_GetTick>
 800d1c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d1c6:	e00a      	b.n	800d1de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d1c8:	f7fa f8c6 	bl	8007358 <HAL_GetTick>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	1ad3      	subs	r3, r2, r3
 800d1d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d901      	bls.n	800d1de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d1da:	2303      	movs	r3, #3
 800d1dc:	e04f      	b.n	800d27e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d1de:	4b2b      	ldr	r3, [pc, #172]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	f003 020c 	and.w	r2, r3, #12
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d1eb      	bne.n	800d1c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d1f0:	4b25      	ldr	r3, [pc, #148]	; (800d288 <HAL_RCC_ClockConfig+0x1b8>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f003 0307 	and.w	r3, r3, #7
 800d1f8:	683a      	ldr	r2, [r7, #0]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d20c      	bcs.n	800d218 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d1fe:	4b22      	ldr	r3, [pc, #136]	; (800d288 <HAL_RCC_ClockConfig+0x1b8>)
 800d200:	683a      	ldr	r2, [r7, #0]
 800d202:	b2d2      	uxtb	r2, r2
 800d204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d206:	4b20      	ldr	r3, [pc, #128]	; (800d288 <HAL_RCC_ClockConfig+0x1b8>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f003 0307 	and.w	r3, r3, #7
 800d20e:	683a      	ldr	r2, [r7, #0]
 800d210:	429a      	cmp	r2, r3
 800d212:	d001      	beq.n	800d218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d214:	2301      	movs	r3, #1
 800d216:	e032      	b.n	800d27e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f003 0304 	and.w	r3, r3, #4
 800d220:	2b00      	cmp	r3, #0
 800d222:	d008      	beq.n	800d236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d224:	4b19      	ldr	r3, [pc, #100]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	4916      	ldr	r1, [pc, #88]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d232:	4313      	orrs	r3, r2
 800d234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f003 0308 	and.w	r3, r3, #8
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d009      	beq.n	800d256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d242:	4b12      	ldr	r3, [pc, #72]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	00db      	lsls	r3, r3, #3
 800d250:	490e      	ldr	r1, [pc, #56]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d252:	4313      	orrs	r3, r2
 800d254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d256:	f000 f821 	bl	800d29c <HAL_RCC_GetSysClockFreq>
 800d25a:	4602      	mov	r2, r0
 800d25c:	4b0b      	ldr	r3, [pc, #44]	; (800d28c <HAL_RCC_ClockConfig+0x1bc>)
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	091b      	lsrs	r3, r3, #4
 800d262:	f003 030f 	and.w	r3, r3, #15
 800d266:	490a      	ldr	r1, [pc, #40]	; (800d290 <HAL_RCC_ClockConfig+0x1c0>)
 800d268:	5ccb      	ldrb	r3, [r1, r3]
 800d26a:	fa22 f303 	lsr.w	r3, r2, r3
 800d26e:	4a09      	ldr	r2, [pc, #36]	; (800d294 <HAL_RCC_ClockConfig+0x1c4>)
 800d270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d272:	4b09      	ldr	r3, [pc, #36]	; (800d298 <HAL_RCC_ClockConfig+0x1c8>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4618      	mov	r0, r3
 800d278:	f7fa f82a 	bl	80072d0 <HAL_InitTick>

  return HAL_OK;
 800d27c:	2300      	movs	r3, #0
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3710      	adds	r7, #16
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	40023c00 	.word	0x40023c00
 800d28c:	40023800 	.word	0x40023800
 800d290:	0801c4bc 	.word	0x0801c4bc
 800d294:	20000040 	.word	0x20000040
 800d298:	200000a0 	.word	0x200000a0

0800d29c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d29c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d2a0:	b090      	sub	sp, #64	; 0x40
 800d2a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	637b      	str	r3, [r7, #52]	; 0x34
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d2b4:	4b59      	ldr	r3, [pc, #356]	; (800d41c <HAL_RCC_GetSysClockFreq+0x180>)
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	f003 030c 	and.w	r3, r3, #12
 800d2bc:	2b08      	cmp	r3, #8
 800d2be:	d00d      	beq.n	800d2dc <HAL_RCC_GetSysClockFreq+0x40>
 800d2c0:	2b08      	cmp	r3, #8
 800d2c2:	f200 80a1 	bhi.w	800d408 <HAL_RCC_GetSysClockFreq+0x16c>
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d002      	beq.n	800d2d0 <HAL_RCC_GetSysClockFreq+0x34>
 800d2ca:	2b04      	cmp	r3, #4
 800d2cc:	d003      	beq.n	800d2d6 <HAL_RCC_GetSysClockFreq+0x3a>
 800d2ce:	e09b      	b.n	800d408 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d2d0:	4b53      	ldr	r3, [pc, #332]	; (800d420 <HAL_RCC_GetSysClockFreq+0x184>)
 800d2d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800d2d4:	e09b      	b.n	800d40e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d2d6:	4b53      	ldr	r3, [pc, #332]	; (800d424 <HAL_RCC_GetSysClockFreq+0x188>)
 800d2d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d2da:	e098      	b.n	800d40e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d2dc:	4b4f      	ldr	r3, [pc, #316]	; (800d41c <HAL_RCC_GetSysClockFreq+0x180>)
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d2e6:	4b4d      	ldr	r3, [pc, #308]	; (800d41c <HAL_RCC_GetSysClockFreq+0x180>)
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d028      	beq.n	800d344 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d2f2:	4b4a      	ldr	r3, [pc, #296]	; (800d41c <HAL_RCC_GetSysClockFreq+0x180>)
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	099b      	lsrs	r3, r3, #6
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	623b      	str	r3, [r7, #32]
 800d2fc:	627a      	str	r2, [r7, #36]	; 0x24
 800d2fe:	6a3b      	ldr	r3, [r7, #32]
 800d300:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800d304:	2100      	movs	r1, #0
 800d306:	4b47      	ldr	r3, [pc, #284]	; (800d424 <HAL_RCC_GetSysClockFreq+0x188>)
 800d308:	fb03 f201 	mul.w	r2, r3, r1
 800d30c:	2300      	movs	r3, #0
 800d30e:	fb00 f303 	mul.w	r3, r0, r3
 800d312:	4413      	add	r3, r2
 800d314:	4a43      	ldr	r2, [pc, #268]	; (800d424 <HAL_RCC_GetSysClockFreq+0x188>)
 800d316:	fba0 1202 	umull	r1, r2, r0, r2
 800d31a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d31c:	460a      	mov	r2, r1
 800d31e:	62ba      	str	r2, [r7, #40]	; 0x28
 800d320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d322:	4413      	add	r3, r2
 800d324:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d328:	2200      	movs	r2, #0
 800d32a:	61bb      	str	r3, [r7, #24]
 800d32c:	61fa      	str	r2, [r7, #28]
 800d32e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d332:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d336:	f7f3 fc8f 	bl	8000c58 <__aeabi_uldivmod>
 800d33a:	4602      	mov	r2, r0
 800d33c:	460b      	mov	r3, r1
 800d33e:	4613      	mov	r3, r2
 800d340:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d342:	e053      	b.n	800d3ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d344:	4b35      	ldr	r3, [pc, #212]	; (800d41c <HAL_RCC_GetSysClockFreq+0x180>)
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	099b      	lsrs	r3, r3, #6
 800d34a:	2200      	movs	r2, #0
 800d34c:	613b      	str	r3, [r7, #16]
 800d34e:	617a      	str	r2, [r7, #20]
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800d356:	f04f 0b00 	mov.w	fp, #0
 800d35a:	4652      	mov	r2, sl
 800d35c:	465b      	mov	r3, fp
 800d35e:	f04f 0000 	mov.w	r0, #0
 800d362:	f04f 0100 	mov.w	r1, #0
 800d366:	0159      	lsls	r1, r3, #5
 800d368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d36c:	0150      	lsls	r0, r2, #5
 800d36e:	4602      	mov	r2, r0
 800d370:	460b      	mov	r3, r1
 800d372:	ebb2 080a 	subs.w	r8, r2, sl
 800d376:	eb63 090b 	sbc.w	r9, r3, fp
 800d37a:	f04f 0200 	mov.w	r2, #0
 800d37e:	f04f 0300 	mov.w	r3, #0
 800d382:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800d386:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800d38a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800d38e:	ebb2 0408 	subs.w	r4, r2, r8
 800d392:	eb63 0509 	sbc.w	r5, r3, r9
 800d396:	f04f 0200 	mov.w	r2, #0
 800d39a:	f04f 0300 	mov.w	r3, #0
 800d39e:	00eb      	lsls	r3, r5, #3
 800d3a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d3a4:	00e2      	lsls	r2, r4, #3
 800d3a6:	4614      	mov	r4, r2
 800d3a8:	461d      	mov	r5, r3
 800d3aa:	eb14 030a 	adds.w	r3, r4, sl
 800d3ae:	603b      	str	r3, [r7, #0]
 800d3b0:	eb45 030b 	adc.w	r3, r5, fp
 800d3b4:	607b      	str	r3, [r7, #4]
 800d3b6:	f04f 0200 	mov.w	r2, #0
 800d3ba:	f04f 0300 	mov.w	r3, #0
 800d3be:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d3c2:	4629      	mov	r1, r5
 800d3c4:	028b      	lsls	r3, r1, #10
 800d3c6:	4621      	mov	r1, r4
 800d3c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	028a      	lsls	r2, r1, #10
 800d3d0:	4610      	mov	r0, r2
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	60bb      	str	r3, [r7, #8]
 800d3da:	60fa      	str	r2, [r7, #12]
 800d3dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d3e0:	f7f3 fc3a 	bl	8000c58 <__aeabi_uldivmod>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d3ec:	4b0b      	ldr	r3, [pc, #44]	; (800d41c <HAL_RCC_GetSysClockFreq+0x180>)
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	0c1b      	lsrs	r3, r3, #16
 800d3f2:	f003 0303 	and.w	r3, r3, #3
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	005b      	lsls	r3, r3, #1
 800d3fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800d3fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d400:	fbb2 f3f3 	udiv	r3, r2, r3
 800d404:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d406:	e002      	b.n	800d40e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d408:	4b05      	ldr	r3, [pc, #20]	; (800d420 <HAL_RCC_GetSysClockFreq+0x184>)
 800d40a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d40c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800d410:	4618      	mov	r0, r3
 800d412:	3740      	adds	r7, #64	; 0x40
 800d414:	46bd      	mov	sp, r7
 800d416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d41a:	bf00      	nop
 800d41c:	40023800 	.word	0x40023800
 800d420:	00f42400 	.word	0x00f42400
 800d424:	017d7840 	.word	0x017d7840

0800d428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d428:	b480      	push	{r7}
 800d42a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d42c:	4b03      	ldr	r3, [pc, #12]	; (800d43c <HAL_RCC_GetHCLKFreq+0x14>)
 800d42e:	681b      	ldr	r3, [r3, #0]
}
 800d430:	4618      	mov	r0, r3
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop
 800d43c:	20000040 	.word	0x20000040

0800d440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d444:	f7ff fff0 	bl	800d428 <HAL_RCC_GetHCLKFreq>
 800d448:	4602      	mov	r2, r0
 800d44a:	4b05      	ldr	r3, [pc, #20]	; (800d460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d44c:	689b      	ldr	r3, [r3, #8]
 800d44e:	0a9b      	lsrs	r3, r3, #10
 800d450:	f003 0307 	and.w	r3, r3, #7
 800d454:	4903      	ldr	r1, [pc, #12]	; (800d464 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d456:	5ccb      	ldrb	r3, [r1, r3]
 800d458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	40023800 	.word	0x40023800
 800d464:	0801c4cc 	.word	0x0801c4cc

0800d468 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d476:	2301      	movs	r3, #1
 800d478:	e022      	b.n	800d4c0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d480:	b2db      	uxtb	r3, r3
 800d482:	2b00      	cmp	r3, #0
 800d484:	d105      	bne.n	800d492 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2200      	movs	r2, #0
 800d48a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f7f9 f955 	bl	800673c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2203      	movs	r2, #3
 800d496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 f814 	bl	800d4c8 <HAL_SD_InitCard>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d001      	beq.n	800d4aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	e00a      	b.n	800d4c0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d4be:	2300      	movs	r3, #0
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d4c8:	b5b0      	push	{r4, r5, r7, lr}
 800d4ca:	b08e      	sub	sp, #56	; 0x38
 800d4cc:	af04      	add	r7, sp, #16
 800d4ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d4e4:	2376      	movs	r3, #118	; 0x76
 800d4e6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681d      	ldr	r5, [r3, #0]
 800d4ec:	466c      	mov	r4, sp
 800d4ee:	f107 0314 	add.w	r3, r7, #20
 800d4f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d4f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d4fa:	f107 0308 	add.w	r3, r7, #8
 800d4fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d500:	4628      	mov	r0, r5
 800d502:	f002 f9fb 	bl	800f8fc <SDIO_Init>
 800d506:	4603      	mov	r3, r0
 800d508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d50c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d510:	2b00      	cmp	r3, #0
 800d512:	d001      	beq.n	800d518 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d514:	2301      	movs	r3, #1
 800d516:	e04f      	b.n	800d5b8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d518:	4b29      	ldr	r3, [pc, #164]	; (800d5c0 <HAL_SD_InitCard+0xf8>)
 800d51a:	2200      	movs	r2, #0
 800d51c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4618      	mov	r0, r3
 800d524:	f002 fa33 	bl	800f98e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d528:	4b25      	ldr	r3, [pc, #148]	; (800d5c0 <HAL_SD_InitCard+0xf8>)
 800d52a:	2201      	movs	r2, #1
 800d52c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800d52e:	2002      	movs	r0, #2
 800d530:	f7f9 ff1e 	bl	8007370 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f001 f80f 	bl	800e558 <SD_PowerON>
 800d53a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d53c:	6a3b      	ldr	r3, [r7, #32]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d00b      	beq.n	800d55a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2201      	movs	r2, #1
 800d546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d54e:	6a3b      	ldr	r3, [r7, #32]
 800d550:	431a      	orrs	r2, r3
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d556:	2301      	movs	r3, #1
 800d558:	e02e      	b.n	800d5b8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 ff2e 	bl	800e3bc <SD_InitCard>
 800d560:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d562:	6a3b      	ldr	r3, [r7, #32]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d00b      	beq.n	800d580 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2201      	movs	r2, #1
 800d56c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d574:	6a3b      	ldr	r3, [r7, #32]
 800d576:	431a      	orrs	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d57c:	2301      	movs	r3, #1
 800d57e:	e01b      	b.n	800d5b8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d588:	4618      	mov	r0, r3
 800d58a:	f002 fa92 	bl	800fab2 <SDMMC_CmdBlockLength>
 800d58e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d590:	6a3b      	ldr	r3, [r7, #32]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00f      	beq.n	800d5b6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4a0a      	ldr	r2, [pc, #40]	; (800d5c4 <HAL_SD_InitCard+0xfc>)
 800d59c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5a2:	6a3b      	ldr	r3, [r7, #32]
 800d5a4:	431a      	orrs	r2, r3
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	e000      	b.n	800d5b8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800d5b6:	2300      	movs	r3, #0
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3728      	adds	r7, #40	; 0x28
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bdb0      	pop	{r4, r5, r7, pc}
 800d5c0:	422580a0 	.word	0x422580a0
 800d5c4:	004005ff 	.word	0x004005ff

0800d5c8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b08c      	sub	sp, #48	; 0x30
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	607a      	str	r2, [r7, #4]
 800d5d4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d107      	bne.n	800d5f0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	e0c0      	b.n	800d772 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	f040 80b9 	bne.w	800d770 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2200      	movs	r2, #0
 800d602:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	441a      	add	r2, r3
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d60e:	429a      	cmp	r2, r3
 800d610:	d907      	bls.n	800d622 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d616:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d61e:	2301      	movs	r3, #1
 800d620:	e0a7      	b.n	800d772 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2203      	movs	r2, #3
 800d626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	2200      	movs	r2, #0
 800d630:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d638:	68fa      	ldr	r2, [r7, #12]
 800d63a:	6812      	ldr	r2, [r2, #0]
 800d63c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800d640:	f043 0302 	orr.w	r3, r3, #2
 800d644:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d64a:	4a4c      	ldr	r2, [pc, #304]	; (800d77c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800d64c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d652:	4a4b      	ldr	r2, [pc, #300]	; (800d780 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d654:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d65a:	2200      	movs	r2, #0
 800d65c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d662:	2200      	movs	r2, #0
 800d664:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d676:	689a      	ldr	r2, [r3, #8]
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	430a      	orrs	r2, r1
 800d680:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	3380      	adds	r3, #128	; 0x80
 800d68c:	4619      	mov	r1, r3
 800d68e:	68ba      	ldr	r2, [r7, #8]
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	025b      	lsls	r3, r3, #9
 800d694:	089b      	lsrs	r3, r3, #2
 800d696:	f7fa f8df 	bl	8007858 <HAL_DMA_Start_IT>
 800d69a:	4603      	mov	r3, r0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d017      	beq.n	800d6d0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d6ae:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4a33      	ldr	r2, [pc, #204]	; (800d784 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800d6b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	e050      	b.n	800d772 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d6d0:	4b2d      	ldr	r3, [pc, #180]	; (800d788 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d002      	beq.n	800d6e4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e0:	025b      	lsls	r3, r3, #9
 800d6e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	025b      	lsls	r3, r3, #9
 800d6ee:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d6f0:	2390      	movs	r3, #144	; 0x90
 800d6f2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d6f4:	2302      	movs	r3, #2
 800d6f6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f107 0210 	add.w	r2, r7, #16
 800d708:	4611      	mov	r1, r2
 800d70a:	4618      	mov	r0, r3
 800d70c:	f002 f9a5 	bl	800fa5a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	2b01      	cmp	r3, #1
 800d714:	d90a      	bls.n	800d72c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2282      	movs	r2, #130	; 0x82
 800d71a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d722:	4618      	mov	r0, r3
 800d724:	f002 fa09 	bl	800fb3a <SDMMC_CmdReadMultiBlock>
 800d728:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d72a:	e009      	b.n	800d740 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2281      	movs	r2, #129	; 0x81
 800d730:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d738:	4618      	mov	r0, r3
 800d73a:	f002 f9dc 	bl	800faf6 <SDMMC_CmdReadSingleBlock>
 800d73e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d742:	2b00      	cmp	r3, #0
 800d744:	d012      	beq.n	800d76c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	4a0e      	ldr	r2, [pc, #56]	; (800d784 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800d74c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d754:	431a      	orrs	r2, r3
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2201      	movs	r2, #1
 800d75e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2200      	movs	r2, #0
 800d766:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d768:	2301      	movs	r3, #1
 800d76a:	e002      	b.n	800d772 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800d76c:	2300      	movs	r3, #0
 800d76e:	e000      	b.n	800d772 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800d770:	2302      	movs	r3, #2
  }
}
 800d772:	4618      	mov	r0, r3
 800d774:	3730      	adds	r7, #48	; 0x30
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	0800e1cb 	.word	0x0800e1cb
 800d780:	0800e23d 	.word	0x0800e23d
 800d784:	004005ff 	.word	0x004005ff
 800d788:	4225858c 	.word	0x4225858c

0800d78c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b08c      	sub	sp, #48	; 0x30
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
 800d798:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d107      	bne.n	800d7b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e0c5      	b.n	800d940 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d7ba:	b2db      	uxtb	r3, r3
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	f040 80be 	bne.w	800d93e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d7c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	441a      	add	r2, r3
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d907      	bls.n	800d7e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	e0ac      	b.n	800d940 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2203      	movs	r2, #3
 800d7ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7fc:	68fa      	ldr	r2, [r7, #12]
 800d7fe:	6812      	ldr	r2, [r2, #0]
 800d800:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800d804:	f043 0302 	orr.w	r3, r3, #2
 800d808:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d80e:	4a4e      	ldr	r2, [pc, #312]	; (800d948 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800d810:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d816:	4a4d      	ldr	r2, [pc, #308]	; (800d94c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800d818:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d81e:	2200      	movs	r2, #0
 800d820:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d826:	2b01      	cmp	r3, #1
 800d828:	d002      	beq.n	800d830 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800d82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82c:	025b      	lsls	r3, r3, #9
 800d82e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	2b01      	cmp	r3, #1
 800d834:	d90a      	bls.n	800d84c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	22a0      	movs	r2, #160	; 0xa0
 800d83a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d842:	4618      	mov	r0, r3
 800d844:	f002 f9bd 	bl	800fbc2 <SDMMC_CmdWriteMultiBlock>
 800d848:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d84a:	e009      	b.n	800d860 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2290      	movs	r2, #144	; 0x90
 800d850:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d858:	4618      	mov	r0, r3
 800d85a:	f002 f990 	bl	800fb7e <SDMMC_CmdWriteSingleBlock>
 800d85e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d862:	2b00      	cmp	r3, #0
 800d864:	d012      	beq.n	800d88c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a39      	ldr	r2, [pc, #228]	; (800d950 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800d86c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d874:	431a      	orrs	r2, r3
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2201      	movs	r2, #1
 800d87e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2200      	movs	r2, #0
 800d886:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d888:	2301      	movs	r3, #1
 800d88a:	e059      	b.n	800d940 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d88c:	4b31      	ldr	r3, [pc, #196]	; (800d954 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d88e:	2201      	movs	r2, #1
 800d890:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d896:	2240      	movs	r2, #64	; 0x40
 800d898:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8aa:	689a      	ldr	r2, [r3, #8]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	430a      	orrs	r2, r1
 800d8b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d8ba:	68b9      	ldr	r1, [r7, #8]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	3380      	adds	r3, #128	; 0x80
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	025b      	lsls	r3, r3, #9
 800d8c8:	089b      	lsrs	r3, r3, #2
 800d8ca:	f7f9 ffc5 	bl	8007858 <HAL_DMA_Start_IT>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d01c      	beq.n	800d90e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8da:	68fa      	ldr	r2, [r7, #12]
 800d8dc:	6812      	ldr	r2, [r2, #0]
 800d8de:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800d8e2:	f023 0302 	bic.w	r3, r3, #2
 800d8e6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a18      	ldr	r2, [pc, #96]	; (800d950 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800d8ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2200      	movs	r2, #0
 800d908:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d90a:	2301      	movs	r3, #1
 800d90c:	e018      	b.n	800d940 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d90e:	f04f 33ff 	mov.w	r3, #4294967295
 800d912:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	025b      	lsls	r3, r3, #9
 800d918:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d91a:	2390      	movs	r3, #144	; 0x90
 800d91c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d91e:	2300      	movs	r3, #0
 800d920:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d922:	2300      	movs	r3, #0
 800d924:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d926:	2301      	movs	r3, #1
 800d928:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f107 0210 	add.w	r2, r7, #16
 800d932:	4611      	mov	r1, r2
 800d934:	4618      	mov	r0, r3
 800d936:	f002 f890 	bl	800fa5a <SDIO_ConfigData>

      return HAL_OK;
 800d93a:	2300      	movs	r3, #0
 800d93c:	e000      	b.n	800d940 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800d93e:	2302      	movs	r3, #2
  }
}
 800d940:	4618      	mov	r0, r3
 800d942:	3730      	adds	r7, #48	; 0x30
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	0800e1a1 	.word	0x0800e1a1
 800d94c:	0800e23d 	.word	0x0800e23d
 800d950:	004005ff 	.word	0x004005ff
 800d954:	4225858c 	.word	0x4225858c

0800d958 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d964:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d96c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d970:	2b00      	cmp	r3, #0
 800d972:	d008      	beq.n	800d986 <HAL_SD_IRQHandler+0x2e>
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f003 0308 	and.w	r3, r3, #8
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d003      	beq.n	800d986 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f001 f810 	bl	800e9a4 <SD_Read_IT>
 800d984:	e165      	b.n	800dc52 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d98c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d990:	2b00      	cmp	r3, #0
 800d992:	f000 808f 	beq.w	800dab4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d99e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	6812      	ldr	r2, [r2, #0]
 800d9aa:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800d9ae:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d9b2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f022 0201 	bic.w	r2, r2, #1
 800d9c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f003 0308 	and.w	r3, r3, #8
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d039      	beq.n	800da42 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f003 0302 	and.w	r3, r3, #2
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d104      	bne.n	800d9e2 <HAL_SD_IRQHandler+0x8a>
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f003 0320 	and.w	r3, r3, #32
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d011      	beq.n	800da06 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f002 f90e 	bl	800fc08 <SDMMC_CmdStopTransfer>
 800d9ec:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d008      	beq.n	800da06 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	431a      	orrs	r2, r3
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 f92f 	bl	800dc64 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f240 523a 	movw	r2, #1338	; 0x53a
 800da0e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2201      	movs	r2, #1
 800da14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2200      	movs	r2, #0
 800da1c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	f003 0301 	and.w	r3, r3, #1
 800da24:	2b00      	cmp	r3, #0
 800da26:	d104      	bne.n	800da32 <HAL_SD_IRQHandler+0xda>
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f003 0302 	and.w	r3, r3, #2
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d003      	beq.n	800da3a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f7f8 fe62 	bl	80066fc <HAL_SD_RxCpltCallback>
 800da38:	e10b      	b.n	800dc52 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f7f8 fe6e 	bl	800671c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800da40:	e107      	b.n	800dc52 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da48:	2b00      	cmp	r3, #0
 800da4a:	f000 8102 	beq.w	800dc52 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f003 0320 	and.w	r3, r3, #32
 800da54:	2b00      	cmp	r3, #0
 800da56:	d011      	beq.n	800da7c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4618      	mov	r0, r3
 800da5e:	f002 f8d3 	bl	800fc08 <SDMMC_CmdStopTransfer>
 800da62:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d008      	beq.n	800da7c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	431a      	orrs	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 f8f4 	bl	800dc64 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f003 0301 	and.w	r3, r3, #1
 800da82:	2b00      	cmp	r3, #0
 800da84:	f040 80e5 	bne.w	800dc52 <HAL_SD_IRQHandler+0x2fa>
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f003 0302 	and.w	r3, r3, #2
 800da8e:	2b00      	cmp	r3, #0
 800da90:	f040 80df 	bne.w	800dc52 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f022 0208 	bic.w	r2, r2, #8
 800daa2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2201      	movs	r2, #1
 800daa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f7f8 fe35 	bl	800671c <HAL_SD_TxCpltCallback>
}
 800dab2:	e0ce      	b.n	800dc52 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d008      	beq.n	800dad4 <HAL_SD_IRQHandler+0x17c>
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f003 0308 	and.w	r3, r3, #8
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d003      	beq.n	800dad4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f000 ffba 	bl	800ea46 <SD_Write_IT>
 800dad2:	e0be      	b.n	800dc52 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dada:	f240 233a 	movw	r3, #570	; 0x23a
 800dade:	4013      	ands	r3, r2
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	f000 80b6 	beq.w	800dc52 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daec:	f003 0302 	and.w	r3, r3, #2
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d005      	beq.n	800db00 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daf8:	f043 0202 	orr.w	r2, r3, #2
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db06:	f003 0308 	and.w	r3, r3, #8
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d005      	beq.n	800db1a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db12:	f043 0208 	orr.w	r2, r3, #8
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db20:	f003 0320 	and.w	r3, r3, #32
 800db24:	2b00      	cmp	r3, #0
 800db26:	d005      	beq.n	800db34 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db2c:	f043 0220 	orr.w	r2, r3, #32
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db3a:	f003 0310 	and.w	r3, r3, #16
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d005      	beq.n	800db4e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db46:	f043 0210 	orr.w	r2, r3, #16
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d005      	beq.n	800db68 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db60:	f043 0208 	orr.w	r2, r3, #8
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f240 723a 	movw	r2, #1850	; 0x73a
 800db70:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	6812      	ldr	r2, [r2, #0]
 800db7c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800db80:	f023 0302 	bic.w	r3, r3, #2
 800db84:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4618      	mov	r0, r3
 800db8c:	f002 f83c 	bl	800fc08 <SDMMC_CmdStopTransfer>
 800db90:	4602      	mov	r2, r0
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db96:	431a      	orrs	r2, r3
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f003 0308 	and.w	r3, r3, #8
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d00a      	beq.n	800dbbc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 f855 	bl	800dc64 <HAL_SD_ErrorCallback>
}
 800dbba:	e04a      	b.n	800dc52 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d045      	beq.n	800dc52 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f003 0310 	and.w	r3, r3, #16
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d104      	bne.n	800dbda <HAL_SD_IRQHandler+0x282>
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f003 0320 	and.w	r3, r3, #32
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d011      	beq.n	800dbfe <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbde:	4a1f      	ldr	r2, [pc, #124]	; (800dc5c <HAL_SD_IRQHandler+0x304>)
 800dbe0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7f9 fe8e 	bl	8007908 <HAL_DMA_Abort_IT>
 800dbec:	4603      	mov	r3, r0
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d02f      	beq.n	800dc52 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f000 fb72 	bl	800e2e0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800dbfc:	e029      	b.n	800dc52 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f003 0301 	and.w	r3, r3, #1
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d104      	bne.n	800dc12 <HAL_SD_IRQHandler+0x2ba>
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f003 0302 	and.w	r3, r3, #2
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d011      	beq.n	800dc36 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc16:	4a12      	ldr	r2, [pc, #72]	; (800dc60 <HAL_SD_IRQHandler+0x308>)
 800dc18:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7f9 fe72 	bl	8007908 <HAL_DMA_Abort_IT>
 800dc24:	4603      	mov	r3, r0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d013      	beq.n	800dc52 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f000 fb8d 	bl	800e34e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800dc34:	e00d      	b.n	800dc52 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2200      	movs	r2, #0
 800dc48:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 f814 	bl	800dc78 <HAL_SD_AbortCallback>
}
 800dc50:	e7ff      	b.n	800dc52 <HAL_SD_IRQHandler+0x2fa>
 800dc52:	bf00      	nop
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	0800e2e1 	.word	0x0800e2e1
 800dc60:	0800e34f 	.word	0x0800e34f

0800dc64 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800dc6c:	bf00      	nop
 800dc6e:	370c      	adds	r7, #12
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b083      	sub	sp, #12
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 800dc80:	bf00      	nop
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr

0800dc8c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc9a:	0f9b      	lsrs	r3, r3, #30
 800dc9c:	b2da      	uxtb	r2, r3
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dca6:	0e9b      	lsrs	r3, r3, #26
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	f003 030f 	and.w	r3, r3, #15
 800dcae:	b2da      	uxtb	r2, r3
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcb8:	0e1b      	lsrs	r3, r3, #24
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	f003 0303 	and.w	r3, r3, #3
 800dcc0:	b2da      	uxtb	r2, r3
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcca:	0c1b      	lsrs	r3, r3, #16
 800dccc:	b2da      	uxtb	r2, r3
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcd6:	0a1b      	lsrs	r3, r3, #8
 800dcd8:	b2da      	uxtb	r2, r3
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dce2:	b2da      	uxtb	r2, r3
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcec:	0d1b      	lsrs	r3, r3, #20
 800dcee:	b29a      	uxth	r2, r3
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcf8:	0c1b      	lsrs	r3, r3, #16
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	f003 030f 	and.w	r3, r3, #15
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd0a:	0bdb      	lsrs	r3, r3, #15
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	f003 0301 	and.w	r3, r3, #1
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd1c:	0b9b      	lsrs	r3, r3, #14
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	f003 0301 	and.w	r3, r3, #1
 800dd24:	b2da      	uxtb	r2, r3
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd2e:	0b5b      	lsrs	r3, r3, #13
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	f003 0301 	and.w	r3, r3, #1
 800dd36:	b2da      	uxtb	r2, r3
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd40:	0b1b      	lsrs	r3, r3, #12
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	f003 0301 	and.w	r3, r3, #1
 800dd48:	b2da      	uxtb	r2, r3
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	2200      	movs	r2, #0
 800dd52:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d163      	bne.n	800de24 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd60:	009a      	lsls	r2, r3, #2
 800dd62:	f640 73fc 	movw	r3, #4092	; 0xffc
 800dd66:	4013      	ands	r3, r2
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800dd6c:	0f92      	lsrs	r2, r2, #30
 800dd6e:	431a      	orrs	r2, r3
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd78:	0edb      	lsrs	r3, r3, #27
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	f003 0307 	and.w	r3, r3, #7
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd8a:	0e1b      	lsrs	r3, r3, #24
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	f003 0307 	and.w	r3, r3, #7
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd9c:	0d5b      	lsrs	r3, r3, #21
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	f003 0307 	and.w	r3, r3, #7
 800dda4:	b2da      	uxtb	r2, r3
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddae:	0c9b      	lsrs	r3, r3, #18
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	f003 0307 	and.w	r3, r3, #7
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddc0:	0bdb      	lsrs	r3, r3, #15
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	f003 0307 	and.w	r3, r3, #7
 800ddc8:	b2da      	uxtb	r2, r3
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	691b      	ldr	r3, [r3, #16]
 800ddd2:	1c5a      	adds	r2, r3, #1
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	7e1b      	ldrb	r3, [r3, #24]
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	f003 0307 	and.w	r3, r3, #7
 800dde2:	3302      	adds	r3, #2
 800dde4:	2201      	movs	r2, #1
 800dde6:	fa02 f303 	lsl.w	r3, r2, r3
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ddee:	fb03 f202 	mul.w	r2, r3, r2
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	7a1b      	ldrb	r3, [r3, #8]
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	f003 030f 	and.w	r3, r3, #15
 800de00:	2201      	movs	r2, #1
 800de02:	409a      	lsls	r2, r3
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800de10:	0a52      	lsrs	r2, r2, #9
 800de12:	fb03 f202 	mul.w	r2, r3, r2
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de20:	661a      	str	r2, [r3, #96]	; 0x60
 800de22:	e031      	b.n	800de88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d11d      	bne.n	800de68 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de30:	041b      	lsls	r3, r3, #16
 800de32:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de3a:	0c1b      	lsrs	r3, r3, #16
 800de3c:	431a      	orrs	r2, r3
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	691b      	ldr	r3, [r3, #16]
 800de46:	3301      	adds	r3, #1
 800de48:	029a      	lsls	r2, r3, #10
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de5c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	661a      	str	r2, [r3, #96]	; 0x60
 800de66:	e00f      	b.n	800de88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a58      	ldr	r2, [pc, #352]	; (800dfd0 <HAL_SD_GetCardCSD+0x344>)
 800de6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2201      	movs	r2, #1
 800de80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800de84:	2301      	movs	r3, #1
 800de86:	e09d      	b.n	800dfc4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de8c:	0b9b      	lsrs	r3, r3, #14
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	f003 0301 	and.w	r3, r3, #1
 800de94:	b2da      	uxtb	r2, r3
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de9e:	09db      	lsrs	r3, r3, #7
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dea6:	b2da      	uxtb	r2, r3
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deb6:	b2da      	uxtb	r2, r3
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dec0:	0fdb      	lsrs	r3, r3, #31
 800dec2:	b2da      	uxtb	r2, r3
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800decc:	0f5b      	lsrs	r3, r3, #29
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	f003 0303 	and.w	r3, r3, #3
 800ded4:	b2da      	uxtb	r2, r3
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dede:	0e9b      	lsrs	r3, r3, #26
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	f003 0307 	and.w	r3, r3, #7
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800def0:	0d9b      	lsrs	r3, r3, #22
 800def2:	b2db      	uxtb	r3, r3
 800def4:	f003 030f 	and.w	r3, r3, #15
 800def8:	b2da      	uxtb	r2, r3
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df02:	0d5b      	lsrs	r3, r3, #21
 800df04:	b2db      	uxtb	r3, r3
 800df06:	f003 0301 	and.w	r3, r3, #1
 800df0a:	b2da      	uxtb	r2, r3
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	2200      	movs	r2, #0
 800df16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df1e:	0c1b      	lsrs	r3, r3, #16
 800df20:	b2db      	uxtb	r3, r3
 800df22:	f003 0301 	and.w	r3, r3, #1
 800df26:	b2da      	uxtb	r2, r3
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df32:	0bdb      	lsrs	r3, r3, #15
 800df34:	b2db      	uxtb	r3, r3
 800df36:	f003 0301 	and.w	r3, r3, #1
 800df3a:	b2da      	uxtb	r2, r3
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df46:	0b9b      	lsrs	r3, r3, #14
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	f003 0301 	and.w	r3, r3, #1
 800df4e:	b2da      	uxtb	r2, r3
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df5a:	0b5b      	lsrs	r3, r3, #13
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	f003 0301 	and.w	r3, r3, #1
 800df62:	b2da      	uxtb	r2, r3
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df6e:	0b1b      	lsrs	r3, r3, #12
 800df70:	b2db      	uxtb	r3, r3
 800df72:	f003 0301 	and.w	r3, r3, #1
 800df76:	b2da      	uxtb	r2, r3
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df82:	0a9b      	lsrs	r3, r3, #10
 800df84:	b2db      	uxtb	r3, r3
 800df86:	f003 0303 	and.w	r3, r3, #3
 800df8a:	b2da      	uxtb	r2, r3
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df96:	0a1b      	lsrs	r3, r3, #8
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	f003 0303 	and.w	r3, r3, #3
 800df9e:	b2da      	uxtb	r2, r3
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfaa:	085b      	lsrs	r3, r3, #1
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfb2:	b2da      	uxtb	r2, r3
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dfc2:	2300      	movs	r3, #0
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	370c      	adds	r7, #12
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr
 800dfd0:	004005ff 	.word	0x004005ff

0800dfd4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b083      	sub	sp, #12
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e01e:	2300      	movs	r3, #0
}
 800e020:	4618      	mov	r0, r3
 800e022:	370c      	adds	r7, #12
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr

0800e02c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e02c:	b5b0      	push	{r4, r5, r7, lr}
 800e02e:	b08e      	sub	sp, #56	; 0x38
 800e030:	af04      	add	r7, sp, #16
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e036:	2300      	movs	r3, #0
 800e038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2203      	movs	r2, #3
 800e040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e048:	2b03      	cmp	r3, #3
 800e04a:	d02e      	beq.n	800e0aa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e052:	d106      	bne.n	800e062 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e058:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	639a      	str	r2, [r3, #56]	; 0x38
 800e060:	e029      	b.n	800e0b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e068:	d10a      	bne.n	800e080 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 fb2a 	bl	800e6c4 <SD_WideBus_Enable>
 800e070:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e076:	6a3b      	ldr	r3, [r7, #32]
 800e078:	431a      	orrs	r2, r3
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	639a      	str	r2, [r3, #56]	; 0x38
 800e07e:	e01a      	b.n	800e0b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d10a      	bne.n	800e09c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 fb67 	bl	800e75a <SD_WideBus_Disable>
 800e08c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e092:	6a3b      	ldr	r3, [r7, #32]
 800e094:	431a      	orrs	r2, r3
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	639a      	str	r2, [r3, #56]	; 0x38
 800e09a:	e00c      	b.n	800e0b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	639a      	str	r2, [r3, #56]	; 0x38
 800e0a8:	e005      	b.n	800e0b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00b      	beq.n	800e0d6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	4a26      	ldr	r2, [pc, #152]	; (800e15c <HAL_SD_ConfigWideBusOperation+0x130>)
 800e0c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0d4:	e01f      	b.n	800e116 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	689b      	ldr	r3, [r3, #8]
 800e0e0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	695b      	ldr	r3, [r3, #20]
 800e0f0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	699b      	ldr	r3, [r3, #24]
 800e0f6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681d      	ldr	r5, [r3, #0]
 800e0fc:	466c      	mov	r4, sp
 800e0fe:	f107 0314 	add.w	r3, r7, #20
 800e102:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e106:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e10a:	f107 0308 	add.w	r3, r7, #8
 800e10e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e110:	4628      	mov	r0, r5
 800e112:	f001 fbf3 	bl	800f8fc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e11e:	4618      	mov	r0, r3
 800e120:	f001 fcc7 	bl	800fab2 <SDMMC_CmdBlockLength>
 800e124:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e126:	6a3b      	ldr	r3, [r7, #32]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d00c      	beq.n	800e146 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a0a      	ldr	r2, [pc, #40]	; (800e15c <HAL_SD_ConfigWideBusOperation+0x130>)
 800e132:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e138:	6a3b      	ldr	r3, [r7, #32]
 800e13a:	431a      	orrs	r2, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e140:	2301      	movs	r3, #1
 800e142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2201      	movs	r2, #1
 800e14a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e14e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e152:	4618      	mov	r0, r3
 800e154:	3728      	adds	r7, #40	; 0x28
 800e156:	46bd      	mov	sp, r7
 800e158:	bdb0      	pop	{r4, r5, r7, pc}
 800e15a:	bf00      	nop
 800e15c:	004005ff 	.word	0x004005ff

0800e160 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b086      	sub	sp, #24
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e168:	2300      	movs	r3, #0
 800e16a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e16c:	f107 030c 	add.w	r3, r7, #12
 800e170:	4619      	mov	r1, r3
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 fa7e 	bl	800e674 <SD_SendStatus>
 800e178:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d005      	beq.n	800e18c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	431a      	orrs	r2, r3
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	0a5b      	lsrs	r3, r3, #9
 800e190:	f003 030f 	and.w	r3, r3, #15
 800e194:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e196:	693b      	ldr	r3, [r7, #16]
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3718      	adds	r7, #24
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b085      	sub	sp, #20
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ac:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e1bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e1be:	bf00      	nop
 800e1c0:	3714      	adds	r7, #20
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr

0800e1ca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e1ca:	b580      	push	{r7, lr}
 800e1cc:	b084      	sub	sp, #16
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1d6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1dc:	2b82      	cmp	r3, #130	; 0x82
 800e1de:	d111      	bne.n	800e204 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f001 fd0f 	bl	800fc08 <SDMMC_CmdStopTransfer>
 800e1ea:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d008      	beq.n	800e204 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	431a      	orrs	r2, r3
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	f7ff fd30 	bl	800dc64 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f022 0208 	bic.w	r2, r2, #8
 800e212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f240 523a 	movw	r2, #1338	; 0x53a
 800e21c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2201      	movs	r2, #1
 800e222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2200      	movs	r2, #0
 800e22a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800e22c:	68f8      	ldr	r0, [r7, #12]
 800e22e:	f7f8 fa65 	bl	80066fc <HAL_SD_RxCpltCallback>
#endif
}
 800e232:	bf00      	nop
 800e234:	3710      	adds	r7, #16
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
	...

0800e23c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b086      	sub	sp, #24
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e248:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f7f9 fd16 	bl	8007c7c <HAL_DMA_GetError>
 800e250:	4603      	mov	r3, r0
 800e252:	2b02      	cmp	r3, #2
 800e254:	d03e      	beq.n	800e2d4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e25c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e264:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d002      	beq.n	800e272 <SD_DMAError+0x36>
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d12d      	bne.n	800e2ce <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4a19      	ldr	r2, [pc, #100]	; (800e2dc <SD_DMAError+0xa0>)
 800e278:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e288:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e28e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800e296:	6978      	ldr	r0, [r7, #20]
 800e298:	f7ff ff62 	bl	800e160 <HAL_SD_GetCardState>
 800e29c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	2b06      	cmp	r3, #6
 800e2a2:	d002      	beq.n	800e2aa <SD_DMAError+0x6e>
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	2b05      	cmp	r3, #5
 800e2a8:	d10a      	bne.n	800e2c0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f001 fcaa 	bl	800fc08 <SDMMC_CmdStopTransfer>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ba:	431a      	orrs	r2, r3
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e2ce:	6978      	ldr	r0, [r7, #20]
 800e2d0:	f7ff fcc8 	bl	800dc64 <HAL_SD_ErrorCallback>
#endif
  }
}
 800e2d4:	bf00      	nop
 800e2d6:	3718      	adds	r7, #24
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	004005ff 	.word	0x004005ff

0800e2e0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ec:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f240 523a 	movw	r2, #1338	; 0x53a
 800e2f6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e2f8:	68f8      	ldr	r0, [r7, #12]
 800e2fa:	f7ff ff31 	bl	800e160 <HAL_SD_GetCardState>
 800e2fe:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2201      	movs	r2, #1
 800e304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2200      	movs	r2, #0
 800e30c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	2b06      	cmp	r3, #6
 800e312:	d002      	beq.n	800e31a <SD_DMATxAbort+0x3a>
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	2b05      	cmp	r3, #5
 800e318:	d10a      	bne.n	800e330 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4618      	mov	r0, r3
 800e320:	f001 fc72 	bl	800fc08 <SDMMC_CmdStopTransfer>
 800e324:	4602      	mov	r2, r0
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e32a:	431a      	orrs	r2, r3
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e334:	2b00      	cmp	r3, #0
 800e336:	d103      	bne.n	800e340 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	f7ff fc9d 	bl	800dc78 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e33e:	e002      	b.n	800e346 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f7ff fc8f 	bl	800dc64 <HAL_SD_ErrorCallback>
}
 800e346:	bf00      	nop
 800e348:	3710      	adds	r7, #16
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e34e:	b580      	push	{r7, lr}
 800e350:	b084      	sub	sp, #16
 800e352:	af00      	add	r7, sp, #0
 800e354:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e35a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f240 523a 	movw	r2, #1338	; 0x53a
 800e364:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e366:	68f8      	ldr	r0, [r7, #12]
 800e368:	f7ff fefa 	bl	800e160 <HAL_SD_GetCardState>
 800e36c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2201      	movs	r2, #1
 800e372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2200      	movs	r2, #0
 800e37a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	2b06      	cmp	r3, #6
 800e380:	d002      	beq.n	800e388 <SD_DMARxAbort+0x3a>
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	2b05      	cmp	r3, #5
 800e386:	d10a      	bne.n	800e39e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4618      	mov	r0, r3
 800e38e:	f001 fc3b 	bl	800fc08 <SDMMC_CmdStopTransfer>
 800e392:	4602      	mov	r2, r0
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e398:	431a      	orrs	r2, r3
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d103      	bne.n	800e3ae <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e3a6:	68f8      	ldr	r0, [r7, #12]
 800e3a8:	f7ff fc66 	bl	800dc78 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e3ac:	e002      	b.n	800e3b4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e3ae:	68f8      	ldr	r0, [r7, #12]
 800e3b0:	f7ff fc58 	bl	800dc64 <HAL_SD_ErrorCallback>
}
 800e3b4:	bf00      	nop
 800e3b6:	3710      	adds	r7, #16
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e3bc:	b5b0      	push	{r4, r5, r7, lr}
 800e3be:	b094      	sub	sp, #80	; 0x50
 800e3c0:	af04      	add	r7, sp, #16
 800e3c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f001 faec 	bl	800f9aa <SDIO_GetPowerState>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d102      	bne.n	800e3de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e3d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e3dc:	e0b8      	b.n	800e550 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3e2:	2b03      	cmp	r3, #3
 800e3e4:	d02f      	beq.n	800e446 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f001 fd16 	bl	800fe1c <SDMMC_CmdSendCID>
 800e3f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d001      	beq.n	800e3fc <SD_InitCard+0x40>
    {
      return errorstate;
 800e3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3fa:	e0a9      	b.n	800e550 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	2100      	movs	r1, #0
 800e402:	4618      	mov	r0, r3
 800e404:	f001 fb16 	bl	800fa34 <SDIO_GetResponse>
 800e408:	4602      	mov	r2, r0
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2104      	movs	r1, #4
 800e414:	4618      	mov	r0, r3
 800e416:	f001 fb0d 	bl	800fa34 <SDIO_GetResponse>
 800e41a:	4602      	mov	r2, r0
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2108      	movs	r1, #8
 800e426:	4618      	mov	r0, r3
 800e428:	f001 fb04 	bl	800fa34 <SDIO_GetResponse>
 800e42c:	4602      	mov	r2, r0
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	210c      	movs	r1, #12
 800e438:	4618      	mov	r0, r3
 800e43a:	f001 fafb 	bl	800fa34 <SDIO_GetResponse>
 800e43e:	4602      	mov	r2, r0
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e44a:	2b03      	cmp	r3, #3
 800e44c:	d00d      	beq.n	800e46a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f107 020e 	add.w	r2, r7, #14
 800e456:	4611      	mov	r1, r2
 800e458:	4618      	mov	r0, r3
 800e45a:	f001 fd1c 	bl	800fe96 <SDMMC_CmdSetRelAdd>
 800e45e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e462:	2b00      	cmp	r3, #0
 800e464:	d001      	beq.n	800e46a <SD_InitCard+0xae>
    {
      return errorstate;
 800e466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e468:	e072      	b.n	800e550 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e46e:	2b03      	cmp	r3, #3
 800e470:	d036      	beq.n	800e4e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e472:	89fb      	ldrh	r3, [r7, #14]
 800e474:	461a      	mov	r2, r3
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e482:	041b      	lsls	r3, r3, #16
 800e484:	4619      	mov	r1, r3
 800e486:	4610      	mov	r0, r2
 800e488:	f001 fce6 	bl	800fe58 <SDMMC_CmdSendCSD>
 800e48c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e48e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e490:	2b00      	cmp	r3, #0
 800e492:	d001      	beq.n	800e498 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e496:	e05b      	b.n	800e550 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2100      	movs	r1, #0
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f001 fac8 	bl	800fa34 <SDIO_GetResponse>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2104      	movs	r1, #4
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f001 fabf 	bl	800fa34 <SDIO_GetResponse>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2108      	movs	r1, #8
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f001 fab6 	bl	800fa34 <SDIO_GetResponse>
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	210c      	movs	r1, #12
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f001 faad 	bl	800fa34 <SDIO_GetResponse>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2104      	movs	r1, #4
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f001 faa4 	bl	800fa34 <SDIO_GetResponse>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	0d1a      	lsrs	r2, r3, #20
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e4f4:	f107 0310 	add.w	r3, r7, #16
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f7ff fbc6 	bl	800dc8c <HAL_SD_GetCardCSD>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d002      	beq.n	800e50c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e506:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e50a:	e021      	b.n	800e550 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6819      	ldr	r1, [r3, #0]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e514:	041b      	lsls	r3, r3, #16
 800e516:	2200      	movs	r2, #0
 800e518:	461c      	mov	r4, r3
 800e51a:	4615      	mov	r5, r2
 800e51c:	4622      	mov	r2, r4
 800e51e:	462b      	mov	r3, r5
 800e520:	4608      	mov	r0, r1
 800e522:	f001 fb93 	bl	800fc4c <SDMMC_CmdSelDesel>
 800e526:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d001      	beq.n	800e532 <SD_InitCard+0x176>
  {
    return errorstate;
 800e52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e530:	e00e      	b.n	800e550 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681d      	ldr	r5, [r3, #0]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	466c      	mov	r4, sp
 800e53a:	f103 0210 	add.w	r2, r3, #16
 800e53e:	ca07      	ldmia	r2, {r0, r1, r2}
 800e540:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e544:	3304      	adds	r3, #4
 800e546:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e548:	4628      	mov	r0, r5
 800e54a:	f001 f9d7 	bl	800f8fc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e54e:	2300      	movs	r3, #0
}
 800e550:	4618      	mov	r0, r3
 800e552:	3740      	adds	r7, #64	; 0x40
 800e554:	46bd      	mov	sp, r7
 800e556:	bdb0      	pop	{r4, r5, r7, pc}

0800e558 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b086      	sub	sp, #24
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e560:	2300      	movs	r3, #0
 800e562:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e564:	2300      	movs	r3, #0
 800e566:	617b      	str	r3, [r7, #20]
 800e568:	2300      	movs	r3, #0
 800e56a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4618      	mov	r0, r3
 800e572:	f001 fb8e 	bl	800fc92 <SDMMC_CmdGoIdleState>
 800e576:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d001      	beq.n	800e582 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	e072      	b.n	800e668 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	4618      	mov	r0, r3
 800e588:	f001 fba1 	bl	800fcce <SDMMC_CmdOperCond>
 800e58c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00d      	beq.n	800e5b0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2200      	movs	r2, #0
 800e598:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f001 fb77 	bl	800fc92 <SDMMC_CmdGoIdleState>
 800e5a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d004      	beq.n	800e5b6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	e05b      	b.n	800e668 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d137      	bne.n	800e62e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2100      	movs	r1, #0
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f001 fba1 	bl	800fd0c <SDMMC_CmdAppCommand>
 800e5ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d02d      	beq.n	800e62e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e5d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e5d6:	e047      	b.n	800e668 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2100      	movs	r1, #0
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f001 fb94 	bl	800fd0c <SDMMC_CmdAppCommand>
 800e5e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d001      	beq.n	800e5f0 <SD_PowerON+0x98>
    {
      return errorstate;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	e03b      	b.n	800e668 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	491e      	ldr	r1, [pc, #120]	; (800e670 <SD_PowerON+0x118>)
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f001 fbaa 	bl	800fd50 <SDMMC_CmdAppOperCommand>
 800e5fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d002      	beq.n	800e60a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e604:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e608:	e02e      	b.n	800e668 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	2100      	movs	r1, #0
 800e610:	4618      	mov	r0, r3
 800e612:	f001 fa0f 	bl	800fa34 <SDIO_GetResponse>
 800e616:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	0fdb      	lsrs	r3, r3, #31
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d101      	bne.n	800e624 <SD_PowerON+0xcc>
 800e620:	2301      	movs	r3, #1
 800e622:	e000      	b.n	800e626 <SD_PowerON+0xce>
 800e624:	2300      	movs	r3, #0
 800e626:	613b      	str	r3, [r7, #16]

    count++;
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	3301      	adds	r3, #1
 800e62c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e634:	4293      	cmp	r3, r2
 800e636:	d802      	bhi.n	800e63e <SD_PowerON+0xe6>
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d0cc      	beq.n	800e5d8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e644:	4293      	cmp	r3, r2
 800e646:	d902      	bls.n	800e64e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e64c:	e00c      	b.n	800e668 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e654:	2b00      	cmp	r3, #0
 800e656:	d003      	beq.n	800e660 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2201      	movs	r2, #1
 800e65c:	645a      	str	r2, [r3, #68]	; 0x44
 800e65e:	e002      	b.n	800e666 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3718      	adds	r7, #24
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	c1100000 	.word	0xc1100000

0800e674 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d102      	bne.n	800e68a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e684:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e688:	e018      	b.n	800e6bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e692:	041b      	lsls	r3, r3, #16
 800e694:	4619      	mov	r1, r3
 800e696:	4610      	mov	r0, r2
 800e698:	f001 fc1e 	bl	800fed8 <SDMMC_CmdSendStatus>
 800e69c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d001      	beq.n	800e6a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	e009      	b.n	800e6bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	2100      	movs	r1, #0
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f001 f9c0 	bl	800fa34 <SDIO_GetResponse>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e6ba:	2300      	movs	r3, #0
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3710      	adds	r7, #16
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b086      	sub	sp, #24
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	60fb      	str	r3, [r7, #12]
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2100      	movs	r1, #0
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f001 f9aa 	bl	800fa34 <SDIO_GetResponse>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e6ea:	d102      	bne.n	800e6f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e6ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e6f0:	e02f      	b.n	800e752 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e6f2:	f107 030c 	add.w	r3, r7, #12
 800e6f6:	4619      	mov	r1, r3
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 f879 	bl	800e7f0 <SD_FindSCR>
 800e6fe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d001      	beq.n	800e70a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	e023      	b.n	800e752 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e710:	2b00      	cmp	r3, #0
 800e712:	d01c      	beq.n	800e74e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e71c:	041b      	lsls	r3, r3, #16
 800e71e:	4619      	mov	r1, r3
 800e720:	4610      	mov	r0, r2
 800e722:	f001 faf3 	bl	800fd0c <SDMMC_CmdAppCommand>
 800e726:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d001      	beq.n	800e732 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	e00f      	b.n	800e752 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	2102      	movs	r1, #2
 800e738:	4618      	mov	r0, r3
 800e73a:	f001 fb2c 	bl	800fd96 <SDMMC_CmdBusWidth>
 800e73e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d001      	beq.n	800e74a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	e003      	b.n	800e752 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e74a:	2300      	movs	r3, #0
 800e74c:	e001      	b.n	800e752 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e74e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e752:	4618      	mov	r0, r3
 800e754:	3718      	adds	r7, #24
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b086      	sub	sp, #24
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e762:	2300      	movs	r3, #0
 800e764:	60fb      	str	r3, [r7, #12]
 800e766:	2300      	movs	r3, #0
 800e768:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	2100      	movs	r1, #0
 800e770:	4618      	mov	r0, r3
 800e772:	f001 f95f 	bl	800fa34 <SDIO_GetResponse>
 800e776:	4603      	mov	r3, r0
 800e778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e77c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e780:	d102      	bne.n	800e788 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e782:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e786:	e02f      	b.n	800e7e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e788:	f107 030c 	add.w	r3, r7, #12
 800e78c:	4619      	mov	r1, r3
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 f82e 	bl	800e7f0 <SD_FindSCR>
 800e794:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d001      	beq.n	800e7a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	e023      	b.n	800e7e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d01c      	beq.n	800e7e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7b2:	041b      	lsls	r3, r3, #16
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	4610      	mov	r0, r2
 800e7b8:	f001 faa8 	bl	800fd0c <SDMMC_CmdAppCommand>
 800e7bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d001      	beq.n	800e7c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	e00f      	b.n	800e7e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	2100      	movs	r1, #0
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f001 fae1 	bl	800fd96 <SDMMC_CmdBusWidth>
 800e7d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d001      	beq.n	800e7e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	e003      	b.n	800e7e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	e001      	b.n	800e7e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e7e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3718      	adds	r7, #24
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e7f0:	b590      	push	{r4, r7, lr}
 800e7f2:	b08f      	sub	sp, #60	; 0x3c
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e7fa:	f7f8 fdad 	bl	8007358 <HAL_GetTick>
 800e7fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e800:	2300      	movs	r3, #0
 800e802:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e804:	2300      	movs	r3, #0
 800e806:	60bb      	str	r3, [r7, #8]
 800e808:	2300      	movs	r3, #0
 800e80a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	2108      	movs	r1, #8
 800e816:	4618      	mov	r0, r3
 800e818:	f001 f94b 	bl	800fab2 <SDMMC_CmdBlockLength>
 800e81c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e820:	2b00      	cmp	r3, #0
 800e822:	d001      	beq.n	800e828 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e826:	e0b9      	b.n	800e99c <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e830:	041b      	lsls	r3, r3, #16
 800e832:	4619      	mov	r1, r3
 800e834:	4610      	mov	r0, r2
 800e836:	f001 fa69 	bl	800fd0c <SDMMC_CmdAppCommand>
 800e83a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d001      	beq.n	800e846 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e844:	e0aa      	b.n	800e99c <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e846:	f04f 33ff 	mov.w	r3, #4294967295
 800e84a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e84c:	2308      	movs	r3, #8
 800e84e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e850:	2330      	movs	r3, #48	; 0x30
 800e852:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e854:	2302      	movs	r3, #2
 800e856:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e858:	2300      	movs	r3, #0
 800e85a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e85c:	2301      	movs	r3, #1
 800e85e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f107 0210 	add.w	r2, r7, #16
 800e868:	4611      	mov	r1, r2
 800e86a:	4618      	mov	r0, r3
 800e86c:	f001 f8f5 	bl	800fa5a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	4618      	mov	r0, r3
 800e876:	f001 fab0 	bl	800fdda <SDMMC_CmdSendSCR>
 800e87a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d02a      	beq.n	800e8d8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800e882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e884:	e08a      	b.n	800e99c <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e88c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e890:	2b00      	cmp	r3, #0
 800e892:	d00f      	beq.n	800e8b4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6819      	ldr	r1, [r3, #0]
 800e898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	f107 0208 	add.w	r2, r7, #8
 800e8a0:	18d4      	adds	r4, r2, r3
 800e8a2:	4608      	mov	r0, r1
 800e8a4:	f001 f855 	bl	800f952 <SDIO_ReadFIFO>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	6023      	str	r3, [r4, #0]
      index++;
 800e8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	637b      	str	r3, [r7, #52]	; 0x34
 800e8b2:	e006      	b.n	800e8c2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d012      	beq.n	800e8e8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800e8c2:	f7f8 fd49 	bl	8007358 <HAL_GetTick>
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ca:	1ad3      	subs	r3, r2, r3
 800e8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8d0:	d102      	bne.n	800e8d8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e8d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e8d6:	e061      	b.n	800e99c <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8de:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d0cf      	beq.n	800e886 <SD_FindSCR+0x96>
 800e8e6:	e000      	b.n	800e8ea <SD_FindSCR+0xfa>
      break;
 800e8e8:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8f0:	f003 0308 	and.w	r3, r3, #8
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d106      	bne.n	800e906 <SD_FindSCR+0x116>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e902:	2b00      	cmp	r3, #0
 800e904:	d005      	beq.n	800e912 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2208      	movs	r2, #8
 800e90c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e90e:	2308      	movs	r3, #8
 800e910:	e044      	b.n	800e99c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e918:	f003 0302 	and.w	r3, r3, #2
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d005      	beq.n	800e92c <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	2202      	movs	r2, #2
 800e926:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e928:	2302      	movs	r3, #2
 800e92a:	e037      	b.n	800e99c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e932:	f003 0320 	and.w	r3, r3, #32
 800e936:	2b00      	cmp	r3, #0
 800e938:	d005      	beq.n	800e946 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	2220      	movs	r2, #32
 800e940:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e942:	2320      	movs	r3, #32
 800e944:	e02a      	b.n	800e99c <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f240 523a 	movw	r2, #1338	; 0x53a
 800e94e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	061a      	lsls	r2, r3, #24
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	021b      	lsls	r3, r3, #8
 800e958:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e95c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	0a1b      	lsrs	r3, r3, #8
 800e962:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e966:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	0e1b      	lsrs	r3, r3, #24
 800e96c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e970:	601a      	str	r2, [r3, #0]
    scr++;
 800e972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e974:	3304      	adds	r3, #4
 800e976:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	061a      	lsls	r2, r3, #24
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	021b      	lsls	r3, r3, #8
 800e980:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e984:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	0a1b      	lsrs	r3, r3, #8
 800e98a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e98e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	0e1b      	lsrs	r3, r3, #24
 800e994:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e998:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e99a:	2300      	movs	r3, #0
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	373c      	adds	r7, #60	; 0x3c
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd90      	pop	{r4, r7, pc}

0800e9a4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b086      	sub	sp, #24
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9b0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9b6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d03f      	beq.n	800ea3e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e9be:	2300      	movs	r3, #0
 800e9c0:	617b      	str	r3, [r7, #20]
 800e9c2:	e033      	b.n	800ea2c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f000 ffc2 	bl	800f952 <SDIO_ReadFIFO>
 800e9ce:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	b2da      	uxtb	r2, r3
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	3301      	adds	r3, #1
 800e9dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	3b01      	subs	r3, #1
 800e9e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	0a1b      	lsrs	r3, r3, #8
 800e9e8:	b2da      	uxtb	r2, r3
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	3b01      	subs	r3, #1
 800e9f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	0c1b      	lsrs	r3, r3, #16
 800e9fe:	b2da      	uxtb	r2, r3
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	3301      	adds	r3, #1
 800ea08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	3b01      	subs	r3, #1
 800ea0e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	0e1b      	lsrs	r3, r3, #24
 800ea14:	b2da      	uxtb	r2, r3
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	3b01      	subs	r3, #1
 800ea24:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	3301      	adds	r3, #1
 800ea2a:	617b      	str	r3, [r7, #20]
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	2b07      	cmp	r3, #7
 800ea30:	d9c8      	bls.n	800e9c4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	68fa      	ldr	r2, [r7, #12]
 800ea36:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	693a      	ldr	r2, [r7, #16]
 800ea3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ea3e:	bf00      	nop
 800ea40:	3718      	adds	r7, #24
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}

0800ea46 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ea46:	b580      	push	{r7, lr}
 800ea48:	b086      	sub	sp, #24
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a1b      	ldr	r3, [r3, #32]
 800ea52:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea58:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d043      	beq.n	800eae8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800ea60:	2300      	movs	r3, #0
 800ea62:	617b      	str	r3, [r7, #20]
 800ea64:	e037      	b.n	800ead6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	3301      	adds	r3, #1
 800ea70:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	3b01      	subs	r3, #1
 800ea76:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	021a      	lsls	r2, r3, #8
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	4313      	orrs	r3, r2
 800ea82:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	3301      	adds	r3, #1
 800ea88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	041a      	lsls	r2, r3, #16
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	3b01      	subs	r3, #1
 800eaa6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	061a      	lsls	r2, r3, #24
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	4313      	orrs	r3, r2
 800eab2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	3301      	adds	r3, #1
 800eab8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	3b01      	subs	r3, #1
 800eabe:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f107 0208 	add.w	r2, r7, #8
 800eac8:	4611      	mov	r1, r2
 800eaca:	4618      	mov	r0, r3
 800eacc:	f000 ff4e 	bl	800f96c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	3301      	adds	r3, #1
 800ead4:	617b      	str	r3, [r7, #20]
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	2b07      	cmp	r3, #7
 800eada:	d9c4      	bls.n	800ea66 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	68fa      	ldr	r2, [r7, #12]
 800eae0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	693a      	ldr	r2, [r7, #16]
 800eae6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800eae8:	bf00      	nop
 800eaea:	3718      	adds	r7, #24
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d101      	bne.n	800eb02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800eafe:	2301      	movs	r3, #1
 800eb00:	e07b      	b.n	800ebfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d108      	bne.n	800eb1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb12:	d009      	beq.n	800eb28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	61da      	str	r2, [r3, #28]
 800eb1a:	e005      	b.n	800eb28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2200      	movs	r2, #0
 800eb26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eb34:	b2db      	uxtb	r3, r3
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d106      	bne.n	800eb48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f7f8 f9b4 	bl	8006eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2202      	movs	r2, #2
 800eb4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	681a      	ldr	r2, [r3, #0]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	689b      	ldr	r3, [r3, #8]
 800eb6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800eb70:	431a      	orrs	r2, r3
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	68db      	ldr	r3, [r3, #12]
 800eb76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb7a:	431a      	orrs	r2, r3
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	691b      	ldr	r3, [r3, #16]
 800eb80:	f003 0302 	and.w	r3, r3, #2
 800eb84:	431a      	orrs	r2, r3
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	695b      	ldr	r3, [r3, #20]
 800eb8a:	f003 0301 	and.w	r3, r3, #1
 800eb8e:	431a      	orrs	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	699b      	ldr	r3, [r3, #24]
 800eb94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eb98:	431a      	orrs	r2, r3
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	69db      	ldr	r3, [r3, #28]
 800eb9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eba2:	431a      	orrs	r2, r3
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6a1b      	ldr	r3, [r3, #32]
 800eba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebac:	ea42 0103 	orr.w	r1, r2, r3
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	430a      	orrs	r2, r1
 800ebbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	699b      	ldr	r3, [r3, #24]
 800ebc4:	0c1b      	lsrs	r3, r3, #16
 800ebc6:	f003 0104 	and.w	r1, r3, #4
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebce:	f003 0210 	and.w	r2, r3, #16
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	430a      	orrs	r2, r1
 800ebd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	69da      	ldr	r2, [r3, #28]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ebe8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2200      	movs	r2, #0
 800ebee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ebf8:	2300      	movs	r3, #0
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3708      	adds	r7, #8
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}

0800ec02 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800ec02:	b580      	push	{r7, lr}
 800ec04:	b082      	sub	sp, #8
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d101      	bne.n	800ec14 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800ec10:	2301      	movs	r3, #1
 800ec12:	e01a      	b.n	800ec4a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2202      	movs	r2, #2
 800ec18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec2a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f7f8 fa55 	bl	80070dc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2200      	movs	r2, #0
 800ec36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2200      	movs	r2, #0
 800ec44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3708      	adds	r7, #8
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}

0800ec52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ec52:	b580      	push	{r7, lr}
 800ec54:	b088      	sub	sp, #32
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	60f8      	str	r0, [r7, #12]
 800ec5a:	60b9      	str	r1, [r7, #8]
 800ec5c:	603b      	str	r3, [r7, #0]
 800ec5e:	4613      	mov	r3, r2
 800ec60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ec62:	2300      	movs	r3, #0
 800ec64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d101      	bne.n	800ec74 <HAL_SPI_Transmit+0x22>
 800ec70:	2302      	movs	r3, #2
 800ec72:	e12d      	b.n	800eed0 <HAL_SPI_Transmit+0x27e>
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2201      	movs	r2, #1
 800ec78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec7c:	f7f8 fb6c 	bl	8007358 <HAL_GetTick>
 800ec80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ec82:	88fb      	ldrh	r3, [r7, #6]
 800ec84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	d002      	beq.n	800ec98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ec92:	2302      	movs	r3, #2
 800ec94:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ec96:	e116      	b.n	800eec6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d002      	beq.n	800eca4 <HAL_SPI_Transmit+0x52>
 800ec9e:	88fb      	ldrh	r3, [r7, #6]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d102      	bne.n	800ecaa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800eca4:	2301      	movs	r3, #1
 800eca6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800eca8:	e10d      	b.n	800eec6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2203      	movs	r2, #3
 800ecae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	68ba      	ldr	r2, [r7, #8]
 800ecbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	88fa      	ldrh	r2, [r7, #6]
 800ecc2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	88fa      	ldrh	r2, [r7, #6]
 800ecc8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2200      	movs	r2, #0
 800ecce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2200      	movs	r2, #0
 800ece0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2200      	movs	r2, #0
 800ece6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	689b      	ldr	r3, [r3, #8]
 800ecec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecf0:	d10f      	bne.n	800ed12 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	681a      	ldr	r2, [r3, #0]
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ed10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed1c:	2b40      	cmp	r3, #64	; 0x40
 800ed1e:	d007      	beq.n	800ed30 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	681a      	ldr	r2, [r3, #0]
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	68db      	ldr	r3, [r3, #12]
 800ed34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed38:	d14f      	bne.n	800edda <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d002      	beq.n	800ed48 <HAL_SPI_Transmit+0xf6>
 800ed42:	8afb      	ldrh	r3, [r7, #22]
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d142      	bne.n	800edce <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed4c:	881a      	ldrh	r2, [r3, #0]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed58:	1c9a      	adds	r2, r3, #2
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	3b01      	subs	r3, #1
 800ed66:	b29a      	uxth	r2, r3
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ed6c:	e02f      	b.n	800edce <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	f003 0302 	and.w	r3, r3, #2
 800ed78:	2b02      	cmp	r3, #2
 800ed7a:	d112      	bne.n	800eda2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed80:	881a      	ldrh	r2, [r3, #0]
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed8c:	1c9a      	adds	r2, r3, #2
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	3b01      	subs	r3, #1
 800ed9a:	b29a      	uxth	r2, r3
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	86da      	strh	r2, [r3, #54]	; 0x36
 800eda0:	e015      	b.n	800edce <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eda2:	f7f8 fad9 	bl	8007358 <HAL_GetTick>
 800eda6:	4602      	mov	r2, r0
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	1ad3      	subs	r3, r2, r3
 800edac:	683a      	ldr	r2, [r7, #0]
 800edae:	429a      	cmp	r2, r3
 800edb0:	d803      	bhi.n	800edba <HAL_SPI_Transmit+0x168>
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb8:	d102      	bne.n	800edc0 <HAL_SPI_Transmit+0x16e>
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d106      	bne.n	800edce <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800edc0:	2303      	movs	r3, #3
 800edc2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2201      	movs	r2, #1
 800edc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800edcc:	e07b      	b.n	800eec6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d1ca      	bne.n	800ed6e <HAL_SPI_Transmit+0x11c>
 800edd8:	e050      	b.n	800ee7c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d002      	beq.n	800ede8 <HAL_SPI_Transmit+0x196>
 800ede2:	8afb      	ldrh	r3, [r7, #22]
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d144      	bne.n	800ee72 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	330c      	adds	r3, #12
 800edf2:	7812      	ldrb	r2, [r2, #0]
 800edf4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edfa:	1c5a      	adds	r2, r3, #1
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	3b01      	subs	r3, #1
 800ee08:	b29a      	uxth	r2, r3
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ee0e:	e030      	b.n	800ee72 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	689b      	ldr	r3, [r3, #8]
 800ee16:	f003 0302 	and.w	r3, r3, #2
 800ee1a:	2b02      	cmp	r3, #2
 800ee1c:	d113      	bne.n	800ee46 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	330c      	adds	r3, #12
 800ee28:	7812      	ldrb	r2, [r2, #0]
 800ee2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee30:	1c5a      	adds	r2, r3, #1
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	b29a      	uxth	r2, r3
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	86da      	strh	r2, [r3, #54]	; 0x36
 800ee44:	e015      	b.n	800ee72 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee46:	f7f8 fa87 	bl	8007358 <HAL_GetTick>
 800ee4a:	4602      	mov	r2, r0
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	1ad3      	subs	r3, r2, r3
 800ee50:	683a      	ldr	r2, [r7, #0]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d803      	bhi.n	800ee5e <HAL_SPI_Transmit+0x20c>
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee5c:	d102      	bne.n	800ee64 <HAL_SPI_Transmit+0x212>
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d106      	bne.n	800ee72 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800ee64:	2303      	movs	r3, #3
 800ee66:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800ee70:	e029      	b.n	800eec6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d1c9      	bne.n	800ee10 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ee7c:	69ba      	ldr	r2, [r7, #24]
 800ee7e:	6839      	ldr	r1, [r7, #0]
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f000 fce7 	bl	800f854 <SPI_EndRxTxTransaction>
 800ee86:	4603      	mov	r3, r0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d002      	beq.n	800ee92 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2220      	movs	r2, #32
 800ee90:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	689b      	ldr	r3, [r3, #8]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d10a      	bne.n	800eeb0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	613b      	str	r3, [r7, #16]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	68db      	ldr	r3, [r3, #12]
 800eea4:	613b      	str	r3, [r7, #16]
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	689b      	ldr	r3, [r3, #8]
 800eeac:	613b      	str	r3, [r7, #16]
 800eeae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d002      	beq.n	800eebe <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800eeb8:	2301      	movs	r3, #1
 800eeba:	77fb      	strb	r3, [r7, #31]
 800eebc:	e003      	b.n	800eec6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	2201      	movs	r2, #1
 800eec2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2200      	movs	r2, #0
 800eeca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800eece:	7ffb      	ldrb	r3, [r7, #31]
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3720      	adds	r7, #32
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b088      	sub	sp, #32
 800eedc:	af02      	add	r7, sp, #8
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	60b9      	str	r1, [r7, #8]
 800eee2:	603b      	str	r3, [r7, #0]
 800eee4:	4613      	mov	r3, r2
 800eee6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eee8:	2300      	movs	r3, #0
 800eeea:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eef2:	b2db      	uxtb	r3, r3
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d002      	beq.n	800eefe <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800eef8:	2302      	movs	r3, #2
 800eefa:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eefc:	e0fb      	b.n	800f0f6 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef06:	d112      	bne.n	800ef2e <HAL_SPI_Receive+0x56>
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	689b      	ldr	r3, [r3, #8]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d10e      	bne.n	800ef2e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	2204      	movs	r2, #4
 800ef14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ef18:	88fa      	ldrh	r2, [r7, #6]
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	9300      	str	r3, [sp, #0]
 800ef1e:	4613      	mov	r3, r2
 800ef20:	68ba      	ldr	r2, [r7, #8]
 800ef22:	68b9      	ldr	r1, [r7, #8]
 800ef24:	68f8      	ldr	r0, [r7, #12]
 800ef26:	f000 f8ef 	bl	800f108 <HAL_SPI_TransmitReceive>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	e0e8      	b.n	800f100 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d101      	bne.n	800ef3c <HAL_SPI_Receive+0x64>
 800ef38:	2302      	movs	r3, #2
 800ef3a:	e0e1      	b.n	800f100 <HAL_SPI_Receive+0x228>
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef44:	f7f8 fa08 	bl	8007358 <HAL_GetTick>
 800ef48:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d002      	beq.n	800ef56 <HAL_SPI_Receive+0x7e>
 800ef50:	88fb      	ldrh	r3, [r7, #6]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d102      	bne.n	800ef5c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ef56:	2301      	movs	r3, #1
 800ef58:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ef5a:	e0cc      	b.n	800f0f6 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2204      	movs	r2, #4
 800ef60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2200      	movs	r2, #0
 800ef68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	68ba      	ldr	r2, [r7, #8]
 800ef6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	88fa      	ldrh	r2, [r7, #6]
 800ef74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	88fa      	ldrh	r2, [r7, #6]
 800ef7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	2200      	movs	r2, #0
 800ef86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2200      	movs	r2, #0
 800ef92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2200      	movs	r2, #0
 800ef98:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	689b      	ldr	r3, [r3, #8]
 800ef9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efa2:	d10f      	bne.n	800efc4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	681a      	ldr	r2, [r3, #0]
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800efb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800efc2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efce:	2b40      	cmp	r3, #64	; 0x40
 800efd0:	d007      	beq.n	800efe2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800efe0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	68db      	ldr	r3, [r3, #12]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d16a      	bne.n	800f0c0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800efea:	e032      	b.n	800f052 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	689b      	ldr	r3, [r3, #8]
 800eff2:	f003 0301 	and.w	r3, r3, #1
 800eff6:	2b01      	cmp	r3, #1
 800eff8:	d115      	bne.n	800f026 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f103 020c 	add.w	r2, r3, #12
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f006:	7812      	ldrb	r2, [r2, #0]
 800f008:	b2d2      	uxtb	r2, r2
 800f00a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f010:	1c5a      	adds	r2, r3, #1
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	3b01      	subs	r3, #1
 800f01e:	b29a      	uxth	r2, r3
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f024:	e015      	b.n	800f052 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f026:	f7f8 f997 	bl	8007358 <HAL_GetTick>
 800f02a:	4602      	mov	r2, r0
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	1ad3      	subs	r3, r2, r3
 800f030:	683a      	ldr	r2, [r7, #0]
 800f032:	429a      	cmp	r2, r3
 800f034:	d803      	bhi.n	800f03e <HAL_SPI_Receive+0x166>
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f03c:	d102      	bne.n	800f044 <HAL_SPI_Receive+0x16c>
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d106      	bne.n	800f052 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800f044:	2303      	movs	r3, #3
 800f046:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2201      	movs	r2, #1
 800f04c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800f050:	e051      	b.n	800f0f6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f056:	b29b      	uxth	r3, r3
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d1c7      	bne.n	800efec <HAL_SPI_Receive+0x114>
 800f05c:	e035      	b.n	800f0ca <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	689b      	ldr	r3, [r3, #8]
 800f064:	f003 0301 	and.w	r3, r3, #1
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d113      	bne.n	800f094 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	68da      	ldr	r2, [r3, #12]
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f076:	b292      	uxth	r2, r2
 800f078:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f07e:	1c9a      	adds	r2, r3, #2
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f088:	b29b      	uxth	r3, r3
 800f08a:	3b01      	subs	r3, #1
 800f08c:	b29a      	uxth	r2, r3
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f092:	e015      	b.n	800f0c0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f094:	f7f8 f960 	bl	8007358 <HAL_GetTick>
 800f098:	4602      	mov	r2, r0
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	1ad3      	subs	r3, r2, r3
 800f09e:	683a      	ldr	r2, [r7, #0]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d803      	bhi.n	800f0ac <HAL_SPI_Receive+0x1d4>
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0aa:	d102      	bne.n	800f0b2 <HAL_SPI_Receive+0x1da>
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d106      	bne.n	800f0c0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800f0b2:	2303      	movs	r3, #3
 800f0b4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800f0be:	e01a      	b.n	800f0f6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f0c4:	b29b      	uxth	r3, r3
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d1c9      	bne.n	800f05e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f0ca:	693a      	ldr	r2, [r7, #16]
 800f0cc:	6839      	ldr	r1, [r7, #0]
 800f0ce:	68f8      	ldr	r0, [r7, #12]
 800f0d0:	f000 fb5a 	bl	800f788 <SPI_EndRxTransaction>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d002      	beq.n	800f0e0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	2220      	movs	r2, #32
 800f0de:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d002      	beq.n	800f0ee <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	75fb      	strb	r3, [r7, #23]
 800f0ec:	e003      	b.n	800f0f6 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	2201      	movs	r2, #1
 800f0f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f0fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800f100:	4618      	mov	r0, r3
 800f102:	3718      	adds	r7, #24
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b08c      	sub	sp, #48	; 0x30
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	607a      	str	r2, [r7, #4]
 800f114:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f116:	2301      	movs	r3, #1
 800f118:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f11a:	2300      	movs	r3, #0
 800f11c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f126:	2b01      	cmp	r3, #1
 800f128:	d101      	bne.n	800f12e <HAL_SPI_TransmitReceive+0x26>
 800f12a:	2302      	movs	r3, #2
 800f12c:	e198      	b.n	800f460 <HAL_SPI_TransmitReceive+0x358>
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2201      	movs	r2, #1
 800f132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f136:	f7f8 f90f 	bl	8007358 <HAL_GetTick>
 800f13a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f14c:	887b      	ldrh	r3, [r7, #2]
 800f14e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f150:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f154:	2b01      	cmp	r3, #1
 800f156:	d00f      	beq.n	800f178 <HAL_SPI_TransmitReceive+0x70>
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f15e:	d107      	bne.n	800f170 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	689b      	ldr	r3, [r3, #8]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d103      	bne.n	800f170 <HAL_SPI_TransmitReceive+0x68>
 800f168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f16c:	2b04      	cmp	r3, #4
 800f16e:	d003      	beq.n	800f178 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f170:	2302      	movs	r3, #2
 800f172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f176:	e16d      	b.n	800f454 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d005      	beq.n	800f18a <HAL_SPI_TransmitReceive+0x82>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d002      	beq.n	800f18a <HAL_SPI_TransmitReceive+0x82>
 800f184:	887b      	ldrh	r3, [r7, #2]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d103      	bne.n	800f192 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f18a:	2301      	movs	r3, #1
 800f18c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f190:	e160      	b.n	800f454 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f198:	b2db      	uxtb	r3, r3
 800f19a:	2b04      	cmp	r3, #4
 800f19c:	d003      	beq.n	800f1a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	2205      	movs	r2, #5
 800f1a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	687a      	ldr	r2, [r7, #4]
 800f1b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	887a      	ldrh	r2, [r7, #2]
 800f1b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	887a      	ldrh	r2, [r7, #2]
 800f1bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	68ba      	ldr	r2, [r7, #8]
 800f1c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	887a      	ldrh	r2, [r7, #2]
 800f1c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	887a      	ldrh	r2, [r7, #2]
 800f1ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1e6:	2b40      	cmp	r3, #64	; 0x40
 800f1e8:	d007      	beq.n	800f1fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	681a      	ldr	r2, [r3, #0]
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f1f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	68db      	ldr	r3, [r3, #12]
 800f1fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f202:	d17c      	bne.n	800f2fe <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d002      	beq.n	800f212 <HAL_SPI_TransmitReceive+0x10a>
 800f20c:	8b7b      	ldrh	r3, [r7, #26]
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d16a      	bne.n	800f2e8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f216:	881a      	ldrh	r2, [r3, #0]
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f222:	1c9a      	adds	r2, r3, #2
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	3b01      	subs	r3, #1
 800f230:	b29a      	uxth	r2, r3
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f236:	e057      	b.n	800f2e8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	689b      	ldr	r3, [r3, #8]
 800f23e:	f003 0302 	and.w	r3, r3, #2
 800f242:	2b02      	cmp	r3, #2
 800f244:	d11b      	bne.n	800f27e <HAL_SPI_TransmitReceive+0x176>
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d016      	beq.n	800f27e <HAL_SPI_TransmitReceive+0x176>
 800f250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f252:	2b01      	cmp	r3, #1
 800f254:	d113      	bne.n	800f27e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f25a:	881a      	ldrh	r2, [r3, #0]
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f266:	1c9a      	adds	r2, r3, #2
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f270:	b29b      	uxth	r3, r3
 800f272:	3b01      	subs	r3, #1
 800f274:	b29a      	uxth	r2, r3
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f27a:	2300      	movs	r3, #0
 800f27c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	689b      	ldr	r3, [r3, #8]
 800f284:	f003 0301 	and.w	r3, r3, #1
 800f288:	2b01      	cmp	r3, #1
 800f28a:	d119      	bne.n	800f2c0 <HAL_SPI_TransmitReceive+0x1b8>
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f290:	b29b      	uxth	r3, r3
 800f292:	2b00      	cmp	r3, #0
 800f294:	d014      	beq.n	800f2c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	68da      	ldr	r2, [r3, #12]
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2a0:	b292      	uxth	r2, r2
 800f2a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2a8:	1c9a      	adds	r2, r3, #2
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	3b01      	subs	r3, #1
 800f2b6:	b29a      	uxth	r2, r3
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f2bc:	2301      	movs	r3, #1
 800f2be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f2c0:	f7f8 f84a 	bl	8007358 <HAL_GetTick>
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c8:	1ad3      	subs	r3, r2, r3
 800f2ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d80b      	bhi.n	800f2e8 <HAL_SPI_TransmitReceive+0x1e0>
 800f2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2d6:	d007      	beq.n	800f2e8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800f2d8:	2303      	movs	r3, #3
 800f2da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800f2e6:	e0b5      	b.n	800f454 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d1a2      	bne.n	800f238 <HAL_SPI_TransmitReceive+0x130>
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d19d      	bne.n	800f238 <HAL_SPI_TransmitReceive+0x130>
 800f2fc:	e080      	b.n	800f400 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	685b      	ldr	r3, [r3, #4]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d002      	beq.n	800f30c <HAL_SPI_TransmitReceive+0x204>
 800f306:	8b7b      	ldrh	r3, [r7, #26]
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d16f      	bne.n	800f3ec <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	330c      	adds	r3, #12
 800f316:	7812      	ldrb	r2, [r2, #0]
 800f318:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f31e:	1c5a      	adds	r2, r3, #1
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f328:	b29b      	uxth	r3, r3
 800f32a:	3b01      	subs	r3, #1
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f332:	e05b      	b.n	800f3ec <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	689b      	ldr	r3, [r3, #8]
 800f33a:	f003 0302 	and.w	r3, r3, #2
 800f33e:	2b02      	cmp	r3, #2
 800f340:	d11c      	bne.n	800f37c <HAL_SPI_TransmitReceive+0x274>
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f346:	b29b      	uxth	r3, r3
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d017      	beq.n	800f37c <HAL_SPI_TransmitReceive+0x274>
 800f34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d114      	bne.n	800f37c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	330c      	adds	r3, #12
 800f35c:	7812      	ldrb	r2, [r2, #0]
 800f35e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f364:	1c5a      	adds	r2, r3, #1
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f36e:	b29b      	uxth	r3, r3
 800f370:	3b01      	subs	r3, #1
 800f372:	b29a      	uxth	r2, r3
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f378:	2300      	movs	r3, #0
 800f37a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	689b      	ldr	r3, [r3, #8]
 800f382:	f003 0301 	and.w	r3, r3, #1
 800f386:	2b01      	cmp	r3, #1
 800f388:	d119      	bne.n	800f3be <HAL_SPI_TransmitReceive+0x2b6>
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f38e:	b29b      	uxth	r3, r3
 800f390:	2b00      	cmp	r3, #0
 800f392:	d014      	beq.n	800f3be <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	68da      	ldr	r2, [r3, #12]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f39e:	b2d2      	uxtb	r2, r2
 800f3a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3a6:	1c5a      	adds	r2, r3, #1
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	3b01      	subs	r3, #1
 800f3b4:	b29a      	uxth	r2, r3
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f3be:	f7f7 ffcb 	bl	8007358 <HAL_GetTick>
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c6:	1ad3      	subs	r3, r2, r3
 800f3c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d803      	bhi.n	800f3d6 <HAL_SPI_TransmitReceive+0x2ce>
 800f3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3d4:	d102      	bne.n	800f3dc <HAL_SPI_TransmitReceive+0x2d4>
 800f3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d107      	bne.n	800f3ec <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800f3dc:	2303      	movs	r3, #3
 800f3de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800f3ea:	e033      	b.n	800f454 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f3f0:	b29b      	uxth	r3, r3
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d19e      	bne.n	800f334 <HAL_SPI_TransmitReceive+0x22c>
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d199      	bne.n	800f334 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f402:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f404:	68f8      	ldr	r0, [r7, #12]
 800f406:	f000 fa25 	bl	800f854 <SPI_EndRxTxTransaction>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d006      	beq.n	800f41e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800f410:	2301      	movs	r3, #1
 800f412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2220      	movs	r2, #32
 800f41a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800f41c:	e01a      	b.n	800f454 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d10a      	bne.n	800f43c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f426:	2300      	movs	r3, #0
 800f428:	617b      	str	r3, [r7, #20]
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	68db      	ldr	r3, [r3, #12]
 800f430:	617b      	str	r3, [r7, #20]
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	617b      	str	r3, [r7, #20]
 800f43a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f440:	2b00      	cmp	r3, #0
 800f442:	d003      	beq.n	800f44c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800f444:	2301      	movs	r3, #1
 800f446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f44a:	e003      	b.n	800f454 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2201      	movs	r2, #1
 800f450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2200      	movs	r2, #0
 800f458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f45c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f460:	4618      	mov	r0, r3
 800f462:	3730      	adds	r7, #48	; 0x30
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b088      	sub	sp, #32
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f480:	69bb      	ldr	r3, [r7, #24]
 800f482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f486:	2b00      	cmp	r3, #0
 800f488:	d10e      	bne.n	800f4a8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f490:	2b00      	cmp	r3, #0
 800f492:	d009      	beq.n	800f4a8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d004      	beq.n	800f4a8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	4798      	blx	r3
    return;
 800f4a6:	e0ce      	b.n	800f646 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f4a8:	69bb      	ldr	r3, [r7, #24]
 800f4aa:	f003 0302 	and.w	r3, r3, #2
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d009      	beq.n	800f4c6 <HAL_SPI_IRQHandler+0x5e>
 800f4b2:	69fb      	ldr	r3, [r7, #28]
 800f4b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d004      	beq.n	800f4c6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	4798      	blx	r3
    return;
 800f4c4:	e0bf      	b.n	800f646 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	f003 0320 	and.w	r3, r3, #32
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d10a      	bne.n	800f4e6 <HAL_SPI_IRQHandler+0x7e>
 800f4d0:	69bb      	ldr	r3, [r7, #24]
 800f4d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d105      	bne.n	800f4e6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f4da:	69bb      	ldr	r3, [r7, #24]
 800f4dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	f000 80b0 	beq.w	800f646 <HAL_SPI_IRQHandler+0x1de>
 800f4e6:	69fb      	ldr	r3, [r7, #28]
 800f4e8:	f003 0320 	and.w	r3, r3, #32
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	f000 80aa 	beq.w	800f646 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f4f2:	69bb      	ldr	r3, [r7, #24]
 800f4f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d023      	beq.n	800f544 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f502:	b2db      	uxtb	r3, r3
 800f504:	2b03      	cmp	r3, #3
 800f506:	d011      	beq.n	800f52c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f50c:	f043 0204 	orr.w	r2, r3, #4
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f514:	2300      	movs	r3, #0
 800f516:	617b      	str	r3, [r7, #20]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	68db      	ldr	r3, [r3, #12]
 800f51e:	617b      	str	r3, [r7, #20]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	689b      	ldr	r3, [r3, #8]
 800f526:	617b      	str	r3, [r7, #20]
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	e00b      	b.n	800f544 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f52c:	2300      	movs	r3, #0
 800f52e:	613b      	str	r3, [r7, #16]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	68db      	ldr	r3, [r3, #12]
 800f536:	613b      	str	r3, [r7, #16]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	689b      	ldr	r3, [r3, #8]
 800f53e:	613b      	str	r3, [r7, #16]
 800f540:	693b      	ldr	r3, [r7, #16]
        return;
 800f542:	e080      	b.n	800f646 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f544:	69bb      	ldr	r3, [r7, #24]
 800f546:	f003 0320 	and.w	r3, r3, #32
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d014      	beq.n	800f578 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f552:	f043 0201 	orr.w	r2, r3, #1
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f55a:	2300      	movs	r3, #0
 800f55c:	60fb      	str	r3, [r7, #12]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	689b      	ldr	r3, [r3, #8]
 800f564:	60fb      	str	r3, [r7, #12]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f574:	601a      	str	r2, [r3, #0]
 800f576:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f578:	69bb      	ldr	r3, [r7, #24]
 800f57a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d00c      	beq.n	800f59c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f586:	f043 0208 	orr.w	r2, r3, #8
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f58e:	2300      	movs	r3, #0
 800f590:	60bb      	str	r3, [r7, #8]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	689b      	ldr	r3, [r3, #8]
 800f598:	60bb      	str	r3, [r7, #8]
 800f59a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d04f      	beq.n	800f644 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	685a      	ldr	r2, [r3, #4]
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f5b2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f5bc:	69fb      	ldr	r3, [r7, #28]
 800f5be:	f003 0302 	and.w	r3, r3, #2
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d104      	bne.n	800f5d0 <HAL_SPI_IRQHandler+0x168>
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	f003 0301 	and.w	r3, r3, #1
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d034      	beq.n	800f63a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	685a      	ldr	r2, [r3, #4]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f022 0203 	bic.w	r2, r2, #3
 800f5de:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d011      	beq.n	800f60c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5ec:	4a17      	ldr	r2, [pc, #92]	; (800f64c <HAL_SPI_IRQHandler+0x1e4>)
 800f5ee:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7f8 f987 	bl	8007908 <HAL_DMA_Abort_IT>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d005      	beq.n	800f60c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f604:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f610:	2b00      	cmp	r3, #0
 800f612:	d016      	beq.n	800f642 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f618:	4a0c      	ldr	r2, [pc, #48]	; (800f64c <HAL_SPI_IRQHandler+0x1e4>)
 800f61a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f620:	4618      	mov	r0, r3
 800f622:	f7f8 f971 	bl	8007908 <HAL_DMA_Abort_IT>
 800f626:	4603      	mov	r3, r0
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d00a      	beq.n	800f642 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f630:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800f638:	e003      	b.n	800f642 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f7f7 fc22 	bl	8006e84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f640:	e000      	b.n	800f644 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800f642:	bf00      	nop
    return;
 800f644:	bf00      	nop
  }
}
 800f646:	3720      	adds	r7, #32
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	0800f651 	.word	0x0800f651

0800f650 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b084      	sub	sp, #16
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f65c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2200      	movs	r2, #0
 800f662:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2200      	movs	r2, #0
 800f668:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f66a:	68f8      	ldr	r0, [r7, #12]
 800f66c:	f7f7 fc0a 	bl	8006e84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f670:	bf00      	nop
 800f672:	3710      	adds	r7, #16
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b088      	sub	sp, #32
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	60b9      	str	r1, [r7, #8]
 800f682:	603b      	str	r3, [r7, #0]
 800f684:	4613      	mov	r3, r2
 800f686:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f688:	f7f7 fe66 	bl	8007358 <HAL_GetTick>
 800f68c:	4602      	mov	r2, r0
 800f68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f690:	1a9b      	subs	r3, r3, r2
 800f692:	683a      	ldr	r2, [r7, #0]
 800f694:	4413      	add	r3, r2
 800f696:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f698:	f7f7 fe5e 	bl	8007358 <HAL_GetTick>
 800f69c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f69e:	4b39      	ldr	r3, [pc, #228]	; (800f784 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	015b      	lsls	r3, r3, #5
 800f6a4:	0d1b      	lsrs	r3, r3, #20
 800f6a6:	69fa      	ldr	r2, [r7, #28]
 800f6a8:	fb02 f303 	mul.w	r3, r2, r3
 800f6ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f6ae:	e054      	b.n	800f75a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6b6:	d050      	beq.n	800f75a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f6b8:	f7f7 fe4e 	bl	8007358 <HAL_GetTick>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	69bb      	ldr	r3, [r7, #24]
 800f6c0:	1ad3      	subs	r3, r2, r3
 800f6c2:	69fa      	ldr	r2, [r7, #28]
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d902      	bls.n	800f6ce <SPI_WaitFlagStateUntilTimeout+0x56>
 800f6c8:	69fb      	ldr	r3, [r7, #28]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d13d      	bne.n	800f74a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	685a      	ldr	r2, [r3, #4]
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f6dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f6e6:	d111      	bne.n	800f70c <SPI_WaitFlagStateUntilTimeout+0x94>
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	689b      	ldr	r3, [r3, #8]
 800f6ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6f0:	d004      	beq.n	800f6fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	689b      	ldr	r3, [r3, #8]
 800f6f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f6fa:	d107      	bne.n	800f70c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	681a      	ldr	r2, [r3, #0]
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f70a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f714:	d10f      	bne.n	800f736 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f724:	601a      	str	r2, [r3, #0]
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	681a      	ldr	r2, [r3, #0]
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f734:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2201      	movs	r2, #1
 800f73a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2200      	movs	r2, #0
 800f742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f746:	2303      	movs	r3, #3
 800f748:	e017      	b.n	800f77a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d101      	bne.n	800f754 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f750:	2300      	movs	r3, #0
 800f752:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	3b01      	subs	r3, #1
 800f758:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	689a      	ldr	r2, [r3, #8]
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	4013      	ands	r3, r2
 800f764:	68ba      	ldr	r2, [r7, #8]
 800f766:	429a      	cmp	r2, r3
 800f768:	bf0c      	ite	eq
 800f76a:	2301      	moveq	r3, #1
 800f76c:	2300      	movne	r3, #0
 800f76e:	b2db      	uxtb	r3, r3
 800f770:	461a      	mov	r2, r3
 800f772:	79fb      	ldrb	r3, [r7, #7]
 800f774:	429a      	cmp	r2, r3
 800f776:	d19b      	bne.n	800f6b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f778:	2300      	movs	r3, #0
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3720      	adds	r7, #32
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
 800f782:	bf00      	nop
 800f784:	20000040 	.word	0x20000040

0800f788 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b086      	sub	sp, #24
 800f78c:	af02      	add	r7, sp, #8
 800f78e:	60f8      	str	r0, [r7, #12]
 800f790:	60b9      	str	r1, [r7, #8]
 800f792:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f79c:	d111      	bne.n	800f7c2 <SPI_EndRxTransaction+0x3a>
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	689b      	ldr	r3, [r3, #8]
 800f7a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7a6:	d004      	beq.n	800f7b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	689b      	ldr	r3, [r3, #8]
 800f7ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7b0:	d107      	bne.n	800f7c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f7c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f7ca:	d12a      	bne.n	800f822 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	689b      	ldr	r3, [r3, #8]
 800f7d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7d4:	d012      	beq.n	800f7fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	9300      	str	r3, [sp, #0]
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	2180      	movs	r1, #128	; 0x80
 800f7e0:	68f8      	ldr	r0, [r7, #12]
 800f7e2:	f7ff ff49 	bl	800f678 <SPI_WaitFlagStateUntilTimeout>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d02d      	beq.n	800f848 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7f0:	f043 0220 	orr.w	r2, r3, #32
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f7f8:	2303      	movs	r3, #3
 800f7fa:	e026      	b.n	800f84a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	9300      	str	r3, [sp, #0]
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	2200      	movs	r2, #0
 800f804:	2101      	movs	r1, #1
 800f806:	68f8      	ldr	r0, [r7, #12]
 800f808:	f7ff ff36 	bl	800f678 <SPI_WaitFlagStateUntilTimeout>
 800f80c:	4603      	mov	r3, r0
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d01a      	beq.n	800f848 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f816:	f043 0220 	orr.w	r2, r3, #32
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f81e:	2303      	movs	r3, #3
 800f820:	e013      	b.n	800f84a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	9300      	str	r3, [sp, #0]
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	2200      	movs	r2, #0
 800f82a:	2101      	movs	r1, #1
 800f82c:	68f8      	ldr	r0, [r7, #12]
 800f82e:	f7ff ff23 	bl	800f678 <SPI_WaitFlagStateUntilTimeout>
 800f832:	4603      	mov	r3, r0
 800f834:	2b00      	cmp	r3, #0
 800f836:	d007      	beq.n	800f848 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f83c:	f043 0220 	orr.w	r2, r3, #32
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f844:	2303      	movs	r3, #3
 800f846:	e000      	b.n	800f84a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f848:	2300      	movs	r3, #0
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3710      	adds	r7, #16
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
	...

0800f854 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b088      	sub	sp, #32
 800f858:	af02      	add	r7, sp, #8
 800f85a:	60f8      	str	r0, [r7, #12]
 800f85c:	60b9      	str	r1, [r7, #8]
 800f85e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	9300      	str	r3, [sp, #0]
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	2201      	movs	r2, #1
 800f868:	2102      	movs	r1, #2
 800f86a:	68f8      	ldr	r0, [r7, #12]
 800f86c:	f7ff ff04 	bl	800f678 <SPI_WaitFlagStateUntilTimeout>
 800f870:	4603      	mov	r3, r0
 800f872:	2b00      	cmp	r3, #0
 800f874:	d007      	beq.n	800f886 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f87a:	f043 0220 	orr.w	r2, r3, #32
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800f882:	2303      	movs	r3, #3
 800f884:	e032      	b.n	800f8ec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f886:	4b1b      	ldr	r3, [pc, #108]	; (800f8f4 <SPI_EndRxTxTransaction+0xa0>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	4a1b      	ldr	r2, [pc, #108]	; (800f8f8 <SPI_EndRxTxTransaction+0xa4>)
 800f88c:	fba2 2303 	umull	r2, r3, r2, r3
 800f890:	0d5b      	lsrs	r3, r3, #21
 800f892:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f896:	fb02 f303 	mul.w	r3, r2, r3
 800f89a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f8a4:	d112      	bne.n	800f8cc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	9300      	str	r3, [sp, #0]
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	2180      	movs	r1, #128	; 0x80
 800f8b0:	68f8      	ldr	r0, [r7, #12]
 800f8b2:	f7ff fee1 	bl	800f678 <SPI_WaitFlagStateUntilTimeout>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d016      	beq.n	800f8ea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8c0:	f043 0220 	orr.w	r2, r3, #32
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f8c8:	2303      	movs	r3, #3
 800f8ca:	e00f      	b.n	800f8ec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d00a      	beq.n	800f8e8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	3b01      	subs	r3, #1
 800f8d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8e2:	2b80      	cmp	r3, #128	; 0x80
 800f8e4:	d0f2      	beq.n	800f8cc <SPI_EndRxTxTransaction+0x78>
 800f8e6:	e000      	b.n	800f8ea <SPI_EndRxTxTransaction+0x96>
        break;
 800f8e8:	bf00      	nop
  }

  return HAL_OK;
 800f8ea:	2300      	movs	r3, #0
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3718      	adds	r7, #24
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}
 800f8f4:	20000040 	.word	0x20000040
 800f8f8:	165e9f81 	.word	0x165e9f81

0800f8fc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800f8fc:	b084      	sub	sp, #16
 800f8fe:	b480      	push	{r7}
 800f900:	b085      	sub	sp, #20
 800f902:	af00      	add	r7, sp, #0
 800f904:	6078      	str	r0, [r7, #4]
 800f906:	f107 001c 	add.w	r0, r7, #28
 800f90a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f90e:	2300      	movs	r3, #0
 800f910:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f912:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f914:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f916:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800f91a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f91e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f922:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f926:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f928:	68fa      	ldr	r2, [r7, #12]
 800f92a:	4313      	orrs	r3, r2
 800f92c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800f936:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f93a:	68fa      	ldr	r2, [r7, #12]
 800f93c:	431a      	orrs	r2, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f942:	2300      	movs	r3, #0
}
 800f944:	4618      	mov	r0, r3
 800f946:	3714      	adds	r7, #20
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	b004      	add	sp, #16
 800f950:	4770      	bx	lr

0800f952 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800f952:	b480      	push	{r7}
 800f954:	b083      	sub	sp, #12
 800f956:	af00      	add	r7, sp, #0
 800f958:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f960:	4618      	mov	r0, r3
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr

0800f96c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	681a      	ldr	r2, [r3, #0]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f980:	2300      	movs	r3, #0
}
 800f982:	4618      	mov	r0, r3
 800f984:	370c      	adds	r7, #12
 800f986:	46bd      	mov	sp, r7
 800f988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98c:	4770      	bx	lr

0800f98e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800f98e:	b480      	push	{r7}
 800f990:	b083      	sub	sp, #12
 800f992:	af00      	add	r7, sp, #0
 800f994:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2203      	movs	r2, #3
 800f99a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f99c:	2300      	movs	r3, #0
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	370c      	adds	r7, #12
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr

0800f9aa <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800f9aa:	b480      	push	{r7}
 800f9ac:	b083      	sub	sp, #12
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f003 0303 	and.w	r3, r3, #3
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	370c      	adds	r7, #12
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c4:	4770      	bx	lr

0800f9c6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800f9c6:	b480      	push	{r7}
 800f9c8:	b085      	sub	sp, #20
 800f9ca:	af00      	add	r7, sp, #0
 800f9cc:	6078      	str	r0, [r7, #4]
 800f9ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	681a      	ldr	r2, [r3, #0]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f9e4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f9ea:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f9f0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f9f2:	68fa      	ldr	r2, [r7, #12]
 800f9f4:	4313      	orrs	r3, r2
 800f9f6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	68db      	ldr	r3, [r3, #12]
 800f9fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800fa00:	f023 030f 	bic.w	r3, r3, #15
 800fa04:	68fa      	ldr	r2, [r7, #12]
 800fa06:	431a      	orrs	r2, r3
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3714      	adds	r7, #20
 800fa12:	46bd      	mov	sp, r7
 800fa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa18:	4770      	bx	lr

0800fa1a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800fa1a:	b480      	push	{r7}
 800fa1c:	b083      	sub	sp, #12
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	691b      	ldr	r3, [r3, #16]
 800fa26:	b2db      	uxtb	r3, r3
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	370c      	adds	r7, #12
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	4770      	bx	lr

0800fa34 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b085      	sub	sp, #20
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	3314      	adds	r3, #20
 800fa42:	461a      	mov	r2, r3
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	4413      	add	r3, r2
 800fa48:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
}  
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3714      	adds	r7, #20
 800fa52:	46bd      	mov	sp, r7
 800fa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa58:	4770      	bx	lr

0800fa5a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800fa5a:	b480      	push	{r7}
 800fa5c:	b085      	sub	sp, #20
 800fa5e:	af00      	add	r7, sp, #0
 800fa60:	6078      	str	r0, [r7, #4]
 800fa62:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fa64:	2300      	movs	r3, #0
 800fa66:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	681a      	ldr	r2, [r3, #0]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	685a      	ldr	r2, [r3, #4]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fa80:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800fa86:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800fa8c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fa8e:	68fa      	ldr	r2, [r7, #12]
 800fa90:	4313      	orrs	r3, r2
 800fa92:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa98:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	431a      	orrs	r2, r3
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800faa4:	2300      	movs	r3, #0

}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3714      	adds	r7, #20
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr

0800fab2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800fab2:	b580      	push	{r7, lr}
 800fab4:	b088      	sub	sp, #32
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6078      	str	r0, [r7, #4]
 800faba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800fac0:	2310      	movs	r3, #16
 800fac2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fac4:	2340      	movs	r3, #64	; 0x40
 800fac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fac8:	2300      	movs	r3, #0
 800faca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800facc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fad0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fad2:	f107 0308 	add.w	r3, r7, #8
 800fad6:	4619      	mov	r1, r3
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f7ff ff74 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800fade:	f241 3288 	movw	r2, #5000	; 0x1388
 800fae2:	2110      	movs	r1, #16
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f000 fa19 	bl	800ff1c <SDMMC_GetCmdResp1>
 800faea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800faec:	69fb      	ldr	r3, [r7, #28]
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3720      	adds	r7, #32
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}

0800faf6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800faf6:	b580      	push	{r7, lr}
 800faf8:	b088      	sub	sp, #32
 800fafa:	af00      	add	r7, sp, #0
 800fafc:	6078      	str	r0, [r7, #4]
 800fafe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fb04:	2311      	movs	r3, #17
 800fb06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fb08:	2340      	movs	r3, #64	; 0x40
 800fb0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fb10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fb16:	f107 0308 	add.w	r3, r7, #8
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f7ff ff52 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800fb22:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb26:	2111      	movs	r1, #17
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f000 f9f7 	bl	800ff1c <SDMMC_GetCmdResp1>
 800fb2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb30:	69fb      	ldr	r3, [r7, #28]
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3720      	adds	r7, #32
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}

0800fb3a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800fb3a:	b580      	push	{r7, lr}
 800fb3c:	b088      	sub	sp, #32
 800fb3e:	af00      	add	r7, sp, #0
 800fb40:	6078      	str	r0, [r7, #4]
 800fb42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fb48:	2312      	movs	r3, #18
 800fb4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fb4c:	2340      	movs	r3, #64	; 0x40
 800fb4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fb50:	2300      	movs	r3, #0
 800fb52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fb54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fb5a:	f107 0308 	add.w	r3, r7, #8
 800fb5e:	4619      	mov	r1, r3
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f7ff ff30 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800fb66:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb6a:	2112      	movs	r1, #18
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 f9d5 	bl	800ff1c <SDMMC_GetCmdResp1>
 800fb72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb74:	69fb      	ldr	r3, [r7, #28]
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3720      	adds	r7, #32
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}

0800fb7e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800fb7e:	b580      	push	{r7, lr}
 800fb80:	b088      	sub	sp, #32
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	6078      	str	r0, [r7, #4]
 800fb86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fb8c:	2318      	movs	r3, #24
 800fb8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fb90:	2340      	movs	r3, #64	; 0x40
 800fb92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fb94:	2300      	movs	r3, #0
 800fb96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fb98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fb9e:	f107 0308 	add.w	r3, r7, #8
 800fba2:	4619      	mov	r1, r3
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f7ff ff0e 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800fbaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800fbae:	2118      	movs	r1, #24
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f000 f9b3 	bl	800ff1c <SDMMC_GetCmdResp1>
 800fbb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbb8:	69fb      	ldr	r3, [r7, #28]
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3720      	adds	r7, #32
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}

0800fbc2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800fbc2:	b580      	push	{r7, lr}
 800fbc4:	b088      	sub	sp, #32
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	6078      	str	r0, [r7, #4]
 800fbca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800fbd0:	2319      	movs	r3, #25
 800fbd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fbd4:	2340      	movs	r3, #64	; 0x40
 800fbd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fbdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbe0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fbe2:	f107 0308 	add.w	r3, r7, #8
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f7ff feec 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800fbee:	f241 3288 	movw	r2, #5000	; 0x1388
 800fbf2:	2119      	movs	r1, #25
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f000 f991 	bl	800ff1c <SDMMC_GetCmdResp1>
 800fbfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbfc:	69fb      	ldr	r3, [r7, #28]
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3720      	adds	r7, #32
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
	...

0800fc08 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b088      	sub	sp, #32
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fc10:	2300      	movs	r3, #0
 800fc12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fc14:	230c      	movs	r3, #12
 800fc16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fc18:	2340      	movs	r3, #64	; 0x40
 800fc1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fc20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fc26:	f107 0308 	add.w	r3, r7, #8
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f7ff feca 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800fc32:	4a05      	ldr	r2, [pc, #20]	; (800fc48 <SDMMC_CmdStopTransfer+0x40>)
 800fc34:	210c      	movs	r1, #12
 800fc36:	6878      	ldr	r0, [r7, #4]
 800fc38:	f000 f970 	bl	800ff1c <SDMMC_GetCmdResp1>
 800fc3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc3e:	69fb      	ldr	r3, [r7, #28]
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	3720      	adds	r7, #32
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}
 800fc48:	05f5e100 	.word	0x05f5e100

0800fc4c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b08a      	sub	sp, #40	; 0x28
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fc5c:	2307      	movs	r3, #7
 800fc5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fc60:	2340      	movs	r3, #64	; 0x40
 800fc62:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fc64:	2300      	movs	r3, #0
 800fc66:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fc68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc6c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fc6e:	f107 0310 	add.w	r3, r7, #16
 800fc72:	4619      	mov	r1, r3
 800fc74:	68f8      	ldr	r0, [r7, #12]
 800fc76:	f7ff fea6 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800fc7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800fc7e:	2107      	movs	r1, #7
 800fc80:	68f8      	ldr	r0, [r7, #12]
 800fc82:	f000 f94b 	bl	800ff1c <SDMMC_GetCmdResp1>
 800fc86:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800fc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3728      	adds	r7, #40	; 0x28
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}

0800fc92 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800fc92:	b580      	push	{r7, lr}
 800fc94:	b088      	sub	sp, #32
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800fca2:	2300      	movs	r3, #0
 800fca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fca6:	2300      	movs	r3, #0
 800fca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fcaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fcae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fcb0:	f107 0308 	add.w	r3, r7, #8
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f7ff fe85 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f000 fb65 	bl	801038c <SDMMC_GetCmdError>
 800fcc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fcc4:	69fb      	ldr	r3, [r7, #28]
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3720      	adds	r7, #32
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}

0800fcce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800fcce:	b580      	push	{r7, lr}
 800fcd0:	b088      	sub	sp, #32
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800fcd6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800fcda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800fcdc:	2308      	movs	r3, #8
 800fcde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fce0:	2340      	movs	r3, #64	; 0x40
 800fce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fce4:	2300      	movs	r3, #0
 800fce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fcec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fcee:	f107 0308 	add.w	r3, r7, #8
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f7ff fe66 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 faf8 	bl	80102f0 <SDMMC_GetCmdResp7>
 800fd00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd02:	69fb      	ldr	r3, [r7, #28]
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3720      	adds	r7, #32
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b088      	sub	sp, #32
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fd1a:	2337      	movs	r3, #55	; 0x37
 800fd1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fd1e:	2340      	movs	r3, #64	; 0x40
 800fd20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fd22:	2300      	movs	r3, #0
 800fd24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fd26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fd2c:	f107 0308 	add.w	r3, r7, #8
 800fd30:	4619      	mov	r1, r3
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f7ff fe47 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800fd38:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd3c:	2137      	movs	r1, #55	; 0x37
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f000 f8ec 	bl	800ff1c <SDMMC_GetCmdResp1>
 800fd44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd46:	69fb      	ldr	r3, [r7, #28]
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3720      	adds	r7, #32
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b088      	sub	sp, #32
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fd60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fd66:	2329      	movs	r3, #41	; 0x29
 800fd68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fd6a:	2340      	movs	r3, #64	; 0x40
 800fd6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fd72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fd78:	f107 0308 	add.w	r3, r7, #8
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f7ff fe21 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f000 f9ff 	bl	8010188 <SDMMC_GetCmdResp3>
 800fd8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd8c:	69fb      	ldr	r3, [r7, #28]
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3720      	adds	r7, #32
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}

0800fd96 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800fd96:	b580      	push	{r7, lr}
 800fd98:	b088      	sub	sp, #32
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	6078      	str	r0, [r7, #4]
 800fd9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800fda4:	2306      	movs	r3, #6
 800fda6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fda8:	2340      	movs	r3, #64	; 0x40
 800fdaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fdac:	2300      	movs	r3, #0
 800fdae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fdb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fdb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fdb6:	f107 0308 	add.w	r3, r7, #8
 800fdba:	4619      	mov	r1, r3
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f7ff fe02 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800fdc2:	f241 3288 	movw	r2, #5000	; 0x1388
 800fdc6:	2106      	movs	r1, #6
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f000 f8a7 	bl	800ff1c <SDMMC_GetCmdResp1>
 800fdce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fdd0:	69fb      	ldr	r3, [r7, #28]
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3720      	adds	r7, #32
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}

0800fdda <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800fdda:	b580      	push	{r7, lr}
 800fddc:	b088      	sub	sp, #32
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800fde2:	2300      	movs	r3, #0
 800fde4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800fde6:	2333      	movs	r3, #51	; 0x33
 800fde8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fdea:	2340      	movs	r3, #64	; 0x40
 800fdec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fdf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fdf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fdf8:	f107 0308 	add.w	r3, r7, #8
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f7ff fde1 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800fe04:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe08:	2133      	movs	r1, #51	; 0x33
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f000 f886 	bl	800ff1c <SDMMC_GetCmdResp1>
 800fe10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe12:	69fb      	ldr	r3, [r7, #28]
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3720      	adds	r7, #32
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b088      	sub	sp, #32
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fe24:	2300      	movs	r3, #0
 800fe26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fe28:	2302      	movs	r3, #2
 800fe2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800fe2c:	23c0      	movs	r3, #192	; 0xc0
 800fe2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fe30:	2300      	movs	r3, #0
 800fe32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fe34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fe3a:	f107 0308 	add.w	r3, r7, #8
 800fe3e:	4619      	mov	r1, r3
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f7ff fdc0 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f000 f956 	bl	80100f8 <SDMMC_GetCmdResp2>
 800fe4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe4e:	69fb      	ldr	r3, [r7, #28]
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3720      	adds	r7, #32
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b088      	sub	sp, #32
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fe66:	2309      	movs	r3, #9
 800fe68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800fe6a:	23c0      	movs	r3, #192	; 0xc0
 800fe6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fe72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fe78:	f107 0308 	add.w	r3, r7, #8
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f7ff fda1 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f000 f937 	bl	80100f8 <SDMMC_GetCmdResp2>
 800fe8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe8c:	69fb      	ldr	r3, [r7, #28]
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3720      	adds	r7, #32
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}

0800fe96 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800fe96:	b580      	push	{r7, lr}
 800fe98:	b088      	sub	sp, #32
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
 800fe9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fea0:	2300      	movs	r3, #0
 800fea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fea4:	2303      	movs	r3, #3
 800fea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fea8:	2340      	movs	r3, #64	; 0x40
 800feaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800feac:	2300      	movs	r3, #0
 800feae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800feb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800feb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800feb6:	f107 0308 	add.w	r3, r7, #8
 800feba:	4619      	mov	r1, r3
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f7ff fd82 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fec2:	683a      	ldr	r2, [r7, #0]
 800fec4:	2103      	movs	r1, #3
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f000 f99c 	bl	8010204 <SDMMC_GetCmdResp6>
 800fecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fece:	69fb      	ldr	r3, [r7, #28]
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3720      	adds	r7, #32
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b088      	sub	sp, #32
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800fee6:	230d      	movs	r3, #13
 800fee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800feea:	2340      	movs	r3, #64	; 0x40
 800feec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800feee:	2300      	movs	r3, #0
 800fef0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fef6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fef8:	f107 0308 	add.w	r3, r7, #8
 800fefc:	4619      	mov	r1, r3
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f7ff fd61 	bl	800f9c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ff04:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff08:	210d      	movs	r1, #13
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	f000 f806 	bl	800ff1c <SDMMC_GetCmdResp1>
 800ff10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff12:	69fb      	ldr	r3, [r7, #28]
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3720      	adds	r7, #32
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}

0800ff1c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b088      	sub	sp, #32
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	60f8      	str	r0, [r7, #12]
 800ff24:	460b      	mov	r3, r1
 800ff26:	607a      	str	r2, [r7, #4]
 800ff28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ff2a:	4b70      	ldr	r3, [pc, #448]	; (80100ec <SDMMC_GetCmdResp1+0x1d0>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	4a70      	ldr	r2, [pc, #448]	; (80100f0 <SDMMC_GetCmdResp1+0x1d4>)
 800ff30:	fba2 2303 	umull	r2, r3, r2, r3
 800ff34:	0a5a      	lsrs	r2, r3, #9
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	fb02 f303 	mul.w	r3, r2, r3
 800ff3c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ff3e:	69fb      	ldr	r3, [r7, #28]
 800ff40:	1e5a      	subs	r2, r3, #1
 800ff42:	61fa      	str	r2, [r7, #28]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d102      	bne.n	800ff4e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ff48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ff4c:	e0c9      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff52:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ff54:	69bb      	ldr	r3, [r7, #24]
 800ff56:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d0ef      	beq.n	800ff3e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ff5e:	69bb      	ldr	r3, [r7, #24]
 800ff60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d1ea      	bne.n	800ff3e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff6c:	f003 0304 	and.w	r3, r3, #4
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d004      	beq.n	800ff7e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2204      	movs	r2, #4
 800ff78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff7a:	2304      	movs	r3, #4
 800ff7c:	e0b1      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff82:	f003 0301 	and.w	r3, r3, #1
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d004      	beq.n	800ff94 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff90:	2301      	movs	r3, #1
 800ff92:	e0a6      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	22c5      	movs	r2, #197	; 0xc5
 800ff98:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ff9a:	68f8      	ldr	r0, [r7, #12]
 800ff9c:	f7ff fd3d 	bl	800fa1a <SDIO_GetCommandResponse>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	7afb      	ldrb	r3, [r7, #11]
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d001      	beq.n	800ffae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	e099      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ffae:	2100      	movs	r1, #0
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f7ff fd3f 	bl	800fa34 <SDIO_GetResponse>
 800ffb6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ffb8:	697a      	ldr	r2, [r7, #20]
 800ffba:	4b4e      	ldr	r3, [pc, #312]	; (80100f4 <SDMMC_GetCmdResp1+0x1d8>)
 800ffbc:	4013      	ands	r3, r2
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d101      	bne.n	800ffc6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	e08d      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	da02      	bge.n	800ffd2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ffcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ffd0:	e087      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d001      	beq.n	800ffe0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ffdc:	2340      	movs	r3, #64	; 0x40
 800ffde:	e080      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d001      	beq.n	800ffee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ffea:	2380      	movs	r3, #128	; 0x80
 800ffec:	e079      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d002      	beq.n	800fffe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fffc:	e071      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010004:	2b00      	cmp	r3, #0
 8010006:	d002      	beq.n	801000e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010008:	f44f 7300 	mov.w	r3, #512	; 0x200
 801000c:	e069      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010014:	2b00      	cmp	r3, #0
 8010016:	d002      	beq.n	801001e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801001c:	e061      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010024:	2b00      	cmp	r3, #0
 8010026:	d002      	beq.n	801002e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010028:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801002c:	e059      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010034:	2b00      	cmp	r3, #0
 8010036:	d002      	beq.n	801003e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801003c:	e051      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010044:	2b00      	cmp	r3, #0
 8010046:	d002      	beq.n	801004e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801004c:	e049      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010054:	2b00      	cmp	r3, #0
 8010056:	d002      	beq.n	801005e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010058:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801005c:	e041      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010064:	2b00      	cmp	r3, #0
 8010066:	d002      	beq.n	801006e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801006c:	e039      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010074:	2b00      	cmp	r3, #0
 8010076:	d002      	beq.n	801007e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801007c:	e031      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010084:	2b00      	cmp	r3, #0
 8010086:	d002      	beq.n	801008e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010088:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801008c:	e029      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010094:	2b00      	cmp	r3, #0
 8010096:	d002      	beq.n	801009e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010098:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801009c:	e021      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d002      	beq.n	80100ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80100a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80100ac:	e019      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d002      	beq.n	80100be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80100b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80100bc:	e011      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d002      	beq.n	80100ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80100c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80100cc:	e009      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	f003 0308 	and.w	r3, r3, #8
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d002      	beq.n	80100de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80100d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80100dc:	e001      	b.n	80100e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80100de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3720      	adds	r7, #32
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	20000040 	.word	0x20000040
 80100f0:	10624dd3 	.word	0x10624dd3
 80100f4:	fdffe008 	.word	0xfdffe008

080100f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80100f8:	b480      	push	{r7}
 80100fa:	b085      	sub	sp, #20
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010100:	4b1f      	ldr	r3, [pc, #124]	; (8010180 <SDMMC_GetCmdResp2+0x88>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	4a1f      	ldr	r2, [pc, #124]	; (8010184 <SDMMC_GetCmdResp2+0x8c>)
 8010106:	fba2 2303 	umull	r2, r3, r2, r3
 801010a:	0a5b      	lsrs	r3, r3, #9
 801010c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010110:	fb02 f303 	mul.w	r3, r2, r3
 8010114:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	1e5a      	subs	r2, r3, #1
 801011a:	60fa      	str	r2, [r7, #12]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d102      	bne.n	8010126 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010120:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010124:	e026      	b.n	8010174 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801012a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8010132:	2b00      	cmp	r3, #0
 8010134:	d0ef      	beq.n	8010116 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801013c:	2b00      	cmp	r3, #0
 801013e:	d1ea      	bne.n	8010116 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010144:	f003 0304 	and.w	r3, r3, #4
 8010148:	2b00      	cmp	r3, #0
 801014a:	d004      	beq.n	8010156 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2204      	movs	r2, #4
 8010150:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010152:	2304      	movs	r3, #4
 8010154:	e00e      	b.n	8010174 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801015a:	f003 0301 	and.w	r3, r3, #1
 801015e:	2b00      	cmp	r3, #0
 8010160:	d004      	beq.n	801016c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2201      	movs	r2, #1
 8010166:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010168:	2301      	movs	r3, #1
 801016a:	e003      	b.n	8010174 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	22c5      	movs	r2, #197	; 0xc5
 8010170:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010172:	2300      	movs	r3, #0
}
 8010174:	4618      	mov	r0, r3
 8010176:	3714      	adds	r7, #20
 8010178:	46bd      	mov	sp, r7
 801017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017e:	4770      	bx	lr
 8010180:	20000040 	.word	0x20000040
 8010184:	10624dd3 	.word	0x10624dd3

08010188 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010188:	b480      	push	{r7}
 801018a:	b085      	sub	sp, #20
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010190:	4b1a      	ldr	r3, [pc, #104]	; (80101fc <SDMMC_GetCmdResp3+0x74>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	4a1a      	ldr	r2, [pc, #104]	; (8010200 <SDMMC_GetCmdResp3+0x78>)
 8010196:	fba2 2303 	umull	r2, r3, r2, r3
 801019a:	0a5b      	lsrs	r3, r3, #9
 801019c:	f241 3288 	movw	r2, #5000	; 0x1388
 80101a0:	fb02 f303 	mul.w	r3, r2, r3
 80101a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	1e5a      	subs	r2, r3, #1
 80101aa:	60fa      	str	r2, [r7, #12]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d102      	bne.n	80101b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80101b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80101b4:	e01b      	b.n	80101ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d0ef      	beq.n	80101a6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d1ea      	bne.n	80101a6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101d4:	f003 0304 	and.w	r3, r3, #4
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d004      	beq.n	80101e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2204      	movs	r2, #4
 80101e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80101e2:	2304      	movs	r3, #4
 80101e4:	e003      	b.n	80101ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	22c5      	movs	r2, #197	; 0xc5
 80101ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80101ec:	2300      	movs	r3, #0
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3714      	adds	r7, #20
 80101f2:	46bd      	mov	sp, r7
 80101f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f8:	4770      	bx	lr
 80101fa:	bf00      	nop
 80101fc:	20000040 	.word	0x20000040
 8010200:	10624dd3 	.word	0x10624dd3

08010204 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b088      	sub	sp, #32
 8010208:	af00      	add	r7, sp, #0
 801020a:	60f8      	str	r0, [r7, #12]
 801020c:	460b      	mov	r3, r1
 801020e:	607a      	str	r2, [r7, #4]
 8010210:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010212:	4b35      	ldr	r3, [pc, #212]	; (80102e8 <SDMMC_GetCmdResp6+0xe4>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	4a35      	ldr	r2, [pc, #212]	; (80102ec <SDMMC_GetCmdResp6+0xe8>)
 8010218:	fba2 2303 	umull	r2, r3, r2, r3
 801021c:	0a5b      	lsrs	r3, r3, #9
 801021e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010222:	fb02 f303 	mul.w	r3, r2, r3
 8010226:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	1e5a      	subs	r2, r3, #1
 801022c:	61fa      	str	r2, [r7, #28]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d102      	bne.n	8010238 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010232:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010236:	e052      	b.n	80102de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801023c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801023e:	69bb      	ldr	r3, [r7, #24]
 8010240:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8010244:	2b00      	cmp	r3, #0
 8010246:	d0ef      	beq.n	8010228 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801024e:	2b00      	cmp	r3, #0
 8010250:	d1ea      	bne.n	8010228 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010256:	f003 0304 	and.w	r3, r3, #4
 801025a:	2b00      	cmp	r3, #0
 801025c:	d004      	beq.n	8010268 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2204      	movs	r2, #4
 8010262:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010264:	2304      	movs	r3, #4
 8010266:	e03a      	b.n	80102de <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801026c:	f003 0301 	and.w	r3, r3, #1
 8010270:	2b00      	cmp	r3, #0
 8010272:	d004      	beq.n	801027e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2201      	movs	r2, #1
 8010278:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801027a:	2301      	movs	r3, #1
 801027c:	e02f      	b.n	80102de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801027e:	68f8      	ldr	r0, [r7, #12]
 8010280:	f7ff fbcb 	bl	800fa1a <SDIO_GetCommandResponse>
 8010284:	4603      	mov	r3, r0
 8010286:	461a      	mov	r2, r3
 8010288:	7afb      	ldrb	r3, [r7, #11]
 801028a:	4293      	cmp	r3, r2
 801028c:	d001      	beq.n	8010292 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801028e:	2301      	movs	r3, #1
 8010290:	e025      	b.n	80102de <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	22c5      	movs	r2, #197	; 0xc5
 8010296:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010298:	2100      	movs	r1, #0
 801029a:	68f8      	ldr	r0, [r7, #12]
 801029c:	f7ff fbca 	bl	800fa34 <SDIO_GetResponse>
 80102a0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d106      	bne.n	80102ba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	0c1b      	lsrs	r3, r3, #16
 80102b0:	b29a      	uxth	r2, r3
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80102b6:	2300      	movs	r3, #0
 80102b8:	e011      	b.n	80102de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d002      	beq.n	80102ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80102c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80102c8:	e009      	b.n	80102de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d002      	beq.n	80102da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80102d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80102d8:	e001      	b.n	80102de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80102da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3720      	adds	r7, #32
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
 80102e6:	bf00      	nop
 80102e8:	20000040 	.word	0x20000040
 80102ec:	10624dd3 	.word	0x10624dd3

080102f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b085      	sub	sp, #20
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80102f8:	4b22      	ldr	r3, [pc, #136]	; (8010384 <SDMMC_GetCmdResp7+0x94>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	4a22      	ldr	r2, [pc, #136]	; (8010388 <SDMMC_GetCmdResp7+0x98>)
 80102fe:	fba2 2303 	umull	r2, r3, r2, r3
 8010302:	0a5b      	lsrs	r3, r3, #9
 8010304:	f241 3288 	movw	r2, #5000	; 0x1388
 8010308:	fb02 f303 	mul.w	r3, r2, r3
 801030c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	1e5a      	subs	r2, r3, #1
 8010312:	60fa      	str	r2, [r7, #12]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d102      	bne.n	801031e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010318:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801031c:	e02c      	b.n	8010378 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010322:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801032a:	2b00      	cmp	r3, #0
 801032c:	d0ef      	beq.n	801030e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010334:	2b00      	cmp	r3, #0
 8010336:	d1ea      	bne.n	801030e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801033c:	f003 0304 	and.w	r3, r3, #4
 8010340:	2b00      	cmp	r3, #0
 8010342:	d004      	beq.n	801034e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2204      	movs	r2, #4
 8010348:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801034a:	2304      	movs	r3, #4
 801034c:	e014      	b.n	8010378 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010352:	f003 0301 	and.w	r3, r3, #1
 8010356:	2b00      	cmp	r3, #0
 8010358:	d004      	beq.n	8010364 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2201      	movs	r2, #1
 801035e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010360:	2301      	movs	r3, #1
 8010362:	e009      	b.n	8010378 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801036c:	2b00      	cmp	r3, #0
 801036e:	d002      	beq.n	8010376 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2240      	movs	r2, #64	; 0x40
 8010374:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010376:	2300      	movs	r3, #0
  
}
 8010378:	4618      	mov	r0, r3
 801037a:	3714      	adds	r7, #20
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr
 8010384:	20000040 	.word	0x20000040
 8010388:	10624dd3 	.word	0x10624dd3

0801038c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 801038c:	b480      	push	{r7}
 801038e:	b085      	sub	sp, #20
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010394:	4b11      	ldr	r3, [pc, #68]	; (80103dc <SDMMC_GetCmdError+0x50>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	4a11      	ldr	r2, [pc, #68]	; (80103e0 <SDMMC_GetCmdError+0x54>)
 801039a:	fba2 2303 	umull	r2, r3, r2, r3
 801039e:	0a5b      	lsrs	r3, r3, #9
 80103a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80103a4:	fb02 f303 	mul.w	r3, r2, r3
 80103a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	1e5a      	subs	r2, r3, #1
 80103ae:	60fa      	str	r2, [r7, #12]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d102      	bne.n	80103ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80103b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80103b8:	e009      	b.n	80103ce <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d0f1      	beq.n	80103aa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	22c5      	movs	r2, #197	; 0xc5
 80103ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80103cc:	2300      	movs	r3, #0
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3714      	adds	r7, #20
 80103d2:	46bd      	mov	sp, r7
 80103d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d8:	4770      	bx	lr
 80103da:	bf00      	nop
 80103dc:	20000040 	.word	0x20000040
 80103e0:	10624dd3 	.word	0x10624dd3

080103e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80103e4:	b084      	sub	sp, #16
 80103e6:	b580      	push	{r7, lr}
 80103e8:	b084      	sub	sp, #16
 80103ea:	af00      	add	r7, sp, #0
 80103ec:	6078      	str	r0, [r7, #4]
 80103ee:	f107 001c 	add.w	r0, r7, #28
 80103f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80103f6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80103fa:	2b01      	cmp	r3, #1
 80103fc:	d123      	bne.n	8010446 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010402:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8010412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010416:	687a      	ldr	r2, [r7, #4]
 8010418:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	68db      	ldr	r3, [r3, #12]
 801041e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010426:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801042a:	2b01      	cmp	r3, #1
 801042c:	d105      	bne.n	801043a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	68db      	ldr	r3, [r3, #12]
 8010432:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f001 fae2 	bl	8011a04 <USB_CoreReset>
 8010440:	4603      	mov	r3, r0
 8010442:	73fb      	strb	r3, [r7, #15]
 8010444:	e01b      	b.n	801047e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	68db      	ldr	r3, [r3, #12]
 801044a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f001 fad6 	bl	8011a04 <USB_CoreReset>
 8010458:	4603      	mov	r3, r0
 801045a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801045c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010460:	2b00      	cmp	r3, #0
 8010462:	d106      	bne.n	8010472 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010468:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	639a      	str	r2, [r3, #56]	; 0x38
 8010470:	e005      	b.n	801047e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010476:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801047e:	7fbb      	ldrb	r3, [r7, #30]
 8010480:	2b01      	cmp	r3, #1
 8010482:	d10b      	bne.n	801049c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	689b      	ldr	r3, [r3, #8]
 8010488:	f043 0206 	orr.w	r2, r3, #6
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	689b      	ldr	r3, [r3, #8]
 8010494:	f043 0220 	orr.w	r2, r3, #32
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801049c:	7bfb      	ldrb	r3, [r7, #15]
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3710      	adds	r7, #16
 80104a2:	46bd      	mov	sp, r7
 80104a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80104a8:	b004      	add	sp, #16
 80104aa:	4770      	bx	lr

080104ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80104ac:	b480      	push	{r7}
 80104ae:	b087      	sub	sp, #28
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	60f8      	str	r0, [r7, #12]
 80104b4:	60b9      	str	r1, [r7, #8]
 80104b6:	4613      	mov	r3, r2
 80104b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80104ba:	79fb      	ldrb	r3, [r7, #7]
 80104bc:	2b02      	cmp	r3, #2
 80104be:	d165      	bne.n	801058c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	4a41      	ldr	r2, [pc, #260]	; (80105c8 <USB_SetTurnaroundTime+0x11c>)
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d906      	bls.n	80104d6 <USB_SetTurnaroundTime+0x2a>
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	4a40      	ldr	r2, [pc, #256]	; (80105cc <USB_SetTurnaroundTime+0x120>)
 80104cc:	4293      	cmp	r3, r2
 80104ce:	d202      	bcs.n	80104d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80104d0:	230f      	movs	r3, #15
 80104d2:	617b      	str	r3, [r7, #20]
 80104d4:	e062      	b.n	801059c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	4a3c      	ldr	r2, [pc, #240]	; (80105cc <USB_SetTurnaroundTime+0x120>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d306      	bcc.n	80104ec <USB_SetTurnaroundTime+0x40>
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	4a3b      	ldr	r2, [pc, #236]	; (80105d0 <USB_SetTurnaroundTime+0x124>)
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d202      	bcs.n	80104ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80104e6:	230e      	movs	r3, #14
 80104e8:	617b      	str	r3, [r7, #20]
 80104ea:	e057      	b.n	801059c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	4a38      	ldr	r2, [pc, #224]	; (80105d0 <USB_SetTurnaroundTime+0x124>)
 80104f0:	4293      	cmp	r3, r2
 80104f2:	d306      	bcc.n	8010502 <USB_SetTurnaroundTime+0x56>
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	4a37      	ldr	r2, [pc, #220]	; (80105d4 <USB_SetTurnaroundTime+0x128>)
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d202      	bcs.n	8010502 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80104fc:	230d      	movs	r3, #13
 80104fe:	617b      	str	r3, [r7, #20]
 8010500:	e04c      	b.n	801059c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	4a33      	ldr	r2, [pc, #204]	; (80105d4 <USB_SetTurnaroundTime+0x128>)
 8010506:	4293      	cmp	r3, r2
 8010508:	d306      	bcc.n	8010518 <USB_SetTurnaroundTime+0x6c>
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	4a32      	ldr	r2, [pc, #200]	; (80105d8 <USB_SetTurnaroundTime+0x12c>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d802      	bhi.n	8010518 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010512:	230c      	movs	r3, #12
 8010514:	617b      	str	r3, [r7, #20]
 8010516:	e041      	b.n	801059c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	4a2f      	ldr	r2, [pc, #188]	; (80105d8 <USB_SetTurnaroundTime+0x12c>)
 801051c:	4293      	cmp	r3, r2
 801051e:	d906      	bls.n	801052e <USB_SetTurnaroundTime+0x82>
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	4a2e      	ldr	r2, [pc, #184]	; (80105dc <USB_SetTurnaroundTime+0x130>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d802      	bhi.n	801052e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010528:	230b      	movs	r3, #11
 801052a:	617b      	str	r3, [r7, #20]
 801052c:	e036      	b.n	801059c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	4a2a      	ldr	r2, [pc, #168]	; (80105dc <USB_SetTurnaroundTime+0x130>)
 8010532:	4293      	cmp	r3, r2
 8010534:	d906      	bls.n	8010544 <USB_SetTurnaroundTime+0x98>
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	4a29      	ldr	r2, [pc, #164]	; (80105e0 <USB_SetTurnaroundTime+0x134>)
 801053a:	4293      	cmp	r3, r2
 801053c:	d802      	bhi.n	8010544 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801053e:	230a      	movs	r3, #10
 8010540:	617b      	str	r3, [r7, #20]
 8010542:	e02b      	b.n	801059c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010544:	68bb      	ldr	r3, [r7, #8]
 8010546:	4a26      	ldr	r2, [pc, #152]	; (80105e0 <USB_SetTurnaroundTime+0x134>)
 8010548:	4293      	cmp	r3, r2
 801054a:	d906      	bls.n	801055a <USB_SetTurnaroundTime+0xae>
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	4a25      	ldr	r2, [pc, #148]	; (80105e4 <USB_SetTurnaroundTime+0x138>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d202      	bcs.n	801055a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010554:	2309      	movs	r3, #9
 8010556:	617b      	str	r3, [r7, #20]
 8010558:	e020      	b.n	801059c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	4a21      	ldr	r2, [pc, #132]	; (80105e4 <USB_SetTurnaroundTime+0x138>)
 801055e:	4293      	cmp	r3, r2
 8010560:	d306      	bcc.n	8010570 <USB_SetTurnaroundTime+0xc4>
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	4a20      	ldr	r2, [pc, #128]	; (80105e8 <USB_SetTurnaroundTime+0x13c>)
 8010566:	4293      	cmp	r3, r2
 8010568:	d802      	bhi.n	8010570 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801056a:	2308      	movs	r3, #8
 801056c:	617b      	str	r3, [r7, #20]
 801056e:	e015      	b.n	801059c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	4a1d      	ldr	r2, [pc, #116]	; (80105e8 <USB_SetTurnaroundTime+0x13c>)
 8010574:	4293      	cmp	r3, r2
 8010576:	d906      	bls.n	8010586 <USB_SetTurnaroundTime+0xda>
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	4a1c      	ldr	r2, [pc, #112]	; (80105ec <USB_SetTurnaroundTime+0x140>)
 801057c:	4293      	cmp	r3, r2
 801057e:	d202      	bcs.n	8010586 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010580:	2307      	movs	r3, #7
 8010582:	617b      	str	r3, [r7, #20]
 8010584:	e00a      	b.n	801059c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010586:	2306      	movs	r3, #6
 8010588:	617b      	str	r3, [r7, #20]
 801058a:	e007      	b.n	801059c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801058c:	79fb      	ldrb	r3, [r7, #7]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d102      	bne.n	8010598 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010592:	2309      	movs	r3, #9
 8010594:	617b      	str	r3, [r7, #20]
 8010596:	e001      	b.n	801059c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010598:	2309      	movs	r3, #9
 801059a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	68da      	ldr	r2, [r3, #12]
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	029b      	lsls	r3, r3, #10
 80105b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80105b4:	431a      	orrs	r2, r3
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80105ba:	2300      	movs	r3, #0
}
 80105bc:	4618      	mov	r0, r3
 80105be:	371c      	adds	r7, #28
 80105c0:	46bd      	mov	sp, r7
 80105c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c6:	4770      	bx	lr
 80105c8:	00d8acbf 	.word	0x00d8acbf
 80105cc:	00e4e1c0 	.word	0x00e4e1c0
 80105d0:	00f42400 	.word	0x00f42400
 80105d4:	01067380 	.word	0x01067380
 80105d8:	011a499f 	.word	0x011a499f
 80105dc:	01312cff 	.word	0x01312cff
 80105e0:	014ca43f 	.word	0x014ca43f
 80105e4:	016e3600 	.word	0x016e3600
 80105e8:	01a6ab1f 	.word	0x01a6ab1f
 80105ec:	01e84800 	.word	0x01e84800

080105f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	689b      	ldr	r3, [r3, #8]
 80105fc:	f043 0201 	orr.w	r2, r3, #1
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010604:	2300      	movs	r3, #0
}
 8010606:	4618      	mov	r0, r3
 8010608:	370c      	adds	r7, #12
 801060a:	46bd      	mov	sp, r7
 801060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010610:	4770      	bx	lr

08010612 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010612:	b480      	push	{r7}
 8010614:	b083      	sub	sp, #12
 8010616:	af00      	add	r7, sp, #0
 8010618:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	689b      	ldr	r3, [r3, #8]
 801061e:	f023 0201 	bic.w	r2, r3, #1
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010626:	2300      	movs	r3, #0
}
 8010628:	4618      	mov	r0, r3
 801062a:	370c      	adds	r7, #12
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr

08010634 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b084      	sub	sp, #16
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	460b      	mov	r3, r1
 801063e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010640:	2300      	movs	r3, #0
 8010642:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010650:	78fb      	ldrb	r3, [r7, #3]
 8010652:	2b01      	cmp	r3, #1
 8010654:	d115      	bne.n	8010682 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	68db      	ldr	r3, [r3, #12]
 801065a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010662:	200a      	movs	r0, #10
 8010664:	f7f6 fe84 	bl	8007370 <HAL_Delay>
      ms += 10U;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	330a      	adds	r3, #10
 801066c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f001 f939 	bl	80118e6 <USB_GetMode>
 8010674:	4603      	mov	r3, r0
 8010676:	2b01      	cmp	r3, #1
 8010678:	d01e      	beq.n	80106b8 <USB_SetCurrentMode+0x84>
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2bc7      	cmp	r3, #199	; 0xc7
 801067e:	d9f0      	bls.n	8010662 <USB_SetCurrentMode+0x2e>
 8010680:	e01a      	b.n	80106b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010682:	78fb      	ldrb	r3, [r7, #3]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d115      	bne.n	80106b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	68db      	ldr	r3, [r3, #12]
 801068c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010694:	200a      	movs	r0, #10
 8010696:	f7f6 fe6b 	bl	8007370 <HAL_Delay>
      ms += 10U;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	330a      	adds	r3, #10
 801069e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f001 f920 	bl	80118e6 <USB_GetMode>
 80106a6:	4603      	mov	r3, r0
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d005      	beq.n	80106b8 <USB_SetCurrentMode+0x84>
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	2bc7      	cmp	r3, #199	; 0xc7
 80106b0:	d9f0      	bls.n	8010694 <USB_SetCurrentMode+0x60>
 80106b2:	e001      	b.n	80106b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80106b4:	2301      	movs	r3, #1
 80106b6:	e005      	b.n	80106c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	2bc8      	cmp	r3, #200	; 0xc8
 80106bc:	d101      	bne.n	80106c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80106be:	2301      	movs	r3, #1
 80106c0:	e000      	b.n	80106c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80106c2:	2300      	movs	r3, #0
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3710      	adds	r7, #16
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80106cc:	b084      	sub	sp, #16
 80106ce:	b580      	push	{r7, lr}
 80106d0:	b086      	sub	sp, #24
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	6078      	str	r0, [r7, #4]
 80106d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80106da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80106de:	2300      	movs	r3, #0
 80106e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80106e6:	2300      	movs	r3, #0
 80106e8:	613b      	str	r3, [r7, #16]
 80106ea:	e009      	b.n	8010700 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80106ec:	687a      	ldr	r2, [r7, #4]
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	3340      	adds	r3, #64	; 0x40
 80106f2:	009b      	lsls	r3, r3, #2
 80106f4:	4413      	add	r3, r2
 80106f6:	2200      	movs	r2, #0
 80106f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	3301      	adds	r3, #1
 80106fe:	613b      	str	r3, [r7, #16]
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	2b0e      	cmp	r3, #14
 8010704:	d9f2      	bls.n	80106ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010706:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801070a:	2b00      	cmp	r3, #0
 801070c:	d11c      	bne.n	8010748 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	68fa      	ldr	r2, [r7, #12]
 8010718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801071c:	f043 0302 	orr.w	r3, r3, #2
 8010720:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010726:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010732:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801073e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	639a      	str	r2, [r3, #56]	; 0x38
 8010746:	e00b      	b.n	8010760 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801074c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010758:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010766:	461a      	mov	r2, r3
 8010768:	2300      	movs	r3, #0
 801076a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801076c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010770:	2b01      	cmp	r3, #1
 8010772:	d10d      	bne.n	8010790 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010778:	2b00      	cmp	r3, #0
 801077a:	d104      	bne.n	8010786 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801077c:	2100      	movs	r1, #0
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f000 f968 	bl	8010a54 <USB_SetDevSpeed>
 8010784:	e008      	b.n	8010798 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010786:	2101      	movs	r1, #1
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f000 f963 	bl	8010a54 <USB_SetDevSpeed>
 801078e:	e003      	b.n	8010798 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010790:	2103      	movs	r1, #3
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f000 f95e 	bl	8010a54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010798:	2110      	movs	r1, #16
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f000 f8fa 	bl	8010994 <USB_FlushTxFifo>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d001      	beq.n	80107aa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80107a6:	2301      	movs	r3, #1
 80107a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f000 f924 	bl	80109f8 <USB_FlushRxFifo>
 80107b0:	4603      	mov	r3, r0
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d001      	beq.n	80107ba <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80107b6:	2301      	movs	r3, #1
 80107b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107c0:	461a      	mov	r2, r3
 80107c2:	2300      	movs	r3, #0
 80107c4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107cc:	461a      	mov	r2, r3
 80107ce:	2300      	movs	r3, #0
 80107d0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107d8:	461a      	mov	r2, r3
 80107da:	2300      	movs	r3, #0
 80107dc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80107de:	2300      	movs	r3, #0
 80107e0:	613b      	str	r3, [r7, #16]
 80107e2:	e043      	b.n	801086c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	015a      	lsls	r2, r3, #5
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	4413      	add	r3, r2
 80107ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80107f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80107fa:	d118      	bne.n	801082e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80107fc:	693b      	ldr	r3, [r7, #16]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d10a      	bne.n	8010818 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	015a      	lsls	r2, r3, #5
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	4413      	add	r3, r2
 801080a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801080e:	461a      	mov	r2, r3
 8010810:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010814:	6013      	str	r3, [r2, #0]
 8010816:	e013      	b.n	8010840 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010818:	693b      	ldr	r3, [r7, #16]
 801081a:	015a      	lsls	r2, r3, #5
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	4413      	add	r3, r2
 8010820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010824:	461a      	mov	r2, r3
 8010826:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801082a:	6013      	str	r3, [r2, #0]
 801082c:	e008      	b.n	8010840 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	015a      	lsls	r2, r3, #5
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	4413      	add	r3, r2
 8010836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801083a:	461a      	mov	r2, r3
 801083c:	2300      	movs	r3, #0
 801083e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	015a      	lsls	r2, r3, #5
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	4413      	add	r3, r2
 8010848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801084c:	461a      	mov	r2, r3
 801084e:	2300      	movs	r3, #0
 8010850:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	015a      	lsls	r2, r3, #5
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	4413      	add	r3, r2
 801085a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801085e:	461a      	mov	r2, r3
 8010860:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010864:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	3301      	adds	r3, #1
 801086a:	613b      	str	r3, [r7, #16]
 801086c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010870:	461a      	mov	r2, r3
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	4293      	cmp	r3, r2
 8010876:	d3b5      	bcc.n	80107e4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010878:	2300      	movs	r3, #0
 801087a:	613b      	str	r3, [r7, #16]
 801087c:	e043      	b.n	8010906 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	015a      	lsls	r2, r3, #5
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	4413      	add	r3, r2
 8010886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010894:	d118      	bne.n	80108c8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d10a      	bne.n	80108b2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	015a      	lsls	r2, r3, #5
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	4413      	add	r3, r2
 80108a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108a8:	461a      	mov	r2, r3
 80108aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80108ae:	6013      	str	r3, [r2, #0]
 80108b0:	e013      	b.n	80108da <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	015a      	lsls	r2, r3, #5
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	4413      	add	r3, r2
 80108ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108be:	461a      	mov	r2, r3
 80108c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80108c4:	6013      	str	r3, [r2, #0]
 80108c6:	e008      	b.n	80108da <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	015a      	lsls	r2, r3, #5
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	4413      	add	r3, r2
 80108d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108d4:	461a      	mov	r2, r3
 80108d6:	2300      	movs	r3, #0
 80108d8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80108da:	693b      	ldr	r3, [r7, #16]
 80108dc:	015a      	lsls	r2, r3, #5
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	4413      	add	r3, r2
 80108e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108e6:	461a      	mov	r2, r3
 80108e8:	2300      	movs	r3, #0
 80108ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	015a      	lsls	r2, r3, #5
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	4413      	add	r3, r2
 80108f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108f8:	461a      	mov	r2, r3
 80108fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80108fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	3301      	adds	r3, #1
 8010904:	613b      	str	r3, [r7, #16]
 8010906:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801090a:	461a      	mov	r2, r3
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	4293      	cmp	r3, r2
 8010910:	d3b5      	bcc.n	801087e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010918:	691b      	ldr	r3, [r3, #16]
 801091a:	68fa      	ldr	r2, [r7, #12]
 801091c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010924:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2200      	movs	r2, #0
 801092a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010932:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010934:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010938:	2b00      	cmp	r3, #0
 801093a:	d105      	bne.n	8010948 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	699b      	ldr	r3, [r3, #24]
 8010940:	f043 0210 	orr.w	r2, r3, #16
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	699a      	ldr	r2, [r3, #24]
 801094c:	4b10      	ldr	r3, [pc, #64]	; (8010990 <USB_DevInit+0x2c4>)
 801094e:	4313      	orrs	r3, r2
 8010950:	687a      	ldr	r2, [r7, #4]
 8010952:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010954:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8010958:	2b00      	cmp	r3, #0
 801095a:	d005      	beq.n	8010968 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	699b      	ldr	r3, [r3, #24]
 8010960:	f043 0208 	orr.w	r2, r3, #8
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010968:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801096c:	2b01      	cmp	r3, #1
 801096e:	d107      	bne.n	8010980 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	699b      	ldr	r3, [r3, #24]
 8010974:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010978:	f043 0304 	orr.w	r3, r3, #4
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010980:	7dfb      	ldrb	r3, [r7, #23]
}
 8010982:	4618      	mov	r0, r3
 8010984:	3718      	adds	r7, #24
 8010986:	46bd      	mov	sp, r7
 8010988:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801098c:	b004      	add	sp, #16
 801098e:	4770      	bx	lr
 8010990:	803c3800 	.word	0x803c3800

08010994 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010994:	b480      	push	{r7}
 8010996:	b085      	sub	sp, #20
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801099e:	2300      	movs	r3, #0
 80109a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	3301      	adds	r3, #1
 80109a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80109ae:	d901      	bls.n	80109b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80109b0:	2303      	movs	r3, #3
 80109b2:	e01b      	b.n	80109ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	691b      	ldr	r3, [r3, #16]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	daf2      	bge.n	80109a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80109bc:	2300      	movs	r3, #0
 80109be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	019b      	lsls	r3, r3, #6
 80109c4:	f043 0220 	orr.w	r2, r3, #32
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	3301      	adds	r3, #1
 80109d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80109d8:	d901      	bls.n	80109de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80109da:	2303      	movs	r3, #3
 80109dc:	e006      	b.n	80109ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	691b      	ldr	r3, [r3, #16]
 80109e2:	f003 0320 	and.w	r3, r3, #32
 80109e6:	2b20      	cmp	r3, #32
 80109e8:	d0f0      	beq.n	80109cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80109ea:	2300      	movs	r3, #0
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3714      	adds	r7, #20
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr

080109f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010a00:	2300      	movs	r3, #0
 8010a02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	3301      	adds	r3, #1
 8010a08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8010a10:	d901      	bls.n	8010a16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010a12:	2303      	movs	r3, #3
 8010a14:	e018      	b.n	8010a48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	691b      	ldr	r3, [r3, #16]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	daf2      	bge.n	8010a04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2210      	movs	r2, #16
 8010a26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	3301      	adds	r3, #1
 8010a2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8010a34:	d901      	bls.n	8010a3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010a36:	2303      	movs	r3, #3
 8010a38:	e006      	b.n	8010a48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	691b      	ldr	r3, [r3, #16]
 8010a3e:	f003 0310 	and.w	r3, r3, #16
 8010a42:	2b10      	cmp	r3, #16
 8010a44:	d0f0      	beq.n	8010a28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010a46:	2300      	movs	r3, #0
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3714      	adds	r7, #20
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr

08010a54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010a54:	b480      	push	{r7}
 8010a56:	b085      	sub	sp, #20
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a6a:	681a      	ldr	r2, [r3, #0]
 8010a6c:	78fb      	ldrb	r3, [r7, #3]
 8010a6e:	68f9      	ldr	r1, [r7, #12]
 8010a70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010a74:	4313      	orrs	r3, r2
 8010a76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010a78:	2300      	movs	r3, #0
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3714      	adds	r7, #20
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a84:	4770      	bx	lr

08010a86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8010a86:	b480      	push	{r7}
 8010a88:	b087      	sub	sp, #28
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a98:	689b      	ldr	r3, [r3, #8]
 8010a9a:	f003 0306 	and.w	r3, r3, #6
 8010a9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d102      	bne.n	8010aac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	75fb      	strb	r3, [r7, #23]
 8010aaa:	e00a      	b.n	8010ac2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	2b02      	cmp	r3, #2
 8010ab0:	d002      	beq.n	8010ab8 <USB_GetDevSpeed+0x32>
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	2b06      	cmp	r3, #6
 8010ab6:	d102      	bne.n	8010abe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010ab8:	2302      	movs	r3, #2
 8010aba:	75fb      	strb	r3, [r7, #23]
 8010abc:	e001      	b.n	8010ac2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010abe:	230f      	movs	r3, #15
 8010ac0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	371c      	adds	r7, #28
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ace:	4770      	bx	lr

08010ad0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b085      	sub	sp, #20
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	781b      	ldrb	r3, [r3, #0]
 8010ae2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	785b      	ldrb	r3, [r3, #1]
 8010ae8:	2b01      	cmp	r3, #1
 8010aea:	d13a      	bne.n	8010b62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010af2:	69da      	ldr	r2, [r3, #28]
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	781b      	ldrb	r3, [r3, #0]
 8010af8:	f003 030f 	and.w	r3, r3, #15
 8010afc:	2101      	movs	r1, #1
 8010afe:	fa01 f303 	lsl.w	r3, r1, r3
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	68f9      	ldr	r1, [r7, #12]
 8010b06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010b0a:	4313      	orrs	r3, r2
 8010b0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	015a      	lsls	r2, r3, #5
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	4413      	add	r3, r2
 8010b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d155      	bne.n	8010bd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	015a      	lsls	r2, r3, #5
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	4413      	add	r3, r2
 8010b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b30:	681a      	ldr	r2, [r3, #0]
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	689b      	ldr	r3, [r3, #8]
 8010b36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	791b      	ldrb	r3, [r3, #4]
 8010b3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010b40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	059b      	lsls	r3, r3, #22
 8010b46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010b48:	4313      	orrs	r3, r2
 8010b4a:	68ba      	ldr	r2, [r7, #8]
 8010b4c:	0151      	lsls	r1, r2, #5
 8010b4e:	68fa      	ldr	r2, [r7, #12]
 8010b50:	440a      	add	r2, r1
 8010b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b5e:	6013      	str	r3, [r2, #0]
 8010b60:	e036      	b.n	8010bd0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b68:	69da      	ldr	r2, [r3, #28]
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	781b      	ldrb	r3, [r3, #0]
 8010b6e:	f003 030f 	and.w	r3, r3, #15
 8010b72:	2101      	movs	r1, #1
 8010b74:	fa01 f303 	lsl.w	r3, r1, r3
 8010b78:	041b      	lsls	r3, r3, #16
 8010b7a:	68f9      	ldr	r1, [r7, #12]
 8010b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010b80:	4313      	orrs	r3, r2
 8010b82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	015a      	lsls	r2, r3, #5
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	4413      	add	r3, r2
 8010b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d11a      	bne.n	8010bd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	015a      	lsls	r2, r3, #5
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	4413      	add	r3, r2
 8010ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	689b      	ldr	r3, [r3, #8]
 8010bac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	791b      	ldrb	r3, [r3, #4]
 8010bb4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010bb6:	430b      	orrs	r3, r1
 8010bb8:	4313      	orrs	r3, r2
 8010bba:	68ba      	ldr	r2, [r7, #8]
 8010bbc:	0151      	lsls	r1, r2, #5
 8010bbe:	68fa      	ldr	r2, [r7, #12]
 8010bc0:	440a      	add	r2, r1
 8010bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010bce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010bd0:	2300      	movs	r3, #0
}
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	3714      	adds	r7, #20
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bdc:	4770      	bx	lr
	...

08010be0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010be0:	b480      	push	{r7}
 8010be2:	b085      	sub	sp, #20
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	785b      	ldrb	r3, [r3, #1]
 8010bf8:	2b01      	cmp	r3, #1
 8010bfa:	d161      	bne.n	8010cc0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	015a      	lsls	r2, r3, #5
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	4413      	add	r3, r2
 8010c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010c12:	d11f      	bne.n	8010c54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	015a      	lsls	r2, r3, #5
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	4413      	add	r3, r2
 8010c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	68ba      	ldr	r2, [r7, #8]
 8010c24:	0151      	lsls	r1, r2, #5
 8010c26:	68fa      	ldr	r2, [r7, #12]
 8010c28:	440a      	add	r2, r1
 8010c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010c32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	015a      	lsls	r2, r3, #5
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	4413      	add	r3, r2
 8010c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	68ba      	ldr	r2, [r7, #8]
 8010c44:	0151      	lsls	r1, r2, #5
 8010c46:	68fa      	ldr	r2, [r7, #12]
 8010c48:	440a      	add	r2, r1
 8010c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010c52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	781b      	ldrb	r3, [r3, #0]
 8010c60:	f003 030f 	and.w	r3, r3, #15
 8010c64:	2101      	movs	r1, #1
 8010c66:	fa01 f303 	lsl.w	r3, r1, r3
 8010c6a:	b29b      	uxth	r3, r3
 8010c6c:	43db      	mvns	r3, r3
 8010c6e:	68f9      	ldr	r1, [r7, #12]
 8010c70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010c74:	4013      	ands	r3, r2
 8010c76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c7e:	69da      	ldr	r2, [r3, #28]
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	f003 030f 	and.w	r3, r3, #15
 8010c88:	2101      	movs	r1, #1
 8010c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	43db      	mvns	r3, r3
 8010c92:	68f9      	ldr	r1, [r7, #12]
 8010c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010c98:	4013      	ands	r3, r2
 8010c9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	015a      	lsls	r2, r3, #5
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	4413      	add	r3, r2
 8010ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ca8:	681a      	ldr	r2, [r3, #0]
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	0159      	lsls	r1, r3, #5
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	440b      	add	r3, r1
 8010cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cb6:	4619      	mov	r1, r3
 8010cb8:	4b35      	ldr	r3, [pc, #212]	; (8010d90 <USB_DeactivateEndpoint+0x1b0>)
 8010cba:	4013      	ands	r3, r2
 8010cbc:	600b      	str	r3, [r1, #0]
 8010cbe:	e060      	b.n	8010d82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	015a      	lsls	r2, r3, #5
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	4413      	add	r3, r2
 8010cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010cd6:	d11f      	bne.n	8010d18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	015a      	lsls	r2, r3, #5
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	4413      	add	r3, r2
 8010ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	68ba      	ldr	r2, [r7, #8]
 8010ce8:	0151      	lsls	r1, r2, #5
 8010cea:	68fa      	ldr	r2, [r7, #12]
 8010cec:	440a      	add	r2, r1
 8010cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010cf2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010cf6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	015a      	lsls	r2, r3, #5
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	4413      	add	r3, r2
 8010d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	68ba      	ldr	r2, [r7, #8]
 8010d08:	0151      	lsls	r1, r2, #5
 8010d0a:	68fa      	ldr	r2, [r7, #12]
 8010d0c:	440a      	add	r2, r1
 8010d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010d16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	f003 030f 	and.w	r3, r3, #15
 8010d28:	2101      	movs	r1, #1
 8010d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8010d2e:	041b      	lsls	r3, r3, #16
 8010d30:	43db      	mvns	r3, r3
 8010d32:	68f9      	ldr	r1, [r7, #12]
 8010d34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010d38:	4013      	ands	r3, r2
 8010d3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d42:	69da      	ldr	r2, [r3, #28]
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	f003 030f 	and.w	r3, r3, #15
 8010d4c:	2101      	movs	r1, #1
 8010d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8010d52:	041b      	lsls	r3, r3, #16
 8010d54:	43db      	mvns	r3, r3
 8010d56:	68f9      	ldr	r1, [r7, #12]
 8010d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010d5c:	4013      	ands	r3, r2
 8010d5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	015a      	lsls	r2, r3, #5
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	4413      	add	r3, r2
 8010d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d6c:	681a      	ldr	r2, [r3, #0]
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	0159      	lsls	r1, r3, #5
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	440b      	add	r3, r1
 8010d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d7a:	4619      	mov	r1, r3
 8010d7c:	4b05      	ldr	r3, [pc, #20]	; (8010d94 <USB_DeactivateEndpoint+0x1b4>)
 8010d7e:	4013      	ands	r3, r2
 8010d80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010d82:	2300      	movs	r3, #0
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3714      	adds	r7, #20
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8e:	4770      	bx	lr
 8010d90:	ec337800 	.word	0xec337800
 8010d94:	eff37800 	.word	0xeff37800

08010d98 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b08a      	sub	sp, #40	; 0x28
 8010d9c:	af02      	add	r7, sp, #8
 8010d9e:	60f8      	str	r0, [r7, #12]
 8010da0:	60b9      	str	r1, [r7, #8]
 8010da2:	4613      	mov	r3, r2
 8010da4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	781b      	ldrb	r3, [r3, #0]
 8010dae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	785b      	ldrb	r3, [r3, #1]
 8010db4:	2b01      	cmp	r3, #1
 8010db6:	f040 817a 	bne.w	80110ae <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	691b      	ldr	r3, [r3, #16]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d132      	bne.n	8010e28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010dc2:	69bb      	ldr	r3, [r7, #24]
 8010dc4:	015a      	lsls	r2, r3, #5
 8010dc6:	69fb      	ldr	r3, [r7, #28]
 8010dc8:	4413      	add	r3, r2
 8010dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010dce:	691b      	ldr	r3, [r3, #16]
 8010dd0:	69ba      	ldr	r2, [r7, #24]
 8010dd2:	0151      	lsls	r1, r2, #5
 8010dd4:	69fa      	ldr	r2, [r7, #28]
 8010dd6:	440a      	add	r2, r1
 8010dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ddc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010de0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010de4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010de6:	69bb      	ldr	r3, [r7, #24]
 8010de8:	015a      	lsls	r2, r3, #5
 8010dea:	69fb      	ldr	r3, [r7, #28]
 8010dec:	4413      	add	r3, r2
 8010dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010df2:	691b      	ldr	r3, [r3, #16]
 8010df4:	69ba      	ldr	r2, [r7, #24]
 8010df6:	0151      	lsls	r1, r2, #5
 8010df8:	69fa      	ldr	r2, [r7, #28]
 8010dfa:	440a      	add	r2, r1
 8010dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010e04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010e06:	69bb      	ldr	r3, [r7, #24]
 8010e08:	015a      	lsls	r2, r3, #5
 8010e0a:	69fb      	ldr	r3, [r7, #28]
 8010e0c:	4413      	add	r3, r2
 8010e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e12:	691b      	ldr	r3, [r3, #16]
 8010e14:	69ba      	ldr	r2, [r7, #24]
 8010e16:	0151      	lsls	r1, r2, #5
 8010e18:	69fa      	ldr	r2, [r7, #28]
 8010e1a:	440a      	add	r2, r1
 8010e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e20:	0cdb      	lsrs	r3, r3, #19
 8010e22:	04db      	lsls	r3, r3, #19
 8010e24:	6113      	str	r3, [r2, #16]
 8010e26:	e092      	b.n	8010f4e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010e28:	69bb      	ldr	r3, [r7, #24]
 8010e2a:	015a      	lsls	r2, r3, #5
 8010e2c:	69fb      	ldr	r3, [r7, #28]
 8010e2e:	4413      	add	r3, r2
 8010e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e34:	691b      	ldr	r3, [r3, #16]
 8010e36:	69ba      	ldr	r2, [r7, #24]
 8010e38:	0151      	lsls	r1, r2, #5
 8010e3a:	69fa      	ldr	r2, [r7, #28]
 8010e3c:	440a      	add	r2, r1
 8010e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e42:	0cdb      	lsrs	r3, r3, #19
 8010e44:	04db      	lsls	r3, r3, #19
 8010e46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010e48:	69bb      	ldr	r3, [r7, #24]
 8010e4a:	015a      	lsls	r2, r3, #5
 8010e4c:	69fb      	ldr	r3, [r7, #28]
 8010e4e:	4413      	add	r3, r2
 8010e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e54:	691b      	ldr	r3, [r3, #16]
 8010e56:	69ba      	ldr	r2, [r7, #24]
 8010e58:	0151      	lsls	r1, r2, #5
 8010e5a:	69fa      	ldr	r2, [r7, #28]
 8010e5c:	440a      	add	r2, r1
 8010e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010e66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010e6a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8010e6c:	69bb      	ldr	r3, [r7, #24]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d11a      	bne.n	8010ea8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	691a      	ldr	r2, [r3, #16]
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	689b      	ldr	r3, [r3, #8]
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d903      	bls.n	8010e86 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	689a      	ldr	r2, [r3, #8]
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010e86:	69bb      	ldr	r3, [r7, #24]
 8010e88:	015a      	lsls	r2, r3, #5
 8010e8a:	69fb      	ldr	r3, [r7, #28]
 8010e8c:	4413      	add	r3, r2
 8010e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e92:	691b      	ldr	r3, [r3, #16]
 8010e94:	69ba      	ldr	r2, [r7, #24]
 8010e96:	0151      	lsls	r1, r2, #5
 8010e98:	69fa      	ldr	r2, [r7, #28]
 8010e9a:	440a      	add	r2, r1
 8010e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ea0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010ea4:	6113      	str	r3, [r2, #16]
 8010ea6:	e01b      	b.n	8010ee0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010ea8:	69bb      	ldr	r3, [r7, #24]
 8010eaa:	015a      	lsls	r2, r3, #5
 8010eac:	69fb      	ldr	r3, [r7, #28]
 8010eae:	4413      	add	r3, r2
 8010eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010eb4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	6919      	ldr	r1, [r3, #16]
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	689b      	ldr	r3, [r3, #8]
 8010ebe:	440b      	add	r3, r1
 8010ec0:	1e59      	subs	r1, r3, #1
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	689b      	ldr	r3, [r3, #8]
 8010ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8010eca:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010ecc:	4ba2      	ldr	r3, [pc, #648]	; (8011158 <USB_EPStartXfer+0x3c0>)
 8010ece:	400b      	ands	r3, r1
 8010ed0:	69b9      	ldr	r1, [r7, #24]
 8010ed2:	0148      	lsls	r0, r1, #5
 8010ed4:	69f9      	ldr	r1, [r7, #28]
 8010ed6:	4401      	add	r1, r0
 8010ed8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010edc:	4313      	orrs	r3, r2
 8010ede:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010ee0:	69bb      	ldr	r3, [r7, #24]
 8010ee2:	015a      	lsls	r2, r3, #5
 8010ee4:	69fb      	ldr	r3, [r7, #28]
 8010ee6:	4413      	add	r3, r2
 8010ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010eec:	691a      	ldr	r2, [r3, #16]
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	691b      	ldr	r3, [r3, #16]
 8010ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010ef6:	69b9      	ldr	r1, [r7, #24]
 8010ef8:	0148      	lsls	r0, r1, #5
 8010efa:	69f9      	ldr	r1, [r7, #28]
 8010efc:	4401      	add	r1, r0
 8010efe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010f02:	4313      	orrs	r3, r2
 8010f04:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	791b      	ldrb	r3, [r3, #4]
 8010f0a:	2b01      	cmp	r3, #1
 8010f0c:	d11f      	bne.n	8010f4e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010f0e:	69bb      	ldr	r3, [r7, #24]
 8010f10:	015a      	lsls	r2, r3, #5
 8010f12:	69fb      	ldr	r3, [r7, #28]
 8010f14:	4413      	add	r3, r2
 8010f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f1a:	691b      	ldr	r3, [r3, #16]
 8010f1c:	69ba      	ldr	r2, [r7, #24]
 8010f1e:	0151      	lsls	r1, r2, #5
 8010f20:	69fa      	ldr	r2, [r7, #28]
 8010f22:	440a      	add	r2, r1
 8010f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f28:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010f2c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010f2e:	69bb      	ldr	r3, [r7, #24]
 8010f30:	015a      	lsls	r2, r3, #5
 8010f32:	69fb      	ldr	r3, [r7, #28]
 8010f34:	4413      	add	r3, r2
 8010f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f3a:	691b      	ldr	r3, [r3, #16]
 8010f3c:	69ba      	ldr	r2, [r7, #24]
 8010f3e:	0151      	lsls	r1, r2, #5
 8010f40:	69fa      	ldr	r2, [r7, #28]
 8010f42:	440a      	add	r2, r1
 8010f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010f4c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010f4e:	79fb      	ldrb	r3, [r7, #7]
 8010f50:	2b01      	cmp	r3, #1
 8010f52:	d14b      	bne.n	8010fec <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	69db      	ldr	r3, [r3, #28]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d009      	beq.n	8010f70 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010f5c:	69bb      	ldr	r3, [r7, #24]
 8010f5e:	015a      	lsls	r2, r3, #5
 8010f60:	69fb      	ldr	r3, [r7, #28]
 8010f62:	4413      	add	r3, r2
 8010f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f68:	461a      	mov	r2, r3
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	69db      	ldr	r3, [r3, #28]
 8010f6e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010f70:	68bb      	ldr	r3, [r7, #8]
 8010f72:	791b      	ldrb	r3, [r3, #4]
 8010f74:	2b01      	cmp	r3, #1
 8010f76:	d128      	bne.n	8010fca <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010f78:	69fb      	ldr	r3, [r7, #28]
 8010f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f7e:	689b      	ldr	r3, [r3, #8]
 8010f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d110      	bne.n	8010faa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010f88:	69bb      	ldr	r3, [r7, #24]
 8010f8a:	015a      	lsls	r2, r3, #5
 8010f8c:	69fb      	ldr	r3, [r7, #28]
 8010f8e:	4413      	add	r3, r2
 8010f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	69ba      	ldr	r2, [r7, #24]
 8010f98:	0151      	lsls	r1, r2, #5
 8010f9a:	69fa      	ldr	r2, [r7, #28]
 8010f9c:	440a      	add	r2, r1
 8010f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010fa2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010fa6:	6013      	str	r3, [r2, #0]
 8010fa8:	e00f      	b.n	8010fca <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010faa:	69bb      	ldr	r3, [r7, #24]
 8010fac:	015a      	lsls	r2, r3, #5
 8010fae:	69fb      	ldr	r3, [r7, #28]
 8010fb0:	4413      	add	r3, r2
 8010fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	69ba      	ldr	r2, [r7, #24]
 8010fba:	0151      	lsls	r1, r2, #5
 8010fbc:	69fa      	ldr	r2, [r7, #28]
 8010fbe:	440a      	add	r2, r1
 8010fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010fc8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010fca:	69bb      	ldr	r3, [r7, #24]
 8010fcc:	015a      	lsls	r2, r3, #5
 8010fce:	69fb      	ldr	r3, [r7, #28]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	69ba      	ldr	r2, [r7, #24]
 8010fda:	0151      	lsls	r1, r2, #5
 8010fdc:	69fa      	ldr	r2, [r7, #28]
 8010fde:	440a      	add	r2, r1
 8010fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010fe4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010fe8:	6013      	str	r3, [r2, #0]
 8010fea:	e165      	b.n	80112b8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010fec:	69bb      	ldr	r3, [r7, #24]
 8010fee:	015a      	lsls	r2, r3, #5
 8010ff0:	69fb      	ldr	r3, [r7, #28]
 8010ff2:	4413      	add	r3, r2
 8010ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	69ba      	ldr	r2, [r7, #24]
 8010ffc:	0151      	lsls	r1, r2, #5
 8010ffe:	69fa      	ldr	r2, [r7, #28]
 8011000:	440a      	add	r2, r1
 8011002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011006:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801100a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	791b      	ldrb	r3, [r3, #4]
 8011010:	2b01      	cmp	r3, #1
 8011012:	d015      	beq.n	8011040 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	691b      	ldr	r3, [r3, #16]
 8011018:	2b00      	cmp	r3, #0
 801101a:	f000 814d 	beq.w	80112b8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801101e:	69fb      	ldr	r3, [r7, #28]
 8011020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	781b      	ldrb	r3, [r3, #0]
 801102a:	f003 030f 	and.w	r3, r3, #15
 801102e:	2101      	movs	r1, #1
 8011030:	fa01 f303 	lsl.w	r3, r1, r3
 8011034:	69f9      	ldr	r1, [r7, #28]
 8011036:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801103a:	4313      	orrs	r3, r2
 801103c:	634b      	str	r3, [r1, #52]	; 0x34
 801103e:	e13b      	b.n	80112b8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011040:	69fb      	ldr	r3, [r7, #28]
 8011042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011046:	689b      	ldr	r3, [r3, #8]
 8011048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801104c:	2b00      	cmp	r3, #0
 801104e:	d110      	bne.n	8011072 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011050:	69bb      	ldr	r3, [r7, #24]
 8011052:	015a      	lsls	r2, r3, #5
 8011054:	69fb      	ldr	r3, [r7, #28]
 8011056:	4413      	add	r3, r2
 8011058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	69ba      	ldr	r2, [r7, #24]
 8011060:	0151      	lsls	r1, r2, #5
 8011062:	69fa      	ldr	r2, [r7, #28]
 8011064:	440a      	add	r2, r1
 8011066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801106a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801106e:	6013      	str	r3, [r2, #0]
 8011070:	e00f      	b.n	8011092 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011072:	69bb      	ldr	r3, [r7, #24]
 8011074:	015a      	lsls	r2, r3, #5
 8011076:	69fb      	ldr	r3, [r7, #28]
 8011078:	4413      	add	r3, r2
 801107a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	69ba      	ldr	r2, [r7, #24]
 8011082:	0151      	lsls	r1, r2, #5
 8011084:	69fa      	ldr	r2, [r7, #28]
 8011086:	440a      	add	r2, r1
 8011088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011090:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	68d9      	ldr	r1, [r3, #12]
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	781a      	ldrb	r2, [r3, #0]
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	691b      	ldr	r3, [r3, #16]
 801109e:	b298      	uxth	r0, r3
 80110a0:	79fb      	ldrb	r3, [r7, #7]
 80110a2:	9300      	str	r3, [sp, #0]
 80110a4:	4603      	mov	r3, r0
 80110a6:	68f8      	ldr	r0, [r7, #12]
 80110a8:	f000 f9b8 	bl	801141c <USB_WritePacket>
 80110ac:	e104      	b.n	80112b8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80110ae:	69bb      	ldr	r3, [r7, #24]
 80110b0:	015a      	lsls	r2, r3, #5
 80110b2:	69fb      	ldr	r3, [r7, #28]
 80110b4:	4413      	add	r3, r2
 80110b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110ba:	691b      	ldr	r3, [r3, #16]
 80110bc:	69ba      	ldr	r2, [r7, #24]
 80110be:	0151      	lsls	r1, r2, #5
 80110c0:	69fa      	ldr	r2, [r7, #28]
 80110c2:	440a      	add	r2, r1
 80110c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80110c8:	0cdb      	lsrs	r3, r3, #19
 80110ca:	04db      	lsls	r3, r3, #19
 80110cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80110ce:	69bb      	ldr	r3, [r7, #24]
 80110d0:	015a      	lsls	r2, r3, #5
 80110d2:	69fb      	ldr	r3, [r7, #28]
 80110d4:	4413      	add	r3, r2
 80110d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110da:	691b      	ldr	r3, [r3, #16]
 80110dc:	69ba      	ldr	r2, [r7, #24]
 80110de:	0151      	lsls	r1, r2, #5
 80110e0:	69fa      	ldr	r2, [r7, #28]
 80110e2:	440a      	add	r2, r1
 80110e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80110e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80110ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80110f0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80110f2:	69bb      	ldr	r3, [r7, #24]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d131      	bne.n	801115c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	691b      	ldr	r3, [r3, #16]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d003      	beq.n	8011108 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	689a      	ldr	r2, [r3, #8]
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	689a      	ldr	r2, [r3, #8]
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	015a      	lsls	r2, r3, #5
 8011114:	69fb      	ldr	r3, [r7, #28]
 8011116:	4413      	add	r3, r2
 8011118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801111c:	691a      	ldr	r2, [r3, #16]
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	6a1b      	ldr	r3, [r3, #32]
 8011122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011126:	69b9      	ldr	r1, [r7, #24]
 8011128:	0148      	lsls	r0, r1, #5
 801112a:	69f9      	ldr	r1, [r7, #28]
 801112c:	4401      	add	r1, r0
 801112e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011132:	4313      	orrs	r3, r2
 8011134:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011136:	69bb      	ldr	r3, [r7, #24]
 8011138:	015a      	lsls	r2, r3, #5
 801113a:	69fb      	ldr	r3, [r7, #28]
 801113c:	4413      	add	r3, r2
 801113e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011142:	691b      	ldr	r3, [r3, #16]
 8011144:	69ba      	ldr	r2, [r7, #24]
 8011146:	0151      	lsls	r1, r2, #5
 8011148:	69fa      	ldr	r2, [r7, #28]
 801114a:	440a      	add	r2, r1
 801114c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011150:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011154:	6113      	str	r3, [r2, #16]
 8011156:	e061      	b.n	801121c <USB_EPStartXfer+0x484>
 8011158:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	691b      	ldr	r3, [r3, #16]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d123      	bne.n	80111ac <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011164:	69bb      	ldr	r3, [r7, #24]
 8011166:	015a      	lsls	r2, r3, #5
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	4413      	add	r3, r2
 801116c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011170:	691a      	ldr	r2, [r3, #16]
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	689b      	ldr	r3, [r3, #8]
 8011176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801117a:	69b9      	ldr	r1, [r7, #24]
 801117c:	0148      	lsls	r0, r1, #5
 801117e:	69f9      	ldr	r1, [r7, #28]
 8011180:	4401      	add	r1, r0
 8011182:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011186:	4313      	orrs	r3, r2
 8011188:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801118a:	69bb      	ldr	r3, [r7, #24]
 801118c:	015a      	lsls	r2, r3, #5
 801118e:	69fb      	ldr	r3, [r7, #28]
 8011190:	4413      	add	r3, r2
 8011192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011196:	691b      	ldr	r3, [r3, #16]
 8011198:	69ba      	ldr	r2, [r7, #24]
 801119a:	0151      	lsls	r1, r2, #5
 801119c:	69fa      	ldr	r2, [r7, #28]
 801119e:	440a      	add	r2, r1
 80111a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80111a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80111a8:	6113      	str	r3, [r2, #16]
 80111aa:	e037      	b.n	801121c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	691a      	ldr	r2, [r3, #16]
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	689b      	ldr	r3, [r3, #8]
 80111b4:	4413      	add	r3, r2
 80111b6:	1e5a      	subs	r2, r3, #1
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	689b      	ldr	r3, [r3, #8]
 80111bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80111c0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	689b      	ldr	r3, [r3, #8]
 80111c6:	8afa      	ldrh	r2, [r7, #22]
 80111c8:	fb03 f202 	mul.w	r2, r3, r2
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80111d0:	69bb      	ldr	r3, [r7, #24]
 80111d2:	015a      	lsls	r2, r3, #5
 80111d4:	69fb      	ldr	r3, [r7, #28]
 80111d6:	4413      	add	r3, r2
 80111d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111dc:	691a      	ldr	r2, [r3, #16]
 80111de:	8afb      	ldrh	r3, [r7, #22]
 80111e0:	04d9      	lsls	r1, r3, #19
 80111e2:	4b38      	ldr	r3, [pc, #224]	; (80112c4 <USB_EPStartXfer+0x52c>)
 80111e4:	400b      	ands	r3, r1
 80111e6:	69b9      	ldr	r1, [r7, #24]
 80111e8:	0148      	lsls	r0, r1, #5
 80111ea:	69f9      	ldr	r1, [r7, #28]
 80111ec:	4401      	add	r1, r0
 80111ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80111f2:	4313      	orrs	r3, r2
 80111f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80111f6:	69bb      	ldr	r3, [r7, #24]
 80111f8:	015a      	lsls	r2, r3, #5
 80111fa:	69fb      	ldr	r3, [r7, #28]
 80111fc:	4413      	add	r3, r2
 80111fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011202:	691a      	ldr	r2, [r3, #16]
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	6a1b      	ldr	r3, [r3, #32]
 8011208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801120c:	69b9      	ldr	r1, [r7, #24]
 801120e:	0148      	lsls	r0, r1, #5
 8011210:	69f9      	ldr	r1, [r7, #28]
 8011212:	4401      	add	r1, r0
 8011214:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011218:	4313      	orrs	r3, r2
 801121a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801121c:	79fb      	ldrb	r3, [r7, #7]
 801121e:	2b01      	cmp	r3, #1
 8011220:	d10d      	bne.n	801123e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	68db      	ldr	r3, [r3, #12]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d009      	beq.n	801123e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	68d9      	ldr	r1, [r3, #12]
 801122e:	69bb      	ldr	r3, [r7, #24]
 8011230:	015a      	lsls	r2, r3, #5
 8011232:	69fb      	ldr	r3, [r7, #28]
 8011234:	4413      	add	r3, r2
 8011236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801123a:	460a      	mov	r2, r1
 801123c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	791b      	ldrb	r3, [r3, #4]
 8011242:	2b01      	cmp	r3, #1
 8011244:	d128      	bne.n	8011298 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011246:	69fb      	ldr	r3, [r7, #28]
 8011248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801124c:	689b      	ldr	r3, [r3, #8]
 801124e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011252:	2b00      	cmp	r3, #0
 8011254:	d110      	bne.n	8011278 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	015a      	lsls	r2, r3, #5
 801125a:	69fb      	ldr	r3, [r7, #28]
 801125c:	4413      	add	r3, r2
 801125e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	69ba      	ldr	r2, [r7, #24]
 8011266:	0151      	lsls	r1, r2, #5
 8011268:	69fa      	ldr	r2, [r7, #28]
 801126a:	440a      	add	r2, r1
 801126c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011270:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011274:	6013      	str	r3, [r2, #0]
 8011276:	e00f      	b.n	8011298 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011278:	69bb      	ldr	r3, [r7, #24]
 801127a:	015a      	lsls	r2, r3, #5
 801127c:	69fb      	ldr	r3, [r7, #28]
 801127e:	4413      	add	r3, r2
 8011280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	69ba      	ldr	r2, [r7, #24]
 8011288:	0151      	lsls	r1, r2, #5
 801128a:	69fa      	ldr	r2, [r7, #28]
 801128c:	440a      	add	r2, r1
 801128e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011296:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011298:	69bb      	ldr	r3, [r7, #24]
 801129a:	015a      	lsls	r2, r3, #5
 801129c:	69fb      	ldr	r3, [r7, #28]
 801129e:	4413      	add	r3, r2
 80112a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	69ba      	ldr	r2, [r7, #24]
 80112a8:	0151      	lsls	r1, r2, #5
 80112aa:	69fa      	ldr	r2, [r7, #28]
 80112ac:	440a      	add	r2, r1
 80112ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80112b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80112b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80112b8:	2300      	movs	r3, #0
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3720      	adds	r7, #32
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	bf00      	nop
 80112c4:	1ff80000 	.word	0x1ff80000

080112c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b087      	sub	sp, #28
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
 80112d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80112d2:	2300      	movs	r3, #0
 80112d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80112d6:	2300      	movs	r3, #0
 80112d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	785b      	ldrb	r3, [r3, #1]
 80112e2:	2b01      	cmp	r3, #1
 80112e4:	d14a      	bne.n	801137c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	015a      	lsls	r2, r3, #5
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	4413      	add	r3, r2
 80112f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80112fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80112fe:	f040 8086 	bne.w	801140e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	781b      	ldrb	r3, [r3, #0]
 8011306:	015a      	lsls	r2, r3, #5
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	4413      	add	r3, r2
 801130c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	683a      	ldr	r2, [r7, #0]
 8011314:	7812      	ldrb	r2, [r2, #0]
 8011316:	0151      	lsls	r1, r2, #5
 8011318:	693a      	ldr	r2, [r7, #16]
 801131a:	440a      	add	r2, r1
 801131c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011320:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011324:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	781b      	ldrb	r3, [r3, #0]
 801132a:	015a      	lsls	r2, r3, #5
 801132c:	693b      	ldr	r3, [r7, #16]
 801132e:	4413      	add	r3, r2
 8011330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	683a      	ldr	r2, [r7, #0]
 8011338:	7812      	ldrb	r2, [r2, #0]
 801133a:	0151      	lsls	r1, r2, #5
 801133c:	693a      	ldr	r2, [r7, #16]
 801133e:	440a      	add	r2, r1
 8011340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011344:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011348:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	3301      	adds	r3, #1
 801134e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f242 7210 	movw	r2, #10000	; 0x2710
 8011356:	4293      	cmp	r3, r2
 8011358:	d902      	bls.n	8011360 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801135a:	2301      	movs	r3, #1
 801135c:	75fb      	strb	r3, [r7, #23]
          break;
 801135e:	e056      	b.n	801140e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	015a      	lsls	r2, r3, #5
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	4413      	add	r3, r2
 801136a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011378:	d0e7      	beq.n	801134a <USB_EPStopXfer+0x82>
 801137a:	e048      	b.n	801140e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	781b      	ldrb	r3, [r3, #0]
 8011380:	015a      	lsls	r2, r3, #5
 8011382:	693b      	ldr	r3, [r7, #16]
 8011384:	4413      	add	r3, r2
 8011386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011394:	d13b      	bne.n	801140e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	781b      	ldrb	r3, [r3, #0]
 801139a:	015a      	lsls	r2, r3, #5
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	4413      	add	r3, r2
 80113a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	683a      	ldr	r2, [r7, #0]
 80113a8:	7812      	ldrb	r2, [r2, #0]
 80113aa:	0151      	lsls	r1, r2, #5
 80113ac:	693a      	ldr	r2, [r7, #16]
 80113ae:	440a      	add	r2, r1
 80113b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80113b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	781b      	ldrb	r3, [r3, #0]
 80113be:	015a      	lsls	r2, r3, #5
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	4413      	add	r3, r2
 80113c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	683a      	ldr	r2, [r7, #0]
 80113cc:	7812      	ldrb	r2, [r2, #0]
 80113ce:	0151      	lsls	r1, r2, #5
 80113d0:	693a      	ldr	r2, [r7, #16]
 80113d2:	440a      	add	r2, r1
 80113d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80113dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	3301      	adds	r3, #1
 80113e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80113ea:	4293      	cmp	r3, r2
 80113ec:	d902      	bls.n	80113f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80113ee:	2301      	movs	r3, #1
 80113f0:	75fb      	strb	r3, [r7, #23]
          break;
 80113f2:	e00c      	b.n	801140e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	015a      	lsls	r2, r3, #5
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	4413      	add	r3, r2
 80113fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801140c:	d0e7      	beq.n	80113de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801140e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011410:	4618      	mov	r0, r3
 8011412:	371c      	adds	r7, #28
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr

0801141c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801141c:	b480      	push	{r7}
 801141e:	b089      	sub	sp, #36	; 0x24
 8011420:	af00      	add	r7, sp, #0
 8011422:	60f8      	str	r0, [r7, #12]
 8011424:	60b9      	str	r1, [r7, #8]
 8011426:	4611      	mov	r1, r2
 8011428:	461a      	mov	r2, r3
 801142a:	460b      	mov	r3, r1
 801142c:	71fb      	strb	r3, [r7, #7]
 801142e:	4613      	mov	r3, r2
 8011430:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801143a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801143e:	2b00      	cmp	r3, #0
 8011440:	d123      	bne.n	801148a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011442:	88bb      	ldrh	r3, [r7, #4]
 8011444:	3303      	adds	r3, #3
 8011446:	089b      	lsrs	r3, r3, #2
 8011448:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801144a:	2300      	movs	r3, #0
 801144c:	61bb      	str	r3, [r7, #24]
 801144e:	e018      	b.n	8011482 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011450:	79fb      	ldrb	r3, [r7, #7]
 8011452:	031a      	lsls	r2, r3, #12
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	4413      	add	r3, r2
 8011458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801145c:	461a      	mov	r2, r3
 801145e:	69fb      	ldr	r3, [r7, #28]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011464:	69fb      	ldr	r3, [r7, #28]
 8011466:	3301      	adds	r3, #1
 8011468:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	3301      	adds	r3, #1
 801146e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011470:	69fb      	ldr	r3, [r7, #28]
 8011472:	3301      	adds	r3, #1
 8011474:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011476:	69fb      	ldr	r3, [r7, #28]
 8011478:	3301      	adds	r3, #1
 801147a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801147c:	69bb      	ldr	r3, [r7, #24]
 801147e:	3301      	adds	r3, #1
 8011480:	61bb      	str	r3, [r7, #24]
 8011482:	69ba      	ldr	r2, [r7, #24]
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	429a      	cmp	r2, r3
 8011488:	d3e2      	bcc.n	8011450 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801148a:	2300      	movs	r3, #0
}
 801148c:	4618      	mov	r0, r3
 801148e:	3724      	adds	r7, #36	; 0x24
 8011490:	46bd      	mov	sp, r7
 8011492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011496:	4770      	bx	lr

08011498 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011498:	b480      	push	{r7}
 801149a:	b08b      	sub	sp, #44	; 0x2c
 801149c:	af00      	add	r7, sp, #0
 801149e:	60f8      	str	r0, [r7, #12]
 80114a0:	60b9      	str	r1, [r7, #8]
 80114a2:	4613      	mov	r3, r2
 80114a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80114ae:	88fb      	ldrh	r3, [r7, #6]
 80114b0:	089b      	lsrs	r3, r3, #2
 80114b2:	b29b      	uxth	r3, r3
 80114b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80114b6:	88fb      	ldrh	r3, [r7, #6]
 80114b8:	f003 0303 	and.w	r3, r3, #3
 80114bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80114be:	2300      	movs	r3, #0
 80114c0:	623b      	str	r3, [r7, #32]
 80114c2:	e014      	b.n	80114ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80114c4:	69bb      	ldr	r3, [r7, #24]
 80114c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80114ca:	681a      	ldr	r2, [r3, #0]
 80114cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80114d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d2:	3301      	adds	r3, #1
 80114d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80114d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d8:	3301      	adds	r3, #1
 80114da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80114dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114de:	3301      	adds	r3, #1
 80114e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80114e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e4:	3301      	adds	r3, #1
 80114e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80114e8:	6a3b      	ldr	r3, [r7, #32]
 80114ea:	3301      	adds	r3, #1
 80114ec:	623b      	str	r3, [r7, #32]
 80114ee:	6a3a      	ldr	r2, [r7, #32]
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d3e6      	bcc.n	80114c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80114f6:	8bfb      	ldrh	r3, [r7, #30]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d01e      	beq.n	801153a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80114fc:	2300      	movs	r3, #0
 80114fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011500:	69bb      	ldr	r3, [r7, #24]
 8011502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011506:	461a      	mov	r2, r3
 8011508:	f107 0310 	add.w	r3, r7, #16
 801150c:	6812      	ldr	r2, [r2, #0]
 801150e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011510:	693a      	ldr	r2, [r7, #16]
 8011512:	6a3b      	ldr	r3, [r7, #32]
 8011514:	b2db      	uxtb	r3, r3
 8011516:	00db      	lsls	r3, r3, #3
 8011518:	fa22 f303 	lsr.w	r3, r2, r3
 801151c:	b2da      	uxtb	r2, r3
 801151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011520:	701a      	strb	r2, [r3, #0]
      i++;
 8011522:	6a3b      	ldr	r3, [r7, #32]
 8011524:	3301      	adds	r3, #1
 8011526:	623b      	str	r3, [r7, #32]
      pDest++;
 8011528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801152a:	3301      	adds	r3, #1
 801152c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801152e:	8bfb      	ldrh	r3, [r7, #30]
 8011530:	3b01      	subs	r3, #1
 8011532:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011534:	8bfb      	ldrh	r3, [r7, #30]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d1ea      	bne.n	8011510 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801153c:	4618      	mov	r0, r3
 801153e:	372c      	adds	r7, #44	; 0x2c
 8011540:	46bd      	mov	sp, r7
 8011542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011546:	4770      	bx	lr

08011548 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011548:	b480      	push	{r7}
 801154a:	b085      	sub	sp, #20
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
 8011550:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	781b      	ldrb	r3, [r3, #0]
 801155a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	785b      	ldrb	r3, [r3, #1]
 8011560:	2b01      	cmp	r3, #1
 8011562:	d12c      	bne.n	80115be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	015a      	lsls	r2, r3, #5
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	4413      	add	r3, r2
 801156c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	2b00      	cmp	r3, #0
 8011574:	db12      	blt.n	801159c <USB_EPSetStall+0x54>
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d00f      	beq.n	801159c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801157c:	68bb      	ldr	r3, [r7, #8]
 801157e:	015a      	lsls	r2, r3, #5
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	4413      	add	r3, r2
 8011584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	68ba      	ldr	r2, [r7, #8]
 801158c:	0151      	lsls	r1, r2, #5
 801158e:	68fa      	ldr	r2, [r7, #12]
 8011590:	440a      	add	r2, r1
 8011592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011596:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801159a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	015a      	lsls	r2, r3, #5
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	4413      	add	r3, r2
 80115a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	68ba      	ldr	r2, [r7, #8]
 80115ac:	0151      	lsls	r1, r2, #5
 80115ae:	68fa      	ldr	r2, [r7, #12]
 80115b0:	440a      	add	r2, r1
 80115b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80115b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80115ba:	6013      	str	r3, [r2, #0]
 80115bc:	e02b      	b.n	8011616 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	015a      	lsls	r2, r3, #5
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	4413      	add	r3, r2
 80115c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	db12      	blt.n	80115f6 <USB_EPSetStall+0xae>
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d00f      	beq.n	80115f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	015a      	lsls	r2, r3, #5
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	4413      	add	r3, r2
 80115de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	68ba      	ldr	r2, [r7, #8]
 80115e6:	0151      	lsls	r1, r2, #5
 80115e8:	68fa      	ldr	r2, [r7, #12]
 80115ea:	440a      	add	r2, r1
 80115ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80115f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80115f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	015a      	lsls	r2, r3, #5
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	4413      	add	r3, r2
 80115fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	68ba      	ldr	r2, [r7, #8]
 8011606:	0151      	lsls	r1, r2, #5
 8011608:	68fa      	ldr	r2, [r7, #12]
 801160a:	440a      	add	r2, r1
 801160c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011614:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011616:	2300      	movs	r3, #0
}
 8011618:	4618      	mov	r0, r3
 801161a:	3714      	adds	r7, #20
 801161c:	46bd      	mov	sp, r7
 801161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011622:	4770      	bx	lr

08011624 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011624:	b480      	push	{r7}
 8011626:	b085      	sub	sp, #20
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011632:	683b      	ldr	r3, [r7, #0]
 8011634:	781b      	ldrb	r3, [r3, #0]
 8011636:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	785b      	ldrb	r3, [r3, #1]
 801163c:	2b01      	cmp	r3, #1
 801163e:	d128      	bne.n	8011692 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	015a      	lsls	r2, r3, #5
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	4413      	add	r3, r2
 8011648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	68ba      	ldr	r2, [r7, #8]
 8011650:	0151      	lsls	r1, r2, #5
 8011652:	68fa      	ldr	r2, [r7, #12]
 8011654:	440a      	add	r2, r1
 8011656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801165a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801165e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	791b      	ldrb	r3, [r3, #4]
 8011664:	2b03      	cmp	r3, #3
 8011666:	d003      	beq.n	8011670 <USB_EPClearStall+0x4c>
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	791b      	ldrb	r3, [r3, #4]
 801166c:	2b02      	cmp	r3, #2
 801166e:	d138      	bne.n	80116e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	015a      	lsls	r2, r3, #5
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	4413      	add	r3, r2
 8011678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	68ba      	ldr	r2, [r7, #8]
 8011680:	0151      	lsls	r1, r2, #5
 8011682:	68fa      	ldr	r2, [r7, #12]
 8011684:	440a      	add	r2, r1
 8011686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801168a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801168e:	6013      	str	r3, [r2, #0]
 8011690:	e027      	b.n	80116e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	015a      	lsls	r2, r3, #5
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	4413      	add	r3, r2
 801169a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	68ba      	ldr	r2, [r7, #8]
 80116a2:	0151      	lsls	r1, r2, #5
 80116a4:	68fa      	ldr	r2, [r7, #12]
 80116a6:	440a      	add	r2, r1
 80116a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80116ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80116b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	791b      	ldrb	r3, [r3, #4]
 80116b6:	2b03      	cmp	r3, #3
 80116b8:	d003      	beq.n	80116c2 <USB_EPClearStall+0x9e>
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	791b      	ldrb	r3, [r3, #4]
 80116be:	2b02      	cmp	r3, #2
 80116c0:	d10f      	bne.n	80116e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80116c2:	68bb      	ldr	r3, [r7, #8]
 80116c4:	015a      	lsls	r2, r3, #5
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	4413      	add	r3, r2
 80116ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	68ba      	ldr	r2, [r7, #8]
 80116d2:	0151      	lsls	r1, r2, #5
 80116d4:	68fa      	ldr	r2, [r7, #12]
 80116d6:	440a      	add	r2, r1
 80116d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80116dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80116e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80116e2:	2300      	movs	r3, #0
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3714      	adds	r7, #20
 80116e8:	46bd      	mov	sp, r7
 80116ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ee:	4770      	bx	lr

080116f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80116f0:	b480      	push	{r7}
 80116f2:	b085      	sub	sp, #20
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	460b      	mov	r3, r1
 80116fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	68fa      	ldr	r2, [r7, #12]
 801170a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801170e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011712:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801171a:	681a      	ldr	r2, [r3, #0]
 801171c:	78fb      	ldrb	r3, [r7, #3]
 801171e:	011b      	lsls	r3, r3, #4
 8011720:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011724:	68f9      	ldr	r1, [r7, #12]
 8011726:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801172a:	4313      	orrs	r3, r2
 801172c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801172e:	2300      	movs	r3, #0
}
 8011730:	4618      	mov	r0, r3
 8011732:	3714      	adds	r7, #20
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr

0801173c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801173c:	b480      	push	{r7}
 801173e:	b085      	sub	sp, #20
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	68fa      	ldr	r2, [r7, #12]
 8011752:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011756:	f023 0303 	bic.w	r3, r3, #3
 801175a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	68fa      	ldr	r2, [r7, #12]
 8011766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801176a:	f023 0302 	bic.w	r3, r3, #2
 801176e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011770:	2300      	movs	r3, #0
}
 8011772:	4618      	mov	r0, r3
 8011774:	3714      	adds	r7, #20
 8011776:	46bd      	mov	sp, r7
 8011778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177c:	4770      	bx	lr

0801177e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801177e:	b480      	push	{r7}
 8011780:	b085      	sub	sp, #20
 8011782:	af00      	add	r7, sp, #0
 8011784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	68fa      	ldr	r2, [r7, #12]
 8011794:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011798:	f023 0303 	bic.w	r3, r3, #3
 801179c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117a4:	685b      	ldr	r3, [r3, #4]
 80117a6:	68fa      	ldr	r2, [r7, #12]
 80117a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80117ac:	f043 0302 	orr.w	r3, r3, #2
 80117b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80117b2:	2300      	movs	r3, #0
}
 80117b4:	4618      	mov	r0, r3
 80117b6:	3714      	adds	r7, #20
 80117b8:	46bd      	mov	sp, r7
 80117ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117be:	4770      	bx	lr

080117c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80117c0:	b480      	push	{r7}
 80117c2:	b085      	sub	sp, #20
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	695b      	ldr	r3, [r3, #20]
 80117cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	699b      	ldr	r3, [r3, #24]
 80117d2:	68fa      	ldr	r2, [r7, #12]
 80117d4:	4013      	ands	r3, r2
 80117d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80117d8:	68fb      	ldr	r3, [r7, #12]
}
 80117da:	4618      	mov	r0, r3
 80117dc:	3714      	adds	r7, #20
 80117de:	46bd      	mov	sp, r7
 80117e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e4:	4770      	bx	lr

080117e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80117e6:	b480      	push	{r7}
 80117e8:	b085      	sub	sp, #20
 80117ea:	af00      	add	r7, sp, #0
 80117ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117f8:	699b      	ldr	r3, [r3, #24]
 80117fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011802:	69db      	ldr	r3, [r3, #28]
 8011804:	68ba      	ldr	r2, [r7, #8]
 8011806:	4013      	ands	r3, r2
 8011808:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801180a:	68bb      	ldr	r3, [r7, #8]
 801180c:	0c1b      	lsrs	r3, r3, #16
}
 801180e:	4618      	mov	r0, r3
 8011810:	3714      	adds	r7, #20
 8011812:	46bd      	mov	sp, r7
 8011814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011818:	4770      	bx	lr

0801181a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801181a:	b480      	push	{r7}
 801181c:	b085      	sub	sp, #20
 801181e:	af00      	add	r7, sp, #0
 8011820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801182c:	699b      	ldr	r3, [r3, #24]
 801182e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011836:	69db      	ldr	r3, [r3, #28]
 8011838:	68ba      	ldr	r2, [r7, #8]
 801183a:	4013      	ands	r3, r2
 801183c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	b29b      	uxth	r3, r3
}
 8011842:	4618      	mov	r0, r3
 8011844:	3714      	adds	r7, #20
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr

0801184e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801184e:	b480      	push	{r7}
 8011850:	b085      	sub	sp, #20
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
 8011856:	460b      	mov	r3, r1
 8011858:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801185e:	78fb      	ldrb	r3, [r7, #3]
 8011860:	015a      	lsls	r2, r3, #5
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	4413      	add	r3, r2
 8011866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801186a:	689b      	ldr	r3, [r3, #8]
 801186c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011874:	695b      	ldr	r3, [r3, #20]
 8011876:	68ba      	ldr	r2, [r7, #8]
 8011878:	4013      	ands	r3, r2
 801187a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801187c:	68bb      	ldr	r3, [r7, #8]
}
 801187e:	4618      	mov	r0, r3
 8011880:	3714      	adds	r7, #20
 8011882:	46bd      	mov	sp, r7
 8011884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011888:	4770      	bx	lr

0801188a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801188a:	b480      	push	{r7}
 801188c:	b087      	sub	sp, #28
 801188e:	af00      	add	r7, sp, #0
 8011890:	6078      	str	r0, [r7, #4]
 8011892:	460b      	mov	r3, r1
 8011894:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118a0:	691b      	ldr	r3, [r3, #16]
 80118a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80118ae:	78fb      	ldrb	r3, [r7, #3]
 80118b0:	f003 030f 	and.w	r3, r3, #15
 80118b4:	68fa      	ldr	r2, [r7, #12]
 80118b6:	fa22 f303 	lsr.w	r3, r2, r3
 80118ba:	01db      	lsls	r3, r3, #7
 80118bc:	b2db      	uxtb	r3, r3
 80118be:	693a      	ldr	r2, [r7, #16]
 80118c0:	4313      	orrs	r3, r2
 80118c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80118c4:	78fb      	ldrb	r3, [r7, #3]
 80118c6:	015a      	lsls	r2, r3, #5
 80118c8:	697b      	ldr	r3, [r7, #20]
 80118ca:	4413      	add	r3, r2
 80118cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118d0:	689b      	ldr	r3, [r3, #8]
 80118d2:	693a      	ldr	r2, [r7, #16]
 80118d4:	4013      	ands	r3, r2
 80118d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80118d8:	68bb      	ldr	r3, [r7, #8]
}
 80118da:	4618      	mov	r0, r3
 80118dc:	371c      	adds	r7, #28
 80118de:	46bd      	mov	sp, r7
 80118e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e4:	4770      	bx	lr

080118e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80118e6:	b480      	push	{r7}
 80118e8:	b083      	sub	sp, #12
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	695b      	ldr	r3, [r3, #20]
 80118f2:	f003 0301 	and.w	r3, r3, #1
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	370c      	adds	r7, #12
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr

08011902 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8011902:	b480      	push	{r7}
 8011904:	b085      	sub	sp, #20
 8011906:	af00      	add	r7, sp, #0
 8011908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	68fa      	ldr	r2, [r7, #12]
 8011918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801191c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011920:	f023 0307 	bic.w	r3, r3, #7
 8011924:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	68fa      	ldr	r2, [r7, #12]
 8011930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011938:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801193a:	2300      	movs	r3, #0
}
 801193c:	4618      	mov	r0, r3
 801193e:	3714      	adds	r7, #20
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr

08011948 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8011948:	b480      	push	{r7}
 801194a:	b087      	sub	sp, #28
 801194c:	af00      	add	r7, sp, #0
 801194e:	60f8      	str	r0, [r7, #12]
 8011950:	460b      	mov	r3, r1
 8011952:	607a      	str	r2, [r7, #4]
 8011954:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	333c      	adds	r3, #60	; 0x3c
 801195e:	3304      	adds	r3, #4
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011964:	693b      	ldr	r3, [r7, #16]
 8011966:	4a26      	ldr	r2, [pc, #152]	; (8011a00 <USB_EP0_OutStart+0xb8>)
 8011968:	4293      	cmp	r3, r2
 801196a:	d90a      	bls.n	8011982 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011978:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801197c:	d101      	bne.n	8011982 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801197e:	2300      	movs	r3, #0
 8011980:	e037      	b.n	80119f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011988:	461a      	mov	r2, r3
 801198a:	2300      	movs	r3, #0
 801198c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011994:	691b      	ldr	r3, [r3, #16]
 8011996:	697a      	ldr	r2, [r7, #20]
 8011998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801199c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80119a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119a8:	691b      	ldr	r3, [r3, #16]
 80119aa:	697a      	ldr	r2, [r7, #20]
 80119ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119b0:	f043 0318 	orr.w	r3, r3, #24
 80119b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119bc:	691b      	ldr	r3, [r3, #16]
 80119be:	697a      	ldr	r2, [r7, #20]
 80119c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80119c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80119ca:	7afb      	ldrb	r3, [r7, #11]
 80119cc:	2b01      	cmp	r3, #1
 80119ce:	d10f      	bne.n	80119f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119d6:	461a      	mov	r2, r3
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	697a      	ldr	r2, [r7, #20]
 80119e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80119ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80119f0:	2300      	movs	r3, #0
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	371c      	adds	r7, #28
 80119f6:	46bd      	mov	sp, r7
 80119f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fc:	4770      	bx	lr
 80119fe:	bf00      	nop
 8011a00:	4f54300a 	.word	0x4f54300a

08011a04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011a04:	b480      	push	{r7}
 8011a06:	b085      	sub	sp, #20
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	3301      	adds	r3, #1
 8011a14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8011a1c:	d901      	bls.n	8011a22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011a1e:	2303      	movs	r3, #3
 8011a20:	e01b      	b.n	8011a5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	691b      	ldr	r3, [r3, #16]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	daf2      	bge.n	8011a10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	691b      	ldr	r3, [r3, #16]
 8011a32:	f043 0201 	orr.w	r2, r3, #1
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8011a46:	d901      	bls.n	8011a4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011a48:	2303      	movs	r3, #3
 8011a4a:	e006      	b.n	8011a5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	691b      	ldr	r3, [r3, #16]
 8011a50:	f003 0301 	and.w	r3, r3, #1
 8011a54:	2b01      	cmp	r3, #1
 8011a56:	d0f0      	beq.n	8011a3a <USB_CoreReset+0x36>

  return HAL_OK;
 8011a58:	2300      	movs	r3, #0
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3714      	adds	r7, #20
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a64:	4770      	bx	lr
	...

08011a68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b084      	sub	sp, #16
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	4603      	mov	r3, r0
 8011a70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011a72:	79fb      	ldrb	r3, [r7, #7]
 8011a74:	4a08      	ldr	r2, [pc, #32]	; (8011a98 <disk_status+0x30>)
 8011a76:	009b      	lsls	r3, r3, #2
 8011a78:	4413      	add	r3, r2
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	685b      	ldr	r3, [r3, #4]
 8011a7e:	79fa      	ldrb	r2, [r7, #7]
 8011a80:	4905      	ldr	r1, [pc, #20]	; (8011a98 <disk_status+0x30>)
 8011a82:	440a      	add	r2, r1
 8011a84:	7b12      	ldrb	r2, [r2, #12]
 8011a86:	4610      	mov	r0, r2
 8011a88:	4798      	blx	r3
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	3710      	adds	r7, #16
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}
 8011a98:	20005404 	.word	0x20005404

08011a9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b084      	sub	sp, #16
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011aaa:	79fb      	ldrb	r3, [r7, #7]
 8011aac:	4a0d      	ldr	r2, [pc, #52]	; (8011ae4 <disk_initialize+0x48>)
 8011aae:	5cd3      	ldrb	r3, [r2, r3]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d111      	bne.n	8011ad8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011ab4:	79fb      	ldrb	r3, [r7, #7]
 8011ab6:	4a0b      	ldr	r2, [pc, #44]	; (8011ae4 <disk_initialize+0x48>)
 8011ab8:	2101      	movs	r1, #1
 8011aba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011abc:	79fb      	ldrb	r3, [r7, #7]
 8011abe:	4a09      	ldr	r2, [pc, #36]	; (8011ae4 <disk_initialize+0x48>)
 8011ac0:	009b      	lsls	r3, r3, #2
 8011ac2:	4413      	add	r3, r2
 8011ac4:	685b      	ldr	r3, [r3, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	79fa      	ldrb	r2, [r7, #7]
 8011aca:	4906      	ldr	r1, [pc, #24]	; (8011ae4 <disk_initialize+0x48>)
 8011acc:	440a      	add	r2, r1
 8011ace:	7b12      	ldrb	r2, [r2, #12]
 8011ad0:	4610      	mov	r0, r2
 8011ad2:	4798      	blx	r3
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3710      	adds	r7, #16
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
 8011ae2:	bf00      	nop
 8011ae4:	20005404 	.word	0x20005404

08011ae8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011ae8:	b590      	push	{r4, r7, lr}
 8011aea:	b087      	sub	sp, #28
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	60b9      	str	r1, [r7, #8]
 8011af0:	607a      	str	r2, [r7, #4]
 8011af2:	603b      	str	r3, [r7, #0]
 8011af4:	4603      	mov	r3, r0
 8011af6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011af8:	7bfb      	ldrb	r3, [r7, #15]
 8011afa:	4a0a      	ldr	r2, [pc, #40]	; (8011b24 <disk_read+0x3c>)
 8011afc:	009b      	lsls	r3, r3, #2
 8011afe:	4413      	add	r3, r2
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	689c      	ldr	r4, [r3, #8]
 8011b04:	7bfb      	ldrb	r3, [r7, #15]
 8011b06:	4a07      	ldr	r2, [pc, #28]	; (8011b24 <disk_read+0x3c>)
 8011b08:	4413      	add	r3, r2
 8011b0a:	7b18      	ldrb	r0, [r3, #12]
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	687a      	ldr	r2, [r7, #4]
 8011b10:	68b9      	ldr	r1, [r7, #8]
 8011b12:	47a0      	blx	r4
 8011b14:	4603      	mov	r3, r0
 8011b16:	75fb      	strb	r3, [r7, #23]
  return res;
 8011b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	371c      	adds	r7, #28
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd90      	pop	{r4, r7, pc}
 8011b22:	bf00      	nop
 8011b24:	20005404 	.word	0x20005404

08011b28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011b28:	b590      	push	{r4, r7, lr}
 8011b2a:	b087      	sub	sp, #28
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	60b9      	str	r1, [r7, #8]
 8011b30:	607a      	str	r2, [r7, #4]
 8011b32:	603b      	str	r3, [r7, #0]
 8011b34:	4603      	mov	r3, r0
 8011b36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011b38:	7bfb      	ldrb	r3, [r7, #15]
 8011b3a:	4a0a      	ldr	r2, [pc, #40]	; (8011b64 <disk_write+0x3c>)
 8011b3c:	009b      	lsls	r3, r3, #2
 8011b3e:	4413      	add	r3, r2
 8011b40:	685b      	ldr	r3, [r3, #4]
 8011b42:	68dc      	ldr	r4, [r3, #12]
 8011b44:	7bfb      	ldrb	r3, [r7, #15]
 8011b46:	4a07      	ldr	r2, [pc, #28]	; (8011b64 <disk_write+0x3c>)
 8011b48:	4413      	add	r3, r2
 8011b4a:	7b18      	ldrb	r0, [r3, #12]
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	687a      	ldr	r2, [r7, #4]
 8011b50:	68b9      	ldr	r1, [r7, #8]
 8011b52:	47a0      	blx	r4
 8011b54:	4603      	mov	r3, r0
 8011b56:	75fb      	strb	r3, [r7, #23]
  return res;
 8011b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	371c      	adds	r7, #28
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd90      	pop	{r4, r7, pc}
 8011b62:	bf00      	nop
 8011b64:	20005404 	.word	0x20005404

08011b68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b084      	sub	sp, #16
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	4603      	mov	r3, r0
 8011b70:	603a      	str	r2, [r7, #0]
 8011b72:	71fb      	strb	r3, [r7, #7]
 8011b74:	460b      	mov	r3, r1
 8011b76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011b78:	79fb      	ldrb	r3, [r7, #7]
 8011b7a:	4a09      	ldr	r2, [pc, #36]	; (8011ba0 <disk_ioctl+0x38>)
 8011b7c:	009b      	lsls	r3, r3, #2
 8011b7e:	4413      	add	r3, r2
 8011b80:	685b      	ldr	r3, [r3, #4]
 8011b82:	691b      	ldr	r3, [r3, #16]
 8011b84:	79fa      	ldrb	r2, [r7, #7]
 8011b86:	4906      	ldr	r1, [pc, #24]	; (8011ba0 <disk_ioctl+0x38>)
 8011b88:	440a      	add	r2, r1
 8011b8a:	7b10      	ldrb	r0, [r2, #12]
 8011b8c:	79b9      	ldrb	r1, [r7, #6]
 8011b8e:	683a      	ldr	r2, [r7, #0]
 8011b90:	4798      	blx	r3
 8011b92:	4603      	mov	r3, r0
 8011b94:	73fb      	strb	r3, [r7, #15]
  return res;
 8011b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3710      	adds	r7, #16
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}
 8011ba0:	20005404 	.word	0x20005404

08011ba4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	af00      	add	r7, sp, #0
  return 0;
 8011ba8:	2300      	movs	r3, #0
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	46bd      	mov	sp, r7
 8011bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb2:	4770      	bx	lr

08011bb4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011bb4:	b480      	push	{r7}
 8011bb6:	b085      	sub	sp, #20
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011bc4:	89fb      	ldrh	r3, [r7, #14]
 8011bc6:	021b      	lsls	r3, r3, #8
 8011bc8:	b21a      	sxth	r2, r3
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	781b      	ldrb	r3, [r3, #0]
 8011bce:	b21b      	sxth	r3, r3
 8011bd0:	4313      	orrs	r3, r2
 8011bd2:	b21b      	sxth	r3, r3
 8011bd4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011bd6:	89fb      	ldrh	r3, [r7, #14]
}
 8011bd8:	4618      	mov	r0, r3
 8011bda:	3714      	adds	r7, #20
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be2:	4770      	bx	lr

08011be4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011be4:	b480      	push	{r7}
 8011be6:	b085      	sub	sp, #20
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	3303      	adds	r3, #3
 8011bf0:	781b      	ldrb	r3, [r3, #0]
 8011bf2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	021b      	lsls	r3, r3, #8
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	3202      	adds	r2, #2
 8011bfc:	7812      	ldrb	r2, [r2, #0]
 8011bfe:	4313      	orrs	r3, r2
 8011c00:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	021b      	lsls	r3, r3, #8
 8011c06:	687a      	ldr	r2, [r7, #4]
 8011c08:	3201      	adds	r2, #1
 8011c0a:	7812      	ldrb	r2, [r2, #0]
 8011c0c:	4313      	orrs	r3, r2
 8011c0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	021b      	lsls	r3, r3, #8
 8011c14:	687a      	ldr	r2, [r7, #4]
 8011c16:	7812      	ldrb	r2, [r2, #0]
 8011c18:	4313      	orrs	r3, r2
 8011c1a:	60fb      	str	r3, [r7, #12]
	return rv;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3714      	adds	r7, #20
 8011c22:	46bd      	mov	sp, r7
 8011c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c28:	4770      	bx	lr

08011c2a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011c2a:	b480      	push	{r7}
 8011c2c:	b083      	sub	sp, #12
 8011c2e:	af00      	add	r7, sp, #0
 8011c30:	6078      	str	r0, [r7, #4]
 8011c32:	460b      	mov	r3, r1
 8011c34:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	1c5a      	adds	r2, r3, #1
 8011c3a:	607a      	str	r2, [r7, #4]
 8011c3c:	887a      	ldrh	r2, [r7, #2]
 8011c3e:	b2d2      	uxtb	r2, r2
 8011c40:	701a      	strb	r2, [r3, #0]
 8011c42:	887b      	ldrh	r3, [r7, #2]
 8011c44:	0a1b      	lsrs	r3, r3, #8
 8011c46:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	1c5a      	adds	r2, r3, #1
 8011c4c:	607a      	str	r2, [r7, #4]
 8011c4e:	887a      	ldrh	r2, [r7, #2]
 8011c50:	b2d2      	uxtb	r2, r2
 8011c52:	701a      	strb	r2, [r3, #0]
}
 8011c54:	bf00      	nop
 8011c56:	370c      	adds	r7, #12
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5e:	4770      	bx	lr

08011c60 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011c60:	b480      	push	{r7}
 8011c62:	b083      	sub	sp, #12
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
 8011c68:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	1c5a      	adds	r2, r3, #1
 8011c6e:	607a      	str	r2, [r7, #4]
 8011c70:	683a      	ldr	r2, [r7, #0]
 8011c72:	b2d2      	uxtb	r2, r2
 8011c74:	701a      	strb	r2, [r3, #0]
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	0a1b      	lsrs	r3, r3, #8
 8011c7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	1c5a      	adds	r2, r3, #1
 8011c80:	607a      	str	r2, [r7, #4]
 8011c82:	683a      	ldr	r2, [r7, #0]
 8011c84:	b2d2      	uxtb	r2, r2
 8011c86:	701a      	strb	r2, [r3, #0]
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	0a1b      	lsrs	r3, r3, #8
 8011c8c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	1c5a      	adds	r2, r3, #1
 8011c92:	607a      	str	r2, [r7, #4]
 8011c94:	683a      	ldr	r2, [r7, #0]
 8011c96:	b2d2      	uxtb	r2, r2
 8011c98:	701a      	strb	r2, [r3, #0]
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	0a1b      	lsrs	r3, r3, #8
 8011c9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	1c5a      	adds	r2, r3, #1
 8011ca4:	607a      	str	r2, [r7, #4]
 8011ca6:	683a      	ldr	r2, [r7, #0]
 8011ca8:	b2d2      	uxtb	r2, r2
 8011caa:	701a      	strb	r2, [r3, #0]
}
 8011cac:	bf00      	nop
 8011cae:	370c      	adds	r7, #12
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb6:	4770      	bx	lr

08011cb8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011cb8:	b480      	push	{r7}
 8011cba:	b087      	sub	sp, #28
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	60f8      	str	r0, [r7, #12]
 8011cc0:	60b9      	str	r1, [r7, #8]
 8011cc2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d00d      	beq.n	8011cee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011cd2:	693a      	ldr	r2, [r7, #16]
 8011cd4:	1c53      	adds	r3, r2, #1
 8011cd6:	613b      	str	r3, [r7, #16]
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	1c59      	adds	r1, r3, #1
 8011cdc:	6179      	str	r1, [r7, #20]
 8011cde:	7812      	ldrb	r2, [r2, #0]
 8011ce0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	3b01      	subs	r3, #1
 8011ce6:	607b      	str	r3, [r7, #4]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d1f1      	bne.n	8011cd2 <mem_cpy+0x1a>
	}
}
 8011cee:	bf00      	nop
 8011cf0:	371c      	adds	r7, #28
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf8:	4770      	bx	lr

08011cfa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011cfa:	b480      	push	{r7}
 8011cfc:	b087      	sub	sp, #28
 8011cfe:	af00      	add	r7, sp, #0
 8011d00:	60f8      	str	r0, [r7, #12]
 8011d02:	60b9      	str	r1, [r7, #8]
 8011d04:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011d0a:	697b      	ldr	r3, [r7, #20]
 8011d0c:	1c5a      	adds	r2, r3, #1
 8011d0e:	617a      	str	r2, [r7, #20]
 8011d10:	68ba      	ldr	r2, [r7, #8]
 8011d12:	b2d2      	uxtb	r2, r2
 8011d14:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	3b01      	subs	r3, #1
 8011d1a:	607b      	str	r3, [r7, #4]
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d1f3      	bne.n	8011d0a <mem_set+0x10>
}
 8011d22:	bf00      	nop
 8011d24:	bf00      	nop
 8011d26:	371c      	adds	r7, #28
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2e:	4770      	bx	lr

08011d30 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011d30:	b480      	push	{r7}
 8011d32:	b089      	sub	sp, #36	; 0x24
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	60f8      	str	r0, [r7, #12]
 8011d38:	60b9      	str	r1, [r7, #8]
 8011d3a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	61fb      	str	r3, [r7, #28]
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011d44:	2300      	movs	r3, #0
 8011d46:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011d48:	69fb      	ldr	r3, [r7, #28]
 8011d4a:	1c5a      	adds	r2, r3, #1
 8011d4c:	61fa      	str	r2, [r7, #28]
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	4619      	mov	r1, r3
 8011d52:	69bb      	ldr	r3, [r7, #24]
 8011d54:	1c5a      	adds	r2, r3, #1
 8011d56:	61ba      	str	r2, [r7, #24]
 8011d58:	781b      	ldrb	r3, [r3, #0]
 8011d5a:	1acb      	subs	r3, r1, r3
 8011d5c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	3b01      	subs	r3, #1
 8011d62:	607b      	str	r3, [r7, #4]
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d002      	beq.n	8011d70 <mem_cmp+0x40>
 8011d6a:	697b      	ldr	r3, [r7, #20]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d0eb      	beq.n	8011d48 <mem_cmp+0x18>

	return r;
 8011d70:	697b      	ldr	r3, [r7, #20]
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3724      	adds	r7, #36	; 0x24
 8011d76:	46bd      	mov	sp, r7
 8011d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7c:	4770      	bx	lr

08011d7e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011d7e:	b480      	push	{r7}
 8011d80:	b083      	sub	sp, #12
 8011d82:	af00      	add	r7, sp, #0
 8011d84:	6078      	str	r0, [r7, #4]
 8011d86:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011d88:	e002      	b.n	8011d90 <chk_chr+0x12>
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	3301      	adds	r3, #1
 8011d8e:	607b      	str	r3, [r7, #4]
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	781b      	ldrb	r3, [r3, #0]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d005      	beq.n	8011da4 <chk_chr+0x26>
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	781b      	ldrb	r3, [r3, #0]
 8011d9c:	461a      	mov	r2, r3
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	4293      	cmp	r3, r2
 8011da2:	d1f2      	bne.n	8011d8a <chk_chr+0xc>
	return *str;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	781b      	ldrb	r3, [r3, #0]
}
 8011da8:	4618      	mov	r0, r3
 8011daa:	370c      	adds	r7, #12
 8011dac:	46bd      	mov	sp, r7
 8011dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db2:	4770      	bx	lr

08011db4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011db4:	b480      	push	{r7}
 8011db6:	b085      	sub	sp, #20
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	60bb      	str	r3, [r7, #8]
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	60fb      	str	r3, [r7, #12]
 8011dc6:	e029      	b.n	8011e1c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011dc8:	4a27      	ldr	r2, [pc, #156]	; (8011e68 <chk_lock+0xb4>)
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	011b      	lsls	r3, r3, #4
 8011dce:	4413      	add	r3, r2
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d01d      	beq.n	8011e12 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011dd6:	4a24      	ldr	r2, [pc, #144]	; (8011e68 <chk_lock+0xb4>)
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	011b      	lsls	r3, r3, #4
 8011ddc:	4413      	add	r3, r2
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d116      	bne.n	8011e16 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011de8:	4a1f      	ldr	r2, [pc, #124]	; (8011e68 <chk_lock+0xb4>)
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	011b      	lsls	r3, r3, #4
 8011dee:	4413      	add	r3, r2
 8011df0:	3304      	adds	r3, #4
 8011df2:	681a      	ldr	r2, [r3, #0]
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d10c      	bne.n	8011e16 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011dfc:	4a1a      	ldr	r2, [pc, #104]	; (8011e68 <chk_lock+0xb4>)
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	011b      	lsls	r3, r3, #4
 8011e02:	4413      	add	r3, r2
 8011e04:	3308      	adds	r3, #8
 8011e06:	681a      	ldr	r2, [r3, #0]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d102      	bne.n	8011e16 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011e10:	e007      	b.n	8011e22 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011e12:	2301      	movs	r3, #1
 8011e14:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	3301      	adds	r3, #1
 8011e1a:	60fb      	str	r3, [r7, #12]
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	2b01      	cmp	r3, #1
 8011e20:	d9d2      	bls.n	8011dc8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	2b02      	cmp	r3, #2
 8011e26:	d109      	bne.n	8011e3c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011e28:	68bb      	ldr	r3, [r7, #8]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d102      	bne.n	8011e34 <chk_lock+0x80>
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	2b02      	cmp	r3, #2
 8011e32:	d101      	bne.n	8011e38 <chk_lock+0x84>
 8011e34:	2300      	movs	r3, #0
 8011e36:	e010      	b.n	8011e5a <chk_lock+0xa6>
 8011e38:	2312      	movs	r3, #18
 8011e3a:	e00e      	b.n	8011e5a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d108      	bne.n	8011e54 <chk_lock+0xa0>
 8011e42:	4a09      	ldr	r2, [pc, #36]	; (8011e68 <chk_lock+0xb4>)
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	011b      	lsls	r3, r3, #4
 8011e48:	4413      	add	r3, r2
 8011e4a:	330c      	adds	r3, #12
 8011e4c:	881b      	ldrh	r3, [r3, #0]
 8011e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e52:	d101      	bne.n	8011e58 <chk_lock+0xa4>
 8011e54:	2310      	movs	r3, #16
 8011e56:	e000      	b.n	8011e5a <chk_lock+0xa6>
 8011e58:	2300      	movs	r3, #0
}
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	3714      	adds	r7, #20
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e64:	4770      	bx	lr
 8011e66:	bf00      	nop
 8011e68:	200053e4 	.word	0x200053e4

08011e6c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b083      	sub	sp, #12
 8011e70:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011e72:	2300      	movs	r3, #0
 8011e74:	607b      	str	r3, [r7, #4]
 8011e76:	e002      	b.n	8011e7e <enq_lock+0x12>
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	3301      	adds	r3, #1
 8011e7c:	607b      	str	r3, [r7, #4]
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	2b01      	cmp	r3, #1
 8011e82:	d806      	bhi.n	8011e92 <enq_lock+0x26>
 8011e84:	4a09      	ldr	r2, [pc, #36]	; (8011eac <enq_lock+0x40>)
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	011b      	lsls	r3, r3, #4
 8011e8a:	4413      	add	r3, r2
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d1f2      	bne.n	8011e78 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	2b02      	cmp	r3, #2
 8011e96:	bf14      	ite	ne
 8011e98:	2301      	movne	r3, #1
 8011e9a:	2300      	moveq	r3, #0
 8011e9c:	b2db      	uxtb	r3, r3
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	370c      	adds	r7, #12
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea8:	4770      	bx	lr
 8011eaa:	bf00      	nop
 8011eac:	200053e4 	.word	0x200053e4

08011eb0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011eb0:	b480      	push	{r7}
 8011eb2:	b085      	sub	sp, #20
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011eba:	2300      	movs	r3, #0
 8011ebc:	60fb      	str	r3, [r7, #12]
 8011ebe:	e01f      	b.n	8011f00 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011ec0:	4a41      	ldr	r2, [pc, #260]	; (8011fc8 <inc_lock+0x118>)
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	011b      	lsls	r3, r3, #4
 8011ec6:	4413      	add	r3, r2
 8011ec8:	681a      	ldr	r2, [r3, #0]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d113      	bne.n	8011efa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011ed2:	4a3d      	ldr	r2, [pc, #244]	; (8011fc8 <inc_lock+0x118>)
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	011b      	lsls	r3, r3, #4
 8011ed8:	4413      	add	r3, r2
 8011eda:	3304      	adds	r3, #4
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d109      	bne.n	8011efa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011ee6:	4a38      	ldr	r2, [pc, #224]	; (8011fc8 <inc_lock+0x118>)
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	011b      	lsls	r3, r3, #4
 8011eec:	4413      	add	r3, r2
 8011eee:	3308      	adds	r3, #8
 8011ef0:	681a      	ldr	r2, [r3, #0]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d006      	beq.n	8011f08 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	3301      	adds	r3, #1
 8011efe:	60fb      	str	r3, [r7, #12]
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	2b01      	cmp	r3, #1
 8011f04:	d9dc      	bls.n	8011ec0 <inc_lock+0x10>
 8011f06:	e000      	b.n	8011f0a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011f08:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	2b02      	cmp	r3, #2
 8011f0e:	d132      	bne.n	8011f76 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011f10:	2300      	movs	r3, #0
 8011f12:	60fb      	str	r3, [r7, #12]
 8011f14:	e002      	b.n	8011f1c <inc_lock+0x6c>
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	3301      	adds	r3, #1
 8011f1a:	60fb      	str	r3, [r7, #12]
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	2b01      	cmp	r3, #1
 8011f20:	d806      	bhi.n	8011f30 <inc_lock+0x80>
 8011f22:	4a29      	ldr	r2, [pc, #164]	; (8011fc8 <inc_lock+0x118>)
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	011b      	lsls	r3, r3, #4
 8011f28:	4413      	add	r3, r2
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d1f2      	bne.n	8011f16 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	2b02      	cmp	r3, #2
 8011f34:	d101      	bne.n	8011f3a <inc_lock+0x8a>
 8011f36:	2300      	movs	r3, #0
 8011f38:	e040      	b.n	8011fbc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681a      	ldr	r2, [r3, #0]
 8011f3e:	4922      	ldr	r1, [pc, #136]	; (8011fc8 <inc_lock+0x118>)
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	011b      	lsls	r3, r3, #4
 8011f44:	440b      	add	r3, r1
 8011f46:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	689a      	ldr	r2, [r3, #8]
 8011f4c:	491e      	ldr	r1, [pc, #120]	; (8011fc8 <inc_lock+0x118>)
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	011b      	lsls	r3, r3, #4
 8011f52:	440b      	add	r3, r1
 8011f54:	3304      	adds	r3, #4
 8011f56:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	695a      	ldr	r2, [r3, #20]
 8011f5c:	491a      	ldr	r1, [pc, #104]	; (8011fc8 <inc_lock+0x118>)
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	011b      	lsls	r3, r3, #4
 8011f62:	440b      	add	r3, r1
 8011f64:	3308      	adds	r3, #8
 8011f66:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011f68:	4a17      	ldr	r2, [pc, #92]	; (8011fc8 <inc_lock+0x118>)
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	011b      	lsls	r3, r3, #4
 8011f6e:	4413      	add	r3, r2
 8011f70:	330c      	adds	r3, #12
 8011f72:	2200      	movs	r2, #0
 8011f74:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d009      	beq.n	8011f90 <inc_lock+0xe0>
 8011f7c:	4a12      	ldr	r2, [pc, #72]	; (8011fc8 <inc_lock+0x118>)
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	011b      	lsls	r3, r3, #4
 8011f82:	4413      	add	r3, r2
 8011f84:	330c      	adds	r3, #12
 8011f86:	881b      	ldrh	r3, [r3, #0]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d001      	beq.n	8011f90 <inc_lock+0xe0>
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	e015      	b.n	8011fbc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d108      	bne.n	8011fa8 <inc_lock+0xf8>
 8011f96:	4a0c      	ldr	r2, [pc, #48]	; (8011fc8 <inc_lock+0x118>)
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	011b      	lsls	r3, r3, #4
 8011f9c:	4413      	add	r3, r2
 8011f9e:	330c      	adds	r3, #12
 8011fa0:	881b      	ldrh	r3, [r3, #0]
 8011fa2:	3301      	adds	r3, #1
 8011fa4:	b29a      	uxth	r2, r3
 8011fa6:	e001      	b.n	8011fac <inc_lock+0xfc>
 8011fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011fac:	4906      	ldr	r1, [pc, #24]	; (8011fc8 <inc_lock+0x118>)
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	011b      	lsls	r3, r3, #4
 8011fb2:	440b      	add	r3, r1
 8011fb4:	330c      	adds	r3, #12
 8011fb6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	3301      	adds	r3, #1
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3714      	adds	r7, #20
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc6:	4770      	bx	lr
 8011fc8:	200053e4 	.word	0x200053e4

08011fcc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011fcc:	b480      	push	{r7}
 8011fce:	b085      	sub	sp, #20
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	3b01      	subs	r3, #1
 8011fd8:	607b      	str	r3, [r7, #4]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d825      	bhi.n	801202c <dec_lock+0x60>
		n = Files[i].ctr;
 8011fe0:	4a17      	ldr	r2, [pc, #92]	; (8012040 <dec_lock+0x74>)
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	011b      	lsls	r3, r3, #4
 8011fe6:	4413      	add	r3, r2
 8011fe8:	330c      	adds	r3, #12
 8011fea:	881b      	ldrh	r3, [r3, #0]
 8011fec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011fee:	89fb      	ldrh	r3, [r7, #14]
 8011ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ff4:	d101      	bne.n	8011ffa <dec_lock+0x2e>
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011ffa:	89fb      	ldrh	r3, [r7, #14]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d002      	beq.n	8012006 <dec_lock+0x3a>
 8012000:	89fb      	ldrh	r3, [r7, #14]
 8012002:	3b01      	subs	r3, #1
 8012004:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012006:	4a0e      	ldr	r2, [pc, #56]	; (8012040 <dec_lock+0x74>)
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	011b      	lsls	r3, r3, #4
 801200c:	4413      	add	r3, r2
 801200e:	330c      	adds	r3, #12
 8012010:	89fa      	ldrh	r2, [r7, #14]
 8012012:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012014:	89fb      	ldrh	r3, [r7, #14]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d105      	bne.n	8012026 <dec_lock+0x5a>
 801201a:	4a09      	ldr	r2, [pc, #36]	; (8012040 <dec_lock+0x74>)
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	011b      	lsls	r3, r3, #4
 8012020:	4413      	add	r3, r2
 8012022:	2200      	movs	r2, #0
 8012024:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012026:	2300      	movs	r3, #0
 8012028:	737b      	strb	r3, [r7, #13]
 801202a:	e001      	b.n	8012030 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801202c:	2302      	movs	r3, #2
 801202e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012030:	7b7b      	ldrb	r3, [r7, #13]
}
 8012032:	4618      	mov	r0, r3
 8012034:	3714      	adds	r7, #20
 8012036:	46bd      	mov	sp, r7
 8012038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203c:	4770      	bx	lr
 801203e:	bf00      	nop
 8012040:	200053e4 	.word	0x200053e4

08012044 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012044:	b480      	push	{r7}
 8012046:	b085      	sub	sp, #20
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801204c:	2300      	movs	r3, #0
 801204e:	60fb      	str	r3, [r7, #12]
 8012050:	e010      	b.n	8012074 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012052:	4a0d      	ldr	r2, [pc, #52]	; (8012088 <clear_lock+0x44>)
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	011b      	lsls	r3, r3, #4
 8012058:	4413      	add	r3, r2
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	687a      	ldr	r2, [r7, #4]
 801205e:	429a      	cmp	r2, r3
 8012060:	d105      	bne.n	801206e <clear_lock+0x2a>
 8012062:	4a09      	ldr	r2, [pc, #36]	; (8012088 <clear_lock+0x44>)
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	011b      	lsls	r3, r3, #4
 8012068:	4413      	add	r3, r2
 801206a:	2200      	movs	r2, #0
 801206c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	3301      	adds	r3, #1
 8012072:	60fb      	str	r3, [r7, #12]
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	2b01      	cmp	r3, #1
 8012078:	d9eb      	bls.n	8012052 <clear_lock+0xe>
	}
}
 801207a:	bf00      	nop
 801207c:	bf00      	nop
 801207e:	3714      	adds	r7, #20
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr
 8012088:	200053e4 	.word	0x200053e4

0801208c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b086      	sub	sp, #24
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012094:	2300      	movs	r3, #0
 8012096:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	78db      	ldrb	r3, [r3, #3]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d034      	beq.n	801210a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	7858      	ldrb	r0, [r3, #1]
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80120b0:	2301      	movs	r3, #1
 80120b2:	697a      	ldr	r2, [r7, #20]
 80120b4:	f7ff fd38 	bl	8011b28 <disk_write>
 80120b8:	4603      	mov	r3, r0
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d002      	beq.n	80120c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80120be:	2301      	movs	r3, #1
 80120c0:	73fb      	strb	r3, [r7, #15]
 80120c2:	e022      	b.n	801210a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2200      	movs	r2, #0
 80120c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120ce:	697a      	ldr	r2, [r7, #20]
 80120d0:	1ad2      	subs	r2, r2, r3
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	69db      	ldr	r3, [r3, #28]
 80120d6:	429a      	cmp	r2, r3
 80120d8:	d217      	bcs.n	801210a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	789b      	ldrb	r3, [r3, #2]
 80120de:	613b      	str	r3, [r7, #16]
 80120e0:	e010      	b.n	8012104 <sync_window+0x78>
					wsect += fs->fsize;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	69db      	ldr	r3, [r3, #28]
 80120e6:	697a      	ldr	r2, [r7, #20]
 80120e8:	4413      	add	r3, r2
 80120ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	7858      	ldrb	r0, [r3, #1]
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80120f6:	2301      	movs	r3, #1
 80120f8:	697a      	ldr	r2, [r7, #20]
 80120fa:	f7ff fd15 	bl	8011b28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	3b01      	subs	r3, #1
 8012102:	613b      	str	r3, [r7, #16]
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	2b01      	cmp	r3, #1
 8012108:	d8eb      	bhi.n	80120e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801210a:	7bfb      	ldrb	r3, [r7, #15]
}
 801210c:	4618      	mov	r0, r3
 801210e:	3718      	adds	r7, #24
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}

08012114 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b084      	sub	sp, #16
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801211e:	2300      	movs	r3, #0
 8012120:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012126:	683a      	ldr	r2, [r7, #0]
 8012128:	429a      	cmp	r2, r3
 801212a:	d01b      	beq.n	8012164 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f7ff ffad 	bl	801208c <sync_window>
 8012132:	4603      	mov	r3, r0
 8012134:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012136:	7bfb      	ldrb	r3, [r7, #15]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d113      	bne.n	8012164 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	7858      	ldrb	r0, [r3, #1]
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012146:	2301      	movs	r3, #1
 8012148:	683a      	ldr	r2, [r7, #0]
 801214a:	f7ff fccd 	bl	8011ae8 <disk_read>
 801214e:	4603      	mov	r3, r0
 8012150:	2b00      	cmp	r3, #0
 8012152:	d004      	beq.n	801215e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012154:	f04f 33ff 	mov.w	r3, #4294967295
 8012158:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801215a:	2301      	movs	r3, #1
 801215c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	683a      	ldr	r2, [r7, #0]
 8012162:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8012164:	7bfb      	ldrb	r3, [r7, #15]
}
 8012166:	4618      	mov	r0, r3
 8012168:	3710      	adds	r7, #16
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}
	...

08012170 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b084      	sub	sp, #16
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f7ff ff87 	bl	801208c <sync_window>
 801217e:	4603      	mov	r3, r0
 8012180:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012182:	7bfb      	ldrb	r3, [r7, #15]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d158      	bne.n	801223a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	2b03      	cmp	r3, #3
 801218e:	d148      	bne.n	8012222 <sync_fs+0xb2>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	791b      	ldrb	r3, [r3, #4]
 8012194:	2b01      	cmp	r3, #1
 8012196:	d144      	bne.n	8012222 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	3334      	adds	r3, #52	; 0x34
 801219c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80121a0:	2100      	movs	r1, #0
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7ff fda9 	bl	8011cfa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	3334      	adds	r3, #52	; 0x34
 80121ac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80121b0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80121b4:	4618      	mov	r0, r3
 80121b6:	f7ff fd38 	bl	8011c2a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	3334      	adds	r3, #52	; 0x34
 80121be:	4921      	ldr	r1, [pc, #132]	; (8012244 <sync_fs+0xd4>)
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7ff fd4d 	bl	8011c60 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	3334      	adds	r3, #52	; 0x34
 80121ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80121ce:	491e      	ldr	r1, [pc, #120]	; (8012248 <sync_fs+0xd8>)
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7ff fd45 	bl	8011c60 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	3334      	adds	r3, #52	; 0x34
 80121da:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	695b      	ldr	r3, [r3, #20]
 80121e2:	4619      	mov	r1, r3
 80121e4:	4610      	mov	r0, r2
 80121e6:	f7ff fd3b 	bl	8011c60 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	3334      	adds	r3, #52	; 0x34
 80121ee:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	691b      	ldr	r3, [r3, #16]
 80121f6:	4619      	mov	r1, r3
 80121f8:	4610      	mov	r0, r2
 80121fa:	f7ff fd31 	bl	8011c60 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6a1b      	ldr	r3, [r3, #32]
 8012202:	1c5a      	adds	r2, r3, #1
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	7858      	ldrb	r0, [r3, #1]
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012216:	2301      	movs	r3, #1
 8012218:	f7ff fc86 	bl	8011b28 <disk_write>
			fs->fsi_flag = 0;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2200      	movs	r2, #0
 8012220:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	785b      	ldrb	r3, [r3, #1]
 8012226:	2200      	movs	r2, #0
 8012228:	2100      	movs	r1, #0
 801222a:	4618      	mov	r0, r3
 801222c:	f7ff fc9c 	bl	8011b68 <disk_ioctl>
 8012230:	4603      	mov	r3, r0
 8012232:	2b00      	cmp	r3, #0
 8012234:	d001      	beq.n	801223a <sync_fs+0xca>
 8012236:	2301      	movs	r3, #1
 8012238:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801223a:	7bfb      	ldrb	r3, [r7, #15]
}
 801223c:	4618      	mov	r0, r3
 801223e:	3710      	adds	r7, #16
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	41615252 	.word	0x41615252
 8012248:	61417272 	.word	0x61417272

0801224c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801224c:	b480      	push	{r7}
 801224e:	b083      	sub	sp, #12
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	3b02      	subs	r3, #2
 801225a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	699b      	ldr	r3, [r3, #24]
 8012260:	3b02      	subs	r3, #2
 8012262:	683a      	ldr	r2, [r7, #0]
 8012264:	429a      	cmp	r2, r3
 8012266:	d301      	bcc.n	801226c <clust2sect+0x20>
 8012268:	2300      	movs	r3, #0
 801226a:	e008      	b.n	801227e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	895b      	ldrh	r3, [r3, #10]
 8012270:	461a      	mov	r2, r3
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	fb03 f202 	mul.w	r2, r3, r2
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801227c:	4413      	add	r3, r2
}
 801227e:	4618      	mov	r0, r3
 8012280:	370c      	adds	r7, #12
 8012282:	46bd      	mov	sp, r7
 8012284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012288:	4770      	bx	lr

0801228a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801228a:	b580      	push	{r7, lr}
 801228c:	b086      	sub	sp, #24
 801228e:	af00      	add	r7, sp, #0
 8012290:	6078      	str	r0, [r7, #4]
 8012292:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	2b01      	cmp	r3, #1
 801229e:	d904      	bls.n	80122aa <get_fat+0x20>
 80122a0:	693b      	ldr	r3, [r7, #16]
 80122a2:	699b      	ldr	r3, [r3, #24]
 80122a4:	683a      	ldr	r2, [r7, #0]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d302      	bcc.n	80122b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80122aa:	2301      	movs	r3, #1
 80122ac:	617b      	str	r3, [r7, #20]
 80122ae:	e08f      	b.n	80123d0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80122b0:	f04f 33ff 	mov.w	r3, #4294967295
 80122b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	781b      	ldrb	r3, [r3, #0]
 80122ba:	2b03      	cmp	r3, #3
 80122bc:	d062      	beq.n	8012384 <get_fat+0xfa>
 80122be:	2b03      	cmp	r3, #3
 80122c0:	dc7c      	bgt.n	80123bc <get_fat+0x132>
 80122c2:	2b01      	cmp	r3, #1
 80122c4:	d002      	beq.n	80122cc <get_fat+0x42>
 80122c6:	2b02      	cmp	r3, #2
 80122c8:	d042      	beq.n	8012350 <get_fat+0xc6>
 80122ca:	e077      	b.n	80123bc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	60fb      	str	r3, [r7, #12]
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	085b      	lsrs	r3, r3, #1
 80122d4:	68fa      	ldr	r2, [r7, #12]
 80122d6:	4413      	add	r3, r2
 80122d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80122da:	693b      	ldr	r3, [r7, #16]
 80122dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	0a5b      	lsrs	r3, r3, #9
 80122e2:	4413      	add	r3, r2
 80122e4:	4619      	mov	r1, r3
 80122e6:	6938      	ldr	r0, [r7, #16]
 80122e8:	f7ff ff14 	bl	8012114 <move_window>
 80122ec:	4603      	mov	r3, r0
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d167      	bne.n	80123c2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	1c5a      	adds	r2, r3, #1
 80122f6:	60fa      	str	r2, [r7, #12]
 80122f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122fc:	693a      	ldr	r2, [r7, #16]
 80122fe:	4413      	add	r3, r2
 8012300:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012304:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012306:	693b      	ldr	r3, [r7, #16]
 8012308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	0a5b      	lsrs	r3, r3, #9
 801230e:	4413      	add	r3, r2
 8012310:	4619      	mov	r1, r3
 8012312:	6938      	ldr	r0, [r7, #16]
 8012314:	f7ff fefe 	bl	8012114 <move_window>
 8012318:	4603      	mov	r3, r0
 801231a:	2b00      	cmp	r3, #0
 801231c:	d153      	bne.n	80123c6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012324:	693a      	ldr	r2, [r7, #16]
 8012326:	4413      	add	r3, r2
 8012328:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801232c:	021b      	lsls	r3, r3, #8
 801232e:	461a      	mov	r2, r3
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	4313      	orrs	r3, r2
 8012334:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	f003 0301 	and.w	r3, r3, #1
 801233c:	2b00      	cmp	r3, #0
 801233e:	d002      	beq.n	8012346 <get_fat+0xbc>
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	091b      	lsrs	r3, r3, #4
 8012344:	e002      	b.n	801234c <get_fat+0xc2>
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801234c:	617b      	str	r3, [r7, #20]
			break;
 801234e:	e03f      	b.n	80123d0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012354:	683b      	ldr	r3, [r7, #0]
 8012356:	0a1b      	lsrs	r3, r3, #8
 8012358:	4413      	add	r3, r2
 801235a:	4619      	mov	r1, r3
 801235c:	6938      	ldr	r0, [r7, #16]
 801235e:	f7ff fed9 	bl	8012114 <move_window>
 8012362:	4603      	mov	r3, r0
 8012364:	2b00      	cmp	r3, #0
 8012366:	d130      	bne.n	80123ca <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801236e:	683b      	ldr	r3, [r7, #0]
 8012370:	005b      	lsls	r3, r3, #1
 8012372:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012376:	4413      	add	r3, r2
 8012378:	4618      	mov	r0, r3
 801237a:	f7ff fc1b 	bl	8011bb4 <ld_word>
 801237e:	4603      	mov	r3, r0
 8012380:	617b      	str	r3, [r7, #20]
			break;
 8012382:	e025      	b.n	80123d0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012384:	693b      	ldr	r3, [r7, #16]
 8012386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	09db      	lsrs	r3, r3, #7
 801238c:	4413      	add	r3, r2
 801238e:	4619      	mov	r1, r3
 8012390:	6938      	ldr	r0, [r7, #16]
 8012392:	f7ff febf 	bl	8012114 <move_window>
 8012396:	4603      	mov	r3, r0
 8012398:	2b00      	cmp	r3, #0
 801239a:	d118      	bne.n	80123ce <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801239c:	693b      	ldr	r3, [r7, #16]
 801239e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	009b      	lsls	r3, r3, #2
 80123a6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80123aa:	4413      	add	r3, r2
 80123ac:	4618      	mov	r0, r3
 80123ae:	f7ff fc19 	bl	8011be4 <ld_dword>
 80123b2:	4603      	mov	r3, r0
 80123b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80123b8:	617b      	str	r3, [r7, #20]
			break;
 80123ba:	e009      	b.n	80123d0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80123bc:	2301      	movs	r3, #1
 80123be:	617b      	str	r3, [r7, #20]
 80123c0:	e006      	b.n	80123d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80123c2:	bf00      	nop
 80123c4:	e004      	b.n	80123d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80123c6:	bf00      	nop
 80123c8:	e002      	b.n	80123d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80123ca:	bf00      	nop
 80123cc:	e000      	b.n	80123d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80123ce:	bf00      	nop
		}
	}

	return val;
 80123d0:	697b      	ldr	r3, [r7, #20]
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3718      	adds	r7, #24
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}

080123da <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80123da:	b590      	push	{r4, r7, lr}
 80123dc:	b089      	sub	sp, #36	; 0x24
 80123de:	af00      	add	r7, sp, #0
 80123e0:	60f8      	str	r0, [r7, #12]
 80123e2:	60b9      	str	r1, [r7, #8]
 80123e4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80123e6:	2302      	movs	r3, #2
 80123e8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	f240 80d9 	bls.w	80125a4 <put_fat+0x1ca>
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	699b      	ldr	r3, [r3, #24]
 80123f6:	68ba      	ldr	r2, [r7, #8]
 80123f8:	429a      	cmp	r2, r3
 80123fa:	f080 80d3 	bcs.w	80125a4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	781b      	ldrb	r3, [r3, #0]
 8012402:	2b03      	cmp	r3, #3
 8012404:	f000 8096 	beq.w	8012534 <put_fat+0x15a>
 8012408:	2b03      	cmp	r3, #3
 801240a:	f300 80cb 	bgt.w	80125a4 <put_fat+0x1ca>
 801240e:	2b01      	cmp	r3, #1
 8012410:	d002      	beq.n	8012418 <put_fat+0x3e>
 8012412:	2b02      	cmp	r3, #2
 8012414:	d06e      	beq.n	80124f4 <put_fat+0x11a>
 8012416:	e0c5      	b.n	80125a4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	61bb      	str	r3, [r7, #24]
 801241c:	69bb      	ldr	r3, [r7, #24]
 801241e:	085b      	lsrs	r3, r3, #1
 8012420:	69ba      	ldr	r2, [r7, #24]
 8012422:	4413      	add	r3, r2
 8012424:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801242a:	69bb      	ldr	r3, [r7, #24]
 801242c:	0a5b      	lsrs	r3, r3, #9
 801242e:	4413      	add	r3, r2
 8012430:	4619      	mov	r1, r3
 8012432:	68f8      	ldr	r0, [r7, #12]
 8012434:	f7ff fe6e 	bl	8012114 <move_window>
 8012438:	4603      	mov	r3, r0
 801243a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801243c:	7ffb      	ldrb	r3, [r7, #31]
 801243e:	2b00      	cmp	r3, #0
 8012440:	f040 80a9 	bne.w	8012596 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801244a:	69bb      	ldr	r3, [r7, #24]
 801244c:	1c59      	adds	r1, r3, #1
 801244e:	61b9      	str	r1, [r7, #24]
 8012450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012454:	4413      	add	r3, r2
 8012456:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	f003 0301 	and.w	r3, r3, #1
 801245e:	2b00      	cmp	r3, #0
 8012460:	d00d      	beq.n	801247e <put_fat+0xa4>
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	781b      	ldrb	r3, [r3, #0]
 8012466:	b25b      	sxtb	r3, r3
 8012468:	f003 030f 	and.w	r3, r3, #15
 801246c:	b25a      	sxtb	r2, r3
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	b2db      	uxtb	r3, r3
 8012472:	011b      	lsls	r3, r3, #4
 8012474:	b25b      	sxtb	r3, r3
 8012476:	4313      	orrs	r3, r2
 8012478:	b25b      	sxtb	r3, r3
 801247a:	b2db      	uxtb	r3, r3
 801247c:	e001      	b.n	8012482 <put_fat+0xa8>
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	b2db      	uxtb	r3, r3
 8012482:	697a      	ldr	r2, [r7, #20]
 8012484:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	2201      	movs	r2, #1
 801248a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012490:	69bb      	ldr	r3, [r7, #24]
 8012492:	0a5b      	lsrs	r3, r3, #9
 8012494:	4413      	add	r3, r2
 8012496:	4619      	mov	r1, r3
 8012498:	68f8      	ldr	r0, [r7, #12]
 801249a:	f7ff fe3b 	bl	8012114 <move_window>
 801249e:	4603      	mov	r3, r0
 80124a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80124a2:	7ffb      	ldrb	r3, [r7, #31]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d178      	bne.n	801259a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80124ae:	69bb      	ldr	r3, [r7, #24]
 80124b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124b4:	4413      	add	r3, r2
 80124b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	f003 0301 	and.w	r3, r3, #1
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d003      	beq.n	80124ca <put_fat+0xf0>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	091b      	lsrs	r3, r3, #4
 80124c6:	b2db      	uxtb	r3, r3
 80124c8:	e00e      	b.n	80124e8 <put_fat+0x10e>
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	b25b      	sxtb	r3, r3
 80124d0:	f023 030f 	bic.w	r3, r3, #15
 80124d4:	b25a      	sxtb	r2, r3
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	0a1b      	lsrs	r3, r3, #8
 80124da:	b25b      	sxtb	r3, r3
 80124dc:	f003 030f 	and.w	r3, r3, #15
 80124e0:	b25b      	sxtb	r3, r3
 80124e2:	4313      	orrs	r3, r2
 80124e4:	b25b      	sxtb	r3, r3
 80124e6:	b2db      	uxtb	r3, r3
 80124e8:	697a      	ldr	r2, [r7, #20]
 80124ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	2201      	movs	r2, #1
 80124f0:	70da      	strb	r2, [r3, #3]
			break;
 80124f2:	e057      	b.n	80125a4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	0a1b      	lsrs	r3, r3, #8
 80124fc:	4413      	add	r3, r2
 80124fe:	4619      	mov	r1, r3
 8012500:	68f8      	ldr	r0, [r7, #12]
 8012502:	f7ff fe07 	bl	8012114 <move_window>
 8012506:	4603      	mov	r3, r0
 8012508:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801250a:	7ffb      	ldrb	r3, [r7, #31]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d146      	bne.n	801259e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	005b      	lsls	r3, r3, #1
 801251a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801251e:	4413      	add	r3, r2
 8012520:	687a      	ldr	r2, [r7, #4]
 8012522:	b292      	uxth	r2, r2
 8012524:	4611      	mov	r1, r2
 8012526:	4618      	mov	r0, r3
 8012528:	f7ff fb7f 	bl	8011c2a <st_word>
			fs->wflag = 1;
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	2201      	movs	r2, #1
 8012530:	70da      	strb	r2, [r3, #3]
			break;
 8012532:	e037      	b.n	80125a4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	09db      	lsrs	r3, r3, #7
 801253c:	4413      	add	r3, r2
 801253e:	4619      	mov	r1, r3
 8012540:	68f8      	ldr	r0, [r7, #12]
 8012542:	f7ff fde7 	bl	8012114 <move_window>
 8012546:	4603      	mov	r3, r0
 8012548:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801254a:	7ffb      	ldrb	r3, [r7, #31]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d128      	bne.n	80125a2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801255c:	68bb      	ldr	r3, [r7, #8]
 801255e:	009b      	lsls	r3, r3, #2
 8012560:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012564:	4413      	add	r3, r2
 8012566:	4618      	mov	r0, r3
 8012568:	f7ff fb3c 	bl	8011be4 <ld_dword>
 801256c:	4603      	mov	r3, r0
 801256e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012572:	4323      	orrs	r3, r4
 8012574:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	009b      	lsls	r3, r3, #2
 8012580:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012584:	4413      	add	r3, r2
 8012586:	6879      	ldr	r1, [r7, #4]
 8012588:	4618      	mov	r0, r3
 801258a:	f7ff fb69 	bl	8011c60 <st_dword>
			fs->wflag = 1;
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	2201      	movs	r2, #1
 8012592:	70da      	strb	r2, [r3, #3]
			break;
 8012594:	e006      	b.n	80125a4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012596:	bf00      	nop
 8012598:	e004      	b.n	80125a4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801259a:	bf00      	nop
 801259c:	e002      	b.n	80125a4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801259e:	bf00      	nop
 80125a0:	e000      	b.n	80125a4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80125a2:	bf00      	nop
		}
	}
	return res;
 80125a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3724      	adds	r7, #36	; 0x24
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd90      	pop	{r4, r7, pc}

080125ae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80125ae:	b580      	push	{r7, lr}
 80125b0:	b088      	sub	sp, #32
 80125b2:	af00      	add	r7, sp, #0
 80125b4:	60f8      	str	r0, [r7, #12]
 80125b6:	60b9      	str	r1, [r7, #8]
 80125b8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80125ba:	2300      	movs	r3, #0
 80125bc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	2b01      	cmp	r3, #1
 80125c8:	d904      	bls.n	80125d4 <remove_chain+0x26>
 80125ca:	69bb      	ldr	r3, [r7, #24]
 80125cc:	699b      	ldr	r3, [r3, #24]
 80125ce:	68ba      	ldr	r2, [r7, #8]
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d301      	bcc.n	80125d8 <remove_chain+0x2a>
 80125d4:	2302      	movs	r3, #2
 80125d6:	e04b      	b.n	8012670 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d00c      	beq.n	80125f8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80125de:	f04f 32ff 	mov.w	r2, #4294967295
 80125e2:	6879      	ldr	r1, [r7, #4]
 80125e4:	69b8      	ldr	r0, [r7, #24]
 80125e6:	f7ff fef8 	bl	80123da <put_fat>
 80125ea:	4603      	mov	r3, r0
 80125ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80125ee:	7ffb      	ldrb	r3, [r7, #31]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d001      	beq.n	80125f8 <remove_chain+0x4a>
 80125f4:	7ffb      	ldrb	r3, [r7, #31]
 80125f6:	e03b      	b.n	8012670 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80125f8:	68b9      	ldr	r1, [r7, #8]
 80125fa:	68f8      	ldr	r0, [r7, #12]
 80125fc:	f7ff fe45 	bl	801228a <get_fat>
 8012600:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012602:	697b      	ldr	r3, [r7, #20]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d031      	beq.n	801266c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	2b01      	cmp	r3, #1
 801260c:	d101      	bne.n	8012612 <remove_chain+0x64>
 801260e:	2302      	movs	r3, #2
 8012610:	e02e      	b.n	8012670 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012618:	d101      	bne.n	801261e <remove_chain+0x70>
 801261a:	2301      	movs	r3, #1
 801261c:	e028      	b.n	8012670 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801261e:	2200      	movs	r2, #0
 8012620:	68b9      	ldr	r1, [r7, #8]
 8012622:	69b8      	ldr	r0, [r7, #24]
 8012624:	f7ff fed9 	bl	80123da <put_fat>
 8012628:	4603      	mov	r3, r0
 801262a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801262c:	7ffb      	ldrb	r3, [r7, #31]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d001      	beq.n	8012636 <remove_chain+0x88>
 8012632:	7ffb      	ldrb	r3, [r7, #31]
 8012634:	e01c      	b.n	8012670 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012636:	69bb      	ldr	r3, [r7, #24]
 8012638:	695a      	ldr	r2, [r3, #20]
 801263a:	69bb      	ldr	r3, [r7, #24]
 801263c:	699b      	ldr	r3, [r3, #24]
 801263e:	3b02      	subs	r3, #2
 8012640:	429a      	cmp	r2, r3
 8012642:	d20b      	bcs.n	801265c <remove_chain+0xae>
			fs->free_clst++;
 8012644:	69bb      	ldr	r3, [r7, #24]
 8012646:	695b      	ldr	r3, [r3, #20]
 8012648:	1c5a      	adds	r2, r3, #1
 801264a:	69bb      	ldr	r3, [r7, #24]
 801264c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801264e:	69bb      	ldr	r3, [r7, #24]
 8012650:	791b      	ldrb	r3, [r3, #4]
 8012652:	f043 0301 	orr.w	r3, r3, #1
 8012656:	b2da      	uxtb	r2, r3
 8012658:	69bb      	ldr	r3, [r7, #24]
 801265a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012660:	69bb      	ldr	r3, [r7, #24]
 8012662:	699b      	ldr	r3, [r3, #24]
 8012664:	68ba      	ldr	r2, [r7, #8]
 8012666:	429a      	cmp	r2, r3
 8012668:	d3c6      	bcc.n	80125f8 <remove_chain+0x4a>
 801266a:	e000      	b.n	801266e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801266c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801266e:	2300      	movs	r3, #0
}
 8012670:	4618      	mov	r0, r3
 8012672:	3720      	adds	r7, #32
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}

08012678 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b088      	sub	sp, #32
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
 8012680:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d10d      	bne.n	80126aa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801268e:	693b      	ldr	r3, [r7, #16]
 8012690:	691b      	ldr	r3, [r3, #16]
 8012692:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012694:	69bb      	ldr	r3, [r7, #24]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d004      	beq.n	80126a4 <create_chain+0x2c>
 801269a:	693b      	ldr	r3, [r7, #16]
 801269c:	699b      	ldr	r3, [r3, #24]
 801269e:	69ba      	ldr	r2, [r7, #24]
 80126a0:	429a      	cmp	r2, r3
 80126a2:	d31b      	bcc.n	80126dc <create_chain+0x64>
 80126a4:	2301      	movs	r3, #1
 80126a6:	61bb      	str	r3, [r7, #24]
 80126a8:	e018      	b.n	80126dc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80126aa:	6839      	ldr	r1, [r7, #0]
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f7ff fdec 	bl	801228a <get_fat>
 80126b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	d801      	bhi.n	80126be <create_chain+0x46>
 80126ba:	2301      	movs	r3, #1
 80126bc:	e070      	b.n	80127a0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126c4:	d101      	bne.n	80126ca <create_chain+0x52>
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	e06a      	b.n	80127a0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80126ca:	693b      	ldr	r3, [r7, #16]
 80126cc:	699b      	ldr	r3, [r3, #24]
 80126ce:	68fa      	ldr	r2, [r7, #12]
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d201      	bcs.n	80126d8 <create_chain+0x60>
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	e063      	b.n	80127a0 <create_chain+0x128>
		scl = clst;
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	3301      	adds	r3, #1
 80126e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80126e6:	693b      	ldr	r3, [r7, #16]
 80126e8:	699b      	ldr	r3, [r3, #24]
 80126ea:	69fa      	ldr	r2, [r7, #28]
 80126ec:	429a      	cmp	r2, r3
 80126ee:	d307      	bcc.n	8012700 <create_chain+0x88>
				ncl = 2;
 80126f0:	2302      	movs	r3, #2
 80126f2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80126f4:	69fa      	ldr	r2, [r7, #28]
 80126f6:	69bb      	ldr	r3, [r7, #24]
 80126f8:	429a      	cmp	r2, r3
 80126fa:	d901      	bls.n	8012700 <create_chain+0x88>
 80126fc:	2300      	movs	r3, #0
 80126fe:	e04f      	b.n	80127a0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012700:	69f9      	ldr	r1, [r7, #28]
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f7ff fdc1 	bl	801228a <get_fat>
 8012708:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00e      	beq.n	801272e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	2b01      	cmp	r3, #1
 8012714:	d003      	beq.n	801271e <create_chain+0xa6>
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	f1b3 3fff 	cmp.w	r3, #4294967295
 801271c:	d101      	bne.n	8012722 <create_chain+0xaa>
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	e03e      	b.n	80127a0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012722:	69fa      	ldr	r2, [r7, #28]
 8012724:	69bb      	ldr	r3, [r7, #24]
 8012726:	429a      	cmp	r2, r3
 8012728:	d1da      	bne.n	80126e0 <create_chain+0x68>
 801272a:	2300      	movs	r3, #0
 801272c:	e038      	b.n	80127a0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801272e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012730:	f04f 32ff 	mov.w	r2, #4294967295
 8012734:	69f9      	ldr	r1, [r7, #28]
 8012736:	6938      	ldr	r0, [r7, #16]
 8012738:	f7ff fe4f 	bl	80123da <put_fat>
 801273c:	4603      	mov	r3, r0
 801273e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012740:	7dfb      	ldrb	r3, [r7, #23]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d109      	bne.n	801275a <create_chain+0xe2>
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d006      	beq.n	801275a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801274c:	69fa      	ldr	r2, [r7, #28]
 801274e:	6839      	ldr	r1, [r7, #0]
 8012750:	6938      	ldr	r0, [r7, #16]
 8012752:	f7ff fe42 	bl	80123da <put_fat>
 8012756:	4603      	mov	r3, r0
 8012758:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801275a:	7dfb      	ldrb	r3, [r7, #23]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d116      	bne.n	801278e <create_chain+0x116>
		fs->last_clst = ncl;
 8012760:	693b      	ldr	r3, [r7, #16]
 8012762:	69fa      	ldr	r2, [r7, #28]
 8012764:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	695a      	ldr	r2, [r3, #20]
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	699b      	ldr	r3, [r3, #24]
 801276e:	3b02      	subs	r3, #2
 8012770:	429a      	cmp	r2, r3
 8012772:	d804      	bhi.n	801277e <create_chain+0x106>
 8012774:	693b      	ldr	r3, [r7, #16]
 8012776:	695b      	ldr	r3, [r3, #20]
 8012778:	1e5a      	subs	r2, r3, #1
 801277a:	693b      	ldr	r3, [r7, #16]
 801277c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801277e:	693b      	ldr	r3, [r7, #16]
 8012780:	791b      	ldrb	r3, [r3, #4]
 8012782:	f043 0301 	orr.w	r3, r3, #1
 8012786:	b2da      	uxtb	r2, r3
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	711a      	strb	r2, [r3, #4]
 801278c:	e007      	b.n	801279e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801278e:	7dfb      	ldrb	r3, [r7, #23]
 8012790:	2b01      	cmp	r3, #1
 8012792:	d102      	bne.n	801279a <create_chain+0x122>
 8012794:	f04f 33ff 	mov.w	r3, #4294967295
 8012798:	e000      	b.n	801279c <create_chain+0x124>
 801279a:	2301      	movs	r3, #1
 801279c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801279e:	69fb      	ldr	r3, [r7, #28]
}
 80127a0:	4618      	mov	r0, r3
 80127a2:	3720      	adds	r7, #32
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}

080127a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80127a8:	b480      	push	{r7}
 80127aa:	b087      	sub	sp, #28
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
 80127b0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127bc:	3304      	adds	r3, #4
 80127be:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	0a5b      	lsrs	r3, r3, #9
 80127c4:	68fa      	ldr	r2, [r7, #12]
 80127c6:	8952      	ldrh	r2, [r2, #10]
 80127c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80127cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	1d1a      	adds	r2, r3, #4
 80127d2:	613a      	str	r2, [r7, #16]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d101      	bne.n	80127e2 <clmt_clust+0x3a>
 80127de:	2300      	movs	r3, #0
 80127e0:	e010      	b.n	8012804 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80127e2:	697a      	ldr	r2, [r7, #20]
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d307      	bcc.n	80127fa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80127ea:	697a      	ldr	r2, [r7, #20]
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	1ad3      	subs	r3, r2, r3
 80127f0:	617b      	str	r3, [r7, #20]
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	3304      	adds	r3, #4
 80127f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80127f8:	e7e9      	b.n	80127ce <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80127fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80127fc:	693b      	ldr	r3, [r7, #16]
 80127fe:	681a      	ldr	r2, [r3, #0]
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	4413      	add	r3, r2
}
 8012804:	4618      	mov	r0, r3
 8012806:	371c      	adds	r7, #28
 8012808:	46bd      	mov	sp, r7
 801280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280e:	4770      	bx	lr

08012810 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b086      	sub	sp, #24
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012826:	d204      	bcs.n	8012832 <dir_sdi+0x22>
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	f003 031f 	and.w	r3, r3, #31
 801282e:	2b00      	cmp	r3, #0
 8012830:	d001      	beq.n	8012836 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012832:	2302      	movs	r3, #2
 8012834:	e063      	b.n	80128fe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	683a      	ldr	r2, [r7, #0]
 801283a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	689b      	ldr	r3, [r3, #8]
 8012840:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012842:	697b      	ldr	r3, [r7, #20]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d106      	bne.n	8012856 <dir_sdi+0x46>
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	781b      	ldrb	r3, [r3, #0]
 801284c:	2b02      	cmp	r3, #2
 801284e:	d902      	bls.n	8012856 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012854:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d10c      	bne.n	8012876 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	095b      	lsrs	r3, r3, #5
 8012860:	693a      	ldr	r2, [r7, #16]
 8012862:	8912      	ldrh	r2, [r2, #8]
 8012864:	4293      	cmp	r3, r2
 8012866:	d301      	bcc.n	801286c <dir_sdi+0x5c>
 8012868:	2302      	movs	r3, #2
 801286a:	e048      	b.n	80128fe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801286c:	693b      	ldr	r3, [r7, #16]
 801286e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	61da      	str	r2, [r3, #28]
 8012874:	e029      	b.n	80128ca <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012876:	693b      	ldr	r3, [r7, #16]
 8012878:	895b      	ldrh	r3, [r3, #10]
 801287a:	025b      	lsls	r3, r3, #9
 801287c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801287e:	e019      	b.n	80128b4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	6979      	ldr	r1, [r7, #20]
 8012884:	4618      	mov	r0, r3
 8012886:	f7ff fd00 	bl	801228a <get_fat>
 801288a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012892:	d101      	bne.n	8012898 <dir_sdi+0x88>
 8012894:	2301      	movs	r3, #1
 8012896:	e032      	b.n	80128fe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012898:	697b      	ldr	r3, [r7, #20]
 801289a:	2b01      	cmp	r3, #1
 801289c:	d904      	bls.n	80128a8 <dir_sdi+0x98>
 801289e:	693b      	ldr	r3, [r7, #16]
 80128a0:	699b      	ldr	r3, [r3, #24]
 80128a2:	697a      	ldr	r2, [r7, #20]
 80128a4:	429a      	cmp	r2, r3
 80128a6:	d301      	bcc.n	80128ac <dir_sdi+0x9c>
 80128a8:	2302      	movs	r3, #2
 80128aa:	e028      	b.n	80128fe <dir_sdi+0xee>
			ofs -= csz;
 80128ac:	683a      	ldr	r2, [r7, #0]
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	1ad3      	subs	r3, r2, r3
 80128b2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80128b4:	683a      	ldr	r2, [r7, #0]
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	429a      	cmp	r2, r3
 80128ba:	d2e1      	bcs.n	8012880 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80128bc:	6979      	ldr	r1, [r7, #20]
 80128be:	6938      	ldr	r0, [r7, #16]
 80128c0:	f7ff fcc4 	bl	801224c <clust2sect>
 80128c4:	4602      	mov	r2, r0
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	697a      	ldr	r2, [r7, #20]
 80128ce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	69db      	ldr	r3, [r3, #28]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d101      	bne.n	80128dc <dir_sdi+0xcc>
 80128d8:	2302      	movs	r3, #2
 80128da:	e010      	b.n	80128fe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	69da      	ldr	r2, [r3, #28]
 80128e0:	683b      	ldr	r3, [r7, #0]
 80128e2:	0a5b      	lsrs	r3, r3, #9
 80128e4:	441a      	add	r2, r3
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80128ea:	693b      	ldr	r3, [r7, #16]
 80128ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128f6:	441a      	add	r2, r3
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80128fc:	2300      	movs	r3, #0
}
 80128fe:	4618      	mov	r0, r3
 8012900:	3718      	adds	r7, #24
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}

08012906 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012906:	b580      	push	{r7, lr}
 8012908:	b086      	sub	sp, #24
 801290a:	af00      	add	r7, sp, #0
 801290c:	6078      	str	r0, [r7, #4]
 801290e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	695b      	ldr	r3, [r3, #20]
 801291a:	3320      	adds	r3, #32
 801291c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	69db      	ldr	r3, [r3, #28]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d003      	beq.n	801292e <dir_next+0x28>
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801292c:	d301      	bcc.n	8012932 <dir_next+0x2c>
 801292e:	2304      	movs	r3, #4
 8012930:	e0aa      	b.n	8012a88 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012932:	68bb      	ldr	r3, [r7, #8]
 8012934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012938:	2b00      	cmp	r3, #0
 801293a:	f040 8098 	bne.w	8012a6e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	69db      	ldr	r3, [r3, #28]
 8012942:	1c5a      	adds	r2, r3, #1
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	699b      	ldr	r3, [r3, #24]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d10b      	bne.n	8012968 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	095b      	lsrs	r3, r3, #5
 8012954:	68fa      	ldr	r2, [r7, #12]
 8012956:	8912      	ldrh	r2, [r2, #8]
 8012958:	4293      	cmp	r3, r2
 801295a:	f0c0 8088 	bcc.w	8012a6e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	2200      	movs	r2, #0
 8012962:	61da      	str	r2, [r3, #28]
 8012964:	2304      	movs	r3, #4
 8012966:	e08f      	b.n	8012a88 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012968:	68bb      	ldr	r3, [r7, #8]
 801296a:	0a5b      	lsrs	r3, r3, #9
 801296c:	68fa      	ldr	r2, [r7, #12]
 801296e:	8952      	ldrh	r2, [r2, #10]
 8012970:	3a01      	subs	r2, #1
 8012972:	4013      	ands	r3, r2
 8012974:	2b00      	cmp	r3, #0
 8012976:	d17a      	bne.n	8012a6e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012978:	687a      	ldr	r2, [r7, #4]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	699b      	ldr	r3, [r3, #24]
 801297e:	4619      	mov	r1, r3
 8012980:	4610      	mov	r0, r2
 8012982:	f7ff fc82 	bl	801228a <get_fat>
 8012986:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012988:	697b      	ldr	r3, [r7, #20]
 801298a:	2b01      	cmp	r3, #1
 801298c:	d801      	bhi.n	8012992 <dir_next+0x8c>
 801298e:	2302      	movs	r3, #2
 8012990:	e07a      	b.n	8012a88 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012992:	697b      	ldr	r3, [r7, #20]
 8012994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012998:	d101      	bne.n	801299e <dir_next+0x98>
 801299a:	2301      	movs	r3, #1
 801299c:	e074      	b.n	8012a88 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	699b      	ldr	r3, [r3, #24]
 80129a2:	697a      	ldr	r2, [r7, #20]
 80129a4:	429a      	cmp	r2, r3
 80129a6:	d358      	bcc.n	8012a5a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d104      	bne.n	80129b8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2200      	movs	r2, #0
 80129b2:	61da      	str	r2, [r3, #28]
 80129b4:	2304      	movs	r3, #4
 80129b6:	e067      	b.n	8012a88 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80129b8:	687a      	ldr	r2, [r7, #4]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	699b      	ldr	r3, [r3, #24]
 80129be:	4619      	mov	r1, r3
 80129c0:	4610      	mov	r0, r2
 80129c2:	f7ff fe59 	bl	8012678 <create_chain>
 80129c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d101      	bne.n	80129d2 <dir_next+0xcc>
 80129ce:	2307      	movs	r3, #7
 80129d0:	e05a      	b.n	8012a88 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	2b01      	cmp	r3, #1
 80129d6:	d101      	bne.n	80129dc <dir_next+0xd6>
 80129d8:	2302      	movs	r3, #2
 80129da:	e055      	b.n	8012a88 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80129dc:	697b      	ldr	r3, [r7, #20]
 80129de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129e2:	d101      	bne.n	80129e8 <dir_next+0xe2>
 80129e4:	2301      	movs	r3, #1
 80129e6:	e04f      	b.n	8012a88 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80129e8:	68f8      	ldr	r0, [r7, #12]
 80129ea:	f7ff fb4f 	bl	801208c <sync_window>
 80129ee:	4603      	mov	r3, r0
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d001      	beq.n	80129f8 <dir_next+0xf2>
 80129f4:	2301      	movs	r3, #1
 80129f6:	e047      	b.n	8012a88 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	3334      	adds	r3, #52	; 0x34
 80129fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012a00:	2100      	movs	r1, #0
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7ff f979 	bl	8011cfa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012a08:	2300      	movs	r3, #0
 8012a0a:	613b      	str	r3, [r7, #16]
 8012a0c:	6979      	ldr	r1, [r7, #20]
 8012a0e:	68f8      	ldr	r0, [r7, #12]
 8012a10:	f7ff fc1c 	bl	801224c <clust2sect>
 8012a14:	4602      	mov	r2, r0
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	631a      	str	r2, [r3, #48]	; 0x30
 8012a1a:	e012      	b.n	8012a42 <dir_next+0x13c>
						fs->wflag = 1;
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	2201      	movs	r2, #1
 8012a20:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012a22:	68f8      	ldr	r0, [r7, #12]
 8012a24:	f7ff fb32 	bl	801208c <sync_window>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d001      	beq.n	8012a32 <dir_next+0x12c>
 8012a2e:	2301      	movs	r3, #1
 8012a30:	e02a      	b.n	8012a88 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	3301      	adds	r3, #1
 8012a36:	613b      	str	r3, [r7, #16]
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a3c:	1c5a      	adds	r2, r3, #1
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	631a      	str	r2, [r3, #48]	; 0x30
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	895b      	ldrh	r3, [r3, #10]
 8012a46:	461a      	mov	r2, r3
 8012a48:	693b      	ldr	r3, [r7, #16]
 8012a4a:	4293      	cmp	r3, r2
 8012a4c:	d3e6      	bcc.n	8012a1c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012a52:	693b      	ldr	r3, [r7, #16]
 8012a54:	1ad2      	subs	r2, r2, r3
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	697a      	ldr	r2, [r7, #20]
 8012a5e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012a60:	6979      	ldr	r1, [r7, #20]
 8012a62:	68f8      	ldr	r0, [r7, #12]
 8012a64:	f7ff fbf2 	bl	801224c <clust2sect>
 8012a68:	4602      	mov	r2, r0
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	68ba      	ldr	r2, [r7, #8]
 8012a72:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a80:	441a      	add	r2, r3
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012a86:	2300      	movs	r3, #0
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3718      	adds	r7, #24
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}

08012a90 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b086      	sub	sp, #24
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012aa0:	2100      	movs	r1, #0
 8012aa2:	6878      	ldr	r0, [r7, #4]
 8012aa4:	f7ff feb4 	bl	8012810 <dir_sdi>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012aac:	7dfb      	ldrb	r3, [r7, #23]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d12b      	bne.n	8012b0a <dir_alloc+0x7a>
		n = 0;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	69db      	ldr	r3, [r3, #28]
 8012aba:	4619      	mov	r1, r3
 8012abc:	68f8      	ldr	r0, [r7, #12]
 8012abe:	f7ff fb29 	bl	8012114 <move_window>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012ac6:	7dfb      	ldrb	r3, [r7, #23]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d11d      	bne.n	8012b08 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6a1b      	ldr	r3, [r3, #32]
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	2be5      	cmp	r3, #229	; 0xe5
 8012ad4:	d004      	beq.n	8012ae0 <dir_alloc+0x50>
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6a1b      	ldr	r3, [r3, #32]
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d107      	bne.n	8012af0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012ae0:	693b      	ldr	r3, [r7, #16]
 8012ae2:	3301      	adds	r3, #1
 8012ae4:	613b      	str	r3, [r7, #16]
 8012ae6:	693a      	ldr	r2, [r7, #16]
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	429a      	cmp	r2, r3
 8012aec:	d102      	bne.n	8012af4 <dir_alloc+0x64>
 8012aee:	e00c      	b.n	8012b0a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012af0:	2300      	movs	r3, #0
 8012af2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012af4:	2101      	movs	r1, #1
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f7ff ff05 	bl	8012906 <dir_next>
 8012afc:	4603      	mov	r3, r0
 8012afe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012b00:	7dfb      	ldrb	r3, [r7, #23]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d0d7      	beq.n	8012ab6 <dir_alloc+0x26>
 8012b06:	e000      	b.n	8012b0a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012b08:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012b0a:	7dfb      	ldrb	r3, [r7, #23]
 8012b0c:	2b04      	cmp	r3, #4
 8012b0e:	d101      	bne.n	8012b14 <dir_alloc+0x84>
 8012b10:	2307      	movs	r3, #7
 8012b12:	75fb      	strb	r3, [r7, #23]
	return res;
 8012b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	3718      	adds	r7, #24
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}

08012b1e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012b1e:	b580      	push	{r7, lr}
 8012b20:	b084      	sub	sp, #16
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	6078      	str	r0, [r7, #4]
 8012b26:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	331a      	adds	r3, #26
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7ff f841 	bl	8011bb4 <ld_word>
 8012b32:	4603      	mov	r3, r0
 8012b34:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	2b03      	cmp	r3, #3
 8012b3c:	d109      	bne.n	8012b52 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012b3e:	683b      	ldr	r3, [r7, #0]
 8012b40:	3314      	adds	r3, #20
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7ff f836 	bl	8011bb4 <ld_word>
 8012b48:	4603      	mov	r3, r0
 8012b4a:	041b      	lsls	r3, r3, #16
 8012b4c:	68fa      	ldr	r2, [r7, #12]
 8012b4e:	4313      	orrs	r3, r2
 8012b50:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012b52:	68fb      	ldr	r3, [r7, #12]
}
 8012b54:	4618      	mov	r0, r3
 8012b56:	3710      	adds	r7, #16
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	bd80      	pop	{r7, pc}

08012b5c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b084      	sub	sp, #16
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	60f8      	str	r0, [r7, #12]
 8012b64:	60b9      	str	r1, [r7, #8]
 8012b66:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	331a      	adds	r3, #26
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	b292      	uxth	r2, r2
 8012b70:	4611      	mov	r1, r2
 8012b72:	4618      	mov	r0, r3
 8012b74:	f7ff f859 	bl	8011c2a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	781b      	ldrb	r3, [r3, #0]
 8012b7c:	2b03      	cmp	r3, #3
 8012b7e:	d109      	bne.n	8012b94 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	f103 0214 	add.w	r2, r3, #20
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	0c1b      	lsrs	r3, r3, #16
 8012b8a:	b29b      	uxth	r3, r3
 8012b8c:	4619      	mov	r1, r3
 8012b8e:	4610      	mov	r0, r2
 8012b90:	f7ff f84b 	bl	8011c2a <st_word>
	}
}
 8012b94:	bf00      	nop
 8012b96:	3710      	adds	r7, #16
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}

08012b9c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8012b9c:	b590      	push	{r4, r7, lr}
 8012b9e:	b087      	sub	sp, #28
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	331a      	adds	r3, #26
 8012baa:	4618      	mov	r0, r3
 8012bac:	f7ff f802 	bl	8011bb4 <ld_word>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d001      	beq.n	8012bba <cmp_lfn+0x1e>
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	e059      	b.n	8012c6e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012bba:	683b      	ldr	r3, [r7, #0]
 8012bbc:	781b      	ldrb	r3, [r3, #0]
 8012bbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012bc2:	1e5a      	subs	r2, r3, #1
 8012bc4:	4613      	mov	r3, r2
 8012bc6:	005b      	lsls	r3, r3, #1
 8012bc8:	4413      	add	r3, r2
 8012bca:	009b      	lsls	r3, r3, #2
 8012bcc:	4413      	add	r3, r2
 8012bce:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012bd0:	2301      	movs	r3, #1
 8012bd2:	81fb      	strh	r3, [r7, #14]
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	613b      	str	r3, [r7, #16]
 8012bd8:	e033      	b.n	8012c42 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012bda:	4a27      	ldr	r2, [pc, #156]	; (8012c78 <cmp_lfn+0xdc>)
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	4413      	add	r3, r2
 8012be0:	781b      	ldrb	r3, [r3, #0]
 8012be2:	461a      	mov	r2, r3
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	4413      	add	r3, r2
 8012be8:	4618      	mov	r0, r3
 8012bea:	f7fe ffe3 	bl	8011bb4 <ld_word>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012bf2:	89fb      	ldrh	r3, [r7, #14]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d01a      	beq.n	8012c2e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	2bfe      	cmp	r3, #254	; 0xfe
 8012bfc:	d812      	bhi.n	8012c24 <cmp_lfn+0x88>
 8012bfe:	89bb      	ldrh	r3, [r7, #12]
 8012c00:	4618      	mov	r0, r3
 8012c02:	f002 fea1 	bl	8015948 <ff_wtoupper>
 8012c06:	4603      	mov	r3, r0
 8012c08:	461c      	mov	r4, r3
 8012c0a:	697b      	ldr	r3, [r7, #20]
 8012c0c:	1c5a      	adds	r2, r3, #1
 8012c0e:	617a      	str	r2, [r7, #20]
 8012c10:	005b      	lsls	r3, r3, #1
 8012c12:	687a      	ldr	r2, [r7, #4]
 8012c14:	4413      	add	r3, r2
 8012c16:	881b      	ldrh	r3, [r3, #0]
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f002 fe95 	bl	8015948 <ff_wtoupper>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	429c      	cmp	r4, r3
 8012c22:	d001      	beq.n	8012c28 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8012c24:	2300      	movs	r3, #0
 8012c26:	e022      	b.n	8012c6e <cmp_lfn+0xd2>
			}
			wc = uc;
 8012c28:	89bb      	ldrh	r3, [r7, #12]
 8012c2a:	81fb      	strh	r3, [r7, #14]
 8012c2c:	e006      	b.n	8012c3c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012c2e:	89bb      	ldrh	r3, [r7, #12]
 8012c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c34:	4293      	cmp	r3, r2
 8012c36:	d001      	beq.n	8012c3c <cmp_lfn+0xa0>
 8012c38:	2300      	movs	r3, #0
 8012c3a:	e018      	b.n	8012c6e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012c3c:	693b      	ldr	r3, [r7, #16]
 8012c3e:	3301      	adds	r3, #1
 8012c40:	613b      	str	r3, [r7, #16]
 8012c42:	693b      	ldr	r3, [r7, #16]
 8012c44:	2b0c      	cmp	r3, #12
 8012c46:	d9c8      	bls.n	8012bda <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	781b      	ldrb	r3, [r3, #0]
 8012c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d00b      	beq.n	8012c6c <cmp_lfn+0xd0>
 8012c54:	89fb      	ldrh	r3, [r7, #14]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d008      	beq.n	8012c6c <cmp_lfn+0xd0>
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	005b      	lsls	r3, r3, #1
 8012c5e:	687a      	ldr	r2, [r7, #4]
 8012c60:	4413      	add	r3, r2
 8012c62:	881b      	ldrh	r3, [r3, #0]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d001      	beq.n	8012c6c <cmp_lfn+0xd0>
 8012c68:	2300      	movs	r3, #0
 8012c6a:	e000      	b.n	8012c6e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8012c6c:	2301      	movs	r3, #1
}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	371c      	adds	r7, #28
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd90      	pop	{r4, r7, pc}
 8012c76:	bf00      	nop
 8012c78:	080285dc 	.word	0x080285dc

08012c7c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b086      	sub	sp, #24
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
 8012c84:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	331a      	adds	r3, #26
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7fe ff92 	bl	8011bb4 <ld_word>
 8012c90:	4603      	mov	r3, r0
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d001      	beq.n	8012c9a <pick_lfn+0x1e>
 8012c96:	2300      	movs	r3, #0
 8012c98:	e04d      	b.n	8012d36 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012ca2:	1e5a      	subs	r2, r3, #1
 8012ca4:	4613      	mov	r3, r2
 8012ca6:	005b      	lsls	r3, r3, #1
 8012ca8:	4413      	add	r3, r2
 8012caa:	009b      	lsls	r3, r3, #2
 8012cac:	4413      	add	r3, r2
 8012cae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	81fb      	strh	r3, [r7, #14]
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	613b      	str	r3, [r7, #16]
 8012cb8:	e028      	b.n	8012d0c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012cba:	4a21      	ldr	r2, [pc, #132]	; (8012d40 <pick_lfn+0xc4>)
 8012cbc:	693b      	ldr	r3, [r7, #16]
 8012cbe:	4413      	add	r3, r2
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	4413      	add	r3, r2
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f7fe ff73 	bl	8011bb4 <ld_word>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012cd2:	89fb      	ldrh	r3, [r7, #14]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d00f      	beq.n	8012cf8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	2bfe      	cmp	r3, #254	; 0xfe
 8012cdc:	d901      	bls.n	8012ce2 <pick_lfn+0x66>
 8012cde:	2300      	movs	r3, #0
 8012ce0:	e029      	b.n	8012d36 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012ce2:	89bb      	ldrh	r3, [r7, #12]
 8012ce4:	81fb      	strh	r3, [r7, #14]
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	1c5a      	adds	r2, r3, #1
 8012cea:	617a      	str	r2, [r7, #20]
 8012cec:	005b      	lsls	r3, r3, #1
 8012cee:	687a      	ldr	r2, [r7, #4]
 8012cf0:	4413      	add	r3, r2
 8012cf2:	89fa      	ldrh	r2, [r7, #14]
 8012cf4:	801a      	strh	r2, [r3, #0]
 8012cf6:	e006      	b.n	8012d06 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012cf8:	89bb      	ldrh	r3, [r7, #12]
 8012cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012cfe:	4293      	cmp	r3, r2
 8012d00:	d001      	beq.n	8012d06 <pick_lfn+0x8a>
 8012d02:	2300      	movs	r3, #0
 8012d04:	e017      	b.n	8012d36 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012d06:	693b      	ldr	r3, [r7, #16]
 8012d08:	3301      	adds	r3, #1
 8012d0a:	613b      	str	r3, [r7, #16]
 8012d0c:	693b      	ldr	r3, [r7, #16]
 8012d0e:	2b0c      	cmp	r3, #12
 8012d10:	d9d3      	bls.n	8012cba <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	781b      	ldrb	r3, [r3, #0]
 8012d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d00a      	beq.n	8012d34 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	2bfe      	cmp	r3, #254	; 0xfe
 8012d22:	d901      	bls.n	8012d28 <pick_lfn+0xac>
 8012d24:	2300      	movs	r3, #0
 8012d26:	e006      	b.n	8012d36 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8012d28:	697b      	ldr	r3, [r7, #20]
 8012d2a:	005b      	lsls	r3, r3, #1
 8012d2c:	687a      	ldr	r2, [r7, #4]
 8012d2e:	4413      	add	r3, r2
 8012d30:	2200      	movs	r2, #0
 8012d32:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8012d34:	2301      	movs	r3, #1
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3718      	adds	r7, #24
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd80      	pop	{r7, pc}
 8012d3e:	bf00      	nop
 8012d40:	080285dc 	.word	0x080285dc

08012d44 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b088      	sub	sp, #32
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	60f8      	str	r0, [r7, #12]
 8012d4c:	60b9      	str	r1, [r7, #8]
 8012d4e:	4611      	mov	r1, r2
 8012d50:	461a      	mov	r2, r3
 8012d52:	460b      	mov	r3, r1
 8012d54:	71fb      	strb	r3, [r7, #7]
 8012d56:	4613      	mov	r3, r2
 8012d58:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	330d      	adds	r3, #13
 8012d5e:	79ba      	ldrb	r2, [r7, #6]
 8012d60:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	330b      	adds	r3, #11
 8012d66:	220f      	movs	r2, #15
 8012d68:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	330c      	adds	r3, #12
 8012d6e:	2200      	movs	r2, #0
 8012d70:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	331a      	adds	r3, #26
 8012d76:	2100      	movs	r1, #0
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f7fe ff56 	bl	8011c2a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8012d7e:	79fb      	ldrb	r3, [r7, #7]
 8012d80:	1e5a      	subs	r2, r3, #1
 8012d82:	4613      	mov	r3, r2
 8012d84:	005b      	lsls	r3, r3, #1
 8012d86:	4413      	add	r3, r2
 8012d88:	009b      	lsls	r3, r3, #2
 8012d8a:	4413      	add	r3, r2
 8012d8c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	82fb      	strh	r3, [r7, #22]
 8012d92:	2300      	movs	r3, #0
 8012d94:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012d96:	8afb      	ldrh	r3, [r7, #22]
 8012d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	d007      	beq.n	8012db0 <put_lfn+0x6c>
 8012da0:	69fb      	ldr	r3, [r7, #28]
 8012da2:	1c5a      	adds	r2, r3, #1
 8012da4:	61fa      	str	r2, [r7, #28]
 8012da6:	005b      	lsls	r3, r3, #1
 8012da8:	68fa      	ldr	r2, [r7, #12]
 8012daa:	4413      	add	r3, r2
 8012dac:	881b      	ldrh	r3, [r3, #0]
 8012dae:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012db0:	4a17      	ldr	r2, [pc, #92]	; (8012e10 <put_lfn+0xcc>)
 8012db2:	69bb      	ldr	r3, [r7, #24]
 8012db4:	4413      	add	r3, r2
 8012db6:	781b      	ldrb	r3, [r3, #0]
 8012db8:	461a      	mov	r2, r3
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	4413      	add	r3, r2
 8012dbe:	8afa      	ldrh	r2, [r7, #22]
 8012dc0:	4611      	mov	r1, r2
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7fe ff31 	bl	8011c2a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012dc8:	8afb      	ldrh	r3, [r7, #22]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d102      	bne.n	8012dd4 <put_lfn+0x90>
 8012dce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012dd2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012dd4:	69bb      	ldr	r3, [r7, #24]
 8012dd6:	3301      	adds	r3, #1
 8012dd8:	61bb      	str	r3, [r7, #24]
 8012dda:	69bb      	ldr	r3, [r7, #24]
 8012ddc:	2b0c      	cmp	r3, #12
 8012dde:	d9da      	bls.n	8012d96 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012de0:	8afb      	ldrh	r3, [r7, #22]
 8012de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012de6:	4293      	cmp	r3, r2
 8012de8:	d006      	beq.n	8012df8 <put_lfn+0xb4>
 8012dea:	69fb      	ldr	r3, [r7, #28]
 8012dec:	005b      	lsls	r3, r3, #1
 8012dee:	68fa      	ldr	r2, [r7, #12]
 8012df0:	4413      	add	r3, r2
 8012df2:	881b      	ldrh	r3, [r3, #0]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d103      	bne.n	8012e00 <put_lfn+0xbc>
 8012df8:	79fb      	ldrb	r3, [r7, #7]
 8012dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dfe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012e00:	68bb      	ldr	r3, [r7, #8]
 8012e02:	79fa      	ldrb	r2, [r7, #7]
 8012e04:	701a      	strb	r2, [r3, #0]
}
 8012e06:	bf00      	nop
 8012e08:	3720      	adds	r7, #32
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}
 8012e0e:	bf00      	nop
 8012e10:	080285dc 	.word	0x080285dc

08012e14 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b08c      	sub	sp, #48	; 0x30
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	60f8      	str	r0, [r7, #12]
 8012e1c:	60b9      	str	r1, [r7, #8]
 8012e1e:	607a      	str	r2, [r7, #4]
 8012e20:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8012e22:	220b      	movs	r2, #11
 8012e24:	68b9      	ldr	r1, [r7, #8]
 8012e26:	68f8      	ldr	r0, [r7, #12]
 8012e28:	f7fe ff46 	bl	8011cb8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	2b05      	cmp	r3, #5
 8012e30:	d92b      	bls.n	8012e8a <gen_numname+0x76>
		sr = seq;
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8012e36:	e022      	b.n	8012e7e <gen_numname+0x6a>
			wc = *lfn++;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	1c9a      	adds	r2, r3, #2
 8012e3c:	607a      	str	r2, [r7, #4]
 8012e3e:	881b      	ldrh	r3, [r3, #0]
 8012e40:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8012e42:	2300      	movs	r3, #0
 8012e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e46:	e017      	b.n	8012e78 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8012e48:	69fb      	ldr	r3, [r7, #28]
 8012e4a:	005a      	lsls	r2, r3, #1
 8012e4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e4e:	f003 0301 	and.w	r3, r3, #1
 8012e52:	4413      	add	r3, r2
 8012e54:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8012e56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e58:	085b      	lsrs	r3, r3, #1
 8012e5a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8012e5c:	69fb      	ldr	r3, [r7, #28]
 8012e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d005      	beq.n	8012e72 <gen_numname+0x5e>
 8012e66:	69fb      	ldr	r3, [r7, #28]
 8012e68:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8012e6c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8012e70:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8012e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e74:	3301      	adds	r3, #1
 8012e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e7a:	2b0f      	cmp	r3, #15
 8012e7c:	d9e4      	bls.n	8012e48 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	881b      	ldrh	r3, [r3, #0]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d1d8      	bne.n	8012e38 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8012e86:	69fb      	ldr	r3, [r7, #28]
 8012e88:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8012e8a:	2307      	movs	r3, #7
 8012e8c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	b2db      	uxtb	r3, r3
 8012e92:	f003 030f 	and.w	r3, r3, #15
 8012e96:	b2db      	uxtb	r3, r3
 8012e98:	3330      	adds	r3, #48	; 0x30
 8012e9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8012e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ea2:	2b39      	cmp	r3, #57	; 0x39
 8012ea4:	d904      	bls.n	8012eb0 <gen_numname+0x9c>
 8012ea6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012eaa:	3307      	adds	r3, #7
 8012eac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8012eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eb2:	1e5a      	subs	r2, r3, #1
 8012eb4:	62ba      	str	r2, [r7, #40]	; 0x28
 8012eb6:	3330      	adds	r3, #48	; 0x30
 8012eb8:	443b      	add	r3, r7
 8012eba:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8012ebe:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8012ec2:	683b      	ldr	r3, [r7, #0]
 8012ec4:	091b      	lsrs	r3, r3, #4
 8012ec6:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d1df      	bne.n	8012e8e <gen_numname+0x7a>
	ns[i] = '~';
 8012ece:	f107 0214 	add.w	r2, r7, #20
 8012ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed4:	4413      	add	r3, r2
 8012ed6:	227e      	movs	r2, #126	; 0x7e
 8012ed8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012eda:	2300      	movs	r3, #0
 8012edc:	627b      	str	r3, [r7, #36]	; 0x24
 8012ede:	e002      	b.n	8012ee6 <gen_numname+0xd2>
 8012ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8012ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eea:	429a      	cmp	r2, r3
 8012eec:	d205      	bcs.n	8012efa <gen_numname+0xe6>
 8012eee:	68fa      	ldr	r2, [r7, #12]
 8012ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef2:	4413      	add	r3, r2
 8012ef4:	781b      	ldrb	r3, [r3, #0]
 8012ef6:	2b20      	cmp	r3, #32
 8012ef8:	d1f2      	bne.n	8012ee0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012efc:	2b07      	cmp	r3, #7
 8012efe:	d807      	bhi.n	8012f10 <gen_numname+0xfc>
 8012f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f02:	1c5a      	adds	r2, r3, #1
 8012f04:	62ba      	str	r2, [r7, #40]	; 0x28
 8012f06:	3330      	adds	r3, #48	; 0x30
 8012f08:	443b      	add	r3, r7
 8012f0a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8012f0e:	e000      	b.n	8012f12 <gen_numname+0xfe>
 8012f10:	2120      	movs	r1, #32
 8012f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f14:	1c5a      	adds	r2, r3, #1
 8012f16:	627a      	str	r2, [r7, #36]	; 0x24
 8012f18:	68fa      	ldr	r2, [r7, #12]
 8012f1a:	4413      	add	r3, r2
 8012f1c:	460a      	mov	r2, r1
 8012f1e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8012f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f22:	2b07      	cmp	r3, #7
 8012f24:	d9e9      	bls.n	8012efa <gen_numname+0xe6>
}
 8012f26:	bf00      	nop
 8012f28:	bf00      	nop
 8012f2a:	3730      	adds	r7, #48	; 0x30
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}

08012f30 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8012f30:	b480      	push	{r7}
 8012f32:	b085      	sub	sp, #20
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8012f3c:	230b      	movs	r3, #11
 8012f3e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012f40:	7bfb      	ldrb	r3, [r7, #15]
 8012f42:	b2da      	uxtb	r2, r3
 8012f44:	0852      	lsrs	r2, r2, #1
 8012f46:	01db      	lsls	r3, r3, #7
 8012f48:	4313      	orrs	r3, r2
 8012f4a:	b2da      	uxtb	r2, r3
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	1c59      	adds	r1, r3, #1
 8012f50:	6079      	str	r1, [r7, #4]
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	4413      	add	r3, r2
 8012f56:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8012f58:	68bb      	ldr	r3, [r7, #8]
 8012f5a:	3b01      	subs	r3, #1
 8012f5c:	60bb      	str	r3, [r7, #8]
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d1ed      	bne.n	8012f40 <sum_sfn+0x10>
	return sum;
 8012f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3714      	adds	r7, #20
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f70:	4770      	bx	lr

08012f72 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012f72:	b580      	push	{r7, lr}
 8012f74:	b086      	sub	sp, #24
 8012f76:	af00      	add	r7, sp, #0
 8012f78:	6078      	str	r0, [r7, #4]
 8012f7a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012f7c:	2304      	movs	r3, #4
 8012f7e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8012f86:	23ff      	movs	r3, #255	; 0xff
 8012f88:	757b      	strb	r3, [r7, #21]
 8012f8a:	23ff      	movs	r3, #255	; 0xff
 8012f8c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8012f8e:	e081      	b.n	8013094 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	69db      	ldr	r3, [r3, #28]
 8012f94:	4619      	mov	r1, r3
 8012f96:	6938      	ldr	r0, [r7, #16]
 8012f98:	f7ff f8bc 	bl	8012114 <move_window>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012fa0:	7dfb      	ldrb	r3, [r7, #23]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d17c      	bne.n	80130a0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	6a1b      	ldr	r3, [r3, #32]
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8012fae:	7dbb      	ldrb	r3, [r7, #22]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d102      	bne.n	8012fba <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012fb4:	2304      	movs	r3, #4
 8012fb6:	75fb      	strb	r3, [r7, #23]
 8012fb8:	e077      	b.n	80130aa <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	6a1b      	ldr	r3, [r3, #32]
 8012fbe:	330b      	adds	r3, #11
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012fc6:	73fb      	strb	r3, [r7, #15]
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	7bfa      	ldrb	r2, [r7, #15]
 8012fcc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8012fce:	7dbb      	ldrb	r3, [r7, #22]
 8012fd0:	2be5      	cmp	r3, #229	; 0xe5
 8012fd2:	d00e      	beq.n	8012ff2 <dir_read+0x80>
 8012fd4:	7dbb      	ldrb	r3, [r7, #22]
 8012fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8012fd8:	d00b      	beq.n	8012ff2 <dir_read+0x80>
 8012fda:	7bfb      	ldrb	r3, [r7, #15]
 8012fdc:	f023 0320 	bic.w	r3, r3, #32
 8012fe0:	2b08      	cmp	r3, #8
 8012fe2:	bf0c      	ite	eq
 8012fe4:	2301      	moveq	r3, #1
 8012fe6:	2300      	movne	r3, #0
 8012fe8:	b2db      	uxtb	r3, r3
 8012fea:	461a      	mov	r2, r3
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	4293      	cmp	r3, r2
 8012ff0:	d002      	beq.n	8012ff8 <dir_read+0x86>
				ord = 0xFF;
 8012ff2:	23ff      	movs	r3, #255	; 0xff
 8012ff4:	757b      	strb	r3, [r7, #21]
 8012ff6:	e044      	b.n	8013082 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8012ff8:	7bfb      	ldrb	r3, [r7, #15]
 8012ffa:	2b0f      	cmp	r3, #15
 8012ffc:	d12f      	bne.n	801305e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8012ffe:	7dbb      	ldrb	r3, [r7, #22]
 8013000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013004:	2b00      	cmp	r3, #0
 8013006:	d00d      	beq.n	8013024 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	6a1b      	ldr	r3, [r3, #32]
 801300c:	7b5b      	ldrb	r3, [r3, #13]
 801300e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8013010:	7dbb      	ldrb	r3, [r7, #22]
 8013012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013016:	75bb      	strb	r3, [r7, #22]
 8013018:	7dbb      	ldrb	r3, [r7, #22]
 801301a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	695a      	ldr	r2, [r3, #20]
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8013024:	7dba      	ldrb	r2, [r7, #22]
 8013026:	7d7b      	ldrb	r3, [r7, #21]
 8013028:	429a      	cmp	r2, r3
 801302a:	d115      	bne.n	8013058 <dir_read+0xe6>
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	6a1b      	ldr	r3, [r3, #32]
 8013030:	330d      	adds	r3, #13
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	7d3a      	ldrb	r2, [r7, #20]
 8013036:	429a      	cmp	r2, r3
 8013038:	d10e      	bne.n	8013058 <dir_read+0xe6>
 801303a:	693b      	ldr	r3, [r7, #16]
 801303c:	68da      	ldr	r2, [r3, #12]
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	6a1b      	ldr	r3, [r3, #32]
 8013042:	4619      	mov	r1, r3
 8013044:	4610      	mov	r0, r2
 8013046:	f7ff fe19 	bl	8012c7c <pick_lfn>
 801304a:	4603      	mov	r3, r0
 801304c:	2b00      	cmp	r3, #0
 801304e:	d003      	beq.n	8013058 <dir_read+0xe6>
 8013050:	7d7b      	ldrb	r3, [r7, #21]
 8013052:	3b01      	subs	r3, #1
 8013054:	b2db      	uxtb	r3, r3
 8013056:	e000      	b.n	801305a <dir_read+0xe8>
 8013058:	23ff      	movs	r3, #255	; 0xff
 801305a:	757b      	strb	r3, [r7, #21]
 801305c:	e011      	b.n	8013082 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801305e:	7d7b      	ldrb	r3, [r7, #21]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d109      	bne.n	8013078 <dir_read+0x106>
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	6a1b      	ldr	r3, [r3, #32]
 8013068:	4618      	mov	r0, r3
 801306a:	f7ff ff61 	bl	8012f30 <sum_sfn>
 801306e:	4603      	mov	r3, r0
 8013070:	461a      	mov	r2, r3
 8013072:	7d3b      	ldrb	r3, [r7, #20]
 8013074:	4293      	cmp	r3, r2
 8013076:	d015      	beq.n	80130a4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	f04f 32ff 	mov.w	r2, #4294967295
 801307e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8013080:	e010      	b.n	80130a4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8013082:	2100      	movs	r1, #0
 8013084:	6878      	ldr	r0, [r7, #4]
 8013086:	f7ff fc3e 	bl	8012906 <dir_next>
 801308a:	4603      	mov	r3, r0
 801308c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801308e:	7dfb      	ldrb	r3, [r7, #23]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d109      	bne.n	80130a8 <dir_read+0x136>
	while (dp->sect) {
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	69db      	ldr	r3, [r3, #28]
 8013098:	2b00      	cmp	r3, #0
 801309a:	f47f af79 	bne.w	8012f90 <dir_read+0x1e>
 801309e:	e004      	b.n	80130aa <dir_read+0x138>
		if (res != FR_OK) break;
 80130a0:	bf00      	nop
 80130a2:	e002      	b.n	80130aa <dir_read+0x138>
					break;
 80130a4:	bf00      	nop
 80130a6:	e000      	b.n	80130aa <dir_read+0x138>
		if (res != FR_OK) break;
 80130a8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80130aa:	7dfb      	ldrb	r3, [r7, #23]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d002      	beq.n	80130b6 <dir_read+0x144>
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2200      	movs	r2, #0
 80130b4:	61da      	str	r2, [r3, #28]
	return res;
 80130b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80130b8:	4618      	mov	r0, r3
 80130ba:	3718      	adds	r7, #24
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}

080130c0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b086      	sub	sp, #24
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80130ce:	2100      	movs	r1, #0
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f7ff fb9d 	bl	8012810 <dir_sdi>
 80130d6:	4603      	mov	r3, r0
 80130d8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80130da:	7dfb      	ldrb	r3, [r7, #23]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d001      	beq.n	80130e4 <dir_find+0x24>
 80130e0:	7dfb      	ldrb	r3, [r7, #23]
 80130e2:	e0a9      	b.n	8013238 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80130e4:	23ff      	movs	r3, #255	; 0xff
 80130e6:	753b      	strb	r3, [r7, #20]
 80130e8:	7d3b      	ldrb	r3, [r7, #20]
 80130ea:	757b      	strb	r3, [r7, #21]
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f04f 32ff 	mov.w	r2, #4294967295
 80130f2:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	69db      	ldr	r3, [r3, #28]
 80130f8:	4619      	mov	r1, r3
 80130fa:	6938      	ldr	r0, [r7, #16]
 80130fc:	f7ff f80a 	bl	8012114 <move_window>
 8013100:	4603      	mov	r3, r0
 8013102:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013104:	7dfb      	ldrb	r3, [r7, #23]
 8013106:	2b00      	cmp	r3, #0
 8013108:	f040 8090 	bne.w	801322c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6a1b      	ldr	r3, [r3, #32]
 8013110:	781b      	ldrb	r3, [r3, #0]
 8013112:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013114:	7dbb      	ldrb	r3, [r7, #22]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d102      	bne.n	8013120 <dir_find+0x60>
 801311a:	2304      	movs	r3, #4
 801311c:	75fb      	strb	r3, [r7, #23]
 801311e:	e08a      	b.n	8013236 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	6a1b      	ldr	r3, [r3, #32]
 8013124:	330b      	adds	r3, #11
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801312c:	73fb      	strb	r3, [r7, #15]
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	7bfa      	ldrb	r2, [r7, #15]
 8013132:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8013134:	7dbb      	ldrb	r3, [r7, #22]
 8013136:	2be5      	cmp	r3, #229	; 0xe5
 8013138:	d007      	beq.n	801314a <dir_find+0x8a>
 801313a:	7bfb      	ldrb	r3, [r7, #15]
 801313c:	f003 0308 	and.w	r3, r3, #8
 8013140:	2b00      	cmp	r3, #0
 8013142:	d009      	beq.n	8013158 <dir_find+0x98>
 8013144:	7bfb      	ldrb	r3, [r7, #15]
 8013146:	2b0f      	cmp	r3, #15
 8013148:	d006      	beq.n	8013158 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801314a:	23ff      	movs	r3, #255	; 0xff
 801314c:	757b      	strb	r3, [r7, #21]
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	f04f 32ff 	mov.w	r2, #4294967295
 8013154:	631a      	str	r2, [r3, #48]	; 0x30
 8013156:	e05e      	b.n	8013216 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8013158:	7bfb      	ldrb	r3, [r7, #15]
 801315a:	2b0f      	cmp	r3, #15
 801315c:	d136      	bne.n	80131cc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013168:	2b00      	cmp	r3, #0
 801316a:	d154      	bne.n	8013216 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801316c:	7dbb      	ldrb	r3, [r7, #22]
 801316e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013172:	2b00      	cmp	r3, #0
 8013174:	d00d      	beq.n	8013192 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	6a1b      	ldr	r3, [r3, #32]
 801317a:	7b5b      	ldrb	r3, [r3, #13]
 801317c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801317e:	7dbb      	ldrb	r3, [r7, #22]
 8013180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013184:	75bb      	strb	r3, [r7, #22]
 8013186:	7dbb      	ldrb	r3, [r7, #22]
 8013188:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	695a      	ldr	r2, [r3, #20]
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8013192:	7dba      	ldrb	r2, [r7, #22]
 8013194:	7d7b      	ldrb	r3, [r7, #21]
 8013196:	429a      	cmp	r2, r3
 8013198:	d115      	bne.n	80131c6 <dir_find+0x106>
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	6a1b      	ldr	r3, [r3, #32]
 801319e:	330d      	adds	r3, #13
 80131a0:	781b      	ldrb	r3, [r3, #0]
 80131a2:	7d3a      	ldrb	r2, [r7, #20]
 80131a4:	429a      	cmp	r2, r3
 80131a6:	d10e      	bne.n	80131c6 <dir_find+0x106>
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	68da      	ldr	r2, [r3, #12]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	6a1b      	ldr	r3, [r3, #32]
 80131b0:	4619      	mov	r1, r3
 80131b2:	4610      	mov	r0, r2
 80131b4:	f7ff fcf2 	bl	8012b9c <cmp_lfn>
 80131b8:	4603      	mov	r3, r0
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d003      	beq.n	80131c6 <dir_find+0x106>
 80131be:	7d7b      	ldrb	r3, [r7, #21]
 80131c0:	3b01      	subs	r3, #1
 80131c2:	b2db      	uxtb	r3, r3
 80131c4:	e000      	b.n	80131c8 <dir_find+0x108>
 80131c6:	23ff      	movs	r3, #255	; 0xff
 80131c8:	757b      	strb	r3, [r7, #21]
 80131ca:	e024      	b.n	8013216 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80131cc:	7d7b      	ldrb	r3, [r7, #21]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d109      	bne.n	80131e6 <dir_find+0x126>
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6a1b      	ldr	r3, [r3, #32]
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7ff feaa 	bl	8012f30 <sum_sfn>
 80131dc:	4603      	mov	r3, r0
 80131de:	461a      	mov	r2, r3
 80131e0:	7d3b      	ldrb	r3, [r7, #20]
 80131e2:	4293      	cmp	r3, r2
 80131e4:	d024      	beq.n	8013230 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80131ec:	f003 0301 	and.w	r3, r3, #1
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d10a      	bne.n	801320a <dir_find+0x14a>
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6a18      	ldr	r0, [r3, #32]
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	3324      	adds	r3, #36	; 0x24
 80131fc:	220b      	movs	r2, #11
 80131fe:	4619      	mov	r1, r3
 8013200:	f7fe fd96 	bl	8011d30 <mem_cmp>
 8013204:	4603      	mov	r3, r0
 8013206:	2b00      	cmp	r3, #0
 8013208:	d014      	beq.n	8013234 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801320a:	23ff      	movs	r3, #255	; 0xff
 801320c:	757b      	strb	r3, [r7, #21]
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	f04f 32ff 	mov.w	r2, #4294967295
 8013214:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013216:	2100      	movs	r1, #0
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f7ff fb74 	bl	8012906 <dir_next>
 801321e:	4603      	mov	r3, r0
 8013220:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013222:	7dfb      	ldrb	r3, [r7, #23]
 8013224:	2b00      	cmp	r3, #0
 8013226:	f43f af65 	beq.w	80130f4 <dir_find+0x34>
 801322a:	e004      	b.n	8013236 <dir_find+0x176>
		if (res != FR_OK) break;
 801322c:	bf00      	nop
 801322e:	e002      	b.n	8013236 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8013230:	bf00      	nop
 8013232:	e000      	b.n	8013236 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013234:	bf00      	nop

	return res;
 8013236:	7dfb      	ldrb	r3, [r7, #23]
}
 8013238:	4618      	mov	r0, r3
 801323a:	3718      	adds	r7, #24
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}

08013240 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b08c      	sub	sp, #48	; 0x30
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013254:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8013258:	2b00      	cmp	r3, #0
 801325a:	d001      	beq.n	8013260 <dir_register+0x20>
 801325c:	2306      	movs	r3, #6
 801325e:	e0e0      	b.n	8013422 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8013260:	2300      	movs	r3, #0
 8013262:	627b      	str	r3, [r7, #36]	; 0x24
 8013264:	e002      	b.n	801326c <dir_register+0x2c>
 8013266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013268:	3301      	adds	r3, #1
 801326a:	627b      	str	r3, [r7, #36]	; 0x24
 801326c:	69fb      	ldr	r3, [r7, #28]
 801326e:	68da      	ldr	r2, [r3, #12]
 8013270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013272:	005b      	lsls	r3, r3, #1
 8013274:	4413      	add	r3, r2
 8013276:	881b      	ldrh	r3, [r3, #0]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d1f4      	bne.n	8013266 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8013282:	f107 030c 	add.w	r3, r7, #12
 8013286:	220c      	movs	r2, #12
 8013288:	4618      	mov	r0, r3
 801328a:	f7fe fd15 	bl	8011cb8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801328e:	7dfb      	ldrb	r3, [r7, #23]
 8013290:	f003 0301 	and.w	r3, r3, #1
 8013294:	2b00      	cmp	r3, #0
 8013296:	d032      	beq.n	80132fe <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2240      	movs	r2, #64	; 0x40
 801329c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80132a0:	2301      	movs	r3, #1
 80132a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80132a4:	e016      	b.n	80132d4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80132ac:	69fb      	ldr	r3, [r7, #28]
 80132ae:	68da      	ldr	r2, [r3, #12]
 80132b0:	f107 010c 	add.w	r1, r7, #12
 80132b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132b6:	f7ff fdad 	bl	8012e14 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80132ba:	6878      	ldr	r0, [r7, #4]
 80132bc:	f7ff ff00 	bl	80130c0 <dir_find>
 80132c0:	4603      	mov	r3, r0
 80132c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80132c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d106      	bne.n	80132dc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80132ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d0:	3301      	adds	r3, #1
 80132d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80132d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d6:	2b63      	cmp	r3, #99	; 0x63
 80132d8:	d9e5      	bls.n	80132a6 <dir_register+0x66>
 80132da:	e000      	b.n	80132de <dir_register+0x9e>
			if (res != FR_OK) break;
 80132dc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80132de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132e0:	2b64      	cmp	r3, #100	; 0x64
 80132e2:	d101      	bne.n	80132e8 <dir_register+0xa8>
 80132e4:	2307      	movs	r3, #7
 80132e6:	e09c      	b.n	8013422 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80132e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132ec:	2b04      	cmp	r3, #4
 80132ee:	d002      	beq.n	80132f6 <dir_register+0xb6>
 80132f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132f4:	e095      	b.n	8013422 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80132f6:	7dfa      	ldrb	r2, [r7, #23]
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80132fe:	7dfb      	ldrb	r3, [r7, #23]
 8013300:	f003 0302 	and.w	r3, r3, #2
 8013304:	2b00      	cmp	r3, #0
 8013306:	d007      	beq.n	8013318 <dir_register+0xd8>
 8013308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801330a:	330c      	adds	r3, #12
 801330c:	4a47      	ldr	r2, [pc, #284]	; (801342c <dir_register+0x1ec>)
 801330e:	fba2 2303 	umull	r2, r3, r2, r3
 8013312:	089b      	lsrs	r3, r3, #2
 8013314:	3301      	adds	r3, #1
 8013316:	e000      	b.n	801331a <dir_register+0xda>
 8013318:	2301      	movs	r3, #1
 801331a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801331c:	6a39      	ldr	r1, [r7, #32]
 801331e:	6878      	ldr	r0, [r7, #4]
 8013320:	f7ff fbb6 	bl	8012a90 <dir_alloc>
 8013324:	4603      	mov	r3, r0
 8013326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801332a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801332e:	2b00      	cmp	r3, #0
 8013330:	d148      	bne.n	80133c4 <dir_register+0x184>
 8013332:	6a3b      	ldr	r3, [r7, #32]
 8013334:	3b01      	subs	r3, #1
 8013336:	623b      	str	r3, [r7, #32]
 8013338:	6a3b      	ldr	r3, [r7, #32]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d042      	beq.n	80133c4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	695a      	ldr	r2, [r3, #20]
 8013342:	6a3b      	ldr	r3, [r7, #32]
 8013344:	015b      	lsls	r3, r3, #5
 8013346:	1ad3      	subs	r3, r2, r3
 8013348:	4619      	mov	r1, r3
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f7ff fa60 	bl	8012810 <dir_sdi>
 8013350:	4603      	mov	r3, r0
 8013352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8013356:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801335a:	2b00      	cmp	r3, #0
 801335c:	d132      	bne.n	80133c4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	3324      	adds	r3, #36	; 0x24
 8013362:	4618      	mov	r0, r3
 8013364:	f7ff fde4 	bl	8012f30 <sum_sfn>
 8013368:	4603      	mov	r3, r0
 801336a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	69db      	ldr	r3, [r3, #28]
 8013370:	4619      	mov	r1, r3
 8013372:	69f8      	ldr	r0, [r7, #28]
 8013374:	f7fe fece 	bl	8012114 <move_window>
 8013378:	4603      	mov	r3, r0
 801337a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801337e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013382:	2b00      	cmp	r3, #0
 8013384:	d11d      	bne.n	80133c2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8013386:	69fb      	ldr	r3, [r7, #28]
 8013388:	68d8      	ldr	r0, [r3, #12]
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	6a19      	ldr	r1, [r3, #32]
 801338e:	6a3b      	ldr	r3, [r7, #32]
 8013390:	b2da      	uxtb	r2, r3
 8013392:	7efb      	ldrb	r3, [r7, #27]
 8013394:	f7ff fcd6 	bl	8012d44 <put_lfn>
				fs->wflag = 1;
 8013398:	69fb      	ldr	r3, [r7, #28]
 801339a:	2201      	movs	r2, #1
 801339c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801339e:	2100      	movs	r1, #0
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f7ff fab0 	bl	8012906 <dir_next>
 80133a6:	4603      	mov	r3, r0
 80133a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80133ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d107      	bne.n	80133c4 <dir_register+0x184>
 80133b4:	6a3b      	ldr	r3, [r7, #32]
 80133b6:	3b01      	subs	r3, #1
 80133b8:	623b      	str	r3, [r7, #32]
 80133ba:	6a3b      	ldr	r3, [r7, #32]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d1d5      	bne.n	801336c <dir_register+0x12c>
 80133c0:	e000      	b.n	80133c4 <dir_register+0x184>
				if (res != FR_OK) break;
 80133c2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80133c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d128      	bne.n	801341e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	69db      	ldr	r3, [r3, #28]
 80133d0:	4619      	mov	r1, r3
 80133d2:	69f8      	ldr	r0, [r7, #28]
 80133d4:	f7fe fe9e 	bl	8012114 <move_window>
 80133d8:	4603      	mov	r3, r0
 80133da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80133de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d11b      	bne.n	801341e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	6a1b      	ldr	r3, [r3, #32]
 80133ea:	2220      	movs	r2, #32
 80133ec:	2100      	movs	r1, #0
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7fe fc83 	bl	8011cfa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	6a18      	ldr	r0, [r3, #32]
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	3324      	adds	r3, #36	; 0x24
 80133fc:	220b      	movs	r2, #11
 80133fe:	4619      	mov	r1, r3
 8013400:	f7fe fc5a 	bl	8011cb8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	6a1b      	ldr	r3, [r3, #32]
 801340e:	330c      	adds	r3, #12
 8013410:	f002 0218 	and.w	r2, r2, #24
 8013414:	b2d2      	uxtb	r2, r2
 8013416:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8013418:	69fb      	ldr	r3, [r7, #28]
 801341a:	2201      	movs	r2, #1
 801341c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801341e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013422:	4618      	mov	r0, r3
 8013424:	3730      	adds	r7, #48	; 0x30
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}
 801342a:	bf00      	nop
 801342c:	4ec4ec4f 	.word	0x4ec4ec4f

08013430 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b088      	sub	sp, #32
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	2200      	movs	r2, #0
 8013444:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	69db      	ldr	r3, [r3, #28]
 801344a:	2b00      	cmp	r3, #0
 801344c:	f000 80c9 	beq.w	80135e2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013458:	d032      	beq.n	80134c0 <get_fileinfo+0x90>
			i = j = 0;
 801345a:	2300      	movs	r3, #0
 801345c:	61bb      	str	r3, [r7, #24]
 801345e:	69bb      	ldr	r3, [r7, #24]
 8013460:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8013462:	e01b      	b.n	801349c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8013464:	89fb      	ldrh	r3, [r7, #14]
 8013466:	2100      	movs	r1, #0
 8013468:	4618      	mov	r0, r3
 801346a:	f002 fa31 	bl	80158d0 <ff_convert>
 801346e:	4603      	mov	r3, r0
 8013470:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8013472:	89fb      	ldrh	r3, [r7, #14]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d102      	bne.n	801347e <get_fileinfo+0x4e>
 8013478:	2300      	movs	r3, #0
 801347a:	61fb      	str	r3, [r7, #28]
 801347c:	e01a      	b.n	80134b4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801347e:	69fb      	ldr	r3, [r7, #28]
 8013480:	2bfe      	cmp	r3, #254	; 0xfe
 8013482:	d902      	bls.n	801348a <get_fileinfo+0x5a>
 8013484:	2300      	movs	r3, #0
 8013486:	61fb      	str	r3, [r7, #28]
 8013488:	e014      	b.n	80134b4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801348a:	69fb      	ldr	r3, [r7, #28]
 801348c:	1c5a      	adds	r2, r3, #1
 801348e:	61fa      	str	r2, [r7, #28]
 8013490:	89fa      	ldrh	r2, [r7, #14]
 8013492:	b2d1      	uxtb	r1, r2
 8013494:	683a      	ldr	r2, [r7, #0]
 8013496:	4413      	add	r3, r2
 8013498:	460a      	mov	r2, r1
 801349a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	68da      	ldr	r2, [r3, #12]
 80134a0:	69bb      	ldr	r3, [r7, #24]
 80134a2:	1c59      	adds	r1, r3, #1
 80134a4:	61b9      	str	r1, [r7, #24]
 80134a6:	005b      	lsls	r3, r3, #1
 80134a8:	4413      	add	r3, r2
 80134aa:	881b      	ldrh	r3, [r3, #0]
 80134ac:	81fb      	strh	r3, [r7, #14]
 80134ae:	89fb      	ldrh	r3, [r7, #14]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d1d7      	bne.n	8013464 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80134b4:	683a      	ldr	r2, [r7, #0]
 80134b6:	69fb      	ldr	r3, [r7, #28]
 80134b8:	4413      	add	r3, r2
 80134ba:	3316      	adds	r3, #22
 80134bc:	2200      	movs	r2, #0
 80134be:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80134c0:	2300      	movs	r3, #0
 80134c2:	61bb      	str	r3, [r7, #24]
 80134c4:	69bb      	ldr	r3, [r7, #24]
 80134c6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80134c8:	683a      	ldr	r2, [r7, #0]
 80134ca:	69fb      	ldr	r3, [r7, #28]
 80134cc:	4413      	add	r3, r2
 80134ce:	3316      	adds	r3, #22
 80134d0:	781b      	ldrb	r3, [r3, #0]
 80134d2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80134d4:	e04c      	b.n	8013570 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	6a1a      	ldr	r2, [r3, #32]
 80134da:	69fb      	ldr	r3, [r7, #28]
 80134dc:	1c59      	adds	r1, r3, #1
 80134de:	61f9      	str	r1, [r7, #28]
 80134e0:	4413      	add	r3, r2
 80134e2:	781b      	ldrb	r3, [r3, #0]
 80134e4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80134e6:	7dfb      	ldrb	r3, [r7, #23]
 80134e8:	2b20      	cmp	r3, #32
 80134ea:	d100      	bne.n	80134ee <get_fileinfo+0xbe>
 80134ec:	e040      	b.n	8013570 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80134ee:	7dfb      	ldrb	r3, [r7, #23]
 80134f0:	2b05      	cmp	r3, #5
 80134f2:	d101      	bne.n	80134f8 <get_fileinfo+0xc8>
 80134f4:	23e5      	movs	r3, #229	; 0xe5
 80134f6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80134f8:	69fb      	ldr	r3, [r7, #28]
 80134fa:	2b09      	cmp	r3, #9
 80134fc:	d10f      	bne.n	801351e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80134fe:	89bb      	ldrh	r3, [r7, #12]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d105      	bne.n	8013510 <get_fileinfo+0xe0>
 8013504:	683a      	ldr	r2, [r7, #0]
 8013506:	69bb      	ldr	r3, [r7, #24]
 8013508:	4413      	add	r3, r2
 801350a:	3316      	adds	r3, #22
 801350c:	222e      	movs	r2, #46	; 0x2e
 801350e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8013510:	69bb      	ldr	r3, [r7, #24]
 8013512:	1c5a      	adds	r2, r3, #1
 8013514:	61ba      	str	r2, [r7, #24]
 8013516:	683a      	ldr	r2, [r7, #0]
 8013518:	4413      	add	r3, r2
 801351a:	222e      	movs	r2, #46	; 0x2e
 801351c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801351e:	683a      	ldr	r2, [r7, #0]
 8013520:	69bb      	ldr	r3, [r7, #24]
 8013522:	4413      	add	r3, r2
 8013524:	3309      	adds	r3, #9
 8013526:	7dfa      	ldrb	r2, [r7, #23]
 8013528:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801352a:	89bb      	ldrh	r3, [r7, #12]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d11c      	bne.n	801356a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8013530:	7dfb      	ldrb	r3, [r7, #23]
 8013532:	2b40      	cmp	r3, #64	; 0x40
 8013534:	d913      	bls.n	801355e <get_fileinfo+0x12e>
 8013536:	7dfb      	ldrb	r3, [r7, #23]
 8013538:	2b5a      	cmp	r3, #90	; 0x5a
 801353a:	d810      	bhi.n	801355e <get_fileinfo+0x12e>
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6a1b      	ldr	r3, [r3, #32]
 8013540:	330c      	adds	r3, #12
 8013542:	781b      	ldrb	r3, [r3, #0]
 8013544:	461a      	mov	r2, r3
 8013546:	69fb      	ldr	r3, [r7, #28]
 8013548:	2b08      	cmp	r3, #8
 801354a:	d901      	bls.n	8013550 <get_fileinfo+0x120>
 801354c:	2310      	movs	r3, #16
 801354e:	e000      	b.n	8013552 <get_fileinfo+0x122>
 8013550:	2308      	movs	r3, #8
 8013552:	4013      	ands	r3, r2
 8013554:	2b00      	cmp	r3, #0
 8013556:	d002      	beq.n	801355e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8013558:	7dfb      	ldrb	r3, [r7, #23]
 801355a:	3320      	adds	r3, #32
 801355c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801355e:	683a      	ldr	r2, [r7, #0]
 8013560:	69bb      	ldr	r3, [r7, #24]
 8013562:	4413      	add	r3, r2
 8013564:	3316      	adds	r3, #22
 8013566:	7dfa      	ldrb	r2, [r7, #23]
 8013568:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801356a:	69bb      	ldr	r3, [r7, #24]
 801356c:	3301      	adds	r3, #1
 801356e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8013570:	69fb      	ldr	r3, [r7, #28]
 8013572:	2b0a      	cmp	r3, #10
 8013574:	d9af      	bls.n	80134d6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8013576:	89bb      	ldrh	r3, [r7, #12]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d10d      	bne.n	8013598 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 801357c:	683a      	ldr	r2, [r7, #0]
 801357e:	69bb      	ldr	r3, [r7, #24]
 8013580:	4413      	add	r3, r2
 8013582:	3316      	adds	r3, #22
 8013584:	2200      	movs	r2, #0
 8013586:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	6a1b      	ldr	r3, [r3, #32]
 801358c:	330c      	adds	r3, #12
 801358e:	781b      	ldrb	r3, [r3, #0]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d101      	bne.n	8013598 <get_fileinfo+0x168>
 8013594:	2300      	movs	r3, #0
 8013596:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8013598:	683a      	ldr	r2, [r7, #0]
 801359a:	69bb      	ldr	r3, [r7, #24]
 801359c:	4413      	add	r3, r2
 801359e:	3309      	adds	r3, #9
 80135a0:	2200      	movs	r2, #0
 80135a2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6a1b      	ldr	r3, [r3, #32]
 80135a8:	7ada      	ldrb	r2, [r3, #11]
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	6a1b      	ldr	r3, [r3, #32]
 80135b2:	331c      	adds	r3, #28
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7fe fb15 	bl	8011be4 <ld_dword>
 80135ba:	4602      	mov	r2, r0
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	6a1b      	ldr	r3, [r3, #32]
 80135c4:	3316      	adds	r3, #22
 80135c6:	4618      	mov	r0, r3
 80135c8:	f7fe fb0c 	bl	8011be4 <ld_dword>
 80135cc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	b29a      	uxth	r2, r3
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	80da      	strh	r2, [r3, #6]
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	0c1b      	lsrs	r3, r3, #16
 80135da:	b29a      	uxth	r2, r3
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	809a      	strh	r2, [r3, #4]
 80135e0:	e000      	b.n	80135e4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80135e2:	bf00      	nop
}
 80135e4:	3720      	adds	r7, #32
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}
	...

080135ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b08a      	sub	sp, #40	; 0x28
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
 80135f4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80135f6:	683b      	ldr	r3, [r7, #0]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	613b      	str	r3, [r7, #16]
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	68db      	ldr	r3, [r3, #12]
 8013602:	60fb      	str	r3, [r7, #12]
 8013604:	2300      	movs	r3, #0
 8013606:	617b      	str	r3, [r7, #20]
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801360c:	69bb      	ldr	r3, [r7, #24]
 801360e:	1c5a      	adds	r2, r3, #1
 8013610:	61ba      	str	r2, [r7, #24]
 8013612:	693a      	ldr	r2, [r7, #16]
 8013614:	4413      	add	r3, r2
 8013616:	781b      	ldrb	r3, [r3, #0]
 8013618:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801361a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801361c:	2b1f      	cmp	r3, #31
 801361e:	d940      	bls.n	80136a2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8013620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013622:	2b2f      	cmp	r3, #47	; 0x2f
 8013624:	d006      	beq.n	8013634 <create_name+0x48>
 8013626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013628:	2b5c      	cmp	r3, #92	; 0x5c
 801362a:	d110      	bne.n	801364e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801362c:	e002      	b.n	8013634 <create_name+0x48>
 801362e:	69bb      	ldr	r3, [r7, #24]
 8013630:	3301      	adds	r3, #1
 8013632:	61bb      	str	r3, [r7, #24]
 8013634:	693a      	ldr	r2, [r7, #16]
 8013636:	69bb      	ldr	r3, [r7, #24]
 8013638:	4413      	add	r3, r2
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	2b2f      	cmp	r3, #47	; 0x2f
 801363e:	d0f6      	beq.n	801362e <create_name+0x42>
 8013640:	693a      	ldr	r2, [r7, #16]
 8013642:	69bb      	ldr	r3, [r7, #24]
 8013644:	4413      	add	r3, r2
 8013646:	781b      	ldrb	r3, [r3, #0]
 8013648:	2b5c      	cmp	r3, #92	; 0x5c
 801364a:	d0f0      	beq.n	801362e <create_name+0x42>
			break;
 801364c:	e02a      	b.n	80136a4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	2bfe      	cmp	r3, #254	; 0xfe
 8013652:	d901      	bls.n	8013658 <create_name+0x6c>
 8013654:	2306      	movs	r3, #6
 8013656:	e17d      	b.n	8013954 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8013658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801365a:	b2db      	uxtb	r3, r3
 801365c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801365e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013660:	2101      	movs	r1, #1
 8013662:	4618      	mov	r0, r3
 8013664:	f002 f934 	bl	80158d0 <ff_convert>
 8013668:	4603      	mov	r3, r0
 801366a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801366c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801366e:	2b00      	cmp	r3, #0
 8013670:	d101      	bne.n	8013676 <create_name+0x8a>
 8013672:	2306      	movs	r3, #6
 8013674:	e16e      	b.n	8013954 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8013676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013678:	2b7f      	cmp	r3, #127	; 0x7f
 801367a:	d809      	bhi.n	8013690 <create_name+0xa4>
 801367c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801367e:	4619      	mov	r1, r3
 8013680:	488d      	ldr	r0, [pc, #564]	; (80138b8 <create_name+0x2cc>)
 8013682:	f7fe fb7c 	bl	8011d7e <chk_chr>
 8013686:	4603      	mov	r3, r0
 8013688:	2b00      	cmp	r3, #0
 801368a:	d001      	beq.n	8013690 <create_name+0xa4>
 801368c:	2306      	movs	r3, #6
 801368e:	e161      	b.n	8013954 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	1c5a      	adds	r2, r3, #1
 8013694:	617a      	str	r2, [r7, #20]
 8013696:	005b      	lsls	r3, r3, #1
 8013698:	68fa      	ldr	r2, [r7, #12]
 801369a:	4413      	add	r3, r2
 801369c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801369e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80136a0:	e7b4      	b.n	801360c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80136a2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80136a4:	693a      	ldr	r2, [r7, #16]
 80136a6:	69bb      	ldr	r3, [r7, #24]
 80136a8:	441a      	add	r2, r3
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80136ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136b0:	2b1f      	cmp	r3, #31
 80136b2:	d801      	bhi.n	80136b8 <create_name+0xcc>
 80136b4:	2304      	movs	r3, #4
 80136b6:	e000      	b.n	80136ba <create_name+0xce>
 80136b8:	2300      	movs	r3, #0
 80136ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80136be:	e011      	b.n	80136e4 <create_name+0xf8>
		w = lfn[di - 1];
 80136c0:	697b      	ldr	r3, [r7, #20]
 80136c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80136c6:	3b01      	subs	r3, #1
 80136c8:	005b      	lsls	r3, r3, #1
 80136ca:	68fa      	ldr	r2, [r7, #12]
 80136cc:	4413      	add	r3, r2
 80136ce:	881b      	ldrh	r3, [r3, #0]
 80136d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80136d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136d4:	2b20      	cmp	r3, #32
 80136d6:	d002      	beq.n	80136de <create_name+0xf2>
 80136d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136da:	2b2e      	cmp	r3, #46	; 0x2e
 80136dc:	d106      	bne.n	80136ec <create_name+0x100>
		di--;
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	3b01      	subs	r3, #1
 80136e2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d1ea      	bne.n	80136c0 <create_name+0xd4>
 80136ea:	e000      	b.n	80136ee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80136ec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	005b      	lsls	r3, r3, #1
 80136f2:	68fa      	ldr	r2, [r7, #12]
 80136f4:	4413      	add	r3, r2
 80136f6:	2200      	movs	r2, #0
 80136f8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d101      	bne.n	8013704 <create_name+0x118>
 8013700:	2306      	movs	r3, #6
 8013702:	e127      	b.n	8013954 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	3324      	adds	r3, #36	; 0x24
 8013708:	220b      	movs	r2, #11
 801370a:	2120      	movs	r1, #32
 801370c:	4618      	mov	r0, r3
 801370e:	f7fe faf4 	bl	8011cfa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8013712:	2300      	movs	r3, #0
 8013714:	61bb      	str	r3, [r7, #24]
 8013716:	e002      	b.n	801371e <create_name+0x132>
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	3301      	adds	r3, #1
 801371c:	61bb      	str	r3, [r7, #24]
 801371e:	69bb      	ldr	r3, [r7, #24]
 8013720:	005b      	lsls	r3, r3, #1
 8013722:	68fa      	ldr	r2, [r7, #12]
 8013724:	4413      	add	r3, r2
 8013726:	881b      	ldrh	r3, [r3, #0]
 8013728:	2b20      	cmp	r3, #32
 801372a:	d0f5      	beq.n	8013718 <create_name+0x12c>
 801372c:	69bb      	ldr	r3, [r7, #24]
 801372e:	005b      	lsls	r3, r3, #1
 8013730:	68fa      	ldr	r2, [r7, #12]
 8013732:	4413      	add	r3, r2
 8013734:	881b      	ldrh	r3, [r3, #0]
 8013736:	2b2e      	cmp	r3, #46	; 0x2e
 8013738:	d0ee      	beq.n	8013718 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801373a:	69bb      	ldr	r3, [r7, #24]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d009      	beq.n	8013754 <create_name+0x168>
 8013740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013744:	f043 0303 	orr.w	r3, r3, #3
 8013748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801374c:	e002      	b.n	8013754 <create_name+0x168>
 801374e:	697b      	ldr	r3, [r7, #20]
 8013750:	3b01      	subs	r3, #1
 8013752:	617b      	str	r3, [r7, #20]
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d009      	beq.n	801376e <create_name+0x182>
 801375a:	697b      	ldr	r3, [r7, #20]
 801375c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013760:	3b01      	subs	r3, #1
 8013762:	005b      	lsls	r3, r3, #1
 8013764:	68fa      	ldr	r2, [r7, #12]
 8013766:	4413      	add	r3, r2
 8013768:	881b      	ldrh	r3, [r3, #0]
 801376a:	2b2e      	cmp	r3, #46	; 0x2e
 801376c:	d1ef      	bne.n	801374e <create_name+0x162>

	i = b = 0; ni = 8;
 801376e:	2300      	movs	r3, #0
 8013770:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013774:	2300      	movs	r3, #0
 8013776:	623b      	str	r3, [r7, #32]
 8013778:	2308      	movs	r3, #8
 801377a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801377c:	69bb      	ldr	r3, [r7, #24]
 801377e:	1c5a      	adds	r2, r3, #1
 8013780:	61ba      	str	r2, [r7, #24]
 8013782:	005b      	lsls	r3, r3, #1
 8013784:	68fa      	ldr	r2, [r7, #12]
 8013786:	4413      	add	r3, r2
 8013788:	881b      	ldrh	r3, [r3, #0]
 801378a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801378c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801378e:	2b00      	cmp	r3, #0
 8013790:	f000 8090 	beq.w	80138b4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013796:	2b20      	cmp	r3, #32
 8013798:	d006      	beq.n	80137a8 <create_name+0x1bc>
 801379a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801379c:	2b2e      	cmp	r3, #46	; 0x2e
 801379e:	d10a      	bne.n	80137b6 <create_name+0x1ca>
 80137a0:	69ba      	ldr	r2, [r7, #24]
 80137a2:	697b      	ldr	r3, [r7, #20]
 80137a4:	429a      	cmp	r2, r3
 80137a6:	d006      	beq.n	80137b6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80137a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137ac:	f043 0303 	orr.w	r3, r3, #3
 80137b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80137b4:	e07d      	b.n	80138b2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80137b6:	6a3a      	ldr	r2, [r7, #32]
 80137b8:	69fb      	ldr	r3, [r7, #28]
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d203      	bcs.n	80137c6 <create_name+0x1da>
 80137be:	69ba      	ldr	r2, [r7, #24]
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	429a      	cmp	r2, r3
 80137c4:	d123      	bne.n	801380e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80137c6:	69fb      	ldr	r3, [r7, #28]
 80137c8:	2b0b      	cmp	r3, #11
 80137ca:	d106      	bne.n	80137da <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80137cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137d0:	f043 0303 	orr.w	r3, r3, #3
 80137d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80137d8:	e075      	b.n	80138c6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80137da:	69ba      	ldr	r2, [r7, #24]
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	429a      	cmp	r2, r3
 80137e0:	d005      	beq.n	80137ee <create_name+0x202>
 80137e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137e6:	f043 0303 	orr.w	r3, r3, #3
 80137ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80137ee:	69ba      	ldr	r2, [r7, #24]
 80137f0:	697b      	ldr	r3, [r7, #20]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d866      	bhi.n	80138c4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	61bb      	str	r3, [r7, #24]
 80137fa:	2308      	movs	r3, #8
 80137fc:	623b      	str	r3, [r7, #32]
 80137fe:	230b      	movs	r3, #11
 8013800:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8013802:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013806:	009b      	lsls	r3, r3, #2
 8013808:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801380c:	e051      	b.n	80138b2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801380e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013810:	2b7f      	cmp	r3, #127	; 0x7f
 8013812:	d914      	bls.n	801383e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013816:	2100      	movs	r1, #0
 8013818:	4618      	mov	r0, r3
 801381a:	f002 f859 	bl	80158d0 <ff_convert>
 801381e:	4603      	mov	r3, r0
 8013820:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8013822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013824:	2b00      	cmp	r3, #0
 8013826:	d004      	beq.n	8013832 <create_name+0x246>
 8013828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801382a:	3b80      	subs	r3, #128	; 0x80
 801382c:	4a23      	ldr	r2, [pc, #140]	; (80138bc <create_name+0x2d0>)
 801382e:	5cd3      	ldrb	r3, [r2, r3]
 8013830:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8013832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013836:	f043 0302 	orr.w	r3, r3, #2
 801383a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801383e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013840:	2b00      	cmp	r3, #0
 8013842:	d007      	beq.n	8013854 <create_name+0x268>
 8013844:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013846:	4619      	mov	r1, r3
 8013848:	481d      	ldr	r0, [pc, #116]	; (80138c0 <create_name+0x2d4>)
 801384a:	f7fe fa98 	bl	8011d7e <chk_chr>
 801384e:	4603      	mov	r3, r0
 8013850:	2b00      	cmp	r3, #0
 8013852:	d008      	beq.n	8013866 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8013854:	235f      	movs	r3, #95	; 0x5f
 8013856:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801385c:	f043 0303 	orr.w	r3, r3, #3
 8013860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013864:	e01b      	b.n	801389e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8013866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013868:	2b40      	cmp	r3, #64	; 0x40
 801386a:	d909      	bls.n	8013880 <create_name+0x294>
 801386c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801386e:	2b5a      	cmp	r3, #90	; 0x5a
 8013870:	d806      	bhi.n	8013880 <create_name+0x294>
					b |= 2;
 8013872:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013876:	f043 0302 	orr.w	r3, r3, #2
 801387a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801387e:	e00e      	b.n	801389e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8013880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013882:	2b60      	cmp	r3, #96	; 0x60
 8013884:	d90b      	bls.n	801389e <create_name+0x2b2>
 8013886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013888:	2b7a      	cmp	r3, #122	; 0x7a
 801388a:	d808      	bhi.n	801389e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801388c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013890:	f043 0301 	orr.w	r3, r3, #1
 8013894:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013898:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801389a:	3b20      	subs	r3, #32
 801389c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801389e:	6a3b      	ldr	r3, [r7, #32]
 80138a0:	1c5a      	adds	r2, r3, #1
 80138a2:	623a      	str	r2, [r7, #32]
 80138a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80138a6:	b2d1      	uxtb	r1, r2
 80138a8:	687a      	ldr	r2, [r7, #4]
 80138aa:	4413      	add	r3, r2
 80138ac:	460a      	mov	r2, r1
 80138ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80138b2:	e763      	b.n	801377c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80138b4:	bf00      	nop
 80138b6:	e006      	b.n	80138c6 <create_name+0x2da>
 80138b8:	0801c42c 	.word	0x0801c42c
 80138bc:	0802855c 	.word	0x0802855c
 80138c0:	0801c438 	.word	0x0801c438
			if (si > di) break;			/* No extension */
 80138c4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80138cc:	2be5      	cmp	r3, #229	; 0xe5
 80138ce:	d103      	bne.n	80138d8 <create_name+0x2ec>
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	2205      	movs	r2, #5
 80138d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80138d8:	69fb      	ldr	r3, [r7, #28]
 80138da:	2b08      	cmp	r3, #8
 80138dc:	d104      	bne.n	80138e8 <create_name+0x2fc>
 80138de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80138e2:	009b      	lsls	r3, r3, #2
 80138e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80138e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80138ec:	f003 030c 	and.w	r3, r3, #12
 80138f0:	2b0c      	cmp	r3, #12
 80138f2:	d005      	beq.n	8013900 <create_name+0x314>
 80138f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80138f8:	f003 0303 	and.w	r3, r3, #3
 80138fc:	2b03      	cmp	r3, #3
 80138fe:	d105      	bne.n	801390c <create_name+0x320>
 8013900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013904:	f043 0302 	orr.w	r3, r3, #2
 8013908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801390c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013910:	f003 0302 	and.w	r3, r3, #2
 8013914:	2b00      	cmp	r3, #0
 8013916:	d117      	bne.n	8013948 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013918:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801391c:	f003 0303 	and.w	r3, r3, #3
 8013920:	2b01      	cmp	r3, #1
 8013922:	d105      	bne.n	8013930 <create_name+0x344>
 8013924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013928:	f043 0310 	orr.w	r3, r3, #16
 801392c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8013930:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013934:	f003 030c 	and.w	r3, r3, #12
 8013938:	2b04      	cmp	r3, #4
 801393a:	d105      	bne.n	8013948 <create_name+0x35c>
 801393c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013940:	f043 0308 	orr.w	r3, r3, #8
 8013944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801394e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8013952:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8013954:	4618      	mov	r0, r3
 8013956:	3728      	adds	r7, #40	; 0x28
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}

0801395c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b086      	sub	sp, #24
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
 8013964:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013970:	e002      	b.n	8013978 <follow_path+0x1c>
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	3301      	adds	r3, #1
 8013976:	603b      	str	r3, [r7, #0]
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	781b      	ldrb	r3, [r3, #0]
 801397c:	2b2f      	cmp	r3, #47	; 0x2f
 801397e:	d0f8      	beq.n	8013972 <follow_path+0x16>
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	781b      	ldrb	r3, [r3, #0]
 8013984:	2b5c      	cmp	r3, #92	; 0x5c
 8013986:	d0f4      	beq.n	8013972 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013988:	693b      	ldr	r3, [r7, #16]
 801398a:	2200      	movs	r2, #0
 801398c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	781b      	ldrb	r3, [r3, #0]
 8013992:	2b1f      	cmp	r3, #31
 8013994:	d80a      	bhi.n	80139ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2280      	movs	r2, #128	; 0x80
 801399a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801399e:	2100      	movs	r1, #0
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	f7fe ff35 	bl	8012810 <dir_sdi>
 80139a6:	4603      	mov	r3, r0
 80139a8:	75fb      	strb	r3, [r7, #23]
 80139aa:	e043      	b.n	8013a34 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80139ac:	463b      	mov	r3, r7
 80139ae:	4619      	mov	r1, r3
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f7ff fe1b 	bl	80135ec <create_name>
 80139b6:	4603      	mov	r3, r0
 80139b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80139ba:	7dfb      	ldrb	r3, [r7, #23]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d134      	bne.n	8013a2a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f7ff fb7d 	bl	80130c0 <dir_find>
 80139c6:	4603      	mov	r3, r0
 80139c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80139d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80139d2:	7dfb      	ldrb	r3, [r7, #23]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d00a      	beq.n	80139ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80139d8:	7dfb      	ldrb	r3, [r7, #23]
 80139da:	2b04      	cmp	r3, #4
 80139dc:	d127      	bne.n	8013a2e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80139de:	7afb      	ldrb	r3, [r7, #11]
 80139e0:	f003 0304 	and.w	r3, r3, #4
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d122      	bne.n	8013a2e <follow_path+0xd2>
 80139e8:	2305      	movs	r3, #5
 80139ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80139ec:	e01f      	b.n	8013a2e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80139ee:	7afb      	ldrb	r3, [r7, #11]
 80139f0:	f003 0304 	and.w	r3, r3, #4
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d11c      	bne.n	8013a32 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80139f8:	693b      	ldr	r3, [r7, #16]
 80139fa:	799b      	ldrb	r3, [r3, #6]
 80139fc:	f003 0310 	and.w	r3, r3, #16
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d102      	bne.n	8013a0a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013a04:	2305      	movs	r3, #5
 8013a06:	75fb      	strb	r3, [r7, #23]
 8013a08:	e014      	b.n	8013a34 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	695b      	ldr	r3, [r3, #20]
 8013a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a18:	4413      	add	r3, r2
 8013a1a:	4619      	mov	r1, r3
 8013a1c:	68f8      	ldr	r0, [r7, #12]
 8013a1e:	f7ff f87e 	bl	8012b1e <ld_clust>
 8013a22:	4602      	mov	r2, r0
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013a28:	e7c0      	b.n	80139ac <follow_path+0x50>
			if (res != FR_OK) break;
 8013a2a:	bf00      	nop
 8013a2c:	e002      	b.n	8013a34 <follow_path+0xd8>
				break;
 8013a2e:	bf00      	nop
 8013a30:	e000      	b.n	8013a34 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013a32:	bf00      	nop
			}
		}
	}

	return res;
 8013a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a36:	4618      	mov	r0, r3
 8013a38:	3718      	adds	r7, #24
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	bd80      	pop	{r7, pc}

08013a3e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013a3e:	b480      	push	{r7}
 8013a40:	b087      	sub	sp, #28
 8013a42:	af00      	add	r7, sp, #0
 8013a44:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013a46:	f04f 33ff 	mov.w	r3, #4294967295
 8013a4a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d031      	beq.n	8013ab8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	617b      	str	r3, [r7, #20]
 8013a5a:	e002      	b.n	8013a62 <get_ldnumber+0x24>
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	3301      	adds	r3, #1
 8013a60:	617b      	str	r3, [r7, #20]
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	2b1f      	cmp	r3, #31
 8013a68:	d903      	bls.n	8013a72 <get_ldnumber+0x34>
 8013a6a:	697b      	ldr	r3, [r7, #20]
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	2b3a      	cmp	r3, #58	; 0x3a
 8013a70:	d1f4      	bne.n	8013a5c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013a72:	697b      	ldr	r3, [r7, #20]
 8013a74:	781b      	ldrb	r3, [r3, #0]
 8013a76:	2b3a      	cmp	r3, #58	; 0x3a
 8013a78:	d11c      	bne.n	8013ab4 <get_ldnumber+0x76>
			tp = *path;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	1c5a      	adds	r2, r3, #1
 8013a84:	60fa      	str	r2, [r7, #12]
 8013a86:	781b      	ldrb	r3, [r3, #0]
 8013a88:	3b30      	subs	r3, #48	; 0x30
 8013a8a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013a8c:	68bb      	ldr	r3, [r7, #8]
 8013a8e:	2b09      	cmp	r3, #9
 8013a90:	d80e      	bhi.n	8013ab0 <get_ldnumber+0x72>
 8013a92:	68fa      	ldr	r2, [r7, #12]
 8013a94:	697b      	ldr	r3, [r7, #20]
 8013a96:	429a      	cmp	r2, r3
 8013a98:	d10a      	bne.n	8013ab0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	2b01      	cmp	r3, #1
 8013a9e:	d807      	bhi.n	8013ab0 <get_ldnumber+0x72>
					vol = (int)i;
 8013aa0:	68bb      	ldr	r3, [r7, #8]
 8013aa2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013aa4:	697b      	ldr	r3, [r7, #20]
 8013aa6:	3301      	adds	r3, #1
 8013aa8:	617b      	str	r3, [r7, #20]
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	697a      	ldr	r2, [r7, #20]
 8013aae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013ab0:	693b      	ldr	r3, [r7, #16]
 8013ab2:	e002      	b.n	8013aba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013ab8:	693b      	ldr	r3, [r7, #16]
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	371c      	adds	r7, #28
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac4:	4770      	bx	lr
	...

08013ac8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b082      	sub	sp, #8
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	70da      	strb	r2, [r3, #3]
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	f04f 32ff 	mov.w	r2, #4294967295
 8013ade:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013ae0:	6839      	ldr	r1, [r7, #0]
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	f7fe fb16 	bl	8012114 <move_window>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d001      	beq.n	8013af2 <check_fs+0x2a>
 8013aee:	2304      	movs	r3, #4
 8013af0:	e038      	b.n	8013b64 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	3334      	adds	r3, #52	; 0x34
 8013af6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013afa:	4618      	mov	r0, r3
 8013afc:	f7fe f85a 	bl	8011bb4 <ld_word>
 8013b00:	4603      	mov	r3, r0
 8013b02:	461a      	mov	r2, r3
 8013b04:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013b08:	429a      	cmp	r2, r3
 8013b0a:	d001      	beq.n	8013b10 <check_fs+0x48>
 8013b0c:	2303      	movs	r3, #3
 8013b0e:	e029      	b.n	8013b64 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013b16:	2be9      	cmp	r3, #233	; 0xe9
 8013b18:	d009      	beq.n	8013b2e <check_fs+0x66>
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013b20:	2beb      	cmp	r3, #235	; 0xeb
 8013b22:	d11e      	bne.n	8013b62 <check_fs+0x9a>
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013b2a:	2b90      	cmp	r3, #144	; 0x90
 8013b2c:	d119      	bne.n	8013b62 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	3334      	adds	r3, #52	; 0x34
 8013b32:	3336      	adds	r3, #54	; 0x36
 8013b34:	4618      	mov	r0, r3
 8013b36:	f7fe f855 	bl	8011be4 <ld_dword>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013b40:	4a0a      	ldr	r2, [pc, #40]	; (8013b6c <check_fs+0xa4>)
 8013b42:	4293      	cmp	r3, r2
 8013b44:	d101      	bne.n	8013b4a <check_fs+0x82>
 8013b46:	2300      	movs	r3, #0
 8013b48:	e00c      	b.n	8013b64 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	3334      	adds	r3, #52	; 0x34
 8013b4e:	3352      	adds	r3, #82	; 0x52
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7fe f847 	bl	8011be4 <ld_dword>
 8013b56:	4603      	mov	r3, r0
 8013b58:	4a05      	ldr	r2, [pc, #20]	; (8013b70 <check_fs+0xa8>)
 8013b5a:	4293      	cmp	r3, r2
 8013b5c:	d101      	bne.n	8013b62 <check_fs+0x9a>
 8013b5e:	2300      	movs	r3, #0
 8013b60:	e000      	b.n	8013b64 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013b62:	2302      	movs	r3, #2
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3708      	adds	r7, #8
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}
 8013b6c:	00544146 	.word	0x00544146
 8013b70:	33544146 	.word	0x33544146

08013b74 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b096      	sub	sp, #88	; 0x58
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	60f8      	str	r0, [r7, #12]
 8013b7c:	60b9      	str	r1, [r7, #8]
 8013b7e:	4613      	mov	r3, r2
 8013b80:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013b82:	68bb      	ldr	r3, [r7, #8]
 8013b84:	2200      	movs	r2, #0
 8013b86:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013b88:	68f8      	ldr	r0, [r7, #12]
 8013b8a:	f7ff ff58 	bl	8013a3e <get_ldnumber>
 8013b8e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	da01      	bge.n	8013b9a <find_volume+0x26>
 8013b96:	230b      	movs	r3, #11
 8013b98:	e22d      	b.n	8013ff6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013b9a:	4aa1      	ldr	r2, [pc, #644]	; (8013e20 <find_volume+0x2ac>)
 8013b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ba2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d101      	bne.n	8013bae <find_volume+0x3a>
 8013baa:	230c      	movs	r3, #12
 8013bac:	e223      	b.n	8013ff6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013bae:	68bb      	ldr	r3, [r7, #8]
 8013bb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013bb2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013bb4:	79fb      	ldrb	r3, [r7, #7]
 8013bb6:	f023 0301 	bic.w	r3, r3, #1
 8013bba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bbe:	781b      	ldrb	r3, [r3, #0]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d01a      	beq.n	8013bfa <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc6:	785b      	ldrb	r3, [r3, #1]
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7fd ff4d 	bl	8011a68 <disk_status>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013bd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013bd8:	f003 0301 	and.w	r3, r3, #1
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d10c      	bne.n	8013bfa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013be0:	79fb      	ldrb	r3, [r7, #7]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d007      	beq.n	8013bf6 <find_volume+0x82>
 8013be6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013bea:	f003 0304 	and.w	r3, r3, #4
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d001      	beq.n	8013bf6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013bf2:	230a      	movs	r3, #10
 8013bf4:	e1ff      	b.n	8013ff6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	e1fd      	b.n	8013ff6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c02:	b2da      	uxtb	r2, r3
 8013c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c06:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c0a:	785b      	ldrb	r3, [r3, #1]
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7fd ff45 	bl	8011a9c <disk_initialize>
 8013c12:	4603      	mov	r3, r0
 8013c14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013c18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013c1c:	f003 0301 	and.w	r3, r3, #1
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d001      	beq.n	8013c28 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013c24:	2303      	movs	r3, #3
 8013c26:	e1e6      	b.n	8013ff6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013c28:	79fb      	ldrb	r3, [r7, #7]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d007      	beq.n	8013c3e <find_volume+0xca>
 8013c2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013c32:	f003 0304 	and.w	r3, r3, #4
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d001      	beq.n	8013c3e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013c3a:	230a      	movs	r3, #10
 8013c3c:	e1db      	b.n	8013ff6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013c42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013c44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013c46:	f7ff ff3f 	bl	8013ac8 <check_fs>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013c50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c54:	2b02      	cmp	r3, #2
 8013c56:	d149      	bne.n	8013cec <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013c58:	2300      	movs	r3, #0
 8013c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8013c5c:	e01e      	b.n	8013c9c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c60:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c66:	011b      	lsls	r3, r3, #4
 8013c68:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013c6c:	4413      	add	r3, r2
 8013c6e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c72:	3304      	adds	r3, #4
 8013c74:	781b      	ldrb	r3, [r3, #0]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d006      	beq.n	8013c88 <find_volume+0x114>
 8013c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c7c:	3308      	adds	r3, #8
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f7fd ffb0 	bl	8011be4 <ld_dword>
 8013c84:	4602      	mov	r2, r0
 8013c86:	e000      	b.n	8013c8a <find_volume+0x116>
 8013c88:	2200      	movs	r2, #0
 8013c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c8c:	009b      	lsls	r3, r3, #2
 8013c8e:	3358      	adds	r3, #88	; 0x58
 8013c90:	443b      	add	r3, r7
 8013c92:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c98:	3301      	adds	r3, #1
 8013c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8013c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c9e:	2b03      	cmp	r3, #3
 8013ca0:	d9dd      	bls.n	8013c5e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d002      	beq.n	8013cb2 <find_volume+0x13e>
 8013cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cae:	3b01      	subs	r3, #1
 8013cb0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cb4:	009b      	lsls	r3, r3, #2
 8013cb6:	3358      	adds	r3, #88	; 0x58
 8013cb8:	443b      	add	r3, r7
 8013cba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013cbe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d005      	beq.n	8013cd2 <find_volume+0x15e>
 8013cc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013cc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013cca:	f7ff fefd 	bl	8013ac8 <check_fs>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	e000      	b.n	8013cd4 <find_volume+0x160>
 8013cd2:	2303      	movs	r3, #3
 8013cd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013cd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013cdc:	2b01      	cmp	r3, #1
 8013cde:	d905      	bls.n	8013cec <find_volume+0x178>
 8013ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ce2:	3301      	adds	r3, #1
 8013ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8013ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ce8:	2b03      	cmp	r3, #3
 8013cea:	d9e2      	bls.n	8013cb2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013cec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013cf0:	2b04      	cmp	r3, #4
 8013cf2:	d101      	bne.n	8013cf8 <find_volume+0x184>
 8013cf4:	2301      	movs	r3, #1
 8013cf6:	e17e      	b.n	8013ff6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013cf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013cfc:	2b01      	cmp	r3, #1
 8013cfe:	d901      	bls.n	8013d04 <find_volume+0x190>
 8013d00:	230d      	movs	r3, #13
 8013d02:	e178      	b.n	8013ff6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d06:	3334      	adds	r3, #52	; 0x34
 8013d08:	330b      	adds	r3, #11
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f7fd ff52 	bl	8011bb4 <ld_word>
 8013d10:	4603      	mov	r3, r0
 8013d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013d16:	d001      	beq.n	8013d1c <find_volume+0x1a8>
 8013d18:	230d      	movs	r3, #13
 8013d1a:	e16c      	b.n	8013ff6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d1e:	3334      	adds	r3, #52	; 0x34
 8013d20:	3316      	adds	r3, #22
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7fd ff46 	bl	8011bb4 <ld_word>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d106      	bne.n	8013d40 <find_volume+0x1cc>
 8013d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d34:	3334      	adds	r3, #52	; 0x34
 8013d36:	3324      	adds	r3, #36	; 0x24
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f7fd ff53 	bl	8011be4 <ld_dword>
 8013d3e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013d44:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d48:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8013d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d4e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d52:	789b      	ldrb	r3, [r3, #2]
 8013d54:	2b01      	cmp	r3, #1
 8013d56:	d005      	beq.n	8013d64 <find_volume+0x1f0>
 8013d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d5a:	789b      	ldrb	r3, [r3, #2]
 8013d5c:	2b02      	cmp	r3, #2
 8013d5e:	d001      	beq.n	8013d64 <find_volume+0x1f0>
 8013d60:	230d      	movs	r3, #13
 8013d62:	e148      	b.n	8013ff6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d66:	789b      	ldrb	r3, [r3, #2]
 8013d68:	461a      	mov	r2, r3
 8013d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d6c:	fb02 f303 	mul.w	r3, r2, r3
 8013d70:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013d78:	b29a      	uxth	r2, r3
 8013d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d7c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d80:	895b      	ldrh	r3, [r3, #10]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d008      	beq.n	8013d98 <find_volume+0x224>
 8013d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d88:	895b      	ldrh	r3, [r3, #10]
 8013d8a:	461a      	mov	r2, r3
 8013d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d8e:	895b      	ldrh	r3, [r3, #10]
 8013d90:	3b01      	subs	r3, #1
 8013d92:	4013      	ands	r3, r2
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d001      	beq.n	8013d9c <find_volume+0x228>
 8013d98:	230d      	movs	r3, #13
 8013d9a:	e12c      	b.n	8013ff6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d9e:	3334      	adds	r3, #52	; 0x34
 8013da0:	3311      	adds	r3, #17
 8013da2:	4618      	mov	r0, r3
 8013da4:	f7fd ff06 	bl	8011bb4 <ld_word>
 8013da8:	4603      	mov	r3, r0
 8013daa:	461a      	mov	r2, r3
 8013dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013db2:	891b      	ldrh	r3, [r3, #8]
 8013db4:	f003 030f 	and.w	r3, r3, #15
 8013db8:	b29b      	uxth	r3, r3
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d001      	beq.n	8013dc2 <find_volume+0x24e>
 8013dbe:	230d      	movs	r3, #13
 8013dc0:	e119      	b.n	8013ff6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dc4:	3334      	adds	r3, #52	; 0x34
 8013dc6:	3313      	adds	r3, #19
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f7fd fef3 	bl	8011bb4 <ld_word>
 8013dce:	4603      	mov	r3, r0
 8013dd0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d106      	bne.n	8013de6 <find_volume+0x272>
 8013dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dda:	3334      	adds	r3, #52	; 0x34
 8013ddc:	3320      	adds	r3, #32
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7fd ff00 	bl	8011be4 <ld_dword>
 8013de4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013de8:	3334      	adds	r3, #52	; 0x34
 8013dea:	330e      	adds	r3, #14
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7fd fee1 	bl	8011bb4 <ld_word>
 8013df2:	4603      	mov	r3, r0
 8013df4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013df6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d101      	bne.n	8013e00 <find_volume+0x28c>
 8013dfc:	230d      	movs	r3, #13
 8013dfe:	e0fa      	b.n	8013ff6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013e00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e04:	4413      	add	r3, r2
 8013e06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013e08:	8912      	ldrh	r2, [r2, #8]
 8013e0a:	0912      	lsrs	r2, r2, #4
 8013e0c:	b292      	uxth	r2, r2
 8013e0e:	4413      	add	r3, r2
 8013e10:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d204      	bcs.n	8013e24 <find_volume+0x2b0>
 8013e1a:	230d      	movs	r3, #13
 8013e1c:	e0eb      	b.n	8013ff6 <find_volume+0x482>
 8013e1e:	bf00      	nop
 8013e20:	200053d8 	.word	0x200053d8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013e24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e28:	1ad3      	subs	r3, r2, r3
 8013e2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013e2c:	8952      	ldrh	r2, [r2, #10]
 8013e2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e32:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d101      	bne.n	8013e3e <find_volume+0x2ca>
 8013e3a:	230d      	movs	r3, #13
 8013e3c:	e0db      	b.n	8013ff6 <find_volume+0x482>
		fmt = FS_FAT32;
 8013e3e:	2303      	movs	r3, #3
 8013e40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e46:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013e4a:	4293      	cmp	r3, r2
 8013e4c:	d802      	bhi.n	8013e54 <find_volume+0x2e0>
 8013e4e:	2302      	movs	r3, #2
 8013e50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e56:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013e5a:	4293      	cmp	r3, r2
 8013e5c:	d802      	bhi.n	8013e64 <find_volume+0x2f0>
 8013e5e:	2301      	movs	r3, #1
 8013e60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e66:	1c9a      	adds	r2, r3, #2
 8013e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e6a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8013e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013e70:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013e72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e76:	441a      	add	r2, r3
 8013e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e7a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8013e7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e80:	441a      	add	r2, r3
 8013e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e84:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8013e86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e8a:	2b03      	cmp	r3, #3
 8013e8c:	d11e      	bne.n	8013ecc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e90:	3334      	adds	r3, #52	; 0x34
 8013e92:	332a      	adds	r3, #42	; 0x2a
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7fd fe8d 	bl	8011bb4 <ld_word>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d001      	beq.n	8013ea4 <find_volume+0x330>
 8013ea0:	230d      	movs	r3, #13
 8013ea2:	e0a8      	b.n	8013ff6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ea6:	891b      	ldrh	r3, [r3, #8]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d001      	beq.n	8013eb0 <find_volume+0x33c>
 8013eac:	230d      	movs	r3, #13
 8013eae:	e0a2      	b.n	8013ff6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eb2:	3334      	adds	r3, #52	; 0x34
 8013eb4:	332c      	adds	r3, #44	; 0x2c
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f7fd fe94 	bl	8011be4 <ld_dword>
 8013ebc:	4602      	mov	r2, r0
 8013ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ec0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ec4:	699b      	ldr	r3, [r3, #24]
 8013ec6:	009b      	lsls	r3, r3, #2
 8013ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8013eca:	e01f      	b.n	8013f0c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ece:	891b      	ldrh	r3, [r3, #8]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d101      	bne.n	8013ed8 <find_volume+0x364>
 8013ed4:	230d      	movs	r3, #13
 8013ed6:	e08e      	b.n	8013ff6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ede:	441a      	add	r2, r3
 8013ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ee2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013ee4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ee8:	2b02      	cmp	r3, #2
 8013eea:	d103      	bne.n	8013ef4 <find_volume+0x380>
 8013eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eee:	699b      	ldr	r3, [r3, #24]
 8013ef0:	005b      	lsls	r3, r3, #1
 8013ef2:	e00a      	b.n	8013f0a <find_volume+0x396>
 8013ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ef6:	699a      	ldr	r2, [r3, #24]
 8013ef8:	4613      	mov	r3, r2
 8013efa:	005b      	lsls	r3, r3, #1
 8013efc:	4413      	add	r3, r2
 8013efe:	085a      	lsrs	r2, r3, #1
 8013f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f02:	699b      	ldr	r3, [r3, #24]
 8013f04:	f003 0301 	and.w	r3, r3, #1
 8013f08:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013f0a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f0e:	69da      	ldr	r2, [r3, #28]
 8013f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f12:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013f16:	0a5b      	lsrs	r3, r3, #9
 8013f18:	429a      	cmp	r2, r3
 8013f1a:	d201      	bcs.n	8013f20 <find_volume+0x3ac>
 8013f1c:	230d      	movs	r3, #13
 8013f1e:	e06a      	b.n	8013ff6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f22:	f04f 32ff 	mov.w	r2, #4294967295
 8013f26:	615a      	str	r2, [r3, #20]
 8013f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f2a:	695a      	ldr	r2, [r3, #20]
 8013f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f2e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f32:	2280      	movs	r2, #128	; 0x80
 8013f34:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013f36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f3a:	2b03      	cmp	r3, #3
 8013f3c:	d149      	bne.n	8013fd2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f40:	3334      	adds	r3, #52	; 0x34
 8013f42:	3330      	adds	r3, #48	; 0x30
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7fd fe35 	bl	8011bb4 <ld_word>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	2b01      	cmp	r3, #1
 8013f4e:	d140      	bne.n	8013fd2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f52:	3301      	adds	r3, #1
 8013f54:	4619      	mov	r1, r3
 8013f56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013f58:	f7fe f8dc 	bl	8012114 <move_window>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d137      	bne.n	8013fd2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8013f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f64:	2200      	movs	r2, #0
 8013f66:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f6a:	3334      	adds	r3, #52	; 0x34
 8013f6c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7fd fe1f 	bl	8011bb4 <ld_word>
 8013f76:	4603      	mov	r3, r0
 8013f78:	461a      	mov	r2, r3
 8013f7a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	d127      	bne.n	8013fd2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f84:	3334      	adds	r3, #52	; 0x34
 8013f86:	4618      	mov	r0, r3
 8013f88:	f7fd fe2c 	bl	8011be4 <ld_dword>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	4a1c      	ldr	r2, [pc, #112]	; (8014000 <find_volume+0x48c>)
 8013f90:	4293      	cmp	r3, r2
 8013f92:	d11e      	bne.n	8013fd2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f96:	3334      	adds	r3, #52	; 0x34
 8013f98:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f7fd fe21 	bl	8011be4 <ld_dword>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	4a17      	ldr	r2, [pc, #92]	; (8014004 <find_volume+0x490>)
 8013fa6:	4293      	cmp	r3, r2
 8013fa8:	d113      	bne.n	8013fd2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fac:	3334      	adds	r3, #52	; 0x34
 8013fae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f7fd fe16 	bl	8011be4 <ld_dword>
 8013fb8:	4602      	mov	r2, r0
 8013fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fbc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fc0:	3334      	adds	r3, #52	; 0x34
 8013fc2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7fd fe0c 	bl	8011be4 <ld_dword>
 8013fcc:	4602      	mov	r2, r0
 8013fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fd0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fd4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013fd8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013fda:	4b0b      	ldr	r3, [pc, #44]	; (8014008 <find_volume+0x494>)
 8013fdc:	881b      	ldrh	r3, [r3, #0]
 8013fde:	3301      	adds	r3, #1
 8013fe0:	b29a      	uxth	r2, r3
 8013fe2:	4b09      	ldr	r3, [pc, #36]	; (8014008 <find_volume+0x494>)
 8013fe4:	801a      	strh	r2, [r3, #0]
 8013fe6:	4b08      	ldr	r3, [pc, #32]	; (8014008 <find_volume+0x494>)
 8013fe8:	881a      	ldrh	r2, [r3, #0]
 8013fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fec:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013fee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013ff0:	f7fe f828 	bl	8012044 <clear_lock>
#endif
	return FR_OK;
 8013ff4:	2300      	movs	r3, #0
}
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	3758      	adds	r7, #88	; 0x58
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bd80      	pop	{r7, pc}
 8013ffe:	bf00      	nop
 8014000:	41615252 	.word	0x41615252
 8014004:	61417272 	.word	0x61417272
 8014008:	200053e0 	.word	0x200053e0

0801400c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b084      	sub	sp, #16
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
 8014014:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014016:	2309      	movs	r3, #9
 8014018:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d01c      	beq.n	801405a <validate+0x4e>
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d018      	beq.n	801405a <validate+0x4e>
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	781b      	ldrb	r3, [r3, #0]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d013      	beq.n	801405a <validate+0x4e>
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	889a      	ldrh	r2, [r3, #4]
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	88db      	ldrh	r3, [r3, #6]
 801403c:	429a      	cmp	r2, r3
 801403e:	d10c      	bne.n	801405a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	785b      	ldrb	r3, [r3, #1]
 8014046:	4618      	mov	r0, r3
 8014048:	f7fd fd0e 	bl	8011a68 <disk_status>
 801404c:	4603      	mov	r3, r0
 801404e:	f003 0301 	and.w	r3, r3, #1
 8014052:	2b00      	cmp	r3, #0
 8014054:	d101      	bne.n	801405a <validate+0x4e>
			res = FR_OK;
 8014056:	2300      	movs	r3, #0
 8014058:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801405a:	7bfb      	ldrb	r3, [r7, #15]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d102      	bne.n	8014066 <validate+0x5a>
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	e000      	b.n	8014068 <validate+0x5c>
 8014066:	2300      	movs	r3, #0
 8014068:	683a      	ldr	r2, [r7, #0]
 801406a:	6013      	str	r3, [r2, #0]
	return res;
 801406c:	7bfb      	ldrb	r3, [r7, #15]
}
 801406e:	4618      	mov	r0, r3
 8014070:	3710      	adds	r7, #16
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}
	...

08014078 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b088      	sub	sp, #32
 801407c:	af00      	add	r7, sp, #0
 801407e:	60f8      	str	r0, [r7, #12]
 8014080:	60b9      	str	r1, [r7, #8]
 8014082:	4613      	mov	r3, r2
 8014084:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801408a:	f107 0310 	add.w	r3, r7, #16
 801408e:	4618      	mov	r0, r3
 8014090:	f7ff fcd5 	bl	8013a3e <get_ldnumber>
 8014094:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014096:	69fb      	ldr	r3, [r7, #28]
 8014098:	2b00      	cmp	r3, #0
 801409a:	da01      	bge.n	80140a0 <f_mount+0x28>
 801409c:	230b      	movs	r3, #11
 801409e:	e02b      	b.n	80140f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80140a0:	4a17      	ldr	r2, [pc, #92]	; (8014100 <f_mount+0x88>)
 80140a2:	69fb      	ldr	r3, [r7, #28]
 80140a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80140a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80140aa:	69bb      	ldr	r3, [r7, #24]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d005      	beq.n	80140bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80140b0:	69b8      	ldr	r0, [r7, #24]
 80140b2:	f7fd ffc7 	bl	8012044 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80140b6:	69bb      	ldr	r3, [r7, #24]
 80140b8:	2200      	movs	r2, #0
 80140ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d002      	beq.n	80140c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	2200      	movs	r2, #0
 80140c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80140c8:	68fa      	ldr	r2, [r7, #12]
 80140ca:	490d      	ldr	r1, [pc, #52]	; (8014100 <f_mount+0x88>)
 80140cc:	69fb      	ldr	r3, [r7, #28]
 80140ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d002      	beq.n	80140de <f_mount+0x66>
 80140d8:	79fb      	ldrb	r3, [r7, #7]
 80140da:	2b01      	cmp	r3, #1
 80140dc:	d001      	beq.n	80140e2 <f_mount+0x6a>
 80140de:	2300      	movs	r3, #0
 80140e0:	e00a      	b.n	80140f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80140e2:	f107 010c 	add.w	r1, r7, #12
 80140e6:	f107 0308 	add.w	r3, r7, #8
 80140ea:	2200      	movs	r2, #0
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7ff fd41 	bl	8013b74 <find_volume>
 80140f2:	4603      	mov	r3, r0
 80140f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80140f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80140f8:	4618      	mov	r0, r3
 80140fa:	3720      	adds	r7, #32
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}
 8014100:	200053d8 	.word	0x200053d8

08014104 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b09a      	sub	sp, #104	; 0x68
 8014108:	af00      	add	r7, sp, #0
 801410a:	60f8      	str	r0, [r7, #12]
 801410c:	60b9      	str	r1, [r7, #8]
 801410e:	4613      	mov	r3, r2
 8014110:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d101      	bne.n	801411c <f_open+0x18>
 8014118:	2309      	movs	r3, #9
 801411a:	e1bd      	b.n	8014498 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801411c:	79fb      	ldrb	r3, [r7, #7]
 801411e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014122:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014124:	79fa      	ldrb	r2, [r7, #7]
 8014126:	f107 0110 	add.w	r1, r7, #16
 801412a:	f107 0308 	add.w	r3, r7, #8
 801412e:	4618      	mov	r0, r3
 8014130:	f7ff fd20 	bl	8013b74 <find_volume>
 8014134:	4603      	mov	r3, r0
 8014136:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801413a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801413e:	2b00      	cmp	r3, #0
 8014140:	f040 81a1 	bne.w	8014486 <f_open+0x382>
		dj.obj.fs = fs;
 8014144:	693b      	ldr	r3, [r7, #16]
 8014146:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8014148:	f44f 7000 	mov.w	r0, #512	; 0x200
 801414c:	f001 fba9 	bl	80158a2 <ff_memalloc>
 8014150:	65b8      	str	r0, [r7, #88]	; 0x58
 8014152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014154:	2b00      	cmp	r3, #0
 8014156:	d101      	bne.n	801415c <f_open+0x58>
 8014158:	2311      	movs	r3, #17
 801415a:	e19d      	b.n	8014498 <f_open+0x394>
 801415c:	693b      	ldr	r3, [r7, #16]
 801415e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014160:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8014162:	68ba      	ldr	r2, [r7, #8]
 8014164:	f107 0314 	add.w	r3, r7, #20
 8014168:	4611      	mov	r1, r2
 801416a:	4618      	mov	r0, r3
 801416c:	f7ff fbf6 	bl	801395c <follow_path>
 8014170:	4603      	mov	r3, r0
 8014172:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014176:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801417a:	2b00      	cmp	r3, #0
 801417c:	d11a      	bne.n	80141b4 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801417e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014182:	b25b      	sxtb	r3, r3
 8014184:	2b00      	cmp	r3, #0
 8014186:	da03      	bge.n	8014190 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8014188:	2306      	movs	r3, #6
 801418a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801418e:	e011      	b.n	80141b4 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014190:	79fb      	ldrb	r3, [r7, #7]
 8014192:	f023 0301 	bic.w	r3, r3, #1
 8014196:	2b00      	cmp	r3, #0
 8014198:	bf14      	ite	ne
 801419a:	2301      	movne	r3, #1
 801419c:	2300      	moveq	r3, #0
 801419e:	b2db      	uxtb	r3, r3
 80141a0:	461a      	mov	r2, r3
 80141a2:	f107 0314 	add.w	r3, r7, #20
 80141a6:	4611      	mov	r1, r2
 80141a8:	4618      	mov	r0, r3
 80141aa:	f7fd fe03 	bl	8011db4 <chk_lock>
 80141ae:	4603      	mov	r3, r0
 80141b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80141b4:	79fb      	ldrb	r3, [r7, #7]
 80141b6:	f003 031c 	and.w	r3, r3, #28
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d07f      	beq.n	80142be <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 80141be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d017      	beq.n	80141f6 <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80141c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80141ca:	2b04      	cmp	r3, #4
 80141cc:	d10e      	bne.n	80141ec <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80141ce:	f7fd fe4d 	bl	8011e6c <enq_lock>
 80141d2:	4603      	mov	r3, r0
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d006      	beq.n	80141e6 <f_open+0xe2>
 80141d8:	f107 0314 	add.w	r3, r7, #20
 80141dc:	4618      	mov	r0, r3
 80141de:	f7ff f82f 	bl	8013240 <dir_register>
 80141e2:	4603      	mov	r3, r0
 80141e4:	e000      	b.n	80141e8 <f_open+0xe4>
 80141e6:	2312      	movs	r3, #18
 80141e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80141ec:	79fb      	ldrb	r3, [r7, #7]
 80141ee:	f043 0308 	orr.w	r3, r3, #8
 80141f2:	71fb      	strb	r3, [r7, #7]
 80141f4:	e010      	b.n	8014218 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80141f6:	7ebb      	ldrb	r3, [r7, #26]
 80141f8:	f003 0311 	and.w	r3, r3, #17
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d003      	beq.n	8014208 <f_open+0x104>
					res = FR_DENIED;
 8014200:	2307      	movs	r3, #7
 8014202:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014206:	e007      	b.n	8014218 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014208:	79fb      	ldrb	r3, [r7, #7]
 801420a:	f003 0304 	and.w	r3, r3, #4
 801420e:	2b00      	cmp	r3, #0
 8014210:	d002      	beq.n	8014218 <f_open+0x114>
 8014212:	2308      	movs	r3, #8
 8014214:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014218:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801421c:	2b00      	cmp	r3, #0
 801421e:	d168      	bne.n	80142f2 <f_open+0x1ee>
 8014220:	79fb      	ldrb	r3, [r7, #7]
 8014222:	f003 0308 	and.w	r3, r3, #8
 8014226:	2b00      	cmp	r3, #0
 8014228:	d063      	beq.n	80142f2 <f_open+0x1ee>
				dw = GET_FATTIME();
 801422a:	f7fd fcbb 	bl	8011ba4 <get_fattime>
 801422e:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014232:	330e      	adds	r3, #14
 8014234:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014236:	4618      	mov	r0, r3
 8014238:	f7fd fd12 	bl	8011c60 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801423c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801423e:	3316      	adds	r3, #22
 8014240:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014242:	4618      	mov	r0, r3
 8014244:	f7fd fd0c 	bl	8011c60 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801424a:	330b      	adds	r3, #11
 801424c:	2220      	movs	r2, #32
 801424e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014250:	693b      	ldr	r3, [r7, #16]
 8014252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014254:	4611      	mov	r1, r2
 8014256:	4618      	mov	r0, r3
 8014258:	f7fe fc61 	bl	8012b1e <ld_clust>
 801425c:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801425e:	693b      	ldr	r3, [r7, #16]
 8014260:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014262:	2200      	movs	r2, #0
 8014264:	4618      	mov	r0, r3
 8014266:	f7fe fc79 	bl	8012b5c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801426a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801426c:	331c      	adds	r3, #28
 801426e:	2100      	movs	r1, #0
 8014270:	4618      	mov	r0, r3
 8014272:	f7fd fcf5 	bl	8011c60 <st_dword>
					fs->wflag = 1;
 8014276:	693b      	ldr	r3, [r7, #16]
 8014278:	2201      	movs	r2, #1
 801427a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801427c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801427e:	2b00      	cmp	r3, #0
 8014280:	d037      	beq.n	80142f2 <f_open+0x1ee>
						dw = fs->winsect;
 8014282:	693b      	ldr	r3, [r7, #16]
 8014284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014286:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8014288:	f107 0314 	add.w	r3, r7, #20
 801428c:	2200      	movs	r2, #0
 801428e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014290:	4618      	mov	r0, r3
 8014292:	f7fe f98c 	bl	80125ae <remove_chain>
 8014296:	4603      	mov	r3, r0
 8014298:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801429c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d126      	bne.n	80142f2 <f_open+0x1ee>
							res = move_window(fs, dw);
 80142a4:	693b      	ldr	r3, [r7, #16]
 80142a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80142a8:	4618      	mov	r0, r3
 80142aa:	f7fd ff33 	bl	8012114 <move_window>
 80142ae:	4603      	mov	r3, r0
 80142b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80142b4:	693b      	ldr	r3, [r7, #16]
 80142b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80142b8:	3a01      	subs	r2, #1
 80142ba:	611a      	str	r2, [r3, #16]
 80142bc:	e019      	b.n	80142f2 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80142be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d115      	bne.n	80142f2 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80142c6:	7ebb      	ldrb	r3, [r7, #26]
 80142c8:	f003 0310 	and.w	r3, r3, #16
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d003      	beq.n	80142d8 <f_open+0x1d4>
					res = FR_NO_FILE;
 80142d0:	2304      	movs	r3, #4
 80142d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80142d6:	e00c      	b.n	80142f2 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80142d8:	79fb      	ldrb	r3, [r7, #7]
 80142da:	f003 0302 	and.w	r3, r3, #2
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d007      	beq.n	80142f2 <f_open+0x1ee>
 80142e2:	7ebb      	ldrb	r3, [r7, #26]
 80142e4:	f003 0301 	and.w	r3, r3, #1
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d002      	beq.n	80142f2 <f_open+0x1ee>
						res = FR_DENIED;
 80142ec:	2307      	movs	r3, #7
 80142ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80142f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d128      	bne.n	801434c <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80142fa:	79fb      	ldrb	r3, [r7, #7]
 80142fc:	f003 0308 	and.w	r3, r3, #8
 8014300:	2b00      	cmp	r3, #0
 8014302:	d003      	beq.n	801430c <f_open+0x208>
				mode |= FA_MODIFIED;
 8014304:	79fb      	ldrb	r3, [r7, #7]
 8014306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801430a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801430c:	693b      	ldr	r3, [r7, #16]
 801430e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801431a:	79fb      	ldrb	r3, [r7, #7]
 801431c:	f023 0301 	bic.w	r3, r3, #1
 8014320:	2b00      	cmp	r3, #0
 8014322:	bf14      	ite	ne
 8014324:	2301      	movne	r3, #1
 8014326:	2300      	moveq	r3, #0
 8014328:	b2db      	uxtb	r3, r3
 801432a:	461a      	mov	r2, r3
 801432c:	f107 0314 	add.w	r3, r7, #20
 8014330:	4611      	mov	r1, r2
 8014332:	4618      	mov	r0, r3
 8014334:	f7fd fdbc 	bl	8011eb0 <inc_lock>
 8014338:	4602      	mov	r2, r0
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	691b      	ldr	r3, [r3, #16]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d102      	bne.n	801434c <f_open+0x248>
 8014346:	2302      	movs	r3, #2
 8014348:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801434c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014350:	2b00      	cmp	r3, #0
 8014352:	f040 8095 	bne.w	8014480 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014356:	693b      	ldr	r3, [r7, #16]
 8014358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801435a:	4611      	mov	r1, r2
 801435c:	4618      	mov	r0, r3
 801435e:	f7fe fbde 	bl	8012b1e <ld_clust>
 8014362:	4602      	mov	r2, r0
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801436a:	331c      	adds	r3, #28
 801436c:	4618      	mov	r0, r3
 801436e:	f7fd fc39 	bl	8011be4 <ld_dword>
 8014372:	4602      	mov	r2, r0
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	2200      	movs	r2, #0
 801437c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801437e:	693a      	ldr	r2, [r7, #16]
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	88da      	ldrh	r2, [r3, #6]
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	79fa      	ldrb	r2, [r7, #7]
 8014390:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	2200      	movs	r2, #0
 8014396:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	2200      	movs	r2, #0
 801439c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	2200      	movs	r2, #0
 80143a2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	3330      	adds	r3, #48	; 0x30
 80143a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80143ac:	2100      	movs	r1, #0
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7fd fca3 	bl	8011cfa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80143b4:	79fb      	ldrb	r3, [r7, #7]
 80143b6:	f003 0320 	and.w	r3, r3, #32
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d060      	beq.n	8014480 <f_open+0x37c>
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	68db      	ldr	r3, [r3, #12]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d05c      	beq.n	8014480 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	68da      	ldr	r2, [r3, #12]
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	895b      	ldrh	r3, [r3, #10]
 80143d2:	025b      	lsls	r3, r3, #9
 80143d4:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	689b      	ldr	r3, [r3, #8]
 80143da:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	68db      	ldr	r3, [r3, #12]
 80143e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80143e2:	e016      	b.n	8014412 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80143e8:	4618      	mov	r0, r3
 80143ea:	f7fd ff4e 	bl	801228a <get_fat>
 80143ee:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80143f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80143f2:	2b01      	cmp	r3, #1
 80143f4:	d802      	bhi.n	80143fc <f_open+0x2f8>
 80143f6:	2302      	movs	r3, #2
 80143f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80143fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80143fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014402:	d102      	bne.n	801440a <f_open+0x306>
 8014404:	2301      	movs	r3, #1
 8014406:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801440a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801440c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801440e:	1ad3      	subs	r3, r2, r3
 8014410:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014412:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014416:	2b00      	cmp	r3, #0
 8014418:	d103      	bne.n	8014422 <f_open+0x31e>
 801441a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801441c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801441e:	429a      	cmp	r2, r3
 8014420:	d8e0      	bhi.n	80143e4 <f_open+0x2e0>
				}
				fp->clust = clst;
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014426:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014428:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801442c:	2b00      	cmp	r3, #0
 801442e:	d127      	bne.n	8014480 <f_open+0x37c>
 8014430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014436:	2b00      	cmp	r3, #0
 8014438:	d022      	beq.n	8014480 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801443e:	4618      	mov	r0, r3
 8014440:	f7fd ff04 	bl	801224c <clust2sect>
 8014444:	64b8      	str	r0, [r7, #72]	; 0x48
 8014446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014448:	2b00      	cmp	r3, #0
 801444a:	d103      	bne.n	8014454 <f_open+0x350>
						res = FR_INT_ERR;
 801444c:	2302      	movs	r3, #2
 801444e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014452:	e015      	b.n	8014480 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014456:	0a5a      	lsrs	r2, r3, #9
 8014458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801445a:	441a      	add	r2, r3
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	7858      	ldrb	r0, [r3, #1]
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	6a1a      	ldr	r2, [r3, #32]
 801446e:	2301      	movs	r3, #1
 8014470:	f7fd fb3a 	bl	8011ae8 <disk_read>
 8014474:	4603      	mov	r3, r0
 8014476:	2b00      	cmp	r3, #0
 8014478:	d002      	beq.n	8014480 <f_open+0x37c>
 801447a:	2301      	movs	r3, #1
 801447c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8014480:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8014482:	f001 fa1a 	bl	80158ba <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014486:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801448a:	2b00      	cmp	r3, #0
 801448c:	d002      	beq.n	8014494 <f_open+0x390>
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	2200      	movs	r2, #0
 8014492:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014494:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8014498:	4618      	mov	r0, r3
 801449a:	3768      	adds	r7, #104	; 0x68
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}

080144a0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b08e      	sub	sp, #56	; 0x38
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	60f8      	str	r0, [r7, #12]
 80144a8:	60b9      	str	r1, [r7, #8]
 80144aa:	607a      	str	r2, [r7, #4]
 80144ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80144b2:	683b      	ldr	r3, [r7, #0]
 80144b4:	2200      	movs	r2, #0
 80144b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	f107 0214 	add.w	r2, r7, #20
 80144be:	4611      	mov	r1, r2
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7ff fda3 	bl	801400c <validate>
 80144c6:	4603      	mov	r3, r0
 80144c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80144cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d107      	bne.n	80144e4 <f_read+0x44>
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	7d5b      	ldrb	r3, [r3, #21]
 80144d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80144dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d002      	beq.n	80144ea <f_read+0x4a>
 80144e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80144e8:	e115      	b.n	8014716 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	7d1b      	ldrb	r3, [r3, #20]
 80144ee:	f003 0301 	and.w	r3, r3, #1
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d101      	bne.n	80144fa <f_read+0x5a>
 80144f6:	2307      	movs	r3, #7
 80144f8:	e10d      	b.n	8014716 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	68da      	ldr	r2, [r3, #12]
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	699b      	ldr	r3, [r3, #24]
 8014502:	1ad3      	subs	r3, r2, r3
 8014504:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014506:	687a      	ldr	r2, [r7, #4]
 8014508:	6a3b      	ldr	r3, [r7, #32]
 801450a:	429a      	cmp	r2, r3
 801450c:	f240 80fe 	bls.w	801470c <f_read+0x26c>
 8014510:	6a3b      	ldr	r3, [r7, #32]
 8014512:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014514:	e0fa      	b.n	801470c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	699b      	ldr	r3, [r3, #24]
 801451a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801451e:	2b00      	cmp	r3, #0
 8014520:	f040 80c6 	bne.w	80146b0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	699b      	ldr	r3, [r3, #24]
 8014528:	0a5b      	lsrs	r3, r3, #9
 801452a:	697a      	ldr	r2, [r7, #20]
 801452c:	8952      	ldrh	r2, [r2, #10]
 801452e:	3a01      	subs	r2, #1
 8014530:	4013      	ands	r3, r2
 8014532:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014534:	69fb      	ldr	r3, [r7, #28]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d12f      	bne.n	801459a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	699b      	ldr	r3, [r3, #24]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d103      	bne.n	801454a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	689b      	ldr	r3, [r3, #8]
 8014546:	633b      	str	r3, [r7, #48]	; 0x30
 8014548:	e013      	b.n	8014572 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801454e:	2b00      	cmp	r3, #0
 8014550:	d007      	beq.n	8014562 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	699b      	ldr	r3, [r3, #24]
 8014556:	4619      	mov	r1, r3
 8014558:	68f8      	ldr	r0, [r7, #12]
 801455a:	f7fe f925 	bl	80127a8 <clmt_clust>
 801455e:	6338      	str	r0, [r7, #48]	; 0x30
 8014560:	e007      	b.n	8014572 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014562:	68fa      	ldr	r2, [r7, #12]
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	69db      	ldr	r3, [r3, #28]
 8014568:	4619      	mov	r1, r3
 801456a:	4610      	mov	r0, r2
 801456c:	f7fd fe8d 	bl	801228a <get_fat>
 8014570:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014574:	2b01      	cmp	r3, #1
 8014576:	d804      	bhi.n	8014582 <f_read+0xe2>
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	2202      	movs	r2, #2
 801457c:	755a      	strb	r2, [r3, #21]
 801457e:	2302      	movs	r3, #2
 8014580:	e0c9      	b.n	8014716 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014588:	d104      	bne.n	8014594 <f_read+0xf4>
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	2201      	movs	r2, #1
 801458e:	755a      	strb	r2, [r3, #21]
 8014590:	2301      	movs	r3, #1
 8014592:	e0c0      	b.n	8014716 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014598:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801459a:	697a      	ldr	r2, [r7, #20]
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	69db      	ldr	r3, [r3, #28]
 80145a0:	4619      	mov	r1, r3
 80145a2:	4610      	mov	r0, r2
 80145a4:	f7fd fe52 	bl	801224c <clust2sect>
 80145a8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80145aa:	69bb      	ldr	r3, [r7, #24]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d104      	bne.n	80145ba <f_read+0x11a>
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	2202      	movs	r2, #2
 80145b4:	755a      	strb	r2, [r3, #21]
 80145b6:	2302      	movs	r3, #2
 80145b8:	e0ad      	b.n	8014716 <f_read+0x276>
			sect += csect;
 80145ba:	69ba      	ldr	r2, [r7, #24]
 80145bc:	69fb      	ldr	r3, [r7, #28]
 80145be:	4413      	add	r3, r2
 80145c0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	0a5b      	lsrs	r3, r3, #9
 80145c6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80145c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d039      	beq.n	8014642 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80145ce:	69fa      	ldr	r2, [r7, #28]
 80145d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145d2:	4413      	add	r3, r2
 80145d4:	697a      	ldr	r2, [r7, #20]
 80145d6:	8952      	ldrh	r2, [r2, #10]
 80145d8:	4293      	cmp	r3, r2
 80145da:	d905      	bls.n	80145e8 <f_read+0x148>
					cc = fs->csize - csect;
 80145dc:	697b      	ldr	r3, [r7, #20]
 80145de:	895b      	ldrh	r3, [r3, #10]
 80145e0:	461a      	mov	r2, r3
 80145e2:	69fb      	ldr	r3, [r7, #28]
 80145e4:	1ad3      	subs	r3, r2, r3
 80145e6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80145e8:	697b      	ldr	r3, [r7, #20]
 80145ea:	7858      	ldrb	r0, [r3, #1]
 80145ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ee:	69ba      	ldr	r2, [r7, #24]
 80145f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80145f2:	f7fd fa79 	bl	8011ae8 <disk_read>
 80145f6:	4603      	mov	r3, r0
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d004      	beq.n	8014606 <f_read+0x166>
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	2201      	movs	r2, #1
 8014600:	755a      	strb	r2, [r3, #21]
 8014602:	2301      	movs	r3, #1
 8014604:	e087      	b.n	8014716 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	7d1b      	ldrb	r3, [r3, #20]
 801460a:	b25b      	sxtb	r3, r3
 801460c:	2b00      	cmp	r3, #0
 801460e:	da14      	bge.n	801463a <f_read+0x19a>
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	6a1a      	ldr	r2, [r3, #32]
 8014614:	69bb      	ldr	r3, [r7, #24]
 8014616:	1ad3      	subs	r3, r2, r3
 8014618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801461a:	429a      	cmp	r2, r3
 801461c:	d90d      	bls.n	801463a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	6a1a      	ldr	r2, [r3, #32]
 8014622:	69bb      	ldr	r3, [r7, #24]
 8014624:	1ad3      	subs	r3, r2, r3
 8014626:	025b      	lsls	r3, r3, #9
 8014628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801462a:	18d0      	adds	r0, r2, r3
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	3330      	adds	r3, #48	; 0x30
 8014630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014634:	4619      	mov	r1, r3
 8014636:	f7fd fb3f 	bl	8011cb8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801463c:	025b      	lsls	r3, r3, #9
 801463e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8014640:	e050      	b.n	80146e4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	6a1b      	ldr	r3, [r3, #32]
 8014646:	69ba      	ldr	r2, [r7, #24]
 8014648:	429a      	cmp	r2, r3
 801464a:	d02e      	beq.n	80146aa <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	7d1b      	ldrb	r3, [r3, #20]
 8014650:	b25b      	sxtb	r3, r3
 8014652:	2b00      	cmp	r3, #0
 8014654:	da18      	bge.n	8014688 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014656:	697b      	ldr	r3, [r7, #20]
 8014658:	7858      	ldrb	r0, [r3, #1]
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	6a1a      	ldr	r2, [r3, #32]
 8014664:	2301      	movs	r3, #1
 8014666:	f7fd fa5f 	bl	8011b28 <disk_write>
 801466a:	4603      	mov	r3, r0
 801466c:	2b00      	cmp	r3, #0
 801466e:	d004      	beq.n	801467a <f_read+0x1da>
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	2201      	movs	r2, #1
 8014674:	755a      	strb	r2, [r3, #21]
 8014676:	2301      	movs	r3, #1
 8014678:	e04d      	b.n	8014716 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	7d1b      	ldrb	r3, [r3, #20]
 801467e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014682:	b2da      	uxtb	r2, r3
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	7858      	ldrb	r0, [r3, #1]
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014692:	2301      	movs	r3, #1
 8014694:	69ba      	ldr	r2, [r7, #24]
 8014696:	f7fd fa27 	bl	8011ae8 <disk_read>
 801469a:	4603      	mov	r3, r0
 801469c:	2b00      	cmp	r3, #0
 801469e:	d004      	beq.n	80146aa <f_read+0x20a>
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	2201      	movs	r2, #1
 80146a4:	755a      	strb	r2, [r3, #21]
 80146a6:	2301      	movs	r3, #1
 80146a8:	e035      	b.n	8014716 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	69ba      	ldr	r2, [r7, #24]
 80146ae:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	699b      	ldr	r3, [r3, #24]
 80146b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80146b8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80146bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80146be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	429a      	cmp	r2, r3
 80146c4:	d901      	bls.n	80146ca <f_read+0x22a>
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	699b      	ldr	r3, [r3, #24]
 80146d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80146d8:	4413      	add	r3, r2
 80146da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146dc:	4619      	mov	r1, r3
 80146de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80146e0:	f7fd faea 	bl	8011cb8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80146e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146e8:	4413      	add	r3, r2
 80146ea:	627b      	str	r3, [r7, #36]	; 0x24
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	699a      	ldr	r2, [r3, #24]
 80146f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146f2:	441a      	add	r2, r3
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	619a      	str	r2, [r3, #24]
 80146f8:	683b      	ldr	r3, [r7, #0]
 80146fa:	681a      	ldr	r2, [r3, #0]
 80146fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146fe:	441a      	add	r2, r3
 8014700:	683b      	ldr	r3, [r7, #0]
 8014702:	601a      	str	r2, [r3, #0]
 8014704:	687a      	ldr	r2, [r7, #4]
 8014706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014708:	1ad3      	subs	r3, r2, r3
 801470a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	2b00      	cmp	r3, #0
 8014710:	f47f af01 	bne.w	8014516 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014714:	2300      	movs	r3, #0
}
 8014716:	4618      	mov	r0, r3
 8014718:	3738      	adds	r7, #56	; 0x38
 801471a:	46bd      	mov	sp, r7
 801471c:	bd80      	pop	{r7, pc}

0801471e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801471e:	b580      	push	{r7, lr}
 8014720:	b08c      	sub	sp, #48	; 0x30
 8014722:	af00      	add	r7, sp, #0
 8014724:	60f8      	str	r0, [r7, #12]
 8014726:	60b9      	str	r1, [r7, #8]
 8014728:	607a      	str	r2, [r7, #4]
 801472a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	2200      	movs	r2, #0
 8014734:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	f107 0210 	add.w	r2, r7, #16
 801473c:	4611      	mov	r1, r2
 801473e:	4618      	mov	r0, r3
 8014740:	f7ff fc64 	bl	801400c <validate>
 8014744:	4603      	mov	r3, r0
 8014746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801474a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801474e:	2b00      	cmp	r3, #0
 8014750:	d107      	bne.n	8014762 <f_write+0x44>
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	7d5b      	ldrb	r3, [r3, #21]
 8014756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801475a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801475e:	2b00      	cmp	r3, #0
 8014760:	d002      	beq.n	8014768 <f_write+0x4a>
 8014762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014766:	e14b      	b.n	8014a00 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	7d1b      	ldrb	r3, [r3, #20]
 801476c:	f003 0302 	and.w	r3, r3, #2
 8014770:	2b00      	cmp	r3, #0
 8014772:	d101      	bne.n	8014778 <f_write+0x5a>
 8014774:	2307      	movs	r3, #7
 8014776:	e143      	b.n	8014a00 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	699a      	ldr	r2, [r3, #24]
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	441a      	add	r2, r3
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	699b      	ldr	r3, [r3, #24]
 8014784:	429a      	cmp	r2, r3
 8014786:	f080 812d 	bcs.w	80149e4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	699b      	ldr	r3, [r3, #24]
 801478e:	43db      	mvns	r3, r3
 8014790:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014792:	e127      	b.n	80149e4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	699b      	ldr	r3, [r3, #24]
 8014798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801479c:	2b00      	cmp	r3, #0
 801479e:	f040 80e3 	bne.w	8014968 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	699b      	ldr	r3, [r3, #24]
 80147a6:	0a5b      	lsrs	r3, r3, #9
 80147a8:	693a      	ldr	r2, [r7, #16]
 80147aa:	8952      	ldrh	r2, [r2, #10]
 80147ac:	3a01      	subs	r2, #1
 80147ae:	4013      	ands	r3, r2
 80147b0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80147b2:	69bb      	ldr	r3, [r7, #24]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d143      	bne.n	8014840 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	699b      	ldr	r3, [r3, #24]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d10c      	bne.n	80147da <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	689b      	ldr	r3, [r3, #8]
 80147c4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80147c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d11a      	bne.n	8014802 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	2100      	movs	r1, #0
 80147d0:	4618      	mov	r0, r3
 80147d2:	f7fd ff51 	bl	8012678 <create_chain>
 80147d6:	62b8      	str	r0, [r7, #40]	; 0x28
 80147d8:	e013      	b.n	8014802 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d007      	beq.n	80147f2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	699b      	ldr	r3, [r3, #24]
 80147e6:	4619      	mov	r1, r3
 80147e8:	68f8      	ldr	r0, [r7, #12]
 80147ea:	f7fd ffdd 	bl	80127a8 <clmt_clust>
 80147ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80147f0:	e007      	b.n	8014802 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80147f2:	68fa      	ldr	r2, [r7, #12]
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	69db      	ldr	r3, [r3, #28]
 80147f8:	4619      	mov	r1, r3
 80147fa:	4610      	mov	r0, r2
 80147fc:	f7fd ff3c 	bl	8012678 <create_chain>
 8014800:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014804:	2b00      	cmp	r3, #0
 8014806:	f000 80f2 	beq.w	80149ee <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801480c:	2b01      	cmp	r3, #1
 801480e:	d104      	bne.n	801481a <f_write+0xfc>
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	2202      	movs	r2, #2
 8014814:	755a      	strb	r2, [r3, #21]
 8014816:	2302      	movs	r3, #2
 8014818:	e0f2      	b.n	8014a00 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801481c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014820:	d104      	bne.n	801482c <f_write+0x10e>
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	2201      	movs	r2, #1
 8014826:	755a      	strb	r2, [r3, #21]
 8014828:	2301      	movs	r3, #1
 801482a:	e0e9      	b.n	8014a00 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014830:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	689b      	ldr	r3, [r3, #8]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d102      	bne.n	8014840 <f_write+0x122>
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801483e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	7d1b      	ldrb	r3, [r3, #20]
 8014844:	b25b      	sxtb	r3, r3
 8014846:	2b00      	cmp	r3, #0
 8014848:	da18      	bge.n	801487c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	7858      	ldrb	r0, [r3, #1]
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	6a1a      	ldr	r2, [r3, #32]
 8014858:	2301      	movs	r3, #1
 801485a:	f7fd f965 	bl	8011b28 <disk_write>
 801485e:	4603      	mov	r3, r0
 8014860:	2b00      	cmp	r3, #0
 8014862:	d004      	beq.n	801486e <f_write+0x150>
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	2201      	movs	r2, #1
 8014868:	755a      	strb	r2, [r3, #21]
 801486a:	2301      	movs	r3, #1
 801486c:	e0c8      	b.n	8014a00 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	7d1b      	ldrb	r3, [r3, #20]
 8014872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014876:	b2da      	uxtb	r2, r3
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801487c:	693a      	ldr	r2, [r7, #16]
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	69db      	ldr	r3, [r3, #28]
 8014882:	4619      	mov	r1, r3
 8014884:	4610      	mov	r0, r2
 8014886:	f7fd fce1 	bl	801224c <clust2sect>
 801488a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801488c:	697b      	ldr	r3, [r7, #20]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d104      	bne.n	801489c <f_write+0x17e>
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	2202      	movs	r2, #2
 8014896:	755a      	strb	r2, [r3, #21]
 8014898:	2302      	movs	r3, #2
 801489a:	e0b1      	b.n	8014a00 <f_write+0x2e2>
			sect += csect;
 801489c:	697a      	ldr	r2, [r7, #20]
 801489e:	69bb      	ldr	r3, [r7, #24]
 80148a0:	4413      	add	r3, r2
 80148a2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	0a5b      	lsrs	r3, r3, #9
 80148a8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80148aa:	6a3b      	ldr	r3, [r7, #32]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d03c      	beq.n	801492a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80148b0:	69ba      	ldr	r2, [r7, #24]
 80148b2:	6a3b      	ldr	r3, [r7, #32]
 80148b4:	4413      	add	r3, r2
 80148b6:	693a      	ldr	r2, [r7, #16]
 80148b8:	8952      	ldrh	r2, [r2, #10]
 80148ba:	4293      	cmp	r3, r2
 80148bc:	d905      	bls.n	80148ca <f_write+0x1ac>
					cc = fs->csize - csect;
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	895b      	ldrh	r3, [r3, #10]
 80148c2:	461a      	mov	r2, r3
 80148c4:	69bb      	ldr	r3, [r7, #24]
 80148c6:	1ad3      	subs	r3, r2, r3
 80148c8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80148ca:	693b      	ldr	r3, [r7, #16]
 80148cc:	7858      	ldrb	r0, [r3, #1]
 80148ce:	6a3b      	ldr	r3, [r7, #32]
 80148d0:	697a      	ldr	r2, [r7, #20]
 80148d2:	69f9      	ldr	r1, [r7, #28]
 80148d4:	f7fd f928 	bl	8011b28 <disk_write>
 80148d8:	4603      	mov	r3, r0
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d004      	beq.n	80148e8 <f_write+0x1ca>
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	2201      	movs	r2, #1
 80148e2:	755a      	strb	r2, [r3, #21]
 80148e4:	2301      	movs	r3, #1
 80148e6:	e08b      	b.n	8014a00 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	6a1a      	ldr	r2, [r3, #32]
 80148ec:	697b      	ldr	r3, [r7, #20]
 80148ee:	1ad3      	subs	r3, r2, r3
 80148f0:	6a3a      	ldr	r2, [r7, #32]
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d915      	bls.n	8014922 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	6a1a      	ldr	r2, [r3, #32]
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	1ad3      	subs	r3, r2, r3
 8014904:	025b      	lsls	r3, r3, #9
 8014906:	69fa      	ldr	r2, [r7, #28]
 8014908:	4413      	add	r3, r2
 801490a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801490e:	4619      	mov	r1, r3
 8014910:	f7fd f9d2 	bl	8011cb8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	7d1b      	ldrb	r3, [r3, #20]
 8014918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801491c:	b2da      	uxtb	r2, r3
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014922:	6a3b      	ldr	r3, [r7, #32]
 8014924:	025b      	lsls	r3, r3, #9
 8014926:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014928:	e03f      	b.n	80149aa <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	6a1b      	ldr	r3, [r3, #32]
 801492e:	697a      	ldr	r2, [r7, #20]
 8014930:	429a      	cmp	r2, r3
 8014932:	d016      	beq.n	8014962 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	699a      	ldr	r2, [r3, #24]
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801493c:	429a      	cmp	r2, r3
 801493e:	d210      	bcs.n	8014962 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	7858      	ldrb	r0, [r3, #1]
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801494a:	2301      	movs	r3, #1
 801494c:	697a      	ldr	r2, [r7, #20]
 801494e:	f7fd f8cb 	bl	8011ae8 <disk_read>
 8014952:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014954:	2b00      	cmp	r3, #0
 8014956:	d004      	beq.n	8014962 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	2201      	movs	r2, #1
 801495c:	755a      	strb	r2, [r3, #21]
 801495e:	2301      	movs	r3, #1
 8014960:	e04e      	b.n	8014a00 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	697a      	ldr	r2, [r7, #20]
 8014966:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	699b      	ldr	r3, [r3, #24]
 801496c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014970:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014974:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	429a      	cmp	r2, r3
 801497c:	d901      	bls.n	8014982 <f_write+0x264>
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	699b      	ldr	r3, [r3, #24]
 801498c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014990:	4413      	add	r3, r2
 8014992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014994:	69f9      	ldr	r1, [r7, #28]
 8014996:	4618      	mov	r0, r3
 8014998:	f7fd f98e 	bl	8011cb8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	7d1b      	ldrb	r3, [r3, #20]
 80149a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80149a4:	b2da      	uxtb	r2, r3
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80149aa:	69fa      	ldr	r2, [r7, #28]
 80149ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ae:	4413      	add	r3, r2
 80149b0:	61fb      	str	r3, [r7, #28]
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	699a      	ldr	r2, [r3, #24]
 80149b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b8:	441a      	add	r2, r3
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	619a      	str	r2, [r3, #24]
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	68da      	ldr	r2, [r3, #12]
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	699b      	ldr	r3, [r3, #24]
 80149c6:	429a      	cmp	r2, r3
 80149c8:	bf38      	it	cc
 80149ca:	461a      	movcc	r2, r3
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	60da      	str	r2, [r3, #12]
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	681a      	ldr	r2, [r3, #0]
 80149d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d6:	441a      	add	r2, r3
 80149d8:	683b      	ldr	r3, [r7, #0]
 80149da:	601a      	str	r2, [r3, #0]
 80149dc:	687a      	ldr	r2, [r7, #4]
 80149de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e0:	1ad3      	subs	r3, r2, r3
 80149e2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	f47f aed4 	bne.w	8014794 <f_write+0x76>
 80149ec:	e000      	b.n	80149f0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80149ee:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	7d1b      	ldrb	r3, [r3, #20]
 80149f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149f8:	b2da      	uxtb	r2, r3
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80149fe:	2300      	movs	r3, #0
}
 8014a00:	4618      	mov	r0, r3
 8014a02:	3730      	adds	r7, #48	; 0x30
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}

08014a08 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b086      	sub	sp, #24
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	f107 0208 	add.w	r2, r7, #8
 8014a16:	4611      	mov	r1, r2
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f7ff faf7 	bl	801400c <validate>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014a22:	7dfb      	ldrb	r3, [r7, #23]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d168      	bne.n	8014afa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	7d1b      	ldrb	r3, [r3, #20]
 8014a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d062      	beq.n	8014afa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	7d1b      	ldrb	r3, [r3, #20]
 8014a38:	b25b      	sxtb	r3, r3
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	da15      	bge.n	8014a6a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	7858      	ldrb	r0, [r3, #1]
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	6a1a      	ldr	r2, [r3, #32]
 8014a4c:	2301      	movs	r3, #1
 8014a4e:	f7fd f86b 	bl	8011b28 <disk_write>
 8014a52:	4603      	mov	r3, r0
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d001      	beq.n	8014a5c <f_sync+0x54>
 8014a58:	2301      	movs	r3, #1
 8014a5a:	e04f      	b.n	8014afc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	7d1b      	ldrb	r3, [r3, #20]
 8014a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014a64:	b2da      	uxtb	r2, r3
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014a6a:	f7fd f89b 	bl	8011ba4 <get_fattime>
 8014a6e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014a70:	68ba      	ldr	r2, [r7, #8]
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a76:	4619      	mov	r1, r3
 8014a78:	4610      	mov	r0, r2
 8014a7a:	f7fd fb4b 	bl	8012114 <move_window>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014a82:	7dfb      	ldrb	r3, [r7, #23]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d138      	bne.n	8014afa <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a8c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	330b      	adds	r3, #11
 8014a92:	781a      	ldrb	r2, [r3, #0]
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	330b      	adds	r3, #11
 8014a98:	f042 0220 	orr.w	r2, r2, #32
 8014a9c:	b2d2      	uxtb	r2, r2
 8014a9e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	6818      	ldr	r0, [r3, #0]
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	689b      	ldr	r3, [r3, #8]
 8014aa8:	461a      	mov	r2, r3
 8014aaa:	68f9      	ldr	r1, [r7, #12]
 8014aac:	f7fe f856 	bl	8012b5c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	f103 021c 	add.w	r2, r3, #28
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	68db      	ldr	r3, [r3, #12]
 8014aba:	4619      	mov	r1, r3
 8014abc:	4610      	mov	r0, r2
 8014abe:	f7fd f8cf 	bl	8011c60 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	3316      	adds	r3, #22
 8014ac6:	6939      	ldr	r1, [r7, #16]
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f7fd f8c9 	bl	8011c60 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	3312      	adds	r3, #18
 8014ad2:	2100      	movs	r1, #0
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f7fd f8a8 	bl	8011c2a <st_word>
					fs->wflag = 1;
 8014ada:	68bb      	ldr	r3, [r7, #8]
 8014adc:	2201      	movs	r2, #1
 8014ade:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7fd fb44 	bl	8012170 <sync_fs>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	7d1b      	ldrb	r3, [r3, #20]
 8014af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014af4:	b2da      	uxtb	r2, r3
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8014afc:	4618      	mov	r0, r3
 8014afe:	3718      	adds	r7, #24
 8014b00:	46bd      	mov	sp, r7
 8014b02:	bd80      	pop	{r7, pc}

08014b04 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b084      	sub	sp, #16
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014b0c:	6878      	ldr	r0, [r7, #4]
 8014b0e:	f7ff ff7b 	bl	8014a08 <f_sync>
 8014b12:	4603      	mov	r3, r0
 8014b14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014b16:	7bfb      	ldrb	r3, [r7, #15]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d118      	bne.n	8014b4e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	f107 0208 	add.w	r2, r7, #8
 8014b22:	4611      	mov	r1, r2
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7ff fa71 	bl	801400c <validate>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014b2e:	7bfb      	ldrb	r3, [r7, #15]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d10c      	bne.n	8014b4e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	691b      	ldr	r3, [r3, #16]
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f7fd fa47 	bl	8011fcc <dec_lock>
 8014b3e:	4603      	mov	r3, r0
 8014b40:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014b42:	7bfb      	ldrb	r3, [r7, #15]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d102      	bne.n	8014b4e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b50:	4618      	mov	r0, r3
 8014b52:	3710      	adds	r7, #16
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd80      	pop	{r7, pc}

08014b58 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b090      	sub	sp, #64	; 0x40
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
 8014b60:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	f107 0208 	add.w	r2, r7, #8
 8014b68:	4611      	mov	r1, r2
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f7ff fa4e 	bl	801400c <validate>
 8014b70:	4603      	mov	r3, r0
 8014b72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014b76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d103      	bne.n	8014b86 <f_lseek+0x2e>
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	7d5b      	ldrb	r3, [r3, #21]
 8014b82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014b86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d002      	beq.n	8014b94 <f_lseek+0x3c>
 8014b8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014b92:	e1e6      	b.n	8014f62 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	f000 80d1 	beq.w	8014d40 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014b9e:	683b      	ldr	r3, [r7, #0]
 8014ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ba4:	d15a      	bne.n	8014c5c <f_lseek+0x104>
			tbl = fp->cltbl;
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014baa:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bae:	1d1a      	adds	r2, r3, #4
 8014bb0:	627a      	str	r2, [r7, #36]	; 0x24
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	617b      	str	r3, [r7, #20]
 8014bb6:	2302      	movs	r3, #2
 8014bb8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	689b      	ldr	r3, [r3, #8]
 8014bbe:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8014bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d03a      	beq.n	8014c3c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc8:	613b      	str	r3, [r7, #16]
 8014bca:	2300      	movs	r3, #0
 8014bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bd0:	3302      	adds	r3, #2
 8014bd2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bd6:	60fb      	str	r3, [r7, #12]
 8014bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bda:	3301      	adds	r3, #1
 8014bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014be2:	4618      	mov	r0, r3
 8014be4:	f7fd fb51 	bl	801228a <get_fat>
 8014be8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bec:	2b01      	cmp	r3, #1
 8014bee:	d804      	bhi.n	8014bfa <f_lseek+0xa2>
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	2202      	movs	r2, #2
 8014bf4:	755a      	strb	r2, [r3, #21]
 8014bf6:	2302      	movs	r3, #2
 8014bf8:	e1b3      	b.n	8014f62 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c00:	d104      	bne.n	8014c0c <f_lseek+0xb4>
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	2201      	movs	r2, #1
 8014c06:	755a      	strb	r2, [r3, #21]
 8014c08:	2301      	movs	r3, #1
 8014c0a:	e1aa      	b.n	8014f62 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	3301      	adds	r3, #1
 8014c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d0de      	beq.n	8014bd4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	429a      	cmp	r2, r3
 8014c1c:	d809      	bhi.n	8014c32 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8014c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c20:	1d1a      	adds	r2, r3, #4
 8014c22:	627a      	str	r2, [r7, #36]	; 0x24
 8014c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c26:	601a      	str	r2, [r3, #0]
 8014c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2a:	1d1a      	adds	r2, r3, #4
 8014c2c:	627a      	str	r2, [r7, #36]	; 0x24
 8014c2e:	693a      	ldr	r2, [r7, #16]
 8014c30:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	699b      	ldr	r3, [r3, #24]
 8014c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c38:	429a      	cmp	r2, r3
 8014c3a:	d3c4      	bcc.n	8014bc6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c42:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014c44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d803      	bhi.n	8014c54 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c4e:	2200      	movs	r2, #0
 8014c50:	601a      	str	r2, [r3, #0]
 8014c52:	e184      	b.n	8014f5e <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014c54:	2311      	movs	r3, #17
 8014c56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014c5a:	e180      	b.n	8014f5e <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	68db      	ldr	r3, [r3, #12]
 8014c60:	683a      	ldr	r2, [r7, #0]
 8014c62:	429a      	cmp	r2, r3
 8014c64:	d902      	bls.n	8014c6c <f_lseek+0x114>
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	68db      	ldr	r3, [r3, #12]
 8014c6a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	683a      	ldr	r2, [r7, #0]
 8014c70:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	f000 8172 	beq.w	8014f5e <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014c7a:	683b      	ldr	r3, [r7, #0]
 8014c7c:	3b01      	subs	r3, #1
 8014c7e:	4619      	mov	r1, r3
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f7fd fd91 	bl	80127a8 <clmt_clust>
 8014c86:	4602      	mov	r2, r0
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014c8c:	68ba      	ldr	r2, [r7, #8]
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	69db      	ldr	r3, [r3, #28]
 8014c92:	4619      	mov	r1, r3
 8014c94:	4610      	mov	r0, r2
 8014c96:	f7fd fad9 	bl	801224c <clust2sect>
 8014c9a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014c9c:	69bb      	ldr	r3, [r7, #24]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d104      	bne.n	8014cac <f_lseek+0x154>
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	2202      	movs	r2, #2
 8014ca6:	755a      	strb	r2, [r3, #21]
 8014ca8:	2302      	movs	r3, #2
 8014caa:	e15a      	b.n	8014f62 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014cac:	683b      	ldr	r3, [r7, #0]
 8014cae:	3b01      	subs	r3, #1
 8014cb0:	0a5b      	lsrs	r3, r3, #9
 8014cb2:	68ba      	ldr	r2, [r7, #8]
 8014cb4:	8952      	ldrh	r2, [r2, #10]
 8014cb6:	3a01      	subs	r2, #1
 8014cb8:	4013      	ands	r3, r2
 8014cba:	69ba      	ldr	r2, [r7, #24]
 8014cbc:	4413      	add	r3, r2
 8014cbe:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	699b      	ldr	r3, [r3, #24]
 8014cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	f000 8148 	beq.w	8014f5e <f_lseek+0x406>
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	6a1b      	ldr	r3, [r3, #32]
 8014cd2:	69ba      	ldr	r2, [r7, #24]
 8014cd4:	429a      	cmp	r2, r3
 8014cd6:	f000 8142 	beq.w	8014f5e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	7d1b      	ldrb	r3, [r3, #20]
 8014cde:	b25b      	sxtb	r3, r3
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	da18      	bge.n	8014d16 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	7858      	ldrb	r0, [r3, #1]
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	6a1a      	ldr	r2, [r3, #32]
 8014cf2:	2301      	movs	r3, #1
 8014cf4:	f7fc ff18 	bl	8011b28 <disk_write>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d004      	beq.n	8014d08 <f_lseek+0x1b0>
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	2201      	movs	r2, #1
 8014d02:	755a      	strb	r2, [r3, #21]
 8014d04:	2301      	movs	r3, #1
 8014d06:	e12c      	b.n	8014f62 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	7d1b      	ldrb	r3, [r3, #20]
 8014d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d10:	b2da      	uxtb	r2, r3
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014d16:	68bb      	ldr	r3, [r7, #8]
 8014d18:	7858      	ldrb	r0, [r3, #1]
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014d20:	2301      	movs	r3, #1
 8014d22:	69ba      	ldr	r2, [r7, #24]
 8014d24:	f7fc fee0 	bl	8011ae8 <disk_read>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d004      	beq.n	8014d38 <f_lseek+0x1e0>
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	2201      	movs	r2, #1
 8014d32:	755a      	strb	r2, [r3, #21]
 8014d34:	2301      	movs	r3, #1
 8014d36:	e114      	b.n	8014f62 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	69ba      	ldr	r2, [r7, #24]
 8014d3c:	621a      	str	r2, [r3, #32]
 8014d3e:	e10e      	b.n	8014f5e <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	68db      	ldr	r3, [r3, #12]
 8014d44:	683a      	ldr	r2, [r7, #0]
 8014d46:	429a      	cmp	r2, r3
 8014d48:	d908      	bls.n	8014d5c <f_lseek+0x204>
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	7d1b      	ldrb	r3, [r3, #20]
 8014d4e:	f003 0302 	and.w	r3, r3, #2
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d102      	bne.n	8014d5c <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	68db      	ldr	r3, [r3, #12]
 8014d5a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	699b      	ldr	r3, [r3, #24]
 8014d60:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014d62:	2300      	movs	r3, #0
 8014d64:	637b      	str	r3, [r7, #52]	; 0x34
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d6a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014d6c:	683b      	ldr	r3, [r7, #0]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	f000 80a7 	beq.w	8014ec2 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014d74:	68bb      	ldr	r3, [r7, #8]
 8014d76:	895b      	ldrh	r3, [r3, #10]
 8014d78:	025b      	lsls	r3, r3, #9
 8014d7a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014d7c:	6a3b      	ldr	r3, [r7, #32]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d01b      	beq.n	8014dba <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014d82:	683b      	ldr	r3, [r7, #0]
 8014d84:	1e5a      	subs	r2, r3, #1
 8014d86:	69fb      	ldr	r3, [r7, #28]
 8014d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8014d8c:	6a3b      	ldr	r3, [r7, #32]
 8014d8e:	1e59      	subs	r1, r3, #1
 8014d90:	69fb      	ldr	r3, [r7, #28]
 8014d92:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014d96:	429a      	cmp	r2, r3
 8014d98:	d30f      	bcc.n	8014dba <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014d9a:	6a3b      	ldr	r3, [r7, #32]
 8014d9c:	1e5a      	subs	r2, r3, #1
 8014d9e:	69fb      	ldr	r3, [r7, #28]
 8014da0:	425b      	negs	r3, r3
 8014da2:	401a      	ands	r2, r3
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	699b      	ldr	r3, [r3, #24]
 8014dac:	683a      	ldr	r2, [r7, #0]
 8014dae:	1ad3      	subs	r3, r2, r3
 8014db0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	69db      	ldr	r3, [r3, #28]
 8014db6:	63bb      	str	r3, [r7, #56]	; 0x38
 8014db8:	e022      	b.n	8014e00 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	689b      	ldr	r3, [r3, #8]
 8014dbe:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d119      	bne.n	8014dfa <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	2100      	movs	r1, #0
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f7fd fc54 	bl	8012678 <create_chain>
 8014dd0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dd4:	2b01      	cmp	r3, #1
 8014dd6:	d104      	bne.n	8014de2 <f_lseek+0x28a>
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	2202      	movs	r2, #2
 8014ddc:	755a      	strb	r2, [r3, #21]
 8014dde:	2302      	movs	r3, #2
 8014de0:	e0bf      	b.n	8014f62 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014de8:	d104      	bne.n	8014df4 <f_lseek+0x29c>
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	2201      	movs	r2, #1
 8014dee:	755a      	strb	r2, [r3, #21]
 8014df0:	2301      	movs	r3, #1
 8014df2:	e0b6      	b.n	8014f62 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014df8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014dfe:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d05d      	beq.n	8014ec2 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8014e06:	e03a      	b.n	8014e7e <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8014e08:	683a      	ldr	r2, [r7, #0]
 8014e0a:	69fb      	ldr	r3, [r7, #28]
 8014e0c:	1ad3      	subs	r3, r2, r3
 8014e0e:	603b      	str	r3, [r7, #0]
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	699a      	ldr	r2, [r3, #24]
 8014e14:	69fb      	ldr	r3, [r7, #28]
 8014e16:	441a      	add	r2, r3
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	7d1b      	ldrb	r3, [r3, #20]
 8014e20:	f003 0302 	and.w	r3, r3, #2
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d00b      	beq.n	8014e40 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7fd fc23 	bl	8012678 <create_chain>
 8014e32:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d108      	bne.n	8014e4c <f_lseek+0x2f4>
							ofs = 0; break;
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	603b      	str	r3, [r7, #0]
 8014e3e:	e022      	b.n	8014e86 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014e44:	4618      	mov	r0, r3
 8014e46:	f7fd fa20 	bl	801228a <get_fat>
 8014e4a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e52:	d104      	bne.n	8014e5e <f_lseek+0x306>
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	2201      	movs	r2, #1
 8014e58:	755a      	strb	r2, [r3, #21]
 8014e5a:	2301      	movs	r3, #1
 8014e5c:	e081      	b.n	8014f62 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e60:	2b01      	cmp	r3, #1
 8014e62:	d904      	bls.n	8014e6e <f_lseek+0x316>
 8014e64:	68bb      	ldr	r3, [r7, #8]
 8014e66:	699b      	ldr	r3, [r3, #24]
 8014e68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e6a:	429a      	cmp	r2, r3
 8014e6c:	d304      	bcc.n	8014e78 <f_lseek+0x320>
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	2202      	movs	r2, #2
 8014e72:	755a      	strb	r2, [r3, #21]
 8014e74:	2302      	movs	r3, #2
 8014e76:	e074      	b.n	8014f62 <f_lseek+0x40a>
					fp->clust = clst;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e7c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014e7e:	683a      	ldr	r2, [r7, #0]
 8014e80:	69fb      	ldr	r3, [r7, #28]
 8014e82:	429a      	cmp	r2, r3
 8014e84:	d8c0      	bhi.n	8014e08 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	699a      	ldr	r2, [r3, #24]
 8014e8a:	683b      	ldr	r3, [r7, #0]
 8014e8c:	441a      	add	r2, r3
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014e92:	683b      	ldr	r3, [r7, #0]
 8014e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d012      	beq.n	8014ec2 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014e9c:	68bb      	ldr	r3, [r7, #8]
 8014e9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f7fd f9d3 	bl	801224c <clust2sect>
 8014ea6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d104      	bne.n	8014eb8 <f_lseek+0x360>
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	2202      	movs	r2, #2
 8014eb2:	755a      	strb	r2, [r3, #21]
 8014eb4:	2302      	movs	r3, #2
 8014eb6:	e054      	b.n	8014f62 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	0a5b      	lsrs	r3, r3, #9
 8014ebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ebe:	4413      	add	r3, r2
 8014ec0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	699a      	ldr	r2, [r3, #24]
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	68db      	ldr	r3, [r3, #12]
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	d90a      	bls.n	8014ee4 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	699a      	ldr	r2, [r3, #24]
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	7d1b      	ldrb	r3, [r3, #20]
 8014eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ede:	b2da      	uxtb	r2, r3
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	699b      	ldr	r3, [r3, #24]
 8014ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d036      	beq.n	8014f5e <f_lseek+0x406>
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	6a1b      	ldr	r3, [r3, #32]
 8014ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ef6:	429a      	cmp	r2, r3
 8014ef8:	d031      	beq.n	8014f5e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	7d1b      	ldrb	r3, [r3, #20]
 8014efe:	b25b      	sxtb	r3, r3
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	da18      	bge.n	8014f36 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014f04:	68bb      	ldr	r3, [r7, #8]
 8014f06:	7858      	ldrb	r0, [r3, #1]
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	6a1a      	ldr	r2, [r3, #32]
 8014f12:	2301      	movs	r3, #1
 8014f14:	f7fc fe08 	bl	8011b28 <disk_write>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d004      	beq.n	8014f28 <f_lseek+0x3d0>
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	2201      	movs	r2, #1
 8014f22:	755a      	strb	r2, [r3, #21]
 8014f24:	2301      	movs	r3, #1
 8014f26:	e01c      	b.n	8014f62 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	7d1b      	ldrb	r3, [r3, #20]
 8014f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f30:	b2da      	uxtb	r2, r3
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014f36:	68bb      	ldr	r3, [r7, #8]
 8014f38:	7858      	ldrb	r0, [r3, #1]
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014f40:	2301      	movs	r3, #1
 8014f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f44:	f7fc fdd0 	bl	8011ae8 <disk_read>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d004      	beq.n	8014f58 <f_lseek+0x400>
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	2201      	movs	r2, #1
 8014f52:	755a      	strb	r2, [r3, #21]
 8014f54:	2301      	movs	r3, #1
 8014f56:	e004      	b.n	8014f62 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f5c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014f5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014f62:	4618      	mov	r0, r3
 8014f64:	3740      	adds	r7, #64	; 0x40
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}

08014f6a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8014f6a:	b580      	push	{r7, lr}
 8014f6c:	b086      	sub	sp, #24
 8014f6e:	af00      	add	r7, sp, #0
 8014f70:	6078      	str	r0, [r7, #4]
 8014f72:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d101      	bne.n	8014f7e <f_opendir+0x14>
 8014f7a:	2309      	movs	r3, #9
 8014f7c:	e074      	b.n	8015068 <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8014f82:	f107 0108 	add.w	r1, r7, #8
 8014f86:	463b      	mov	r3, r7
 8014f88:	2200      	movs	r2, #0
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f7fe fdf2 	bl	8013b74 <find_volume>
 8014f90:	4603      	mov	r3, r0
 8014f92:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014f94:	7dfb      	ldrb	r3, [r7, #23]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d15f      	bne.n	801505a <f_opendir+0xf0>
		obj->fs = fs;
 8014f9a:	68ba      	ldr	r2, [r7, #8]
 8014f9c:	693b      	ldr	r3, [r7, #16]
 8014f9e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8014fa0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014fa4:	f000 fc7d 	bl	80158a2 <ff_memalloc>
 8014fa8:	60f8      	str	r0, [r7, #12]
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d101      	bne.n	8014fb4 <f_opendir+0x4a>
 8014fb0:	2311      	movs	r3, #17
 8014fb2:	e059      	b.n	8015068 <f_opendir+0xfe>
 8014fb4:	68bb      	ldr	r3, [r7, #8]
 8014fb6:	68fa      	ldr	r2, [r7, #12]
 8014fb8:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	4619      	mov	r1, r3
 8014fbe:	6878      	ldr	r0, [r7, #4]
 8014fc0:	f7fe fccc 	bl	801395c <follow_path>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8014fc8:	7dfb      	ldrb	r3, [r7, #23]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d13d      	bne.n	801504a <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014fd4:	b25b      	sxtb	r3, r3
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	db12      	blt.n	8015000 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8014fda:	693b      	ldr	r3, [r7, #16]
 8014fdc:	799b      	ldrb	r3, [r3, #6]
 8014fde:	f003 0310 	and.w	r3, r3, #16
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d00a      	beq.n	8014ffc <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8014fe6:	68ba      	ldr	r2, [r7, #8]
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	6a1b      	ldr	r3, [r3, #32]
 8014fec:	4619      	mov	r1, r3
 8014fee:	4610      	mov	r0, r2
 8014ff0:	f7fd fd95 	bl	8012b1e <ld_clust>
 8014ff4:	4602      	mov	r2, r0
 8014ff6:	693b      	ldr	r3, [r7, #16]
 8014ff8:	609a      	str	r2, [r3, #8]
 8014ffa:	e001      	b.n	8015000 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8014ffc:	2305      	movs	r3, #5
 8014ffe:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8015000:	7dfb      	ldrb	r3, [r7, #23]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d121      	bne.n	801504a <f_opendir+0xe0>
				obj->id = fs->id;
 8015006:	68bb      	ldr	r3, [r7, #8]
 8015008:	88da      	ldrh	r2, [r3, #6]
 801500a:	693b      	ldr	r3, [r7, #16]
 801500c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801500e:	2100      	movs	r1, #0
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f7fd fbfd 	bl	8012810 <dir_sdi>
 8015016:	4603      	mov	r3, r0
 8015018:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801501a:	7dfb      	ldrb	r3, [r7, #23]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d114      	bne.n	801504a <f_opendir+0xe0>
					if (obj->sclust) {
 8015020:	693b      	ldr	r3, [r7, #16]
 8015022:	689b      	ldr	r3, [r3, #8]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d00d      	beq.n	8015044 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8015028:	2100      	movs	r1, #0
 801502a:	6878      	ldr	r0, [r7, #4]
 801502c:	f7fc ff40 	bl	8011eb0 <inc_lock>
 8015030:	4602      	mov	r2, r0
 8015032:	693b      	ldr	r3, [r7, #16]
 8015034:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	691b      	ldr	r3, [r3, #16]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d105      	bne.n	801504a <f_opendir+0xe0>
 801503e:	2312      	movs	r3, #18
 8015040:	75fb      	strb	r3, [r7, #23]
 8015042:	e002      	b.n	801504a <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8015044:	693b      	ldr	r3, [r7, #16]
 8015046:	2200      	movs	r2, #0
 8015048:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 801504a:	68f8      	ldr	r0, [r7, #12]
 801504c:	f000 fc35 	bl	80158ba <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015050:	7dfb      	ldrb	r3, [r7, #23]
 8015052:	2b04      	cmp	r3, #4
 8015054:	d101      	bne.n	801505a <f_opendir+0xf0>
 8015056:	2305      	movs	r3, #5
 8015058:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801505a:	7dfb      	ldrb	r3, [r7, #23]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d002      	beq.n	8015066 <f_opendir+0xfc>
 8015060:	693b      	ldr	r3, [r7, #16]
 8015062:	2200      	movs	r2, #0
 8015064:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015066:	7dfb      	ldrb	r3, [r7, #23]
}
 8015068:	4618      	mov	r0, r3
 801506a:	3718      	adds	r7, #24
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}

08015070 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b084      	sub	sp, #16
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f107 0208 	add.w	r2, r7, #8
 801507e:	4611      	mov	r1, r2
 8015080:	4618      	mov	r0, r3
 8015082:	f7fe ffc3 	bl	801400c <validate>
 8015086:	4603      	mov	r3, r0
 8015088:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801508a:	7bfb      	ldrb	r3, [r7, #15]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d110      	bne.n	80150b2 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	691b      	ldr	r3, [r3, #16]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d006      	beq.n	80150a6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	691b      	ldr	r3, [r3, #16]
 801509c:	4618      	mov	r0, r3
 801509e:	f7fc ff95 	bl	8011fcc <dec_lock>
 80150a2:	4603      	mov	r3, r0
 80150a4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80150a6:	7bfb      	ldrb	r3, [r7, #15]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d102      	bne.n	80150b2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	2200      	movs	r2, #0
 80150b0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80150b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80150b4:	4618      	mov	r0, r3
 80150b6:	3710      	adds	r7, #16
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd80      	pop	{r7, pc}

080150bc <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b086      	sub	sp, #24
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
 80150c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f107 020c 	add.w	r2, r7, #12
 80150cc:	4611      	mov	r1, r2
 80150ce:	4618      	mov	r0, r3
 80150d0:	f7fe ff9c 	bl	801400c <validate>
 80150d4:	4603      	mov	r3, r0
 80150d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80150d8:	7dfb      	ldrb	r3, [r7, #23]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d136      	bne.n	801514c <f_readdir+0x90>
		if (!fno) {
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d106      	bne.n	80150f2 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80150e4:	2100      	movs	r1, #0
 80150e6:	6878      	ldr	r0, [r7, #4]
 80150e8:	f7fd fb92 	bl	8012810 <dir_sdi>
 80150ec:	4603      	mov	r3, r0
 80150ee:	75fb      	strb	r3, [r7, #23]
 80150f0:	e02c      	b.n	801514c <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 80150f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80150f6:	f000 fbd4 	bl	80158a2 <ff_memalloc>
 80150fa:	6138      	str	r0, [r7, #16]
 80150fc:	693b      	ldr	r3, [r7, #16]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d101      	bne.n	8015106 <f_readdir+0x4a>
 8015102:	2311      	movs	r3, #17
 8015104:	e023      	b.n	801514e <f_readdir+0x92>
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	693a      	ldr	r2, [r7, #16]
 801510a:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 801510c:	2100      	movs	r1, #0
 801510e:	6878      	ldr	r0, [r7, #4]
 8015110:	f7fd ff2f 	bl	8012f72 <dir_read>
 8015114:	4603      	mov	r3, r0
 8015116:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8015118:	7dfb      	ldrb	r3, [r7, #23]
 801511a:	2b04      	cmp	r3, #4
 801511c:	d101      	bne.n	8015122 <f_readdir+0x66>
 801511e:	2300      	movs	r3, #0
 8015120:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 8015122:	7dfb      	ldrb	r3, [r7, #23]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d10e      	bne.n	8015146 <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 8015128:	6839      	ldr	r1, [r7, #0]
 801512a:	6878      	ldr	r0, [r7, #4]
 801512c:	f7fe f980 	bl	8013430 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8015130:	2100      	movs	r1, #0
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f7fd fbe7 	bl	8012906 <dir_next>
 8015138:	4603      	mov	r3, r0
 801513a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801513c:	7dfb      	ldrb	r3, [r7, #23]
 801513e:	2b04      	cmp	r3, #4
 8015140:	d101      	bne.n	8015146 <f_readdir+0x8a>
 8015142:	2300      	movs	r3, #0
 8015144:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 8015146:	6938      	ldr	r0, [r7, #16]
 8015148:	f000 fbb7 	bl	80158ba <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 801514c:	7dfb      	ldrb	r3, [r7, #23]
}
 801514e:	4618      	mov	r0, r3
 8015150:	3718      	adds	r7, #24
 8015152:	46bd      	mov	sp, r7
 8015154:	bd80      	pop	{r7, pc}

08015156 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8015156:	b580      	push	{r7, lr}
 8015158:	b092      	sub	sp, #72	; 0x48
 801515a:	af00      	add	r7, sp, #0
 801515c:	60f8      	str	r0, [r7, #12]
 801515e:	60b9      	str	r1, [r7, #8]
 8015160:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8015162:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8015166:	f107 030c 	add.w	r3, r7, #12
 801516a:	2200      	movs	r2, #0
 801516c:	4618      	mov	r0, r3
 801516e:	f7fe fd01 	bl	8013b74 <find_volume>
 8015172:	4603      	mov	r3, r0
 8015174:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8015178:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801517c:	2b00      	cmp	r3, #0
 801517e:	f040 8099 	bne.w	80152b4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8015182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8015188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801518a:	695a      	ldr	r2, [r3, #20]
 801518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801518e:	699b      	ldr	r3, [r3, #24]
 8015190:	3b02      	subs	r3, #2
 8015192:	429a      	cmp	r2, r3
 8015194:	d804      	bhi.n	80151a0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8015196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015198:	695a      	ldr	r2, [r3, #20]
 801519a:	68bb      	ldr	r3, [r7, #8]
 801519c:	601a      	str	r2, [r3, #0]
 801519e:	e089      	b.n	80152b4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80151a0:	2300      	movs	r3, #0
 80151a2:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80151a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151a6:	781b      	ldrb	r3, [r3, #0]
 80151a8:	2b01      	cmp	r3, #1
 80151aa:	d128      	bne.n	80151fe <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80151ac:	2302      	movs	r3, #2
 80151ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80151b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151b2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80151b4:	f107 0314 	add.w	r3, r7, #20
 80151b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80151ba:	4618      	mov	r0, r3
 80151bc:	f7fd f865 	bl	801228a <get_fat>
 80151c0:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80151c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151c8:	d103      	bne.n	80151d2 <f_getfree+0x7c>
 80151ca:	2301      	movs	r3, #1
 80151cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80151d0:	e063      	b.n	801529a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80151d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151d4:	2b01      	cmp	r3, #1
 80151d6:	d103      	bne.n	80151e0 <f_getfree+0x8a>
 80151d8:	2302      	movs	r3, #2
 80151da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80151de:	e05c      	b.n	801529a <f_getfree+0x144>
					if (stat == 0) nfree++;
 80151e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d102      	bne.n	80151ec <f_getfree+0x96>
 80151e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80151e8:	3301      	adds	r3, #1
 80151ea:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80151ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80151ee:	3301      	adds	r3, #1
 80151f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80151f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151f4:	699b      	ldr	r3, [r3, #24]
 80151f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80151f8:	429a      	cmp	r2, r3
 80151fa:	d3db      	bcc.n	80151b4 <f_getfree+0x5e>
 80151fc:	e04d      	b.n	801529a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80151fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015200:	699b      	ldr	r3, [r3, #24]
 8015202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015208:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 801520a:	2300      	movs	r3, #0
 801520c:	637b      	str	r3, [r7, #52]	; 0x34
 801520e:	2300      	movs	r3, #0
 8015210:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8015212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015214:	2b00      	cmp	r3, #0
 8015216:	d113      	bne.n	8015240 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8015218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801521c:	1c5a      	adds	r2, r3, #1
 801521e:	63ba      	str	r2, [r7, #56]	; 0x38
 8015220:	4619      	mov	r1, r3
 8015222:	f7fc ff77 	bl	8012114 <move_window>
 8015226:	4603      	mov	r3, r0
 8015228:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 801522c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015230:	2b00      	cmp	r3, #0
 8015232:	d131      	bne.n	8015298 <f_getfree+0x142>
							p = fs->win;
 8015234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015236:	3334      	adds	r3, #52	; 0x34
 8015238:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 801523a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801523e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8015240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015242:	781b      	ldrb	r3, [r3, #0]
 8015244:	2b02      	cmp	r3, #2
 8015246:	d10f      	bne.n	8015268 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8015248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801524a:	f7fc fcb3 	bl	8011bb4 <ld_word>
 801524e:	4603      	mov	r3, r0
 8015250:	2b00      	cmp	r3, #0
 8015252:	d102      	bne.n	801525a <f_getfree+0x104>
 8015254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015256:	3301      	adds	r3, #1
 8015258:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 801525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801525c:	3302      	adds	r3, #2
 801525e:	633b      	str	r3, [r7, #48]	; 0x30
 8015260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015262:	3b02      	subs	r3, #2
 8015264:	637b      	str	r3, [r7, #52]	; 0x34
 8015266:	e010      	b.n	801528a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8015268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801526a:	f7fc fcbb 	bl	8011be4 <ld_dword>
 801526e:	4603      	mov	r3, r0
 8015270:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015274:	2b00      	cmp	r3, #0
 8015276:	d102      	bne.n	801527e <f_getfree+0x128>
 8015278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801527a:	3301      	adds	r3, #1
 801527c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 801527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015280:	3304      	adds	r3, #4
 8015282:	633b      	str	r3, [r7, #48]	; 0x30
 8015284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015286:	3b04      	subs	r3, #4
 8015288:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 801528a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801528c:	3b01      	subs	r3, #1
 801528e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015292:	2b00      	cmp	r3, #0
 8015294:	d1bd      	bne.n	8015212 <f_getfree+0xbc>
 8015296:	e000      	b.n	801529a <f_getfree+0x144>
							if (res != FR_OK) break;
 8015298:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 801529a:	68bb      	ldr	r3, [r7, #8]
 801529c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801529e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80152a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80152a4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80152a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152a8:	791a      	ldrb	r2, [r3, #4]
 80152aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152ac:	f042 0201 	orr.w	r2, r2, #1
 80152b0:	b2d2      	uxtb	r2, r2
 80152b2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80152b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80152b8:	4618      	mov	r0, r3
 80152ba:	3748      	adds	r7, #72	; 0x48
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd80      	pop	{r7, pc}

080152c0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b084      	sub	sp, #16
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]
 80152c8:	460b      	mov	r3, r1
 80152ca:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80152cc:	78fb      	ldrb	r3, [r7, #3]
 80152ce:	2b0a      	cmp	r3, #10
 80152d0:	d103      	bne.n	80152da <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80152d2:	210d      	movs	r1, #13
 80152d4:	6878      	ldr	r0, [r7, #4]
 80152d6:	f7ff fff3 	bl	80152c0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	685b      	ldr	r3, [r3, #4]
 80152de:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	db25      	blt.n	8015332 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	1c5a      	adds	r2, r3, #1
 80152ea:	60fa      	str	r2, [r7, #12]
 80152ec:	687a      	ldr	r2, [r7, #4]
 80152ee:	4413      	add	r3, r2
 80152f0:	78fa      	ldrb	r2, [r7, #3]
 80152f2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	2b3c      	cmp	r3, #60	; 0x3c
 80152f8:	dd12      	ble.n	8015320 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	6818      	ldr	r0, [r3, #0]
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	f103 010c 	add.w	r1, r3, #12
 8015304:	68fa      	ldr	r2, [r7, #12]
 8015306:	f107 0308 	add.w	r3, r7, #8
 801530a:	f7ff fa08 	bl	801471e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801530e:	68ba      	ldr	r2, [r7, #8]
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	429a      	cmp	r2, r3
 8015314:	d101      	bne.n	801531a <putc_bfd+0x5a>
 8015316:	2300      	movs	r3, #0
 8015318:	e001      	b.n	801531e <putc_bfd+0x5e>
 801531a:	f04f 33ff 	mov.w	r3, #4294967295
 801531e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	68fa      	ldr	r2, [r7, #12]
 8015324:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	689b      	ldr	r3, [r3, #8]
 801532a:	1c5a      	adds	r2, r3, #1
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	609a      	str	r2, [r3, #8]
 8015330:	e000      	b.n	8015334 <putc_bfd+0x74>
	if (i < 0) return;
 8015332:	bf00      	nop
}
 8015334:	3710      	adds	r7, #16
 8015336:	46bd      	mov	sp, r7
 8015338:	bd80      	pop	{r7, pc}

0801533a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801533a:	b580      	push	{r7, lr}
 801533c:	b084      	sub	sp, #16
 801533e:	af00      	add	r7, sp, #0
 8015340:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	685b      	ldr	r3, [r3, #4]
 8015346:	2b00      	cmp	r3, #0
 8015348:	db16      	blt.n	8015378 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	6818      	ldr	r0, [r3, #0]
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	f103 010c 	add.w	r1, r3, #12
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	685b      	ldr	r3, [r3, #4]
 8015358:	461a      	mov	r2, r3
 801535a:	f107 030c 	add.w	r3, r7, #12
 801535e:	f7ff f9de 	bl	801471e <f_write>
 8015362:	4603      	mov	r3, r0
 8015364:	2b00      	cmp	r3, #0
 8015366:	d107      	bne.n	8015378 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	685b      	ldr	r3, [r3, #4]
 801536c:	68fa      	ldr	r2, [r7, #12]
 801536e:	4293      	cmp	r3, r2
 8015370:	d102      	bne.n	8015378 <putc_flush+0x3e>
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	689b      	ldr	r3, [r3, #8]
 8015376:	e001      	b.n	801537c <putc_flush+0x42>
	return EOF;
 8015378:	f04f 33ff 	mov.w	r3, #4294967295
}
 801537c:	4618      	mov	r0, r3
 801537e:	3710      	adds	r7, #16
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}

08015384 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8015384:	b480      	push	{r7}
 8015386:	b083      	sub	sp, #12
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
 801538c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	683a      	ldr	r2, [r7, #0]
 8015392:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	2200      	movs	r2, #0
 8015398:	605a      	str	r2, [r3, #4]
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	685a      	ldr	r2, [r3, #4]
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	609a      	str	r2, [r3, #8]
}
 80153a2:	bf00      	nop
 80153a4:	370c      	adds	r7, #12
 80153a6:	46bd      	mov	sp, r7
 80153a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ac:	4770      	bx	lr
	...

080153b0 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80153b0:	b40e      	push	{r1, r2, r3}
 80153b2:	b580      	push	{r7, lr}
 80153b4:	b0a7      	sub	sp, #156	; 0x9c
 80153b6:	af00      	add	r7, sp, #0
 80153b8:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80153ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80153be:	6879      	ldr	r1, [r7, #4]
 80153c0:	4618      	mov	r0, r3
 80153c2:	f7ff ffdf 	bl	8015384 <putc_init>

	va_start(arp, fmt);
 80153c6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80153ca:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 80153cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80153d0:	1c5a      	adds	r2, r3, #1
 80153d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80153d6:	781b      	ldrb	r3, [r3, #0]
 80153d8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 80153dc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	f000 81f2 	beq.w	80157ca <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80153e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80153ea:	2b25      	cmp	r3, #37	; 0x25
 80153ec:	d008      	beq.n	8015400 <f_printf+0x50>
			putc_bfd(&pb, c);
 80153ee:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80153f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80153f6:	4611      	mov	r1, r2
 80153f8:	4618      	mov	r0, r3
 80153fa:	f7ff ff61 	bl	80152c0 <putc_bfd>
			continue;
 80153fe:	e1e3      	b.n	80157c8 <f_printf+0x418>
		}
		w = f = 0;
 8015400:	2300      	movs	r3, #0
 8015402:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8015406:	2300      	movs	r3, #0
 8015408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 801540c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015410:	1c5a      	adds	r2, r3, #1
 8015412:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015416:	781b      	ldrb	r3, [r3, #0]
 8015418:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 801541c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015420:	2b30      	cmp	r3, #48	; 0x30
 8015422:	d10b      	bne.n	801543c <f_printf+0x8c>
			f = 1; c = *fmt++;
 8015424:	2301      	movs	r3, #1
 8015426:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801542a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801542e:	1c5a      	adds	r2, r3, #1
 8015430:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015434:	781b      	ldrb	r3, [r3, #0]
 8015436:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 801543a:	e024      	b.n	8015486 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 801543c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015440:	2b2d      	cmp	r3, #45	; 0x2d
 8015442:	d120      	bne.n	8015486 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8015444:	2302      	movs	r3, #2
 8015446:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801544a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801544e:	1c5a      	adds	r2, r3, #1
 8015450:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015454:	781b      	ldrb	r3, [r3, #0]
 8015456:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801545a:	e014      	b.n	8015486 <f_printf+0xd6>
			w = w * 10 + c - '0';
 801545c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015460:	4613      	mov	r3, r2
 8015462:	009b      	lsls	r3, r3, #2
 8015464:	4413      	add	r3, r2
 8015466:	005b      	lsls	r3, r3, #1
 8015468:	461a      	mov	r2, r3
 801546a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801546e:	4413      	add	r3, r2
 8015470:	3b30      	subs	r3, #48	; 0x30
 8015472:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8015476:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801547a:	1c5a      	adds	r2, r3, #1
 801547c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015480:	781b      	ldrb	r3, [r3, #0]
 8015482:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8015486:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801548a:	2b2f      	cmp	r3, #47	; 0x2f
 801548c:	d903      	bls.n	8015496 <f_printf+0xe6>
 801548e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015492:	2b39      	cmp	r3, #57	; 0x39
 8015494:	d9e2      	bls.n	801545c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8015496:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801549a:	2b6c      	cmp	r3, #108	; 0x6c
 801549c:	d003      	beq.n	80154a6 <f_printf+0xf6>
 801549e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80154a2:	2b4c      	cmp	r3, #76	; 0x4c
 80154a4:	d10d      	bne.n	80154c2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 80154a6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80154aa:	f043 0304 	orr.w	r3, r3, #4
 80154ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80154b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80154b6:	1c5a      	adds	r2, r3, #1
 80154b8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80154bc:	781b      	ldrb	r3, [r3, #0]
 80154be:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 80154c2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	f000 8181 	beq.w	80157ce <f_printf+0x41e>
		d = c;
 80154cc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80154d0:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 80154d4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80154d8:	2b60      	cmp	r3, #96	; 0x60
 80154da:	d908      	bls.n	80154ee <f_printf+0x13e>
 80154dc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80154e0:	2b7a      	cmp	r3, #122	; 0x7a
 80154e2:	d804      	bhi.n	80154ee <f_printf+0x13e>
 80154e4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80154e8:	3b20      	subs	r3, #32
 80154ea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 80154ee:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80154f2:	3b42      	subs	r3, #66	; 0x42
 80154f4:	2b16      	cmp	r3, #22
 80154f6:	f200 8098 	bhi.w	801562a <f_printf+0x27a>
 80154fa:	a201      	add	r2, pc, #4	; (adr r2, 8015500 <f_printf+0x150>)
 80154fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015500:	0801560b 	.word	0x0801560b
 8015504:	080155f3 	.word	0x080155f3
 8015508:	0801561b 	.word	0x0801561b
 801550c:	0801562b 	.word	0x0801562b
 8015510:	0801562b 	.word	0x0801562b
 8015514:	0801562b 	.word	0x0801562b
 8015518:	0801562b 	.word	0x0801562b
 801551c:	0801562b 	.word	0x0801562b
 8015520:	0801562b 	.word	0x0801562b
 8015524:	0801562b 	.word	0x0801562b
 8015528:	0801562b 	.word	0x0801562b
 801552c:	0801562b 	.word	0x0801562b
 8015530:	0801562b 	.word	0x0801562b
 8015534:	08015613 	.word	0x08015613
 8015538:	0801562b 	.word	0x0801562b
 801553c:	0801562b 	.word	0x0801562b
 8015540:	0801562b 	.word	0x0801562b
 8015544:	0801555d 	.word	0x0801555d
 8015548:	0801562b 	.word	0x0801562b
 801554c:	0801561b 	.word	0x0801561b
 8015550:	0801562b 	.word	0x0801562b
 8015554:	0801562b 	.word	0x0801562b
 8015558:	08015623 	.word	0x08015623
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 801555c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801555e:	1d1a      	adds	r2, r3, #4
 8015560:	67ba      	str	r2, [r7, #120]	; 0x78
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8015566:	2300      	movs	r3, #0
 8015568:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801556c:	e004      	b.n	8015578 <f_printf+0x1c8>
 801556e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015572:	3301      	adds	r3, #1
 8015574:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015578:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801557a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801557e:	4413      	add	r3, r2
 8015580:	781b      	ldrb	r3, [r3, #0]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d1f3      	bne.n	801556e <f_printf+0x1be>
			if (!(f & 2)) {
 8015586:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801558a:	f003 0302 	and.w	r3, r3, #2
 801558e:	2b00      	cmp	r3, #0
 8015590:	d11a      	bne.n	80155c8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8015592:	e005      	b.n	80155a0 <f_printf+0x1f0>
 8015594:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015598:	2120      	movs	r1, #32
 801559a:	4618      	mov	r0, r3
 801559c:	f7ff fe90 	bl	80152c0 <putc_bfd>
 80155a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80155a4:	1c5a      	adds	r2, r3, #1
 80155a6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80155aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80155ae:	429a      	cmp	r2, r3
 80155b0:	d8f0      	bhi.n	8015594 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80155b2:	e009      	b.n	80155c8 <f_printf+0x218>
 80155b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80155b6:	1c5a      	adds	r2, r3, #1
 80155b8:	67fa      	str	r2, [r7, #124]	; 0x7c
 80155ba:	781a      	ldrb	r2, [r3, #0]
 80155bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80155c0:	4611      	mov	r1, r2
 80155c2:	4618      	mov	r0, r3
 80155c4:	f7ff fe7c 	bl	80152c0 <putc_bfd>
 80155c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80155ca:	781b      	ldrb	r3, [r3, #0]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d1f1      	bne.n	80155b4 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80155d0:	e005      	b.n	80155de <f_printf+0x22e>
 80155d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80155d6:	2120      	movs	r1, #32
 80155d8:	4618      	mov	r0, r3
 80155da:	f7ff fe71 	bl	80152c0 <putc_bfd>
 80155de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80155e2:	1c5a      	adds	r2, r3, #1
 80155e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80155e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80155ec:	429a      	cmp	r2, r3
 80155ee:	d8f0      	bhi.n	80155d2 <f_printf+0x222>
			continue;
 80155f0:	e0ea      	b.n	80157c8 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80155f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80155f4:	1d1a      	adds	r2, r3, #4
 80155f6:	67ba      	str	r2, [r7, #120]	; 0x78
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	b2da      	uxtb	r2, r3
 80155fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015600:	4611      	mov	r1, r2
 8015602:	4618      	mov	r0, r3
 8015604:	f7ff fe5c 	bl	80152c0 <putc_bfd>
 8015608:	e0de      	b.n	80157c8 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 801560a:	2302      	movs	r3, #2
 801560c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8015610:	e014      	b.n	801563c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8015612:	2308      	movs	r3, #8
 8015614:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8015618:	e010      	b.n	801563c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 801561a:	230a      	movs	r3, #10
 801561c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8015620:	e00c      	b.n	801563c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8015622:	2310      	movs	r3, #16
 8015624:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8015628:	e008      	b.n	801563c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 801562a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 801562e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015632:	4611      	mov	r1, r2
 8015634:	4618      	mov	r0, r3
 8015636:	f7ff fe43 	bl	80152c0 <putc_bfd>
 801563a:	e0c5      	b.n	80157c8 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801563c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015640:	f003 0304 	and.w	r3, r3, #4
 8015644:	2b00      	cmp	r3, #0
 8015646:	d004      	beq.n	8015652 <f_printf+0x2a2>
 8015648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801564a:	1d1a      	adds	r2, r3, #4
 801564c:	67ba      	str	r2, [r7, #120]	; 0x78
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	e00c      	b.n	801566c <f_printf+0x2bc>
 8015652:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8015656:	2b44      	cmp	r3, #68	; 0x44
 8015658:	d104      	bne.n	8015664 <f_printf+0x2b4>
 801565a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801565c:	1d1a      	adds	r2, r3, #4
 801565e:	67ba      	str	r2, [r7, #120]	; 0x78
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	e003      	b.n	801566c <f_printf+0x2bc>
 8015664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015666:	1d1a      	adds	r2, r3, #4
 8015668:	67ba      	str	r2, [r7, #120]	; 0x78
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8015670:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8015674:	2b44      	cmp	r3, #68	; 0x44
 8015676:	d10e      	bne.n	8015696 <f_printf+0x2e6>
 8015678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801567c:	2b00      	cmp	r3, #0
 801567e:	da0a      	bge.n	8015696 <f_printf+0x2e6>
			v = 0 - v;
 8015680:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015684:	425b      	negs	r3, r3
 8015686:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 801568a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801568e:	f043 0308 	orr.w	r3, r3, #8
 8015692:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8015696:	2300      	movs	r3, #0
 8015698:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 801569c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80156a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80156a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80156a8:	fb01 f202 	mul.w	r2, r1, r2
 80156ac:	1a9b      	subs	r3, r3, r2
 80156ae:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80156b2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80156b6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80156ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80156be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80156c2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80156c6:	2b09      	cmp	r3, #9
 80156c8:	d90b      	bls.n	80156e2 <f_printf+0x332>
 80156ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80156ce:	2b78      	cmp	r3, #120	; 0x78
 80156d0:	d101      	bne.n	80156d6 <f_printf+0x326>
 80156d2:	2227      	movs	r2, #39	; 0x27
 80156d4:	e000      	b.n	80156d8 <f_printf+0x328>
 80156d6:	2207      	movs	r2, #7
 80156d8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80156dc:	4413      	add	r3, r2
 80156de:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 80156e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80156e6:	1c5a      	adds	r2, r3, #1
 80156e8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80156ec:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80156f0:	3230      	adds	r2, #48	; 0x30
 80156f2:	b2d2      	uxtb	r2, r2
 80156f4:	3398      	adds	r3, #152	; 0x98
 80156f6:	443b      	add	r3, r7
 80156f8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 80156fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015700:	2b00      	cmp	r3, #0
 8015702:	d003      	beq.n	801570c <f_printf+0x35c>
 8015704:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015708:	2b1f      	cmp	r3, #31
 801570a:	d9c7      	bls.n	801569c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 801570c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015710:	f003 0308 	and.w	r3, r3, #8
 8015714:	2b00      	cmp	r3, #0
 8015716:	d009      	beq.n	801572c <f_printf+0x37c>
 8015718:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801571c:	1c5a      	adds	r2, r3, #1
 801571e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8015722:	3398      	adds	r3, #152	; 0x98
 8015724:	443b      	add	r3, r7
 8015726:	222d      	movs	r2, #45	; 0x2d
 8015728:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 801572c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015734:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015738:	f003 0301 	and.w	r3, r3, #1
 801573c:	2b00      	cmp	r3, #0
 801573e:	d001      	beq.n	8015744 <f_printf+0x394>
 8015740:	2330      	movs	r3, #48	; 0x30
 8015742:	e000      	b.n	8015746 <f_printf+0x396>
 8015744:	2320      	movs	r3, #32
 8015746:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801574a:	e007      	b.n	801575c <f_printf+0x3ac>
 801574c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8015750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015754:	4611      	mov	r1, r2
 8015756:	4618      	mov	r0, r3
 8015758:	f7ff fdb2 	bl	80152c0 <putc_bfd>
 801575c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015760:	f003 0302 	and.w	r3, r3, #2
 8015764:	2b00      	cmp	r3, #0
 8015766:	d108      	bne.n	801577a <f_printf+0x3ca>
 8015768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801576c:	1c5a      	adds	r2, r3, #1
 801576e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015772:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015776:	429a      	cmp	r2, r3
 8015778:	d8e8      	bhi.n	801574c <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 801577a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801577e:	3b01      	subs	r3, #1
 8015780:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015784:	f107 020c 	add.w	r2, r7, #12
 8015788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801578c:	4413      	add	r3, r2
 801578e:	781a      	ldrb	r2, [r3, #0]
 8015790:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015794:	4611      	mov	r1, r2
 8015796:	4618      	mov	r0, r3
 8015798:	f7ff fd92 	bl	80152c0 <putc_bfd>
		} while (i);
 801579c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d1ea      	bne.n	801577a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80157a4:	e007      	b.n	80157b6 <f_printf+0x406>
 80157a6:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80157aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80157ae:	4611      	mov	r1, r2
 80157b0:	4618      	mov	r0, r3
 80157b2:	f7ff fd85 	bl	80152c0 <putc_bfd>
 80157b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80157ba:	1c5a      	adds	r2, r3, #1
 80157bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80157c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80157c4:	429a      	cmp	r2, r3
 80157c6:	d8ee      	bhi.n	80157a6 <f_printf+0x3f6>
		c = *fmt++;
 80157c8:	e600      	b.n	80153cc <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80157ca:	bf00      	nop
 80157cc:	e000      	b.n	80157d0 <f_printf+0x420>
		if (!c) break;
 80157ce:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80157d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80157d4:	4618      	mov	r0, r3
 80157d6:	f7ff fdb0 	bl	801533a <putc_flush>
 80157da:	4603      	mov	r3, r0
}
 80157dc:	4618      	mov	r0, r3
 80157de:	379c      	adds	r7, #156	; 0x9c
 80157e0:	46bd      	mov	sp, r7
 80157e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80157e6:	b003      	add	sp, #12
 80157e8:	4770      	bx	lr
 80157ea:	bf00      	nop

080157ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80157ec:	b480      	push	{r7}
 80157ee:	b087      	sub	sp, #28
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	60f8      	str	r0, [r7, #12]
 80157f4:	60b9      	str	r1, [r7, #8]
 80157f6:	4613      	mov	r3, r2
 80157f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80157fa:	2301      	movs	r3, #1
 80157fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80157fe:	2300      	movs	r3, #0
 8015800:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015802:	4b1f      	ldr	r3, [pc, #124]	; (8015880 <FATFS_LinkDriverEx+0x94>)
 8015804:	7b9b      	ldrb	r3, [r3, #14]
 8015806:	b2db      	uxtb	r3, r3
 8015808:	2b01      	cmp	r3, #1
 801580a:	d831      	bhi.n	8015870 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801580c:	4b1c      	ldr	r3, [pc, #112]	; (8015880 <FATFS_LinkDriverEx+0x94>)
 801580e:	7b9b      	ldrb	r3, [r3, #14]
 8015810:	b2db      	uxtb	r3, r3
 8015812:	461a      	mov	r2, r3
 8015814:	4b1a      	ldr	r3, [pc, #104]	; (8015880 <FATFS_LinkDriverEx+0x94>)
 8015816:	2100      	movs	r1, #0
 8015818:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801581a:	4b19      	ldr	r3, [pc, #100]	; (8015880 <FATFS_LinkDriverEx+0x94>)
 801581c:	7b9b      	ldrb	r3, [r3, #14]
 801581e:	b2db      	uxtb	r3, r3
 8015820:	4a17      	ldr	r2, [pc, #92]	; (8015880 <FATFS_LinkDriverEx+0x94>)
 8015822:	009b      	lsls	r3, r3, #2
 8015824:	4413      	add	r3, r2
 8015826:	68fa      	ldr	r2, [r7, #12]
 8015828:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801582a:	4b15      	ldr	r3, [pc, #84]	; (8015880 <FATFS_LinkDriverEx+0x94>)
 801582c:	7b9b      	ldrb	r3, [r3, #14]
 801582e:	b2db      	uxtb	r3, r3
 8015830:	461a      	mov	r2, r3
 8015832:	4b13      	ldr	r3, [pc, #76]	; (8015880 <FATFS_LinkDriverEx+0x94>)
 8015834:	4413      	add	r3, r2
 8015836:	79fa      	ldrb	r2, [r7, #7]
 8015838:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 801583a:	4b11      	ldr	r3, [pc, #68]	; (8015880 <FATFS_LinkDriverEx+0x94>)
 801583c:	7b9b      	ldrb	r3, [r3, #14]
 801583e:	b2db      	uxtb	r3, r3
 8015840:	1c5a      	adds	r2, r3, #1
 8015842:	b2d1      	uxtb	r1, r2
 8015844:	4a0e      	ldr	r2, [pc, #56]	; (8015880 <FATFS_LinkDriverEx+0x94>)
 8015846:	7391      	strb	r1, [r2, #14]
 8015848:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801584a:	7dbb      	ldrb	r3, [r7, #22]
 801584c:	3330      	adds	r3, #48	; 0x30
 801584e:	b2da      	uxtb	r2, r3
 8015850:	68bb      	ldr	r3, [r7, #8]
 8015852:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015854:	68bb      	ldr	r3, [r7, #8]
 8015856:	3301      	adds	r3, #1
 8015858:	223a      	movs	r2, #58	; 0x3a
 801585a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801585c:	68bb      	ldr	r3, [r7, #8]
 801585e:	3302      	adds	r3, #2
 8015860:	222f      	movs	r2, #47	; 0x2f
 8015862:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015864:	68bb      	ldr	r3, [r7, #8]
 8015866:	3303      	adds	r3, #3
 8015868:	2200      	movs	r2, #0
 801586a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801586c:	2300      	movs	r3, #0
 801586e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015870:	7dfb      	ldrb	r3, [r7, #23]
}
 8015872:	4618      	mov	r0, r3
 8015874:	371c      	adds	r7, #28
 8015876:	46bd      	mov	sp, r7
 8015878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587c:	4770      	bx	lr
 801587e:	bf00      	nop
 8015880:	20005404 	.word	0x20005404

08015884 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b082      	sub	sp, #8
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
 801588c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801588e:	2200      	movs	r2, #0
 8015890:	6839      	ldr	r1, [r7, #0]
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f7ff ffaa 	bl	80157ec <FATFS_LinkDriverEx>
 8015898:	4603      	mov	r3, r0
}
 801589a:	4618      	mov	r0, r3
 801589c:	3708      	adds	r7, #8
 801589e:	46bd      	mov	sp, r7
 80158a0:	bd80      	pop	{r7, pc}

080158a2 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80158a2:	b580      	push	{r7, lr}
 80158a4:	b082      	sub	sp, #8
 80158a6:	af00      	add	r7, sp, #0
 80158a8:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80158aa:	6878      	ldr	r0, [r7, #4]
 80158ac:	f002 fe1c 	bl	80184e8 <malloc>
 80158b0:	4603      	mov	r3, r0
}
 80158b2:	4618      	mov	r0, r3
 80158b4:	3708      	adds	r7, #8
 80158b6:	46bd      	mov	sp, r7
 80158b8:	bd80      	pop	{r7, pc}

080158ba <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80158ba:	b580      	push	{r7, lr}
 80158bc:	b082      	sub	sp, #8
 80158be:	af00      	add	r7, sp, #0
 80158c0:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80158c2:	6878      	ldr	r0, [r7, #4]
 80158c4:	f002 fe18 	bl	80184f8 <free>
}
 80158c8:	bf00      	nop
 80158ca:	3708      	adds	r7, #8
 80158cc:	46bd      	mov	sp, r7
 80158ce:	bd80      	pop	{r7, pc}

080158d0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80158d0:	b480      	push	{r7}
 80158d2:	b085      	sub	sp, #20
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	4603      	mov	r3, r0
 80158d8:	6039      	str	r1, [r7, #0]
 80158da:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80158dc:	88fb      	ldrh	r3, [r7, #6]
 80158de:	2b7f      	cmp	r3, #127	; 0x7f
 80158e0:	d802      	bhi.n	80158e8 <ff_convert+0x18>
		c = chr;
 80158e2:	88fb      	ldrh	r3, [r7, #6]
 80158e4:	81fb      	strh	r3, [r7, #14]
 80158e6:	e025      	b.n	8015934 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80158e8:	683b      	ldr	r3, [r7, #0]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d00b      	beq.n	8015906 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80158ee:	88fb      	ldrh	r3, [r7, #6]
 80158f0:	2bff      	cmp	r3, #255	; 0xff
 80158f2:	d805      	bhi.n	8015900 <ff_convert+0x30>
 80158f4:	88fb      	ldrh	r3, [r7, #6]
 80158f6:	3b80      	subs	r3, #128	; 0x80
 80158f8:	4a12      	ldr	r2, [pc, #72]	; (8015944 <ff_convert+0x74>)
 80158fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80158fe:	e000      	b.n	8015902 <ff_convert+0x32>
 8015900:	2300      	movs	r3, #0
 8015902:	81fb      	strh	r3, [r7, #14]
 8015904:	e016      	b.n	8015934 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8015906:	2300      	movs	r3, #0
 8015908:	81fb      	strh	r3, [r7, #14]
 801590a:	e009      	b.n	8015920 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801590c:	89fb      	ldrh	r3, [r7, #14]
 801590e:	4a0d      	ldr	r2, [pc, #52]	; (8015944 <ff_convert+0x74>)
 8015910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015914:	88fa      	ldrh	r2, [r7, #6]
 8015916:	429a      	cmp	r2, r3
 8015918:	d006      	beq.n	8015928 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801591a:	89fb      	ldrh	r3, [r7, #14]
 801591c:	3301      	adds	r3, #1
 801591e:	81fb      	strh	r3, [r7, #14]
 8015920:	89fb      	ldrh	r3, [r7, #14]
 8015922:	2b7f      	cmp	r3, #127	; 0x7f
 8015924:	d9f2      	bls.n	801590c <ff_convert+0x3c>
 8015926:	e000      	b.n	801592a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8015928:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801592a:	89fb      	ldrh	r3, [r7, #14]
 801592c:	3380      	adds	r3, #128	; 0x80
 801592e:	b29b      	uxth	r3, r3
 8015930:	b2db      	uxtb	r3, r3
 8015932:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8015934:	89fb      	ldrh	r3, [r7, #14]
}
 8015936:	4618      	mov	r0, r3
 8015938:	3714      	adds	r7, #20
 801593a:	46bd      	mov	sp, r7
 801593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015940:	4770      	bx	lr
 8015942:	bf00      	nop
 8015944:	080285ec 	.word	0x080285ec

08015948 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8015948:	b480      	push	{r7}
 801594a:	b087      	sub	sp, #28
 801594c:	af00      	add	r7, sp, #0
 801594e:	4603      	mov	r3, r0
 8015950:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8015952:	88fb      	ldrh	r3, [r7, #6]
 8015954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015958:	d201      	bcs.n	801595e <ff_wtoupper+0x16>
 801595a:	4b3e      	ldr	r3, [pc, #248]	; (8015a54 <ff_wtoupper+0x10c>)
 801595c:	e000      	b.n	8015960 <ff_wtoupper+0x18>
 801595e:	4b3e      	ldr	r3, [pc, #248]	; (8015a58 <ff_wtoupper+0x110>)
 8015960:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8015962:	697b      	ldr	r3, [r7, #20]
 8015964:	1c9a      	adds	r2, r3, #2
 8015966:	617a      	str	r2, [r7, #20]
 8015968:	881b      	ldrh	r3, [r3, #0]
 801596a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801596c:	8a7b      	ldrh	r3, [r7, #18]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d068      	beq.n	8015a44 <ff_wtoupper+0xfc>
 8015972:	88fa      	ldrh	r2, [r7, #6]
 8015974:	8a7b      	ldrh	r3, [r7, #18]
 8015976:	429a      	cmp	r2, r3
 8015978:	d364      	bcc.n	8015a44 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801597a:	697b      	ldr	r3, [r7, #20]
 801597c:	1c9a      	adds	r2, r3, #2
 801597e:	617a      	str	r2, [r7, #20]
 8015980:	881b      	ldrh	r3, [r3, #0]
 8015982:	823b      	strh	r3, [r7, #16]
 8015984:	8a3b      	ldrh	r3, [r7, #16]
 8015986:	0a1b      	lsrs	r3, r3, #8
 8015988:	81fb      	strh	r3, [r7, #14]
 801598a:	8a3b      	ldrh	r3, [r7, #16]
 801598c:	b2db      	uxtb	r3, r3
 801598e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8015990:	88fa      	ldrh	r2, [r7, #6]
 8015992:	8a79      	ldrh	r1, [r7, #18]
 8015994:	8a3b      	ldrh	r3, [r7, #16]
 8015996:	440b      	add	r3, r1
 8015998:	429a      	cmp	r2, r3
 801599a:	da49      	bge.n	8015a30 <ff_wtoupper+0xe8>
			switch (cmd) {
 801599c:	89fb      	ldrh	r3, [r7, #14]
 801599e:	2b08      	cmp	r3, #8
 80159a0:	d84f      	bhi.n	8015a42 <ff_wtoupper+0xfa>
 80159a2:	a201      	add	r2, pc, #4	; (adr r2, 80159a8 <ff_wtoupper+0x60>)
 80159a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159a8:	080159cd 	.word	0x080159cd
 80159ac:	080159df 	.word	0x080159df
 80159b0:	080159f5 	.word	0x080159f5
 80159b4:	080159fd 	.word	0x080159fd
 80159b8:	08015a05 	.word	0x08015a05
 80159bc:	08015a0d 	.word	0x08015a0d
 80159c0:	08015a15 	.word	0x08015a15
 80159c4:	08015a1d 	.word	0x08015a1d
 80159c8:	08015a25 	.word	0x08015a25
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80159cc:	88fa      	ldrh	r2, [r7, #6]
 80159ce:	8a7b      	ldrh	r3, [r7, #18]
 80159d0:	1ad3      	subs	r3, r2, r3
 80159d2:	005b      	lsls	r3, r3, #1
 80159d4:	697a      	ldr	r2, [r7, #20]
 80159d6:	4413      	add	r3, r2
 80159d8:	881b      	ldrh	r3, [r3, #0]
 80159da:	80fb      	strh	r3, [r7, #6]
 80159dc:	e027      	b.n	8015a2e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80159de:	88fa      	ldrh	r2, [r7, #6]
 80159e0:	8a7b      	ldrh	r3, [r7, #18]
 80159e2:	1ad3      	subs	r3, r2, r3
 80159e4:	b29b      	uxth	r3, r3
 80159e6:	f003 0301 	and.w	r3, r3, #1
 80159ea:	b29b      	uxth	r3, r3
 80159ec:	88fa      	ldrh	r2, [r7, #6]
 80159ee:	1ad3      	subs	r3, r2, r3
 80159f0:	80fb      	strh	r3, [r7, #6]
 80159f2:	e01c      	b.n	8015a2e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80159f4:	88fb      	ldrh	r3, [r7, #6]
 80159f6:	3b10      	subs	r3, #16
 80159f8:	80fb      	strh	r3, [r7, #6]
 80159fa:	e018      	b.n	8015a2e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80159fc:	88fb      	ldrh	r3, [r7, #6]
 80159fe:	3b20      	subs	r3, #32
 8015a00:	80fb      	strh	r3, [r7, #6]
 8015a02:	e014      	b.n	8015a2e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8015a04:	88fb      	ldrh	r3, [r7, #6]
 8015a06:	3b30      	subs	r3, #48	; 0x30
 8015a08:	80fb      	strh	r3, [r7, #6]
 8015a0a:	e010      	b.n	8015a2e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8015a0c:	88fb      	ldrh	r3, [r7, #6]
 8015a0e:	3b1a      	subs	r3, #26
 8015a10:	80fb      	strh	r3, [r7, #6]
 8015a12:	e00c      	b.n	8015a2e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8015a14:	88fb      	ldrh	r3, [r7, #6]
 8015a16:	3308      	adds	r3, #8
 8015a18:	80fb      	strh	r3, [r7, #6]
 8015a1a:	e008      	b.n	8015a2e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8015a1c:	88fb      	ldrh	r3, [r7, #6]
 8015a1e:	3b50      	subs	r3, #80	; 0x50
 8015a20:	80fb      	strh	r3, [r7, #6]
 8015a22:	e004      	b.n	8015a2e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015a24:	88fb      	ldrh	r3, [r7, #6]
 8015a26:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8015a2a:	80fb      	strh	r3, [r7, #6]
 8015a2c:	bf00      	nop
			}
			break;
 8015a2e:	e008      	b.n	8015a42 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8015a30:	89fb      	ldrh	r3, [r7, #14]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d195      	bne.n	8015962 <ff_wtoupper+0x1a>
 8015a36:	8a3b      	ldrh	r3, [r7, #16]
 8015a38:	005b      	lsls	r3, r3, #1
 8015a3a:	697a      	ldr	r2, [r7, #20]
 8015a3c:	4413      	add	r3, r2
 8015a3e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8015a40:	e78f      	b.n	8015962 <ff_wtoupper+0x1a>
			break;
 8015a42:	bf00      	nop
	}

	return chr;
 8015a44:	88fb      	ldrh	r3, [r7, #6]
}
 8015a46:	4618      	mov	r0, r3
 8015a48:	371c      	adds	r7, #28
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a50:	4770      	bx	lr
 8015a52:	bf00      	nop
 8015a54:	080286ec 	.word	0x080286ec
 8015a58:	080288e0 	.word	0x080288e0

08015a5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b084      	sub	sp, #16
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
 8015a64:	460b      	mov	r3, r1
 8015a66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015a68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015a6c:	f002 fcf8 	bl	8018460 <USBD_static_malloc>
 8015a70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d109      	bne.n	8015a8c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	32b0      	adds	r2, #176	; 0xb0
 8015a82:	2100      	movs	r1, #0
 8015a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015a88:	2302      	movs	r3, #2
 8015a8a:	e0d4      	b.n	8015c36 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015a8c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8015a90:	2100      	movs	r1, #0
 8015a92:	68f8      	ldr	r0, [r7, #12]
 8015a94:	f003 fe10 	bl	80196b8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	32b0      	adds	r2, #176	; 0xb0
 8015aa2:	68f9      	ldr	r1, [r7, #12]
 8015aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	32b0      	adds	r2, #176	; 0xb0
 8015ab2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	7c1b      	ldrb	r3, [r3, #16]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d138      	bne.n	8015b36 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015ac4:	4b5e      	ldr	r3, [pc, #376]	; (8015c40 <USBD_CDC_Init+0x1e4>)
 8015ac6:	7819      	ldrb	r1, [r3, #0]
 8015ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015acc:	2202      	movs	r2, #2
 8015ace:	6878      	ldr	r0, [r7, #4]
 8015ad0:	f002 fba3 	bl	801821a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015ad4:	4b5a      	ldr	r3, [pc, #360]	; (8015c40 <USBD_CDC_Init+0x1e4>)
 8015ad6:	781b      	ldrb	r3, [r3, #0]
 8015ad8:	f003 020f 	and.w	r2, r3, #15
 8015adc:	6879      	ldr	r1, [r7, #4]
 8015ade:	4613      	mov	r3, r2
 8015ae0:	009b      	lsls	r3, r3, #2
 8015ae2:	4413      	add	r3, r2
 8015ae4:	009b      	lsls	r3, r3, #2
 8015ae6:	440b      	add	r3, r1
 8015ae8:	3324      	adds	r3, #36	; 0x24
 8015aea:	2201      	movs	r2, #1
 8015aec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015aee:	4b55      	ldr	r3, [pc, #340]	; (8015c44 <USBD_CDC_Init+0x1e8>)
 8015af0:	7819      	ldrb	r1, [r3, #0]
 8015af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015af6:	2202      	movs	r2, #2
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f002 fb8e 	bl	801821a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015afe:	4b51      	ldr	r3, [pc, #324]	; (8015c44 <USBD_CDC_Init+0x1e8>)
 8015b00:	781b      	ldrb	r3, [r3, #0]
 8015b02:	f003 020f 	and.w	r2, r3, #15
 8015b06:	6879      	ldr	r1, [r7, #4]
 8015b08:	4613      	mov	r3, r2
 8015b0a:	009b      	lsls	r3, r3, #2
 8015b0c:	4413      	add	r3, r2
 8015b0e:	009b      	lsls	r3, r3, #2
 8015b10:	440b      	add	r3, r1
 8015b12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015b16:	2201      	movs	r2, #1
 8015b18:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015b1a:	4b4b      	ldr	r3, [pc, #300]	; (8015c48 <USBD_CDC_Init+0x1ec>)
 8015b1c:	781b      	ldrb	r3, [r3, #0]
 8015b1e:	f003 020f 	and.w	r2, r3, #15
 8015b22:	6879      	ldr	r1, [r7, #4]
 8015b24:	4613      	mov	r3, r2
 8015b26:	009b      	lsls	r3, r3, #2
 8015b28:	4413      	add	r3, r2
 8015b2a:	009b      	lsls	r3, r3, #2
 8015b2c:	440b      	add	r3, r1
 8015b2e:	3326      	adds	r3, #38	; 0x26
 8015b30:	2210      	movs	r2, #16
 8015b32:	801a      	strh	r2, [r3, #0]
 8015b34:	e035      	b.n	8015ba2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015b36:	4b42      	ldr	r3, [pc, #264]	; (8015c40 <USBD_CDC_Init+0x1e4>)
 8015b38:	7819      	ldrb	r1, [r3, #0]
 8015b3a:	2340      	movs	r3, #64	; 0x40
 8015b3c:	2202      	movs	r2, #2
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	f002 fb6b 	bl	801821a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015b44:	4b3e      	ldr	r3, [pc, #248]	; (8015c40 <USBD_CDC_Init+0x1e4>)
 8015b46:	781b      	ldrb	r3, [r3, #0]
 8015b48:	f003 020f 	and.w	r2, r3, #15
 8015b4c:	6879      	ldr	r1, [r7, #4]
 8015b4e:	4613      	mov	r3, r2
 8015b50:	009b      	lsls	r3, r3, #2
 8015b52:	4413      	add	r3, r2
 8015b54:	009b      	lsls	r3, r3, #2
 8015b56:	440b      	add	r3, r1
 8015b58:	3324      	adds	r3, #36	; 0x24
 8015b5a:	2201      	movs	r2, #1
 8015b5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015b5e:	4b39      	ldr	r3, [pc, #228]	; (8015c44 <USBD_CDC_Init+0x1e8>)
 8015b60:	7819      	ldrb	r1, [r3, #0]
 8015b62:	2340      	movs	r3, #64	; 0x40
 8015b64:	2202      	movs	r2, #2
 8015b66:	6878      	ldr	r0, [r7, #4]
 8015b68:	f002 fb57 	bl	801821a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015b6c:	4b35      	ldr	r3, [pc, #212]	; (8015c44 <USBD_CDC_Init+0x1e8>)
 8015b6e:	781b      	ldrb	r3, [r3, #0]
 8015b70:	f003 020f 	and.w	r2, r3, #15
 8015b74:	6879      	ldr	r1, [r7, #4]
 8015b76:	4613      	mov	r3, r2
 8015b78:	009b      	lsls	r3, r3, #2
 8015b7a:	4413      	add	r3, r2
 8015b7c:	009b      	lsls	r3, r3, #2
 8015b7e:	440b      	add	r3, r1
 8015b80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015b84:	2201      	movs	r2, #1
 8015b86:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015b88:	4b2f      	ldr	r3, [pc, #188]	; (8015c48 <USBD_CDC_Init+0x1ec>)
 8015b8a:	781b      	ldrb	r3, [r3, #0]
 8015b8c:	f003 020f 	and.w	r2, r3, #15
 8015b90:	6879      	ldr	r1, [r7, #4]
 8015b92:	4613      	mov	r3, r2
 8015b94:	009b      	lsls	r3, r3, #2
 8015b96:	4413      	add	r3, r2
 8015b98:	009b      	lsls	r3, r3, #2
 8015b9a:	440b      	add	r3, r1
 8015b9c:	3326      	adds	r3, #38	; 0x26
 8015b9e:	2210      	movs	r2, #16
 8015ba0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015ba2:	4b29      	ldr	r3, [pc, #164]	; (8015c48 <USBD_CDC_Init+0x1ec>)
 8015ba4:	7819      	ldrb	r1, [r3, #0]
 8015ba6:	2308      	movs	r3, #8
 8015ba8:	2203      	movs	r2, #3
 8015baa:	6878      	ldr	r0, [r7, #4]
 8015bac:	f002 fb35 	bl	801821a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015bb0:	4b25      	ldr	r3, [pc, #148]	; (8015c48 <USBD_CDC_Init+0x1ec>)
 8015bb2:	781b      	ldrb	r3, [r3, #0]
 8015bb4:	f003 020f 	and.w	r2, r3, #15
 8015bb8:	6879      	ldr	r1, [r7, #4]
 8015bba:	4613      	mov	r3, r2
 8015bbc:	009b      	lsls	r3, r3, #2
 8015bbe:	4413      	add	r3, r2
 8015bc0:	009b      	lsls	r3, r3, #2
 8015bc2:	440b      	add	r3, r1
 8015bc4:	3324      	adds	r3, #36	; 0x24
 8015bc6:	2201      	movs	r2, #1
 8015bc8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	2200      	movs	r2, #0
 8015bce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015bd8:	687a      	ldr	r2, [r7, #4]
 8015bda:	33b0      	adds	r3, #176	; 0xb0
 8015bdc:	009b      	lsls	r3, r3, #2
 8015bde:	4413      	add	r3, r2
 8015be0:	685b      	ldr	r3, [r3, #4]
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	2200      	movs	r2, #0
 8015bea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d101      	bne.n	8015c04 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015c00:	2302      	movs	r3, #2
 8015c02:	e018      	b.n	8015c36 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	7c1b      	ldrb	r3, [r3, #16]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d10a      	bne.n	8015c22 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015c0c:	4b0d      	ldr	r3, [pc, #52]	; (8015c44 <USBD_CDC_Init+0x1e8>)
 8015c0e:	7819      	ldrb	r1, [r3, #0]
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015c1a:	6878      	ldr	r0, [r7, #4]
 8015c1c:	f002 fbec 	bl	80183f8 <USBD_LL_PrepareReceive>
 8015c20:	e008      	b.n	8015c34 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015c22:	4b08      	ldr	r3, [pc, #32]	; (8015c44 <USBD_CDC_Init+0x1e8>)
 8015c24:	7819      	ldrb	r1, [r3, #0]
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015c2c:	2340      	movs	r3, #64	; 0x40
 8015c2e:	6878      	ldr	r0, [r7, #4]
 8015c30:	f002 fbe2 	bl	80183f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015c34:	2300      	movs	r3, #0
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3710      	adds	r7, #16
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
 8015c3e:	bf00      	nop
 8015c40:	2000012f 	.word	0x2000012f
 8015c44:	20000130 	.word	0x20000130
 8015c48:	20000131 	.word	0x20000131

08015c4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b082      	sub	sp, #8
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
 8015c54:	460b      	mov	r3, r1
 8015c56:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015c58:	4b3a      	ldr	r3, [pc, #232]	; (8015d44 <USBD_CDC_DeInit+0xf8>)
 8015c5a:	781b      	ldrb	r3, [r3, #0]
 8015c5c:	4619      	mov	r1, r3
 8015c5e:	6878      	ldr	r0, [r7, #4]
 8015c60:	f002 fb01 	bl	8018266 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015c64:	4b37      	ldr	r3, [pc, #220]	; (8015d44 <USBD_CDC_DeInit+0xf8>)
 8015c66:	781b      	ldrb	r3, [r3, #0]
 8015c68:	f003 020f 	and.w	r2, r3, #15
 8015c6c:	6879      	ldr	r1, [r7, #4]
 8015c6e:	4613      	mov	r3, r2
 8015c70:	009b      	lsls	r3, r3, #2
 8015c72:	4413      	add	r3, r2
 8015c74:	009b      	lsls	r3, r3, #2
 8015c76:	440b      	add	r3, r1
 8015c78:	3324      	adds	r3, #36	; 0x24
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015c7e:	4b32      	ldr	r3, [pc, #200]	; (8015d48 <USBD_CDC_DeInit+0xfc>)
 8015c80:	781b      	ldrb	r3, [r3, #0]
 8015c82:	4619      	mov	r1, r3
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	f002 faee 	bl	8018266 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015c8a:	4b2f      	ldr	r3, [pc, #188]	; (8015d48 <USBD_CDC_DeInit+0xfc>)
 8015c8c:	781b      	ldrb	r3, [r3, #0]
 8015c8e:	f003 020f 	and.w	r2, r3, #15
 8015c92:	6879      	ldr	r1, [r7, #4]
 8015c94:	4613      	mov	r3, r2
 8015c96:	009b      	lsls	r3, r3, #2
 8015c98:	4413      	add	r3, r2
 8015c9a:	009b      	lsls	r3, r3, #2
 8015c9c:	440b      	add	r3, r1
 8015c9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015ca2:	2200      	movs	r2, #0
 8015ca4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015ca6:	4b29      	ldr	r3, [pc, #164]	; (8015d4c <USBD_CDC_DeInit+0x100>)
 8015ca8:	781b      	ldrb	r3, [r3, #0]
 8015caa:	4619      	mov	r1, r3
 8015cac:	6878      	ldr	r0, [r7, #4]
 8015cae:	f002 fada 	bl	8018266 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015cb2:	4b26      	ldr	r3, [pc, #152]	; (8015d4c <USBD_CDC_DeInit+0x100>)
 8015cb4:	781b      	ldrb	r3, [r3, #0]
 8015cb6:	f003 020f 	and.w	r2, r3, #15
 8015cba:	6879      	ldr	r1, [r7, #4]
 8015cbc:	4613      	mov	r3, r2
 8015cbe:	009b      	lsls	r3, r3, #2
 8015cc0:	4413      	add	r3, r2
 8015cc2:	009b      	lsls	r3, r3, #2
 8015cc4:	440b      	add	r3, r1
 8015cc6:	3324      	adds	r3, #36	; 0x24
 8015cc8:	2200      	movs	r2, #0
 8015cca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015ccc:	4b1f      	ldr	r3, [pc, #124]	; (8015d4c <USBD_CDC_DeInit+0x100>)
 8015cce:	781b      	ldrb	r3, [r3, #0]
 8015cd0:	f003 020f 	and.w	r2, r3, #15
 8015cd4:	6879      	ldr	r1, [r7, #4]
 8015cd6:	4613      	mov	r3, r2
 8015cd8:	009b      	lsls	r3, r3, #2
 8015cda:	4413      	add	r3, r2
 8015cdc:	009b      	lsls	r3, r3, #2
 8015cde:	440b      	add	r3, r1
 8015ce0:	3326      	adds	r3, #38	; 0x26
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	32b0      	adds	r2, #176	; 0xb0
 8015cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d01f      	beq.n	8015d38 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015cfe:	687a      	ldr	r2, [r7, #4]
 8015d00:	33b0      	adds	r3, #176	; 0xb0
 8015d02:	009b      	lsls	r3, r3, #2
 8015d04:	4413      	add	r3, r2
 8015d06:	685b      	ldr	r3, [r3, #4]
 8015d08:	685b      	ldr	r3, [r3, #4]
 8015d0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	32b0      	adds	r2, #176	; 0xb0
 8015d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f002 fbae 	bl	801847c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	32b0      	adds	r2, #176	; 0xb0
 8015d2a:	2100      	movs	r1, #0
 8015d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	2200      	movs	r2, #0
 8015d34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015d38:	2300      	movs	r3, #0
}
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	3708      	adds	r7, #8
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	bd80      	pop	{r7, pc}
 8015d42:	bf00      	nop
 8015d44:	2000012f 	.word	0x2000012f
 8015d48:	20000130 	.word	0x20000130
 8015d4c:	20000131 	.word	0x20000131

08015d50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b086      	sub	sp, #24
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	6078      	str	r0, [r7, #4]
 8015d58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	32b0      	adds	r2, #176	; 0xb0
 8015d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015d72:	2300      	movs	r3, #0
 8015d74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015d76:	693b      	ldr	r3, [r7, #16]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d101      	bne.n	8015d80 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015d7c:	2303      	movs	r3, #3
 8015d7e:	e0bf      	b.n	8015f00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d80:	683b      	ldr	r3, [r7, #0]
 8015d82:	781b      	ldrb	r3, [r3, #0]
 8015d84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d050      	beq.n	8015e2e <USBD_CDC_Setup+0xde>
 8015d8c:	2b20      	cmp	r3, #32
 8015d8e:	f040 80af 	bne.w	8015ef0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015d92:	683b      	ldr	r3, [r7, #0]
 8015d94:	88db      	ldrh	r3, [r3, #6]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d03a      	beq.n	8015e10 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015d9a:	683b      	ldr	r3, [r7, #0]
 8015d9c:	781b      	ldrb	r3, [r3, #0]
 8015d9e:	b25b      	sxtb	r3, r3
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	da1b      	bge.n	8015ddc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015daa:	687a      	ldr	r2, [r7, #4]
 8015dac:	33b0      	adds	r3, #176	; 0xb0
 8015dae:	009b      	lsls	r3, r3, #2
 8015db0:	4413      	add	r3, r2
 8015db2:	685b      	ldr	r3, [r3, #4]
 8015db4:	689b      	ldr	r3, [r3, #8]
 8015db6:	683a      	ldr	r2, [r7, #0]
 8015db8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015dba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015dbc:	683a      	ldr	r2, [r7, #0]
 8015dbe:	88d2      	ldrh	r2, [r2, #6]
 8015dc0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015dc2:	683b      	ldr	r3, [r7, #0]
 8015dc4:	88db      	ldrh	r3, [r3, #6]
 8015dc6:	2b07      	cmp	r3, #7
 8015dc8:	bf28      	it	cs
 8015dca:	2307      	movcs	r3, #7
 8015dcc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015dce:	693b      	ldr	r3, [r7, #16]
 8015dd0:	89fa      	ldrh	r2, [r7, #14]
 8015dd2:	4619      	mov	r1, r3
 8015dd4:	6878      	ldr	r0, [r7, #4]
 8015dd6:	f001 fd89 	bl	80178ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015dda:	e090      	b.n	8015efe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	785a      	ldrb	r2, [r3, #1]
 8015de0:	693b      	ldr	r3, [r7, #16]
 8015de2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015de6:	683b      	ldr	r3, [r7, #0]
 8015de8:	88db      	ldrh	r3, [r3, #6]
 8015dea:	2b3f      	cmp	r3, #63	; 0x3f
 8015dec:	d803      	bhi.n	8015df6 <USBD_CDC_Setup+0xa6>
 8015dee:	683b      	ldr	r3, [r7, #0]
 8015df0:	88db      	ldrh	r3, [r3, #6]
 8015df2:	b2da      	uxtb	r2, r3
 8015df4:	e000      	b.n	8015df8 <USBD_CDC_Setup+0xa8>
 8015df6:	2240      	movs	r2, #64	; 0x40
 8015df8:	693b      	ldr	r3, [r7, #16]
 8015dfa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015dfe:	6939      	ldr	r1, [r7, #16]
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8015e06:	461a      	mov	r2, r3
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f001 fd9b 	bl	8017944 <USBD_CtlPrepareRx>
      break;
 8015e0e:	e076      	b.n	8015efe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015e16:	687a      	ldr	r2, [r7, #4]
 8015e18:	33b0      	adds	r3, #176	; 0xb0
 8015e1a:	009b      	lsls	r3, r3, #2
 8015e1c:	4413      	add	r3, r2
 8015e1e:	685b      	ldr	r3, [r3, #4]
 8015e20:	689b      	ldr	r3, [r3, #8]
 8015e22:	683a      	ldr	r2, [r7, #0]
 8015e24:	7850      	ldrb	r0, [r2, #1]
 8015e26:	2200      	movs	r2, #0
 8015e28:	6839      	ldr	r1, [r7, #0]
 8015e2a:	4798      	blx	r3
      break;
 8015e2c:	e067      	b.n	8015efe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	785b      	ldrb	r3, [r3, #1]
 8015e32:	2b0b      	cmp	r3, #11
 8015e34:	d851      	bhi.n	8015eda <USBD_CDC_Setup+0x18a>
 8015e36:	a201      	add	r2, pc, #4	; (adr r2, 8015e3c <USBD_CDC_Setup+0xec>)
 8015e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e3c:	08015e6d 	.word	0x08015e6d
 8015e40:	08015ee9 	.word	0x08015ee9
 8015e44:	08015edb 	.word	0x08015edb
 8015e48:	08015edb 	.word	0x08015edb
 8015e4c:	08015edb 	.word	0x08015edb
 8015e50:	08015edb 	.word	0x08015edb
 8015e54:	08015edb 	.word	0x08015edb
 8015e58:	08015edb 	.word	0x08015edb
 8015e5c:	08015edb 	.word	0x08015edb
 8015e60:	08015edb 	.word	0x08015edb
 8015e64:	08015e97 	.word	0x08015e97
 8015e68:	08015ec1 	.word	0x08015ec1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e72:	b2db      	uxtb	r3, r3
 8015e74:	2b03      	cmp	r3, #3
 8015e76:	d107      	bne.n	8015e88 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015e78:	f107 030a 	add.w	r3, r7, #10
 8015e7c:	2202      	movs	r2, #2
 8015e7e:	4619      	mov	r1, r3
 8015e80:	6878      	ldr	r0, [r7, #4]
 8015e82:	f001 fd33 	bl	80178ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e86:	e032      	b.n	8015eee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015e88:	6839      	ldr	r1, [r7, #0]
 8015e8a:	6878      	ldr	r0, [r7, #4]
 8015e8c:	f001 fcbd 	bl	801780a <USBD_CtlError>
            ret = USBD_FAIL;
 8015e90:	2303      	movs	r3, #3
 8015e92:	75fb      	strb	r3, [r7, #23]
          break;
 8015e94:	e02b      	b.n	8015eee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e9c:	b2db      	uxtb	r3, r3
 8015e9e:	2b03      	cmp	r3, #3
 8015ea0:	d107      	bne.n	8015eb2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015ea2:	f107 030d 	add.w	r3, r7, #13
 8015ea6:	2201      	movs	r2, #1
 8015ea8:	4619      	mov	r1, r3
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	f001 fd1e 	bl	80178ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015eb0:	e01d      	b.n	8015eee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015eb2:	6839      	ldr	r1, [r7, #0]
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	f001 fca8 	bl	801780a <USBD_CtlError>
            ret = USBD_FAIL;
 8015eba:	2303      	movs	r3, #3
 8015ebc:	75fb      	strb	r3, [r7, #23]
          break;
 8015ebe:	e016      	b.n	8015eee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ec6:	b2db      	uxtb	r3, r3
 8015ec8:	2b03      	cmp	r3, #3
 8015eca:	d00f      	beq.n	8015eec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015ecc:	6839      	ldr	r1, [r7, #0]
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f001 fc9b 	bl	801780a <USBD_CtlError>
            ret = USBD_FAIL;
 8015ed4:	2303      	movs	r3, #3
 8015ed6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015ed8:	e008      	b.n	8015eec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015eda:	6839      	ldr	r1, [r7, #0]
 8015edc:	6878      	ldr	r0, [r7, #4]
 8015ede:	f001 fc94 	bl	801780a <USBD_CtlError>
          ret = USBD_FAIL;
 8015ee2:	2303      	movs	r3, #3
 8015ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8015ee6:	e002      	b.n	8015eee <USBD_CDC_Setup+0x19e>
          break;
 8015ee8:	bf00      	nop
 8015eea:	e008      	b.n	8015efe <USBD_CDC_Setup+0x1ae>
          break;
 8015eec:	bf00      	nop
      }
      break;
 8015eee:	e006      	b.n	8015efe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015ef0:	6839      	ldr	r1, [r7, #0]
 8015ef2:	6878      	ldr	r0, [r7, #4]
 8015ef4:	f001 fc89 	bl	801780a <USBD_CtlError>
      ret = USBD_FAIL;
 8015ef8:	2303      	movs	r3, #3
 8015efa:	75fb      	strb	r3, [r7, #23]
      break;
 8015efc:	bf00      	nop
  }

  return (uint8_t)ret;
 8015efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f00:	4618      	mov	r0, r3
 8015f02:	3718      	adds	r7, #24
 8015f04:	46bd      	mov	sp, r7
 8015f06:	bd80      	pop	{r7, pc}

08015f08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b084      	sub	sp, #16
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
 8015f10:	460b      	mov	r3, r1
 8015f12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015f1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	32b0      	adds	r2, #176	; 0xb0
 8015f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d101      	bne.n	8015f32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015f2e:	2303      	movs	r3, #3
 8015f30:	e065      	b.n	8015ffe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	32b0      	adds	r2, #176	; 0xb0
 8015f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015f42:	78fb      	ldrb	r3, [r7, #3]
 8015f44:	f003 020f 	and.w	r2, r3, #15
 8015f48:	6879      	ldr	r1, [r7, #4]
 8015f4a:	4613      	mov	r3, r2
 8015f4c:	009b      	lsls	r3, r3, #2
 8015f4e:	4413      	add	r3, r2
 8015f50:	009b      	lsls	r3, r3, #2
 8015f52:	440b      	add	r3, r1
 8015f54:	3318      	adds	r3, #24
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d02f      	beq.n	8015fbc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015f5c:	78fb      	ldrb	r3, [r7, #3]
 8015f5e:	f003 020f 	and.w	r2, r3, #15
 8015f62:	6879      	ldr	r1, [r7, #4]
 8015f64:	4613      	mov	r3, r2
 8015f66:	009b      	lsls	r3, r3, #2
 8015f68:	4413      	add	r3, r2
 8015f6a:	009b      	lsls	r3, r3, #2
 8015f6c:	440b      	add	r3, r1
 8015f6e:	3318      	adds	r3, #24
 8015f70:	681a      	ldr	r2, [r3, #0]
 8015f72:	78fb      	ldrb	r3, [r7, #3]
 8015f74:	f003 010f 	and.w	r1, r3, #15
 8015f78:	68f8      	ldr	r0, [r7, #12]
 8015f7a:	460b      	mov	r3, r1
 8015f7c:	00db      	lsls	r3, r3, #3
 8015f7e:	440b      	add	r3, r1
 8015f80:	009b      	lsls	r3, r3, #2
 8015f82:	4403      	add	r3, r0
 8015f84:	331c      	adds	r3, #28
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	fbb2 f1f3 	udiv	r1, r2, r3
 8015f8c:	fb01 f303 	mul.w	r3, r1, r3
 8015f90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d112      	bne.n	8015fbc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015f96:	78fb      	ldrb	r3, [r7, #3]
 8015f98:	f003 020f 	and.w	r2, r3, #15
 8015f9c:	6879      	ldr	r1, [r7, #4]
 8015f9e:	4613      	mov	r3, r2
 8015fa0:	009b      	lsls	r3, r3, #2
 8015fa2:	4413      	add	r3, r2
 8015fa4:	009b      	lsls	r3, r3, #2
 8015fa6:	440b      	add	r3, r1
 8015fa8:	3318      	adds	r3, #24
 8015faa:	2200      	movs	r2, #0
 8015fac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015fae:	78f9      	ldrb	r1, [r7, #3]
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	6878      	ldr	r0, [r7, #4]
 8015fb6:	f002 f9fe 	bl	80183b6 <USBD_LL_Transmit>
 8015fba:	e01f      	b.n	8015ffc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015fbc:	68bb      	ldr	r3, [r7, #8]
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015fca:	687a      	ldr	r2, [r7, #4]
 8015fcc:	33b0      	adds	r3, #176	; 0xb0
 8015fce:	009b      	lsls	r3, r3, #2
 8015fd0:	4413      	add	r3, r2
 8015fd2:	685b      	ldr	r3, [r3, #4]
 8015fd4:	691b      	ldr	r3, [r3, #16]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d010      	beq.n	8015ffc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015fe0:	687a      	ldr	r2, [r7, #4]
 8015fe2:	33b0      	adds	r3, #176	; 0xb0
 8015fe4:	009b      	lsls	r3, r3, #2
 8015fe6:	4413      	add	r3, r2
 8015fe8:	685b      	ldr	r3, [r3, #4]
 8015fea:	691b      	ldr	r3, [r3, #16]
 8015fec:	68ba      	ldr	r2, [r7, #8]
 8015fee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8015ff2:	68ba      	ldr	r2, [r7, #8]
 8015ff4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015ff8:	78fa      	ldrb	r2, [r7, #3]
 8015ffa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015ffc:	2300      	movs	r3, #0
}
 8015ffe:	4618      	mov	r0, r3
 8016000:	3710      	adds	r7, #16
 8016002:	46bd      	mov	sp, r7
 8016004:	bd80      	pop	{r7, pc}

08016006 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016006:	b580      	push	{r7, lr}
 8016008:	b084      	sub	sp, #16
 801600a:	af00      	add	r7, sp, #0
 801600c:	6078      	str	r0, [r7, #4]
 801600e:	460b      	mov	r3, r1
 8016010:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	32b0      	adds	r2, #176	; 0xb0
 801601c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016020:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	32b0      	adds	r2, #176	; 0xb0
 801602c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d101      	bne.n	8016038 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8016034:	2303      	movs	r3, #3
 8016036:	e01a      	b.n	801606e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016038:	78fb      	ldrb	r3, [r7, #3]
 801603a:	4619      	mov	r1, r3
 801603c:	6878      	ldr	r0, [r7, #4]
 801603e:	f002 f9fc 	bl	801843a <USBD_LL_GetRxDataSize>
 8016042:	4602      	mov	r2, r0
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8016050:	687a      	ldr	r2, [r7, #4]
 8016052:	33b0      	adds	r3, #176	; 0xb0
 8016054:	009b      	lsls	r3, r3, #2
 8016056:	4413      	add	r3, r2
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	68db      	ldr	r3, [r3, #12]
 801605c:	68fa      	ldr	r2, [r7, #12]
 801605e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8016062:	68fa      	ldr	r2, [r7, #12]
 8016064:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8016068:	4611      	mov	r1, r2
 801606a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801606c:	2300      	movs	r3, #0
}
 801606e:	4618      	mov	r0, r3
 8016070:	3710      	adds	r7, #16
 8016072:	46bd      	mov	sp, r7
 8016074:	bd80      	pop	{r7, pc}

08016076 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016076:	b580      	push	{r7, lr}
 8016078:	b084      	sub	sp, #16
 801607a:	af00      	add	r7, sp, #0
 801607c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	32b0      	adds	r2, #176	; 0xb0
 8016088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801608c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d101      	bne.n	8016098 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016094:	2303      	movs	r3, #3
 8016096:	e025      	b.n	80160e4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801609e:	687a      	ldr	r2, [r7, #4]
 80160a0:	33b0      	adds	r3, #176	; 0xb0
 80160a2:	009b      	lsls	r3, r3, #2
 80160a4:	4413      	add	r3, r2
 80160a6:	685b      	ldr	r3, [r3, #4]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d01a      	beq.n	80160e2 <USBD_CDC_EP0_RxReady+0x6c>
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80160b2:	2bff      	cmp	r3, #255	; 0xff
 80160b4:	d015      	beq.n	80160e2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80160bc:	687a      	ldr	r2, [r7, #4]
 80160be:	33b0      	adds	r3, #176	; 0xb0
 80160c0:	009b      	lsls	r3, r3, #2
 80160c2:	4413      	add	r3, r2
 80160c4:	685b      	ldr	r3, [r3, #4]
 80160c6:	689b      	ldr	r3, [r3, #8]
 80160c8:	68fa      	ldr	r2, [r7, #12]
 80160ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80160ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80160d0:	68fa      	ldr	r2, [r7, #12]
 80160d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80160d6:	b292      	uxth	r2, r2
 80160d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	22ff      	movs	r2, #255	; 0xff
 80160de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80160e2:	2300      	movs	r3, #0
}
 80160e4:	4618      	mov	r0, r3
 80160e6:	3710      	adds	r7, #16
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}

080160ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b086      	sub	sp, #24
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80160f4:	2182      	movs	r1, #130	; 0x82
 80160f6:	4818      	ldr	r0, [pc, #96]	; (8016158 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80160f8:	f000 fd4f 	bl	8016b9a <USBD_GetEpDesc>
 80160fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80160fe:	2101      	movs	r1, #1
 8016100:	4815      	ldr	r0, [pc, #84]	; (8016158 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016102:	f000 fd4a 	bl	8016b9a <USBD_GetEpDesc>
 8016106:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016108:	2181      	movs	r1, #129	; 0x81
 801610a:	4813      	ldr	r0, [pc, #76]	; (8016158 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801610c:	f000 fd45 	bl	8016b9a <USBD_GetEpDesc>
 8016110:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016112:	697b      	ldr	r3, [r7, #20]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d002      	beq.n	801611e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016118:	697b      	ldr	r3, [r7, #20]
 801611a:	2210      	movs	r2, #16
 801611c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801611e:	693b      	ldr	r3, [r7, #16]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d006      	beq.n	8016132 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016124:	693b      	ldr	r3, [r7, #16]
 8016126:	2200      	movs	r2, #0
 8016128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801612c:	711a      	strb	r2, [r3, #4]
 801612e:	2200      	movs	r2, #0
 8016130:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d006      	beq.n	8016146 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	2200      	movs	r2, #0
 801613c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016140:	711a      	strb	r2, [r3, #4]
 8016142:	2200      	movs	r2, #0
 8016144:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	2243      	movs	r2, #67	; 0x43
 801614a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801614c:	4b02      	ldr	r3, [pc, #8]	; (8016158 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801614e:	4618      	mov	r0, r3
 8016150:	3718      	adds	r7, #24
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}
 8016156:	bf00      	nop
 8016158:	200000ec 	.word	0x200000ec

0801615c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b086      	sub	sp, #24
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016164:	2182      	movs	r1, #130	; 0x82
 8016166:	4818      	ldr	r0, [pc, #96]	; (80161c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016168:	f000 fd17 	bl	8016b9a <USBD_GetEpDesc>
 801616c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801616e:	2101      	movs	r1, #1
 8016170:	4815      	ldr	r0, [pc, #84]	; (80161c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016172:	f000 fd12 	bl	8016b9a <USBD_GetEpDesc>
 8016176:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016178:	2181      	movs	r1, #129	; 0x81
 801617a:	4813      	ldr	r0, [pc, #76]	; (80161c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801617c:	f000 fd0d 	bl	8016b9a <USBD_GetEpDesc>
 8016180:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016182:	697b      	ldr	r3, [r7, #20]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d002      	beq.n	801618e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8016188:	697b      	ldr	r3, [r7, #20]
 801618a:	2210      	movs	r2, #16
 801618c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801618e:	693b      	ldr	r3, [r7, #16]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d006      	beq.n	80161a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016194:	693b      	ldr	r3, [r7, #16]
 8016196:	2200      	movs	r2, #0
 8016198:	711a      	strb	r2, [r3, #4]
 801619a:	2200      	movs	r2, #0
 801619c:	f042 0202 	orr.w	r2, r2, #2
 80161a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d006      	beq.n	80161b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	2200      	movs	r2, #0
 80161ac:	711a      	strb	r2, [r3, #4]
 80161ae:	2200      	movs	r2, #0
 80161b0:	f042 0202 	orr.w	r2, r2, #2
 80161b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	2243      	movs	r2, #67	; 0x43
 80161ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80161bc:	4b02      	ldr	r3, [pc, #8]	; (80161c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80161be:	4618      	mov	r0, r3
 80161c0:	3718      	adds	r7, #24
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}
 80161c6:	bf00      	nop
 80161c8:	200000ec 	.word	0x200000ec

080161cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b086      	sub	sp, #24
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80161d4:	2182      	movs	r1, #130	; 0x82
 80161d6:	4818      	ldr	r0, [pc, #96]	; (8016238 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80161d8:	f000 fcdf 	bl	8016b9a <USBD_GetEpDesc>
 80161dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80161de:	2101      	movs	r1, #1
 80161e0:	4815      	ldr	r0, [pc, #84]	; (8016238 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80161e2:	f000 fcda 	bl	8016b9a <USBD_GetEpDesc>
 80161e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80161e8:	2181      	movs	r1, #129	; 0x81
 80161ea:	4813      	ldr	r0, [pc, #76]	; (8016238 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80161ec:	f000 fcd5 	bl	8016b9a <USBD_GetEpDesc>
 80161f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80161f2:	697b      	ldr	r3, [r7, #20]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d002      	beq.n	80161fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80161f8:	697b      	ldr	r3, [r7, #20]
 80161fa:	2210      	movs	r2, #16
 80161fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80161fe:	693b      	ldr	r3, [r7, #16]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d006      	beq.n	8016212 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016204:	693b      	ldr	r3, [r7, #16]
 8016206:	2200      	movs	r2, #0
 8016208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801620c:	711a      	strb	r2, [r3, #4]
 801620e:	2200      	movs	r2, #0
 8016210:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d006      	beq.n	8016226 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	2200      	movs	r2, #0
 801621c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016220:	711a      	strb	r2, [r3, #4]
 8016222:	2200      	movs	r2, #0
 8016224:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	2243      	movs	r2, #67	; 0x43
 801622a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801622c:	4b02      	ldr	r3, [pc, #8]	; (8016238 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801622e:	4618      	mov	r0, r3
 8016230:	3718      	adds	r7, #24
 8016232:	46bd      	mov	sp, r7
 8016234:	bd80      	pop	{r7, pc}
 8016236:	bf00      	nop
 8016238:	200000ec 	.word	0x200000ec

0801623c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801623c:	b480      	push	{r7}
 801623e:	b083      	sub	sp, #12
 8016240:	af00      	add	r7, sp, #0
 8016242:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	220a      	movs	r2, #10
 8016248:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801624a:	4b03      	ldr	r3, [pc, #12]	; (8016258 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801624c:	4618      	mov	r0, r3
 801624e:	370c      	adds	r7, #12
 8016250:	46bd      	mov	sp, r7
 8016252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016256:	4770      	bx	lr
 8016258:	200000a8 	.word	0x200000a8

0801625c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801625c:	b480      	push	{r7}
 801625e:	b083      	sub	sp, #12
 8016260:	af00      	add	r7, sp, #0
 8016262:	6078      	str	r0, [r7, #4]
 8016264:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8016266:	683b      	ldr	r3, [r7, #0]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d101      	bne.n	8016270 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801626c:	2303      	movs	r3, #3
 801626e:	e009      	b.n	8016284 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8016276:	687a      	ldr	r2, [r7, #4]
 8016278:	33b0      	adds	r3, #176	; 0xb0
 801627a:	009b      	lsls	r3, r3, #2
 801627c:	4413      	add	r3, r2
 801627e:	683a      	ldr	r2, [r7, #0]
 8016280:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8016282:	2300      	movs	r3, #0
}
 8016284:	4618      	mov	r0, r3
 8016286:	370c      	adds	r7, #12
 8016288:	46bd      	mov	sp, r7
 801628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801628e:	4770      	bx	lr

08016290 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8016290:	b480      	push	{r7}
 8016292:	b087      	sub	sp, #28
 8016294:	af00      	add	r7, sp, #0
 8016296:	60f8      	str	r0, [r7, #12]
 8016298:	60b9      	str	r1, [r7, #8]
 801629a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	32b0      	adds	r2, #176	; 0xb0
 80162a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80162ac:	697b      	ldr	r3, [r7, #20]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d101      	bne.n	80162b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80162b2:	2303      	movs	r3, #3
 80162b4:	e008      	b.n	80162c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	68ba      	ldr	r2, [r7, #8]
 80162ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80162be:	697b      	ldr	r3, [r7, #20]
 80162c0:	687a      	ldr	r2, [r7, #4]
 80162c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80162c6:	2300      	movs	r3, #0
}
 80162c8:	4618      	mov	r0, r3
 80162ca:	371c      	adds	r7, #28
 80162cc:	46bd      	mov	sp, r7
 80162ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d2:	4770      	bx	lr

080162d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80162d4:	b480      	push	{r7}
 80162d6:	b085      	sub	sp, #20
 80162d8:	af00      	add	r7, sp, #0
 80162da:	6078      	str	r0, [r7, #4]
 80162dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	32b0      	adds	r2, #176	; 0xb0
 80162e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d101      	bne.n	80162f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80162f4:	2303      	movs	r3, #3
 80162f6:	e004      	b.n	8016302 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	683a      	ldr	r2, [r7, #0]
 80162fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8016300:	2300      	movs	r3, #0
}
 8016302:	4618      	mov	r0, r3
 8016304:	3714      	adds	r7, #20
 8016306:	46bd      	mov	sp, r7
 8016308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630c:	4770      	bx	lr
	...

08016310 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b084      	sub	sp, #16
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	32b0      	adds	r2, #176	; 0xb0
 8016322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016326:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8016328:	2301      	movs	r3, #1
 801632a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801632c:	68bb      	ldr	r3, [r7, #8]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d101      	bne.n	8016336 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8016332:	2303      	movs	r3, #3
 8016334:	e025      	b.n	8016382 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8016336:	68bb      	ldr	r3, [r7, #8]
 8016338:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801633c:	2b00      	cmp	r3, #0
 801633e:	d11f      	bne.n	8016380 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8016340:	68bb      	ldr	r3, [r7, #8]
 8016342:	2201      	movs	r2, #1
 8016344:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8016348:	4b10      	ldr	r3, [pc, #64]	; (801638c <USBD_CDC_TransmitPacket+0x7c>)
 801634a:	781b      	ldrb	r3, [r3, #0]
 801634c:	f003 020f 	and.w	r2, r3, #15
 8016350:	68bb      	ldr	r3, [r7, #8]
 8016352:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8016356:	6878      	ldr	r0, [r7, #4]
 8016358:	4613      	mov	r3, r2
 801635a:	009b      	lsls	r3, r3, #2
 801635c:	4413      	add	r3, r2
 801635e:	009b      	lsls	r3, r3, #2
 8016360:	4403      	add	r3, r0
 8016362:	3318      	adds	r3, #24
 8016364:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8016366:	4b09      	ldr	r3, [pc, #36]	; (801638c <USBD_CDC_TransmitPacket+0x7c>)
 8016368:	7819      	ldrb	r1, [r3, #0]
 801636a:	68bb      	ldr	r3, [r7, #8]
 801636c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8016370:	68bb      	ldr	r3, [r7, #8]
 8016372:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8016376:	6878      	ldr	r0, [r7, #4]
 8016378:	f002 f81d 	bl	80183b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 801637c:	2300      	movs	r3, #0
 801637e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8016380:	7bfb      	ldrb	r3, [r7, #15]
}
 8016382:	4618      	mov	r0, r3
 8016384:	3710      	adds	r7, #16
 8016386:	46bd      	mov	sp, r7
 8016388:	bd80      	pop	{r7, pc}
 801638a:	bf00      	nop
 801638c:	2000012f 	.word	0x2000012f

08016390 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b084      	sub	sp, #16
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	32b0      	adds	r2, #176	; 0xb0
 80163a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163a6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	32b0      	adds	r2, #176	; 0xb0
 80163b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d101      	bne.n	80163be <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80163ba:	2303      	movs	r3, #3
 80163bc:	e018      	b.n	80163f0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	7c1b      	ldrb	r3, [r3, #16]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d10a      	bne.n	80163dc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80163c6:	4b0c      	ldr	r3, [pc, #48]	; (80163f8 <USBD_CDC_ReceivePacket+0x68>)
 80163c8:	7819      	ldrb	r1, [r3, #0]
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80163d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80163d4:	6878      	ldr	r0, [r7, #4]
 80163d6:	f002 f80f 	bl	80183f8 <USBD_LL_PrepareReceive>
 80163da:	e008      	b.n	80163ee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80163dc:	4b06      	ldr	r3, [pc, #24]	; (80163f8 <USBD_CDC_ReceivePacket+0x68>)
 80163de:	7819      	ldrb	r1, [r3, #0]
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80163e6:	2340      	movs	r3, #64	; 0x40
 80163e8:	6878      	ldr	r0, [r7, #4]
 80163ea:	f002 f805 	bl	80183f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80163ee:	2300      	movs	r3, #0
}
 80163f0:	4618      	mov	r0, r3
 80163f2:	3710      	adds	r7, #16
 80163f4:	46bd      	mov	sp, r7
 80163f6:	bd80      	pop	{r7, pc}
 80163f8:	20000130 	.word	0x20000130

080163fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b086      	sub	sp, #24
 8016400:	af00      	add	r7, sp, #0
 8016402:	60f8      	str	r0, [r7, #12]
 8016404:	60b9      	str	r1, [r7, #8]
 8016406:	4613      	mov	r3, r2
 8016408:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d101      	bne.n	8016414 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016410:	2303      	movs	r3, #3
 8016412:	e01f      	b.n	8016454 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	2200      	movs	r2, #0
 8016418:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	2200      	movs	r2, #0
 8016420:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	2200      	movs	r2, #0
 8016428:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801642c:	68bb      	ldr	r3, [r7, #8]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d003      	beq.n	801643a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	68ba      	ldr	r2, [r7, #8]
 8016436:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	2201      	movs	r2, #1
 801643e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	79fa      	ldrb	r2, [r7, #7]
 8016446:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016448:	68f8      	ldr	r0, [r7, #12]
 801644a:	f001 fe7f 	bl	801814c <USBD_LL_Init>
 801644e:	4603      	mov	r3, r0
 8016450:	75fb      	strb	r3, [r7, #23]

  return ret;
 8016452:	7dfb      	ldrb	r3, [r7, #23]
}
 8016454:	4618      	mov	r0, r3
 8016456:	3718      	adds	r7, #24
 8016458:	46bd      	mov	sp, r7
 801645a:	bd80      	pop	{r7, pc}

0801645c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801645c:	b580      	push	{r7, lr}
 801645e:	b084      	sub	sp, #16
 8016460:	af00      	add	r7, sp, #0
 8016462:	6078      	str	r0, [r7, #4]
 8016464:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016466:	2300      	movs	r3, #0
 8016468:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801646a:	683b      	ldr	r3, [r7, #0]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d101      	bne.n	8016474 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016470:	2303      	movs	r3, #3
 8016472:	e025      	b.n	80164c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	683a      	ldr	r2, [r7, #0]
 8016478:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	32ae      	adds	r2, #174	; 0xae
 8016486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801648c:	2b00      	cmp	r3, #0
 801648e:	d00f      	beq.n	80164b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	32ae      	adds	r2, #174	; 0xae
 801649a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801649e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164a0:	f107 020e 	add.w	r2, r7, #14
 80164a4:	4610      	mov	r0, r2
 80164a6:	4798      	blx	r3
 80164a8:	4602      	mov	r2, r0
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80164b6:	1c5a      	adds	r2, r3, #1
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80164be:	2300      	movs	r3, #0
}
 80164c0:	4618      	mov	r0, r3
 80164c2:	3710      	adds	r7, #16
 80164c4:	46bd      	mov	sp, r7
 80164c6:	bd80      	pop	{r7, pc}

080164c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b082      	sub	sp, #8
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80164d0:	6878      	ldr	r0, [r7, #4]
 80164d2:	f001 fe87 	bl	80181e4 <USBD_LL_Start>
 80164d6:	4603      	mov	r3, r0
}
 80164d8:	4618      	mov	r0, r3
 80164da:	3708      	adds	r7, #8
 80164dc:	46bd      	mov	sp, r7
 80164de:	bd80      	pop	{r7, pc}

080164e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80164e0:	b480      	push	{r7}
 80164e2:	b083      	sub	sp, #12
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80164e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	370c      	adds	r7, #12
 80164ee:	46bd      	mov	sp, r7
 80164f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f4:	4770      	bx	lr

080164f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80164f6:	b580      	push	{r7, lr}
 80164f8:	b084      	sub	sp, #16
 80164fa:	af00      	add	r7, sp, #0
 80164fc:	6078      	str	r0, [r7, #4]
 80164fe:	460b      	mov	r3, r1
 8016500:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016502:	2300      	movs	r3, #0
 8016504:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801650c:	2b00      	cmp	r3, #0
 801650e:	d009      	beq.n	8016524 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	78fa      	ldrb	r2, [r7, #3]
 801651a:	4611      	mov	r1, r2
 801651c:	6878      	ldr	r0, [r7, #4]
 801651e:	4798      	blx	r3
 8016520:	4603      	mov	r3, r0
 8016522:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016524:	7bfb      	ldrb	r3, [r7, #15]
}
 8016526:	4618      	mov	r0, r3
 8016528:	3710      	adds	r7, #16
 801652a:	46bd      	mov	sp, r7
 801652c:	bd80      	pop	{r7, pc}

0801652e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801652e:	b580      	push	{r7, lr}
 8016530:	b084      	sub	sp, #16
 8016532:	af00      	add	r7, sp, #0
 8016534:	6078      	str	r0, [r7, #4]
 8016536:	460b      	mov	r3, r1
 8016538:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801653a:	2300      	movs	r3, #0
 801653c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016544:	685b      	ldr	r3, [r3, #4]
 8016546:	78fa      	ldrb	r2, [r7, #3]
 8016548:	4611      	mov	r1, r2
 801654a:	6878      	ldr	r0, [r7, #4]
 801654c:	4798      	blx	r3
 801654e:	4603      	mov	r3, r0
 8016550:	2b00      	cmp	r3, #0
 8016552:	d001      	beq.n	8016558 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8016554:	2303      	movs	r3, #3
 8016556:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016558:	7bfb      	ldrb	r3, [r7, #15]
}
 801655a:	4618      	mov	r0, r3
 801655c:	3710      	adds	r7, #16
 801655e:	46bd      	mov	sp, r7
 8016560:	bd80      	pop	{r7, pc}

08016562 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016562:	b580      	push	{r7, lr}
 8016564:	b084      	sub	sp, #16
 8016566:	af00      	add	r7, sp, #0
 8016568:	6078      	str	r0, [r7, #4]
 801656a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016572:	6839      	ldr	r1, [r7, #0]
 8016574:	4618      	mov	r0, r3
 8016576:	f001 f90e 	bl	8017796 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	2201      	movs	r2, #1
 801657e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8016588:	461a      	mov	r2, r3
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016596:	f003 031f 	and.w	r3, r3, #31
 801659a:	2b02      	cmp	r3, #2
 801659c:	d01a      	beq.n	80165d4 <USBD_LL_SetupStage+0x72>
 801659e:	2b02      	cmp	r3, #2
 80165a0:	d822      	bhi.n	80165e8 <USBD_LL_SetupStage+0x86>
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d002      	beq.n	80165ac <USBD_LL_SetupStage+0x4a>
 80165a6:	2b01      	cmp	r3, #1
 80165a8:	d00a      	beq.n	80165c0 <USBD_LL_SetupStage+0x5e>
 80165aa:	e01d      	b.n	80165e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80165b2:	4619      	mov	r1, r3
 80165b4:	6878      	ldr	r0, [r7, #4]
 80165b6:	f000 fb65 	bl	8016c84 <USBD_StdDevReq>
 80165ba:	4603      	mov	r3, r0
 80165bc:	73fb      	strb	r3, [r7, #15]
      break;
 80165be:	e020      	b.n	8016602 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80165c6:	4619      	mov	r1, r3
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f000 fbcd 	bl	8016d68 <USBD_StdItfReq>
 80165ce:	4603      	mov	r3, r0
 80165d0:	73fb      	strb	r3, [r7, #15]
      break;
 80165d2:	e016      	b.n	8016602 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80165da:	4619      	mov	r1, r3
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	f000 fc2f 	bl	8016e40 <USBD_StdEPReq>
 80165e2:	4603      	mov	r3, r0
 80165e4:	73fb      	strb	r3, [r7, #15]
      break;
 80165e6:	e00c      	b.n	8016602 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80165ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80165f2:	b2db      	uxtb	r3, r3
 80165f4:	4619      	mov	r1, r3
 80165f6:	6878      	ldr	r0, [r7, #4]
 80165f8:	f001 fe54 	bl	80182a4 <USBD_LL_StallEP>
 80165fc:	4603      	mov	r3, r0
 80165fe:	73fb      	strb	r3, [r7, #15]
      break;
 8016600:	bf00      	nop
  }

  return ret;
 8016602:	7bfb      	ldrb	r3, [r7, #15]
}
 8016604:	4618      	mov	r0, r3
 8016606:	3710      	adds	r7, #16
 8016608:	46bd      	mov	sp, r7
 801660a:	bd80      	pop	{r7, pc}

0801660c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b086      	sub	sp, #24
 8016610:	af00      	add	r7, sp, #0
 8016612:	60f8      	str	r0, [r7, #12]
 8016614:	460b      	mov	r3, r1
 8016616:	607a      	str	r2, [r7, #4]
 8016618:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801661a:	2300      	movs	r3, #0
 801661c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801661e:	7afb      	ldrb	r3, [r7, #11]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d16e      	bne.n	8016702 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801662a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016632:	2b03      	cmp	r3, #3
 8016634:	f040 8098 	bne.w	8016768 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016638:	693b      	ldr	r3, [r7, #16]
 801663a:	689a      	ldr	r2, [r3, #8]
 801663c:	693b      	ldr	r3, [r7, #16]
 801663e:	68db      	ldr	r3, [r3, #12]
 8016640:	429a      	cmp	r2, r3
 8016642:	d913      	bls.n	801666c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016644:	693b      	ldr	r3, [r7, #16]
 8016646:	689a      	ldr	r2, [r3, #8]
 8016648:	693b      	ldr	r3, [r7, #16]
 801664a:	68db      	ldr	r3, [r3, #12]
 801664c:	1ad2      	subs	r2, r2, r3
 801664e:	693b      	ldr	r3, [r7, #16]
 8016650:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016652:	693b      	ldr	r3, [r7, #16]
 8016654:	68da      	ldr	r2, [r3, #12]
 8016656:	693b      	ldr	r3, [r7, #16]
 8016658:	689b      	ldr	r3, [r3, #8]
 801665a:	4293      	cmp	r3, r2
 801665c:	bf28      	it	cs
 801665e:	4613      	movcs	r3, r2
 8016660:	461a      	mov	r2, r3
 8016662:	6879      	ldr	r1, [r7, #4]
 8016664:	68f8      	ldr	r0, [r7, #12]
 8016666:	f001 f98a 	bl	801797e <USBD_CtlContinueRx>
 801666a:	e07d      	b.n	8016768 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016672:	f003 031f 	and.w	r3, r3, #31
 8016676:	2b02      	cmp	r3, #2
 8016678:	d014      	beq.n	80166a4 <USBD_LL_DataOutStage+0x98>
 801667a:	2b02      	cmp	r3, #2
 801667c:	d81d      	bhi.n	80166ba <USBD_LL_DataOutStage+0xae>
 801667e:	2b00      	cmp	r3, #0
 8016680:	d002      	beq.n	8016688 <USBD_LL_DataOutStage+0x7c>
 8016682:	2b01      	cmp	r3, #1
 8016684:	d003      	beq.n	801668e <USBD_LL_DataOutStage+0x82>
 8016686:	e018      	b.n	80166ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016688:	2300      	movs	r3, #0
 801668a:	75bb      	strb	r3, [r7, #22]
            break;
 801668c:	e018      	b.n	80166c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016694:	b2db      	uxtb	r3, r3
 8016696:	4619      	mov	r1, r3
 8016698:	68f8      	ldr	r0, [r7, #12]
 801669a:	f000 fa64 	bl	8016b66 <USBD_CoreFindIF>
 801669e:	4603      	mov	r3, r0
 80166a0:	75bb      	strb	r3, [r7, #22]
            break;
 80166a2:	e00d      	b.n	80166c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80166aa:	b2db      	uxtb	r3, r3
 80166ac:	4619      	mov	r1, r3
 80166ae:	68f8      	ldr	r0, [r7, #12]
 80166b0:	f000 fa66 	bl	8016b80 <USBD_CoreFindEP>
 80166b4:	4603      	mov	r3, r0
 80166b6:	75bb      	strb	r3, [r7, #22]
            break;
 80166b8:	e002      	b.n	80166c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80166ba:	2300      	movs	r3, #0
 80166bc:	75bb      	strb	r3, [r7, #22]
            break;
 80166be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80166c0:	7dbb      	ldrb	r3, [r7, #22]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d119      	bne.n	80166fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80166cc:	b2db      	uxtb	r3, r3
 80166ce:	2b03      	cmp	r3, #3
 80166d0:	d113      	bne.n	80166fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80166d2:	7dba      	ldrb	r2, [r7, #22]
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	32ae      	adds	r2, #174	; 0xae
 80166d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166dc:	691b      	ldr	r3, [r3, #16]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d00b      	beq.n	80166fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80166e2:	7dba      	ldrb	r2, [r7, #22]
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80166ea:	7dba      	ldrb	r2, [r7, #22]
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	32ae      	adds	r2, #174	; 0xae
 80166f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166f4:	691b      	ldr	r3, [r3, #16]
 80166f6:	68f8      	ldr	r0, [r7, #12]
 80166f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80166fa:	68f8      	ldr	r0, [r7, #12]
 80166fc:	f001 f950 	bl	80179a0 <USBD_CtlSendStatus>
 8016700:	e032      	b.n	8016768 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8016702:	7afb      	ldrb	r3, [r7, #11]
 8016704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016708:	b2db      	uxtb	r3, r3
 801670a:	4619      	mov	r1, r3
 801670c:	68f8      	ldr	r0, [r7, #12]
 801670e:	f000 fa37 	bl	8016b80 <USBD_CoreFindEP>
 8016712:	4603      	mov	r3, r0
 8016714:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016716:	7dbb      	ldrb	r3, [r7, #22]
 8016718:	2bff      	cmp	r3, #255	; 0xff
 801671a:	d025      	beq.n	8016768 <USBD_LL_DataOutStage+0x15c>
 801671c:	7dbb      	ldrb	r3, [r7, #22]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d122      	bne.n	8016768 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016728:	b2db      	uxtb	r3, r3
 801672a:	2b03      	cmp	r3, #3
 801672c:	d117      	bne.n	801675e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801672e:	7dba      	ldrb	r2, [r7, #22]
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	32ae      	adds	r2, #174	; 0xae
 8016734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016738:	699b      	ldr	r3, [r3, #24]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d00f      	beq.n	801675e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801673e:	7dba      	ldrb	r2, [r7, #22]
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016746:	7dba      	ldrb	r2, [r7, #22]
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	32ae      	adds	r2, #174	; 0xae
 801674c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016750:	699b      	ldr	r3, [r3, #24]
 8016752:	7afa      	ldrb	r2, [r7, #11]
 8016754:	4611      	mov	r1, r2
 8016756:	68f8      	ldr	r0, [r7, #12]
 8016758:	4798      	blx	r3
 801675a:	4603      	mov	r3, r0
 801675c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801675e:	7dfb      	ldrb	r3, [r7, #23]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d001      	beq.n	8016768 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016764:	7dfb      	ldrb	r3, [r7, #23]
 8016766:	e000      	b.n	801676a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016768:	2300      	movs	r3, #0
}
 801676a:	4618      	mov	r0, r3
 801676c:	3718      	adds	r7, #24
 801676e:	46bd      	mov	sp, r7
 8016770:	bd80      	pop	{r7, pc}

08016772 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016772:	b580      	push	{r7, lr}
 8016774:	b086      	sub	sp, #24
 8016776:	af00      	add	r7, sp, #0
 8016778:	60f8      	str	r0, [r7, #12]
 801677a:	460b      	mov	r3, r1
 801677c:	607a      	str	r2, [r7, #4]
 801677e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016780:	7afb      	ldrb	r3, [r7, #11]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d16f      	bne.n	8016866 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	3314      	adds	r3, #20
 801678a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016792:	2b02      	cmp	r3, #2
 8016794:	d15a      	bne.n	801684c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016796:	693b      	ldr	r3, [r7, #16]
 8016798:	689a      	ldr	r2, [r3, #8]
 801679a:	693b      	ldr	r3, [r7, #16]
 801679c:	68db      	ldr	r3, [r3, #12]
 801679e:	429a      	cmp	r2, r3
 80167a0:	d914      	bls.n	80167cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80167a2:	693b      	ldr	r3, [r7, #16]
 80167a4:	689a      	ldr	r2, [r3, #8]
 80167a6:	693b      	ldr	r3, [r7, #16]
 80167a8:	68db      	ldr	r3, [r3, #12]
 80167aa:	1ad2      	subs	r2, r2, r3
 80167ac:	693b      	ldr	r3, [r7, #16]
 80167ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80167b0:	693b      	ldr	r3, [r7, #16]
 80167b2:	689b      	ldr	r3, [r3, #8]
 80167b4:	461a      	mov	r2, r3
 80167b6:	6879      	ldr	r1, [r7, #4]
 80167b8:	68f8      	ldr	r0, [r7, #12]
 80167ba:	f001 f8b2 	bl	8017922 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80167be:	2300      	movs	r3, #0
 80167c0:	2200      	movs	r2, #0
 80167c2:	2100      	movs	r1, #0
 80167c4:	68f8      	ldr	r0, [r7, #12]
 80167c6:	f001 fe17 	bl	80183f8 <USBD_LL_PrepareReceive>
 80167ca:	e03f      	b.n	801684c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80167cc:	693b      	ldr	r3, [r7, #16]
 80167ce:	68da      	ldr	r2, [r3, #12]
 80167d0:	693b      	ldr	r3, [r7, #16]
 80167d2:	689b      	ldr	r3, [r3, #8]
 80167d4:	429a      	cmp	r2, r3
 80167d6:	d11c      	bne.n	8016812 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80167d8:	693b      	ldr	r3, [r7, #16]
 80167da:	685a      	ldr	r2, [r3, #4]
 80167dc:	693b      	ldr	r3, [r7, #16]
 80167de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80167e0:	429a      	cmp	r2, r3
 80167e2:	d316      	bcc.n	8016812 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80167e4:	693b      	ldr	r3, [r7, #16]
 80167e6:	685a      	ldr	r2, [r3, #4]
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80167ee:	429a      	cmp	r2, r3
 80167f0:	d20f      	bcs.n	8016812 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80167f2:	2200      	movs	r2, #0
 80167f4:	2100      	movs	r1, #0
 80167f6:	68f8      	ldr	r0, [r7, #12]
 80167f8:	f001 f893 	bl	8017922 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	2200      	movs	r2, #0
 8016800:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016804:	2300      	movs	r3, #0
 8016806:	2200      	movs	r2, #0
 8016808:	2100      	movs	r1, #0
 801680a:	68f8      	ldr	r0, [r7, #12]
 801680c:	f001 fdf4 	bl	80183f8 <USBD_LL_PrepareReceive>
 8016810:	e01c      	b.n	801684c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016818:	b2db      	uxtb	r3, r3
 801681a:	2b03      	cmp	r3, #3
 801681c:	d10f      	bne.n	801683e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016824:	68db      	ldr	r3, [r3, #12]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d009      	beq.n	801683e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	2200      	movs	r2, #0
 801682e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016838:	68db      	ldr	r3, [r3, #12]
 801683a:	68f8      	ldr	r0, [r7, #12]
 801683c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801683e:	2180      	movs	r1, #128	; 0x80
 8016840:	68f8      	ldr	r0, [r7, #12]
 8016842:	f001 fd2f 	bl	80182a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016846:	68f8      	ldr	r0, [r7, #12]
 8016848:	f001 f8bd 	bl	80179c6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8016852:	2b00      	cmp	r3, #0
 8016854:	d03a      	beq.n	80168cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016856:	68f8      	ldr	r0, [r7, #12]
 8016858:	f7ff fe42 	bl	80164e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	2200      	movs	r2, #0
 8016860:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016864:	e032      	b.n	80168cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016866:	7afb      	ldrb	r3, [r7, #11]
 8016868:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801686c:	b2db      	uxtb	r3, r3
 801686e:	4619      	mov	r1, r3
 8016870:	68f8      	ldr	r0, [r7, #12]
 8016872:	f000 f985 	bl	8016b80 <USBD_CoreFindEP>
 8016876:	4603      	mov	r3, r0
 8016878:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801687a:	7dfb      	ldrb	r3, [r7, #23]
 801687c:	2bff      	cmp	r3, #255	; 0xff
 801687e:	d025      	beq.n	80168cc <USBD_LL_DataInStage+0x15a>
 8016880:	7dfb      	ldrb	r3, [r7, #23]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d122      	bne.n	80168cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801688c:	b2db      	uxtb	r3, r3
 801688e:	2b03      	cmp	r3, #3
 8016890:	d11c      	bne.n	80168cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016892:	7dfa      	ldrb	r2, [r7, #23]
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	32ae      	adds	r2, #174	; 0xae
 8016898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801689c:	695b      	ldr	r3, [r3, #20]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d014      	beq.n	80168cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80168a2:	7dfa      	ldrb	r2, [r7, #23]
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80168aa:	7dfa      	ldrb	r2, [r7, #23]
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	32ae      	adds	r2, #174	; 0xae
 80168b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168b4:	695b      	ldr	r3, [r3, #20]
 80168b6:	7afa      	ldrb	r2, [r7, #11]
 80168b8:	4611      	mov	r1, r2
 80168ba:	68f8      	ldr	r0, [r7, #12]
 80168bc:	4798      	blx	r3
 80168be:	4603      	mov	r3, r0
 80168c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80168c2:	7dbb      	ldrb	r3, [r7, #22]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d001      	beq.n	80168cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80168c8:	7dbb      	ldrb	r3, [r7, #22]
 80168ca:	e000      	b.n	80168ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80168cc:	2300      	movs	r3, #0
}
 80168ce:	4618      	mov	r0, r3
 80168d0:	3718      	adds	r7, #24
 80168d2:	46bd      	mov	sp, r7
 80168d4:	bd80      	pop	{r7, pc}

080168d6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80168d6:	b580      	push	{r7, lr}
 80168d8:	b084      	sub	sp, #16
 80168da:	af00      	add	r7, sp, #0
 80168dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80168de:	2300      	movs	r3, #0
 80168e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	2201      	movs	r2, #1
 80168e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	2200      	movs	r2, #0
 80168ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	2200      	movs	r2, #0
 80168f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	2200      	movs	r2, #0
 80168fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	2200      	movs	r2, #0
 8016904:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801690e:	2b00      	cmp	r3, #0
 8016910:	d014      	beq.n	801693c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016918:	685b      	ldr	r3, [r3, #4]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d00e      	beq.n	801693c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016924:	685b      	ldr	r3, [r3, #4]
 8016926:	687a      	ldr	r2, [r7, #4]
 8016928:	6852      	ldr	r2, [r2, #4]
 801692a:	b2d2      	uxtb	r2, r2
 801692c:	4611      	mov	r1, r2
 801692e:	6878      	ldr	r0, [r7, #4]
 8016930:	4798      	blx	r3
 8016932:	4603      	mov	r3, r0
 8016934:	2b00      	cmp	r3, #0
 8016936:	d001      	beq.n	801693c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016938:	2303      	movs	r3, #3
 801693a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801693c:	2340      	movs	r3, #64	; 0x40
 801693e:	2200      	movs	r2, #0
 8016940:	2100      	movs	r1, #0
 8016942:	6878      	ldr	r0, [r7, #4]
 8016944:	f001 fc69 	bl	801821a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2201      	movs	r2, #1
 801694c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2240      	movs	r2, #64	; 0x40
 8016954:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016958:	2340      	movs	r3, #64	; 0x40
 801695a:	2200      	movs	r2, #0
 801695c:	2180      	movs	r1, #128	; 0x80
 801695e:	6878      	ldr	r0, [r7, #4]
 8016960:	f001 fc5b 	bl	801821a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	2201      	movs	r2, #1
 8016968:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	2240      	movs	r2, #64	; 0x40
 801696e:	621a      	str	r2, [r3, #32]

  return ret;
 8016970:	7bfb      	ldrb	r3, [r7, #15]
}
 8016972:	4618      	mov	r0, r3
 8016974:	3710      	adds	r7, #16
 8016976:	46bd      	mov	sp, r7
 8016978:	bd80      	pop	{r7, pc}

0801697a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801697a:	b480      	push	{r7}
 801697c:	b083      	sub	sp, #12
 801697e:	af00      	add	r7, sp, #0
 8016980:	6078      	str	r0, [r7, #4]
 8016982:	460b      	mov	r3, r1
 8016984:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	78fa      	ldrb	r2, [r7, #3]
 801698a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801698c:	2300      	movs	r3, #0
}
 801698e:	4618      	mov	r0, r3
 8016990:	370c      	adds	r7, #12
 8016992:	46bd      	mov	sp, r7
 8016994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016998:	4770      	bx	lr

0801699a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801699a:	b480      	push	{r7}
 801699c:	b083      	sub	sp, #12
 801699e:	af00      	add	r7, sp, #0
 80169a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169a8:	b2db      	uxtb	r3, r3
 80169aa:	2b04      	cmp	r3, #4
 80169ac:	d006      	beq.n	80169bc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169b4:	b2da      	uxtb	r2, r3
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	2204      	movs	r2, #4
 80169c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80169c4:	2300      	movs	r3, #0
}
 80169c6:	4618      	mov	r0, r3
 80169c8:	370c      	adds	r7, #12
 80169ca:	46bd      	mov	sp, r7
 80169cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d0:	4770      	bx	lr

080169d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80169d2:	b480      	push	{r7}
 80169d4:	b083      	sub	sp, #12
 80169d6:	af00      	add	r7, sp, #0
 80169d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169e0:	b2db      	uxtb	r3, r3
 80169e2:	2b04      	cmp	r3, #4
 80169e4:	d106      	bne.n	80169f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80169ec:	b2da      	uxtb	r2, r3
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80169f4:	2300      	movs	r3, #0
}
 80169f6:	4618      	mov	r0, r3
 80169f8:	370c      	adds	r7, #12
 80169fa:	46bd      	mov	sp, r7
 80169fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a00:	4770      	bx	lr

08016a02 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016a02:	b580      	push	{r7, lr}
 8016a04:	b082      	sub	sp, #8
 8016a06:	af00      	add	r7, sp, #0
 8016a08:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a10:	b2db      	uxtb	r3, r3
 8016a12:	2b03      	cmp	r3, #3
 8016a14:	d110      	bne.n	8016a38 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d00b      	beq.n	8016a38 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a26:	69db      	ldr	r3, [r3, #28]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d005      	beq.n	8016a38 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a32:	69db      	ldr	r3, [r3, #28]
 8016a34:	6878      	ldr	r0, [r7, #4]
 8016a36:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016a38:	2300      	movs	r3, #0
}
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	3708      	adds	r7, #8
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	bd80      	pop	{r7, pc}

08016a42 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016a42:	b580      	push	{r7, lr}
 8016a44:	b082      	sub	sp, #8
 8016a46:	af00      	add	r7, sp, #0
 8016a48:	6078      	str	r0, [r7, #4]
 8016a4a:	460b      	mov	r3, r1
 8016a4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	32ae      	adds	r2, #174	; 0xae
 8016a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d101      	bne.n	8016a64 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016a60:	2303      	movs	r3, #3
 8016a62:	e01c      	b.n	8016a9e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a6a:	b2db      	uxtb	r3, r3
 8016a6c:	2b03      	cmp	r3, #3
 8016a6e:	d115      	bne.n	8016a9c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	32ae      	adds	r2, #174	; 0xae
 8016a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a7e:	6a1b      	ldr	r3, [r3, #32]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d00b      	beq.n	8016a9c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	32ae      	adds	r2, #174	; 0xae
 8016a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a92:	6a1b      	ldr	r3, [r3, #32]
 8016a94:	78fa      	ldrb	r2, [r7, #3]
 8016a96:	4611      	mov	r1, r2
 8016a98:	6878      	ldr	r0, [r7, #4]
 8016a9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016a9c:	2300      	movs	r3, #0
}
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	3708      	adds	r7, #8
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	bd80      	pop	{r7, pc}

08016aa6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016aa6:	b580      	push	{r7, lr}
 8016aa8:	b082      	sub	sp, #8
 8016aaa:	af00      	add	r7, sp, #0
 8016aac:	6078      	str	r0, [r7, #4]
 8016aae:	460b      	mov	r3, r1
 8016ab0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	32ae      	adds	r2, #174	; 0xae
 8016abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d101      	bne.n	8016ac8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016ac4:	2303      	movs	r3, #3
 8016ac6:	e01c      	b.n	8016b02 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ace:	b2db      	uxtb	r3, r3
 8016ad0:	2b03      	cmp	r3, #3
 8016ad2:	d115      	bne.n	8016b00 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	32ae      	adds	r2, #174	; 0xae
 8016ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d00b      	beq.n	8016b00 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	32ae      	adds	r2, #174	; 0xae
 8016af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016af8:	78fa      	ldrb	r2, [r7, #3]
 8016afa:	4611      	mov	r1, r2
 8016afc:	6878      	ldr	r0, [r7, #4]
 8016afe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016b00:	2300      	movs	r3, #0
}
 8016b02:	4618      	mov	r0, r3
 8016b04:	3708      	adds	r7, #8
 8016b06:	46bd      	mov	sp, r7
 8016b08:	bd80      	pop	{r7, pc}

08016b0a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016b0a:	b480      	push	{r7}
 8016b0c:	b083      	sub	sp, #12
 8016b0e:	af00      	add	r7, sp, #0
 8016b10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016b12:	2300      	movs	r3, #0
}
 8016b14:	4618      	mov	r0, r3
 8016b16:	370c      	adds	r7, #12
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1e:	4770      	bx	lr

08016b20 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	b084      	sub	sp, #16
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016b28:	2300      	movs	r3, #0
 8016b2a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	2201      	movs	r2, #1
 8016b30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d00e      	beq.n	8016b5c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b44:	685b      	ldr	r3, [r3, #4]
 8016b46:	687a      	ldr	r2, [r7, #4]
 8016b48:	6852      	ldr	r2, [r2, #4]
 8016b4a:	b2d2      	uxtb	r2, r2
 8016b4c:	4611      	mov	r1, r2
 8016b4e:	6878      	ldr	r0, [r7, #4]
 8016b50:	4798      	blx	r3
 8016b52:	4603      	mov	r3, r0
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d001      	beq.n	8016b5c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016b58:	2303      	movs	r3, #3
 8016b5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b5e:	4618      	mov	r0, r3
 8016b60:	3710      	adds	r7, #16
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}

08016b66 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016b66:	b480      	push	{r7}
 8016b68:	b083      	sub	sp, #12
 8016b6a:	af00      	add	r7, sp, #0
 8016b6c:	6078      	str	r0, [r7, #4]
 8016b6e:	460b      	mov	r3, r1
 8016b70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016b72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016b74:	4618      	mov	r0, r3
 8016b76:	370c      	adds	r7, #12
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7e:	4770      	bx	lr

08016b80 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016b80:	b480      	push	{r7}
 8016b82:	b083      	sub	sp, #12
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
 8016b88:	460b      	mov	r3, r1
 8016b8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016b8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016b8e:	4618      	mov	r0, r3
 8016b90:	370c      	adds	r7, #12
 8016b92:	46bd      	mov	sp, r7
 8016b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b98:	4770      	bx	lr

08016b9a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016b9a:	b580      	push	{r7, lr}
 8016b9c:	b086      	sub	sp, #24
 8016b9e:	af00      	add	r7, sp, #0
 8016ba0:	6078      	str	r0, [r7, #4]
 8016ba2:	460b      	mov	r3, r1
 8016ba4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016bae:	2300      	movs	r3, #0
 8016bb0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	885b      	ldrh	r3, [r3, #2]
 8016bb6:	b29a      	uxth	r2, r3
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	781b      	ldrb	r3, [r3, #0]
 8016bbc:	b29b      	uxth	r3, r3
 8016bbe:	429a      	cmp	r2, r3
 8016bc0:	d920      	bls.n	8016c04 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	781b      	ldrb	r3, [r3, #0]
 8016bc6:	b29b      	uxth	r3, r3
 8016bc8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016bca:	e013      	b.n	8016bf4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016bcc:	f107 030a 	add.w	r3, r7, #10
 8016bd0:	4619      	mov	r1, r3
 8016bd2:	6978      	ldr	r0, [r7, #20]
 8016bd4:	f000 f81b 	bl	8016c0e <USBD_GetNextDesc>
 8016bd8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016bda:	697b      	ldr	r3, [r7, #20]
 8016bdc:	785b      	ldrb	r3, [r3, #1]
 8016bde:	2b05      	cmp	r3, #5
 8016be0:	d108      	bne.n	8016bf4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016be2:	697b      	ldr	r3, [r7, #20]
 8016be4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016be6:	693b      	ldr	r3, [r7, #16]
 8016be8:	789b      	ldrb	r3, [r3, #2]
 8016bea:	78fa      	ldrb	r2, [r7, #3]
 8016bec:	429a      	cmp	r2, r3
 8016bee:	d008      	beq.n	8016c02 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	885b      	ldrh	r3, [r3, #2]
 8016bf8:	b29a      	uxth	r2, r3
 8016bfa:	897b      	ldrh	r3, [r7, #10]
 8016bfc:	429a      	cmp	r2, r3
 8016bfe:	d8e5      	bhi.n	8016bcc <USBD_GetEpDesc+0x32>
 8016c00:	e000      	b.n	8016c04 <USBD_GetEpDesc+0x6a>
          break;
 8016c02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016c04:	693b      	ldr	r3, [r7, #16]
}
 8016c06:	4618      	mov	r0, r3
 8016c08:	3718      	adds	r7, #24
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}

08016c0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016c0e:	b480      	push	{r7}
 8016c10:	b085      	sub	sp, #20
 8016c12:	af00      	add	r7, sp, #0
 8016c14:	6078      	str	r0, [r7, #4]
 8016c16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016c1c:	683b      	ldr	r3, [r7, #0]
 8016c1e:	881a      	ldrh	r2, [r3, #0]
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	781b      	ldrb	r3, [r3, #0]
 8016c24:	b29b      	uxth	r3, r3
 8016c26:	4413      	add	r3, r2
 8016c28:	b29a      	uxth	r2, r3
 8016c2a:	683b      	ldr	r3, [r7, #0]
 8016c2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	781b      	ldrb	r3, [r3, #0]
 8016c32:	461a      	mov	r2, r3
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	4413      	add	r3, r2
 8016c38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016c3a:	68fb      	ldr	r3, [r7, #12]
}
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	3714      	adds	r7, #20
 8016c40:	46bd      	mov	sp, r7
 8016c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c46:	4770      	bx	lr

08016c48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016c48:	b480      	push	{r7}
 8016c4a:	b087      	sub	sp, #28
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016c54:	697b      	ldr	r3, [r7, #20]
 8016c56:	781b      	ldrb	r3, [r3, #0]
 8016c58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016c5a:	697b      	ldr	r3, [r7, #20]
 8016c5c:	3301      	adds	r3, #1
 8016c5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016c60:	697b      	ldr	r3, [r7, #20]
 8016c62:	781b      	ldrb	r3, [r3, #0]
 8016c64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016c66:	8a3b      	ldrh	r3, [r7, #16]
 8016c68:	021b      	lsls	r3, r3, #8
 8016c6a:	b21a      	sxth	r2, r3
 8016c6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016c70:	4313      	orrs	r3, r2
 8016c72:	b21b      	sxth	r3, r3
 8016c74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016c76:	89fb      	ldrh	r3, [r7, #14]
}
 8016c78:	4618      	mov	r0, r3
 8016c7a:	371c      	adds	r7, #28
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c82:	4770      	bx	lr

08016c84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b084      	sub	sp, #16
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
 8016c8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016c8e:	2300      	movs	r3, #0
 8016c90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016c92:	683b      	ldr	r3, [r7, #0]
 8016c94:	781b      	ldrb	r3, [r3, #0]
 8016c96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016c9a:	2b40      	cmp	r3, #64	; 0x40
 8016c9c:	d005      	beq.n	8016caa <USBD_StdDevReq+0x26>
 8016c9e:	2b40      	cmp	r3, #64	; 0x40
 8016ca0:	d857      	bhi.n	8016d52 <USBD_StdDevReq+0xce>
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d00f      	beq.n	8016cc6 <USBD_StdDevReq+0x42>
 8016ca6:	2b20      	cmp	r3, #32
 8016ca8:	d153      	bne.n	8016d52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	32ae      	adds	r2, #174	; 0xae
 8016cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016cb8:	689b      	ldr	r3, [r3, #8]
 8016cba:	6839      	ldr	r1, [r7, #0]
 8016cbc:	6878      	ldr	r0, [r7, #4]
 8016cbe:	4798      	blx	r3
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8016cc4:	e04a      	b.n	8016d5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016cc6:	683b      	ldr	r3, [r7, #0]
 8016cc8:	785b      	ldrb	r3, [r3, #1]
 8016cca:	2b09      	cmp	r3, #9
 8016ccc:	d83b      	bhi.n	8016d46 <USBD_StdDevReq+0xc2>
 8016cce:	a201      	add	r2, pc, #4	; (adr r2, 8016cd4 <USBD_StdDevReq+0x50>)
 8016cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cd4:	08016d29 	.word	0x08016d29
 8016cd8:	08016d3d 	.word	0x08016d3d
 8016cdc:	08016d47 	.word	0x08016d47
 8016ce0:	08016d33 	.word	0x08016d33
 8016ce4:	08016d47 	.word	0x08016d47
 8016ce8:	08016d07 	.word	0x08016d07
 8016cec:	08016cfd 	.word	0x08016cfd
 8016cf0:	08016d47 	.word	0x08016d47
 8016cf4:	08016d1f 	.word	0x08016d1f
 8016cf8:	08016d11 	.word	0x08016d11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016cfc:	6839      	ldr	r1, [r7, #0]
 8016cfe:	6878      	ldr	r0, [r7, #4]
 8016d00:	f000 fa3c 	bl	801717c <USBD_GetDescriptor>
          break;
 8016d04:	e024      	b.n	8016d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016d06:	6839      	ldr	r1, [r7, #0]
 8016d08:	6878      	ldr	r0, [r7, #4]
 8016d0a:	f000 fba1 	bl	8017450 <USBD_SetAddress>
          break;
 8016d0e:	e01f      	b.n	8016d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016d10:	6839      	ldr	r1, [r7, #0]
 8016d12:	6878      	ldr	r0, [r7, #4]
 8016d14:	f000 fbe0 	bl	80174d8 <USBD_SetConfig>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	73fb      	strb	r3, [r7, #15]
          break;
 8016d1c:	e018      	b.n	8016d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016d1e:	6839      	ldr	r1, [r7, #0]
 8016d20:	6878      	ldr	r0, [r7, #4]
 8016d22:	f000 fc83 	bl	801762c <USBD_GetConfig>
          break;
 8016d26:	e013      	b.n	8016d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016d28:	6839      	ldr	r1, [r7, #0]
 8016d2a:	6878      	ldr	r0, [r7, #4]
 8016d2c:	f000 fcb4 	bl	8017698 <USBD_GetStatus>
          break;
 8016d30:	e00e      	b.n	8016d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016d32:	6839      	ldr	r1, [r7, #0]
 8016d34:	6878      	ldr	r0, [r7, #4]
 8016d36:	f000 fce3 	bl	8017700 <USBD_SetFeature>
          break;
 8016d3a:	e009      	b.n	8016d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016d3c:	6839      	ldr	r1, [r7, #0]
 8016d3e:	6878      	ldr	r0, [r7, #4]
 8016d40:	f000 fd07 	bl	8017752 <USBD_ClrFeature>
          break;
 8016d44:	e004      	b.n	8016d50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016d46:	6839      	ldr	r1, [r7, #0]
 8016d48:	6878      	ldr	r0, [r7, #4]
 8016d4a:	f000 fd5e 	bl	801780a <USBD_CtlError>
          break;
 8016d4e:	bf00      	nop
      }
      break;
 8016d50:	e004      	b.n	8016d5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016d52:	6839      	ldr	r1, [r7, #0]
 8016d54:	6878      	ldr	r0, [r7, #4]
 8016d56:	f000 fd58 	bl	801780a <USBD_CtlError>
      break;
 8016d5a:	bf00      	nop
  }

  return ret;
 8016d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d5e:	4618      	mov	r0, r3
 8016d60:	3710      	adds	r7, #16
 8016d62:	46bd      	mov	sp, r7
 8016d64:	bd80      	pop	{r7, pc}
 8016d66:	bf00      	nop

08016d68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b084      	sub	sp, #16
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6078      	str	r0, [r7, #4]
 8016d70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016d72:	2300      	movs	r3, #0
 8016d74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016d76:	683b      	ldr	r3, [r7, #0]
 8016d78:	781b      	ldrb	r3, [r3, #0]
 8016d7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016d7e:	2b40      	cmp	r3, #64	; 0x40
 8016d80:	d005      	beq.n	8016d8e <USBD_StdItfReq+0x26>
 8016d82:	2b40      	cmp	r3, #64	; 0x40
 8016d84:	d852      	bhi.n	8016e2c <USBD_StdItfReq+0xc4>
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d001      	beq.n	8016d8e <USBD_StdItfReq+0x26>
 8016d8a:	2b20      	cmp	r3, #32
 8016d8c:	d14e      	bne.n	8016e2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016d94:	b2db      	uxtb	r3, r3
 8016d96:	3b01      	subs	r3, #1
 8016d98:	2b02      	cmp	r3, #2
 8016d9a:	d840      	bhi.n	8016e1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016d9c:	683b      	ldr	r3, [r7, #0]
 8016d9e:	889b      	ldrh	r3, [r3, #4]
 8016da0:	b2db      	uxtb	r3, r3
 8016da2:	2b01      	cmp	r3, #1
 8016da4:	d836      	bhi.n	8016e14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016da6:	683b      	ldr	r3, [r7, #0]
 8016da8:	889b      	ldrh	r3, [r3, #4]
 8016daa:	b2db      	uxtb	r3, r3
 8016dac:	4619      	mov	r1, r3
 8016dae:	6878      	ldr	r0, [r7, #4]
 8016db0:	f7ff fed9 	bl	8016b66 <USBD_CoreFindIF>
 8016db4:	4603      	mov	r3, r0
 8016db6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016db8:	7bbb      	ldrb	r3, [r7, #14]
 8016dba:	2bff      	cmp	r3, #255	; 0xff
 8016dbc:	d01d      	beq.n	8016dfa <USBD_StdItfReq+0x92>
 8016dbe:	7bbb      	ldrb	r3, [r7, #14]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d11a      	bne.n	8016dfa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016dc4:	7bba      	ldrb	r2, [r7, #14]
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	32ae      	adds	r2, #174	; 0xae
 8016dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016dce:	689b      	ldr	r3, [r3, #8]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d00f      	beq.n	8016df4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016dd4:	7bba      	ldrb	r2, [r7, #14]
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016ddc:	7bba      	ldrb	r2, [r7, #14]
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	32ae      	adds	r2, #174	; 0xae
 8016de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016de6:	689b      	ldr	r3, [r3, #8]
 8016de8:	6839      	ldr	r1, [r7, #0]
 8016dea:	6878      	ldr	r0, [r7, #4]
 8016dec:	4798      	blx	r3
 8016dee:	4603      	mov	r3, r0
 8016df0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016df2:	e004      	b.n	8016dfe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016df4:	2303      	movs	r3, #3
 8016df6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016df8:	e001      	b.n	8016dfe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016dfa:	2303      	movs	r3, #3
 8016dfc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016dfe:	683b      	ldr	r3, [r7, #0]
 8016e00:	88db      	ldrh	r3, [r3, #6]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d110      	bne.n	8016e28 <USBD_StdItfReq+0xc0>
 8016e06:	7bfb      	ldrb	r3, [r7, #15]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d10d      	bne.n	8016e28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016e0c:	6878      	ldr	r0, [r7, #4]
 8016e0e:	f000 fdc7 	bl	80179a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016e12:	e009      	b.n	8016e28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016e14:	6839      	ldr	r1, [r7, #0]
 8016e16:	6878      	ldr	r0, [r7, #4]
 8016e18:	f000 fcf7 	bl	801780a <USBD_CtlError>
          break;
 8016e1c:	e004      	b.n	8016e28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016e1e:	6839      	ldr	r1, [r7, #0]
 8016e20:	6878      	ldr	r0, [r7, #4]
 8016e22:	f000 fcf2 	bl	801780a <USBD_CtlError>
          break;
 8016e26:	e000      	b.n	8016e2a <USBD_StdItfReq+0xc2>
          break;
 8016e28:	bf00      	nop
      }
      break;
 8016e2a:	e004      	b.n	8016e36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016e2c:	6839      	ldr	r1, [r7, #0]
 8016e2e:	6878      	ldr	r0, [r7, #4]
 8016e30:	f000 fceb 	bl	801780a <USBD_CtlError>
      break;
 8016e34:	bf00      	nop
  }

  return ret;
 8016e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e38:	4618      	mov	r0, r3
 8016e3a:	3710      	adds	r7, #16
 8016e3c:	46bd      	mov	sp, r7
 8016e3e:	bd80      	pop	{r7, pc}

08016e40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e40:	b580      	push	{r7, lr}
 8016e42:	b084      	sub	sp, #16
 8016e44:	af00      	add	r7, sp, #0
 8016e46:	6078      	str	r0, [r7, #4]
 8016e48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016e4e:	683b      	ldr	r3, [r7, #0]
 8016e50:	889b      	ldrh	r3, [r3, #4]
 8016e52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016e54:	683b      	ldr	r3, [r7, #0]
 8016e56:	781b      	ldrb	r3, [r3, #0]
 8016e58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016e5c:	2b40      	cmp	r3, #64	; 0x40
 8016e5e:	d007      	beq.n	8016e70 <USBD_StdEPReq+0x30>
 8016e60:	2b40      	cmp	r3, #64	; 0x40
 8016e62:	f200 817f 	bhi.w	8017164 <USBD_StdEPReq+0x324>
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d02a      	beq.n	8016ec0 <USBD_StdEPReq+0x80>
 8016e6a:	2b20      	cmp	r3, #32
 8016e6c:	f040 817a 	bne.w	8017164 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016e70:	7bbb      	ldrb	r3, [r7, #14]
 8016e72:	4619      	mov	r1, r3
 8016e74:	6878      	ldr	r0, [r7, #4]
 8016e76:	f7ff fe83 	bl	8016b80 <USBD_CoreFindEP>
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016e7e:	7b7b      	ldrb	r3, [r7, #13]
 8016e80:	2bff      	cmp	r3, #255	; 0xff
 8016e82:	f000 8174 	beq.w	801716e <USBD_StdEPReq+0x32e>
 8016e86:	7b7b      	ldrb	r3, [r7, #13]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	f040 8170 	bne.w	801716e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016e8e:	7b7a      	ldrb	r2, [r7, #13]
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016e96:	7b7a      	ldrb	r2, [r7, #13]
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	32ae      	adds	r2, #174	; 0xae
 8016e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ea0:	689b      	ldr	r3, [r3, #8]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	f000 8163 	beq.w	801716e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016ea8:	7b7a      	ldrb	r2, [r7, #13]
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	32ae      	adds	r2, #174	; 0xae
 8016eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016eb2:	689b      	ldr	r3, [r3, #8]
 8016eb4:	6839      	ldr	r1, [r7, #0]
 8016eb6:	6878      	ldr	r0, [r7, #4]
 8016eb8:	4798      	blx	r3
 8016eba:	4603      	mov	r3, r0
 8016ebc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016ebe:	e156      	b.n	801716e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016ec0:	683b      	ldr	r3, [r7, #0]
 8016ec2:	785b      	ldrb	r3, [r3, #1]
 8016ec4:	2b03      	cmp	r3, #3
 8016ec6:	d008      	beq.n	8016eda <USBD_StdEPReq+0x9a>
 8016ec8:	2b03      	cmp	r3, #3
 8016eca:	f300 8145 	bgt.w	8017158 <USBD_StdEPReq+0x318>
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	f000 809b 	beq.w	801700a <USBD_StdEPReq+0x1ca>
 8016ed4:	2b01      	cmp	r3, #1
 8016ed6:	d03c      	beq.n	8016f52 <USBD_StdEPReq+0x112>
 8016ed8:	e13e      	b.n	8017158 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ee0:	b2db      	uxtb	r3, r3
 8016ee2:	2b02      	cmp	r3, #2
 8016ee4:	d002      	beq.n	8016eec <USBD_StdEPReq+0xac>
 8016ee6:	2b03      	cmp	r3, #3
 8016ee8:	d016      	beq.n	8016f18 <USBD_StdEPReq+0xd8>
 8016eea:	e02c      	b.n	8016f46 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016eec:	7bbb      	ldrb	r3, [r7, #14]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d00d      	beq.n	8016f0e <USBD_StdEPReq+0xce>
 8016ef2:	7bbb      	ldrb	r3, [r7, #14]
 8016ef4:	2b80      	cmp	r3, #128	; 0x80
 8016ef6:	d00a      	beq.n	8016f0e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016ef8:	7bbb      	ldrb	r3, [r7, #14]
 8016efa:	4619      	mov	r1, r3
 8016efc:	6878      	ldr	r0, [r7, #4]
 8016efe:	f001 f9d1 	bl	80182a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016f02:	2180      	movs	r1, #128	; 0x80
 8016f04:	6878      	ldr	r0, [r7, #4]
 8016f06:	f001 f9cd 	bl	80182a4 <USBD_LL_StallEP>
 8016f0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016f0c:	e020      	b.n	8016f50 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016f0e:	6839      	ldr	r1, [r7, #0]
 8016f10:	6878      	ldr	r0, [r7, #4]
 8016f12:	f000 fc7a 	bl	801780a <USBD_CtlError>
              break;
 8016f16:	e01b      	b.n	8016f50 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016f18:	683b      	ldr	r3, [r7, #0]
 8016f1a:	885b      	ldrh	r3, [r3, #2]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d10e      	bne.n	8016f3e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016f20:	7bbb      	ldrb	r3, [r7, #14]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d00b      	beq.n	8016f3e <USBD_StdEPReq+0xfe>
 8016f26:	7bbb      	ldrb	r3, [r7, #14]
 8016f28:	2b80      	cmp	r3, #128	; 0x80
 8016f2a:	d008      	beq.n	8016f3e <USBD_StdEPReq+0xfe>
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	88db      	ldrh	r3, [r3, #6]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d104      	bne.n	8016f3e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016f34:	7bbb      	ldrb	r3, [r7, #14]
 8016f36:	4619      	mov	r1, r3
 8016f38:	6878      	ldr	r0, [r7, #4]
 8016f3a:	f001 f9b3 	bl	80182a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016f3e:	6878      	ldr	r0, [r7, #4]
 8016f40:	f000 fd2e 	bl	80179a0 <USBD_CtlSendStatus>

              break;
 8016f44:	e004      	b.n	8016f50 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016f46:	6839      	ldr	r1, [r7, #0]
 8016f48:	6878      	ldr	r0, [r7, #4]
 8016f4a:	f000 fc5e 	bl	801780a <USBD_CtlError>
              break;
 8016f4e:	bf00      	nop
          }
          break;
 8016f50:	e107      	b.n	8017162 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f58:	b2db      	uxtb	r3, r3
 8016f5a:	2b02      	cmp	r3, #2
 8016f5c:	d002      	beq.n	8016f64 <USBD_StdEPReq+0x124>
 8016f5e:	2b03      	cmp	r3, #3
 8016f60:	d016      	beq.n	8016f90 <USBD_StdEPReq+0x150>
 8016f62:	e04b      	b.n	8016ffc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016f64:	7bbb      	ldrb	r3, [r7, #14]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d00d      	beq.n	8016f86 <USBD_StdEPReq+0x146>
 8016f6a:	7bbb      	ldrb	r3, [r7, #14]
 8016f6c:	2b80      	cmp	r3, #128	; 0x80
 8016f6e:	d00a      	beq.n	8016f86 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016f70:	7bbb      	ldrb	r3, [r7, #14]
 8016f72:	4619      	mov	r1, r3
 8016f74:	6878      	ldr	r0, [r7, #4]
 8016f76:	f001 f995 	bl	80182a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016f7a:	2180      	movs	r1, #128	; 0x80
 8016f7c:	6878      	ldr	r0, [r7, #4]
 8016f7e:	f001 f991 	bl	80182a4 <USBD_LL_StallEP>
 8016f82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016f84:	e040      	b.n	8017008 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016f86:	6839      	ldr	r1, [r7, #0]
 8016f88:	6878      	ldr	r0, [r7, #4]
 8016f8a:	f000 fc3e 	bl	801780a <USBD_CtlError>
              break;
 8016f8e:	e03b      	b.n	8017008 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016f90:	683b      	ldr	r3, [r7, #0]
 8016f92:	885b      	ldrh	r3, [r3, #2]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d136      	bne.n	8017006 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016f98:	7bbb      	ldrb	r3, [r7, #14]
 8016f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d004      	beq.n	8016fac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016fa2:	7bbb      	ldrb	r3, [r7, #14]
 8016fa4:	4619      	mov	r1, r3
 8016fa6:	6878      	ldr	r0, [r7, #4]
 8016fa8:	f001 f99b 	bl	80182e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016fac:	6878      	ldr	r0, [r7, #4]
 8016fae:	f000 fcf7 	bl	80179a0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016fb2:	7bbb      	ldrb	r3, [r7, #14]
 8016fb4:	4619      	mov	r1, r3
 8016fb6:	6878      	ldr	r0, [r7, #4]
 8016fb8:	f7ff fde2 	bl	8016b80 <USBD_CoreFindEP>
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016fc0:	7b7b      	ldrb	r3, [r7, #13]
 8016fc2:	2bff      	cmp	r3, #255	; 0xff
 8016fc4:	d01f      	beq.n	8017006 <USBD_StdEPReq+0x1c6>
 8016fc6:	7b7b      	ldrb	r3, [r7, #13]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d11c      	bne.n	8017006 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016fcc:	7b7a      	ldrb	r2, [r7, #13]
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016fd4:	7b7a      	ldrb	r2, [r7, #13]
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	32ae      	adds	r2, #174	; 0xae
 8016fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fde:	689b      	ldr	r3, [r3, #8]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d010      	beq.n	8017006 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016fe4:	7b7a      	ldrb	r2, [r7, #13]
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	32ae      	adds	r2, #174	; 0xae
 8016fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fee:	689b      	ldr	r3, [r3, #8]
 8016ff0:	6839      	ldr	r1, [r7, #0]
 8016ff2:	6878      	ldr	r0, [r7, #4]
 8016ff4:	4798      	blx	r3
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016ffa:	e004      	b.n	8017006 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016ffc:	6839      	ldr	r1, [r7, #0]
 8016ffe:	6878      	ldr	r0, [r7, #4]
 8017000:	f000 fc03 	bl	801780a <USBD_CtlError>
              break;
 8017004:	e000      	b.n	8017008 <USBD_StdEPReq+0x1c8>
              break;
 8017006:	bf00      	nop
          }
          break;
 8017008:	e0ab      	b.n	8017162 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017010:	b2db      	uxtb	r3, r3
 8017012:	2b02      	cmp	r3, #2
 8017014:	d002      	beq.n	801701c <USBD_StdEPReq+0x1dc>
 8017016:	2b03      	cmp	r3, #3
 8017018:	d032      	beq.n	8017080 <USBD_StdEPReq+0x240>
 801701a:	e097      	b.n	801714c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801701c:	7bbb      	ldrb	r3, [r7, #14]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d007      	beq.n	8017032 <USBD_StdEPReq+0x1f2>
 8017022:	7bbb      	ldrb	r3, [r7, #14]
 8017024:	2b80      	cmp	r3, #128	; 0x80
 8017026:	d004      	beq.n	8017032 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8017028:	6839      	ldr	r1, [r7, #0]
 801702a:	6878      	ldr	r0, [r7, #4]
 801702c:	f000 fbed 	bl	801780a <USBD_CtlError>
                break;
 8017030:	e091      	b.n	8017156 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017036:	2b00      	cmp	r3, #0
 8017038:	da0b      	bge.n	8017052 <USBD_StdEPReq+0x212>
 801703a:	7bbb      	ldrb	r3, [r7, #14]
 801703c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017040:	4613      	mov	r3, r2
 8017042:	009b      	lsls	r3, r3, #2
 8017044:	4413      	add	r3, r2
 8017046:	009b      	lsls	r3, r3, #2
 8017048:	3310      	adds	r3, #16
 801704a:	687a      	ldr	r2, [r7, #4]
 801704c:	4413      	add	r3, r2
 801704e:	3304      	adds	r3, #4
 8017050:	e00b      	b.n	801706a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017052:	7bbb      	ldrb	r3, [r7, #14]
 8017054:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017058:	4613      	mov	r3, r2
 801705a:	009b      	lsls	r3, r3, #2
 801705c:	4413      	add	r3, r2
 801705e:	009b      	lsls	r3, r3, #2
 8017060:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017064:	687a      	ldr	r2, [r7, #4]
 8017066:	4413      	add	r3, r2
 8017068:	3304      	adds	r3, #4
 801706a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801706c:	68bb      	ldr	r3, [r7, #8]
 801706e:	2200      	movs	r2, #0
 8017070:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017072:	68bb      	ldr	r3, [r7, #8]
 8017074:	2202      	movs	r2, #2
 8017076:	4619      	mov	r1, r3
 8017078:	6878      	ldr	r0, [r7, #4]
 801707a:	f000 fc37 	bl	80178ec <USBD_CtlSendData>
              break;
 801707e:	e06a      	b.n	8017156 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017084:	2b00      	cmp	r3, #0
 8017086:	da11      	bge.n	80170ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017088:	7bbb      	ldrb	r3, [r7, #14]
 801708a:	f003 020f 	and.w	r2, r3, #15
 801708e:	6879      	ldr	r1, [r7, #4]
 8017090:	4613      	mov	r3, r2
 8017092:	009b      	lsls	r3, r3, #2
 8017094:	4413      	add	r3, r2
 8017096:	009b      	lsls	r3, r3, #2
 8017098:	440b      	add	r3, r1
 801709a:	3324      	adds	r3, #36	; 0x24
 801709c:	881b      	ldrh	r3, [r3, #0]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d117      	bne.n	80170d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80170a2:	6839      	ldr	r1, [r7, #0]
 80170a4:	6878      	ldr	r0, [r7, #4]
 80170a6:	f000 fbb0 	bl	801780a <USBD_CtlError>
                  break;
 80170aa:	e054      	b.n	8017156 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80170ac:	7bbb      	ldrb	r3, [r7, #14]
 80170ae:	f003 020f 	and.w	r2, r3, #15
 80170b2:	6879      	ldr	r1, [r7, #4]
 80170b4:	4613      	mov	r3, r2
 80170b6:	009b      	lsls	r3, r3, #2
 80170b8:	4413      	add	r3, r2
 80170ba:	009b      	lsls	r3, r3, #2
 80170bc:	440b      	add	r3, r1
 80170be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80170c2:	881b      	ldrh	r3, [r3, #0]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d104      	bne.n	80170d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80170c8:	6839      	ldr	r1, [r7, #0]
 80170ca:	6878      	ldr	r0, [r7, #4]
 80170cc:	f000 fb9d 	bl	801780a <USBD_CtlError>
                  break;
 80170d0:	e041      	b.n	8017156 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80170d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	da0b      	bge.n	80170f2 <USBD_StdEPReq+0x2b2>
 80170da:	7bbb      	ldrb	r3, [r7, #14]
 80170dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80170e0:	4613      	mov	r3, r2
 80170e2:	009b      	lsls	r3, r3, #2
 80170e4:	4413      	add	r3, r2
 80170e6:	009b      	lsls	r3, r3, #2
 80170e8:	3310      	adds	r3, #16
 80170ea:	687a      	ldr	r2, [r7, #4]
 80170ec:	4413      	add	r3, r2
 80170ee:	3304      	adds	r3, #4
 80170f0:	e00b      	b.n	801710a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80170f2:	7bbb      	ldrb	r3, [r7, #14]
 80170f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80170f8:	4613      	mov	r3, r2
 80170fa:	009b      	lsls	r3, r3, #2
 80170fc:	4413      	add	r3, r2
 80170fe:	009b      	lsls	r3, r3, #2
 8017100:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017104:	687a      	ldr	r2, [r7, #4]
 8017106:	4413      	add	r3, r2
 8017108:	3304      	adds	r3, #4
 801710a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801710c:	7bbb      	ldrb	r3, [r7, #14]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d002      	beq.n	8017118 <USBD_StdEPReq+0x2d8>
 8017112:	7bbb      	ldrb	r3, [r7, #14]
 8017114:	2b80      	cmp	r3, #128	; 0x80
 8017116:	d103      	bne.n	8017120 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8017118:	68bb      	ldr	r3, [r7, #8]
 801711a:	2200      	movs	r2, #0
 801711c:	601a      	str	r2, [r3, #0]
 801711e:	e00e      	b.n	801713e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017120:	7bbb      	ldrb	r3, [r7, #14]
 8017122:	4619      	mov	r1, r3
 8017124:	6878      	ldr	r0, [r7, #4]
 8017126:	f001 f8fb 	bl	8018320 <USBD_LL_IsStallEP>
 801712a:	4603      	mov	r3, r0
 801712c:	2b00      	cmp	r3, #0
 801712e:	d003      	beq.n	8017138 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8017130:	68bb      	ldr	r3, [r7, #8]
 8017132:	2201      	movs	r2, #1
 8017134:	601a      	str	r2, [r3, #0]
 8017136:	e002      	b.n	801713e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8017138:	68bb      	ldr	r3, [r7, #8]
 801713a:	2200      	movs	r2, #0
 801713c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801713e:	68bb      	ldr	r3, [r7, #8]
 8017140:	2202      	movs	r2, #2
 8017142:	4619      	mov	r1, r3
 8017144:	6878      	ldr	r0, [r7, #4]
 8017146:	f000 fbd1 	bl	80178ec <USBD_CtlSendData>
              break;
 801714a:	e004      	b.n	8017156 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801714c:	6839      	ldr	r1, [r7, #0]
 801714e:	6878      	ldr	r0, [r7, #4]
 8017150:	f000 fb5b 	bl	801780a <USBD_CtlError>
              break;
 8017154:	bf00      	nop
          }
          break;
 8017156:	e004      	b.n	8017162 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8017158:	6839      	ldr	r1, [r7, #0]
 801715a:	6878      	ldr	r0, [r7, #4]
 801715c:	f000 fb55 	bl	801780a <USBD_CtlError>
          break;
 8017160:	bf00      	nop
      }
      break;
 8017162:	e005      	b.n	8017170 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8017164:	6839      	ldr	r1, [r7, #0]
 8017166:	6878      	ldr	r0, [r7, #4]
 8017168:	f000 fb4f 	bl	801780a <USBD_CtlError>
      break;
 801716c:	e000      	b.n	8017170 <USBD_StdEPReq+0x330>
      break;
 801716e:	bf00      	nop
  }

  return ret;
 8017170:	7bfb      	ldrb	r3, [r7, #15]
}
 8017172:	4618      	mov	r0, r3
 8017174:	3710      	adds	r7, #16
 8017176:	46bd      	mov	sp, r7
 8017178:	bd80      	pop	{r7, pc}
	...

0801717c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801717c:	b580      	push	{r7, lr}
 801717e:	b084      	sub	sp, #16
 8017180:	af00      	add	r7, sp, #0
 8017182:	6078      	str	r0, [r7, #4]
 8017184:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017186:	2300      	movs	r3, #0
 8017188:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801718a:	2300      	movs	r3, #0
 801718c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801718e:	2300      	movs	r3, #0
 8017190:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017192:	683b      	ldr	r3, [r7, #0]
 8017194:	885b      	ldrh	r3, [r3, #2]
 8017196:	0a1b      	lsrs	r3, r3, #8
 8017198:	b29b      	uxth	r3, r3
 801719a:	3b01      	subs	r3, #1
 801719c:	2b06      	cmp	r3, #6
 801719e:	f200 8128 	bhi.w	80173f2 <USBD_GetDescriptor+0x276>
 80171a2:	a201      	add	r2, pc, #4	; (adr r2, 80171a8 <USBD_GetDescriptor+0x2c>)
 80171a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171a8:	080171c5 	.word	0x080171c5
 80171ac:	080171dd 	.word	0x080171dd
 80171b0:	0801721d 	.word	0x0801721d
 80171b4:	080173f3 	.word	0x080173f3
 80171b8:	080173f3 	.word	0x080173f3
 80171bc:	08017393 	.word	0x08017393
 80171c0:	080173bf 	.word	0x080173bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	687a      	ldr	r2, [r7, #4]
 80171ce:	7c12      	ldrb	r2, [r2, #16]
 80171d0:	f107 0108 	add.w	r1, r7, #8
 80171d4:	4610      	mov	r0, r2
 80171d6:	4798      	blx	r3
 80171d8:	60f8      	str	r0, [r7, #12]
      break;
 80171da:	e112      	b.n	8017402 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	7c1b      	ldrb	r3, [r3, #16]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d10d      	bne.n	8017200 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80171ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171ec:	f107 0208 	add.w	r2, r7, #8
 80171f0:	4610      	mov	r0, r2
 80171f2:	4798      	blx	r3
 80171f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	3301      	adds	r3, #1
 80171fa:	2202      	movs	r2, #2
 80171fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80171fe:	e100      	b.n	8017402 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017208:	f107 0208 	add.w	r2, r7, #8
 801720c:	4610      	mov	r0, r2
 801720e:	4798      	blx	r3
 8017210:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	3301      	adds	r3, #1
 8017216:	2202      	movs	r2, #2
 8017218:	701a      	strb	r2, [r3, #0]
      break;
 801721a:	e0f2      	b.n	8017402 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801721c:	683b      	ldr	r3, [r7, #0]
 801721e:	885b      	ldrh	r3, [r3, #2]
 8017220:	b2db      	uxtb	r3, r3
 8017222:	2b05      	cmp	r3, #5
 8017224:	f200 80ac 	bhi.w	8017380 <USBD_GetDescriptor+0x204>
 8017228:	a201      	add	r2, pc, #4	; (adr r2, 8017230 <USBD_GetDescriptor+0xb4>)
 801722a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801722e:	bf00      	nop
 8017230:	08017249 	.word	0x08017249
 8017234:	0801727d 	.word	0x0801727d
 8017238:	080172b1 	.word	0x080172b1
 801723c:	080172e5 	.word	0x080172e5
 8017240:	08017319 	.word	0x08017319
 8017244:	0801734d 	.word	0x0801734d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801724e:	685b      	ldr	r3, [r3, #4]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d00b      	beq.n	801726c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801725a:	685b      	ldr	r3, [r3, #4]
 801725c:	687a      	ldr	r2, [r7, #4]
 801725e:	7c12      	ldrb	r2, [r2, #16]
 8017260:	f107 0108 	add.w	r1, r7, #8
 8017264:	4610      	mov	r0, r2
 8017266:	4798      	blx	r3
 8017268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801726a:	e091      	b.n	8017390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801726c:	6839      	ldr	r1, [r7, #0]
 801726e:	6878      	ldr	r0, [r7, #4]
 8017270:	f000 facb 	bl	801780a <USBD_CtlError>
            err++;
 8017274:	7afb      	ldrb	r3, [r7, #11]
 8017276:	3301      	adds	r3, #1
 8017278:	72fb      	strb	r3, [r7, #11]
          break;
 801727a:	e089      	b.n	8017390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017282:	689b      	ldr	r3, [r3, #8]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d00b      	beq.n	80172a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801728e:	689b      	ldr	r3, [r3, #8]
 8017290:	687a      	ldr	r2, [r7, #4]
 8017292:	7c12      	ldrb	r2, [r2, #16]
 8017294:	f107 0108 	add.w	r1, r7, #8
 8017298:	4610      	mov	r0, r2
 801729a:	4798      	blx	r3
 801729c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801729e:	e077      	b.n	8017390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80172a0:	6839      	ldr	r1, [r7, #0]
 80172a2:	6878      	ldr	r0, [r7, #4]
 80172a4:	f000 fab1 	bl	801780a <USBD_CtlError>
            err++;
 80172a8:	7afb      	ldrb	r3, [r7, #11]
 80172aa:	3301      	adds	r3, #1
 80172ac:	72fb      	strb	r3, [r7, #11]
          break;
 80172ae:	e06f      	b.n	8017390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80172b6:	68db      	ldr	r3, [r3, #12]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d00b      	beq.n	80172d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80172c2:	68db      	ldr	r3, [r3, #12]
 80172c4:	687a      	ldr	r2, [r7, #4]
 80172c6:	7c12      	ldrb	r2, [r2, #16]
 80172c8:	f107 0108 	add.w	r1, r7, #8
 80172cc:	4610      	mov	r0, r2
 80172ce:	4798      	blx	r3
 80172d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80172d2:	e05d      	b.n	8017390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80172d4:	6839      	ldr	r1, [r7, #0]
 80172d6:	6878      	ldr	r0, [r7, #4]
 80172d8:	f000 fa97 	bl	801780a <USBD_CtlError>
            err++;
 80172dc:	7afb      	ldrb	r3, [r7, #11]
 80172de:	3301      	adds	r3, #1
 80172e0:	72fb      	strb	r3, [r7, #11]
          break;
 80172e2:	e055      	b.n	8017390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80172ea:	691b      	ldr	r3, [r3, #16]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d00b      	beq.n	8017308 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80172f6:	691b      	ldr	r3, [r3, #16]
 80172f8:	687a      	ldr	r2, [r7, #4]
 80172fa:	7c12      	ldrb	r2, [r2, #16]
 80172fc:	f107 0108 	add.w	r1, r7, #8
 8017300:	4610      	mov	r0, r2
 8017302:	4798      	blx	r3
 8017304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017306:	e043      	b.n	8017390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017308:	6839      	ldr	r1, [r7, #0]
 801730a:	6878      	ldr	r0, [r7, #4]
 801730c:	f000 fa7d 	bl	801780a <USBD_CtlError>
            err++;
 8017310:	7afb      	ldrb	r3, [r7, #11]
 8017312:	3301      	adds	r3, #1
 8017314:	72fb      	strb	r3, [r7, #11]
          break;
 8017316:	e03b      	b.n	8017390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801731e:	695b      	ldr	r3, [r3, #20]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d00b      	beq.n	801733c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801732a:	695b      	ldr	r3, [r3, #20]
 801732c:	687a      	ldr	r2, [r7, #4]
 801732e:	7c12      	ldrb	r2, [r2, #16]
 8017330:	f107 0108 	add.w	r1, r7, #8
 8017334:	4610      	mov	r0, r2
 8017336:	4798      	blx	r3
 8017338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801733a:	e029      	b.n	8017390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801733c:	6839      	ldr	r1, [r7, #0]
 801733e:	6878      	ldr	r0, [r7, #4]
 8017340:	f000 fa63 	bl	801780a <USBD_CtlError>
            err++;
 8017344:	7afb      	ldrb	r3, [r7, #11]
 8017346:	3301      	adds	r3, #1
 8017348:	72fb      	strb	r3, [r7, #11]
          break;
 801734a:	e021      	b.n	8017390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017352:	699b      	ldr	r3, [r3, #24]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d00b      	beq.n	8017370 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801735e:	699b      	ldr	r3, [r3, #24]
 8017360:	687a      	ldr	r2, [r7, #4]
 8017362:	7c12      	ldrb	r2, [r2, #16]
 8017364:	f107 0108 	add.w	r1, r7, #8
 8017368:	4610      	mov	r0, r2
 801736a:	4798      	blx	r3
 801736c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801736e:	e00f      	b.n	8017390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017370:	6839      	ldr	r1, [r7, #0]
 8017372:	6878      	ldr	r0, [r7, #4]
 8017374:	f000 fa49 	bl	801780a <USBD_CtlError>
            err++;
 8017378:	7afb      	ldrb	r3, [r7, #11]
 801737a:	3301      	adds	r3, #1
 801737c:	72fb      	strb	r3, [r7, #11]
          break;
 801737e:	e007      	b.n	8017390 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017380:	6839      	ldr	r1, [r7, #0]
 8017382:	6878      	ldr	r0, [r7, #4]
 8017384:	f000 fa41 	bl	801780a <USBD_CtlError>
          err++;
 8017388:	7afb      	ldrb	r3, [r7, #11]
 801738a:	3301      	adds	r3, #1
 801738c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801738e:	bf00      	nop
      }
      break;
 8017390:	e037      	b.n	8017402 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	7c1b      	ldrb	r3, [r3, #16]
 8017396:	2b00      	cmp	r3, #0
 8017398:	d109      	bne.n	80173ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80173a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80173a2:	f107 0208 	add.w	r2, r7, #8
 80173a6:	4610      	mov	r0, r2
 80173a8:	4798      	blx	r3
 80173aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80173ac:	e029      	b.n	8017402 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80173ae:	6839      	ldr	r1, [r7, #0]
 80173b0:	6878      	ldr	r0, [r7, #4]
 80173b2:	f000 fa2a 	bl	801780a <USBD_CtlError>
        err++;
 80173b6:	7afb      	ldrb	r3, [r7, #11]
 80173b8:	3301      	adds	r3, #1
 80173ba:	72fb      	strb	r3, [r7, #11]
      break;
 80173bc:	e021      	b.n	8017402 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	7c1b      	ldrb	r3, [r3, #16]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d10d      	bne.n	80173e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80173cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173ce:	f107 0208 	add.w	r2, r7, #8
 80173d2:	4610      	mov	r0, r2
 80173d4:	4798      	blx	r3
 80173d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	3301      	adds	r3, #1
 80173dc:	2207      	movs	r2, #7
 80173de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80173e0:	e00f      	b.n	8017402 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80173e2:	6839      	ldr	r1, [r7, #0]
 80173e4:	6878      	ldr	r0, [r7, #4]
 80173e6:	f000 fa10 	bl	801780a <USBD_CtlError>
        err++;
 80173ea:	7afb      	ldrb	r3, [r7, #11]
 80173ec:	3301      	adds	r3, #1
 80173ee:	72fb      	strb	r3, [r7, #11]
      break;
 80173f0:	e007      	b.n	8017402 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80173f2:	6839      	ldr	r1, [r7, #0]
 80173f4:	6878      	ldr	r0, [r7, #4]
 80173f6:	f000 fa08 	bl	801780a <USBD_CtlError>
      err++;
 80173fa:	7afb      	ldrb	r3, [r7, #11]
 80173fc:	3301      	adds	r3, #1
 80173fe:	72fb      	strb	r3, [r7, #11]
      break;
 8017400:	bf00      	nop
  }

  if (err != 0U)
 8017402:	7afb      	ldrb	r3, [r7, #11]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d11e      	bne.n	8017446 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8017408:	683b      	ldr	r3, [r7, #0]
 801740a:	88db      	ldrh	r3, [r3, #6]
 801740c:	2b00      	cmp	r3, #0
 801740e:	d016      	beq.n	801743e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8017410:	893b      	ldrh	r3, [r7, #8]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d00e      	beq.n	8017434 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8017416:	683b      	ldr	r3, [r7, #0]
 8017418:	88da      	ldrh	r2, [r3, #6]
 801741a:	893b      	ldrh	r3, [r7, #8]
 801741c:	4293      	cmp	r3, r2
 801741e:	bf28      	it	cs
 8017420:	4613      	movcs	r3, r2
 8017422:	b29b      	uxth	r3, r3
 8017424:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017426:	893b      	ldrh	r3, [r7, #8]
 8017428:	461a      	mov	r2, r3
 801742a:	68f9      	ldr	r1, [r7, #12]
 801742c:	6878      	ldr	r0, [r7, #4]
 801742e:	f000 fa5d 	bl	80178ec <USBD_CtlSendData>
 8017432:	e009      	b.n	8017448 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017434:	6839      	ldr	r1, [r7, #0]
 8017436:	6878      	ldr	r0, [r7, #4]
 8017438:	f000 f9e7 	bl	801780a <USBD_CtlError>
 801743c:	e004      	b.n	8017448 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801743e:	6878      	ldr	r0, [r7, #4]
 8017440:	f000 faae 	bl	80179a0 <USBD_CtlSendStatus>
 8017444:	e000      	b.n	8017448 <USBD_GetDescriptor+0x2cc>
    return;
 8017446:	bf00      	nop
  }
}
 8017448:	3710      	adds	r7, #16
 801744a:	46bd      	mov	sp, r7
 801744c:	bd80      	pop	{r7, pc}
 801744e:	bf00      	nop

08017450 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017450:	b580      	push	{r7, lr}
 8017452:	b084      	sub	sp, #16
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
 8017458:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801745a:	683b      	ldr	r3, [r7, #0]
 801745c:	889b      	ldrh	r3, [r3, #4]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d131      	bne.n	80174c6 <USBD_SetAddress+0x76>
 8017462:	683b      	ldr	r3, [r7, #0]
 8017464:	88db      	ldrh	r3, [r3, #6]
 8017466:	2b00      	cmp	r3, #0
 8017468:	d12d      	bne.n	80174c6 <USBD_SetAddress+0x76>
 801746a:	683b      	ldr	r3, [r7, #0]
 801746c:	885b      	ldrh	r3, [r3, #2]
 801746e:	2b7f      	cmp	r3, #127	; 0x7f
 8017470:	d829      	bhi.n	80174c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017472:	683b      	ldr	r3, [r7, #0]
 8017474:	885b      	ldrh	r3, [r3, #2]
 8017476:	b2db      	uxtb	r3, r3
 8017478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801747c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017484:	b2db      	uxtb	r3, r3
 8017486:	2b03      	cmp	r3, #3
 8017488:	d104      	bne.n	8017494 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801748a:	6839      	ldr	r1, [r7, #0]
 801748c:	6878      	ldr	r0, [r7, #4]
 801748e:	f000 f9bc 	bl	801780a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017492:	e01d      	b.n	80174d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	7bfa      	ldrb	r2, [r7, #15]
 8017498:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801749c:	7bfb      	ldrb	r3, [r7, #15]
 801749e:	4619      	mov	r1, r3
 80174a0:	6878      	ldr	r0, [r7, #4]
 80174a2:	f000 ff69 	bl	8018378 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80174a6:	6878      	ldr	r0, [r7, #4]
 80174a8:	f000 fa7a 	bl	80179a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80174ac:	7bfb      	ldrb	r3, [r7, #15]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d004      	beq.n	80174bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	2202      	movs	r2, #2
 80174b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80174ba:	e009      	b.n	80174d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	2201      	movs	r2, #1
 80174c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80174c4:	e004      	b.n	80174d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80174c6:	6839      	ldr	r1, [r7, #0]
 80174c8:	6878      	ldr	r0, [r7, #4]
 80174ca:	f000 f99e 	bl	801780a <USBD_CtlError>
  }
}
 80174ce:	bf00      	nop
 80174d0:	bf00      	nop
 80174d2:	3710      	adds	r7, #16
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bd80      	pop	{r7, pc}

080174d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b084      	sub	sp, #16
 80174dc:	af00      	add	r7, sp, #0
 80174de:	6078      	str	r0, [r7, #4]
 80174e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80174e2:	2300      	movs	r3, #0
 80174e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80174e6:	683b      	ldr	r3, [r7, #0]
 80174e8:	885b      	ldrh	r3, [r3, #2]
 80174ea:	b2da      	uxtb	r2, r3
 80174ec:	4b4e      	ldr	r3, [pc, #312]	; (8017628 <USBD_SetConfig+0x150>)
 80174ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80174f0:	4b4d      	ldr	r3, [pc, #308]	; (8017628 <USBD_SetConfig+0x150>)
 80174f2:	781b      	ldrb	r3, [r3, #0]
 80174f4:	2b01      	cmp	r3, #1
 80174f6:	d905      	bls.n	8017504 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80174f8:	6839      	ldr	r1, [r7, #0]
 80174fa:	6878      	ldr	r0, [r7, #4]
 80174fc:	f000 f985 	bl	801780a <USBD_CtlError>
    return USBD_FAIL;
 8017500:	2303      	movs	r3, #3
 8017502:	e08c      	b.n	801761e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801750a:	b2db      	uxtb	r3, r3
 801750c:	2b02      	cmp	r3, #2
 801750e:	d002      	beq.n	8017516 <USBD_SetConfig+0x3e>
 8017510:	2b03      	cmp	r3, #3
 8017512:	d029      	beq.n	8017568 <USBD_SetConfig+0x90>
 8017514:	e075      	b.n	8017602 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017516:	4b44      	ldr	r3, [pc, #272]	; (8017628 <USBD_SetConfig+0x150>)
 8017518:	781b      	ldrb	r3, [r3, #0]
 801751a:	2b00      	cmp	r3, #0
 801751c:	d020      	beq.n	8017560 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801751e:	4b42      	ldr	r3, [pc, #264]	; (8017628 <USBD_SetConfig+0x150>)
 8017520:	781b      	ldrb	r3, [r3, #0]
 8017522:	461a      	mov	r2, r3
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017528:	4b3f      	ldr	r3, [pc, #252]	; (8017628 <USBD_SetConfig+0x150>)
 801752a:	781b      	ldrb	r3, [r3, #0]
 801752c:	4619      	mov	r1, r3
 801752e:	6878      	ldr	r0, [r7, #4]
 8017530:	f7fe ffe1 	bl	80164f6 <USBD_SetClassConfig>
 8017534:	4603      	mov	r3, r0
 8017536:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017538:	7bfb      	ldrb	r3, [r7, #15]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d008      	beq.n	8017550 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801753e:	6839      	ldr	r1, [r7, #0]
 8017540:	6878      	ldr	r0, [r7, #4]
 8017542:	f000 f962 	bl	801780a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	2202      	movs	r2, #2
 801754a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801754e:	e065      	b.n	801761c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017550:	6878      	ldr	r0, [r7, #4]
 8017552:	f000 fa25 	bl	80179a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	2203      	movs	r2, #3
 801755a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801755e:	e05d      	b.n	801761c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017560:	6878      	ldr	r0, [r7, #4]
 8017562:	f000 fa1d 	bl	80179a0 <USBD_CtlSendStatus>
      break;
 8017566:	e059      	b.n	801761c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017568:	4b2f      	ldr	r3, [pc, #188]	; (8017628 <USBD_SetConfig+0x150>)
 801756a:	781b      	ldrb	r3, [r3, #0]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d112      	bne.n	8017596 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	2202      	movs	r2, #2
 8017574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8017578:	4b2b      	ldr	r3, [pc, #172]	; (8017628 <USBD_SetConfig+0x150>)
 801757a:	781b      	ldrb	r3, [r3, #0]
 801757c:	461a      	mov	r2, r3
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017582:	4b29      	ldr	r3, [pc, #164]	; (8017628 <USBD_SetConfig+0x150>)
 8017584:	781b      	ldrb	r3, [r3, #0]
 8017586:	4619      	mov	r1, r3
 8017588:	6878      	ldr	r0, [r7, #4]
 801758a:	f7fe ffd0 	bl	801652e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801758e:	6878      	ldr	r0, [r7, #4]
 8017590:	f000 fa06 	bl	80179a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017594:	e042      	b.n	801761c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8017596:	4b24      	ldr	r3, [pc, #144]	; (8017628 <USBD_SetConfig+0x150>)
 8017598:	781b      	ldrb	r3, [r3, #0]
 801759a:	461a      	mov	r2, r3
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	685b      	ldr	r3, [r3, #4]
 80175a0:	429a      	cmp	r2, r3
 80175a2:	d02a      	beq.n	80175fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	685b      	ldr	r3, [r3, #4]
 80175a8:	b2db      	uxtb	r3, r3
 80175aa:	4619      	mov	r1, r3
 80175ac:	6878      	ldr	r0, [r7, #4]
 80175ae:	f7fe ffbe 	bl	801652e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80175b2:	4b1d      	ldr	r3, [pc, #116]	; (8017628 <USBD_SetConfig+0x150>)
 80175b4:	781b      	ldrb	r3, [r3, #0]
 80175b6:	461a      	mov	r2, r3
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80175bc:	4b1a      	ldr	r3, [pc, #104]	; (8017628 <USBD_SetConfig+0x150>)
 80175be:	781b      	ldrb	r3, [r3, #0]
 80175c0:	4619      	mov	r1, r3
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	f7fe ff97 	bl	80164f6 <USBD_SetClassConfig>
 80175c8:	4603      	mov	r3, r0
 80175ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80175cc:	7bfb      	ldrb	r3, [r7, #15]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d00f      	beq.n	80175f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80175d2:	6839      	ldr	r1, [r7, #0]
 80175d4:	6878      	ldr	r0, [r7, #4]
 80175d6:	f000 f918 	bl	801780a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	685b      	ldr	r3, [r3, #4]
 80175de:	b2db      	uxtb	r3, r3
 80175e0:	4619      	mov	r1, r3
 80175e2:	6878      	ldr	r0, [r7, #4]
 80175e4:	f7fe ffa3 	bl	801652e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	2202      	movs	r2, #2
 80175ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80175f0:	e014      	b.n	801761c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80175f2:	6878      	ldr	r0, [r7, #4]
 80175f4:	f000 f9d4 	bl	80179a0 <USBD_CtlSendStatus>
      break;
 80175f8:	e010      	b.n	801761c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80175fa:	6878      	ldr	r0, [r7, #4]
 80175fc:	f000 f9d0 	bl	80179a0 <USBD_CtlSendStatus>
      break;
 8017600:	e00c      	b.n	801761c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8017602:	6839      	ldr	r1, [r7, #0]
 8017604:	6878      	ldr	r0, [r7, #4]
 8017606:	f000 f900 	bl	801780a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801760a:	4b07      	ldr	r3, [pc, #28]	; (8017628 <USBD_SetConfig+0x150>)
 801760c:	781b      	ldrb	r3, [r3, #0]
 801760e:	4619      	mov	r1, r3
 8017610:	6878      	ldr	r0, [r7, #4]
 8017612:	f7fe ff8c 	bl	801652e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017616:	2303      	movs	r3, #3
 8017618:	73fb      	strb	r3, [r7, #15]
      break;
 801761a:	bf00      	nop
  }

  return ret;
 801761c:	7bfb      	ldrb	r3, [r7, #15]
}
 801761e:	4618      	mov	r0, r3
 8017620:	3710      	adds	r7, #16
 8017622:	46bd      	mov	sp, r7
 8017624:	bd80      	pop	{r7, pc}
 8017626:	bf00      	nop
 8017628:	20005414 	.word	0x20005414

0801762c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b082      	sub	sp, #8
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
 8017634:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017636:	683b      	ldr	r3, [r7, #0]
 8017638:	88db      	ldrh	r3, [r3, #6]
 801763a:	2b01      	cmp	r3, #1
 801763c:	d004      	beq.n	8017648 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801763e:	6839      	ldr	r1, [r7, #0]
 8017640:	6878      	ldr	r0, [r7, #4]
 8017642:	f000 f8e2 	bl	801780a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017646:	e023      	b.n	8017690 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801764e:	b2db      	uxtb	r3, r3
 8017650:	2b02      	cmp	r3, #2
 8017652:	dc02      	bgt.n	801765a <USBD_GetConfig+0x2e>
 8017654:	2b00      	cmp	r3, #0
 8017656:	dc03      	bgt.n	8017660 <USBD_GetConfig+0x34>
 8017658:	e015      	b.n	8017686 <USBD_GetConfig+0x5a>
 801765a:	2b03      	cmp	r3, #3
 801765c:	d00b      	beq.n	8017676 <USBD_GetConfig+0x4a>
 801765e:	e012      	b.n	8017686 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	2200      	movs	r2, #0
 8017664:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	3308      	adds	r3, #8
 801766a:	2201      	movs	r2, #1
 801766c:	4619      	mov	r1, r3
 801766e:	6878      	ldr	r0, [r7, #4]
 8017670:	f000 f93c 	bl	80178ec <USBD_CtlSendData>
        break;
 8017674:	e00c      	b.n	8017690 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	3304      	adds	r3, #4
 801767a:	2201      	movs	r2, #1
 801767c:	4619      	mov	r1, r3
 801767e:	6878      	ldr	r0, [r7, #4]
 8017680:	f000 f934 	bl	80178ec <USBD_CtlSendData>
        break;
 8017684:	e004      	b.n	8017690 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017686:	6839      	ldr	r1, [r7, #0]
 8017688:	6878      	ldr	r0, [r7, #4]
 801768a:	f000 f8be 	bl	801780a <USBD_CtlError>
        break;
 801768e:	bf00      	nop
}
 8017690:	bf00      	nop
 8017692:	3708      	adds	r7, #8
 8017694:	46bd      	mov	sp, r7
 8017696:	bd80      	pop	{r7, pc}

08017698 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b082      	sub	sp, #8
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
 80176a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80176a8:	b2db      	uxtb	r3, r3
 80176aa:	3b01      	subs	r3, #1
 80176ac:	2b02      	cmp	r3, #2
 80176ae:	d81e      	bhi.n	80176ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80176b0:	683b      	ldr	r3, [r7, #0]
 80176b2:	88db      	ldrh	r3, [r3, #6]
 80176b4:	2b02      	cmp	r3, #2
 80176b6:	d004      	beq.n	80176c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80176b8:	6839      	ldr	r1, [r7, #0]
 80176ba:	6878      	ldr	r0, [r7, #4]
 80176bc:	f000 f8a5 	bl	801780a <USBD_CtlError>
        break;
 80176c0:	e01a      	b.n	80176f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	2201      	movs	r2, #1
 80176c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d005      	beq.n	80176de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	68db      	ldr	r3, [r3, #12]
 80176d6:	f043 0202 	orr.w	r2, r3, #2
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	330c      	adds	r3, #12
 80176e2:	2202      	movs	r2, #2
 80176e4:	4619      	mov	r1, r3
 80176e6:	6878      	ldr	r0, [r7, #4]
 80176e8:	f000 f900 	bl	80178ec <USBD_CtlSendData>
      break;
 80176ec:	e004      	b.n	80176f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80176ee:	6839      	ldr	r1, [r7, #0]
 80176f0:	6878      	ldr	r0, [r7, #4]
 80176f2:	f000 f88a 	bl	801780a <USBD_CtlError>
      break;
 80176f6:	bf00      	nop
  }
}
 80176f8:	bf00      	nop
 80176fa:	3708      	adds	r7, #8
 80176fc:	46bd      	mov	sp, r7
 80176fe:	bd80      	pop	{r7, pc}

08017700 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b082      	sub	sp, #8
 8017704:	af00      	add	r7, sp, #0
 8017706:	6078      	str	r0, [r7, #4]
 8017708:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801770a:	683b      	ldr	r3, [r7, #0]
 801770c:	885b      	ldrh	r3, [r3, #2]
 801770e:	2b01      	cmp	r3, #1
 8017710:	d107      	bne.n	8017722 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	2201      	movs	r2, #1
 8017716:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801771a:	6878      	ldr	r0, [r7, #4]
 801771c:	f000 f940 	bl	80179a0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017720:	e013      	b.n	801774a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8017722:	683b      	ldr	r3, [r7, #0]
 8017724:	885b      	ldrh	r3, [r3, #2]
 8017726:	2b02      	cmp	r3, #2
 8017728:	d10b      	bne.n	8017742 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801772a:	683b      	ldr	r3, [r7, #0]
 801772c:	889b      	ldrh	r3, [r3, #4]
 801772e:	0a1b      	lsrs	r3, r3, #8
 8017730:	b29b      	uxth	r3, r3
 8017732:	b2da      	uxtb	r2, r3
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801773a:	6878      	ldr	r0, [r7, #4]
 801773c:	f000 f930 	bl	80179a0 <USBD_CtlSendStatus>
}
 8017740:	e003      	b.n	801774a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017742:	6839      	ldr	r1, [r7, #0]
 8017744:	6878      	ldr	r0, [r7, #4]
 8017746:	f000 f860 	bl	801780a <USBD_CtlError>
}
 801774a:	bf00      	nop
 801774c:	3708      	adds	r7, #8
 801774e:	46bd      	mov	sp, r7
 8017750:	bd80      	pop	{r7, pc}

08017752 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017752:	b580      	push	{r7, lr}
 8017754:	b082      	sub	sp, #8
 8017756:	af00      	add	r7, sp, #0
 8017758:	6078      	str	r0, [r7, #4]
 801775a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017762:	b2db      	uxtb	r3, r3
 8017764:	3b01      	subs	r3, #1
 8017766:	2b02      	cmp	r3, #2
 8017768:	d80b      	bhi.n	8017782 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801776a:	683b      	ldr	r3, [r7, #0]
 801776c:	885b      	ldrh	r3, [r3, #2]
 801776e:	2b01      	cmp	r3, #1
 8017770:	d10c      	bne.n	801778c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	2200      	movs	r2, #0
 8017776:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801777a:	6878      	ldr	r0, [r7, #4]
 801777c:	f000 f910 	bl	80179a0 <USBD_CtlSendStatus>
      }
      break;
 8017780:	e004      	b.n	801778c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017782:	6839      	ldr	r1, [r7, #0]
 8017784:	6878      	ldr	r0, [r7, #4]
 8017786:	f000 f840 	bl	801780a <USBD_CtlError>
      break;
 801778a:	e000      	b.n	801778e <USBD_ClrFeature+0x3c>
      break;
 801778c:	bf00      	nop
  }
}
 801778e:	bf00      	nop
 8017790:	3708      	adds	r7, #8
 8017792:	46bd      	mov	sp, r7
 8017794:	bd80      	pop	{r7, pc}

08017796 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017796:	b580      	push	{r7, lr}
 8017798:	b084      	sub	sp, #16
 801779a:	af00      	add	r7, sp, #0
 801779c:	6078      	str	r0, [r7, #4]
 801779e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80177a0:	683b      	ldr	r3, [r7, #0]
 80177a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	781a      	ldrb	r2, [r3, #0]
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	3301      	adds	r3, #1
 80177b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	781a      	ldrb	r2, [r3, #0]
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	3301      	adds	r3, #1
 80177be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80177c0:	68f8      	ldr	r0, [r7, #12]
 80177c2:	f7ff fa41 	bl	8016c48 <SWAPBYTE>
 80177c6:	4603      	mov	r3, r0
 80177c8:	461a      	mov	r2, r3
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	3301      	adds	r3, #1
 80177d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	3301      	adds	r3, #1
 80177d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80177da:	68f8      	ldr	r0, [r7, #12]
 80177dc:	f7ff fa34 	bl	8016c48 <SWAPBYTE>
 80177e0:	4603      	mov	r3, r0
 80177e2:	461a      	mov	r2, r3
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	3301      	adds	r3, #1
 80177ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	3301      	adds	r3, #1
 80177f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80177f4:	68f8      	ldr	r0, [r7, #12]
 80177f6:	f7ff fa27 	bl	8016c48 <SWAPBYTE>
 80177fa:	4603      	mov	r3, r0
 80177fc:	461a      	mov	r2, r3
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	80da      	strh	r2, [r3, #6]
}
 8017802:	bf00      	nop
 8017804:	3710      	adds	r7, #16
 8017806:	46bd      	mov	sp, r7
 8017808:	bd80      	pop	{r7, pc}

0801780a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801780a:	b580      	push	{r7, lr}
 801780c:	b082      	sub	sp, #8
 801780e:	af00      	add	r7, sp, #0
 8017810:	6078      	str	r0, [r7, #4]
 8017812:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017814:	2180      	movs	r1, #128	; 0x80
 8017816:	6878      	ldr	r0, [r7, #4]
 8017818:	f000 fd44 	bl	80182a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801781c:	2100      	movs	r1, #0
 801781e:	6878      	ldr	r0, [r7, #4]
 8017820:	f000 fd40 	bl	80182a4 <USBD_LL_StallEP>
}
 8017824:	bf00      	nop
 8017826:	3708      	adds	r7, #8
 8017828:	46bd      	mov	sp, r7
 801782a:	bd80      	pop	{r7, pc}

0801782c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801782c:	b580      	push	{r7, lr}
 801782e:	b086      	sub	sp, #24
 8017830:	af00      	add	r7, sp, #0
 8017832:	60f8      	str	r0, [r7, #12]
 8017834:	60b9      	str	r1, [r7, #8]
 8017836:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017838:	2300      	movs	r3, #0
 801783a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d036      	beq.n	80178b0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017846:	6938      	ldr	r0, [r7, #16]
 8017848:	f000 f836 	bl	80178b8 <USBD_GetLen>
 801784c:	4603      	mov	r3, r0
 801784e:	3301      	adds	r3, #1
 8017850:	b29b      	uxth	r3, r3
 8017852:	005b      	lsls	r3, r3, #1
 8017854:	b29a      	uxth	r2, r3
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801785a:	7dfb      	ldrb	r3, [r7, #23]
 801785c:	68ba      	ldr	r2, [r7, #8]
 801785e:	4413      	add	r3, r2
 8017860:	687a      	ldr	r2, [r7, #4]
 8017862:	7812      	ldrb	r2, [r2, #0]
 8017864:	701a      	strb	r2, [r3, #0]
  idx++;
 8017866:	7dfb      	ldrb	r3, [r7, #23]
 8017868:	3301      	adds	r3, #1
 801786a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801786c:	7dfb      	ldrb	r3, [r7, #23]
 801786e:	68ba      	ldr	r2, [r7, #8]
 8017870:	4413      	add	r3, r2
 8017872:	2203      	movs	r2, #3
 8017874:	701a      	strb	r2, [r3, #0]
  idx++;
 8017876:	7dfb      	ldrb	r3, [r7, #23]
 8017878:	3301      	adds	r3, #1
 801787a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801787c:	e013      	b.n	80178a6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801787e:	7dfb      	ldrb	r3, [r7, #23]
 8017880:	68ba      	ldr	r2, [r7, #8]
 8017882:	4413      	add	r3, r2
 8017884:	693a      	ldr	r2, [r7, #16]
 8017886:	7812      	ldrb	r2, [r2, #0]
 8017888:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801788a:	693b      	ldr	r3, [r7, #16]
 801788c:	3301      	adds	r3, #1
 801788e:	613b      	str	r3, [r7, #16]
    idx++;
 8017890:	7dfb      	ldrb	r3, [r7, #23]
 8017892:	3301      	adds	r3, #1
 8017894:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017896:	7dfb      	ldrb	r3, [r7, #23]
 8017898:	68ba      	ldr	r2, [r7, #8]
 801789a:	4413      	add	r3, r2
 801789c:	2200      	movs	r2, #0
 801789e:	701a      	strb	r2, [r3, #0]
    idx++;
 80178a0:	7dfb      	ldrb	r3, [r7, #23]
 80178a2:	3301      	adds	r3, #1
 80178a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80178a6:	693b      	ldr	r3, [r7, #16]
 80178a8:	781b      	ldrb	r3, [r3, #0]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d1e7      	bne.n	801787e <USBD_GetString+0x52>
 80178ae:	e000      	b.n	80178b2 <USBD_GetString+0x86>
    return;
 80178b0:	bf00      	nop
  }
}
 80178b2:	3718      	adds	r7, #24
 80178b4:	46bd      	mov	sp, r7
 80178b6:	bd80      	pop	{r7, pc}

080178b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80178b8:	b480      	push	{r7}
 80178ba:	b085      	sub	sp, #20
 80178bc:	af00      	add	r7, sp, #0
 80178be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80178c0:	2300      	movs	r3, #0
 80178c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80178c8:	e005      	b.n	80178d6 <USBD_GetLen+0x1e>
  {
    len++;
 80178ca:	7bfb      	ldrb	r3, [r7, #15]
 80178cc:	3301      	adds	r3, #1
 80178ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80178d0:	68bb      	ldr	r3, [r7, #8]
 80178d2:	3301      	adds	r3, #1
 80178d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80178d6:	68bb      	ldr	r3, [r7, #8]
 80178d8:	781b      	ldrb	r3, [r3, #0]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d1f5      	bne.n	80178ca <USBD_GetLen+0x12>
  }

  return len;
 80178de:	7bfb      	ldrb	r3, [r7, #15]
}
 80178e0:	4618      	mov	r0, r3
 80178e2:	3714      	adds	r7, #20
 80178e4:	46bd      	mov	sp, r7
 80178e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ea:	4770      	bx	lr

080178ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b084      	sub	sp, #16
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	60f8      	str	r0, [r7, #12]
 80178f4:	60b9      	str	r1, [r7, #8]
 80178f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	2202      	movs	r2, #2
 80178fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	687a      	ldr	r2, [r7, #4]
 8017904:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	687a      	ldr	r2, [r7, #4]
 801790a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	68ba      	ldr	r2, [r7, #8]
 8017910:	2100      	movs	r1, #0
 8017912:	68f8      	ldr	r0, [r7, #12]
 8017914:	f000 fd4f 	bl	80183b6 <USBD_LL_Transmit>

  return USBD_OK;
 8017918:	2300      	movs	r3, #0
}
 801791a:	4618      	mov	r0, r3
 801791c:	3710      	adds	r7, #16
 801791e:	46bd      	mov	sp, r7
 8017920:	bd80      	pop	{r7, pc}

08017922 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017922:	b580      	push	{r7, lr}
 8017924:	b084      	sub	sp, #16
 8017926:	af00      	add	r7, sp, #0
 8017928:	60f8      	str	r0, [r7, #12]
 801792a:	60b9      	str	r1, [r7, #8]
 801792c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	68ba      	ldr	r2, [r7, #8]
 8017932:	2100      	movs	r1, #0
 8017934:	68f8      	ldr	r0, [r7, #12]
 8017936:	f000 fd3e 	bl	80183b6 <USBD_LL_Transmit>

  return USBD_OK;
 801793a:	2300      	movs	r3, #0
}
 801793c:	4618      	mov	r0, r3
 801793e:	3710      	adds	r7, #16
 8017940:	46bd      	mov	sp, r7
 8017942:	bd80      	pop	{r7, pc}

08017944 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017944:	b580      	push	{r7, lr}
 8017946:	b084      	sub	sp, #16
 8017948:	af00      	add	r7, sp, #0
 801794a:	60f8      	str	r0, [r7, #12]
 801794c:	60b9      	str	r1, [r7, #8]
 801794e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	2203      	movs	r2, #3
 8017954:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	687a      	ldr	r2, [r7, #4]
 801795c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	687a      	ldr	r2, [r7, #4]
 8017964:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	68ba      	ldr	r2, [r7, #8]
 801796c:	2100      	movs	r1, #0
 801796e:	68f8      	ldr	r0, [r7, #12]
 8017970:	f000 fd42 	bl	80183f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017974:	2300      	movs	r3, #0
}
 8017976:	4618      	mov	r0, r3
 8017978:	3710      	adds	r7, #16
 801797a:	46bd      	mov	sp, r7
 801797c:	bd80      	pop	{r7, pc}

0801797e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801797e:	b580      	push	{r7, lr}
 8017980:	b084      	sub	sp, #16
 8017982:	af00      	add	r7, sp, #0
 8017984:	60f8      	str	r0, [r7, #12]
 8017986:	60b9      	str	r1, [r7, #8]
 8017988:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	68ba      	ldr	r2, [r7, #8]
 801798e:	2100      	movs	r1, #0
 8017990:	68f8      	ldr	r0, [r7, #12]
 8017992:	f000 fd31 	bl	80183f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017996:	2300      	movs	r3, #0
}
 8017998:	4618      	mov	r0, r3
 801799a:	3710      	adds	r7, #16
 801799c:	46bd      	mov	sp, r7
 801799e:	bd80      	pop	{r7, pc}

080179a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b082      	sub	sp, #8
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	2204      	movs	r2, #4
 80179ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80179b0:	2300      	movs	r3, #0
 80179b2:	2200      	movs	r2, #0
 80179b4:	2100      	movs	r1, #0
 80179b6:	6878      	ldr	r0, [r7, #4]
 80179b8:	f000 fcfd 	bl	80183b6 <USBD_LL_Transmit>

  return USBD_OK;
 80179bc:	2300      	movs	r3, #0
}
 80179be:	4618      	mov	r0, r3
 80179c0:	3708      	adds	r7, #8
 80179c2:	46bd      	mov	sp, r7
 80179c4:	bd80      	pop	{r7, pc}

080179c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80179c6:	b580      	push	{r7, lr}
 80179c8:	b082      	sub	sp, #8
 80179ca:	af00      	add	r7, sp, #0
 80179cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	2205      	movs	r2, #5
 80179d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80179d6:	2300      	movs	r3, #0
 80179d8:	2200      	movs	r2, #0
 80179da:	2100      	movs	r1, #0
 80179dc:	6878      	ldr	r0, [r7, #4]
 80179de:	f000 fd0b 	bl	80183f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80179e2:	2300      	movs	r3, #0
}
 80179e4:	4618      	mov	r0, r3
 80179e6:	3708      	adds	r7, #8
 80179e8:	46bd      	mov	sp, r7
 80179ea:	bd80      	pop	{r7, pc}

080179ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80179f0:	2200      	movs	r2, #0
 80179f2:	4912      	ldr	r1, [pc, #72]	; (8017a3c <MX_USB_DEVICE_Init+0x50>)
 80179f4:	4812      	ldr	r0, [pc, #72]	; (8017a40 <MX_USB_DEVICE_Init+0x54>)
 80179f6:	f7fe fd01 	bl	80163fc <USBD_Init>
 80179fa:	4603      	mov	r3, r0
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d001      	beq.n	8017a04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017a00:	f7e9 fe3e 	bl	8001680 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017a04:	490f      	ldr	r1, [pc, #60]	; (8017a44 <MX_USB_DEVICE_Init+0x58>)
 8017a06:	480e      	ldr	r0, [pc, #56]	; (8017a40 <MX_USB_DEVICE_Init+0x54>)
 8017a08:	f7fe fd28 	bl	801645c <USBD_RegisterClass>
 8017a0c:	4603      	mov	r3, r0
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d001      	beq.n	8017a16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017a12:	f7e9 fe35 	bl	8001680 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017a16:	490c      	ldr	r1, [pc, #48]	; (8017a48 <MX_USB_DEVICE_Init+0x5c>)
 8017a18:	4809      	ldr	r0, [pc, #36]	; (8017a40 <MX_USB_DEVICE_Init+0x54>)
 8017a1a:	f7fe fc1f 	bl	801625c <USBD_CDC_RegisterInterface>
 8017a1e:	4603      	mov	r3, r0
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d001      	beq.n	8017a28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017a24:	f7e9 fe2c 	bl	8001680 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017a28:	4805      	ldr	r0, [pc, #20]	; (8017a40 <MX_USB_DEVICE_Init+0x54>)
 8017a2a:	f7fe fd4d 	bl	80164c8 <USBD_Start>
 8017a2e:	4603      	mov	r3, r0
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d001      	beq.n	8017a38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017a34:	f7e9 fe24 	bl	8001680 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017a38:	bf00      	nop
 8017a3a:	bd80      	pop	{r7, pc}
 8017a3c:	20000150 	.word	0x20000150
 8017a40:	20005418 	.word	0x20005418
 8017a44:	200000b4 	.word	0x200000b4
 8017a48:	2000013c 	.word	0x2000013c

08017a4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017a50:	2200      	movs	r2, #0
 8017a52:	4905      	ldr	r1, [pc, #20]	; (8017a68 <CDC_Init_FS+0x1c>)
 8017a54:	4805      	ldr	r0, [pc, #20]	; (8017a6c <CDC_Init_FS+0x20>)
 8017a56:	f7fe fc1b 	bl	8016290 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017a5a:	4905      	ldr	r1, [pc, #20]	; (8017a70 <CDC_Init_FS+0x24>)
 8017a5c:	4803      	ldr	r0, [pc, #12]	; (8017a6c <CDC_Init_FS+0x20>)
 8017a5e:	f7fe fc39 	bl	80162d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017a62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017a64:	4618      	mov	r0, r3
 8017a66:	bd80      	pop	{r7, pc}
 8017a68:	20005ef4 	.word	0x20005ef4
 8017a6c:	20005418 	.word	0x20005418
 8017a70:	200056f4 	.word	0x200056f4

08017a74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017a74:	b480      	push	{r7}
 8017a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017a78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	46bd      	mov	sp, r7
 8017a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a82:	4770      	bx	lr

08017a84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017a84:	b480      	push	{r7}
 8017a86:	b083      	sub	sp, #12
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	4603      	mov	r3, r0
 8017a8c:	6039      	str	r1, [r7, #0]
 8017a8e:	71fb      	strb	r3, [r7, #7]
 8017a90:	4613      	mov	r3, r2
 8017a92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017a94:	79fb      	ldrb	r3, [r7, #7]
 8017a96:	2b23      	cmp	r3, #35	; 0x23
 8017a98:	f200 80a3 	bhi.w	8017be2 <CDC_Control_FS+0x15e>
 8017a9c:	a201      	add	r2, pc, #4	; (adr r2, 8017aa4 <CDC_Control_FS+0x20>)
 8017a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017aa2:	bf00      	nop
 8017aa4:	08017be3 	.word	0x08017be3
 8017aa8:	08017be3 	.word	0x08017be3
 8017aac:	08017be3 	.word	0x08017be3
 8017ab0:	08017be3 	.word	0x08017be3
 8017ab4:	08017be3 	.word	0x08017be3
 8017ab8:	08017be3 	.word	0x08017be3
 8017abc:	08017be3 	.word	0x08017be3
 8017ac0:	08017be3 	.word	0x08017be3
 8017ac4:	08017be3 	.word	0x08017be3
 8017ac8:	08017be3 	.word	0x08017be3
 8017acc:	08017be3 	.word	0x08017be3
 8017ad0:	08017be3 	.word	0x08017be3
 8017ad4:	08017be3 	.word	0x08017be3
 8017ad8:	08017be3 	.word	0x08017be3
 8017adc:	08017be3 	.word	0x08017be3
 8017ae0:	08017be3 	.word	0x08017be3
 8017ae4:	08017be3 	.word	0x08017be3
 8017ae8:	08017be3 	.word	0x08017be3
 8017aec:	08017be3 	.word	0x08017be3
 8017af0:	08017be3 	.word	0x08017be3
 8017af4:	08017be3 	.word	0x08017be3
 8017af8:	08017be3 	.word	0x08017be3
 8017afc:	08017be3 	.word	0x08017be3
 8017b00:	08017be3 	.word	0x08017be3
 8017b04:	08017be3 	.word	0x08017be3
 8017b08:	08017be3 	.word	0x08017be3
 8017b0c:	08017be3 	.word	0x08017be3
 8017b10:	08017be3 	.word	0x08017be3
 8017b14:	08017be3 	.word	0x08017be3
 8017b18:	08017be3 	.word	0x08017be3
 8017b1c:	08017be3 	.word	0x08017be3
 8017b20:	08017be3 	.word	0x08017be3
 8017b24:	08017b35 	.word	0x08017b35
 8017b28:	08017b8f 	.word	0x08017b8f
 8017b2c:	08017be3 	.word	0x08017be3
 8017b30:	08017be3 	.word	0x08017be3
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	Linecoding.bitrate = (uint32_t)(pbuf[0]);
 8017b34:	683b      	ldr	r3, [r7, #0]
 8017b36:	781b      	ldrb	r3, [r3, #0]
 8017b38:	461a      	mov	r2, r3
 8017b3a:	4b2e      	ldr	r3, [pc, #184]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017b3c:	601a      	str	r2, [r3, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 8017b3e:	4b2d      	ldr	r3, [pc, #180]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	683a      	ldr	r2, [r7, #0]
 8017b44:	3201      	adds	r2, #1
 8017b46:	7812      	ldrb	r2, [r2, #0]
 8017b48:	0212      	lsls	r2, r2, #8
 8017b4a:	4313      	orrs	r3, r2
 8017b4c:	4a29      	ldr	r2, [pc, #164]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017b4e:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 8017b50:	4b28      	ldr	r3, [pc, #160]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	683a      	ldr	r2, [r7, #0]
 8017b56:	3202      	adds	r2, #2
 8017b58:	7812      	ldrb	r2, [r2, #0]
 8017b5a:	0412      	lsls	r2, r2, #16
 8017b5c:	4313      	orrs	r3, r2
 8017b5e:	4a25      	ldr	r2, [pc, #148]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017b60:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 8017b62:	4b24      	ldr	r3, [pc, #144]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	683a      	ldr	r2, [r7, #0]
 8017b68:	3203      	adds	r2, #3
 8017b6a:	7812      	ldrb	r2, [r2, #0]
 8017b6c:	0612      	lsls	r2, r2, #24
 8017b6e:	4313      	orrs	r3, r2
 8017b70:	4a20      	ldr	r2, [pc, #128]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017b72:	6013      	str	r3, [r2, #0]
    	Linecoding.format = pbuf[4];
 8017b74:	683b      	ldr	r3, [r7, #0]
 8017b76:	791a      	ldrb	r2, [r3, #4]
 8017b78:	4b1e      	ldr	r3, [pc, #120]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017b7a:	711a      	strb	r2, [r3, #4]
    	Linecoding.paritytype = pbuf[5];
 8017b7c:	683b      	ldr	r3, [r7, #0]
 8017b7e:	795a      	ldrb	r2, [r3, #5]
 8017b80:	4b1c      	ldr	r3, [pc, #112]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017b82:	715a      	strb	r2, [r3, #5]
    	Linecoding.datatype = pbuf[6];
 8017b84:	683b      	ldr	r3, [r7, #0]
 8017b86:	799a      	ldrb	r2, [r3, #6]
 8017b88:	4b1a      	ldr	r3, [pc, #104]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017b8a:	719a      	strb	r2, [r3, #6]
    break;
 8017b8c:	e02a      	b.n	8017be4 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(Linecoding.bitrate);
 8017b8e:	4b19      	ldr	r3, [pc, #100]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	b2da      	uxtb	r2, r3
 8017b94:	683b      	ldr	r3, [r7, #0]
 8017b96:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(Linecoding.bitrate>>8);
 8017b98:	4b16      	ldr	r3, [pc, #88]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	0a1a      	lsrs	r2, r3, #8
 8017b9e:	683b      	ldr	r3, [r7, #0]
 8017ba0:	3301      	adds	r3, #1
 8017ba2:	b2d2      	uxtb	r2, r2
 8017ba4:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(Linecoding.bitrate>>16);
 8017ba6:	4b13      	ldr	r3, [pc, #76]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	0c1a      	lsrs	r2, r3, #16
 8017bac:	683b      	ldr	r3, [r7, #0]
 8017bae:	3302      	adds	r3, #2
 8017bb0:	b2d2      	uxtb	r2, r2
 8017bb2:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(Linecoding.bitrate>>24);
 8017bb4:	4b0f      	ldr	r3, [pc, #60]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	0e1a      	lsrs	r2, r3, #24
 8017bba:	683b      	ldr	r3, [r7, #0]
 8017bbc:	3303      	adds	r3, #3
 8017bbe:	b2d2      	uxtb	r2, r2
 8017bc0:	701a      	strb	r2, [r3, #0]
      pbuf[4] = Linecoding.format;
 8017bc2:	683b      	ldr	r3, [r7, #0]
 8017bc4:	3304      	adds	r3, #4
 8017bc6:	4a0b      	ldr	r2, [pc, #44]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017bc8:	7912      	ldrb	r2, [r2, #4]
 8017bca:	701a      	strb	r2, [r3, #0]
      pbuf[5] = Linecoding.paritytype;
 8017bcc:	683b      	ldr	r3, [r7, #0]
 8017bce:	3305      	adds	r3, #5
 8017bd0:	4a08      	ldr	r2, [pc, #32]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017bd2:	7952      	ldrb	r2, [r2, #5]
 8017bd4:	701a      	strb	r2, [r3, #0]
      pbuf[6] = Linecoding.datatype;
 8017bd6:	683b      	ldr	r3, [r7, #0]
 8017bd8:	3306      	adds	r3, #6
 8017bda:	4a06      	ldr	r2, [pc, #24]	; (8017bf4 <CDC_Control_FS+0x170>)
 8017bdc:	7992      	ldrb	r2, [r2, #6]
 8017bde:	701a      	strb	r2, [r3, #0]
    break;
 8017be0:	e000      	b.n	8017be4 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017be2:	bf00      	nop
  }

  return (USBD_OK);
 8017be4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017be6:	4618      	mov	r0, r3
 8017be8:	370c      	adds	r7, #12
 8017bea:	46bd      	mov	sp, r7
 8017bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf0:	4770      	bx	lr
 8017bf2:	bf00      	nop
 8017bf4:	20000134 	.word	0x20000134

08017bf8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	b084      	sub	sp, #16
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	6078      	str	r0, [r7, #4]
 8017c00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017c02:	6879      	ldr	r1, [r7, #4]
 8017c04:	480e      	ldr	r0, [pc, #56]	; (8017c40 <CDC_Receive_FS+0x48>)
 8017c06:	f7fe fb65 	bl	80162d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017c0a:	480d      	ldr	r0, [pc, #52]	; (8017c40 <CDC_Receive_FS+0x48>)
 8017c0c:	f7fe fbc0 	bl	8016390 <USBD_CDC_ReceivePacket>

  for(int i=0; i<*Len; i++)
 8017c10:	2300      	movs	r3, #0
 8017c12:	60fb      	str	r3, [r7, #12]
 8017c14:	e009      	b.n	8017c2a <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	687a      	ldr	r2, [r7, #4]
 8017c1a:	4413      	add	r3, r2
 8017c1c:	781b      	ldrb	r3, [r3, #0]
 8017c1e:	4618      	mov	r0, r3
 8017c20:	f7ea fd96 	bl	8002750 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	3301      	adds	r3, #1
 8017c28:	60fb      	str	r3, [r7, #12]
 8017c2a:	683b      	ldr	r3, [r7, #0]
 8017c2c:	681a      	ldr	r2, [r3, #0]
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	429a      	cmp	r2, r3
 8017c32:	d8f0      	bhi.n	8017c16 <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 8017c34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017c36:	4618      	mov	r0, r3
 8017c38:	3710      	adds	r7, #16
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd80      	pop	{r7, pc}
 8017c3e:	bf00      	nop
 8017c40:	20005418 	.word	0x20005418

08017c44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b084      	sub	sp, #16
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
 8017c4c:	460b      	mov	r3, r1
 8017c4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017c50:	2300      	movs	r3, #0
 8017c52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017c54:	4b0d      	ldr	r3, [pc, #52]	; (8017c8c <CDC_Transmit_FS+0x48>)
 8017c56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017c5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017c5c:	68bb      	ldr	r3, [r7, #8]
 8017c5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d001      	beq.n	8017c6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8017c66:	2301      	movs	r3, #1
 8017c68:	e00b      	b.n	8017c82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8017c6a:	887b      	ldrh	r3, [r7, #2]
 8017c6c:	461a      	mov	r2, r3
 8017c6e:	6879      	ldr	r1, [r7, #4]
 8017c70:	4806      	ldr	r0, [pc, #24]	; (8017c8c <CDC_Transmit_FS+0x48>)
 8017c72:	f7fe fb0d 	bl	8016290 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8017c76:	4805      	ldr	r0, [pc, #20]	; (8017c8c <CDC_Transmit_FS+0x48>)
 8017c78:	f7fe fb4a 	bl	8016310 <USBD_CDC_TransmitPacket>
 8017c7c:	4603      	mov	r3, r0
 8017c7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8017c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c82:	4618      	mov	r0, r3
 8017c84:	3710      	adds	r7, #16
 8017c86:	46bd      	mov	sp, r7
 8017c88:	bd80      	pop	{r7, pc}
 8017c8a:	bf00      	nop
 8017c8c:	20005418 	.word	0x20005418

08017c90 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017c90:	b480      	push	{r7}
 8017c92:	b087      	sub	sp, #28
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	60f8      	str	r0, [r7, #12]
 8017c98:	60b9      	str	r1, [r7, #8]
 8017c9a:	4613      	mov	r3, r2
 8017c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017ca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017ca6:	4618      	mov	r0, r3
 8017ca8:	371c      	adds	r7, #28
 8017caa:	46bd      	mov	sp, r7
 8017cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb0:	4770      	bx	lr
	...

08017cb4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017cb4:	b480      	push	{r7}
 8017cb6:	b083      	sub	sp, #12
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	4603      	mov	r3, r0
 8017cbc:	6039      	str	r1, [r7, #0]
 8017cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017cc0:	683b      	ldr	r3, [r7, #0]
 8017cc2:	2212      	movs	r2, #18
 8017cc4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017cc6:	4b03      	ldr	r3, [pc, #12]	; (8017cd4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017cc8:	4618      	mov	r0, r3
 8017cca:	370c      	adds	r7, #12
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd2:	4770      	bx	lr
 8017cd4:	2000016c 	.word	0x2000016c

08017cd8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017cd8:	b480      	push	{r7}
 8017cda:	b083      	sub	sp, #12
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	4603      	mov	r3, r0
 8017ce0:	6039      	str	r1, [r7, #0]
 8017ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017ce4:	683b      	ldr	r3, [r7, #0]
 8017ce6:	2204      	movs	r2, #4
 8017ce8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017cea:	4b03      	ldr	r3, [pc, #12]	; (8017cf8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017cec:	4618      	mov	r0, r3
 8017cee:	370c      	adds	r7, #12
 8017cf0:	46bd      	mov	sp, r7
 8017cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf6:	4770      	bx	lr
 8017cf8:	20000180 	.word	0x20000180

08017cfc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b082      	sub	sp, #8
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	4603      	mov	r3, r0
 8017d04:	6039      	str	r1, [r7, #0]
 8017d06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017d08:	79fb      	ldrb	r3, [r7, #7]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d105      	bne.n	8017d1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017d0e:	683a      	ldr	r2, [r7, #0]
 8017d10:	4907      	ldr	r1, [pc, #28]	; (8017d30 <USBD_FS_ProductStrDescriptor+0x34>)
 8017d12:	4808      	ldr	r0, [pc, #32]	; (8017d34 <USBD_FS_ProductStrDescriptor+0x38>)
 8017d14:	f7ff fd8a 	bl	801782c <USBD_GetString>
 8017d18:	e004      	b.n	8017d24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017d1a:	683a      	ldr	r2, [r7, #0]
 8017d1c:	4904      	ldr	r1, [pc, #16]	; (8017d30 <USBD_FS_ProductStrDescriptor+0x34>)
 8017d1e:	4805      	ldr	r0, [pc, #20]	; (8017d34 <USBD_FS_ProductStrDescriptor+0x38>)
 8017d20:	f7ff fd84 	bl	801782c <USBD_GetString>
  }
  return USBD_StrDesc;
 8017d24:	4b02      	ldr	r3, [pc, #8]	; (8017d30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017d26:	4618      	mov	r0, r3
 8017d28:	3708      	adds	r7, #8
 8017d2a:	46bd      	mov	sp, r7
 8017d2c:	bd80      	pop	{r7, pc}
 8017d2e:	bf00      	nop
 8017d30:	200066f4 	.word	0x200066f4
 8017d34:	0801c474 	.word	0x0801c474

08017d38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b082      	sub	sp, #8
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	4603      	mov	r3, r0
 8017d40:	6039      	str	r1, [r7, #0]
 8017d42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017d44:	683a      	ldr	r2, [r7, #0]
 8017d46:	4904      	ldr	r1, [pc, #16]	; (8017d58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017d48:	4804      	ldr	r0, [pc, #16]	; (8017d5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017d4a:	f7ff fd6f 	bl	801782c <USBD_GetString>
  return USBD_StrDesc;
 8017d4e:	4b02      	ldr	r3, [pc, #8]	; (8017d58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017d50:	4618      	mov	r0, r3
 8017d52:	3708      	adds	r7, #8
 8017d54:	46bd      	mov	sp, r7
 8017d56:	bd80      	pop	{r7, pc}
 8017d58:	200066f4 	.word	0x200066f4
 8017d5c:	0801c48c 	.word	0x0801c48c

08017d60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b082      	sub	sp, #8
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	4603      	mov	r3, r0
 8017d68:	6039      	str	r1, [r7, #0]
 8017d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017d6c:	683b      	ldr	r3, [r7, #0]
 8017d6e:	221a      	movs	r2, #26
 8017d70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017d72:	f000 f843 	bl	8017dfc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017d76:	4b02      	ldr	r3, [pc, #8]	; (8017d80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017d78:	4618      	mov	r0, r3
 8017d7a:	3708      	adds	r7, #8
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	bd80      	pop	{r7, pc}
 8017d80:	20000184 	.word	0x20000184

08017d84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d84:	b580      	push	{r7, lr}
 8017d86:	b082      	sub	sp, #8
 8017d88:	af00      	add	r7, sp, #0
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	6039      	str	r1, [r7, #0]
 8017d8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017d90:	79fb      	ldrb	r3, [r7, #7]
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d105      	bne.n	8017da2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017d96:	683a      	ldr	r2, [r7, #0]
 8017d98:	4907      	ldr	r1, [pc, #28]	; (8017db8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017d9a:	4808      	ldr	r0, [pc, #32]	; (8017dbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8017d9c:	f7ff fd46 	bl	801782c <USBD_GetString>
 8017da0:	e004      	b.n	8017dac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017da2:	683a      	ldr	r2, [r7, #0]
 8017da4:	4904      	ldr	r1, [pc, #16]	; (8017db8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017da6:	4805      	ldr	r0, [pc, #20]	; (8017dbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8017da8:	f7ff fd40 	bl	801782c <USBD_GetString>
  }
  return USBD_StrDesc;
 8017dac:	4b02      	ldr	r3, [pc, #8]	; (8017db8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017dae:	4618      	mov	r0, r3
 8017db0:	3708      	adds	r7, #8
 8017db2:	46bd      	mov	sp, r7
 8017db4:	bd80      	pop	{r7, pc}
 8017db6:	bf00      	nop
 8017db8:	200066f4 	.word	0x200066f4
 8017dbc:	0801c4a0 	.word	0x0801c4a0

08017dc0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b082      	sub	sp, #8
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	4603      	mov	r3, r0
 8017dc8:	6039      	str	r1, [r7, #0]
 8017dca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017dcc:	79fb      	ldrb	r3, [r7, #7]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d105      	bne.n	8017dde <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017dd2:	683a      	ldr	r2, [r7, #0]
 8017dd4:	4907      	ldr	r1, [pc, #28]	; (8017df4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017dd6:	4808      	ldr	r0, [pc, #32]	; (8017df8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017dd8:	f7ff fd28 	bl	801782c <USBD_GetString>
 8017ddc:	e004      	b.n	8017de8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017dde:	683a      	ldr	r2, [r7, #0]
 8017de0:	4904      	ldr	r1, [pc, #16]	; (8017df4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017de2:	4805      	ldr	r0, [pc, #20]	; (8017df8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017de4:	f7ff fd22 	bl	801782c <USBD_GetString>
  }
  return USBD_StrDesc;
 8017de8:	4b02      	ldr	r3, [pc, #8]	; (8017df4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017dea:	4618      	mov	r0, r3
 8017dec:	3708      	adds	r7, #8
 8017dee:	46bd      	mov	sp, r7
 8017df0:	bd80      	pop	{r7, pc}
 8017df2:	bf00      	nop
 8017df4:	200066f4 	.word	0x200066f4
 8017df8:	0801c4ac 	.word	0x0801c4ac

08017dfc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	b084      	sub	sp, #16
 8017e00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017e02:	4b0f      	ldr	r3, [pc, #60]	; (8017e40 <Get_SerialNum+0x44>)
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017e08:	4b0e      	ldr	r3, [pc, #56]	; (8017e44 <Get_SerialNum+0x48>)
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017e0e:	4b0e      	ldr	r3, [pc, #56]	; (8017e48 <Get_SerialNum+0x4c>)
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017e14:	68fa      	ldr	r2, [r7, #12]
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	4413      	add	r3, r2
 8017e1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d009      	beq.n	8017e36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017e22:	2208      	movs	r2, #8
 8017e24:	4909      	ldr	r1, [pc, #36]	; (8017e4c <Get_SerialNum+0x50>)
 8017e26:	68f8      	ldr	r0, [r7, #12]
 8017e28:	f000 f814 	bl	8017e54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017e2c:	2204      	movs	r2, #4
 8017e2e:	4908      	ldr	r1, [pc, #32]	; (8017e50 <Get_SerialNum+0x54>)
 8017e30:	68b8      	ldr	r0, [r7, #8]
 8017e32:	f000 f80f 	bl	8017e54 <IntToUnicode>
  }
}
 8017e36:	bf00      	nop
 8017e38:	3710      	adds	r7, #16
 8017e3a:	46bd      	mov	sp, r7
 8017e3c:	bd80      	pop	{r7, pc}
 8017e3e:	bf00      	nop
 8017e40:	1fff7a10 	.word	0x1fff7a10
 8017e44:	1fff7a14 	.word	0x1fff7a14
 8017e48:	1fff7a18 	.word	0x1fff7a18
 8017e4c:	20000186 	.word	0x20000186
 8017e50:	20000196 	.word	0x20000196

08017e54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017e54:	b480      	push	{r7}
 8017e56:	b087      	sub	sp, #28
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	60f8      	str	r0, [r7, #12]
 8017e5c:	60b9      	str	r1, [r7, #8]
 8017e5e:	4613      	mov	r3, r2
 8017e60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017e62:	2300      	movs	r3, #0
 8017e64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017e66:	2300      	movs	r3, #0
 8017e68:	75fb      	strb	r3, [r7, #23]
 8017e6a:	e027      	b.n	8017ebc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	0f1b      	lsrs	r3, r3, #28
 8017e70:	2b09      	cmp	r3, #9
 8017e72:	d80b      	bhi.n	8017e8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	0f1b      	lsrs	r3, r3, #28
 8017e78:	b2da      	uxtb	r2, r3
 8017e7a:	7dfb      	ldrb	r3, [r7, #23]
 8017e7c:	005b      	lsls	r3, r3, #1
 8017e7e:	4619      	mov	r1, r3
 8017e80:	68bb      	ldr	r3, [r7, #8]
 8017e82:	440b      	add	r3, r1
 8017e84:	3230      	adds	r2, #48	; 0x30
 8017e86:	b2d2      	uxtb	r2, r2
 8017e88:	701a      	strb	r2, [r3, #0]
 8017e8a:	e00a      	b.n	8017ea2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	0f1b      	lsrs	r3, r3, #28
 8017e90:	b2da      	uxtb	r2, r3
 8017e92:	7dfb      	ldrb	r3, [r7, #23]
 8017e94:	005b      	lsls	r3, r3, #1
 8017e96:	4619      	mov	r1, r3
 8017e98:	68bb      	ldr	r3, [r7, #8]
 8017e9a:	440b      	add	r3, r1
 8017e9c:	3237      	adds	r2, #55	; 0x37
 8017e9e:	b2d2      	uxtb	r2, r2
 8017ea0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	011b      	lsls	r3, r3, #4
 8017ea6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017ea8:	7dfb      	ldrb	r3, [r7, #23]
 8017eaa:	005b      	lsls	r3, r3, #1
 8017eac:	3301      	adds	r3, #1
 8017eae:	68ba      	ldr	r2, [r7, #8]
 8017eb0:	4413      	add	r3, r2
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017eb6:	7dfb      	ldrb	r3, [r7, #23]
 8017eb8:	3301      	adds	r3, #1
 8017eba:	75fb      	strb	r3, [r7, #23]
 8017ebc:	7dfa      	ldrb	r2, [r7, #23]
 8017ebe:	79fb      	ldrb	r3, [r7, #7]
 8017ec0:	429a      	cmp	r2, r3
 8017ec2:	d3d3      	bcc.n	8017e6c <IntToUnicode+0x18>
  }
}
 8017ec4:	bf00      	nop
 8017ec6:	bf00      	nop
 8017ec8:	371c      	adds	r7, #28
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed0:	4770      	bx	lr
	...

08017ed4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b08a      	sub	sp, #40	; 0x28
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017edc:	f107 0314 	add.w	r3, r7, #20
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	601a      	str	r2, [r3, #0]
 8017ee4:	605a      	str	r2, [r3, #4]
 8017ee6:	609a      	str	r2, [r3, #8]
 8017ee8:	60da      	str	r2, [r3, #12]
 8017eea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017ef4:	d13a      	bne.n	8017f6c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017ef6:	2300      	movs	r3, #0
 8017ef8:	613b      	str	r3, [r7, #16]
 8017efa:	4b1e      	ldr	r3, [pc, #120]	; (8017f74 <HAL_PCD_MspInit+0xa0>)
 8017efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017efe:	4a1d      	ldr	r2, [pc, #116]	; (8017f74 <HAL_PCD_MspInit+0xa0>)
 8017f00:	f043 0301 	orr.w	r3, r3, #1
 8017f04:	6313      	str	r3, [r2, #48]	; 0x30
 8017f06:	4b1b      	ldr	r3, [pc, #108]	; (8017f74 <HAL_PCD_MspInit+0xa0>)
 8017f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f0a:	f003 0301 	and.w	r3, r3, #1
 8017f0e:	613b      	str	r3, [r7, #16]
 8017f10:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017f12:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017f18:	2302      	movs	r3, #2
 8017f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017f20:	2303      	movs	r3, #3
 8017f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017f24:	230a      	movs	r3, #10
 8017f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017f28:	f107 0314 	add.w	r3, r7, #20
 8017f2c:	4619      	mov	r1, r3
 8017f2e:	4812      	ldr	r0, [pc, #72]	; (8017f78 <HAL_PCD_MspInit+0xa4>)
 8017f30:	f7f0 fa78 	bl	8008424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017f34:	4b0f      	ldr	r3, [pc, #60]	; (8017f74 <HAL_PCD_MspInit+0xa0>)
 8017f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f38:	4a0e      	ldr	r2, [pc, #56]	; (8017f74 <HAL_PCD_MspInit+0xa0>)
 8017f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f3e:	6353      	str	r3, [r2, #52]	; 0x34
 8017f40:	2300      	movs	r3, #0
 8017f42:	60fb      	str	r3, [r7, #12]
 8017f44:	4b0b      	ldr	r3, [pc, #44]	; (8017f74 <HAL_PCD_MspInit+0xa0>)
 8017f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f48:	4a0a      	ldr	r2, [pc, #40]	; (8017f74 <HAL_PCD_MspInit+0xa0>)
 8017f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017f4e:	6453      	str	r3, [r2, #68]	; 0x44
 8017f50:	4b08      	ldr	r3, [pc, #32]	; (8017f74 <HAL_PCD_MspInit+0xa0>)
 8017f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017f58:	60fb      	str	r3, [r7, #12]
 8017f5a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	2106      	movs	r1, #6
 8017f60:	2043      	movs	r0, #67	; 0x43
 8017f62:	f7ef fb28 	bl	80075b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017f66:	2043      	movs	r0, #67	; 0x43
 8017f68:	f7ef fb41 	bl	80075ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017f6c:	bf00      	nop
 8017f6e:	3728      	adds	r7, #40	; 0x28
 8017f70:	46bd      	mov	sp, r7
 8017f72:	bd80      	pop	{r7, pc}
 8017f74:	40023800 	.word	0x40023800
 8017f78:	40020000 	.word	0x40020000

08017f7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b082      	sub	sp, #8
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8017f90:	4619      	mov	r1, r3
 8017f92:	4610      	mov	r0, r2
 8017f94:	f7fe fae5 	bl	8016562 <USBD_LL_SetupStage>
}
 8017f98:	bf00      	nop
 8017f9a:	3708      	adds	r7, #8
 8017f9c:	46bd      	mov	sp, r7
 8017f9e:	bd80      	pop	{r7, pc}

08017fa0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b082      	sub	sp, #8
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
 8017fa8:	460b      	mov	r3, r1
 8017faa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8017fb2:	78fa      	ldrb	r2, [r7, #3]
 8017fb4:	6879      	ldr	r1, [r7, #4]
 8017fb6:	4613      	mov	r3, r2
 8017fb8:	00db      	lsls	r3, r3, #3
 8017fba:	4413      	add	r3, r2
 8017fbc:	009b      	lsls	r3, r3, #2
 8017fbe:	440b      	add	r3, r1
 8017fc0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8017fc4:	681a      	ldr	r2, [r3, #0]
 8017fc6:	78fb      	ldrb	r3, [r7, #3]
 8017fc8:	4619      	mov	r1, r3
 8017fca:	f7fe fb1f 	bl	801660c <USBD_LL_DataOutStage>
}
 8017fce:	bf00      	nop
 8017fd0:	3708      	adds	r7, #8
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	bd80      	pop	{r7, pc}

08017fd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fd6:	b580      	push	{r7, lr}
 8017fd8:	b082      	sub	sp, #8
 8017fda:	af00      	add	r7, sp, #0
 8017fdc:	6078      	str	r0, [r7, #4]
 8017fde:	460b      	mov	r3, r1
 8017fe0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8017fe8:	78fa      	ldrb	r2, [r7, #3]
 8017fea:	6879      	ldr	r1, [r7, #4]
 8017fec:	4613      	mov	r3, r2
 8017fee:	00db      	lsls	r3, r3, #3
 8017ff0:	4413      	add	r3, r2
 8017ff2:	009b      	lsls	r3, r3, #2
 8017ff4:	440b      	add	r3, r1
 8017ff6:	3320      	adds	r3, #32
 8017ff8:	681a      	ldr	r2, [r3, #0]
 8017ffa:	78fb      	ldrb	r3, [r7, #3]
 8017ffc:	4619      	mov	r1, r3
 8017ffe:	f7fe fbb8 	bl	8016772 <USBD_LL_DataInStage>
}
 8018002:	bf00      	nop
 8018004:	3708      	adds	r7, #8
 8018006:	46bd      	mov	sp, r7
 8018008:	bd80      	pop	{r7, pc}

0801800a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801800a:	b580      	push	{r7, lr}
 801800c:	b082      	sub	sp, #8
 801800e:	af00      	add	r7, sp, #0
 8018010:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8018018:	4618      	mov	r0, r3
 801801a:	f7fe fcf2 	bl	8016a02 <USBD_LL_SOF>
}
 801801e:	bf00      	nop
 8018020:	3708      	adds	r7, #8
 8018022:	46bd      	mov	sp, r7
 8018024:	bd80      	pop	{r7, pc}

08018026 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018026:	b580      	push	{r7, lr}
 8018028:	b084      	sub	sp, #16
 801802a:	af00      	add	r7, sp, #0
 801802c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801802e:	2301      	movs	r3, #1
 8018030:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	79db      	ldrb	r3, [r3, #7]
 8018036:	2b02      	cmp	r3, #2
 8018038:	d001      	beq.n	801803e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801803a:	f7e9 fb21 	bl	8001680 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8018044:	7bfa      	ldrb	r2, [r7, #15]
 8018046:	4611      	mov	r1, r2
 8018048:	4618      	mov	r0, r3
 801804a:	f7fe fc96 	bl	801697a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8018054:	4618      	mov	r0, r3
 8018056:	f7fe fc3e 	bl	80168d6 <USBD_LL_Reset>
}
 801805a:	bf00      	nop
 801805c:	3710      	adds	r7, #16
 801805e:	46bd      	mov	sp, r7
 8018060:	bd80      	pop	{r7, pc}
	...

08018064 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b082      	sub	sp, #8
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8018072:	4618      	mov	r0, r3
 8018074:	f7fe fc91 	bl	801699a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	687a      	ldr	r2, [r7, #4]
 8018084:	6812      	ldr	r2, [r2, #0]
 8018086:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801808a:	f043 0301 	orr.w	r3, r3, #1
 801808e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	7adb      	ldrb	r3, [r3, #11]
 8018094:	2b00      	cmp	r3, #0
 8018096:	d005      	beq.n	80180a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018098:	4b04      	ldr	r3, [pc, #16]	; (80180ac <HAL_PCD_SuspendCallback+0x48>)
 801809a:	691b      	ldr	r3, [r3, #16]
 801809c:	4a03      	ldr	r2, [pc, #12]	; (80180ac <HAL_PCD_SuspendCallback+0x48>)
 801809e:	f043 0306 	orr.w	r3, r3, #6
 80180a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80180a4:	bf00      	nop
 80180a6:	3708      	adds	r7, #8
 80180a8:	46bd      	mov	sp, r7
 80180aa:	bd80      	pop	{r7, pc}
 80180ac:	e000ed00 	.word	0xe000ed00

080180b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b082      	sub	sp, #8
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80180be:	4618      	mov	r0, r3
 80180c0:	f7fe fc87 	bl	80169d2 <USBD_LL_Resume>
}
 80180c4:	bf00      	nop
 80180c6:	3708      	adds	r7, #8
 80180c8:	46bd      	mov	sp, r7
 80180ca:	bd80      	pop	{r7, pc}

080180cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b082      	sub	sp, #8
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
 80180d4:	460b      	mov	r3, r1
 80180d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80180de:	78fa      	ldrb	r2, [r7, #3]
 80180e0:	4611      	mov	r1, r2
 80180e2:	4618      	mov	r0, r3
 80180e4:	f7fe fcdf 	bl	8016aa6 <USBD_LL_IsoOUTIncomplete>
}
 80180e8:	bf00      	nop
 80180ea:	3708      	adds	r7, #8
 80180ec:	46bd      	mov	sp, r7
 80180ee:	bd80      	pop	{r7, pc}

080180f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b082      	sub	sp, #8
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
 80180f8:	460b      	mov	r3, r1
 80180fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8018102:	78fa      	ldrb	r2, [r7, #3]
 8018104:	4611      	mov	r1, r2
 8018106:	4618      	mov	r0, r3
 8018108:	f7fe fc9b 	bl	8016a42 <USBD_LL_IsoINIncomplete>
}
 801810c:	bf00      	nop
 801810e:	3708      	adds	r7, #8
 8018110:	46bd      	mov	sp, r7
 8018112:	bd80      	pop	{r7, pc}

08018114 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b082      	sub	sp, #8
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8018122:	4618      	mov	r0, r3
 8018124:	f7fe fcf1 	bl	8016b0a <USBD_LL_DevConnected>
}
 8018128:	bf00      	nop
 801812a:	3708      	adds	r7, #8
 801812c:	46bd      	mov	sp, r7
 801812e:	bd80      	pop	{r7, pc}

08018130 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b082      	sub	sp, #8
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801813e:	4618      	mov	r0, r3
 8018140:	f7fe fcee 	bl	8016b20 <USBD_LL_DevDisconnected>
}
 8018144:	bf00      	nop
 8018146:	3708      	adds	r7, #8
 8018148:	46bd      	mov	sp, r7
 801814a:	bd80      	pop	{r7, pc}

0801814c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b082      	sub	sp, #8
 8018150:	af00      	add	r7, sp, #0
 8018152:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	781b      	ldrb	r3, [r3, #0]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d13c      	bne.n	80181d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801815c:	4a20      	ldr	r2, [pc, #128]	; (80181e0 <USBD_LL_Init+0x94>)
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	4a1e      	ldr	r2, [pc, #120]	; (80181e0 <USBD_LL_Init+0x94>)
 8018168:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801816c:	4b1c      	ldr	r3, [pc, #112]	; (80181e0 <USBD_LL_Init+0x94>)
 801816e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018172:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018174:	4b1a      	ldr	r3, [pc, #104]	; (80181e0 <USBD_LL_Init+0x94>)
 8018176:	2204      	movs	r2, #4
 8018178:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801817a:	4b19      	ldr	r3, [pc, #100]	; (80181e0 <USBD_LL_Init+0x94>)
 801817c:	2202      	movs	r2, #2
 801817e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018180:	4b17      	ldr	r3, [pc, #92]	; (80181e0 <USBD_LL_Init+0x94>)
 8018182:	2200      	movs	r2, #0
 8018184:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018186:	4b16      	ldr	r3, [pc, #88]	; (80181e0 <USBD_LL_Init+0x94>)
 8018188:	2202      	movs	r2, #2
 801818a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801818c:	4b14      	ldr	r3, [pc, #80]	; (80181e0 <USBD_LL_Init+0x94>)
 801818e:	2200      	movs	r2, #0
 8018190:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018192:	4b13      	ldr	r3, [pc, #76]	; (80181e0 <USBD_LL_Init+0x94>)
 8018194:	2200      	movs	r2, #0
 8018196:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018198:	4b11      	ldr	r3, [pc, #68]	; (80181e0 <USBD_LL_Init+0x94>)
 801819a:	2200      	movs	r2, #0
 801819c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801819e:	4b10      	ldr	r3, [pc, #64]	; (80181e0 <USBD_LL_Init+0x94>)
 80181a0:	2200      	movs	r2, #0
 80181a2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80181a4:	4b0e      	ldr	r3, [pc, #56]	; (80181e0 <USBD_LL_Init+0x94>)
 80181a6:	2200      	movs	r2, #0
 80181a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80181aa:	480d      	ldr	r0, [pc, #52]	; (80181e0 <USBD_LL_Init+0x94>)
 80181ac:	f7f3 fac8 	bl	800b740 <HAL_PCD_Init>
 80181b0:	4603      	mov	r3, r0
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d001      	beq.n	80181ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80181b6:	f7e9 fa63 	bl	8001680 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80181ba:	2180      	movs	r1, #128	; 0x80
 80181bc:	4808      	ldr	r0, [pc, #32]	; (80181e0 <USBD_LL_Init+0x94>)
 80181be:	f7f4 fcf2 	bl	800cba6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80181c2:	2240      	movs	r2, #64	; 0x40
 80181c4:	2100      	movs	r1, #0
 80181c6:	4806      	ldr	r0, [pc, #24]	; (80181e0 <USBD_LL_Init+0x94>)
 80181c8:	f7f4 fca6 	bl	800cb18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80181cc:	2280      	movs	r2, #128	; 0x80
 80181ce:	2101      	movs	r1, #1
 80181d0:	4803      	ldr	r0, [pc, #12]	; (80181e0 <USBD_LL_Init+0x94>)
 80181d2:	f7f4 fca1 	bl	800cb18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80181d6:	2300      	movs	r3, #0
}
 80181d8:	4618      	mov	r0, r3
 80181da:	3708      	adds	r7, #8
 80181dc:	46bd      	mov	sp, r7
 80181de:	bd80      	pop	{r7, pc}
 80181e0:	200068f4 	.word	0x200068f4

080181e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b084      	sub	sp, #16
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181ec:	2300      	movs	r3, #0
 80181ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80181f0:	2300      	movs	r3, #0
 80181f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80181fa:	4618      	mov	r0, r3
 80181fc:	f7f3 fbaf 	bl	800b95e <HAL_PCD_Start>
 8018200:	4603      	mov	r3, r0
 8018202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018204:	7bfb      	ldrb	r3, [r7, #15]
 8018206:	4618      	mov	r0, r3
 8018208:	f000 f942 	bl	8018490 <USBD_Get_USB_Status>
 801820c:	4603      	mov	r3, r0
 801820e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018210:	7bbb      	ldrb	r3, [r7, #14]
}
 8018212:	4618      	mov	r0, r3
 8018214:	3710      	adds	r7, #16
 8018216:	46bd      	mov	sp, r7
 8018218:	bd80      	pop	{r7, pc}

0801821a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801821a:	b580      	push	{r7, lr}
 801821c:	b084      	sub	sp, #16
 801821e:	af00      	add	r7, sp, #0
 8018220:	6078      	str	r0, [r7, #4]
 8018222:	4608      	mov	r0, r1
 8018224:	4611      	mov	r1, r2
 8018226:	461a      	mov	r2, r3
 8018228:	4603      	mov	r3, r0
 801822a:	70fb      	strb	r3, [r7, #3]
 801822c:	460b      	mov	r3, r1
 801822e:	70bb      	strb	r3, [r7, #2]
 8018230:	4613      	mov	r3, r2
 8018232:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018234:	2300      	movs	r3, #0
 8018236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018238:	2300      	movs	r3, #0
 801823a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018242:	78bb      	ldrb	r3, [r7, #2]
 8018244:	883a      	ldrh	r2, [r7, #0]
 8018246:	78f9      	ldrb	r1, [r7, #3]
 8018248:	f7f4 f883 	bl	800c352 <HAL_PCD_EP_Open>
 801824c:	4603      	mov	r3, r0
 801824e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018250:	7bfb      	ldrb	r3, [r7, #15]
 8018252:	4618      	mov	r0, r3
 8018254:	f000 f91c 	bl	8018490 <USBD_Get_USB_Status>
 8018258:	4603      	mov	r3, r0
 801825a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801825c:	7bbb      	ldrb	r3, [r7, #14]
}
 801825e:	4618      	mov	r0, r3
 8018260:	3710      	adds	r7, #16
 8018262:	46bd      	mov	sp, r7
 8018264:	bd80      	pop	{r7, pc}

08018266 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018266:	b580      	push	{r7, lr}
 8018268:	b084      	sub	sp, #16
 801826a:	af00      	add	r7, sp, #0
 801826c:	6078      	str	r0, [r7, #4]
 801826e:	460b      	mov	r3, r1
 8018270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018272:	2300      	movs	r3, #0
 8018274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018276:	2300      	movs	r3, #0
 8018278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018280:	78fa      	ldrb	r2, [r7, #3]
 8018282:	4611      	mov	r1, r2
 8018284:	4618      	mov	r0, r3
 8018286:	f7f4 f8cc 	bl	800c422 <HAL_PCD_EP_Close>
 801828a:	4603      	mov	r3, r0
 801828c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801828e:	7bfb      	ldrb	r3, [r7, #15]
 8018290:	4618      	mov	r0, r3
 8018292:	f000 f8fd 	bl	8018490 <USBD_Get_USB_Status>
 8018296:	4603      	mov	r3, r0
 8018298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801829a:	7bbb      	ldrb	r3, [r7, #14]
}
 801829c:	4618      	mov	r0, r3
 801829e:	3710      	adds	r7, #16
 80182a0:	46bd      	mov	sp, r7
 80182a2:	bd80      	pop	{r7, pc}

080182a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b084      	sub	sp, #16
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
 80182ac:	460b      	mov	r3, r1
 80182ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182b0:	2300      	movs	r3, #0
 80182b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182b4:	2300      	movs	r3, #0
 80182b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80182be:	78fa      	ldrb	r2, [r7, #3]
 80182c0:	4611      	mov	r1, r2
 80182c2:	4618      	mov	r0, r3
 80182c4:	f7f4 f984 	bl	800c5d0 <HAL_PCD_EP_SetStall>
 80182c8:	4603      	mov	r3, r0
 80182ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182cc:	7bfb      	ldrb	r3, [r7, #15]
 80182ce:	4618      	mov	r0, r3
 80182d0:	f000 f8de 	bl	8018490 <USBD_Get_USB_Status>
 80182d4:	4603      	mov	r3, r0
 80182d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80182da:	4618      	mov	r0, r3
 80182dc:	3710      	adds	r7, #16
 80182de:	46bd      	mov	sp, r7
 80182e0:	bd80      	pop	{r7, pc}

080182e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80182e2:	b580      	push	{r7, lr}
 80182e4:	b084      	sub	sp, #16
 80182e6:	af00      	add	r7, sp, #0
 80182e8:	6078      	str	r0, [r7, #4]
 80182ea:	460b      	mov	r3, r1
 80182ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182ee:	2300      	movs	r3, #0
 80182f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182f2:	2300      	movs	r3, #0
 80182f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80182fc:	78fa      	ldrb	r2, [r7, #3]
 80182fe:	4611      	mov	r1, r2
 8018300:	4618      	mov	r0, r3
 8018302:	f7f4 f9c8 	bl	800c696 <HAL_PCD_EP_ClrStall>
 8018306:	4603      	mov	r3, r0
 8018308:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801830a:	7bfb      	ldrb	r3, [r7, #15]
 801830c:	4618      	mov	r0, r3
 801830e:	f000 f8bf 	bl	8018490 <USBD_Get_USB_Status>
 8018312:	4603      	mov	r3, r0
 8018314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018316:	7bbb      	ldrb	r3, [r7, #14]
}
 8018318:	4618      	mov	r0, r3
 801831a:	3710      	adds	r7, #16
 801831c:	46bd      	mov	sp, r7
 801831e:	bd80      	pop	{r7, pc}

08018320 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018320:	b480      	push	{r7}
 8018322:	b085      	sub	sp, #20
 8018324:	af00      	add	r7, sp, #0
 8018326:	6078      	str	r0, [r7, #4]
 8018328:	460b      	mov	r3, r1
 801832a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018332:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018338:	2b00      	cmp	r3, #0
 801833a:	da0b      	bge.n	8018354 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801833c:	78fb      	ldrb	r3, [r7, #3]
 801833e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018342:	68f9      	ldr	r1, [r7, #12]
 8018344:	4613      	mov	r3, r2
 8018346:	00db      	lsls	r3, r3, #3
 8018348:	4413      	add	r3, r2
 801834a:	009b      	lsls	r3, r3, #2
 801834c:	440b      	add	r3, r1
 801834e:	3316      	adds	r3, #22
 8018350:	781b      	ldrb	r3, [r3, #0]
 8018352:	e00b      	b.n	801836c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018354:	78fb      	ldrb	r3, [r7, #3]
 8018356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801835a:	68f9      	ldr	r1, [r7, #12]
 801835c:	4613      	mov	r3, r2
 801835e:	00db      	lsls	r3, r3, #3
 8018360:	4413      	add	r3, r2
 8018362:	009b      	lsls	r3, r3, #2
 8018364:	440b      	add	r3, r1
 8018366:	f203 2356 	addw	r3, r3, #598	; 0x256
 801836a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801836c:	4618      	mov	r0, r3
 801836e:	3714      	adds	r7, #20
 8018370:	46bd      	mov	sp, r7
 8018372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018376:	4770      	bx	lr

08018378 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018378:	b580      	push	{r7, lr}
 801837a:	b084      	sub	sp, #16
 801837c:	af00      	add	r7, sp, #0
 801837e:	6078      	str	r0, [r7, #4]
 8018380:	460b      	mov	r3, r1
 8018382:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018384:	2300      	movs	r3, #0
 8018386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018388:	2300      	movs	r3, #0
 801838a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018392:	78fa      	ldrb	r2, [r7, #3]
 8018394:	4611      	mov	r1, r2
 8018396:	4618      	mov	r0, r3
 8018398:	f7f3 ffb7 	bl	800c30a <HAL_PCD_SetAddress>
 801839c:	4603      	mov	r3, r0
 801839e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80183a0:	7bfb      	ldrb	r3, [r7, #15]
 80183a2:	4618      	mov	r0, r3
 80183a4:	f000 f874 	bl	8018490 <USBD_Get_USB_Status>
 80183a8:	4603      	mov	r3, r0
 80183aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80183ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80183ae:	4618      	mov	r0, r3
 80183b0:	3710      	adds	r7, #16
 80183b2:	46bd      	mov	sp, r7
 80183b4:	bd80      	pop	{r7, pc}

080183b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80183b6:	b580      	push	{r7, lr}
 80183b8:	b086      	sub	sp, #24
 80183ba:	af00      	add	r7, sp, #0
 80183bc:	60f8      	str	r0, [r7, #12]
 80183be:	607a      	str	r2, [r7, #4]
 80183c0:	603b      	str	r3, [r7, #0]
 80183c2:	460b      	mov	r3, r1
 80183c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80183c6:	2300      	movs	r3, #0
 80183c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80183ca:	2300      	movs	r3, #0
 80183cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80183d4:	7af9      	ldrb	r1, [r7, #11]
 80183d6:	683b      	ldr	r3, [r7, #0]
 80183d8:	687a      	ldr	r2, [r7, #4]
 80183da:	f7f4 f8bf 	bl	800c55c <HAL_PCD_EP_Transmit>
 80183de:	4603      	mov	r3, r0
 80183e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80183e2:	7dfb      	ldrb	r3, [r7, #23]
 80183e4:	4618      	mov	r0, r3
 80183e6:	f000 f853 	bl	8018490 <USBD_Get_USB_Status>
 80183ea:	4603      	mov	r3, r0
 80183ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80183ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80183f0:	4618      	mov	r0, r3
 80183f2:	3718      	adds	r7, #24
 80183f4:	46bd      	mov	sp, r7
 80183f6:	bd80      	pop	{r7, pc}

080183f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	b086      	sub	sp, #24
 80183fc:	af00      	add	r7, sp, #0
 80183fe:	60f8      	str	r0, [r7, #12]
 8018400:	607a      	str	r2, [r7, #4]
 8018402:	603b      	str	r3, [r7, #0]
 8018404:	460b      	mov	r3, r1
 8018406:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018408:	2300      	movs	r3, #0
 801840a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801840c:	2300      	movs	r3, #0
 801840e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018416:	7af9      	ldrb	r1, [r7, #11]
 8018418:	683b      	ldr	r3, [r7, #0]
 801841a:	687a      	ldr	r2, [r7, #4]
 801841c:	f7f4 f84b 	bl	800c4b6 <HAL_PCD_EP_Receive>
 8018420:	4603      	mov	r3, r0
 8018422:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018424:	7dfb      	ldrb	r3, [r7, #23]
 8018426:	4618      	mov	r0, r3
 8018428:	f000 f832 	bl	8018490 <USBD_Get_USB_Status>
 801842c:	4603      	mov	r3, r0
 801842e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018430:	7dbb      	ldrb	r3, [r7, #22]
}
 8018432:	4618      	mov	r0, r3
 8018434:	3718      	adds	r7, #24
 8018436:	46bd      	mov	sp, r7
 8018438:	bd80      	pop	{r7, pc}

0801843a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801843a:	b580      	push	{r7, lr}
 801843c:	b082      	sub	sp, #8
 801843e:	af00      	add	r7, sp, #0
 8018440:	6078      	str	r0, [r7, #4]
 8018442:	460b      	mov	r3, r1
 8018444:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801844c:	78fa      	ldrb	r2, [r7, #3]
 801844e:	4611      	mov	r1, r2
 8018450:	4618      	mov	r0, r3
 8018452:	f7f4 f86b 	bl	800c52c <HAL_PCD_EP_GetRxCount>
 8018456:	4603      	mov	r3, r0
}
 8018458:	4618      	mov	r0, r3
 801845a:	3708      	adds	r7, #8
 801845c:	46bd      	mov	sp, r7
 801845e:	bd80      	pop	{r7, pc}

08018460 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018460:	b480      	push	{r7}
 8018462:	b083      	sub	sp, #12
 8018464:	af00      	add	r7, sp, #0
 8018466:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018468:	4b03      	ldr	r3, [pc, #12]	; (8018478 <USBD_static_malloc+0x18>)
}
 801846a:	4618      	mov	r0, r3
 801846c:	370c      	adds	r7, #12
 801846e:	46bd      	mov	sp, r7
 8018470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018474:	4770      	bx	lr
 8018476:	bf00      	nop
 8018478:	20006dd8 	.word	0x20006dd8

0801847c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801847c:	b480      	push	{r7}
 801847e:	b083      	sub	sp, #12
 8018480:	af00      	add	r7, sp, #0
 8018482:	6078      	str	r0, [r7, #4]

}
 8018484:	bf00      	nop
 8018486:	370c      	adds	r7, #12
 8018488:	46bd      	mov	sp, r7
 801848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801848e:	4770      	bx	lr

08018490 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018490:	b480      	push	{r7}
 8018492:	b085      	sub	sp, #20
 8018494:	af00      	add	r7, sp, #0
 8018496:	4603      	mov	r3, r0
 8018498:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801849a:	2300      	movs	r3, #0
 801849c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801849e:	79fb      	ldrb	r3, [r7, #7]
 80184a0:	2b03      	cmp	r3, #3
 80184a2:	d817      	bhi.n	80184d4 <USBD_Get_USB_Status+0x44>
 80184a4:	a201      	add	r2, pc, #4	; (adr r2, 80184ac <USBD_Get_USB_Status+0x1c>)
 80184a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184aa:	bf00      	nop
 80184ac:	080184bd 	.word	0x080184bd
 80184b0:	080184c3 	.word	0x080184c3
 80184b4:	080184c9 	.word	0x080184c9
 80184b8:	080184cf 	.word	0x080184cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80184bc:	2300      	movs	r3, #0
 80184be:	73fb      	strb	r3, [r7, #15]
    break;
 80184c0:	e00b      	b.n	80184da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80184c2:	2303      	movs	r3, #3
 80184c4:	73fb      	strb	r3, [r7, #15]
    break;
 80184c6:	e008      	b.n	80184da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80184c8:	2301      	movs	r3, #1
 80184ca:	73fb      	strb	r3, [r7, #15]
    break;
 80184cc:	e005      	b.n	80184da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80184ce:	2303      	movs	r3, #3
 80184d0:	73fb      	strb	r3, [r7, #15]
    break;
 80184d2:	e002      	b.n	80184da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80184d4:	2303      	movs	r3, #3
 80184d6:	73fb      	strb	r3, [r7, #15]
    break;
 80184d8:	bf00      	nop
  }
  return usb_status;
 80184da:	7bfb      	ldrb	r3, [r7, #15]
}
 80184dc:	4618      	mov	r0, r3
 80184de:	3714      	adds	r7, #20
 80184e0:	46bd      	mov	sp, r7
 80184e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e6:	4770      	bx	lr

080184e8 <malloc>:
 80184e8:	4b02      	ldr	r3, [pc, #8]	; (80184f4 <malloc+0xc>)
 80184ea:	4601      	mov	r1, r0
 80184ec:	6818      	ldr	r0, [r3, #0]
 80184ee:	f000 b82b 	b.w	8018548 <_malloc_r>
 80184f2:	bf00      	nop
 80184f4:	20000364 	.word	0x20000364

080184f8 <free>:
 80184f8:	4b02      	ldr	r3, [pc, #8]	; (8018504 <free+0xc>)
 80184fa:	4601      	mov	r1, r0
 80184fc:	6818      	ldr	r0, [r3, #0]
 80184fe:	f001 b9c9 	b.w	8019894 <_free_r>
 8018502:	bf00      	nop
 8018504:	20000364 	.word	0x20000364

08018508 <sbrk_aligned>:
 8018508:	b570      	push	{r4, r5, r6, lr}
 801850a:	4e0e      	ldr	r6, [pc, #56]	; (8018544 <sbrk_aligned+0x3c>)
 801850c:	460c      	mov	r4, r1
 801850e:	6831      	ldr	r1, [r6, #0]
 8018510:	4605      	mov	r5, r0
 8018512:	b911      	cbnz	r1, 801851a <sbrk_aligned+0x12>
 8018514:	f001 f94a 	bl	80197ac <_sbrk_r>
 8018518:	6030      	str	r0, [r6, #0]
 801851a:	4621      	mov	r1, r4
 801851c:	4628      	mov	r0, r5
 801851e:	f001 f945 	bl	80197ac <_sbrk_r>
 8018522:	1c43      	adds	r3, r0, #1
 8018524:	d00a      	beq.n	801853c <sbrk_aligned+0x34>
 8018526:	1cc4      	adds	r4, r0, #3
 8018528:	f024 0403 	bic.w	r4, r4, #3
 801852c:	42a0      	cmp	r0, r4
 801852e:	d007      	beq.n	8018540 <sbrk_aligned+0x38>
 8018530:	1a21      	subs	r1, r4, r0
 8018532:	4628      	mov	r0, r5
 8018534:	f001 f93a 	bl	80197ac <_sbrk_r>
 8018538:	3001      	adds	r0, #1
 801853a:	d101      	bne.n	8018540 <sbrk_aligned+0x38>
 801853c:	f04f 34ff 	mov.w	r4, #4294967295
 8018540:	4620      	mov	r0, r4
 8018542:	bd70      	pop	{r4, r5, r6, pc}
 8018544:	20006ffc 	.word	0x20006ffc

08018548 <_malloc_r>:
 8018548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801854c:	1ccd      	adds	r5, r1, #3
 801854e:	f025 0503 	bic.w	r5, r5, #3
 8018552:	3508      	adds	r5, #8
 8018554:	2d0c      	cmp	r5, #12
 8018556:	bf38      	it	cc
 8018558:	250c      	movcc	r5, #12
 801855a:	2d00      	cmp	r5, #0
 801855c:	4607      	mov	r7, r0
 801855e:	db01      	blt.n	8018564 <_malloc_r+0x1c>
 8018560:	42a9      	cmp	r1, r5
 8018562:	d905      	bls.n	8018570 <_malloc_r+0x28>
 8018564:	230c      	movs	r3, #12
 8018566:	603b      	str	r3, [r7, #0]
 8018568:	2600      	movs	r6, #0
 801856a:	4630      	mov	r0, r6
 801856c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018570:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018644 <_malloc_r+0xfc>
 8018574:	f000 f868 	bl	8018648 <__malloc_lock>
 8018578:	f8d8 3000 	ldr.w	r3, [r8]
 801857c:	461c      	mov	r4, r3
 801857e:	bb5c      	cbnz	r4, 80185d8 <_malloc_r+0x90>
 8018580:	4629      	mov	r1, r5
 8018582:	4638      	mov	r0, r7
 8018584:	f7ff ffc0 	bl	8018508 <sbrk_aligned>
 8018588:	1c43      	adds	r3, r0, #1
 801858a:	4604      	mov	r4, r0
 801858c:	d155      	bne.n	801863a <_malloc_r+0xf2>
 801858e:	f8d8 4000 	ldr.w	r4, [r8]
 8018592:	4626      	mov	r6, r4
 8018594:	2e00      	cmp	r6, #0
 8018596:	d145      	bne.n	8018624 <_malloc_r+0xdc>
 8018598:	2c00      	cmp	r4, #0
 801859a:	d048      	beq.n	801862e <_malloc_r+0xe6>
 801859c:	6823      	ldr	r3, [r4, #0]
 801859e:	4631      	mov	r1, r6
 80185a0:	4638      	mov	r0, r7
 80185a2:	eb04 0903 	add.w	r9, r4, r3
 80185a6:	f001 f901 	bl	80197ac <_sbrk_r>
 80185aa:	4581      	cmp	r9, r0
 80185ac:	d13f      	bne.n	801862e <_malloc_r+0xe6>
 80185ae:	6821      	ldr	r1, [r4, #0]
 80185b0:	1a6d      	subs	r5, r5, r1
 80185b2:	4629      	mov	r1, r5
 80185b4:	4638      	mov	r0, r7
 80185b6:	f7ff ffa7 	bl	8018508 <sbrk_aligned>
 80185ba:	3001      	adds	r0, #1
 80185bc:	d037      	beq.n	801862e <_malloc_r+0xe6>
 80185be:	6823      	ldr	r3, [r4, #0]
 80185c0:	442b      	add	r3, r5
 80185c2:	6023      	str	r3, [r4, #0]
 80185c4:	f8d8 3000 	ldr.w	r3, [r8]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d038      	beq.n	801863e <_malloc_r+0xf6>
 80185cc:	685a      	ldr	r2, [r3, #4]
 80185ce:	42a2      	cmp	r2, r4
 80185d0:	d12b      	bne.n	801862a <_malloc_r+0xe2>
 80185d2:	2200      	movs	r2, #0
 80185d4:	605a      	str	r2, [r3, #4]
 80185d6:	e00f      	b.n	80185f8 <_malloc_r+0xb0>
 80185d8:	6822      	ldr	r2, [r4, #0]
 80185da:	1b52      	subs	r2, r2, r5
 80185dc:	d41f      	bmi.n	801861e <_malloc_r+0xd6>
 80185de:	2a0b      	cmp	r2, #11
 80185e0:	d917      	bls.n	8018612 <_malloc_r+0xca>
 80185e2:	1961      	adds	r1, r4, r5
 80185e4:	42a3      	cmp	r3, r4
 80185e6:	6025      	str	r5, [r4, #0]
 80185e8:	bf18      	it	ne
 80185ea:	6059      	strne	r1, [r3, #4]
 80185ec:	6863      	ldr	r3, [r4, #4]
 80185ee:	bf08      	it	eq
 80185f0:	f8c8 1000 	streq.w	r1, [r8]
 80185f4:	5162      	str	r2, [r4, r5]
 80185f6:	604b      	str	r3, [r1, #4]
 80185f8:	4638      	mov	r0, r7
 80185fa:	f104 060b 	add.w	r6, r4, #11
 80185fe:	f000 f829 	bl	8018654 <__malloc_unlock>
 8018602:	f026 0607 	bic.w	r6, r6, #7
 8018606:	1d23      	adds	r3, r4, #4
 8018608:	1af2      	subs	r2, r6, r3
 801860a:	d0ae      	beq.n	801856a <_malloc_r+0x22>
 801860c:	1b9b      	subs	r3, r3, r6
 801860e:	50a3      	str	r3, [r4, r2]
 8018610:	e7ab      	b.n	801856a <_malloc_r+0x22>
 8018612:	42a3      	cmp	r3, r4
 8018614:	6862      	ldr	r2, [r4, #4]
 8018616:	d1dd      	bne.n	80185d4 <_malloc_r+0x8c>
 8018618:	f8c8 2000 	str.w	r2, [r8]
 801861c:	e7ec      	b.n	80185f8 <_malloc_r+0xb0>
 801861e:	4623      	mov	r3, r4
 8018620:	6864      	ldr	r4, [r4, #4]
 8018622:	e7ac      	b.n	801857e <_malloc_r+0x36>
 8018624:	4634      	mov	r4, r6
 8018626:	6876      	ldr	r6, [r6, #4]
 8018628:	e7b4      	b.n	8018594 <_malloc_r+0x4c>
 801862a:	4613      	mov	r3, r2
 801862c:	e7cc      	b.n	80185c8 <_malloc_r+0x80>
 801862e:	230c      	movs	r3, #12
 8018630:	603b      	str	r3, [r7, #0]
 8018632:	4638      	mov	r0, r7
 8018634:	f000 f80e 	bl	8018654 <__malloc_unlock>
 8018638:	e797      	b.n	801856a <_malloc_r+0x22>
 801863a:	6025      	str	r5, [r4, #0]
 801863c:	e7dc      	b.n	80185f8 <_malloc_r+0xb0>
 801863e:	605b      	str	r3, [r3, #4]
 8018640:	deff      	udf	#255	; 0xff
 8018642:	bf00      	nop
 8018644:	20006ff8 	.word	0x20006ff8

08018648 <__malloc_lock>:
 8018648:	4801      	ldr	r0, [pc, #4]	; (8018650 <__malloc_lock+0x8>)
 801864a:	f001 b8fc 	b.w	8019846 <__retarget_lock_acquire_recursive>
 801864e:	bf00      	nop
 8018650:	20007140 	.word	0x20007140

08018654 <__malloc_unlock>:
 8018654:	4801      	ldr	r0, [pc, #4]	; (801865c <__malloc_unlock+0x8>)
 8018656:	f001 b8f7 	b.w	8019848 <__retarget_lock_release_recursive>
 801865a:	bf00      	nop
 801865c:	20007140 	.word	0x20007140

08018660 <sulp>:
 8018660:	b570      	push	{r4, r5, r6, lr}
 8018662:	4604      	mov	r4, r0
 8018664:	460d      	mov	r5, r1
 8018666:	ec45 4b10 	vmov	d0, r4, r5
 801866a:	4616      	mov	r6, r2
 801866c:	f002 f834 	bl	801a6d8 <__ulp>
 8018670:	ec51 0b10 	vmov	r0, r1, d0
 8018674:	b17e      	cbz	r6, 8018696 <sulp+0x36>
 8018676:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801867a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801867e:	2b00      	cmp	r3, #0
 8018680:	dd09      	ble.n	8018696 <sulp+0x36>
 8018682:	051b      	lsls	r3, r3, #20
 8018684:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8018688:	2400      	movs	r4, #0
 801868a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801868e:	4622      	mov	r2, r4
 8018690:	462b      	mov	r3, r5
 8018692:	f7e7 ffc1 	bl	8000618 <__aeabi_dmul>
 8018696:	bd70      	pop	{r4, r5, r6, pc}

08018698 <_strtod_l>:
 8018698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801869c:	ed2d 8b02 	vpush	{d8}
 80186a0:	b09b      	sub	sp, #108	; 0x6c
 80186a2:	4604      	mov	r4, r0
 80186a4:	9213      	str	r2, [sp, #76]	; 0x4c
 80186a6:	2200      	movs	r2, #0
 80186a8:	9216      	str	r2, [sp, #88]	; 0x58
 80186aa:	460d      	mov	r5, r1
 80186ac:	f04f 0800 	mov.w	r8, #0
 80186b0:	f04f 0900 	mov.w	r9, #0
 80186b4:	460a      	mov	r2, r1
 80186b6:	9215      	str	r2, [sp, #84]	; 0x54
 80186b8:	7811      	ldrb	r1, [r2, #0]
 80186ba:	292b      	cmp	r1, #43	; 0x2b
 80186bc:	d04c      	beq.n	8018758 <_strtod_l+0xc0>
 80186be:	d83a      	bhi.n	8018736 <_strtod_l+0x9e>
 80186c0:	290d      	cmp	r1, #13
 80186c2:	d834      	bhi.n	801872e <_strtod_l+0x96>
 80186c4:	2908      	cmp	r1, #8
 80186c6:	d834      	bhi.n	8018732 <_strtod_l+0x9a>
 80186c8:	2900      	cmp	r1, #0
 80186ca:	d03d      	beq.n	8018748 <_strtod_l+0xb0>
 80186cc:	2200      	movs	r2, #0
 80186ce:	920a      	str	r2, [sp, #40]	; 0x28
 80186d0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80186d2:	7832      	ldrb	r2, [r6, #0]
 80186d4:	2a30      	cmp	r2, #48	; 0x30
 80186d6:	f040 80b4 	bne.w	8018842 <_strtod_l+0x1aa>
 80186da:	7872      	ldrb	r2, [r6, #1]
 80186dc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80186e0:	2a58      	cmp	r2, #88	; 0x58
 80186e2:	d170      	bne.n	80187c6 <_strtod_l+0x12e>
 80186e4:	9302      	str	r3, [sp, #8]
 80186e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186e8:	9301      	str	r3, [sp, #4]
 80186ea:	ab16      	add	r3, sp, #88	; 0x58
 80186ec:	9300      	str	r3, [sp, #0]
 80186ee:	4a8e      	ldr	r2, [pc, #568]	; (8018928 <_strtod_l+0x290>)
 80186f0:	ab17      	add	r3, sp, #92	; 0x5c
 80186f2:	a915      	add	r1, sp, #84	; 0x54
 80186f4:	4620      	mov	r0, r4
 80186f6:	f001 f981 	bl	80199fc <__gethex>
 80186fa:	f010 070f 	ands.w	r7, r0, #15
 80186fe:	4605      	mov	r5, r0
 8018700:	d005      	beq.n	801870e <_strtod_l+0x76>
 8018702:	2f06      	cmp	r7, #6
 8018704:	d12a      	bne.n	801875c <_strtod_l+0xc4>
 8018706:	3601      	adds	r6, #1
 8018708:	2300      	movs	r3, #0
 801870a:	9615      	str	r6, [sp, #84]	; 0x54
 801870c:	930a      	str	r3, [sp, #40]	; 0x28
 801870e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018710:	2b00      	cmp	r3, #0
 8018712:	f040 857f 	bne.w	8019214 <_strtod_l+0xb7c>
 8018716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018718:	b1db      	cbz	r3, 8018752 <_strtod_l+0xba>
 801871a:	4642      	mov	r2, r8
 801871c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018720:	ec43 2b10 	vmov	d0, r2, r3
 8018724:	b01b      	add	sp, #108	; 0x6c
 8018726:	ecbd 8b02 	vpop	{d8}
 801872a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801872e:	2920      	cmp	r1, #32
 8018730:	d1cc      	bne.n	80186cc <_strtod_l+0x34>
 8018732:	3201      	adds	r2, #1
 8018734:	e7bf      	b.n	80186b6 <_strtod_l+0x1e>
 8018736:	292d      	cmp	r1, #45	; 0x2d
 8018738:	d1c8      	bne.n	80186cc <_strtod_l+0x34>
 801873a:	2101      	movs	r1, #1
 801873c:	910a      	str	r1, [sp, #40]	; 0x28
 801873e:	1c51      	adds	r1, r2, #1
 8018740:	9115      	str	r1, [sp, #84]	; 0x54
 8018742:	7852      	ldrb	r2, [r2, #1]
 8018744:	2a00      	cmp	r2, #0
 8018746:	d1c3      	bne.n	80186d0 <_strtod_l+0x38>
 8018748:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801874a:	9515      	str	r5, [sp, #84]	; 0x54
 801874c:	2b00      	cmp	r3, #0
 801874e:	f040 855f 	bne.w	8019210 <_strtod_l+0xb78>
 8018752:	4642      	mov	r2, r8
 8018754:	464b      	mov	r3, r9
 8018756:	e7e3      	b.n	8018720 <_strtod_l+0x88>
 8018758:	2100      	movs	r1, #0
 801875a:	e7ef      	b.n	801873c <_strtod_l+0xa4>
 801875c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801875e:	b13a      	cbz	r2, 8018770 <_strtod_l+0xd8>
 8018760:	2135      	movs	r1, #53	; 0x35
 8018762:	a818      	add	r0, sp, #96	; 0x60
 8018764:	f002 f8b5 	bl	801a8d2 <__copybits>
 8018768:	9916      	ldr	r1, [sp, #88]	; 0x58
 801876a:	4620      	mov	r0, r4
 801876c:	f001 fc88 	bl	801a080 <_Bfree>
 8018770:	3f01      	subs	r7, #1
 8018772:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018774:	2f04      	cmp	r7, #4
 8018776:	d806      	bhi.n	8018786 <_strtod_l+0xee>
 8018778:	e8df f007 	tbb	[pc, r7]
 801877c:	201d0314 	.word	0x201d0314
 8018780:	14          	.byte	0x14
 8018781:	00          	.byte	0x00
 8018782:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8018786:	05e9      	lsls	r1, r5, #23
 8018788:	bf48      	it	mi
 801878a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801878e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018792:	0d1b      	lsrs	r3, r3, #20
 8018794:	051b      	lsls	r3, r3, #20
 8018796:	2b00      	cmp	r3, #0
 8018798:	d1b9      	bne.n	801870e <_strtod_l+0x76>
 801879a:	f001 f829 	bl	80197f0 <__errno>
 801879e:	2322      	movs	r3, #34	; 0x22
 80187a0:	6003      	str	r3, [r0, #0]
 80187a2:	e7b4      	b.n	801870e <_strtod_l+0x76>
 80187a4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80187a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80187ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80187b0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80187b4:	e7e7      	b.n	8018786 <_strtod_l+0xee>
 80187b6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8018930 <_strtod_l+0x298>
 80187ba:	e7e4      	b.n	8018786 <_strtod_l+0xee>
 80187bc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80187c0:	f04f 38ff 	mov.w	r8, #4294967295
 80187c4:	e7df      	b.n	8018786 <_strtod_l+0xee>
 80187c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80187c8:	1c5a      	adds	r2, r3, #1
 80187ca:	9215      	str	r2, [sp, #84]	; 0x54
 80187cc:	785b      	ldrb	r3, [r3, #1]
 80187ce:	2b30      	cmp	r3, #48	; 0x30
 80187d0:	d0f9      	beq.n	80187c6 <_strtod_l+0x12e>
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d09b      	beq.n	801870e <_strtod_l+0x76>
 80187d6:	2301      	movs	r3, #1
 80187d8:	f04f 0a00 	mov.w	sl, #0
 80187dc:	9304      	str	r3, [sp, #16]
 80187de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80187e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80187e2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80187e6:	46d3      	mov	fp, sl
 80187e8:	220a      	movs	r2, #10
 80187ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 80187ec:	7806      	ldrb	r6, [r0, #0]
 80187ee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80187f2:	b2d9      	uxtb	r1, r3
 80187f4:	2909      	cmp	r1, #9
 80187f6:	d926      	bls.n	8018846 <_strtod_l+0x1ae>
 80187f8:	494c      	ldr	r1, [pc, #304]	; (801892c <_strtod_l+0x294>)
 80187fa:	2201      	movs	r2, #1
 80187fc:	f000 ff64 	bl	80196c8 <strncmp>
 8018800:	2800      	cmp	r0, #0
 8018802:	d030      	beq.n	8018866 <_strtod_l+0x1ce>
 8018804:	2000      	movs	r0, #0
 8018806:	4632      	mov	r2, r6
 8018808:	9005      	str	r0, [sp, #20]
 801880a:	465e      	mov	r6, fp
 801880c:	4603      	mov	r3, r0
 801880e:	2a65      	cmp	r2, #101	; 0x65
 8018810:	d001      	beq.n	8018816 <_strtod_l+0x17e>
 8018812:	2a45      	cmp	r2, #69	; 0x45
 8018814:	d113      	bne.n	801883e <_strtod_l+0x1a6>
 8018816:	b91e      	cbnz	r6, 8018820 <_strtod_l+0x188>
 8018818:	9a04      	ldr	r2, [sp, #16]
 801881a:	4302      	orrs	r2, r0
 801881c:	d094      	beq.n	8018748 <_strtod_l+0xb0>
 801881e:	2600      	movs	r6, #0
 8018820:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8018822:	1c6a      	adds	r2, r5, #1
 8018824:	9215      	str	r2, [sp, #84]	; 0x54
 8018826:	786a      	ldrb	r2, [r5, #1]
 8018828:	2a2b      	cmp	r2, #43	; 0x2b
 801882a:	d074      	beq.n	8018916 <_strtod_l+0x27e>
 801882c:	2a2d      	cmp	r2, #45	; 0x2d
 801882e:	d078      	beq.n	8018922 <_strtod_l+0x28a>
 8018830:	f04f 0c00 	mov.w	ip, #0
 8018834:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8018838:	2909      	cmp	r1, #9
 801883a:	d97f      	bls.n	801893c <_strtod_l+0x2a4>
 801883c:	9515      	str	r5, [sp, #84]	; 0x54
 801883e:	2700      	movs	r7, #0
 8018840:	e09e      	b.n	8018980 <_strtod_l+0x2e8>
 8018842:	2300      	movs	r3, #0
 8018844:	e7c8      	b.n	80187d8 <_strtod_l+0x140>
 8018846:	f1bb 0f08 	cmp.w	fp, #8
 801884a:	bfd8      	it	le
 801884c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801884e:	f100 0001 	add.w	r0, r0, #1
 8018852:	bfda      	itte	le
 8018854:	fb02 3301 	mlale	r3, r2, r1, r3
 8018858:	9309      	strle	r3, [sp, #36]	; 0x24
 801885a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801885e:	f10b 0b01 	add.w	fp, fp, #1
 8018862:	9015      	str	r0, [sp, #84]	; 0x54
 8018864:	e7c1      	b.n	80187ea <_strtod_l+0x152>
 8018866:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018868:	1c5a      	adds	r2, r3, #1
 801886a:	9215      	str	r2, [sp, #84]	; 0x54
 801886c:	785a      	ldrb	r2, [r3, #1]
 801886e:	f1bb 0f00 	cmp.w	fp, #0
 8018872:	d037      	beq.n	80188e4 <_strtod_l+0x24c>
 8018874:	9005      	str	r0, [sp, #20]
 8018876:	465e      	mov	r6, fp
 8018878:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801887c:	2b09      	cmp	r3, #9
 801887e:	d912      	bls.n	80188a6 <_strtod_l+0x20e>
 8018880:	2301      	movs	r3, #1
 8018882:	e7c4      	b.n	801880e <_strtod_l+0x176>
 8018884:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018886:	1c5a      	adds	r2, r3, #1
 8018888:	9215      	str	r2, [sp, #84]	; 0x54
 801888a:	785a      	ldrb	r2, [r3, #1]
 801888c:	3001      	adds	r0, #1
 801888e:	2a30      	cmp	r2, #48	; 0x30
 8018890:	d0f8      	beq.n	8018884 <_strtod_l+0x1ec>
 8018892:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8018896:	2b08      	cmp	r3, #8
 8018898:	f200 84c1 	bhi.w	801921e <_strtod_l+0xb86>
 801889c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801889e:	9005      	str	r0, [sp, #20]
 80188a0:	2000      	movs	r0, #0
 80188a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80188a4:	4606      	mov	r6, r0
 80188a6:	3a30      	subs	r2, #48	; 0x30
 80188a8:	f100 0301 	add.w	r3, r0, #1
 80188ac:	d014      	beq.n	80188d8 <_strtod_l+0x240>
 80188ae:	9905      	ldr	r1, [sp, #20]
 80188b0:	4419      	add	r1, r3
 80188b2:	9105      	str	r1, [sp, #20]
 80188b4:	4633      	mov	r3, r6
 80188b6:	eb00 0c06 	add.w	ip, r0, r6
 80188ba:	210a      	movs	r1, #10
 80188bc:	4563      	cmp	r3, ip
 80188be:	d113      	bne.n	80188e8 <_strtod_l+0x250>
 80188c0:	1833      	adds	r3, r6, r0
 80188c2:	2b08      	cmp	r3, #8
 80188c4:	f106 0601 	add.w	r6, r6, #1
 80188c8:	4406      	add	r6, r0
 80188ca:	dc1a      	bgt.n	8018902 <_strtod_l+0x26a>
 80188cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80188ce:	230a      	movs	r3, #10
 80188d0:	fb03 2301 	mla	r3, r3, r1, r2
 80188d4:	9309      	str	r3, [sp, #36]	; 0x24
 80188d6:	2300      	movs	r3, #0
 80188d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80188da:	1c51      	adds	r1, r2, #1
 80188dc:	9115      	str	r1, [sp, #84]	; 0x54
 80188de:	7852      	ldrb	r2, [r2, #1]
 80188e0:	4618      	mov	r0, r3
 80188e2:	e7c9      	b.n	8018878 <_strtod_l+0x1e0>
 80188e4:	4658      	mov	r0, fp
 80188e6:	e7d2      	b.n	801888e <_strtod_l+0x1f6>
 80188e8:	2b08      	cmp	r3, #8
 80188ea:	f103 0301 	add.w	r3, r3, #1
 80188ee:	dc03      	bgt.n	80188f8 <_strtod_l+0x260>
 80188f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80188f2:	434f      	muls	r7, r1
 80188f4:	9709      	str	r7, [sp, #36]	; 0x24
 80188f6:	e7e1      	b.n	80188bc <_strtod_l+0x224>
 80188f8:	2b10      	cmp	r3, #16
 80188fa:	bfd8      	it	le
 80188fc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8018900:	e7dc      	b.n	80188bc <_strtod_l+0x224>
 8018902:	2e10      	cmp	r6, #16
 8018904:	bfdc      	itt	le
 8018906:	230a      	movle	r3, #10
 8018908:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801890c:	e7e3      	b.n	80188d6 <_strtod_l+0x23e>
 801890e:	2300      	movs	r3, #0
 8018910:	9305      	str	r3, [sp, #20]
 8018912:	2301      	movs	r3, #1
 8018914:	e780      	b.n	8018818 <_strtod_l+0x180>
 8018916:	f04f 0c00 	mov.w	ip, #0
 801891a:	1caa      	adds	r2, r5, #2
 801891c:	9215      	str	r2, [sp, #84]	; 0x54
 801891e:	78aa      	ldrb	r2, [r5, #2]
 8018920:	e788      	b.n	8018834 <_strtod_l+0x19c>
 8018922:	f04f 0c01 	mov.w	ip, #1
 8018926:	e7f8      	b.n	801891a <_strtod_l+0x282>
 8018928:	080289ac 	.word	0x080289ac
 801892c:	0802899c 	.word	0x0802899c
 8018930:	7ff00000 	.word	0x7ff00000
 8018934:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018936:	1c51      	adds	r1, r2, #1
 8018938:	9115      	str	r1, [sp, #84]	; 0x54
 801893a:	7852      	ldrb	r2, [r2, #1]
 801893c:	2a30      	cmp	r2, #48	; 0x30
 801893e:	d0f9      	beq.n	8018934 <_strtod_l+0x29c>
 8018940:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8018944:	2908      	cmp	r1, #8
 8018946:	f63f af7a 	bhi.w	801883e <_strtod_l+0x1a6>
 801894a:	3a30      	subs	r2, #48	; 0x30
 801894c:	9208      	str	r2, [sp, #32]
 801894e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018950:	920c      	str	r2, [sp, #48]	; 0x30
 8018952:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018954:	1c57      	adds	r7, r2, #1
 8018956:	9715      	str	r7, [sp, #84]	; 0x54
 8018958:	7852      	ldrb	r2, [r2, #1]
 801895a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801895e:	f1be 0f09 	cmp.w	lr, #9
 8018962:	d938      	bls.n	80189d6 <_strtod_l+0x33e>
 8018964:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018966:	1a7f      	subs	r7, r7, r1
 8018968:	2f08      	cmp	r7, #8
 801896a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801896e:	dc03      	bgt.n	8018978 <_strtod_l+0x2e0>
 8018970:	9908      	ldr	r1, [sp, #32]
 8018972:	428f      	cmp	r7, r1
 8018974:	bfa8      	it	ge
 8018976:	460f      	movge	r7, r1
 8018978:	f1bc 0f00 	cmp.w	ip, #0
 801897c:	d000      	beq.n	8018980 <_strtod_l+0x2e8>
 801897e:	427f      	negs	r7, r7
 8018980:	2e00      	cmp	r6, #0
 8018982:	d14f      	bne.n	8018a24 <_strtod_l+0x38c>
 8018984:	9904      	ldr	r1, [sp, #16]
 8018986:	4301      	orrs	r1, r0
 8018988:	f47f aec1 	bne.w	801870e <_strtod_l+0x76>
 801898c:	2b00      	cmp	r3, #0
 801898e:	f47f aedb 	bne.w	8018748 <_strtod_l+0xb0>
 8018992:	2a69      	cmp	r2, #105	; 0x69
 8018994:	d029      	beq.n	80189ea <_strtod_l+0x352>
 8018996:	dc26      	bgt.n	80189e6 <_strtod_l+0x34e>
 8018998:	2a49      	cmp	r2, #73	; 0x49
 801899a:	d026      	beq.n	80189ea <_strtod_l+0x352>
 801899c:	2a4e      	cmp	r2, #78	; 0x4e
 801899e:	f47f aed3 	bne.w	8018748 <_strtod_l+0xb0>
 80189a2:	499b      	ldr	r1, [pc, #620]	; (8018c10 <_strtod_l+0x578>)
 80189a4:	a815      	add	r0, sp, #84	; 0x54
 80189a6:	f001 fa69 	bl	8019e7c <__match>
 80189aa:	2800      	cmp	r0, #0
 80189ac:	f43f aecc 	beq.w	8018748 <_strtod_l+0xb0>
 80189b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80189b2:	781b      	ldrb	r3, [r3, #0]
 80189b4:	2b28      	cmp	r3, #40	; 0x28
 80189b6:	d12f      	bne.n	8018a18 <_strtod_l+0x380>
 80189b8:	4996      	ldr	r1, [pc, #600]	; (8018c14 <_strtod_l+0x57c>)
 80189ba:	aa18      	add	r2, sp, #96	; 0x60
 80189bc:	a815      	add	r0, sp, #84	; 0x54
 80189be:	f001 fa71 	bl	8019ea4 <__hexnan>
 80189c2:	2805      	cmp	r0, #5
 80189c4:	d128      	bne.n	8018a18 <_strtod_l+0x380>
 80189c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80189c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80189cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80189d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80189d4:	e69b      	b.n	801870e <_strtod_l+0x76>
 80189d6:	9f08      	ldr	r7, [sp, #32]
 80189d8:	210a      	movs	r1, #10
 80189da:	fb01 2107 	mla	r1, r1, r7, r2
 80189de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80189e2:	9208      	str	r2, [sp, #32]
 80189e4:	e7b5      	b.n	8018952 <_strtod_l+0x2ba>
 80189e6:	2a6e      	cmp	r2, #110	; 0x6e
 80189e8:	e7d9      	b.n	801899e <_strtod_l+0x306>
 80189ea:	498b      	ldr	r1, [pc, #556]	; (8018c18 <_strtod_l+0x580>)
 80189ec:	a815      	add	r0, sp, #84	; 0x54
 80189ee:	f001 fa45 	bl	8019e7c <__match>
 80189f2:	2800      	cmp	r0, #0
 80189f4:	f43f aea8 	beq.w	8018748 <_strtod_l+0xb0>
 80189f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80189fa:	4988      	ldr	r1, [pc, #544]	; (8018c1c <_strtod_l+0x584>)
 80189fc:	3b01      	subs	r3, #1
 80189fe:	a815      	add	r0, sp, #84	; 0x54
 8018a00:	9315      	str	r3, [sp, #84]	; 0x54
 8018a02:	f001 fa3b 	bl	8019e7c <__match>
 8018a06:	b910      	cbnz	r0, 8018a0e <_strtod_l+0x376>
 8018a08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a0a:	3301      	adds	r3, #1
 8018a0c:	9315      	str	r3, [sp, #84]	; 0x54
 8018a0e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8018c2c <_strtod_l+0x594>
 8018a12:	f04f 0800 	mov.w	r8, #0
 8018a16:	e67a      	b.n	801870e <_strtod_l+0x76>
 8018a18:	4881      	ldr	r0, [pc, #516]	; (8018c20 <_strtod_l+0x588>)
 8018a1a:	f000 ff2d 	bl	8019878 <nan>
 8018a1e:	ec59 8b10 	vmov	r8, r9, d0
 8018a22:	e674      	b.n	801870e <_strtod_l+0x76>
 8018a24:	9b05      	ldr	r3, [sp, #20]
 8018a26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018a28:	1afb      	subs	r3, r7, r3
 8018a2a:	f1bb 0f00 	cmp.w	fp, #0
 8018a2e:	bf08      	it	eq
 8018a30:	46b3      	moveq	fp, r6
 8018a32:	2e10      	cmp	r6, #16
 8018a34:	9308      	str	r3, [sp, #32]
 8018a36:	4635      	mov	r5, r6
 8018a38:	bfa8      	it	ge
 8018a3a:	2510      	movge	r5, #16
 8018a3c:	f7e7 fd72 	bl	8000524 <__aeabi_ui2d>
 8018a40:	2e09      	cmp	r6, #9
 8018a42:	4680      	mov	r8, r0
 8018a44:	4689      	mov	r9, r1
 8018a46:	dd13      	ble.n	8018a70 <_strtod_l+0x3d8>
 8018a48:	4b76      	ldr	r3, [pc, #472]	; (8018c24 <_strtod_l+0x58c>)
 8018a4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018a4e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8018a52:	f7e7 fde1 	bl	8000618 <__aeabi_dmul>
 8018a56:	4680      	mov	r8, r0
 8018a58:	4650      	mov	r0, sl
 8018a5a:	4689      	mov	r9, r1
 8018a5c:	f7e7 fd62 	bl	8000524 <__aeabi_ui2d>
 8018a60:	4602      	mov	r2, r0
 8018a62:	460b      	mov	r3, r1
 8018a64:	4640      	mov	r0, r8
 8018a66:	4649      	mov	r1, r9
 8018a68:	f7e7 fc20 	bl	80002ac <__adddf3>
 8018a6c:	4680      	mov	r8, r0
 8018a6e:	4689      	mov	r9, r1
 8018a70:	2e0f      	cmp	r6, #15
 8018a72:	dc38      	bgt.n	8018ae6 <_strtod_l+0x44e>
 8018a74:	9b08      	ldr	r3, [sp, #32]
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	f43f ae49 	beq.w	801870e <_strtod_l+0x76>
 8018a7c:	dd24      	ble.n	8018ac8 <_strtod_l+0x430>
 8018a7e:	2b16      	cmp	r3, #22
 8018a80:	dc0b      	bgt.n	8018a9a <_strtod_l+0x402>
 8018a82:	4968      	ldr	r1, [pc, #416]	; (8018c24 <_strtod_l+0x58c>)
 8018a84:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018a8c:	4642      	mov	r2, r8
 8018a8e:	464b      	mov	r3, r9
 8018a90:	f7e7 fdc2 	bl	8000618 <__aeabi_dmul>
 8018a94:	4680      	mov	r8, r0
 8018a96:	4689      	mov	r9, r1
 8018a98:	e639      	b.n	801870e <_strtod_l+0x76>
 8018a9a:	9a08      	ldr	r2, [sp, #32]
 8018a9c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8018aa0:	4293      	cmp	r3, r2
 8018aa2:	db20      	blt.n	8018ae6 <_strtod_l+0x44e>
 8018aa4:	4c5f      	ldr	r4, [pc, #380]	; (8018c24 <_strtod_l+0x58c>)
 8018aa6:	f1c6 060f 	rsb	r6, r6, #15
 8018aaa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8018aae:	4642      	mov	r2, r8
 8018ab0:	464b      	mov	r3, r9
 8018ab2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018ab6:	f7e7 fdaf 	bl	8000618 <__aeabi_dmul>
 8018aba:	9b08      	ldr	r3, [sp, #32]
 8018abc:	1b9e      	subs	r6, r3, r6
 8018abe:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8018ac2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018ac6:	e7e3      	b.n	8018a90 <_strtod_l+0x3f8>
 8018ac8:	9b08      	ldr	r3, [sp, #32]
 8018aca:	3316      	adds	r3, #22
 8018acc:	db0b      	blt.n	8018ae6 <_strtod_l+0x44e>
 8018ace:	9b05      	ldr	r3, [sp, #20]
 8018ad0:	1bdf      	subs	r7, r3, r7
 8018ad2:	4b54      	ldr	r3, [pc, #336]	; (8018c24 <_strtod_l+0x58c>)
 8018ad4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8018ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018adc:	4640      	mov	r0, r8
 8018ade:	4649      	mov	r1, r9
 8018ae0:	f7e7 fec4 	bl	800086c <__aeabi_ddiv>
 8018ae4:	e7d6      	b.n	8018a94 <_strtod_l+0x3fc>
 8018ae6:	9b08      	ldr	r3, [sp, #32]
 8018ae8:	1b75      	subs	r5, r6, r5
 8018aea:	441d      	add	r5, r3
 8018aec:	2d00      	cmp	r5, #0
 8018aee:	dd70      	ble.n	8018bd2 <_strtod_l+0x53a>
 8018af0:	f015 030f 	ands.w	r3, r5, #15
 8018af4:	d00a      	beq.n	8018b0c <_strtod_l+0x474>
 8018af6:	494b      	ldr	r1, [pc, #300]	; (8018c24 <_strtod_l+0x58c>)
 8018af8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018afc:	4642      	mov	r2, r8
 8018afe:	464b      	mov	r3, r9
 8018b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018b04:	f7e7 fd88 	bl	8000618 <__aeabi_dmul>
 8018b08:	4680      	mov	r8, r0
 8018b0a:	4689      	mov	r9, r1
 8018b0c:	f035 050f 	bics.w	r5, r5, #15
 8018b10:	d04d      	beq.n	8018bae <_strtod_l+0x516>
 8018b12:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8018b16:	dd22      	ble.n	8018b5e <_strtod_l+0x4c6>
 8018b18:	2500      	movs	r5, #0
 8018b1a:	46ab      	mov	fp, r5
 8018b1c:	9509      	str	r5, [sp, #36]	; 0x24
 8018b1e:	9505      	str	r5, [sp, #20]
 8018b20:	2322      	movs	r3, #34	; 0x22
 8018b22:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8018c2c <_strtod_l+0x594>
 8018b26:	6023      	str	r3, [r4, #0]
 8018b28:	f04f 0800 	mov.w	r8, #0
 8018b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	f43f aded 	beq.w	801870e <_strtod_l+0x76>
 8018b34:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018b36:	4620      	mov	r0, r4
 8018b38:	f001 faa2 	bl	801a080 <_Bfree>
 8018b3c:	9905      	ldr	r1, [sp, #20]
 8018b3e:	4620      	mov	r0, r4
 8018b40:	f001 fa9e 	bl	801a080 <_Bfree>
 8018b44:	4659      	mov	r1, fp
 8018b46:	4620      	mov	r0, r4
 8018b48:	f001 fa9a 	bl	801a080 <_Bfree>
 8018b4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018b4e:	4620      	mov	r0, r4
 8018b50:	f001 fa96 	bl	801a080 <_Bfree>
 8018b54:	4629      	mov	r1, r5
 8018b56:	4620      	mov	r0, r4
 8018b58:	f001 fa92 	bl	801a080 <_Bfree>
 8018b5c:	e5d7      	b.n	801870e <_strtod_l+0x76>
 8018b5e:	4b32      	ldr	r3, [pc, #200]	; (8018c28 <_strtod_l+0x590>)
 8018b60:	9304      	str	r3, [sp, #16]
 8018b62:	2300      	movs	r3, #0
 8018b64:	112d      	asrs	r5, r5, #4
 8018b66:	4640      	mov	r0, r8
 8018b68:	4649      	mov	r1, r9
 8018b6a:	469a      	mov	sl, r3
 8018b6c:	2d01      	cmp	r5, #1
 8018b6e:	dc21      	bgt.n	8018bb4 <_strtod_l+0x51c>
 8018b70:	b10b      	cbz	r3, 8018b76 <_strtod_l+0x4de>
 8018b72:	4680      	mov	r8, r0
 8018b74:	4689      	mov	r9, r1
 8018b76:	492c      	ldr	r1, [pc, #176]	; (8018c28 <_strtod_l+0x590>)
 8018b78:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8018b7c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8018b80:	4642      	mov	r2, r8
 8018b82:	464b      	mov	r3, r9
 8018b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018b88:	f7e7 fd46 	bl	8000618 <__aeabi_dmul>
 8018b8c:	4b27      	ldr	r3, [pc, #156]	; (8018c2c <_strtod_l+0x594>)
 8018b8e:	460a      	mov	r2, r1
 8018b90:	400b      	ands	r3, r1
 8018b92:	4927      	ldr	r1, [pc, #156]	; (8018c30 <_strtod_l+0x598>)
 8018b94:	428b      	cmp	r3, r1
 8018b96:	4680      	mov	r8, r0
 8018b98:	d8be      	bhi.n	8018b18 <_strtod_l+0x480>
 8018b9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8018b9e:	428b      	cmp	r3, r1
 8018ba0:	bf86      	itte	hi
 8018ba2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8018c34 <_strtod_l+0x59c>
 8018ba6:	f04f 38ff 	movhi.w	r8, #4294967295
 8018baa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8018bae:	2300      	movs	r3, #0
 8018bb0:	9304      	str	r3, [sp, #16]
 8018bb2:	e07b      	b.n	8018cac <_strtod_l+0x614>
 8018bb4:	07ea      	lsls	r2, r5, #31
 8018bb6:	d505      	bpl.n	8018bc4 <_strtod_l+0x52c>
 8018bb8:	9b04      	ldr	r3, [sp, #16]
 8018bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bbe:	f7e7 fd2b 	bl	8000618 <__aeabi_dmul>
 8018bc2:	2301      	movs	r3, #1
 8018bc4:	9a04      	ldr	r2, [sp, #16]
 8018bc6:	3208      	adds	r2, #8
 8018bc8:	f10a 0a01 	add.w	sl, sl, #1
 8018bcc:	106d      	asrs	r5, r5, #1
 8018bce:	9204      	str	r2, [sp, #16]
 8018bd0:	e7cc      	b.n	8018b6c <_strtod_l+0x4d4>
 8018bd2:	d0ec      	beq.n	8018bae <_strtod_l+0x516>
 8018bd4:	426d      	negs	r5, r5
 8018bd6:	f015 020f 	ands.w	r2, r5, #15
 8018bda:	d00a      	beq.n	8018bf2 <_strtod_l+0x55a>
 8018bdc:	4b11      	ldr	r3, [pc, #68]	; (8018c24 <_strtod_l+0x58c>)
 8018bde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018be2:	4640      	mov	r0, r8
 8018be4:	4649      	mov	r1, r9
 8018be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bea:	f7e7 fe3f 	bl	800086c <__aeabi_ddiv>
 8018bee:	4680      	mov	r8, r0
 8018bf0:	4689      	mov	r9, r1
 8018bf2:	112d      	asrs	r5, r5, #4
 8018bf4:	d0db      	beq.n	8018bae <_strtod_l+0x516>
 8018bf6:	2d1f      	cmp	r5, #31
 8018bf8:	dd1e      	ble.n	8018c38 <_strtod_l+0x5a0>
 8018bfa:	2500      	movs	r5, #0
 8018bfc:	46ab      	mov	fp, r5
 8018bfe:	9509      	str	r5, [sp, #36]	; 0x24
 8018c00:	9505      	str	r5, [sp, #20]
 8018c02:	2322      	movs	r3, #34	; 0x22
 8018c04:	f04f 0800 	mov.w	r8, #0
 8018c08:	f04f 0900 	mov.w	r9, #0
 8018c0c:	6023      	str	r3, [r4, #0]
 8018c0e:	e78d      	b.n	8018b2c <_strtod_l+0x494>
 8018c10:	080289a7 	.word	0x080289a7
 8018c14:	080289c0 	.word	0x080289c0
 8018c18:	0802899e 	.word	0x0802899e
 8018c1c:	080289a1 	.word	0x080289a1
 8018c20:	08028d5a 	.word	0x08028d5a
 8018c24:	08028c18 	.word	0x08028c18
 8018c28:	08028bf0 	.word	0x08028bf0
 8018c2c:	7ff00000 	.word	0x7ff00000
 8018c30:	7ca00000 	.word	0x7ca00000
 8018c34:	7fefffff 	.word	0x7fefffff
 8018c38:	f015 0310 	ands.w	r3, r5, #16
 8018c3c:	bf18      	it	ne
 8018c3e:	236a      	movne	r3, #106	; 0x6a
 8018c40:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8018fe4 <_strtod_l+0x94c>
 8018c44:	9304      	str	r3, [sp, #16]
 8018c46:	4640      	mov	r0, r8
 8018c48:	4649      	mov	r1, r9
 8018c4a:	2300      	movs	r3, #0
 8018c4c:	07ea      	lsls	r2, r5, #31
 8018c4e:	d504      	bpl.n	8018c5a <_strtod_l+0x5c2>
 8018c50:	e9da 2300 	ldrd	r2, r3, [sl]
 8018c54:	f7e7 fce0 	bl	8000618 <__aeabi_dmul>
 8018c58:	2301      	movs	r3, #1
 8018c5a:	106d      	asrs	r5, r5, #1
 8018c5c:	f10a 0a08 	add.w	sl, sl, #8
 8018c60:	d1f4      	bne.n	8018c4c <_strtod_l+0x5b4>
 8018c62:	b10b      	cbz	r3, 8018c68 <_strtod_l+0x5d0>
 8018c64:	4680      	mov	r8, r0
 8018c66:	4689      	mov	r9, r1
 8018c68:	9b04      	ldr	r3, [sp, #16]
 8018c6a:	b1bb      	cbz	r3, 8018c9c <_strtod_l+0x604>
 8018c6c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8018c70:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	4649      	mov	r1, r9
 8018c78:	dd10      	ble.n	8018c9c <_strtod_l+0x604>
 8018c7a:	2b1f      	cmp	r3, #31
 8018c7c:	f340 811e 	ble.w	8018ebc <_strtod_l+0x824>
 8018c80:	2b34      	cmp	r3, #52	; 0x34
 8018c82:	bfde      	ittt	le
 8018c84:	f04f 33ff 	movle.w	r3, #4294967295
 8018c88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8018c8c:	4093      	lslle	r3, r2
 8018c8e:	f04f 0800 	mov.w	r8, #0
 8018c92:	bfcc      	ite	gt
 8018c94:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8018c98:	ea03 0901 	andle.w	r9, r3, r1
 8018c9c:	2200      	movs	r2, #0
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	4640      	mov	r0, r8
 8018ca2:	4649      	mov	r1, r9
 8018ca4:	f7e7 ff20 	bl	8000ae8 <__aeabi_dcmpeq>
 8018ca8:	2800      	cmp	r0, #0
 8018caa:	d1a6      	bne.n	8018bfa <_strtod_l+0x562>
 8018cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018cae:	9300      	str	r3, [sp, #0]
 8018cb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018cb2:	4633      	mov	r3, r6
 8018cb4:	465a      	mov	r2, fp
 8018cb6:	4620      	mov	r0, r4
 8018cb8:	f001 fa4a 	bl	801a150 <__s2b>
 8018cbc:	9009      	str	r0, [sp, #36]	; 0x24
 8018cbe:	2800      	cmp	r0, #0
 8018cc0:	f43f af2a 	beq.w	8018b18 <_strtod_l+0x480>
 8018cc4:	9a08      	ldr	r2, [sp, #32]
 8018cc6:	9b05      	ldr	r3, [sp, #20]
 8018cc8:	2a00      	cmp	r2, #0
 8018cca:	eba3 0307 	sub.w	r3, r3, r7
 8018cce:	bfa8      	it	ge
 8018cd0:	2300      	movge	r3, #0
 8018cd2:	930c      	str	r3, [sp, #48]	; 0x30
 8018cd4:	2500      	movs	r5, #0
 8018cd6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8018cda:	9312      	str	r3, [sp, #72]	; 0x48
 8018cdc:	46ab      	mov	fp, r5
 8018cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ce0:	4620      	mov	r0, r4
 8018ce2:	6859      	ldr	r1, [r3, #4]
 8018ce4:	f001 f98c 	bl	801a000 <_Balloc>
 8018ce8:	9005      	str	r0, [sp, #20]
 8018cea:	2800      	cmp	r0, #0
 8018cec:	f43f af18 	beq.w	8018b20 <_strtod_l+0x488>
 8018cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018cf2:	691a      	ldr	r2, [r3, #16]
 8018cf4:	3202      	adds	r2, #2
 8018cf6:	f103 010c 	add.w	r1, r3, #12
 8018cfa:	0092      	lsls	r2, r2, #2
 8018cfc:	300c      	adds	r0, #12
 8018cfe:	f000 fdac 	bl	801985a <memcpy>
 8018d02:	ec49 8b10 	vmov	d0, r8, r9
 8018d06:	aa18      	add	r2, sp, #96	; 0x60
 8018d08:	a917      	add	r1, sp, #92	; 0x5c
 8018d0a:	4620      	mov	r0, r4
 8018d0c:	f001 fd54 	bl	801a7b8 <__d2b>
 8018d10:	ec49 8b18 	vmov	d8, r8, r9
 8018d14:	9016      	str	r0, [sp, #88]	; 0x58
 8018d16:	2800      	cmp	r0, #0
 8018d18:	f43f af02 	beq.w	8018b20 <_strtod_l+0x488>
 8018d1c:	2101      	movs	r1, #1
 8018d1e:	4620      	mov	r0, r4
 8018d20:	f001 faae 	bl	801a280 <__i2b>
 8018d24:	4683      	mov	fp, r0
 8018d26:	2800      	cmp	r0, #0
 8018d28:	f43f aefa 	beq.w	8018b20 <_strtod_l+0x488>
 8018d2c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8018d2e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018d30:	2e00      	cmp	r6, #0
 8018d32:	bfab      	itete	ge
 8018d34:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8018d36:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8018d38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8018d3a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8018d3e:	bfac      	ite	ge
 8018d40:	eb06 0a03 	addge.w	sl, r6, r3
 8018d44:	1b9f      	sublt	r7, r3, r6
 8018d46:	9b04      	ldr	r3, [sp, #16]
 8018d48:	1af6      	subs	r6, r6, r3
 8018d4a:	4416      	add	r6, r2
 8018d4c:	4ba0      	ldr	r3, [pc, #640]	; (8018fd0 <_strtod_l+0x938>)
 8018d4e:	3e01      	subs	r6, #1
 8018d50:	429e      	cmp	r6, r3
 8018d52:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018d56:	f280 80c4 	bge.w	8018ee2 <_strtod_l+0x84a>
 8018d5a:	1b9b      	subs	r3, r3, r6
 8018d5c:	2b1f      	cmp	r3, #31
 8018d5e:	eba2 0203 	sub.w	r2, r2, r3
 8018d62:	f04f 0101 	mov.w	r1, #1
 8018d66:	f300 80b0 	bgt.w	8018eca <_strtod_l+0x832>
 8018d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8018d6e:	930e      	str	r3, [sp, #56]	; 0x38
 8018d70:	2300      	movs	r3, #0
 8018d72:	930d      	str	r3, [sp, #52]	; 0x34
 8018d74:	eb0a 0602 	add.w	r6, sl, r2
 8018d78:	9b04      	ldr	r3, [sp, #16]
 8018d7a:	45b2      	cmp	sl, r6
 8018d7c:	4417      	add	r7, r2
 8018d7e:	441f      	add	r7, r3
 8018d80:	4653      	mov	r3, sl
 8018d82:	bfa8      	it	ge
 8018d84:	4633      	movge	r3, r6
 8018d86:	42bb      	cmp	r3, r7
 8018d88:	bfa8      	it	ge
 8018d8a:	463b      	movge	r3, r7
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	bfc2      	ittt	gt
 8018d90:	1af6      	subgt	r6, r6, r3
 8018d92:	1aff      	subgt	r7, r7, r3
 8018d94:	ebaa 0a03 	subgt.w	sl, sl, r3
 8018d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	dd17      	ble.n	8018dce <_strtod_l+0x736>
 8018d9e:	4659      	mov	r1, fp
 8018da0:	461a      	mov	r2, r3
 8018da2:	4620      	mov	r0, r4
 8018da4:	f001 fb2c 	bl	801a400 <__pow5mult>
 8018da8:	4683      	mov	fp, r0
 8018daa:	2800      	cmp	r0, #0
 8018dac:	f43f aeb8 	beq.w	8018b20 <_strtod_l+0x488>
 8018db0:	4601      	mov	r1, r0
 8018db2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018db4:	4620      	mov	r0, r4
 8018db6:	f001 fa79 	bl	801a2ac <__multiply>
 8018dba:	900b      	str	r0, [sp, #44]	; 0x2c
 8018dbc:	2800      	cmp	r0, #0
 8018dbe:	f43f aeaf 	beq.w	8018b20 <_strtod_l+0x488>
 8018dc2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018dc4:	4620      	mov	r0, r4
 8018dc6:	f001 f95b 	bl	801a080 <_Bfree>
 8018dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018dcc:	9316      	str	r3, [sp, #88]	; 0x58
 8018dce:	2e00      	cmp	r6, #0
 8018dd0:	f300 808c 	bgt.w	8018eec <_strtod_l+0x854>
 8018dd4:	9b08      	ldr	r3, [sp, #32]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	dd08      	ble.n	8018dec <_strtod_l+0x754>
 8018dda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018ddc:	9905      	ldr	r1, [sp, #20]
 8018dde:	4620      	mov	r0, r4
 8018de0:	f001 fb0e 	bl	801a400 <__pow5mult>
 8018de4:	9005      	str	r0, [sp, #20]
 8018de6:	2800      	cmp	r0, #0
 8018de8:	f43f ae9a 	beq.w	8018b20 <_strtod_l+0x488>
 8018dec:	2f00      	cmp	r7, #0
 8018dee:	dd08      	ble.n	8018e02 <_strtod_l+0x76a>
 8018df0:	9905      	ldr	r1, [sp, #20]
 8018df2:	463a      	mov	r2, r7
 8018df4:	4620      	mov	r0, r4
 8018df6:	f001 fb5d 	bl	801a4b4 <__lshift>
 8018dfa:	9005      	str	r0, [sp, #20]
 8018dfc:	2800      	cmp	r0, #0
 8018dfe:	f43f ae8f 	beq.w	8018b20 <_strtod_l+0x488>
 8018e02:	f1ba 0f00 	cmp.w	sl, #0
 8018e06:	dd08      	ble.n	8018e1a <_strtod_l+0x782>
 8018e08:	4659      	mov	r1, fp
 8018e0a:	4652      	mov	r2, sl
 8018e0c:	4620      	mov	r0, r4
 8018e0e:	f001 fb51 	bl	801a4b4 <__lshift>
 8018e12:	4683      	mov	fp, r0
 8018e14:	2800      	cmp	r0, #0
 8018e16:	f43f ae83 	beq.w	8018b20 <_strtod_l+0x488>
 8018e1a:	9a05      	ldr	r2, [sp, #20]
 8018e1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018e1e:	4620      	mov	r0, r4
 8018e20:	f001 fbd0 	bl	801a5c4 <__mdiff>
 8018e24:	4605      	mov	r5, r0
 8018e26:	2800      	cmp	r0, #0
 8018e28:	f43f ae7a 	beq.w	8018b20 <_strtod_l+0x488>
 8018e2c:	68c3      	ldr	r3, [r0, #12]
 8018e2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018e30:	2300      	movs	r3, #0
 8018e32:	60c3      	str	r3, [r0, #12]
 8018e34:	4659      	mov	r1, fp
 8018e36:	f001 fba9 	bl	801a58c <__mcmp>
 8018e3a:	2800      	cmp	r0, #0
 8018e3c:	da60      	bge.n	8018f00 <_strtod_l+0x868>
 8018e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018e40:	ea53 0308 	orrs.w	r3, r3, r8
 8018e44:	f040 8084 	bne.w	8018f50 <_strtod_l+0x8b8>
 8018e48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d17f      	bne.n	8018f50 <_strtod_l+0x8b8>
 8018e50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018e54:	0d1b      	lsrs	r3, r3, #20
 8018e56:	051b      	lsls	r3, r3, #20
 8018e58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8018e5c:	d978      	bls.n	8018f50 <_strtod_l+0x8b8>
 8018e5e:	696b      	ldr	r3, [r5, #20]
 8018e60:	b913      	cbnz	r3, 8018e68 <_strtod_l+0x7d0>
 8018e62:	692b      	ldr	r3, [r5, #16]
 8018e64:	2b01      	cmp	r3, #1
 8018e66:	dd73      	ble.n	8018f50 <_strtod_l+0x8b8>
 8018e68:	4629      	mov	r1, r5
 8018e6a:	2201      	movs	r2, #1
 8018e6c:	4620      	mov	r0, r4
 8018e6e:	f001 fb21 	bl	801a4b4 <__lshift>
 8018e72:	4659      	mov	r1, fp
 8018e74:	4605      	mov	r5, r0
 8018e76:	f001 fb89 	bl	801a58c <__mcmp>
 8018e7a:	2800      	cmp	r0, #0
 8018e7c:	dd68      	ble.n	8018f50 <_strtod_l+0x8b8>
 8018e7e:	9904      	ldr	r1, [sp, #16]
 8018e80:	4a54      	ldr	r2, [pc, #336]	; (8018fd4 <_strtod_l+0x93c>)
 8018e82:	464b      	mov	r3, r9
 8018e84:	2900      	cmp	r1, #0
 8018e86:	f000 8084 	beq.w	8018f92 <_strtod_l+0x8fa>
 8018e8a:	ea02 0109 	and.w	r1, r2, r9
 8018e8e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018e92:	dc7e      	bgt.n	8018f92 <_strtod_l+0x8fa>
 8018e94:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8018e98:	f77f aeb3 	ble.w	8018c02 <_strtod_l+0x56a>
 8018e9c:	4b4e      	ldr	r3, [pc, #312]	; (8018fd8 <_strtod_l+0x940>)
 8018e9e:	4640      	mov	r0, r8
 8018ea0:	4649      	mov	r1, r9
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	f7e7 fbb8 	bl	8000618 <__aeabi_dmul>
 8018ea8:	4b4a      	ldr	r3, [pc, #296]	; (8018fd4 <_strtod_l+0x93c>)
 8018eaa:	400b      	ands	r3, r1
 8018eac:	4680      	mov	r8, r0
 8018eae:	4689      	mov	r9, r1
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	f47f ae3f 	bne.w	8018b34 <_strtod_l+0x49c>
 8018eb6:	2322      	movs	r3, #34	; 0x22
 8018eb8:	6023      	str	r3, [r4, #0]
 8018eba:	e63b      	b.n	8018b34 <_strtod_l+0x49c>
 8018ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8018ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8018ec4:	ea03 0808 	and.w	r8, r3, r8
 8018ec8:	e6e8      	b.n	8018c9c <_strtod_l+0x604>
 8018eca:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8018ece:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8018ed2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8018ed6:	36e2      	adds	r6, #226	; 0xe2
 8018ed8:	fa01 f306 	lsl.w	r3, r1, r6
 8018edc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8018ee0:	e748      	b.n	8018d74 <_strtod_l+0x6dc>
 8018ee2:	2100      	movs	r1, #0
 8018ee4:	2301      	movs	r3, #1
 8018ee6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8018eea:	e743      	b.n	8018d74 <_strtod_l+0x6dc>
 8018eec:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018eee:	4632      	mov	r2, r6
 8018ef0:	4620      	mov	r0, r4
 8018ef2:	f001 fadf 	bl	801a4b4 <__lshift>
 8018ef6:	9016      	str	r0, [sp, #88]	; 0x58
 8018ef8:	2800      	cmp	r0, #0
 8018efa:	f47f af6b 	bne.w	8018dd4 <_strtod_l+0x73c>
 8018efe:	e60f      	b.n	8018b20 <_strtod_l+0x488>
 8018f00:	46ca      	mov	sl, r9
 8018f02:	d171      	bne.n	8018fe8 <_strtod_l+0x950>
 8018f04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018f06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018f0a:	b352      	cbz	r2, 8018f62 <_strtod_l+0x8ca>
 8018f0c:	4a33      	ldr	r2, [pc, #204]	; (8018fdc <_strtod_l+0x944>)
 8018f0e:	4293      	cmp	r3, r2
 8018f10:	d12a      	bne.n	8018f68 <_strtod_l+0x8d0>
 8018f12:	9b04      	ldr	r3, [sp, #16]
 8018f14:	4641      	mov	r1, r8
 8018f16:	b1fb      	cbz	r3, 8018f58 <_strtod_l+0x8c0>
 8018f18:	4b2e      	ldr	r3, [pc, #184]	; (8018fd4 <_strtod_l+0x93c>)
 8018f1a:	ea09 0303 	and.w	r3, r9, r3
 8018f1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018f22:	f04f 32ff 	mov.w	r2, #4294967295
 8018f26:	d81a      	bhi.n	8018f5e <_strtod_l+0x8c6>
 8018f28:	0d1b      	lsrs	r3, r3, #20
 8018f2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8018f32:	4299      	cmp	r1, r3
 8018f34:	d118      	bne.n	8018f68 <_strtod_l+0x8d0>
 8018f36:	4b2a      	ldr	r3, [pc, #168]	; (8018fe0 <_strtod_l+0x948>)
 8018f38:	459a      	cmp	sl, r3
 8018f3a:	d102      	bne.n	8018f42 <_strtod_l+0x8aa>
 8018f3c:	3101      	adds	r1, #1
 8018f3e:	f43f adef 	beq.w	8018b20 <_strtod_l+0x488>
 8018f42:	4b24      	ldr	r3, [pc, #144]	; (8018fd4 <_strtod_l+0x93c>)
 8018f44:	ea0a 0303 	and.w	r3, sl, r3
 8018f48:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8018f4c:	f04f 0800 	mov.w	r8, #0
 8018f50:	9b04      	ldr	r3, [sp, #16]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d1a2      	bne.n	8018e9c <_strtod_l+0x804>
 8018f56:	e5ed      	b.n	8018b34 <_strtod_l+0x49c>
 8018f58:	f04f 33ff 	mov.w	r3, #4294967295
 8018f5c:	e7e9      	b.n	8018f32 <_strtod_l+0x89a>
 8018f5e:	4613      	mov	r3, r2
 8018f60:	e7e7      	b.n	8018f32 <_strtod_l+0x89a>
 8018f62:	ea53 0308 	orrs.w	r3, r3, r8
 8018f66:	d08a      	beq.n	8018e7e <_strtod_l+0x7e6>
 8018f68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018f6a:	b1e3      	cbz	r3, 8018fa6 <_strtod_l+0x90e>
 8018f6c:	ea13 0f0a 	tst.w	r3, sl
 8018f70:	d0ee      	beq.n	8018f50 <_strtod_l+0x8b8>
 8018f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018f74:	9a04      	ldr	r2, [sp, #16]
 8018f76:	4640      	mov	r0, r8
 8018f78:	4649      	mov	r1, r9
 8018f7a:	b1c3      	cbz	r3, 8018fae <_strtod_l+0x916>
 8018f7c:	f7ff fb70 	bl	8018660 <sulp>
 8018f80:	4602      	mov	r2, r0
 8018f82:	460b      	mov	r3, r1
 8018f84:	ec51 0b18 	vmov	r0, r1, d8
 8018f88:	f7e7 f990 	bl	80002ac <__adddf3>
 8018f8c:	4680      	mov	r8, r0
 8018f8e:	4689      	mov	r9, r1
 8018f90:	e7de      	b.n	8018f50 <_strtod_l+0x8b8>
 8018f92:	4013      	ands	r3, r2
 8018f94:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018f98:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8018f9c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8018fa0:	f04f 38ff 	mov.w	r8, #4294967295
 8018fa4:	e7d4      	b.n	8018f50 <_strtod_l+0x8b8>
 8018fa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018fa8:	ea13 0f08 	tst.w	r3, r8
 8018fac:	e7e0      	b.n	8018f70 <_strtod_l+0x8d8>
 8018fae:	f7ff fb57 	bl	8018660 <sulp>
 8018fb2:	4602      	mov	r2, r0
 8018fb4:	460b      	mov	r3, r1
 8018fb6:	ec51 0b18 	vmov	r0, r1, d8
 8018fba:	f7e7 f975 	bl	80002a8 <__aeabi_dsub>
 8018fbe:	2200      	movs	r2, #0
 8018fc0:	2300      	movs	r3, #0
 8018fc2:	4680      	mov	r8, r0
 8018fc4:	4689      	mov	r9, r1
 8018fc6:	f7e7 fd8f 	bl	8000ae8 <__aeabi_dcmpeq>
 8018fca:	2800      	cmp	r0, #0
 8018fcc:	d0c0      	beq.n	8018f50 <_strtod_l+0x8b8>
 8018fce:	e618      	b.n	8018c02 <_strtod_l+0x56a>
 8018fd0:	fffffc02 	.word	0xfffffc02
 8018fd4:	7ff00000 	.word	0x7ff00000
 8018fd8:	39500000 	.word	0x39500000
 8018fdc:	000fffff 	.word	0x000fffff
 8018fe0:	7fefffff 	.word	0x7fefffff
 8018fe4:	080289d8 	.word	0x080289d8
 8018fe8:	4659      	mov	r1, fp
 8018fea:	4628      	mov	r0, r5
 8018fec:	f001 fc3e 	bl	801a86c <__ratio>
 8018ff0:	ec57 6b10 	vmov	r6, r7, d0
 8018ff4:	ee10 0a10 	vmov	r0, s0
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018ffe:	4639      	mov	r1, r7
 8019000:	f7e7 fd86 	bl	8000b10 <__aeabi_dcmple>
 8019004:	2800      	cmp	r0, #0
 8019006:	d071      	beq.n	80190ec <_strtod_l+0xa54>
 8019008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801900a:	2b00      	cmp	r3, #0
 801900c:	d17c      	bne.n	8019108 <_strtod_l+0xa70>
 801900e:	f1b8 0f00 	cmp.w	r8, #0
 8019012:	d15a      	bne.n	80190ca <_strtod_l+0xa32>
 8019014:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019018:	2b00      	cmp	r3, #0
 801901a:	d15d      	bne.n	80190d8 <_strtod_l+0xa40>
 801901c:	4b90      	ldr	r3, [pc, #576]	; (8019260 <_strtod_l+0xbc8>)
 801901e:	2200      	movs	r2, #0
 8019020:	4630      	mov	r0, r6
 8019022:	4639      	mov	r1, r7
 8019024:	f7e7 fd6a 	bl	8000afc <__aeabi_dcmplt>
 8019028:	2800      	cmp	r0, #0
 801902a:	d15c      	bne.n	80190e6 <_strtod_l+0xa4e>
 801902c:	4630      	mov	r0, r6
 801902e:	4639      	mov	r1, r7
 8019030:	4b8c      	ldr	r3, [pc, #560]	; (8019264 <_strtod_l+0xbcc>)
 8019032:	2200      	movs	r2, #0
 8019034:	f7e7 faf0 	bl	8000618 <__aeabi_dmul>
 8019038:	4606      	mov	r6, r0
 801903a:	460f      	mov	r7, r1
 801903c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8019040:	9606      	str	r6, [sp, #24]
 8019042:	9307      	str	r3, [sp, #28]
 8019044:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019048:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801904c:	4b86      	ldr	r3, [pc, #536]	; (8019268 <_strtod_l+0xbd0>)
 801904e:	ea0a 0303 	and.w	r3, sl, r3
 8019052:	930d      	str	r3, [sp, #52]	; 0x34
 8019054:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019056:	4b85      	ldr	r3, [pc, #532]	; (801926c <_strtod_l+0xbd4>)
 8019058:	429a      	cmp	r2, r3
 801905a:	f040 8090 	bne.w	801917e <_strtod_l+0xae6>
 801905e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8019062:	ec49 8b10 	vmov	d0, r8, r9
 8019066:	f001 fb37 	bl	801a6d8 <__ulp>
 801906a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801906e:	ec51 0b10 	vmov	r0, r1, d0
 8019072:	f7e7 fad1 	bl	8000618 <__aeabi_dmul>
 8019076:	4642      	mov	r2, r8
 8019078:	464b      	mov	r3, r9
 801907a:	f7e7 f917 	bl	80002ac <__adddf3>
 801907e:	460b      	mov	r3, r1
 8019080:	4979      	ldr	r1, [pc, #484]	; (8019268 <_strtod_l+0xbd0>)
 8019082:	4a7b      	ldr	r2, [pc, #492]	; (8019270 <_strtod_l+0xbd8>)
 8019084:	4019      	ands	r1, r3
 8019086:	4291      	cmp	r1, r2
 8019088:	4680      	mov	r8, r0
 801908a:	d944      	bls.n	8019116 <_strtod_l+0xa7e>
 801908c:	ee18 2a90 	vmov	r2, s17
 8019090:	4b78      	ldr	r3, [pc, #480]	; (8019274 <_strtod_l+0xbdc>)
 8019092:	429a      	cmp	r2, r3
 8019094:	d104      	bne.n	80190a0 <_strtod_l+0xa08>
 8019096:	ee18 3a10 	vmov	r3, s16
 801909a:	3301      	adds	r3, #1
 801909c:	f43f ad40 	beq.w	8018b20 <_strtod_l+0x488>
 80190a0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8019274 <_strtod_l+0xbdc>
 80190a4:	f04f 38ff 	mov.w	r8, #4294967295
 80190a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80190aa:	4620      	mov	r0, r4
 80190ac:	f000 ffe8 	bl	801a080 <_Bfree>
 80190b0:	9905      	ldr	r1, [sp, #20]
 80190b2:	4620      	mov	r0, r4
 80190b4:	f000 ffe4 	bl	801a080 <_Bfree>
 80190b8:	4659      	mov	r1, fp
 80190ba:	4620      	mov	r0, r4
 80190bc:	f000 ffe0 	bl	801a080 <_Bfree>
 80190c0:	4629      	mov	r1, r5
 80190c2:	4620      	mov	r0, r4
 80190c4:	f000 ffdc 	bl	801a080 <_Bfree>
 80190c8:	e609      	b.n	8018cde <_strtod_l+0x646>
 80190ca:	f1b8 0f01 	cmp.w	r8, #1
 80190ce:	d103      	bne.n	80190d8 <_strtod_l+0xa40>
 80190d0:	f1b9 0f00 	cmp.w	r9, #0
 80190d4:	f43f ad95 	beq.w	8018c02 <_strtod_l+0x56a>
 80190d8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8019230 <_strtod_l+0xb98>
 80190dc:	4f60      	ldr	r7, [pc, #384]	; (8019260 <_strtod_l+0xbc8>)
 80190de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80190e2:	2600      	movs	r6, #0
 80190e4:	e7ae      	b.n	8019044 <_strtod_l+0x9ac>
 80190e6:	4f5f      	ldr	r7, [pc, #380]	; (8019264 <_strtod_l+0xbcc>)
 80190e8:	2600      	movs	r6, #0
 80190ea:	e7a7      	b.n	801903c <_strtod_l+0x9a4>
 80190ec:	4b5d      	ldr	r3, [pc, #372]	; (8019264 <_strtod_l+0xbcc>)
 80190ee:	4630      	mov	r0, r6
 80190f0:	4639      	mov	r1, r7
 80190f2:	2200      	movs	r2, #0
 80190f4:	f7e7 fa90 	bl	8000618 <__aeabi_dmul>
 80190f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80190fa:	4606      	mov	r6, r0
 80190fc:	460f      	mov	r7, r1
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d09c      	beq.n	801903c <_strtod_l+0x9a4>
 8019102:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8019106:	e79d      	b.n	8019044 <_strtod_l+0x9ac>
 8019108:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8019238 <_strtod_l+0xba0>
 801910c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019110:	ec57 6b17 	vmov	r6, r7, d7
 8019114:	e796      	b.n	8019044 <_strtod_l+0x9ac>
 8019116:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801911a:	9b04      	ldr	r3, [sp, #16]
 801911c:	46ca      	mov	sl, r9
 801911e:	2b00      	cmp	r3, #0
 8019120:	d1c2      	bne.n	80190a8 <_strtod_l+0xa10>
 8019122:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019126:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019128:	0d1b      	lsrs	r3, r3, #20
 801912a:	051b      	lsls	r3, r3, #20
 801912c:	429a      	cmp	r2, r3
 801912e:	d1bb      	bne.n	80190a8 <_strtod_l+0xa10>
 8019130:	4630      	mov	r0, r6
 8019132:	4639      	mov	r1, r7
 8019134:	f7e7 fda8 	bl	8000c88 <__aeabi_d2lz>
 8019138:	f7e7 fa40 	bl	80005bc <__aeabi_l2d>
 801913c:	4602      	mov	r2, r0
 801913e:	460b      	mov	r3, r1
 8019140:	4630      	mov	r0, r6
 8019142:	4639      	mov	r1, r7
 8019144:	f7e7 f8b0 	bl	80002a8 <__aeabi_dsub>
 8019148:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801914a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801914e:	ea43 0308 	orr.w	r3, r3, r8
 8019152:	4313      	orrs	r3, r2
 8019154:	4606      	mov	r6, r0
 8019156:	460f      	mov	r7, r1
 8019158:	d054      	beq.n	8019204 <_strtod_l+0xb6c>
 801915a:	a339      	add	r3, pc, #228	; (adr r3, 8019240 <_strtod_l+0xba8>)
 801915c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019160:	f7e7 fccc 	bl	8000afc <__aeabi_dcmplt>
 8019164:	2800      	cmp	r0, #0
 8019166:	f47f ace5 	bne.w	8018b34 <_strtod_l+0x49c>
 801916a:	a337      	add	r3, pc, #220	; (adr r3, 8019248 <_strtod_l+0xbb0>)
 801916c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019170:	4630      	mov	r0, r6
 8019172:	4639      	mov	r1, r7
 8019174:	f7e7 fce0 	bl	8000b38 <__aeabi_dcmpgt>
 8019178:	2800      	cmp	r0, #0
 801917a:	d095      	beq.n	80190a8 <_strtod_l+0xa10>
 801917c:	e4da      	b.n	8018b34 <_strtod_l+0x49c>
 801917e:	9b04      	ldr	r3, [sp, #16]
 8019180:	b333      	cbz	r3, 80191d0 <_strtod_l+0xb38>
 8019182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019184:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019188:	d822      	bhi.n	80191d0 <_strtod_l+0xb38>
 801918a:	a331      	add	r3, pc, #196	; (adr r3, 8019250 <_strtod_l+0xbb8>)
 801918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019190:	4630      	mov	r0, r6
 8019192:	4639      	mov	r1, r7
 8019194:	f7e7 fcbc 	bl	8000b10 <__aeabi_dcmple>
 8019198:	b1a0      	cbz	r0, 80191c4 <_strtod_l+0xb2c>
 801919a:	4639      	mov	r1, r7
 801919c:	4630      	mov	r0, r6
 801919e:	f7e7 fceb 	bl	8000b78 <__aeabi_d2uiz>
 80191a2:	2801      	cmp	r0, #1
 80191a4:	bf38      	it	cc
 80191a6:	2001      	movcc	r0, #1
 80191a8:	f7e7 f9bc 	bl	8000524 <__aeabi_ui2d>
 80191ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80191ae:	4606      	mov	r6, r0
 80191b0:	460f      	mov	r7, r1
 80191b2:	bb23      	cbnz	r3, 80191fe <_strtod_l+0xb66>
 80191b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80191b8:	9010      	str	r0, [sp, #64]	; 0x40
 80191ba:	9311      	str	r3, [sp, #68]	; 0x44
 80191bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80191c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80191c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80191c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80191c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80191cc:	1a9b      	subs	r3, r3, r2
 80191ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80191d0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80191d4:	eeb0 0a48 	vmov.f32	s0, s16
 80191d8:	eef0 0a68 	vmov.f32	s1, s17
 80191dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80191e0:	f001 fa7a 	bl	801a6d8 <__ulp>
 80191e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80191e8:	ec53 2b10 	vmov	r2, r3, d0
 80191ec:	f7e7 fa14 	bl	8000618 <__aeabi_dmul>
 80191f0:	ec53 2b18 	vmov	r2, r3, d8
 80191f4:	f7e7 f85a 	bl	80002ac <__adddf3>
 80191f8:	4680      	mov	r8, r0
 80191fa:	4689      	mov	r9, r1
 80191fc:	e78d      	b.n	801911a <_strtod_l+0xa82>
 80191fe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8019202:	e7db      	b.n	80191bc <_strtod_l+0xb24>
 8019204:	a314      	add	r3, pc, #80	; (adr r3, 8019258 <_strtod_l+0xbc0>)
 8019206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801920a:	f7e7 fc77 	bl	8000afc <__aeabi_dcmplt>
 801920e:	e7b3      	b.n	8019178 <_strtod_l+0xae0>
 8019210:	2300      	movs	r3, #0
 8019212:	930a      	str	r3, [sp, #40]	; 0x28
 8019214:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019216:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019218:	6013      	str	r3, [r2, #0]
 801921a:	f7ff ba7c 	b.w	8018716 <_strtod_l+0x7e>
 801921e:	2a65      	cmp	r2, #101	; 0x65
 8019220:	f43f ab75 	beq.w	801890e <_strtod_l+0x276>
 8019224:	2a45      	cmp	r2, #69	; 0x45
 8019226:	f43f ab72 	beq.w	801890e <_strtod_l+0x276>
 801922a:	2301      	movs	r3, #1
 801922c:	f7ff bbaa 	b.w	8018984 <_strtod_l+0x2ec>
 8019230:	00000000 	.word	0x00000000
 8019234:	bff00000 	.word	0xbff00000
 8019238:	00000000 	.word	0x00000000
 801923c:	3ff00000 	.word	0x3ff00000
 8019240:	94a03595 	.word	0x94a03595
 8019244:	3fdfffff 	.word	0x3fdfffff
 8019248:	35afe535 	.word	0x35afe535
 801924c:	3fe00000 	.word	0x3fe00000
 8019250:	ffc00000 	.word	0xffc00000
 8019254:	41dfffff 	.word	0x41dfffff
 8019258:	94a03595 	.word	0x94a03595
 801925c:	3fcfffff 	.word	0x3fcfffff
 8019260:	3ff00000 	.word	0x3ff00000
 8019264:	3fe00000 	.word	0x3fe00000
 8019268:	7ff00000 	.word	0x7ff00000
 801926c:	7fe00000 	.word	0x7fe00000
 8019270:	7c9fffff 	.word	0x7c9fffff
 8019274:	7fefffff 	.word	0x7fefffff

08019278 <strtof>:
 8019278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801927c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8019340 <strtof+0xc8>
 8019280:	4b2a      	ldr	r3, [pc, #168]	; (801932c <strtof+0xb4>)
 8019282:	460a      	mov	r2, r1
 8019284:	ed2d 8b02 	vpush	{d8}
 8019288:	4601      	mov	r1, r0
 801928a:	f8d8 0000 	ldr.w	r0, [r8]
 801928e:	f7ff fa03 	bl	8018698 <_strtod_l>
 8019292:	ec55 4b10 	vmov	r4, r5, d0
 8019296:	ee10 2a10 	vmov	r2, s0
 801929a:	ee10 0a10 	vmov	r0, s0
 801929e:	462b      	mov	r3, r5
 80192a0:	4629      	mov	r1, r5
 80192a2:	f7e7 fc53 	bl	8000b4c <__aeabi_dcmpun>
 80192a6:	b190      	cbz	r0, 80192ce <strtof+0x56>
 80192a8:	2d00      	cmp	r5, #0
 80192aa:	4821      	ldr	r0, [pc, #132]	; (8019330 <strtof+0xb8>)
 80192ac:	da09      	bge.n	80192c2 <strtof+0x4a>
 80192ae:	f000 faeb 	bl	8019888 <nanf>
 80192b2:	eeb1 8a40 	vneg.f32	s16, s0
 80192b6:	eeb0 0a48 	vmov.f32	s0, s16
 80192ba:	ecbd 8b02 	vpop	{d8}
 80192be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192c2:	ecbd 8b02 	vpop	{d8}
 80192c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80192ca:	f000 badd 	b.w	8019888 <nanf>
 80192ce:	4620      	mov	r0, r4
 80192d0:	4629      	mov	r1, r5
 80192d2:	f7e7 fc71 	bl	8000bb8 <__aeabi_d2f>
 80192d6:	ee08 0a10 	vmov	s16, r0
 80192da:	eddf 7a16 	vldr	s15, [pc, #88]	; 8019334 <strtof+0xbc>
 80192de:	eeb0 7ac8 	vabs.f32	s14, s16
 80192e2:	eeb4 7a67 	vcmp.f32	s14, s15
 80192e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192ea:	dd11      	ble.n	8019310 <strtof+0x98>
 80192ec:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80192f0:	4b11      	ldr	r3, [pc, #68]	; (8019338 <strtof+0xc0>)
 80192f2:	f04f 32ff 	mov.w	r2, #4294967295
 80192f6:	4620      	mov	r0, r4
 80192f8:	4639      	mov	r1, r7
 80192fa:	f7e7 fc27 	bl	8000b4c <__aeabi_dcmpun>
 80192fe:	b980      	cbnz	r0, 8019322 <strtof+0xaa>
 8019300:	4b0d      	ldr	r3, [pc, #52]	; (8019338 <strtof+0xc0>)
 8019302:	f04f 32ff 	mov.w	r2, #4294967295
 8019306:	4620      	mov	r0, r4
 8019308:	4639      	mov	r1, r7
 801930a:	f7e7 fc01 	bl	8000b10 <__aeabi_dcmple>
 801930e:	b940      	cbnz	r0, 8019322 <strtof+0xaa>
 8019310:	ee18 3a10 	vmov	r3, s16
 8019314:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8019318:	d1cd      	bne.n	80192b6 <strtof+0x3e>
 801931a:	4b08      	ldr	r3, [pc, #32]	; (801933c <strtof+0xc4>)
 801931c:	402b      	ands	r3, r5
 801931e:	2b00      	cmp	r3, #0
 8019320:	d0c9      	beq.n	80192b6 <strtof+0x3e>
 8019322:	f8d8 3000 	ldr.w	r3, [r8]
 8019326:	2222      	movs	r2, #34	; 0x22
 8019328:	601a      	str	r2, [r3, #0]
 801932a:	e7c4      	b.n	80192b6 <strtof+0x3e>
 801932c:	200001ac 	.word	0x200001ac
 8019330:	08028d5a 	.word	0x08028d5a
 8019334:	7f7fffff 	.word	0x7f7fffff
 8019338:	7fefffff 	.word	0x7fefffff
 801933c:	7ff00000 	.word	0x7ff00000
 8019340:	20000364 	.word	0x20000364

08019344 <_strtoul_l.constprop.0>:
 8019344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019348:	4f36      	ldr	r7, [pc, #216]	; (8019424 <_strtoul_l.constprop.0+0xe0>)
 801934a:	4686      	mov	lr, r0
 801934c:	460d      	mov	r5, r1
 801934e:	4628      	mov	r0, r5
 8019350:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019354:	5d3e      	ldrb	r6, [r7, r4]
 8019356:	f016 0608 	ands.w	r6, r6, #8
 801935a:	d1f8      	bne.n	801934e <_strtoul_l.constprop.0+0xa>
 801935c:	2c2d      	cmp	r4, #45	; 0x2d
 801935e:	d130      	bne.n	80193c2 <_strtoul_l.constprop.0+0x7e>
 8019360:	782c      	ldrb	r4, [r5, #0]
 8019362:	2601      	movs	r6, #1
 8019364:	1c85      	adds	r5, r0, #2
 8019366:	2b00      	cmp	r3, #0
 8019368:	d057      	beq.n	801941a <_strtoul_l.constprop.0+0xd6>
 801936a:	2b10      	cmp	r3, #16
 801936c:	d109      	bne.n	8019382 <_strtoul_l.constprop.0+0x3e>
 801936e:	2c30      	cmp	r4, #48	; 0x30
 8019370:	d107      	bne.n	8019382 <_strtoul_l.constprop.0+0x3e>
 8019372:	7828      	ldrb	r0, [r5, #0]
 8019374:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019378:	2858      	cmp	r0, #88	; 0x58
 801937a:	d149      	bne.n	8019410 <_strtoul_l.constprop.0+0xcc>
 801937c:	786c      	ldrb	r4, [r5, #1]
 801937e:	2310      	movs	r3, #16
 8019380:	3502      	adds	r5, #2
 8019382:	f04f 38ff 	mov.w	r8, #4294967295
 8019386:	2700      	movs	r7, #0
 8019388:	fbb8 f8f3 	udiv	r8, r8, r3
 801938c:	fb03 f908 	mul.w	r9, r3, r8
 8019390:	ea6f 0909 	mvn.w	r9, r9
 8019394:	4638      	mov	r0, r7
 8019396:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801939a:	f1bc 0f09 	cmp.w	ip, #9
 801939e:	d815      	bhi.n	80193cc <_strtoul_l.constprop.0+0x88>
 80193a0:	4664      	mov	r4, ip
 80193a2:	42a3      	cmp	r3, r4
 80193a4:	dd23      	ble.n	80193ee <_strtoul_l.constprop.0+0xaa>
 80193a6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80193aa:	d007      	beq.n	80193bc <_strtoul_l.constprop.0+0x78>
 80193ac:	4580      	cmp	r8, r0
 80193ae:	d31b      	bcc.n	80193e8 <_strtoul_l.constprop.0+0xa4>
 80193b0:	d101      	bne.n	80193b6 <_strtoul_l.constprop.0+0x72>
 80193b2:	45a1      	cmp	r9, r4
 80193b4:	db18      	blt.n	80193e8 <_strtoul_l.constprop.0+0xa4>
 80193b6:	fb00 4003 	mla	r0, r0, r3, r4
 80193ba:	2701      	movs	r7, #1
 80193bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80193c0:	e7e9      	b.n	8019396 <_strtoul_l.constprop.0+0x52>
 80193c2:	2c2b      	cmp	r4, #43	; 0x2b
 80193c4:	bf04      	itt	eq
 80193c6:	782c      	ldrbeq	r4, [r5, #0]
 80193c8:	1c85      	addeq	r5, r0, #2
 80193ca:	e7cc      	b.n	8019366 <_strtoul_l.constprop.0+0x22>
 80193cc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80193d0:	f1bc 0f19 	cmp.w	ip, #25
 80193d4:	d801      	bhi.n	80193da <_strtoul_l.constprop.0+0x96>
 80193d6:	3c37      	subs	r4, #55	; 0x37
 80193d8:	e7e3      	b.n	80193a2 <_strtoul_l.constprop.0+0x5e>
 80193da:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80193de:	f1bc 0f19 	cmp.w	ip, #25
 80193e2:	d804      	bhi.n	80193ee <_strtoul_l.constprop.0+0xaa>
 80193e4:	3c57      	subs	r4, #87	; 0x57
 80193e6:	e7dc      	b.n	80193a2 <_strtoul_l.constprop.0+0x5e>
 80193e8:	f04f 37ff 	mov.w	r7, #4294967295
 80193ec:	e7e6      	b.n	80193bc <_strtoul_l.constprop.0+0x78>
 80193ee:	1c7b      	adds	r3, r7, #1
 80193f0:	d106      	bne.n	8019400 <_strtoul_l.constprop.0+0xbc>
 80193f2:	2322      	movs	r3, #34	; 0x22
 80193f4:	f8ce 3000 	str.w	r3, [lr]
 80193f8:	4638      	mov	r0, r7
 80193fa:	b932      	cbnz	r2, 801940a <_strtoul_l.constprop.0+0xc6>
 80193fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019400:	b106      	cbz	r6, 8019404 <_strtoul_l.constprop.0+0xc0>
 8019402:	4240      	negs	r0, r0
 8019404:	2a00      	cmp	r2, #0
 8019406:	d0f9      	beq.n	80193fc <_strtoul_l.constprop.0+0xb8>
 8019408:	b107      	cbz	r7, 801940c <_strtoul_l.constprop.0+0xc8>
 801940a:	1e69      	subs	r1, r5, #1
 801940c:	6011      	str	r1, [r2, #0]
 801940e:	e7f5      	b.n	80193fc <_strtoul_l.constprop.0+0xb8>
 8019410:	2430      	movs	r4, #48	; 0x30
 8019412:	2b00      	cmp	r3, #0
 8019414:	d1b5      	bne.n	8019382 <_strtoul_l.constprop.0+0x3e>
 8019416:	2308      	movs	r3, #8
 8019418:	e7b3      	b.n	8019382 <_strtoul_l.constprop.0+0x3e>
 801941a:	2c30      	cmp	r4, #48	; 0x30
 801941c:	d0a9      	beq.n	8019372 <_strtoul_l.constprop.0+0x2e>
 801941e:	230a      	movs	r3, #10
 8019420:	e7af      	b.n	8019382 <_strtoul_l.constprop.0+0x3e>
 8019422:	bf00      	nop
 8019424:	08028a01 	.word	0x08028a01

08019428 <strtoul>:
 8019428:	4613      	mov	r3, r2
 801942a:	460a      	mov	r2, r1
 801942c:	4601      	mov	r1, r0
 801942e:	4802      	ldr	r0, [pc, #8]	; (8019438 <strtoul+0x10>)
 8019430:	6800      	ldr	r0, [r0, #0]
 8019432:	f7ff bf87 	b.w	8019344 <_strtoul_l.constprop.0>
 8019436:	bf00      	nop
 8019438:	20000364 	.word	0x20000364

0801943c <std>:
 801943c:	2300      	movs	r3, #0
 801943e:	b510      	push	{r4, lr}
 8019440:	4604      	mov	r4, r0
 8019442:	e9c0 3300 	strd	r3, r3, [r0]
 8019446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801944a:	6083      	str	r3, [r0, #8]
 801944c:	8181      	strh	r1, [r0, #12]
 801944e:	6643      	str	r3, [r0, #100]	; 0x64
 8019450:	81c2      	strh	r2, [r0, #14]
 8019452:	6183      	str	r3, [r0, #24]
 8019454:	4619      	mov	r1, r3
 8019456:	2208      	movs	r2, #8
 8019458:	305c      	adds	r0, #92	; 0x5c
 801945a:	f000 f92d 	bl	80196b8 <memset>
 801945e:	4b0d      	ldr	r3, [pc, #52]	; (8019494 <std+0x58>)
 8019460:	6263      	str	r3, [r4, #36]	; 0x24
 8019462:	4b0d      	ldr	r3, [pc, #52]	; (8019498 <std+0x5c>)
 8019464:	62a3      	str	r3, [r4, #40]	; 0x28
 8019466:	4b0d      	ldr	r3, [pc, #52]	; (801949c <std+0x60>)
 8019468:	62e3      	str	r3, [r4, #44]	; 0x2c
 801946a:	4b0d      	ldr	r3, [pc, #52]	; (80194a0 <std+0x64>)
 801946c:	6323      	str	r3, [r4, #48]	; 0x30
 801946e:	4b0d      	ldr	r3, [pc, #52]	; (80194a4 <std+0x68>)
 8019470:	6224      	str	r4, [r4, #32]
 8019472:	429c      	cmp	r4, r3
 8019474:	d006      	beq.n	8019484 <std+0x48>
 8019476:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801947a:	4294      	cmp	r4, r2
 801947c:	d002      	beq.n	8019484 <std+0x48>
 801947e:	33d0      	adds	r3, #208	; 0xd0
 8019480:	429c      	cmp	r4, r3
 8019482:	d105      	bne.n	8019490 <std+0x54>
 8019484:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801948c:	f000 b9da 	b.w	8019844 <__retarget_lock_init_recursive>
 8019490:	bd10      	pop	{r4, pc}
 8019492:	bf00      	nop
 8019494:	080195c1 	.word	0x080195c1
 8019498:	080195e3 	.word	0x080195e3
 801949c:	0801961b 	.word	0x0801961b
 80194a0:	0801963f 	.word	0x0801963f
 80194a4:	20007000 	.word	0x20007000

080194a8 <stdio_exit_handler>:
 80194a8:	4a02      	ldr	r2, [pc, #8]	; (80194b4 <stdio_exit_handler+0xc>)
 80194aa:	4903      	ldr	r1, [pc, #12]	; (80194b8 <stdio_exit_handler+0x10>)
 80194ac:	4803      	ldr	r0, [pc, #12]	; (80194bc <stdio_exit_handler+0x14>)
 80194ae:	f000 b869 	b.w	8019584 <_fwalk_sglue>
 80194b2:	bf00      	nop
 80194b4:	200001a0 	.word	0x200001a0
 80194b8:	0801b051 	.word	0x0801b051
 80194bc:	20000318 	.word	0x20000318

080194c0 <cleanup_stdio>:
 80194c0:	6841      	ldr	r1, [r0, #4]
 80194c2:	4b0c      	ldr	r3, [pc, #48]	; (80194f4 <cleanup_stdio+0x34>)
 80194c4:	4299      	cmp	r1, r3
 80194c6:	b510      	push	{r4, lr}
 80194c8:	4604      	mov	r4, r0
 80194ca:	d001      	beq.n	80194d0 <cleanup_stdio+0x10>
 80194cc:	f001 fdc0 	bl	801b050 <_fflush_r>
 80194d0:	68a1      	ldr	r1, [r4, #8]
 80194d2:	4b09      	ldr	r3, [pc, #36]	; (80194f8 <cleanup_stdio+0x38>)
 80194d4:	4299      	cmp	r1, r3
 80194d6:	d002      	beq.n	80194de <cleanup_stdio+0x1e>
 80194d8:	4620      	mov	r0, r4
 80194da:	f001 fdb9 	bl	801b050 <_fflush_r>
 80194de:	68e1      	ldr	r1, [r4, #12]
 80194e0:	4b06      	ldr	r3, [pc, #24]	; (80194fc <cleanup_stdio+0x3c>)
 80194e2:	4299      	cmp	r1, r3
 80194e4:	d004      	beq.n	80194f0 <cleanup_stdio+0x30>
 80194e6:	4620      	mov	r0, r4
 80194e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194ec:	f001 bdb0 	b.w	801b050 <_fflush_r>
 80194f0:	bd10      	pop	{r4, pc}
 80194f2:	bf00      	nop
 80194f4:	20007000 	.word	0x20007000
 80194f8:	20007068 	.word	0x20007068
 80194fc:	200070d0 	.word	0x200070d0

08019500 <global_stdio_init.part.0>:
 8019500:	b510      	push	{r4, lr}
 8019502:	4b0b      	ldr	r3, [pc, #44]	; (8019530 <global_stdio_init.part.0+0x30>)
 8019504:	4c0b      	ldr	r4, [pc, #44]	; (8019534 <global_stdio_init.part.0+0x34>)
 8019506:	4a0c      	ldr	r2, [pc, #48]	; (8019538 <global_stdio_init.part.0+0x38>)
 8019508:	601a      	str	r2, [r3, #0]
 801950a:	4620      	mov	r0, r4
 801950c:	2200      	movs	r2, #0
 801950e:	2104      	movs	r1, #4
 8019510:	f7ff ff94 	bl	801943c <std>
 8019514:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019518:	2201      	movs	r2, #1
 801951a:	2109      	movs	r1, #9
 801951c:	f7ff ff8e 	bl	801943c <std>
 8019520:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019524:	2202      	movs	r2, #2
 8019526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801952a:	2112      	movs	r1, #18
 801952c:	f7ff bf86 	b.w	801943c <std>
 8019530:	20007138 	.word	0x20007138
 8019534:	20007000 	.word	0x20007000
 8019538:	080194a9 	.word	0x080194a9

0801953c <__sfp_lock_acquire>:
 801953c:	4801      	ldr	r0, [pc, #4]	; (8019544 <__sfp_lock_acquire+0x8>)
 801953e:	f000 b982 	b.w	8019846 <__retarget_lock_acquire_recursive>
 8019542:	bf00      	nop
 8019544:	20007141 	.word	0x20007141

08019548 <__sfp_lock_release>:
 8019548:	4801      	ldr	r0, [pc, #4]	; (8019550 <__sfp_lock_release+0x8>)
 801954a:	f000 b97d 	b.w	8019848 <__retarget_lock_release_recursive>
 801954e:	bf00      	nop
 8019550:	20007141 	.word	0x20007141

08019554 <__sinit>:
 8019554:	b510      	push	{r4, lr}
 8019556:	4604      	mov	r4, r0
 8019558:	f7ff fff0 	bl	801953c <__sfp_lock_acquire>
 801955c:	6a23      	ldr	r3, [r4, #32]
 801955e:	b11b      	cbz	r3, 8019568 <__sinit+0x14>
 8019560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019564:	f7ff bff0 	b.w	8019548 <__sfp_lock_release>
 8019568:	4b04      	ldr	r3, [pc, #16]	; (801957c <__sinit+0x28>)
 801956a:	6223      	str	r3, [r4, #32]
 801956c:	4b04      	ldr	r3, [pc, #16]	; (8019580 <__sinit+0x2c>)
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	2b00      	cmp	r3, #0
 8019572:	d1f5      	bne.n	8019560 <__sinit+0xc>
 8019574:	f7ff ffc4 	bl	8019500 <global_stdio_init.part.0>
 8019578:	e7f2      	b.n	8019560 <__sinit+0xc>
 801957a:	bf00      	nop
 801957c:	080194c1 	.word	0x080194c1
 8019580:	20007138 	.word	0x20007138

08019584 <_fwalk_sglue>:
 8019584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019588:	4607      	mov	r7, r0
 801958a:	4688      	mov	r8, r1
 801958c:	4614      	mov	r4, r2
 801958e:	2600      	movs	r6, #0
 8019590:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019594:	f1b9 0901 	subs.w	r9, r9, #1
 8019598:	d505      	bpl.n	80195a6 <_fwalk_sglue+0x22>
 801959a:	6824      	ldr	r4, [r4, #0]
 801959c:	2c00      	cmp	r4, #0
 801959e:	d1f7      	bne.n	8019590 <_fwalk_sglue+0xc>
 80195a0:	4630      	mov	r0, r6
 80195a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195a6:	89ab      	ldrh	r3, [r5, #12]
 80195a8:	2b01      	cmp	r3, #1
 80195aa:	d907      	bls.n	80195bc <_fwalk_sglue+0x38>
 80195ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80195b0:	3301      	adds	r3, #1
 80195b2:	d003      	beq.n	80195bc <_fwalk_sglue+0x38>
 80195b4:	4629      	mov	r1, r5
 80195b6:	4638      	mov	r0, r7
 80195b8:	47c0      	blx	r8
 80195ba:	4306      	orrs	r6, r0
 80195bc:	3568      	adds	r5, #104	; 0x68
 80195be:	e7e9      	b.n	8019594 <_fwalk_sglue+0x10>

080195c0 <__sread>:
 80195c0:	b510      	push	{r4, lr}
 80195c2:	460c      	mov	r4, r1
 80195c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195c8:	f000 f8de 	bl	8019788 <_read_r>
 80195cc:	2800      	cmp	r0, #0
 80195ce:	bfab      	itete	ge
 80195d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80195d2:	89a3      	ldrhlt	r3, [r4, #12]
 80195d4:	181b      	addge	r3, r3, r0
 80195d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80195da:	bfac      	ite	ge
 80195dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80195de:	81a3      	strhlt	r3, [r4, #12]
 80195e0:	bd10      	pop	{r4, pc}

080195e2 <__swrite>:
 80195e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195e6:	461f      	mov	r7, r3
 80195e8:	898b      	ldrh	r3, [r1, #12]
 80195ea:	05db      	lsls	r3, r3, #23
 80195ec:	4605      	mov	r5, r0
 80195ee:	460c      	mov	r4, r1
 80195f0:	4616      	mov	r6, r2
 80195f2:	d505      	bpl.n	8019600 <__swrite+0x1e>
 80195f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195f8:	2302      	movs	r3, #2
 80195fa:	2200      	movs	r2, #0
 80195fc:	f000 f8b2 	bl	8019764 <_lseek_r>
 8019600:	89a3      	ldrh	r3, [r4, #12]
 8019602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019606:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801960a:	81a3      	strh	r3, [r4, #12]
 801960c:	4632      	mov	r2, r6
 801960e:	463b      	mov	r3, r7
 8019610:	4628      	mov	r0, r5
 8019612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019616:	f000 b8d9 	b.w	80197cc <_write_r>

0801961a <__sseek>:
 801961a:	b510      	push	{r4, lr}
 801961c:	460c      	mov	r4, r1
 801961e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019622:	f000 f89f 	bl	8019764 <_lseek_r>
 8019626:	1c43      	adds	r3, r0, #1
 8019628:	89a3      	ldrh	r3, [r4, #12]
 801962a:	bf15      	itete	ne
 801962c:	6560      	strne	r0, [r4, #84]	; 0x54
 801962e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019636:	81a3      	strheq	r3, [r4, #12]
 8019638:	bf18      	it	ne
 801963a:	81a3      	strhne	r3, [r4, #12]
 801963c:	bd10      	pop	{r4, pc}

0801963e <__sclose>:
 801963e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019642:	f000 b87f 	b.w	8019744 <_close_r>

08019646 <_vsniprintf_r>:
 8019646:	b530      	push	{r4, r5, lr}
 8019648:	4614      	mov	r4, r2
 801964a:	2c00      	cmp	r4, #0
 801964c:	b09b      	sub	sp, #108	; 0x6c
 801964e:	4605      	mov	r5, r0
 8019650:	461a      	mov	r2, r3
 8019652:	da05      	bge.n	8019660 <_vsniprintf_r+0x1a>
 8019654:	238b      	movs	r3, #139	; 0x8b
 8019656:	6003      	str	r3, [r0, #0]
 8019658:	f04f 30ff 	mov.w	r0, #4294967295
 801965c:	b01b      	add	sp, #108	; 0x6c
 801965e:	bd30      	pop	{r4, r5, pc}
 8019660:	f44f 7302 	mov.w	r3, #520	; 0x208
 8019664:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019668:	bf14      	ite	ne
 801966a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801966e:	4623      	moveq	r3, r4
 8019670:	9302      	str	r3, [sp, #8]
 8019672:	9305      	str	r3, [sp, #20]
 8019674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019678:	9100      	str	r1, [sp, #0]
 801967a:	9104      	str	r1, [sp, #16]
 801967c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019680:	4669      	mov	r1, sp
 8019682:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019684:	f001 f9d0 	bl	801aa28 <_svfiprintf_r>
 8019688:	1c43      	adds	r3, r0, #1
 801968a:	bfbc      	itt	lt
 801968c:	238b      	movlt	r3, #139	; 0x8b
 801968e:	602b      	strlt	r3, [r5, #0]
 8019690:	2c00      	cmp	r4, #0
 8019692:	d0e3      	beq.n	801965c <_vsniprintf_r+0x16>
 8019694:	9b00      	ldr	r3, [sp, #0]
 8019696:	2200      	movs	r2, #0
 8019698:	701a      	strb	r2, [r3, #0]
 801969a:	e7df      	b.n	801965c <_vsniprintf_r+0x16>

0801969c <vsniprintf>:
 801969c:	b507      	push	{r0, r1, r2, lr}
 801969e:	9300      	str	r3, [sp, #0]
 80196a0:	4613      	mov	r3, r2
 80196a2:	460a      	mov	r2, r1
 80196a4:	4601      	mov	r1, r0
 80196a6:	4803      	ldr	r0, [pc, #12]	; (80196b4 <vsniprintf+0x18>)
 80196a8:	6800      	ldr	r0, [r0, #0]
 80196aa:	f7ff ffcc 	bl	8019646 <_vsniprintf_r>
 80196ae:	b003      	add	sp, #12
 80196b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80196b4:	20000364 	.word	0x20000364

080196b8 <memset>:
 80196b8:	4402      	add	r2, r0
 80196ba:	4603      	mov	r3, r0
 80196bc:	4293      	cmp	r3, r2
 80196be:	d100      	bne.n	80196c2 <memset+0xa>
 80196c0:	4770      	bx	lr
 80196c2:	f803 1b01 	strb.w	r1, [r3], #1
 80196c6:	e7f9      	b.n	80196bc <memset+0x4>

080196c8 <strncmp>:
 80196c8:	b510      	push	{r4, lr}
 80196ca:	b16a      	cbz	r2, 80196e8 <strncmp+0x20>
 80196cc:	3901      	subs	r1, #1
 80196ce:	1884      	adds	r4, r0, r2
 80196d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80196d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80196d8:	429a      	cmp	r2, r3
 80196da:	d103      	bne.n	80196e4 <strncmp+0x1c>
 80196dc:	42a0      	cmp	r0, r4
 80196de:	d001      	beq.n	80196e4 <strncmp+0x1c>
 80196e0:	2a00      	cmp	r2, #0
 80196e2:	d1f5      	bne.n	80196d0 <strncmp+0x8>
 80196e4:	1ad0      	subs	r0, r2, r3
 80196e6:	bd10      	pop	{r4, pc}
 80196e8:	4610      	mov	r0, r2
 80196ea:	e7fc      	b.n	80196e6 <strncmp+0x1e>

080196ec <__strtok_r>:
 80196ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196ee:	b908      	cbnz	r0, 80196f4 <__strtok_r+0x8>
 80196f0:	6810      	ldr	r0, [r2, #0]
 80196f2:	b188      	cbz	r0, 8019718 <__strtok_r+0x2c>
 80196f4:	4604      	mov	r4, r0
 80196f6:	4620      	mov	r0, r4
 80196f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80196fc:	460f      	mov	r7, r1
 80196fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8019702:	b91e      	cbnz	r6, 801970c <__strtok_r+0x20>
 8019704:	b965      	cbnz	r5, 8019720 <__strtok_r+0x34>
 8019706:	6015      	str	r5, [r2, #0]
 8019708:	4628      	mov	r0, r5
 801970a:	e005      	b.n	8019718 <__strtok_r+0x2c>
 801970c:	42b5      	cmp	r5, r6
 801970e:	d1f6      	bne.n	80196fe <__strtok_r+0x12>
 8019710:	2b00      	cmp	r3, #0
 8019712:	d1f0      	bne.n	80196f6 <__strtok_r+0xa>
 8019714:	6014      	str	r4, [r2, #0]
 8019716:	7003      	strb	r3, [r0, #0]
 8019718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801971a:	461c      	mov	r4, r3
 801971c:	e00c      	b.n	8019738 <__strtok_r+0x4c>
 801971e:	b915      	cbnz	r5, 8019726 <__strtok_r+0x3a>
 8019720:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019724:	460e      	mov	r6, r1
 8019726:	f816 5b01 	ldrb.w	r5, [r6], #1
 801972a:	42ab      	cmp	r3, r5
 801972c:	d1f7      	bne.n	801971e <__strtok_r+0x32>
 801972e:	2b00      	cmp	r3, #0
 8019730:	d0f3      	beq.n	801971a <__strtok_r+0x2e>
 8019732:	2300      	movs	r3, #0
 8019734:	f804 3c01 	strb.w	r3, [r4, #-1]
 8019738:	6014      	str	r4, [r2, #0]
 801973a:	e7ed      	b.n	8019718 <__strtok_r+0x2c>

0801973c <strtok_r>:
 801973c:	2301      	movs	r3, #1
 801973e:	f7ff bfd5 	b.w	80196ec <__strtok_r>
	...

08019744 <_close_r>:
 8019744:	b538      	push	{r3, r4, r5, lr}
 8019746:	4d06      	ldr	r5, [pc, #24]	; (8019760 <_close_r+0x1c>)
 8019748:	2300      	movs	r3, #0
 801974a:	4604      	mov	r4, r0
 801974c:	4608      	mov	r0, r1
 801974e:	602b      	str	r3, [r5, #0]
 8019750:	f7e8 f93f 	bl	80019d2 <_close>
 8019754:	1c43      	adds	r3, r0, #1
 8019756:	d102      	bne.n	801975e <_close_r+0x1a>
 8019758:	682b      	ldr	r3, [r5, #0]
 801975a:	b103      	cbz	r3, 801975e <_close_r+0x1a>
 801975c:	6023      	str	r3, [r4, #0]
 801975e:	bd38      	pop	{r3, r4, r5, pc}
 8019760:	2000713c 	.word	0x2000713c

08019764 <_lseek_r>:
 8019764:	b538      	push	{r3, r4, r5, lr}
 8019766:	4d07      	ldr	r5, [pc, #28]	; (8019784 <_lseek_r+0x20>)
 8019768:	4604      	mov	r4, r0
 801976a:	4608      	mov	r0, r1
 801976c:	4611      	mov	r1, r2
 801976e:	2200      	movs	r2, #0
 8019770:	602a      	str	r2, [r5, #0]
 8019772:	461a      	mov	r2, r3
 8019774:	f7e8 f954 	bl	8001a20 <_lseek>
 8019778:	1c43      	adds	r3, r0, #1
 801977a:	d102      	bne.n	8019782 <_lseek_r+0x1e>
 801977c:	682b      	ldr	r3, [r5, #0]
 801977e:	b103      	cbz	r3, 8019782 <_lseek_r+0x1e>
 8019780:	6023      	str	r3, [r4, #0]
 8019782:	bd38      	pop	{r3, r4, r5, pc}
 8019784:	2000713c 	.word	0x2000713c

08019788 <_read_r>:
 8019788:	b538      	push	{r3, r4, r5, lr}
 801978a:	4d07      	ldr	r5, [pc, #28]	; (80197a8 <_read_r+0x20>)
 801978c:	4604      	mov	r4, r0
 801978e:	4608      	mov	r0, r1
 8019790:	4611      	mov	r1, r2
 8019792:	2200      	movs	r2, #0
 8019794:	602a      	str	r2, [r5, #0]
 8019796:	461a      	mov	r2, r3
 8019798:	f7e8 f8e2 	bl	8001960 <_read>
 801979c:	1c43      	adds	r3, r0, #1
 801979e:	d102      	bne.n	80197a6 <_read_r+0x1e>
 80197a0:	682b      	ldr	r3, [r5, #0]
 80197a2:	b103      	cbz	r3, 80197a6 <_read_r+0x1e>
 80197a4:	6023      	str	r3, [r4, #0]
 80197a6:	bd38      	pop	{r3, r4, r5, pc}
 80197a8:	2000713c 	.word	0x2000713c

080197ac <_sbrk_r>:
 80197ac:	b538      	push	{r3, r4, r5, lr}
 80197ae:	4d06      	ldr	r5, [pc, #24]	; (80197c8 <_sbrk_r+0x1c>)
 80197b0:	2300      	movs	r3, #0
 80197b2:	4604      	mov	r4, r0
 80197b4:	4608      	mov	r0, r1
 80197b6:	602b      	str	r3, [r5, #0]
 80197b8:	f7e8 f940 	bl	8001a3c <_sbrk>
 80197bc:	1c43      	adds	r3, r0, #1
 80197be:	d102      	bne.n	80197c6 <_sbrk_r+0x1a>
 80197c0:	682b      	ldr	r3, [r5, #0]
 80197c2:	b103      	cbz	r3, 80197c6 <_sbrk_r+0x1a>
 80197c4:	6023      	str	r3, [r4, #0]
 80197c6:	bd38      	pop	{r3, r4, r5, pc}
 80197c8:	2000713c 	.word	0x2000713c

080197cc <_write_r>:
 80197cc:	b538      	push	{r3, r4, r5, lr}
 80197ce:	4d07      	ldr	r5, [pc, #28]	; (80197ec <_write_r+0x20>)
 80197d0:	4604      	mov	r4, r0
 80197d2:	4608      	mov	r0, r1
 80197d4:	4611      	mov	r1, r2
 80197d6:	2200      	movs	r2, #0
 80197d8:	602a      	str	r2, [r5, #0]
 80197da:	461a      	mov	r2, r3
 80197dc:	f7e8 f8dd 	bl	800199a <_write>
 80197e0:	1c43      	adds	r3, r0, #1
 80197e2:	d102      	bne.n	80197ea <_write_r+0x1e>
 80197e4:	682b      	ldr	r3, [r5, #0]
 80197e6:	b103      	cbz	r3, 80197ea <_write_r+0x1e>
 80197e8:	6023      	str	r3, [r4, #0]
 80197ea:	bd38      	pop	{r3, r4, r5, pc}
 80197ec:	2000713c 	.word	0x2000713c

080197f0 <__errno>:
 80197f0:	4b01      	ldr	r3, [pc, #4]	; (80197f8 <__errno+0x8>)
 80197f2:	6818      	ldr	r0, [r3, #0]
 80197f4:	4770      	bx	lr
 80197f6:	bf00      	nop
 80197f8:	20000364 	.word	0x20000364

080197fc <__libc_init_array>:
 80197fc:	b570      	push	{r4, r5, r6, lr}
 80197fe:	4d0d      	ldr	r5, [pc, #52]	; (8019834 <__libc_init_array+0x38>)
 8019800:	4c0d      	ldr	r4, [pc, #52]	; (8019838 <__libc_init_array+0x3c>)
 8019802:	1b64      	subs	r4, r4, r5
 8019804:	10a4      	asrs	r4, r4, #2
 8019806:	2600      	movs	r6, #0
 8019808:	42a6      	cmp	r6, r4
 801980a:	d109      	bne.n	8019820 <__libc_init_array+0x24>
 801980c:	4d0b      	ldr	r5, [pc, #44]	; (801983c <__libc_init_array+0x40>)
 801980e:	4c0c      	ldr	r4, [pc, #48]	; (8019840 <__libc_init_array+0x44>)
 8019810:	f001 ff86 	bl	801b720 <_init>
 8019814:	1b64      	subs	r4, r4, r5
 8019816:	10a4      	asrs	r4, r4, #2
 8019818:	2600      	movs	r6, #0
 801981a:	42a6      	cmp	r6, r4
 801981c:	d105      	bne.n	801982a <__libc_init_array+0x2e>
 801981e:	bd70      	pop	{r4, r5, r6, pc}
 8019820:	f855 3b04 	ldr.w	r3, [r5], #4
 8019824:	4798      	blx	r3
 8019826:	3601      	adds	r6, #1
 8019828:	e7ee      	b.n	8019808 <__libc_init_array+0xc>
 801982a:	f855 3b04 	ldr.w	r3, [r5], #4
 801982e:	4798      	blx	r3
 8019830:	3601      	adds	r6, #1
 8019832:	e7f2      	b.n	801981a <__libc_init_array+0x1e>
 8019834:	08028d64 	.word	0x08028d64
 8019838:	08028d64 	.word	0x08028d64
 801983c:	08028d64 	.word	0x08028d64
 8019840:	08028d68 	.word	0x08028d68

08019844 <__retarget_lock_init_recursive>:
 8019844:	4770      	bx	lr

08019846 <__retarget_lock_acquire_recursive>:
 8019846:	4770      	bx	lr

08019848 <__retarget_lock_release_recursive>:
 8019848:	4770      	bx	lr

0801984a <strcpy>:
 801984a:	4603      	mov	r3, r0
 801984c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019850:	f803 2b01 	strb.w	r2, [r3], #1
 8019854:	2a00      	cmp	r2, #0
 8019856:	d1f9      	bne.n	801984c <strcpy+0x2>
 8019858:	4770      	bx	lr

0801985a <memcpy>:
 801985a:	440a      	add	r2, r1
 801985c:	4291      	cmp	r1, r2
 801985e:	f100 33ff 	add.w	r3, r0, #4294967295
 8019862:	d100      	bne.n	8019866 <memcpy+0xc>
 8019864:	4770      	bx	lr
 8019866:	b510      	push	{r4, lr}
 8019868:	f811 4b01 	ldrb.w	r4, [r1], #1
 801986c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019870:	4291      	cmp	r1, r2
 8019872:	d1f9      	bne.n	8019868 <memcpy+0xe>
 8019874:	bd10      	pop	{r4, pc}
	...

08019878 <nan>:
 8019878:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019880 <nan+0x8>
 801987c:	4770      	bx	lr
 801987e:	bf00      	nop
 8019880:	00000000 	.word	0x00000000
 8019884:	7ff80000 	.word	0x7ff80000

08019888 <nanf>:
 8019888:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019890 <nanf+0x8>
 801988c:	4770      	bx	lr
 801988e:	bf00      	nop
 8019890:	7fc00000 	.word	0x7fc00000

08019894 <_free_r>:
 8019894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019896:	2900      	cmp	r1, #0
 8019898:	d044      	beq.n	8019924 <_free_r+0x90>
 801989a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801989e:	9001      	str	r0, [sp, #4]
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	f1a1 0404 	sub.w	r4, r1, #4
 80198a6:	bfb8      	it	lt
 80198a8:	18e4      	addlt	r4, r4, r3
 80198aa:	f7fe fecd 	bl	8018648 <__malloc_lock>
 80198ae:	4a1e      	ldr	r2, [pc, #120]	; (8019928 <_free_r+0x94>)
 80198b0:	9801      	ldr	r0, [sp, #4]
 80198b2:	6813      	ldr	r3, [r2, #0]
 80198b4:	b933      	cbnz	r3, 80198c4 <_free_r+0x30>
 80198b6:	6063      	str	r3, [r4, #4]
 80198b8:	6014      	str	r4, [r2, #0]
 80198ba:	b003      	add	sp, #12
 80198bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80198c0:	f7fe bec8 	b.w	8018654 <__malloc_unlock>
 80198c4:	42a3      	cmp	r3, r4
 80198c6:	d908      	bls.n	80198da <_free_r+0x46>
 80198c8:	6825      	ldr	r5, [r4, #0]
 80198ca:	1961      	adds	r1, r4, r5
 80198cc:	428b      	cmp	r3, r1
 80198ce:	bf01      	itttt	eq
 80198d0:	6819      	ldreq	r1, [r3, #0]
 80198d2:	685b      	ldreq	r3, [r3, #4]
 80198d4:	1949      	addeq	r1, r1, r5
 80198d6:	6021      	streq	r1, [r4, #0]
 80198d8:	e7ed      	b.n	80198b6 <_free_r+0x22>
 80198da:	461a      	mov	r2, r3
 80198dc:	685b      	ldr	r3, [r3, #4]
 80198de:	b10b      	cbz	r3, 80198e4 <_free_r+0x50>
 80198e0:	42a3      	cmp	r3, r4
 80198e2:	d9fa      	bls.n	80198da <_free_r+0x46>
 80198e4:	6811      	ldr	r1, [r2, #0]
 80198e6:	1855      	adds	r5, r2, r1
 80198e8:	42a5      	cmp	r5, r4
 80198ea:	d10b      	bne.n	8019904 <_free_r+0x70>
 80198ec:	6824      	ldr	r4, [r4, #0]
 80198ee:	4421      	add	r1, r4
 80198f0:	1854      	adds	r4, r2, r1
 80198f2:	42a3      	cmp	r3, r4
 80198f4:	6011      	str	r1, [r2, #0]
 80198f6:	d1e0      	bne.n	80198ba <_free_r+0x26>
 80198f8:	681c      	ldr	r4, [r3, #0]
 80198fa:	685b      	ldr	r3, [r3, #4]
 80198fc:	6053      	str	r3, [r2, #4]
 80198fe:	440c      	add	r4, r1
 8019900:	6014      	str	r4, [r2, #0]
 8019902:	e7da      	b.n	80198ba <_free_r+0x26>
 8019904:	d902      	bls.n	801990c <_free_r+0x78>
 8019906:	230c      	movs	r3, #12
 8019908:	6003      	str	r3, [r0, #0]
 801990a:	e7d6      	b.n	80198ba <_free_r+0x26>
 801990c:	6825      	ldr	r5, [r4, #0]
 801990e:	1961      	adds	r1, r4, r5
 8019910:	428b      	cmp	r3, r1
 8019912:	bf04      	itt	eq
 8019914:	6819      	ldreq	r1, [r3, #0]
 8019916:	685b      	ldreq	r3, [r3, #4]
 8019918:	6063      	str	r3, [r4, #4]
 801991a:	bf04      	itt	eq
 801991c:	1949      	addeq	r1, r1, r5
 801991e:	6021      	streq	r1, [r4, #0]
 8019920:	6054      	str	r4, [r2, #4]
 8019922:	e7ca      	b.n	80198ba <_free_r+0x26>
 8019924:	b003      	add	sp, #12
 8019926:	bd30      	pop	{r4, r5, pc}
 8019928:	20006ff8 	.word	0x20006ff8

0801992c <rshift>:
 801992c:	6903      	ldr	r3, [r0, #16]
 801992e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019932:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019936:	ea4f 1261 	mov.w	r2, r1, asr #5
 801993a:	f100 0414 	add.w	r4, r0, #20
 801993e:	dd45      	ble.n	80199cc <rshift+0xa0>
 8019940:	f011 011f 	ands.w	r1, r1, #31
 8019944:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019948:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801994c:	d10c      	bne.n	8019968 <rshift+0x3c>
 801994e:	f100 0710 	add.w	r7, r0, #16
 8019952:	4629      	mov	r1, r5
 8019954:	42b1      	cmp	r1, r6
 8019956:	d334      	bcc.n	80199c2 <rshift+0x96>
 8019958:	1a9b      	subs	r3, r3, r2
 801995a:	009b      	lsls	r3, r3, #2
 801995c:	1eea      	subs	r2, r5, #3
 801995e:	4296      	cmp	r6, r2
 8019960:	bf38      	it	cc
 8019962:	2300      	movcc	r3, #0
 8019964:	4423      	add	r3, r4
 8019966:	e015      	b.n	8019994 <rshift+0x68>
 8019968:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801996c:	f1c1 0820 	rsb	r8, r1, #32
 8019970:	40cf      	lsrs	r7, r1
 8019972:	f105 0e04 	add.w	lr, r5, #4
 8019976:	46a1      	mov	r9, r4
 8019978:	4576      	cmp	r6, lr
 801997a:	46f4      	mov	ip, lr
 801997c:	d815      	bhi.n	80199aa <rshift+0x7e>
 801997e:	1a9a      	subs	r2, r3, r2
 8019980:	0092      	lsls	r2, r2, #2
 8019982:	3a04      	subs	r2, #4
 8019984:	3501      	adds	r5, #1
 8019986:	42ae      	cmp	r6, r5
 8019988:	bf38      	it	cc
 801998a:	2200      	movcc	r2, #0
 801998c:	18a3      	adds	r3, r4, r2
 801998e:	50a7      	str	r7, [r4, r2]
 8019990:	b107      	cbz	r7, 8019994 <rshift+0x68>
 8019992:	3304      	adds	r3, #4
 8019994:	1b1a      	subs	r2, r3, r4
 8019996:	42a3      	cmp	r3, r4
 8019998:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801999c:	bf08      	it	eq
 801999e:	2300      	moveq	r3, #0
 80199a0:	6102      	str	r2, [r0, #16]
 80199a2:	bf08      	it	eq
 80199a4:	6143      	streq	r3, [r0, #20]
 80199a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199aa:	f8dc c000 	ldr.w	ip, [ip]
 80199ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80199b2:	ea4c 0707 	orr.w	r7, ip, r7
 80199b6:	f849 7b04 	str.w	r7, [r9], #4
 80199ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80199be:	40cf      	lsrs	r7, r1
 80199c0:	e7da      	b.n	8019978 <rshift+0x4c>
 80199c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80199c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80199ca:	e7c3      	b.n	8019954 <rshift+0x28>
 80199cc:	4623      	mov	r3, r4
 80199ce:	e7e1      	b.n	8019994 <rshift+0x68>

080199d0 <__hexdig_fun>:
 80199d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80199d4:	2b09      	cmp	r3, #9
 80199d6:	d802      	bhi.n	80199de <__hexdig_fun+0xe>
 80199d8:	3820      	subs	r0, #32
 80199da:	b2c0      	uxtb	r0, r0
 80199dc:	4770      	bx	lr
 80199de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80199e2:	2b05      	cmp	r3, #5
 80199e4:	d801      	bhi.n	80199ea <__hexdig_fun+0x1a>
 80199e6:	3847      	subs	r0, #71	; 0x47
 80199e8:	e7f7      	b.n	80199da <__hexdig_fun+0xa>
 80199ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80199ee:	2b05      	cmp	r3, #5
 80199f0:	d801      	bhi.n	80199f6 <__hexdig_fun+0x26>
 80199f2:	3827      	subs	r0, #39	; 0x27
 80199f4:	e7f1      	b.n	80199da <__hexdig_fun+0xa>
 80199f6:	2000      	movs	r0, #0
 80199f8:	4770      	bx	lr
	...

080199fc <__gethex>:
 80199fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a00:	4617      	mov	r7, r2
 8019a02:	680a      	ldr	r2, [r1, #0]
 8019a04:	b085      	sub	sp, #20
 8019a06:	f102 0b02 	add.w	fp, r2, #2
 8019a0a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8019a0e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019a12:	4681      	mov	r9, r0
 8019a14:	468a      	mov	sl, r1
 8019a16:	9302      	str	r3, [sp, #8]
 8019a18:	32fe      	adds	r2, #254	; 0xfe
 8019a1a:	eb02 030b 	add.w	r3, r2, fp
 8019a1e:	46d8      	mov	r8, fp
 8019a20:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8019a24:	9301      	str	r3, [sp, #4]
 8019a26:	2830      	cmp	r0, #48	; 0x30
 8019a28:	d0f7      	beq.n	8019a1a <__gethex+0x1e>
 8019a2a:	f7ff ffd1 	bl	80199d0 <__hexdig_fun>
 8019a2e:	4604      	mov	r4, r0
 8019a30:	2800      	cmp	r0, #0
 8019a32:	d138      	bne.n	8019aa6 <__gethex+0xaa>
 8019a34:	49a7      	ldr	r1, [pc, #668]	; (8019cd4 <__gethex+0x2d8>)
 8019a36:	2201      	movs	r2, #1
 8019a38:	4640      	mov	r0, r8
 8019a3a:	f7ff fe45 	bl	80196c8 <strncmp>
 8019a3e:	4606      	mov	r6, r0
 8019a40:	2800      	cmp	r0, #0
 8019a42:	d169      	bne.n	8019b18 <__gethex+0x11c>
 8019a44:	f898 0001 	ldrb.w	r0, [r8, #1]
 8019a48:	465d      	mov	r5, fp
 8019a4a:	f7ff ffc1 	bl	80199d0 <__hexdig_fun>
 8019a4e:	2800      	cmp	r0, #0
 8019a50:	d064      	beq.n	8019b1c <__gethex+0x120>
 8019a52:	465a      	mov	r2, fp
 8019a54:	7810      	ldrb	r0, [r2, #0]
 8019a56:	2830      	cmp	r0, #48	; 0x30
 8019a58:	4690      	mov	r8, r2
 8019a5a:	f102 0201 	add.w	r2, r2, #1
 8019a5e:	d0f9      	beq.n	8019a54 <__gethex+0x58>
 8019a60:	f7ff ffb6 	bl	80199d0 <__hexdig_fun>
 8019a64:	2301      	movs	r3, #1
 8019a66:	fab0 f480 	clz	r4, r0
 8019a6a:	0964      	lsrs	r4, r4, #5
 8019a6c:	465e      	mov	r6, fp
 8019a6e:	9301      	str	r3, [sp, #4]
 8019a70:	4642      	mov	r2, r8
 8019a72:	4615      	mov	r5, r2
 8019a74:	3201      	adds	r2, #1
 8019a76:	7828      	ldrb	r0, [r5, #0]
 8019a78:	f7ff ffaa 	bl	80199d0 <__hexdig_fun>
 8019a7c:	2800      	cmp	r0, #0
 8019a7e:	d1f8      	bne.n	8019a72 <__gethex+0x76>
 8019a80:	4994      	ldr	r1, [pc, #592]	; (8019cd4 <__gethex+0x2d8>)
 8019a82:	2201      	movs	r2, #1
 8019a84:	4628      	mov	r0, r5
 8019a86:	f7ff fe1f 	bl	80196c8 <strncmp>
 8019a8a:	b978      	cbnz	r0, 8019aac <__gethex+0xb0>
 8019a8c:	b946      	cbnz	r6, 8019aa0 <__gethex+0xa4>
 8019a8e:	1c6e      	adds	r6, r5, #1
 8019a90:	4632      	mov	r2, r6
 8019a92:	4615      	mov	r5, r2
 8019a94:	3201      	adds	r2, #1
 8019a96:	7828      	ldrb	r0, [r5, #0]
 8019a98:	f7ff ff9a 	bl	80199d0 <__hexdig_fun>
 8019a9c:	2800      	cmp	r0, #0
 8019a9e:	d1f8      	bne.n	8019a92 <__gethex+0x96>
 8019aa0:	1b73      	subs	r3, r6, r5
 8019aa2:	009e      	lsls	r6, r3, #2
 8019aa4:	e004      	b.n	8019ab0 <__gethex+0xb4>
 8019aa6:	2400      	movs	r4, #0
 8019aa8:	4626      	mov	r6, r4
 8019aaa:	e7e1      	b.n	8019a70 <__gethex+0x74>
 8019aac:	2e00      	cmp	r6, #0
 8019aae:	d1f7      	bne.n	8019aa0 <__gethex+0xa4>
 8019ab0:	782b      	ldrb	r3, [r5, #0]
 8019ab2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019ab6:	2b50      	cmp	r3, #80	; 0x50
 8019ab8:	d13d      	bne.n	8019b36 <__gethex+0x13a>
 8019aba:	786b      	ldrb	r3, [r5, #1]
 8019abc:	2b2b      	cmp	r3, #43	; 0x2b
 8019abe:	d02f      	beq.n	8019b20 <__gethex+0x124>
 8019ac0:	2b2d      	cmp	r3, #45	; 0x2d
 8019ac2:	d031      	beq.n	8019b28 <__gethex+0x12c>
 8019ac4:	1c69      	adds	r1, r5, #1
 8019ac6:	f04f 0b00 	mov.w	fp, #0
 8019aca:	7808      	ldrb	r0, [r1, #0]
 8019acc:	f7ff ff80 	bl	80199d0 <__hexdig_fun>
 8019ad0:	1e42      	subs	r2, r0, #1
 8019ad2:	b2d2      	uxtb	r2, r2
 8019ad4:	2a18      	cmp	r2, #24
 8019ad6:	d82e      	bhi.n	8019b36 <__gethex+0x13a>
 8019ad8:	f1a0 0210 	sub.w	r2, r0, #16
 8019adc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019ae0:	f7ff ff76 	bl	80199d0 <__hexdig_fun>
 8019ae4:	f100 3cff 	add.w	ip, r0, #4294967295
 8019ae8:	fa5f fc8c 	uxtb.w	ip, ip
 8019aec:	f1bc 0f18 	cmp.w	ip, #24
 8019af0:	d91d      	bls.n	8019b2e <__gethex+0x132>
 8019af2:	f1bb 0f00 	cmp.w	fp, #0
 8019af6:	d000      	beq.n	8019afa <__gethex+0xfe>
 8019af8:	4252      	negs	r2, r2
 8019afa:	4416      	add	r6, r2
 8019afc:	f8ca 1000 	str.w	r1, [sl]
 8019b00:	b1dc      	cbz	r4, 8019b3a <__gethex+0x13e>
 8019b02:	9b01      	ldr	r3, [sp, #4]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	bf14      	ite	ne
 8019b08:	f04f 0800 	movne.w	r8, #0
 8019b0c:	f04f 0806 	moveq.w	r8, #6
 8019b10:	4640      	mov	r0, r8
 8019b12:	b005      	add	sp, #20
 8019b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b18:	4645      	mov	r5, r8
 8019b1a:	4626      	mov	r6, r4
 8019b1c:	2401      	movs	r4, #1
 8019b1e:	e7c7      	b.n	8019ab0 <__gethex+0xb4>
 8019b20:	f04f 0b00 	mov.w	fp, #0
 8019b24:	1ca9      	adds	r1, r5, #2
 8019b26:	e7d0      	b.n	8019aca <__gethex+0xce>
 8019b28:	f04f 0b01 	mov.w	fp, #1
 8019b2c:	e7fa      	b.n	8019b24 <__gethex+0x128>
 8019b2e:	230a      	movs	r3, #10
 8019b30:	fb03 0002 	mla	r0, r3, r2, r0
 8019b34:	e7d0      	b.n	8019ad8 <__gethex+0xdc>
 8019b36:	4629      	mov	r1, r5
 8019b38:	e7e0      	b.n	8019afc <__gethex+0x100>
 8019b3a:	eba5 0308 	sub.w	r3, r5, r8
 8019b3e:	3b01      	subs	r3, #1
 8019b40:	4621      	mov	r1, r4
 8019b42:	2b07      	cmp	r3, #7
 8019b44:	dc0a      	bgt.n	8019b5c <__gethex+0x160>
 8019b46:	4648      	mov	r0, r9
 8019b48:	f000 fa5a 	bl	801a000 <_Balloc>
 8019b4c:	4604      	mov	r4, r0
 8019b4e:	b940      	cbnz	r0, 8019b62 <__gethex+0x166>
 8019b50:	4b61      	ldr	r3, [pc, #388]	; (8019cd8 <__gethex+0x2dc>)
 8019b52:	4602      	mov	r2, r0
 8019b54:	21e4      	movs	r1, #228	; 0xe4
 8019b56:	4861      	ldr	r0, [pc, #388]	; (8019cdc <__gethex+0x2e0>)
 8019b58:	f001 fabc 	bl	801b0d4 <__assert_func>
 8019b5c:	3101      	adds	r1, #1
 8019b5e:	105b      	asrs	r3, r3, #1
 8019b60:	e7ef      	b.n	8019b42 <__gethex+0x146>
 8019b62:	f100 0a14 	add.w	sl, r0, #20
 8019b66:	2300      	movs	r3, #0
 8019b68:	495a      	ldr	r1, [pc, #360]	; (8019cd4 <__gethex+0x2d8>)
 8019b6a:	f8cd a004 	str.w	sl, [sp, #4]
 8019b6e:	469b      	mov	fp, r3
 8019b70:	45a8      	cmp	r8, r5
 8019b72:	d342      	bcc.n	8019bfa <__gethex+0x1fe>
 8019b74:	9801      	ldr	r0, [sp, #4]
 8019b76:	f840 bb04 	str.w	fp, [r0], #4
 8019b7a:	eba0 000a 	sub.w	r0, r0, sl
 8019b7e:	1080      	asrs	r0, r0, #2
 8019b80:	6120      	str	r0, [r4, #16]
 8019b82:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8019b86:	4658      	mov	r0, fp
 8019b88:	f000 fb2c 	bl	801a1e4 <__hi0bits>
 8019b8c:	683d      	ldr	r5, [r7, #0]
 8019b8e:	eba8 0000 	sub.w	r0, r8, r0
 8019b92:	42a8      	cmp	r0, r5
 8019b94:	dd59      	ble.n	8019c4a <__gethex+0x24e>
 8019b96:	eba0 0805 	sub.w	r8, r0, r5
 8019b9a:	4641      	mov	r1, r8
 8019b9c:	4620      	mov	r0, r4
 8019b9e:	f000 febb 	bl	801a918 <__any_on>
 8019ba2:	4683      	mov	fp, r0
 8019ba4:	b1b8      	cbz	r0, 8019bd6 <__gethex+0x1da>
 8019ba6:	f108 33ff 	add.w	r3, r8, #4294967295
 8019baa:	1159      	asrs	r1, r3, #5
 8019bac:	f003 021f 	and.w	r2, r3, #31
 8019bb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8019bb4:	f04f 0b01 	mov.w	fp, #1
 8019bb8:	fa0b f202 	lsl.w	r2, fp, r2
 8019bbc:	420a      	tst	r2, r1
 8019bbe:	d00a      	beq.n	8019bd6 <__gethex+0x1da>
 8019bc0:	455b      	cmp	r3, fp
 8019bc2:	dd06      	ble.n	8019bd2 <__gethex+0x1d6>
 8019bc4:	f1a8 0102 	sub.w	r1, r8, #2
 8019bc8:	4620      	mov	r0, r4
 8019bca:	f000 fea5 	bl	801a918 <__any_on>
 8019bce:	2800      	cmp	r0, #0
 8019bd0:	d138      	bne.n	8019c44 <__gethex+0x248>
 8019bd2:	f04f 0b02 	mov.w	fp, #2
 8019bd6:	4641      	mov	r1, r8
 8019bd8:	4620      	mov	r0, r4
 8019bda:	f7ff fea7 	bl	801992c <rshift>
 8019bde:	4446      	add	r6, r8
 8019be0:	68bb      	ldr	r3, [r7, #8]
 8019be2:	42b3      	cmp	r3, r6
 8019be4:	da41      	bge.n	8019c6a <__gethex+0x26e>
 8019be6:	4621      	mov	r1, r4
 8019be8:	4648      	mov	r0, r9
 8019bea:	f000 fa49 	bl	801a080 <_Bfree>
 8019bee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019bf0:	2300      	movs	r3, #0
 8019bf2:	6013      	str	r3, [r2, #0]
 8019bf4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8019bf8:	e78a      	b.n	8019b10 <__gethex+0x114>
 8019bfa:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8019bfe:	2a2e      	cmp	r2, #46	; 0x2e
 8019c00:	d014      	beq.n	8019c2c <__gethex+0x230>
 8019c02:	2b20      	cmp	r3, #32
 8019c04:	d106      	bne.n	8019c14 <__gethex+0x218>
 8019c06:	9b01      	ldr	r3, [sp, #4]
 8019c08:	f843 bb04 	str.w	fp, [r3], #4
 8019c0c:	f04f 0b00 	mov.w	fp, #0
 8019c10:	9301      	str	r3, [sp, #4]
 8019c12:	465b      	mov	r3, fp
 8019c14:	7828      	ldrb	r0, [r5, #0]
 8019c16:	9303      	str	r3, [sp, #12]
 8019c18:	f7ff feda 	bl	80199d0 <__hexdig_fun>
 8019c1c:	9b03      	ldr	r3, [sp, #12]
 8019c1e:	f000 000f 	and.w	r0, r0, #15
 8019c22:	4098      	lsls	r0, r3
 8019c24:	ea4b 0b00 	orr.w	fp, fp, r0
 8019c28:	3304      	adds	r3, #4
 8019c2a:	e7a1      	b.n	8019b70 <__gethex+0x174>
 8019c2c:	45a8      	cmp	r8, r5
 8019c2e:	d8e8      	bhi.n	8019c02 <__gethex+0x206>
 8019c30:	2201      	movs	r2, #1
 8019c32:	4628      	mov	r0, r5
 8019c34:	9303      	str	r3, [sp, #12]
 8019c36:	f7ff fd47 	bl	80196c8 <strncmp>
 8019c3a:	4926      	ldr	r1, [pc, #152]	; (8019cd4 <__gethex+0x2d8>)
 8019c3c:	9b03      	ldr	r3, [sp, #12]
 8019c3e:	2800      	cmp	r0, #0
 8019c40:	d1df      	bne.n	8019c02 <__gethex+0x206>
 8019c42:	e795      	b.n	8019b70 <__gethex+0x174>
 8019c44:	f04f 0b03 	mov.w	fp, #3
 8019c48:	e7c5      	b.n	8019bd6 <__gethex+0x1da>
 8019c4a:	da0b      	bge.n	8019c64 <__gethex+0x268>
 8019c4c:	eba5 0800 	sub.w	r8, r5, r0
 8019c50:	4621      	mov	r1, r4
 8019c52:	4642      	mov	r2, r8
 8019c54:	4648      	mov	r0, r9
 8019c56:	f000 fc2d 	bl	801a4b4 <__lshift>
 8019c5a:	eba6 0608 	sub.w	r6, r6, r8
 8019c5e:	4604      	mov	r4, r0
 8019c60:	f100 0a14 	add.w	sl, r0, #20
 8019c64:	f04f 0b00 	mov.w	fp, #0
 8019c68:	e7ba      	b.n	8019be0 <__gethex+0x1e4>
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	42b3      	cmp	r3, r6
 8019c6e:	dd73      	ble.n	8019d58 <__gethex+0x35c>
 8019c70:	1b9e      	subs	r6, r3, r6
 8019c72:	42b5      	cmp	r5, r6
 8019c74:	dc34      	bgt.n	8019ce0 <__gethex+0x2e4>
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	2b02      	cmp	r3, #2
 8019c7a:	d023      	beq.n	8019cc4 <__gethex+0x2c8>
 8019c7c:	2b03      	cmp	r3, #3
 8019c7e:	d025      	beq.n	8019ccc <__gethex+0x2d0>
 8019c80:	2b01      	cmp	r3, #1
 8019c82:	d115      	bne.n	8019cb0 <__gethex+0x2b4>
 8019c84:	42b5      	cmp	r5, r6
 8019c86:	d113      	bne.n	8019cb0 <__gethex+0x2b4>
 8019c88:	2d01      	cmp	r5, #1
 8019c8a:	d10b      	bne.n	8019ca4 <__gethex+0x2a8>
 8019c8c:	9a02      	ldr	r2, [sp, #8]
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	6013      	str	r3, [r2, #0]
 8019c92:	2301      	movs	r3, #1
 8019c94:	6123      	str	r3, [r4, #16]
 8019c96:	f8ca 3000 	str.w	r3, [sl]
 8019c9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019c9c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8019ca0:	601c      	str	r4, [r3, #0]
 8019ca2:	e735      	b.n	8019b10 <__gethex+0x114>
 8019ca4:	1e69      	subs	r1, r5, #1
 8019ca6:	4620      	mov	r0, r4
 8019ca8:	f000 fe36 	bl	801a918 <__any_on>
 8019cac:	2800      	cmp	r0, #0
 8019cae:	d1ed      	bne.n	8019c8c <__gethex+0x290>
 8019cb0:	4621      	mov	r1, r4
 8019cb2:	4648      	mov	r0, r9
 8019cb4:	f000 f9e4 	bl	801a080 <_Bfree>
 8019cb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019cba:	2300      	movs	r3, #0
 8019cbc:	6013      	str	r3, [r2, #0]
 8019cbe:	f04f 0850 	mov.w	r8, #80	; 0x50
 8019cc2:	e725      	b.n	8019b10 <__gethex+0x114>
 8019cc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d1f2      	bne.n	8019cb0 <__gethex+0x2b4>
 8019cca:	e7df      	b.n	8019c8c <__gethex+0x290>
 8019ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d1dc      	bne.n	8019c8c <__gethex+0x290>
 8019cd2:	e7ed      	b.n	8019cb0 <__gethex+0x2b4>
 8019cd4:	0802899c 	.word	0x0802899c
 8019cd8:	08028b09 	.word	0x08028b09
 8019cdc:	08028b1a 	.word	0x08028b1a
 8019ce0:	f106 38ff 	add.w	r8, r6, #4294967295
 8019ce4:	f1bb 0f00 	cmp.w	fp, #0
 8019ce8:	d133      	bne.n	8019d52 <__gethex+0x356>
 8019cea:	f1b8 0f00 	cmp.w	r8, #0
 8019cee:	d004      	beq.n	8019cfa <__gethex+0x2fe>
 8019cf0:	4641      	mov	r1, r8
 8019cf2:	4620      	mov	r0, r4
 8019cf4:	f000 fe10 	bl	801a918 <__any_on>
 8019cf8:	4683      	mov	fp, r0
 8019cfa:	ea4f 1268 	mov.w	r2, r8, asr #5
 8019cfe:	2301      	movs	r3, #1
 8019d00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8019d04:	f008 081f 	and.w	r8, r8, #31
 8019d08:	fa03 f308 	lsl.w	r3, r3, r8
 8019d0c:	4213      	tst	r3, r2
 8019d0e:	4631      	mov	r1, r6
 8019d10:	4620      	mov	r0, r4
 8019d12:	bf18      	it	ne
 8019d14:	f04b 0b02 	orrne.w	fp, fp, #2
 8019d18:	1bad      	subs	r5, r5, r6
 8019d1a:	f7ff fe07 	bl	801992c <rshift>
 8019d1e:	687e      	ldr	r6, [r7, #4]
 8019d20:	f04f 0802 	mov.w	r8, #2
 8019d24:	f1bb 0f00 	cmp.w	fp, #0
 8019d28:	d04a      	beq.n	8019dc0 <__gethex+0x3c4>
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	2b02      	cmp	r3, #2
 8019d2e:	d016      	beq.n	8019d5e <__gethex+0x362>
 8019d30:	2b03      	cmp	r3, #3
 8019d32:	d018      	beq.n	8019d66 <__gethex+0x36a>
 8019d34:	2b01      	cmp	r3, #1
 8019d36:	d109      	bne.n	8019d4c <__gethex+0x350>
 8019d38:	f01b 0f02 	tst.w	fp, #2
 8019d3c:	d006      	beq.n	8019d4c <__gethex+0x350>
 8019d3e:	f8da 3000 	ldr.w	r3, [sl]
 8019d42:	ea4b 0b03 	orr.w	fp, fp, r3
 8019d46:	f01b 0f01 	tst.w	fp, #1
 8019d4a:	d10f      	bne.n	8019d6c <__gethex+0x370>
 8019d4c:	f048 0810 	orr.w	r8, r8, #16
 8019d50:	e036      	b.n	8019dc0 <__gethex+0x3c4>
 8019d52:	f04f 0b01 	mov.w	fp, #1
 8019d56:	e7d0      	b.n	8019cfa <__gethex+0x2fe>
 8019d58:	f04f 0801 	mov.w	r8, #1
 8019d5c:	e7e2      	b.n	8019d24 <__gethex+0x328>
 8019d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019d60:	f1c3 0301 	rsb	r3, r3, #1
 8019d64:	930f      	str	r3, [sp, #60]	; 0x3c
 8019d66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d0ef      	beq.n	8019d4c <__gethex+0x350>
 8019d6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019d70:	f104 0214 	add.w	r2, r4, #20
 8019d74:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8019d78:	9301      	str	r3, [sp, #4]
 8019d7a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8019d7e:	2300      	movs	r3, #0
 8019d80:	4694      	mov	ip, r2
 8019d82:	f852 1b04 	ldr.w	r1, [r2], #4
 8019d86:	f1b1 3fff 	cmp.w	r1, #4294967295
 8019d8a:	d01e      	beq.n	8019dca <__gethex+0x3ce>
 8019d8c:	3101      	adds	r1, #1
 8019d8e:	f8cc 1000 	str.w	r1, [ip]
 8019d92:	f1b8 0f02 	cmp.w	r8, #2
 8019d96:	f104 0214 	add.w	r2, r4, #20
 8019d9a:	d13d      	bne.n	8019e18 <__gethex+0x41c>
 8019d9c:	683b      	ldr	r3, [r7, #0]
 8019d9e:	3b01      	subs	r3, #1
 8019da0:	42ab      	cmp	r3, r5
 8019da2:	d10b      	bne.n	8019dbc <__gethex+0x3c0>
 8019da4:	1169      	asrs	r1, r5, #5
 8019da6:	2301      	movs	r3, #1
 8019da8:	f005 051f 	and.w	r5, r5, #31
 8019dac:	fa03 f505 	lsl.w	r5, r3, r5
 8019db0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019db4:	421d      	tst	r5, r3
 8019db6:	bf18      	it	ne
 8019db8:	f04f 0801 	movne.w	r8, #1
 8019dbc:	f048 0820 	orr.w	r8, r8, #32
 8019dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019dc2:	601c      	str	r4, [r3, #0]
 8019dc4:	9b02      	ldr	r3, [sp, #8]
 8019dc6:	601e      	str	r6, [r3, #0]
 8019dc8:	e6a2      	b.n	8019b10 <__gethex+0x114>
 8019dca:	4290      	cmp	r0, r2
 8019dcc:	f842 3c04 	str.w	r3, [r2, #-4]
 8019dd0:	d8d6      	bhi.n	8019d80 <__gethex+0x384>
 8019dd2:	68a2      	ldr	r2, [r4, #8]
 8019dd4:	4593      	cmp	fp, r2
 8019dd6:	db17      	blt.n	8019e08 <__gethex+0x40c>
 8019dd8:	6861      	ldr	r1, [r4, #4]
 8019dda:	4648      	mov	r0, r9
 8019ddc:	3101      	adds	r1, #1
 8019dde:	f000 f90f 	bl	801a000 <_Balloc>
 8019de2:	4682      	mov	sl, r0
 8019de4:	b918      	cbnz	r0, 8019dee <__gethex+0x3f2>
 8019de6:	4b1b      	ldr	r3, [pc, #108]	; (8019e54 <__gethex+0x458>)
 8019de8:	4602      	mov	r2, r0
 8019dea:	2184      	movs	r1, #132	; 0x84
 8019dec:	e6b3      	b.n	8019b56 <__gethex+0x15a>
 8019dee:	6922      	ldr	r2, [r4, #16]
 8019df0:	3202      	adds	r2, #2
 8019df2:	f104 010c 	add.w	r1, r4, #12
 8019df6:	0092      	lsls	r2, r2, #2
 8019df8:	300c      	adds	r0, #12
 8019dfa:	f7ff fd2e 	bl	801985a <memcpy>
 8019dfe:	4621      	mov	r1, r4
 8019e00:	4648      	mov	r0, r9
 8019e02:	f000 f93d 	bl	801a080 <_Bfree>
 8019e06:	4654      	mov	r4, sl
 8019e08:	6922      	ldr	r2, [r4, #16]
 8019e0a:	1c51      	adds	r1, r2, #1
 8019e0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019e10:	6121      	str	r1, [r4, #16]
 8019e12:	2101      	movs	r1, #1
 8019e14:	6151      	str	r1, [r2, #20]
 8019e16:	e7bc      	b.n	8019d92 <__gethex+0x396>
 8019e18:	6921      	ldr	r1, [r4, #16]
 8019e1a:	4559      	cmp	r1, fp
 8019e1c:	dd0b      	ble.n	8019e36 <__gethex+0x43a>
 8019e1e:	2101      	movs	r1, #1
 8019e20:	4620      	mov	r0, r4
 8019e22:	f7ff fd83 	bl	801992c <rshift>
 8019e26:	68bb      	ldr	r3, [r7, #8]
 8019e28:	3601      	adds	r6, #1
 8019e2a:	42b3      	cmp	r3, r6
 8019e2c:	f6ff aedb 	blt.w	8019be6 <__gethex+0x1ea>
 8019e30:	f04f 0801 	mov.w	r8, #1
 8019e34:	e7c2      	b.n	8019dbc <__gethex+0x3c0>
 8019e36:	f015 051f 	ands.w	r5, r5, #31
 8019e3a:	d0f9      	beq.n	8019e30 <__gethex+0x434>
 8019e3c:	9b01      	ldr	r3, [sp, #4]
 8019e3e:	441a      	add	r2, r3
 8019e40:	f1c5 0520 	rsb	r5, r5, #32
 8019e44:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8019e48:	f000 f9cc 	bl	801a1e4 <__hi0bits>
 8019e4c:	42a8      	cmp	r0, r5
 8019e4e:	dbe6      	blt.n	8019e1e <__gethex+0x422>
 8019e50:	e7ee      	b.n	8019e30 <__gethex+0x434>
 8019e52:	bf00      	nop
 8019e54:	08028b09 	.word	0x08028b09

08019e58 <L_shift>:
 8019e58:	f1c2 0208 	rsb	r2, r2, #8
 8019e5c:	0092      	lsls	r2, r2, #2
 8019e5e:	b570      	push	{r4, r5, r6, lr}
 8019e60:	f1c2 0620 	rsb	r6, r2, #32
 8019e64:	6843      	ldr	r3, [r0, #4]
 8019e66:	6804      	ldr	r4, [r0, #0]
 8019e68:	fa03 f506 	lsl.w	r5, r3, r6
 8019e6c:	432c      	orrs	r4, r5
 8019e6e:	40d3      	lsrs	r3, r2
 8019e70:	6004      	str	r4, [r0, #0]
 8019e72:	f840 3f04 	str.w	r3, [r0, #4]!
 8019e76:	4288      	cmp	r0, r1
 8019e78:	d3f4      	bcc.n	8019e64 <L_shift+0xc>
 8019e7a:	bd70      	pop	{r4, r5, r6, pc}

08019e7c <__match>:
 8019e7c:	b530      	push	{r4, r5, lr}
 8019e7e:	6803      	ldr	r3, [r0, #0]
 8019e80:	3301      	adds	r3, #1
 8019e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019e86:	b914      	cbnz	r4, 8019e8e <__match+0x12>
 8019e88:	6003      	str	r3, [r0, #0]
 8019e8a:	2001      	movs	r0, #1
 8019e8c:	bd30      	pop	{r4, r5, pc}
 8019e8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019e96:	2d19      	cmp	r5, #25
 8019e98:	bf98      	it	ls
 8019e9a:	3220      	addls	r2, #32
 8019e9c:	42a2      	cmp	r2, r4
 8019e9e:	d0f0      	beq.n	8019e82 <__match+0x6>
 8019ea0:	2000      	movs	r0, #0
 8019ea2:	e7f3      	b.n	8019e8c <__match+0x10>

08019ea4 <__hexnan>:
 8019ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ea8:	680b      	ldr	r3, [r1, #0]
 8019eaa:	6801      	ldr	r1, [r0, #0]
 8019eac:	115e      	asrs	r6, r3, #5
 8019eae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019eb2:	f013 031f 	ands.w	r3, r3, #31
 8019eb6:	b087      	sub	sp, #28
 8019eb8:	bf18      	it	ne
 8019eba:	3604      	addne	r6, #4
 8019ebc:	2500      	movs	r5, #0
 8019ebe:	1f37      	subs	r7, r6, #4
 8019ec0:	4682      	mov	sl, r0
 8019ec2:	4690      	mov	r8, r2
 8019ec4:	9301      	str	r3, [sp, #4]
 8019ec6:	f846 5c04 	str.w	r5, [r6, #-4]
 8019eca:	46b9      	mov	r9, r7
 8019ecc:	463c      	mov	r4, r7
 8019ece:	9502      	str	r5, [sp, #8]
 8019ed0:	46ab      	mov	fp, r5
 8019ed2:	784a      	ldrb	r2, [r1, #1]
 8019ed4:	1c4b      	adds	r3, r1, #1
 8019ed6:	9303      	str	r3, [sp, #12]
 8019ed8:	b342      	cbz	r2, 8019f2c <__hexnan+0x88>
 8019eda:	4610      	mov	r0, r2
 8019edc:	9105      	str	r1, [sp, #20]
 8019ede:	9204      	str	r2, [sp, #16]
 8019ee0:	f7ff fd76 	bl	80199d0 <__hexdig_fun>
 8019ee4:	2800      	cmp	r0, #0
 8019ee6:	d14f      	bne.n	8019f88 <__hexnan+0xe4>
 8019ee8:	9a04      	ldr	r2, [sp, #16]
 8019eea:	9905      	ldr	r1, [sp, #20]
 8019eec:	2a20      	cmp	r2, #32
 8019eee:	d818      	bhi.n	8019f22 <__hexnan+0x7e>
 8019ef0:	9b02      	ldr	r3, [sp, #8]
 8019ef2:	459b      	cmp	fp, r3
 8019ef4:	dd13      	ble.n	8019f1e <__hexnan+0x7a>
 8019ef6:	454c      	cmp	r4, r9
 8019ef8:	d206      	bcs.n	8019f08 <__hexnan+0x64>
 8019efa:	2d07      	cmp	r5, #7
 8019efc:	dc04      	bgt.n	8019f08 <__hexnan+0x64>
 8019efe:	462a      	mov	r2, r5
 8019f00:	4649      	mov	r1, r9
 8019f02:	4620      	mov	r0, r4
 8019f04:	f7ff ffa8 	bl	8019e58 <L_shift>
 8019f08:	4544      	cmp	r4, r8
 8019f0a:	d950      	bls.n	8019fae <__hexnan+0x10a>
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	f1a4 0904 	sub.w	r9, r4, #4
 8019f12:	f844 3c04 	str.w	r3, [r4, #-4]
 8019f16:	f8cd b008 	str.w	fp, [sp, #8]
 8019f1a:	464c      	mov	r4, r9
 8019f1c:	461d      	mov	r5, r3
 8019f1e:	9903      	ldr	r1, [sp, #12]
 8019f20:	e7d7      	b.n	8019ed2 <__hexnan+0x2e>
 8019f22:	2a29      	cmp	r2, #41	; 0x29
 8019f24:	d155      	bne.n	8019fd2 <__hexnan+0x12e>
 8019f26:	3102      	adds	r1, #2
 8019f28:	f8ca 1000 	str.w	r1, [sl]
 8019f2c:	f1bb 0f00 	cmp.w	fp, #0
 8019f30:	d04f      	beq.n	8019fd2 <__hexnan+0x12e>
 8019f32:	454c      	cmp	r4, r9
 8019f34:	d206      	bcs.n	8019f44 <__hexnan+0xa0>
 8019f36:	2d07      	cmp	r5, #7
 8019f38:	dc04      	bgt.n	8019f44 <__hexnan+0xa0>
 8019f3a:	462a      	mov	r2, r5
 8019f3c:	4649      	mov	r1, r9
 8019f3e:	4620      	mov	r0, r4
 8019f40:	f7ff ff8a 	bl	8019e58 <L_shift>
 8019f44:	4544      	cmp	r4, r8
 8019f46:	d934      	bls.n	8019fb2 <__hexnan+0x10e>
 8019f48:	f1a8 0204 	sub.w	r2, r8, #4
 8019f4c:	4623      	mov	r3, r4
 8019f4e:	f853 1b04 	ldr.w	r1, [r3], #4
 8019f52:	f842 1f04 	str.w	r1, [r2, #4]!
 8019f56:	429f      	cmp	r7, r3
 8019f58:	d2f9      	bcs.n	8019f4e <__hexnan+0xaa>
 8019f5a:	1b3b      	subs	r3, r7, r4
 8019f5c:	f023 0303 	bic.w	r3, r3, #3
 8019f60:	3304      	adds	r3, #4
 8019f62:	3e03      	subs	r6, #3
 8019f64:	3401      	adds	r4, #1
 8019f66:	42a6      	cmp	r6, r4
 8019f68:	bf38      	it	cc
 8019f6a:	2304      	movcc	r3, #4
 8019f6c:	4443      	add	r3, r8
 8019f6e:	2200      	movs	r2, #0
 8019f70:	f843 2b04 	str.w	r2, [r3], #4
 8019f74:	429f      	cmp	r7, r3
 8019f76:	d2fb      	bcs.n	8019f70 <__hexnan+0xcc>
 8019f78:	683b      	ldr	r3, [r7, #0]
 8019f7a:	b91b      	cbnz	r3, 8019f84 <__hexnan+0xe0>
 8019f7c:	4547      	cmp	r7, r8
 8019f7e:	d126      	bne.n	8019fce <__hexnan+0x12a>
 8019f80:	2301      	movs	r3, #1
 8019f82:	603b      	str	r3, [r7, #0]
 8019f84:	2005      	movs	r0, #5
 8019f86:	e025      	b.n	8019fd4 <__hexnan+0x130>
 8019f88:	3501      	adds	r5, #1
 8019f8a:	2d08      	cmp	r5, #8
 8019f8c:	f10b 0b01 	add.w	fp, fp, #1
 8019f90:	dd06      	ble.n	8019fa0 <__hexnan+0xfc>
 8019f92:	4544      	cmp	r4, r8
 8019f94:	d9c3      	bls.n	8019f1e <__hexnan+0x7a>
 8019f96:	2300      	movs	r3, #0
 8019f98:	f844 3c04 	str.w	r3, [r4, #-4]
 8019f9c:	2501      	movs	r5, #1
 8019f9e:	3c04      	subs	r4, #4
 8019fa0:	6822      	ldr	r2, [r4, #0]
 8019fa2:	f000 000f 	and.w	r0, r0, #15
 8019fa6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019faa:	6020      	str	r0, [r4, #0]
 8019fac:	e7b7      	b.n	8019f1e <__hexnan+0x7a>
 8019fae:	2508      	movs	r5, #8
 8019fb0:	e7b5      	b.n	8019f1e <__hexnan+0x7a>
 8019fb2:	9b01      	ldr	r3, [sp, #4]
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d0df      	beq.n	8019f78 <__hexnan+0xd4>
 8019fb8:	f1c3 0320 	rsb	r3, r3, #32
 8019fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8019fc0:	40da      	lsrs	r2, r3
 8019fc2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8019fc6:	4013      	ands	r3, r2
 8019fc8:	f846 3c04 	str.w	r3, [r6, #-4]
 8019fcc:	e7d4      	b.n	8019f78 <__hexnan+0xd4>
 8019fce:	3f04      	subs	r7, #4
 8019fd0:	e7d2      	b.n	8019f78 <__hexnan+0xd4>
 8019fd2:	2004      	movs	r0, #4
 8019fd4:	b007      	add	sp, #28
 8019fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019fda <__ascii_mbtowc>:
 8019fda:	b082      	sub	sp, #8
 8019fdc:	b901      	cbnz	r1, 8019fe0 <__ascii_mbtowc+0x6>
 8019fde:	a901      	add	r1, sp, #4
 8019fe0:	b142      	cbz	r2, 8019ff4 <__ascii_mbtowc+0x1a>
 8019fe2:	b14b      	cbz	r3, 8019ff8 <__ascii_mbtowc+0x1e>
 8019fe4:	7813      	ldrb	r3, [r2, #0]
 8019fe6:	600b      	str	r3, [r1, #0]
 8019fe8:	7812      	ldrb	r2, [r2, #0]
 8019fea:	1e10      	subs	r0, r2, #0
 8019fec:	bf18      	it	ne
 8019fee:	2001      	movne	r0, #1
 8019ff0:	b002      	add	sp, #8
 8019ff2:	4770      	bx	lr
 8019ff4:	4610      	mov	r0, r2
 8019ff6:	e7fb      	b.n	8019ff0 <__ascii_mbtowc+0x16>
 8019ff8:	f06f 0001 	mvn.w	r0, #1
 8019ffc:	e7f8      	b.n	8019ff0 <__ascii_mbtowc+0x16>
	...

0801a000 <_Balloc>:
 801a000:	b570      	push	{r4, r5, r6, lr}
 801a002:	69c6      	ldr	r6, [r0, #28]
 801a004:	4604      	mov	r4, r0
 801a006:	460d      	mov	r5, r1
 801a008:	b976      	cbnz	r6, 801a028 <_Balloc+0x28>
 801a00a:	2010      	movs	r0, #16
 801a00c:	f7fe fa6c 	bl	80184e8 <malloc>
 801a010:	4602      	mov	r2, r0
 801a012:	61e0      	str	r0, [r4, #28]
 801a014:	b920      	cbnz	r0, 801a020 <_Balloc+0x20>
 801a016:	4b18      	ldr	r3, [pc, #96]	; (801a078 <_Balloc+0x78>)
 801a018:	4818      	ldr	r0, [pc, #96]	; (801a07c <_Balloc+0x7c>)
 801a01a:	216b      	movs	r1, #107	; 0x6b
 801a01c:	f001 f85a 	bl	801b0d4 <__assert_func>
 801a020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a024:	6006      	str	r6, [r0, #0]
 801a026:	60c6      	str	r6, [r0, #12]
 801a028:	69e6      	ldr	r6, [r4, #28]
 801a02a:	68f3      	ldr	r3, [r6, #12]
 801a02c:	b183      	cbz	r3, 801a050 <_Balloc+0x50>
 801a02e:	69e3      	ldr	r3, [r4, #28]
 801a030:	68db      	ldr	r3, [r3, #12]
 801a032:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a036:	b9b8      	cbnz	r0, 801a068 <_Balloc+0x68>
 801a038:	2101      	movs	r1, #1
 801a03a:	fa01 f605 	lsl.w	r6, r1, r5
 801a03e:	1d72      	adds	r2, r6, #5
 801a040:	0092      	lsls	r2, r2, #2
 801a042:	4620      	mov	r0, r4
 801a044:	f001 f864 	bl	801b110 <_calloc_r>
 801a048:	b160      	cbz	r0, 801a064 <_Balloc+0x64>
 801a04a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a04e:	e00e      	b.n	801a06e <_Balloc+0x6e>
 801a050:	2221      	movs	r2, #33	; 0x21
 801a052:	2104      	movs	r1, #4
 801a054:	4620      	mov	r0, r4
 801a056:	f001 f85b 	bl	801b110 <_calloc_r>
 801a05a:	69e3      	ldr	r3, [r4, #28]
 801a05c:	60f0      	str	r0, [r6, #12]
 801a05e:	68db      	ldr	r3, [r3, #12]
 801a060:	2b00      	cmp	r3, #0
 801a062:	d1e4      	bne.n	801a02e <_Balloc+0x2e>
 801a064:	2000      	movs	r0, #0
 801a066:	bd70      	pop	{r4, r5, r6, pc}
 801a068:	6802      	ldr	r2, [r0, #0]
 801a06a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a06e:	2300      	movs	r3, #0
 801a070:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a074:	e7f7      	b.n	801a066 <_Balloc+0x66>
 801a076:	bf00      	nop
 801a078:	08028b7a 	.word	0x08028b7a
 801a07c:	08028b91 	.word	0x08028b91

0801a080 <_Bfree>:
 801a080:	b570      	push	{r4, r5, r6, lr}
 801a082:	69c6      	ldr	r6, [r0, #28]
 801a084:	4605      	mov	r5, r0
 801a086:	460c      	mov	r4, r1
 801a088:	b976      	cbnz	r6, 801a0a8 <_Bfree+0x28>
 801a08a:	2010      	movs	r0, #16
 801a08c:	f7fe fa2c 	bl	80184e8 <malloc>
 801a090:	4602      	mov	r2, r0
 801a092:	61e8      	str	r0, [r5, #28]
 801a094:	b920      	cbnz	r0, 801a0a0 <_Bfree+0x20>
 801a096:	4b09      	ldr	r3, [pc, #36]	; (801a0bc <_Bfree+0x3c>)
 801a098:	4809      	ldr	r0, [pc, #36]	; (801a0c0 <_Bfree+0x40>)
 801a09a:	218f      	movs	r1, #143	; 0x8f
 801a09c:	f001 f81a 	bl	801b0d4 <__assert_func>
 801a0a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a0a4:	6006      	str	r6, [r0, #0]
 801a0a6:	60c6      	str	r6, [r0, #12]
 801a0a8:	b13c      	cbz	r4, 801a0ba <_Bfree+0x3a>
 801a0aa:	69eb      	ldr	r3, [r5, #28]
 801a0ac:	6862      	ldr	r2, [r4, #4]
 801a0ae:	68db      	ldr	r3, [r3, #12]
 801a0b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a0b4:	6021      	str	r1, [r4, #0]
 801a0b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a0ba:	bd70      	pop	{r4, r5, r6, pc}
 801a0bc:	08028b7a 	.word	0x08028b7a
 801a0c0:	08028b91 	.word	0x08028b91

0801a0c4 <__multadd>:
 801a0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0c8:	690d      	ldr	r5, [r1, #16]
 801a0ca:	4607      	mov	r7, r0
 801a0cc:	460c      	mov	r4, r1
 801a0ce:	461e      	mov	r6, r3
 801a0d0:	f101 0c14 	add.w	ip, r1, #20
 801a0d4:	2000      	movs	r0, #0
 801a0d6:	f8dc 3000 	ldr.w	r3, [ip]
 801a0da:	b299      	uxth	r1, r3
 801a0dc:	fb02 6101 	mla	r1, r2, r1, r6
 801a0e0:	0c1e      	lsrs	r6, r3, #16
 801a0e2:	0c0b      	lsrs	r3, r1, #16
 801a0e4:	fb02 3306 	mla	r3, r2, r6, r3
 801a0e8:	b289      	uxth	r1, r1
 801a0ea:	3001      	adds	r0, #1
 801a0ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a0f0:	4285      	cmp	r5, r0
 801a0f2:	f84c 1b04 	str.w	r1, [ip], #4
 801a0f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a0fa:	dcec      	bgt.n	801a0d6 <__multadd+0x12>
 801a0fc:	b30e      	cbz	r6, 801a142 <__multadd+0x7e>
 801a0fe:	68a3      	ldr	r3, [r4, #8]
 801a100:	42ab      	cmp	r3, r5
 801a102:	dc19      	bgt.n	801a138 <__multadd+0x74>
 801a104:	6861      	ldr	r1, [r4, #4]
 801a106:	4638      	mov	r0, r7
 801a108:	3101      	adds	r1, #1
 801a10a:	f7ff ff79 	bl	801a000 <_Balloc>
 801a10e:	4680      	mov	r8, r0
 801a110:	b928      	cbnz	r0, 801a11e <__multadd+0x5a>
 801a112:	4602      	mov	r2, r0
 801a114:	4b0c      	ldr	r3, [pc, #48]	; (801a148 <__multadd+0x84>)
 801a116:	480d      	ldr	r0, [pc, #52]	; (801a14c <__multadd+0x88>)
 801a118:	21ba      	movs	r1, #186	; 0xba
 801a11a:	f000 ffdb 	bl	801b0d4 <__assert_func>
 801a11e:	6922      	ldr	r2, [r4, #16]
 801a120:	3202      	adds	r2, #2
 801a122:	f104 010c 	add.w	r1, r4, #12
 801a126:	0092      	lsls	r2, r2, #2
 801a128:	300c      	adds	r0, #12
 801a12a:	f7ff fb96 	bl	801985a <memcpy>
 801a12e:	4621      	mov	r1, r4
 801a130:	4638      	mov	r0, r7
 801a132:	f7ff ffa5 	bl	801a080 <_Bfree>
 801a136:	4644      	mov	r4, r8
 801a138:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a13c:	3501      	adds	r5, #1
 801a13e:	615e      	str	r6, [r3, #20]
 801a140:	6125      	str	r5, [r4, #16]
 801a142:	4620      	mov	r0, r4
 801a144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a148:	08028b09 	.word	0x08028b09
 801a14c:	08028b91 	.word	0x08028b91

0801a150 <__s2b>:
 801a150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a154:	460c      	mov	r4, r1
 801a156:	4615      	mov	r5, r2
 801a158:	461f      	mov	r7, r3
 801a15a:	2209      	movs	r2, #9
 801a15c:	3308      	adds	r3, #8
 801a15e:	4606      	mov	r6, r0
 801a160:	fb93 f3f2 	sdiv	r3, r3, r2
 801a164:	2100      	movs	r1, #0
 801a166:	2201      	movs	r2, #1
 801a168:	429a      	cmp	r2, r3
 801a16a:	db09      	blt.n	801a180 <__s2b+0x30>
 801a16c:	4630      	mov	r0, r6
 801a16e:	f7ff ff47 	bl	801a000 <_Balloc>
 801a172:	b940      	cbnz	r0, 801a186 <__s2b+0x36>
 801a174:	4602      	mov	r2, r0
 801a176:	4b19      	ldr	r3, [pc, #100]	; (801a1dc <__s2b+0x8c>)
 801a178:	4819      	ldr	r0, [pc, #100]	; (801a1e0 <__s2b+0x90>)
 801a17a:	21d3      	movs	r1, #211	; 0xd3
 801a17c:	f000 ffaa 	bl	801b0d4 <__assert_func>
 801a180:	0052      	lsls	r2, r2, #1
 801a182:	3101      	adds	r1, #1
 801a184:	e7f0      	b.n	801a168 <__s2b+0x18>
 801a186:	9b08      	ldr	r3, [sp, #32]
 801a188:	6143      	str	r3, [r0, #20]
 801a18a:	2d09      	cmp	r5, #9
 801a18c:	f04f 0301 	mov.w	r3, #1
 801a190:	6103      	str	r3, [r0, #16]
 801a192:	dd16      	ble.n	801a1c2 <__s2b+0x72>
 801a194:	f104 0909 	add.w	r9, r4, #9
 801a198:	46c8      	mov	r8, r9
 801a19a:	442c      	add	r4, r5
 801a19c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801a1a0:	4601      	mov	r1, r0
 801a1a2:	3b30      	subs	r3, #48	; 0x30
 801a1a4:	220a      	movs	r2, #10
 801a1a6:	4630      	mov	r0, r6
 801a1a8:	f7ff ff8c 	bl	801a0c4 <__multadd>
 801a1ac:	45a0      	cmp	r8, r4
 801a1ae:	d1f5      	bne.n	801a19c <__s2b+0x4c>
 801a1b0:	f1a5 0408 	sub.w	r4, r5, #8
 801a1b4:	444c      	add	r4, r9
 801a1b6:	1b2d      	subs	r5, r5, r4
 801a1b8:	1963      	adds	r3, r4, r5
 801a1ba:	42bb      	cmp	r3, r7
 801a1bc:	db04      	blt.n	801a1c8 <__s2b+0x78>
 801a1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1c2:	340a      	adds	r4, #10
 801a1c4:	2509      	movs	r5, #9
 801a1c6:	e7f6      	b.n	801a1b6 <__s2b+0x66>
 801a1c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a1cc:	4601      	mov	r1, r0
 801a1ce:	3b30      	subs	r3, #48	; 0x30
 801a1d0:	220a      	movs	r2, #10
 801a1d2:	4630      	mov	r0, r6
 801a1d4:	f7ff ff76 	bl	801a0c4 <__multadd>
 801a1d8:	e7ee      	b.n	801a1b8 <__s2b+0x68>
 801a1da:	bf00      	nop
 801a1dc:	08028b09 	.word	0x08028b09
 801a1e0:	08028b91 	.word	0x08028b91

0801a1e4 <__hi0bits>:
 801a1e4:	0c03      	lsrs	r3, r0, #16
 801a1e6:	041b      	lsls	r3, r3, #16
 801a1e8:	b9d3      	cbnz	r3, 801a220 <__hi0bits+0x3c>
 801a1ea:	0400      	lsls	r0, r0, #16
 801a1ec:	2310      	movs	r3, #16
 801a1ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a1f2:	bf04      	itt	eq
 801a1f4:	0200      	lsleq	r0, r0, #8
 801a1f6:	3308      	addeq	r3, #8
 801a1f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a1fc:	bf04      	itt	eq
 801a1fe:	0100      	lsleq	r0, r0, #4
 801a200:	3304      	addeq	r3, #4
 801a202:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a206:	bf04      	itt	eq
 801a208:	0080      	lsleq	r0, r0, #2
 801a20a:	3302      	addeq	r3, #2
 801a20c:	2800      	cmp	r0, #0
 801a20e:	db05      	blt.n	801a21c <__hi0bits+0x38>
 801a210:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a214:	f103 0301 	add.w	r3, r3, #1
 801a218:	bf08      	it	eq
 801a21a:	2320      	moveq	r3, #32
 801a21c:	4618      	mov	r0, r3
 801a21e:	4770      	bx	lr
 801a220:	2300      	movs	r3, #0
 801a222:	e7e4      	b.n	801a1ee <__hi0bits+0xa>

0801a224 <__lo0bits>:
 801a224:	6803      	ldr	r3, [r0, #0]
 801a226:	f013 0207 	ands.w	r2, r3, #7
 801a22a:	d00c      	beq.n	801a246 <__lo0bits+0x22>
 801a22c:	07d9      	lsls	r1, r3, #31
 801a22e:	d422      	bmi.n	801a276 <__lo0bits+0x52>
 801a230:	079a      	lsls	r2, r3, #30
 801a232:	bf49      	itett	mi
 801a234:	085b      	lsrmi	r3, r3, #1
 801a236:	089b      	lsrpl	r3, r3, #2
 801a238:	6003      	strmi	r3, [r0, #0]
 801a23a:	2201      	movmi	r2, #1
 801a23c:	bf5c      	itt	pl
 801a23e:	6003      	strpl	r3, [r0, #0]
 801a240:	2202      	movpl	r2, #2
 801a242:	4610      	mov	r0, r2
 801a244:	4770      	bx	lr
 801a246:	b299      	uxth	r1, r3
 801a248:	b909      	cbnz	r1, 801a24e <__lo0bits+0x2a>
 801a24a:	0c1b      	lsrs	r3, r3, #16
 801a24c:	2210      	movs	r2, #16
 801a24e:	b2d9      	uxtb	r1, r3
 801a250:	b909      	cbnz	r1, 801a256 <__lo0bits+0x32>
 801a252:	3208      	adds	r2, #8
 801a254:	0a1b      	lsrs	r3, r3, #8
 801a256:	0719      	lsls	r1, r3, #28
 801a258:	bf04      	itt	eq
 801a25a:	091b      	lsreq	r3, r3, #4
 801a25c:	3204      	addeq	r2, #4
 801a25e:	0799      	lsls	r1, r3, #30
 801a260:	bf04      	itt	eq
 801a262:	089b      	lsreq	r3, r3, #2
 801a264:	3202      	addeq	r2, #2
 801a266:	07d9      	lsls	r1, r3, #31
 801a268:	d403      	bmi.n	801a272 <__lo0bits+0x4e>
 801a26a:	085b      	lsrs	r3, r3, #1
 801a26c:	f102 0201 	add.w	r2, r2, #1
 801a270:	d003      	beq.n	801a27a <__lo0bits+0x56>
 801a272:	6003      	str	r3, [r0, #0]
 801a274:	e7e5      	b.n	801a242 <__lo0bits+0x1e>
 801a276:	2200      	movs	r2, #0
 801a278:	e7e3      	b.n	801a242 <__lo0bits+0x1e>
 801a27a:	2220      	movs	r2, #32
 801a27c:	e7e1      	b.n	801a242 <__lo0bits+0x1e>
	...

0801a280 <__i2b>:
 801a280:	b510      	push	{r4, lr}
 801a282:	460c      	mov	r4, r1
 801a284:	2101      	movs	r1, #1
 801a286:	f7ff febb 	bl	801a000 <_Balloc>
 801a28a:	4602      	mov	r2, r0
 801a28c:	b928      	cbnz	r0, 801a29a <__i2b+0x1a>
 801a28e:	4b05      	ldr	r3, [pc, #20]	; (801a2a4 <__i2b+0x24>)
 801a290:	4805      	ldr	r0, [pc, #20]	; (801a2a8 <__i2b+0x28>)
 801a292:	f240 1145 	movw	r1, #325	; 0x145
 801a296:	f000 ff1d 	bl	801b0d4 <__assert_func>
 801a29a:	2301      	movs	r3, #1
 801a29c:	6144      	str	r4, [r0, #20]
 801a29e:	6103      	str	r3, [r0, #16]
 801a2a0:	bd10      	pop	{r4, pc}
 801a2a2:	bf00      	nop
 801a2a4:	08028b09 	.word	0x08028b09
 801a2a8:	08028b91 	.word	0x08028b91

0801a2ac <__multiply>:
 801a2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2b0:	4691      	mov	r9, r2
 801a2b2:	690a      	ldr	r2, [r1, #16]
 801a2b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a2b8:	429a      	cmp	r2, r3
 801a2ba:	bfb8      	it	lt
 801a2bc:	460b      	movlt	r3, r1
 801a2be:	460c      	mov	r4, r1
 801a2c0:	bfbc      	itt	lt
 801a2c2:	464c      	movlt	r4, r9
 801a2c4:	4699      	movlt	r9, r3
 801a2c6:	6927      	ldr	r7, [r4, #16]
 801a2c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a2cc:	68a3      	ldr	r3, [r4, #8]
 801a2ce:	6861      	ldr	r1, [r4, #4]
 801a2d0:	eb07 060a 	add.w	r6, r7, sl
 801a2d4:	42b3      	cmp	r3, r6
 801a2d6:	b085      	sub	sp, #20
 801a2d8:	bfb8      	it	lt
 801a2da:	3101      	addlt	r1, #1
 801a2dc:	f7ff fe90 	bl	801a000 <_Balloc>
 801a2e0:	b930      	cbnz	r0, 801a2f0 <__multiply+0x44>
 801a2e2:	4602      	mov	r2, r0
 801a2e4:	4b44      	ldr	r3, [pc, #272]	; (801a3f8 <__multiply+0x14c>)
 801a2e6:	4845      	ldr	r0, [pc, #276]	; (801a3fc <__multiply+0x150>)
 801a2e8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801a2ec:	f000 fef2 	bl	801b0d4 <__assert_func>
 801a2f0:	f100 0514 	add.w	r5, r0, #20
 801a2f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a2f8:	462b      	mov	r3, r5
 801a2fa:	2200      	movs	r2, #0
 801a2fc:	4543      	cmp	r3, r8
 801a2fe:	d321      	bcc.n	801a344 <__multiply+0x98>
 801a300:	f104 0314 	add.w	r3, r4, #20
 801a304:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801a308:	f109 0314 	add.w	r3, r9, #20
 801a30c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801a310:	9202      	str	r2, [sp, #8]
 801a312:	1b3a      	subs	r2, r7, r4
 801a314:	3a15      	subs	r2, #21
 801a316:	f022 0203 	bic.w	r2, r2, #3
 801a31a:	3204      	adds	r2, #4
 801a31c:	f104 0115 	add.w	r1, r4, #21
 801a320:	428f      	cmp	r7, r1
 801a322:	bf38      	it	cc
 801a324:	2204      	movcc	r2, #4
 801a326:	9201      	str	r2, [sp, #4]
 801a328:	9a02      	ldr	r2, [sp, #8]
 801a32a:	9303      	str	r3, [sp, #12]
 801a32c:	429a      	cmp	r2, r3
 801a32e:	d80c      	bhi.n	801a34a <__multiply+0x9e>
 801a330:	2e00      	cmp	r6, #0
 801a332:	dd03      	ble.n	801a33c <__multiply+0x90>
 801a334:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d05b      	beq.n	801a3f4 <__multiply+0x148>
 801a33c:	6106      	str	r6, [r0, #16]
 801a33e:	b005      	add	sp, #20
 801a340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a344:	f843 2b04 	str.w	r2, [r3], #4
 801a348:	e7d8      	b.n	801a2fc <__multiply+0x50>
 801a34a:	f8b3 a000 	ldrh.w	sl, [r3]
 801a34e:	f1ba 0f00 	cmp.w	sl, #0
 801a352:	d024      	beq.n	801a39e <__multiply+0xf2>
 801a354:	f104 0e14 	add.w	lr, r4, #20
 801a358:	46a9      	mov	r9, r5
 801a35a:	f04f 0c00 	mov.w	ip, #0
 801a35e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801a362:	f8d9 1000 	ldr.w	r1, [r9]
 801a366:	fa1f fb82 	uxth.w	fp, r2
 801a36a:	b289      	uxth	r1, r1
 801a36c:	fb0a 110b 	mla	r1, sl, fp, r1
 801a370:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801a374:	f8d9 2000 	ldr.w	r2, [r9]
 801a378:	4461      	add	r1, ip
 801a37a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a37e:	fb0a c20b 	mla	r2, sl, fp, ip
 801a382:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a386:	b289      	uxth	r1, r1
 801a388:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a38c:	4577      	cmp	r7, lr
 801a38e:	f849 1b04 	str.w	r1, [r9], #4
 801a392:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a396:	d8e2      	bhi.n	801a35e <__multiply+0xb2>
 801a398:	9a01      	ldr	r2, [sp, #4]
 801a39a:	f845 c002 	str.w	ip, [r5, r2]
 801a39e:	9a03      	ldr	r2, [sp, #12]
 801a3a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a3a4:	3304      	adds	r3, #4
 801a3a6:	f1b9 0f00 	cmp.w	r9, #0
 801a3aa:	d021      	beq.n	801a3f0 <__multiply+0x144>
 801a3ac:	6829      	ldr	r1, [r5, #0]
 801a3ae:	f104 0c14 	add.w	ip, r4, #20
 801a3b2:	46ae      	mov	lr, r5
 801a3b4:	f04f 0a00 	mov.w	sl, #0
 801a3b8:	f8bc b000 	ldrh.w	fp, [ip]
 801a3bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801a3c0:	fb09 220b 	mla	r2, r9, fp, r2
 801a3c4:	4452      	add	r2, sl
 801a3c6:	b289      	uxth	r1, r1
 801a3c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a3cc:	f84e 1b04 	str.w	r1, [lr], #4
 801a3d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 801a3d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a3d8:	f8be 1000 	ldrh.w	r1, [lr]
 801a3dc:	fb09 110a 	mla	r1, r9, sl, r1
 801a3e0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801a3e4:	4567      	cmp	r7, ip
 801a3e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a3ea:	d8e5      	bhi.n	801a3b8 <__multiply+0x10c>
 801a3ec:	9a01      	ldr	r2, [sp, #4]
 801a3ee:	50a9      	str	r1, [r5, r2]
 801a3f0:	3504      	adds	r5, #4
 801a3f2:	e799      	b.n	801a328 <__multiply+0x7c>
 801a3f4:	3e01      	subs	r6, #1
 801a3f6:	e79b      	b.n	801a330 <__multiply+0x84>
 801a3f8:	08028b09 	.word	0x08028b09
 801a3fc:	08028b91 	.word	0x08028b91

0801a400 <__pow5mult>:
 801a400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a404:	4615      	mov	r5, r2
 801a406:	f012 0203 	ands.w	r2, r2, #3
 801a40a:	4606      	mov	r6, r0
 801a40c:	460f      	mov	r7, r1
 801a40e:	d007      	beq.n	801a420 <__pow5mult+0x20>
 801a410:	4c25      	ldr	r4, [pc, #148]	; (801a4a8 <__pow5mult+0xa8>)
 801a412:	3a01      	subs	r2, #1
 801a414:	2300      	movs	r3, #0
 801a416:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a41a:	f7ff fe53 	bl	801a0c4 <__multadd>
 801a41e:	4607      	mov	r7, r0
 801a420:	10ad      	asrs	r5, r5, #2
 801a422:	d03d      	beq.n	801a4a0 <__pow5mult+0xa0>
 801a424:	69f4      	ldr	r4, [r6, #28]
 801a426:	b97c      	cbnz	r4, 801a448 <__pow5mult+0x48>
 801a428:	2010      	movs	r0, #16
 801a42a:	f7fe f85d 	bl	80184e8 <malloc>
 801a42e:	4602      	mov	r2, r0
 801a430:	61f0      	str	r0, [r6, #28]
 801a432:	b928      	cbnz	r0, 801a440 <__pow5mult+0x40>
 801a434:	4b1d      	ldr	r3, [pc, #116]	; (801a4ac <__pow5mult+0xac>)
 801a436:	481e      	ldr	r0, [pc, #120]	; (801a4b0 <__pow5mult+0xb0>)
 801a438:	f240 11b3 	movw	r1, #435	; 0x1b3
 801a43c:	f000 fe4a 	bl	801b0d4 <__assert_func>
 801a440:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a444:	6004      	str	r4, [r0, #0]
 801a446:	60c4      	str	r4, [r0, #12]
 801a448:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801a44c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a450:	b94c      	cbnz	r4, 801a466 <__pow5mult+0x66>
 801a452:	f240 2171 	movw	r1, #625	; 0x271
 801a456:	4630      	mov	r0, r6
 801a458:	f7ff ff12 	bl	801a280 <__i2b>
 801a45c:	2300      	movs	r3, #0
 801a45e:	f8c8 0008 	str.w	r0, [r8, #8]
 801a462:	4604      	mov	r4, r0
 801a464:	6003      	str	r3, [r0, #0]
 801a466:	f04f 0900 	mov.w	r9, #0
 801a46a:	07eb      	lsls	r3, r5, #31
 801a46c:	d50a      	bpl.n	801a484 <__pow5mult+0x84>
 801a46e:	4639      	mov	r1, r7
 801a470:	4622      	mov	r2, r4
 801a472:	4630      	mov	r0, r6
 801a474:	f7ff ff1a 	bl	801a2ac <__multiply>
 801a478:	4639      	mov	r1, r7
 801a47a:	4680      	mov	r8, r0
 801a47c:	4630      	mov	r0, r6
 801a47e:	f7ff fdff 	bl	801a080 <_Bfree>
 801a482:	4647      	mov	r7, r8
 801a484:	106d      	asrs	r5, r5, #1
 801a486:	d00b      	beq.n	801a4a0 <__pow5mult+0xa0>
 801a488:	6820      	ldr	r0, [r4, #0]
 801a48a:	b938      	cbnz	r0, 801a49c <__pow5mult+0x9c>
 801a48c:	4622      	mov	r2, r4
 801a48e:	4621      	mov	r1, r4
 801a490:	4630      	mov	r0, r6
 801a492:	f7ff ff0b 	bl	801a2ac <__multiply>
 801a496:	6020      	str	r0, [r4, #0]
 801a498:	f8c0 9000 	str.w	r9, [r0]
 801a49c:	4604      	mov	r4, r0
 801a49e:	e7e4      	b.n	801a46a <__pow5mult+0x6a>
 801a4a0:	4638      	mov	r0, r7
 801a4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a4a6:	bf00      	nop
 801a4a8:	08028ce0 	.word	0x08028ce0
 801a4ac:	08028b7a 	.word	0x08028b7a
 801a4b0:	08028b91 	.word	0x08028b91

0801a4b4 <__lshift>:
 801a4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a4b8:	460c      	mov	r4, r1
 801a4ba:	6849      	ldr	r1, [r1, #4]
 801a4bc:	6923      	ldr	r3, [r4, #16]
 801a4be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a4c2:	68a3      	ldr	r3, [r4, #8]
 801a4c4:	4607      	mov	r7, r0
 801a4c6:	4691      	mov	r9, r2
 801a4c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a4cc:	f108 0601 	add.w	r6, r8, #1
 801a4d0:	42b3      	cmp	r3, r6
 801a4d2:	db0b      	blt.n	801a4ec <__lshift+0x38>
 801a4d4:	4638      	mov	r0, r7
 801a4d6:	f7ff fd93 	bl	801a000 <_Balloc>
 801a4da:	4605      	mov	r5, r0
 801a4dc:	b948      	cbnz	r0, 801a4f2 <__lshift+0x3e>
 801a4de:	4602      	mov	r2, r0
 801a4e0:	4b28      	ldr	r3, [pc, #160]	; (801a584 <__lshift+0xd0>)
 801a4e2:	4829      	ldr	r0, [pc, #164]	; (801a588 <__lshift+0xd4>)
 801a4e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801a4e8:	f000 fdf4 	bl	801b0d4 <__assert_func>
 801a4ec:	3101      	adds	r1, #1
 801a4ee:	005b      	lsls	r3, r3, #1
 801a4f0:	e7ee      	b.n	801a4d0 <__lshift+0x1c>
 801a4f2:	2300      	movs	r3, #0
 801a4f4:	f100 0114 	add.w	r1, r0, #20
 801a4f8:	f100 0210 	add.w	r2, r0, #16
 801a4fc:	4618      	mov	r0, r3
 801a4fe:	4553      	cmp	r3, sl
 801a500:	db33      	blt.n	801a56a <__lshift+0xb6>
 801a502:	6920      	ldr	r0, [r4, #16]
 801a504:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a508:	f104 0314 	add.w	r3, r4, #20
 801a50c:	f019 091f 	ands.w	r9, r9, #31
 801a510:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a514:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a518:	d02b      	beq.n	801a572 <__lshift+0xbe>
 801a51a:	f1c9 0e20 	rsb	lr, r9, #32
 801a51e:	468a      	mov	sl, r1
 801a520:	2200      	movs	r2, #0
 801a522:	6818      	ldr	r0, [r3, #0]
 801a524:	fa00 f009 	lsl.w	r0, r0, r9
 801a528:	4310      	orrs	r0, r2
 801a52a:	f84a 0b04 	str.w	r0, [sl], #4
 801a52e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a532:	459c      	cmp	ip, r3
 801a534:	fa22 f20e 	lsr.w	r2, r2, lr
 801a538:	d8f3      	bhi.n	801a522 <__lshift+0x6e>
 801a53a:	ebac 0304 	sub.w	r3, ip, r4
 801a53e:	3b15      	subs	r3, #21
 801a540:	f023 0303 	bic.w	r3, r3, #3
 801a544:	3304      	adds	r3, #4
 801a546:	f104 0015 	add.w	r0, r4, #21
 801a54a:	4584      	cmp	ip, r0
 801a54c:	bf38      	it	cc
 801a54e:	2304      	movcc	r3, #4
 801a550:	50ca      	str	r2, [r1, r3]
 801a552:	b10a      	cbz	r2, 801a558 <__lshift+0xa4>
 801a554:	f108 0602 	add.w	r6, r8, #2
 801a558:	3e01      	subs	r6, #1
 801a55a:	4638      	mov	r0, r7
 801a55c:	612e      	str	r6, [r5, #16]
 801a55e:	4621      	mov	r1, r4
 801a560:	f7ff fd8e 	bl	801a080 <_Bfree>
 801a564:	4628      	mov	r0, r5
 801a566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a56a:	f842 0f04 	str.w	r0, [r2, #4]!
 801a56e:	3301      	adds	r3, #1
 801a570:	e7c5      	b.n	801a4fe <__lshift+0x4a>
 801a572:	3904      	subs	r1, #4
 801a574:	f853 2b04 	ldr.w	r2, [r3], #4
 801a578:	f841 2f04 	str.w	r2, [r1, #4]!
 801a57c:	459c      	cmp	ip, r3
 801a57e:	d8f9      	bhi.n	801a574 <__lshift+0xc0>
 801a580:	e7ea      	b.n	801a558 <__lshift+0xa4>
 801a582:	bf00      	nop
 801a584:	08028b09 	.word	0x08028b09
 801a588:	08028b91 	.word	0x08028b91

0801a58c <__mcmp>:
 801a58c:	b530      	push	{r4, r5, lr}
 801a58e:	6902      	ldr	r2, [r0, #16]
 801a590:	690c      	ldr	r4, [r1, #16]
 801a592:	1b12      	subs	r2, r2, r4
 801a594:	d10e      	bne.n	801a5b4 <__mcmp+0x28>
 801a596:	f100 0314 	add.w	r3, r0, #20
 801a59a:	3114      	adds	r1, #20
 801a59c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a5a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a5a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a5a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a5ac:	42a5      	cmp	r5, r4
 801a5ae:	d003      	beq.n	801a5b8 <__mcmp+0x2c>
 801a5b0:	d305      	bcc.n	801a5be <__mcmp+0x32>
 801a5b2:	2201      	movs	r2, #1
 801a5b4:	4610      	mov	r0, r2
 801a5b6:	bd30      	pop	{r4, r5, pc}
 801a5b8:	4283      	cmp	r3, r0
 801a5ba:	d3f3      	bcc.n	801a5a4 <__mcmp+0x18>
 801a5bc:	e7fa      	b.n	801a5b4 <__mcmp+0x28>
 801a5be:	f04f 32ff 	mov.w	r2, #4294967295
 801a5c2:	e7f7      	b.n	801a5b4 <__mcmp+0x28>

0801a5c4 <__mdiff>:
 801a5c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5c8:	460c      	mov	r4, r1
 801a5ca:	4606      	mov	r6, r0
 801a5cc:	4611      	mov	r1, r2
 801a5ce:	4620      	mov	r0, r4
 801a5d0:	4690      	mov	r8, r2
 801a5d2:	f7ff ffdb 	bl	801a58c <__mcmp>
 801a5d6:	1e05      	subs	r5, r0, #0
 801a5d8:	d110      	bne.n	801a5fc <__mdiff+0x38>
 801a5da:	4629      	mov	r1, r5
 801a5dc:	4630      	mov	r0, r6
 801a5de:	f7ff fd0f 	bl	801a000 <_Balloc>
 801a5e2:	b930      	cbnz	r0, 801a5f2 <__mdiff+0x2e>
 801a5e4:	4b3a      	ldr	r3, [pc, #232]	; (801a6d0 <__mdiff+0x10c>)
 801a5e6:	4602      	mov	r2, r0
 801a5e8:	f240 2137 	movw	r1, #567	; 0x237
 801a5ec:	4839      	ldr	r0, [pc, #228]	; (801a6d4 <__mdiff+0x110>)
 801a5ee:	f000 fd71 	bl	801b0d4 <__assert_func>
 801a5f2:	2301      	movs	r3, #1
 801a5f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a5f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5fc:	bfa4      	itt	ge
 801a5fe:	4643      	movge	r3, r8
 801a600:	46a0      	movge	r8, r4
 801a602:	4630      	mov	r0, r6
 801a604:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a608:	bfa6      	itte	ge
 801a60a:	461c      	movge	r4, r3
 801a60c:	2500      	movge	r5, #0
 801a60e:	2501      	movlt	r5, #1
 801a610:	f7ff fcf6 	bl	801a000 <_Balloc>
 801a614:	b920      	cbnz	r0, 801a620 <__mdiff+0x5c>
 801a616:	4b2e      	ldr	r3, [pc, #184]	; (801a6d0 <__mdiff+0x10c>)
 801a618:	4602      	mov	r2, r0
 801a61a:	f240 2145 	movw	r1, #581	; 0x245
 801a61e:	e7e5      	b.n	801a5ec <__mdiff+0x28>
 801a620:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a624:	6926      	ldr	r6, [r4, #16]
 801a626:	60c5      	str	r5, [r0, #12]
 801a628:	f104 0914 	add.w	r9, r4, #20
 801a62c:	f108 0514 	add.w	r5, r8, #20
 801a630:	f100 0e14 	add.w	lr, r0, #20
 801a634:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801a638:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801a63c:	f108 0210 	add.w	r2, r8, #16
 801a640:	46f2      	mov	sl, lr
 801a642:	2100      	movs	r1, #0
 801a644:	f859 3b04 	ldr.w	r3, [r9], #4
 801a648:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a64c:	fa11 f88b 	uxtah	r8, r1, fp
 801a650:	b299      	uxth	r1, r3
 801a652:	0c1b      	lsrs	r3, r3, #16
 801a654:	eba8 0801 	sub.w	r8, r8, r1
 801a658:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a65c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a660:	fa1f f888 	uxth.w	r8, r8
 801a664:	1419      	asrs	r1, r3, #16
 801a666:	454e      	cmp	r6, r9
 801a668:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a66c:	f84a 3b04 	str.w	r3, [sl], #4
 801a670:	d8e8      	bhi.n	801a644 <__mdiff+0x80>
 801a672:	1b33      	subs	r3, r6, r4
 801a674:	3b15      	subs	r3, #21
 801a676:	f023 0303 	bic.w	r3, r3, #3
 801a67a:	3304      	adds	r3, #4
 801a67c:	3415      	adds	r4, #21
 801a67e:	42a6      	cmp	r6, r4
 801a680:	bf38      	it	cc
 801a682:	2304      	movcc	r3, #4
 801a684:	441d      	add	r5, r3
 801a686:	4473      	add	r3, lr
 801a688:	469e      	mov	lr, r3
 801a68a:	462e      	mov	r6, r5
 801a68c:	4566      	cmp	r6, ip
 801a68e:	d30e      	bcc.n	801a6ae <__mdiff+0xea>
 801a690:	f10c 0203 	add.w	r2, ip, #3
 801a694:	1b52      	subs	r2, r2, r5
 801a696:	f022 0203 	bic.w	r2, r2, #3
 801a69a:	3d03      	subs	r5, #3
 801a69c:	45ac      	cmp	ip, r5
 801a69e:	bf38      	it	cc
 801a6a0:	2200      	movcc	r2, #0
 801a6a2:	4413      	add	r3, r2
 801a6a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a6a8:	b17a      	cbz	r2, 801a6ca <__mdiff+0x106>
 801a6aa:	6107      	str	r7, [r0, #16]
 801a6ac:	e7a4      	b.n	801a5f8 <__mdiff+0x34>
 801a6ae:	f856 8b04 	ldr.w	r8, [r6], #4
 801a6b2:	fa11 f288 	uxtah	r2, r1, r8
 801a6b6:	1414      	asrs	r4, r2, #16
 801a6b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801a6bc:	b292      	uxth	r2, r2
 801a6be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801a6c2:	f84e 2b04 	str.w	r2, [lr], #4
 801a6c6:	1421      	asrs	r1, r4, #16
 801a6c8:	e7e0      	b.n	801a68c <__mdiff+0xc8>
 801a6ca:	3f01      	subs	r7, #1
 801a6cc:	e7ea      	b.n	801a6a4 <__mdiff+0xe0>
 801a6ce:	bf00      	nop
 801a6d0:	08028b09 	.word	0x08028b09
 801a6d4:	08028b91 	.word	0x08028b91

0801a6d8 <__ulp>:
 801a6d8:	b082      	sub	sp, #8
 801a6da:	ed8d 0b00 	vstr	d0, [sp]
 801a6de:	9a01      	ldr	r2, [sp, #4]
 801a6e0:	4b0f      	ldr	r3, [pc, #60]	; (801a720 <__ulp+0x48>)
 801a6e2:	4013      	ands	r3, r2
 801a6e4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	dc08      	bgt.n	801a6fe <__ulp+0x26>
 801a6ec:	425b      	negs	r3, r3
 801a6ee:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801a6f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a6f6:	da04      	bge.n	801a702 <__ulp+0x2a>
 801a6f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801a6fc:	4113      	asrs	r3, r2
 801a6fe:	2200      	movs	r2, #0
 801a700:	e008      	b.n	801a714 <__ulp+0x3c>
 801a702:	f1a2 0314 	sub.w	r3, r2, #20
 801a706:	2b1e      	cmp	r3, #30
 801a708:	bfda      	itte	le
 801a70a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801a70e:	40da      	lsrle	r2, r3
 801a710:	2201      	movgt	r2, #1
 801a712:	2300      	movs	r3, #0
 801a714:	4619      	mov	r1, r3
 801a716:	4610      	mov	r0, r2
 801a718:	ec41 0b10 	vmov	d0, r0, r1
 801a71c:	b002      	add	sp, #8
 801a71e:	4770      	bx	lr
 801a720:	7ff00000 	.word	0x7ff00000

0801a724 <__b2d>:
 801a724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a728:	6906      	ldr	r6, [r0, #16]
 801a72a:	f100 0814 	add.w	r8, r0, #20
 801a72e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801a732:	1f37      	subs	r7, r6, #4
 801a734:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a738:	4610      	mov	r0, r2
 801a73a:	f7ff fd53 	bl	801a1e4 <__hi0bits>
 801a73e:	f1c0 0320 	rsb	r3, r0, #32
 801a742:	280a      	cmp	r0, #10
 801a744:	600b      	str	r3, [r1, #0]
 801a746:	491b      	ldr	r1, [pc, #108]	; (801a7b4 <__b2d+0x90>)
 801a748:	dc15      	bgt.n	801a776 <__b2d+0x52>
 801a74a:	f1c0 0c0b 	rsb	ip, r0, #11
 801a74e:	fa22 f30c 	lsr.w	r3, r2, ip
 801a752:	45b8      	cmp	r8, r7
 801a754:	ea43 0501 	orr.w	r5, r3, r1
 801a758:	bf34      	ite	cc
 801a75a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a75e:	2300      	movcs	r3, #0
 801a760:	3015      	adds	r0, #21
 801a762:	fa02 f000 	lsl.w	r0, r2, r0
 801a766:	fa23 f30c 	lsr.w	r3, r3, ip
 801a76a:	4303      	orrs	r3, r0
 801a76c:	461c      	mov	r4, r3
 801a76e:	ec45 4b10 	vmov	d0, r4, r5
 801a772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a776:	45b8      	cmp	r8, r7
 801a778:	bf3a      	itte	cc
 801a77a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a77e:	f1a6 0708 	subcc.w	r7, r6, #8
 801a782:	2300      	movcs	r3, #0
 801a784:	380b      	subs	r0, #11
 801a786:	d012      	beq.n	801a7ae <__b2d+0x8a>
 801a788:	f1c0 0120 	rsb	r1, r0, #32
 801a78c:	fa23 f401 	lsr.w	r4, r3, r1
 801a790:	4082      	lsls	r2, r0
 801a792:	4322      	orrs	r2, r4
 801a794:	4547      	cmp	r7, r8
 801a796:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801a79a:	bf8c      	ite	hi
 801a79c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801a7a0:	2200      	movls	r2, #0
 801a7a2:	4083      	lsls	r3, r0
 801a7a4:	40ca      	lsrs	r2, r1
 801a7a6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801a7aa:	4313      	orrs	r3, r2
 801a7ac:	e7de      	b.n	801a76c <__b2d+0x48>
 801a7ae:	ea42 0501 	orr.w	r5, r2, r1
 801a7b2:	e7db      	b.n	801a76c <__b2d+0x48>
 801a7b4:	3ff00000 	.word	0x3ff00000

0801a7b8 <__d2b>:
 801a7b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a7bc:	460f      	mov	r7, r1
 801a7be:	2101      	movs	r1, #1
 801a7c0:	ec59 8b10 	vmov	r8, r9, d0
 801a7c4:	4616      	mov	r6, r2
 801a7c6:	f7ff fc1b 	bl	801a000 <_Balloc>
 801a7ca:	4604      	mov	r4, r0
 801a7cc:	b930      	cbnz	r0, 801a7dc <__d2b+0x24>
 801a7ce:	4602      	mov	r2, r0
 801a7d0:	4b24      	ldr	r3, [pc, #144]	; (801a864 <__d2b+0xac>)
 801a7d2:	4825      	ldr	r0, [pc, #148]	; (801a868 <__d2b+0xb0>)
 801a7d4:	f240 310f 	movw	r1, #783	; 0x30f
 801a7d8:	f000 fc7c 	bl	801b0d4 <__assert_func>
 801a7dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a7e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a7e4:	bb2d      	cbnz	r5, 801a832 <__d2b+0x7a>
 801a7e6:	9301      	str	r3, [sp, #4]
 801a7e8:	f1b8 0300 	subs.w	r3, r8, #0
 801a7ec:	d026      	beq.n	801a83c <__d2b+0x84>
 801a7ee:	4668      	mov	r0, sp
 801a7f0:	9300      	str	r3, [sp, #0]
 801a7f2:	f7ff fd17 	bl	801a224 <__lo0bits>
 801a7f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a7fa:	b1e8      	cbz	r0, 801a838 <__d2b+0x80>
 801a7fc:	f1c0 0320 	rsb	r3, r0, #32
 801a800:	fa02 f303 	lsl.w	r3, r2, r3
 801a804:	430b      	orrs	r3, r1
 801a806:	40c2      	lsrs	r2, r0
 801a808:	6163      	str	r3, [r4, #20]
 801a80a:	9201      	str	r2, [sp, #4]
 801a80c:	9b01      	ldr	r3, [sp, #4]
 801a80e:	61a3      	str	r3, [r4, #24]
 801a810:	2b00      	cmp	r3, #0
 801a812:	bf14      	ite	ne
 801a814:	2202      	movne	r2, #2
 801a816:	2201      	moveq	r2, #1
 801a818:	6122      	str	r2, [r4, #16]
 801a81a:	b1bd      	cbz	r5, 801a84c <__d2b+0x94>
 801a81c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a820:	4405      	add	r5, r0
 801a822:	603d      	str	r5, [r7, #0]
 801a824:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a828:	6030      	str	r0, [r6, #0]
 801a82a:	4620      	mov	r0, r4
 801a82c:	b003      	add	sp, #12
 801a82e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a836:	e7d6      	b.n	801a7e6 <__d2b+0x2e>
 801a838:	6161      	str	r1, [r4, #20]
 801a83a:	e7e7      	b.n	801a80c <__d2b+0x54>
 801a83c:	a801      	add	r0, sp, #4
 801a83e:	f7ff fcf1 	bl	801a224 <__lo0bits>
 801a842:	9b01      	ldr	r3, [sp, #4]
 801a844:	6163      	str	r3, [r4, #20]
 801a846:	3020      	adds	r0, #32
 801a848:	2201      	movs	r2, #1
 801a84a:	e7e5      	b.n	801a818 <__d2b+0x60>
 801a84c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a850:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a854:	6038      	str	r0, [r7, #0]
 801a856:	6918      	ldr	r0, [r3, #16]
 801a858:	f7ff fcc4 	bl	801a1e4 <__hi0bits>
 801a85c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a860:	e7e2      	b.n	801a828 <__d2b+0x70>
 801a862:	bf00      	nop
 801a864:	08028b09 	.word	0x08028b09
 801a868:	08028b91 	.word	0x08028b91

0801a86c <__ratio>:
 801a86c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a870:	4688      	mov	r8, r1
 801a872:	4669      	mov	r1, sp
 801a874:	4681      	mov	r9, r0
 801a876:	f7ff ff55 	bl	801a724 <__b2d>
 801a87a:	a901      	add	r1, sp, #4
 801a87c:	4640      	mov	r0, r8
 801a87e:	ec55 4b10 	vmov	r4, r5, d0
 801a882:	f7ff ff4f 	bl	801a724 <__b2d>
 801a886:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a88a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a88e:	eba3 0c02 	sub.w	ip, r3, r2
 801a892:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a896:	1a9b      	subs	r3, r3, r2
 801a898:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a89c:	ec51 0b10 	vmov	r0, r1, d0
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	bfd6      	itet	le
 801a8a4:	460a      	movle	r2, r1
 801a8a6:	462a      	movgt	r2, r5
 801a8a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a8ac:	468b      	mov	fp, r1
 801a8ae:	462f      	mov	r7, r5
 801a8b0:	bfd4      	ite	le
 801a8b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801a8b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a8ba:	4620      	mov	r0, r4
 801a8bc:	ee10 2a10 	vmov	r2, s0
 801a8c0:	465b      	mov	r3, fp
 801a8c2:	4639      	mov	r1, r7
 801a8c4:	f7e5 ffd2 	bl	800086c <__aeabi_ddiv>
 801a8c8:	ec41 0b10 	vmov	d0, r0, r1
 801a8cc:	b003      	add	sp, #12
 801a8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a8d2 <__copybits>:
 801a8d2:	3901      	subs	r1, #1
 801a8d4:	b570      	push	{r4, r5, r6, lr}
 801a8d6:	1149      	asrs	r1, r1, #5
 801a8d8:	6914      	ldr	r4, [r2, #16]
 801a8da:	3101      	adds	r1, #1
 801a8dc:	f102 0314 	add.w	r3, r2, #20
 801a8e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a8e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a8e8:	1f05      	subs	r5, r0, #4
 801a8ea:	42a3      	cmp	r3, r4
 801a8ec:	d30c      	bcc.n	801a908 <__copybits+0x36>
 801a8ee:	1aa3      	subs	r3, r4, r2
 801a8f0:	3b11      	subs	r3, #17
 801a8f2:	f023 0303 	bic.w	r3, r3, #3
 801a8f6:	3211      	adds	r2, #17
 801a8f8:	42a2      	cmp	r2, r4
 801a8fa:	bf88      	it	hi
 801a8fc:	2300      	movhi	r3, #0
 801a8fe:	4418      	add	r0, r3
 801a900:	2300      	movs	r3, #0
 801a902:	4288      	cmp	r0, r1
 801a904:	d305      	bcc.n	801a912 <__copybits+0x40>
 801a906:	bd70      	pop	{r4, r5, r6, pc}
 801a908:	f853 6b04 	ldr.w	r6, [r3], #4
 801a90c:	f845 6f04 	str.w	r6, [r5, #4]!
 801a910:	e7eb      	b.n	801a8ea <__copybits+0x18>
 801a912:	f840 3b04 	str.w	r3, [r0], #4
 801a916:	e7f4      	b.n	801a902 <__copybits+0x30>

0801a918 <__any_on>:
 801a918:	f100 0214 	add.w	r2, r0, #20
 801a91c:	6900      	ldr	r0, [r0, #16]
 801a91e:	114b      	asrs	r3, r1, #5
 801a920:	4298      	cmp	r0, r3
 801a922:	b510      	push	{r4, lr}
 801a924:	db11      	blt.n	801a94a <__any_on+0x32>
 801a926:	dd0a      	ble.n	801a93e <__any_on+0x26>
 801a928:	f011 011f 	ands.w	r1, r1, #31
 801a92c:	d007      	beq.n	801a93e <__any_on+0x26>
 801a92e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a932:	fa24 f001 	lsr.w	r0, r4, r1
 801a936:	fa00 f101 	lsl.w	r1, r0, r1
 801a93a:	428c      	cmp	r4, r1
 801a93c:	d10b      	bne.n	801a956 <__any_on+0x3e>
 801a93e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a942:	4293      	cmp	r3, r2
 801a944:	d803      	bhi.n	801a94e <__any_on+0x36>
 801a946:	2000      	movs	r0, #0
 801a948:	bd10      	pop	{r4, pc}
 801a94a:	4603      	mov	r3, r0
 801a94c:	e7f7      	b.n	801a93e <__any_on+0x26>
 801a94e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a952:	2900      	cmp	r1, #0
 801a954:	d0f5      	beq.n	801a942 <__any_on+0x2a>
 801a956:	2001      	movs	r0, #1
 801a958:	e7f6      	b.n	801a948 <__any_on+0x30>

0801a95a <__ascii_wctomb>:
 801a95a:	b149      	cbz	r1, 801a970 <__ascii_wctomb+0x16>
 801a95c:	2aff      	cmp	r2, #255	; 0xff
 801a95e:	bf85      	ittet	hi
 801a960:	238a      	movhi	r3, #138	; 0x8a
 801a962:	6003      	strhi	r3, [r0, #0]
 801a964:	700a      	strbls	r2, [r1, #0]
 801a966:	f04f 30ff 	movhi.w	r0, #4294967295
 801a96a:	bf98      	it	ls
 801a96c:	2001      	movls	r0, #1
 801a96e:	4770      	bx	lr
 801a970:	4608      	mov	r0, r1
 801a972:	4770      	bx	lr

0801a974 <__ssputs_r>:
 801a974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a978:	688e      	ldr	r6, [r1, #8]
 801a97a:	461f      	mov	r7, r3
 801a97c:	42be      	cmp	r6, r7
 801a97e:	680b      	ldr	r3, [r1, #0]
 801a980:	4682      	mov	sl, r0
 801a982:	460c      	mov	r4, r1
 801a984:	4690      	mov	r8, r2
 801a986:	d82c      	bhi.n	801a9e2 <__ssputs_r+0x6e>
 801a988:	898a      	ldrh	r2, [r1, #12]
 801a98a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a98e:	d026      	beq.n	801a9de <__ssputs_r+0x6a>
 801a990:	6965      	ldr	r5, [r4, #20]
 801a992:	6909      	ldr	r1, [r1, #16]
 801a994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a998:	eba3 0901 	sub.w	r9, r3, r1
 801a99c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a9a0:	1c7b      	adds	r3, r7, #1
 801a9a2:	444b      	add	r3, r9
 801a9a4:	106d      	asrs	r5, r5, #1
 801a9a6:	429d      	cmp	r5, r3
 801a9a8:	bf38      	it	cc
 801a9aa:	461d      	movcc	r5, r3
 801a9ac:	0553      	lsls	r3, r2, #21
 801a9ae:	d527      	bpl.n	801aa00 <__ssputs_r+0x8c>
 801a9b0:	4629      	mov	r1, r5
 801a9b2:	f7fd fdc9 	bl	8018548 <_malloc_r>
 801a9b6:	4606      	mov	r6, r0
 801a9b8:	b360      	cbz	r0, 801aa14 <__ssputs_r+0xa0>
 801a9ba:	6921      	ldr	r1, [r4, #16]
 801a9bc:	464a      	mov	r2, r9
 801a9be:	f7fe ff4c 	bl	801985a <memcpy>
 801a9c2:	89a3      	ldrh	r3, [r4, #12]
 801a9c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a9c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a9cc:	81a3      	strh	r3, [r4, #12]
 801a9ce:	6126      	str	r6, [r4, #16]
 801a9d0:	6165      	str	r5, [r4, #20]
 801a9d2:	444e      	add	r6, r9
 801a9d4:	eba5 0509 	sub.w	r5, r5, r9
 801a9d8:	6026      	str	r6, [r4, #0]
 801a9da:	60a5      	str	r5, [r4, #8]
 801a9dc:	463e      	mov	r6, r7
 801a9de:	42be      	cmp	r6, r7
 801a9e0:	d900      	bls.n	801a9e4 <__ssputs_r+0x70>
 801a9e2:	463e      	mov	r6, r7
 801a9e4:	6820      	ldr	r0, [r4, #0]
 801a9e6:	4632      	mov	r2, r6
 801a9e8:	4641      	mov	r1, r8
 801a9ea:	f000 fb59 	bl	801b0a0 <memmove>
 801a9ee:	68a3      	ldr	r3, [r4, #8]
 801a9f0:	1b9b      	subs	r3, r3, r6
 801a9f2:	60a3      	str	r3, [r4, #8]
 801a9f4:	6823      	ldr	r3, [r4, #0]
 801a9f6:	4433      	add	r3, r6
 801a9f8:	6023      	str	r3, [r4, #0]
 801a9fa:	2000      	movs	r0, #0
 801a9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa00:	462a      	mov	r2, r5
 801aa02:	f000 fb9b 	bl	801b13c <_realloc_r>
 801aa06:	4606      	mov	r6, r0
 801aa08:	2800      	cmp	r0, #0
 801aa0a:	d1e0      	bne.n	801a9ce <__ssputs_r+0x5a>
 801aa0c:	6921      	ldr	r1, [r4, #16]
 801aa0e:	4650      	mov	r0, sl
 801aa10:	f7fe ff40 	bl	8019894 <_free_r>
 801aa14:	230c      	movs	r3, #12
 801aa16:	f8ca 3000 	str.w	r3, [sl]
 801aa1a:	89a3      	ldrh	r3, [r4, #12]
 801aa1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa20:	81a3      	strh	r3, [r4, #12]
 801aa22:	f04f 30ff 	mov.w	r0, #4294967295
 801aa26:	e7e9      	b.n	801a9fc <__ssputs_r+0x88>

0801aa28 <_svfiprintf_r>:
 801aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa2c:	4698      	mov	r8, r3
 801aa2e:	898b      	ldrh	r3, [r1, #12]
 801aa30:	061b      	lsls	r3, r3, #24
 801aa32:	b09d      	sub	sp, #116	; 0x74
 801aa34:	4607      	mov	r7, r0
 801aa36:	460d      	mov	r5, r1
 801aa38:	4614      	mov	r4, r2
 801aa3a:	d50e      	bpl.n	801aa5a <_svfiprintf_r+0x32>
 801aa3c:	690b      	ldr	r3, [r1, #16]
 801aa3e:	b963      	cbnz	r3, 801aa5a <_svfiprintf_r+0x32>
 801aa40:	2140      	movs	r1, #64	; 0x40
 801aa42:	f7fd fd81 	bl	8018548 <_malloc_r>
 801aa46:	6028      	str	r0, [r5, #0]
 801aa48:	6128      	str	r0, [r5, #16]
 801aa4a:	b920      	cbnz	r0, 801aa56 <_svfiprintf_r+0x2e>
 801aa4c:	230c      	movs	r3, #12
 801aa4e:	603b      	str	r3, [r7, #0]
 801aa50:	f04f 30ff 	mov.w	r0, #4294967295
 801aa54:	e0d0      	b.n	801abf8 <_svfiprintf_r+0x1d0>
 801aa56:	2340      	movs	r3, #64	; 0x40
 801aa58:	616b      	str	r3, [r5, #20]
 801aa5a:	2300      	movs	r3, #0
 801aa5c:	9309      	str	r3, [sp, #36]	; 0x24
 801aa5e:	2320      	movs	r3, #32
 801aa60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801aa64:	f8cd 800c 	str.w	r8, [sp, #12]
 801aa68:	2330      	movs	r3, #48	; 0x30
 801aa6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801ac10 <_svfiprintf_r+0x1e8>
 801aa6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801aa72:	f04f 0901 	mov.w	r9, #1
 801aa76:	4623      	mov	r3, r4
 801aa78:	469a      	mov	sl, r3
 801aa7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aa7e:	b10a      	cbz	r2, 801aa84 <_svfiprintf_r+0x5c>
 801aa80:	2a25      	cmp	r2, #37	; 0x25
 801aa82:	d1f9      	bne.n	801aa78 <_svfiprintf_r+0x50>
 801aa84:	ebba 0b04 	subs.w	fp, sl, r4
 801aa88:	d00b      	beq.n	801aaa2 <_svfiprintf_r+0x7a>
 801aa8a:	465b      	mov	r3, fp
 801aa8c:	4622      	mov	r2, r4
 801aa8e:	4629      	mov	r1, r5
 801aa90:	4638      	mov	r0, r7
 801aa92:	f7ff ff6f 	bl	801a974 <__ssputs_r>
 801aa96:	3001      	adds	r0, #1
 801aa98:	f000 80a9 	beq.w	801abee <_svfiprintf_r+0x1c6>
 801aa9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aa9e:	445a      	add	r2, fp
 801aaa0:	9209      	str	r2, [sp, #36]	; 0x24
 801aaa2:	f89a 3000 	ldrb.w	r3, [sl]
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	f000 80a1 	beq.w	801abee <_svfiprintf_r+0x1c6>
 801aaac:	2300      	movs	r3, #0
 801aaae:	f04f 32ff 	mov.w	r2, #4294967295
 801aab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aab6:	f10a 0a01 	add.w	sl, sl, #1
 801aaba:	9304      	str	r3, [sp, #16]
 801aabc:	9307      	str	r3, [sp, #28]
 801aabe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aac2:	931a      	str	r3, [sp, #104]	; 0x68
 801aac4:	4654      	mov	r4, sl
 801aac6:	2205      	movs	r2, #5
 801aac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aacc:	4850      	ldr	r0, [pc, #320]	; (801ac10 <_svfiprintf_r+0x1e8>)
 801aace:	f7e5 fb97 	bl	8000200 <memchr>
 801aad2:	9a04      	ldr	r2, [sp, #16]
 801aad4:	b9d8      	cbnz	r0, 801ab0e <_svfiprintf_r+0xe6>
 801aad6:	06d0      	lsls	r0, r2, #27
 801aad8:	bf44      	itt	mi
 801aada:	2320      	movmi	r3, #32
 801aadc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aae0:	0711      	lsls	r1, r2, #28
 801aae2:	bf44      	itt	mi
 801aae4:	232b      	movmi	r3, #43	; 0x2b
 801aae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aaea:	f89a 3000 	ldrb.w	r3, [sl]
 801aaee:	2b2a      	cmp	r3, #42	; 0x2a
 801aaf0:	d015      	beq.n	801ab1e <_svfiprintf_r+0xf6>
 801aaf2:	9a07      	ldr	r2, [sp, #28]
 801aaf4:	4654      	mov	r4, sl
 801aaf6:	2000      	movs	r0, #0
 801aaf8:	f04f 0c0a 	mov.w	ip, #10
 801aafc:	4621      	mov	r1, r4
 801aafe:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ab02:	3b30      	subs	r3, #48	; 0x30
 801ab04:	2b09      	cmp	r3, #9
 801ab06:	d94d      	bls.n	801aba4 <_svfiprintf_r+0x17c>
 801ab08:	b1b0      	cbz	r0, 801ab38 <_svfiprintf_r+0x110>
 801ab0a:	9207      	str	r2, [sp, #28]
 801ab0c:	e014      	b.n	801ab38 <_svfiprintf_r+0x110>
 801ab0e:	eba0 0308 	sub.w	r3, r0, r8
 801ab12:	fa09 f303 	lsl.w	r3, r9, r3
 801ab16:	4313      	orrs	r3, r2
 801ab18:	9304      	str	r3, [sp, #16]
 801ab1a:	46a2      	mov	sl, r4
 801ab1c:	e7d2      	b.n	801aac4 <_svfiprintf_r+0x9c>
 801ab1e:	9b03      	ldr	r3, [sp, #12]
 801ab20:	1d19      	adds	r1, r3, #4
 801ab22:	681b      	ldr	r3, [r3, #0]
 801ab24:	9103      	str	r1, [sp, #12]
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	bfbb      	ittet	lt
 801ab2a:	425b      	neglt	r3, r3
 801ab2c:	f042 0202 	orrlt.w	r2, r2, #2
 801ab30:	9307      	strge	r3, [sp, #28]
 801ab32:	9307      	strlt	r3, [sp, #28]
 801ab34:	bfb8      	it	lt
 801ab36:	9204      	strlt	r2, [sp, #16]
 801ab38:	7823      	ldrb	r3, [r4, #0]
 801ab3a:	2b2e      	cmp	r3, #46	; 0x2e
 801ab3c:	d10c      	bne.n	801ab58 <_svfiprintf_r+0x130>
 801ab3e:	7863      	ldrb	r3, [r4, #1]
 801ab40:	2b2a      	cmp	r3, #42	; 0x2a
 801ab42:	d134      	bne.n	801abae <_svfiprintf_r+0x186>
 801ab44:	9b03      	ldr	r3, [sp, #12]
 801ab46:	1d1a      	adds	r2, r3, #4
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	9203      	str	r2, [sp, #12]
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	bfb8      	it	lt
 801ab50:	f04f 33ff 	movlt.w	r3, #4294967295
 801ab54:	3402      	adds	r4, #2
 801ab56:	9305      	str	r3, [sp, #20]
 801ab58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801ac20 <_svfiprintf_r+0x1f8>
 801ab5c:	7821      	ldrb	r1, [r4, #0]
 801ab5e:	2203      	movs	r2, #3
 801ab60:	4650      	mov	r0, sl
 801ab62:	f7e5 fb4d 	bl	8000200 <memchr>
 801ab66:	b138      	cbz	r0, 801ab78 <_svfiprintf_r+0x150>
 801ab68:	9b04      	ldr	r3, [sp, #16]
 801ab6a:	eba0 000a 	sub.w	r0, r0, sl
 801ab6e:	2240      	movs	r2, #64	; 0x40
 801ab70:	4082      	lsls	r2, r0
 801ab72:	4313      	orrs	r3, r2
 801ab74:	3401      	adds	r4, #1
 801ab76:	9304      	str	r3, [sp, #16]
 801ab78:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab7c:	4825      	ldr	r0, [pc, #148]	; (801ac14 <_svfiprintf_r+0x1ec>)
 801ab7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ab82:	2206      	movs	r2, #6
 801ab84:	f7e5 fb3c 	bl	8000200 <memchr>
 801ab88:	2800      	cmp	r0, #0
 801ab8a:	d038      	beq.n	801abfe <_svfiprintf_r+0x1d6>
 801ab8c:	4b22      	ldr	r3, [pc, #136]	; (801ac18 <_svfiprintf_r+0x1f0>)
 801ab8e:	bb1b      	cbnz	r3, 801abd8 <_svfiprintf_r+0x1b0>
 801ab90:	9b03      	ldr	r3, [sp, #12]
 801ab92:	3307      	adds	r3, #7
 801ab94:	f023 0307 	bic.w	r3, r3, #7
 801ab98:	3308      	adds	r3, #8
 801ab9a:	9303      	str	r3, [sp, #12]
 801ab9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab9e:	4433      	add	r3, r6
 801aba0:	9309      	str	r3, [sp, #36]	; 0x24
 801aba2:	e768      	b.n	801aa76 <_svfiprintf_r+0x4e>
 801aba4:	fb0c 3202 	mla	r2, ip, r2, r3
 801aba8:	460c      	mov	r4, r1
 801abaa:	2001      	movs	r0, #1
 801abac:	e7a6      	b.n	801aafc <_svfiprintf_r+0xd4>
 801abae:	2300      	movs	r3, #0
 801abb0:	3401      	adds	r4, #1
 801abb2:	9305      	str	r3, [sp, #20]
 801abb4:	4619      	mov	r1, r3
 801abb6:	f04f 0c0a 	mov.w	ip, #10
 801abba:	4620      	mov	r0, r4
 801abbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801abc0:	3a30      	subs	r2, #48	; 0x30
 801abc2:	2a09      	cmp	r2, #9
 801abc4:	d903      	bls.n	801abce <_svfiprintf_r+0x1a6>
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d0c6      	beq.n	801ab58 <_svfiprintf_r+0x130>
 801abca:	9105      	str	r1, [sp, #20]
 801abcc:	e7c4      	b.n	801ab58 <_svfiprintf_r+0x130>
 801abce:	fb0c 2101 	mla	r1, ip, r1, r2
 801abd2:	4604      	mov	r4, r0
 801abd4:	2301      	movs	r3, #1
 801abd6:	e7f0      	b.n	801abba <_svfiprintf_r+0x192>
 801abd8:	ab03      	add	r3, sp, #12
 801abda:	9300      	str	r3, [sp, #0]
 801abdc:	462a      	mov	r2, r5
 801abde:	4b0f      	ldr	r3, [pc, #60]	; (801ac1c <_svfiprintf_r+0x1f4>)
 801abe0:	a904      	add	r1, sp, #16
 801abe2:	4638      	mov	r0, r7
 801abe4:	f3af 8000 	nop.w
 801abe8:	1c42      	adds	r2, r0, #1
 801abea:	4606      	mov	r6, r0
 801abec:	d1d6      	bne.n	801ab9c <_svfiprintf_r+0x174>
 801abee:	89ab      	ldrh	r3, [r5, #12]
 801abf0:	065b      	lsls	r3, r3, #25
 801abf2:	f53f af2d 	bmi.w	801aa50 <_svfiprintf_r+0x28>
 801abf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801abf8:	b01d      	add	sp, #116	; 0x74
 801abfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abfe:	ab03      	add	r3, sp, #12
 801ac00:	9300      	str	r3, [sp, #0]
 801ac02:	462a      	mov	r2, r5
 801ac04:	4b05      	ldr	r3, [pc, #20]	; (801ac1c <_svfiprintf_r+0x1f4>)
 801ac06:	a904      	add	r1, sp, #16
 801ac08:	4638      	mov	r0, r7
 801ac0a:	f000 f879 	bl	801ad00 <_printf_i>
 801ac0e:	e7eb      	b.n	801abe8 <_svfiprintf_r+0x1c0>
 801ac10:	08028cec 	.word	0x08028cec
 801ac14:	08028cf6 	.word	0x08028cf6
 801ac18:	00000000 	.word	0x00000000
 801ac1c:	0801a975 	.word	0x0801a975
 801ac20:	08028cf2 	.word	0x08028cf2

0801ac24 <_printf_common>:
 801ac24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac28:	4616      	mov	r6, r2
 801ac2a:	4699      	mov	r9, r3
 801ac2c:	688a      	ldr	r2, [r1, #8]
 801ac2e:	690b      	ldr	r3, [r1, #16]
 801ac30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ac34:	4293      	cmp	r3, r2
 801ac36:	bfb8      	it	lt
 801ac38:	4613      	movlt	r3, r2
 801ac3a:	6033      	str	r3, [r6, #0]
 801ac3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ac40:	4607      	mov	r7, r0
 801ac42:	460c      	mov	r4, r1
 801ac44:	b10a      	cbz	r2, 801ac4a <_printf_common+0x26>
 801ac46:	3301      	adds	r3, #1
 801ac48:	6033      	str	r3, [r6, #0]
 801ac4a:	6823      	ldr	r3, [r4, #0]
 801ac4c:	0699      	lsls	r1, r3, #26
 801ac4e:	bf42      	ittt	mi
 801ac50:	6833      	ldrmi	r3, [r6, #0]
 801ac52:	3302      	addmi	r3, #2
 801ac54:	6033      	strmi	r3, [r6, #0]
 801ac56:	6825      	ldr	r5, [r4, #0]
 801ac58:	f015 0506 	ands.w	r5, r5, #6
 801ac5c:	d106      	bne.n	801ac6c <_printf_common+0x48>
 801ac5e:	f104 0a19 	add.w	sl, r4, #25
 801ac62:	68e3      	ldr	r3, [r4, #12]
 801ac64:	6832      	ldr	r2, [r6, #0]
 801ac66:	1a9b      	subs	r3, r3, r2
 801ac68:	42ab      	cmp	r3, r5
 801ac6a:	dc26      	bgt.n	801acba <_printf_common+0x96>
 801ac6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ac70:	1e13      	subs	r3, r2, #0
 801ac72:	6822      	ldr	r2, [r4, #0]
 801ac74:	bf18      	it	ne
 801ac76:	2301      	movne	r3, #1
 801ac78:	0692      	lsls	r2, r2, #26
 801ac7a:	d42b      	bmi.n	801acd4 <_printf_common+0xb0>
 801ac7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ac80:	4649      	mov	r1, r9
 801ac82:	4638      	mov	r0, r7
 801ac84:	47c0      	blx	r8
 801ac86:	3001      	adds	r0, #1
 801ac88:	d01e      	beq.n	801acc8 <_printf_common+0xa4>
 801ac8a:	6823      	ldr	r3, [r4, #0]
 801ac8c:	6922      	ldr	r2, [r4, #16]
 801ac8e:	f003 0306 	and.w	r3, r3, #6
 801ac92:	2b04      	cmp	r3, #4
 801ac94:	bf02      	ittt	eq
 801ac96:	68e5      	ldreq	r5, [r4, #12]
 801ac98:	6833      	ldreq	r3, [r6, #0]
 801ac9a:	1aed      	subeq	r5, r5, r3
 801ac9c:	68a3      	ldr	r3, [r4, #8]
 801ac9e:	bf0c      	ite	eq
 801aca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aca4:	2500      	movne	r5, #0
 801aca6:	4293      	cmp	r3, r2
 801aca8:	bfc4      	itt	gt
 801acaa:	1a9b      	subgt	r3, r3, r2
 801acac:	18ed      	addgt	r5, r5, r3
 801acae:	2600      	movs	r6, #0
 801acb0:	341a      	adds	r4, #26
 801acb2:	42b5      	cmp	r5, r6
 801acb4:	d11a      	bne.n	801acec <_printf_common+0xc8>
 801acb6:	2000      	movs	r0, #0
 801acb8:	e008      	b.n	801accc <_printf_common+0xa8>
 801acba:	2301      	movs	r3, #1
 801acbc:	4652      	mov	r2, sl
 801acbe:	4649      	mov	r1, r9
 801acc0:	4638      	mov	r0, r7
 801acc2:	47c0      	blx	r8
 801acc4:	3001      	adds	r0, #1
 801acc6:	d103      	bne.n	801acd0 <_printf_common+0xac>
 801acc8:	f04f 30ff 	mov.w	r0, #4294967295
 801accc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acd0:	3501      	adds	r5, #1
 801acd2:	e7c6      	b.n	801ac62 <_printf_common+0x3e>
 801acd4:	18e1      	adds	r1, r4, r3
 801acd6:	1c5a      	adds	r2, r3, #1
 801acd8:	2030      	movs	r0, #48	; 0x30
 801acda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801acde:	4422      	add	r2, r4
 801ace0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ace4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ace8:	3302      	adds	r3, #2
 801acea:	e7c7      	b.n	801ac7c <_printf_common+0x58>
 801acec:	2301      	movs	r3, #1
 801acee:	4622      	mov	r2, r4
 801acf0:	4649      	mov	r1, r9
 801acf2:	4638      	mov	r0, r7
 801acf4:	47c0      	blx	r8
 801acf6:	3001      	adds	r0, #1
 801acf8:	d0e6      	beq.n	801acc8 <_printf_common+0xa4>
 801acfa:	3601      	adds	r6, #1
 801acfc:	e7d9      	b.n	801acb2 <_printf_common+0x8e>
	...

0801ad00 <_printf_i>:
 801ad00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ad04:	7e0f      	ldrb	r7, [r1, #24]
 801ad06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ad08:	2f78      	cmp	r7, #120	; 0x78
 801ad0a:	4691      	mov	r9, r2
 801ad0c:	4680      	mov	r8, r0
 801ad0e:	460c      	mov	r4, r1
 801ad10:	469a      	mov	sl, r3
 801ad12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ad16:	d807      	bhi.n	801ad28 <_printf_i+0x28>
 801ad18:	2f62      	cmp	r7, #98	; 0x62
 801ad1a:	d80a      	bhi.n	801ad32 <_printf_i+0x32>
 801ad1c:	2f00      	cmp	r7, #0
 801ad1e:	f000 80d4 	beq.w	801aeca <_printf_i+0x1ca>
 801ad22:	2f58      	cmp	r7, #88	; 0x58
 801ad24:	f000 80c0 	beq.w	801aea8 <_printf_i+0x1a8>
 801ad28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ad2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ad30:	e03a      	b.n	801ada8 <_printf_i+0xa8>
 801ad32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ad36:	2b15      	cmp	r3, #21
 801ad38:	d8f6      	bhi.n	801ad28 <_printf_i+0x28>
 801ad3a:	a101      	add	r1, pc, #4	; (adr r1, 801ad40 <_printf_i+0x40>)
 801ad3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ad40:	0801ad99 	.word	0x0801ad99
 801ad44:	0801adad 	.word	0x0801adad
 801ad48:	0801ad29 	.word	0x0801ad29
 801ad4c:	0801ad29 	.word	0x0801ad29
 801ad50:	0801ad29 	.word	0x0801ad29
 801ad54:	0801ad29 	.word	0x0801ad29
 801ad58:	0801adad 	.word	0x0801adad
 801ad5c:	0801ad29 	.word	0x0801ad29
 801ad60:	0801ad29 	.word	0x0801ad29
 801ad64:	0801ad29 	.word	0x0801ad29
 801ad68:	0801ad29 	.word	0x0801ad29
 801ad6c:	0801aeb1 	.word	0x0801aeb1
 801ad70:	0801add9 	.word	0x0801add9
 801ad74:	0801ae6b 	.word	0x0801ae6b
 801ad78:	0801ad29 	.word	0x0801ad29
 801ad7c:	0801ad29 	.word	0x0801ad29
 801ad80:	0801aed3 	.word	0x0801aed3
 801ad84:	0801ad29 	.word	0x0801ad29
 801ad88:	0801add9 	.word	0x0801add9
 801ad8c:	0801ad29 	.word	0x0801ad29
 801ad90:	0801ad29 	.word	0x0801ad29
 801ad94:	0801ae73 	.word	0x0801ae73
 801ad98:	682b      	ldr	r3, [r5, #0]
 801ad9a:	1d1a      	adds	r2, r3, #4
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	602a      	str	r2, [r5, #0]
 801ada0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ada4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ada8:	2301      	movs	r3, #1
 801adaa:	e09f      	b.n	801aeec <_printf_i+0x1ec>
 801adac:	6820      	ldr	r0, [r4, #0]
 801adae:	682b      	ldr	r3, [r5, #0]
 801adb0:	0607      	lsls	r7, r0, #24
 801adb2:	f103 0104 	add.w	r1, r3, #4
 801adb6:	6029      	str	r1, [r5, #0]
 801adb8:	d501      	bpl.n	801adbe <_printf_i+0xbe>
 801adba:	681e      	ldr	r6, [r3, #0]
 801adbc:	e003      	b.n	801adc6 <_printf_i+0xc6>
 801adbe:	0646      	lsls	r6, r0, #25
 801adc0:	d5fb      	bpl.n	801adba <_printf_i+0xba>
 801adc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801adc6:	2e00      	cmp	r6, #0
 801adc8:	da03      	bge.n	801add2 <_printf_i+0xd2>
 801adca:	232d      	movs	r3, #45	; 0x2d
 801adcc:	4276      	negs	r6, r6
 801adce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801add2:	485a      	ldr	r0, [pc, #360]	; (801af3c <_printf_i+0x23c>)
 801add4:	230a      	movs	r3, #10
 801add6:	e012      	b.n	801adfe <_printf_i+0xfe>
 801add8:	682b      	ldr	r3, [r5, #0]
 801adda:	6820      	ldr	r0, [r4, #0]
 801addc:	1d19      	adds	r1, r3, #4
 801adde:	6029      	str	r1, [r5, #0]
 801ade0:	0605      	lsls	r5, r0, #24
 801ade2:	d501      	bpl.n	801ade8 <_printf_i+0xe8>
 801ade4:	681e      	ldr	r6, [r3, #0]
 801ade6:	e002      	b.n	801adee <_printf_i+0xee>
 801ade8:	0641      	lsls	r1, r0, #25
 801adea:	d5fb      	bpl.n	801ade4 <_printf_i+0xe4>
 801adec:	881e      	ldrh	r6, [r3, #0]
 801adee:	4853      	ldr	r0, [pc, #332]	; (801af3c <_printf_i+0x23c>)
 801adf0:	2f6f      	cmp	r7, #111	; 0x6f
 801adf2:	bf0c      	ite	eq
 801adf4:	2308      	moveq	r3, #8
 801adf6:	230a      	movne	r3, #10
 801adf8:	2100      	movs	r1, #0
 801adfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801adfe:	6865      	ldr	r5, [r4, #4]
 801ae00:	60a5      	str	r5, [r4, #8]
 801ae02:	2d00      	cmp	r5, #0
 801ae04:	bfa2      	ittt	ge
 801ae06:	6821      	ldrge	r1, [r4, #0]
 801ae08:	f021 0104 	bicge.w	r1, r1, #4
 801ae0c:	6021      	strge	r1, [r4, #0]
 801ae0e:	b90e      	cbnz	r6, 801ae14 <_printf_i+0x114>
 801ae10:	2d00      	cmp	r5, #0
 801ae12:	d04b      	beq.n	801aeac <_printf_i+0x1ac>
 801ae14:	4615      	mov	r5, r2
 801ae16:	fbb6 f1f3 	udiv	r1, r6, r3
 801ae1a:	fb03 6711 	mls	r7, r3, r1, r6
 801ae1e:	5dc7      	ldrb	r7, [r0, r7]
 801ae20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ae24:	4637      	mov	r7, r6
 801ae26:	42bb      	cmp	r3, r7
 801ae28:	460e      	mov	r6, r1
 801ae2a:	d9f4      	bls.n	801ae16 <_printf_i+0x116>
 801ae2c:	2b08      	cmp	r3, #8
 801ae2e:	d10b      	bne.n	801ae48 <_printf_i+0x148>
 801ae30:	6823      	ldr	r3, [r4, #0]
 801ae32:	07de      	lsls	r6, r3, #31
 801ae34:	d508      	bpl.n	801ae48 <_printf_i+0x148>
 801ae36:	6923      	ldr	r3, [r4, #16]
 801ae38:	6861      	ldr	r1, [r4, #4]
 801ae3a:	4299      	cmp	r1, r3
 801ae3c:	bfde      	ittt	le
 801ae3e:	2330      	movle	r3, #48	; 0x30
 801ae40:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ae44:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ae48:	1b52      	subs	r2, r2, r5
 801ae4a:	6122      	str	r2, [r4, #16]
 801ae4c:	f8cd a000 	str.w	sl, [sp]
 801ae50:	464b      	mov	r3, r9
 801ae52:	aa03      	add	r2, sp, #12
 801ae54:	4621      	mov	r1, r4
 801ae56:	4640      	mov	r0, r8
 801ae58:	f7ff fee4 	bl	801ac24 <_printf_common>
 801ae5c:	3001      	adds	r0, #1
 801ae5e:	d14a      	bne.n	801aef6 <_printf_i+0x1f6>
 801ae60:	f04f 30ff 	mov.w	r0, #4294967295
 801ae64:	b004      	add	sp, #16
 801ae66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae6a:	6823      	ldr	r3, [r4, #0]
 801ae6c:	f043 0320 	orr.w	r3, r3, #32
 801ae70:	6023      	str	r3, [r4, #0]
 801ae72:	4833      	ldr	r0, [pc, #204]	; (801af40 <_printf_i+0x240>)
 801ae74:	2778      	movs	r7, #120	; 0x78
 801ae76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ae7a:	6823      	ldr	r3, [r4, #0]
 801ae7c:	6829      	ldr	r1, [r5, #0]
 801ae7e:	061f      	lsls	r7, r3, #24
 801ae80:	f851 6b04 	ldr.w	r6, [r1], #4
 801ae84:	d402      	bmi.n	801ae8c <_printf_i+0x18c>
 801ae86:	065f      	lsls	r7, r3, #25
 801ae88:	bf48      	it	mi
 801ae8a:	b2b6      	uxthmi	r6, r6
 801ae8c:	07df      	lsls	r7, r3, #31
 801ae8e:	bf48      	it	mi
 801ae90:	f043 0320 	orrmi.w	r3, r3, #32
 801ae94:	6029      	str	r1, [r5, #0]
 801ae96:	bf48      	it	mi
 801ae98:	6023      	strmi	r3, [r4, #0]
 801ae9a:	b91e      	cbnz	r6, 801aea4 <_printf_i+0x1a4>
 801ae9c:	6823      	ldr	r3, [r4, #0]
 801ae9e:	f023 0320 	bic.w	r3, r3, #32
 801aea2:	6023      	str	r3, [r4, #0]
 801aea4:	2310      	movs	r3, #16
 801aea6:	e7a7      	b.n	801adf8 <_printf_i+0xf8>
 801aea8:	4824      	ldr	r0, [pc, #144]	; (801af3c <_printf_i+0x23c>)
 801aeaa:	e7e4      	b.n	801ae76 <_printf_i+0x176>
 801aeac:	4615      	mov	r5, r2
 801aeae:	e7bd      	b.n	801ae2c <_printf_i+0x12c>
 801aeb0:	682b      	ldr	r3, [r5, #0]
 801aeb2:	6826      	ldr	r6, [r4, #0]
 801aeb4:	6961      	ldr	r1, [r4, #20]
 801aeb6:	1d18      	adds	r0, r3, #4
 801aeb8:	6028      	str	r0, [r5, #0]
 801aeba:	0635      	lsls	r5, r6, #24
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	d501      	bpl.n	801aec4 <_printf_i+0x1c4>
 801aec0:	6019      	str	r1, [r3, #0]
 801aec2:	e002      	b.n	801aeca <_printf_i+0x1ca>
 801aec4:	0670      	lsls	r0, r6, #25
 801aec6:	d5fb      	bpl.n	801aec0 <_printf_i+0x1c0>
 801aec8:	8019      	strh	r1, [r3, #0]
 801aeca:	2300      	movs	r3, #0
 801aecc:	6123      	str	r3, [r4, #16]
 801aece:	4615      	mov	r5, r2
 801aed0:	e7bc      	b.n	801ae4c <_printf_i+0x14c>
 801aed2:	682b      	ldr	r3, [r5, #0]
 801aed4:	1d1a      	adds	r2, r3, #4
 801aed6:	602a      	str	r2, [r5, #0]
 801aed8:	681d      	ldr	r5, [r3, #0]
 801aeda:	6862      	ldr	r2, [r4, #4]
 801aedc:	2100      	movs	r1, #0
 801aede:	4628      	mov	r0, r5
 801aee0:	f7e5 f98e 	bl	8000200 <memchr>
 801aee4:	b108      	cbz	r0, 801aeea <_printf_i+0x1ea>
 801aee6:	1b40      	subs	r0, r0, r5
 801aee8:	6060      	str	r0, [r4, #4]
 801aeea:	6863      	ldr	r3, [r4, #4]
 801aeec:	6123      	str	r3, [r4, #16]
 801aeee:	2300      	movs	r3, #0
 801aef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aef4:	e7aa      	b.n	801ae4c <_printf_i+0x14c>
 801aef6:	6923      	ldr	r3, [r4, #16]
 801aef8:	462a      	mov	r2, r5
 801aefa:	4649      	mov	r1, r9
 801aefc:	4640      	mov	r0, r8
 801aefe:	47d0      	blx	sl
 801af00:	3001      	adds	r0, #1
 801af02:	d0ad      	beq.n	801ae60 <_printf_i+0x160>
 801af04:	6823      	ldr	r3, [r4, #0]
 801af06:	079b      	lsls	r3, r3, #30
 801af08:	d413      	bmi.n	801af32 <_printf_i+0x232>
 801af0a:	68e0      	ldr	r0, [r4, #12]
 801af0c:	9b03      	ldr	r3, [sp, #12]
 801af0e:	4298      	cmp	r0, r3
 801af10:	bfb8      	it	lt
 801af12:	4618      	movlt	r0, r3
 801af14:	e7a6      	b.n	801ae64 <_printf_i+0x164>
 801af16:	2301      	movs	r3, #1
 801af18:	4632      	mov	r2, r6
 801af1a:	4649      	mov	r1, r9
 801af1c:	4640      	mov	r0, r8
 801af1e:	47d0      	blx	sl
 801af20:	3001      	adds	r0, #1
 801af22:	d09d      	beq.n	801ae60 <_printf_i+0x160>
 801af24:	3501      	adds	r5, #1
 801af26:	68e3      	ldr	r3, [r4, #12]
 801af28:	9903      	ldr	r1, [sp, #12]
 801af2a:	1a5b      	subs	r3, r3, r1
 801af2c:	42ab      	cmp	r3, r5
 801af2e:	dcf2      	bgt.n	801af16 <_printf_i+0x216>
 801af30:	e7eb      	b.n	801af0a <_printf_i+0x20a>
 801af32:	2500      	movs	r5, #0
 801af34:	f104 0619 	add.w	r6, r4, #25
 801af38:	e7f5      	b.n	801af26 <_printf_i+0x226>
 801af3a:	bf00      	nop
 801af3c:	08028cfd 	.word	0x08028cfd
 801af40:	08028d0e 	.word	0x08028d0e

0801af44 <__sflush_r>:
 801af44:	898a      	ldrh	r2, [r1, #12]
 801af46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af4a:	4605      	mov	r5, r0
 801af4c:	0710      	lsls	r0, r2, #28
 801af4e:	460c      	mov	r4, r1
 801af50:	d458      	bmi.n	801b004 <__sflush_r+0xc0>
 801af52:	684b      	ldr	r3, [r1, #4]
 801af54:	2b00      	cmp	r3, #0
 801af56:	dc05      	bgt.n	801af64 <__sflush_r+0x20>
 801af58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	dc02      	bgt.n	801af64 <__sflush_r+0x20>
 801af5e:	2000      	movs	r0, #0
 801af60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801af66:	2e00      	cmp	r6, #0
 801af68:	d0f9      	beq.n	801af5e <__sflush_r+0x1a>
 801af6a:	2300      	movs	r3, #0
 801af6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801af70:	682f      	ldr	r7, [r5, #0]
 801af72:	6a21      	ldr	r1, [r4, #32]
 801af74:	602b      	str	r3, [r5, #0]
 801af76:	d032      	beq.n	801afde <__sflush_r+0x9a>
 801af78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801af7a:	89a3      	ldrh	r3, [r4, #12]
 801af7c:	075a      	lsls	r2, r3, #29
 801af7e:	d505      	bpl.n	801af8c <__sflush_r+0x48>
 801af80:	6863      	ldr	r3, [r4, #4]
 801af82:	1ac0      	subs	r0, r0, r3
 801af84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801af86:	b10b      	cbz	r3, 801af8c <__sflush_r+0x48>
 801af88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801af8a:	1ac0      	subs	r0, r0, r3
 801af8c:	2300      	movs	r3, #0
 801af8e:	4602      	mov	r2, r0
 801af90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801af92:	6a21      	ldr	r1, [r4, #32]
 801af94:	4628      	mov	r0, r5
 801af96:	47b0      	blx	r6
 801af98:	1c43      	adds	r3, r0, #1
 801af9a:	89a3      	ldrh	r3, [r4, #12]
 801af9c:	d106      	bne.n	801afac <__sflush_r+0x68>
 801af9e:	6829      	ldr	r1, [r5, #0]
 801afa0:	291d      	cmp	r1, #29
 801afa2:	d82b      	bhi.n	801affc <__sflush_r+0xb8>
 801afa4:	4a29      	ldr	r2, [pc, #164]	; (801b04c <__sflush_r+0x108>)
 801afa6:	410a      	asrs	r2, r1
 801afa8:	07d6      	lsls	r6, r2, #31
 801afaa:	d427      	bmi.n	801affc <__sflush_r+0xb8>
 801afac:	2200      	movs	r2, #0
 801afae:	6062      	str	r2, [r4, #4]
 801afb0:	04d9      	lsls	r1, r3, #19
 801afb2:	6922      	ldr	r2, [r4, #16]
 801afb4:	6022      	str	r2, [r4, #0]
 801afb6:	d504      	bpl.n	801afc2 <__sflush_r+0x7e>
 801afb8:	1c42      	adds	r2, r0, #1
 801afba:	d101      	bne.n	801afc0 <__sflush_r+0x7c>
 801afbc:	682b      	ldr	r3, [r5, #0]
 801afbe:	b903      	cbnz	r3, 801afc2 <__sflush_r+0x7e>
 801afc0:	6560      	str	r0, [r4, #84]	; 0x54
 801afc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801afc4:	602f      	str	r7, [r5, #0]
 801afc6:	2900      	cmp	r1, #0
 801afc8:	d0c9      	beq.n	801af5e <__sflush_r+0x1a>
 801afca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801afce:	4299      	cmp	r1, r3
 801afd0:	d002      	beq.n	801afd8 <__sflush_r+0x94>
 801afd2:	4628      	mov	r0, r5
 801afd4:	f7fe fc5e 	bl	8019894 <_free_r>
 801afd8:	2000      	movs	r0, #0
 801afda:	6360      	str	r0, [r4, #52]	; 0x34
 801afdc:	e7c0      	b.n	801af60 <__sflush_r+0x1c>
 801afde:	2301      	movs	r3, #1
 801afe0:	4628      	mov	r0, r5
 801afe2:	47b0      	blx	r6
 801afe4:	1c41      	adds	r1, r0, #1
 801afe6:	d1c8      	bne.n	801af7a <__sflush_r+0x36>
 801afe8:	682b      	ldr	r3, [r5, #0]
 801afea:	2b00      	cmp	r3, #0
 801afec:	d0c5      	beq.n	801af7a <__sflush_r+0x36>
 801afee:	2b1d      	cmp	r3, #29
 801aff0:	d001      	beq.n	801aff6 <__sflush_r+0xb2>
 801aff2:	2b16      	cmp	r3, #22
 801aff4:	d101      	bne.n	801affa <__sflush_r+0xb6>
 801aff6:	602f      	str	r7, [r5, #0]
 801aff8:	e7b1      	b.n	801af5e <__sflush_r+0x1a>
 801affa:	89a3      	ldrh	r3, [r4, #12]
 801affc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b000:	81a3      	strh	r3, [r4, #12]
 801b002:	e7ad      	b.n	801af60 <__sflush_r+0x1c>
 801b004:	690f      	ldr	r7, [r1, #16]
 801b006:	2f00      	cmp	r7, #0
 801b008:	d0a9      	beq.n	801af5e <__sflush_r+0x1a>
 801b00a:	0793      	lsls	r3, r2, #30
 801b00c:	680e      	ldr	r6, [r1, #0]
 801b00e:	bf08      	it	eq
 801b010:	694b      	ldreq	r3, [r1, #20]
 801b012:	600f      	str	r7, [r1, #0]
 801b014:	bf18      	it	ne
 801b016:	2300      	movne	r3, #0
 801b018:	eba6 0807 	sub.w	r8, r6, r7
 801b01c:	608b      	str	r3, [r1, #8]
 801b01e:	f1b8 0f00 	cmp.w	r8, #0
 801b022:	dd9c      	ble.n	801af5e <__sflush_r+0x1a>
 801b024:	6a21      	ldr	r1, [r4, #32]
 801b026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b028:	4643      	mov	r3, r8
 801b02a:	463a      	mov	r2, r7
 801b02c:	4628      	mov	r0, r5
 801b02e:	47b0      	blx	r6
 801b030:	2800      	cmp	r0, #0
 801b032:	dc06      	bgt.n	801b042 <__sflush_r+0xfe>
 801b034:	89a3      	ldrh	r3, [r4, #12]
 801b036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b03a:	81a3      	strh	r3, [r4, #12]
 801b03c:	f04f 30ff 	mov.w	r0, #4294967295
 801b040:	e78e      	b.n	801af60 <__sflush_r+0x1c>
 801b042:	4407      	add	r7, r0
 801b044:	eba8 0800 	sub.w	r8, r8, r0
 801b048:	e7e9      	b.n	801b01e <__sflush_r+0xda>
 801b04a:	bf00      	nop
 801b04c:	dfbffffe 	.word	0xdfbffffe

0801b050 <_fflush_r>:
 801b050:	b538      	push	{r3, r4, r5, lr}
 801b052:	690b      	ldr	r3, [r1, #16]
 801b054:	4605      	mov	r5, r0
 801b056:	460c      	mov	r4, r1
 801b058:	b913      	cbnz	r3, 801b060 <_fflush_r+0x10>
 801b05a:	2500      	movs	r5, #0
 801b05c:	4628      	mov	r0, r5
 801b05e:	bd38      	pop	{r3, r4, r5, pc}
 801b060:	b118      	cbz	r0, 801b06a <_fflush_r+0x1a>
 801b062:	6a03      	ldr	r3, [r0, #32]
 801b064:	b90b      	cbnz	r3, 801b06a <_fflush_r+0x1a>
 801b066:	f7fe fa75 	bl	8019554 <__sinit>
 801b06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d0f3      	beq.n	801b05a <_fflush_r+0xa>
 801b072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b074:	07d0      	lsls	r0, r2, #31
 801b076:	d404      	bmi.n	801b082 <_fflush_r+0x32>
 801b078:	0599      	lsls	r1, r3, #22
 801b07a:	d402      	bmi.n	801b082 <_fflush_r+0x32>
 801b07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b07e:	f7fe fbe2 	bl	8019846 <__retarget_lock_acquire_recursive>
 801b082:	4628      	mov	r0, r5
 801b084:	4621      	mov	r1, r4
 801b086:	f7ff ff5d 	bl	801af44 <__sflush_r>
 801b08a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b08c:	07da      	lsls	r2, r3, #31
 801b08e:	4605      	mov	r5, r0
 801b090:	d4e4      	bmi.n	801b05c <_fflush_r+0xc>
 801b092:	89a3      	ldrh	r3, [r4, #12]
 801b094:	059b      	lsls	r3, r3, #22
 801b096:	d4e1      	bmi.n	801b05c <_fflush_r+0xc>
 801b098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b09a:	f7fe fbd5 	bl	8019848 <__retarget_lock_release_recursive>
 801b09e:	e7dd      	b.n	801b05c <_fflush_r+0xc>

0801b0a0 <memmove>:
 801b0a0:	4288      	cmp	r0, r1
 801b0a2:	b510      	push	{r4, lr}
 801b0a4:	eb01 0402 	add.w	r4, r1, r2
 801b0a8:	d902      	bls.n	801b0b0 <memmove+0x10>
 801b0aa:	4284      	cmp	r4, r0
 801b0ac:	4623      	mov	r3, r4
 801b0ae:	d807      	bhi.n	801b0c0 <memmove+0x20>
 801b0b0:	1e43      	subs	r3, r0, #1
 801b0b2:	42a1      	cmp	r1, r4
 801b0b4:	d008      	beq.n	801b0c8 <memmove+0x28>
 801b0b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b0ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b0be:	e7f8      	b.n	801b0b2 <memmove+0x12>
 801b0c0:	4402      	add	r2, r0
 801b0c2:	4601      	mov	r1, r0
 801b0c4:	428a      	cmp	r2, r1
 801b0c6:	d100      	bne.n	801b0ca <memmove+0x2a>
 801b0c8:	bd10      	pop	{r4, pc}
 801b0ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b0ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b0d2:	e7f7      	b.n	801b0c4 <memmove+0x24>

0801b0d4 <__assert_func>:
 801b0d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b0d6:	4614      	mov	r4, r2
 801b0d8:	461a      	mov	r2, r3
 801b0da:	4b09      	ldr	r3, [pc, #36]	; (801b100 <__assert_func+0x2c>)
 801b0dc:	681b      	ldr	r3, [r3, #0]
 801b0de:	4605      	mov	r5, r0
 801b0e0:	68d8      	ldr	r0, [r3, #12]
 801b0e2:	b14c      	cbz	r4, 801b0f8 <__assert_func+0x24>
 801b0e4:	4b07      	ldr	r3, [pc, #28]	; (801b104 <__assert_func+0x30>)
 801b0e6:	9100      	str	r1, [sp, #0]
 801b0e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b0ec:	4906      	ldr	r1, [pc, #24]	; (801b108 <__assert_func+0x34>)
 801b0ee:	462b      	mov	r3, r5
 801b0f0:	f000 f854 	bl	801b19c <fiprintf>
 801b0f4:	f000 f864 	bl	801b1c0 <abort>
 801b0f8:	4b04      	ldr	r3, [pc, #16]	; (801b10c <__assert_func+0x38>)
 801b0fa:	461c      	mov	r4, r3
 801b0fc:	e7f3      	b.n	801b0e6 <__assert_func+0x12>
 801b0fe:	bf00      	nop
 801b100:	20000364 	.word	0x20000364
 801b104:	08028d1f 	.word	0x08028d1f
 801b108:	08028d2c 	.word	0x08028d2c
 801b10c:	08028d5a 	.word	0x08028d5a

0801b110 <_calloc_r>:
 801b110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b112:	fba1 2402 	umull	r2, r4, r1, r2
 801b116:	b94c      	cbnz	r4, 801b12c <_calloc_r+0x1c>
 801b118:	4611      	mov	r1, r2
 801b11a:	9201      	str	r2, [sp, #4]
 801b11c:	f7fd fa14 	bl	8018548 <_malloc_r>
 801b120:	9a01      	ldr	r2, [sp, #4]
 801b122:	4605      	mov	r5, r0
 801b124:	b930      	cbnz	r0, 801b134 <_calloc_r+0x24>
 801b126:	4628      	mov	r0, r5
 801b128:	b003      	add	sp, #12
 801b12a:	bd30      	pop	{r4, r5, pc}
 801b12c:	220c      	movs	r2, #12
 801b12e:	6002      	str	r2, [r0, #0]
 801b130:	2500      	movs	r5, #0
 801b132:	e7f8      	b.n	801b126 <_calloc_r+0x16>
 801b134:	4621      	mov	r1, r4
 801b136:	f7fe fabf 	bl	80196b8 <memset>
 801b13a:	e7f4      	b.n	801b126 <_calloc_r+0x16>

0801b13c <_realloc_r>:
 801b13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b140:	4680      	mov	r8, r0
 801b142:	4614      	mov	r4, r2
 801b144:	460e      	mov	r6, r1
 801b146:	b921      	cbnz	r1, 801b152 <_realloc_r+0x16>
 801b148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b14c:	4611      	mov	r1, r2
 801b14e:	f7fd b9fb 	b.w	8018548 <_malloc_r>
 801b152:	b92a      	cbnz	r2, 801b160 <_realloc_r+0x24>
 801b154:	f7fe fb9e 	bl	8019894 <_free_r>
 801b158:	4625      	mov	r5, r4
 801b15a:	4628      	mov	r0, r5
 801b15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b160:	f000 f835 	bl	801b1ce <_malloc_usable_size_r>
 801b164:	4284      	cmp	r4, r0
 801b166:	4607      	mov	r7, r0
 801b168:	d802      	bhi.n	801b170 <_realloc_r+0x34>
 801b16a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b16e:	d812      	bhi.n	801b196 <_realloc_r+0x5a>
 801b170:	4621      	mov	r1, r4
 801b172:	4640      	mov	r0, r8
 801b174:	f7fd f9e8 	bl	8018548 <_malloc_r>
 801b178:	4605      	mov	r5, r0
 801b17a:	2800      	cmp	r0, #0
 801b17c:	d0ed      	beq.n	801b15a <_realloc_r+0x1e>
 801b17e:	42bc      	cmp	r4, r7
 801b180:	4622      	mov	r2, r4
 801b182:	4631      	mov	r1, r6
 801b184:	bf28      	it	cs
 801b186:	463a      	movcs	r2, r7
 801b188:	f7fe fb67 	bl	801985a <memcpy>
 801b18c:	4631      	mov	r1, r6
 801b18e:	4640      	mov	r0, r8
 801b190:	f7fe fb80 	bl	8019894 <_free_r>
 801b194:	e7e1      	b.n	801b15a <_realloc_r+0x1e>
 801b196:	4635      	mov	r5, r6
 801b198:	e7df      	b.n	801b15a <_realloc_r+0x1e>
	...

0801b19c <fiprintf>:
 801b19c:	b40e      	push	{r1, r2, r3}
 801b19e:	b503      	push	{r0, r1, lr}
 801b1a0:	4601      	mov	r1, r0
 801b1a2:	ab03      	add	r3, sp, #12
 801b1a4:	4805      	ldr	r0, [pc, #20]	; (801b1bc <fiprintf+0x20>)
 801b1a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b1aa:	6800      	ldr	r0, [r0, #0]
 801b1ac:	9301      	str	r3, [sp, #4]
 801b1ae:	f000 f83f 	bl	801b230 <_vfiprintf_r>
 801b1b2:	b002      	add	sp, #8
 801b1b4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b1b8:	b003      	add	sp, #12
 801b1ba:	4770      	bx	lr
 801b1bc:	20000364 	.word	0x20000364

0801b1c0 <abort>:
 801b1c0:	b508      	push	{r3, lr}
 801b1c2:	2006      	movs	r0, #6
 801b1c4:	f000 fa0c 	bl	801b5e0 <raise>
 801b1c8:	2001      	movs	r0, #1
 801b1ca:	f7e6 fbbf 	bl	800194c <_exit>

0801b1ce <_malloc_usable_size_r>:
 801b1ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b1d2:	1f18      	subs	r0, r3, #4
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	bfbc      	itt	lt
 801b1d8:	580b      	ldrlt	r3, [r1, r0]
 801b1da:	18c0      	addlt	r0, r0, r3
 801b1dc:	4770      	bx	lr

0801b1de <__sfputc_r>:
 801b1de:	6893      	ldr	r3, [r2, #8]
 801b1e0:	3b01      	subs	r3, #1
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	b410      	push	{r4}
 801b1e6:	6093      	str	r3, [r2, #8]
 801b1e8:	da08      	bge.n	801b1fc <__sfputc_r+0x1e>
 801b1ea:	6994      	ldr	r4, [r2, #24]
 801b1ec:	42a3      	cmp	r3, r4
 801b1ee:	db01      	blt.n	801b1f4 <__sfputc_r+0x16>
 801b1f0:	290a      	cmp	r1, #10
 801b1f2:	d103      	bne.n	801b1fc <__sfputc_r+0x1e>
 801b1f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b1f8:	f000 b934 	b.w	801b464 <__swbuf_r>
 801b1fc:	6813      	ldr	r3, [r2, #0]
 801b1fe:	1c58      	adds	r0, r3, #1
 801b200:	6010      	str	r0, [r2, #0]
 801b202:	7019      	strb	r1, [r3, #0]
 801b204:	4608      	mov	r0, r1
 801b206:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b20a:	4770      	bx	lr

0801b20c <__sfputs_r>:
 801b20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b20e:	4606      	mov	r6, r0
 801b210:	460f      	mov	r7, r1
 801b212:	4614      	mov	r4, r2
 801b214:	18d5      	adds	r5, r2, r3
 801b216:	42ac      	cmp	r4, r5
 801b218:	d101      	bne.n	801b21e <__sfputs_r+0x12>
 801b21a:	2000      	movs	r0, #0
 801b21c:	e007      	b.n	801b22e <__sfputs_r+0x22>
 801b21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b222:	463a      	mov	r2, r7
 801b224:	4630      	mov	r0, r6
 801b226:	f7ff ffda 	bl	801b1de <__sfputc_r>
 801b22a:	1c43      	adds	r3, r0, #1
 801b22c:	d1f3      	bne.n	801b216 <__sfputs_r+0xa>
 801b22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b230 <_vfiprintf_r>:
 801b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b234:	460d      	mov	r5, r1
 801b236:	b09d      	sub	sp, #116	; 0x74
 801b238:	4614      	mov	r4, r2
 801b23a:	4698      	mov	r8, r3
 801b23c:	4606      	mov	r6, r0
 801b23e:	b118      	cbz	r0, 801b248 <_vfiprintf_r+0x18>
 801b240:	6a03      	ldr	r3, [r0, #32]
 801b242:	b90b      	cbnz	r3, 801b248 <_vfiprintf_r+0x18>
 801b244:	f7fe f986 	bl	8019554 <__sinit>
 801b248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b24a:	07d9      	lsls	r1, r3, #31
 801b24c:	d405      	bmi.n	801b25a <_vfiprintf_r+0x2a>
 801b24e:	89ab      	ldrh	r3, [r5, #12]
 801b250:	059a      	lsls	r2, r3, #22
 801b252:	d402      	bmi.n	801b25a <_vfiprintf_r+0x2a>
 801b254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b256:	f7fe faf6 	bl	8019846 <__retarget_lock_acquire_recursive>
 801b25a:	89ab      	ldrh	r3, [r5, #12]
 801b25c:	071b      	lsls	r3, r3, #28
 801b25e:	d501      	bpl.n	801b264 <_vfiprintf_r+0x34>
 801b260:	692b      	ldr	r3, [r5, #16]
 801b262:	b99b      	cbnz	r3, 801b28c <_vfiprintf_r+0x5c>
 801b264:	4629      	mov	r1, r5
 801b266:	4630      	mov	r0, r6
 801b268:	f000 f93a 	bl	801b4e0 <__swsetup_r>
 801b26c:	b170      	cbz	r0, 801b28c <_vfiprintf_r+0x5c>
 801b26e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b270:	07dc      	lsls	r4, r3, #31
 801b272:	d504      	bpl.n	801b27e <_vfiprintf_r+0x4e>
 801b274:	f04f 30ff 	mov.w	r0, #4294967295
 801b278:	b01d      	add	sp, #116	; 0x74
 801b27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b27e:	89ab      	ldrh	r3, [r5, #12]
 801b280:	0598      	lsls	r0, r3, #22
 801b282:	d4f7      	bmi.n	801b274 <_vfiprintf_r+0x44>
 801b284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b286:	f7fe fadf 	bl	8019848 <__retarget_lock_release_recursive>
 801b28a:	e7f3      	b.n	801b274 <_vfiprintf_r+0x44>
 801b28c:	2300      	movs	r3, #0
 801b28e:	9309      	str	r3, [sp, #36]	; 0x24
 801b290:	2320      	movs	r3, #32
 801b292:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b296:	f8cd 800c 	str.w	r8, [sp, #12]
 801b29a:	2330      	movs	r3, #48	; 0x30
 801b29c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b450 <_vfiprintf_r+0x220>
 801b2a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b2a4:	f04f 0901 	mov.w	r9, #1
 801b2a8:	4623      	mov	r3, r4
 801b2aa:	469a      	mov	sl, r3
 801b2ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b2b0:	b10a      	cbz	r2, 801b2b6 <_vfiprintf_r+0x86>
 801b2b2:	2a25      	cmp	r2, #37	; 0x25
 801b2b4:	d1f9      	bne.n	801b2aa <_vfiprintf_r+0x7a>
 801b2b6:	ebba 0b04 	subs.w	fp, sl, r4
 801b2ba:	d00b      	beq.n	801b2d4 <_vfiprintf_r+0xa4>
 801b2bc:	465b      	mov	r3, fp
 801b2be:	4622      	mov	r2, r4
 801b2c0:	4629      	mov	r1, r5
 801b2c2:	4630      	mov	r0, r6
 801b2c4:	f7ff ffa2 	bl	801b20c <__sfputs_r>
 801b2c8:	3001      	adds	r0, #1
 801b2ca:	f000 80a9 	beq.w	801b420 <_vfiprintf_r+0x1f0>
 801b2ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b2d0:	445a      	add	r2, fp
 801b2d2:	9209      	str	r2, [sp, #36]	; 0x24
 801b2d4:	f89a 3000 	ldrb.w	r3, [sl]
 801b2d8:	2b00      	cmp	r3, #0
 801b2da:	f000 80a1 	beq.w	801b420 <_vfiprintf_r+0x1f0>
 801b2de:	2300      	movs	r3, #0
 801b2e0:	f04f 32ff 	mov.w	r2, #4294967295
 801b2e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b2e8:	f10a 0a01 	add.w	sl, sl, #1
 801b2ec:	9304      	str	r3, [sp, #16]
 801b2ee:	9307      	str	r3, [sp, #28]
 801b2f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b2f4:	931a      	str	r3, [sp, #104]	; 0x68
 801b2f6:	4654      	mov	r4, sl
 801b2f8:	2205      	movs	r2, #5
 801b2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b2fe:	4854      	ldr	r0, [pc, #336]	; (801b450 <_vfiprintf_r+0x220>)
 801b300:	f7e4 ff7e 	bl	8000200 <memchr>
 801b304:	9a04      	ldr	r2, [sp, #16]
 801b306:	b9d8      	cbnz	r0, 801b340 <_vfiprintf_r+0x110>
 801b308:	06d1      	lsls	r1, r2, #27
 801b30a:	bf44      	itt	mi
 801b30c:	2320      	movmi	r3, #32
 801b30e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b312:	0713      	lsls	r3, r2, #28
 801b314:	bf44      	itt	mi
 801b316:	232b      	movmi	r3, #43	; 0x2b
 801b318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b31c:	f89a 3000 	ldrb.w	r3, [sl]
 801b320:	2b2a      	cmp	r3, #42	; 0x2a
 801b322:	d015      	beq.n	801b350 <_vfiprintf_r+0x120>
 801b324:	9a07      	ldr	r2, [sp, #28]
 801b326:	4654      	mov	r4, sl
 801b328:	2000      	movs	r0, #0
 801b32a:	f04f 0c0a 	mov.w	ip, #10
 801b32e:	4621      	mov	r1, r4
 801b330:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b334:	3b30      	subs	r3, #48	; 0x30
 801b336:	2b09      	cmp	r3, #9
 801b338:	d94d      	bls.n	801b3d6 <_vfiprintf_r+0x1a6>
 801b33a:	b1b0      	cbz	r0, 801b36a <_vfiprintf_r+0x13a>
 801b33c:	9207      	str	r2, [sp, #28]
 801b33e:	e014      	b.n	801b36a <_vfiprintf_r+0x13a>
 801b340:	eba0 0308 	sub.w	r3, r0, r8
 801b344:	fa09 f303 	lsl.w	r3, r9, r3
 801b348:	4313      	orrs	r3, r2
 801b34a:	9304      	str	r3, [sp, #16]
 801b34c:	46a2      	mov	sl, r4
 801b34e:	e7d2      	b.n	801b2f6 <_vfiprintf_r+0xc6>
 801b350:	9b03      	ldr	r3, [sp, #12]
 801b352:	1d19      	adds	r1, r3, #4
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	9103      	str	r1, [sp, #12]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	bfbb      	ittet	lt
 801b35c:	425b      	neglt	r3, r3
 801b35e:	f042 0202 	orrlt.w	r2, r2, #2
 801b362:	9307      	strge	r3, [sp, #28]
 801b364:	9307      	strlt	r3, [sp, #28]
 801b366:	bfb8      	it	lt
 801b368:	9204      	strlt	r2, [sp, #16]
 801b36a:	7823      	ldrb	r3, [r4, #0]
 801b36c:	2b2e      	cmp	r3, #46	; 0x2e
 801b36e:	d10c      	bne.n	801b38a <_vfiprintf_r+0x15a>
 801b370:	7863      	ldrb	r3, [r4, #1]
 801b372:	2b2a      	cmp	r3, #42	; 0x2a
 801b374:	d134      	bne.n	801b3e0 <_vfiprintf_r+0x1b0>
 801b376:	9b03      	ldr	r3, [sp, #12]
 801b378:	1d1a      	adds	r2, r3, #4
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	9203      	str	r2, [sp, #12]
 801b37e:	2b00      	cmp	r3, #0
 801b380:	bfb8      	it	lt
 801b382:	f04f 33ff 	movlt.w	r3, #4294967295
 801b386:	3402      	adds	r4, #2
 801b388:	9305      	str	r3, [sp, #20]
 801b38a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b460 <_vfiprintf_r+0x230>
 801b38e:	7821      	ldrb	r1, [r4, #0]
 801b390:	2203      	movs	r2, #3
 801b392:	4650      	mov	r0, sl
 801b394:	f7e4 ff34 	bl	8000200 <memchr>
 801b398:	b138      	cbz	r0, 801b3aa <_vfiprintf_r+0x17a>
 801b39a:	9b04      	ldr	r3, [sp, #16]
 801b39c:	eba0 000a 	sub.w	r0, r0, sl
 801b3a0:	2240      	movs	r2, #64	; 0x40
 801b3a2:	4082      	lsls	r2, r0
 801b3a4:	4313      	orrs	r3, r2
 801b3a6:	3401      	adds	r4, #1
 801b3a8:	9304      	str	r3, [sp, #16]
 801b3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b3ae:	4829      	ldr	r0, [pc, #164]	; (801b454 <_vfiprintf_r+0x224>)
 801b3b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b3b4:	2206      	movs	r2, #6
 801b3b6:	f7e4 ff23 	bl	8000200 <memchr>
 801b3ba:	2800      	cmp	r0, #0
 801b3bc:	d03f      	beq.n	801b43e <_vfiprintf_r+0x20e>
 801b3be:	4b26      	ldr	r3, [pc, #152]	; (801b458 <_vfiprintf_r+0x228>)
 801b3c0:	bb1b      	cbnz	r3, 801b40a <_vfiprintf_r+0x1da>
 801b3c2:	9b03      	ldr	r3, [sp, #12]
 801b3c4:	3307      	adds	r3, #7
 801b3c6:	f023 0307 	bic.w	r3, r3, #7
 801b3ca:	3308      	adds	r3, #8
 801b3cc:	9303      	str	r3, [sp, #12]
 801b3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b3d0:	443b      	add	r3, r7
 801b3d2:	9309      	str	r3, [sp, #36]	; 0x24
 801b3d4:	e768      	b.n	801b2a8 <_vfiprintf_r+0x78>
 801b3d6:	fb0c 3202 	mla	r2, ip, r2, r3
 801b3da:	460c      	mov	r4, r1
 801b3dc:	2001      	movs	r0, #1
 801b3de:	e7a6      	b.n	801b32e <_vfiprintf_r+0xfe>
 801b3e0:	2300      	movs	r3, #0
 801b3e2:	3401      	adds	r4, #1
 801b3e4:	9305      	str	r3, [sp, #20]
 801b3e6:	4619      	mov	r1, r3
 801b3e8:	f04f 0c0a 	mov.w	ip, #10
 801b3ec:	4620      	mov	r0, r4
 801b3ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b3f2:	3a30      	subs	r2, #48	; 0x30
 801b3f4:	2a09      	cmp	r2, #9
 801b3f6:	d903      	bls.n	801b400 <_vfiprintf_r+0x1d0>
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	d0c6      	beq.n	801b38a <_vfiprintf_r+0x15a>
 801b3fc:	9105      	str	r1, [sp, #20]
 801b3fe:	e7c4      	b.n	801b38a <_vfiprintf_r+0x15a>
 801b400:	fb0c 2101 	mla	r1, ip, r1, r2
 801b404:	4604      	mov	r4, r0
 801b406:	2301      	movs	r3, #1
 801b408:	e7f0      	b.n	801b3ec <_vfiprintf_r+0x1bc>
 801b40a:	ab03      	add	r3, sp, #12
 801b40c:	9300      	str	r3, [sp, #0]
 801b40e:	462a      	mov	r2, r5
 801b410:	4b12      	ldr	r3, [pc, #72]	; (801b45c <_vfiprintf_r+0x22c>)
 801b412:	a904      	add	r1, sp, #16
 801b414:	4630      	mov	r0, r6
 801b416:	f3af 8000 	nop.w
 801b41a:	4607      	mov	r7, r0
 801b41c:	1c78      	adds	r0, r7, #1
 801b41e:	d1d6      	bne.n	801b3ce <_vfiprintf_r+0x19e>
 801b420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b422:	07d9      	lsls	r1, r3, #31
 801b424:	d405      	bmi.n	801b432 <_vfiprintf_r+0x202>
 801b426:	89ab      	ldrh	r3, [r5, #12]
 801b428:	059a      	lsls	r2, r3, #22
 801b42a:	d402      	bmi.n	801b432 <_vfiprintf_r+0x202>
 801b42c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b42e:	f7fe fa0b 	bl	8019848 <__retarget_lock_release_recursive>
 801b432:	89ab      	ldrh	r3, [r5, #12]
 801b434:	065b      	lsls	r3, r3, #25
 801b436:	f53f af1d 	bmi.w	801b274 <_vfiprintf_r+0x44>
 801b43a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b43c:	e71c      	b.n	801b278 <_vfiprintf_r+0x48>
 801b43e:	ab03      	add	r3, sp, #12
 801b440:	9300      	str	r3, [sp, #0]
 801b442:	462a      	mov	r2, r5
 801b444:	4b05      	ldr	r3, [pc, #20]	; (801b45c <_vfiprintf_r+0x22c>)
 801b446:	a904      	add	r1, sp, #16
 801b448:	4630      	mov	r0, r6
 801b44a:	f7ff fc59 	bl	801ad00 <_printf_i>
 801b44e:	e7e4      	b.n	801b41a <_vfiprintf_r+0x1ea>
 801b450:	08028cec 	.word	0x08028cec
 801b454:	08028cf6 	.word	0x08028cf6
 801b458:	00000000 	.word	0x00000000
 801b45c:	0801b20d 	.word	0x0801b20d
 801b460:	08028cf2 	.word	0x08028cf2

0801b464 <__swbuf_r>:
 801b464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b466:	460e      	mov	r6, r1
 801b468:	4614      	mov	r4, r2
 801b46a:	4605      	mov	r5, r0
 801b46c:	b118      	cbz	r0, 801b476 <__swbuf_r+0x12>
 801b46e:	6a03      	ldr	r3, [r0, #32]
 801b470:	b90b      	cbnz	r3, 801b476 <__swbuf_r+0x12>
 801b472:	f7fe f86f 	bl	8019554 <__sinit>
 801b476:	69a3      	ldr	r3, [r4, #24]
 801b478:	60a3      	str	r3, [r4, #8]
 801b47a:	89a3      	ldrh	r3, [r4, #12]
 801b47c:	071a      	lsls	r2, r3, #28
 801b47e:	d525      	bpl.n	801b4cc <__swbuf_r+0x68>
 801b480:	6923      	ldr	r3, [r4, #16]
 801b482:	b31b      	cbz	r3, 801b4cc <__swbuf_r+0x68>
 801b484:	6823      	ldr	r3, [r4, #0]
 801b486:	6922      	ldr	r2, [r4, #16]
 801b488:	1a98      	subs	r0, r3, r2
 801b48a:	6963      	ldr	r3, [r4, #20]
 801b48c:	b2f6      	uxtb	r6, r6
 801b48e:	4283      	cmp	r3, r0
 801b490:	4637      	mov	r7, r6
 801b492:	dc04      	bgt.n	801b49e <__swbuf_r+0x3a>
 801b494:	4621      	mov	r1, r4
 801b496:	4628      	mov	r0, r5
 801b498:	f7ff fdda 	bl	801b050 <_fflush_r>
 801b49c:	b9e0      	cbnz	r0, 801b4d8 <__swbuf_r+0x74>
 801b49e:	68a3      	ldr	r3, [r4, #8]
 801b4a0:	3b01      	subs	r3, #1
 801b4a2:	60a3      	str	r3, [r4, #8]
 801b4a4:	6823      	ldr	r3, [r4, #0]
 801b4a6:	1c5a      	adds	r2, r3, #1
 801b4a8:	6022      	str	r2, [r4, #0]
 801b4aa:	701e      	strb	r6, [r3, #0]
 801b4ac:	6962      	ldr	r2, [r4, #20]
 801b4ae:	1c43      	adds	r3, r0, #1
 801b4b0:	429a      	cmp	r2, r3
 801b4b2:	d004      	beq.n	801b4be <__swbuf_r+0x5a>
 801b4b4:	89a3      	ldrh	r3, [r4, #12]
 801b4b6:	07db      	lsls	r3, r3, #31
 801b4b8:	d506      	bpl.n	801b4c8 <__swbuf_r+0x64>
 801b4ba:	2e0a      	cmp	r6, #10
 801b4bc:	d104      	bne.n	801b4c8 <__swbuf_r+0x64>
 801b4be:	4621      	mov	r1, r4
 801b4c0:	4628      	mov	r0, r5
 801b4c2:	f7ff fdc5 	bl	801b050 <_fflush_r>
 801b4c6:	b938      	cbnz	r0, 801b4d8 <__swbuf_r+0x74>
 801b4c8:	4638      	mov	r0, r7
 801b4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4cc:	4621      	mov	r1, r4
 801b4ce:	4628      	mov	r0, r5
 801b4d0:	f000 f806 	bl	801b4e0 <__swsetup_r>
 801b4d4:	2800      	cmp	r0, #0
 801b4d6:	d0d5      	beq.n	801b484 <__swbuf_r+0x20>
 801b4d8:	f04f 37ff 	mov.w	r7, #4294967295
 801b4dc:	e7f4      	b.n	801b4c8 <__swbuf_r+0x64>
	...

0801b4e0 <__swsetup_r>:
 801b4e0:	b538      	push	{r3, r4, r5, lr}
 801b4e2:	4b2a      	ldr	r3, [pc, #168]	; (801b58c <__swsetup_r+0xac>)
 801b4e4:	4605      	mov	r5, r0
 801b4e6:	6818      	ldr	r0, [r3, #0]
 801b4e8:	460c      	mov	r4, r1
 801b4ea:	b118      	cbz	r0, 801b4f4 <__swsetup_r+0x14>
 801b4ec:	6a03      	ldr	r3, [r0, #32]
 801b4ee:	b90b      	cbnz	r3, 801b4f4 <__swsetup_r+0x14>
 801b4f0:	f7fe f830 	bl	8019554 <__sinit>
 801b4f4:	89a3      	ldrh	r3, [r4, #12]
 801b4f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b4fa:	0718      	lsls	r0, r3, #28
 801b4fc:	d422      	bmi.n	801b544 <__swsetup_r+0x64>
 801b4fe:	06d9      	lsls	r1, r3, #27
 801b500:	d407      	bmi.n	801b512 <__swsetup_r+0x32>
 801b502:	2309      	movs	r3, #9
 801b504:	602b      	str	r3, [r5, #0]
 801b506:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b50a:	81a3      	strh	r3, [r4, #12]
 801b50c:	f04f 30ff 	mov.w	r0, #4294967295
 801b510:	e034      	b.n	801b57c <__swsetup_r+0x9c>
 801b512:	0758      	lsls	r0, r3, #29
 801b514:	d512      	bpl.n	801b53c <__swsetup_r+0x5c>
 801b516:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b518:	b141      	cbz	r1, 801b52c <__swsetup_r+0x4c>
 801b51a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b51e:	4299      	cmp	r1, r3
 801b520:	d002      	beq.n	801b528 <__swsetup_r+0x48>
 801b522:	4628      	mov	r0, r5
 801b524:	f7fe f9b6 	bl	8019894 <_free_r>
 801b528:	2300      	movs	r3, #0
 801b52a:	6363      	str	r3, [r4, #52]	; 0x34
 801b52c:	89a3      	ldrh	r3, [r4, #12]
 801b52e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b532:	81a3      	strh	r3, [r4, #12]
 801b534:	2300      	movs	r3, #0
 801b536:	6063      	str	r3, [r4, #4]
 801b538:	6923      	ldr	r3, [r4, #16]
 801b53a:	6023      	str	r3, [r4, #0]
 801b53c:	89a3      	ldrh	r3, [r4, #12]
 801b53e:	f043 0308 	orr.w	r3, r3, #8
 801b542:	81a3      	strh	r3, [r4, #12]
 801b544:	6923      	ldr	r3, [r4, #16]
 801b546:	b94b      	cbnz	r3, 801b55c <__swsetup_r+0x7c>
 801b548:	89a3      	ldrh	r3, [r4, #12]
 801b54a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b54e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b552:	d003      	beq.n	801b55c <__swsetup_r+0x7c>
 801b554:	4621      	mov	r1, r4
 801b556:	4628      	mov	r0, r5
 801b558:	f000 f884 	bl	801b664 <__smakebuf_r>
 801b55c:	89a0      	ldrh	r0, [r4, #12]
 801b55e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b562:	f010 0301 	ands.w	r3, r0, #1
 801b566:	d00a      	beq.n	801b57e <__swsetup_r+0x9e>
 801b568:	2300      	movs	r3, #0
 801b56a:	60a3      	str	r3, [r4, #8]
 801b56c:	6963      	ldr	r3, [r4, #20]
 801b56e:	425b      	negs	r3, r3
 801b570:	61a3      	str	r3, [r4, #24]
 801b572:	6923      	ldr	r3, [r4, #16]
 801b574:	b943      	cbnz	r3, 801b588 <__swsetup_r+0xa8>
 801b576:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b57a:	d1c4      	bne.n	801b506 <__swsetup_r+0x26>
 801b57c:	bd38      	pop	{r3, r4, r5, pc}
 801b57e:	0781      	lsls	r1, r0, #30
 801b580:	bf58      	it	pl
 801b582:	6963      	ldrpl	r3, [r4, #20]
 801b584:	60a3      	str	r3, [r4, #8]
 801b586:	e7f4      	b.n	801b572 <__swsetup_r+0x92>
 801b588:	2000      	movs	r0, #0
 801b58a:	e7f7      	b.n	801b57c <__swsetup_r+0x9c>
 801b58c:	20000364 	.word	0x20000364

0801b590 <_raise_r>:
 801b590:	291f      	cmp	r1, #31
 801b592:	b538      	push	{r3, r4, r5, lr}
 801b594:	4604      	mov	r4, r0
 801b596:	460d      	mov	r5, r1
 801b598:	d904      	bls.n	801b5a4 <_raise_r+0x14>
 801b59a:	2316      	movs	r3, #22
 801b59c:	6003      	str	r3, [r0, #0]
 801b59e:	f04f 30ff 	mov.w	r0, #4294967295
 801b5a2:	bd38      	pop	{r3, r4, r5, pc}
 801b5a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b5a6:	b112      	cbz	r2, 801b5ae <_raise_r+0x1e>
 801b5a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b5ac:	b94b      	cbnz	r3, 801b5c2 <_raise_r+0x32>
 801b5ae:	4620      	mov	r0, r4
 801b5b0:	f000 f830 	bl	801b614 <_getpid_r>
 801b5b4:	462a      	mov	r2, r5
 801b5b6:	4601      	mov	r1, r0
 801b5b8:	4620      	mov	r0, r4
 801b5ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b5be:	f000 b817 	b.w	801b5f0 <_kill_r>
 801b5c2:	2b01      	cmp	r3, #1
 801b5c4:	d00a      	beq.n	801b5dc <_raise_r+0x4c>
 801b5c6:	1c59      	adds	r1, r3, #1
 801b5c8:	d103      	bne.n	801b5d2 <_raise_r+0x42>
 801b5ca:	2316      	movs	r3, #22
 801b5cc:	6003      	str	r3, [r0, #0]
 801b5ce:	2001      	movs	r0, #1
 801b5d0:	e7e7      	b.n	801b5a2 <_raise_r+0x12>
 801b5d2:	2400      	movs	r4, #0
 801b5d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b5d8:	4628      	mov	r0, r5
 801b5da:	4798      	blx	r3
 801b5dc:	2000      	movs	r0, #0
 801b5de:	e7e0      	b.n	801b5a2 <_raise_r+0x12>

0801b5e0 <raise>:
 801b5e0:	4b02      	ldr	r3, [pc, #8]	; (801b5ec <raise+0xc>)
 801b5e2:	4601      	mov	r1, r0
 801b5e4:	6818      	ldr	r0, [r3, #0]
 801b5e6:	f7ff bfd3 	b.w	801b590 <_raise_r>
 801b5ea:	bf00      	nop
 801b5ec:	20000364 	.word	0x20000364

0801b5f0 <_kill_r>:
 801b5f0:	b538      	push	{r3, r4, r5, lr}
 801b5f2:	4d07      	ldr	r5, [pc, #28]	; (801b610 <_kill_r+0x20>)
 801b5f4:	2300      	movs	r3, #0
 801b5f6:	4604      	mov	r4, r0
 801b5f8:	4608      	mov	r0, r1
 801b5fa:	4611      	mov	r1, r2
 801b5fc:	602b      	str	r3, [r5, #0]
 801b5fe:	f7e6 f995 	bl	800192c <_kill>
 801b602:	1c43      	adds	r3, r0, #1
 801b604:	d102      	bne.n	801b60c <_kill_r+0x1c>
 801b606:	682b      	ldr	r3, [r5, #0]
 801b608:	b103      	cbz	r3, 801b60c <_kill_r+0x1c>
 801b60a:	6023      	str	r3, [r4, #0]
 801b60c:	bd38      	pop	{r3, r4, r5, pc}
 801b60e:	bf00      	nop
 801b610:	2000713c 	.word	0x2000713c

0801b614 <_getpid_r>:
 801b614:	f7e6 b982 	b.w	800191c <_getpid>

0801b618 <__swhatbuf_r>:
 801b618:	b570      	push	{r4, r5, r6, lr}
 801b61a:	460c      	mov	r4, r1
 801b61c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b620:	2900      	cmp	r1, #0
 801b622:	b096      	sub	sp, #88	; 0x58
 801b624:	4615      	mov	r5, r2
 801b626:	461e      	mov	r6, r3
 801b628:	da0d      	bge.n	801b646 <__swhatbuf_r+0x2e>
 801b62a:	89a3      	ldrh	r3, [r4, #12]
 801b62c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b630:	f04f 0100 	mov.w	r1, #0
 801b634:	bf0c      	ite	eq
 801b636:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b63a:	2340      	movne	r3, #64	; 0x40
 801b63c:	2000      	movs	r0, #0
 801b63e:	6031      	str	r1, [r6, #0]
 801b640:	602b      	str	r3, [r5, #0]
 801b642:	b016      	add	sp, #88	; 0x58
 801b644:	bd70      	pop	{r4, r5, r6, pc}
 801b646:	466a      	mov	r2, sp
 801b648:	f000 f848 	bl	801b6dc <_fstat_r>
 801b64c:	2800      	cmp	r0, #0
 801b64e:	dbec      	blt.n	801b62a <__swhatbuf_r+0x12>
 801b650:	9901      	ldr	r1, [sp, #4]
 801b652:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b656:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b65a:	4259      	negs	r1, r3
 801b65c:	4159      	adcs	r1, r3
 801b65e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b662:	e7eb      	b.n	801b63c <__swhatbuf_r+0x24>

0801b664 <__smakebuf_r>:
 801b664:	898b      	ldrh	r3, [r1, #12]
 801b666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b668:	079d      	lsls	r5, r3, #30
 801b66a:	4606      	mov	r6, r0
 801b66c:	460c      	mov	r4, r1
 801b66e:	d507      	bpl.n	801b680 <__smakebuf_r+0x1c>
 801b670:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b674:	6023      	str	r3, [r4, #0]
 801b676:	6123      	str	r3, [r4, #16]
 801b678:	2301      	movs	r3, #1
 801b67a:	6163      	str	r3, [r4, #20]
 801b67c:	b002      	add	sp, #8
 801b67e:	bd70      	pop	{r4, r5, r6, pc}
 801b680:	ab01      	add	r3, sp, #4
 801b682:	466a      	mov	r2, sp
 801b684:	f7ff ffc8 	bl	801b618 <__swhatbuf_r>
 801b688:	9900      	ldr	r1, [sp, #0]
 801b68a:	4605      	mov	r5, r0
 801b68c:	4630      	mov	r0, r6
 801b68e:	f7fc ff5b 	bl	8018548 <_malloc_r>
 801b692:	b948      	cbnz	r0, 801b6a8 <__smakebuf_r+0x44>
 801b694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b698:	059a      	lsls	r2, r3, #22
 801b69a:	d4ef      	bmi.n	801b67c <__smakebuf_r+0x18>
 801b69c:	f023 0303 	bic.w	r3, r3, #3
 801b6a0:	f043 0302 	orr.w	r3, r3, #2
 801b6a4:	81a3      	strh	r3, [r4, #12]
 801b6a6:	e7e3      	b.n	801b670 <__smakebuf_r+0xc>
 801b6a8:	89a3      	ldrh	r3, [r4, #12]
 801b6aa:	6020      	str	r0, [r4, #0]
 801b6ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b6b0:	81a3      	strh	r3, [r4, #12]
 801b6b2:	9b00      	ldr	r3, [sp, #0]
 801b6b4:	6163      	str	r3, [r4, #20]
 801b6b6:	9b01      	ldr	r3, [sp, #4]
 801b6b8:	6120      	str	r0, [r4, #16]
 801b6ba:	b15b      	cbz	r3, 801b6d4 <__smakebuf_r+0x70>
 801b6bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b6c0:	4630      	mov	r0, r6
 801b6c2:	f000 f81d 	bl	801b700 <_isatty_r>
 801b6c6:	b128      	cbz	r0, 801b6d4 <__smakebuf_r+0x70>
 801b6c8:	89a3      	ldrh	r3, [r4, #12]
 801b6ca:	f023 0303 	bic.w	r3, r3, #3
 801b6ce:	f043 0301 	orr.w	r3, r3, #1
 801b6d2:	81a3      	strh	r3, [r4, #12]
 801b6d4:	89a3      	ldrh	r3, [r4, #12]
 801b6d6:	431d      	orrs	r5, r3
 801b6d8:	81a5      	strh	r5, [r4, #12]
 801b6da:	e7cf      	b.n	801b67c <__smakebuf_r+0x18>

0801b6dc <_fstat_r>:
 801b6dc:	b538      	push	{r3, r4, r5, lr}
 801b6de:	4d07      	ldr	r5, [pc, #28]	; (801b6fc <_fstat_r+0x20>)
 801b6e0:	2300      	movs	r3, #0
 801b6e2:	4604      	mov	r4, r0
 801b6e4:	4608      	mov	r0, r1
 801b6e6:	4611      	mov	r1, r2
 801b6e8:	602b      	str	r3, [r5, #0]
 801b6ea:	f7e6 f97e 	bl	80019ea <_fstat>
 801b6ee:	1c43      	adds	r3, r0, #1
 801b6f0:	d102      	bne.n	801b6f8 <_fstat_r+0x1c>
 801b6f2:	682b      	ldr	r3, [r5, #0]
 801b6f4:	b103      	cbz	r3, 801b6f8 <_fstat_r+0x1c>
 801b6f6:	6023      	str	r3, [r4, #0]
 801b6f8:	bd38      	pop	{r3, r4, r5, pc}
 801b6fa:	bf00      	nop
 801b6fc:	2000713c 	.word	0x2000713c

0801b700 <_isatty_r>:
 801b700:	b538      	push	{r3, r4, r5, lr}
 801b702:	4d06      	ldr	r5, [pc, #24]	; (801b71c <_isatty_r+0x1c>)
 801b704:	2300      	movs	r3, #0
 801b706:	4604      	mov	r4, r0
 801b708:	4608      	mov	r0, r1
 801b70a:	602b      	str	r3, [r5, #0]
 801b70c:	f7e6 f97d 	bl	8001a0a <_isatty>
 801b710:	1c43      	adds	r3, r0, #1
 801b712:	d102      	bne.n	801b71a <_isatty_r+0x1a>
 801b714:	682b      	ldr	r3, [r5, #0]
 801b716:	b103      	cbz	r3, 801b71a <_isatty_r+0x1a>
 801b718:	6023      	str	r3, [r4, #0]
 801b71a:	bd38      	pop	{r3, r4, r5, pc}
 801b71c:	2000713c 	.word	0x2000713c

0801b720 <_init>:
 801b720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b722:	bf00      	nop
 801b724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b726:	bc08      	pop	{r3}
 801b728:	469e      	mov	lr, r3
 801b72a:	4770      	bx	lr

0801b72c <_fini>:
 801b72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b72e:	bf00      	nop
 801b730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b732:	bc08      	pop	{r3}
 801b734:	469e      	mov	lr, r3
 801b736:	4770      	bx	lr
