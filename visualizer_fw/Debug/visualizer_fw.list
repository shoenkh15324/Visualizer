
visualizer_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  0800ee28  0800ee28  0001ee28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f614  0800f614  000202d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f614  0800f614  0001f614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f61c  0800f61c  000202d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f61c  0800f61c  0001f61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f620  0800f620  0001f620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800f624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000252c  200002d8  0800f8fc  000202d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002804  0800f8fc  00022804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015747  00000000  00000000  0002034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045bc  00000000  00000000  00035a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  0003a050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc2  00000000  00000000  0003b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bed7  00000000  00000000  0003c0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b501  00000000  00000000  00057f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f623  00000000  00000000  00073492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d54  00000000  00000000  00102ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0010880c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ee10 	.word	0x0800ee10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	0800ee10 	.word	0x0800ee10

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b9a6 	b.w	8000fbc <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f83c 	bl	8000cf4 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff33 	bl	8000afc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fca9 	bl	8000618 <__aeabi_dmul>
 8000cc6:	f7ff ff57 	bl	8000b78 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc2a 	bl	8000524 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fca0 	bl	8000618 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fae2 	bl	80002a8 <__aeabi_dsub>
 8000ce4:	f7ff ff48 	bl	8000b78 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9e08      	ldr	r6, [sp, #32]
 8000cfa:	460d      	mov	r5, r1
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	460f      	mov	r7, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14a      	bne.n	8000d9a <__udivmoddi4+0xa6>
 8000d04:	428a      	cmp	r2, r1
 8000d06:	4694      	mov	ip, r2
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0xe2>
 8000d0a:	fab2 f382 	clz	r3, r2
 8000d0e:	b143      	cbz	r3, 8000d22 <__udivmoddi4+0x2e>
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	f1c3 0220 	rsb	r2, r3, #32
 8000d18:	409f      	lsls	r7, r3
 8000d1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	409c      	lsls	r4, r3
 8000d22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d26:	fa1f f58c 	uxth.w	r5, ip
 8000d2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d2e:	0c22      	lsrs	r2, r4, #16
 8000d30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d38:	fb01 f005 	mul.w	r0, r1, r5
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	d90a      	bls.n	8000d56 <__udivmoddi4+0x62>
 8000d40:	eb1c 0202 	adds.w	r2, ip, r2
 8000d44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d48:	f080 811c 	bcs.w	8000f84 <__udivmoddi4+0x290>
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	f240 8119 	bls.w	8000f84 <__udivmoddi4+0x290>
 8000d52:	3902      	subs	r1, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	1a12      	subs	r2, r2, r0
 8000d58:	b2a4      	uxth	r4, r4
 8000d5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d66:	fb00 f505 	mul.w	r5, r0, r5
 8000d6a:	42a5      	cmp	r5, r4
 8000d6c:	d90a      	bls.n	8000d84 <__udivmoddi4+0x90>
 8000d6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x294>
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x294>
 8000d80:	4464      	add	r4, ip
 8000d82:	3802      	subs	r0, #2
 8000d84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	b11e      	cbz	r6, 8000d96 <__udivmoddi4+0xa2>
 8000d8e:	40dc      	lsrs	r4, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	e9c6 4300 	strd	r4, r3, [r6]
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0xbc>
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f000 80ed 	beq.w	8000f7e <__udivmoddi4+0x28a>
 8000da4:	2100      	movs	r1, #0
 8000da6:	e9c6 0500 	strd	r0, r5, [r6]
 8000daa:	4608      	mov	r0, r1
 8000dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db0:	fab3 f183 	clz	r1, r3
 8000db4:	2900      	cmp	r1, #0
 8000db6:	d149      	bne.n	8000e4c <__udivmoddi4+0x158>
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	d302      	bcc.n	8000dc2 <__udivmoddi4+0xce>
 8000dbc:	4282      	cmp	r2, r0
 8000dbe:	f200 80f8 	bhi.w	8000fb2 <__udivmoddi4+0x2be>
 8000dc2:	1a84      	subs	r4, r0, r2
 8000dc4:	eb65 0203 	sbc.w	r2, r5, r3
 8000dc8:	2001      	movs	r0, #1
 8000dca:	4617      	mov	r7, r2
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d0e2      	beq.n	8000d96 <__udivmoddi4+0xa2>
 8000dd0:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd4:	e7df      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000dd6:	b902      	cbnz	r2, 8000dda <__udivmoddi4+0xe6>
 8000dd8:	deff      	udf	#255	; 0xff
 8000dda:	fab2 f382 	clz	r3, r2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8090 	bne.w	8000f04 <__udivmoddi4+0x210>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	2101      	movs	r1, #1
 8000df0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df4:	fb07 2015 	mls	r0, r7, r5, r2
 8000df8:	0c22      	lsrs	r2, r4, #16
 8000dfa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dfe:	fb0e f005 	mul.w	r0, lr, r5
 8000e02:	4290      	cmp	r0, r2
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x124>
 8000e06:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x122>
 8000e10:	4290      	cmp	r0, r2
 8000e12:	f200 80cb 	bhi.w	8000fac <__udivmoddi4+0x2b8>
 8000e16:	4645      	mov	r5, r8
 8000e18:	1a12      	subs	r2, r2, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e20:	fb07 2210 	mls	r2, r7, r0, r2
 8000e24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e28:	fb0e fe00 	mul.w	lr, lr, r0
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x14e>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x14c>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f200 80bb 	bhi.w	8000fb6 <__udivmoddi4+0x2c2>
 8000e40:	4610      	mov	r0, r2
 8000e42:	eba4 040e 	sub.w	r4, r4, lr
 8000e46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4a:	e79f      	b.n	8000d8c <__udivmoddi4+0x98>
 8000e4c:	f1c1 0720 	rsb	r7, r1, #32
 8000e50:	408b      	lsls	r3, r1
 8000e52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e62:	40fd      	lsrs	r5, r7
 8000e64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e68:	4323      	orrs	r3, r4
 8000e6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	fb09 5518 	mls	r5, r9, r8, r5
 8000e76:	0c1c      	lsrs	r4, r3, #16
 8000e78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e80:	42a5      	cmp	r5, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8a:	d90b      	bls.n	8000ea4 <__udivmoddi4+0x1b0>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e94:	f080 8088 	bcs.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e98:	42a5      	cmp	r5, r4
 8000e9a:	f240 8085 	bls.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea2:	4464      	add	r4, ip
 8000ea4:	1b64      	subs	r4, r4, r5
 8000ea6:	b29d      	uxth	r5, r3
 8000ea8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eac:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x1da>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec4:	d26c      	bcs.n	8000fa0 <__udivmoddi4+0x2ac>
 8000ec6:	45a6      	cmp	lr, r4
 8000ec8:	d96a      	bls.n	8000fa0 <__udivmoddi4+0x2ac>
 8000eca:	3b02      	subs	r3, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ed6:	eba4 040e 	sub.w	r4, r4, lr
 8000eda:	42ac      	cmp	r4, r5
 8000edc:	46c8      	mov	r8, r9
 8000ede:	46ae      	mov	lr, r5
 8000ee0:	d356      	bcc.n	8000f90 <__udivmoddi4+0x29c>
 8000ee2:	d053      	beq.n	8000f8c <__udivmoddi4+0x298>
 8000ee4:	b156      	cbz	r6, 8000efc <__udivmoddi4+0x208>
 8000ee6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eea:	eb64 040e 	sbc.w	r4, r4, lr
 8000eee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef2:	40ca      	lsrs	r2, r1
 8000ef4:	40cc      	lsrs	r4, r1
 8000ef6:	4317      	orrs	r7, r2
 8000ef8:	e9c6 7400 	strd	r7, r4, [r6]
 8000efc:	4618      	mov	r0, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f04:	f1c3 0120 	rsb	r1, r3, #32
 8000f08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f10:	fa25 f101 	lsr.w	r1, r5, r1
 8000f14:	409d      	lsls	r5, r3
 8000f16:	432a      	orrs	r2, r5
 8000f18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f24:	fb07 1510 	mls	r5, r7, r0, r1
 8000f28:	0c11      	lsrs	r1, r2, #16
 8000f2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f32:	428d      	cmp	r5, r1
 8000f34:	fa04 f403 	lsl.w	r4, r4, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x258>
 8000f3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f42:	d22f      	bcs.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f44:	428d      	cmp	r5, r1
 8000f46:	d92d      	bls.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1b49      	subs	r1, r1, r5
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f54:	fb07 1115 	mls	r1, r7, r5, r1
 8000f58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f60:	4291      	cmp	r1, r2
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x282>
 8000f64:	eb1c 0202 	adds.w	r2, ip, r2
 8000f68:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f6c:	d216      	bcs.n	8000f9c <__udivmoddi4+0x2a8>
 8000f6e:	4291      	cmp	r1, r2
 8000f70:	d914      	bls.n	8000f9c <__udivmoddi4+0x2a8>
 8000f72:	3d02      	subs	r5, #2
 8000f74:	4462      	add	r2, ip
 8000f76:	1a52      	subs	r2, r2, r1
 8000f78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f7c:	e738      	b.n	8000df0 <__udivmoddi4+0xfc>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000f84:	4639      	mov	r1, r7
 8000f86:	e6e6      	b.n	8000d56 <__udivmoddi4+0x62>
 8000f88:	4610      	mov	r0, r2
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x90>
 8000f8c:	4548      	cmp	r0, r9
 8000f8e:	d2a9      	bcs.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f90:	ebb9 0802 	subs.w	r8, r9, r2
 8000f94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	e7a3      	b.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f9c:	4645      	mov	r5, r8
 8000f9e:	e7ea      	b.n	8000f76 <__udivmoddi4+0x282>
 8000fa0:	462b      	mov	r3, r5
 8000fa2:	e794      	b.n	8000ece <__udivmoddi4+0x1da>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	e7d1      	b.n	8000f4c <__udivmoddi4+0x258>
 8000fa8:	46d0      	mov	r8, sl
 8000faa:	e77b      	b.n	8000ea4 <__udivmoddi4+0x1b0>
 8000fac:	3d02      	subs	r5, #2
 8000fae:	4462      	add	r2, ip
 8000fb0:	e732      	b.n	8000e18 <__udivmoddi4+0x124>
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	e70a      	b.n	8000dcc <__udivmoddi4+0xd8>
 8000fb6:	4464      	add	r4, ip
 8000fb8:	3802      	subs	r0, #2
 8000fba:	e742      	b.n	8000e42 <__udivmoddi4+0x14e>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_DMA_Init+0x4c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <MX_DMA_Init+0x4c>)
 8000fd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <MX_DMA_Init+0x4c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	203b      	movs	r0, #59	; 0x3b
 8000fe8:	f002 f9d9 	bl	800339e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000fec:	203b      	movs	r0, #59	; 0x3b
 8000fee:	f002 f9f2 	bl	80033d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	2045      	movs	r0, #69	; 0x45
 8000ff8:	f002 f9d1 	bl	800339e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000ffc:	2045      	movs	r0, #69	; 0x45
 8000ffe:	f002 f9ea 	bl	80033d6 <HAL_NVIC_EnableIRQ>

}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800

08001010 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <MX_GPIO_Init+0xd4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a2d      	ldr	r2, [pc, #180]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a26      	ldr	r2, [pc, #152]	; (80010e4 <MX_GPIO_Init+0xd4>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_GPIO_Init+0xd4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109c:	4812      	ldr	r0, [pc, #72]	; (80010e8 <MX_GPIO_Init+0xd8>)
 800109e:	f002 feef 	bl	8003e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <MX_GPIO_Init+0xd8>)
 80010bc:	f002 fd44 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_GPIO_Init+0xdc>)
 80010d6:	f002 fd37 	bl	8003b48 <HAL_GPIO_Init>

}
 80010da:	bf00      	nop
 80010dc:	3728      	adds	r7, #40	; 0x28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020800 	.word	0x40020800
 80010ec:	40020400 	.word	0x40020400

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f001 ffe2 	bl	80030bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f818 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fc:	f7ff ff88 	bl	8001010 <MX_GPIO_Init>
  MX_DMA_Init();
 8001100:	f7ff ff5e 	bl	8000fc0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001104:	f009 fff2 	bl	800b0ec <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 8001108:	f000 f87e 	bl	8001208 <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */
  cliInit();
 800110c:	f000 fbb2 	bl	8001874 <cliInit>
  ledInit();
 8001110:	f001 fc4c 	bl	80029ac <ledInit>
  gpioInit();
 8001114:	f001 fafc 	bl	8002710 <gpioInit>
  sdInit();
 8001118:	f001 fcf2 	bl	8002b00 <sdInit>

  cliOpen(_DEF_UART1, 115200);
 800111c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001120:	2000      	movs	r0, #0
 8001122:	f000 fbf3 	bl	800190c <cliOpen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	cliMain();
 8001126:	f000 fca9 	bl	8001a7c <cliMain>
 800112a:	e7fc      	b.n	8001126 <main+0x36>

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	; 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2230      	movs	r2, #48	; 0x30
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f00b fd80 	bl	800cc40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <SystemClock_Config+0xc8>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a26      	ldr	r2, [pc, #152]	; (80011f4 <SystemClock_Config+0xc8>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <SystemClock_Config+0xc8>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <SystemClock_Config+0xcc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a20      	ldr	r2, [pc, #128]	; (80011f8 <SystemClock_Config+0xcc>)
 8001176:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <SystemClock_Config+0xcc>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001188:	2301      	movs	r3, #1
 800118a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001192:	2302      	movs	r3, #2
 8001194:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001196:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800119c:	2319      	movs	r3, #25
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80011a0:	23c0      	movs	r3, #192	; 0xc0
 80011a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011a8:	2304      	movs	r3, #4
 80011aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 f8e9 	bl	8005388 <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011bc:	f000 f81e 	bl	80011fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c0:	230f      	movs	r3, #15
 80011c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c4:	2302      	movs	r3, #2
 80011c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	2103      	movs	r1, #3
 80011dc:	4618      	mov	r0, r3
 80011de:	f004 fb4b 	bl	8005878 <HAL_RCC_ClockConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011e8:	f000 f808 	bl	80011fc <Error_Handler>
  }
}
 80011ec:	bf00      	nop
 80011ee:	3750      	adds	r7, #80	; 0x50
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40007000 	.word	0x40007000

080011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
}
 8001202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001204:	e7fe      	b.n	8001204 <Error_Handler+0x8>
	...

08001208 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_SDIO_SD_Init+0x58>)
 800120e:	4a15      	ldr	r2, [pc, #84]	; (8001264 <MX_SDIO_SD_Init+0x5c>)
 8001210:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_SDIO_SD_Init+0x58>)
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_SDIO_SD_Init+0x58>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_SDIO_SD_Init+0x58>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_SDIO_SD_Init+0x58>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <MX_SDIO_SD_Init+0x58>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_SDIO_SD_Init+0x58>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8001236:	480a      	ldr	r0, [pc, #40]	; (8001260 <MX_SDIO_SD_Init+0x58>)
 8001238:	f004 fcd6 	bl	8005be8 <HAL_SD_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8001242:	f7ff ffdb 	bl	80011fc <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8001246:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_SDIO_SD_Init+0x58>)
 800124c:	f005 f9c8 	bl	80065e0 <HAL_SD_ConfigWideBusOperation>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8001256:	f7ff ffd1 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200002f4 	.word	0x200002f4
 8001264:	40012c00 	.word	0x40012c00

08001268 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a68      	ldr	r2, [pc, #416]	; (8001428 <HAL_SD_MspInit+0x1c0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	f040 80ca 	bne.w	8001420 <HAL_SD_MspInit+0x1b8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	4b66      	ldr	r3, [pc, #408]	; (800142c <HAL_SD_MspInit+0x1c4>)
 8001292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001294:	4a65      	ldr	r2, [pc, #404]	; (800142c <HAL_SD_MspInit+0x1c4>)
 8001296:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800129a:	6453      	str	r3, [r2, #68]	; 0x44
 800129c:	4b63      	ldr	r3, [pc, #396]	; (800142c <HAL_SD_MspInit+0x1c4>)
 800129e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	4b5f      	ldr	r3, [pc, #380]	; (800142c <HAL_SD_MspInit+0x1c4>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	4a5e      	ldr	r2, [pc, #376]	; (800142c <HAL_SD_MspInit+0x1c4>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6313      	str	r3, [r2, #48]	; 0x30
 80012b8:	4b5c      	ldr	r3, [pc, #368]	; (800142c <HAL_SD_MspInit+0x1c4>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	4b58      	ldr	r3, [pc, #352]	; (800142c <HAL_SD_MspInit+0x1c4>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	4a57      	ldr	r2, [pc, #348]	; (800142c <HAL_SD_MspInit+0x1c4>)
 80012ce:	f043 0302 	orr.w	r3, r3, #2
 80012d2:	6313      	str	r3, [r2, #48]	; 0x30
 80012d4:	4b55      	ldr	r3, [pc, #340]	; (800142c <HAL_SD_MspInit+0x1c4>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80012e0:	f44f 7350 	mov.w	r3, #832	; 0x340
 80012e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80012f2:	230c      	movs	r3, #12
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	484c      	ldr	r0, [pc, #304]	; (8001430 <HAL_SD_MspInit+0x1c8>)
 80012fe:	f002 fc23 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8001302:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130c:	2301      	movs	r3, #1
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001314:	230c      	movs	r3, #12
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4845      	ldr	r0, [pc, #276]	; (8001434 <HAL_SD_MspInit+0x1cc>)
 8001320:	f002 fc12 	bl	8003b48 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001324:	4b44      	ldr	r3, [pc, #272]	; (8001438 <HAL_SD_MspInit+0x1d0>)
 8001326:	4a45      	ldr	r2, [pc, #276]	; (800143c <HAL_SD_MspInit+0x1d4>)
 8001328:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800132a:	4b43      	ldr	r3, [pc, #268]	; (8001438 <HAL_SD_MspInit+0x1d0>)
 800132c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001330:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001332:	4b41      	ldr	r3, [pc, #260]	; (8001438 <HAL_SD_MspInit+0x1d0>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001338:	4b3f      	ldr	r3, [pc, #252]	; (8001438 <HAL_SD_MspInit+0x1d0>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800133e:	4b3e      	ldr	r3, [pc, #248]	; (8001438 <HAL_SD_MspInit+0x1d0>)
 8001340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001344:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001346:	4b3c      	ldr	r3, [pc, #240]	; (8001438 <HAL_SD_MspInit+0x1d0>)
 8001348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800134c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800134e:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <HAL_SD_MspInit+0x1d0>)
 8001350:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001354:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <HAL_SD_MspInit+0x1d0>)
 8001358:	2220      	movs	r2, #32
 800135a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800135c:	4b36      	ldr	r3, [pc, #216]	; (8001438 <HAL_SD_MspInit+0x1d0>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001362:	4b35      	ldr	r3, [pc, #212]	; (8001438 <HAL_SD_MspInit+0x1d0>)
 8001364:	2204      	movs	r2, #4
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001368:	4b33      	ldr	r3, [pc, #204]	; (8001438 <HAL_SD_MspInit+0x1d0>)
 800136a:	2203      	movs	r2, #3
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800136e:	4b32      	ldr	r3, [pc, #200]	; (8001438 <HAL_SD_MspInit+0x1d0>)
 8001370:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001374:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001376:	4b30      	ldr	r3, [pc, #192]	; (8001438 <HAL_SD_MspInit+0x1d0>)
 8001378:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800137c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800137e:	482e      	ldr	r0, [pc, #184]	; (8001438 <HAL_SD_MspInit+0x1d0>)
 8001380:	f002 f844 	bl	800340c <HAL_DMA_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800138a:	f7ff ff37 	bl	80011fc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a29      	ldr	r2, [pc, #164]	; (8001438 <HAL_SD_MspInit+0x1d0>)
 8001392:	641a      	str	r2, [r3, #64]	; 0x40
 8001394:	4a28      	ldr	r2, [pc, #160]	; (8001438 <HAL_SD_MspInit+0x1d0>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800139a:	4b29      	ldr	r3, [pc, #164]	; (8001440 <HAL_SD_MspInit+0x1d8>)
 800139c:	4a29      	ldr	r2, [pc, #164]	; (8001444 <HAL_SD_MspInit+0x1dc>)
 800139e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <HAL_SD_MspInit+0x1d8>)
 80013a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013a6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013a8:	4b25      	ldr	r3, [pc, #148]	; (8001440 <HAL_SD_MspInit+0x1d8>)
 80013aa:	2240      	movs	r2, #64	; 0x40
 80013ac:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <HAL_SD_MspInit+0x1d8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <HAL_SD_MspInit+0x1d8>)
 80013b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ba:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_SD_MspInit+0x1d8>)
 80013be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013c2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <HAL_SD_MspInit+0x1d8>)
 80013c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ca:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <HAL_SD_MspInit+0x1d8>)
 80013ce:	2220      	movs	r2, #32
 80013d0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_SD_MspInit+0x1d8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_SD_MspInit+0x1d8>)
 80013da:	2204      	movs	r2, #4
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_SD_MspInit+0x1d8>)
 80013e0:	2203      	movs	r2, #3
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_SD_MspInit+0x1d8>)
 80013e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <HAL_SD_MspInit+0x1d8>)
 80013ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013f2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80013f4:	4812      	ldr	r0, [pc, #72]	; (8001440 <HAL_SD_MspInit+0x1d8>)
 80013f6:	f002 f809 	bl	800340c <HAL_DMA_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 8001400:	f7ff fefc 	bl	80011fc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <HAL_SD_MspInit+0x1d8>)
 8001408:	63da      	str	r2, [r3, #60]	; 0x3c
 800140a:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <HAL_SD_MspInit+0x1d8>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2105      	movs	r1, #5
 8001414:	2031      	movs	r0, #49	; 0x31
 8001416:	f001 ffc2 	bl	800339e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800141a:	2031      	movs	r0, #49	; 0x31
 800141c:	f001 ffdb 	bl	80033d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	; 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40012c00 	.word	0x40012c00
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000
 8001434:	40020400 	.word	0x40020400
 8001438:	20000378 	.word	0x20000378
 800143c:	40026458 	.word	0x40026458
 8001440:	200003d8 	.word	0x200003d8
 8001444:	400264a0 	.word	0x400264a0

08001448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <HAL_MspInit+0x4c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <HAL_MspInit+0x4c>)
 8001458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_MspInit+0x4c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_MspInit+0x4c>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_MspInit+0x4c>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_MspInit+0x4c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800149c:	e7fe      	b.n	800149c <NMI_Handler+0x4>

0800149e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <MemManage_Handler+0x4>

080014aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <BusFault_Handler+0x4>

080014b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <UsageFault_Handler+0x4>

080014b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e4:	f001 fe3c 	bl	8003160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}

080014ec <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <SDIO_IRQHandler+0x10>)
 80014f2:	f004 fd0b 	bl	8005f0c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200002f4 	.word	0x200002f4

08001500 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <DMA2_Stream3_IRQHandler+0x10>)
 8001506:	f002 f8a9 	bl	800365c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000378 	.word	0x20000378

08001514 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <OTG_FS_IRQHandler+0x10>)
 800151a:	f002 fe28 	bl	800416e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20001fb4 	.word	0x20001fb4

08001528 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <DMA2_Stream6_IRQHandler+0x10>)
 800152e:	f002 f895 	bl	800365c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200003d8 	.word	0x200003d8

0800153c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return 1;
 8001540:	2301      	movs	r3, #1
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_kill>:

int _kill(int pid, int sig)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001556:	f00b fbff 	bl	800cd58 <__errno>
 800155a:	4603      	mov	r3, r0
 800155c:	2216      	movs	r2, #22
 800155e:	601a      	str	r2, [r3, #0]
  return -1;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_exit>:

void _exit (int status)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ffe7 	bl	800154c <_kill>
  while (1) {}    /* Make sure we hang here */
 800157e:	e7fe      	b.n	800157e <_exit+0x12>

08001580 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e00a      	b.n	80015a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001592:	f3af 8000 	nop.w
 8001596:	4601      	mov	r1, r0
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	60ba      	str	r2, [r7, #8]
 800159e:	b2ca      	uxtb	r2, r1
 80015a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbf0      	blt.n	8001592 <_read+0x12>
  }

  return len;
 80015b0:	687b      	ldr	r3, [r7, #4]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e009      	b.n	80015e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	60ba      	str	r2, [r7, #8]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbf1      	blt.n	80015cc <_write+0x12>
  }
  return len;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_close>:

int _close(int file)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161a:	605a      	str	r2, [r3, #4]
  return 0;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_isatty>:

int _isatty(int file)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f00b fb64 	bl	800cd58 <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20020000 	.word	0x20020000
 80016bc:	00000400 	.word	0x00000400
 80016c0:	20000438 	.word	0x20000438
 80016c4:	20002808 	.word	0x20002808

080016c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <SystemInit+0x20>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <SystemInit+0x20>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001724 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016f0:	f7ff ffea 	bl	80016c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016f6:	490d      	ldr	r1, [pc, #52]	; (800172c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800170c:	4c0a      	ldr	r4, [pc, #40]	; (8001738 <LoopFillZerobss+0x22>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171a:	f00b fb23 	bl	800cd64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171e:	f7ff fce7 	bl	80010f0 <main>
  bx  lr    
 8001722:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8001730:	0800f624 	.word	0x0800f624
  ldr r2, =_sbss
 8001734:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001738:	20002804 	.word	0x20002804

0800173c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC_IRQHandler>

0800173e <delay>:
#include "common.h"



void delay(uint32_t ms)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f001 fd2a 	bl	80031a0 <HAL_Delay>
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <millis>:


uint32_t millis(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001758:	f001 fd16 	bl	8003188 <HAL_GetTick>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <cdcAvailable>:
bool rx_full=false;



uint32_t cdcAvailable(void)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % BUF_SIZE;
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <cdcAvailable+0x24>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <cdcAvailable+0x28>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001778:	607b      	str	r3, [r7, #4]

	return ret;
 800177a:	687b      	ldr	r3, [r7, #4]
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	2000063c 	.word	0x2000063c
 800178c:	20000640 	.word	0x20000640

08001790 <cdcRead>:

uint8_t cdcRead(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	71fb      	strb	r3, [r7, #7]

	ret = rx_buf[rx_out];
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <cdcRead+0x3c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <cdcRead+0x40>)
 80017a0:	5cd3      	ldrb	r3, [r2, r3]
 80017a2:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <cdcRead+0x3c>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <cdcRead+0x44>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d006      	beq.n	80017be <cdcRead+0x2e>
	{
		rx_out = (rx_out + 1) % BUF_SIZE;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <cdcRead+0x3c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <cdcRead+0x3c>)
 80017bc:	6013      	str	r3, [r2, #0]
	}

	return ret;
 80017be:	79fb      	ldrb	r3, [r7, #7]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	20000640 	.word	0x20000640
 80017d0:	2000043c 	.word	0x2000043c
 80017d4:	2000063c 	.word	0x2000063c

080017d8 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
	rx_buf[rx_in] = rx_data;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <cdcDataIn+0x3c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	490c      	ldr	r1, [pc, #48]	; (8001818 <cdcDataIn+0x40>)
 80017e8:	79fa      	ldrb	r2, [r7, #7]
 80017ea:	54ca      	strb	r2, [r1, r3]

	uint8_t next_rx_in = (rx_in + 1) % BUF_SIZE;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <cdcDataIn+0x3c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	3301      	adds	r3, #1
 80017f4:	73fb      	strb	r3, [r7, #15]

	if(next_rx_in != rx_out)
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <cdcDataIn+0x44>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d002      	beq.n	8001806 <cdcDataIn+0x2e>
	{
		rx_in = next_rx_in;
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	4a04      	ldr	r2, [pc, #16]	; (8001814 <cdcDataIn+0x3c>)
 8001804:	6013      	str	r3, [r2, #0]
	}
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	2000063c 	.word	0x2000063c
 8001818:	2000043c 	.word	0x2000043c
 800181c:	20000640 	.word	0x20000640

08001820 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t len)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
	uint32_t pre_time = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
	uint8_t ret;

	pre_time = millis();
 800182e:	f7ff ff91 	bl	8001754 <millis>
 8001832:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(p_data, len);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b29b      	uxth	r3, r3
 8001838:	4619      	mov	r1, r3
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f009 fd82 	bl	800b344 <CDC_Transmit_FS>
 8001840:	4603      	mov	r3, r0
 8001842:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 8001844:	7afb      	ldrb	r3, [r7, #11]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <cdcWrite+0x2e>
			{
				return len;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	e00e      	b.n	800186c <cdcWrite+0x4c>
			}
			else if(ret == USBD_FAIL)
 800184e:	7afb      	ldrb	r3, [r7, #11]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d101      	bne.n	8001858 <cdcWrite+0x38>
			{
				return 0;
 8001854:	2300      	movs	r3, #0
 8001856:	e009      	b.n	800186c <cdcWrite+0x4c>
			}

			if(millis() - pre_time >= 100)
 8001858:	f7ff ff7c 	bl	8001754 <millis>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b63      	cmp	r3, #99	; 0x63
 8001864:	d800      	bhi.n	8001868 <cdcWrite+0x48>
		ret = CDC_Transmit_FS(p_data, len);
 8001866:	e7e5      	b.n	8001834 <cdcWrite+0x14>
			{
				break;
 8001868:	bf00      	nop
			}
	}

	return 0;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <cliInit+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <cliInit+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <cliInit+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <cliInit+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <cliInit+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <cliInit+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <cliInit+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <cliInit+0x74>)
 80018ac:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <cliInit+0x78>)
 80018ae:	f8c3 2474 	str.w	r2, [r3, #1140]	; 0x474
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <cliInit+0x74>)
 80018b4:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <cliInit+0x7c>)
 80018b6:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <cliInit+0x74>)
 80018bc:	4a0d      	ldr	r2, [pc, #52]	; (80018f4 <cliInit+0x80>)
 80018be:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <cliInit+0x74>)
 80018c4:	4a0c      	ldr	r2, [pc, #48]	; (80018f8 <cliInit+0x84>)
 80018c6:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

  cliLineClean(&cli_node);
 80018ca:	4807      	ldr	r0, [pc, #28]	; (80018e8 <cliInit+0x74>)
 80018cc:	f000 fb5c 	bl	8001f88 <cliLineClean>


  cliAdd("help", cliShowList);
 80018d0:	490a      	ldr	r1, [pc, #40]	; (80018fc <cliInit+0x88>)
 80018d2:	480b      	ldr	r0, [pc, #44]	; (8001900 <cliInit+0x8c>)
 80018d4:	f000 fdf8 	bl	80024c8 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80018d8:	490a      	ldr	r1, [pc, #40]	; (8001904 <cliInit+0x90>)
 80018da:	480b      	ldr	r0, [pc, #44]	; (8001908 <cliInit+0x94>)
 80018dc:	f000 fdf4 	bl	80024c8 <cliAdd>

  return true;
 80018e0:	2301      	movs	r3, #1
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000644 	.word	0x20000644
 80018ec:	08002359 	.word	0x08002359
 80018f0:	080023a9 	.word	0x080023a9
 80018f4:	08002401 	.word	0x08002401
 80018f8:	08002449 	.word	0x08002449
 80018fc:	0800255d 	.word	0x0800255d
 8001900:	0800ee28 	.word	0x0800ee28
 8001904:	080025cd 	.word	0x080025cd
 8001908:	0800ee30 	.word	0x0800ee30

0800190c <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001918:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <cliOpen+0x38>)
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <cliOpen+0x38>)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	6839      	ldr	r1, [r7, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f001 fb35 	bl	8002f98 <uartOpen>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <cliOpen+0x38>)
 8001934:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8001936:	4b03      	ldr	r3, [pc, #12]	; (8001944 <cliOpen+0x38>)
 8001938:	7a1b      	ldrb	r3, [r3, #8]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000644 	.word	0x20000644

08001948 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8001950:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <cliShowLog+0xdc>)
 8001952:	7a5b      	ldrb	r3, [r3, #9]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d061      	beq.n	8001a1c <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7a98      	ldrb	r0, [r3, #10]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8001962:	461a      	mov	r2, r3
 8001964:	4930      	ldr	r1, [pc, #192]	; (8001a28 <cliShowLog+0xe0>)
 8001966:	f001 fb71 	bl	800304c <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7a98      	ldrb	r0, [r3, #10]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8001974:	461a      	mov	r2, r3
 8001976:	492d      	ldr	r1, [pc, #180]	; (8001a2c <cliShowLog+0xe4>)
 8001978:	f001 fb68 	bl	800304c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7a98      	ldrb	r0, [r3, #10]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 8001986:	461a      	mov	r2, r3
 8001988:	4929      	ldr	r1, [pc, #164]	; (8001a30 <cliShowLog+0xe8>)
 800198a:	f001 fb5f 	bl	800304c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7a98      	ldrb	r0, [r3, #10]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8001998:	461a      	mov	r2, r3
 800199a:	4926      	ldr	r1, [pc, #152]	; (8001a34 <cliShowLog+0xec>)
 800199c:	f001 fb56 	bl	800304c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7a98      	ldrb	r0, [r3, #10]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80019aa:	461a      	mov	r2, r3
 80019ac:	4922      	ldr	r1, [pc, #136]	; (8001a38 <cliShowLog+0xf0>)
 80019ae:	f001 fb4d 	bl	800304c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7a98      	ldrb	r0, [r3, #10]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80019bc:	461a      	mov	r2, r3
 80019be:	491f      	ldr	r1, [pc, #124]	; (8001a3c <cliShowLog+0xf4>)
 80019c0:	f001 fb44 	bl	800304c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7a98      	ldrb	r0, [r3, #10]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80019ce:	461a      	mov	r2, r3
 80019d0:	491b      	ldr	r1, [pc, #108]	; (8001a40 <cliShowLog+0xf8>)
 80019d2:	f001 fb3b 	bl	800304c <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	e012      	b.n	8001a02 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7a98      	ldrb	r0, [r3, #10]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4613      	mov	r3, r2
 80019e4:	015b      	lsls	r3, r3, #5
 80019e6:	4413      	add	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4913      	ldr	r1, [pc, #76]	; (8001a44 <cliShowLog+0xfc>)
 80019f8:	f001 fb28 	bl	800304c <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3301      	adds	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001a08:	461a      	mov	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	dbe5      	blt.n	80019dc <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	7a9b      	ldrb	r3, [r3, #10]
 8001a14:	490c      	ldr	r1, [pc, #48]	; (8001a48 <cliShowLog+0x100>)
 8001a16:	4618      	mov	r0, r3
 8001a18:	f001 fb18 	bl	800304c <uartPrintf>
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000644 	.word	0x20000644
 8001a28:	0800ee34 	.word	0x0800ee34
 8001a2c:	0800ee44 	.word	0x0800ee44
 8001a30:	0800ee54 	.word	0x0800ee54
 8001a34:	0800ee64 	.word	0x0800ee64
 8001a38:	0800ee74 	.word	0x0800ee74
 8001a3c:	0800ee84 	.word	0x0800ee84
 8001a40:	0800ee94 	.word	0x0800ee94
 8001a44:	0800eea4 	.word	0x0800eea4
 8001a48:	0800eeb4 	.word	0x0800eeb4

08001a4c <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4906      	ldr	r1, [pc, #24]	; (8001a74 <cliShowPrompt+0x28>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 faf6 	bl	800304c <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4904      	ldr	r1, [pc, #16]	; (8001a78 <cliShowPrompt+0x2c>)
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 faf0 	bl	800304c <uartPrintf>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	0800eeb8 	.word	0x0800eeb8
 8001a78:	0800eebc 	.word	0x0800eebc

08001a7c <cliMain>:

bool cliMain(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <cliMain+0x40>)
 8001a82:	7a1b      	ldrb	r3, [r3, #8]
 8001a84:	f083 0301 	eor.w	r3, r3, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <cliMain+0x16>
  {
    return false;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e012      	b.n	8001ab8 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <cliMain+0x40>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 fa9a 	bl	8002fd0 <uartAvailable>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <cliMain+0x40>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 faa5 	bl	8002ff6 <uartRead>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <cliMain+0x40>)
 8001ab2:	f000 f805 	bl	8001ac0 <cliUpdate>
  }

  return true;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000644 	.word	0x20000644

08001ac0 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	; 0x30
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8001ad8:	61fb      	str	r3, [r7, #28]

  if (p_cli->state == CLI_RX_IDLE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7c1b      	ldrb	r3, [r3, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 816d 	bne.w	8001dbe <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ae8:	d02a      	beq.n	8001b40 <cliUpdate+0x80>
 8001aea:	2b7f      	cmp	r3, #127	; 0x7f
 8001aec:	f300 80da 	bgt.w	8001ca4 <cliUpdate+0x1e4>
 8001af0:	2b1b      	cmp	r3, #27
 8001af2:	d021      	beq.n	8001b38 <cliUpdate+0x78>
 8001af4:	2b1b      	cmp	r3, #27
 8001af6:	f300 80d5 	bgt.w	8001ca4 <cliUpdate+0x1e4>
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d062      	beq.n	8001bc4 <cliUpdate+0x104>
 8001afe:	2b0d      	cmp	r3, #13
 8001b00:	f040 80d0 	bne.w	8001ca4 <cliUpdate+0x1e4>
    {
      // 엔터
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fa54 	bl	8001fbc <cliLineAdd>
          cliRunCmd(p_cli);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fb25 	bl	8002164 <cliRunCmd>
        }

        line->count = 0;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff8b 	bl	8001a4c <cliShowPrompt>
        break;
 8001b36:	e142      	b.n	8001dbe <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	741a      	strb	r2, [r3, #16]
        break;
 8001b3e:	e13e      	b.n	8001dbe <cliUpdate+0x2fe>

      // DEL
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f080 8131 	bcs.w	8001db4 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001b62:	2301      	movs	r3, #1
 8001b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b66:	e013      	b.n	8001b90 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6e:	461a      	mov	r2, r3
 8001b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b72:	441a      	add	r2, r3
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7e:	440b      	add	r3, r1
 8001b80:	3b01      	subs	r3, #1
 8001b82:	69f9      	ldr	r1, [r7, #28]
 8001b84:	5c89      	ldrb	r1, [r1, r2]
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b90:	7efb      	ldrb	r3, [r7, #27]
 8001b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbe7      	blt.n	8001b68 <cliUpdate+0xa8>
          }

          line->count--;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bae:	461a      	mov	r2, r3
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	498d      	ldr	r1, [pc, #564]	; (8001df0 <cliUpdate+0x330>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 fa45 	bl	800304c <uartPrintf>
        }
        break;
 8001bc2:	e0f7      	b.n	8001db4 <cliUpdate+0x2f4>

      // 백스페이스
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d055      	beq.n	8001c7a <cliUpdate+0x1ba>
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d050      	beq.n	8001c7a <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d10e      	bne.n	8001c06 <cliUpdate+0x146>
          {
            line->count--;
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bfe:	461a      	mov	r2, r3
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	2100      	movs	r1, #0
 8001c04:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d231      	bcs.n	8001c7a <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c2a:	e013      	b.n	8001c54 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c32:	461a      	mov	r2, r3
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c36:	441a      	add	r2, r3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c3e:	4619      	mov	r1, r3
 8001c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c42:	440b      	add	r3, r1
 8001c44:	3b01      	subs	r3, #1
 8001c46:	69f9      	ldr	r1, [r7, #28]
 8001c48:	5c89      	ldrb	r1, [r1, r2]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	3301      	adds	r3, #1
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c54:	7ebb      	ldrb	r3, [r7, #26]
 8001c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbe7      	blt.n	8001c2c <cliUpdate+0x16c>
            }

            line->count--;
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c62:	3b01      	subs	r3, #1
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c72:	461a      	mov	r2, r3
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	2100      	movs	r1, #0
 8001c78:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 8099 	beq.w	8001db8 <cliUpdate+0x2f8>
        {
          line->cursor--;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	4956      	ldr	r1, [pc, #344]	; (8001df4 <cliUpdate+0x334>)
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f001 f9d5 	bl	800304c <uartPrintf>
        }
        break;
 8001ca2:	e089      	b.n	8001db8 <cliUpdate+0x2f8>

      default:
        if ((line->count + 1) < line->buf_len)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001caa:	3301      	adds	r3, #1
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	f280 8082 	bge.w	8001dbc <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d124      	bne.n	8001d12 <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	1cf9      	adds	r1, r7, #3
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 f9a4 	bl	800301e <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cdc:	461a      	mov	r2, r3
 8001cde:	78f9      	ldrb	r1, [r7, #3]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cea:	3301      	adds	r3, #1
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	2100      	movs	r1, #0
 8001d10:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d24c      	bcs.n	8001dbc <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
 8001d36:	e013      	b.n	8001d60 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d3e:	461a      	mov	r2, r3
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	1e5a      	subs	r2, r3, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	1acb      	subs	r3, r1, r3
 8001d52:	69f9      	ldr	r1, [r7, #28]
 8001d54:	5c89      	ldrb	r1, [r1, r2]
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d60:	7e7b      	ldrb	r3, [r7, #25]
 8001d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d64:	429a      	cmp	r2, r3
 8001d66:	dbe7      	blt.n	8001d38 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d6e:	461a      	mov	r2, r3
 8001d70:	78f9      	ldrb	r1, [r7, #3]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	2100      	movs	r1, #0
 8001da2:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	4913      	ldr	r1, [pc, #76]	; (8001df8 <cliUpdate+0x338>)
 8001dac:	4618      	mov	r0, r3
 8001dae:	f001 f94d 	bl	800304c <uartPrintf>
          }
        }
        break;
 8001db2:	e003      	b.n	8001dbc <cliUpdate+0x2fc>
        break;
 8001db4:	bf00      	nop
 8001db6:	e002      	b.n	8001dbe <cliUpdate+0x2fe>
        break;
 8001db8:	bf00      	nop
 8001dba:	e000      	b.n	8001dbe <cliUpdate+0x2fe>
        break;
 8001dbc:	bf00      	nop
    }
  }

  switch(p_cli->state)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7c1b      	ldrb	r3, [r3, #16]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	f200 80d2 	bhi.w	8001f6e <cliUpdate+0x4ae>
 8001dca:	a201      	add	r2, pc, #4	; (adr r2, 8001dd0 <cliUpdate+0x310>)
 8001dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd0:	08001de1 	.word	0x08001de1
 8001dd4:	08001de9 	.word	0x08001de9
 8001dd8:	08001dfd 	.word	0x08001dfd
 8001ddc:	08001f65 	.word	0x08001f65
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	741a      	strb	r2, [r3, #16]
      break;
 8001de6:	e0c2      	b.n	8001f6e <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2203      	movs	r2, #3
 8001dec:	741a      	strb	r2, [r3, #16]
      break;
 8001dee:	e0be      	b.n	8001f6e <cliUpdate+0x4ae>
 8001df0:	0800eec4 	.word	0x0800eec4
 8001df4:	0800eecc 	.word	0x0800eecc
 8001df8:	0800eed4 	.word	0x0800eed4

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	2b44      	cmp	r3, #68	; 0x44
 8001e06:	d11a      	bne.n	8001e3e <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d015      	beq.n	8001e3e <cliUpdate+0x37e>
        {
          line->cursor--;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8001e22:	231b      	movs	r3, #27
 8001e24:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001e26:	235b      	movs	r3, #91	; 0x5b
 8001e28:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	f107 010c 	add.w	r1, r7, #12
 8001e36:	2203      	movs	r2, #3
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 f8f0 	bl	800301e <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	2b43      	cmp	r3, #67	; 0x43
 8001e42:	d11d      	bne.n	8001e80 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d215      	bcs.n	8001e80 <cliUpdate+0x3c0>
        {
          line->cursor++;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 8001e64:	231b      	movs	r3, #27
 8001e66:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001e68:	235b      	movs	r3, #91	; 0x5b
 8001e6a:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	f107 010c 	add.w	r1, r7, #12
 8001e78:	2203      	movs	r2, #3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f001 f8cf 	bl	800301e <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	2b41      	cmp	r3, #65	; 0x41
 8001e84:	d10c      	bne.n	8001ea0 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8001e86:	2101      	movs	r1, #1
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f8e1 	bl	8002050 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	781a      	ldrb	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	f001 f8d6 	bl	800304c <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b42      	cmp	r3, #66	; 0x42
 8001ea4:	d10c      	bne.n	8001ec0 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f8d1 	bl	8002050 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	781a      	ldrb	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4610      	mov	r0, r2
 8001ebc:	f001 f8c6 	bl	800304c <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	2b31      	cmp	r3, #49	; 0x31
 8001ec4:	d10f      	bne.n	8001ee6 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7818      	ldrb	r0, [r3, #0]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	492b      	ldr	r1, [pc, #172]	; (8001f80 <cliUpdate+0x4c0>)
 8001ed4:	f001 f8ba 	bl	800304c <uartPrintf>
        line->cursor = 0;
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	2b34      	cmp	r3, #52	; 0x34
 8001eea:	d13f      	bne.n	8001f6c <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d210      	bcs.n	8001f1e <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	8afa      	ldrh	r2, [r7, #22]
 8001f16:	491b      	ldr	r1, [pc, #108]	; (8001f84 <cliUpdate+0x4c4>)
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f001 f897 	bl	800304c <uartPrintf>
        }
        if (line->cursor > line->count)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	8afa      	ldrh	r2, [r7, #22]
 8001f48:	490d      	ldr	r1, [pc, #52]	; (8001f80 <cliUpdate+0x4c0>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 f87e 	bl	800304c <uartPrintf>
        }
        line->cursor = line->count;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2204      	movs	r2, #4
 8001f60:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001f62:	e003      	b.n	8001f6c <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	741a      	strb	r2, [r3, #16]
      break;
 8001f6a:	e000      	b.n	8001f6e <cliUpdate+0x4ae>
      break;
 8001f6c:	bf00      	nop
  }

  cliShowLog(p_cli);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff fcea 	bl	8001948 <cliShowLog>

  return ret;
 8001f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3730      	adds	r7, #48	; 0x30
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	0800eee0 	.word	0x0800eee0
 8001f84:	0800eee8 	.word	0x0800eee8

08001f88 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
  p_cli->line.cursor  = 0;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	223f      	movs	r2, #63	; 0x3f
 8001fa4:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
  p_cli->line.buf[0]  = 0;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001fca:	461a      	mov	r2, r3
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	015b      	lsls	r3, r3, #5
 8001fd2:	4413      	add	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8001fe6:	2243      	movs	r2, #67	; 0x43
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f00a feea 	bl	800cdc2 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d807      	bhi.n	8002008 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001ffe:	3301      	adds	r3, #1
 8002000:	b2da      	uxtb	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800200e:	b25a      	sxtb	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <cliLineAdd+0x90>)
 8002020:	fb83 1302 	smull	r1, r3, r3, r2
 8002024:	1059      	asrs	r1, r3, #1
 8002026:	17d3      	asrs	r3, r2, #31
 8002028:	1ac9      	subs	r1, r1, r3
 800202a:	460b      	mov	r3, r1
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	1ad1      	subs	r1, r2, r3
 8002032:	b2ca      	uxtb	r2, r1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	66666667 	.word	0x66666667

08002050 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002062:	2b00      	cmp	r3, #0
 8002064:	d076      	beq.n	8002154 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7818      	ldrb	r0, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 800207a:	461a      	mov	r2, r3
 800207c:	4937      	ldr	r1, [pc, #220]	; (800215c <cliLineChange+0x10c>)
 800207e:	f000 ffe5 	bl	800304c <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7818      	ldrb	r0, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8002096:	461a      	mov	r2, r3
 8002098:	4931      	ldr	r1, [pc, #196]	; (8002160 <cliLineChange+0x110>)
 800209a:	f000 ffd7 	bl	800304c <uartPrintf>
  }


  if (key_up == true)
 800209e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d125      	bne.n	80020f2 <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80020b6:	b25a      	sxtb	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80020c4:	461a      	mov	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80020cc:	4413      	add	r3, r2
 80020ce:	3b01      	subs	r3, #1
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 80020d6:	fb93 f1f2 	sdiv	r1, r3, r2
 80020da:	fb01 f202 	mul.w	r2, r1, r2
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	b25a      	sxtb	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	e013      	b.n	800211a <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80020f8:	3301      	adds	r3, #1
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8002100:	fb93 f1f2 	sdiv	r1, r3, r2
 8002104:	fb01 f202 	mul.w	r2, r1, r2
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	b25a      	sxtb	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002118:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	015b      	lsls	r3, r3, #5
 8002124:	4413      	add	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	4403      	add	r3, r0
 800212c:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8002130:	f201 23e7 	addw	r3, r1, #743	; 0x2e7
 8002134:	4611      	mov	r1, r2
 8002136:	2243      	movs	r2, #67	; 0x43
 8002138:	4618      	mov	r0, r3
 800213a:	f00a fe42 	bl	800cdc2 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

  p_cli->hist_line_new = false;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8002152:	e000      	b.n	8002156 <cliLineChange+0x106>
    return;
 8002154:	bf00      	nop
}
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	0800eee0 	.word	0x0800eee0
 8002160:	0800eef0 	.word	0x0800eef0

08002164 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800216c:	2300      	movs	r3, #0
 800216e:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f851 	bl	8002218 <cliParseArgs>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d046      	beq.n	800220a <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 800217c:	4825      	ldr	r0, [pc, #148]	; (8002214 <cliRunCmd+0xb0>)
 800217e:	f000 f893 	bl	80022a8 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002188:	4618      	mov	r0, r3
 800218a:	f000 f8b1 	bl	80022f0 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	e033      	b.n	80021fc <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	4413      	add	r3, r2
 80021ac:	3304      	adds	r3, #4
 80021ae:	4619      	mov	r1, r3
 80021b0:	f7fe f816 	bl	80001e0 <strcmp>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d11d      	bne.n	80021f6 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f503 728c 	add.w	r2, r3, #280	; 0x118
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	f202 426c 	addw	r2, r2, #1132	; 0x46c
 80021f0:	4610      	mov	r0, r2
 80021f2:	4798      	blx	r3
        break;
 80021f4:	e009      	b.n	800220a <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3301      	adds	r3, #1
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4293      	cmp	r3, r2
 8002208:	dbc4      	blt.n	8002194 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 800220a:	7afb      	ldrb	r3, [r7, #11]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	0800eef8 	.word	0x0800eef8

08002218 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002220:	2300      	movs	r3, #0
 8002222:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002236:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800223e:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8002240:	8afb      	ldrh	r3, [r7, #22]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4413      	add	r3, r2
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <cliParseArgs+0x8c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f107 0208 	add.w	r2, r7, #8
 8002254:	4619      	mov	r1, r3
 8002256:	6938      	ldr	r0, [r7, #16]
 8002258:	f00a fd34 	bl	800ccc4 <strtok_r>
 800225c:	61b8      	str	r0, [r7, #24]
 800225e:	e010      	b.n	8002282 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8002260:	8afb      	ldrh	r3, [r7, #22]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	82fa      	strh	r2, [r7, #22]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <cliParseArgs+0x8c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f107 0208 	add.w	r2, r7, #8
 8002278:	4619      	mov	r1, r3
 800227a:	2000      	movs	r0, #0
 800227c:	f00a fd22 	bl	800ccc4 <strtok_r>
 8002280:	61b8      	str	r0, [r7, #24]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1eb      	bne.n	8002260 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	8afa      	ldrh	r2, [r7, #22]
 800228c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 8002290:	8afb      	ldrh	r3, [r7, #22]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <cliParseArgs+0x82>
  {
    ret = true;
 8002296:	2301      	movs	r3, #1
 8002298:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 800229a:	7ffb      	ldrb	r3, [r7, #31]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3720      	adds	r7, #32
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000004 	.word	0x20000004

080022a8 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 80022a8:	b40f      	push	{r0, r1, r2, r3}
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 80022b0:	f107 031c 	add.w	r3, r7, #28
 80022b4:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <cliPrintf+0x44>)
 80022b8:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f103 0011 	add.w	r0, r3, #17
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c8:	f00a fcac 	bl	800cc24 <vsniprintf>
 80022cc:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	7818      	ldrb	r0, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	3311      	adds	r3, #17
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	4619      	mov	r1, r3
 80022da:	f000 fea0 	bl	800301e <uartWrite>
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022e8:	b004      	add	sp, #16
 80022ea:	4770      	bx	lr
 80022ec:	20000644 	.word	0x20000644

080022f0 <cliToUpper>:

void cliToUpper(char *str)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	81fb      	strh	r3, [r7, #14]
 80022fc:	e018      	b.n	8002330 <cliToUpper+0x40>
  {
    str_ch = str[i];
 80022fe:	89fb      	ldrh	r3, [r7, #14]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	4413      	add	r3, r2
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8002308:	7b7b      	ldrb	r3, [r7, #13]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d014      	beq.n	8002338 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800230e:	7b7b      	ldrb	r3, [r7, #13]
 8002310:	2b60      	cmp	r3, #96	; 0x60
 8002312:	d905      	bls.n	8002320 <cliToUpper+0x30>
 8002314:	7b7b      	ldrb	r3, [r7, #13]
 8002316:	2b7a      	cmp	r3, #122	; 0x7a
 8002318:	d802      	bhi.n	8002320 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800231a:	7b7b      	ldrb	r3, [r7, #13]
 800231c:	3b20      	subs	r3, #32
 800231e:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8002320:	89fb      	ldrh	r3, [r7, #14]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	7b7a      	ldrb	r2, [r7, #13]
 8002328:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800232a:	89fb      	ldrh	r3, [r7, #14]
 800232c:	3301      	adds	r3, #1
 800232e:	81fb      	strh	r3, [r7, #14]
 8002330:	89fb      	ldrh	r3, [r7, #14]
 8002332:	2b0f      	cmp	r3, #15
 8002334:	d9e3      	bls.n	80022fe <cliToUpper+0xe>
 8002336:	e000      	b.n	800233a <cliToUpper+0x4a>
      break;
 8002338:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800233a:	89fb      	ldrh	r3, [r7, #14]
 800233c:	2b10      	cmp	r3, #16
 800233e:	d105      	bne.n	800234c <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8002340:	89fb      	ldrh	r3, [r7, #14]
 8002342:	3b01      	subs	r3, #1
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
  }
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <cliArgsGetData+0x4c>)
 8002368:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	b29a      	uxth	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 8002374:	429a      	cmp	r2, r3
 8002376:	d301      	bcc.n	800237c <cliArgsGetData+0x24>
  {
    return 0;
 8002378:	2300      	movs	r3, #0
 800237a:	e00e      	b.n	800239a <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2200      	movs	r2, #0
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f00a fb0e 	bl	800c9b0 <strtoul>
 8002394:	4603      	mov	r3, r0
 8002396:	60fb      	str	r3, [r7, #12]

  return ret;
 8002398:	68fb      	ldr	r3, [r7, #12]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000644 	.word	0x20000644

080023a8 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <cliArgsGetFloat+0x54>)
 80023ba:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d302      	bcc.n	80023d0 <cliArgsGetFloat+0x28>
  {
    return 0;
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	e00d      	b.n	80023ec <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f00a fa0d 	bl	800c800 <strtof>
 80023e6:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 80023ea:	68fb      	ldr	r3, [r7, #12]
}
 80023ec:	ee07 3a90 	vmov	s15, r3
 80023f0:	eeb0 0a67 	vmov.f32	s0, s15
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000644 	.word	0x20000644

08002400 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <cliArgsGetStr+0x44>)
 8002410:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	b29a      	uxth	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 800241c:	429a      	cmp	r2, r3
 800241e:	d301      	bcc.n	8002424 <cliArgsGetStr+0x24>
  {
    return 0;
 8002420:	2300      	movs	r3, #0
 8002422:	e008      	b.n	8002436 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60fb      	str	r3, [r7, #12]

  return ret;
 8002434:	68fb      	ldr	r3, [r7, #12]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000644 	.word	0x20000644

08002448 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8002458:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <cliArgsIsStr+0x50>)
 800245a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	b29a      	uxth	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 8002466:	429a      	cmp	r2, r3
 8002468:	d301      	bcc.n	800246e <cliArgsIsStr+0x26>
  {
    return 0;
 800246a:	2300      	movs	r3, #0
 800246c:	e010      	b.n	8002490 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	6838      	ldr	r0, [r7, #0]
 8002480:	f7fd feae 	bl	80001e0 <strcmp>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <cliArgsIsStr+0x46>
  {
    ret = true;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800248e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20000644 	.word	0x20000644

0800249c <cliKeepLoop>:

bool cliKeepLoop(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <cliKeepLoop+0x28>)
 80024a4:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fd90 	bl	8002fd0 <uartAvailable>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <cliKeepLoop+0x1e>
  {
    return true;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 80024ba:	2300      	movs	r3, #0
  }
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000644 	.word	0x20000644

080024c8 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80024d2:	2301      	movs	r3, #1
 80024d4:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 80024d6:	4b20      	ldr	r3, [pc, #128]	; (8002558 <cliAdd+0x90>)
 80024d8:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80024e0:	2b0f      	cmp	r3, #15
 80024e2:	d901      	bls.n	80024e8 <cliAdd+0x20>
  {
    return false;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e032      	b.n	800254e <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80024ee:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80024f0:	89fa      	ldrh	r2, [r7, #14]
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4413      	add	r3, r2
 8002502:	3304      	adds	r3, #4
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	f00a fc53 	bl	800cdb2 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800250c:	89fa      	ldrh	r2, [r7, #14]
 800250e:	6939      	ldr	r1, [r7, #16]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8002522:	89fa      	ldrh	r2, [r7, #14]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4413      	add	r3, r2
 8002534:	3304      	adds	r3, #4
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff feda 	bl	80022f0 <cliToUpper>

  p_cli->cmd_count++;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8002542:	3301      	adds	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f8a3 232a 	strh.w	r2, [r3, #810]	; 0x32a

  return ret;
 800254c:	7dfb      	ldrb	r3, [r7, #23]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000644 	.word	0x20000644

0800255c <cliShowList>:

void cliShowList(cli_args_t *args)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002564:	4b15      	ldr	r3, [pc, #84]	; (80025bc <cliShowList+0x60>)
 8002566:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002568:	4815      	ldr	r0, [pc, #84]	; (80025c0 <cliShowList+0x64>)
 800256a:	f7ff fe9d 	bl	80022a8 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800256e:	4815      	ldr	r0, [pc, #84]	; (80025c4 <cliShowList+0x68>)
 8002570:	f7ff fe9a 	bl	80022a8 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	e012      	b.n	80025a0 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	4413      	add	r3, r2
 800258c:	3304      	adds	r3, #4
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fe8a 	bl	80022a8 <cliPrintf>
    cliPrintf("\r\n");
 8002594:	480a      	ldr	r0, [pc, #40]	; (80025c0 <cliShowList+0x64>)
 8002596:	f7ff fe87 	bl	80022a8 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3301      	adds	r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4293      	cmp	r3, r2
 80025ac:	dbe5      	blt.n	800257a <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 80025ae:	4806      	ldr	r0, [pc, #24]	; (80025c8 <cliShowList+0x6c>)
 80025b0:	f7ff fe7a 	bl	80022a8 <cliPrintf>
}
 80025b4:	bf00      	nop
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000644 	.word	0x20000644
 80025c0:	0800eef8 	.word	0x0800eef8
 80025c4:	0800eefc 	.word	0x0800eefc
 80025c8:	0800ef1c 	.word	0x0800ef1c

080025cc <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08c      	sub	sp, #48	; 0x30
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 80025d4:	2310      	movs	r3, #16
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d103      	bne.n	80025f4 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 80025ec:	4840      	ldr	r0, [pc, #256]	; (80026f0 <cliMemoryDump+0x124>)
 80025ee:	f7ff fe5b 	bl	80022a8 <cliPrintf>
 80025f2:	e07a      	b.n	80026ea <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	dd09      	ble.n	800260e <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	3304      	adds	r3, #4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2200      	movs	r2, #0
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f00a f9d3 	bl	800c9b0 <strtoul>
 800260a:	4603      	mov	r3, r0
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f00a f9ca 	bl	800c9b0 <strtoul>
 800261c:	4603      	mov	r3, r0
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002624:	4833      	ldr	r0, [pc, #204]	; (80026f4 <cliMemoryDump+0x128>)
 8002626:	f7ff fe3f 	bl	80022a8 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800262a:	2300      	movs	r3, #0
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800262e:	e058      	b.n	80026e2 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d104      	bne.n	8002644 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	4619      	mov	r1, r3
 800263e:	482e      	ldr	r0, [pc, #184]	; (80026f8 <cliMemoryDump+0x12c>)
 8002640:	f7ff fe32 	bl	80022a8 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4619      	mov	r1, r3
 800264a:	482c      	ldr	r0, [pc, #176]	; (80026fc <cliMemoryDump+0x130>)
 800264c:	f7ff fe2c 	bl	80022a8 <cliPrintf>

    if ((idx%4) == 3)
 8002650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002652:	425a      	negs	r2, r3
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	f002 0203 	and.w	r2, r2, #3
 800265c:	bf58      	it	pl
 800265e:	4253      	negpl	r3, r2
 8002660:	2b03      	cmp	r3, #3
 8002662:	d138      	bne.n	80026d6 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8002664:	4826      	ldr	r0, [pc, #152]	; (8002700 <cliMemoryDump+0x134>)
 8002666:	f7ff fe1f 	bl	80022a8 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
 800266e:	e02c      	b.n	80026ca <cliMemoryDump+0xfe>
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002674:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	e01d      	b.n	80026b8 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 800267c:	f107 020c 	add.w	r2, r7, #12
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	4413      	add	r3, r2
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b1f      	cmp	r3, #31
 8002688:	d910      	bls.n	80026ac <cliMemoryDump+0xe0>
 800268a:	f107 020c 	add.w	r2, r7, #12
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4413      	add	r3, r2
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b7e      	cmp	r3, #126	; 0x7e
 8002696:	d809      	bhi.n	80026ac <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8002698:	f107 020c 	add.w	r2, r7, #12
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	4619      	mov	r1, r3
 80026a4:	4817      	ldr	r0, [pc, #92]	; (8002704 <cliMemoryDump+0x138>)
 80026a6:	f7ff fdff 	bl	80022a8 <cliPrintf>
 80026aa:	e002      	b.n	80026b2 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 80026ac:	4816      	ldr	r0, [pc, #88]	; (8002708 <cliMemoryDump+0x13c>)
 80026ae:	f7ff fdfb 	bl	80022a8 <cliPrintf>
        for (i=0;i<4;i++)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	ddde      	ble.n	800267c <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	3304      	adds	r3, #4
 80026c2:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	3301      	adds	r3, #1
 80026c8:	623b      	str	r3, [r7, #32]
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	ddcf      	ble.n	8002670 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 80026d0:	480e      	ldr	r0, [pc, #56]	; (800270c <cliMemoryDump+0x140>)
 80026d2:	f7ff fde9 	bl	80022a8 <cliPrintf>
    }
    addr++;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	3304      	adds	r3, #4
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	3301      	adds	r3, #1
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e6:	429a      	cmp	r2, r3
 80026e8:	dba2      	blt.n	8002630 <cliMemoryDump+0x64>
  }
}
 80026ea:	3730      	adds	r7, #48	; 0x30
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	0800ef3c 	.word	0x0800ef3c
 80026f4:	0800ef50 	.word	0x0800ef50
 80026f8:	0800ef58 	.word	0x0800ef58
 80026fc:	0800ef64 	.word	0x0800ef64
 8002700:	0800ef6c 	.word	0x0800ef6c
 8002704:	0800ef70 	.word	0x0800ef70
 8002708:	0800ef74 	.word	0x0800ef74
 800270c:	0800ef78 	.word	0x0800ef78

08002710 <gpioInit>:
static void cliGpio(cli_args_t *args);
#endif


bool gpioInit(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
	bool ret = true;
 8002716:	2301      	movs	r3, #1
 8002718:	71fb      	strb	r3, [r7, #7]

#ifdef _USE_HW_CLI
	cliAdd("gpio", cliGpio);
 800271a:	4904      	ldr	r1, [pc, #16]	; (800272c <gpioInit+0x1c>)
 800271c:	4804      	ldr	r0, [pc, #16]	; (8002730 <gpioInit+0x20>)
 800271e:	f7ff fed3 	bl	80024c8 <cliAdd>
#endif

	return ret;
 8002722:	79fb      	ldrb	r3, [r7, #7]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	08002849 	.word	0x08002849
 8002730:	0800ef88 	.word	0x0800ef88

08002734 <gpioPinWrite>:

	return ret;
}

void gpioPinWrite(uint8_t ch, bool value)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	460a      	mov	r2, r1
 800273e:	71fb      	strb	r3, [r7, #7]
 8002740:	4613      	mov	r3, r2
 8002742:	71bb      	strb	r3, [r7, #6]
	if(ch >= GPIO_MAX_CH)
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d140      	bne.n	80027cc <gpioPinWrite+0x98>
	{
		return;
	}

	if(value)
 800274a:	79bb      	ldrb	r3, [r7, #6]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01e      	beq.n	800278e <gpioPinWrite+0x5a>
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8002750:	79fa      	ldrb	r2, [r7, #7]
 8002752:	4920      	ldr	r1, [pc, #128]	; (80027d4 <gpioPinWrite+0xa0>)
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	79fa      	ldrb	r2, [r7, #7]
 8002762:	491c      	ldr	r1, [pc, #112]	; (80027d4 <gpioPinWrite+0xa0>)
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	3304      	adds	r3, #4
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	b299      	uxth	r1, r3
 8002774:	79fa      	ldrb	r2, [r7, #7]
 8002776:	4c17      	ldr	r4, [pc, #92]	; (80027d4 <gpioPinWrite+0xa0>)
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4423      	add	r3, r4
 8002782:	3309      	adds	r3, #9
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	f001 fb7a 	bl	8003e80 <HAL_GPIO_WritePin>
 800278c:	e01f      	b.n	80027ce <gpioPinWrite+0x9a>
	}
	else
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 800278e:	79fa      	ldrb	r2, [r7, #7]
 8002790:	4910      	ldr	r1, [pc, #64]	; (80027d4 <gpioPinWrite+0xa0>)
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	79fa      	ldrb	r2, [r7, #7]
 80027a0:	490c      	ldr	r1, [pc, #48]	; (80027d4 <gpioPinWrite+0xa0>)
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	3304      	adds	r3, #4
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	b299      	uxth	r1, r3
 80027b2:	79fa      	ldrb	r2, [r7, #7]
 80027b4:	4c07      	ldr	r4, [pc, #28]	; (80027d4 <gpioPinWrite+0xa0>)
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4423      	add	r3, r4
 80027c0:	330a      	adds	r3, #10
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	f001 fb5b 	bl	8003e80 <HAL_GPIO_WritePin>
 80027ca:	e000      	b.n	80027ce <gpioPinWrite+0x9a>
		return;
 80027cc:	bf00      	nop
	}
}
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd90      	pop	{r4, r7, pc}
 80027d4:	0800f240 	.word	0x0800f240

080027d8 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 80027e2:	2300      	movs	r3, #0
 80027e4:	73fb      	strb	r3, [r7, #15]

	if(ch >= GPIO_MAX_CH)
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <gpioPinRead+0x18>
	{
		return false;
 80027ec:	2300      	movs	r3, #0
 80027ee:	e024      	b.n	800283a <gpioPinRead+0x62>
	}

	if(HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 80027f0:	79fa      	ldrb	r2, [r7, #7]
 80027f2:	4914      	ldr	r1, [pc, #80]	; (8002844 <gpioPinRead+0x6c>)
 80027f4:	4613      	mov	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	79fa      	ldrb	r2, [r7, #7]
 8002802:	4910      	ldr	r1, [pc, #64]	; (8002844 <gpioPinRead+0x6c>)
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	3304      	adds	r3, #4
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	4619      	mov	r1, r3
 8002816:	f001 fb1b 	bl	8003e50 <HAL_GPIO_ReadPin>
 800281a:	4603      	mov	r3, r0
 800281c:	4618      	mov	r0, r3
 800281e:	79fa      	ldrb	r2, [r7, #7]
 8002820:	4908      	ldr	r1, [pc, #32]	; (8002844 <gpioPinRead+0x6c>)
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	3309      	adds	r3, #9
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	4298      	cmp	r0, r3
 8002832:	d101      	bne.n	8002838 <gpioPinRead+0x60>
	{
		ret = true;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	0800f240 	.word	0x0800f240

08002848 <cliGpio>:


#ifdef _USE_HW_CLI

void cliGpio(cli_args_t *args)
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002850:	2300      	movs	r3, #0
 8002852:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 1 && args->isStr(0, "show") == true)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d129      	bne.n	80028b0 <cliGpio+0x68>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	4948      	ldr	r1, [pc, #288]	; (8002984 <cliGpio+0x13c>)
 8002862:	2000      	movs	r0, #0
 8002864:	4798      	blx	r3
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d021      	beq.n	80028b0 <cliGpio+0x68>
	{
		while(cliKeepLoop())
 800286c:	e019      	b.n	80028a2 <cliGpio+0x5a>
		{
			for(int i=0; i<GPIO_MAX_CH; i++)
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	e00c      	b.n	800288e <cliGpio+0x46>
			{
				cliPrintf("%d", gpioPinRead(i));
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ffad 	bl	80027d8 <gpioPinRead>
 800287e:	4603      	mov	r3, r0
 8002880:	4619      	mov	r1, r3
 8002882:	4841      	ldr	r0, [pc, #260]	; (8002988 <cliGpio+0x140>)
 8002884:	f7ff fd10 	bl	80022a8 <cliPrintf>
			for(int i=0; i<GPIO_MAX_CH; i++)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	3301      	adds	r3, #1
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	ddef      	ble.n	8002874 <cliGpio+0x2c>
			}
			cliPrintf("\n");
 8002894:	483d      	ldr	r0, [pc, #244]	; (800298c <cliGpio+0x144>)
 8002896:	f7ff fd07 	bl	80022a8 <cliPrintf>
			delay(300);
 800289a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800289e:	f7fe ff4e 	bl	800173e <delay>
		while(cliKeepLoop())
 80028a2:	f7ff fdfb 	bl	800249c <cliKeepLoop>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e0      	bne.n	800286e <cliGpio+0x26>
		}

		ret = true;
 80028ac:	2301      	movs	r3, #1
 80028ae:	75fb      	strb	r3, [r7, #23]
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d124      	bne.n	8002902 <cliGpio+0xba>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	4934      	ldr	r1, [pc, #208]	; (8002990 <cliGpio+0x148>)
 80028be:	2000      	movs	r0, #0
 80028c0:	4798      	blx	r3
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d01c      	beq.n	8002902 <cliGpio+0xba>
	{
		uint8_t ch;

		ch = (uint8_t)args->getData(1);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2001      	movs	r0, #1
 80028ce:	4798      	blx	r3
 80028d0:	4603      	mov	r3, r0
 80028d2:	73fb      	strb	r3, [r7, #15]

		while(cliKeepLoop())
 80028d4:	e00e      	b.n	80028f4 <cliGpio+0xac>
		{
			cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 80028d6:	7bfc      	ldrb	r4, [r7, #15]
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff ff7c 	bl	80027d8 <gpioPinRead>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	4621      	mov	r1, r4
 80028e6:	482b      	ldr	r0, [pc, #172]	; (8002994 <cliGpio+0x14c>)
 80028e8:	f7ff fcde 	bl	80022a8 <cliPrintf>
			delay(300);
 80028ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80028f0:	f7fe ff25 	bl	800173e <delay>
		while(cliKeepLoop())
 80028f4:	f7ff fdd2 	bl	800249c <cliKeepLoop>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1eb      	bne.n	80028d6 <cliGpio+0x8e>
		}

		ret = true;
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
	}

	if(args->argc == 3 && args->isStr(0, "write") == true)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d126      	bne.n	8002958 <cliGpio+0x110>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	4922      	ldr	r1, [pc, #136]	; (8002998 <cliGpio+0x150>)
 8002910:	2000      	movs	r0, #0
 8002912:	4798      	blx	r3
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d01e      	beq.n	8002958 <cliGpio+0x110>
	{
		uint8_t ch;
		uint8_t data;

		ch = (uint8_t)args->getData(1);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2001      	movs	r0, #1
 8002920:	4798      	blx	r3
 8002922:	4603      	mov	r3, r0
 8002924:	73bb      	strb	r3, [r7, #14]
		data = (uint8_t)args->getData(2);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2002      	movs	r0, #2
 800292c:	4798      	blx	r3
 800292e:	4603      	mov	r3, r0
 8002930:	737b      	strb	r3, [r7, #13]

		gpioPinWrite(ch, data);
 8002932:	7b7b      	ldrb	r3, [r7, #13]
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2da      	uxtb	r2, r3
 800293e:	7bbb      	ldrb	r3, [r7, #14]
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fef6 	bl	8002734 <gpioPinWrite>

		cliPrintf("gpio write %d : %d\n", ch, data);
 8002948:	7bbb      	ldrb	r3, [r7, #14]
 800294a:	7b7a      	ldrb	r2, [r7, #13]
 800294c:	4619      	mov	r1, r3
 800294e:	4813      	ldr	r0, [pc, #76]	; (800299c <cliGpio+0x154>)
 8002950:	f7ff fcaa 	bl	80022a8 <cliPrintf>

		ret = true;
 8002954:	2301      	movs	r3, #1
 8002956:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 8002958:	7dfb      	ldrb	r3, [r7, #23]
 800295a:	f083 0301 	eor.w	r3, r3, #1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <cliGpio+0x132>
	{
		cliPrintf("gpio show\n");
 8002964:	480e      	ldr	r0, [pc, #56]	; (80029a0 <cliGpio+0x158>)
 8002966:	f7ff fc9f 	bl	80022a8 <cliPrintf>
		cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 800296a:	2100      	movs	r1, #0
 800296c:	480d      	ldr	r0, [pc, #52]	; (80029a4 <cliGpio+0x15c>)
 800296e:	f7ff fc9b 	bl	80022a8 <cliPrintf>
		cliPrintf("gpio write ch[0~%d]\n", GPIO_MAX_CH-1);
 8002972:	2100      	movs	r1, #0
 8002974:	480c      	ldr	r0, [pc, #48]	; (80029a8 <cliGpio+0x160>)
 8002976:	f7ff fc97 	bl	80022a8 <cliPrintf>
	}
}
 800297a:	bf00      	nop
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd90      	pop	{r4, r7, pc}
 8002982:	bf00      	nop
 8002984:	0800ef90 	.word	0x0800ef90
 8002988:	0800ef98 	.word	0x0800ef98
 800298c:	0800ef9c 	.word	0x0800ef9c
 8002990:	0800efa0 	.word	0x0800efa0
 8002994:	0800efa8 	.word	0x0800efa8
 8002998:	0800efbc 	.word	0x0800efbc
 800299c:	0800efc4 	.word	0x0800efc4
 80029a0:	0800efd8 	.word	0x0800efd8
 80029a4:	0800efe4 	.word	0x0800efe4
 80029a8:	0800eff8 	.word	0x0800eff8

080029ac <ledInit>:
				{GPIOC, GPIO_PIN_13, GPIO_PIN_RESET, GPIO_PIN_SET},
		};


bool ledInit(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
	for(int i=0; i<LED_MAX_CH; i++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	e007      	b.n	80029c8 <ledInit+0x1c>
	{
		ledOff(i);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 f813 	bl	80029e8 <ledOff>
	for(int i=0; i<LED_MAX_CH; i++)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3301      	adds	r3, #1
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	ddf4      	ble.n	80029b8 <ledInit+0xc>
	}

#ifdef _USE_HW_CLI
	cliAdd("led", cliLed);
 80029ce:	4904      	ldr	r1, [pc, #16]	; (80029e0 <ledInit+0x34>)
 80029d0:	4804      	ldr	r0, [pc, #16]	; (80029e4 <ledInit+0x38>)
 80029d2:	f7ff fd79 	bl	80024c8 <cliAdd>
#endif

	return true;
 80029d6:	2301      	movs	r3, #1
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	08002a61 	.word	0x08002a61
 80029e4:	0800f010 	.word	0x0800f010

080029e8 <ledOff>:

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d111      	bne.n	8002a1c <ledOff+0x34>

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <ledOff+0x3c>)
 80029fc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <ledOff+0x3c>)
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4413      	add	r3, r2
 8002a08:	8899      	ldrh	r1, [r3, #4]
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <ledOff+0x3c>)
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	79db      	ldrb	r3, [r3, #7]
 8002a14:	461a      	mov	r2, r3
 8002a16:	f001 fa33 	bl	8003e80 <HAL_GPIO_WritePin>
 8002a1a:	e000      	b.n	8002a1e <ledOff+0x36>
	if(ch >= LED_MAX_CH) return;
 8002a1c:	bf00      	nop
}
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000008 	.word	0x20000008

08002a28 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10d      	bne.n	8002a54 <ledToggle+0x2c>

	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	4a08      	ldr	r2, [pc, #32]	; (8002a5c <ledToggle+0x34>)
 8002a3c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	4906      	ldr	r1, [pc, #24]	; (8002a5c <ledToggle+0x34>)
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	440b      	add	r3, r1
 8002a48:	889b      	ldrh	r3, [r3, #4]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	f001 fa30 	bl	8003eb2 <HAL_GPIO_TogglePin>
 8002a52:	e000      	b.n	8002a56 <ledToggle+0x2e>
	if(ch >= LED_MAX_CH) return;
 8002a54:	bf00      	nop
}
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000008 	.word	0x20000008

08002a60 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 3 && args->isStr(0, "toggle") == true)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d133      	bne.n	8002adc <cliLed+0x7c>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	491f      	ldr	r1, [pc, #124]	; (8002af8 <cliLed+0x98>)
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	4798      	blx	r3
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d02b      	beq.n	8002adc <cliLed+0x7c>
	{
		uint8_t led_ch;
		uint32_t toggle_time;
		uint32_t pre_time;

		led_ch = (uint8_t)args->getData(1);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2001      	movs	r0, #1
 8002a8a:	4798      	blx	r3
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	75bb      	strb	r3, [r7, #22]
		toggle_time = (uint32_t)args->getData(2);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2002      	movs	r0, #2
 8002a96:	4798      	blx	r3
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60fb      	str	r3, [r7, #12]

		if(led_ch > 0)
 8002a9c:	7dbb      	ldrb	r3, [r7, #22]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <cliLed+0x48>
		{
			led_ch--;
 8002aa2:	7dbb      	ldrb	r3, [r7, #22]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	75bb      	strb	r3, [r7, #22]
		}

		pre_time = millis();
 8002aa8:	f7fe fe54 	bl	8001754 <millis>
 8002aac:	6138      	str	r0, [r7, #16]
		while(cliKeepLoop())
 8002aae:	e00e      	b.n	8002ace <cliLed+0x6e>
		{
			if(millis() - pre_time >= toggle_time)
 8002ab0:	f7fe fe50 	bl	8001754 <millis>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d806      	bhi.n	8002ace <cliLed+0x6e>
			{
				pre_time = millis();
 8002ac0:	f7fe fe48 	bl	8001754 <millis>
 8002ac4:	6138      	str	r0, [r7, #16]
				ledToggle(led_ch);
 8002ac6:	7dbb      	ldrb	r3, [r7, #22]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ffad 	bl	8002a28 <ledToggle>
		while(cliKeepLoop())
 8002ace:	f7ff fce5 	bl	800249c <cliKeepLoop>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1eb      	bne.n	8002ab0 <cliLed+0x50>
			}
		}

		ret = true;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	f083 0301 	eor.w	r3, r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <cliLed+0x90>
	{
		cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8002ae8:	2101      	movs	r1, #1
 8002aea:	4804      	ldr	r0, [pc, #16]	; (8002afc <cliLed+0x9c>)
 8002aec:	f7ff fbdc 	bl	80022a8 <cliPrintf>
	}
}
 8002af0:	bf00      	nop
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	0800f014 	.word	0x0800f014
 8002afc:	0800f01c 	.word	0x0800f01c

08002b00 <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
	bool ret = false;
 8002b06:	2300      	movs	r3, #0
 8002b08:	71fb      	strb	r3, [r7, #7]

	is_detected = false;
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <sdInit+0x64>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
	if(gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7ff fe61 	bl	80027d8 <gpioPinRead>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <sdInit+0x22>
	{
		is_detected = true;
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <sdInit+0x64>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
	}

	if(is_detected == true)
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <sdInit+0x64>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00f      	beq.n	8002b4a <sdInit+0x4a>
	{
		if(HAL_SD_Init(&hsd) == HAL_OK)
 8002b2a:	480f      	ldr	r0, [pc, #60]	; (8002b68 <sdInit+0x68>)
 8002b2c:	f003 f85c 	bl	8005be8 <HAL_SD_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <sdInit+0x4a>
		{
			if(HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 8002b36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b3a:	480b      	ldr	r0, [pc, #44]	; (8002b68 <sdInit+0x68>)
 8002b3c:	f003 fd50 	bl	80065e0 <HAL_SD_ConfigWideBusOperation>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <sdInit+0x4a>
			{
				ret = true;
 8002b46:	2301      	movs	r3, #1
 8002b48:	71fb      	strb	r3, [r7, #7]
			}
		}
	}

	is_init = ret;
 8002b4a:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <sdInit+0x6c>)
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	7013      	strb	r3, [r2, #0]

	#ifdef _USE_HW_CLI
		cliAdd("sd", cliSd);
 8002b50:	4907      	ldr	r1, [pc, #28]	; (8002b70 <sdInit+0x70>)
 8002b52:	4808      	ldr	r0, [pc, #32]	; (8002b74 <sdInit+0x74>)
 8002b54:	f7ff fcb8 	bl	80024c8 <cliAdd>
	#endif

	return ret;
 8002b58:	79fb      	ldrb	r3, [r7, #7]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000ac9 	.word	0x20000ac9
 8002b68:	200002f4 	.word	0x200002f4
 8002b6c:	20000ac8 	.word	0x20000ac8
 8002b70:	08002d29 	.word	0x08002d29
 8002b74:	0800f03c 	.word	0x0800f03c

08002b78 <sdGetInfo>:

	return is_detected;
}

bool sdGetInfo(sd_info_t *p_info)
{
 8002b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b7c:	b08c      	sub	sp, #48	; 0x30
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002b82:	2300      	movs	r3, #0
 8002b84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	sd_info_t *p_sd_info = (sd_info_t *)p_info;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_SD_CardInfoTypeDef card_info;

	if(is_init == true)
 8002b8c:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <sdGetInfo+0xa8>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d03d      	beq.n	8002c10 <sdGetInfo+0x98>
	{
		HAL_SD_GetCardInfo(&hsd, &card_info);
 8002b94:	f107 0308 	add.w	r3, r7, #8
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4822      	ldr	r0, [pc, #136]	; (8002c24 <sdGetInfo+0xac>)
 8002b9c:	f003 fcf4 	bl	8006588 <HAL_SD_GetCardInfo>

		p_sd_info->card_type 					= card_info.CardType;
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb6:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc2:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 8002bc4:	6a3a      	ldr	r2, [r7, #32]
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 8002bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t) p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	469a      	mov	sl, r3
 8002bd8:	4693      	mov	fp, r2
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	2200      	movs	r2, #0
 8002be0:	4698      	mov	r8, r3
 8002be2:	4691      	mov	r9, r2
 8002be4:	fb08 f20b 	mul.w	r2, r8, fp
 8002be8:	fb0a f309 	mul.w	r3, sl, r9
 8002bec:	4413      	add	r3, r2
 8002bee:	fbaa 4508 	umull	r4, r5, sl, r8
 8002bf2:	442b      	add	r3, r5
 8002bf4:	461d      	mov	r5, r3
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	0d22      	lsrs	r2, r4, #20
 8002c00:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8002c04:	0d2b      	lsrs	r3, r5, #20
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	621a      	str	r2, [r3, #32]

    ret = true;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	return ret;
 8002c10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3730      	adds	r7, #48	; 0x30
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000ac8 	.word	0x20000ac8
 8002c24:	200002f4 	.word	0x200002f4

08002c28 <sdIsBusy>:

bool sdIsBusy(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
	bool is_busy;

	if(HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER)
 8002c2e:	4808      	ldr	r0, [pc, #32]	; (8002c50 <sdIsBusy+0x28>)
 8002c30:	f003 fd70 	bl	8006714 <HAL_SD_GetCardState>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d102      	bne.n	8002c40 <sdIsBusy+0x18>
	{
		is_busy = false;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	71fb      	strb	r3, [r7, #7]
 8002c3e:	e001      	b.n	8002c44 <sdIsBusy+0x1c>
	}
	else
	{
		is_busy = true;
 8002c40:	2301      	movs	r3, #1
 8002c42:	71fb      	strb	r3, [r7, #7]
	}

	return is_busy;
 8002c44:	79fb      	ldrb	r3, [r7, #7]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200002f4 	.word	0x200002f4

08002c54 <sdReadBlocks>:

	return false;
}

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
	bool ret = false;
 8002c62:	2300      	movs	r3, #0
 8002c64:	75fb      	strb	r3, [r7, #23]
	uint32_t pre_time;

	is_rx_done = false;
 8002c66:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <sdReadBlocks+0x8c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
	if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	481c      	ldr	r0, [pc, #112]	; (8002ce4 <sdReadBlocks+0x90>)
 8002c74:	f003 f868 	bl	8005d48 <HAL_SD_ReadBlocks_DMA>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d12a      	bne.n	8002cd4 <sdReadBlocks+0x80>
	{
		pre_time = millis();
 8002c7e:	f7fe fd69 	bl	8001754 <millis>
 8002c82:	6138      	str	r0, [r7, #16]
		while(is_rx_done == false)
 8002c84:	e007      	b.n	8002c96 <sdReadBlocks+0x42>
		{
			if(millis() - pre_time >= timeout_ms)
 8002c86:	f7fe fd65 	bl	8001754 <millis>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d908      	bls.n	8002ca8 <sdReadBlocks+0x54>
		while(is_rx_done == false)
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <sdReadBlocks+0x8c>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f083 0301 	eor.w	r3, r3, #1
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1ef      	bne.n	8002c86 <sdReadBlocks+0x32>
 8002ca6:	e00d      	b.n	8002cc4 <sdReadBlocks+0x70>
			{
				break;
 8002ca8:	bf00      	nop
			}
		}

		while(sdIsBusy() == true)
 8002caa:	e00b      	b.n	8002cc4 <sdReadBlocks+0x70>
			{
				if(millis() - pre_time >= timeout_ms)
 8002cac:	f7fe fd52 	bl	8001754 <millis>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d803      	bhi.n	8002cc4 <sdReadBlocks+0x70>
				{
					is_rx_done = false;
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <sdReadBlocks+0x8c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
					break;
 8002cc2:	e004      	b.n	8002cce <sdReadBlocks+0x7a>
		while(sdIsBusy() == true)
 8002cc4:	f7ff ffb0 	bl	8002c28 <sdIsBusy>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1ee      	bne.n	8002cac <sdReadBlocks+0x58>
				}
			}

			ret = is_rx_done;
 8002cce:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <sdReadBlocks+0x8c>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000aca 	.word	0x20000aca
 8002ce4:	200002f4 	.word	0x200002f4

08002ce8 <HAL_SD_TxCpltCallback>:
	return ret;
}


void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	is_tx_done = true;
 8002cf0:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <HAL_SD_TxCpltCallback+0x1c>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000acb 	.word	0x20000acb

08002d08 <HAL_SD_RxCpltCallback>:

void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	is_rx_done = true;
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <HAL_SD_RxCpltCallback+0x1c>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000aca 	.word	0x20000aca

08002d28 <cliSd>:

#ifdef _USE_HW_CLI

void cliSd(cli_args_t *args)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002d34:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8002d38:	6018      	str	r0, [r3, #0]
	bool ret = false;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

	if(args->argc == 1 && args->isStr(0, "info") == true)
 8002d40:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002d44:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	f040 8094 	bne.w	8002e7a <cliSd+0x152>
 8002d52:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002d56:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	497a      	ldr	r1, [pc, #488]	; (8002f48 <cliSd+0x220>)
 8002d60:	2000      	movs	r0, #0
 8002d62:	4798      	blx	r3
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8087 	beq.w	8002e7a <cliSd+0x152>
	{
		sd_info_t sd_info;

		cliPrintf("sd init : %d\n", is_init);
 8002d6c:	4b77      	ldr	r3, [pc, #476]	; (8002f4c <cliSd+0x224>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	4619      	mov	r1, r3
 8002d72:	4877      	ldr	r0, [pc, #476]	; (8002f50 <cliSd+0x228>)
 8002d74:	f7ff fa98 	bl	80022a8 <cliPrintf>
		cliPrintf("sd connected : %d\n", is_detected);
 8002d78:	4b76      	ldr	r3, [pc, #472]	; (8002f54 <cliSd+0x22c>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4876      	ldr	r0, [pc, #472]	; (8002f58 <cliSd+0x230>)
 8002d80:	f7ff fa92 	bl	80022a8 <cliPrintf>

		if(is_init == true)
 8002d84:	4b71      	ldr	r3, [pc, #452]	; (8002f4c <cliSd+0x224>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d073      	beq.n	8002e74 <cliSd+0x14c>
		{
			if(sdGetInfo(&sd_info) == true)
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fef1 	bl	8002b78 <sdGetInfo>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d06b      	beq.n	8002e74 <cliSd+0x14c>
			{
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 8002d9c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002da0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4619      	mov	r1, r3
 8002da8:	486c      	ldr	r0, [pc, #432]	; (8002f5c <cliSd+0x234>)
 8002daa:	f7ff fa7d 	bl	80022a8 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 8002dae:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002db2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4619      	mov	r1, r3
 8002dba:	4869      	ldr	r0, [pc, #420]	; (8002f60 <cliSd+0x238>)
 8002dbc:	f7ff fa74 	bl	80022a8 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 8002dc0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002dc4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4865      	ldr	r0, [pc, #404]	; (8002f64 <cliSd+0x23c>)
 8002dce:	f7ff fa6b 	bl	80022a8 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 8002dd2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002dd6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4862      	ldr	r0, [pc, #392]	; (8002f68 <cliSd+0x240>)
 8002de0:	f7ff fa62 	bl	80022a8 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 8002de4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002de8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	4619      	mov	r1, r3
 8002df0:	485e      	ldr	r0, [pc, #376]	; (8002f6c <cliSd+0x244>)
 8002df2:	f7ff fa59 	bl	80022a8 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 8002df6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002dfa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	4619      	mov	r1, r3
 8002e02:	485b      	ldr	r0, [pc, #364]	; (8002f70 <cliSd+0x248>)
 8002e04:	f7ff fa50 	bl	80022a8 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 8002e08:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002e0c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	4619      	mov	r1, r3
 8002e14:	4857      	ldr	r0, [pc, #348]	; (8002f74 <cliSd+0x24c>)
 8002e16:	f7ff fa47 	bl	80022a8 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 8002e1a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002e1e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	4619      	mov	r1, r3
 8002e26:	4854      	ldr	r0, [pc, #336]	; (8002f78 <cliSd+0x250>)
 8002e28:	f7ff fa3e 	bl	80022a8 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 8002e2c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002e30:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002e34:	6a18      	ldr	r0, [r3, #32]
 8002e36:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002e3a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	0a9c      	lsrs	r4, r3, #10
 8002e42:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002e46:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002e4a:	6a1a      	ldr	r2, [r3, #32]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	0a99      	lsrs	r1, r3, #10
 8002e56:	4b49      	ldr	r3, [pc, #292]	; (8002f7c <cliSd+0x254>)
 8002e58:	fba3 2301 	umull	r2, r3, r3, r1
 8002e5c:	08da      	lsrs	r2, r3, #3
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	1aca      	subs	r2, r1, r3
 8002e68:	4613      	mov	r3, r2
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	4601      	mov	r1, r0
 8002e6e:	4844      	ldr	r0, [pc, #272]	; (8002f80 <cliSd+0x258>)
 8002e70:	f7ff fa1a 	bl	80022a8 <cliPrintf>
			}
		}

		ret = true;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 8002e7a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002e7e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d147      	bne.n	8002f1a <cliSd+0x1f2>
 8002e8a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002e8e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	493b      	ldr	r1, [pc, #236]	; (8002f84 <cliSd+0x25c>)
 8002e98:	2000      	movs	r0, #0
 8002e9a:	4798      	blx	r3
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d03b      	beq.n	8002f1a <cliSd+0x1f2>
	{
		uint32_t number;
		uint32_t buf[512/4];

		number = args->getData(1);
 8002ea2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002ea6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2001      	movs	r0, #1
 8002eb0:	4798      	blx	r3
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

		if(sdReadBlocks(number, (uint8_t *)buf, 1, 1000) == true)
 8002eb8:	f107 010c 	add.w	r1, r7, #12
 8002ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8002ec6:	f7ff fec5 	bl	8002c54 <sdReadBlocks>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01e      	beq.n	8002f0e <cliSd+0x1e6>
		{
			for(int i=0; i<512/4; i++)
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002ed6:	e015      	b.n	8002f04 <cliSd+0x1dc>
			{
				cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 8002ed8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002edc:	0099      	lsls	r1, r3, #2
 8002ede:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002ee2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002ee6:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8002eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eee:	460a      	mov	r2, r1
 8002ef0:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8002ef4:	4824      	ldr	r0, [pc, #144]	; (8002f88 <cliSd+0x260>)
 8002ef6:	f7ff f9d7 	bl	80022a8 <cliPrintf>
			for(int i=0; i<512/4; i++)
 8002efa:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002efe:	3301      	adds	r3, #1
 8002f00:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002f04:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002f08:	2b7f      	cmp	r3, #127	; 0x7f
 8002f0a:	dde5      	ble.n	8002ed8 <cliSd+0x1b0>
 8002f0c:	e002      	b.n	8002f14 <cliSd+0x1ec>
			}
		}
		else
		{
			cliPrintf("sdRead Fail\n");
 8002f0e:	481f      	ldr	r0, [pc, #124]	; (8002f8c <cliSd+0x264>)
 8002f10:	f7ff f9ca 	bl	80022a8 <cliPrintf>
		}

		ret = true;
 8002f14:	2301      	movs	r3, #1
 8002f16:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}

	if(ret != true)
 8002f1a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8002f1e:	f083 0301 	eor.w	r3, r3, #1
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d009      	beq.n	8002f3c <cliSd+0x214>
	{
		cliPrintf("sd info\n");
 8002f28:	4819      	ldr	r0, [pc, #100]	; (8002f90 <cliSd+0x268>)
 8002f2a:	f7ff f9bd 	bl	80022a8 <cliPrintf>

		if(is_init == true)
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <cliSd+0x224>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <cliSd+0x214>
		{
			cliPrintf("sd read block_number\n");
 8002f36:	4817      	ldr	r0, [pc, #92]	; (8002f94 <cliSd+0x26c>)
 8002f38:	f7ff f9b6 	bl	80022a8 <cliPrintf>
		}
	}
}
 8002f3c:	bf00      	nop
 8002f3e:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd90      	pop	{r4, r7, pc}
 8002f46:	bf00      	nop
 8002f48:	0800f040 	.word	0x0800f040
 8002f4c:	20000ac8 	.word	0x20000ac8
 8002f50:	0800f048 	.word	0x0800f048
 8002f54:	20000ac9 	.word	0x20000ac9
 8002f58:	0800f058 	.word	0x0800f058
 8002f5c:	0800f06c 	.word	0x0800f06c
 8002f60:	0800f08c 	.word	0x0800f08c
 8002f64:	0800f0ac 	.word	0x0800f0ac
 8002f68:	0800f0cc 	.word	0x0800f0cc
 8002f6c:	0800f0ec 	.word	0x0800f0ec
 8002f70:	0800f10c 	.word	0x0800f10c
 8002f74:	0800f12c 	.word	0x0800f12c
 8002f78:	0800f14c 	.word	0x0800f14c
 8002f7c:	cccccccd 	.word	0xcccccccd
 8002f80:	0800f16c 	.word	0x0800f16c
 8002f84:	0800f198 	.word	0x0800f198
 8002f88:	0800f1a0 	.word	0x0800f1a0
 8002f8c:	0800f1b4 	.word	0x0800f1b4
 8002f90:	0800f1c4 	.word	0x0800f1c4
 8002f94:	0800f1d0 	.word	0x0800f1d0

08002f98 <uartOpen>:
{
	return true;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <uartOpen+0x24>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	4a06      	ldr	r2, [pc, #24]	; (8002fcc <uartOpen+0x34>)
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	54d1      	strb	r1, [r2, r3]
			ret = true;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
			break;
 8002fba:	bf00      	nop
			qbuffer[ch].out = qbuffer[ch].in;
			break;
			#endif
	}

	return ret;
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000acc 	.word	0x20000acc

08002fd0 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
	uint32_t ret;

	switch(ch)
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <uartAvailable+0x14>
 8002fe0:	2b01      	cmp	r3, #1
		case _DEF_UART2:
			#ifdef _USE_UART2
			qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
			ret = qbufferAvailable(&qbuffer[ch]);
			#endif
			break;
 8002fe2:	e003      	b.n	8002fec <uartAvailable+0x1c>
			ret = cdcAvailable();
 8002fe4:	f7fe fbbe 	bl	8001764 <cdcAvailable>
 8002fe8:	60f8      	str	r0, [r7, #12]
			break;
 8002fea:	bf00      	nop
	}

	return ret;
 8002fec:	68fb      	ldr	r3, [r7, #12]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <uartRead+0x14>
 8003006:	2b01      	cmp	r3, #1

		case _DEF_UART2:
			#ifdef _USE_UART2
			qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
			#endif
			break;
 8003008:	e004      	b.n	8003014 <uartRead+0x1e>
			ret = cdcRead();
 800300a:	f7fe fbc1 	bl	8001790 <cdcRead>
 800300e:	4603      	mov	r3, r0
 8003010:	73fb      	strb	r3, [r7, #15]
			break;
 8003012:	bf00      	nop
	}

	return ret;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	4603      	mov	r3, r0
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	73fb      	strb	r3, [r7, #15]

	#ifdef _USE_UART2
	HAL_StatusTypeDef status;
	#endif

	switch(ch)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <uartWrite+0x18>
 8003032:	2b01      	cmp	r3, #1
			if(status == HAL_OK)
			{
				ret = length;
			}
			#endif
			break;
 8003034:	e005      	b.n	8003042 <uartWrite+0x24>
			ret = cdcWrite(p_data, length);
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	68b8      	ldr	r0, [r7, #8]
 800303a:	f7fe fbf1 	bl	8001820 <cdcWrite>
 800303e:	6178      	str	r0, [r7, #20]
			break;
 8003040:	bf00      	nop
	}

	return ret;
 8003042:	697b      	ldr	r3, [r7, #20]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800304c:	b40e      	push	{r1, r2, r3}
 800304e:	b580      	push	{r7, lr}
 8003050:	b0c7      	sub	sp, #284	; 0x11c
 8003052:	af00      	add	r7, sp, #0
 8003054:	4602      	mov	r2, r0
 8003056:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800305a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800305e:	701a      	strb	r2, [r3, #0]
	char buf[256];
	va_list args;
	int len;
	uint32_t ret;

	va_start(args, fmt);
 8003060:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003064:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003068:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800306c:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf, 256, fmt, args);
 800306e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003072:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003076:	f107 0010 	add.w	r0, r7, #16
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003084:	f009 fdce 	bl	800cc24 <vsniprintf>
 8003088:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	ret = uartWrite(ch, (uint8_t *)buf, len);
 800308c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003090:	f107 0110 	add.w	r1, r7, #16
 8003094:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003098:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ffbd 	bl	800301e <uartWrite>
 80030a4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	va_end(args);

	return ret;
 80030a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80030b2:	46bd      	mov	sp, r7
 80030b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030b8:	b003      	add	sp, #12
 80030ba:	4770      	bx	lr

080030bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030c0:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <HAL_Init+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <HAL_Init+0x40>)
 80030c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_Init+0x40>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <HAL_Init+0x40>)
 80030d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <HAL_Init+0x40>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a07      	ldr	r2, [pc, #28]	; (80030fc <HAL_Init+0x40>)
 80030de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e4:	2003      	movs	r0, #3
 80030e6:	f000 f94f 	bl	8003388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ea:	200f      	movs	r0, #15
 80030ec:	f000 f808 	bl	8003100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030f0:	f7fe f9aa 	bl	8001448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023c00 	.word	0x40023c00

08003100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_InitTick+0x54>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_InitTick+0x58>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	4619      	mov	r1, r3
 8003112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003116:	fbb3 f3f1 	udiv	r3, r3, r1
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f967 	bl	80033f2 <HAL_SYSTICK_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e00e      	b.n	800314c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b0f      	cmp	r3, #15
 8003132:	d80a      	bhi.n	800314a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003134:	2200      	movs	r2, #0
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	f000 f92f 	bl	800339e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003140:	4a06      	ldr	r2, [pc, #24]	; (800315c <HAL_InitTick+0x5c>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	e000      	b.n	800314c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20000000 	.word	0x20000000
 8003158:	20000014 	.word	0x20000014
 800315c:	20000010 	.word	0x20000010

08003160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_IncTick+0x20>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_IncTick+0x24>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4413      	add	r3, r2
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_IncTick+0x24>)
 8003172:	6013      	str	r3, [r2, #0]
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000014 	.word	0x20000014
 8003184:	20000ad0 	.word	0x20000ad0

08003188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return uwTick;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_GetTick+0x14>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000ad0 	.word	0x20000ad0

080031a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031a8:	f7ff ffee 	bl	8003188 <HAL_GetTick>
 80031ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d005      	beq.n	80031c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_Delay+0x44>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031c6:	bf00      	nop
 80031c8:	f7ff ffde 	bl	8003188 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d8f7      	bhi.n	80031c8 <HAL_Delay+0x28>
  {
  }
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000014 	.word	0x20000014

080031e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <__NVIC_SetPriorityGrouping+0x44>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003204:	4013      	ands	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800321a:	4a04      	ldr	r2, [pc, #16]	; (800322c <__NVIC_SetPriorityGrouping+0x44>)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	60d3      	str	r3, [r2, #12]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003234:	4b04      	ldr	r3, [pc, #16]	; (8003248 <__NVIC_GetPriorityGrouping+0x18>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	f003 0307 	and.w	r3, r3, #7
}
 800323e:	4618      	mov	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	2b00      	cmp	r3, #0
 800325c:	db0b      	blt.n	8003276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	f003 021f 	and.w	r2, r3, #31
 8003264:	4907      	ldr	r1, [pc, #28]	; (8003284 <__NVIC_EnableIRQ+0x38>)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2001      	movs	r0, #1
 800326e:	fa00 f202 	lsl.w	r2, r0, r2
 8003272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	e000e100 	.word	0xe000e100

08003288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003298:	2b00      	cmp	r3, #0
 800329a:	db0a      	blt.n	80032b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	490c      	ldr	r1, [pc, #48]	; (80032d4 <__NVIC_SetPriority+0x4c>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	0112      	lsls	r2, r2, #4
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	440b      	add	r3, r1
 80032ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b0:	e00a      	b.n	80032c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4908      	ldr	r1, [pc, #32]	; (80032d8 <__NVIC_SetPriority+0x50>)
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	3b04      	subs	r3, #4
 80032c0:	0112      	lsls	r2, r2, #4
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	440b      	add	r3, r1
 80032c6:	761a      	strb	r2, [r3, #24]
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000e100 	.word	0xe000e100
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032dc:	b480      	push	{r7}
 80032de:	b089      	sub	sp, #36	; 0x24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f1c3 0307 	rsb	r3, r3, #7
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	bf28      	it	cs
 80032fa:	2304      	movcs	r3, #4
 80032fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3304      	adds	r3, #4
 8003302:	2b06      	cmp	r3, #6
 8003304:	d902      	bls.n	800330c <NVIC_EncodePriority+0x30>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3b03      	subs	r3, #3
 800330a:	e000      	b.n	800330e <NVIC_EncodePriority+0x32>
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003310:	f04f 32ff 	mov.w	r2, #4294967295
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43da      	mvns	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	401a      	ands	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003324:	f04f 31ff 	mov.w	r1, #4294967295
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	fa01 f303 	lsl.w	r3, r1, r3
 800332e:	43d9      	mvns	r1, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003334:	4313      	orrs	r3, r2
         );
}
 8003336:	4618      	mov	r0, r3
 8003338:	3724      	adds	r7, #36	; 0x24
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3b01      	subs	r3, #1
 8003350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003354:	d301      	bcc.n	800335a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003356:	2301      	movs	r3, #1
 8003358:	e00f      	b.n	800337a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <SysTick_Config+0x40>)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3b01      	subs	r3, #1
 8003360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003362:	210f      	movs	r1, #15
 8003364:	f04f 30ff 	mov.w	r0, #4294967295
 8003368:	f7ff ff8e 	bl	8003288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <SysTick_Config+0x40>)
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003372:	4b04      	ldr	r3, [pc, #16]	; (8003384 <SysTick_Config+0x40>)
 8003374:	2207      	movs	r2, #7
 8003376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	e000e010 	.word	0xe000e010

08003388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff29 	bl	80031e8 <__NVIC_SetPriorityGrouping>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800339e:	b580      	push	{r7, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033b0:	f7ff ff3e 	bl	8003230 <__NVIC_GetPriorityGrouping>
 80033b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	6978      	ldr	r0, [r7, #20]
 80033bc:	f7ff ff8e 	bl	80032dc <NVIC_EncodePriority>
 80033c0:	4602      	mov	r2, r0
 80033c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff5d 	bl	8003288 <__NVIC_SetPriority>
}
 80033ce:	bf00      	nop
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	4603      	mov	r3, r0
 80033de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff31 	bl	800324c <__NVIC_EnableIRQ>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff ffa2 	bl	8003344 <SysTick_Config>
 8003400:	4603      	mov	r3, r0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003418:	f7ff feb6 	bl	8003188 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e099      	b.n	800355c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0201 	bic.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003448:	e00f      	b.n	800346a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800344a:	f7ff fe9d 	bl	8003188 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b05      	cmp	r3, #5
 8003456:	d908      	bls.n	800346a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2203      	movs	r2, #3
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e078      	b.n	800355c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e8      	bne.n	800344a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4b38      	ldr	r3, [pc, #224]	; (8003564 <HAL_DMA_Init+0x158>)
 8003484:	4013      	ands	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003496:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d107      	bne.n	80034d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	4313      	orrs	r3, r2
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f023 0307 	bic.w	r3, r3, #7
 80034ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d117      	bne.n	800352e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00e      	beq.n	800352e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fa9d 	bl	8003a50 <DMA_CheckFifoParam>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2240      	movs	r2, #64	; 0x40
 8003520:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800352a:	2301      	movs	r3, #1
 800352c:	e016      	b.n	800355c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fa54 	bl	80039e4 <DMA_CalcBaseAndBitshift>
 800353c:	4603      	mov	r3, r0
 800353e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	223f      	movs	r2, #63	; 0x3f
 8003546:	409a      	lsls	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	f010803f 	.word	0xf010803f

08003568 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_DMA_Start_IT+0x26>
 800358a:	2302      	movs	r3, #2
 800358c:	e040      	b.n	8003610 <HAL_DMA_Start_IT+0xa8>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d12f      	bne.n	8003602 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f9e6 	bl	8003988 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c0:	223f      	movs	r2, #63	; 0x3f
 80035c2:	409a      	lsls	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0216 	orr.w	r2, r2, #22
 80035d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0208 	orr.w	r2, r2, #8
 80035ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e005      	b.n	800360e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800360a:	2302      	movs	r3, #2
 800360c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800360e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d004      	beq.n	8003636 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e00c      	b.n	8003650 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2205      	movs	r2, #5
 800363a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003668:	4b8e      	ldr	r3, [pc, #568]	; (80038a4 <HAL_DMA_IRQHandler+0x248>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a8e      	ldr	r2, [pc, #568]	; (80038a8 <HAL_DMA_IRQHandler+0x24c>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	0a9b      	lsrs	r3, r3, #10
 8003674:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	2208      	movs	r2, #8
 8003688:	409a      	lsls	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01a      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0204 	bic.w	r2, r2, #4
 80036ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	2208      	movs	r2, #8
 80036b6:	409a      	lsls	r2, r3
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	f043 0201 	orr.w	r2, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	2201      	movs	r2, #1
 80036ce:	409a      	lsls	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d012      	beq.n	80036fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ea:	2201      	movs	r2, #1
 80036ec:	409a      	lsls	r2, r3
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	f043 0202 	orr.w	r2, r3, #2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003702:	2204      	movs	r2, #4
 8003704:	409a      	lsls	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4013      	ands	r3, r2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d012      	beq.n	8003734 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	2204      	movs	r2, #4
 8003722:	409a      	lsls	r2, r3
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	f043 0204 	orr.w	r2, r3, #4
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003738:	2210      	movs	r2, #16
 800373a:	409a      	lsls	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d043      	beq.n	80037cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d03c      	beq.n	80037cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003756:	2210      	movs	r2, #16
 8003758:	409a      	lsls	r2, r3
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d018      	beq.n	800379e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d108      	bne.n	800378c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d024      	beq.n	80037cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	4798      	blx	r3
 800378a:	e01f      	b.n	80037cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01b      	beq.n	80037cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
 800379c:	e016      	b.n	80037cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d107      	bne.n	80037bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0208 	bic.w	r2, r2, #8
 80037ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d0:	2220      	movs	r2, #32
 80037d2:	409a      	lsls	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 808f 	beq.w	80038fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8087 	beq.w	80038fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f2:	2220      	movs	r2, #32
 80037f4:	409a      	lsls	r2, r3
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b05      	cmp	r3, #5
 8003804:	d136      	bne.n	8003874 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0216 	bic.w	r2, r2, #22
 8003814:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003824:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d103      	bne.n	8003836 <HAL_DMA_IRQHandler+0x1da>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0208 	bic.w	r2, r2, #8
 8003844:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	223f      	movs	r2, #63	; 0x3f
 800384c:	409a      	lsls	r2, r3
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003866:	2b00      	cmp	r3, #0
 8003868:	d07e      	beq.n	8003968 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
        }
        return;
 8003872:	e079      	b.n	8003968 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d01d      	beq.n	80038be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10d      	bne.n	80038ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003894:	2b00      	cmp	r3, #0
 8003896:	d031      	beq.n	80038fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
 80038a0:	e02c      	b.n	80038fc <HAL_DMA_IRQHandler+0x2a0>
 80038a2:	bf00      	nop
 80038a4:	20000000 	.word	0x20000000
 80038a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d023      	beq.n	80038fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	4798      	blx	r3
 80038bc:	e01e      	b.n	80038fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10f      	bne.n	80038ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0210 	bic.w	r2, r2, #16
 80038da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003900:	2b00      	cmp	r3, #0
 8003902:	d032      	beq.n	800396a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d022      	beq.n	8003956 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2205      	movs	r2, #5
 8003914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	3301      	adds	r3, #1
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	429a      	cmp	r2, r3
 8003932:	d307      	bcc.n	8003944 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f2      	bne.n	8003928 <HAL_DMA_IRQHandler+0x2cc>
 8003942:	e000      	b.n	8003946 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003944:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d005      	beq.n	800396a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
 8003966:	e000      	b.n	800396a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003968:	bf00      	nop
    }
  }
}
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d108      	bne.n	80039c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039c6:	e007      	b.n	80039d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	60da      	str	r2, [r3, #12]
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	3b10      	subs	r3, #16
 80039f4:	4a14      	ldr	r2, [pc, #80]	; (8003a48 <DMA_CalcBaseAndBitshift+0x64>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	091b      	lsrs	r3, r3, #4
 80039fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039fe:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <DMA_CalcBaseAndBitshift+0x68>)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d909      	bls.n	8003a26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a1a:	f023 0303 	bic.w	r3, r3, #3
 8003a1e:	1d1a      	adds	r2, r3, #4
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	659a      	str	r2, [r3, #88]	; 0x58
 8003a24:	e007      	b.n	8003a36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a2e:	f023 0303 	bic.w	r3, r3, #3
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	aaaaaaab 	.word	0xaaaaaaab
 8003a4c:	0800f24c 	.word	0x0800f24c

08003a50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d11f      	bne.n	8003aaa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d856      	bhi.n	8003b1e <DMA_CheckFifoParam+0xce>
 8003a70:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <DMA_CheckFifoParam+0x28>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a9b 	.word	0x08003a9b
 8003a80:	08003a89 	.word	0x08003a89
 8003a84:	08003b1f 	.word	0x08003b1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d046      	beq.n	8003b22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a98:	e043      	b.n	8003b22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aa2:	d140      	bne.n	8003b26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa8:	e03d      	b.n	8003b26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab2:	d121      	bne.n	8003af8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d837      	bhi.n	8003b2a <DMA_CheckFifoParam+0xda>
 8003aba:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <DMA_CheckFifoParam+0x70>)
 8003abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac0:	08003ad1 	.word	0x08003ad1
 8003ac4:	08003ad7 	.word	0x08003ad7
 8003ac8:	08003ad1 	.word	0x08003ad1
 8003acc:	08003ae9 	.word	0x08003ae9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad4:	e030      	b.n	8003b38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d025      	beq.n	8003b2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae6:	e022      	b.n	8003b2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003af0:	d11f      	bne.n	8003b32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003af6:	e01c      	b.n	8003b32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d903      	bls.n	8003b06 <DMA_CheckFifoParam+0xb6>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d003      	beq.n	8003b0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b04:	e018      	b.n	8003b38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0a:	e015      	b.n	8003b38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00e      	beq.n	8003b36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b1c:	e00b      	b.n	8003b36 <DMA_CheckFifoParam+0xe6>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e00a      	b.n	8003b38 <DMA_CheckFifoParam+0xe8>
      break;
 8003b22:	bf00      	nop
 8003b24:	e008      	b.n	8003b38 <DMA_CheckFifoParam+0xe8>
      break;
 8003b26:	bf00      	nop
 8003b28:	e006      	b.n	8003b38 <DMA_CheckFifoParam+0xe8>
      break;
 8003b2a:	bf00      	nop
 8003b2c:	e004      	b.n	8003b38 <DMA_CheckFifoParam+0xe8>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e002      	b.n	8003b38 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b32:	bf00      	nop
 8003b34:	e000      	b.n	8003b38 <DMA_CheckFifoParam+0xe8>
      break;
 8003b36:	bf00      	nop
    }
  } 
  
  return status; 
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop

08003b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	; 0x24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	e159      	b.n	8003e18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b64:	2201      	movs	r2, #1
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	f040 8148 	bne.w	8003e12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d005      	beq.n	8003b9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d130      	bne.n	8003bfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 0201 	and.w	r2, r3, #1
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d017      	beq.n	8003c38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2203      	movs	r2, #3
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d123      	bne.n	8003c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	08da      	lsrs	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3208      	adds	r2, #8
 8003c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	220f      	movs	r2, #15
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	08da      	lsrs	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3208      	adds	r2, #8
 8003c86:	69b9      	ldr	r1, [r7, #24]
 8003c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	2203      	movs	r2, #3
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0203 	and.w	r2, r3, #3
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80a2 	beq.w	8003e12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	4b57      	ldr	r3, [pc, #348]	; (8003e30 <HAL_GPIO_Init+0x2e8>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	4a56      	ldr	r2, [pc, #344]	; (8003e30 <HAL_GPIO_Init+0x2e8>)
 8003cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cde:	4b54      	ldr	r3, [pc, #336]	; (8003e30 <HAL_GPIO_Init+0x2e8>)
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cea:	4a52      	ldr	r2, [pc, #328]	; (8003e34 <HAL_GPIO_Init+0x2ec>)
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	220f      	movs	r2, #15
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a49      	ldr	r2, [pc, #292]	; (8003e38 <HAL_GPIO_Init+0x2f0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d019      	beq.n	8003d4a <HAL_GPIO_Init+0x202>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a48      	ldr	r2, [pc, #288]	; (8003e3c <HAL_GPIO_Init+0x2f4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_GPIO_Init+0x1fe>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a47      	ldr	r2, [pc, #284]	; (8003e40 <HAL_GPIO_Init+0x2f8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00d      	beq.n	8003d42 <HAL_GPIO_Init+0x1fa>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a46      	ldr	r2, [pc, #280]	; (8003e44 <HAL_GPIO_Init+0x2fc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d007      	beq.n	8003d3e <HAL_GPIO_Init+0x1f6>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a45      	ldr	r2, [pc, #276]	; (8003e48 <HAL_GPIO_Init+0x300>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d101      	bne.n	8003d3a <HAL_GPIO_Init+0x1f2>
 8003d36:	2304      	movs	r3, #4
 8003d38:	e008      	b.n	8003d4c <HAL_GPIO_Init+0x204>
 8003d3a:	2307      	movs	r3, #7
 8003d3c:	e006      	b.n	8003d4c <HAL_GPIO_Init+0x204>
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e004      	b.n	8003d4c <HAL_GPIO_Init+0x204>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e002      	b.n	8003d4c <HAL_GPIO_Init+0x204>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <HAL_GPIO_Init+0x204>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	f002 0203 	and.w	r2, r2, #3
 8003d52:	0092      	lsls	r2, r2, #2
 8003d54:	4093      	lsls	r3, r2
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d5c:	4935      	ldr	r1, [pc, #212]	; (8003e34 <HAL_GPIO_Init+0x2ec>)
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	3302      	adds	r3, #2
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d6a:	4b38      	ldr	r3, [pc, #224]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d8e:	4a2f      	ldr	r2, [pc, #188]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d94:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003db8:	4a24      	ldr	r2, [pc, #144]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dbe:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003de2:	4a1a      	ldr	r2, [pc, #104]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003de8:	4b18      	ldr	r3, [pc, #96]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e0c:	4a0f      	ldr	r2, [pc, #60]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3301      	adds	r3, #1
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2b0f      	cmp	r3, #15
 8003e1c:	f67f aea2 	bls.w	8003b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop
 8003e24:	3724      	adds	r7, #36	; 0x24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800
 8003e34:	40013800 	.word	0x40013800
 8003e38:	40020000 	.word	0x40020000
 8003e3c:	40020400 	.word	0x40020400
 8003e40:	40020800 	.word	0x40020800
 8003e44:	40020c00 	.word	0x40020c00
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40013c00 	.word	0x40013c00

08003e50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	887b      	ldrh	r3, [r7, #2]
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
 8003e6c:	e001      	b.n	8003e72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	807b      	strh	r3, [r7, #2]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e90:	787b      	ldrb	r3, [r7, #1]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e96:	887a      	ldrh	r2, [r7, #2]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e9c:	e003      	b.n	8003ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e9e:	887b      	ldrh	r3, [r7, #2]
 8003ea0:	041a      	lsls	r2, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	619a      	str	r2, [r3, #24]
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b085      	sub	sp, #20
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ec4:	887a      	ldrh	r2, [r7, #2]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	041a      	lsls	r2, r3, #16
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	43d9      	mvns	r1, r3
 8003ed0:	887b      	ldrh	r3, [r7, #2]
 8003ed2:	400b      	ands	r3, r1
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	619a      	str	r2, [r3, #24]
}
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af02      	add	r7, sp, #8
 8003eec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e101      	b.n	80040fc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f007 fb5e 	bl	800b5d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f26:	d102      	bne.n	8003f2e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f003 fee7 	bl	8007d06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	7c1a      	ldrb	r2, [r3, #16]
 8003f40:	f88d 2000 	strb.w	r2, [sp]
 8003f44:	3304      	adds	r3, #4
 8003f46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f48:	f003 fdc6 	bl	8007ad8 <USB_CoreInit>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2202      	movs	r2, #2
 8003f56:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e0ce      	b.n	80040fc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2100      	movs	r1, #0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f003 fedf 	bl	8007d28 <USB_SetCurrentMode>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0bf      	b.n	80040fc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	73fb      	strb	r3, [r7, #15]
 8003f80:	e04a      	b.n	8004018 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f82:	7bfa      	ldrb	r2, [r7, #15]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	3315      	adds	r3, #21
 8003f92:	2201      	movs	r2, #1
 8003f94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f96:	7bfa      	ldrb	r2, [r7, #15]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3314      	adds	r3, #20
 8003fa6:	7bfa      	ldrb	r2, [r7, #15]
 8003fa8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003faa:	7bfa      	ldrb	r2, [r7, #15]
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	b298      	uxth	r0, r3
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	332e      	adds	r3, #46	; 0x2e
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fc2:	7bfa      	ldrb	r2, [r7, #15]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	3318      	adds	r3, #24
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fd6:	7bfa      	ldrb	r2, [r7, #15]
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	331c      	adds	r3, #28
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fea:	7bfa      	ldrb	r2, [r7, #15]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	3320      	adds	r3, #32
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ffe:	7bfa      	ldrb	r2, [r7, #15]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	3324      	adds	r3, #36	; 0x24
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	3301      	adds	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	791b      	ldrb	r3, [r3, #4]
 800401c:	7bfa      	ldrb	r2, [r7, #15]
 800401e:	429a      	cmp	r2, r3
 8004020:	d3af      	bcc.n	8003f82 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004022:	2300      	movs	r3, #0
 8004024:	73fb      	strb	r3, [r7, #15]
 8004026:	e044      	b.n	80040b2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004028:	7bfa      	ldrb	r2, [r7, #15]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	f203 2355 	addw	r3, r3, #597	; 0x255
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800403e:	7bfa      	ldrb	r2, [r7, #15]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8004050:	7bfa      	ldrb	r2, [r7, #15]
 8004052:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004054:	7bfa      	ldrb	r2, [r7, #15]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004066:	2200      	movs	r2, #0
 8004068:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800406a:	7bfa      	ldrb	r2, [r7, #15]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004080:	7bfa      	ldrb	r2, [r7, #15]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004096:	7bfa      	ldrb	r2, [r7, #15]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	3301      	adds	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	791b      	ldrb	r3, [r3, #4]
 80040b6:	7bfa      	ldrb	r2, [r7, #15]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d3b5      	bcc.n	8004028 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	7c1a      	ldrb	r2, [r3, #16]
 80040c4:	f88d 2000 	strb.w	r2, [sp]
 80040c8:	3304      	adds	r3, #4
 80040ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040cc:	f003 fe78 	bl	8007dc0 <USB_DevInit>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e00c      	b.n	80040fc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f004 febc 	bl	8008e72 <USB_DevDisconnect>

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_PCD_Start+0x1c>
 800411c:	2302      	movs	r3, #2
 800411e:	e022      	b.n	8004166 <HAL_PCD_Start+0x62>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d009      	beq.n	8004148 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004138:	2b01      	cmp	r3, #1
 800413a:	d105      	bne.n	8004148 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f003 fdc9 	bl	8007ce4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f004 fe6a 	bl	8008e30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800416e:	b590      	push	{r4, r7, lr}
 8004170:	b08d      	sub	sp, #52	; 0x34
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f004 ff28 	bl	8008fda <USB_GetMode>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	f040 848c 	bne.w	8004aaa <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f004 fe8c 	bl	8008eb4 <USB_ReadInterrupts>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 8482 	beq.w	8004aa8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	0a1b      	lsrs	r3, r3, #8
 80041ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f004 fe79 	bl	8008eb4 <USB_ReadInterrupts>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d107      	bne.n	80041dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f002 0202 	and.w	r2, r2, #2
 80041da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f004 fe67 	bl	8008eb4 <USB_ReadInterrupts>
 80041e6:	4603      	mov	r3, r0
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d161      	bne.n	80042b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0210 	bic.w	r2, r2, #16
 80041fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f003 020f 	and.w	r2, r3, #15
 800420c:	4613      	mov	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4413      	add	r3, r2
 800421c:	3304      	adds	r3, #4
 800421e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	0c5b      	lsrs	r3, r3, #17
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	2b02      	cmp	r3, #2
 800422a:	d124      	bne.n	8004276 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d035      	beq.n	80042a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	091b      	lsrs	r3, r3, #4
 8004240:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004242:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004246:	b29b      	uxth	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	6a38      	ldr	r0, [r7, #32]
 800424c:	f004 fc9e 	bl	8008b8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	091b      	lsrs	r3, r3, #4
 8004258:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800425c:	441a      	add	r2, r3
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800426e:	441a      	add	r2, r3
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	615a      	str	r2, [r3, #20]
 8004274:	e016      	b.n	80042a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	0c5b      	lsrs	r3, r3, #17
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	2b06      	cmp	r3, #6
 8004280:	d110      	bne.n	80042a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004288:	2208      	movs	r2, #8
 800428a:	4619      	mov	r1, r3
 800428c:	6a38      	ldr	r0, [r7, #32]
 800428e:	f004 fc7d 	bl	8008b8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800429e:	441a      	add	r2, r3
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0210 	orr.w	r2, r2, #16
 80042b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f004 fdfb 	bl	8008eb4 <USB_ReadInterrupts>
 80042be:	4603      	mov	r3, r0
 80042c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042c8:	f040 80a7 	bne.w	800441a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f004 fe00 	bl	8008eda <USB_ReadDevAllOutEpInterrupt>
 80042da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80042dc:	e099      	b.n	8004412 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 808e 	beq.w	8004406 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	4611      	mov	r1, r2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f004 fe24 	bl	8008f42 <USB_ReadDevOutEPInterrupt>
 80042fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00c      	beq.n	8004320 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	461a      	mov	r2, r3
 8004314:	2301      	movs	r3, #1
 8004316:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fea2 	bl	8005064 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00c      	beq.n	8004344 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004336:	461a      	mov	r2, r3
 8004338:	2308      	movs	r3, #8
 800433a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800433c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 ff78 	bl	8005234 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435a:	461a      	mov	r2, r3
 800435c:	2310      	movs	r3, #16
 800435e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d030      	beq.n	80043cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b80      	cmp	r3, #128	; 0x80
 8004374:	d109      	bne.n	800438a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004384:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004388:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800438a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	4413      	add	r3, r2
 800439c:	3304      	adds	r3, #4
 800439e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	78db      	ldrb	r3, [r3, #3]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d108      	bne.n	80043ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2200      	movs	r2, #0
 80043ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	4619      	mov	r1, r3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f007 fa09 	bl	800b7cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c6:	461a      	mov	r2, r3
 80043c8:	2302      	movs	r3, #2
 80043ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d008      	beq.n	80043e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e2:	461a      	mov	r2, r3
 80043e4:	2320      	movs	r3, #32
 80043e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d009      	beq.n	8004406 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fe:	461a      	mov	r2, r3
 8004400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004404:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	3301      	adds	r3, #1
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004414:	2b00      	cmp	r3, #0
 8004416:	f47f af62 	bne.w	80042de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f004 fd48 	bl	8008eb4 <USB_ReadInterrupts>
 8004424:	4603      	mov	r3, r0
 8004426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800442a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800442e:	f040 80db 	bne.w	80045e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f004 fd69 	bl	8008f0e <USB_ReadDevAllInEpInterrupt>
 800443c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004442:	e0cd      	b.n	80045e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 80c2 	beq.w	80045d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	4611      	mov	r1, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f004 fd8f 	bl	8008f7e <USB_ReadDevInEPInterrupt>
 8004460:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d057      	beq.n	800451c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	2201      	movs	r2, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	43db      	mvns	r3, r3
 8004486:	69f9      	ldr	r1, [r7, #28]
 8004488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800448c:	4013      	ands	r3, r2
 800448e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449c:	461a      	mov	r2, r3
 800449e:	2301      	movs	r3, #1
 80044a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	799b      	ldrb	r3, [r3, #6]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d132      	bne.n	8004510 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ae:	4613      	mov	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	3320      	adds	r3, #32
 80044ba:	6819      	ldr	r1, [r3, #0]
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c0:	4613      	mov	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4403      	add	r3, r0
 80044ca:	331c      	adds	r3, #28
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4419      	add	r1, r3
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d4:	4613      	mov	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4403      	add	r3, r0
 80044de:	3320      	adds	r3, #32
 80044e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d113      	bne.n	8004510 <HAL_PCD_IRQHandler+0x3a2>
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ec:	4613      	mov	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	3324      	adds	r3, #36	; 0x24
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d108      	bne.n	8004510 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004508:	461a      	mov	r2, r3
 800450a:	2101      	movs	r1, #1
 800450c:	f004 fd96 	bl	800903c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	b2db      	uxtb	r3, r3
 8004514:	4619      	mov	r1, r3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f007 f8dd 	bl	800b6d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d008      	beq.n	8004538 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004532:	461a      	mov	r2, r3
 8004534:	2308      	movs	r3, #8
 8004536:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454e:	461a      	mov	r2, r3
 8004550:	2310      	movs	r3, #16
 8004552:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d008      	beq.n	8004570 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456a:	461a      	mov	r2, r3
 800456c:	2340      	movs	r3, #64	; 0x40
 800456e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d023      	beq.n	80045c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800457a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800457c:	6a38      	ldr	r0, [r7, #32]
 800457e:	f003 fd83 	bl	8008088 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004584:	4613      	mov	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	3310      	adds	r3, #16
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	4413      	add	r3, r2
 8004592:	3304      	adds	r3, #4
 8004594:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	78db      	ldrb	r3, [r3, #3]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d108      	bne.n	80045b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2200      	movs	r2, #0
 80045a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	4619      	mov	r1, r3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f007 f920 	bl	800b7f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045bc:	461a      	mov	r2, r3
 80045be:	2302      	movs	r3, #2
 80045c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80045cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fcbb 	bl	8004f4a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	3301      	adds	r3, #1
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80045e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f47f af2e 	bne.w	8004444 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f004 fc61 	bl	8008eb4 <USB_ReadInterrupts>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045fc:	d122      	bne.n	8004644 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8004618:	2b01      	cmp	r3, #1
 800461a:	d108      	bne.n	800462e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004624:	2100      	movs	r1, #0
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fea2 	bl	8005370 <HAL_PCDEx_LPM_Callback>
 800462c:	e002      	b.n	8004634 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f007 f8be 	bl	800b7b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004642:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f004 fc33 	bl	8008eb4 <USB_ReadInterrupts>
 800464e:	4603      	mov	r3, r0
 8004650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004658:	d112      	bne.n	8004680 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b01      	cmp	r3, #1
 8004668:	d102      	bne.n	8004670 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f007 f87a 	bl	800b764 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695a      	ldr	r2, [r3, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800467e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f004 fc15 	bl	8008eb4 <USB_ReadInterrupts>
 800468a:	4603      	mov	r3, r0
 800468c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	f040 80b7 	bne.w	8004806 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046a6:	f023 0301 	bic.w	r3, r3, #1
 80046aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2110      	movs	r1, #16
 80046b2:	4618      	mov	r0, r3
 80046b4:	f003 fce8 	bl	8008088 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b8:	2300      	movs	r3, #0
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046bc:	e046      	b.n	800474c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80046be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ca:	461a      	mov	r2, r3
 80046cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046e2:	0151      	lsls	r1, r2, #5
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	440a      	add	r2, r1
 80046e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fe:	461a      	mov	r2, r3
 8004700:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004704:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004716:	0151      	lsls	r1, r2, #5
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	440a      	add	r2, r1
 800471c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004720:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004724:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004736:	0151      	lsls	r1, r2, #5
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	440a      	add	r2, r1
 800473c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004740:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004744:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	3301      	adds	r3, #1
 800474a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	791b      	ldrb	r3, [r3, #4]
 8004750:	461a      	mov	r2, r3
 8004752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004754:	4293      	cmp	r3, r2
 8004756:	d3b2      	bcc.n	80046be <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004766:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800476a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	7bdb      	ldrb	r3, [r3, #15]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d016      	beq.n	80047a2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004784:	f043 030b 	orr.w	r3, r3, #11
 8004788:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800479a:	f043 030b 	orr.w	r3, r3, #11
 800479e:	6453      	str	r3, [r2, #68]	; 0x44
 80047a0:	e015      	b.n	80047ce <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047b4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80047b8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047c8:	f043 030b 	orr.w	r3, r3, #11
 80047cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80047e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047f0:	461a      	mov	r2, r3
 80047f2:	f004 fc23 	bl	800903c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695a      	ldr	r2, [r3, #20]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004804:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f004 fb52 	bl	8008eb4 <USB_ReadInterrupts>
 8004810:	4603      	mov	r3, r0
 8004812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481a:	d123      	bne.n	8004864 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f004 fbe8 	bl	8008ff6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f003 fca5 	bl	800817a <USB_GetDevSpeed>
 8004830:	4603      	mov	r3, r0
 8004832:	461a      	mov	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681c      	ldr	r4, [r3, #0]
 800483c:	f001 f9c8 	bl	8005bd0 <HAL_RCC_GetHCLKFreq>
 8004840:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004846:	461a      	mov	r2, r3
 8004848:	4620      	mov	r0, r4
 800484a:	f003 f9a9 	bl	8007ba0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f006 ff69 	bl	800b726 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004862:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f004 fb23 	bl	8008eb4 <USB_ReadInterrupts>
 800486e:	4603      	mov	r3, r0
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b08      	cmp	r3, #8
 8004876:	d10a      	bne.n	800488e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f006 ff46 	bl	800b70a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f002 0208 	and.w	r2, r2, #8
 800488c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f004 fb0e 	bl	8008eb4 <USB_ReadInterrupts>
 8004898:	4603      	mov	r3, r0
 800489a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489e:	2b80      	cmp	r3, #128	; 0x80
 80048a0:	d123      	bne.n	80048ea <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048ae:	2301      	movs	r3, #1
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
 80048b2:	e014      	b.n	80048de <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	f203 2357 	addw	r3, r3, #599	; 0x257
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d105      	bne.n	80048d8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fb08 	bl	8004ee8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	3301      	adds	r3, #1
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	791b      	ldrb	r3, [r3, #4]
 80048e2:	461a      	mov	r2, r3
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d3e4      	bcc.n	80048b4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f004 fae0 	bl	8008eb4 <USB_ReadInterrupts>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048fe:	d13c      	bne.n	800497a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004900:	2301      	movs	r3, #1
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
 8004904:	e02b      	b.n	800495e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491a:	4613      	mov	r3, r2
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4413      	add	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	3318      	adds	r3, #24
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d115      	bne.n	8004958 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800492c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800492e:	2b00      	cmp	r3, #0
 8004930:	da12      	bge.n	8004958 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004936:	4613      	mov	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	3317      	adds	r3, #23
 8004942:	2201      	movs	r2, #1
 8004944:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800494e:	b2db      	uxtb	r3, r3
 8004950:	4619      	mov	r1, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fac8 	bl	8004ee8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	3301      	adds	r3, #1
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	791b      	ldrb	r3, [r3, #4]
 8004962:	461a      	mov	r2, r3
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	4293      	cmp	r3, r2
 8004968:	d3cd      	bcc.n	8004906 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695a      	ldr	r2, [r3, #20]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004978:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f004 fa98 	bl	8008eb4 <USB_ReadInterrupts>
 8004984:	4603      	mov	r3, r0
 8004986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800498a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800498e:	d156      	bne.n	8004a3e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004990:	2301      	movs	r3, #1
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
 8004994:	e045      	b.n	8004a22 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049aa:	4613      	mov	r3, r2
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d12e      	bne.n	8004a1c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	da2b      	bge.n	8004a1c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80049d0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d121      	bne.n	8004a1c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049dc:	4613      	mov	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	f203 2357 	addw	r3, r3, #599	; 0x257
 80049ea:	2201      	movs	r2, #1
 80049ec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10a      	bne.n	8004a1c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a18:	6053      	str	r3, [r2, #4]
            break;
 8004a1a:	e008      	b.n	8004a2e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	3301      	adds	r3, #1
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	791b      	ldrb	r3, [r3, #4]
 8004a26:	461a      	mov	r2, r3
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d3b3      	bcc.n	8004996 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695a      	ldr	r2, [r3, #20]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f004 fa36 	bl	8008eb4 <USB_ReadInterrupts>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a52:	d10a      	bne.n	8004a6a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f006 fedd 	bl	800b814 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f004 fa20 	bl	8008eb4 <USB_ReadInterrupts>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d115      	bne.n	8004aaa <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f006 fecd 	bl	800b830 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6859      	ldr	r1, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
 8004aa6:	e000      	b.n	8004aaa <HAL_PCD_IRQHandler+0x93c>
      return;
 8004aa8:	bf00      	nop
    }
  }
}
 8004aaa:	3734      	adds	r7, #52	; 0x34
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd90      	pop	{r4, r7, pc}

08004ab0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_PCD_SetAddress+0x1a>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e012      	b.n	8004af0 <HAL_PCD_SetAddress+0x40>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	78fa      	ldrb	r2, [r7, #3]
 8004ad6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	78fa      	ldrb	r2, [r7, #3]
 8004ade:	4611      	mov	r1, r2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f004 f97f 	bl	8008de4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	4608      	mov	r0, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	461a      	mov	r2, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	70fb      	strb	r3, [r7, #3]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	803b      	strh	r3, [r7, #0]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	da0f      	bge.n	8004b3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b1e:	78fb      	ldrb	r3, [r7, #3]
 8004b20:	f003 020f 	and.w	r2, r3, #15
 8004b24:	4613      	mov	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	3310      	adds	r3, #16
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	4413      	add	r3, r2
 8004b32:	3304      	adds	r3, #4
 8004b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	705a      	strb	r2, [r3, #1]
 8004b3c:	e00f      	b.n	8004b5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	f003 020f 	and.w	r2, r3, #15
 8004b44:	4613      	mov	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	4413      	add	r3, r2
 8004b54:	3304      	adds	r3, #4
 8004b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b6a:	883a      	ldrh	r2, [r7, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	78ba      	ldrb	r2, [r7, #2]
 8004b74:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	785b      	ldrb	r3, [r3, #1]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d004      	beq.n	8004b88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b88:	78bb      	ldrb	r3, [r7, #2]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d102      	bne.n	8004b94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_PCD_EP_Open+0xaa>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e00e      	b.n	8004bc0 <HAL_PCD_EP_Open+0xc8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68f9      	ldr	r1, [r7, #12]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f003 fb07 	bl	80081c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8004bbe:	7afb      	ldrb	r3, [r7, #11]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	da0f      	bge.n	8004bfc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	f003 020f 	and.w	r2, r3, #15
 8004be2:	4613      	mov	r3, r2
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4413      	add	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	3310      	adds	r3, #16
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	4413      	add	r3, r2
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	705a      	strb	r2, [r3, #1]
 8004bfa:	e00f      	b.n	8004c1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	f003 020f 	and.w	r2, r3, #15
 8004c02:	4613      	mov	r3, r2
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	4413      	add	r3, r2
 8004c12:	3304      	adds	r3, #4
 8004c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c1c:	78fb      	ldrb	r3, [r7, #3]
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_PCD_EP_Close+0x6e>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e00e      	b.n	8004c54 <HAL_PCD_EP_Close+0x8c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f003 fb45 	bl	80082d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c6c:	7afb      	ldrb	r3, [r7, #11]
 8004c6e:	f003 020f 	and.w	r2, r3, #15
 8004c72:	4613      	mov	r3, r2
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	3304      	adds	r3, #4
 8004c84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2200      	movs	r2, #0
 8004c96:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c9e:	7afb      	ldrb	r3, [r7, #11]
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	799b      	ldrb	r3, [r3, #6]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d102      	bne.n	8004cb8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6818      	ldr	r0, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	799b      	ldrb	r3, [r3, #6]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	6979      	ldr	r1, [r7, #20]
 8004cc4:	f003 fbe2 	bl	800848c <USB_EPStartXfer>

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	f003 020f 	and.w	r2, r3, #15
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8004cf4:	681b      	ldr	r3, [r3, #0]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b086      	sub	sp, #24
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d12:	7afb      	ldrb	r3, [r7, #11]
 8004d14:	f003 020f 	and.w	r2, r3, #15
 8004d18:	4613      	mov	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	3310      	adds	r3, #16
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4413      	add	r3, r2
 8004d26:	3304      	adds	r3, #4
 8004d28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d42:	7afb      	ldrb	r3, [r7, #11]
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	799b      	ldrb	r3, [r3, #6]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d102      	bne.n	8004d5c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	799b      	ldrb	r3, [r3, #6]
 8004d64:	461a      	mov	r2, r3
 8004d66:	6979      	ldr	r1, [r7, #20]
 8004d68:	f003 fb90 	bl	800848c <USB_EPStartXfer>

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	460b      	mov	r3, r1
 8004d80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d82:	78fb      	ldrb	r3, [r7, #3]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	7912      	ldrb	r2, [r2, #4]
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d901      	bls.n	8004d94 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e04f      	b.n	8004e34 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	da0f      	bge.n	8004dbc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	f003 020f 	and.w	r2, r3, #15
 8004da2:	4613      	mov	r3, r2
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	4413      	add	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	3310      	adds	r3, #16
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	4413      	add	r3, r2
 8004db0:	3304      	adds	r3, #4
 8004db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2201      	movs	r2, #1
 8004db8:	705a      	strb	r2, [r3, #1]
 8004dba:	e00d      	b.n	8004dd8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004dbc:	78fa      	ldrb	r2, [r7, #3]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	4413      	add	r3, r2
 8004dce:	3304      	adds	r3, #4
 8004dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_PCD_EP_SetStall+0x82>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e01d      	b.n	8004e34 <HAL_PCD_EP_SetStall+0xbe>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68f9      	ldr	r1, [r7, #12]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f003 ff18 	bl	8008c3c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d109      	bne.n	8004e2a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	7999      	ldrb	r1, [r3, #6]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004e24:	461a      	mov	r2, r3
 8004e26:	f004 f909 	bl	800903c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	7912      	ldrb	r2, [r2, #4]
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e042      	b.n	8004ee0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	da0f      	bge.n	8004e82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	f003 020f 	and.w	r2, r3, #15
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	3310      	adds	r3, #16
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	3304      	adds	r3, #4
 8004e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	705a      	strb	r2, [r3, #1]
 8004e80:	e00f      	b.n	8004ea2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	f003 020f 	and.w	r2, r3, #15
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	4413      	add	r3, r2
 8004e98:	3304      	adds	r3, #4
 8004e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ea8:	78fb      	ldrb	r3, [r7, #3]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_PCD_EP_ClrStall+0x86>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e00e      	b.n	8004ee0 <HAL_PCD_EP_ClrStall+0xa4>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68f9      	ldr	r1, [r7, #12]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f003 ff21 	bl	8008d18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	da0c      	bge.n	8004f16 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	f003 020f 	and.w	r2, r3, #15
 8004f02:	4613      	mov	r3, r2
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	3310      	adds	r3, #16
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	4413      	add	r3, r2
 8004f10:	3304      	adds	r3, #4
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e00c      	b.n	8004f30 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f16:	78fb      	ldrb	r3, [r7, #3]
 8004f18:	f003 020f 	and.w	r2, r3, #15
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68f9      	ldr	r1, [r7, #12]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f003 fd40 	bl	80089bc <USB_EPStopXfer>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004f40:	7afb      	ldrb	r3, [r7, #11]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b08a      	sub	sp, #40	; 0x28
 8004f4e:	af02      	add	r7, sp, #8
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	3310      	adds	r3, #16
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3304      	adds	r3, #4
 8004f70:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	695a      	ldr	r2, [r3, #20]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d901      	bls.n	8004f82 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e06b      	b.n	800505a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d902      	bls.n	8004f9e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	3303      	adds	r3, #3
 8004fa2:	089b      	lsrs	r3, r3, #2
 8004fa4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fa6:	e02a      	b.n	8004ffe <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d902      	bls.n	8004fc4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	3303      	adds	r3, #3
 8004fc8:	089b      	lsrs	r3, r3, #2
 8004fca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	68d9      	ldr	r1, [r3, #12]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	4603      	mov	r3, r0
 8004fe0:	6978      	ldr	r0, [r7, #20]
 8004fe2:	f003 fd95 	bl	8008b10 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	441a      	add	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	695a      	ldr	r2, [r3, #20]
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	441a      	add	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	429a      	cmp	r2, r3
 8005012:	d809      	bhi.n	8005028 <PCD_WriteEmptyTxFifo+0xde>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800501c:	429a      	cmp	r2, r3
 800501e:	d203      	bcs.n	8005028 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1bf      	bne.n	8004fa8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	429a      	cmp	r2, r3
 8005032:	d811      	bhi.n	8005058 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	2201      	movs	r2, #1
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	43db      	mvns	r3, r3
 800504e:	6939      	ldr	r1, [r7, #16]
 8005050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005054:	4013      	ands	r3, r2
 8005056:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3720      	adds	r7, #32
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	333c      	adds	r3, #60	; 0x3c
 800507c:	3304      	adds	r3, #4
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	799b      	ldrb	r3, [r3, #6]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d17b      	bne.n	8005192 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d015      	beq.n	80050d0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	4a61      	ldr	r2, [pc, #388]	; (800522c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	f240 80b9 	bls.w	8005220 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80b3 	beq.w	8005220 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c6:	461a      	mov	r2, r3
 80050c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050cc:	6093      	str	r3, [r2, #8]
 80050ce:	e0a7      	b.n	8005220 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e6:	461a      	mov	r2, r3
 80050e8:	2320      	movs	r3, #32
 80050ea:	6093      	str	r3, [r2, #8]
 80050ec:	e098      	b.n	8005220 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f040 8093 	bne.w	8005220 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	4a4b      	ldr	r2, [pc, #300]	; (800522c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d90f      	bls.n	8005122 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005118:	461a      	mov	r2, r3
 800511a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800511e:	6093      	str	r3, [r2, #8]
 8005120:	e07e      	b.n	8005220 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	4413      	add	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	4413      	add	r3, r2
 8005134:	3304      	adds	r3, #4
 8005136:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a1a      	ldr	r2, [r3, #32]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	0159      	lsls	r1, r3, #5
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	440b      	add	r3, r1
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800514e:	1ad2      	subs	r2, r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d114      	bne.n	8005184 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800516c:	461a      	mov	r2, r3
 800516e:	2101      	movs	r1, #1
 8005170:	f003 ff64 	bl	800903c <USB_EP0_OutStart>
 8005174:	e006      	b.n	8005184 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	441a      	add	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	4619      	mov	r1, r3
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f006 fa88 	bl	800b6a0 <HAL_PCD_DataOutStageCallback>
 8005190:	e046      	b.n	8005220 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	4a26      	ldr	r2, [pc, #152]	; (8005230 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d124      	bne.n	80051e4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b0:	461a      	mov	r2, r3
 80051b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051b6:	6093      	str	r3, [r2, #8]
 80051b8:	e032      	b.n	8005220 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d008      	beq.n	80051d6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d0:	461a      	mov	r2, r3
 80051d2:	2320      	movs	r3, #32
 80051d4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	4619      	mov	r1, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f006 fa5f 	bl	800b6a0 <HAL_PCD_DataOutStageCallback>
 80051e2:	e01d      	b.n	8005220 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d114      	bne.n	8005214 <PCD_EP_OutXfrComplete_int+0x1b0>
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	4613      	mov	r3, r2
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	440b      	add	r3, r1
 80051f8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d108      	bne.n	8005214 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800520c:	461a      	mov	r2, r3
 800520e:	2100      	movs	r1, #0
 8005210:	f003 ff14 	bl	800903c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	4619      	mov	r1, r3
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f006 fa40 	bl	800b6a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3720      	adds	r7, #32
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	4f54300a 	.word	0x4f54300a
 8005230:	4f54310a 	.word	0x4f54310a

08005234 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	333c      	adds	r3, #60	; 0x3c
 800524c:	3304      	adds	r3, #4
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4a15      	ldr	r2, [pc, #84]	; (80052bc <PCD_EP_OutSetupPacket_int+0x88>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d90e      	bls.n	8005288 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005270:	2b00      	cmp	r3, #0
 8005272:	d009      	beq.n	8005288 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	461a      	mov	r2, r3
 8005282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005286:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f006 f9f7 	bl	800b67c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4a0a      	ldr	r2, [pc, #40]	; (80052bc <PCD_EP_OutSetupPacket_int+0x88>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d90c      	bls.n	80052b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	799b      	ldrb	r3, [r3, #6]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d108      	bne.n	80052b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80052a8:	461a      	mov	r2, r3
 80052aa:	2101      	movs	r1, #1
 80052ac:	f003 fec6 	bl	800903c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	4f54300a 	.word	0x4f54300a

080052c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	70fb      	strb	r3, [r7, #3]
 80052cc:	4613      	mov	r3, r2
 80052ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d107      	bne.n	80052ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80052de:	883b      	ldrh	r3, [r7, #0]
 80052e0:	0419      	lsls	r1, r3, #16
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	629a      	str	r2, [r3, #40]	; 0x28
 80052ec:	e028      	b.n	8005340 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f4:	0c1b      	lsrs	r3, r3, #16
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	4413      	add	r3, r2
 80052fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]
 8005300:	e00d      	b.n	800531e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	3340      	adds	r3, #64	; 0x40
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	0c1b      	lsrs	r3, r3, #16
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	4413      	add	r3, r2
 8005316:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	3301      	adds	r3, #1
 800531c:	73fb      	strb	r3, [r7, #15]
 800531e:	7bfa      	ldrb	r2, [r7, #15]
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	3b01      	subs	r3, #1
 8005324:	429a      	cmp	r2, r3
 8005326:	d3ec      	bcc.n	8005302 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005328:	883b      	ldrh	r3, [r7, #0]
 800532a:	0418      	lsls	r0, r3, #16
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6819      	ldr	r1, [r3, #0]
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	3b01      	subs	r3, #1
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	4302      	orrs	r2, r0
 8005338:	3340      	adds	r3, #64	; 0x40
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	460b      	mov	r3, r1
 8005358:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	887a      	ldrh	r2, [r7, #2]
 8005360:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e267      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d075      	beq.n	8005492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053a6:	4b88      	ldr	r3, [pc, #544]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 030c 	and.w	r3, r3, #12
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d00c      	beq.n	80053cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053b2:	4b85      	ldr	r3, [pc, #532]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d112      	bne.n	80053e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053be:	4b82      	ldr	r3, [pc, #520]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ca:	d10b      	bne.n	80053e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053cc:	4b7e      	ldr	r3, [pc, #504]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d05b      	beq.n	8005490 <HAL_RCC_OscConfig+0x108>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d157      	bne.n	8005490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e242      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ec:	d106      	bne.n	80053fc <HAL_RCC_OscConfig+0x74>
 80053ee:	4b76      	ldr	r3, [pc, #472]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a75      	ldr	r2, [pc, #468]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 80053f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	e01d      	b.n	8005438 <HAL_RCC_OscConfig+0xb0>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005404:	d10c      	bne.n	8005420 <HAL_RCC_OscConfig+0x98>
 8005406:	4b70      	ldr	r3, [pc, #448]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a6f      	ldr	r2, [pc, #444]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 800540c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	4b6d      	ldr	r3, [pc, #436]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a6c      	ldr	r2, [pc, #432]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 8005418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	e00b      	b.n	8005438 <HAL_RCC_OscConfig+0xb0>
 8005420:	4b69      	ldr	r3, [pc, #420]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a68      	ldr	r2, [pc, #416]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 8005426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	4b66      	ldr	r3, [pc, #408]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a65      	ldr	r2, [pc, #404]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 8005432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d013      	beq.n	8005468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005440:	f7fd fea2 	bl	8003188 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005448:	f7fd fe9e 	bl	8003188 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	; 0x64
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e207      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545a:	4b5b      	ldr	r3, [pc, #364]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0f0      	beq.n	8005448 <HAL_RCC_OscConfig+0xc0>
 8005466:	e014      	b.n	8005492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005468:	f7fd fe8e 	bl	8003188 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005470:	f7fd fe8a 	bl	8003188 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b64      	cmp	r3, #100	; 0x64
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e1f3      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005482:	4b51      	ldr	r3, [pc, #324]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCC_OscConfig+0xe8>
 800548e:	e000      	b.n	8005492 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d063      	beq.n	8005566 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800549e:	4b4a      	ldr	r3, [pc, #296]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 030c 	and.w	r3, r3, #12
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00b      	beq.n	80054c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054aa:	4b47      	ldr	r3, [pc, #284]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d11c      	bne.n	80054f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054b6:	4b44      	ldr	r3, [pc, #272]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d116      	bne.n	80054f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054c2:	4b41      	ldr	r3, [pc, #260]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d005      	beq.n	80054da <HAL_RCC_OscConfig+0x152>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d001      	beq.n	80054da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e1c7      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054da:	4b3b      	ldr	r3, [pc, #236]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	4937      	ldr	r1, [pc, #220]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ee:	e03a      	b.n	8005566 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d020      	beq.n	800553a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054f8:	4b34      	ldr	r3, [pc, #208]	; (80055cc <HAL_RCC_OscConfig+0x244>)
 80054fa:	2201      	movs	r2, #1
 80054fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fe:	f7fd fe43 	bl	8003188 <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005504:	e008      	b.n	8005518 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005506:	f7fd fe3f 	bl	8003188 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e1a8      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005518:	4b2b      	ldr	r3, [pc, #172]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0f0      	beq.n	8005506 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005524:	4b28      	ldr	r3, [pc, #160]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	4925      	ldr	r1, [pc, #148]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 8005534:	4313      	orrs	r3, r2
 8005536:	600b      	str	r3, [r1, #0]
 8005538:	e015      	b.n	8005566 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800553a:	4b24      	ldr	r3, [pc, #144]	; (80055cc <HAL_RCC_OscConfig+0x244>)
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7fd fe22 	bl	8003188 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005548:	f7fd fe1e 	bl	8003188 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e187      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800555a:	4b1b      	ldr	r3, [pc, #108]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f0      	bne.n	8005548 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d036      	beq.n	80055e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d016      	beq.n	80055a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800557a:	4b15      	ldr	r3, [pc, #84]	; (80055d0 <HAL_RCC_OscConfig+0x248>)
 800557c:	2201      	movs	r2, #1
 800557e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005580:	f7fd fe02 	bl	8003188 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005588:	f7fd fdfe 	bl	8003188 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e167      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800559a:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <HAL_RCC_OscConfig+0x240>)
 800559c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0f0      	beq.n	8005588 <HAL_RCC_OscConfig+0x200>
 80055a6:	e01b      	b.n	80055e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055a8:	4b09      	ldr	r3, [pc, #36]	; (80055d0 <HAL_RCC_OscConfig+0x248>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ae:	f7fd fdeb 	bl	8003188 <HAL_GetTick>
 80055b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b4:	e00e      	b.n	80055d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055b6:	f7fd fde7 	bl	8003188 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d907      	bls.n	80055d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e150      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
 80055c8:	40023800 	.word	0x40023800
 80055cc:	42470000 	.word	0x42470000
 80055d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d4:	4b88      	ldr	r3, [pc, #544]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 80055d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1ea      	bne.n	80055b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 8097 	beq.w	800571c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ee:	2300      	movs	r3, #0
 80055f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055f2:	4b81      	ldr	r3, [pc, #516]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10f      	bne.n	800561e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055fe:	2300      	movs	r3, #0
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	4b7d      	ldr	r3, [pc, #500]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	4a7c      	ldr	r2, [pc, #496]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 8005608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560c:	6413      	str	r3, [r2, #64]	; 0x40
 800560e:	4b7a      	ldr	r3, [pc, #488]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005616:	60bb      	str	r3, [r7, #8]
 8005618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800561a:	2301      	movs	r3, #1
 800561c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561e:	4b77      	ldr	r3, [pc, #476]	; (80057fc <HAL_RCC_OscConfig+0x474>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005626:	2b00      	cmp	r3, #0
 8005628:	d118      	bne.n	800565c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800562a:	4b74      	ldr	r3, [pc, #464]	; (80057fc <HAL_RCC_OscConfig+0x474>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a73      	ldr	r2, [pc, #460]	; (80057fc <HAL_RCC_OscConfig+0x474>)
 8005630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005636:	f7fd fda7 	bl	8003188 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800563e:	f7fd fda3 	bl	8003188 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e10c      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005650:	4b6a      	ldr	r3, [pc, #424]	; (80057fc <HAL_RCC_OscConfig+0x474>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d106      	bne.n	8005672 <HAL_RCC_OscConfig+0x2ea>
 8005664:	4b64      	ldr	r3, [pc, #400]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 8005666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005668:	4a63      	ldr	r2, [pc, #396]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 800566a:	f043 0301 	orr.w	r3, r3, #1
 800566e:	6713      	str	r3, [r2, #112]	; 0x70
 8005670:	e01c      	b.n	80056ac <HAL_RCC_OscConfig+0x324>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b05      	cmp	r3, #5
 8005678:	d10c      	bne.n	8005694 <HAL_RCC_OscConfig+0x30c>
 800567a:	4b5f      	ldr	r3, [pc, #380]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567e:	4a5e      	ldr	r2, [pc, #376]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 8005680:	f043 0304 	orr.w	r3, r3, #4
 8005684:	6713      	str	r3, [r2, #112]	; 0x70
 8005686:	4b5c      	ldr	r3, [pc, #368]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	4a5b      	ldr	r2, [pc, #364]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 800568c:	f043 0301 	orr.w	r3, r3, #1
 8005690:	6713      	str	r3, [r2, #112]	; 0x70
 8005692:	e00b      	b.n	80056ac <HAL_RCC_OscConfig+0x324>
 8005694:	4b58      	ldr	r3, [pc, #352]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 8005696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005698:	4a57      	ldr	r2, [pc, #348]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 800569a:	f023 0301 	bic.w	r3, r3, #1
 800569e:	6713      	str	r3, [r2, #112]	; 0x70
 80056a0:	4b55      	ldr	r3, [pc, #340]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 80056a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a4:	4a54      	ldr	r2, [pc, #336]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 80056a6:	f023 0304 	bic.w	r3, r3, #4
 80056aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d015      	beq.n	80056e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b4:	f7fd fd68 	bl	8003188 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ba:	e00a      	b.n	80056d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056bc:	f7fd fd64 	bl	8003188 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e0cb      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d2:	4b49      	ldr	r3, [pc, #292]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0ee      	beq.n	80056bc <HAL_RCC_OscConfig+0x334>
 80056de:	e014      	b.n	800570a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056e0:	f7fd fd52 	bl	8003188 <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056e6:	e00a      	b.n	80056fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056e8:	f7fd fd4e 	bl	8003188 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e0b5      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056fe:	4b3e      	ldr	r3, [pc, #248]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 8005700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1ee      	bne.n	80056e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800570a:	7dfb      	ldrb	r3, [r7, #23]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d105      	bne.n	800571c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005710:	4b39      	ldr	r3, [pc, #228]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	4a38      	ldr	r2, [pc, #224]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 8005716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800571a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 80a1 	beq.w	8005868 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005726:	4b34      	ldr	r3, [pc, #208]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 030c 	and.w	r3, r3, #12
 800572e:	2b08      	cmp	r3, #8
 8005730:	d05c      	beq.n	80057ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d141      	bne.n	80057be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800573a:	4b31      	ldr	r3, [pc, #196]	; (8005800 <HAL_RCC_OscConfig+0x478>)
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005740:	f7fd fd22 	bl	8003188 <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005748:	f7fd fd1e 	bl	8003188 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e087      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800575a:	4b27      	ldr	r3, [pc, #156]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f0      	bne.n	8005748 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69da      	ldr	r2, [r3, #28]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	019b      	lsls	r3, r3, #6
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	085b      	lsrs	r3, r3, #1
 800577e:	3b01      	subs	r3, #1
 8005780:	041b      	lsls	r3, r3, #16
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	061b      	lsls	r3, r3, #24
 800578a:	491b      	ldr	r1, [pc, #108]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 800578c:	4313      	orrs	r3, r2
 800578e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005790:	4b1b      	ldr	r3, [pc, #108]	; (8005800 <HAL_RCC_OscConfig+0x478>)
 8005792:	2201      	movs	r2, #1
 8005794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005796:	f7fd fcf7 	bl	8003188 <HAL_GetTick>
 800579a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800579e:	f7fd fcf3 	bl	8003188 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e05c      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b0:	4b11      	ldr	r3, [pc, #68]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0f0      	beq.n	800579e <HAL_RCC_OscConfig+0x416>
 80057bc:	e054      	b.n	8005868 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057be:	4b10      	ldr	r3, [pc, #64]	; (8005800 <HAL_RCC_OscConfig+0x478>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c4:	f7fd fce0 	bl	8003188 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057cc:	f7fd fcdc 	bl	8003188 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e045      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <HAL_RCC_OscConfig+0x470>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1f0      	bne.n	80057cc <HAL_RCC_OscConfig+0x444>
 80057ea:	e03d      	b.n	8005868 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d107      	bne.n	8005804 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e038      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
 80057f8:	40023800 	.word	0x40023800
 80057fc:	40007000 	.word	0x40007000
 8005800:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005804:	4b1b      	ldr	r3, [pc, #108]	; (8005874 <HAL_RCC_OscConfig+0x4ec>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d028      	beq.n	8005864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800581c:	429a      	cmp	r2, r3
 800581e:	d121      	bne.n	8005864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582a:	429a      	cmp	r2, r3
 800582c:	d11a      	bne.n	8005864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005834:	4013      	ands	r3, r2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800583a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800583c:	4293      	cmp	r3, r2
 800583e:	d111      	bne.n	8005864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	085b      	lsrs	r3, r3, #1
 800584c:	3b01      	subs	r3, #1
 800584e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005850:	429a      	cmp	r2, r3
 8005852:	d107      	bne.n	8005864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005860:	429a      	cmp	r2, r3
 8005862:	d001      	beq.n	8005868 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40023800 	.word	0x40023800

08005878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e0cc      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800588c:	4b68      	ldr	r3, [pc, #416]	; (8005a30 <HAL_RCC_ClockConfig+0x1b8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d90c      	bls.n	80058b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589a:	4b65      	ldr	r3, [pc, #404]	; (8005a30 <HAL_RCC_ClockConfig+0x1b8>)
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a2:	4b63      	ldr	r3, [pc, #396]	; (8005a30 <HAL_RCC_ClockConfig+0x1b8>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d001      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e0b8      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d020      	beq.n	8005902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058cc:	4b59      	ldr	r3, [pc, #356]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	4a58      	ldr	r2, [pc, #352]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058e4:	4b53      	ldr	r3, [pc, #332]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	4a52      	ldr	r2, [pc, #328]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f0:	4b50      	ldr	r3, [pc, #320]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	494d      	ldr	r1, [pc, #308]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d044      	beq.n	8005998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d107      	bne.n	8005926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005916:	4b47      	ldr	r3, [pc, #284]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d119      	bne.n	8005956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e07f      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b02      	cmp	r3, #2
 800592c:	d003      	beq.n	8005936 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005932:	2b03      	cmp	r3, #3
 8005934:	d107      	bne.n	8005946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005936:	4b3f      	ldr	r3, [pc, #252]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d109      	bne.n	8005956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e06f      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005946:	4b3b      	ldr	r3, [pc, #236]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e067      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005956:	4b37      	ldr	r3, [pc, #220]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f023 0203 	bic.w	r2, r3, #3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4934      	ldr	r1, [pc, #208]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 8005964:	4313      	orrs	r3, r2
 8005966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005968:	f7fd fc0e 	bl	8003188 <HAL_GetTick>
 800596c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596e:	e00a      	b.n	8005986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005970:	f7fd fc0a 	bl	8003188 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	f241 3288 	movw	r2, #5000	; 0x1388
 800597e:	4293      	cmp	r3, r2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e04f      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005986:	4b2b      	ldr	r3, [pc, #172]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 020c 	and.w	r2, r3, #12
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	429a      	cmp	r2, r3
 8005996:	d1eb      	bne.n	8005970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005998:	4b25      	ldr	r3, [pc, #148]	; (8005a30 <HAL_RCC_ClockConfig+0x1b8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d20c      	bcs.n	80059c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a6:	4b22      	ldr	r3, [pc, #136]	; (8005a30 <HAL_RCC_ClockConfig+0x1b8>)
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	b2d2      	uxtb	r2, r2
 80059ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ae:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <HAL_RCC_ClockConfig+0x1b8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d001      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e032      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d008      	beq.n	80059de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059cc:	4b19      	ldr	r3, [pc, #100]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	4916      	ldr	r1, [pc, #88]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059ea:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	490e      	ldr	r1, [pc, #56]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059fe:	f000 f821 	bl	8005a44 <HAL_RCC_GetSysClockFreq>
 8005a02:	4602      	mov	r2, r0
 8005a04:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	490a      	ldr	r1, [pc, #40]	; (8005a38 <HAL_RCC_ClockConfig+0x1c0>)
 8005a10:	5ccb      	ldrb	r3, [r1, r3]
 8005a12:	fa22 f303 	lsr.w	r3, r2, r3
 8005a16:	4a09      	ldr	r2, [pc, #36]	; (8005a3c <HAL_RCC_ClockConfig+0x1c4>)
 8005a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a1a:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fd fb6e 	bl	8003100 <HAL_InitTick>

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	40023c00 	.word	0x40023c00
 8005a34:	40023800 	.word	0x40023800
 8005a38:	0800f230 	.word	0x0800f230
 8005a3c:	20000000 	.word	0x20000000
 8005a40:	20000010 	.word	0x20000010

08005a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a48:	b090      	sub	sp, #64	; 0x40
 8005a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a50:	2300      	movs	r3, #0
 8005a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a54:	2300      	movs	r3, #0
 8005a56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a5c:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 030c 	and.w	r3, r3, #12
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d00d      	beq.n	8005a84 <HAL_RCC_GetSysClockFreq+0x40>
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	f200 80a1 	bhi.w	8005bb0 <HAL_RCC_GetSysClockFreq+0x16c>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <HAL_RCC_GetSysClockFreq+0x34>
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d003      	beq.n	8005a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8005a76:	e09b      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a78:	4b53      	ldr	r3, [pc, #332]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005a7c:	e09b      	b.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a7e:	4b53      	ldr	r3, [pc, #332]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8005a80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a82:	e098      	b.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a84:	4b4f      	ldr	r3, [pc, #316]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a8e:	4b4d      	ldr	r3, [pc, #308]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d028      	beq.n	8005aec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a9a:	4b4a      	ldr	r3, [pc, #296]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	099b      	lsrs	r3, r3, #6
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	623b      	str	r3, [r7, #32]
 8005aa4:	627a      	str	r2, [r7, #36]	; 0x24
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005aac:	2100      	movs	r1, #0
 8005aae:	4b47      	ldr	r3, [pc, #284]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8005ab0:	fb03 f201 	mul.w	r2, r3, r1
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	fb00 f303 	mul.w	r3, r0, r3
 8005aba:	4413      	add	r3, r2
 8005abc:	4a43      	ldr	r2, [pc, #268]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8005abe:	fba0 1202 	umull	r1, r2, r0, r2
 8005ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ac4:	460a      	mov	r2, r1
 8005ac6:	62ba      	str	r2, [r7, #40]	; 0x28
 8005ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aca:	4413      	add	r3, r2
 8005acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	61bb      	str	r3, [r7, #24]
 8005ad4:	61fa      	str	r2, [r7, #28]
 8005ad6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ada:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005ade:	f7fb f8bb 	bl	8000c58 <__aeabi_uldivmod>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aea:	e053      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aec:	4b35      	ldr	r3, [pc, #212]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	099b      	lsrs	r3, r3, #6
 8005af2:	2200      	movs	r2, #0
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	617a      	str	r2, [r7, #20]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005afe:	f04f 0b00 	mov.w	fp, #0
 8005b02:	4652      	mov	r2, sl
 8005b04:	465b      	mov	r3, fp
 8005b06:	f04f 0000 	mov.w	r0, #0
 8005b0a:	f04f 0100 	mov.w	r1, #0
 8005b0e:	0159      	lsls	r1, r3, #5
 8005b10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b14:	0150      	lsls	r0, r2, #5
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	ebb2 080a 	subs.w	r8, r2, sl
 8005b1e:	eb63 090b 	sbc.w	r9, r3, fp
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005b2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005b32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005b36:	ebb2 0408 	subs.w	r4, r2, r8
 8005b3a:	eb63 0509 	sbc.w	r5, r3, r9
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	00eb      	lsls	r3, r5, #3
 8005b48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b4c:	00e2      	lsls	r2, r4, #3
 8005b4e:	4614      	mov	r4, r2
 8005b50:	461d      	mov	r5, r3
 8005b52:	eb14 030a 	adds.w	r3, r4, sl
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	eb45 030b 	adc.w	r3, r5, fp
 8005b5c:	607b      	str	r3, [r7, #4]
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	028b      	lsls	r3, r1, #10
 8005b6e:	4621      	mov	r1, r4
 8005b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b74:	4621      	mov	r1, r4
 8005b76:	028a      	lsls	r2, r1, #10
 8005b78:	4610      	mov	r0, r2
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7e:	2200      	movs	r2, #0
 8005b80:	60bb      	str	r3, [r7, #8]
 8005b82:	60fa      	str	r2, [r7, #12]
 8005b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b88:	f7fb f866 	bl	8000c58 <__aeabi_uldivmod>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4613      	mov	r3, r2
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b94:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	0c1b      	lsrs	r3, r3, #16
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005bae:	e002      	b.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bb0:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005bb2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3740      	adds	r7, #64	; 0x40
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	00f42400 	.word	0x00f42400
 8005bcc:	017d7840 	.word	0x017d7840

08005bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bd4:	4b03      	ldr	r3, [pc, #12]	; (8005be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	20000000 	.word	0x20000000

08005be8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e022      	b.n	8005c40 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d105      	bne.n	8005c12 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7fb fb2b 	bl	8001268 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2203      	movs	r2, #3
 8005c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f814 	bl	8005c48 <HAL_SD_InitCard>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e00a      	b.n	8005c40 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005c48:	b5b0      	push	{r4, r5, r7, lr}
 8005c4a:	b08e      	sub	sp, #56	; 0x38
 8005c4c:	af04      	add	r7, sp, #16
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005c50:	2300      	movs	r3, #0
 8005c52:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005c64:	2376      	movs	r3, #118	; 0x76
 8005c66:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681d      	ldr	r5, [r3, #0]
 8005c6c:	466c      	mov	r4, sp
 8005c6e:	f107 0314 	add.w	r3, r7, #20
 8005c72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c7a:	f107 0308 	add.w	r3, r7, #8
 8005c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c80:	4628      	mov	r0, r5
 8005c82:	f001 f9f9 	bl	8007078 <SDIO_Init>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e04f      	b.n	8005d38 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005c98:	4b29      	ldr	r3, [pc, #164]	; (8005d40 <HAL_SD_InitCard+0xf8>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 fa31 	bl	800710a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005ca8:	4b25      	ldr	r3, [pc, #148]	; (8005d40 <HAL_SD_InitCard+0xf8>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005cae:	2002      	movs	r0, #2
 8005cb0:	f7fd fa76 	bl	80031a0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 ff13 	bl	8006ae0 <SD_PowerON>
 8005cba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e02e      	b.n	8005d38 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fe32 	bl	8006944 <SD_InitCard>
 8005ce0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00b      	beq.n	8005d00 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e01b      	b.n	8005d38 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 fa90 	bl	800722e <SDMMC_CmdBlockLength>
 8005d0e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00f      	beq.n	8005d36 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a0a      	ldr	r2, [pc, #40]	; (8005d44 <HAL_SD_InitCard+0xfc>)
 8005d1c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3728      	adds	r7, #40	; 0x28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8005d40:	422580a0 	.word	0x422580a0
 8005d44:	004005ff 	.word	0x004005ff

08005d48 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08c      	sub	sp, #48	; 0x30
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d107      	bne.n	8005d70 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e0c0      	b.n	8005ef2 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	f040 80b9 	bne.w	8005ef0 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	441a      	add	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d907      	bls.n	8005da2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e0a7      	b.n	8005ef2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2203      	movs	r2, #3
 8005da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2200      	movs	r2, #0
 8005db0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8005dc0:	f043 0302 	orr.w	r3, r3, #2
 8005dc4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	4a4c      	ldr	r2, [pc, #304]	; (8005efc <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8005dcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	4a4b      	ldr	r2, [pc, #300]	; (8005f00 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005dd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	2200      	movs	r2, #0
 8005ddc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	2200      	movs	r2, #0
 8005de4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3380      	adds	r3, #128	; 0x80
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	025b      	lsls	r3, r3, #9
 8005e14:	089b      	lsrs	r3, r3, #2
 8005e16:	f7fd fba7 	bl	8003568 <HAL_DMA_Start_IT>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d017      	beq.n	8005e50 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005e2e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a33      	ldr	r2, [pc, #204]	; (8005f04 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005e36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e050      	b.n	8005ef2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005e50:	4b2d      	ldr	r3, [pc, #180]	; (8005f08 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005e52:	2201      	movs	r2, #1
 8005e54:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d002      	beq.n	8005e64 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	025b      	lsls	r3, r3, #9
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e64:	f04f 33ff 	mov.w	r3, #4294967295
 8005e68:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	025b      	lsls	r3, r3, #9
 8005e6e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005e70:	2390      	movs	r3, #144	; 0x90
 8005e72:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005e74:	2302      	movs	r3, #2
 8005e76:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f107 0210 	add.w	r2, r7, #16
 8005e88:	4611      	mov	r1, r2
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f001 f9a3 	bl	80071d6 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d90a      	bls.n	8005eac <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2282      	movs	r2, #130	; 0x82
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f001 fa07 	bl	80072b6 <SDMMC_CmdReadMultiBlock>
 8005ea8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005eaa:	e009      	b.n	8005ec0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2281      	movs	r2, #129	; 0x81
 8005eb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f001 f9da 	bl	8007272 <SDMMC_CmdReadSingleBlock>
 8005ebe:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d012      	beq.n	8005eec <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a0e      	ldr	r2, [pc, #56]	; (8005f04 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e002      	b.n	8005ef2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	e000      	b.n	8005ef2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8005ef0:	2302      	movs	r3, #2
  }
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3730      	adds	r7, #48	; 0x30
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	08006755 	.word	0x08006755
 8005f00:	080067c5 	.word	0x080067c5
 8005f04:	004005ff 	.word	0x004005ff
 8005f08:	4225858c 	.word	0x4225858c

08005f0c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f18:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d008      	beq.n	8005f3a <HAL_SD_IRQHandler+0x2e>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f003 0308 	and.w	r3, r3, #8
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fffa 	bl	8006f2c <SD_Read_IT>
 8005f38:	e165      	b.n	8006206 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 808f 	beq.w	8006068 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f52:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	6812      	ldr	r2, [r2, #0]
 8005f5e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8005f62:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005f66:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0201 	bic.w	r2, r2, #1
 8005f76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d039      	beq.n	8005ff6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d104      	bne.n	8005f96 <HAL_SD_IRQHandler+0x8a>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d011      	beq.n	8005fba <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 f9ae 	bl	80072fc <SDMMC_CmdStopTransfer>
 8005fa0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d008      	beq.n	8005fba <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f92f 	bl	8006218 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f240 523a 	movw	r2, #1338	; 0x53a
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d104      	bne.n	8005fe6 <HAL_SD_IRQHandler+0xda>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7fc fe8e 	bl	8002d08 <HAL_SD_RxCpltCallback>
 8005fec:	e10b      	b.n	8006206 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fc fe7a 	bl	8002ce8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005ff4:	e107      	b.n	8006206 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8102 	beq.w	8006206 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b00      	cmp	r3, #0
 800600a:	d011      	beq.n	8006030 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4618      	mov	r0, r3
 8006012:	f001 f973 	bl	80072fc <SDMMC_CmdStopTransfer>
 8006016:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d008      	beq.n	8006030 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f8f4 	bl	8006218 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	f040 80e5 	bne.w	8006206 <HAL_SD_IRQHandler+0x2fa>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 80df 	bne.w	8006206 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0208 	bic.w	r2, r2, #8
 8006056:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7fc fe41 	bl	8002ce8 <HAL_SD_TxCpltCallback>
}
 8006066:	e0ce      	b.n	8006206 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d008      	beq.n	8006088 <HAL_SD_IRQHandler+0x17c>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 ffa4 	bl	8006fce <SD_Write_IT>
 8006086:	e0be      	b.n	8006206 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800608e:	f240 233a 	movw	r3, #570	; 0x23a
 8006092:	4013      	ands	r3, r2
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 80b6 	beq.w	8006206 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	f043 0202 	orr.w	r2, r3, #2
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ba:	f003 0308 	and.w	r3, r3, #8
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d005      	beq.n	80060ce <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c6:	f043 0208 	orr.w	r2, r3, #8
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d4:	f003 0320 	and.w	r3, r3, #32
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	f043 0220 	orr.w	r2, r3, #32
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ee:	f003 0310 	and.w	r3, r3, #16
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d005      	beq.n	8006102 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	f043 0210 	orr.w	r2, r3, #16
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	f043 0208 	orr.w	r2, r3, #8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f240 723a 	movw	r2, #1850	; 0x73a
 8006124:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006134:	f023 0302 	bic.w	r3, r3, #2
 8006138:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4618      	mov	r0, r3
 8006140:	f001 f8dc 	bl	80072fc <SDMMC_CmdStopTransfer>
 8006144:	4602      	mov	r2, r0
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f855 	bl	8006218 <HAL_SD_ErrorCallback>
}
 800616e:	e04a      	b.n	8006206 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006176:	2b00      	cmp	r3, #0
 8006178:	d045      	beq.n	8006206 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f003 0310 	and.w	r3, r3, #16
 8006180:	2b00      	cmp	r3, #0
 8006182:	d104      	bne.n	800618e <HAL_SD_IRQHandler+0x282>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d011      	beq.n	80061b2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006192:	4a1f      	ldr	r2, [pc, #124]	; (8006210 <HAL_SD_IRQHandler+0x304>)
 8006194:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619a:	4618      	mov	r0, r3
 800619c:	f7fd fa3c 	bl	8003618 <HAL_DMA_Abort_IT>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d02f      	beq.n	8006206 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fb5c 	bl	8006868 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80061b0:	e029      	b.n	8006206 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d104      	bne.n	80061c6 <HAL_SD_IRQHandler+0x2ba>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d011      	beq.n	80061ea <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	4a12      	ldr	r2, [pc, #72]	; (8006214 <HAL_SD_IRQHandler+0x308>)
 80061cc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fd fa20 	bl	8003618 <HAL_DMA_Abort_IT>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d013      	beq.n	8006206 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fb77 	bl	80068d6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80061e8:	e00d      	b.n	8006206 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f814 	bl	800622c <HAL_SD_AbortCallback>
}
 8006204:	e7ff      	b.n	8006206 <HAL_SD_IRQHandler+0x2fa>
 8006206:	bf00      	nop
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	08006869 	.word	0x08006869
 8006214:	080068d7 	.word	0x080068d7

08006218 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800624e:	0f9b      	lsrs	r3, r3, #30
 8006250:	b2da      	uxtb	r2, r3
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800625a:	0e9b      	lsrs	r3, r3, #26
 800625c:	b2db      	uxtb	r3, r3
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	b2da      	uxtb	r2, r3
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800626c:	0e1b      	lsrs	r3, r3, #24
 800626e:	b2db      	uxtb	r3, r3
 8006270:	f003 0303 	and.w	r3, r3, #3
 8006274:	b2da      	uxtb	r2, r3
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800627e:	0c1b      	lsrs	r3, r3, #16
 8006280:	b2da      	uxtb	r2, r3
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800628a:	0a1b      	lsrs	r3, r3, #8
 800628c:	b2da      	uxtb	r2, r3
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006296:	b2da      	uxtb	r2, r3
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062a0:	0d1b      	lsrs	r3, r3, #20
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ac:	0c1b      	lsrs	r3, r3, #16
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	f003 030f 	and.w	r3, r3, #15
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062be:	0bdb      	lsrs	r3, r3, #15
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d0:	0b9b      	lsrs	r3, r3, #14
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062e2:	0b5b      	lsrs	r3, r3, #13
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062f4:	0b1b      	lsrs	r3, r3, #12
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2200      	movs	r2, #0
 8006306:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630c:	2b00      	cmp	r3, #0
 800630e:	d163      	bne.n	80063d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006314:	009a      	lsls	r2, r3, #2
 8006316:	f640 73fc 	movw	r3, #4092	; 0xffc
 800631a:	4013      	ands	r3, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006320:	0f92      	lsrs	r2, r2, #30
 8006322:	431a      	orrs	r2, r3
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800632c:	0edb      	lsrs	r3, r3, #27
 800632e:	b2db      	uxtb	r3, r3
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	b2da      	uxtb	r2, r3
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800633e:	0e1b      	lsrs	r3, r3, #24
 8006340:	b2db      	uxtb	r3, r3
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	b2da      	uxtb	r2, r3
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006350:	0d5b      	lsrs	r3, r3, #21
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f003 0307 	and.w	r3, r3, #7
 8006358:	b2da      	uxtb	r2, r3
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006362:	0c9b      	lsrs	r3, r3, #18
 8006364:	b2db      	uxtb	r3, r3
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	b2da      	uxtb	r2, r3
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006374:	0bdb      	lsrs	r3, r3, #15
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	b2da      	uxtb	r2, r3
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	7e1b      	ldrb	r3, [r3, #24]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	3302      	adds	r3, #2
 8006398:	2201      	movs	r2, #1
 800639a:	fa02 f303 	lsl.w	r3, r2, r3
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80063a2:	fb03 f202 	mul.w	r2, r3, r2
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	7a1b      	ldrb	r3, [r3, #8]
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	2201      	movs	r2, #1
 80063b6:	409a      	lsls	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80063c4:	0a52      	lsrs	r2, r2, #9
 80063c6:	fb03 f202 	mul.w	r2, r3, r2
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063d4:	661a      	str	r2, [r3, #96]	; 0x60
 80063d6:	e031      	b.n	800643c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d11d      	bne.n	800641c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063e4:	041b      	lsls	r3, r3, #16
 80063e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ee:	0c1b      	lsrs	r3, r3, #16
 80063f0:	431a      	orrs	r2, r3
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	3301      	adds	r3, #1
 80063fc:	029a      	lsls	r2, r3, #10
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006410:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	661a      	str	r2, [r3, #96]	; 0x60
 800641a:	e00f      	b.n	800643c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a58      	ldr	r2, [pc, #352]	; (8006584 <HAL_SD_GetCardCSD+0x344>)
 8006422:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006428:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e09d      	b.n	8006578 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006440:	0b9b      	lsrs	r3, r3, #14
 8006442:	b2db      	uxtb	r3, r3
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	b2da      	uxtb	r2, r3
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006452:	09db      	lsrs	r3, r3, #7
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800645a:	b2da      	uxtb	r2, r3
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006464:	b2db      	uxtb	r3, r3
 8006466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800646a:	b2da      	uxtb	r2, r3
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006474:	0fdb      	lsrs	r3, r3, #31
 8006476:	b2da      	uxtb	r2, r3
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006480:	0f5b      	lsrs	r3, r3, #29
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f003 0303 	and.w	r3, r3, #3
 8006488:	b2da      	uxtb	r2, r3
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006492:	0e9b      	lsrs	r3, r3, #26
 8006494:	b2db      	uxtb	r3, r3
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	b2da      	uxtb	r2, r3
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a4:	0d9b      	lsrs	r3, r3, #22
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	f003 030f 	and.w	r3, r3, #15
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b6:	0d5b      	lsrs	r3, r3, #21
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d2:	0c1b      	lsrs	r3, r3, #16
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e6:	0bdb      	lsrs	r3, r3, #15
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fa:	0b9b      	lsrs	r3, r3, #14
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	b2da      	uxtb	r2, r3
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650e:	0b5b      	lsrs	r3, r3, #13
 8006510:	b2db      	uxtb	r3, r3
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	b2da      	uxtb	r2, r3
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006522:	0b1b      	lsrs	r3, r3, #12
 8006524:	b2db      	uxtb	r3, r3
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	b2da      	uxtb	r2, r3
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006536:	0a9b      	lsrs	r3, r3, #10
 8006538:	b2db      	uxtb	r3, r3
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	b2da      	uxtb	r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654a:	0a1b      	lsrs	r3, r3, #8
 800654c:	b2db      	uxtb	r3, r3
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	b2da      	uxtb	r2, r3
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655e:	085b      	lsrs	r3, r3, #1
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006566:	b2da      	uxtb	r2, r3
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	004005ff 	.word	0x004005ff

08006588 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80065e0:	b5b0      	push	{r4, r5, r7, lr}
 80065e2:	b08e      	sub	sp, #56	; 0x38
 80065e4:	af04      	add	r7, sp, #16
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2203      	movs	r2, #3
 80065f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d02e      	beq.n	800665e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006606:	d106      	bne.n	8006616 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	639a      	str	r2, [r3, #56]	; 0x38
 8006614:	e029      	b.n	800666a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800661c:	d10a      	bne.n	8006634 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fb14 	bl	8006c4c <SD_WideBus_Enable>
 8006624:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	431a      	orrs	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	639a      	str	r2, [r3, #56]	; 0x38
 8006632:	e01a      	b.n	800666a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fb51 	bl	8006ce2 <SD_WideBus_Disable>
 8006640:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	431a      	orrs	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	639a      	str	r2, [r3, #56]	; 0x38
 800664e:	e00c      	b.n	800666a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006654:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	639a      	str	r2, [r3, #56]	; 0x38
 800665c:	e005      	b.n	800666a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a26      	ldr	r2, [pc, #152]	; (8006710 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006678:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006688:	e01f      	b.n	80066ca <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681d      	ldr	r5, [r3, #0]
 80066b0:	466c      	mov	r4, sp
 80066b2:	f107 0314 	add.w	r3, r7, #20
 80066b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80066be:	f107 0308 	add.w	r3, r7, #8
 80066c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066c4:	4628      	mov	r0, r5
 80066c6:	f000 fcd7 	bl	8007078 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fdab 	bl	800722e <SDMMC_CmdBlockLength>
 80066d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00c      	beq.n	80066fa <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a0a      	ldr	r2, [pc, #40]	; (8006710 <HAL_SD_ConfigWideBusOperation+0x130>)
 80066e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006706:	4618      	mov	r0, r3
 8006708:	3728      	adds	r7, #40	; 0x28
 800670a:	46bd      	mov	sp, r7
 800670c:	bdb0      	pop	{r4, r5, r7, pc}
 800670e:	bf00      	nop
 8006710:	004005ff 	.word	0x004005ff

08006714 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006720:	f107 030c 	add.w	r3, r7, #12
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fa68 	bl	8006bfc <SD_SendStatus>
 800672c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	0a5b      	lsrs	r3, r3, #9
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800674a:	693b      	ldr	r3, [r7, #16]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3718      	adds	r7, #24
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	2b82      	cmp	r3, #130	; 0x82
 8006768:	d111      	bne.n	800678e <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fdc4 	bl	80072fc <SDMMC_CmdStopTransfer>
 8006774:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d008      	beq.n	800678e <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	431a      	orrs	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7ff fd45 	bl	8006218 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0208 	bic.w	r2, r2, #8
 800679c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80067a6:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f7fc faa6 	bl	8002d08 <HAL_SD_RxCpltCallback>
#endif
}
 80067bc:	bf00      	nop
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7fd f8cc 	bl	8003970 <HAL_DMA_GetError>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d03e      	beq.n	800685c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ec:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d002      	beq.n	80067fa <SD_DMAError+0x36>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d12d      	bne.n	8006856 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a19      	ldr	r2, [pc, #100]	; (8006864 <SD_DMAError+0xa0>)
 8006800:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006810:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006816:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800681e:	6978      	ldr	r0, [r7, #20]
 8006820:	f7ff ff78 	bl	8006714 <HAL_SD_GetCardState>
 8006824:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b06      	cmp	r3, #6
 800682a:	d002      	beq.n	8006832 <SD_DMAError+0x6e>
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2b05      	cmp	r3, #5
 8006830:	d10a      	bne.n	8006848 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4618      	mov	r0, r3
 8006838:	f000 fd60 	bl	80072fc <SDMMC_CmdStopTransfer>
 800683c:	4602      	mov	r2, r0
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	431a      	orrs	r2, r3
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2200      	movs	r2, #0
 8006854:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006856:	6978      	ldr	r0, [r7, #20]
 8006858:	f7ff fcde 	bl	8006218 <HAL_SD_ErrorCallback>
#endif
  }
}
 800685c:	bf00      	nop
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	004005ff 	.word	0x004005ff

08006868 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f240 523a 	movw	r2, #1338	; 0x53a
 800687e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f7ff ff47 	bl	8006714 <HAL_SD_GetCardState>
 8006886:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b06      	cmp	r3, #6
 800689a:	d002      	beq.n	80068a2 <SD_DMATxAbort+0x3a>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b05      	cmp	r3, #5
 80068a0:	d10a      	bne.n	80068b8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fd28 	bl	80072fc <SDMMC_CmdStopTransfer>
 80068ac:	4602      	mov	r2, r0
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b2:	431a      	orrs	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d103      	bne.n	80068c8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7ff fcb3 	bl	800622c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80068c6:	e002      	b.n	80068ce <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f7ff fca5 	bl	8006218 <HAL_SD_ErrorCallback>
}
 80068ce:	bf00      	nop
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f240 523a 	movw	r2, #1338	; 0x53a
 80068ec:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f7ff ff10 	bl	8006714 <HAL_SD_GetCardState>
 80068f4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b06      	cmp	r3, #6
 8006908:	d002      	beq.n	8006910 <SD_DMARxAbort+0x3a>
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b05      	cmp	r3, #5
 800690e:	d10a      	bne.n	8006926 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fcf1 	bl	80072fc <SDMMC_CmdStopTransfer>
 800691a:	4602      	mov	r2, r0
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006920:	431a      	orrs	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	2b00      	cmp	r3, #0
 800692c:	d103      	bne.n	8006936 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f7ff fc7c 	bl	800622c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006934:	e002      	b.n	800693c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f7ff fc6e 	bl	8006218 <HAL_SD_ErrorCallback>
}
 800693c:	bf00      	nop
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006944:	b5b0      	push	{r4, r5, r7, lr}
 8006946:	b094      	sub	sp, #80	; 0x50
 8006948:	af04      	add	r7, sp, #16
 800694a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800694c:	2301      	movs	r3, #1
 800694e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fbe6 	bl	8007126 <SDIO_GetPowerState>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d102      	bne.n	8006966 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006960:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006964:	e0b8      	b.n	8006ad8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696a:	2b03      	cmp	r3, #3
 800696c:	d02f      	beq.n	80069ce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fdcc 	bl	8007510 <SDMMC_CmdSendCID>
 8006978:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800697a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <SD_InitCard+0x40>
    {
      return errorstate;
 8006980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006982:	e0a9      	b.n	8006ad8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2100      	movs	r1, #0
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fc10 	bl	80071b0 <SDIO_GetResponse>
 8006990:	4602      	mov	r2, r0
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2104      	movs	r1, #4
 800699c:	4618      	mov	r0, r3
 800699e:	f000 fc07 	bl	80071b0 <SDIO_GetResponse>
 80069a2:	4602      	mov	r2, r0
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2108      	movs	r1, #8
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fbfe 	bl	80071b0 <SDIO_GetResponse>
 80069b4:	4602      	mov	r2, r0
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	210c      	movs	r1, #12
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fbf5 	bl	80071b0 <SDIO_GetResponse>
 80069c6:	4602      	mov	r2, r0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d00d      	beq.n	80069f2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f107 020e 	add.w	r2, r7, #14
 80069de:	4611      	mov	r1, r2
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 fdd2 	bl	800758a <SDMMC_CmdSetRelAdd>
 80069e6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80069e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <SD_InitCard+0xae>
    {
      return errorstate;
 80069ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f0:	e072      	b.n	8006ad8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d036      	beq.n	8006a68 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80069fa:	89fb      	ldrh	r3, [r7, #14]
 80069fc:	461a      	mov	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0a:	041b      	lsls	r3, r3, #16
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	f000 fd9c 	bl	800754c <SDMMC_CmdSendCSD>
 8006a14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a1e:	e05b      	b.n	8006ad8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2100      	movs	r1, #0
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 fbc2 	bl	80071b0 <SDIO_GetResponse>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2104      	movs	r1, #4
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fbb9 	bl	80071b0 <SDIO_GetResponse>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2108      	movs	r1, #8
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fbb0 	bl	80071b0 <SDIO_GetResponse>
 8006a50:	4602      	mov	r2, r0
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	210c      	movs	r1, #12
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 fba7 	bl	80071b0 <SDIO_GetResponse>
 8006a62:	4602      	mov	r2, r0
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2104      	movs	r1, #4
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fb9e 	bl	80071b0 <SDIO_GetResponse>
 8006a74:	4603      	mov	r3, r0
 8006a76:	0d1a      	lsrs	r2, r3, #20
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006a7c:	f107 0310 	add.w	r3, r7, #16
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7ff fbdc 	bl	8006240 <HAL_SD_GetCardCSD>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a92:	e021      	b.n	8006ad8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6819      	ldr	r1, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9c:	041b      	lsls	r3, r3, #16
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	461c      	mov	r4, r3
 8006aa2:	4615      	mov	r5, r2
 8006aa4:	4622      	mov	r2, r4
 8006aa6:	462b      	mov	r3, r5
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	f000 fc49 	bl	8007340 <SDMMC_CmdSelDesel>
 8006aae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <SD_InitCard+0x176>
  {
    return errorstate;
 8006ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab8:	e00e      	b.n	8006ad8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681d      	ldr	r5, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	466c      	mov	r4, sp
 8006ac2:	f103 0210 	add.w	r2, r3, #16
 8006ac6:	ca07      	ldmia	r2, {r0, r1, r2}
 8006ac8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006acc:	3304      	adds	r3, #4
 8006ace:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f000 fad1 	bl	8007078 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3740      	adds	r7, #64	; 0x40
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bdb0      	pop	{r4, r5, r7, pc}

08006ae0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	2300      	movs	r3, #0
 8006af2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 fc44 	bl	8007386 <SDMMC_CmdGoIdleState>
 8006afe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	e072      	b.n	8006bf0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fc57 	bl	80073c2 <SDMMC_CmdOperCond>
 8006b14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00d      	beq.n	8006b38 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fc2d 	bl	8007386 <SDMMC_CmdGoIdleState>
 8006b2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d004      	beq.n	8006b3e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	e05b      	b.n	8006bf0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d137      	bne.n	8006bb6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fc57 	bl	8007400 <SDMMC_CmdAppCommand>
 8006b52:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d02d      	beq.n	8006bb6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b5e:	e047      	b.n	8006bf0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2100      	movs	r1, #0
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fc4a 	bl	8007400 <SDMMC_CmdAppCommand>
 8006b6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <SD_PowerON+0x98>
    {
      return errorstate;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	e03b      	b.n	8006bf0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	491e      	ldr	r1, [pc, #120]	; (8006bf8 <SD_PowerON+0x118>)
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fc60 	bl	8007444 <SDMMC_CmdAppOperCommand>
 8006b84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d002      	beq.n	8006b92 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b90:	e02e      	b.n	8006bf0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2100      	movs	r1, #0
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fb09 	bl	80071b0 <SDIO_GetResponse>
 8006b9e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	0fdb      	lsrs	r3, r3, #31
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d101      	bne.n	8006bac <SD_PowerON+0xcc>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e000      	b.n	8006bae <SD_PowerON+0xce>
 8006bac:	2300      	movs	r3, #0
 8006bae:	613b      	str	r3, [r7, #16]

    count++;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d802      	bhi.n	8006bc6 <SD_PowerON+0xe6>
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0cc      	beq.n	8006b60 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d902      	bls.n	8006bd6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006bd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bd4:	e00c      	b.n	8006bf0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	645a      	str	r2, [r3, #68]	; 0x44
 8006be6:	e002      	b.n	8006bee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	c1100000 	.word	0xc1100000

08006bfc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d102      	bne.n	8006c12 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006c0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c10:	e018      	b.n	8006c44 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c1a:	041b      	lsls	r3, r3, #16
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	f000 fcd4 	bl	80075cc <SDMMC_CmdSendStatus>
 8006c24:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	e009      	b.n	8006c44 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2100      	movs	r1, #0
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 faba 	bl	80071b0 <SDIO_GetResponse>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2100      	movs	r1, #0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 faa4 	bl	80071b0 <SDIO_GetResponse>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c72:	d102      	bne.n	8006c7a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c78:	e02f      	b.n	8006cda <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006c7a:	f107 030c 	add.w	r3, r7, #12
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f879 	bl	8006d78 <SD_FindSCR>
 8006c86:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	e023      	b.n	8006cda <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d01c      	beq.n	8006cd6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca4:	041b      	lsls	r3, r3, #16
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4610      	mov	r0, r2
 8006caa:	f000 fba9 	bl	8007400 <SDMMC_CmdAppCommand>
 8006cae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	e00f      	b.n	8006cda <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2102      	movs	r1, #2
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fbe2 	bl	800748a <SDMMC_CmdBusWidth>
 8006cc6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	e003      	b.n	8006cda <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e001      	b.n	8006cda <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006cd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b086      	sub	sp, #24
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fa59 	bl	80071b0 <SDIO_GetResponse>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d08:	d102      	bne.n	8006d10 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006d0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d0e:	e02f      	b.n	8006d70 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006d10:	f107 030c 	add.w	r3, r7, #12
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f82e 	bl	8006d78 <SD_FindSCR>
 8006d1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	e023      	b.n	8006d70 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d01c      	beq.n	8006d6c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3a:	041b      	lsls	r3, r3, #16
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4610      	mov	r0, r2
 8006d40:	f000 fb5e 	bl	8007400 <SDMMC_CmdAppCommand>
 8006d44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	e00f      	b.n	8006d70 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2100      	movs	r1, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fb97 	bl	800748a <SDMMC_CmdBusWidth>
 8006d5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	e003      	b.n	8006d70 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e001      	b.n	8006d70 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3718      	adds	r7, #24
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006d78:	b590      	push	{r4, r7, lr}
 8006d7a:	b08f      	sub	sp, #60	; 0x3c
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006d82:	f7fc fa01 	bl	8003188 <HAL_GetTick>
 8006d86:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60bb      	str	r3, [r7, #8]
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2108      	movs	r1, #8
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 fa45 	bl	800722e <SDMMC_CmdBlockLength>
 8006da4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dae:	e0b9      	b.n	8006f24 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db8:	041b      	lsls	r3, r3, #16
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	f000 fb1f 	bl	8007400 <SDMMC_CmdAppCommand>
 8006dc2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <SD_FindSCR+0x56>
  {
    return errorstate;
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	e0aa      	b.n	8006f24 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006dce:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006dd4:	2308      	movs	r3, #8
 8006dd6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006dd8:	2330      	movs	r3, #48	; 0x30
 8006dda:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006ddc:	2302      	movs	r3, #2
 8006dde:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006de4:	2301      	movs	r3, #1
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f107 0210 	add.w	r2, r7, #16
 8006df0:	4611      	mov	r1, r2
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 f9ef 	bl	80071d6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 fb66 	bl	80074ce <SDMMC_CmdSendSCR>
 8006e02:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d02a      	beq.n	8006e60 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	e08a      	b.n	8006f24 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00f      	beq.n	8006e3c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6819      	ldr	r1, [r3, #0]
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	f107 0208 	add.w	r2, r7, #8
 8006e28:	18d4      	adds	r4, r2, r3
 8006e2a:	4608      	mov	r0, r1
 8006e2c:	f000 f94f 	bl	80070ce <SDIO_ReadFIFO>
 8006e30:	4603      	mov	r3, r0
 8006e32:	6023      	str	r3, [r4, #0]
      index++;
 8006e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e36:	3301      	adds	r3, #1
 8006e38:	637b      	str	r3, [r7, #52]	; 0x34
 8006e3a:	e006      	b.n	8006e4a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d012      	beq.n	8006e70 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8006e4a:	f7fc f99d 	bl	8003188 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e58:	d102      	bne.n	8006e60 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006e5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e5e:	e061      	b.n	8006f24 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e66:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0cf      	beq.n	8006e0e <SD_FindSCR+0x96>
 8006e6e:	e000      	b.n	8006e72 <SD_FindSCR+0xfa>
      break;
 8006e70:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e78:	f003 0308 	and.w	r3, r3, #8
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d106      	bne.n	8006e8e <SD_FindSCR+0x116>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d005      	beq.n	8006e9a <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2208      	movs	r2, #8
 8006e94:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006e96:	2308      	movs	r3, #8
 8006e98:	e044      	b.n	8006f24 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d005      	beq.n	8006eb4 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2202      	movs	r2, #2
 8006eae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	e037      	b.n	8006f24 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d005      	beq.n	8006ece <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006eca:	2320      	movs	r3, #32
 8006ecc:	e02a      	b.n	8006f24 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f240 523a 	movw	r2, #1338	; 0x53a
 8006ed6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	061a      	lsls	r2, r3, #24
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	021b      	lsls	r3, r3, #8
 8006ee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ee4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	0a1b      	lsrs	r3, r3, #8
 8006eea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006eee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	0e1b      	lsrs	r3, r3, #24
 8006ef4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef8:	601a      	str	r2, [r3, #0]
    scr++;
 8006efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efc:	3304      	adds	r3, #4
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	061a      	lsls	r2, r3, #24
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	021b      	lsls	r3, r3, #8
 8006f08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f0c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	0a1b      	lsrs	r3, r3, #8
 8006f12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006f16:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	0e1b      	lsrs	r3, r3, #24
 8006f1c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f20:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	373c      	adds	r7, #60	; 0x3c
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd90      	pop	{r4, r7, pc}

08006f2c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f38:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d03f      	beq.n	8006fc6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006f46:	2300      	movs	r3, #0
 8006f48:	617b      	str	r3, [r7, #20]
 8006f4a:	e033      	b.n	8006fb4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 f8bc 	bl	80070ce <SDIO_ReadFIFO>
 8006f56:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3301      	adds	r3, #1
 8006f64:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	0a1b      	lsrs	r3, r3, #8
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	0c1b      	lsrs	r3, r3, #16
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	0e1b      	lsrs	r3, r3, #24
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b07      	cmp	r3, #7
 8006fb8:	d9c8      	bls.n	8006f4c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006fc6:	bf00      	nop
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b086      	sub	sp, #24
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d043      	beq.n	8007070 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006fe8:	2300      	movs	r3, #0
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	e037      	b.n	800705e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	021a      	lsls	r2, r3, #8
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	4313      	orrs	r3, r2
 800700a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3301      	adds	r3, #1
 8007010:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	3b01      	subs	r3, #1
 8007016:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	041a      	lsls	r2, r3, #16
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	4313      	orrs	r3, r2
 8007022:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3301      	adds	r3, #1
 8007028:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	3b01      	subs	r3, #1
 800702e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	061a      	lsls	r2, r3, #24
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	4313      	orrs	r3, r2
 800703a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	3301      	adds	r3, #1
 8007040:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	3b01      	subs	r3, #1
 8007046:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f107 0208 	add.w	r2, r7, #8
 8007050:	4611      	mov	r1, r2
 8007052:	4618      	mov	r0, r3
 8007054:	f000 f848 	bl	80070e8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	3301      	adds	r3, #1
 800705c:	617b      	str	r3, [r7, #20]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b07      	cmp	r3, #7
 8007062:	d9c4      	bls.n	8006fee <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007070:	bf00      	nop
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007078:	b084      	sub	sp, #16
 800707a:	b480      	push	{r7}
 800707c:	b085      	sub	sp, #20
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	f107 001c 	add.w	r0, r7, #28
 8007086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800708e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007090:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007092:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007096:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007098:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800709a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800709e:	431a      	orrs	r2, r3
             Init.ClockDiv
 80070a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80070a2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80070b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	431a      	orrs	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	b004      	add	sp, #16
 80070cc:	4770      	bx	lr

080070ce <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b083      	sub	sp, #12
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2203      	movs	r2, #3
 8007116:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0303 	and.w	r3, r3, #3
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007142:	b480      	push	{r7}
 8007144:	b085      	sub	sp, #20
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800714c:	2300      	movs	r3, #0
 800714e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007160:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007166:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800716c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	4313      	orrs	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800717c:	f023 030f 	bic.w	r3, r3, #15
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	431a      	orrs	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	b2db      	uxtb	r3, r3
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3314      	adds	r3, #20
 80071be:	461a      	mov	r2, r3
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	4413      	add	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
}  
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b085      	sub	sp, #20
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80071fc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007202:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007208:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007220:	2300      	movs	r3, #0

}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b088      	sub	sp, #32
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800723c:	2310      	movs	r3, #16
 800723e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007240:	2340      	movs	r3, #64	; 0x40
 8007242:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007244:	2300      	movs	r3, #0
 8007246:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800724c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800724e:	f107 0308 	add.w	r3, r7, #8
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7ff ff74 	bl	8007142 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800725a:	f241 3288 	movw	r2, #5000	; 0x1388
 800725e:	2110      	movs	r1, #16
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f9d5 	bl	8007610 <SDMMC_GetCmdResp1>
 8007266:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007268:	69fb      	ldr	r3, [r7, #28]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3720      	adds	r7, #32
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b088      	sub	sp, #32
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007280:	2311      	movs	r3, #17
 8007282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007284:	2340      	movs	r3, #64	; 0x40
 8007286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007288:	2300      	movs	r3, #0
 800728a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800728c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007290:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007292:	f107 0308 	add.w	r3, r7, #8
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff ff52 	bl	8007142 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800729e:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a2:	2111      	movs	r1, #17
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f9b3 	bl	8007610 <SDMMC_GetCmdResp1>
 80072aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072ac:	69fb      	ldr	r3, [r7, #28]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3720      	adds	r7, #32
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b088      	sub	sp, #32
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80072c4:	2312      	movs	r3, #18
 80072c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072c8:	2340      	movs	r3, #64	; 0x40
 80072ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072cc:	2300      	movs	r3, #0
 80072ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072d6:	f107 0308 	add.w	r3, r7, #8
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff ff30 	bl	8007142 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80072e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e6:	2112      	movs	r1, #18
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f991 	bl	8007610 <SDMMC_GetCmdResp1>
 80072ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072f0:	69fb      	ldr	r3, [r7, #28]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3720      	adds	r7, #32
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007308:	230c      	movs	r3, #12
 800730a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800730c:	2340      	movs	r3, #64	; 0x40
 800730e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007310:	2300      	movs	r3, #0
 8007312:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007318:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800731a:	f107 0308 	add.w	r3, r7, #8
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff ff0e 	bl	8007142 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007326:	4a05      	ldr	r2, [pc, #20]	; (800733c <SDMMC_CmdStopTransfer+0x40>)
 8007328:	210c      	movs	r1, #12
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f970 	bl	8007610 <SDMMC_GetCmdResp1>
 8007330:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007332:	69fb      	ldr	r3, [r7, #28]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3720      	adds	r7, #32
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	05f5e100 	.word	0x05f5e100

08007340 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	; 0x28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007350:	2307      	movs	r3, #7
 8007352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007354:	2340      	movs	r3, #64	; 0x40
 8007356:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007358:	2300      	movs	r3, #0
 800735a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800735c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007360:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007362:	f107 0310 	add.w	r3, r7, #16
 8007366:	4619      	mov	r1, r3
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f7ff feea 	bl	8007142 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800736e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007372:	2107      	movs	r1, #7
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 f94b 	bl	8007610 <SDMMC_GetCmdResp1>
 800737a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800737e:	4618      	mov	r0, r3
 8007380:	3728      	adds	r7, #40	; 0x28
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b088      	sub	sp, #32
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007392:	2300      	movs	r3, #0
 8007394:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007396:	2300      	movs	r3, #0
 8007398:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800739a:	2300      	movs	r3, #0
 800739c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800739e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073a4:	f107 0308 	add.w	r3, r7, #8
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7ff fec9 	bl	8007142 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fb65 	bl	8007a80 <SDMMC_GetCmdError>
 80073b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073b8:	69fb      	ldr	r3, [r7, #28]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3720      	adds	r7, #32
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b088      	sub	sp, #32
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80073ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80073ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80073d0:	2308      	movs	r3, #8
 80073d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073d4:	2340      	movs	r3, #64	; 0x40
 80073d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073d8:	2300      	movs	r3, #0
 80073da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073e2:	f107 0308 	add.w	r3, r7, #8
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff feaa 	bl	8007142 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 faf8 	bl	80079e4 <SDMMC_GetCmdResp7>
 80073f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073f6:	69fb      	ldr	r3, [r7, #28]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3720      	adds	r7, #32
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800740e:	2337      	movs	r3, #55	; 0x37
 8007410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007412:	2340      	movs	r3, #64	; 0x40
 8007414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007416:	2300      	movs	r3, #0
 8007418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800741a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800741e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007420:	f107 0308 	add.w	r3, r7, #8
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff fe8b 	bl	8007142 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800742c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007430:	2137      	movs	r1, #55	; 0x37
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f8ec 	bl	8007610 <SDMMC_GetCmdResp1>
 8007438:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800743a:	69fb      	ldr	r3, [r7, #28]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b088      	sub	sp, #32
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007454:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800745a:	2329      	movs	r3, #41	; 0x29
 800745c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800745e:	2340      	movs	r3, #64	; 0x40
 8007460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007462:	2300      	movs	r3, #0
 8007464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800746a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800746c:	f107 0308 	add.w	r3, r7, #8
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7ff fe65 	bl	8007142 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f9ff 	bl	800787c <SDMMC_GetCmdResp3>
 800747e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007480:	69fb      	ldr	r3, [r7, #28]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3720      	adds	r7, #32
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b088      	sub	sp, #32
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007498:	2306      	movs	r3, #6
 800749a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800749c:	2340      	movs	r3, #64	; 0x40
 800749e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074a0:	2300      	movs	r3, #0
 80074a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074aa:	f107 0308 	add.w	r3, r7, #8
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7ff fe46 	bl	8007142 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80074b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ba:	2106      	movs	r1, #6
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f8a7 	bl	8007610 <SDMMC_GetCmdResp1>
 80074c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074c4:	69fb      	ldr	r3, [r7, #28]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3720      	adds	r7, #32
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b088      	sub	sp, #32
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80074da:	2333      	movs	r3, #51	; 0x33
 80074dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074de:	2340      	movs	r3, #64	; 0x40
 80074e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074ec:	f107 0308 	add.w	r3, r7, #8
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff fe25 	bl	8007142 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80074f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074fc:	2133      	movs	r1, #51	; 0x33
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f886 	bl	8007610 <SDMMC_GetCmdResp1>
 8007504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007506:	69fb      	ldr	r3, [r7, #28]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3720      	adds	r7, #32
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800751c:	2302      	movs	r3, #2
 800751e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007520:	23c0      	movs	r3, #192	; 0xc0
 8007522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800752c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800752e:	f107 0308 	add.w	r3, r7, #8
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff fe04 	bl	8007142 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f956 	bl	80077ec <SDMMC_GetCmdResp2>
 8007540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007542:	69fb      	ldr	r3, [r7, #28]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3720      	adds	r7, #32
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b088      	sub	sp, #32
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800755a:	2309      	movs	r3, #9
 800755c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800755e:	23c0      	movs	r3, #192	; 0xc0
 8007560:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007562:	2300      	movs	r3, #0
 8007564:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800756a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800756c:	f107 0308 	add.w	r3, r7, #8
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff fde5 	bl	8007142 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f937 	bl	80077ec <SDMMC_GetCmdResp2>
 800757e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007580:	69fb      	ldr	r3, [r7, #28]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3720      	adds	r7, #32
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b088      	sub	sp, #32
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007598:	2303      	movs	r3, #3
 800759a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800759c:	2340      	movs	r3, #64	; 0x40
 800759e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075aa:	f107 0308 	add.w	r3, r7, #8
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff fdc6 	bl	8007142 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	2103      	movs	r1, #3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f99c 	bl	80078f8 <SDMMC_GetCmdResp6>
 80075c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075c2:	69fb      	ldr	r3, [r7, #28]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3720      	adds	r7, #32
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80075da:	230d      	movs	r3, #13
 80075dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075de:	2340      	movs	r3, #64	; 0x40
 80075e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075ec:	f107 0308 	add.w	r3, r7, #8
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff fda5 	bl	8007142 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80075f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075fc:	210d      	movs	r1, #13
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f806 	bl	8007610 <SDMMC_GetCmdResp1>
 8007604:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007606:	69fb      	ldr	r3, [r7, #28]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3720      	adds	r7, #32
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	460b      	mov	r3, r1
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800761e:	4b70      	ldr	r3, [pc, #448]	; (80077e0 <SDMMC_GetCmdResp1+0x1d0>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a70      	ldr	r2, [pc, #448]	; (80077e4 <SDMMC_GetCmdResp1+0x1d4>)
 8007624:	fba2 2303 	umull	r2, r3, r2, r3
 8007628:	0a5a      	lsrs	r2, r3, #9
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	fb02 f303 	mul.w	r3, r2, r3
 8007630:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	1e5a      	subs	r2, r3, #1
 8007636:	61fa      	str	r2, [r7, #28]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d102      	bne.n	8007642 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800763c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007640:	e0c9      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007646:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0ef      	beq.n	8007632 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1ea      	bne.n	8007632 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	2b00      	cmp	r3, #0
 8007666:	d004      	beq.n	8007672 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2204      	movs	r2, #4
 800766c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800766e:	2304      	movs	r3, #4
 8007670:	e0b1      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d004      	beq.n	8007688 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2201      	movs	r2, #1
 8007682:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007684:	2301      	movs	r3, #1
 8007686:	e0a6      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	22c5      	movs	r2, #197	; 0xc5
 800768c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff fd81 	bl	8007196 <SDIO_GetCommandResponse>
 8007694:	4603      	mov	r3, r0
 8007696:	461a      	mov	r2, r3
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	4293      	cmp	r3, r2
 800769c:	d001      	beq.n	80076a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800769e:	2301      	movs	r3, #1
 80076a0:	e099      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80076a2:	2100      	movs	r1, #0
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f7ff fd83 	bl	80071b0 <SDIO_GetResponse>
 80076aa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	4b4e      	ldr	r3, [pc, #312]	; (80077e8 <SDMMC_GetCmdResp1+0x1d8>)
 80076b0:	4013      	ands	r3, r2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80076b6:	2300      	movs	r3, #0
 80076b8:	e08d      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	da02      	bge.n	80076c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80076c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076c4:	e087      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80076d0:	2340      	movs	r3, #64	; 0x40
 80076d2:	e080      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80076de:	2380      	movs	r3, #128	; 0x80
 80076e0:	e079      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80076ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076f0:	e071      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80076fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007700:	e069      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800770c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007710:	e061      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800771c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007720:	e059      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800772c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007730:	e051      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800773c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007740:	e049      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800774c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007750:	e041      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800775c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007760:	e039      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800776c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007770:	e031      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800777c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007780:	e029      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800778c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007790:	e021      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800779c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80077a0:	e019      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d002      	beq.n	80077b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80077ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80077b0:	e011      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80077bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80077c0:	e009      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f003 0308 	and.w	r3, r3, #8
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80077cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80077d0:	e001      	b.n	80077d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80077d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3720      	adds	r7, #32
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20000000 	.word	0x20000000
 80077e4:	10624dd3 	.word	0x10624dd3
 80077e8:	fdffe008 	.word	0xfdffe008

080077ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077f4:	4b1f      	ldr	r3, [pc, #124]	; (8007874 <SDMMC_GetCmdResp2+0x88>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a1f      	ldr	r2, [pc, #124]	; (8007878 <SDMMC_GetCmdResp2+0x8c>)
 80077fa:	fba2 2303 	umull	r2, r3, r2, r3
 80077fe:	0a5b      	lsrs	r3, r3, #9
 8007800:	f241 3288 	movw	r2, #5000	; 0x1388
 8007804:	fb02 f303 	mul.w	r3, r2, r3
 8007808:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	1e5a      	subs	r2, r3, #1
 800780e:	60fa      	str	r2, [r7, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d102      	bne.n	800781a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007814:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007818:	e026      	b.n	8007868 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007826:	2b00      	cmp	r3, #0
 8007828:	d0ef      	beq.n	800780a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1ea      	bne.n	800780a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2204      	movs	r2, #4
 8007844:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007846:	2304      	movs	r3, #4
 8007848:	e00e      	b.n	8007868 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d004      	beq.n	8007860 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800785c:	2301      	movs	r3, #1
 800785e:	e003      	b.n	8007868 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	22c5      	movs	r2, #197	; 0xc5
 8007864:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	20000000 	.word	0x20000000
 8007878:	10624dd3 	.word	0x10624dd3

0800787c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007884:	4b1a      	ldr	r3, [pc, #104]	; (80078f0 <SDMMC_GetCmdResp3+0x74>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a1a      	ldr	r2, [pc, #104]	; (80078f4 <SDMMC_GetCmdResp3+0x78>)
 800788a:	fba2 2303 	umull	r2, r3, r2, r3
 800788e:	0a5b      	lsrs	r3, r3, #9
 8007890:	f241 3288 	movw	r2, #5000	; 0x1388
 8007894:	fb02 f303 	mul.w	r3, r2, r3
 8007898:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	1e5a      	subs	r2, r3, #1
 800789e:	60fa      	str	r2, [r7, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d102      	bne.n	80078aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078a8:	e01b      	b.n	80078e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d0ef      	beq.n	800789a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1ea      	bne.n	800789a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c8:	f003 0304 	and.w	r3, r3, #4
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d004      	beq.n	80078da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2204      	movs	r2, #4
 80078d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078d6:	2304      	movs	r3, #4
 80078d8:	e003      	b.n	80078e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	22c5      	movs	r2, #197	; 0xc5
 80078de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	20000000 	.word	0x20000000
 80078f4:	10624dd3 	.word	0x10624dd3

080078f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	460b      	mov	r3, r1
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007906:	4b35      	ldr	r3, [pc, #212]	; (80079dc <SDMMC_GetCmdResp6+0xe4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a35      	ldr	r2, [pc, #212]	; (80079e0 <SDMMC_GetCmdResp6+0xe8>)
 800790c:	fba2 2303 	umull	r2, r3, r2, r3
 8007910:	0a5b      	lsrs	r3, r3, #9
 8007912:	f241 3288 	movw	r2, #5000	; 0x1388
 8007916:	fb02 f303 	mul.w	r3, r2, r3
 800791a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	1e5a      	subs	r2, r3, #1
 8007920:	61fa      	str	r2, [r7, #28]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d102      	bne.n	800792c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007926:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800792a:	e052      	b.n	80079d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007930:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0ef      	beq.n	800791c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1ea      	bne.n	800791c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794a:	f003 0304 	and.w	r3, r3, #4
 800794e:	2b00      	cmp	r3, #0
 8007950:	d004      	beq.n	800795c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2204      	movs	r2, #4
 8007956:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007958:	2304      	movs	r3, #4
 800795a:	e03a      	b.n	80079d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d004      	beq.n	8007972 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2201      	movs	r2, #1
 800796c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800796e:	2301      	movs	r3, #1
 8007970:	e02f      	b.n	80079d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f7ff fc0f 	bl	8007196 <SDIO_GetCommandResponse>
 8007978:	4603      	mov	r3, r0
 800797a:	461a      	mov	r2, r3
 800797c:	7afb      	ldrb	r3, [r7, #11]
 800797e:	4293      	cmp	r3, r2
 8007980:	d001      	beq.n	8007986 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007982:	2301      	movs	r3, #1
 8007984:	e025      	b.n	80079d2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	22c5      	movs	r2, #197	; 0xc5
 800798a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800798c:	2100      	movs	r1, #0
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f7ff fc0e 	bl	80071b0 <SDIO_GetResponse>
 8007994:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d106      	bne.n	80079ae <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	0c1b      	lsrs	r3, r3, #16
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80079aa:	2300      	movs	r3, #0
 80079ac:	e011      	b.n	80079d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d002      	beq.n	80079be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80079b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079bc:	e009      	b.n	80079d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80079c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079cc:	e001      	b.n	80079d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80079ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3720      	adds	r7, #32
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20000000 	.word	0x20000000
 80079e0:	10624dd3 	.word	0x10624dd3

080079e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079ec:	4b22      	ldr	r3, [pc, #136]	; (8007a78 <SDMMC_GetCmdResp7+0x94>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a22      	ldr	r2, [pc, #136]	; (8007a7c <SDMMC_GetCmdResp7+0x98>)
 80079f2:	fba2 2303 	umull	r2, r3, r2, r3
 80079f6:	0a5b      	lsrs	r3, r3, #9
 80079f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079fc:	fb02 f303 	mul.w	r3, r2, r3
 8007a00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	1e5a      	subs	r2, r3, #1
 8007a06:	60fa      	str	r2, [r7, #12]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d102      	bne.n	8007a12 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a10:	e02c      	b.n	8007a6c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0ef      	beq.n	8007a02 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1ea      	bne.n	8007a02 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d004      	beq.n	8007a42 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2204      	movs	r2, #4
 8007a3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a3e:	2304      	movs	r3, #4
 8007a40:	e014      	b.n	8007a6c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d004      	beq.n	8007a58 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e009      	b.n	8007a6c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2240      	movs	r2, #64	; 0x40
 8007a68:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007a6a:	2300      	movs	r3, #0
  
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	20000000 	.word	0x20000000
 8007a7c:	10624dd3 	.word	0x10624dd3

08007a80 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a88:	4b11      	ldr	r3, [pc, #68]	; (8007ad0 <SDMMC_GetCmdError+0x50>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a11      	ldr	r2, [pc, #68]	; (8007ad4 <SDMMC_GetCmdError+0x54>)
 8007a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a92:	0a5b      	lsrs	r3, r3, #9
 8007a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a98:	fb02 f303 	mul.w	r3, r2, r3
 8007a9c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	1e5a      	subs	r2, r3, #1
 8007aa2:	60fa      	str	r2, [r7, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d102      	bne.n	8007aae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007aa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007aac:	e009      	b.n	8007ac2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0f1      	beq.n	8007a9e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	22c5      	movs	r2, #197	; 0xc5
 8007abe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	20000000 	.word	0x20000000
 8007ad4:	10624dd3 	.word	0x10624dd3

08007ad8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ad8:	b084      	sub	sp, #16
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	f107 001c 	add.w	r0, r7, #28
 8007ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007aea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d123      	bne.n	8007b3a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d105      	bne.n	8007b2e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f001 fae2 	bl	80090f8 <USB_CoreReset>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73fb      	strb	r3, [r7, #15]
 8007b38:	e01b      	b.n	8007b72 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 fad6 	bl	80090f8 <USB_CoreReset>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b50:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d106      	bne.n	8007b66 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38
 8007b64:	e005      	b.n	8007b72 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b72:	7fbb      	ldrb	r3, [r7, #30]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d10b      	bne.n	8007b90 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f043 0206 	orr.w	r2, r3, #6
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f043 0220 	orr.w	r2, r3, #32
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b9c:	b004      	add	sp, #16
 8007b9e:	4770      	bx	lr

08007ba0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	4613      	mov	r3, r2
 8007bac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007bae:	79fb      	ldrb	r3, [r7, #7]
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d165      	bne.n	8007c80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	4a41      	ldr	r2, [pc, #260]	; (8007cbc <USB_SetTurnaroundTime+0x11c>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d906      	bls.n	8007bca <USB_SetTurnaroundTime+0x2a>
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	4a40      	ldr	r2, [pc, #256]	; (8007cc0 <USB_SetTurnaroundTime+0x120>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d202      	bcs.n	8007bca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007bc4:	230f      	movs	r3, #15
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	e062      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	4a3c      	ldr	r2, [pc, #240]	; (8007cc0 <USB_SetTurnaroundTime+0x120>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d306      	bcc.n	8007be0 <USB_SetTurnaroundTime+0x40>
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	4a3b      	ldr	r2, [pc, #236]	; (8007cc4 <USB_SetTurnaroundTime+0x124>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d202      	bcs.n	8007be0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007bda:	230e      	movs	r3, #14
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	e057      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	4a38      	ldr	r2, [pc, #224]	; (8007cc4 <USB_SetTurnaroundTime+0x124>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d306      	bcc.n	8007bf6 <USB_SetTurnaroundTime+0x56>
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4a37      	ldr	r2, [pc, #220]	; (8007cc8 <USB_SetTurnaroundTime+0x128>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d202      	bcs.n	8007bf6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007bf0:	230d      	movs	r3, #13
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	e04c      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	4a33      	ldr	r2, [pc, #204]	; (8007cc8 <USB_SetTurnaroundTime+0x128>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d306      	bcc.n	8007c0c <USB_SetTurnaroundTime+0x6c>
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	4a32      	ldr	r2, [pc, #200]	; (8007ccc <USB_SetTurnaroundTime+0x12c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d802      	bhi.n	8007c0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007c06:	230c      	movs	r3, #12
 8007c08:	617b      	str	r3, [r7, #20]
 8007c0a:	e041      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4a2f      	ldr	r2, [pc, #188]	; (8007ccc <USB_SetTurnaroundTime+0x12c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d906      	bls.n	8007c22 <USB_SetTurnaroundTime+0x82>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	4a2e      	ldr	r2, [pc, #184]	; (8007cd0 <USB_SetTurnaroundTime+0x130>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d802      	bhi.n	8007c22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007c1c:	230b      	movs	r3, #11
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	e036      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	4a2a      	ldr	r2, [pc, #168]	; (8007cd0 <USB_SetTurnaroundTime+0x130>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d906      	bls.n	8007c38 <USB_SetTurnaroundTime+0x98>
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	4a29      	ldr	r2, [pc, #164]	; (8007cd4 <USB_SetTurnaroundTime+0x134>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d802      	bhi.n	8007c38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c32:	230a      	movs	r3, #10
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	e02b      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4a26      	ldr	r2, [pc, #152]	; (8007cd4 <USB_SetTurnaroundTime+0x134>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d906      	bls.n	8007c4e <USB_SetTurnaroundTime+0xae>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4a25      	ldr	r2, [pc, #148]	; (8007cd8 <USB_SetTurnaroundTime+0x138>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d202      	bcs.n	8007c4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007c48:	2309      	movs	r3, #9
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	e020      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	4a21      	ldr	r2, [pc, #132]	; (8007cd8 <USB_SetTurnaroundTime+0x138>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d306      	bcc.n	8007c64 <USB_SetTurnaroundTime+0xc4>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	4a20      	ldr	r2, [pc, #128]	; (8007cdc <USB_SetTurnaroundTime+0x13c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d802      	bhi.n	8007c64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007c5e:	2308      	movs	r3, #8
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	e015      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	4a1d      	ldr	r2, [pc, #116]	; (8007cdc <USB_SetTurnaroundTime+0x13c>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d906      	bls.n	8007c7a <USB_SetTurnaroundTime+0xda>
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ce0 <USB_SetTurnaroundTime+0x140>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d202      	bcs.n	8007c7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007c74:	2307      	movs	r3, #7
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	e00a      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007c7a:	2306      	movs	r3, #6
 8007c7c:	617b      	str	r3, [r7, #20]
 8007c7e:	e007      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007c80:	79fb      	ldrb	r3, [r7, #7]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d102      	bne.n	8007c8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007c86:	2309      	movs	r3, #9
 8007c88:	617b      	str	r3, [r7, #20]
 8007c8a:	e001      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007c8c:	2309      	movs	r3, #9
 8007c8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	029b      	lsls	r3, r3, #10
 8007ca4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007ca8:	431a      	orrs	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	371c      	adds	r7, #28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	00d8acbf 	.word	0x00d8acbf
 8007cc0:	00e4e1c0 	.word	0x00e4e1c0
 8007cc4:	00f42400 	.word	0x00f42400
 8007cc8:	01067380 	.word	0x01067380
 8007ccc:	011a499f 	.word	0x011a499f
 8007cd0:	01312cff 	.word	0x01312cff
 8007cd4:	014ca43f 	.word	0x014ca43f
 8007cd8:	016e3600 	.word	0x016e3600
 8007cdc:	01a6ab1f 	.word	0x01a6ab1f
 8007ce0:	01e84800 	.word	0x01e84800

08007ce4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f043 0201 	orr.w	r2, r3, #1
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f023 0201 	bic.w	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d44:	78fb      	ldrb	r3, [r7, #3]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d115      	bne.n	8007d76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d56:	200a      	movs	r0, #10
 8007d58:	f7fb fa22 	bl	80031a0 <HAL_Delay>
      ms += 10U;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	330a      	adds	r3, #10
 8007d60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f001 f939 	bl	8008fda <USB_GetMode>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d01e      	beq.n	8007dac <USB_SetCurrentMode+0x84>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2bc7      	cmp	r3, #199	; 0xc7
 8007d72:	d9f0      	bls.n	8007d56 <USB_SetCurrentMode+0x2e>
 8007d74:	e01a      	b.n	8007dac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d76:	78fb      	ldrb	r3, [r7, #3]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d115      	bne.n	8007da8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d88:	200a      	movs	r0, #10
 8007d8a:	f7fb fa09 	bl	80031a0 <HAL_Delay>
      ms += 10U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	330a      	adds	r3, #10
 8007d92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f001 f920 	bl	8008fda <USB_GetMode>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d005      	beq.n	8007dac <USB_SetCurrentMode+0x84>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2bc7      	cmp	r3, #199	; 0xc7
 8007da4:	d9f0      	bls.n	8007d88 <USB_SetCurrentMode+0x60>
 8007da6:	e001      	b.n	8007dac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e005      	b.n	8007db8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2bc8      	cmp	r3, #200	; 0xc8
 8007db0:	d101      	bne.n	8007db6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e000      	b.n	8007db8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b086      	sub	sp, #24
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007dda:	2300      	movs	r3, #0
 8007ddc:	613b      	str	r3, [r7, #16]
 8007dde:	e009      	b.n	8007df4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	3340      	adds	r3, #64	; 0x40
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	2200      	movs	r2, #0
 8007dec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	3301      	adds	r3, #1
 8007df2:	613b      	str	r3, [r7, #16]
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	2b0e      	cmp	r3, #14
 8007df8:	d9f2      	bls.n	8007de0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007dfa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d11c      	bne.n	8007e3c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e10:	f043 0302 	orr.w	r3, r3, #2
 8007e14:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e26:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e32:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	639a      	str	r2, [r3, #56]	; 0x38
 8007e3a:	e00b      	b.n	8007e54 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e60:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d10d      	bne.n	8007e84 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d104      	bne.n	8007e7a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e70:	2100      	movs	r1, #0
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f968 	bl	8008148 <USB_SetDevSpeed>
 8007e78:	e008      	b.n	8007e8c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f963 	bl	8008148 <USB_SetDevSpeed>
 8007e82:	e003      	b.n	8007e8c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e84:	2103      	movs	r1, #3
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f95e 	bl	8008148 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e8c:	2110      	movs	r1, #16
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f8fa 	bl	8008088 <USB_FlushTxFifo>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f924 	bl	80080ec <USB_FlushRxFifo>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ecc:	461a      	mov	r2, r3
 8007ece:	2300      	movs	r3, #0
 8007ed0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	613b      	str	r3, [r7, #16]
 8007ed6:	e043      	b.n	8007f60 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eee:	d118      	bne.n	8007f22 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10a      	bne.n	8007f0c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f02:	461a      	mov	r2, r3
 8007f04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	e013      	b.n	8007f34 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f18:	461a      	mov	r2, r3
 8007f1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	e008      	b.n	8007f34 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2e:	461a      	mov	r2, r3
 8007f30:	2300      	movs	r3, #0
 8007f32:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f40:	461a      	mov	r2, r3
 8007f42:	2300      	movs	r3, #0
 8007f44:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f52:	461a      	mov	r2, r3
 8007f54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	613b      	str	r3, [r7, #16]
 8007f60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007f64:	461a      	mov	r2, r3
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d3b5      	bcc.n	8007ed8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	613b      	str	r3, [r7, #16]
 8007f70:	e043      	b.n	8007ffa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f88:	d118      	bne.n	8007fbc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	e013      	b.n	8007fce <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fb8:	6013      	str	r3, [r2, #0]
 8007fba:	e008      	b.n	8007fce <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc8:	461a      	mov	r2, r3
 8007fca:	2300      	movs	r3, #0
 8007fcc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fda:	461a      	mov	r2, r3
 8007fdc:	2300      	movs	r3, #0
 8007fde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fec:	461a      	mov	r2, r3
 8007fee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ff2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	613b      	str	r3, [r7, #16]
 8007ffa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ffe:	461a      	mov	r2, r3
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	4293      	cmp	r3, r2
 8008004:	d3b5      	bcc.n	8007f72 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008018:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008026:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800802c:	2b00      	cmp	r3, #0
 800802e:	d105      	bne.n	800803c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	f043 0210 	orr.w	r2, r3, #16
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	699a      	ldr	r2, [r3, #24]
 8008040:	4b10      	ldr	r3, [pc, #64]	; (8008084 <USB_DevInit+0x2c4>)
 8008042:	4313      	orrs	r3, r2
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008048:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	f043 0208 	orr.w	r2, r3, #8
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800805c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008060:	2b01      	cmp	r3, #1
 8008062:	d107      	bne.n	8008074 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800806c:	f043 0304 	orr.w	r3, r3, #4
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008074:	7dfb      	ldrb	r3, [r7, #23]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3718      	adds	r7, #24
 800807a:	46bd      	mov	sp, r7
 800807c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008080:	b004      	add	sp, #16
 8008082:	4770      	bx	lr
 8008084:	803c3800 	.word	0x803c3800

08008088 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008092:	2300      	movs	r3, #0
 8008094:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3301      	adds	r3, #1
 800809a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80080a2:	d901      	bls.n	80080a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e01b      	b.n	80080e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	daf2      	bge.n	8008096 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	019b      	lsls	r3, r3, #6
 80080b8:	f043 0220 	orr.w	r2, r3, #32
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	3301      	adds	r3, #1
 80080c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80080cc:	d901      	bls.n	80080d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e006      	b.n	80080e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	f003 0320 	and.w	r3, r3, #32
 80080da:	2b20      	cmp	r3, #32
 80080dc:	d0f0      	beq.n	80080c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080f4:	2300      	movs	r3, #0
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3301      	adds	r3, #1
 80080fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008104:	d901      	bls.n	800810a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e018      	b.n	800813c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	daf2      	bge.n	80080f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2210      	movs	r2, #16
 800811a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3301      	adds	r3, #1
 8008120:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008128:	d901      	bls.n	800812e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e006      	b.n	800813c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	f003 0310 	and.w	r3, r3, #16
 8008136:	2b10      	cmp	r3, #16
 8008138:	d0f0      	beq.n	800811c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	68f9      	ldr	r1, [r7, #12]
 8008164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008168:	4313      	orrs	r3, r2
 800816a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800817a:	b480      	push	{r7}
 800817c:	b087      	sub	sp, #28
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f003 0306 	and.w	r3, r3, #6
 8008192:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d102      	bne.n	80081a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800819a:	2300      	movs	r3, #0
 800819c:	75fb      	strb	r3, [r7, #23]
 800819e:	e00a      	b.n	80081b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d002      	beq.n	80081ac <USB_GetDevSpeed+0x32>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b06      	cmp	r3, #6
 80081aa:	d102      	bne.n	80081b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80081ac:	2302      	movs	r3, #2
 80081ae:	75fb      	strb	r3, [r7, #23]
 80081b0:	e001      	b.n	80081b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80081b2:	230f      	movs	r3, #15
 80081b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	371c      	adds	r7, #28
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	785b      	ldrb	r3, [r3, #1]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d13a      	bne.n	8008256 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e6:	69da      	ldr	r2, [r3, #28]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	f003 030f 	and.w	r3, r3, #15
 80081f0:	2101      	movs	r1, #1
 80081f2:	fa01 f303 	lsl.w	r3, r1, r3
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	68f9      	ldr	r1, [r7, #12]
 80081fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081fe:	4313      	orrs	r3, r2
 8008200:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d155      	bne.n	80082c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4413      	add	r3, r2
 8008220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	791b      	ldrb	r3, [r3, #4]
 8008232:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008234:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	059b      	lsls	r3, r3, #22
 800823a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800823c:	4313      	orrs	r3, r2
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	0151      	lsls	r1, r2, #5
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	440a      	add	r2, r1
 8008246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800824a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800824e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	e036      	b.n	80082c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800825c:	69da      	ldr	r2, [r3, #28]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	f003 030f 	and.w	r3, r3, #15
 8008266:	2101      	movs	r1, #1
 8008268:	fa01 f303 	lsl.w	r3, r1, r3
 800826c:	041b      	lsls	r3, r3, #16
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008274:	4313      	orrs	r3, r2
 8008276:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d11a      	bne.n	80082c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	791b      	ldrb	r3, [r3, #4]
 80082a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082aa:	430b      	orrs	r3, r1
 80082ac:	4313      	orrs	r3, r2
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	0151      	lsls	r1, r2, #5
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	440a      	add	r2, r1
 80082b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
	...

080082d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	785b      	ldrb	r3, [r3, #1]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d161      	bne.n	80083b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008306:	d11f      	bne.n	8008348 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	4413      	add	r3, r2
 8008310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	0151      	lsls	r1, r2, #5
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	440a      	add	r2, r1
 800831e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008322:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008326:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4413      	add	r3, r2
 8008330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	0151      	lsls	r1, r2, #5
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	440a      	add	r2, r1
 800833e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008342:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008346:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800834e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	f003 030f 	and.w	r3, r3, #15
 8008358:	2101      	movs	r1, #1
 800835a:	fa01 f303 	lsl.w	r3, r1, r3
 800835e:	b29b      	uxth	r3, r3
 8008360:	43db      	mvns	r3, r3
 8008362:	68f9      	ldr	r1, [r7, #12]
 8008364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008368:	4013      	ands	r3, r2
 800836a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008372:	69da      	ldr	r2, [r3, #28]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	f003 030f 	and.w	r3, r3, #15
 800837c:	2101      	movs	r1, #1
 800837e:	fa01 f303 	lsl.w	r3, r1, r3
 8008382:	b29b      	uxth	r3, r3
 8008384:	43db      	mvns	r3, r3
 8008386:	68f9      	ldr	r1, [r7, #12]
 8008388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800838c:	4013      	ands	r3, r2
 800838e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	0159      	lsls	r1, r3, #5
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	440b      	add	r3, r1
 80083a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083aa:	4619      	mov	r1, r3
 80083ac:	4b35      	ldr	r3, [pc, #212]	; (8008484 <USB_DeactivateEndpoint+0x1b0>)
 80083ae:	4013      	ands	r3, r2
 80083b0:	600b      	str	r3, [r1, #0]
 80083b2:	e060      	b.n	8008476 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083ca:	d11f      	bne.n	800840c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	0151      	lsls	r1, r2, #5
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	440a      	add	r2, r1
 80083e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	0151      	lsls	r1, r2, #5
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	440a      	add	r2, r1
 8008402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008406:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800840a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	f003 030f 	and.w	r3, r3, #15
 800841c:	2101      	movs	r1, #1
 800841e:	fa01 f303 	lsl.w	r3, r1, r3
 8008422:	041b      	lsls	r3, r3, #16
 8008424:	43db      	mvns	r3, r3
 8008426:	68f9      	ldr	r1, [r7, #12]
 8008428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800842c:	4013      	ands	r3, r2
 800842e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008436:	69da      	ldr	r2, [r3, #28]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	f003 030f 	and.w	r3, r3, #15
 8008440:	2101      	movs	r1, #1
 8008442:	fa01 f303 	lsl.w	r3, r1, r3
 8008446:	041b      	lsls	r3, r3, #16
 8008448:	43db      	mvns	r3, r3
 800844a:	68f9      	ldr	r1, [r7, #12]
 800844c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008450:	4013      	ands	r3, r2
 8008452:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	0159      	lsls	r1, r3, #5
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	440b      	add	r3, r1
 800846a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846e:	4619      	mov	r1, r3
 8008470:	4b05      	ldr	r3, [pc, #20]	; (8008488 <USB_DeactivateEndpoint+0x1b4>)
 8008472:	4013      	ands	r3, r2
 8008474:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr
 8008484:	ec337800 	.word	0xec337800
 8008488:	eff37800 	.word	0xeff37800

0800848c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b08a      	sub	sp, #40	; 0x28
 8008490:	af02      	add	r7, sp, #8
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	4613      	mov	r3, r2
 8008498:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	785b      	ldrb	r3, [r3, #1]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	f040 817a 	bne.w	80087a2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d132      	bne.n	800851c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	69ba      	ldr	r2, [r7, #24]
 80084c6:	0151      	lsls	r1, r2, #5
 80084c8:	69fa      	ldr	r2, [r7, #28]
 80084ca:	440a      	add	r2, r1
 80084cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	0151      	lsls	r1, r2, #5
 80084ec:	69fa      	ldr	r2, [r7, #28]
 80084ee:	440a      	add	r2, r1
 80084f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	4413      	add	r3, r2
 8008502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	0151      	lsls	r1, r2, #5
 800850c:	69fa      	ldr	r2, [r7, #28]
 800850e:	440a      	add	r2, r1
 8008510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008514:	0cdb      	lsrs	r3, r3, #19
 8008516:	04db      	lsls	r3, r3, #19
 8008518:	6113      	str	r3, [r2, #16]
 800851a:	e092      	b.n	8008642 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	0151      	lsls	r1, r2, #5
 800852e:	69fa      	ldr	r2, [r7, #28]
 8008530:	440a      	add	r2, r1
 8008532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008536:	0cdb      	lsrs	r3, r3, #19
 8008538:	04db      	lsls	r3, r3, #19
 800853a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	4413      	add	r3, r2
 8008544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	0151      	lsls	r1, r2, #5
 800854e:	69fa      	ldr	r2, [r7, #28]
 8008550:	440a      	add	r2, r1
 8008552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008556:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800855a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800855e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d11a      	bne.n	800859c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	691a      	ldr	r2, [r3, #16]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	429a      	cmp	r2, r3
 8008570:	d903      	bls.n	800857a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	689a      	ldr	r2, [r3, #8]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	0151      	lsls	r1, r2, #5
 800858c:	69fa      	ldr	r2, [r7, #28]
 800858e:	440a      	add	r2, r1
 8008590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008598:	6113      	str	r3, [r2, #16]
 800859a:	e01b      	b.n	80085d4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	6919      	ldr	r1, [r3, #16]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	440b      	add	r3, r1
 80085b4:	1e59      	subs	r1, r3, #1
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80085be:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085c0:	4ba2      	ldr	r3, [pc, #648]	; (800884c <USB_EPStartXfer+0x3c0>)
 80085c2:	400b      	ands	r3, r1
 80085c4:	69b9      	ldr	r1, [r7, #24]
 80085c6:	0148      	lsls	r0, r1, #5
 80085c8:	69f9      	ldr	r1, [r7, #28]
 80085ca:	4401      	add	r1, r0
 80085cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085d0:	4313      	orrs	r3, r2
 80085d2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e0:	691a      	ldr	r2, [r3, #16]
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085ea:	69b9      	ldr	r1, [r7, #24]
 80085ec:	0148      	lsls	r0, r1, #5
 80085ee:	69f9      	ldr	r1, [r7, #28]
 80085f0:	4401      	add	r1, r0
 80085f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085f6:	4313      	orrs	r3, r2
 80085f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	791b      	ldrb	r3, [r3, #4]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d11f      	bne.n	8008642 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	015a      	lsls	r2, r3, #5
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	4413      	add	r3, r2
 800860a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	0151      	lsls	r1, r2, #5
 8008614:	69fa      	ldr	r2, [r7, #28]
 8008616:	440a      	add	r2, r1
 8008618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800861c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008620:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	0151      	lsls	r1, r2, #5
 8008634:	69fa      	ldr	r2, [r7, #28]
 8008636:	440a      	add	r2, r1
 8008638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800863c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008640:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008642:	79fb      	ldrb	r3, [r7, #7]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d14b      	bne.n	80086e0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d009      	beq.n	8008664 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865c:	461a      	mov	r2, r3
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	791b      	ldrb	r3, [r3, #4]
 8008668:	2b01      	cmp	r3, #1
 800866a:	d128      	bne.n	80086be <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008678:	2b00      	cmp	r3, #0
 800867a:	d110      	bne.n	800869e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	4413      	add	r3, r2
 8008684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	69ba      	ldr	r2, [r7, #24]
 800868c:	0151      	lsls	r1, r2, #5
 800868e:	69fa      	ldr	r2, [r7, #28]
 8008690:	440a      	add	r2, r1
 8008692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008696:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	e00f      	b.n	80086be <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	69ba      	ldr	r2, [r7, #24]
 80086ae:	0151      	lsls	r1, r2, #5
 80086b0:	69fa      	ldr	r2, [r7, #28]
 80086b2:	440a      	add	r2, r1
 80086b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	0151      	lsls	r1, r2, #5
 80086d0:	69fa      	ldr	r2, [r7, #28]
 80086d2:	440a      	add	r2, r1
 80086d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086dc:	6013      	str	r3, [r2, #0]
 80086de:	e165      	b.n	80089ac <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	0151      	lsls	r1, r2, #5
 80086f2:	69fa      	ldr	r2, [r7, #28]
 80086f4:	440a      	add	r2, r1
 80086f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	791b      	ldrb	r3, [r3, #4]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d015      	beq.n	8008734 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 814d 	beq.w	80089ac <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	f003 030f 	and.w	r3, r3, #15
 8008722:	2101      	movs	r1, #1
 8008724:	fa01 f303 	lsl.w	r3, r1, r3
 8008728:	69f9      	ldr	r1, [r7, #28]
 800872a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800872e:	4313      	orrs	r3, r2
 8008730:	634b      	str	r3, [r1, #52]	; 0x34
 8008732:	e13b      	b.n	80089ac <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008740:	2b00      	cmp	r3, #0
 8008742:	d110      	bne.n	8008766 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	0151      	lsls	r1, r2, #5
 8008756:	69fa      	ldr	r2, [r7, #28]
 8008758:	440a      	add	r2, r1
 800875a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800875e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	e00f      	b.n	8008786 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	4413      	add	r3, r2
 800876e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	0151      	lsls	r1, r2, #5
 8008778:	69fa      	ldr	r2, [r7, #28]
 800877a:	440a      	add	r2, r1
 800877c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008784:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	68d9      	ldr	r1, [r3, #12]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	781a      	ldrb	r2, [r3, #0]
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	b298      	uxth	r0, r3
 8008794:	79fb      	ldrb	r3, [r7, #7]
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	4603      	mov	r3, r0
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 f9b8 	bl	8008b10 <USB_WritePacket>
 80087a0:	e104      	b.n	80089ac <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	0151      	lsls	r1, r2, #5
 80087b4:	69fa      	ldr	r2, [r7, #28]
 80087b6:	440a      	add	r2, r1
 80087b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087bc:	0cdb      	lsrs	r3, r3, #19
 80087be:	04db      	lsls	r3, r3, #19
 80087c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	015a      	lsls	r2, r3, #5
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	0151      	lsls	r1, r2, #5
 80087d4:	69fa      	ldr	r2, [r7, #28]
 80087d6:	440a      	add	r2, r1
 80087d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087e4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d131      	bne.n	8008850 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d003      	beq.n	80087fc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	689a      	ldr	r2, [r3, #8]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008810:	691a      	ldr	r2, [r3, #16]
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800881a:	69b9      	ldr	r1, [r7, #24]
 800881c:	0148      	lsls	r0, r1, #5
 800881e:	69f9      	ldr	r1, [r7, #28]
 8008820:	4401      	add	r1, r0
 8008822:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008826:	4313      	orrs	r3, r2
 8008828:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	015a      	lsls	r2, r3, #5
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	4413      	add	r3, r2
 8008832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	69ba      	ldr	r2, [r7, #24]
 800883a:	0151      	lsls	r1, r2, #5
 800883c:	69fa      	ldr	r2, [r7, #28]
 800883e:	440a      	add	r2, r1
 8008840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008844:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008848:	6113      	str	r3, [r2, #16]
 800884a:	e061      	b.n	8008910 <USB_EPStartXfer+0x484>
 800884c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d123      	bne.n	80088a0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008864:	691a      	ldr	r2, [r3, #16]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800886e:	69b9      	ldr	r1, [r7, #24]
 8008870:	0148      	lsls	r0, r1, #5
 8008872:	69f9      	ldr	r1, [r7, #28]
 8008874:	4401      	add	r1, r0
 8008876:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800887a:	4313      	orrs	r3, r2
 800887c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	4413      	add	r3, r2
 8008886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	69ba      	ldr	r2, [r7, #24]
 800888e:	0151      	lsls	r1, r2, #5
 8008890:	69fa      	ldr	r2, [r7, #28]
 8008892:	440a      	add	r2, r1
 8008894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800889c:	6113      	str	r3, [r2, #16]
 800889e:	e037      	b.n	8008910 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	691a      	ldr	r2, [r3, #16]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	4413      	add	r3, r2
 80088aa:	1e5a      	subs	r2, r3, #1
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	8afa      	ldrh	r2, [r7, #22]
 80088bc:	fb03 f202 	mul.w	r2, r3, r2
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d0:	691a      	ldr	r2, [r3, #16]
 80088d2:	8afb      	ldrh	r3, [r7, #22]
 80088d4:	04d9      	lsls	r1, r3, #19
 80088d6:	4b38      	ldr	r3, [pc, #224]	; (80089b8 <USB_EPStartXfer+0x52c>)
 80088d8:	400b      	ands	r3, r1
 80088da:	69b9      	ldr	r1, [r7, #24]
 80088dc:	0148      	lsls	r0, r1, #5
 80088de:	69f9      	ldr	r1, [r7, #28]
 80088e0:	4401      	add	r1, r0
 80088e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088e6:	4313      	orrs	r3, r2
 80088e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f6:	691a      	ldr	r2, [r3, #16]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008900:	69b9      	ldr	r1, [r7, #24]
 8008902:	0148      	lsls	r0, r1, #5
 8008904:	69f9      	ldr	r1, [r7, #28]
 8008906:	4401      	add	r1, r0
 8008908:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800890c:	4313      	orrs	r3, r2
 800890e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008910:	79fb      	ldrb	r3, [r7, #7]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d10d      	bne.n	8008932 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d009      	beq.n	8008932 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	68d9      	ldr	r1, [r3, #12]
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	4413      	add	r3, r2
 800892a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892e:	460a      	mov	r2, r1
 8008930:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	791b      	ldrb	r3, [r3, #4]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d128      	bne.n	800898c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008946:	2b00      	cmp	r3, #0
 8008948:	d110      	bne.n	800896c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	0151      	lsls	r1, r2, #5
 800895c:	69fa      	ldr	r2, [r7, #28]
 800895e:	440a      	add	r2, r1
 8008960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008964:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	e00f      	b.n	800898c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	0151      	lsls	r1, r2, #5
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	440a      	add	r2, r1
 8008982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800898a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	0151      	lsls	r1, r2, #5
 800899e:	69fa      	ldr	r2, [r7, #28]
 80089a0:	440a      	add	r2, r1
 80089a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3720      	adds	r7, #32
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	1ff80000 	.word	0x1ff80000

080089bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	785b      	ldrb	r3, [r3, #1]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d14a      	bne.n	8008a70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089f2:	f040 8086 	bne.w	8008b02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	7812      	ldrb	r2, [r2, #0]
 8008a0a:	0151      	lsls	r1, r2, #5
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	440a      	add	r2, r1
 8008a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	7812      	ldrb	r2, [r2, #0]
 8008a2e:	0151      	lsls	r1, r2, #5
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	440a      	add	r2, r1
 8008a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3301      	adds	r3, #1
 8008a42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f242 7210 	movw	r2, #10000	; 0x2710
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d902      	bls.n	8008a54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	75fb      	strb	r3, [r7, #23]
          break;
 8008a52:	e056      	b.n	8008b02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a6c:	d0e7      	beq.n	8008a3e <USB_EPStopXfer+0x82>
 8008a6e:	e048      	b.n	8008b02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a88:	d13b      	bne.n	8008b02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	7812      	ldrb	r2, [r2, #0]
 8008a9e:	0151      	lsls	r1, r2, #5
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	440a      	add	r2, r1
 8008aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aa8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008aac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	7812      	ldrb	r2, [r2, #0]
 8008ac2:	0151      	lsls	r1, r2, #5
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	440a      	add	r2, r1
 8008ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008acc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ad0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f242 7210 	movw	r2, #10000	; 0x2710
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d902      	bls.n	8008ae8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ae6:	e00c      	b.n	8008b02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b00:	d0e7      	beq.n	8008ad2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	371c      	adds	r7, #28
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b089      	sub	sp, #36	; 0x24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	460b      	mov	r3, r1
 8008b20:	71fb      	strb	r3, [r7, #7]
 8008b22:	4613      	mov	r3, r2
 8008b24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008b2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d123      	bne.n	8008b7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008b36:	88bb      	ldrh	r3, [r7, #4]
 8008b38:	3303      	adds	r3, #3
 8008b3a:	089b      	lsrs	r3, r3, #2
 8008b3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008b3e:	2300      	movs	r3, #0
 8008b40:	61bb      	str	r3, [r7, #24]
 8008b42:	e018      	b.n	8008b76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	031a      	lsls	r2, r3, #12
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b50:	461a      	mov	r2, r3
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	3301      	adds	r3, #1
 8008b62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	3301      	adds	r3, #1
 8008b68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	3301      	adds	r3, #1
 8008b74:	61bb      	str	r3, [r7, #24]
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d3e2      	bcc.n	8008b44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3724      	adds	r7, #36	; 0x24
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b08b      	sub	sp, #44	; 0x2c
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	4613      	mov	r3, r2
 8008b98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008ba2:	88fb      	ldrh	r3, [r7, #6]
 8008ba4:	089b      	lsrs	r3, r3, #2
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008baa:	88fb      	ldrh	r3, [r7, #6]
 8008bac:	f003 0303 	and.w	r3, r3, #3
 8008bb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	623b      	str	r3, [r7, #32]
 8008bb6:	e014      	b.n	8008be2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	3301      	adds	r3, #1
 8008bce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	3301      	adds	r3, #1
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	3301      	adds	r3, #1
 8008be0:	623b      	str	r3, [r7, #32]
 8008be2:	6a3a      	ldr	r2, [r7, #32]
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d3e6      	bcc.n	8008bb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008bea:	8bfb      	ldrh	r3, [r7, #30]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d01e      	beq.n	8008c2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	f107 0310 	add.w	r3, r7, #16
 8008c00:	6812      	ldr	r2, [r2, #0]
 8008c02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	701a      	strb	r2, [r3, #0]
      i++;
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	3301      	adds	r3, #1
 8008c20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008c22:	8bfb      	ldrh	r3, [r7, #30]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008c28:	8bfb      	ldrh	r3, [r7, #30]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1ea      	bne.n	8008c04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	372c      	adds	r7, #44	; 0x2c
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	785b      	ldrb	r3, [r3, #1]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d12c      	bne.n	8008cb2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	db12      	blt.n	8008c90 <USB_EPSetStall+0x54>
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00f      	beq.n	8008c90 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	0151      	lsls	r1, r2, #5
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	440a      	add	r2, r1
 8008c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c8e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008caa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	e02b      	b.n	8008d0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	db12      	blt.n	8008cea <USB_EPSetStall+0xae>
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00f      	beq.n	8008cea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	0151      	lsls	r1, r2, #5
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	440a      	add	r2, r1
 8008ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ce8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	0151      	lsls	r1, r2, #5
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	440a      	add	r2, r1
 8008d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	785b      	ldrb	r3, [r3, #1]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d128      	bne.n	8008d86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	0151      	lsls	r1, r2, #5
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	440a      	add	r2, r1
 8008d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	791b      	ldrb	r3, [r3, #4]
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	d003      	beq.n	8008d64 <USB_EPClearStall+0x4c>
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	791b      	ldrb	r3, [r3, #4]
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d138      	bne.n	8008dd6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	0151      	lsls	r1, r2, #5
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	440a      	add	r2, r1
 8008d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d82:	6013      	str	r3, [r2, #0]
 8008d84:	e027      	b.n	8008dd6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	0151      	lsls	r1, r2, #5
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	440a      	add	r2, r1
 8008d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008da0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008da4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	791b      	ldrb	r3, [r3, #4]
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d003      	beq.n	8008db6 <USB_EPClearStall+0x9e>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	791b      	ldrb	r3, [r3, #4]
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d10f      	bne.n	8008dd6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	0151      	lsls	r1, r2, #5
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	440a      	add	r2, r1
 8008dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dd4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	460b      	mov	r3, r1
 8008dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008e06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	78fb      	ldrb	r3, [r7, #3]
 8008e12:	011b      	lsls	r3, r3, #4
 8008e14:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008e18:	68f9      	ldr	r1, [r7, #12]
 8008e1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e4a:	f023 0303 	bic.w	r3, r3, #3
 8008e4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e5e:	f023 0302 	bic.w	r3, r3, #2
 8008e62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b085      	sub	sp, #20
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e8c:	f023 0303 	bic.w	r3, r3, #3
 8008e90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ea0:	f043 0302 	orr.w	r3, r3, #2
 8008ea4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b085      	sub	sp, #20
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	4013      	ands	r3, r2
 8008efc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	0c1b      	lsrs	r3, r3, #16
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3714      	adds	r7, #20
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b085      	sub	sp, #20
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2a:	69db      	ldr	r3, [r3, #28]
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	4013      	ands	r3, r2
 8008f30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	b29b      	uxth	r3, r3
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b085      	sub	sp, #20
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008f52:	78fb      	ldrb	r3, [r7, #3]
 8008f54:	015a      	lsls	r2, r3, #5
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008f70:	68bb      	ldr	r3, [r7, #8]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b087      	sub	sp, #28
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	460b      	mov	r3, r1
 8008f88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008fa2:	78fb      	ldrb	r3, [r7, #3]
 8008fa4:	f003 030f 	and.w	r3, r3, #15
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	fa22 f303 	lsr.w	r3, r2, r3
 8008fae:	01db      	lsls	r3, r3, #7
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008fb8:	78fb      	ldrb	r3, [r7, #3]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	4013      	ands	r3, r2
 8008fca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008fcc:	68bb      	ldr	r3, [r7, #8]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	371c      	adds	r7, #28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b083      	sub	sp, #12
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	f003 0301 	and.w	r3, r3, #1
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b085      	sub	sp, #20
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009010:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009014:	f023 0307 	bic.w	r3, r3, #7
 8009018:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800902c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	460b      	mov	r3, r1
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	333c      	adds	r3, #60	; 0x3c
 8009052:	3304      	adds	r3, #4
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	4a26      	ldr	r2, [pc, #152]	; (80090f4 <USB_EP0_OutStart+0xb8>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d90a      	bls.n	8009076 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800906c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009070:	d101      	bne.n	8009076 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	e037      	b.n	80090e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800907c:	461a      	mov	r2, r3
 800907e:	2300      	movs	r3, #0
 8009080:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009090:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009094:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a4:	f043 0318 	orr.w	r3, r3, #24
 80090a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80090bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80090be:	7afb      	ldrb	r3, [r7, #11]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d10f      	bne.n	80090e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ca:	461a      	mov	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80090e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	371c      	adds	r7, #28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	4f54300a 	.word	0x4f54300a

080090f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009100:	2300      	movs	r3, #0
 8009102:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	3301      	adds	r3, #1
 8009108:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009110:	d901      	bls.n	8009116 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e01b      	b.n	800914e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	daf2      	bge.n	8009104 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f043 0201 	orr.w	r2, r3, #1
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3301      	adds	r3, #1
 8009132:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800913a:	d901      	bls.n	8009140 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e006      	b.n	800914e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	f003 0301 	and.w	r3, r3, #1
 8009148:	2b01      	cmp	r3, #1
 800914a:	d0f0      	beq.n	800912e <USB_CoreReset+0x36>

  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
	...

0800915c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	460b      	mov	r3, r1
 8009166:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009168:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800916c:	f002 fcf8 	bl	800bb60 <USBD_static_malloc>
 8009170:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d109      	bne.n	800918c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	32b0      	adds	r2, #176	; 0xb0
 8009182:	2100      	movs	r1, #0
 8009184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009188:	2302      	movs	r3, #2
 800918a:	e0d4      	b.n	8009336 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800918c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009190:	2100      	movs	r1, #0
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f003 fd54 	bl	800cc40 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	32b0      	adds	r2, #176	; 0xb0
 80091a2:	68f9      	ldr	r1, [r7, #12]
 80091a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	32b0      	adds	r2, #176	; 0xb0
 80091b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	7c1b      	ldrb	r3, [r3, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d138      	bne.n	8009236 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80091c4:	4b5e      	ldr	r3, [pc, #376]	; (8009340 <USBD_CDC_Init+0x1e4>)
 80091c6:	7819      	ldrb	r1, [r3, #0]
 80091c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091cc:	2202      	movs	r2, #2
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f002 fba3 	bl	800b91a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80091d4:	4b5a      	ldr	r3, [pc, #360]	; (8009340 <USBD_CDC_Init+0x1e4>)
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	f003 020f 	and.w	r2, r3, #15
 80091dc:	6879      	ldr	r1, [r7, #4]
 80091de:	4613      	mov	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	4413      	add	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	440b      	add	r3, r1
 80091e8:	3324      	adds	r3, #36	; 0x24
 80091ea:	2201      	movs	r2, #1
 80091ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80091ee:	4b55      	ldr	r3, [pc, #340]	; (8009344 <USBD_CDC_Init+0x1e8>)
 80091f0:	7819      	ldrb	r1, [r3, #0]
 80091f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091f6:	2202      	movs	r2, #2
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f002 fb8e 	bl	800b91a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80091fe:	4b51      	ldr	r3, [pc, #324]	; (8009344 <USBD_CDC_Init+0x1e8>)
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	f003 020f 	and.w	r2, r3, #15
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	4613      	mov	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	440b      	add	r3, r1
 8009212:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009216:	2201      	movs	r2, #1
 8009218:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800921a:	4b4b      	ldr	r3, [pc, #300]	; (8009348 <USBD_CDC_Init+0x1ec>)
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	f003 020f 	and.w	r2, r3, #15
 8009222:	6879      	ldr	r1, [r7, #4]
 8009224:	4613      	mov	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	440b      	add	r3, r1
 800922e:	3326      	adds	r3, #38	; 0x26
 8009230:	2210      	movs	r2, #16
 8009232:	801a      	strh	r2, [r3, #0]
 8009234:	e035      	b.n	80092a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009236:	4b42      	ldr	r3, [pc, #264]	; (8009340 <USBD_CDC_Init+0x1e4>)
 8009238:	7819      	ldrb	r1, [r3, #0]
 800923a:	2340      	movs	r3, #64	; 0x40
 800923c:	2202      	movs	r2, #2
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f002 fb6b 	bl	800b91a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009244:	4b3e      	ldr	r3, [pc, #248]	; (8009340 <USBD_CDC_Init+0x1e4>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	f003 020f 	and.w	r2, r3, #15
 800924c:	6879      	ldr	r1, [r7, #4]
 800924e:	4613      	mov	r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	4413      	add	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	440b      	add	r3, r1
 8009258:	3324      	adds	r3, #36	; 0x24
 800925a:	2201      	movs	r2, #1
 800925c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800925e:	4b39      	ldr	r3, [pc, #228]	; (8009344 <USBD_CDC_Init+0x1e8>)
 8009260:	7819      	ldrb	r1, [r3, #0]
 8009262:	2340      	movs	r3, #64	; 0x40
 8009264:	2202      	movs	r2, #2
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f002 fb57 	bl	800b91a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800926c:	4b35      	ldr	r3, [pc, #212]	; (8009344 <USBD_CDC_Init+0x1e8>)
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	f003 020f 	and.w	r2, r3, #15
 8009274:	6879      	ldr	r1, [r7, #4]
 8009276:	4613      	mov	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4413      	add	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	440b      	add	r3, r1
 8009280:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009284:	2201      	movs	r2, #1
 8009286:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009288:	4b2f      	ldr	r3, [pc, #188]	; (8009348 <USBD_CDC_Init+0x1ec>)
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	f003 020f 	and.w	r2, r3, #15
 8009290:	6879      	ldr	r1, [r7, #4]
 8009292:	4613      	mov	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	440b      	add	r3, r1
 800929c:	3326      	adds	r3, #38	; 0x26
 800929e:	2210      	movs	r2, #16
 80092a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80092a2:	4b29      	ldr	r3, [pc, #164]	; (8009348 <USBD_CDC_Init+0x1ec>)
 80092a4:	7819      	ldrb	r1, [r3, #0]
 80092a6:	2308      	movs	r3, #8
 80092a8:	2203      	movs	r2, #3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f002 fb35 	bl	800b91a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80092b0:	4b25      	ldr	r3, [pc, #148]	; (8009348 <USBD_CDC_Init+0x1ec>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	f003 020f 	and.w	r2, r3, #15
 80092b8:	6879      	ldr	r1, [r7, #4]
 80092ba:	4613      	mov	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4413      	add	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	440b      	add	r3, r1
 80092c4:	3324      	adds	r3, #36	; 0x24
 80092c6:	2201      	movs	r2, #1
 80092c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	33b0      	adds	r3, #176	; 0xb0
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009300:	2302      	movs	r3, #2
 8009302:	e018      	b.n	8009336 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	7c1b      	ldrb	r3, [r3, #16]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10a      	bne.n	8009322 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800930c:	4b0d      	ldr	r3, [pc, #52]	; (8009344 <USBD_CDC_Init+0x1e8>)
 800930e:	7819      	ldrb	r1, [r3, #0]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f002 fbec 	bl	800baf8 <USBD_LL_PrepareReceive>
 8009320:	e008      	b.n	8009334 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009322:	4b08      	ldr	r3, [pc, #32]	; (8009344 <USBD_CDC_Init+0x1e8>)
 8009324:	7819      	ldrb	r1, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800932c:	2340      	movs	r3, #64	; 0x40
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f002 fbe2 	bl	800baf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	2000009f 	.word	0x2000009f
 8009344:	200000a0 	.word	0x200000a0
 8009348:	200000a1 	.word	0x200000a1

0800934c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009358:	4b3a      	ldr	r3, [pc, #232]	; (8009444 <USBD_CDC_DeInit+0xf8>)
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	4619      	mov	r1, r3
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f002 fb01 	bl	800b966 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009364:	4b37      	ldr	r3, [pc, #220]	; (8009444 <USBD_CDC_DeInit+0xf8>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	f003 020f 	and.w	r2, r3, #15
 800936c:	6879      	ldr	r1, [r7, #4]
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	440b      	add	r3, r1
 8009378:	3324      	adds	r3, #36	; 0x24
 800937a:	2200      	movs	r2, #0
 800937c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800937e:	4b32      	ldr	r3, [pc, #200]	; (8009448 <USBD_CDC_DeInit+0xfc>)
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f002 faee 	bl	800b966 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800938a:	4b2f      	ldr	r3, [pc, #188]	; (8009448 <USBD_CDC_DeInit+0xfc>)
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	f003 020f 	and.w	r2, r3, #15
 8009392:	6879      	ldr	r1, [r7, #4]
 8009394:	4613      	mov	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	440b      	add	r3, r1
 800939e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093a2:	2200      	movs	r2, #0
 80093a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80093a6:	4b29      	ldr	r3, [pc, #164]	; (800944c <USBD_CDC_DeInit+0x100>)
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f002 fada 	bl	800b966 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80093b2:	4b26      	ldr	r3, [pc, #152]	; (800944c <USBD_CDC_DeInit+0x100>)
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	f003 020f 	and.w	r2, r3, #15
 80093ba:	6879      	ldr	r1, [r7, #4]
 80093bc:	4613      	mov	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	440b      	add	r3, r1
 80093c6:	3324      	adds	r3, #36	; 0x24
 80093c8:	2200      	movs	r2, #0
 80093ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80093cc:	4b1f      	ldr	r3, [pc, #124]	; (800944c <USBD_CDC_DeInit+0x100>)
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	f003 020f 	and.w	r2, r3, #15
 80093d4:	6879      	ldr	r1, [r7, #4]
 80093d6:	4613      	mov	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	440b      	add	r3, r1
 80093e0:	3326      	adds	r3, #38	; 0x26
 80093e2:	2200      	movs	r2, #0
 80093e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	32b0      	adds	r2, #176	; 0xb0
 80093f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d01f      	beq.n	8009438 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	33b0      	adds	r3, #176	; 0xb0
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	32b0      	adds	r2, #176	; 0xb0
 8009416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800941a:	4618      	mov	r0, r3
 800941c:	f002 fbae 	bl	800bb7c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	32b0      	adds	r2, #176	; 0xb0
 800942a:	2100      	movs	r1, #0
 800942c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3708      	adds	r7, #8
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	2000009f 	.word	0x2000009f
 8009448:	200000a0 	.word	0x200000a0
 800944c:	200000a1 	.word	0x200000a1

08009450 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	32b0      	adds	r2, #176	; 0xb0
 8009464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009468:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800946a:	2300      	movs	r3, #0
 800946c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800947c:	2303      	movs	r3, #3
 800947e:	e0bf      	b.n	8009600 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009488:	2b00      	cmp	r3, #0
 800948a:	d050      	beq.n	800952e <USBD_CDC_Setup+0xde>
 800948c:	2b20      	cmp	r3, #32
 800948e:	f040 80af 	bne.w	80095f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	88db      	ldrh	r3, [r3, #6]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d03a      	beq.n	8009510 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	b25b      	sxtb	r3, r3
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	da1b      	bge.n	80094dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	33b0      	adds	r3, #176	; 0xb0
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80094ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80094bc:	683a      	ldr	r2, [r7, #0]
 80094be:	88d2      	ldrh	r2, [r2, #6]
 80094c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	88db      	ldrh	r3, [r3, #6]
 80094c6:	2b07      	cmp	r3, #7
 80094c8:	bf28      	it	cs
 80094ca:	2307      	movcs	r3, #7
 80094cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	89fa      	ldrh	r2, [r7, #14]
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f001 fd89 	bl	800afec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80094da:	e090      	b.n	80095fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	785a      	ldrb	r2, [r3, #1]
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	88db      	ldrh	r3, [r3, #6]
 80094ea:	2b3f      	cmp	r3, #63	; 0x3f
 80094ec:	d803      	bhi.n	80094f6 <USBD_CDC_Setup+0xa6>
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	88db      	ldrh	r3, [r3, #6]
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	e000      	b.n	80094f8 <USBD_CDC_Setup+0xa8>
 80094f6:	2240      	movs	r2, #64	; 0x40
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80094fe:	6939      	ldr	r1, [r7, #16]
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009506:	461a      	mov	r2, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f001 fd9b 	bl	800b044 <USBD_CtlPrepareRx>
      break;
 800950e:	e076      	b.n	80095fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	33b0      	adds	r3, #176	; 0xb0
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	7850      	ldrb	r0, [r2, #1]
 8009526:	2200      	movs	r2, #0
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	4798      	blx	r3
      break;
 800952c:	e067      	b.n	80095fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	785b      	ldrb	r3, [r3, #1]
 8009532:	2b0b      	cmp	r3, #11
 8009534:	d851      	bhi.n	80095da <USBD_CDC_Setup+0x18a>
 8009536:	a201      	add	r2, pc, #4	; (adr r2, 800953c <USBD_CDC_Setup+0xec>)
 8009538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953c:	0800956d 	.word	0x0800956d
 8009540:	080095e9 	.word	0x080095e9
 8009544:	080095db 	.word	0x080095db
 8009548:	080095db 	.word	0x080095db
 800954c:	080095db 	.word	0x080095db
 8009550:	080095db 	.word	0x080095db
 8009554:	080095db 	.word	0x080095db
 8009558:	080095db 	.word	0x080095db
 800955c:	080095db 	.word	0x080095db
 8009560:	080095db 	.word	0x080095db
 8009564:	08009597 	.word	0x08009597
 8009568:	080095c1 	.word	0x080095c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b03      	cmp	r3, #3
 8009576:	d107      	bne.n	8009588 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009578:	f107 030a 	add.w	r3, r7, #10
 800957c:	2202      	movs	r2, #2
 800957e:	4619      	mov	r1, r3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f001 fd33 	bl	800afec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009586:	e032      	b.n	80095ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 fcbd 	bl	800af0a <USBD_CtlError>
            ret = USBD_FAIL;
 8009590:	2303      	movs	r3, #3
 8009592:	75fb      	strb	r3, [r7, #23]
          break;
 8009594:	e02b      	b.n	80095ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b03      	cmp	r3, #3
 80095a0:	d107      	bne.n	80095b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80095a2:	f107 030d 	add.w	r3, r7, #13
 80095a6:	2201      	movs	r2, #1
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f001 fd1e 	bl	800afec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095b0:	e01d      	b.n	80095ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f001 fca8 	bl	800af0a <USBD_CtlError>
            ret = USBD_FAIL;
 80095ba:	2303      	movs	r3, #3
 80095bc:	75fb      	strb	r3, [r7, #23]
          break;
 80095be:	e016      	b.n	80095ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d00f      	beq.n	80095ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f001 fc9b 	bl	800af0a <USBD_CtlError>
            ret = USBD_FAIL;
 80095d4:	2303      	movs	r3, #3
 80095d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80095d8:	e008      	b.n	80095ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80095da:	6839      	ldr	r1, [r7, #0]
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f001 fc94 	bl	800af0a <USBD_CtlError>
          ret = USBD_FAIL;
 80095e2:	2303      	movs	r3, #3
 80095e4:	75fb      	strb	r3, [r7, #23]
          break;
 80095e6:	e002      	b.n	80095ee <USBD_CDC_Setup+0x19e>
          break;
 80095e8:	bf00      	nop
 80095ea:	e008      	b.n	80095fe <USBD_CDC_Setup+0x1ae>
          break;
 80095ec:	bf00      	nop
      }
      break;
 80095ee:	e006      	b.n	80095fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f001 fc89 	bl	800af0a <USBD_CtlError>
      ret = USBD_FAIL;
 80095f8:	2303      	movs	r3, #3
 80095fa:	75fb      	strb	r3, [r7, #23]
      break;
 80095fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80095fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3718      	adds	r7, #24
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800961a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	32b0      	adds	r2, #176	; 0xb0
 8009626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800962e:	2303      	movs	r3, #3
 8009630:	e065      	b.n	80096fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	32b0      	adds	r2, #176	; 0xb0
 800963c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009640:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009642:	78fb      	ldrb	r3, [r7, #3]
 8009644:	f003 020f 	and.w	r2, r3, #15
 8009648:	6879      	ldr	r1, [r7, #4]
 800964a:	4613      	mov	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	440b      	add	r3, r1
 8009654:	3318      	adds	r3, #24
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d02f      	beq.n	80096bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800965c:	78fb      	ldrb	r3, [r7, #3]
 800965e:	f003 020f 	and.w	r2, r3, #15
 8009662:	6879      	ldr	r1, [r7, #4]
 8009664:	4613      	mov	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	440b      	add	r3, r1
 800966e:	3318      	adds	r3, #24
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	78fb      	ldrb	r3, [r7, #3]
 8009674:	f003 010f 	and.w	r1, r3, #15
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	460b      	mov	r3, r1
 800967c:	00db      	lsls	r3, r3, #3
 800967e:	440b      	add	r3, r1
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4403      	add	r3, r0
 8009684:	331c      	adds	r3, #28
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	fbb2 f1f3 	udiv	r1, r2, r3
 800968c:	fb01 f303 	mul.w	r3, r1, r3
 8009690:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009692:	2b00      	cmp	r3, #0
 8009694:	d112      	bne.n	80096bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009696:	78fb      	ldrb	r3, [r7, #3]
 8009698:	f003 020f 	and.w	r2, r3, #15
 800969c:	6879      	ldr	r1, [r7, #4]
 800969e:	4613      	mov	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	440b      	add	r3, r1
 80096a8:	3318      	adds	r3, #24
 80096aa:	2200      	movs	r2, #0
 80096ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80096ae:	78f9      	ldrb	r1, [r7, #3]
 80096b0:	2300      	movs	r3, #0
 80096b2:	2200      	movs	r2, #0
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f002 f9fe 	bl	800bab6 <USBD_LL_Transmit>
 80096ba:	e01f      	b.n	80096fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	2200      	movs	r2, #0
 80096c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	33b0      	adds	r3, #176	; 0xb0
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4413      	add	r3, r2
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d010      	beq.n	80096fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	33b0      	adds	r3, #176	; 0xb0
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80096f8:	78fa      	ldrb	r2, [r7, #3]
 80096fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
 800970e:	460b      	mov	r3, r1
 8009710:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	32b0      	adds	r2, #176	; 0xb0
 800971c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009720:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	32b0      	adds	r2, #176	; 0xb0
 800972c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009734:	2303      	movs	r3, #3
 8009736:	e01a      	b.n	800976e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009738:	78fb      	ldrb	r3, [r7, #3]
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f002 f9fc 	bl	800bb3a <USBD_LL_GetRxDataSize>
 8009742:	4602      	mov	r2, r0
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	33b0      	adds	r3, #176	; 0xb0
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4413      	add	r3, r2
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009768:	4611      	mov	r1, r2
 800976a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	32b0      	adds	r2, #176	; 0xb0
 8009788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800978c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009794:	2303      	movs	r3, #3
 8009796:	e025      	b.n	80097e4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	33b0      	adds	r3, #176	; 0xb0
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4413      	add	r3, r2
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d01a      	beq.n	80097e2 <USBD_CDC_EP0_RxReady+0x6c>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80097b2:	2bff      	cmp	r3, #255	; 0xff
 80097b4:	d015      	beq.n	80097e2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	33b0      	adds	r3, #176	; 0xb0
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80097ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80097d6:	b292      	uxth	r2, r2
 80097d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	22ff      	movs	r2, #255	; 0xff
 80097de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80097f4:	2182      	movs	r1, #130	; 0x82
 80097f6:	4818      	ldr	r0, [pc, #96]	; (8009858 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80097f8:	f000 fd4f 	bl	800a29a <USBD_GetEpDesc>
 80097fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80097fe:	2101      	movs	r1, #1
 8009800:	4815      	ldr	r0, [pc, #84]	; (8009858 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009802:	f000 fd4a 	bl	800a29a <USBD_GetEpDesc>
 8009806:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009808:	2181      	movs	r1, #129	; 0x81
 800980a:	4813      	ldr	r0, [pc, #76]	; (8009858 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800980c:	f000 fd45 	bl	800a29a <USBD_GetEpDesc>
 8009810:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d002      	beq.n	800981e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	2210      	movs	r2, #16
 800981c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d006      	beq.n	8009832 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	2200      	movs	r2, #0
 8009828:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800982c:	711a      	strb	r2, [r3, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d006      	beq.n	8009846 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009840:	711a      	strb	r2, [r3, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2243      	movs	r2, #67	; 0x43
 800984a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800984c:	4b02      	ldr	r3, [pc, #8]	; (8009858 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800984e:	4618      	mov	r0, r3
 8009850:	3718      	adds	r7, #24
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	2000005c 	.word	0x2000005c

0800985c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009864:	2182      	movs	r1, #130	; 0x82
 8009866:	4818      	ldr	r0, [pc, #96]	; (80098c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009868:	f000 fd17 	bl	800a29a <USBD_GetEpDesc>
 800986c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800986e:	2101      	movs	r1, #1
 8009870:	4815      	ldr	r0, [pc, #84]	; (80098c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009872:	f000 fd12 	bl	800a29a <USBD_GetEpDesc>
 8009876:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009878:	2181      	movs	r1, #129	; 0x81
 800987a:	4813      	ldr	r0, [pc, #76]	; (80098c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800987c:	f000 fd0d 	bl	800a29a <USBD_GetEpDesc>
 8009880:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d002      	beq.n	800988e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	2210      	movs	r2, #16
 800988c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d006      	beq.n	80098a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	2200      	movs	r2, #0
 8009898:	711a      	strb	r2, [r3, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	f042 0202 	orr.w	r2, r2, #2
 80098a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d006      	beq.n	80098b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	711a      	strb	r2, [r3, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f042 0202 	orr.w	r2, r2, #2
 80098b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2243      	movs	r2, #67	; 0x43
 80098ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80098bc:	4b02      	ldr	r3, [pc, #8]	; (80098c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	2000005c 	.word	0x2000005c

080098cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80098d4:	2182      	movs	r1, #130	; 0x82
 80098d6:	4818      	ldr	r0, [pc, #96]	; (8009938 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80098d8:	f000 fcdf 	bl	800a29a <USBD_GetEpDesc>
 80098dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098de:	2101      	movs	r1, #1
 80098e0:	4815      	ldr	r0, [pc, #84]	; (8009938 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80098e2:	f000 fcda 	bl	800a29a <USBD_GetEpDesc>
 80098e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80098e8:	2181      	movs	r1, #129	; 0x81
 80098ea:	4813      	ldr	r0, [pc, #76]	; (8009938 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80098ec:	f000 fcd5 	bl	800a29a <USBD_GetEpDesc>
 80098f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	2210      	movs	r2, #16
 80098fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d006      	beq.n	8009912 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	2200      	movs	r2, #0
 8009908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800990c:	711a      	strb	r2, [r3, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d006      	beq.n	8009926 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009920:	711a      	strb	r2, [r3, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2243      	movs	r2, #67	; 0x43
 800992a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800992c:	4b02      	ldr	r3, [pc, #8]	; (8009938 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	2000005c 	.word	0x2000005c

0800993c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	220a      	movs	r2, #10
 8009948:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800994a:	4b03      	ldr	r3, [pc, #12]	; (8009958 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800994c:	4618      	mov	r0, r3
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	20000018 	.word	0x20000018

0800995c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800996c:	2303      	movs	r3, #3
 800996e:	e009      	b.n	8009984 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	33b0      	adds	r3, #176	; 0xb0
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	4413      	add	r3, r2
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009990:	b480      	push	{r7}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	32b0      	adds	r2, #176	; 0xb0
 80099a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80099b2:	2303      	movs	r3, #3
 80099b4:	e008      	b.n	80099c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	371c      	adds	r7, #28
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	32b0      	adds	r2, #176	; 0xb0
 80099e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d101      	bne.n	80099f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80099f4:	2303      	movs	r3, #3
 80099f6:	e004      	b.n	8009a02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3714      	adds	r7, #20
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
	...

08009a10 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	32b0      	adds	r2, #176	; 0xb0
 8009a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a26:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d101      	bne.n	8009a36 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009a32:	2303      	movs	r3, #3
 8009a34:	e025      	b.n	8009a82 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d11f      	bne.n	8009a80 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009a48:	4b10      	ldr	r3, [pc, #64]	; (8009a8c <USBD_CDC_TransmitPacket+0x7c>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	f003 020f 	and.w	r2, r3, #15
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4403      	add	r3, r0
 8009a62:	3318      	adds	r3, #24
 8009a64:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009a66:	4b09      	ldr	r3, [pc, #36]	; (8009a8c <USBD_CDC_TransmitPacket+0x7c>)
 8009a68:	7819      	ldrb	r1, [r3, #0]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f002 f81d 	bl	800bab6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	2000009f 	.word	0x2000009f

08009a90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	32b0      	adds	r2, #176	; 0xb0
 8009aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	32b0      	adds	r2, #176	; 0xb0
 8009ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d101      	bne.n	8009abe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009aba:	2303      	movs	r3, #3
 8009abc:	e018      	b.n	8009af0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	7c1b      	ldrb	r3, [r3, #16]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10a      	bne.n	8009adc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ac6:	4b0c      	ldr	r3, [pc, #48]	; (8009af8 <USBD_CDC_ReceivePacket+0x68>)
 8009ac8:	7819      	ldrb	r1, [r3, #0]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f002 f80f 	bl	800baf8 <USBD_LL_PrepareReceive>
 8009ada:	e008      	b.n	8009aee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009adc:	4b06      	ldr	r3, [pc, #24]	; (8009af8 <USBD_CDC_ReceivePacket+0x68>)
 8009ade:	7819      	ldrb	r1, [r3, #0]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ae6:	2340      	movs	r3, #64	; 0x40
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f002 f805 	bl	800baf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	200000a0 	.word	0x200000a0

08009afc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	4613      	mov	r3, r2
 8009b08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e01f      	b.n	8009b54 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	79fa      	ldrb	r2, [r7, #7]
 8009b46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f001 fe7f 	bl	800b84c <USBD_LL_Init>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e025      	b.n	8009bc0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	683a      	ldr	r2, [r7, #0]
 8009b78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	32ae      	adds	r2, #174	; 0xae
 8009b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00f      	beq.n	8009bb0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	32ae      	adds	r2, #174	; 0xae
 8009b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba0:	f107 020e 	add.w	r2, r7, #14
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	4798      	blx	r3
 8009ba8:	4602      	mov	r2, r0
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f001 fe87 	bl	800b8e4 <USBD_LL_Start>
 8009bd6:	4603      	mov	r3, r0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009be8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b084      	sub	sp, #16
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d009      	beq.n	8009c24 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	78fa      	ldrb	r2, [r7, #3]
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	4798      	blx	r3
 8009c20:	4603      	mov	r3, r0
 8009c22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b084      	sub	sp, #16
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
 8009c36:	460b      	mov	r3, r1
 8009c38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	78fa      	ldrb	r2, [r7, #3]
 8009c48:	4611      	mov	r1, r2
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	4798      	blx	r3
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009c54:	2303      	movs	r3, #3
 8009c56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b084      	sub	sp, #16
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c72:	6839      	ldr	r1, [r7, #0]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f001 f90e 	bl	800ae96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009c88:	461a      	mov	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c96:	f003 031f 	and.w	r3, r3, #31
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d01a      	beq.n	8009cd4 <USBD_LL_SetupStage+0x72>
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d822      	bhi.n	8009ce8 <USBD_LL_SetupStage+0x86>
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <USBD_LL_SetupStage+0x4a>
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d00a      	beq.n	8009cc0 <USBD_LL_SetupStage+0x5e>
 8009caa:	e01d      	b.n	8009ce8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fb65 	bl	800a384 <USBD_StdDevReq>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8009cbe:	e020      	b.n	8009d02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fbcd 	bl	800a468 <USBD_StdItfReq>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8009cd2:	e016      	b.n	8009d02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fc2f 	bl	800a540 <USBD_StdEPReq>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ce6:	e00c      	b.n	8009d02 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009cee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f001 fe54 	bl	800b9a4 <USBD_LL_StallEP>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8009d00:	bf00      	nop
  }

  return ret;
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	460b      	mov	r3, r1
 8009d16:	607a      	str	r2, [r7, #4]
 8009d18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009d1e:	7afb      	ldrb	r3, [r7, #11]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d16e      	bne.n	8009e02 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009d2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d32:	2b03      	cmp	r3, #3
 8009d34:	f040 8098 	bne.w	8009e68 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	689a      	ldr	r2, [r3, #8]
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d913      	bls.n	8009d6c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	689a      	ldr	r2, [r3, #8]
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	1ad2      	subs	r2, r2, r3
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	68da      	ldr	r2, [r3, #12]
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	bf28      	it	cs
 8009d5e:	4613      	movcs	r3, r2
 8009d60:	461a      	mov	r2, r3
 8009d62:	6879      	ldr	r1, [r7, #4]
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f001 f98a 	bl	800b07e <USBD_CtlContinueRx>
 8009d6a:	e07d      	b.n	8009e68 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d72:	f003 031f 	and.w	r3, r3, #31
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d014      	beq.n	8009da4 <USBD_LL_DataOutStage+0x98>
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d81d      	bhi.n	8009dba <USBD_LL_DataOutStage+0xae>
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d002      	beq.n	8009d88 <USBD_LL_DataOutStage+0x7c>
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d003      	beq.n	8009d8e <USBD_LL_DataOutStage+0x82>
 8009d86:	e018      	b.n	8009dba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	75bb      	strb	r3, [r7, #22]
            break;
 8009d8c:	e018      	b.n	8009dc0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	4619      	mov	r1, r3
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f000 fa64 	bl	800a266 <USBD_CoreFindIF>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	75bb      	strb	r3, [r7, #22]
            break;
 8009da2:	e00d      	b.n	8009dc0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	4619      	mov	r1, r3
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f000 fa66 	bl	800a280 <USBD_CoreFindEP>
 8009db4:	4603      	mov	r3, r0
 8009db6:	75bb      	strb	r3, [r7, #22]
            break;
 8009db8:	e002      	b.n	8009dc0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	75bb      	strb	r3, [r7, #22]
            break;
 8009dbe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009dc0:	7dbb      	ldrb	r3, [r7, #22]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d119      	bne.n	8009dfa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b03      	cmp	r3, #3
 8009dd0:	d113      	bne.n	8009dfa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009dd2:	7dba      	ldrb	r2, [r7, #22]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	32ae      	adds	r2, #174	; 0xae
 8009dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00b      	beq.n	8009dfa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009de2:	7dba      	ldrb	r2, [r7, #22]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009dea:	7dba      	ldrb	r2, [r7, #22]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	32ae      	adds	r2, #174	; 0xae
 8009df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f001 f950 	bl	800b0a0 <USBD_CtlSendStatus>
 8009e00:	e032      	b.n	8009e68 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009e02:	7afb      	ldrb	r3, [r7, #11]
 8009e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f000 fa37 	bl	800a280 <USBD_CoreFindEP>
 8009e12:	4603      	mov	r3, r0
 8009e14:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e16:	7dbb      	ldrb	r3, [r7, #22]
 8009e18:	2bff      	cmp	r3, #255	; 0xff
 8009e1a:	d025      	beq.n	8009e68 <USBD_LL_DataOutStage+0x15c>
 8009e1c:	7dbb      	ldrb	r3, [r7, #22]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d122      	bne.n	8009e68 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b03      	cmp	r3, #3
 8009e2c:	d117      	bne.n	8009e5e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009e2e:	7dba      	ldrb	r2, [r7, #22]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	32ae      	adds	r2, #174	; 0xae
 8009e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00f      	beq.n	8009e5e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009e3e:	7dba      	ldrb	r2, [r7, #22]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009e46:	7dba      	ldrb	r2, [r7, #22]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	32ae      	adds	r2, #174	; 0xae
 8009e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e50:	699b      	ldr	r3, [r3, #24]
 8009e52:	7afa      	ldrb	r2, [r7, #11]
 8009e54:	4611      	mov	r1, r2
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	4798      	blx	r3
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009e5e:	7dfb      	ldrb	r3, [r7, #23]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009e64:	7dfb      	ldrb	r3, [r7, #23]
 8009e66:	e000      	b.n	8009e6a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b086      	sub	sp, #24
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	607a      	str	r2, [r7, #4]
 8009e7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009e80:	7afb      	ldrb	r3, [r7, #11]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d16f      	bne.n	8009f66 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	3314      	adds	r3, #20
 8009e8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d15a      	bne.n	8009f4c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	689a      	ldr	r2, [r3, #8]
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d914      	bls.n	8009ecc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	689a      	ldr	r2, [r3, #8]
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	1ad2      	subs	r2, r2, r3
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	6879      	ldr	r1, [r7, #4]
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f001 f8b2 	bl	800b022 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f001 fe17 	bl	800baf8 <USBD_LL_PrepareReceive>
 8009eca:	e03f      	b.n	8009f4c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	68da      	ldr	r2, [r3, #12]
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d11c      	bne.n	8009f12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d316      	bcc.n	8009f12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	685a      	ldr	r2, [r3, #4]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d20f      	bcs.n	8009f12 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f001 f893 	bl	800b022 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f04:	2300      	movs	r3, #0
 8009f06:	2200      	movs	r2, #0
 8009f08:	2100      	movs	r1, #0
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f001 fdf4 	bl	800baf8 <USBD_LL_PrepareReceive>
 8009f10:	e01c      	b.n	8009f4c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d10f      	bne.n	8009f3e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d009      	beq.n	8009f3e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f3e:	2180      	movs	r1, #128	; 0x80
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f001 fd2f 	bl	800b9a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f001 f8bd 	bl	800b0c6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d03a      	beq.n	8009fcc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f7ff fe42 	bl	8009be0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009f64:	e032      	b.n	8009fcc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009f66:	7afb      	ldrb	r3, [r7, #11]
 8009f68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	4619      	mov	r1, r3
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f000 f985 	bl	800a280 <USBD_CoreFindEP>
 8009f76:	4603      	mov	r3, r0
 8009f78:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
 8009f7c:	2bff      	cmp	r3, #255	; 0xff
 8009f7e:	d025      	beq.n	8009fcc <USBD_LL_DataInStage+0x15a>
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d122      	bne.n	8009fcc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b03      	cmp	r3, #3
 8009f90:	d11c      	bne.n	8009fcc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009f92:	7dfa      	ldrb	r2, [r7, #23]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	32ae      	adds	r2, #174	; 0xae
 8009f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f9c:	695b      	ldr	r3, [r3, #20]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d014      	beq.n	8009fcc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009fa2:	7dfa      	ldrb	r2, [r7, #23]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009faa:	7dfa      	ldrb	r2, [r7, #23]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	32ae      	adds	r2, #174	; 0xae
 8009fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	7afa      	ldrb	r2, [r7, #11]
 8009fb8:	4611      	mov	r1, r2
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	4798      	blx	r3
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009fc2:	7dbb      	ldrb	r3, [r7, #22]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009fc8:	7dbb      	ldrb	r3, [r7, #22]
 8009fca:	e000      	b.n	8009fce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b084      	sub	sp, #16
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d014      	beq.n	800a03c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00e      	beq.n	800a03c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	6852      	ldr	r2, [r2, #4]
 800a02a:	b2d2      	uxtb	r2, r2
 800a02c:	4611      	mov	r1, r2
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	4798      	blx	r3
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d001      	beq.n	800a03c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a038:	2303      	movs	r3, #3
 800a03a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a03c:	2340      	movs	r3, #64	; 0x40
 800a03e:	2200      	movs	r2, #0
 800a040:	2100      	movs	r1, #0
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f001 fc69 	bl	800b91a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2240      	movs	r2, #64	; 0x40
 800a054:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a058:	2340      	movs	r3, #64	; 0x40
 800a05a:	2200      	movs	r2, #0
 800a05c:	2180      	movs	r1, #128	; 0x80
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f001 fc5b 	bl	800b91a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2240      	movs	r2, #64	; 0x40
 800a06e:	621a      	str	r2, [r3, #32]

  return ret;
 800a070:	7bfb      	ldrb	r3, [r7, #15]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a07a:	b480      	push	{r7}
 800a07c:	b083      	sub	sp, #12
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
 800a082:	460b      	mov	r3, r1
 800a084:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	78fa      	ldrb	r2, [r7, #3]
 800a08a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	370c      	adds	r7, #12
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a09a:	b480      	push	{r7}
 800a09c:	b083      	sub	sp, #12
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b04      	cmp	r3, #4
 800a0ac:	d006      	beq.n	800a0bc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0b4:	b2da      	uxtb	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2204      	movs	r2, #4
 800a0c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	b083      	sub	sp, #12
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d106      	bne.n	800a0f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	370c      	adds	r7, #12
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b082      	sub	sp, #8
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a110:	b2db      	uxtb	r3, r3
 800a112:	2b03      	cmp	r3, #3
 800a114:	d110      	bne.n	800a138 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00b      	beq.n	800a138 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a126:	69db      	ldr	r3, [r3, #28]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d005      	beq.n	800a138 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a132:	69db      	ldr	r3, [r3, #28]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b082      	sub	sp, #8
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	460b      	mov	r3, r1
 800a14c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	32ae      	adds	r2, #174	; 0xae
 800a158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a160:	2303      	movs	r3, #3
 800a162:	e01c      	b.n	800a19e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b03      	cmp	r3, #3
 800a16e:	d115      	bne.n	800a19c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	32ae      	adds	r2, #174	; 0xae
 800a17a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17e:	6a1b      	ldr	r3, [r3, #32]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00b      	beq.n	800a19c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	32ae      	adds	r2, #174	; 0xae
 800a18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	78fa      	ldrb	r2, [r7, #3]
 800a196:	4611      	mov	r1, r2
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b082      	sub	sp, #8
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	32ae      	adds	r2, #174	; 0xae
 800a1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d101      	bne.n	800a1c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e01c      	b.n	800a202 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b03      	cmp	r3, #3
 800a1d2:	d115      	bne.n	800a200 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	32ae      	adds	r2, #174	; 0xae
 800a1de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00b      	beq.n	800a200 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	32ae      	adds	r2, #174	; 0xae
 800a1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	78fa      	ldrb	r2, [r7, #3]
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3708      	adds	r7, #8
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b083      	sub	sp, #12
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00e      	beq.n	800a25c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	6852      	ldr	r2, [r2, #4]
 800a24a:	b2d2      	uxtb	r2, r2
 800a24c:	4611      	mov	r1, r2
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	4798      	blx	r3
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d001      	beq.n	800a25c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a258:	2303      	movs	r3, #3
 800a25a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a266:	b480      	push	{r7}
 800a268:	b083      	sub	sp, #12
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	460b      	mov	r3, r1
 800a270:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a272:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a274:	4618      	mov	r0, r3
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	460b      	mov	r3, r1
 800a28a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a28c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a28e:	4618      	mov	r0, r3
 800a290:	370c      	adds	r7, #12
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr

0800a29a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b086      	sub	sp, #24
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	885b      	ldrh	r3, [r3, #2]
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d920      	bls.n	800a304 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a2ca:	e013      	b.n	800a2f4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a2cc:	f107 030a 	add.w	r3, r7, #10
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	6978      	ldr	r0, [r7, #20]
 800a2d4:	f000 f81b 	bl	800a30e <USBD_GetNextDesc>
 800a2d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	785b      	ldrb	r3, [r3, #1]
 800a2de:	2b05      	cmp	r3, #5
 800a2e0:	d108      	bne.n	800a2f4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	789b      	ldrb	r3, [r3, #2]
 800a2ea:	78fa      	ldrb	r2, [r7, #3]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d008      	beq.n	800a302 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	885b      	ldrh	r3, [r3, #2]
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	897b      	ldrh	r3, [r7, #10]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d8e5      	bhi.n	800a2cc <USBD_GetEpDesc+0x32>
 800a300:	e000      	b.n	800a304 <USBD_GetEpDesc+0x6a>
          break;
 800a302:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a304:	693b      	ldr	r3, [r7, #16]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a30e:	b480      	push	{r7}
 800a310:	b085      	sub	sp, #20
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	881a      	ldrh	r2, [r3, #0]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	b29b      	uxth	r3, r3
 800a326:	4413      	add	r3, r2
 800a328:	b29a      	uxth	r2, r3
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	461a      	mov	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4413      	add	r3, r2
 800a338:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a33a:	68fb      	ldr	r3, [r7, #12]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a348:	b480      	push	{r7}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	3301      	adds	r3, #1
 800a35e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a366:	8a3b      	ldrh	r3, [r7, #16]
 800a368:	021b      	lsls	r3, r3, #8
 800a36a:	b21a      	sxth	r2, r3
 800a36c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a370:	4313      	orrs	r3, r2
 800a372:	b21b      	sxth	r3, r3
 800a374:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a376:	89fb      	ldrh	r3, [r7, #14]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	371c      	adds	r7, #28
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a38e:	2300      	movs	r3, #0
 800a390:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a39a:	2b40      	cmp	r3, #64	; 0x40
 800a39c:	d005      	beq.n	800a3aa <USBD_StdDevReq+0x26>
 800a39e:	2b40      	cmp	r3, #64	; 0x40
 800a3a0:	d857      	bhi.n	800a452 <USBD_StdDevReq+0xce>
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00f      	beq.n	800a3c6 <USBD_StdDevReq+0x42>
 800a3a6:	2b20      	cmp	r3, #32
 800a3a8:	d153      	bne.n	800a452 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	32ae      	adds	r2, #174	; 0xae
 800a3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	6839      	ldr	r1, [r7, #0]
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	4798      	blx	r3
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a3c4:	e04a      	b.n	800a45c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	785b      	ldrb	r3, [r3, #1]
 800a3ca:	2b09      	cmp	r3, #9
 800a3cc:	d83b      	bhi.n	800a446 <USBD_StdDevReq+0xc2>
 800a3ce:	a201      	add	r2, pc, #4	; (adr r2, 800a3d4 <USBD_StdDevReq+0x50>)
 800a3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d4:	0800a429 	.word	0x0800a429
 800a3d8:	0800a43d 	.word	0x0800a43d
 800a3dc:	0800a447 	.word	0x0800a447
 800a3e0:	0800a433 	.word	0x0800a433
 800a3e4:	0800a447 	.word	0x0800a447
 800a3e8:	0800a407 	.word	0x0800a407
 800a3ec:	0800a3fd 	.word	0x0800a3fd
 800a3f0:	0800a447 	.word	0x0800a447
 800a3f4:	0800a41f 	.word	0x0800a41f
 800a3f8:	0800a411 	.word	0x0800a411
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a3fc:	6839      	ldr	r1, [r7, #0]
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 fa3c 	bl	800a87c <USBD_GetDescriptor>
          break;
 800a404:	e024      	b.n	800a450 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 fba1 	bl	800ab50 <USBD_SetAddress>
          break;
 800a40e:	e01f      	b.n	800a450 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 fbe0 	bl	800abd8 <USBD_SetConfig>
 800a418:	4603      	mov	r3, r0
 800a41a:	73fb      	strb	r3, [r7, #15]
          break;
 800a41c:	e018      	b.n	800a450 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a41e:	6839      	ldr	r1, [r7, #0]
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fc83 	bl	800ad2c <USBD_GetConfig>
          break;
 800a426:	e013      	b.n	800a450 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a428:	6839      	ldr	r1, [r7, #0]
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 fcb4 	bl	800ad98 <USBD_GetStatus>
          break;
 800a430:	e00e      	b.n	800a450 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fce3 	bl	800ae00 <USBD_SetFeature>
          break;
 800a43a:	e009      	b.n	800a450 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a43c:	6839      	ldr	r1, [r7, #0]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fd07 	bl	800ae52 <USBD_ClrFeature>
          break;
 800a444:	e004      	b.n	800a450 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 fd5e 	bl	800af0a <USBD_CtlError>
          break;
 800a44e:	bf00      	nop
      }
      break;
 800a450:	e004      	b.n	800a45c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a452:	6839      	ldr	r1, [r7, #0]
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 fd58 	bl	800af0a <USBD_CtlError>
      break;
 800a45a:	bf00      	nop
  }

  return ret;
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop

0800a468 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a472:	2300      	movs	r3, #0
 800a474:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a47e:	2b40      	cmp	r3, #64	; 0x40
 800a480:	d005      	beq.n	800a48e <USBD_StdItfReq+0x26>
 800a482:	2b40      	cmp	r3, #64	; 0x40
 800a484:	d852      	bhi.n	800a52c <USBD_StdItfReq+0xc4>
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <USBD_StdItfReq+0x26>
 800a48a:	2b20      	cmp	r3, #32
 800a48c:	d14e      	bne.n	800a52c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a494:	b2db      	uxtb	r3, r3
 800a496:	3b01      	subs	r3, #1
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d840      	bhi.n	800a51e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	889b      	ldrh	r3, [r3, #4]
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d836      	bhi.n	800a514 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	889b      	ldrh	r3, [r3, #4]
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f7ff fed9 	bl	800a266 <USBD_CoreFindIF>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4b8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ba:	2bff      	cmp	r3, #255	; 0xff
 800a4bc:	d01d      	beq.n	800a4fa <USBD_StdItfReq+0x92>
 800a4be:	7bbb      	ldrb	r3, [r7, #14]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d11a      	bne.n	800a4fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a4c4:	7bba      	ldrb	r2, [r7, #14]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	32ae      	adds	r2, #174	; 0xae
 800a4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00f      	beq.n	800a4f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a4d4:	7bba      	ldrb	r2, [r7, #14]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a4dc:	7bba      	ldrb	r2, [r7, #14]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	32ae      	adds	r2, #174	; 0xae
 800a4e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	6839      	ldr	r1, [r7, #0]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	4798      	blx	r3
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a4f2:	e004      	b.n	800a4fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a4f8:	e001      	b.n	800a4fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	88db      	ldrh	r3, [r3, #6]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d110      	bne.n	800a528 <USBD_StdItfReq+0xc0>
 800a506:	7bfb      	ldrb	r3, [r7, #15]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10d      	bne.n	800a528 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fdc7 	bl	800b0a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a512:	e009      	b.n	800a528 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a514:	6839      	ldr	r1, [r7, #0]
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fcf7 	bl	800af0a <USBD_CtlError>
          break;
 800a51c:	e004      	b.n	800a528 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a51e:	6839      	ldr	r1, [r7, #0]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fcf2 	bl	800af0a <USBD_CtlError>
          break;
 800a526:	e000      	b.n	800a52a <USBD_StdItfReq+0xc2>
          break;
 800a528:	bf00      	nop
      }
      break;
 800a52a:	e004      	b.n	800a536 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fceb 	bl	800af0a <USBD_CtlError>
      break;
 800a534:	bf00      	nop
  }

  return ret;
 800a536:	7bfb      	ldrb	r3, [r7, #15]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	889b      	ldrh	r3, [r3, #4]
 800a552:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a55c:	2b40      	cmp	r3, #64	; 0x40
 800a55e:	d007      	beq.n	800a570 <USBD_StdEPReq+0x30>
 800a560:	2b40      	cmp	r3, #64	; 0x40
 800a562:	f200 817f 	bhi.w	800a864 <USBD_StdEPReq+0x324>
 800a566:	2b00      	cmp	r3, #0
 800a568:	d02a      	beq.n	800a5c0 <USBD_StdEPReq+0x80>
 800a56a:	2b20      	cmp	r3, #32
 800a56c:	f040 817a 	bne.w	800a864 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a570:	7bbb      	ldrb	r3, [r7, #14]
 800a572:	4619      	mov	r1, r3
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f7ff fe83 	bl	800a280 <USBD_CoreFindEP>
 800a57a:	4603      	mov	r3, r0
 800a57c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a57e:	7b7b      	ldrb	r3, [r7, #13]
 800a580:	2bff      	cmp	r3, #255	; 0xff
 800a582:	f000 8174 	beq.w	800a86e <USBD_StdEPReq+0x32e>
 800a586:	7b7b      	ldrb	r3, [r7, #13]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f040 8170 	bne.w	800a86e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a58e:	7b7a      	ldrb	r2, [r7, #13]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a596:	7b7a      	ldrb	r2, [r7, #13]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	32ae      	adds	r2, #174	; 0xae
 800a59c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f000 8163 	beq.w	800a86e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a5a8:	7b7a      	ldrb	r2, [r7, #13]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	32ae      	adds	r2, #174	; 0xae
 800a5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	4798      	blx	r3
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a5be:	e156      	b.n	800a86e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	785b      	ldrb	r3, [r3, #1]
 800a5c4:	2b03      	cmp	r3, #3
 800a5c6:	d008      	beq.n	800a5da <USBD_StdEPReq+0x9a>
 800a5c8:	2b03      	cmp	r3, #3
 800a5ca:	f300 8145 	bgt.w	800a858 <USBD_StdEPReq+0x318>
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 809b 	beq.w	800a70a <USBD_StdEPReq+0x1ca>
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d03c      	beq.n	800a652 <USBD_StdEPReq+0x112>
 800a5d8:	e13e      	b.n	800a858 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d002      	beq.n	800a5ec <USBD_StdEPReq+0xac>
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	d016      	beq.n	800a618 <USBD_StdEPReq+0xd8>
 800a5ea:	e02c      	b.n	800a646 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5ec:	7bbb      	ldrb	r3, [r7, #14]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00d      	beq.n	800a60e <USBD_StdEPReq+0xce>
 800a5f2:	7bbb      	ldrb	r3, [r7, #14]
 800a5f4:	2b80      	cmp	r3, #128	; 0x80
 800a5f6:	d00a      	beq.n	800a60e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5f8:	7bbb      	ldrb	r3, [r7, #14]
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f001 f9d1 	bl	800b9a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a602:	2180      	movs	r1, #128	; 0x80
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f001 f9cd 	bl	800b9a4 <USBD_LL_StallEP>
 800a60a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a60c:	e020      	b.n	800a650 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a60e:	6839      	ldr	r1, [r7, #0]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fc7a 	bl	800af0a <USBD_CtlError>
              break;
 800a616:	e01b      	b.n	800a650 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	885b      	ldrh	r3, [r3, #2]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10e      	bne.n	800a63e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a620:	7bbb      	ldrb	r3, [r7, #14]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00b      	beq.n	800a63e <USBD_StdEPReq+0xfe>
 800a626:	7bbb      	ldrb	r3, [r7, #14]
 800a628:	2b80      	cmp	r3, #128	; 0x80
 800a62a:	d008      	beq.n	800a63e <USBD_StdEPReq+0xfe>
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	88db      	ldrh	r3, [r3, #6]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d104      	bne.n	800a63e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a634:	7bbb      	ldrb	r3, [r7, #14]
 800a636:	4619      	mov	r1, r3
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f001 f9b3 	bl	800b9a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fd2e 	bl	800b0a0 <USBD_CtlSendStatus>

              break;
 800a644:	e004      	b.n	800a650 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fc5e 	bl	800af0a <USBD_CtlError>
              break;
 800a64e:	bf00      	nop
          }
          break;
 800a650:	e107      	b.n	800a862 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d002      	beq.n	800a664 <USBD_StdEPReq+0x124>
 800a65e:	2b03      	cmp	r3, #3
 800a660:	d016      	beq.n	800a690 <USBD_StdEPReq+0x150>
 800a662:	e04b      	b.n	800a6fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a664:	7bbb      	ldrb	r3, [r7, #14]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00d      	beq.n	800a686 <USBD_StdEPReq+0x146>
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
 800a66c:	2b80      	cmp	r3, #128	; 0x80
 800a66e:	d00a      	beq.n	800a686 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a670:	7bbb      	ldrb	r3, [r7, #14]
 800a672:	4619      	mov	r1, r3
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f001 f995 	bl	800b9a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a67a:	2180      	movs	r1, #128	; 0x80
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f001 f991 	bl	800b9a4 <USBD_LL_StallEP>
 800a682:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a684:	e040      	b.n	800a708 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a686:	6839      	ldr	r1, [r7, #0]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fc3e 	bl	800af0a <USBD_CtlError>
              break;
 800a68e:	e03b      	b.n	800a708 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	885b      	ldrh	r3, [r3, #2]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d136      	bne.n	800a706 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a698:	7bbb      	ldrb	r3, [r7, #14]
 800a69a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d004      	beq.n	800a6ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f001 f99b 	bl	800b9e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fcf7 	bl	800b0a0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a6b2:	7bbb      	ldrb	r3, [r7, #14]
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7ff fde2 	bl	800a280 <USBD_CoreFindEP>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6c0:	7b7b      	ldrb	r3, [r7, #13]
 800a6c2:	2bff      	cmp	r3, #255	; 0xff
 800a6c4:	d01f      	beq.n	800a706 <USBD_StdEPReq+0x1c6>
 800a6c6:	7b7b      	ldrb	r3, [r7, #13]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d11c      	bne.n	800a706 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a6cc:	7b7a      	ldrb	r2, [r7, #13]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a6d4:	7b7a      	ldrb	r2, [r7, #13]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	32ae      	adds	r2, #174	; 0xae
 800a6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d010      	beq.n	800a706 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a6e4:	7b7a      	ldrb	r2, [r7, #13]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	32ae      	adds	r2, #174	; 0xae
 800a6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	4798      	blx	r3
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a6fa:	e004      	b.n	800a706 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a6fc:	6839      	ldr	r1, [r7, #0]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 fc03 	bl	800af0a <USBD_CtlError>
              break;
 800a704:	e000      	b.n	800a708 <USBD_StdEPReq+0x1c8>
              break;
 800a706:	bf00      	nop
          }
          break;
 800a708:	e0ab      	b.n	800a862 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b02      	cmp	r3, #2
 800a714:	d002      	beq.n	800a71c <USBD_StdEPReq+0x1dc>
 800a716:	2b03      	cmp	r3, #3
 800a718:	d032      	beq.n	800a780 <USBD_StdEPReq+0x240>
 800a71a:	e097      	b.n	800a84c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a71c:	7bbb      	ldrb	r3, [r7, #14]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d007      	beq.n	800a732 <USBD_StdEPReq+0x1f2>
 800a722:	7bbb      	ldrb	r3, [r7, #14]
 800a724:	2b80      	cmp	r3, #128	; 0x80
 800a726:	d004      	beq.n	800a732 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 fbed 	bl	800af0a <USBD_CtlError>
                break;
 800a730:	e091      	b.n	800a856 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a732:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a736:	2b00      	cmp	r3, #0
 800a738:	da0b      	bge.n	800a752 <USBD_StdEPReq+0x212>
 800a73a:	7bbb      	ldrb	r3, [r7, #14]
 800a73c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a740:	4613      	mov	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	4413      	add	r3, r2
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	3310      	adds	r3, #16
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	4413      	add	r3, r2
 800a74e:	3304      	adds	r3, #4
 800a750:	e00b      	b.n	800a76a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a752:	7bbb      	ldrb	r3, [r7, #14]
 800a754:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a758:	4613      	mov	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4413      	add	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	4413      	add	r3, r2
 800a768:	3304      	adds	r3, #4
 800a76a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	2200      	movs	r2, #0
 800a770:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	2202      	movs	r2, #2
 800a776:	4619      	mov	r1, r3
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fc37 	bl	800afec <USBD_CtlSendData>
              break;
 800a77e:	e06a      	b.n	800a856 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a780:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a784:	2b00      	cmp	r3, #0
 800a786:	da11      	bge.n	800a7ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a788:	7bbb      	ldrb	r3, [r7, #14]
 800a78a:	f003 020f 	and.w	r2, r3, #15
 800a78e:	6879      	ldr	r1, [r7, #4]
 800a790:	4613      	mov	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	440b      	add	r3, r1
 800a79a:	3324      	adds	r3, #36	; 0x24
 800a79c:	881b      	ldrh	r3, [r3, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d117      	bne.n	800a7d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fbb0 	bl	800af0a <USBD_CtlError>
                  break;
 800a7aa:	e054      	b.n	800a856 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	f003 020f 	and.w	r2, r3, #15
 800a7b2:	6879      	ldr	r1, [r7, #4]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	4413      	add	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	440b      	add	r3, r1
 800a7be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a7c2:	881b      	ldrh	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d104      	bne.n	800a7d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a7c8:	6839      	ldr	r1, [r7, #0]
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fb9d 	bl	800af0a <USBD_CtlError>
                  break;
 800a7d0:	e041      	b.n	800a856 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	da0b      	bge.n	800a7f2 <USBD_StdEPReq+0x2b2>
 800a7da:	7bbb      	ldrb	r3, [r7, #14]
 800a7dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	3310      	adds	r3, #16
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	e00b      	b.n	800a80a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7f2:	7bbb      	ldrb	r3, [r7, #14]
 800a7f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	4413      	add	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	4413      	add	r3, r2
 800a808:	3304      	adds	r3, #4
 800a80a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d002      	beq.n	800a818 <USBD_StdEPReq+0x2d8>
 800a812:	7bbb      	ldrb	r3, [r7, #14]
 800a814:	2b80      	cmp	r3, #128	; 0x80
 800a816:	d103      	bne.n	800a820 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	2200      	movs	r2, #0
 800a81c:	601a      	str	r2, [r3, #0]
 800a81e:	e00e      	b.n	800a83e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a820:	7bbb      	ldrb	r3, [r7, #14]
 800a822:	4619      	mov	r1, r3
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 f8fb 	bl	800ba20 <USBD_LL_IsStallEP>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d003      	beq.n	800a838 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	2201      	movs	r2, #1
 800a834:	601a      	str	r2, [r3, #0]
 800a836:	e002      	b.n	800a83e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	2200      	movs	r2, #0
 800a83c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2202      	movs	r2, #2
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fbd1 	bl	800afec <USBD_CtlSendData>
              break;
 800a84a:	e004      	b.n	800a856 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fb5b 	bl	800af0a <USBD_CtlError>
              break;
 800a854:	bf00      	nop
          }
          break;
 800a856:	e004      	b.n	800a862 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fb55 	bl	800af0a <USBD_CtlError>
          break;
 800a860:	bf00      	nop
      }
      break;
 800a862:	e005      	b.n	800a870 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a864:	6839      	ldr	r1, [r7, #0]
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fb4f 	bl	800af0a <USBD_CtlError>
      break;
 800a86c:	e000      	b.n	800a870 <USBD_StdEPReq+0x330>
      break;
 800a86e:	bf00      	nop
  }

  return ret;
 800a870:	7bfb      	ldrb	r3, [r7, #15]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
	...

0800a87c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a886:	2300      	movs	r3, #0
 800a888:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a88e:	2300      	movs	r3, #0
 800a890:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	885b      	ldrh	r3, [r3, #2]
 800a896:	0a1b      	lsrs	r3, r3, #8
 800a898:	b29b      	uxth	r3, r3
 800a89a:	3b01      	subs	r3, #1
 800a89c:	2b06      	cmp	r3, #6
 800a89e:	f200 8128 	bhi.w	800aaf2 <USBD_GetDescriptor+0x276>
 800a8a2:	a201      	add	r2, pc, #4	; (adr r2, 800a8a8 <USBD_GetDescriptor+0x2c>)
 800a8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a8:	0800a8c5 	.word	0x0800a8c5
 800a8ac:	0800a8dd 	.word	0x0800a8dd
 800a8b0:	0800a91d 	.word	0x0800a91d
 800a8b4:	0800aaf3 	.word	0x0800aaf3
 800a8b8:	0800aaf3 	.word	0x0800aaf3
 800a8bc:	0800aa93 	.word	0x0800aa93
 800a8c0:	0800aabf 	.word	0x0800aabf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	7c12      	ldrb	r2, [r2, #16]
 800a8d0:	f107 0108 	add.w	r1, r7, #8
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	4798      	blx	r3
 800a8d8:	60f8      	str	r0, [r7, #12]
      break;
 800a8da:	e112      	b.n	800ab02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	7c1b      	ldrb	r3, [r3, #16]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d10d      	bne.n	800a900 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ec:	f107 0208 	add.w	r2, r7, #8
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	4798      	blx	r3
 800a8f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	2202      	movs	r2, #2
 800a8fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a8fe:	e100      	b.n	800ab02 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a908:	f107 0208 	add.w	r2, r7, #8
 800a90c:	4610      	mov	r0, r2
 800a90e:	4798      	blx	r3
 800a910:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	3301      	adds	r3, #1
 800a916:	2202      	movs	r2, #2
 800a918:	701a      	strb	r2, [r3, #0]
      break;
 800a91a:	e0f2      	b.n	800ab02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	885b      	ldrh	r3, [r3, #2]
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b05      	cmp	r3, #5
 800a924:	f200 80ac 	bhi.w	800aa80 <USBD_GetDescriptor+0x204>
 800a928:	a201      	add	r2, pc, #4	; (adr r2, 800a930 <USBD_GetDescriptor+0xb4>)
 800a92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92e:	bf00      	nop
 800a930:	0800a949 	.word	0x0800a949
 800a934:	0800a97d 	.word	0x0800a97d
 800a938:	0800a9b1 	.word	0x0800a9b1
 800a93c:	0800a9e5 	.word	0x0800a9e5
 800a940:	0800aa19 	.word	0x0800aa19
 800a944:	0800aa4d 	.word	0x0800aa4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00b      	beq.n	800a96c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	7c12      	ldrb	r2, [r2, #16]
 800a960:	f107 0108 	add.w	r1, r7, #8
 800a964:	4610      	mov	r0, r2
 800a966:	4798      	blx	r3
 800a968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a96a:	e091      	b.n	800aa90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 facb 	bl	800af0a <USBD_CtlError>
            err++;
 800a974:	7afb      	ldrb	r3, [r7, #11]
 800a976:	3301      	adds	r3, #1
 800a978:	72fb      	strb	r3, [r7, #11]
          break;
 800a97a:	e089      	b.n	800aa90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00b      	beq.n	800a9a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	7c12      	ldrb	r2, [r2, #16]
 800a994:	f107 0108 	add.w	r1, r7, #8
 800a998:	4610      	mov	r0, r2
 800a99a:	4798      	blx	r3
 800a99c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a99e:	e077      	b.n	800aa90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fab1 	bl	800af0a <USBD_CtlError>
            err++;
 800a9a8:	7afb      	ldrb	r3, [r7, #11]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a9ae:	e06f      	b.n	800aa90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00b      	beq.n	800a9d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	7c12      	ldrb	r2, [r2, #16]
 800a9c8:	f107 0108 	add.w	r1, r7, #8
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	4798      	blx	r3
 800a9d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9d2:	e05d      	b.n	800aa90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fa97 	bl	800af0a <USBD_CtlError>
            err++;
 800a9dc:	7afb      	ldrb	r3, [r7, #11]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9e2:	e055      	b.n	800aa90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00b      	beq.n	800aa08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	7c12      	ldrb	r2, [r2, #16]
 800a9fc:	f107 0108 	add.w	r1, r7, #8
 800aa00:	4610      	mov	r0, r2
 800aa02:	4798      	blx	r3
 800aa04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa06:	e043      	b.n	800aa90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fa7d 	bl	800af0a <USBD_CtlError>
            err++;
 800aa10:	7afb      	ldrb	r3, [r7, #11]
 800aa12:	3301      	adds	r3, #1
 800aa14:	72fb      	strb	r3, [r7, #11]
          break;
 800aa16:	e03b      	b.n	800aa90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa1e:	695b      	ldr	r3, [r3, #20]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00b      	beq.n	800aa3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	7c12      	ldrb	r2, [r2, #16]
 800aa30:	f107 0108 	add.w	r1, r7, #8
 800aa34:	4610      	mov	r0, r2
 800aa36:	4798      	blx	r3
 800aa38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa3a:	e029      	b.n	800aa90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fa63 	bl	800af0a <USBD_CtlError>
            err++;
 800aa44:	7afb      	ldrb	r3, [r7, #11]
 800aa46:	3301      	adds	r3, #1
 800aa48:	72fb      	strb	r3, [r7, #11]
          break;
 800aa4a:	e021      	b.n	800aa90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa52:	699b      	ldr	r3, [r3, #24]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00b      	beq.n	800aa70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa5e:	699b      	ldr	r3, [r3, #24]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	7c12      	ldrb	r2, [r2, #16]
 800aa64:	f107 0108 	add.w	r1, r7, #8
 800aa68:	4610      	mov	r0, r2
 800aa6a:	4798      	blx	r3
 800aa6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa6e:	e00f      	b.n	800aa90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa70:	6839      	ldr	r1, [r7, #0]
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fa49 	bl	800af0a <USBD_CtlError>
            err++;
 800aa78:	7afb      	ldrb	r3, [r7, #11]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa7e:	e007      	b.n	800aa90 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fa41 	bl	800af0a <USBD_CtlError>
          err++;
 800aa88:	7afb      	ldrb	r3, [r7, #11]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aa8e:	bf00      	nop
      }
      break;
 800aa90:	e037      	b.n	800ab02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	7c1b      	ldrb	r3, [r3, #16]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d109      	bne.n	800aaae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa2:	f107 0208 	add.w	r2, r7, #8
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	4798      	blx	r3
 800aaaa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aaac:	e029      	b.n	800ab02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aaae:	6839      	ldr	r1, [r7, #0]
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 fa2a 	bl	800af0a <USBD_CtlError>
        err++;
 800aab6:	7afb      	ldrb	r3, [r7, #11]
 800aab8:	3301      	adds	r3, #1
 800aaba:	72fb      	strb	r3, [r7, #11]
      break;
 800aabc:	e021      	b.n	800ab02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	7c1b      	ldrb	r3, [r3, #16]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10d      	bne.n	800aae2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aace:	f107 0208 	add.w	r2, r7, #8
 800aad2:	4610      	mov	r0, r2
 800aad4:	4798      	blx	r3
 800aad6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	3301      	adds	r3, #1
 800aadc:	2207      	movs	r2, #7
 800aade:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aae0:	e00f      	b.n	800ab02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 fa10 	bl	800af0a <USBD_CtlError>
        err++;
 800aaea:	7afb      	ldrb	r3, [r7, #11]
 800aaec:	3301      	adds	r3, #1
 800aaee:	72fb      	strb	r3, [r7, #11]
      break;
 800aaf0:	e007      	b.n	800ab02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fa08 	bl	800af0a <USBD_CtlError>
      err++;
 800aafa:	7afb      	ldrb	r3, [r7, #11]
 800aafc:	3301      	adds	r3, #1
 800aafe:	72fb      	strb	r3, [r7, #11]
      break;
 800ab00:	bf00      	nop
  }

  if (err != 0U)
 800ab02:	7afb      	ldrb	r3, [r7, #11]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d11e      	bne.n	800ab46 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	88db      	ldrh	r3, [r3, #6]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d016      	beq.n	800ab3e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ab10:	893b      	ldrh	r3, [r7, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00e      	beq.n	800ab34 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	88da      	ldrh	r2, [r3, #6]
 800ab1a:	893b      	ldrh	r3, [r7, #8]
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	bf28      	it	cs
 800ab20:	4613      	movcs	r3, r2
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab26:	893b      	ldrh	r3, [r7, #8]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	68f9      	ldr	r1, [r7, #12]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fa5d 	bl	800afec <USBD_CtlSendData>
 800ab32:	e009      	b.n	800ab48 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f9e7 	bl	800af0a <USBD_CtlError>
 800ab3c:	e004      	b.n	800ab48 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 faae 	bl	800b0a0 <USBD_CtlSendStatus>
 800ab44:	e000      	b.n	800ab48 <USBD_GetDescriptor+0x2cc>
    return;
 800ab46:	bf00      	nop
  }
}
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop

0800ab50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	889b      	ldrh	r3, [r3, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d131      	bne.n	800abc6 <USBD_SetAddress+0x76>
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	88db      	ldrh	r3, [r3, #6]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d12d      	bne.n	800abc6 <USBD_SetAddress+0x76>
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	885b      	ldrh	r3, [r3, #2]
 800ab6e:	2b7f      	cmp	r3, #127	; 0x7f
 800ab70:	d829      	bhi.n	800abc6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	885b      	ldrh	r3, [r3, #2]
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b03      	cmp	r3, #3
 800ab88:	d104      	bne.n	800ab94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ab8a:	6839      	ldr	r1, [r7, #0]
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 f9bc 	bl	800af0a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab92:	e01d      	b.n	800abd0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	7bfa      	ldrb	r2, [r7, #15]
 800ab98:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 ff69 	bl	800ba78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fa7a 	bl	800b0a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800abac:	7bfb      	ldrb	r3, [r7, #15]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d004      	beq.n	800abbc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2202      	movs	r2, #2
 800abb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abba:	e009      	b.n	800abd0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abc4:	e004      	b.n	800abd0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800abc6:	6839      	ldr	r1, [r7, #0]
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 f99e 	bl	800af0a <USBD_CtlError>
  }
}
 800abce:	bf00      	nop
 800abd0:	bf00      	nop
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	885b      	ldrh	r3, [r3, #2]
 800abea:	b2da      	uxtb	r2, r3
 800abec:	4b4e      	ldr	r3, [pc, #312]	; (800ad28 <USBD_SetConfig+0x150>)
 800abee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800abf0:	4b4d      	ldr	r3, [pc, #308]	; (800ad28 <USBD_SetConfig+0x150>)
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d905      	bls.n	800ac04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f985 	bl	800af0a <USBD_CtlError>
    return USBD_FAIL;
 800ac00:	2303      	movs	r3, #3
 800ac02:	e08c      	b.n	800ad1e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d002      	beq.n	800ac16 <USBD_SetConfig+0x3e>
 800ac10:	2b03      	cmp	r3, #3
 800ac12:	d029      	beq.n	800ac68 <USBD_SetConfig+0x90>
 800ac14:	e075      	b.n	800ad02 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ac16:	4b44      	ldr	r3, [pc, #272]	; (800ad28 <USBD_SetConfig+0x150>)
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d020      	beq.n	800ac60 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ac1e:	4b42      	ldr	r3, [pc, #264]	; (800ad28 <USBD_SetConfig+0x150>)
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	461a      	mov	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac28:	4b3f      	ldr	r3, [pc, #252]	; (800ad28 <USBD_SetConfig+0x150>)
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7fe ffe1 	bl	8009bf6 <USBD_SetClassConfig>
 800ac34:	4603      	mov	r3, r0
 800ac36:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d008      	beq.n	800ac50 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 f962 	bl	800af0a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2202      	movs	r2, #2
 800ac4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac4e:	e065      	b.n	800ad1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fa25 	bl	800b0a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2203      	movs	r2, #3
 800ac5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ac5e:	e05d      	b.n	800ad1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 fa1d 	bl	800b0a0 <USBD_CtlSendStatus>
      break;
 800ac66:	e059      	b.n	800ad1c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ac68:	4b2f      	ldr	r3, [pc, #188]	; (800ad28 <USBD_SetConfig+0x150>)
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d112      	bne.n	800ac96 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ac78:	4b2b      	ldr	r3, [pc, #172]	; (800ad28 <USBD_SetConfig+0x150>)
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac82:	4b29      	ldr	r3, [pc, #164]	; (800ad28 <USBD_SetConfig+0x150>)
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7fe ffd0 	bl	8009c2e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fa06 	bl	800b0a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac94:	e042      	b.n	800ad1c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ac96:	4b24      	ldr	r3, [pc, #144]	; (800ad28 <USBD_SetConfig+0x150>)
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d02a      	beq.n	800acfa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	4619      	mov	r1, r3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7fe ffbe 	bl	8009c2e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800acb2:	4b1d      	ldr	r3, [pc, #116]	; (800ad28 <USBD_SetConfig+0x150>)
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	461a      	mov	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800acbc:	4b1a      	ldr	r3, [pc, #104]	; (800ad28 <USBD_SetConfig+0x150>)
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	4619      	mov	r1, r3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7fe ff97 	bl	8009bf6 <USBD_SetClassConfig>
 800acc8:	4603      	mov	r3, r0
 800acca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800accc:	7bfb      	ldrb	r3, [r7, #15]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d00f      	beq.n	800acf2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800acd2:	6839      	ldr	r1, [r7, #0]
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f918 	bl	800af0a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	4619      	mov	r1, r3
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7fe ffa3 	bl	8009c2e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2202      	movs	r2, #2
 800acec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800acf0:	e014      	b.n	800ad1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f9d4 	bl	800b0a0 <USBD_CtlSendStatus>
      break;
 800acf8:	e010      	b.n	800ad1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f9d0 	bl	800b0a0 <USBD_CtlSendStatus>
      break;
 800ad00:	e00c      	b.n	800ad1c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ad02:	6839      	ldr	r1, [r7, #0]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 f900 	bl	800af0a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad0a:	4b07      	ldr	r3, [pc, #28]	; (800ad28 <USBD_SetConfig+0x150>)
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	4619      	mov	r1, r3
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f7fe ff8c 	bl	8009c2e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ad16:	2303      	movs	r3, #3
 800ad18:	73fb      	strb	r3, [r7, #15]
      break;
 800ad1a:	bf00      	nop
  }

  return ret;
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	20000ad4 	.word	0x20000ad4

0800ad2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	88db      	ldrh	r3, [r3, #6]
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d004      	beq.n	800ad48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad3e:	6839      	ldr	r1, [r7, #0]
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 f8e2 	bl	800af0a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad46:	e023      	b.n	800ad90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	dc02      	bgt.n	800ad5a <USBD_GetConfig+0x2e>
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	dc03      	bgt.n	800ad60 <USBD_GetConfig+0x34>
 800ad58:	e015      	b.n	800ad86 <USBD_GetConfig+0x5a>
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d00b      	beq.n	800ad76 <USBD_GetConfig+0x4a>
 800ad5e:	e012      	b.n	800ad86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	3308      	adds	r3, #8
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 f93c 	bl	800afec <USBD_CtlSendData>
        break;
 800ad74:	e00c      	b.n	800ad90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	3304      	adds	r3, #4
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f934 	bl	800afec <USBD_CtlSendData>
        break;
 800ad84:	e004      	b.n	800ad90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f8be 	bl	800af0a <USBD_CtlError>
        break;
 800ad8e:	bf00      	nop
}
 800ad90:	bf00      	nop
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	3b01      	subs	r3, #1
 800adac:	2b02      	cmp	r3, #2
 800adae:	d81e      	bhi.n	800adee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	88db      	ldrh	r3, [r3, #6]
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d004      	beq.n	800adc2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 f8a5 	bl	800af0a <USBD_CtlError>
        break;
 800adc0:	e01a      	b.n	800adf8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2201      	movs	r2, #1
 800adc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800adce:	2b00      	cmp	r3, #0
 800add0:	d005      	beq.n	800adde <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	f043 0202 	orr.w	r2, r3, #2
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	330c      	adds	r3, #12
 800ade2:	2202      	movs	r2, #2
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f900 	bl	800afec <USBD_CtlSendData>
      break;
 800adec:	e004      	b.n	800adf8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f88a 	bl	800af0a <USBD_CtlError>
      break;
 800adf6:	bf00      	nop
  }
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	885b      	ldrh	r3, [r3, #2]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d107      	bne.n	800ae22 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f940 	bl	800b0a0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ae20:	e013      	b.n	800ae4a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	885b      	ldrh	r3, [r3, #2]
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	d10b      	bne.n	800ae42 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	889b      	ldrh	r3, [r3, #4]
 800ae2e:	0a1b      	lsrs	r3, r3, #8
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f930 	bl	800b0a0 <USBD_CtlSendStatus>
}
 800ae40:	e003      	b.n	800ae4a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f860 	bl	800af0a <USBD_CtlError>
}
 800ae4a:	bf00      	nop
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b082      	sub	sp, #8
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
 800ae5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	3b01      	subs	r3, #1
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	d80b      	bhi.n	800ae82 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	885b      	ldrh	r3, [r3, #2]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d10c      	bne.n	800ae8c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f910 	bl	800b0a0 <USBD_CtlSendStatus>
      }
      break;
 800ae80:	e004      	b.n	800ae8c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f840 	bl	800af0a <USBD_CtlError>
      break;
 800ae8a:	e000      	b.n	800ae8e <USBD_ClrFeature+0x3c>
      break;
 800ae8c:	bf00      	nop
  }
}
 800ae8e:	bf00      	nop
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b084      	sub	sp, #16
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	781a      	ldrb	r2, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	781a      	ldrb	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	3301      	adds	r3, #1
 800aebe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f7ff fa41 	bl	800a348 <SWAPBYTE>
 800aec6:	4603      	mov	r3, r0
 800aec8:	461a      	mov	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	3301      	adds	r3, #1
 800aed2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	3301      	adds	r3, #1
 800aed8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f7ff fa34 	bl	800a348 <SWAPBYTE>
 800aee0:	4603      	mov	r3, r0
 800aee2:	461a      	mov	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	3301      	adds	r3, #1
 800aeec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	3301      	adds	r3, #1
 800aef2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f7ff fa27 	bl	800a348 <SWAPBYTE>
 800aefa:	4603      	mov	r3, r0
 800aefc:	461a      	mov	r2, r3
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	80da      	strh	r2, [r3, #6]
}
 800af02:	bf00      	nop
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b082      	sub	sp, #8
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
 800af12:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800af14:	2180      	movs	r1, #128	; 0x80
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fd44 	bl	800b9a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800af1c:	2100      	movs	r1, #0
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 fd40 	bl	800b9a4 <USBD_LL_StallEP>
}
 800af24:	bf00      	nop
 800af26:	3708      	adds	r7, #8
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b086      	sub	sp, #24
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af38:	2300      	movs	r3, #0
 800af3a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d036      	beq.n	800afb0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800af46:	6938      	ldr	r0, [r7, #16]
 800af48:	f000 f836 	bl	800afb8 <USBD_GetLen>
 800af4c:	4603      	mov	r3, r0
 800af4e:	3301      	adds	r3, #1
 800af50:	b29b      	uxth	r3, r3
 800af52:	005b      	lsls	r3, r3, #1
 800af54:	b29a      	uxth	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800af5a:	7dfb      	ldrb	r3, [r7, #23]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	4413      	add	r3, r2
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	7812      	ldrb	r2, [r2, #0]
 800af64:	701a      	strb	r2, [r3, #0]
  idx++;
 800af66:	7dfb      	ldrb	r3, [r7, #23]
 800af68:	3301      	adds	r3, #1
 800af6a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800af6c:	7dfb      	ldrb	r3, [r7, #23]
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	4413      	add	r3, r2
 800af72:	2203      	movs	r2, #3
 800af74:	701a      	strb	r2, [r3, #0]
  idx++;
 800af76:	7dfb      	ldrb	r3, [r7, #23]
 800af78:	3301      	adds	r3, #1
 800af7a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800af7c:	e013      	b.n	800afa6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800af7e:	7dfb      	ldrb	r3, [r7, #23]
 800af80:	68ba      	ldr	r2, [r7, #8]
 800af82:	4413      	add	r3, r2
 800af84:	693a      	ldr	r2, [r7, #16]
 800af86:	7812      	ldrb	r2, [r2, #0]
 800af88:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	3301      	adds	r3, #1
 800af8e:	613b      	str	r3, [r7, #16]
    idx++;
 800af90:	7dfb      	ldrb	r3, [r7, #23]
 800af92:	3301      	adds	r3, #1
 800af94:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800af96:	7dfb      	ldrb	r3, [r7, #23]
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	4413      	add	r3, r2
 800af9c:	2200      	movs	r2, #0
 800af9e:	701a      	strb	r2, [r3, #0]
    idx++;
 800afa0:	7dfb      	ldrb	r3, [r7, #23]
 800afa2:	3301      	adds	r3, #1
 800afa4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1e7      	bne.n	800af7e <USBD_GetString+0x52>
 800afae:	e000      	b.n	800afb2 <USBD_GetString+0x86>
    return;
 800afb0:	bf00      	nop
  }
}
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800afc0:	2300      	movs	r3, #0
 800afc2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800afc8:	e005      	b.n	800afd6 <USBD_GetLen+0x1e>
  {
    len++;
 800afca:	7bfb      	ldrb	r3, [r7, #15]
 800afcc:	3301      	adds	r3, #1
 800afce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	3301      	adds	r3, #1
 800afd4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1f5      	bne.n	800afca <USBD_GetLen+0x12>
  }

  return len;
 800afde:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3714      	adds	r7, #20
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2202      	movs	r2, #2
 800affc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	2100      	movs	r1, #0
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f000 fd4f 	bl	800bab6 <USBD_LL_Transmit>

  return USBD_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	60f8      	str	r0, [r7, #12]
 800b02a:	60b9      	str	r1, [r7, #8]
 800b02c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	68ba      	ldr	r2, [r7, #8]
 800b032:	2100      	movs	r1, #0
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f000 fd3e 	bl	800bab6 <USBD_LL_Transmit>

  return USBD_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2203      	movs	r2, #3
 800b054:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	68ba      	ldr	r2, [r7, #8]
 800b06c:	2100      	movs	r1, #0
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f000 fd42 	bl	800baf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b084      	sub	sp, #16
 800b082:	af00      	add	r7, sp, #0
 800b084:	60f8      	str	r0, [r7, #12]
 800b086:	60b9      	str	r1, [r7, #8]
 800b088:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	2100      	movs	r1, #0
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f000 fd31 	bl	800baf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2204      	movs	r2, #4
 800b0ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 fcfd 	bl	800bab6 <USBD_LL_Transmit>

  return USBD_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2205      	movs	r2, #5
 800b0d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	2200      	movs	r2, #0
 800b0da:	2100      	movs	r1, #0
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fd0b 	bl	800baf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	4912      	ldr	r1, [pc, #72]	; (800b13c <MX_USB_DEVICE_Init+0x50>)
 800b0f4:	4812      	ldr	r0, [pc, #72]	; (800b140 <MX_USB_DEVICE_Init+0x54>)
 800b0f6:	f7fe fd01 	bl	8009afc <USBD_Init>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d001      	beq.n	800b104 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b100:	f7f6 f87c 	bl	80011fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b104:	490f      	ldr	r1, [pc, #60]	; (800b144 <MX_USB_DEVICE_Init+0x58>)
 800b106:	480e      	ldr	r0, [pc, #56]	; (800b140 <MX_USB_DEVICE_Init+0x54>)
 800b108:	f7fe fd28 	bl	8009b5c <USBD_RegisterClass>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d001      	beq.n	800b116 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b112:	f7f6 f873 	bl	80011fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b116:	490c      	ldr	r1, [pc, #48]	; (800b148 <MX_USB_DEVICE_Init+0x5c>)
 800b118:	4809      	ldr	r0, [pc, #36]	; (800b140 <MX_USB_DEVICE_Init+0x54>)
 800b11a:	f7fe fc1f 	bl	800995c <USBD_CDC_RegisterInterface>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d001      	beq.n	800b128 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b124:	f7f6 f86a 	bl	80011fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b128:	4805      	ldr	r0, [pc, #20]	; (800b140 <MX_USB_DEVICE_Init+0x54>)
 800b12a:	f7fe fd4d 	bl	8009bc8 <USBD_Start>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d001      	beq.n	800b138 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b134:	f7f6 f862 	bl	80011fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b138:	bf00      	nop
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	200000c0 	.word	0x200000c0
 800b140:	20000ad8 	.word	0x20000ad8
 800b144:	20000024 	.word	0x20000024
 800b148:	200000ac 	.word	0x200000ac

0800b14c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b150:	2200      	movs	r2, #0
 800b152:	4905      	ldr	r1, [pc, #20]	; (800b168 <CDC_Init_FS+0x1c>)
 800b154:	4805      	ldr	r0, [pc, #20]	; (800b16c <CDC_Init_FS+0x20>)
 800b156:	f7fe fc1b 	bl	8009990 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b15a:	4905      	ldr	r1, [pc, #20]	; (800b170 <CDC_Init_FS+0x24>)
 800b15c:	4803      	ldr	r0, [pc, #12]	; (800b16c <CDC_Init_FS+0x20>)
 800b15e:	f7fe fc39 	bl	80099d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b162:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b164:	4618      	mov	r0, r3
 800b166:	bd80      	pop	{r7, pc}
 800b168:	200015b4 	.word	0x200015b4
 800b16c:	20000ad8 	.word	0x20000ad8
 800b170:	20000db4 	.word	0x20000db4

0800b174 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b174:	b480      	push	{r7}
 800b176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b178:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	4603      	mov	r3, r0
 800b18c:	6039      	str	r1, [r7, #0]
 800b18e:	71fb      	strb	r3, [r7, #7]
 800b190:	4613      	mov	r3, r2
 800b192:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b194:	79fb      	ldrb	r3, [r7, #7]
 800b196:	2b23      	cmp	r3, #35	; 0x23
 800b198:	f200 80a3 	bhi.w	800b2e2 <CDC_Control_FS+0x15e>
 800b19c:	a201      	add	r2, pc, #4	; (adr r2, 800b1a4 <CDC_Control_FS+0x20>)
 800b19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a2:	bf00      	nop
 800b1a4:	0800b2e3 	.word	0x0800b2e3
 800b1a8:	0800b2e3 	.word	0x0800b2e3
 800b1ac:	0800b2e3 	.word	0x0800b2e3
 800b1b0:	0800b2e3 	.word	0x0800b2e3
 800b1b4:	0800b2e3 	.word	0x0800b2e3
 800b1b8:	0800b2e3 	.word	0x0800b2e3
 800b1bc:	0800b2e3 	.word	0x0800b2e3
 800b1c0:	0800b2e3 	.word	0x0800b2e3
 800b1c4:	0800b2e3 	.word	0x0800b2e3
 800b1c8:	0800b2e3 	.word	0x0800b2e3
 800b1cc:	0800b2e3 	.word	0x0800b2e3
 800b1d0:	0800b2e3 	.word	0x0800b2e3
 800b1d4:	0800b2e3 	.word	0x0800b2e3
 800b1d8:	0800b2e3 	.word	0x0800b2e3
 800b1dc:	0800b2e3 	.word	0x0800b2e3
 800b1e0:	0800b2e3 	.word	0x0800b2e3
 800b1e4:	0800b2e3 	.word	0x0800b2e3
 800b1e8:	0800b2e3 	.word	0x0800b2e3
 800b1ec:	0800b2e3 	.word	0x0800b2e3
 800b1f0:	0800b2e3 	.word	0x0800b2e3
 800b1f4:	0800b2e3 	.word	0x0800b2e3
 800b1f8:	0800b2e3 	.word	0x0800b2e3
 800b1fc:	0800b2e3 	.word	0x0800b2e3
 800b200:	0800b2e3 	.word	0x0800b2e3
 800b204:	0800b2e3 	.word	0x0800b2e3
 800b208:	0800b2e3 	.word	0x0800b2e3
 800b20c:	0800b2e3 	.word	0x0800b2e3
 800b210:	0800b2e3 	.word	0x0800b2e3
 800b214:	0800b2e3 	.word	0x0800b2e3
 800b218:	0800b2e3 	.word	0x0800b2e3
 800b21c:	0800b2e3 	.word	0x0800b2e3
 800b220:	0800b2e3 	.word	0x0800b2e3
 800b224:	0800b235 	.word	0x0800b235
 800b228:	0800b28f 	.word	0x0800b28f
 800b22c:	0800b2e3 	.word	0x0800b2e3
 800b230:	0800b2e3 	.word	0x0800b2e3
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	Linecoding.bitrate = (uint32_t)(pbuf[0]);
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	461a      	mov	r2, r3
 800b23a:	4b2e      	ldr	r3, [pc, #184]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b23c:	601a      	str	r2, [r3, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 800b23e:	4b2d      	ldr	r3, [pc, #180]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	683a      	ldr	r2, [r7, #0]
 800b244:	3201      	adds	r2, #1
 800b246:	7812      	ldrb	r2, [r2, #0]
 800b248:	0212      	lsls	r2, r2, #8
 800b24a:	4313      	orrs	r3, r2
 800b24c:	4a29      	ldr	r2, [pc, #164]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b24e:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 800b250:	4b28      	ldr	r3, [pc, #160]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	683a      	ldr	r2, [r7, #0]
 800b256:	3202      	adds	r2, #2
 800b258:	7812      	ldrb	r2, [r2, #0]
 800b25a:	0412      	lsls	r2, r2, #16
 800b25c:	4313      	orrs	r3, r2
 800b25e:	4a25      	ldr	r2, [pc, #148]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b260:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 800b262:	4b24      	ldr	r3, [pc, #144]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	3203      	adds	r2, #3
 800b26a:	7812      	ldrb	r2, [r2, #0]
 800b26c:	0612      	lsls	r2, r2, #24
 800b26e:	4313      	orrs	r3, r2
 800b270:	4a20      	ldr	r2, [pc, #128]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b272:	6013      	str	r3, [r2, #0]
    	Linecoding.format = pbuf[4];
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	791a      	ldrb	r2, [r3, #4]
 800b278:	4b1e      	ldr	r3, [pc, #120]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b27a:	711a      	strb	r2, [r3, #4]
    	Linecoding.paritytype = pbuf[5];
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	795a      	ldrb	r2, [r3, #5]
 800b280:	4b1c      	ldr	r3, [pc, #112]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b282:	715a      	strb	r2, [r3, #5]
    	Linecoding.datatype = pbuf[6];
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	799a      	ldrb	r2, [r3, #6]
 800b288:	4b1a      	ldr	r3, [pc, #104]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b28a:	719a      	strb	r2, [r3, #6]
    break;
 800b28c:	e02a      	b.n	800b2e4 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(Linecoding.bitrate);
 800b28e:	4b19      	ldr	r3, [pc, #100]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	b2da      	uxtb	r2, r3
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(Linecoding.bitrate>>8);
 800b298:	4b16      	ldr	r3, [pc, #88]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	0a1a      	lsrs	r2, r3, #8
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	b2d2      	uxtb	r2, r2
 800b2a4:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(Linecoding.bitrate>>16);
 800b2a6:	4b13      	ldr	r3, [pc, #76]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	0c1a      	lsrs	r2, r3, #16
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	3302      	adds	r3, #2
 800b2b0:	b2d2      	uxtb	r2, r2
 800b2b2:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(Linecoding.bitrate>>24);
 800b2b4:	4b0f      	ldr	r3, [pc, #60]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	0e1a      	lsrs	r2, r3, #24
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	3303      	adds	r3, #3
 800b2be:	b2d2      	uxtb	r2, r2
 800b2c0:	701a      	strb	r2, [r3, #0]
      pbuf[4] = Linecoding.format;
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	3304      	adds	r3, #4
 800b2c6:	4a0b      	ldr	r2, [pc, #44]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b2c8:	7912      	ldrb	r2, [r2, #4]
 800b2ca:	701a      	strb	r2, [r3, #0]
      pbuf[5] = Linecoding.paritytype;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	3305      	adds	r3, #5
 800b2d0:	4a08      	ldr	r2, [pc, #32]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b2d2:	7952      	ldrb	r2, [r2, #5]
 800b2d4:	701a      	strb	r2, [r3, #0]
      pbuf[6] = Linecoding.datatype;
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	3306      	adds	r3, #6
 800b2da:	4a06      	ldr	r2, [pc, #24]	; (800b2f4 <CDC_Control_FS+0x170>)
 800b2dc:	7992      	ldrb	r2, [r2, #6]
 800b2de:	701a      	strb	r2, [r3, #0]
    break;
 800b2e0:	e000      	b.n	800b2e4 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b2e2:	bf00      	nop
  }

  return (USBD_OK);
 800b2e4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	200000a4 	.word	0x200000a4

0800b2f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b302:	6879      	ldr	r1, [r7, #4]
 800b304:	480e      	ldr	r0, [pc, #56]	; (800b340 <CDC_Receive_FS+0x48>)
 800b306:	f7fe fb65 	bl	80099d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b30a:	480d      	ldr	r0, [pc, #52]	; (800b340 <CDC_Receive_FS+0x48>)
 800b30c:	f7fe fbc0 	bl	8009a90 <USBD_CDC_ReceivePacket>

  for(int i=0; i<*Len; i++)
 800b310:	2300      	movs	r3, #0
 800b312:	60fb      	str	r3, [r7, #12]
 800b314:	e009      	b.n	800b32a <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	4413      	add	r3, r2
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	4618      	mov	r0, r3
 800b320:	f7f6 fa5a 	bl	80017d8 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3301      	adds	r3, #1
 800b328:	60fb      	str	r3, [r7, #12]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	429a      	cmp	r2, r3
 800b332:	d8f0      	bhi.n	800b316 <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 800b334:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	20000ad8 	.word	0x20000ad8

0800b344 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	460b      	mov	r3, r1
 800b34e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b350:	2300      	movs	r3, #0
 800b352:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b354:	4b0d      	ldr	r3, [pc, #52]	; (800b38c <CDC_Transmit_FS+0x48>)
 800b356:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b35a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b362:	2b00      	cmp	r3, #0
 800b364:	d001      	beq.n	800b36a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b366:	2301      	movs	r3, #1
 800b368:	e00b      	b.n	800b382 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b36a:	887b      	ldrh	r3, [r7, #2]
 800b36c:	461a      	mov	r2, r3
 800b36e:	6879      	ldr	r1, [r7, #4]
 800b370:	4806      	ldr	r0, [pc, #24]	; (800b38c <CDC_Transmit_FS+0x48>)
 800b372:	f7fe fb0d 	bl	8009990 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b376:	4805      	ldr	r0, [pc, #20]	; (800b38c <CDC_Transmit_FS+0x48>)
 800b378:	f7fe fb4a 	bl	8009a10 <USBD_CDC_TransmitPacket>
 800b37c:	4603      	mov	r3, r0
 800b37e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b380:	7bfb      	ldrb	r3, [r7, #15]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	20000ad8 	.word	0x20000ad8

0800b390 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b390:	b480      	push	{r7}
 800b392:	b087      	sub	sp, #28
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	4613      	mov	r3, r2
 800b39c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b3a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	371c      	adds	r7, #28
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
	...

0800b3b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	6039      	str	r1, [r7, #0]
 800b3be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	2212      	movs	r2, #18
 800b3c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b3c6:	4b03      	ldr	r3, [pc, #12]	; (800b3d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr
 800b3d4:	200000dc 	.word	0x200000dc

0800b3d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	4603      	mov	r3, r0
 800b3e0:	6039      	str	r1, [r7, #0]
 800b3e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	2204      	movs	r2, #4
 800b3e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b3ea:	4b03      	ldr	r3, [pc, #12]	; (800b3f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr
 800b3f8:	200000f0 	.word	0x200000f0

0800b3fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	4603      	mov	r3, r0
 800b404:	6039      	str	r1, [r7, #0]
 800b406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b408:	79fb      	ldrb	r3, [r7, #7]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d105      	bne.n	800b41a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b40e:	683a      	ldr	r2, [r7, #0]
 800b410:	4907      	ldr	r1, [pc, #28]	; (800b430 <USBD_FS_ProductStrDescriptor+0x34>)
 800b412:	4808      	ldr	r0, [pc, #32]	; (800b434 <USBD_FS_ProductStrDescriptor+0x38>)
 800b414:	f7ff fd8a 	bl	800af2c <USBD_GetString>
 800b418:	e004      	b.n	800b424 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	4904      	ldr	r1, [pc, #16]	; (800b430 <USBD_FS_ProductStrDescriptor+0x34>)
 800b41e:	4805      	ldr	r0, [pc, #20]	; (800b434 <USBD_FS_ProductStrDescriptor+0x38>)
 800b420:	f7ff fd84 	bl	800af2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b424:	4b02      	ldr	r3, [pc, #8]	; (800b430 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b426:	4618      	mov	r0, r3
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	20001db4 	.word	0x20001db4
 800b434:	0800f1e8 	.word	0x0800f1e8

0800b438 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	4603      	mov	r3, r0
 800b440:	6039      	str	r1, [r7, #0]
 800b442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b444:	683a      	ldr	r2, [r7, #0]
 800b446:	4904      	ldr	r1, [pc, #16]	; (800b458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b448:	4804      	ldr	r0, [pc, #16]	; (800b45c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b44a:	f7ff fd6f 	bl	800af2c <USBD_GetString>
  return USBD_StrDesc;
 800b44e:	4b02      	ldr	r3, [pc, #8]	; (800b458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b450:	4618      	mov	r0, r3
 800b452:	3708      	adds	r7, #8
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	20001db4 	.word	0x20001db4
 800b45c:	0800f200 	.word	0x0800f200

0800b460 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	4603      	mov	r3, r0
 800b468:	6039      	str	r1, [r7, #0]
 800b46a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	221a      	movs	r2, #26
 800b470:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b472:	f000 f843 	bl	800b4fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b476:	4b02      	ldr	r3, [pc, #8]	; (800b480 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	200000f4 	.word	0x200000f4

0800b484 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	4603      	mov	r3, r0
 800b48c:	6039      	str	r1, [r7, #0]
 800b48e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b490:	79fb      	ldrb	r3, [r7, #7]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d105      	bne.n	800b4a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b496:	683a      	ldr	r2, [r7, #0]
 800b498:	4907      	ldr	r1, [pc, #28]	; (800b4b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b49a:	4808      	ldr	r0, [pc, #32]	; (800b4bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b49c:	f7ff fd46 	bl	800af2c <USBD_GetString>
 800b4a0:	e004      	b.n	800b4ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	4904      	ldr	r1, [pc, #16]	; (800b4b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4a6:	4805      	ldr	r0, [pc, #20]	; (800b4bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4a8:	f7ff fd40 	bl	800af2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4ac:	4b02      	ldr	r3, [pc, #8]	; (800b4b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20001db4 	.word	0x20001db4
 800b4bc:	0800f214 	.word	0x0800f214

0800b4c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	6039      	str	r1, [r7, #0]
 800b4ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b4cc:	79fb      	ldrb	r3, [r7, #7]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d105      	bne.n	800b4de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4d2:	683a      	ldr	r2, [r7, #0]
 800b4d4:	4907      	ldr	r1, [pc, #28]	; (800b4f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b4d6:	4808      	ldr	r0, [pc, #32]	; (800b4f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b4d8:	f7ff fd28 	bl	800af2c <USBD_GetString>
 800b4dc:	e004      	b.n	800b4e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	4904      	ldr	r1, [pc, #16]	; (800b4f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b4e2:	4805      	ldr	r0, [pc, #20]	; (800b4f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b4e4:	f7ff fd22 	bl	800af2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4e8:	4b02      	ldr	r3, [pc, #8]	; (800b4f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	20001db4 	.word	0x20001db4
 800b4f8:	0800f220 	.word	0x0800f220

0800b4fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b502:	4b0f      	ldr	r3, [pc, #60]	; (800b540 <Get_SerialNum+0x44>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b508:	4b0e      	ldr	r3, [pc, #56]	; (800b544 <Get_SerialNum+0x48>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b50e:	4b0e      	ldr	r3, [pc, #56]	; (800b548 <Get_SerialNum+0x4c>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b514:	68fa      	ldr	r2, [r7, #12]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	4413      	add	r3, r2
 800b51a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d009      	beq.n	800b536 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b522:	2208      	movs	r2, #8
 800b524:	4909      	ldr	r1, [pc, #36]	; (800b54c <Get_SerialNum+0x50>)
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f000 f814 	bl	800b554 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b52c:	2204      	movs	r2, #4
 800b52e:	4908      	ldr	r1, [pc, #32]	; (800b550 <Get_SerialNum+0x54>)
 800b530:	68b8      	ldr	r0, [r7, #8]
 800b532:	f000 f80f 	bl	800b554 <IntToUnicode>
  }
}
 800b536:	bf00      	nop
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	1fff7a10 	.word	0x1fff7a10
 800b544:	1fff7a14 	.word	0x1fff7a14
 800b548:	1fff7a18 	.word	0x1fff7a18
 800b54c:	200000f6 	.word	0x200000f6
 800b550:	20000106 	.word	0x20000106

0800b554 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b554:	b480      	push	{r7}
 800b556:	b087      	sub	sp, #28
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	4613      	mov	r3, r2
 800b560:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b562:	2300      	movs	r3, #0
 800b564:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b566:	2300      	movs	r3, #0
 800b568:	75fb      	strb	r3, [r7, #23]
 800b56a:	e027      	b.n	800b5bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	0f1b      	lsrs	r3, r3, #28
 800b570:	2b09      	cmp	r3, #9
 800b572:	d80b      	bhi.n	800b58c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	0f1b      	lsrs	r3, r3, #28
 800b578:	b2da      	uxtb	r2, r3
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
 800b57c:	005b      	lsls	r3, r3, #1
 800b57e:	4619      	mov	r1, r3
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	440b      	add	r3, r1
 800b584:	3230      	adds	r2, #48	; 0x30
 800b586:	b2d2      	uxtb	r2, r2
 800b588:	701a      	strb	r2, [r3, #0]
 800b58a:	e00a      	b.n	800b5a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	0f1b      	lsrs	r3, r3, #28
 800b590:	b2da      	uxtb	r2, r3
 800b592:	7dfb      	ldrb	r3, [r7, #23]
 800b594:	005b      	lsls	r3, r3, #1
 800b596:	4619      	mov	r1, r3
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	440b      	add	r3, r1
 800b59c:	3237      	adds	r2, #55	; 0x37
 800b59e:	b2d2      	uxtb	r2, r2
 800b5a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	011b      	lsls	r3, r3, #4
 800b5a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b5a8:	7dfb      	ldrb	r3, [r7, #23]
 800b5aa:	005b      	lsls	r3, r3, #1
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	68ba      	ldr	r2, [r7, #8]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b5b6:	7dfb      	ldrb	r3, [r7, #23]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	75fb      	strb	r3, [r7, #23]
 800b5bc:	7dfa      	ldrb	r2, [r7, #23]
 800b5be:	79fb      	ldrb	r3, [r7, #7]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d3d3      	bcc.n	800b56c <IntToUnicode+0x18>
  }
}
 800b5c4:	bf00      	nop
 800b5c6:	bf00      	nop
 800b5c8:	371c      	adds	r7, #28
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
	...

0800b5d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b08a      	sub	sp, #40	; 0x28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5dc:	f107 0314 	add.w	r3, r7, #20
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	601a      	str	r2, [r3, #0]
 800b5e4:	605a      	str	r2, [r3, #4]
 800b5e6:	609a      	str	r2, [r3, #8]
 800b5e8:	60da      	str	r2, [r3, #12]
 800b5ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5f4:	d13a      	bne.n	800b66c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	613b      	str	r3, [r7, #16]
 800b5fa:	4b1e      	ldr	r3, [pc, #120]	; (800b674 <HAL_PCD_MspInit+0xa0>)
 800b5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fe:	4a1d      	ldr	r2, [pc, #116]	; (800b674 <HAL_PCD_MspInit+0xa0>)
 800b600:	f043 0301 	orr.w	r3, r3, #1
 800b604:	6313      	str	r3, [r2, #48]	; 0x30
 800b606:	4b1b      	ldr	r3, [pc, #108]	; (800b674 <HAL_PCD_MspInit+0xa0>)
 800b608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b60a:	f003 0301 	and.w	r3, r3, #1
 800b60e:	613b      	str	r3, [r7, #16]
 800b610:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b612:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b618:	2302      	movs	r3, #2
 800b61a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b61c:	2300      	movs	r3, #0
 800b61e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b620:	2303      	movs	r3, #3
 800b622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b624:	230a      	movs	r3, #10
 800b626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b628:	f107 0314 	add.w	r3, r7, #20
 800b62c:	4619      	mov	r1, r3
 800b62e:	4812      	ldr	r0, [pc, #72]	; (800b678 <HAL_PCD_MspInit+0xa4>)
 800b630:	f7f8 fa8a 	bl	8003b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b634:	4b0f      	ldr	r3, [pc, #60]	; (800b674 <HAL_PCD_MspInit+0xa0>)
 800b636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b638:	4a0e      	ldr	r2, [pc, #56]	; (800b674 <HAL_PCD_MspInit+0xa0>)
 800b63a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b63e:	6353      	str	r3, [r2, #52]	; 0x34
 800b640:	2300      	movs	r3, #0
 800b642:	60fb      	str	r3, [r7, #12]
 800b644:	4b0b      	ldr	r3, [pc, #44]	; (800b674 <HAL_PCD_MspInit+0xa0>)
 800b646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b648:	4a0a      	ldr	r2, [pc, #40]	; (800b674 <HAL_PCD_MspInit+0xa0>)
 800b64a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b64e:	6453      	str	r3, [r2, #68]	; 0x44
 800b650:	4b08      	ldr	r3, [pc, #32]	; (800b674 <HAL_PCD_MspInit+0xa0>)
 800b652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b658:	60fb      	str	r3, [r7, #12]
 800b65a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 800b65c:	2200      	movs	r2, #0
 800b65e:	2106      	movs	r1, #6
 800b660:	2043      	movs	r0, #67	; 0x43
 800b662:	f7f7 fe9c 	bl	800339e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b666:	2043      	movs	r0, #67	; 0x43
 800b668:	f7f7 feb5 	bl	80033d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b66c:	bf00      	nop
 800b66e:	3728      	adds	r7, #40	; 0x28
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	40023800 	.word	0x40023800
 800b678:	40020000 	.word	0x40020000

0800b67c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b690:	4619      	mov	r1, r3
 800b692:	4610      	mov	r0, r2
 800b694:	f7fe fae5 	bl	8009c62 <USBD_LL_SetupStage>
}
 800b698:	bf00      	nop
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800b6b2:	78fa      	ldrb	r2, [r7, #3]
 800b6b4:	6879      	ldr	r1, [r7, #4]
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	00db      	lsls	r3, r3, #3
 800b6ba:	4413      	add	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	440b      	add	r3, r1
 800b6c0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	78fb      	ldrb	r3, [r7, #3]
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	f7fe fb1f 	bl	8009d0c <USBD_LL_DataOutStage>
}
 800b6ce:	bf00      	nop
 800b6d0:	3708      	adds	r7, #8
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b082      	sub	sp, #8
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	460b      	mov	r3, r1
 800b6e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800b6e8:	78fa      	ldrb	r2, [r7, #3]
 800b6ea:	6879      	ldr	r1, [r7, #4]
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	00db      	lsls	r3, r3, #3
 800b6f0:	4413      	add	r3, r2
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	440b      	add	r3, r1
 800b6f6:	3320      	adds	r3, #32
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	78fb      	ldrb	r3, [r7, #3]
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	f7fe fbb8 	bl	8009e72 <USBD_LL_DataInStage>
}
 800b702:	bf00      	nop
 800b704:	3708      	adds	r7, #8
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b082      	sub	sp, #8
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b718:	4618      	mov	r0, r3
 800b71a:	f7fe fcf2 	bl	800a102 <USBD_LL_SOF>
}
 800b71e:	bf00      	nop
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b084      	sub	sp, #16
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b72e:	2301      	movs	r3, #1
 800b730:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	79db      	ldrb	r3, [r3, #7]
 800b736:	2b02      	cmp	r3, #2
 800b738:	d001      	beq.n	800b73e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b73a:	f7f5 fd5f 	bl	80011fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b744:	7bfa      	ldrb	r2, [r7, #15]
 800b746:	4611      	mov	r1, r2
 800b748:	4618      	mov	r0, r3
 800b74a:	f7fe fc96 	bl	800a07a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b754:	4618      	mov	r0, r3
 800b756:	f7fe fc3e 	bl	8009fd6 <USBD_LL_Reset>
}
 800b75a:	bf00      	nop
 800b75c:	3710      	adds	r7, #16
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
	...

0800b764 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b772:	4618      	mov	r0, r3
 800b774:	f7fe fc91 	bl	800a09a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	6812      	ldr	r2, [r2, #0]
 800b786:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b78a:	f043 0301 	orr.w	r3, r3, #1
 800b78e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	7adb      	ldrb	r3, [r3, #11]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d005      	beq.n	800b7a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b798:	4b04      	ldr	r3, [pc, #16]	; (800b7ac <HAL_PCD_SuspendCallback+0x48>)
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	4a03      	ldr	r2, [pc, #12]	; (800b7ac <HAL_PCD_SuspendCallback+0x48>)
 800b79e:	f043 0306 	orr.w	r3, r3, #6
 800b7a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	e000ed00 	.word	0xe000ed00

0800b7b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7fe fc87 	bl	800a0d2 <USBD_LL_Resume>
}
 800b7c4:	bf00      	nop
 800b7c6:	3708      	adds	r7, #8
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b7de:	78fa      	ldrb	r2, [r7, #3]
 800b7e0:	4611      	mov	r1, r2
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fe fcdf 	bl	800a1a6 <USBD_LL_IsoOUTIncomplete>
}
 800b7e8:	bf00      	nop
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b802:	78fa      	ldrb	r2, [r7, #3]
 800b804:	4611      	mov	r1, r2
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fc9b 	bl	800a142 <USBD_LL_IsoINIncomplete>
}
 800b80c:	bf00      	nop
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b822:	4618      	mov	r0, r3
 800b824:	f7fe fcf1 	bl	800a20a <USBD_LL_DevConnected>
}
 800b828:	bf00      	nop
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fe fcee 	bl	800a220 <USBD_LL_DevDisconnected>
}
 800b844:	bf00      	nop
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d13c      	bne.n	800b8d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b85c:	4a20      	ldr	r2, [pc, #128]	; (800b8e0 <USBD_LL_Init+0x94>)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a1e      	ldr	r2, [pc, #120]	; (800b8e0 <USBD_LL_Init+0x94>)
 800b868:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b86c:	4b1c      	ldr	r3, [pc, #112]	; (800b8e0 <USBD_LL_Init+0x94>)
 800b86e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b872:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b874:	4b1a      	ldr	r3, [pc, #104]	; (800b8e0 <USBD_LL_Init+0x94>)
 800b876:	2204      	movs	r2, #4
 800b878:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b87a:	4b19      	ldr	r3, [pc, #100]	; (800b8e0 <USBD_LL_Init+0x94>)
 800b87c:	2202      	movs	r2, #2
 800b87e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b880:	4b17      	ldr	r3, [pc, #92]	; (800b8e0 <USBD_LL_Init+0x94>)
 800b882:	2200      	movs	r2, #0
 800b884:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b886:	4b16      	ldr	r3, [pc, #88]	; (800b8e0 <USBD_LL_Init+0x94>)
 800b888:	2202      	movs	r2, #2
 800b88a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b88c:	4b14      	ldr	r3, [pc, #80]	; (800b8e0 <USBD_LL_Init+0x94>)
 800b88e:	2200      	movs	r2, #0
 800b890:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b892:	4b13      	ldr	r3, [pc, #76]	; (800b8e0 <USBD_LL_Init+0x94>)
 800b894:	2200      	movs	r2, #0
 800b896:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b898:	4b11      	ldr	r3, [pc, #68]	; (800b8e0 <USBD_LL_Init+0x94>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b89e:	4b10      	ldr	r3, [pc, #64]	; (800b8e0 <USBD_LL_Init+0x94>)
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b8a4:	4b0e      	ldr	r3, [pc, #56]	; (800b8e0 <USBD_LL_Init+0x94>)
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b8aa:	480d      	ldr	r0, [pc, #52]	; (800b8e0 <USBD_LL_Init+0x94>)
 800b8ac:	f7f8 fb1b 	bl	8003ee6 <HAL_PCD_Init>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d001      	beq.n	800b8ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b8b6:	f7f5 fca1 	bl	80011fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b8ba:	2180      	movs	r1, #128	; 0x80
 800b8bc:	4808      	ldr	r0, [pc, #32]	; (800b8e0 <USBD_LL_Init+0x94>)
 800b8be:	f7f9 fd46 	bl	800534e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b8c2:	2240      	movs	r2, #64	; 0x40
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	4806      	ldr	r0, [pc, #24]	; (800b8e0 <USBD_LL_Init+0x94>)
 800b8c8:	f7f9 fcfa 	bl	80052c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b8cc:	2280      	movs	r2, #128	; 0x80
 800b8ce:	2101      	movs	r1, #1
 800b8d0:	4803      	ldr	r0, [pc, #12]	; (800b8e0 <USBD_LL_Init+0x94>)
 800b8d2:	f7f9 fcf5 	bl	80052c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3708      	adds	r7, #8
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	20001fb4 	.word	0x20001fb4

0800b8e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7f8 fc02 	bl	8004104 <HAL_PCD_Start>
 800b900:	4603      	mov	r3, r0
 800b902:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b904:	7bfb      	ldrb	r3, [r7, #15]
 800b906:	4618      	mov	r0, r3
 800b908:	f000 f942 	bl	800bb90 <USBD_Get_USB_Status>
 800b90c:	4603      	mov	r3, r0
 800b90e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b910:	7bbb      	ldrb	r3, [r7, #14]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b084      	sub	sp, #16
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
 800b922:	4608      	mov	r0, r1
 800b924:	4611      	mov	r1, r2
 800b926:	461a      	mov	r2, r3
 800b928:	4603      	mov	r3, r0
 800b92a:	70fb      	strb	r3, [r7, #3]
 800b92c:	460b      	mov	r3, r1
 800b92e:	70bb      	strb	r3, [r7, #2]
 800b930:	4613      	mov	r3, r2
 800b932:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b938:	2300      	movs	r3, #0
 800b93a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b942:	78bb      	ldrb	r3, [r7, #2]
 800b944:	883a      	ldrh	r2, [r7, #0]
 800b946:	78f9      	ldrb	r1, [r7, #3]
 800b948:	f7f9 f8d6 	bl	8004af8 <HAL_PCD_EP_Open>
 800b94c:	4603      	mov	r3, r0
 800b94e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b950:	7bfb      	ldrb	r3, [r7, #15]
 800b952:	4618      	mov	r0, r3
 800b954:	f000 f91c 	bl	800bb90 <USBD_Get_USB_Status>
 800b958:	4603      	mov	r3, r0
 800b95a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b95c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b084      	sub	sp, #16
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
 800b96e:	460b      	mov	r3, r1
 800b970:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b972:	2300      	movs	r3, #0
 800b974:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b980:	78fa      	ldrb	r2, [r7, #3]
 800b982:	4611      	mov	r1, r2
 800b984:	4618      	mov	r0, r3
 800b986:	f7f9 f91f 	bl	8004bc8 <HAL_PCD_EP_Close>
 800b98a:	4603      	mov	r3, r0
 800b98c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b98e:	7bfb      	ldrb	r3, [r7, #15]
 800b990:	4618      	mov	r0, r3
 800b992:	f000 f8fd 	bl	800bb90 <USBD_Get_USB_Status>
 800b996:	4603      	mov	r3, r0
 800b998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b99a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3710      	adds	r7, #16
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9be:	78fa      	ldrb	r2, [r7, #3]
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7f9 f9d7 	bl	8004d76 <HAL_PCD_EP_SetStall>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9cc:	7bfb      	ldrb	r3, [r7, #15]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f000 f8de 	bl	800bb90 <USBD_Get_USB_Status>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b084      	sub	sp, #16
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9fc:	78fa      	ldrb	r2, [r7, #3]
 800b9fe:	4611      	mov	r1, r2
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7f9 fa1b 	bl	8004e3c <HAL_PCD_EP_ClrStall>
 800ba06:	4603      	mov	r3, r0
 800ba08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba0a:	7bfb      	ldrb	r3, [r7, #15]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f000 f8bf 	bl	800bb90 <USBD_Get_USB_Status>
 800ba12:	4603      	mov	r3, r0
 800ba14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3710      	adds	r7, #16
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	460b      	mov	r3, r1
 800ba2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	da0b      	bge.n	800ba54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba3c:	78fb      	ldrb	r3, [r7, #3]
 800ba3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba42:	68f9      	ldr	r1, [r7, #12]
 800ba44:	4613      	mov	r3, r2
 800ba46:	00db      	lsls	r3, r3, #3
 800ba48:	4413      	add	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	440b      	add	r3, r1
 800ba4e:	3316      	adds	r3, #22
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	e00b      	b.n	800ba6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba54:	78fb      	ldrb	r3, [r7, #3]
 800ba56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba5a:	68f9      	ldr	r1, [r7, #12]
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	00db      	lsls	r3, r3, #3
 800ba60:	4413      	add	r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	440b      	add	r3, r1
 800ba66:	f203 2356 	addw	r3, r3, #598	; 0x256
 800ba6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3714      	adds	r7, #20
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	460b      	mov	r3, r1
 800ba82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba84:	2300      	movs	r3, #0
 800ba86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba92:	78fa      	ldrb	r2, [r7, #3]
 800ba94:	4611      	mov	r1, r2
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7f9 f80a 	bl	8004ab0 <HAL_PCD_SetAddress>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f000 f874 	bl	800bb90 <USBD_Get_USB_Status>
 800baa8:	4603      	mov	r3, r0
 800baaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baac:	7bbb      	ldrb	r3, [r7, #14]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b086      	sub	sp, #24
 800baba:	af00      	add	r7, sp, #0
 800babc:	60f8      	str	r0, [r7, #12]
 800babe:	607a      	str	r2, [r7, #4]
 800bac0:	603b      	str	r3, [r7, #0]
 800bac2:	460b      	mov	r3, r1
 800bac4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baca:	2300      	movs	r3, #0
 800bacc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bad4:	7af9      	ldrb	r1, [r7, #11]
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	f7f9 f912 	bl	8004d02 <HAL_PCD_EP_Transmit>
 800bade:	4603      	mov	r3, r0
 800bae0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bae2:	7dfb      	ldrb	r3, [r7, #23]
 800bae4:	4618      	mov	r0, r3
 800bae6:	f000 f853 	bl	800bb90 <USBD_Get_USB_Status>
 800baea:	4603      	mov	r3, r0
 800baec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800baee:	7dbb      	ldrb	r3, [r7, #22]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3718      	adds	r7, #24
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b086      	sub	sp, #24
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	607a      	str	r2, [r7, #4]
 800bb02:	603b      	str	r3, [r7, #0]
 800bb04:	460b      	mov	r3, r1
 800bb06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb16:	7af9      	ldrb	r1, [r7, #11]
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	f7f9 f89e 	bl	8004c5c <HAL_PCD_EP_Receive>
 800bb20:	4603      	mov	r3, r0
 800bb22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb24:	7dfb      	ldrb	r3, [r7, #23]
 800bb26:	4618      	mov	r0, r3
 800bb28:	f000 f832 	bl	800bb90 <USBD_Get_USB_Status>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb30:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3718      	adds	r7, #24
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b082      	sub	sp, #8
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
 800bb42:	460b      	mov	r3, r1
 800bb44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb4c:	78fa      	ldrb	r2, [r7, #3]
 800bb4e:	4611      	mov	r1, r2
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7f9 f8be 	bl	8004cd2 <HAL_PCD_EP_GetRxCount>
 800bb56:	4603      	mov	r3, r0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb68:	4b03      	ldr	r3, [pc, #12]	; (800bb78 <USBD_static_malloc+0x18>)
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	370c      	adds	r7, #12
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	20002498 	.word	0x20002498

0800bb7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]

}
 800bb84:	bf00      	nop
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	4603      	mov	r3, r0
 800bb98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb9e:	79fb      	ldrb	r3, [r7, #7]
 800bba0:	2b03      	cmp	r3, #3
 800bba2:	d817      	bhi.n	800bbd4 <USBD_Get_USB_Status+0x44>
 800bba4:	a201      	add	r2, pc, #4	; (adr r2, 800bbac <USBD_Get_USB_Status+0x1c>)
 800bba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbaa:	bf00      	nop
 800bbac:	0800bbbd 	.word	0x0800bbbd
 800bbb0:	0800bbc3 	.word	0x0800bbc3
 800bbb4:	0800bbc9 	.word	0x0800bbc9
 800bbb8:	0800bbcf 	.word	0x0800bbcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bbc0:	e00b      	b.n	800bbda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	73fb      	strb	r3, [r7, #15]
    break;
 800bbc6:	e008      	b.n	800bbda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	73fb      	strb	r3, [r7, #15]
    break;
 800bbcc:	e005      	b.n	800bbda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	73fb      	strb	r3, [r7, #15]
    break;
 800bbd2:	e002      	b.n	800bbda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbd8:	bf00      	nop
  }
  return usb_status;
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <sulp>:
 800bbe8:	b570      	push	{r4, r5, r6, lr}
 800bbea:	4604      	mov	r4, r0
 800bbec:	460d      	mov	r5, r1
 800bbee:	ec45 4b10 	vmov	d0, r4, r5
 800bbf2:	4616      	mov	r6, r2
 800bbf4:	f002 f8d0 	bl	800dd98 <__ulp>
 800bbf8:	ec51 0b10 	vmov	r0, r1, d0
 800bbfc:	b17e      	cbz	r6, 800bc1e <sulp+0x36>
 800bbfe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bc02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	dd09      	ble.n	800bc1e <sulp+0x36>
 800bc0a:	051b      	lsls	r3, r3, #20
 800bc0c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bc10:	2400      	movs	r4, #0
 800bc12:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bc16:	4622      	mov	r2, r4
 800bc18:	462b      	mov	r3, r5
 800bc1a:	f7f4 fcfd 	bl	8000618 <__aeabi_dmul>
 800bc1e:	bd70      	pop	{r4, r5, r6, pc}

0800bc20 <_strtod_l>:
 800bc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc24:	ed2d 8b02 	vpush	{d8}
 800bc28:	b09b      	sub	sp, #108	; 0x6c
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	9213      	str	r2, [sp, #76]	; 0x4c
 800bc2e:	2200      	movs	r2, #0
 800bc30:	9216      	str	r2, [sp, #88]	; 0x58
 800bc32:	460d      	mov	r5, r1
 800bc34:	f04f 0800 	mov.w	r8, #0
 800bc38:	f04f 0900 	mov.w	r9, #0
 800bc3c:	460a      	mov	r2, r1
 800bc3e:	9215      	str	r2, [sp, #84]	; 0x54
 800bc40:	7811      	ldrb	r1, [r2, #0]
 800bc42:	292b      	cmp	r1, #43	; 0x2b
 800bc44:	d04c      	beq.n	800bce0 <_strtod_l+0xc0>
 800bc46:	d83a      	bhi.n	800bcbe <_strtod_l+0x9e>
 800bc48:	290d      	cmp	r1, #13
 800bc4a:	d834      	bhi.n	800bcb6 <_strtod_l+0x96>
 800bc4c:	2908      	cmp	r1, #8
 800bc4e:	d834      	bhi.n	800bcba <_strtod_l+0x9a>
 800bc50:	2900      	cmp	r1, #0
 800bc52:	d03d      	beq.n	800bcd0 <_strtod_l+0xb0>
 800bc54:	2200      	movs	r2, #0
 800bc56:	920a      	str	r2, [sp, #40]	; 0x28
 800bc58:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800bc5a:	7832      	ldrb	r2, [r6, #0]
 800bc5c:	2a30      	cmp	r2, #48	; 0x30
 800bc5e:	f040 80b4 	bne.w	800bdca <_strtod_l+0x1aa>
 800bc62:	7872      	ldrb	r2, [r6, #1]
 800bc64:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bc68:	2a58      	cmp	r2, #88	; 0x58
 800bc6a:	d170      	bne.n	800bd4e <_strtod_l+0x12e>
 800bc6c:	9302      	str	r3, [sp, #8]
 800bc6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc70:	9301      	str	r3, [sp, #4]
 800bc72:	ab16      	add	r3, sp, #88	; 0x58
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	4a8e      	ldr	r2, [pc, #568]	; (800beb0 <_strtod_l+0x290>)
 800bc78:	ab17      	add	r3, sp, #92	; 0x5c
 800bc7a:	a915      	add	r1, sp, #84	; 0x54
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	f001 f971 	bl	800cf64 <__gethex>
 800bc82:	f010 070f 	ands.w	r7, r0, #15
 800bc86:	4605      	mov	r5, r0
 800bc88:	d005      	beq.n	800bc96 <_strtod_l+0x76>
 800bc8a:	2f06      	cmp	r7, #6
 800bc8c:	d12a      	bne.n	800bce4 <_strtod_l+0xc4>
 800bc8e:	3601      	adds	r6, #1
 800bc90:	2300      	movs	r3, #0
 800bc92:	9615      	str	r6, [sp, #84]	; 0x54
 800bc94:	930a      	str	r3, [sp, #40]	; 0x28
 800bc96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	f040 857f 	bne.w	800c79c <_strtod_l+0xb7c>
 800bc9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bca0:	b1db      	cbz	r3, 800bcda <_strtod_l+0xba>
 800bca2:	4642      	mov	r2, r8
 800bca4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bca8:	ec43 2b10 	vmov	d0, r2, r3
 800bcac:	b01b      	add	sp, #108	; 0x6c
 800bcae:	ecbd 8b02 	vpop	{d8}
 800bcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb6:	2920      	cmp	r1, #32
 800bcb8:	d1cc      	bne.n	800bc54 <_strtod_l+0x34>
 800bcba:	3201      	adds	r2, #1
 800bcbc:	e7bf      	b.n	800bc3e <_strtod_l+0x1e>
 800bcbe:	292d      	cmp	r1, #45	; 0x2d
 800bcc0:	d1c8      	bne.n	800bc54 <_strtod_l+0x34>
 800bcc2:	2101      	movs	r1, #1
 800bcc4:	910a      	str	r1, [sp, #40]	; 0x28
 800bcc6:	1c51      	adds	r1, r2, #1
 800bcc8:	9115      	str	r1, [sp, #84]	; 0x54
 800bcca:	7852      	ldrb	r2, [r2, #1]
 800bccc:	2a00      	cmp	r2, #0
 800bcce:	d1c3      	bne.n	800bc58 <_strtod_l+0x38>
 800bcd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bcd2:	9515      	str	r5, [sp, #84]	; 0x54
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f040 855f 	bne.w	800c798 <_strtod_l+0xb78>
 800bcda:	4642      	mov	r2, r8
 800bcdc:	464b      	mov	r3, r9
 800bcde:	e7e3      	b.n	800bca8 <_strtod_l+0x88>
 800bce0:	2100      	movs	r1, #0
 800bce2:	e7ef      	b.n	800bcc4 <_strtod_l+0xa4>
 800bce4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bce6:	b13a      	cbz	r2, 800bcf8 <_strtod_l+0xd8>
 800bce8:	2135      	movs	r1, #53	; 0x35
 800bcea:	a818      	add	r0, sp, #96	; 0x60
 800bcec:	f002 f951 	bl	800df92 <__copybits>
 800bcf0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f001 fd24 	bl	800d740 <_Bfree>
 800bcf8:	3f01      	subs	r7, #1
 800bcfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bcfc:	2f04      	cmp	r7, #4
 800bcfe:	d806      	bhi.n	800bd0e <_strtod_l+0xee>
 800bd00:	e8df f007 	tbb	[pc, r7]
 800bd04:	201d0314 	.word	0x201d0314
 800bd08:	14          	.byte	0x14
 800bd09:	00          	.byte	0x00
 800bd0a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800bd0e:	05e9      	lsls	r1, r5, #23
 800bd10:	bf48      	it	mi
 800bd12:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800bd16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bd1a:	0d1b      	lsrs	r3, r3, #20
 800bd1c:	051b      	lsls	r3, r3, #20
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d1b9      	bne.n	800bc96 <_strtod_l+0x76>
 800bd22:	f001 f819 	bl	800cd58 <__errno>
 800bd26:	2322      	movs	r3, #34	; 0x22
 800bd28:	6003      	str	r3, [r0, #0]
 800bd2a:	e7b4      	b.n	800bc96 <_strtod_l+0x76>
 800bd2c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800bd30:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bd34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bd38:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bd3c:	e7e7      	b.n	800bd0e <_strtod_l+0xee>
 800bd3e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800beb8 <_strtod_l+0x298>
 800bd42:	e7e4      	b.n	800bd0e <_strtod_l+0xee>
 800bd44:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bd48:	f04f 38ff 	mov.w	r8, #4294967295
 800bd4c:	e7df      	b.n	800bd0e <_strtod_l+0xee>
 800bd4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd50:	1c5a      	adds	r2, r3, #1
 800bd52:	9215      	str	r2, [sp, #84]	; 0x54
 800bd54:	785b      	ldrb	r3, [r3, #1]
 800bd56:	2b30      	cmp	r3, #48	; 0x30
 800bd58:	d0f9      	beq.n	800bd4e <_strtod_l+0x12e>
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d09b      	beq.n	800bc96 <_strtod_l+0x76>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	f04f 0a00 	mov.w	sl, #0
 800bd64:	9304      	str	r3, [sp, #16]
 800bd66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd68:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd6a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bd6e:	46d3      	mov	fp, sl
 800bd70:	220a      	movs	r2, #10
 800bd72:	9815      	ldr	r0, [sp, #84]	; 0x54
 800bd74:	7806      	ldrb	r6, [r0, #0]
 800bd76:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bd7a:	b2d9      	uxtb	r1, r3
 800bd7c:	2909      	cmp	r1, #9
 800bd7e:	d926      	bls.n	800bdce <_strtod_l+0x1ae>
 800bd80:	494c      	ldr	r1, [pc, #304]	; (800beb4 <_strtod_l+0x294>)
 800bd82:	2201      	movs	r2, #1
 800bd84:	f000 ff64 	bl	800cc50 <strncmp>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d030      	beq.n	800bdee <_strtod_l+0x1ce>
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	4632      	mov	r2, r6
 800bd90:	9005      	str	r0, [sp, #20]
 800bd92:	465e      	mov	r6, fp
 800bd94:	4603      	mov	r3, r0
 800bd96:	2a65      	cmp	r2, #101	; 0x65
 800bd98:	d001      	beq.n	800bd9e <_strtod_l+0x17e>
 800bd9a:	2a45      	cmp	r2, #69	; 0x45
 800bd9c:	d113      	bne.n	800bdc6 <_strtod_l+0x1a6>
 800bd9e:	b91e      	cbnz	r6, 800bda8 <_strtod_l+0x188>
 800bda0:	9a04      	ldr	r2, [sp, #16]
 800bda2:	4302      	orrs	r2, r0
 800bda4:	d094      	beq.n	800bcd0 <_strtod_l+0xb0>
 800bda6:	2600      	movs	r6, #0
 800bda8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800bdaa:	1c6a      	adds	r2, r5, #1
 800bdac:	9215      	str	r2, [sp, #84]	; 0x54
 800bdae:	786a      	ldrb	r2, [r5, #1]
 800bdb0:	2a2b      	cmp	r2, #43	; 0x2b
 800bdb2:	d074      	beq.n	800be9e <_strtod_l+0x27e>
 800bdb4:	2a2d      	cmp	r2, #45	; 0x2d
 800bdb6:	d078      	beq.n	800beaa <_strtod_l+0x28a>
 800bdb8:	f04f 0c00 	mov.w	ip, #0
 800bdbc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bdc0:	2909      	cmp	r1, #9
 800bdc2:	d97f      	bls.n	800bec4 <_strtod_l+0x2a4>
 800bdc4:	9515      	str	r5, [sp, #84]	; 0x54
 800bdc6:	2700      	movs	r7, #0
 800bdc8:	e09e      	b.n	800bf08 <_strtod_l+0x2e8>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	e7c8      	b.n	800bd60 <_strtod_l+0x140>
 800bdce:	f1bb 0f08 	cmp.w	fp, #8
 800bdd2:	bfd8      	it	le
 800bdd4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800bdd6:	f100 0001 	add.w	r0, r0, #1
 800bdda:	bfda      	itte	le
 800bddc:	fb02 3301 	mlale	r3, r2, r1, r3
 800bde0:	9309      	strle	r3, [sp, #36]	; 0x24
 800bde2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800bde6:	f10b 0b01 	add.w	fp, fp, #1
 800bdea:	9015      	str	r0, [sp, #84]	; 0x54
 800bdec:	e7c1      	b.n	800bd72 <_strtod_l+0x152>
 800bdee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdf0:	1c5a      	adds	r2, r3, #1
 800bdf2:	9215      	str	r2, [sp, #84]	; 0x54
 800bdf4:	785a      	ldrb	r2, [r3, #1]
 800bdf6:	f1bb 0f00 	cmp.w	fp, #0
 800bdfa:	d037      	beq.n	800be6c <_strtod_l+0x24c>
 800bdfc:	9005      	str	r0, [sp, #20]
 800bdfe:	465e      	mov	r6, fp
 800be00:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800be04:	2b09      	cmp	r3, #9
 800be06:	d912      	bls.n	800be2e <_strtod_l+0x20e>
 800be08:	2301      	movs	r3, #1
 800be0a:	e7c4      	b.n	800bd96 <_strtod_l+0x176>
 800be0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be0e:	1c5a      	adds	r2, r3, #1
 800be10:	9215      	str	r2, [sp, #84]	; 0x54
 800be12:	785a      	ldrb	r2, [r3, #1]
 800be14:	3001      	adds	r0, #1
 800be16:	2a30      	cmp	r2, #48	; 0x30
 800be18:	d0f8      	beq.n	800be0c <_strtod_l+0x1ec>
 800be1a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800be1e:	2b08      	cmp	r3, #8
 800be20:	f200 84c1 	bhi.w	800c7a6 <_strtod_l+0xb86>
 800be24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be26:	9005      	str	r0, [sp, #20]
 800be28:	2000      	movs	r0, #0
 800be2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800be2c:	4606      	mov	r6, r0
 800be2e:	3a30      	subs	r2, #48	; 0x30
 800be30:	f100 0301 	add.w	r3, r0, #1
 800be34:	d014      	beq.n	800be60 <_strtod_l+0x240>
 800be36:	9905      	ldr	r1, [sp, #20]
 800be38:	4419      	add	r1, r3
 800be3a:	9105      	str	r1, [sp, #20]
 800be3c:	4633      	mov	r3, r6
 800be3e:	eb00 0c06 	add.w	ip, r0, r6
 800be42:	210a      	movs	r1, #10
 800be44:	4563      	cmp	r3, ip
 800be46:	d113      	bne.n	800be70 <_strtod_l+0x250>
 800be48:	1833      	adds	r3, r6, r0
 800be4a:	2b08      	cmp	r3, #8
 800be4c:	f106 0601 	add.w	r6, r6, #1
 800be50:	4406      	add	r6, r0
 800be52:	dc1a      	bgt.n	800be8a <_strtod_l+0x26a>
 800be54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be56:	230a      	movs	r3, #10
 800be58:	fb03 2301 	mla	r3, r3, r1, r2
 800be5c:	9309      	str	r3, [sp, #36]	; 0x24
 800be5e:	2300      	movs	r3, #0
 800be60:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800be62:	1c51      	adds	r1, r2, #1
 800be64:	9115      	str	r1, [sp, #84]	; 0x54
 800be66:	7852      	ldrb	r2, [r2, #1]
 800be68:	4618      	mov	r0, r3
 800be6a:	e7c9      	b.n	800be00 <_strtod_l+0x1e0>
 800be6c:	4658      	mov	r0, fp
 800be6e:	e7d2      	b.n	800be16 <_strtod_l+0x1f6>
 800be70:	2b08      	cmp	r3, #8
 800be72:	f103 0301 	add.w	r3, r3, #1
 800be76:	dc03      	bgt.n	800be80 <_strtod_l+0x260>
 800be78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800be7a:	434f      	muls	r7, r1
 800be7c:	9709      	str	r7, [sp, #36]	; 0x24
 800be7e:	e7e1      	b.n	800be44 <_strtod_l+0x224>
 800be80:	2b10      	cmp	r3, #16
 800be82:	bfd8      	it	le
 800be84:	fb01 fa0a 	mulle.w	sl, r1, sl
 800be88:	e7dc      	b.n	800be44 <_strtod_l+0x224>
 800be8a:	2e10      	cmp	r6, #16
 800be8c:	bfdc      	itt	le
 800be8e:	230a      	movle	r3, #10
 800be90:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800be94:	e7e3      	b.n	800be5e <_strtod_l+0x23e>
 800be96:	2300      	movs	r3, #0
 800be98:	9305      	str	r3, [sp, #20]
 800be9a:	2301      	movs	r3, #1
 800be9c:	e780      	b.n	800bda0 <_strtod_l+0x180>
 800be9e:	f04f 0c00 	mov.w	ip, #0
 800bea2:	1caa      	adds	r2, r5, #2
 800bea4:	9215      	str	r2, [sp, #84]	; 0x54
 800bea6:	78aa      	ldrb	r2, [r5, #2]
 800bea8:	e788      	b.n	800bdbc <_strtod_l+0x19c>
 800beaa:	f04f 0c01 	mov.w	ip, #1
 800beae:	e7f8      	b.n	800bea2 <_strtod_l+0x282>
 800beb0:	0800f264 	.word	0x0800f264
 800beb4:	0800f254 	.word	0x0800f254
 800beb8:	7ff00000 	.word	0x7ff00000
 800bebc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bebe:	1c51      	adds	r1, r2, #1
 800bec0:	9115      	str	r1, [sp, #84]	; 0x54
 800bec2:	7852      	ldrb	r2, [r2, #1]
 800bec4:	2a30      	cmp	r2, #48	; 0x30
 800bec6:	d0f9      	beq.n	800bebc <_strtod_l+0x29c>
 800bec8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800becc:	2908      	cmp	r1, #8
 800bece:	f63f af7a 	bhi.w	800bdc6 <_strtod_l+0x1a6>
 800bed2:	3a30      	subs	r2, #48	; 0x30
 800bed4:	9208      	str	r2, [sp, #32]
 800bed6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bed8:	920c      	str	r2, [sp, #48]	; 0x30
 800beda:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bedc:	1c57      	adds	r7, r2, #1
 800bede:	9715      	str	r7, [sp, #84]	; 0x54
 800bee0:	7852      	ldrb	r2, [r2, #1]
 800bee2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bee6:	f1be 0f09 	cmp.w	lr, #9
 800beea:	d938      	bls.n	800bf5e <_strtod_l+0x33e>
 800beec:	990c      	ldr	r1, [sp, #48]	; 0x30
 800beee:	1a7f      	subs	r7, r7, r1
 800bef0:	2f08      	cmp	r7, #8
 800bef2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bef6:	dc03      	bgt.n	800bf00 <_strtod_l+0x2e0>
 800bef8:	9908      	ldr	r1, [sp, #32]
 800befa:	428f      	cmp	r7, r1
 800befc:	bfa8      	it	ge
 800befe:	460f      	movge	r7, r1
 800bf00:	f1bc 0f00 	cmp.w	ip, #0
 800bf04:	d000      	beq.n	800bf08 <_strtod_l+0x2e8>
 800bf06:	427f      	negs	r7, r7
 800bf08:	2e00      	cmp	r6, #0
 800bf0a:	d14f      	bne.n	800bfac <_strtod_l+0x38c>
 800bf0c:	9904      	ldr	r1, [sp, #16]
 800bf0e:	4301      	orrs	r1, r0
 800bf10:	f47f aec1 	bne.w	800bc96 <_strtod_l+0x76>
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f47f aedb 	bne.w	800bcd0 <_strtod_l+0xb0>
 800bf1a:	2a69      	cmp	r2, #105	; 0x69
 800bf1c:	d029      	beq.n	800bf72 <_strtod_l+0x352>
 800bf1e:	dc26      	bgt.n	800bf6e <_strtod_l+0x34e>
 800bf20:	2a49      	cmp	r2, #73	; 0x49
 800bf22:	d026      	beq.n	800bf72 <_strtod_l+0x352>
 800bf24:	2a4e      	cmp	r2, #78	; 0x4e
 800bf26:	f47f aed3 	bne.w	800bcd0 <_strtod_l+0xb0>
 800bf2a:	499b      	ldr	r1, [pc, #620]	; (800c198 <_strtod_l+0x578>)
 800bf2c:	a815      	add	r0, sp, #84	; 0x54
 800bf2e:	f001 fa59 	bl	800d3e4 <__match>
 800bf32:	2800      	cmp	r0, #0
 800bf34:	f43f aecc 	beq.w	800bcd0 <_strtod_l+0xb0>
 800bf38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	2b28      	cmp	r3, #40	; 0x28
 800bf3e:	d12f      	bne.n	800bfa0 <_strtod_l+0x380>
 800bf40:	4996      	ldr	r1, [pc, #600]	; (800c19c <_strtod_l+0x57c>)
 800bf42:	aa18      	add	r2, sp, #96	; 0x60
 800bf44:	a815      	add	r0, sp, #84	; 0x54
 800bf46:	f001 fa61 	bl	800d40c <__hexnan>
 800bf4a:	2805      	cmp	r0, #5
 800bf4c:	d128      	bne.n	800bfa0 <_strtod_l+0x380>
 800bf4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bf50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bf54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bf58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bf5c:	e69b      	b.n	800bc96 <_strtod_l+0x76>
 800bf5e:	9f08      	ldr	r7, [sp, #32]
 800bf60:	210a      	movs	r1, #10
 800bf62:	fb01 2107 	mla	r1, r1, r7, r2
 800bf66:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800bf6a:	9208      	str	r2, [sp, #32]
 800bf6c:	e7b5      	b.n	800beda <_strtod_l+0x2ba>
 800bf6e:	2a6e      	cmp	r2, #110	; 0x6e
 800bf70:	e7d9      	b.n	800bf26 <_strtod_l+0x306>
 800bf72:	498b      	ldr	r1, [pc, #556]	; (800c1a0 <_strtod_l+0x580>)
 800bf74:	a815      	add	r0, sp, #84	; 0x54
 800bf76:	f001 fa35 	bl	800d3e4 <__match>
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	f43f aea8 	beq.w	800bcd0 <_strtod_l+0xb0>
 800bf80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf82:	4988      	ldr	r1, [pc, #544]	; (800c1a4 <_strtod_l+0x584>)
 800bf84:	3b01      	subs	r3, #1
 800bf86:	a815      	add	r0, sp, #84	; 0x54
 800bf88:	9315      	str	r3, [sp, #84]	; 0x54
 800bf8a:	f001 fa2b 	bl	800d3e4 <__match>
 800bf8e:	b910      	cbnz	r0, 800bf96 <_strtod_l+0x376>
 800bf90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf92:	3301      	adds	r3, #1
 800bf94:	9315      	str	r3, [sp, #84]	; 0x54
 800bf96:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c1b4 <_strtod_l+0x594>
 800bf9a:	f04f 0800 	mov.w	r8, #0
 800bf9e:	e67a      	b.n	800bc96 <_strtod_l+0x76>
 800bfa0:	4881      	ldr	r0, [pc, #516]	; (800c1a8 <_strtod_l+0x588>)
 800bfa2:	f000 ff1d 	bl	800cde0 <nan>
 800bfa6:	ec59 8b10 	vmov	r8, r9, d0
 800bfaa:	e674      	b.n	800bc96 <_strtod_l+0x76>
 800bfac:	9b05      	ldr	r3, [sp, #20]
 800bfae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfb0:	1afb      	subs	r3, r7, r3
 800bfb2:	f1bb 0f00 	cmp.w	fp, #0
 800bfb6:	bf08      	it	eq
 800bfb8:	46b3      	moveq	fp, r6
 800bfba:	2e10      	cmp	r6, #16
 800bfbc:	9308      	str	r3, [sp, #32]
 800bfbe:	4635      	mov	r5, r6
 800bfc0:	bfa8      	it	ge
 800bfc2:	2510      	movge	r5, #16
 800bfc4:	f7f4 faae 	bl	8000524 <__aeabi_ui2d>
 800bfc8:	2e09      	cmp	r6, #9
 800bfca:	4680      	mov	r8, r0
 800bfcc:	4689      	mov	r9, r1
 800bfce:	dd13      	ble.n	800bff8 <_strtod_l+0x3d8>
 800bfd0:	4b76      	ldr	r3, [pc, #472]	; (800c1ac <_strtod_l+0x58c>)
 800bfd2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bfd6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bfda:	f7f4 fb1d 	bl	8000618 <__aeabi_dmul>
 800bfde:	4680      	mov	r8, r0
 800bfe0:	4650      	mov	r0, sl
 800bfe2:	4689      	mov	r9, r1
 800bfe4:	f7f4 fa9e 	bl	8000524 <__aeabi_ui2d>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	460b      	mov	r3, r1
 800bfec:	4640      	mov	r0, r8
 800bfee:	4649      	mov	r1, r9
 800bff0:	f7f4 f95c 	bl	80002ac <__adddf3>
 800bff4:	4680      	mov	r8, r0
 800bff6:	4689      	mov	r9, r1
 800bff8:	2e0f      	cmp	r6, #15
 800bffa:	dc38      	bgt.n	800c06e <_strtod_l+0x44e>
 800bffc:	9b08      	ldr	r3, [sp, #32]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	f43f ae49 	beq.w	800bc96 <_strtod_l+0x76>
 800c004:	dd24      	ble.n	800c050 <_strtod_l+0x430>
 800c006:	2b16      	cmp	r3, #22
 800c008:	dc0b      	bgt.n	800c022 <_strtod_l+0x402>
 800c00a:	4968      	ldr	r1, [pc, #416]	; (800c1ac <_strtod_l+0x58c>)
 800c00c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c010:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c014:	4642      	mov	r2, r8
 800c016:	464b      	mov	r3, r9
 800c018:	f7f4 fafe 	bl	8000618 <__aeabi_dmul>
 800c01c:	4680      	mov	r8, r0
 800c01e:	4689      	mov	r9, r1
 800c020:	e639      	b.n	800bc96 <_strtod_l+0x76>
 800c022:	9a08      	ldr	r2, [sp, #32]
 800c024:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c028:	4293      	cmp	r3, r2
 800c02a:	db20      	blt.n	800c06e <_strtod_l+0x44e>
 800c02c:	4c5f      	ldr	r4, [pc, #380]	; (800c1ac <_strtod_l+0x58c>)
 800c02e:	f1c6 060f 	rsb	r6, r6, #15
 800c032:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c036:	4642      	mov	r2, r8
 800c038:	464b      	mov	r3, r9
 800c03a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c03e:	f7f4 faeb 	bl	8000618 <__aeabi_dmul>
 800c042:	9b08      	ldr	r3, [sp, #32]
 800c044:	1b9e      	subs	r6, r3, r6
 800c046:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c04a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c04e:	e7e3      	b.n	800c018 <_strtod_l+0x3f8>
 800c050:	9b08      	ldr	r3, [sp, #32]
 800c052:	3316      	adds	r3, #22
 800c054:	db0b      	blt.n	800c06e <_strtod_l+0x44e>
 800c056:	9b05      	ldr	r3, [sp, #20]
 800c058:	1bdf      	subs	r7, r3, r7
 800c05a:	4b54      	ldr	r3, [pc, #336]	; (800c1ac <_strtod_l+0x58c>)
 800c05c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c060:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c064:	4640      	mov	r0, r8
 800c066:	4649      	mov	r1, r9
 800c068:	f7f4 fc00 	bl	800086c <__aeabi_ddiv>
 800c06c:	e7d6      	b.n	800c01c <_strtod_l+0x3fc>
 800c06e:	9b08      	ldr	r3, [sp, #32]
 800c070:	1b75      	subs	r5, r6, r5
 800c072:	441d      	add	r5, r3
 800c074:	2d00      	cmp	r5, #0
 800c076:	dd70      	ble.n	800c15a <_strtod_l+0x53a>
 800c078:	f015 030f 	ands.w	r3, r5, #15
 800c07c:	d00a      	beq.n	800c094 <_strtod_l+0x474>
 800c07e:	494b      	ldr	r1, [pc, #300]	; (800c1ac <_strtod_l+0x58c>)
 800c080:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c084:	4642      	mov	r2, r8
 800c086:	464b      	mov	r3, r9
 800c088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c08c:	f7f4 fac4 	bl	8000618 <__aeabi_dmul>
 800c090:	4680      	mov	r8, r0
 800c092:	4689      	mov	r9, r1
 800c094:	f035 050f 	bics.w	r5, r5, #15
 800c098:	d04d      	beq.n	800c136 <_strtod_l+0x516>
 800c09a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c09e:	dd22      	ble.n	800c0e6 <_strtod_l+0x4c6>
 800c0a0:	2500      	movs	r5, #0
 800c0a2:	46ab      	mov	fp, r5
 800c0a4:	9509      	str	r5, [sp, #36]	; 0x24
 800c0a6:	9505      	str	r5, [sp, #20]
 800c0a8:	2322      	movs	r3, #34	; 0x22
 800c0aa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c1b4 <_strtod_l+0x594>
 800c0ae:	6023      	str	r3, [r4, #0]
 800c0b0:	f04f 0800 	mov.w	r8, #0
 800c0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f43f aded 	beq.w	800bc96 <_strtod_l+0x76>
 800c0bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c0be:	4620      	mov	r0, r4
 800c0c0:	f001 fb3e 	bl	800d740 <_Bfree>
 800c0c4:	9905      	ldr	r1, [sp, #20]
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f001 fb3a 	bl	800d740 <_Bfree>
 800c0cc:	4659      	mov	r1, fp
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	f001 fb36 	bl	800d740 <_Bfree>
 800c0d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f001 fb32 	bl	800d740 <_Bfree>
 800c0dc:	4629      	mov	r1, r5
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f001 fb2e 	bl	800d740 <_Bfree>
 800c0e4:	e5d7      	b.n	800bc96 <_strtod_l+0x76>
 800c0e6:	4b32      	ldr	r3, [pc, #200]	; (800c1b0 <_strtod_l+0x590>)
 800c0e8:	9304      	str	r3, [sp, #16]
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	112d      	asrs	r5, r5, #4
 800c0ee:	4640      	mov	r0, r8
 800c0f0:	4649      	mov	r1, r9
 800c0f2:	469a      	mov	sl, r3
 800c0f4:	2d01      	cmp	r5, #1
 800c0f6:	dc21      	bgt.n	800c13c <_strtod_l+0x51c>
 800c0f8:	b10b      	cbz	r3, 800c0fe <_strtod_l+0x4de>
 800c0fa:	4680      	mov	r8, r0
 800c0fc:	4689      	mov	r9, r1
 800c0fe:	492c      	ldr	r1, [pc, #176]	; (800c1b0 <_strtod_l+0x590>)
 800c100:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c104:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c108:	4642      	mov	r2, r8
 800c10a:	464b      	mov	r3, r9
 800c10c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c110:	f7f4 fa82 	bl	8000618 <__aeabi_dmul>
 800c114:	4b27      	ldr	r3, [pc, #156]	; (800c1b4 <_strtod_l+0x594>)
 800c116:	460a      	mov	r2, r1
 800c118:	400b      	ands	r3, r1
 800c11a:	4927      	ldr	r1, [pc, #156]	; (800c1b8 <_strtod_l+0x598>)
 800c11c:	428b      	cmp	r3, r1
 800c11e:	4680      	mov	r8, r0
 800c120:	d8be      	bhi.n	800c0a0 <_strtod_l+0x480>
 800c122:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c126:	428b      	cmp	r3, r1
 800c128:	bf86      	itte	hi
 800c12a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c1bc <_strtod_l+0x59c>
 800c12e:	f04f 38ff 	movhi.w	r8, #4294967295
 800c132:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c136:	2300      	movs	r3, #0
 800c138:	9304      	str	r3, [sp, #16]
 800c13a:	e07b      	b.n	800c234 <_strtod_l+0x614>
 800c13c:	07ea      	lsls	r2, r5, #31
 800c13e:	d505      	bpl.n	800c14c <_strtod_l+0x52c>
 800c140:	9b04      	ldr	r3, [sp, #16]
 800c142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c146:	f7f4 fa67 	bl	8000618 <__aeabi_dmul>
 800c14a:	2301      	movs	r3, #1
 800c14c:	9a04      	ldr	r2, [sp, #16]
 800c14e:	3208      	adds	r2, #8
 800c150:	f10a 0a01 	add.w	sl, sl, #1
 800c154:	106d      	asrs	r5, r5, #1
 800c156:	9204      	str	r2, [sp, #16]
 800c158:	e7cc      	b.n	800c0f4 <_strtod_l+0x4d4>
 800c15a:	d0ec      	beq.n	800c136 <_strtod_l+0x516>
 800c15c:	426d      	negs	r5, r5
 800c15e:	f015 020f 	ands.w	r2, r5, #15
 800c162:	d00a      	beq.n	800c17a <_strtod_l+0x55a>
 800c164:	4b11      	ldr	r3, [pc, #68]	; (800c1ac <_strtod_l+0x58c>)
 800c166:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c16a:	4640      	mov	r0, r8
 800c16c:	4649      	mov	r1, r9
 800c16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c172:	f7f4 fb7b 	bl	800086c <__aeabi_ddiv>
 800c176:	4680      	mov	r8, r0
 800c178:	4689      	mov	r9, r1
 800c17a:	112d      	asrs	r5, r5, #4
 800c17c:	d0db      	beq.n	800c136 <_strtod_l+0x516>
 800c17e:	2d1f      	cmp	r5, #31
 800c180:	dd1e      	ble.n	800c1c0 <_strtod_l+0x5a0>
 800c182:	2500      	movs	r5, #0
 800c184:	46ab      	mov	fp, r5
 800c186:	9509      	str	r5, [sp, #36]	; 0x24
 800c188:	9505      	str	r5, [sp, #20]
 800c18a:	2322      	movs	r3, #34	; 0x22
 800c18c:	f04f 0800 	mov.w	r8, #0
 800c190:	f04f 0900 	mov.w	r9, #0
 800c194:	6023      	str	r3, [r4, #0]
 800c196:	e78d      	b.n	800c0b4 <_strtod_l+0x494>
 800c198:	0800f25f 	.word	0x0800f25f
 800c19c:	0800f278 	.word	0x0800f278
 800c1a0:	0800f256 	.word	0x0800f256
 800c1a4:	0800f259 	.word	0x0800f259
 800c1a8:	0800f612 	.word	0x0800f612
 800c1ac:	0800f4d0 	.word	0x0800f4d0
 800c1b0:	0800f4a8 	.word	0x0800f4a8
 800c1b4:	7ff00000 	.word	0x7ff00000
 800c1b8:	7ca00000 	.word	0x7ca00000
 800c1bc:	7fefffff 	.word	0x7fefffff
 800c1c0:	f015 0310 	ands.w	r3, r5, #16
 800c1c4:	bf18      	it	ne
 800c1c6:	236a      	movne	r3, #106	; 0x6a
 800c1c8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c56c <_strtod_l+0x94c>
 800c1cc:	9304      	str	r3, [sp, #16]
 800c1ce:	4640      	mov	r0, r8
 800c1d0:	4649      	mov	r1, r9
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	07ea      	lsls	r2, r5, #31
 800c1d6:	d504      	bpl.n	800c1e2 <_strtod_l+0x5c2>
 800c1d8:	e9da 2300 	ldrd	r2, r3, [sl]
 800c1dc:	f7f4 fa1c 	bl	8000618 <__aeabi_dmul>
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	106d      	asrs	r5, r5, #1
 800c1e4:	f10a 0a08 	add.w	sl, sl, #8
 800c1e8:	d1f4      	bne.n	800c1d4 <_strtod_l+0x5b4>
 800c1ea:	b10b      	cbz	r3, 800c1f0 <_strtod_l+0x5d0>
 800c1ec:	4680      	mov	r8, r0
 800c1ee:	4689      	mov	r9, r1
 800c1f0:	9b04      	ldr	r3, [sp, #16]
 800c1f2:	b1bb      	cbz	r3, 800c224 <_strtod_l+0x604>
 800c1f4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c1f8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	4649      	mov	r1, r9
 800c200:	dd10      	ble.n	800c224 <_strtod_l+0x604>
 800c202:	2b1f      	cmp	r3, #31
 800c204:	f340 811e 	ble.w	800c444 <_strtod_l+0x824>
 800c208:	2b34      	cmp	r3, #52	; 0x34
 800c20a:	bfde      	ittt	le
 800c20c:	f04f 33ff 	movle.w	r3, #4294967295
 800c210:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c214:	4093      	lslle	r3, r2
 800c216:	f04f 0800 	mov.w	r8, #0
 800c21a:	bfcc      	ite	gt
 800c21c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c220:	ea03 0901 	andle.w	r9, r3, r1
 800c224:	2200      	movs	r2, #0
 800c226:	2300      	movs	r3, #0
 800c228:	4640      	mov	r0, r8
 800c22a:	4649      	mov	r1, r9
 800c22c:	f7f4 fc5c 	bl	8000ae8 <__aeabi_dcmpeq>
 800c230:	2800      	cmp	r0, #0
 800c232:	d1a6      	bne.n	800c182 <_strtod_l+0x562>
 800c234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c23a:	4633      	mov	r3, r6
 800c23c:	465a      	mov	r2, fp
 800c23e:	4620      	mov	r0, r4
 800c240:	f001 fae6 	bl	800d810 <__s2b>
 800c244:	9009      	str	r0, [sp, #36]	; 0x24
 800c246:	2800      	cmp	r0, #0
 800c248:	f43f af2a 	beq.w	800c0a0 <_strtod_l+0x480>
 800c24c:	9a08      	ldr	r2, [sp, #32]
 800c24e:	9b05      	ldr	r3, [sp, #20]
 800c250:	2a00      	cmp	r2, #0
 800c252:	eba3 0307 	sub.w	r3, r3, r7
 800c256:	bfa8      	it	ge
 800c258:	2300      	movge	r3, #0
 800c25a:	930c      	str	r3, [sp, #48]	; 0x30
 800c25c:	2500      	movs	r5, #0
 800c25e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c262:	9312      	str	r3, [sp, #72]	; 0x48
 800c264:	46ab      	mov	fp, r5
 800c266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c268:	4620      	mov	r0, r4
 800c26a:	6859      	ldr	r1, [r3, #4]
 800c26c:	f001 fa28 	bl	800d6c0 <_Balloc>
 800c270:	9005      	str	r0, [sp, #20]
 800c272:	2800      	cmp	r0, #0
 800c274:	f43f af18 	beq.w	800c0a8 <_strtod_l+0x488>
 800c278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c27a:	691a      	ldr	r2, [r3, #16]
 800c27c:	3202      	adds	r2, #2
 800c27e:	f103 010c 	add.w	r1, r3, #12
 800c282:	0092      	lsls	r2, r2, #2
 800c284:	300c      	adds	r0, #12
 800c286:	f000 fd9c 	bl	800cdc2 <memcpy>
 800c28a:	ec49 8b10 	vmov	d0, r8, r9
 800c28e:	aa18      	add	r2, sp, #96	; 0x60
 800c290:	a917      	add	r1, sp, #92	; 0x5c
 800c292:	4620      	mov	r0, r4
 800c294:	f001 fdf0 	bl	800de78 <__d2b>
 800c298:	ec49 8b18 	vmov	d8, r8, r9
 800c29c:	9016      	str	r0, [sp, #88]	; 0x58
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	f43f af02 	beq.w	800c0a8 <_strtod_l+0x488>
 800c2a4:	2101      	movs	r1, #1
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	f001 fb4a 	bl	800d940 <__i2b>
 800c2ac:	4683      	mov	fp, r0
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	f43f aefa 	beq.w	800c0a8 <_strtod_l+0x488>
 800c2b4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c2b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c2b8:	2e00      	cmp	r6, #0
 800c2ba:	bfab      	itete	ge
 800c2bc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c2be:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c2c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c2c2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c2c6:	bfac      	ite	ge
 800c2c8:	eb06 0a03 	addge.w	sl, r6, r3
 800c2cc:	1b9f      	sublt	r7, r3, r6
 800c2ce:	9b04      	ldr	r3, [sp, #16]
 800c2d0:	1af6      	subs	r6, r6, r3
 800c2d2:	4416      	add	r6, r2
 800c2d4:	4ba0      	ldr	r3, [pc, #640]	; (800c558 <_strtod_l+0x938>)
 800c2d6:	3e01      	subs	r6, #1
 800c2d8:	429e      	cmp	r6, r3
 800c2da:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c2de:	f280 80c4 	bge.w	800c46a <_strtod_l+0x84a>
 800c2e2:	1b9b      	subs	r3, r3, r6
 800c2e4:	2b1f      	cmp	r3, #31
 800c2e6:	eba2 0203 	sub.w	r2, r2, r3
 800c2ea:	f04f 0101 	mov.w	r1, #1
 800c2ee:	f300 80b0 	bgt.w	800c452 <_strtod_l+0x832>
 800c2f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c2f6:	930e      	str	r3, [sp, #56]	; 0x38
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	930d      	str	r3, [sp, #52]	; 0x34
 800c2fc:	eb0a 0602 	add.w	r6, sl, r2
 800c300:	9b04      	ldr	r3, [sp, #16]
 800c302:	45b2      	cmp	sl, r6
 800c304:	4417      	add	r7, r2
 800c306:	441f      	add	r7, r3
 800c308:	4653      	mov	r3, sl
 800c30a:	bfa8      	it	ge
 800c30c:	4633      	movge	r3, r6
 800c30e:	42bb      	cmp	r3, r7
 800c310:	bfa8      	it	ge
 800c312:	463b      	movge	r3, r7
 800c314:	2b00      	cmp	r3, #0
 800c316:	bfc2      	ittt	gt
 800c318:	1af6      	subgt	r6, r6, r3
 800c31a:	1aff      	subgt	r7, r7, r3
 800c31c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c322:	2b00      	cmp	r3, #0
 800c324:	dd17      	ble.n	800c356 <_strtod_l+0x736>
 800c326:	4659      	mov	r1, fp
 800c328:	461a      	mov	r2, r3
 800c32a:	4620      	mov	r0, r4
 800c32c:	f001 fbc8 	bl	800dac0 <__pow5mult>
 800c330:	4683      	mov	fp, r0
 800c332:	2800      	cmp	r0, #0
 800c334:	f43f aeb8 	beq.w	800c0a8 <_strtod_l+0x488>
 800c338:	4601      	mov	r1, r0
 800c33a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c33c:	4620      	mov	r0, r4
 800c33e:	f001 fb15 	bl	800d96c <__multiply>
 800c342:	900b      	str	r0, [sp, #44]	; 0x2c
 800c344:	2800      	cmp	r0, #0
 800c346:	f43f aeaf 	beq.w	800c0a8 <_strtod_l+0x488>
 800c34a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c34c:	4620      	mov	r0, r4
 800c34e:	f001 f9f7 	bl	800d740 <_Bfree>
 800c352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c354:	9316      	str	r3, [sp, #88]	; 0x58
 800c356:	2e00      	cmp	r6, #0
 800c358:	f300 808c 	bgt.w	800c474 <_strtod_l+0x854>
 800c35c:	9b08      	ldr	r3, [sp, #32]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	dd08      	ble.n	800c374 <_strtod_l+0x754>
 800c362:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c364:	9905      	ldr	r1, [sp, #20]
 800c366:	4620      	mov	r0, r4
 800c368:	f001 fbaa 	bl	800dac0 <__pow5mult>
 800c36c:	9005      	str	r0, [sp, #20]
 800c36e:	2800      	cmp	r0, #0
 800c370:	f43f ae9a 	beq.w	800c0a8 <_strtod_l+0x488>
 800c374:	2f00      	cmp	r7, #0
 800c376:	dd08      	ble.n	800c38a <_strtod_l+0x76a>
 800c378:	9905      	ldr	r1, [sp, #20]
 800c37a:	463a      	mov	r2, r7
 800c37c:	4620      	mov	r0, r4
 800c37e:	f001 fbf9 	bl	800db74 <__lshift>
 800c382:	9005      	str	r0, [sp, #20]
 800c384:	2800      	cmp	r0, #0
 800c386:	f43f ae8f 	beq.w	800c0a8 <_strtod_l+0x488>
 800c38a:	f1ba 0f00 	cmp.w	sl, #0
 800c38e:	dd08      	ble.n	800c3a2 <_strtod_l+0x782>
 800c390:	4659      	mov	r1, fp
 800c392:	4652      	mov	r2, sl
 800c394:	4620      	mov	r0, r4
 800c396:	f001 fbed 	bl	800db74 <__lshift>
 800c39a:	4683      	mov	fp, r0
 800c39c:	2800      	cmp	r0, #0
 800c39e:	f43f ae83 	beq.w	800c0a8 <_strtod_l+0x488>
 800c3a2:	9a05      	ldr	r2, [sp, #20]
 800c3a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	f001 fc6c 	bl	800dc84 <__mdiff>
 800c3ac:	4605      	mov	r5, r0
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	f43f ae7a 	beq.w	800c0a8 <_strtod_l+0x488>
 800c3b4:	68c3      	ldr	r3, [r0, #12]
 800c3b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	60c3      	str	r3, [r0, #12]
 800c3bc:	4659      	mov	r1, fp
 800c3be:	f001 fc45 	bl	800dc4c <__mcmp>
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	da60      	bge.n	800c488 <_strtod_l+0x868>
 800c3c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3c8:	ea53 0308 	orrs.w	r3, r3, r8
 800c3cc:	f040 8084 	bne.w	800c4d8 <_strtod_l+0x8b8>
 800c3d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d17f      	bne.n	800c4d8 <_strtod_l+0x8b8>
 800c3d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c3dc:	0d1b      	lsrs	r3, r3, #20
 800c3de:	051b      	lsls	r3, r3, #20
 800c3e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c3e4:	d978      	bls.n	800c4d8 <_strtod_l+0x8b8>
 800c3e6:	696b      	ldr	r3, [r5, #20]
 800c3e8:	b913      	cbnz	r3, 800c3f0 <_strtod_l+0x7d0>
 800c3ea:	692b      	ldr	r3, [r5, #16]
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	dd73      	ble.n	800c4d8 <_strtod_l+0x8b8>
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	f001 fbbd 	bl	800db74 <__lshift>
 800c3fa:	4659      	mov	r1, fp
 800c3fc:	4605      	mov	r5, r0
 800c3fe:	f001 fc25 	bl	800dc4c <__mcmp>
 800c402:	2800      	cmp	r0, #0
 800c404:	dd68      	ble.n	800c4d8 <_strtod_l+0x8b8>
 800c406:	9904      	ldr	r1, [sp, #16]
 800c408:	4a54      	ldr	r2, [pc, #336]	; (800c55c <_strtod_l+0x93c>)
 800c40a:	464b      	mov	r3, r9
 800c40c:	2900      	cmp	r1, #0
 800c40e:	f000 8084 	beq.w	800c51a <_strtod_l+0x8fa>
 800c412:	ea02 0109 	and.w	r1, r2, r9
 800c416:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c41a:	dc7e      	bgt.n	800c51a <_strtod_l+0x8fa>
 800c41c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c420:	f77f aeb3 	ble.w	800c18a <_strtod_l+0x56a>
 800c424:	4b4e      	ldr	r3, [pc, #312]	; (800c560 <_strtod_l+0x940>)
 800c426:	4640      	mov	r0, r8
 800c428:	4649      	mov	r1, r9
 800c42a:	2200      	movs	r2, #0
 800c42c:	f7f4 f8f4 	bl	8000618 <__aeabi_dmul>
 800c430:	4b4a      	ldr	r3, [pc, #296]	; (800c55c <_strtod_l+0x93c>)
 800c432:	400b      	ands	r3, r1
 800c434:	4680      	mov	r8, r0
 800c436:	4689      	mov	r9, r1
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f47f ae3f 	bne.w	800c0bc <_strtod_l+0x49c>
 800c43e:	2322      	movs	r3, #34	; 0x22
 800c440:	6023      	str	r3, [r4, #0]
 800c442:	e63b      	b.n	800c0bc <_strtod_l+0x49c>
 800c444:	f04f 32ff 	mov.w	r2, #4294967295
 800c448:	fa02 f303 	lsl.w	r3, r2, r3
 800c44c:	ea03 0808 	and.w	r8, r3, r8
 800c450:	e6e8      	b.n	800c224 <_strtod_l+0x604>
 800c452:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c456:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c45a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c45e:	36e2      	adds	r6, #226	; 0xe2
 800c460:	fa01 f306 	lsl.w	r3, r1, r6
 800c464:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c468:	e748      	b.n	800c2fc <_strtod_l+0x6dc>
 800c46a:	2100      	movs	r1, #0
 800c46c:	2301      	movs	r3, #1
 800c46e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c472:	e743      	b.n	800c2fc <_strtod_l+0x6dc>
 800c474:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c476:	4632      	mov	r2, r6
 800c478:	4620      	mov	r0, r4
 800c47a:	f001 fb7b 	bl	800db74 <__lshift>
 800c47e:	9016      	str	r0, [sp, #88]	; 0x58
 800c480:	2800      	cmp	r0, #0
 800c482:	f47f af6b 	bne.w	800c35c <_strtod_l+0x73c>
 800c486:	e60f      	b.n	800c0a8 <_strtod_l+0x488>
 800c488:	46ca      	mov	sl, r9
 800c48a:	d171      	bne.n	800c570 <_strtod_l+0x950>
 800c48c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c48e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c492:	b352      	cbz	r2, 800c4ea <_strtod_l+0x8ca>
 800c494:	4a33      	ldr	r2, [pc, #204]	; (800c564 <_strtod_l+0x944>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d12a      	bne.n	800c4f0 <_strtod_l+0x8d0>
 800c49a:	9b04      	ldr	r3, [sp, #16]
 800c49c:	4641      	mov	r1, r8
 800c49e:	b1fb      	cbz	r3, 800c4e0 <_strtod_l+0x8c0>
 800c4a0:	4b2e      	ldr	r3, [pc, #184]	; (800c55c <_strtod_l+0x93c>)
 800c4a2:	ea09 0303 	and.w	r3, r9, r3
 800c4a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ae:	d81a      	bhi.n	800c4e6 <_strtod_l+0x8c6>
 800c4b0:	0d1b      	lsrs	r3, r3, #20
 800c4b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ba:	4299      	cmp	r1, r3
 800c4bc:	d118      	bne.n	800c4f0 <_strtod_l+0x8d0>
 800c4be:	4b2a      	ldr	r3, [pc, #168]	; (800c568 <_strtod_l+0x948>)
 800c4c0:	459a      	cmp	sl, r3
 800c4c2:	d102      	bne.n	800c4ca <_strtod_l+0x8aa>
 800c4c4:	3101      	adds	r1, #1
 800c4c6:	f43f adef 	beq.w	800c0a8 <_strtod_l+0x488>
 800c4ca:	4b24      	ldr	r3, [pc, #144]	; (800c55c <_strtod_l+0x93c>)
 800c4cc:	ea0a 0303 	and.w	r3, sl, r3
 800c4d0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c4d4:	f04f 0800 	mov.w	r8, #0
 800c4d8:	9b04      	ldr	r3, [sp, #16]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d1a2      	bne.n	800c424 <_strtod_l+0x804>
 800c4de:	e5ed      	b.n	800c0bc <_strtod_l+0x49c>
 800c4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e4:	e7e9      	b.n	800c4ba <_strtod_l+0x89a>
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	e7e7      	b.n	800c4ba <_strtod_l+0x89a>
 800c4ea:	ea53 0308 	orrs.w	r3, r3, r8
 800c4ee:	d08a      	beq.n	800c406 <_strtod_l+0x7e6>
 800c4f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4f2:	b1e3      	cbz	r3, 800c52e <_strtod_l+0x90e>
 800c4f4:	ea13 0f0a 	tst.w	r3, sl
 800c4f8:	d0ee      	beq.n	800c4d8 <_strtod_l+0x8b8>
 800c4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4fc:	9a04      	ldr	r2, [sp, #16]
 800c4fe:	4640      	mov	r0, r8
 800c500:	4649      	mov	r1, r9
 800c502:	b1c3      	cbz	r3, 800c536 <_strtod_l+0x916>
 800c504:	f7ff fb70 	bl	800bbe8 <sulp>
 800c508:	4602      	mov	r2, r0
 800c50a:	460b      	mov	r3, r1
 800c50c:	ec51 0b18 	vmov	r0, r1, d8
 800c510:	f7f3 fecc 	bl	80002ac <__adddf3>
 800c514:	4680      	mov	r8, r0
 800c516:	4689      	mov	r9, r1
 800c518:	e7de      	b.n	800c4d8 <_strtod_l+0x8b8>
 800c51a:	4013      	ands	r3, r2
 800c51c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c520:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c524:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c528:	f04f 38ff 	mov.w	r8, #4294967295
 800c52c:	e7d4      	b.n	800c4d8 <_strtod_l+0x8b8>
 800c52e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c530:	ea13 0f08 	tst.w	r3, r8
 800c534:	e7e0      	b.n	800c4f8 <_strtod_l+0x8d8>
 800c536:	f7ff fb57 	bl	800bbe8 <sulp>
 800c53a:	4602      	mov	r2, r0
 800c53c:	460b      	mov	r3, r1
 800c53e:	ec51 0b18 	vmov	r0, r1, d8
 800c542:	f7f3 feb1 	bl	80002a8 <__aeabi_dsub>
 800c546:	2200      	movs	r2, #0
 800c548:	2300      	movs	r3, #0
 800c54a:	4680      	mov	r8, r0
 800c54c:	4689      	mov	r9, r1
 800c54e:	f7f4 facb 	bl	8000ae8 <__aeabi_dcmpeq>
 800c552:	2800      	cmp	r0, #0
 800c554:	d0c0      	beq.n	800c4d8 <_strtod_l+0x8b8>
 800c556:	e618      	b.n	800c18a <_strtod_l+0x56a>
 800c558:	fffffc02 	.word	0xfffffc02
 800c55c:	7ff00000 	.word	0x7ff00000
 800c560:	39500000 	.word	0x39500000
 800c564:	000fffff 	.word	0x000fffff
 800c568:	7fefffff 	.word	0x7fefffff
 800c56c:	0800f290 	.word	0x0800f290
 800c570:	4659      	mov	r1, fp
 800c572:	4628      	mov	r0, r5
 800c574:	f001 fcda 	bl	800df2c <__ratio>
 800c578:	ec57 6b10 	vmov	r6, r7, d0
 800c57c:	ee10 0a10 	vmov	r0, s0
 800c580:	2200      	movs	r2, #0
 800c582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c586:	4639      	mov	r1, r7
 800c588:	f7f4 fac2 	bl	8000b10 <__aeabi_dcmple>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	d071      	beq.n	800c674 <_strtod_l+0xa54>
 800c590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c592:	2b00      	cmp	r3, #0
 800c594:	d17c      	bne.n	800c690 <_strtod_l+0xa70>
 800c596:	f1b8 0f00 	cmp.w	r8, #0
 800c59a:	d15a      	bne.n	800c652 <_strtod_l+0xa32>
 800c59c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d15d      	bne.n	800c660 <_strtod_l+0xa40>
 800c5a4:	4b90      	ldr	r3, [pc, #576]	; (800c7e8 <_strtod_l+0xbc8>)
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	4639      	mov	r1, r7
 800c5ac:	f7f4 faa6 	bl	8000afc <__aeabi_dcmplt>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d15c      	bne.n	800c66e <_strtod_l+0xa4e>
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	4639      	mov	r1, r7
 800c5b8:	4b8c      	ldr	r3, [pc, #560]	; (800c7ec <_strtod_l+0xbcc>)
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f7f4 f82c 	bl	8000618 <__aeabi_dmul>
 800c5c0:	4606      	mov	r6, r0
 800c5c2:	460f      	mov	r7, r1
 800c5c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c5c8:	9606      	str	r6, [sp, #24]
 800c5ca:	9307      	str	r3, [sp, #28]
 800c5cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5d0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c5d4:	4b86      	ldr	r3, [pc, #536]	; (800c7f0 <_strtod_l+0xbd0>)
 800c5d6:	ea0a 0303 	and.w	r3, sl, r3
 800c5da:	930d      	str	r3, [sp, #52]	; 0x34
 800c5dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c5de:	4b85      	ldr	r3, [pc, #532]	; (800c7f4 <_strtod_l+0xbd4>)
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	f040 8090 	bne.w	800c706 <_strtod_l+0xae6>
 800c5e6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c5ea:	ec49 8b10 	vmov	d0, r8, r9
 800c5ee:	f001 fbd3 	bl	800dd98 <__ulp>
 800c5f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5f6:	ec51 0b10 	vmov	r0, r1, d0
 800c5fa:	f7f4 f80d 	bl	8000618 <__aeabi_dmul>
 800c5fe:	4642      	mov	r2, r8
 800c600:	464b      	mov	r3, r9
 800c602:	f7f3 fe53 	bl	80002ac <__adddf3>
 800c606:	460b      	mov	r3, r1
 800c608:	4979      	ldr	r1, [pc, #484]	; (800c7f0 <_strtod_l+0xbd0>)
 800c60a:	4a7b      	ldr	r2, [pc, #492]	; (800c7f8 <_strtod_l+0xbd8>)
 800c60c:	4019      	ands	r1, r3
 800c60e:	4291      	cmp	r1, r2
 800c610:	4680      	mov	r8, r0
 800c612:	d944      	bls.n	800c69e <_strtod_l+0xa7e>
 800c614:	ee18 2a90 	vmov	r2, s17
 800c618:	4b78      	ldr	r3, [pc, #480]	; (800c7fc <_strtod_l+0xbdc>)
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d104      	bne.n	800c628 <_strtod_l+0xa08>
 800c61e:	ee18 3a10 	vmov	r3, s16
 800c622:	3301      	adds	r3, #1
 800c624:	f43f ad40 	beq.w	800c0a8 <_strtod_l+0x488>
 800c628:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c7fc <_strtod_l+0xbdc>
 800c62c:	f04f 38ff 	mov.w	r8, #4294967295
 800c630:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c632:	4620      	mov	r0, r4
 800c634:	f001 f884 	bl	800d740 <_Bfree>
 800c638:	9905      	ldr	r1, [sp, #20]
 800c63a:	4620      	mov	r0, r4
 800c63c:	f001 f880 	bl	800d740 <_Bfree>
 800c640:	4659      	mov	r1, fp
 800c642:	4620      	mov	r0, r4
 800c644:	f001 f87c 	bl	800d740 <_Bfree>
 800c648:	4629      	mov	r1, r5
 800c64a:	4620      	mov	r0, r4
 800c64c:	f001 f878 	bl	800d740 <_Bfree>
 800c650:	e609      	b.n	800c266 <_strtod_l+0x646>
 800c652:	f1b8 0f01 	cmp.w	r8, #1
 800c656:	d103      	bne.n	800c660 <_strtod_l+0xa40>
 800c658:	f1b9 0f00 	cmp.w	r9, #0
 800c65c:	f43f ad95 	beq.w	800c18a <_strtod_l+0x56a>
 800c660:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c7b8 <_strtod_l+0xb98>
 800c664:	4f60      	ldr	r7, [pc, #384]	; (800c7e8 <_strtod_l+0xbc8>)
 800c666:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c66a:	2600      	movs	r6, #0
 800c66c:	e7ae      	b.n	800c5cc <_strtod_l+0x9ac>
 800c66e:	4f5f      	ldr	r7, [pc, #380]	; (800c7ec <_strtod_l+0xbcc>)
 800c670:	2600      	movs	r6, #0
 800c672:	e7a7      	b.n	800c5c4 <_strtod_l+0x9a4>
 800c674:	4b5d      	ldr	r3, [pc, #372]	; (800c7ec <_strtod_l+0xbcc>)
 800c676:	4630      	mov	r0, r6
 800c678:	4639      	mov	r1, r7
 800c67a:	2200      	movs	r2, #0
 800c67c:	f7f3 ffcc 	bl	8000618 <__aeabi_dmul>
 800c680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c682:	4606      	mov	r6, r0
 800c684:	460f      	mov	r7, r1
 800c686:	2b00      	cmp	r3, #0
 800c688:	d09c      	beq.n	800c5c4 <_strtod_l+0x9a4>
 800c68a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c68e:	e79d      	b.n	800c5cc <_strtod_l+0x9ac>
 800c690:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c7c0 <_strtod_l+0xba0>
 800c694:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c698:	ec57 6b17 	vmov	r6, r7, d7
 800c69c:	e796      	b.n	800c5cc <_strtod_l+0x9ac>
 800c69e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c6a2:	9b04      	ldr	r3, [sp, #16]
 800c6a4:	46ca      	mov	sl, r9
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d1c2      	bne.n	800c630 <_strtod_l+0xa10>
 800c6aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c6ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6b0:	0d1b      	lsrs	r3, r3, #20
 800c6b2:	051b      	lsls	r3, r3, #20
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d1bb      	bne.n	800c630 <_strtod_l+0xa10>
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	4639      	mov	r1, r7
 800c6bc:	f7f4 fae4 	bl	8000c88 <__aeabi_d2lz>
 800c6c0:	f7f3 ff7c 	bl	80005bc <__aeabi_l2d>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4630      	mov	r0, r6
 800c6ca:	4639      	mov	r1, r7
 800c6cc:	f7f3 fdec 	bl	80002a8 <__aeabi_dsub>
 800c6d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c6d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6d6:	ea43 0308 	orr.w	r3, r3, r8
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	4606      	mov	r6, r0
 800c6de:	460f      	mov	r7, r1
 800c6e0:	d054      	beq.n	800c78c <_strtod_l+0xb6c>
 800c6e2:	a339      	add	r3, pc, #228	; (adr r3, 800c7c8 <_strtod_l+0xba8>)
 800c6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e8:	f7f4 fa08 	bl	8000afc <__aeabi_dcmplt>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	f47f ace5 	bne.w	800c0bc <_strtod_l+0x49c>
 800c6f2:	a337      	add	r3, pc, #220	; (adr r3, 800c7d0 <_strtod_l+0xbb0>)
 800c6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f8:	4630      	mov	r0, r6
 800c6fa:	4639      	mov	r1, r7
 800c6fc:	f7f4 fa1c 	bl	8000b38 <__aeabi_dcmpgt>
 800c700:	2800      	cmp	r0, #0
 800c702:	d095      	beq.n	800c630 <_strtod_l+0xa10>
 800c704:	e4da      	b.n	800c0bc <_strtod_l+0x49c>
 800c706:	9b04      	ldr	r3, [sp, #16]
 800c708:	b333      	cbz	r3, 800c758 <_strtod_l+0xb38>
 800c70a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c70c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c710:	d822      	bhi.n	800c758 <_strtod_l+0xb38>
 800c712:	a331      	add	r3, pc, #196	; (adr r3, 800c7d8 <_strtod_l+0xbb8>)
 800c714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c718:	4630      	mov	r0, r6
 800c71a:	4639      	mov	r1, r7
 800c71c:	f7f4 f9f8 	bl	8000b10 <__aeabi_dcmple>
 800c720:	b1a0      	cbz	r0, 800c74c <_strtod_l+0xb2c>
 800c722:	4639      	mov	r1, r7
 800c724:	4630      	mov	r0, r6
 800c726:	f7f4 fa27 	bl	8000b78 <__aeabi_d2uiz>
 800c72a:	2801      	cmp	r0, #1
 800c72c:	bf38      	it	cc
 800c72e:	2001      	movcc	r0, #1
 800c730:	f7f3 fef8 	bl	8000524 <__aeabi_ui2d>
 800c734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c736:	4606      	mov	r6, r0
 800c738:	460f      	mov	r7, r1
 800c73a:	bb23      	cbnz	r3, 800c786 <_strtod_l+0xb66>
 800c73c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c740:	9010      	str	r0, [sp, #64]	; 0x40
 800c742:	9311      	str	r3, [sp, #68]	; 0x44
 800c744:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c748:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c74c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c74e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c750:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c754:	1a9b      	subs	r3, r3, r2
 800c756:	930f      	str	r3, [sp, #60]	; 0x3c
 800c758:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c75c:	eeb0 0a48 	vmov.f32	s0, s16
 800c760:	eef0 0a68 	vmov.f32	s1, s17
 800c764:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c768:	f001 fb16 	bl	800dd98 <__ulp>
 800c76c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c770:	ec53 2b10 	vmov	r2, r3, d0
 800c774:	f7f3 ff50 	bl	8000618 <__aeabi_dmul>
 800c778:	ec53 2b18 	vmov	r2, r3, d8
 800c77c:	f7f3 fd96 	bl	80002ac <__adddf3>
 800c780:	4680      	mov	r8, r0
 800c782:	4689      	mov	r9, r1
 800c784:	e78d      	b.n	800c6a2 <_strtod_l+0xa82>
 800c786:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c78a:	e7db      	b.n	800c744 <_strtod_l+0xb24>
 800c78c:	a314      	add	r3, pc, #80	; (adr r3, 800c7e0 <_strtod_l+0xbc0>)
 800c78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c792:	f7f4 f9b3 	bl	8000afc <__aeabi_dcmplt>
 800c796:	e7b3      	b.n	800c700 <_strtod_l+0xae0>
 800c798:	2300      	movs	r3, #0
 800c79a:	930a      	str	r3, [sp, #40]	; 0x28
 800c79c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c79e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7a0:	6013      	str	r3, [r2, #0]
 800c7a2:	f7ff ba7c 	b.w	800bc9e <_strtod_l+0x7e>
 800c7a6:	2a65      	cmp	r2, #101	; 0x65
 800c7a8:	f43f ab75 	beq.w	800be96 <_strtod_l+0x276>
 800c7ac:	2a45      	cmp	r2, #69	; 0x45
 800c7ae:	f43f ab72 	beq.w	800be96 <_strtod_l+0x276>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	f7ff bbaa 	b.w	800bf0c <_strtod_l+0x2ec>
 800c7b8:	00000000 	.word	0x00000000
 800c7bc:	bff00000 	.word	0xbff00000
 800c7c0:	00000000 	.word	0x00000000
 800c7c4:	3ff00000 	.word	0x3ff00000
 800c7c8:	94a03595 	.word	0x94a03595
 800c7cc:	3fdfffff 	.word	0x3fdfffff
 800c7d0:	35afe535 	.word	0x35afe535
 800c7d4:	3fe00000 	.word	0x3fe00000
 800c7d8:	ffc00000 	.word	0xffc00000
 800c7dc:	41dfffff 	.word	0x41dfffff
 800c7e0:	94a03595 	.word	0x94a03595
 800c7e4:	3fcfffff 	.word	0x3fcfffff
 800c7e8:	3ff00000 	.word	0x3ff00000
 800c7ec:	3fe00000 	.word	0x3fe00000
 800c7f0:	7ff00000 	.word	0x7ff00000
 800c7f4:	7fe00000 	.word	0x7fe00000
 800c7f8:	7c9fffff 	.word	0x7c9fffff
 800c7fc:	7fefffff 	.word	0x7fefffff

0800c800 <strtof>:
 800c800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c804:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800c8c8 <strtof+0xc8>
 800c808:	4b2a      	ldr	r3, [pc, #168]	; (800c8b4 <strtof+0xb4>)
 800c80a:	460a      	mov	r2, r1
 800c80c:	ed2d 8b02 	vpush	{d8}
 800c810:	4601      	mov	r1, r0
 800c812:	f8d8 0000 	ldr.w	r0, [r8]
 800c816:	f7ff fa03 	bl	800bc20 <_strtod_l>
 800c81a:	ec55 4b10 	vmov	r4, r5, d0
 800c81e:	ee10 2a10 	vmov	r2, s0
 800c822:	ee10 0a10 	vmov	r0, s0
 800c826:	462b      	mov	r3, r5
 800c828:	4629      	mov	r1, r5
 800c82a:	f7f4 f98f 	bl	8000b4c <__aeabi_dcmpun>
 800c82e:	b190      	cbz	r0, 800c856 <strtof+0x56>
 800c830:	2d00      	cmp	r5, #0
 800c832:	4821      	ldr	r0, [pc, #132]	; (800c8b8 <strtof+0xb8>)
 800c834:	da09      	bge.n	800c84a <strtof+0x4a>
 800c836:	f000 fadb 	bl	800cdf0 <nanf>
 800c83a:	eeb1 8a40 	vneg.f32	s16, s0
 800c83e:	eeb0 0a48 	vmov.f32	s0, s16
 800c842:	ecbd 8b02 	vpop	{d8}
 800c846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c84a:	ecbd 8b02 	vpop	{d8}
 800c84e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c852:	f000 bacd 	b.w	800cdf0 <nanf>
 800c856:	4620      	mov	r0, r4
 800c858:	4629      	mov	r1, r5
 800c85a:	f7f4 f9ad 	bl	8000bb8 <__aeabi_d2f>
 800c85e:	ee08 0a10 	vmov	s16, r0
 800c862:	eddf 7a16 	vldr	s15, [pc, #88]	; 800c8bc <strtof+0xbc>
 800c866:	eeb0 7ac8 	vabs.f32	s14, s16
 800c86a:	eeb4 7a67 	vcmp.f32	s14, s15
 800c86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c872:	dd11      	ble.n	800c898 <strtof+0x98>
 800c874:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800c878:	4b11      	ldr	r3, [pc, #68]	; (800c8c0 <strtof+0xc0>)
 800c87a:	f04f 32ff 	mov.w	r2, #4294967295
 800c87e:	4620      	mov	r0, r4
 800c880:	4639      	mov	r1, r7
 800c882:	f7f4 f963 	bl	8000b4c <__aeabi_dcmpun>
 800c886:	b980      	cbnz	r0, 800c8aa <strtof+0xaa>
 800c888:	4b0d      	ldr	r3, [pc, #52]	; (800c8c0 <strtof+0xc0>)
 800c88a:	f04f 32ff 	mov.w	r2, #4294967295
 800c88e:	4620      	mov	r0, r4
 800c890:	4639      	mov	r1, r7
 800c892:	f7f4 f93d 	bl	8000b10 <__aeabi_dcmple>
 800c896:	b940      	cbnz	r0, 800c8aa <strtof+0xaa>
 800c898:	ee18 3a10 	vmov	r3, s16
 800c89c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c8a0:	d1cd      	bne.n	800c83e <strtof+0x3e>
 800c8a2:	4b08      	ldr	r3, [pc, #32]	; (800c8c4 <strtof+0xc4>)
 800c8a4:	402b      	ands	r3, r5
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d0c9      	beq.n	800c83e <strtof+0x3e>
 800c8aa:	f8d8 3000 	ldr.w	r3, [r8]
 800c8ae:	2222      	movs	r2, #34	; 0x22
 800c8b0:	601a      	str	r2, [r3, #0]
 800c8b2:	e7c4      	b.n	800c83e <strtof+0x3e>
 800c8b4:	2000011c 	.word	0x2000011c
 800c8b8:	0800f612 	.word	0x0800f612
 800c8bc:	7f7fffff 	.word	0x7f7fffff
 800c8c0:	7fefffff 	.word	0x7fefffff
 800c8c4:	7ff00000 	.word	0x7ff00000
 800c8c8:	200002d4 	.word	0x200002d4

0800c8cc <_strtoul_l.constprop.0>:
 800c8cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8d0:	4f36      	ldr	r7, [pc, #216]	; (800c9ac <_strtoul_l.constprop.0+0xe0>)
 800c8d2:	4686      	mov	lr, r0
 800c8d4:	460d      	mov	r5, r1
 800c8d6:	4628      	mov	r0, r5
 800c8d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8dc:	5d3e      	ldrb	r6, [r7, r4]
 800c8de:	f016 0608 	ands.w	r6, r6, #8
 800c8e2:	d1f8      	bne.n	800c8d6 <_strtoul_l.constprop.0+0xa>
 800c8e4:	2c2d      	cmp	r4, #45	; 0x2d
 800c8e6:	d130      	bne.n	800c94a <_strtoul_l.constprop.0+0x7e>
 800c8e8:	782c      	ldrb	r4, [r5, #0]
 800c8ea:	2601      	movs	r6, #1
 800c8ec:	1c85      	adds	r5, r0, #2
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d057      	beq.n	800c9a2 <_strtoul_l.constprop.0+0xd6>
 800c8f2:	2b10      	cmp	r3, #16
 800c8f4:	d109      	bne.n	800c90a <_strtoul_l.constprop.0+0x3e>
 800c8f6:	2c30      	cmp	r4, #48	; 0x30
 800c8f8:	d107      	bne.n	800c90a <_strtoul_l.constprop.0+0x3e>
 800c8fa:	7828      	ldrb	r0, [r5, #0]
 800c8fc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c900:	2858      	cmp	r0, #88	; 0x58
 800c902:	d149      	bne.n	800c998 <_strtoul_l.constprop.0+0xcc>
 800c904:	786c      	ldrb	r4, [r5, #1]
 800c906:	2310      	movs	r3, #16
 800c908:	3502      	adds	r5, #2
 800c90a:	f04f 38ff 	mov.w	r8, #4294967295
 800c90e:	2700      	movs	r7, #0
 800c910:	fbb8 f8f3 	udiv	r8, r8, r3
 800c914:	fb03 f908 	mul.w	r9, r3, r8
 800c918:	ea6f 0909 	mvn.w	r9, r9
 800c91c:	4638      	mov	r0, r7
 800c91e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c922:	f1bc 0f09 	cmp.w	ip, #9
 800c926:	d815      	bhi.n	800c954 <_strtoul_l.constprop.0+0x88>
 800c928:	4664      	mov	r4, ip
 800c92a:	42a3      	cmp	r3, r4
 800c92c:	dd23      	ble.n	800c976 <_strtoul_l.constprop.0+0xaa>
 800c92e:	f1b7 3fff 	cmp.w	r7, #4294967295
 800c932:	d007      	beq.n	800c944 <_strtoul_l.constprop.0+0x78>
 800c934:	4580      	cmp	r8, r0
 800c936:	d31b      	bcc.n	800c970 <_strtoul_l.constprop.0+0xa4>
 800c938:	d101      	bne.n	800c93e <_strtoul_l.constprop.0+0x72>
 800c93a:	45a1      	cmp	r9, r4
 800c93c:	db18      	blt.n	800c970 <_strtoul_l.constprop.0+0xa4>
 800c93e:	fb00 4003 	mla	r0, r0, r3, r4
 800c942:	2701      	movs	r7, #1
 800c944:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c948:	e7e9      	b.n	800c91e <_strtoul_l.constprop.0+0x52>
 800c94a:	2c2b      	cmp	r4, #43	; 0x2b
 800c94c:	bf04      	itt	eq
 800c94e:	782c      	ldrbeq	r4, [r5, #0]
 800c950:	1c85      	addeq	r5, r0, #2
 800c952:	e7cc      	b.n	800c8ee <_strtoul_l.constprop.0+0x22>
 800c954:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c958:	f1bc 0f19 	cmp.w	ip, #25
 800c95c:	d801      	bhi.n	800c962 <_strtoul_l.constprop.0+0x96>
 800c95e:	3c37      	subs	r4, #55	; 0x37
 800c960:	e7e3      	b.n	800c92a <_strtoul_l.constprop.0+0x5e>
 800c962:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c966:	f1bc 0f19 	cmp.w	ip, #25
 800c96a:	d804      	bhi.n	800c976 <_strtoul_l.constprop.0+0xaa>
 800c96c:	3c57      	subs	r4, #87	; 0x57
 800c96e:	e7dc      	b.n	800c92a <_strtoul_l.constprop.0+0x5e>
 800c970:	f04f 37ff 	mov.w	r7, #4294967295
 800c974:	e7e6      	b.n	800c944 <_strtoul_l.constprop.0+0x78>
 800c976:	1c7b      	adds	r3, r7, #1
 800c978:	d106      	bne.n	800c988 <_strtoul_l.constprop.0+0xbc>
 800c97a:	2322      	movs	r3, #34	; 0x22
 800c97c:	f8ce 3000 	str.w	r3, [lr]
 800c980:	4638      	mov	r0, r7
 800c982:	b932      	cbnz	r2, 800c992 <_strtoul_l.constprop.0+0xc6>
 800c984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c988:	b106      	cbz	r6, 800c98c <_strtoul_l.constprop.0+0xc0>
 800c98a:	4240      	negs	r0, r0
 800c98c:	2a00      	cmp	r2, #0
 800c98e:	d0f9      	beq.n	800c984 <_strtoul_l.constprop.0+0xb8>
 800c990:	b107      	cbz	r7, 800c994 <_strtoul_l.constprop.0+0xc8>
 800c992:	1e69      	subs	r1, r5, #1
 800c994:	6011      	str	r1, [r2, #0]
 800c996:	e7f5      	b.n	800c984 <_strtoul_l.constprop.0+0xb8>
 800c998:	2430      	movs	r4, #48	; 0x30
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d1b5      	bne.n	800c90a <_strtoul_l.constprop.0+0x3e>
 800c99e:	2308      	movs	r3, #8
 800c9a0:	e7b3      	b.n	800c90a <_strtoul_l.constprop.0+0x3e>
 800c9a2:	2c30      	cmp	r4, #48	; 0x30
 800c9a4:	d0a9      	beq.n	800c8fa <_strtoul_l.constprop.0+0x2e>
 800c9a6:	230a      	movs	r3, #10
 800c9a8:	e7af      	b.n	800c90a <_strtoul_l.constprop.0+0x3e>
 800c9aa:	bf00      	nop
 800c9ac:	0800f2b9 	.word	0x0800f2b9

0800c9b0 <strtoul>:
 800c9b0:	4613      	mov	r3, r2
 800c9b2:	460a      	mov	r2, r1
 800c9b4:	4601      	mov	r1, r0
 800c9b6:	4802      	ldr	r0, [pc, #8]	; (800c9c0 <strtoul+0x10>)
 800c9b8:	6800      	ldr	r0, [r0, #0]
 800c9ba:	f7ff bf87 	b.w	800c8cc <_strtoul_l.constprop.0>
 800c9be:	bf00      	nop
 800c9c0:	200002d4 	.word	0x200002d4

0800c9c4 <std>:
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	b510      	push	{r4, lr}
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	e9c0 3300 	strd	r3, r3, [r0]
 800c9ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9d2:	6083      	str	r3, [r0, #8]
 800c9d4:	8181      	strh	r1, [r0, #12]
 800c9d6:	6643      	str	r3, [r0, #100]	; 0x64
 800c9d8:	81c2      	strh	r2, [r0, #14]
 800c9da:	6183      	str	r3, [r0, #24]
 800c9dc:	4619      	mov	r1, r3
 800c9de:	2208      	movs	r2, #8
 800c9e0:	305c      	adds	r0, #92	; 0x5c
 800c9e2:	f000 f92d 	bl	800cc40 <memset>
 800c9e6:	4b0d      	ldr	r3, [pc, #52]	; (800ca1c <std+0x58>)
 800c9e8:	6263      	str	r3, [r4, #36]	; 0x24
 800c9ea:	4b0d      	ldr	r3, [pc, #52]	; (800ca20 <std+0x5c>)
 800c9ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800c9ee:	4b0d      	ldr	r3, [pc, #52]	; (800ca24 <std+0x60>)
 800c9f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9f2:	4b0d      	ldr	r3, [pc, #52]	; (800ca28 <std+0x64>)
 800c9f4:	6323      	str	r3, [r4, #48]	; 0x30
 800c9f6:	4b0d      	ldr	r3, [pc, #52]	; (800ca2c <std+0x68>)
 800c9f8:	6224      	str	r4, [r4, #32]
 800c9fa:	429c      	cmp	r4, r3
 800c9fc:	d006      	beq.n	800ca0c <std+0x48>
 800c9fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ca02:	4294      	cmp	r4, r2
 800ca04:	d002      	beq.n	800ca0c <std+0x48>
 800ca06:	33d0      	adds	r3, #208	; 0xd0
 800ca08:	429c      	cmp	r4, r3
 800ca0a:	d105      	bne.n	800ca18 <std+0x54>
 800ca0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ca10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca14:	f000 b9ca 	b.w	800cdac <__retarget_lock_init_recursive>
 800ca18:	bd10      	pop	{r4, pc}
 800ca1a:	bf00      	nop
 800ca1c:	0800cb49 	.word	0x0800cb49
 800ca20:	0800cb6b 	.word	0x0800cb6b
 800ca24:	0800cba3 	.word	0x0800cba3
 800ca28:	0800cbc7 	.word	0x0800cbc7
 800ca2c:	200026b8 	.word	0x200026b8

0800ca30 <stdio_exit_handler>:
 800ca30:	4a02      	ldr	r2, [pc, #8]	; (800ca3c <stdio_exit_handler+0xc>)
 800ca32:	4903      	ldr	r1, [pc, #12]	; (800ca40 <stdio_exit_handler+0x10>)
 800ca34:	4803      	ldr	r0, [pc, #12]	; (800ca44 <stdio_exit_handler+0x14>)
 800ca36:	f000 b869 	b.w	800cb0c <_fwalk_sglue>
 800ca3a:	bf00      	nop
 800ca3c:	20000110 	.word	0x20000110
 800ca40:	0800e711 	.word	0x0800e711
 800ca44:	20000288 	.word	0x20000288

0800ca48 <cleanup_stdio>:
 800ca48:	6841      	ldr	r1, [r0, #4]
 800ca4a:	4b0c      	ldr	r3, [pc, #48]	; (800ca7c <cleanup_stdio+0x34>)
 800ca4c:	4299      	cmp	r1, r3
 800ca4e:	b510      	push	{r4, lr}
 800ca50:	4604      	mov	r4, r0
 800ca52:	d001      	beq.n	800ca58 <cleanup_stdio+0x10>
 800ca54:	f001 fe5c 	bl	800e710 <_fflush_r>
 800ca58:	68a1      	ldr	r1, [r4, #8]
 800ca5a:	4b09      	ldr	r3, [pc, #36]	; (800ca80 <cleanup_stdio+0x38>)
 800ca5c:	4299      	cmp	r1, r3
 800ca5e:	d002      	beq.n	800ca66 <cleanup_stdio+0x1e>
 800ca60:	4620      	mov	r0, r4
 800ca62:	f001 fe55 	bl	800e710 <_fflush_r>
 800ca66:	68e1      	ldr	r1, [r4, #12]
 800ca68:	4b06      	ldr	r3, [pc, #24]	; (800ca84 <cleanup_stdio+0x3c>)
 800ca6a:	4299      	cmp	r1, r3
 800ca6c:	d004      	beq.n	800ca78 <cleanup_stdio+0x30>
 800ca6e:	4620      	mov	r0, r4
 800ca70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca74:	f001 be4c 	b.w	800e710 <_fflush_r>
 800ca78:	bd10      	pop	{r4, pc}
 800ca7a:	bf00      	nop
 800ca7c:	200026b8 	.word	0x200026b8
 800ca80:	20002720 	.word	0x20002720
 800ca84:	20002788 	.word	0x20002788

0800ca88 <global_stdio_init.part.0>:
 800ca88:	b510      	push	{r4, lr}
 800ca8a:	4b0b      	ldr	r3, [pc, #44]	; (800cab8 <global_stdio_init.part.0+0x30>)
 800ca8c:	4c0b      	ldr	r4, [pc, #44]	; (800cabc <global_stdio_init.part.0+0x34>)
 800ca8e:	4a0c      	ldr	r2, [pc, #48]	; (800cac0 <global_stdio_init.part.0+0x38>)
 800ca90:	601a      	str	r2, [r3, #0]
 800ca92:	4620      	mov	r0, r4
 800ca94:	2200      	movs	r2, #0
 800ca96:	2104      	movs	r1, #4
 800ca98:	f7ff ff94 	bl	800c9c4 <std>
 800ca9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800caa0:	2201      	movs	r2, #1
 800caa2:	2109      	movs	r1, #9
 800caa4:	f7ff ff8e 	bl	800c9c4 <std>
 800caa8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800caac:	2202      	movs	r2, #2
 800caae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cab2:	2112      	movs	r1, #18
 800cab4:	f7ff bf86 	b.w	800c9c4 <std>
 800cab8:	200027f0 	.word	0x200027f0
 800cabc:	200026b8 	.word	0x200026b8
 800cac0:	0800ca31 	.word	0x0800ca31

0800cac4 <__sfp_lock_acquire>:
 800cac4:	4801      	ldr	r0, [pc, #4]	; (800cacc <__sfp_lock_acquire+0x8>)
 800cac6:	f000 b972 	b.w	800cdae <__retarget_lock_acquire_recursive>
 800caca:	bf00      	nop
 800cacc:	200027f9 	.word	0x200027f9

0800cad0 <__sfp_lock_release>:
 800cad0:	4801      	ldr	r0, [pc, #4]	; (800cad8 <__sfp_lock_release+0x8>)
 800cad2:	f000 b96d 	b.w	800cdb0 <__retarget_lock_release_recursive>
 800cad6:	bf00      	nop
 800cad8:	200027f9 	.word	0x200027f9

0800cadc <__sinit>:
 800cadc:	b510      	push	{r4, lr}
 800cade:	4604      	mov	r4, r0
 800cae0:	f7ff fff0 	bl	800cac4 <__sfp_lock_acquire>
 800cae4:	6a23      	ldr	r3, [r4, #32]
 800cae6:	b11b      	cbz	r3, 800caf0 <__sinit+0x14>
 800cae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caec:	f7ff bff0 	b.w	800cad0 <__sfp_lock_release>
 800caf0:	4b04      	ldr	r3, [pc, #16]	; (800cb04 <__sinit+0x28>)
 800caf2:	6223      	str	r3, [r4, #32]
 800caf4:	4b04      	ldr	r3, [pc, #16]	; (800cb08 <__sinit+0x2c>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d1f5      	bne.n	800cae8 <__sinit+0xc>
 800cafc:	f7ff ffc4 	bl	800ca88 <global_stdio_init.part.0>
 800cb00:	e7f2      	b.n	800cae8 <__sinit+0xc>
 800cb02:	bf00      	nop
 800cb04:	0800ca49 	.word	0x0800ca49
 800cb08:	200027f0 	.word	0x200027f0

0800cb0c <_fwalk_sglue>:
 800cb0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb10:	4607      	mov	r7, r0
 800cb12:	4688      	mov	r8, r1
 800cb14:	4614      	mov	r4, r2
 800cb16:	2600      	movs	r6, #0
 800cb18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb1c:	f1b9 0901 	subs.w	r9, r9, #1
 800cb20:	d505      	bpl.n	800cb2e <_fwalk_sglue+0x22>
 800cb22:	6824      	ldr	r4, [r4, #0]
 800cb24:	2c00      	cmp	r4, #0
 800cb26:	d1f7      	bne.n	800cb18 <_fwalk_sglue+0xc>
 800cb28:	4630      	mov	r0, r6
 800cb2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb2e:	89ab      	ldrh	r3, [r5, #12]
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d907      	bls.n	800cb44 <_fwalk_sglue+0x38>
 800cb34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	d003      	beq.n	800cb44 <_fwalk_sglue+0x38>
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	4638      	mov	r0, r7
 800cb40:	47c0      	blx	r8
 800cb42:	4306      	orrs	r6, r0
 800cb44:	3568      	adds	r5, #104	; 0x68
 800cb46:	e7e9      	b.n	800cb1c <_fwalk_sglue+0x10>

0800cb48 <__sread>:
 800cb48:	b510      	push	{r4, lr}
 800cb4a:	460c      	mov	r4, r1
 800cb4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb50:	f000 f8de 	bl	800cd10 <_read_r>
 800cb54:	2800      	cmp	r0, #0
 800cb56:	bfab      	itete	ge
 800cb58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cb5a:	89a3      	ldrhlt	r3, [r4, #12]
 800cb5c:	181b      	addge	r3, r3, r0
 800cb5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb62:	bfac      	ite	ge
 800cb64:	6563      	strge	r3, [r4, #84]	; 0x54
 800cb66:	81a3      	strhlt	r3, [r4, #12]
 800cb68:	bd10      	pop	{r4, pc}

0800cb6a <__swrite>:
 800cb6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb6e:	461f      	mov	r7, r3
 800cb70:	898b      	ldrh	r3, [r1, #12]
 800cb72:	05db      	lsls	r3, r3, #23
 800cb74:	4605      	mov	r5, r0
 800cb76:	460c      	mov	r4, r1
 800cb78:	4616      	mov	r6, r2
 800cb7a:	d505      	bpl.n	800cb88 <__swrite+0x1e>
 800cb7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb80:	2302      	movs	r3, #2
 800cb82:	2200      	movs	r2, #0
 800cb84:	f000 f8b2 	bl	800ccec <_lseek_r>
 800cb88:	89a3      	ldrh	r3, [r4, #12]
 800cb8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb92:	81a3      	strh	r3, [r4, #12]
 800cb94:	4632      	mov	r2, r6
 800cb96:	463b      	mov	r3, r7
 800cb98:	4628      	mov	r0, r5
 800cb9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb9e:	f000 b8c9 	b.w	800cd34 <_write_r>

0800cba2 <__sseek>:
 800cba2:	b510      	push	{r4, lr}
 800cba4:	460c      	mov	r4, r1
 800cba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbaa:	f000 f89f 	bl	800ccec <_lseek_r>
 800cbae:	1c43      	adds	r3, r0, #1
 800cbb0:	89a3      	ldrh	r3, [r4, #12]
 800cbb2:	bf15      	itete	ne
 800cbb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cbb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cbba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cbbe:	81a3      	strheq	r3, [r4, #12]
 800cbc0:	bf18      	it	ne
 800cbc2:	81a3      	strhne	r3, [r4, #12]
 800cbc4:	bd10      	pop	{r4, pc}

0800cbc6 <__sclose>:
 800cbc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbca:	f000 b87f 	b.w	800cccc <_close_r>

0800cbce <_vsniprintf_r>:
 800cbce:	b530      	push	{r4, r5, lr}
 800cbd0:	4614      	mov	r4, r2
 800cbd2:	2c00      	cmp	r4, #0
 800cbd4:	b09b      	sub	sp, #108	; 0x6c
 800cbd6:	4605      	mov	r5, r0
 800cbd8:	461a      	mov	r2, r3
 800cbda:	da05      	bge.n	800cbe8 <_vsniprintf_r+0x1a>
 800cbdc:	238b      	movs	r3, #139	; 0x8b
 800cbde:	6003      	str	r3, [r0, #0]
 800cbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe4:	b01b      	add	sp, #108	; 0x6c
 800cbe6:	bd30      	pop	{r4, r5, pc}
 800cbe8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cbec:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cbf0:	bf14      	ite	ne
 800cbf2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cbf6:	4623      	moveq	r3, r4
 800cbf8:	9302      	str	r3, [sp, #8]
 800cbfa:	9305      	str	r3, [sp, #20]
 800cbfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc00:	9100      	str	r1, [sp, #0]
 800cc02:	9104      	str	r1, [sp, #16]
 800cc04:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cc08:	4669      	mov	r1, sp
 800cc0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cc0c:	f001 fa6c 	bl	800e0e8 <_svfiprintf_r>
 800cc10:	1c43      	adds	r3, r0, #1
 800cc12:	bfbc      	itt	lt
 800cc14:	238b      	movlt	r3, #139	; 0x8b
 800cc16:	602b      	strlt	r3, [r5, #0]
 800cc18:	2c00      	cmp	r4, #0
 800cc1a:	d0e3      	beq.n	800cbe4 <_vsniprintf_r+0x16>
 800cc1c:	9b00      	ldr	r3, [sp, #0]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	701a      	strb	r2, [r3, #0]
 800cc22:	e7df      	b.n	800cbe4 <_vsniprintf_r+0x16>

0800cc24 <vsniprintf>:
 800cc24:	b507      	push	{r0, r1, r2, lr}
 800cc26:	9300      	str	r3, [sp, #0]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	460a      	mov	r2, r1
 800cc2c:	4601      	mov	r1, r0
 800cc2e:	4803      	ldr	r0, [pc, #12]	; (800cc3c <vsniprintf+0x18>)
 800cc30:	6800      	ldr	r0, [r0, #0]
 800cc32:	f7ff ffcc 	bl	800cbce <_vsniprintf_r>
 800cc36:	b003      	add	sp, #12
 800cc38:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc3c:	200002d4 	.word	0x200002d4

0800cc40 <memset>:
 800cc40:	4402      	add	r2, r0
 800cc42:	4603      	mov	r3, r0
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d100      	bne.n	800cc4a <memset+0xa>
 800cc48:	4770      	bx	lr
 800cc4a:	f803 1b01 	strb.w	r1, [r3], #1
 800cc4e:	e7f9      	b.n	800cc44 <memset+0x4>

0800cc50 <strncmp>:
 800cc50:	b510      	push	{r4, lr}
 800cc52:	b16a      	cbz	r2, 800cc70 <strncmp+0x20>
 800cc54:	3901      	subs	r1, #1
 800cc56:	1884      	adds	r4, r0, r2
 800cc58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d103      	bne.n	800cc6c <strncmp+0x1c>
 800cc64:	42a0      	cmp	r0, r4
 800cc66:	d001      	beq.n	800cc6c <strncmp+0x1c>
 800cc68:	2a00      	cmp	r2, #0
 800cc6a:	d1f5      	bne.n	800cc58 <strncmp+0x8>
 800cc6c:	1ad0      	subs	r0, r2, r3
 800cc6e:	bd10      	pop	{r4, pc}
 800cc70:	4610      	mov	r0, r2
 800cc72:	e7fc      	b.n	800cc6e <strncmp+0x1e>

0800cc74 <__strtok_r>:
 800cc74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc76:	b908      	cbnz	r0, 800cc7c <__strtok_r+0x8>
 800cc78:	6810      	ldr	r0, [r2, #0]
 800cc7a:	b188      	cbz	r0, 800cca0 <__strtok_r+0x2c>
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cc84:	460f      	mov	r7, r1
 800cc86:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cc8a:	b91e      	cbnz	r6, 800cc94 <__strtok_r+0x20>
 800cc8c:	b965      	cbnz	r5, 800cca8 <__strtok_r+0x34>
 800cc8e:	6015      	str	r5, [r2, #0]
 800cc90:	4628      	mov	r0, r5
 800cc92:	e005      	b.n	800cca0 <__strtok_r+0x2c>
 800cc94:	42b5      	cmp	r5, r6
 800cc96:	d1f6      	bne.n	800cc86 <__strtok_r+0x12>
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d1f0      	bne.n	800cc7e <__strtok_r+0xa>
 800cc9c:	6014      	str	r4, [r2, #0]
 800cc9e:	7003      	strb	r3, [r0, #0]
 800cca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cca2:	461c      	mov	r4, r3
 800cca4:	e00c      	b.n	800ccc0 <__strtok_r+0x4c>
 800cca6:	b915      	cbnz	r5, 800ccae <__strtok_r+0x3a>
 800cca8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ccac:	460e      	mov	r6, r1
 800ccae:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ccb2:	42ab      	cmp	r3, r5
 800ccb4:	d1f7      	bne.n	800cca6 <__strtok_r+0x32>
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d0f3      	beq.n	800cca2 <__strtok_r+0x2e>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ccc0:	6014      	str	r4, [r2, #0]
 800ccc2:	e7ed      	b.n	800cca0 <__strtok_r+0x2c>

0800ccc4 <strtok_r>:
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	f7ff bfd5 	b.w	800cc74 <__strtok_r>
	...

0800cccc <_close_r>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	4d06      	ldr	r5, [pc, #24]	; (800cce8 <_close_r+0x1c>)
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	4608      	mov	r0, r1
 800ccd6:	602b      	str	r3, [r5, #0]
 800ccd8:	f7f4 fc8b 	bl	80015f2 <_close>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	d102      	bne.n	800cce6 <_close_r+0x1a>
 800cce0:	682b      	ldr	r3, [r5, #0]
 800cce2:	b103      	cbz	r3, 800cce6 <_close_r+0x1a>
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	bd38      	pop	{r3, r4, r5, pc}
 800cce8:	200027f4 	.word	0x200027f4

0800ccec <_lseek_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	4d07      	ldr	r5, [pc, #28]	; (800cd0c <_lseek_r+0x20>)
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	4608      	mov	r0, r1
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	602a      	str	r2, [r5, #0]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	f7f4 fca0 	bl	8001640 <_lseek>
 800cd00:	1c43      	adds	r3, r0, #1
 800cd02:	d102      	bne.n	800cd0a <_lseek_r+0x1e>
 800cd04:	682b      	ldr	r3, [r5, #0]
 800cd06:	b103      	cbz	r3, 800cd0a <_lseek_r+0x1e>
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	bd38      	pop	{r3, r4, r5, pc}
 800cd0c:	200027f4 	.word	0x200027f4

0800cd10 <_read_r>:
 800cd10:	b538      	push	{r3, r4, r5, lr}
 800cd12:	4d07      	ldr	r5, [pc, #28]	; (800cd30 <_read_r+0x20>)
 800cd14:	4604      	mov	r4, r0
 800cd16:	4608      	mov	r0, r1
 800cd18:	4611      	mov	r1, r2
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	602a      	str	r2, [r5, #0]
 800cd1e:	461a      	mov	r2, r3
 800cd20:	f7f4 fc2e 	bl	8001580 <_read>
 800cd24:	1c43      	adds	r3, r0, #1
 800cd26:	d102      	bne.n	800cd2e <_read_r+0x1e>
 800cd28:	682b      	ldr	r3, [r5, #0]
 800cd2a:	b103      	cbz	r3, 800cd2e <_read_r+0x1e>
 800cd2c:	6023      	str	r3, [r4, #0]
 800cd2e:	bd38      	pop	{r3, r4, r5, pc}
 800cd30:	200027f4 	.word	0x200027f4

0800cd34 <_write_r>:
 800cd34:	b538      	push	{r3, r4, r5, lr}
 800cd36:	4d07      	ldr	r5, [pc, #28]	; (800cd54 <_write_r+0x20>)
 800cd38:	4604      	mov	r4, r0
 800cd3a:	4608      	mov	r0, r1
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	2200      	movs	r2, #0
 800cd40:	602a      	str	r2, [r5, #0]
 800cd42:	461a      	mov	r2, r3
 800cd44:	f7f4 fc39 	bl	80015ba <_write>
 800cd48:	1c43      	adds	r3, r0, #1
 800cd4a:	d102      	bne.n	800cd52 <_write_r+0x1e>
 800cd4c:	682b      	ldr	r3, [r5, #0]
 800cd4e:	b103      	cbz	r3, 800cd52 <_write_r+0x1e>
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	bd38      	pop	{r3, r4, r5, pc}
 800cd54:	200027f4 	.word	0x200027f4

0800cd58 <__errno>:
 800cd58:	4b01      	ldr	r3, [pc, #4]	; (800cd60 <__errno+0x8>)
 800cd5a:	6818      	ldr	r0, [r3, #0]
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	200002d4 	.word	0x200002d4

0800cd64 <__libc_init_array>:
 800cd64:	b570      	push	{r4, r5, r6, lr}
 800cd66:	4d0d      	ldr	r5, [pc, #52]	; (800cd9c <__libc_init_array+0x38>)
 800cd68:	4c0d      	ldr	r4, [pc, #52]	; (800cda0 <__libc_init_array+0x3c>)
 800cd6a:	1b64      	subs	r4, r4, r5
 800cd6c:	10a4      	asrs	r4, r4, #2
 800cd6e:	2600      	movs	r6, #0
 800cd70:	42a6      	cmp	r6, r4
 800cd72:	d109      	bne.n	800cd88 <__libc_init_array+0x24>
 800cd74:	4d0b      	ldr	r5, [pc, #44]	; (800cda4 <__libc_init_array+0x40>)
 800cd76:	4c0c      	ldr	r4, [pc, #48]	; (800cda8 <__libc_init_array+0x44>)
 800cd78:	f002 f84a 	bl	800ee10 <_init>
 800cd7c:	1b64      	subs	r4, r4, r5
 800cd7e:	10a4      	asrs	r4, r4, #2
 800cd80:	2600      	movs	r6, #0
 800cd82:	42a6      	cmp	r6, r4
 800cd84:	d105      	bne.n	800cd92 <__libc_init_array+0x2e>
 800cd86:	bd70      	pop	{r4, r5, r6, pc}
 800cd88:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd8c:	4798      	blx	r3
 800cd8e:	3601      	adds	r6, #1
 800cd90:	e7ee      	b.n	800cd70 <__libc_init_array+0xc>
 800cd92:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd96:	4798      	blx	r3
 800cd98:	3601      	adds	r6, #1
 800cd9a:	e7f2      	b.n	800cd82 <__libc_init_array+0x1e>
 800cd9c:	0800f61c 	.word	0x0800f61c
 800cda0:	0800f61c 	.word	0x0800f61c
 800cda4:	0800f61c 	.word	0x0800f61c
 800cda8:	0800f620 	.word	0x0800f620

0800cdac <__retarget_lock_init_recursive>:
 800cdac:	4770      	bx	lr

0800cdae <__retarget_lock_acquire_recursive>:
 800cdae:	4770      	bx	lr

0800cdb0 <__retarget_lock_release_recursive>:
 800cdb0:	4770      	bx	lr

0800cdb2 <strcpy>:
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdb8:	f803 2b01 	strb.w	r2, [r3], #1
 800cdbc:	2a00      	cmp	r2, #0
 800cdbe:	d1f9      	bne.n	800cdb4 <strcpy+0x2>
 800cdc0:	4770      	bx	lr

0800cdc2 <memcpy>:
 800cdc2:	440a      	add	r2, r1
 800cdc4:	4291      	cmp	r1, r2
 800cdc6:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdca:	d100      	bne.n	800cdce <memcpy+0xc>
 800cdcc:	4770      	bx	lr
 800cdce:	b510      	push	{r4, lr}
 800cdd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdd8:	4291      	cmp	r1, r2
 800cdda:	d1f9      	bne.n	800cdd0 <memcpy+0xe>
 800cddc:	bd10      	pop	{r4, pc}
	...

0800cde0 <nan>:
 800cde0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cde8 <nan+0x8>
 800cde4:	4770      	bx	lr
 800cde6:	bf00      	nop
 800cde8:	00000000 	.word	0x00000000
 800cdec:	7ff80000 	.word	0x7ff80000

0800cdf0 <nanf>:
 800cdf0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cdf8 <nanf+0x8>
 800cdf4:	4770      	bx	lr
 800cdf6:	bf00      	nop
 800cdf8:	7fc00000 	.word	0x7fc00000

0800cdfc <_free_r>:
 800cdfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdfe:	2900      	cmp	r1, #0
 800ce00:	d044      	beq.n	800ce8c <_free_r+0x90>
 800ce02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce06:	9001      	str	r0, [sp, #4]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f1a1 0404 	sub.w	r4, r1, #4
 800ce0e:	bfb8      	it	lt
 800ce10:	18e4      	addlt	r4, r4, r3
 800ce12:	f000 fc49 	bl	800d6a8 <__malloc_lock>
 800ce16:	4a1e      	ldr	r2, [pc, #120]	; (800ce90 <_free_r+0x94>)
 800ce18:	9801      	ldr	r0, [sp, #4]
 800ce1a:	6813      	ldr	r3, [r2, #0]
 800ce1c:	b933      	cbnz	r3, 800ce2c <_free_r+0x30>
 800ce1e:	6063      	str	r3, [r4, #4]
 800ce20:	6014      	str	r4, [r2, #0]
 800ce22:	b003      	add	sp, #12
 800ce24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce28:	f000 bc44 	b.w	800d6b4 <__malloc_unlock>
 800ce2c:	42a3      	cmp	r3, r4
 800ce2e:	d908      	bls.n	800ce42 <_free_r+0x46>
 800ce30:	6825      	ldr	r5, [r4, #0]
 800ce32:	1961      	adds	r1, r4, r5
 800ce34:	428b      	cmp	r3, r1
 800ce36:	bf01      	itttt	eq
 800ce38:	6819      	ldreq	r1, [r3, #0]
 800ce3a:	685b      	ldreq	r3, [r3, #4]
 800ce3c:	1949      	addeq	r1, r1, r5
 800ce3e:	6021      	streq	r1, [r4, #0]
 800ce40:	e7ed      	b.n	800ce1e <_free_r+0x22>
 800ce42:	461a      	mov	r2, r3
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	b10b      	cbz	r3, 800ce4c <_free_r+0x50>
 800ce48:	42a3      	cmp	r3, r4
 800ce4a:	d9fa      	bls.n	800ce42 <_free_r+0x46>
 800ce4c:	6811      	ldr	r1, [r2, #0]
 800ce4e:	1855      	adds	r5, r2, r1
 800ce50:	42a5      	cmp	r5, r4
 800ce52:	d10b      	bne.n	800ce6c <_free_r+0x70>
 800ce54:	6824      	ldr	r4, [r4, #0]
 800ce56:	4421      	add	r1, r4
 800ce58:	1854      	adds	r4, r2, r1
 800ce5a:	42a3      	cmp	r3, r4
 800ce5c:	6011      	str	r1, [r2, #0]
 800ce5e:	d1e0      	bne.n	800ce22 <_free_r+0x26>
 800ce60:	681c      	ldr	r4, [r3, #0]
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	6053      	str	r3, [r2, #4]
 800ce66:	440c      	add	r4, r1
 800ce68:	6014      	str	r4, [r2, #0]
 800ce6a:	e7da      	b.n	800ce22 <_free_r+0x26>
 800ce6c:	d902      	bls.n	800ce74 <_free_r+0x78>
 800ce6e:	230c      	movs	r3, #12
 800ce70:	6003      	str	r3, [r0, #0]
 800ce72:	e7d6      	b.n	800ce22 <_free_r+0x26>
 800ce74:	6825      	ldr	r5, [r4, #0]
 800ce76:	1961      	adds	r1, r4, r5
 800ce78:	428b      	cmp	r3, r1
 800ce7a:	bf04      	itt	eq
 800ce7c:	6819      	ldreq	r1, [r3, #0]
 800ce7e:	685b      	ldreq	r3, [r3, #4]
 800ce80:	6063      	str	r3, [r4, #4]
 800ce82:	bf04      	itt	eq
 800ce84:	1949      	addeq	r1, r1, r5
 800ce86:	6021      	streq	r1, [r4, #0]
 800ce88:	6054      	str	r4, [r2, #4]
 800ce8a:	e7ca      	b.n	800ce22 <_free_r+0x26>
 800ce8c:	b003      	add	sp, #12
 800ce8e:	bd30      	pop	{r4, r5, pc}
 800ce90:	200027fc 	.word	0x200027fc

0800ce94 <rshift>:
 800ce94:	6903      	ldr	r3, [r0, #16]
 800ce96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cea2:	f100 0414 	add.w	r4, r0, #20
 800cea6:	dd45      	ble.n	800cf34 <rshift+0xa0>
 800cea8:	f011 011f 	ands.w	r1, r1, #31
 800ceac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ceb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ceb4:	d10c      	bne.n	800ced0 <rshift+0x3c>
 800ceb6:	f100 0710 	add.w	r7, r0, #16
 800ceba:	4629      	mov	r1, r5
 800cebc:	42b1      	cmp	r1, r6
 800cebe:	d334      	bcc.n	800cf2a <rshift+0x96>
 800cec0:	1a9b      	subs	r3, r3, r2
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	1eea      	subs	r2, r5, #3
 800cec6:	4296      	cmp	r6, r2
 800cec8:	bf38      	it	cc
 800ceca:	2300      	movcc	r3, #0
 800cecc:	4423      	add	r3, r4
 800cece:	e015      	b.n	800cefc <rshift+0x68>
 800ced0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ced4:	f1c1 0820 	rsb	r8, r1, #32
 800ced8:	40cf      	lsrs	r7, r1
 800ceda:	f105 0e04 	add.w	lr, r5, #4
 800cede:	46a1      	mov	r9, r4
 800cee0:	4576      	cmp	r6, lr
 800cee2:	46f4      	mov	ip, lr
 800cee4:	d815      	bhi.n	800cf12 <rshift+0x7e>
 800cee6:	1a9a      	subs	r2, r3, r2
 800cee8:	0092      	lsls	r2, r2, #2
 800ceea:	3a04      	subs	r2, #4
 800ceec:	3501      	adds	r5, #1
 800ceee:	42ae      	cmp	r6, r5
 800cef0:	bf38      	it	cc
 800cef2:	2200      	movcc	r2, #0
 800cef4:	18a3      	adds	r3, r4, r2
 800cef6:	50a7      	str	r7, [r4, r2]
 800cef8:	b107      	cbz	r7, 800cefc <rshift+0x68>
 800cefa:	3304      	adds	r3, #4
 800cefc:	1b1a      	subs	r2, r3, r4
 800cefe:	42a3      	cmp	r3, r4
 800cf00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cf04:	bf08      	it	eq
 800cf06:	2300      	moveq	r3, #0
 800cf08:	6102      	str	r2, [r0, #16]
 800cf0a:	bf08      	it	eq
 800cf0c:	6143      	streq	r3, [r0, #20]
 800cf0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf12:	f8dc c000 	ldr.w	ip, [ip]
 800cf16:	fa0c fc08 	lsl.w	ip, ip, r8
 800cf1a:	ea4c 0707 	orr.w	r7, ip, r7
 800cf1e:	f849 7b04 	str.w	r7, [r9], #4
 800cf22:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf26:	40cf      	lsrs	r7, r1
 800cf28:	e7da      	b.n	800cee0 <rshift+0x4c>
 800cf2a:	f851 cb04 	ldr.w	ip, [r1], #4
 800cf2e:	f847 cf04 	str.w	ip, [r7, #4]!
 800cf32:	e7c3      	b.n	800cebc <rshift+0x28>
 800cf34:	4623      	mov	r3, r4
 800cf36:	e7e1      	b.n	800cefc <rshift+0x68>

0800cf38 <__hexdig_fun>:
 800cf38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cf3c:	2b09      	cmp	r3, #9
 800cf3e:	d802      	bhi.n	800cf46 <__hexdig_fun+0xe>
 800cf40:	3820      	subs	r0, #32
 800cf42:	b2c0      	uxtb	r0, r0
 800cf44:	4770      	bx	lr
 800cf46:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cf4a:	2b05      	cmp	r3, #5
 800cf4c:	d801      	bhi.n	800cf52 <__hexdig_fun+0x1a>
 800cf4e:	3847      	subs	r0, #71	; 0x47
 800cf50:	e7f7      	b.n	800cf42 <__hexdig_fun+0xa>
 800cf52:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cf56:	2b05      	cmp	r3, #5
 800cf58:	d801      	bhi.n	800cf5e <__hexdig_fun+0x26>
 800cf5a:	3827      	subs	r0, #39	; 0x27
 800cf5c:	e7f1      	b.n	800cf42 <__hexdig_fun+0xa>
 800cf5e:	2000      	movs	r0, #0
 800cf60:	4770      	bx	lr
	...

0800cf64 <__gethex>:
 800cf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf68:	4617      	mov	r7, r2
 800cf6a:	680a      	ldr	r2, [r1, #0]
 800cf6c:	b085      	sub	sp, #20
 800cf6e:	f102 0b02 	add.w	fp, r2, #2
 800cf72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cf76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cf7a:	4681      	mov	r9, r0
 800cf7c:	468a      	mov	sl, r1
 800cf7e:	9302      	str	r3, [sp, #8]
 800cf80:	32fe      	adds	r2, #254	; 0xfe
 800cf82:	eb02 030b 	add.w	r3, r2, fp
 800cf86:	46d8      	mov	r8, fp
 800cf88:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800cf8c:	9301      	str	r3, [sp, #4]
 800cf8e:	2830      	cmp	r0, #48	; 0x30
 800cf90:	d0f7      	beq.n	800cf82 <__gethex+0x1e>
 800cf92:	f7ff ffd1 	bl	800cf38 <__hexdig_fun>
 800cf96:	4604      	mov	r4, r0
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	d138      	bne.n	800d00e <__gethex+0xaa>
 800cf9c:	49a7      	ldr	r1, [pc, #668]	; (800d23c <__gethex+0x2d8>)
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	4640      	mov	r0, r8
 800cfa2:	f7ff fe55 	bl	800cc50 <strncmp>
 800cfa6:	4606      	mov	r6, r0
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	d169      	bne.n	800d080 <__gethex+0x11c>
 800cfac:	f898 0001 	ldrb.w	r0, [r8, #1]
 800cfb0:	465d      	mov	r5, fp
 800cfb2:	f7ff ffc1 	bl	800cf38 <__hexdig_fun>
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	d064      	beq.n	800d084 <__gethex+0x120>
 800cfba:	465a      	mov	r2, fp
 800cfbc:	7810      	ldrb	r0, [r2, #0]
 800cfbe:	2830      	cmp	r0, #48	; 0x30
 800cfc0:	4690      	mov	r8, r2
 800cfc2:	f102 0201 	add.w	r2, r2, #1
 800cfc6:	d0f9      	beq.n	800cfbc <__gethex+0x58>
 800cfc8:	f7ff ffb6 	bl	800cf38 <__hexdig_fun>
 800cfcc:	2301      	movs	r3, #1
 800cfce:	fab0 f480 	clz	r4, r0
 800cfd2:	0964      	lsrs	r4, r4, #5
 800cfd4:	465e      	mov	r6, fp
 800cfd6:	9301      	str	r3, [sp, #4]
 800cfd8:	4642      	mov	r2, r8
 800cfda:	4615      	mov	r5, r2
 800cfdc:	3201      	adds	r2, #1
 800cfde:	7828      	ldrb	r0, [r5, #0]
 800cfe0:	f7ff ffaa 	bl	800cf38 <__hexdig_fun>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	d1f8      	bne.n	800cfda <__gethex+0x76>
 800cfe8:	4994      	ldr	r1, [pc, #592]	; (800d23c <__gethex+0x2d8>)
 800cfea:	2201      	movs	r2, #1
 800cfec:	4628      	mov	r0, r5
 800cfee:	f7ff fe2f 	bl	800cc50 <strncmp>
 800cff2:	b978      	cbnz	r0, 800d014 <__gethex+0xb0>
 800cff4:	b946      	cbnz	r6, 800d008 <__gethex+0xa4>
 800cff6:	1c6e      	adds	r6, r5, #1
 800cff8:	4632      	mov	r2, r6
 800cffa:	4615      	mov	r5, r2
 800cffc:	3201      	adds	r2, #1
 800cffe:	7828      	ldrb	r0, [r5, #0]
 800d000:	f7ff ff9a 	bl	800cf38 <__hexdig_fun>
 800d004:	2800      	cmp	r0, #0
 800d006:	d1f8      	bne.n	800cffa <__gethex+0x96>
 800d008:	1b73      	subs	r3, r6, r5
 800d00a:	009e      	lsls	r6, r3, #2
 800d00c:	e004      	b.n	800d018 <__gethex+0xb4>
 800d00e:	2400      	movs	r4, #0
 800d010:	4626      	mov	r6, r4
 800d012:	e7e1      	b.n	800cfd8 <__gethex+0x74>
 800d014:	2e00      	cmp	r6, #0
 800d016:	d1f7      	bne.n	800d008 <__gethex+0xa4>
 800d018:	782b      	ldrb	r3, [r5, #0]
 800d01a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d01e:	2b50      	cmp	r3, #80	; 0x50
 800d020:	d13d      	bne.n	800d09e <__gethex+0x13a>
 800d022:	786b      	ldrb	r3, [r5, #1]
 800d024:	2b2b      	cmp	r3, #43	; 0x2b
 800d026:	d02f      	beq.n	800d088 <__gethex+0x124>
 800d028:	2b2d      	cmp	r3, #45	; 0x2d
 800d02a:	d031      	beq.n	800d090 <__gethex+0x12c>
 800d02c:	1c69      	adds	r1, r5, #1
 800d02e:	f04f 0b00 	mov.w	fp, #0
 800d032:	7808      	ldrb	r0, [r1, #0]
 800d034:	f7ff ff80 	bl	800cf38 <__hexdig_fun>
 800d038:	1e42      	subs	r2, r0, #1
 800d03a:	b2d2      	uxtb	r2, r2
 800d03c:	2a18      	cmp	r2, #24
 800d03e:	d82e      	bhi.n	800d09e <__gethex+0x13a>
 800d040:	f1a0 0210 	sub.w	r2, r0, #16
 800d044:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d048:	f7ff ff76 	bl	800cf38 <__hexdig_fun>
 800d04c:	f100 3cff 	add.w	ip, r0, #4294967295
 800d050:	fa5f fc8c 	uxtb.w	ip, ip
 800d054:	f1bc 0f18 	cmp.w	ip, #24
 800d058:	d91d      	bls.n	800d096 <__gethex+0x132>
 800d05a:	f1bb 0f00 	cmp.w	fp, #0
 800d05e:	d000      	beq.n	800d062 <__gethex+0xfe>
 800d060:	4252      	negs	r2, r2
 800d062:	4416      	add	r6, r2
 800d064:	f8ca 1000 	str.w	r1, [sl]
 800d068:	b1dc      	cbz	r4, 800d0a2 <__gethex+0x13e>
 800d06a:	9b01      	ldr	r3, [sp, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	bf14      	ite	ne
 800d070:	f04f 0800 	movne.w	r8, #0
 800d074:	f04f 0806 	moveq.w	r8, #6
 800d078:	4640      	mov	r0, r8
 800d07a:	b005      	add	sp, #20
 800d07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d080:	4645      	mov	r5, r8
 800d082:	4626      	mov	r6, r4
 800d084:	2401      	movs	r4, #1
 800d086:	e7c7      	b.n	800d018 <__gethex+0xb4>
 800d088:	f04f 0b00 	mov.w	fp, #0
 800d08c:	1ca9      	adds	r1, r5, #2
 800d08e:	e7d0      	b.n	800d032 <__gethex+0xce>
 800d090:	f04f 0b01 	mov.w	fp, #1
 800d094:	e7fa      	b.n	800d08c <__gethex+0x128>
 800d096:	230a      	movs	r3, #10
 800d098:	fb03 0002 	mla	r0, r3, r2, r0
 800d09c:	e7d0      	b.n	800d040 <__gethex+0xdc>
 800d09e:	4629      	mov	r1, r5
 800d0a0:	e7e0      	b.n	800d064 <__gethex+0x100>
 800d0a2:	eba5 0308 	sub.w	r3, r5, r8
 800d0a6:	3b01      	subs	r3, #1
 800d0a8:	4621      	mov	r1, r4
 800d0aa:	2b07      	cmp	r3, #7
 800d0ac:	dc0a      	bgt.n	800d0c4 <__gethex+0x160>
 800d0ae:	4648      	mov	r0, r9
 800d0b0:	f000 fb06 	bl	800d6c0 <_Balloc>
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	b940      	cbnz	r0, 800d0ca <__gethex+0x166>
 800d0b8:	4b61      	ldr	r3, [pc, #388]	; (800d240 <__gethex+0x2dc>)
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	21e4      	movs	r1, #228	; 0xe4
 800d0be:	4861      	ldr	r0, [pc, #388]	; (800d244 <__gethex+0x2e0>)
 800d0c0:	f001 fb78 	bl	800e7b4 <__assert_func>
 800d0c4:	3101      	adds	r1, #1
 800d0c6:	105b      	asrs	r3, r3, #1
 800d0c8:	e7ef      	b.n	800d0aa <__gethex+0x146>
 800d0ca:	f100 0a14 	add.w	sl, r0, #20
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	495a      	ldr	r1, [pc, #360]	; (800d23c <__gethex+0x2d8>)
 800d0d2:	f8cd a004 	str.w	sl, [sp, #4]
 800d0d6:	469b      	mov	fp, r3
 800d0d8:	45a8      	cmp	r8, r5
 800d0da:	d342      	bcc.n	800d162 <__gethex+0x1fe>
 800d0dc:	9801      	ldr	r0, [sp, #4]
 800d0de:	f840 bb04 	str.w	fp, [r0], #4
 800d0e2:	eba0 000a 	sub.w	r0, r0, sl
 800d0e6:	1080      	asrs	r0, r0, #2
 800d0e8:	6120      	str	r0, [r4, #16]
 800d0ea:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d0ee:	4658      	mov	r0, fp
 800d0f0:	f000 fbd8 	bl	800d8a4 <__hi0bits>
 800d0f4:	683d      	ldr	r5, [r7, #0]
 800d0f6:	eba8 0000 	sub.w	r0, r8, r0
 800d0fa:	42a8      	cmp	r0, r5
 800d0fc:	dd59      	ble.n	800d1b2 <__gethex+0x24e>
 800d0fe:	eba0 0805 	sub.w	r8, r0, r5
 800d102:	4641      	mov	r1, r8
 800d104:	4620      	mov	r0, r4
 800d106:	f000 ff67 	bl	800dfd8 <__any_on>
 800d10a:	4683      	mov	fp, r0
 800d10c:	b1b8      	cbz	r0, 800d13e <__gethex+0x1da>
 800d10e:	f108 33ff 	add.w	r3, r8, #4294967295
 800d112:	1159      	asrs	r1, r3, #5
 800d114:	f003 021f 	and.w	r2, r3, #31
 800d118:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d11c:	f04f 0b01 	mov.w	fp, #1
 800d120:	fa0b f202 	lsl.w	r2, fp, r2
 800d124:	420a      	tst	r2, r1
 800d126:	d00a      	beq.n	800d13e <__gethex+0x1da>
 800d128:	455b      	cmp	r3, fp
 800d12a:	dd06      	ble.n	800d13a <__gethex+0x1d6>
 800d12c:	f1a8 0102 	sub.w	r1, r8, #2
 800d130:	4620      	mov	r0, r4
 800d132:	f000 ff51 	bl	800dfd8 <__any_on>
 800d136:	2800      	cmp	r0, #0
 800d138:	d138      	bne.n	800d1ac <__gethex+0x248>
 800d13a:	f04f 0b02 	mov.w	fp, #2
 800d13e:	4641      	mov	r1, r8
 800d140:	4620      	mov	r0, r4
 800d142:	f7ff fea7 	bl	800ce94 <rshift>
 800d146:	4446      	add	r6, r8
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	42b3      	cmp	r3, r6
 800d14c:	da41      	bge.n	800d1d2 <__gethex+0x26e>
 800d14e:	4621      	mov	r1, r4
 800d150:	4648      	mov	r0, r9
 800d152:	f000 faf5 	bl	800d740 <_Bfree>
 800d156:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d158:	2300      	movs	r3, #0
 800d15a:	6013      	str	r3, [r2, #0]
 800d15c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d160:	e78a      	b.n	800d078 <__gethex+0x114>
 800d162:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d166:	2a2e      	cmp	r2, #46	; 0x2e
 800d168:	d014      	beq.n	800d194 <__gethex+0x230>
 800d16a:	2b20      	cmp	r3, #32
 800d16c:	d106      	bne.n	800d17c <__gethex+0x218>
 800d16e:	9b01      	ldr	r3, [sp, #4]
 800d170:	f843 bb04 	str.w	fp, [r3], #4
 800d174:	f04f 0b00 	mov.w	fp, #0
 800d178:	9301      	str	r3, [sp, #4]
 800d17a:	465b      	mov	r3, fp
 800d17c:	7828      	ldrb	r0, [r5, #0]
 800d17e:	9303      	str	r3, [sp, #12]
 800d180:	f7ff feda 	bl	800cf38 <__hexdig_fun>
 800d184:	9b03      	ldr	r3, [sp, #12]
 800d186:	f000 000f 	and.w	r0, r0, #15
 800d18a:	4098      	lsls	r0, r3
 800d18c:	ea4b 0b00 	orr.w	fp, fp, r0
 800d190:	3304      	adds	r3, #4
 800d192:	e7a1      	b.n	800d0d8 <__gethex+0x174>
 800d194:	45a8      	cmp	r8, r5
 800d196:	d8e8      	bhi.n	800d16a <__gethex+0x206>
 800d198:	2201      	movs	r2, #1
 800d19a:	4628      	mov	r0, r5
 800d19c:	9303      	str	r3, [sp, #12]
 800d19e:	f7ff fd57 	bl	800cc50 <strncmp>
 800d1a2:	4926      	ldr	r1, [pc, #152]	; (800d23c <__gethex+0x2d8>)
 800d1a4:	9b03      	ldr	r3, [sp, #12]
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	d1df      	bne.n	800d16a <__gethex+0x206>
 800d1aa:	e795      	b.n	800d0d8 <__gethex+0x174>
 800d1ac:	f04f 0b03 	mov.w	fp, #3
 800d1b0:	e7c5      	b.n	800d13e <__gethex+0x1da>
 800d1b2:	da0b      	bge.n	800d1cc <__gethex+0x268>
 800d1b4:	eba5 0800 	sub.w	r8, r5, r0
 800d1b8:	4621      	mov	r1, r4
 800d1ba:	4642      	mov	r2, r8
 800d1bc:	4648      	mov	r0, r9
 800d1be:	f000 fcd9 	bl	800db74 <__lshift>
 800d1c2:	eba6 0608 	sub.w	r6, r6, r8
 800d1c6:	4604      	mov	r4, r0
 800d1c8:	f100 0a14 	add.w	sl, r0, #20
 800d1cc:	f04f 0b00 	mov.w	fp, #0
 800d1d0:	e7ba      	b.n	800d148 <__gethex+0x1e4>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	42b3      	cmp	r3, r6
 800d1d6:	dd73      	ble.n	800d2c0 <__gethex+0x35c>
 800d1d8:	1b9e      	subs	r6, r3, r6
 800d1da:	42b5      	cmp	r5, r6
 800d1dc:	dc34      	bgt.n	800d248 <__gethex+0x2e4>
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2b02      	cmp	r3, #2
 800d1e2:	d023      	beq.n	800d22c <__gethex+0x2c8>
 800d1e4:	2b03      	cmp	r3, #3
 800d1e6:	d025      	beq.n	800d234 <__gethex+0x2d0>
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d115      	bne.n	800d218 <__gethex+0x2b4>
 800d1ec:	42b5      	cmp	r5, r6
 800d1ee:	d113      	bne.n	800d218 <__gethex+0x2b4>
 800d1f0:	2d01      	cmp	r5, #1
 800d1f2:	d10b      	bne.n	800d20c <__gethex+0x2a8>
 800d1f4:	9a02      	ldr	r2, [sp, #8]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6013      	str	r3, [r2, #0]
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	6123      	str	r3, [r4, #16]
 800d1fe:	f8ca 3000 	str.w	r3, [sl]
 800d202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d204:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d208:	601c      	str	r4, [r3, #0]
 800d20a:	e735      	b.n	800d078 <__gethex+0x114>
 800d20c:	1e69      	subs	r1, r5, #1
 800d20e:	4620      	mov	r0, r4
 800d210:	f000 fee2 	bl	800dfd8 <__any_on>
 800d214:	2800      	cmp	r0, #0
 800d216:	d1ed      	bne.n	800d1f4 <__gethex+0x290>
 800d218:	4621      	mov	r1, r4
 800d21a:	4648      	mov	r0, r9
 800d21c:	f000 fa90 	bl	800d740 <_Bfree>
 800d220:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d222:	2300      	movs	r3, #0
 800d224:	6013      	str	r3, [r2, #0]
 800d226:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d22a:	e725      	b.n	800d078 <__gethex+0x114>
 800d22c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1f2      	bne.n	800d218 <__gethex+0x2b4>
 800d232:	e7df      	b.n	800d1f4 <__gethex+0x290>
 800d234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d236:	2b00      	cmp	r3, #0
 800d238:	d1dc      	bne.n	800d1f4 <__gethex+0x290>
 800d23a:	e7ed      	b.n	800d218 <__gethex+0x2b4>
 800d23c:	0800f254 	.word	0x0800f254
 800d240:	0800f3c1 	.word	0x0800f3c1
 800d244:	0800f3d2 	.word	0x0800f3d2
 800d248:	f106 38ff 	add.w	r8, r6, #4294967295
 800d24c:	f1bb 0f00 	cmp.w	fp, #0
 800d250:	d133      	bne.n	800d2ba <__gethex+0x356>
 800d252:	f1b8 0f00 	cmp.w	r8, #0
 800d256:	d004      	beq.n	800d262 <__gethex+0x2fe>
 800d258:	4641      	mov	r1, r8
 800d25a:	4620      	mov	r0, r4
 800d25c:	f000 febc 	bl	800dfd8 <__any_on>
 800d260:	4683      	mov	fp, r0
 800d262:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d266:	2301      	movs	r3, #1
 800d268:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d26c:	f008 081f 	and.w	r8, r8, #31
 800d270:	fa03 f308 	lsl.w	r3, r3, r8
 800d274:	4213      	tst	r3, r2
 800d276:	4631      	mov	r1, r6
 800d278:	4620      	mov	r0, r4
 800d27a:	bf18      	it	ne
 800d27c:	f04b 0b02 	orrne.w	fp, fp, #2
 800d280:	1bad      	subs	r5, r5, r6
 800d282:	f7ff fe07 	bl	800ce94 <rshift>
 800d286:	687e      	ldr	r6, [r7, #4]
 800d288:	f04f 0802 	mov.w	r8, #2
 800d28c:	f1bb 0f00 	cmp.w	fp, #0
 800d290:	d04a      	beq.n	800d328 <__gethex+0x3c4>
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2b02      	cmp	r3, #2
 800d296:	d016      	beq.n	800d2c6 <__gethex+0x362>
 800d298:	2b03      	cmp	r3, #3
 800d29a:	d018      	beq.n	800d2ce <__gethex+0x36a>
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d109      	bne.n	800d2b4 <__gethex+0x350>
 800d2a0:	f01b 0f02 	tst.w	fp, #2
 800d2a4:	d006      	beq.n	800d2b4 <__gethex+0x350>
 800d2a6:	f8da 3000 	ldr.w	r3, [sl]
 800d2aa:	ea4b 0b03 	orr.w	fp, fp, r3
 800d2ae:	f01b 0f01 	tst.w	fp, #1
 800d2b2:	d10f      	bne.n	800d2d4 <__gethex+0x370>
 800d2b4:	f048 0810 	orr.w	r8, r8, #16
 800d2b8:	e036      	b.n	800d328 <__gethex+0x3c4>
 800d2ba:	f04f 0b01 	mov.w	fp, #1
 800d2be:	e7d0      	b.n	800d262 <__gethex+0x2fe>
 800d2c0:	f04f 0801 	mov.w	r8, #1
 800d2c4:	e7e2      	b.n	800d28c <__gethex+0x328>
 800d2c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2c8:	f1c3 0301 	rsb	r3, r3, #1
 800d2cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d0ef      	beq.n	800d2b4 <__gethex+0x350>
 800d2d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d2d8:	f104 0214 	add.w	r2, r4, #20
 800d2dc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d2e0:	9301      	str	r3, [sp, #4]
 800d2e2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	4694      	mov	ip, r2
 800d2ea:	f852 1b04 	ldr.w	r1, [r2], #4
 800d2ee:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d2f2:	d01e      	beq.n	800d332 <__gethex+0x3ce>
 800d2f4:	3101      	adds	r1, #1
 800d2f6:	f8cc 1000 	str.w	r1, [ip]
 800d2fa:	f1b8 0f02 	cmp.w	r8, #2
 800d2fe:	f104 0214 	add.w	r2, r4, #20
 800d302:	d13d      	bne.n	800d380 <__gethex+0x41c>
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	3b01      	subs	r3, #1
 800d308:	42ab      	cmp	r3, r5
 800d30a:	d10b      	bne.n	800d324 <__gethex+0x3c0>
 800d30c:	1169      	asrs	r1, r5, #5
 800d30e:	2301      	movs	r3, #1
 800d310:	f005 051f 	and.w	r5, r5, #31
 800d314:	fa03 f505 	lsl.w	r5, r3, r5
 800d318:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d31c:	421d      	tst	r5, r3
 800d31e:	bf18      	it	ne
 800d320:	f04f 0801 	movne.w	r8, #1
 800d324:	f048 0820 	orr.w	r8, r8, #32
 800d328:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d32a:	601c      	str	r4, [r3, #0]
 800d32c:	9b02      	ldr	r3, [sp, #8]
 800d32e:	601e      	str	r6, [r3, #0]
 800d330:	e6a2      	b.n	800d078 <__gethex+0x114>
 800d332:	4290      	cmp	r0, r2
 800d334:	f842 3c04 	str.w	r3, [r2, #-4]
 800d338:	d8d6      	bhi.n	800d2e8 <__gethex+0x384>
 800d33a:	68a2      	ldr	r2, [r4, #8]
 800d33c:	4593      	cmp	fp, r2
 800d33e:	db17      	blt.n	800d370 <__gethex+0x40c>
 800d340:	6861      	ldr	r1, [r4, #4]
 800d342:	4648      	mov	r0, r9
 800d344:	3101      	adds	r1, #1
 800d346:	f000 f9bb 	bl	800d6c0 <_Balloc>
 800d34a:	4682      	mov	sl, r0
 800d34c:	b918      	cbnz	r0, 800d356 <__gethex+0x3f2>
 800d34e:	4b1b      	ldr	r3, [pc, #108]	; (800d3bc <__gethex+0x458>)
 800d350:	4602      	mov	r2, r0
 800d352:	2184      	movs	r1, #132	; 0x84
 800d354:	e6b3      	b.n	800d0be <__gethex+0x15a>
 800d356:	6922      	ldr	r2, [r4, #16]
 800d358:	3202      	adds	r2, #2
 800d35a:	f104 010c 	add.w	r1, r4, #12
 800d35e:	0092      	lsls	r2, r2, #2
 800d360:	300c      	adds	r0, #12
 800d362:	f7ff fd2e 	bl	800cdc2 <memcpy>
 800d366:	4621      	mov	r1, r4
 800d368:	4648      	mov	r0, r9
 800d36a:	f000 f9e9 	bl	800d740 <_Bfree>
 800d36e:	4654      	mov	r4, sl
 800d370:	6922      	ldr	r2, [r4, #16]
 800d372:	1c51      	adds	r1, r2, #1
 800d374:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d378:	6121      	str	r1, [r4, #16]
 800d37a:	2101      	movs	r1, #1
 800d37c:	6151      	str	r1, [r2, #20]
 800d37e:	e7bc      	b.n	800d2fa <__gethex+0x396>
 800d380:	6921      	ldr	r1, [r4, #16]
 800d382:	4559      	cmp	r1, fp
 800d384:	dd0b      	ble.n	800d39e <__gethex+0x43a>
 800d386:	2101      	movs	r1, #1
 800d388:	4620      	mov	r0, r4
 800d38a:	f7ff fd83 	bl	800ce94 <rshift>
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	3601      	adds	r6, #1
 800d392:	42b3      	cmp	r3, r6
 800d394:	f6ff aedb 	blt.w	800d14e <__gethex+0x1ea>
 800d398:	f04f 0801 	mov.w	r8, #1
 800d39c:	e7c2      	b.n	800d324 <__gethex+0x3c0>
 800d39e:	f015 051f 	ands.w	r5, r5, #31
 800d3a2:	d0f9      	beq.n	800d398 <__gethex+0x434>
 800d3a4:	9b01      	ldr	r3, [sp, #4]
 800d3a6:	441a      	add	r2, r3
 800d3a8:	f1c5 0520 	rsb	r5, r5, #32
 800d3ac:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d3b0:	f000 fa78 	bl	800d8a4 <__hi0bits>
 800d3b4:	42a8      	cmp	r0, r5
 800d3b6:	dbe6      	blt.n	800d386 <__gethex+0x422>
 800d3b8:	e7ee      	b.n	800d398 <__gethex+0x434>
 800d3ba:	bf00      	nop
 800d3bc:	0800f3c1 	.word	0x0800f3c1

0800d3c0 <L_shift>:
 800d3c0:	f1c2 0208 	rsb	r2, r2, #8
 800d3c4:	0092      	lsls	r2, r2, #2
 800d3c6:	b570      	push	{r4, r5, r6, lr}
 800d3c8:	f1c2 0620 	rsb	r6, r2, #32
 800d3cc:	6843      	ldr	r3, [r0, #4]
 800d3ce:	6804      	ldr	r4, [r0, #0]
 800d3d0:	fa03 f506 	lsl.w	r5, r3, r6
 800d3d4:	432c      	orrs	r4, r5
 800d3d6:	40d3      	lsrs	r3, r2
 800d3d8:	6004      	str	r4, [r0, #0]
 800d3da:	f840 3f04 	str.w	r3, [r0, #4]!
 800d3de:	4288      	cmp	r0, r1
 800d3e0:	d3f4      	bcc.n	800d3cc <L_shift+0xc>
 800d3e2:	bd70      	pop	{r4, r5, r6, pc}

0800d3e4 <__match>:
 800d3e4:	b530      	push	{r4, r5, lr}
 800d3e6:	6803      	ldr	r3, [r0, #0]
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3ee:	b914      	cbnz	r4, 800d3f6 <__match+0x12>
 800d3f0:	6003      	str	r3, [r0, #0]
 800d3f2:	2001      	movs	r0, #1
 800d3f4:	bd30      	pop	{r4, r5, pc}
 800d3f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d3fe:	2d19      	cmp	r5, #25
 800d400:	bf98      	it	ls
 800d402:	3220      	addls	r2, #32
 800d404:	42a2      	cmp	r2, r4
 800d406:	d0f0      	beq.n	800d3ea <__match+0x6>
 800d408:	2000      	movs	r0, #0
 800d40a:	e7f3      	b.n	800d3f4 <__match+0x10>

0800d40c <__hexnan>:
 800d40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d410:	680b      	ldr	r3, [r1, #0]
 800d412:	6801      	ldr	r1, [r0, #0]
 800d414:	115e      	asrs	r6, r3, #5
 800d416:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d41a:	f013 031f 	ands.w	r3, r3, #31
 800d41e:	b087      	sub	sp, #28
 800d420:	bf18      	it	ne
 800d422:	3604      	addne	r6, #4
 800d424:	2500      	movs	r5, #0
 800d426:	1f37      	subs	r7, r6, #4
 800d428:	4682      	mov	sl, r0
 800d42a:	4690      	mov	r8, r2
 800d42c:	9301      	str	r3, [sp, #4]
 800d42e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d432:	46b9      	mov	r9, r7
 800d434:	463c      	mov	r4, r7
 800d436:	9502      	str	r5, [sp, #8]
 800d438:	46ab      	mov	fp, r5
 800d43a:	784a      	ldrb	r2, [r1, #1]
 800d43c:	1c4b      	adds	r3, r1, #1
 800d43e:	9303      	str	r3, [sp, #12]
 800d440:	b342      	cbz	r2, 800d494 <__hexnan+0x88>
 800d442:	4610      	mov	r0, r2
 800d444:	9105      	str	r1, [sp, #20]
 800d446:	9204      	str	r2, [sp, #16]
 800d448:	f7ff fd76 	bl	800cf38 <__hexdig_fun>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d14f      	bne.n	800d4f0 <__hexnan+0xe4>
 800d450:	9a04      	ldr	r2, [sp, #16]
 800d452:	9905      	ldr	r1, [sp, #20]
 800d454:	2a20      	cmp	r2, #32
 800d456:	d818      	bhi.n	800d48a <__hexnan+0x7e>
 800d458:	9b02      	ldr	r3, [sp, #8]
 800d45a:	459b      	cmp	fp, r3
 800d45c:	dd13      	ble.n	800d486 <__hexnan+0x7a>
 800d45e:	454c      	cmp	r4, r9
 800d460:	d206      	bcs.n	800d470 <__hexnan+0x64>
 800d462:	2d07      	cmp	r5, #7
 800d464:	dc04      	bgt.n	800d470 <__hexnan+0x64>
 800d466:	462a      	mov	r2, r5
 800d468:	4649      	mov	r1, r9
 800d46a:	4620      	mov	r0, r4
 800d46c:	f7ff ffa8 	bl	800d3c0 <L_shift>
 800d470:	4544      	cmp	r4, r8
 800d472:	d950      	bls.n	800d516 <__hexnan+0x10a>
 800d474:	2300      	movs	r3, #0
 800d476:	f1a4 0904 	sub.w	r9, r4, #4
 800d47a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d47e:	f8cd b008 	str.w	fp, [sp, #8]
 800d482:	464c      	mov	r4, r9
 800d484:	461d      	mov	r5, r3
 800d486:	9903      	ldr	r1, [sp, #12]
 800d488:	e7d7      	b.n	800d43a <__hexnan+0x2e>
 800d48a:	2a29      	cmp	r2, #41	; 0x29
 800d48c:	d155      	bne.n	800d53a <__hexnan+0x12e>
 800d48e:	3102      	adds	r1, #2
 800d490:	f8ca 1000 	str.w	r1, [sl]
 800d494:	f1bb 0f00 	cmp.w	fp, #0
 800d498:	d04f      	beq.n	800d53a <__hexnan+0x12e>
 800d49a:	454c      	cmp	r4, r9
 800d49c:	d206      	bcs.n	800d4ac <__hexnan+0xa0>
 800d49e:	2d07      	cmp	r5, #7
 800d4a0:	dc04      	bgt.n	800d4ac <__hexnan+0xa0>
 800d4a2:	462a      	mov	r2, r5
 800d4a4:	4649      	mov	r1, r9
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f7ff ff8a 	bl	800d3c0 <L_shift>
 800d4ac:	4544      	cmp	r4, r8
 800d4ae:	d934      	bls.n	800d51a <__hexnan+0x10e>
 800d4b0:	f1a8 0204 	sub.w	r2, r8, #4
 800d4b4:	4623      	mov	r3, r4
 800d4b6:	f853 1b04 	ldr.w	r1, [r3], #4
 800d4ba:	f842 1f04 	str.w	r1, [r2, #4]!
 800d4be:	429f      	cmp	r7, r3
 800d4c0:	d2f9      	bcs.n	800d4b6 <__hexnan+0xaa>
 800d4c2:	1b3b      	subs	r3, r7, r4
 800d4c4:	f023 0303 	bic.w	r3, r3, #3
 800d4c8:	3304      	adds	r3, #4
 800d4ca:	3e03      	subs	r6, #3
 800d4cc:	3401      	adds	r4, #1
 800d4ce:	42a6      	cmp	r6, r4
 800d4d0:	bf38      	it	cc
 800d4d2:	2304      	movcc	r3, #4
 800d4d4:	4443      	add	r3, r8
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f843 2b04 	str.w	r2, [r3], #4
 800d4dc:	429f      	cmp	r7, r3
 800d4de:	d2fb      	bcs.n	800d4d8 <__hexnan+0xcc>
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	b91b      	cbnz	r3, 800d4ec <__hexnan+0xe0>
 800d4e4:	4547      	cmp	r7, r8
 800d4e6:	d126      	bne.n	800d536 <__hexnan+0x12a>
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	603b      	str	r3, [r7, #0]
 800d4ec:	2005      	movs	r0, #5
 800d4ee:	e025      	b.n	800d53c <__hexnan+0x130>
 800d4f0:	3501      	adds	r5, #1
 800d4f2:	2d08      	cmp	r5, #8
 800d4f4:	f10b 0b01 	add.w	fp, fp, #1
 800d4f8:	dd06      	ble.n	800d508 <__hexnan+0xfc>
 800d4fa:	4544      	cmp	r4, r8
 800d4fc:	d9c3      	bls.n	800d486 <__hexnan+0x7a>
 800d4fe:	2300      	movs	r3, #0
 800d500:	f844 3c04 	str.w	r3, [r4, #-4]
 800d504:	2501      	movs	r5, #1
 800d506:	3c04      	subs	r4, #4
 800d508:	6822      	ldr	r2, [r4, #0]
 800d50a:	f000 000f 	and.w	r0, r0, #15
 800d50e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d512:	6020      	str	r0, [r4, #0]
 800d514:	e7b7      	b.n	800d486 <__hexnan+0x7a>
 800d516:	2508      	movs	r5, #8
 800d518:	e7b5      	b.n	800d486 <__hexnan+0x7a>
 800d51a:	9b01      	ldr	r3, [sp, #4]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d0df      	beq.n	800d4e0 <__hexnan+0xd4>
 800d520:	f1c3 0320 	rsb	r3, r3, #32
 800d524:	f04f 32ff 	mov.w	r2, #4294967295
 800d528:	40da      	lsrs	r2, r3
 800d52a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d52e:	4013      	ands	r3, r2
 800d530:	f846 3c04 	str.w	r3, [r6, #-4]
 800d534:	e7d4      	b.n	800d4e0 <__hexnan+0xd4>
 800d536:	3f04      	subs	r7, #4
 800d538:	e7d2      	b.n	800d4e0 <__hexnan+0xd4>
 800d53a:	2004      	movs	r0, #4
 800d53c:	b007      	add	sp, #28
 800d53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800d544 <sbrk_aligned>:
 800d544:	b570      	push	{r4, r5, r6, lr}
 800d546:	4e0e      	ldr	r6, [pc, #56]	; (800d580 <sbrk_aligned+0x3c>)
 800d548:	460c      	mov	r4, r1
 800d54a:	6831      	ldr	r1, [r6, #0]
 800d54c:	4605      	mov	r5, r0
 800d54e:	b911      	cbnz	r1, 800d556 <sbrk_aligned+0x12>
 800d550:	f001 f920 	bl	800e794 <_sbrk_r>
 800d554:	6030      	str	r0, [r6, #0]
 800d556:	4621      	mov	r1, r4
 800d558:	4628      	mov	r0, r5
 800d55a:	f001 f91b 	bl	800e794 <_sbrk_r>
 800d55e:	1c43      	adds	r3, r0, #1
 800d560:	d00a      	beq.n	800d578 <sbrk_aligned+0x34>
 800d562:	1cc4      	adds	r4, r0, #3
 800d564:	f024 0403 	bic.w	r4, r4, #3
 800d568:	42a0      	cmp	r0, r4
 800d56a:	d007      	beq.n	800d57c <sbrk_aligned+0x38>
 800d56c:	1a21      	subs	r1, r4, r0
 800d56e:	4628      	mov	r0, r5
 800d570:	f001 f910 	bl	800e794 <_sbrk_r>
 800d574:	3001      	adds	r0, #1
 800d576:	d101      	bne.n	800d57c <sbrk_aligned+0x38>
 800d578:	f04f 34ff 	mov.w	r4, #4294967295
 800d57c:	4620      	mov	r0, r4
 800d57e:	bd70      	pop	{r4, r5, r6, pc}
 800d580:	20002800 	.word	0x20002800

0800d584 <_malloc_r>:
 800d584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d588:	1ccd      	adds	r5, r1, #3
 800d58a:	f025 0503 	bic.w	r5, r5, #3
 800d58e:	3508      	adds	r5, #8
 800d590:	2d0c      	cmp	r5, #12
 800d592:	bf38      	it	cc
 800d594:	250c      	movcc	r5, #12
 800d596:	2d00      	cmp	r5, #0
 800d598:	4607      	mov	r7, r0
 800d59a:	db01      	blt.n	800d5a0 <_malloc_r+0x1c>
 800d59c:	42a9      	cmp	r1, r5
 800d59e:	d905      	bls.n	800d5ac <_malloc_r+0x28>
 800d5a0:	230c      	movs	r3, #12
 800d5a2:	603b      	str	r3, [r7, #0]
 800d5a4:	2600      	movs	r6, #0
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d680 <_malloc_r+0xfc>
 800d5b0:	f000 f87a 	bl	800d6a8 <__malloc_lock>
 800d5b4:	f8d8 3000 	ldr.w	r3, [r8]
 800d5b8:	461c      	mov	r4, r3
 800d5ba:	bb5c      	cbnz	r4, 800d614 <_malloc_r+0x90>
 800d5bc:	4629      	mov	r1, r5
 800d5be:	4638      	mov	r0, r7
 800d5c0:	f7ff ffc0 	bl	800d544 <sbrk_aligned>
 800d5c4:	1c43      	adds	r3, r0, #1
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	d155      	bne.n	800d676 <_malloc_r+0xf2>
 800d5ca:	f8d8 4000 	ldr.w	r4, [r8]
 800d5ce:	4626      	mov	r6, r4
 800d5d0:	2e00      	cmp	r6, #0
 800d5d2:	d145      	bne.n	800d660 <_malloc_r+0xdc>
 800d5d4:	2c00      	cmp	r4, #0
 800d5d6:	d048      	beq.n	800d66a <_malloc_r+0xe6>
 800d5d8:	6823      	ldr	r3, [r4, #0]
 800d5da:	4631      	mov	r1, r6
 800d5dc:	4638      	mov	r0, r7
 800d5de:	eb04 0903 	add.w	r9, r4, r3
 800d5e2:	f001 f8d7 	bl	800e794 <_sbrk_r>
 800d5e6:	4581      	cmp	r9, r0
 800d5e8:	d13f      	bne.n	800d66a <_malloc_r+0xe6>
 800d5ea:	6821      	ldr	r1, [r4, #0]
 800d5ec:	1a6d      	subs	r5, r5, r1
 800d5ee:	4629      	mov	r1, r5
 800d5f0:	4638      	mov	r0, r7
 800d5f2:	f7ff ffa7 	bl	800d544 <sbrk_aligned>
 800d5f6:	3001      	adds	r0, #1
 800d5f8:	d037      	beq.n	800d66a <_malloc_r+0xe6>
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	442b      	add	r3, r5
 800d5fe:	6023      	str	r3, [r4, #0]
 800d600:	f8d8 3000 	ldr.w	r3, [r8]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d038      	beq.n	800d67a <_malloc_r+0xf6>
 800d608:	685a      	ldr	r2, [r3, #4]
 800d60a:	42a2      	cmp	r2, r4
 800d60c:	d12b      	bne.n	800d666 <_malloc_r+0xe2>
 800d60e:	2200      	movs	r2, #0
 800d610:	605a      	str	r2, [r3, #4]
 800d612:	e00f      	b.n	800d634 <_malloc_r+0xb0>
 800d614:	6822      	ldr	r2, [r4, #0]
 800d616:	1b52      	subs	r2, r2, r5
 800d618:	d41f      	bmi.n	800d65a <_malloc_r+0xd6>
 800d61a:	2a0b      	cmp	r2, #11
 800d61c:	d917      	bls.n	800d64e <_malloc_r+0xca>
 800d61e:	1961      	adds	r1, r4, r5
 800d620:	42a3      	cmp	r3, r4
 800d622:	6025      	str	r5, [r4, #0]
 800d624:	bf18      	it	ne
 800d626:	6059      	strne	r1, [r3, #4]
 800d628:	6863      	ldr	r3, [r4, #4]
 800d62a:	bf08      	it	eq
 800d62c:	f8c8 1000 	streq.w	r1, [r8]
 800d630:	5162      	str	r2, [r4, r5]
 800d632:	604b      	str	r3, [r1, #4]
 800d634:	4638      	mov	r0, r7
 800d636:	f104 060b 	add.w	r6, r4, #11
 800d63a:	f000 f83b 	bl	800d6b4 <__malloc_unlock>
 800d63e:	f026 0607 	bic.w	r6, r6, #7
 800d642:	1d23      	adds	r3, r4, #4
 800d644:	1af2      	subs	r2, r6, r3
 800d646:	d0ae      	beq.n	800d5a6 <_malloc_r+0x22>
 800d648:	1b9b      	subs	r3, r3, r6
 800d64a:	50a3      	str	r3, [r4, r2]
 800d64c:	e7ab      	b.n	800d5a6 <_malloc_r+0x22>
 800d64e:	42a3      	cmp	r3, r4
 800d650:	6862      	ldr	r2, [r4, #4]
 800d652:	d1dd      	bne.n	800d610 <_malloc_r+0x8c>
 800d654:	f8c8 2000 	str.w	r2, [r8]
 800d658:	e7ec      	b.n	800d634 <_malloc_r+0xb0>
 800d65a:	4623      	mov	r3, r4
 800d65c:	6864      	ldr	r4, [r4, #4]
 800d65e:	e7ac      	b.n	800d5ba <_malloc_r+0x36>
 800d660:	4634      	mov	r4, r6
 800d662:	6876      	ldr	r6, [r6, #4]
 800d664:	e7b4      	b.n	800d5d0 <_malloc_r+0x4c>
 800d666:	4613      	mov	r3, r2
 800d668:	e7cc      	b.n	800d604 <_malloc_r+0x80>
 800d66a:	230c      	movs	r3, #12
 800d66c:	603b      	str	r3, [r7, #0]
 800d66e:	4638      	mov	r0, r7
 800d670:	f000 f820 	bl	800d6b4 <__malloc_unlock>
 800d674:	e797      	b.n	800d5a6 <_malloc_r+0x22>
 800d676:	6025      	str	r5, [r4, #0]
 800d678:	e7dc      	b.n	800d634 <_malloc_r+0xb0>
 800d67a:	605b      	str	r3, [r3, #4]
 800d67c:	deff      	udf	#255	; 0xff
 800d67e:	bf00      	nop
 800d680:	200027fc 	.word	0x200027fc

0800d684 <__ascii_mbtowc>:
 800d684:	b082      	sub	sp, #8
 800d686:	b901      	cbnz	r1, 800d68a <__ascii_mbtowc+0x6>
 800d688:	a901      	add	r1, sp, #4
 800d68a:	b142      	cbz	r2, 800d69e <__ascii_mbtowc+0x1a>
 800d68c:	b14b      	cbz	r3, 800d6a2 <__ascii_mbtowc+0x1e>
 800d68e:	7813      	ldrb	r3, [r2, #0]
 800d690:	600b      	str	r3, [r1, #0]
 800d692:	7812      	ldrb	r2, [r2, #0]
 800d694:	1e10      	subs	r0, r2, #0
 800d696:	bf18      	it	ne
 800d698:	2001      	movne	r0, #1
 800d69a:	b002      	add	sp, #8
 800d69c:	4770      	bx	lr
 800d69e:	4610      	mov	r0, r2
 800d6a0:	e7fb      	b.n	800d69a <__ascii_mbtowc+0x16>
 800d6a2:	f06f 0001 	mvn.w	r0, #1
 800d6a6:	e7f8      	b.n	800d69a <__ascii_mbtowc+0x16>

0800d6a8 <__malloc_lock>:
 800d6a8:	4801      	ldr	r0, [pc, #4]	; (800d6b0 <__malloc_lock+0x8>)
 800d6aa:	f7ff bb80 	b.w	800cdae <__retarget_lock_acquire_recursive>
 800d6ae:	bf00      	nop
 800d6b0:	200027f8 	.word	0x200027f8

0800d6b4 <__malloc_unlock>:
 800d6b4:	4801      	ldr	r0, [pc, #4]	; (800d6bc <__malloc_unlock+0x8>)
 800d6b6:	f7ff bb7b 	b.w	800cdb0 <__retarget_lock_release_recursive>
 800d6ba:	bf00      	nop
 800d6bc:	200027f8 	.word	0x200027f8

0800d6c0 <_Balloc>:
 800d6c0:	b570      	push	{r4, r5, r6, lr}
 800d6c2:	69c6      	ldr	r6, [r0, #28]
 800d6c4:	4604      	mov	r4, r0
 800d6c6:	460d      	mov	r5, r1
 800d6c8:	b976      	cbnz	r6, 800d6e8 <_Balloc+0x28>
 800d6ca:	2010      	movs	r0, #16
 800d6cc:	f001 f8a6 	bl	800e81c <malloc>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	61e0      	str	r0, [r4, #28]
 800d6d4:	b920      	cbnz	r0, 800d6e0 <_Balloc+0x20>
 800d6d6:	4b18      	ldr	r3, [pc, #96]	; (800d738 <_Balloc+0x78>)
 800d6d8:	4818      	ldr	r0, [pc, #96]	; (800d73c <_Balloc+0x7c>)
 800d6da:	216b      	movs	r1, #107	; 0x6b
 800d6dc:	f001 f86a 	bl	800e7b4 <__assert_func>
 800d6e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6e4:	6006      	str	r6, [r0, #0]
 800d6e6:	60c6      	str	r6, [r0, #12]
 800d6e8:	69e6      	ldr	r6, [r4, #28]
 800d6ea:	68f3      	ldr	r3, [r6, #12]
 800d6ec:	b183      	cbz	r3, 800d710 <_Balloc+0x50>
 800d6ee:	69e3      	ldr	r3, [r4, #28]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6f6:	b9b8      	cbnz	r0, 800d728 <_Balloc+0x68>
 800d6f8:	2101      	movs	r1, #1
 800d6fa:	fa01 f605 	lsl.w	r6, r1, r5
 800d6fe:	1d72      	adds	r2, r6, #5
 800d700:	0092      	lsls	r2, r2, #2
 800d702:	4620      	mov	r0, r4
 800d704:	f001 f874 	bl	800e7f0 <_calloc_r>
 800d708:	b160      	cbz	r0, 800d724 <_Balloc+0x64>
 800d70a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d70e:	e00e      	b.n	800d72e <_Balloc+0x6e>
 800d710:	2221      	movs	r2, #33	; 0x21
 800d712:	2104      	movs	r1, #4
 800d714:	4620      	mov	r0, r4
 800d716:	f001 f86b 	bl	800e7f0 <_calloc_r>
 800d71a:	69e3      	ldr	r3, [r4, #28]
 800d71c:	60f0      	str	r0, [r6, #12]
 800d71e:	68db      	ldr	r3, [r3, #12]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d1e4      	bne.n	800d6ee <_Balloc+0x2e>
 800d724:	2000      	movs	r0, #0
 800d726:	bd70      	pop	{r4, r5, r6, pc}
 800d728:	6802      	ldr	r2, [r0, #0]
 800d72a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d72e:	2300      	movs	r3, #0
 800d730:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d734:	e7f7      	b.n	800d726 <_Balloc+0x66>
 800d736:	bf00      	nop
 800d738:	0800f432 	.word	0x0800f432
 800d73c:	0800f449 	.word	0x0800f449

0800d740 <_Bfree>:
 800d740:	b570      	push	{r4, r5, r6, lr}
 800d742:	69c6      	ldr	r6, [r0, #28]
 800d744:	4605      	mov	r5, r0
 800d746:	460c      	mov	r4, r1
 800d748:	b976      	cbnz	r6, 800d768 <_Bfree+0x28>
 800d74a:	2010      	movs	r0, #16
 800d74c:	f001 f866 	bl	800e81c <malloc>
 800d750:	4602      	mov	r2, r0
 800d752:	61e8      	str	r0, [r5, #28]
 800d754:	b920      	cbnz	r0, 800d760 <_Bfree+0x20>
 800d756:	4b09      	ldr	r3, [pc, #36]	; (800d77c <_Bfree+0x3c>)
 800d758:	4809      	ldr	r0, [pc, #36]	; (800d780 <_Bfree+0x40>)
 800d75a:	218f      	movs	r1, #143	; 0x8f
 800d75c:	f001 f82a 	bl	800e7b4 <__assert_func>
 800d760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d764:	6006      	str	r6, [r0, #0]
 800d766:	60c6      	str	r6, [r0, #12]
 800d768:	b13c      	cbz	r4, 800d77a <_Bfree+0x3a>
 800d76a:	69eb      	ldr	r3, [r5, #28]
 800d76c:	6862      	ldr	r2, [r4, #4]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d774:	6021      	str	r1, [r4, #0]
 800d776:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d77a:	bd70      	pop	{r4, r5, r6, pc}
 800d77c:	0800f432 	.word	0x0800f432
 800d780:	0800f449 	.word	0x0800f449

0800d784 <__multadd>:
 800d784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d788:	690d      	ldr	r5, [r1, #16]
 800d78a:	4607      	mov	r7, r0
 800d78c:	460c      	mov	r4, r1
 800d78e:	461e      	mov	r6, r3
 800d790:	f101 0c14 	add.w	ip, r1, #20
 800d794:	2000      	movs	r0, #0
 800d796:	f8dc 3000 	ldr.w	r3, [ip]
 800d79a:	b299      	uxth	r1, r3
 800d79c:	fb02 6101 	mla	r1, r2, r1, r6
 800d7a0:	0c1e      	lsrs	r6, r3, #16
 800d7a2:	0c0b      	lsrs	r3, r1, #16
 800d7a4:	fb02 3306 	mla	r3, r2, r6, r3
 800d7a8:	b289      	uxth	r1, r1
 800d7aa:	3001      	adds	r0, #1
 800d7ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7b0:	4285      	cmp	r5, r0
 800d7b2:	f84c 1b04 	str.w	r1, [ip], #4
 800d7b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7ba:	dcec      	bgt.n	800d796 <__multadd+0x12>
 800d7bc:	b30e      	cbz	r6, 800d802 <__multadd+0x7e>
 800d7be:	68a3      	ldr	r3, [r4, #8]
 800d7c0:	42ab      	cmp	r3, r5
 800d7c2:	dc19      	bgt.n	800d7f8 <__multadd+0x74>
 800d7c4:	6861      	ldr	r1, [r4, #4]
 800d7c6:	4638      	mov	r0, r7
 800d7c8:	3101      	adds	r1, #1
 800d7ca:	f7ff ff79 	bl	800d6c0 <_Balloc>
 800d7ce:	4680      	mov	r8, r0
 800d7d0:	b928      	cbnz	r0, 800d7de <__multadd+0x5a>
 800d7d2:	4602      	mov	r2, r0
 800d7d4:	4b0c      	ldr	r3, [pc, #48]	; (800d808 <__multadd+0x84>)
 800d7d6:	480d      	ldr	r0, [pc, #52]	; (800d80c <__multadd+0x88>)
 800d7d8:	21ba      	movs	r1, #186	; 0xba
 800d7da:	f000 ffeb 	bl	800e7b4 <__assert_func>
 800d7de:	6922      	ldr	r2, [r4, #16]
 800d7e0:	3202      	adds	r2, #2
 800d7e2:	f104 010c 	add.w	r1, r4, #12
 800d7e6:	0092      	lsls	r2, r2, #2
 800d7e8:	300c      	adds	r0, #12
 800d7ea:	f7ff faea 	bl	800cdc2 <memcpy>
 800d7ee:	4621      	mov	r1, r4
 800d7f0:	4638      	mov	r0, r7
 800d7f2:	f7ff ffa5 	bl	800d740 <_Bfree>
 800d7f6:	4644      	mov	r4, r8
 800d7f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7fc:	3501      	adds	r5, #1
 800d7fe:	615e      	str	r6, [r3, #20]
 800d800:	6125      	str	r5, [r4, #16]
 800d802:	4620      	mov	r0, r4
 800d804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d808:	0800f3c1 	.word	0x0800f3c1
 800d80c:	0800f449 	.word	0x0800f449

0800d810 <__s2b>:
 800d810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d814:	460c      	mov	r4, r1
 800d816:	4615      	mov	r5, r2
 800d818:	461f      	mov	r7, r3
 800d81a:	2209      	movs	r2, #9
 800d81c:	3308      	adds	r3, #8
 800d81e:	4606      	mov	r6, r0
 800d820:	fb93 f3f2 	sdiv	r3, r3, r2
 800d824:	2100      	movs	r1, #0
 800d826:	2201      	movs	r2, #1
 800d828:	429a      	cmp	r2, r3
 800d82a:	db09      	blt.n	800d840 <__s2b+0x30>
 800d82c:	4630      	mov	r0, r6
 800d82e:	f7ff ff47 	bl	800d6c0 <_Balloc>
 800d832:	b940      	cbnz	r0, 800d846 <__s2b+0x36>
 800d834:	4602      	mov	r2, r0
 800d836:	4b19      	ldr	r3, [pc, #100]	; (800d89c <__s2b+0x8c>)
 800d838:	4819      	ldr	r0, [pc, #100]	; (800d8a0 <__s2b+0x90>)
 800d83a:	21d3      	movs	r1, #211	; 0xd3
 800d83c:	f000 ffba 	bl	800e7b4 <__assert_func>
 800d840:	0052      	lsls	r2, r2, #1
 800d842:	3101      	adds	r1, #1
 800d844:	e7f0      	b.n	800d828 <__s2b+0x18>
 800d846:	9b08      	ldr	r3, [sp, #32]
 800d848:	6143      	str	r3, [r0, #20]
 800d84a:	2d09      	cmp	r5, #9
 800d84c:	f04f 0301 	mov.w	r3, #1
 800d850:	6103      	str	r3, [r0, #16]
 800d852:	dd16      	ble.n	800d882 <__s2b+0x72>
 800d854:	f104 0909 	add.w	r9, r4, #9
 800d858:	46c8      	mov	r8, r9
 800d85a:	442c      	add	r4, r5
 800d85c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d860:	4601      	mov	r1, r0
 800d862:	3b30      	subs	r3, #48	; 0x30
 800d864:	220a      	movs	r2, #10
 800d866:	4630      	mov	r0, r6
 800d868:	f7ff ff8c 	bl	800d784 <__multadd>
 800d86c:	45a0      	cmp	r8, r4
 800d86e:	d1f5      	bne.n	800d85c <__s2b+0x4c>
 800d870:	f1a5 0408 	sub.w	r4, r5, #8
 800d874:	444c      	add	r4, r9
 800d876:	1b2d      	subs	r5, r5, r4
 800d878:	1963      	adds	r3, r4, r5
 800d87a:	42bb      	cmp	r3, r7
 800d87c:	db04      	blt.n	800d888 <__s2b+0x78>
 800d87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d882:	340a      	adds	r4, #10
 800d884:	2509      	movs	r5, #9
 800d886:	e7f6      	b.n	800d876 <__s2b+0x66>
 800d888:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d88c:	4601      	mov	r1, r0
 800d88e:	3b30      	subs	r3, #48	; 0x30
 800d890:	220a      	movs	r2, #10
 800d892:	4630      	mov	r0, r6
 800d894:	f7ff ff76 	bl	800d784 <__multadd>
 800d898:	e7ee      	b.n	800d878 <__s2b+0x68>
 800d89a:	bf00      	nop
 800d89c:	0800f3c1 	.word	0x0800f3c1
 800d8a0:	0800f449 	.word	0x0800f449

0800d8a4 <__hi0bits>:
 800d8a4:	0c03      	lsrs	r3, r0, #16
 800d8a6:	041b      	lsls	r3, r3, #16
 800d8a8:	b9d3      	cbnz	r3, 800d8e0 <__hi0bits+0x3c>
 800d8aa:	0400      	lsls	r0, r0, #16
 800d8ac:	2310      	movs	r3, #16
 800d8ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d8b2:	bf04      	itt	eq
 800d8b4:	0200      	lsleq	r0, r0, #8
 800d8b6:	3308      	addeq	r3, #8
 800d8b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d8bc:	bf04      	itt	eq
 800d8be:	0100      	lsleq	r0, r0, #4
 800d8c0:	3304      	addeq	r3, #4
 800d8c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d8c6:	bf04      	itt	eq
 800d8c8:	0080      	lsleq	r0, r0, #2
 800d8ca:	3302      	addeq	r3, #2
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	db05      	blt.n	800d8dc <__hi0bits+0x38>
 800d8d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d8d4:	f103 0301 	add.w	r3, r3, #1
 800d8d8:	bf08      	it	eq
 800d8da:	2320      	moveq	r3, #32
 800d8dc:	4618      	mov	r0, r3
 800d8de:	4770      	bx	lr
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	e7e4      	b.n	800d8ae <__hi0bits+0xa>

0800d8e4 <__lo0bits>:
 800d8e4:	6803      	ldr	r3, [r0, #0]
 800d8e6:	f013 0207 	ands.w	r2, r3, #7
 800d8ea:	d00c      	beq.n	800d906 <__lo0bits+0x22>
 800d8ec:	07d9      	lsls	r1, r3, #31
 800d8ee:	d422      	bmi.n	800d936 <__lo0bits+0x52>
 800d8f0:	079a      	lsls	r2, r3, #30
 800d8f2:	bf49      	itett	mi
 800d8f4:	085b      	lsrmi	r3, r3, #1
 800d8f6:	089b      	lsrpl	r3, r3, #2
 800d8f8:	6003      	strmi	r3, [r0, #0]
 800d8fa:	2201      	movmi	r2, #1
 800d8fc:	bf5c      	itt	pl
 800d8fe:	6003      	strpl	r3, [r0, #0]
 800d900:	2202      	movpl	r2, #2
 800d902:	4610      	mov	r0, r2
 800d904:	4770      	bx	lr
 800d906:	b299      	uxth	r1, r3
 800d908:	b909      	cbnz	r1, 800d90e <__lo0bits+0x2a>
 800d90a:	0c1b      	lsrs	r3, r3, #16
 800d90c:	2210      	movs	r2, #16
 800d90e:	b2d9      	uxtb	r1, r3
 800d910:	b909      	cbnz	r1, 800d916 <__lo0bits+0x32>
 800d912:	3208      	adds	r2, #8
 800d914:	0a1b      	lsrs	r3, r3, #8
 800d916:	0719      	lsls	r1, r3, #28
 800d918:	bf04      	itt	eq
 800d91a:	091b      	lsreq	r3, r3, #4
 800d91c:	3204      	addeq	r2, #4
 800d91e:	0799      	lsls	r1, r3, #30
 800d920:	bf04      	itt	eq
 800d922:	089b      	lsreq	r3, r3, #2
 800d924:	3202      	addeq	r2, #2
 800d926:	07d9      	lsls	r1, r3, #31
 800d928:	d403      	bmi.n	800d932 <__lo0bits+0x4e>
 800d92a:	085b      	lsrs	r3, r3, #1
 800d92c:	f102 0201 	add.w	r2, r2, #1
 800d930:	d003      	beq.n	800d93a <__lo0bits+0x56>
 800d932:	6003      	str	r3, [r0, #0]
 800d934:	e7e5      	b.n	800d902 <__lo0bits+0x1e>
 800d936:	2200      	movs	r2, #0
 800d938:	e7e3      	b.n	800d902 <__lo0bits+0x1e>
 800d93a:	2220      	movs	r2, #32
 800d93c:	e7e1      	b.n	800d902 <__lo0bits+0x1e>
	...

0800d940 <__i2b>:
 800d940:	b510      	push	{r4, lr}
 800d942:	460c      	mov	r4, r1
 800d944:	2101      	movs	r1, #1
 800d946:	f7ff febb 	bl	800d6c0 <_Balloc>
 800d94a:	4602      	mov	r2, r0
 800d94c:	b928      	cbnz	r0, 800d95a <__i2b+0x1a>
 800d94e:	4b05      	ldr	r3, [pc, #20]	; (800d964 <__i2b+0x24>)
 800d950:	4805      	ldr	r0, [pc, #20]	; (800d968 <__i2b+0x28>)
 800d952:	f240 1145 	movw	r1, #325	; 0x145
 800d956:	f000 ff2d 	bl	800e7b4 <__assert_func>
 800d95a:	2301      	movs	r3, #1
 800d95c:	6144      	str	r4, [r0, #20]
 800d95e:	6103      	str	r3, [r0, #16]
 800d960:	bd10      	pop	{r4, pc}
 800d962:	bf00      	nop
 800d964:	0800f3c1 	.word	0x0800f3c1
 800d968:	0800f449 	.word	0x0800f449

0800d96c <__multiply>:
 800d96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d970:	4691      	mov	r9, r2
 800d972:	690a      	ldr	r2, [r1, #16]
 800d974:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d978:	429a      	cmp	r2, r3
 800d97a:	bfb8      	it	lt
 800d97c:	460b      	movlt	r3, r1
 800d97e:	460c      	mov	r4, r1
 800d980:	bfbc      	itt	lt
 800d982:	464c      	movlt	r4, r9
 800d984:	4699      	movlt	r9, r3
 800d986:	6927      	ldr	r7, [r4, #16]
 800d988:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d98c:	68a3      	ldr	r3, [r4, #8]
 800d98e:	6861      	ldr	r1, [r4, #4]
 800d990:	eb07 060a 	add.w	r6, r7, sl
 800d994:	42b3      	cmp	r3, r6
 800d996:	b085      	sub	sp, #20
 800d998:	bfb8      	it	lt
 800d99a:	3101      	addlt	r1, #1
 800d99c:	f7ff fe90 	bl	800d6c0 <_Balloc>
 800d9a0:	b930      	cbnz	r0, 800d9b0 <__multiply+0x44>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	4b44      	ldr	r3, [pc, #272]	; (800dab8 <__multiply+0x14c>)
 800d9a6:	4845      	ldr	r0, [pc, #276]	; (800dabc <__multiply+0x150>)
 800d9a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d9ac:	f000 ff02 	bl	800e7b4 <__assert_func>
 800d9b0:	f100 0514 	add.w	r5, r0, #20
 800d9b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d9b8:	462b      	mov	r3, r5
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	4543      	cmp	r3, r8
 800d9be:	d321      	bcc.n	800da04 <__multiply+0x98>
 800d9c0:	f104 0314 	add.w	r3, r4, #20
 800d9c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d9c8:	f109 0314 	add.w	r3, r9, #20
 800d9cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d9d0:	9202      	str	r2, [sp, #8]
 800d9d2:	1b3a      	subs	r2, r7, r4
 800d9d4:	3a15      	subs	r2, #21
 800d9d6:	f022 0203 	bic.w	r2, r2, #3
 800d9da:	3204      	adds	r2, #4
 800d9dc:	f104 0115 	add.w	r1, r4, #21
 800d9e0:	428f      	cmp	r7, r1
 800d9e2:	bf38      	it	cc
 800d9e4:	2204      	movcc	r2, #4
 800d9e6:	9201      	str	r2, [sp, #4]
 800d9e8:	9a02      	ldr	r2, [sp, #8]
 800d9ea:	9303      	str	r3, [sp, #12]
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d80c      	bhi.n	800da0a <__multiply+0x9e>
 800d9f0:	2e00      	cmp	r6, #0
 800d9f2:	dd03      	ble.n	800d9fc <__multiply+0x90>
 800d9f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d05b      	beq.n	800dab4 <__multiply+0x148>
 800d9fc:	6106      	str	r6, [r0, #16]
 800d9fe:	b005      	add	sp, #20
 800da00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da04:	f843 2b04 	str.w	r2, [r3], #4
 800da08:	e7d8      	b.n	800d9bc <__multiply+0x50>
 800da0a:	f8b3 a000 	ldrh.w	sl, [r3]
 800da0e:	f1ba 0f00 	cmp.w	sl, #0
 800da12:	d024      	beq.n	800da5e <__multiply+0xf2>
 800da14:	f104 0e14 	add.w	lr, r4, #20
 800da18:	46a9      	mov	r9, r5
 800da1a:	f04f 0c00 	mov.w	ip, #0
 800da1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800da22:	f8d9 1000 	ldr.w	r1, [r9]
 800da26:	fa1f fb82 	uxth.w	fp, r2
 800da2a:	b289      	uxth	r1, r1
 800da2c:	fb0a 110b 	mla	r1, sl, fp, r1
 800da30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800da34:	f8d9 2000 	ldr.w	r2, [r9]
 800da38:	4461      	add	r1, ip
 800da3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da3e:	fb0a c20b 	mla	r2, sl, fp, ip
 800da42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800da46:	b289      	uxth	r1, r1
 800da48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800da4c:	4577      	cmp	r7, lr
 800da4e:	f849 1b04 	str.w	r1, [r9], #4
 800da52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da56:	d8e2      	bhi.n	800da1e <__multiply+0xb2>
 800da58:	9a01      	ldr	r2, [sp, #4]
 800da5a:	f845 c002 	str.w	ip, [r5, r2]
 800da5e:	9a03      	ldr	r2, [sp, #12]
 800da60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800da64:	3304      	adds	r3, #4
 800da66:	f1b9 0f00 	cmp.w	r9, #0
 800da6a:	d021      	beq.n	800dab0 <__multiply+0x144>
 800da6c:	6829      	ldr	r1, [r5, #0]
 800da6e:	f104 0c14 	add.w	ip, r4, #20
 800da72:	46ae      	mov	lr, r5
 800da74:	f04f 0a00 	mov.w	sl, #0
 800da78:	f8bc b000 	ldrh.w	fp, [ip]
 800da7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800da80:	fb09 220b 	mla	r2, r9, fp, r2
 800da84:	4452      	add	r2, sl
 800da86:	b289      	uxth	r1, r1
 800da88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800da8c:	f84e 1b04 	str.w	r1, [lr], #4
 800da90:	f85c 1b04 	ldr.w	r1, [ip], #4
 800da94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800da98:	f8be 1000 	ldrh.w	r1, [lr]
 800da9c:	fb09 110a 	mla	r1, r9, sl, r1
 800daa0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800daa4:	4567      	cmp	r7, ip
 800daa6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800daaa:	d8e5      	bhi.n	800da78 <__multiply+0x10c>
 800daac:	9a01      	ldr	r2, [sp, #4]
 800daae:	50a9      	str	r1, [r5, r2]
 800dab0:	3504      	adds	r5, #4
 800dab2:	e799      	b.n	800d9e8 <__multiply+0x7c>
 800dab4:	3e01      	subs	r6, #1
 800dab6:	e79b      	b.n	800d9f0 <__multiply+0x84>
 800dab8:	0800f3c1 	.word	0x0800f3c1
 800dabc:	0800f449 	.word	0x0800f449

0800dac0 <__pow5mult>:
 800dac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dac4:	4615      	mov	r5, r2
 800dac6:	f012 0203 	ands.w	r2, r2, #3
 800daca:	4606      	mov	r6, r0
 800dacc:	460f      	mov	r7, r1
 800dace:	d007      	beq.n	800dae0 <__pow5mult+0x20>
 800dad0:	4c25      	ldr	r4, [pc, #148]	; (800db68 <__pow5mult+0xa8>)
 800dad2:	3a01      	subs	r2, #1
 800dad4:	2300      	movs	r3, #0
 800dad6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dada:	f7ff fe53 	bl	800d784 <__multadd>
 800dade:	4607      	mov	r7, r0
 800dae0:	10ad      	asrs	r5, r5, #2
 800dae2:	d03d      	beq.n	800db60 <__pow5mult+0xa0>
 800dae4:	69f4      	ldr	r4, [r6, #28]
 800dae6:	b97c      	cbnz	r4, 800db08 <__pow5mult+0x48>
 800dae8:	2010      	movs	r0, #16
 800daea:	f000 fe97 	bl	800e81c <malloc>
 800daee:	4602      	mov	r2, r0
 800daf0:	61f0      	str	r0, [r6, #28]
 800daf2:	b928      	cbnz	r0, 800db00 <__pow5mult+0x40>
 800daf4:	4b1d      	ldr	r3, [pc, #116]	; (800db6c <__pow5mult+0xac>)
 800daf6:	481e      	ldr	r0, [pc, #120]	; (800db70 <__pow5mult+0xb0>)
 800daf8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dafc:	f000 fe5a 	bl	800e7b4 <__assert_func>
 800db00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db04:	6004      	str	r4, [r0, #0]
 800db06:	60c4      	str	r4, [r0, #12]
 800db08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800db0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db10:	b94c      	cbnz	r4, 800db26 <__pow5mult+0x66>
 800db12:	f240 2171 	movw	r1, #625	; 0x271
 800db16:	4630      	mov	r0, r6
 800db18:	f7ff ff12 	bl	800d940 <__i2b>
 800db1c:	2300      	movs	r3, #0
 800db1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800db22:	4604      	mov	r4, r0
 800db24:	6003      	str	r3, [r0, #0]
 800db26:	f04f 0900 	mov.w	r9, #0
 800db2a:	07eb      	lsls	r3, r5, #31
 800db2c:	d50a      	bpl.n	800db44 <__pow5mult+0x84>
 800db2e:	4639      	mov	r1, r7
 800db30:	4622      	mov	r2, r4
 800db32:	4630      	mov	r0, r6
 800db34:	f7ff ff1a 	bl	800d96c <__multiply>
 800db38:	4639      	mov	r1, r7
 800db3a:	4680      	mov	r8, r0
 800db3c:	4630      	mov	r0, r6
 800db3e:	f7ff fdff 	bl	800d740 <_Bfree>
 800db42:	4647      	mov	r7, r8
 800db44:	106d      	asrs	r5, r5, #1
 800db46:	d00b      	beq.n	800db60 <__pow5mult+0xa0>
 800db48:	6820      	ldr	r0, [r4, #0]
 800db4a:	b938      	cbnz	r0, 800db5c <__pow5mult+0x9c>
 800db4c:	4622      	mov	r2, r4
 800db4e:	4621      	mov	r1, r4
 800db50:	4630      	mov	r0, r6
 800db52:	f7ff ff0b 	bl	800d96c <__multiply>
 800db56:	6020      	str	r0, [r4, #0]
 800db58:	f8c0 9000 	str.w	r9, [r0]
 800db5c:	4604      	mov	r4, r0
 800db5e:	e7e4      	b.n	800db2a <__pow5mult+0x6a>
 800db60:	4638      	mov	r0, r7
 800db62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db66:	bf00      	nop
 800db68:	0800f598 	.word	0x0800f598
 800db6c:	0800f432 	.word	0x0800f432
 800db70:	0800f449 	.word	0x0800f449

0800db74 <__lshift>:
 800db74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db78:	460c      	mov	r4, r1
 800db7a:	6849      	ldr	r1, [r1, #4]
 800db7c:	6923      	ldr	r3, [r4, #16]
 800db7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db82:	68a3      	ldr	r3, [r4, #8]
 800db84:	4607      	mov	r7, r0
 800db86:	4691      	mov	r9, r2
 800db88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db8c:	f108 0601 	add.w	r6, r8, #1
 800db90:	42b3      	cmp	r3, r6
 800db92:	db0b      	blt.n	800dbac <__lshift+0x38>
 800db94:	4638      	mov	r0, r7
 800db96:	f7ff fd93 	bl	800d6c0 <_Balloc>
 800db9a:	4605      	mov	r5, r0
 800db9c:	b948      	cbnz	r0, 800dbb2 <__lshift+0x3e>
 800db9e:	4602      	mov	r2, r0
 800dba0:	4b28      	ldr	r3, [pc, #160]	; (800dc44 <__lshift+0xd0>)
 800dba2:	4829      	ldr	r0, [pc, #164]	; (800dc48 <__lshift+0xd4>)
 800dba4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800dba8:	f000 fe04 	bl	800e7b4 <__assert_func>
 800dbac:	3101      	adds	r1, #1
 800dbae:	005b      	lsls	r3, r3, #1
 800dbb0:	e7ee      	b.n	800db90 <__lshift+0x1c>
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f100 0114 	add.w	r1, r0, #20
 800dbb8:	f100 0210 	add.w	r2, r0, #16
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	4553      	cmp	r3, sl
 800dbc0:	db33      	blt.n	800dc2a <__lshift+0xb6>
 800dbc2:	6920      	ldr	r0, [r4, #16]
 800dbc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dbc8:	f104 0314 	add.w	r3, r4, #20
 800dbcc:	f019 091f 	ands.w	r9, r9, #31
 800dbd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dbd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dbd8:	d02b      	beq.n	800dc32 <__lshift+0xbe>
 800dbda:	f1c9 0e20 	rsb	lr, r9, #32
 800dbde:	468a      	mov	sl, r1
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	6818      	ldr	r0, [r3, #0]
 800dbe4:	fa00 f009 	lsl.w	r0, r0, r9
 800dbe8:	4310      	orrs	r0, r2
 800dbea:	f84a 0b04 	str.w	r0, [sl], #4
 800dbee:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbf2:	459c      	cmp	ip, r3
 800dbf4:	fa22 f20e 	lsr.w	r2, r2, lr
 800dbf8:	d8f3      	bhi.n	800dbe2 <__lshift+0x6e>
 800dbfa:	ebac 0304 	sub.w	r3, ip, r4
 800dbfe:	3b15      	subs	r3, #21
 800dc00:	f023 0303 	bic.w	r3, r3, #3
 800dc04:	3304      	adds	r3, #4
 800dc06:	f104 0015 	add.w	r0, r4, #21
 800dc0a:	4584      	cmp	ip, r0
 800dc0c:	bf38      	it	cc
 800dc0e:	2304      	movcc	r3, #4
 800dc10:	50ca      	str	r2, [r1, r3]
 800dc12:	b10a      	cbz	r2, 800dc18 <__lshift+0xa4>
 800dc14:	f108 0602 	add.w	r6, r8, #2
 800dc18:	3e01      	subs	r6, #1
 800dc1a:	4638      	mov	r0, r7
 800dc1c:	612e      	str	r6, [r5, #16]
 800dc1e:	4621      	mov	r1, r4
 800dc20:	f7ff fd8e 	bl	800d740 <_Bfree>
 800dc24:	4628      	mov	r0, r5
 800dc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc2e:	3301      	adds	r3, #1
 800dc30:	e7c5      	b.n	800dbbe <__lshift+0x4a>
 800dc32:	3904      	subs	r1, #4
 800dc34:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc38:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc3c:	459c      	cmp	ip, r3
 800dc3e:	d8f9      	bhi.n	800dc34 <__lshift+0xc0>
 800dc40:	e7ea      	b.n	800dc18 <__lshift+0xa4>
 800dc42:	bf00      	nop
 800dc44:	0800f3c1 	.word	0x0800f3c1
 800dc48:	0800f449 	.word	0x0800f449

0800dc4c <__mcmp>:
 800dc4c:	b530      	push	{r4, r5, lr}
 800dc4e:	6902      	ldr	r2, [r0, #16]
 800dc50:	690c      	ldr	r4, [r1, #16]
 800dc52:	1b12      	subs	r2, r2, r4
 800dc54:	d10e      	bne.n	800dc74 <__mcmp+0x28>
 800dc56:	f100 0314 	add.w	r3, r0, #20
 800dc5a:	3114      	adds	r1, #20
 800dc5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dc60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dc64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dc68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dc6c:	42a5      	cmp	r5, r4
 800dc6e:	d003      	beq.n	800dc78 <__mcmp+0x2c>
 800dc70:	d305      	bcc.n	800dc7e <__mcmp+0x32>
 800dc72:	2201      	movs	r2, #1
 800dc74:	4610      	mov	r0, r2
 800dc76:	bd30      	pop	{r4, r5, pc}
 800dc78:	4283      	cmp	r3, r0
 800dc7a:	d3f3      	bcc.n	800dc64 <__mcmp+0x18>
 800dc7c:	e7fa      	b.n	800dc74 <__mcmp+0x28>
 800dc7e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc82:	e7f7      	b.n	800dc74 <__mcmp+0x28>

0800dc84 <__mdiff>:
 800dc84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc88:	460c      	mov	r4, r1
 800dc8a:	4606      	mov	r6, r0
 800dc8c:	4611      	mov	r1, r2
 800dc8e:	4620      	mov	r0, r4
 800dc90:	4690      	mov	r8, r2
 800dc92:	f7ff ffdb 	bl	800dc4c <__mcmp>
 800dc96:	1e05      	subs	r5, r0, #0
 800dc98:	d110      	bne.n	800dcbc <__mdiff+0x38>
 800dc9a:	4629      	mov	r1, r5
 800dc9c:	4630      	mov	r0, r6
 800dc9e:	f7ff fd0f 	bl	800d6c0 <_Balloc>
 800dca2:	b930      	cbnz	r0, 800dcb2 <__mdiff+0x2e>
 800dca4:	4b3a      	ldr	r3, [pc, #232]	; (800dd90 <__mdiff+0x10c>)
 800dca6:	4602      	mov	r2, r0
 800dca8:	f240 2137 	movw	r1, #567	; 0x237
 800dcac:	4839      	ldr	r0, [pc, #228]	; (800dd94 <__mdiff+0x110>)
 800dcae:	f000 fd81 	bl	800e7b4 <__assert_func>
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dcb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcbc:	bfa4      	itt	ge
 800dcbe:	4643      	movge	r3, r8
 800dcc0:	46a0      	movge	r8, r4
 800dcc2:	4630      	mov	r0, r6
 800dcc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dcc8:	bfa6      	itte	ge
 800dcca:	461c      	movge	r4, r3
 800dccc:	2500      	movge	r5, #0
 800dcce:	2501      	movlt	r5, #1
 800dcd0:	f7ff fcf6 	bl	800d6c0 <_Balloc>
 800dcd4:	b920      	cbnz	r0, 800dce0 <__mdiff+0x5c>
 800dcd6:	4b2e      	ldr	r3, [pc, #184]	; (800dd90 <__mdiff+0x10c>)
 800dcd8:	4602      	mov	r2, r0
 800dcda:	f240 2145 	movw	r1, #581	; 0x245
 800dcde:	e7e5      	b.n	800dcac <__mdiff+0x28>
 800dce0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dce4:	6926      	ldr	r6, [r4, #16]
 800dce6:	60c5      	str	r5, [r0, #12]
 800dce8:	f104 0914 	add.w	r9, r4, #20
 800dcec:	f108 0514 	add.w	r5, r8, #20
 800dcf0:	f100 0e14 	add.w	lr, r0, #20
 800dcf4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dcf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dcfc:	f108 0210 	add.w	r2, r8, #16
 800dd00:	46f2      	mov	sl, lr
 800dd02:	2100      	movs	r1, #0
 800dd04:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dd0c:	fa11 f88b 	uxtah	r8, r1, fp
 800dd10:	b299      	uxth	r1, r3
 800dd12:	0c1b      	lsrs	r3, r3, #16
 800dd14:	eba8 0801 	sub.w	r8, r8, r1
 800dd18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dd1c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dd20:	fa1f f888 	uxth.w	r8, r8
 800dd24:	1419      	asrs	r1, r3, #16
 800dd26:	454e      	cmp	r6, r9
 800dd28:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dd2c:	f84a 3b04 	str.w	r3, [sl], #4
 800dd30:	d8e8      	bhi.n	800dd04 <__mdiff+0x80>
 800dd32:	1b33      	subs	r3, r6, r4
 800dd34:	3b15      	subs	r3, #21
 800dd36:	f023 0303 	bic.w	r3, r3, #3
 800dd3a:	3304      	adds	r3, #4
 800dd3c:	3415      	adds	r4, #21
 800dd3e:	42a6      	cmp	r6, r4
 800dd40:	bf38      	it	cc
 800dd42:	2304      	movcc	r3, #4
 800dd44:	441d      	add	r5, r3
 800dd46:	4473      	add	r3, lr
 800dd48:	469e      	mov	lr, r3
 800dd4a:	462e      	mov	r6, r5
 800dd4c:	4566      	cmp	r6, ip
 800dd4e:	d30e      	bcc.n	800dd6e <__mdiff+0xea>
 800dd50:	f10c 0203 	add.w	r2, ip, #3
 800dd54:	1b52      	subs	r2, r2, r5
 800dd56:	f022 0203 	bic.w	r2, r2, #3
 800dd5a:	3d03      	subs	r5, #3
 800dd5c:	45ac      	cmp	ip, r5
 800dd5e:	bf38      	it	cc
 800dd60:	2200      	movcc	r2, #0
 800dd62:	4413      	add	r3, r2
 800dd64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dd68:	b17a      	cbz	r2, 800dd8a <__mdiff+0x106>
 800dd6a:	6107      	str	r7, [r0, #16]
 800dd6c:	e7a4      	b.n	800dcb8 <__mdiff+0x34>
 800dd6e:	f856 8b04 	ldr.w	r8, [r6], #4
 800dd72:	fa11 f288 	uxtah	r2, r1, r8
 800dd76:	1414      	asrs	r4, r2, #16
 800dd78:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dd7c:	b292      	uxth	r2, r2
 800dd7e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dd82:	f84e 2b04 	str.w	r2, [lr], #4
 800dd86:	1421      	asrs	r1, r4, #16
 800dd88:	e7e0      	b.n	800dd4c <__mdiff+0xc8>
 800dd8a:	3f01      	subs	r7, #1
 800dd8c:	e7ea      	b.n	800dd64 <__mdiff+0xe0>
 800dd8e:	bf00      	nop
 800dd90:	0800f3c1 	.word	0x0800f3c1
 800dd94:	0800f449 	.word	0x0800f449

0800dd98 <__ulp>:
 800dd98:	b082      	sub	sp, #8
 800dd9a:	ed8d 0b00 	vstr	d0, [sp]
 800dd9e:	9a01      	ldr	r2, [sp, #4]
 800dda0:	4b0f      	ldr	r3, [pc, #60]	; (800dde0 <__ulp+0x48>)
 800dda2:	4013      	ands	r3, r2
 800dda4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	dc08      	bgt.n	800ddbe <__ulp+0x26>
 800ddac:	425b      	negs	r3, r3
 800ddae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ddb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ddb6:	da04      	bge.n	800ddc2 <__ulp+0x2a>
 800ddb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ddbc:	4113      	asrs	r3, r2
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	e008      	b.n	800ddd4 <__ulp+0x3c>
 800ddc2:	f1a2 0314 	sub.w	r3, r2, #20
 800ddc6:	2b1e      	cmp	r3, #30
 800ddc8:	bfda      	itte	le
 800ddca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ddce:	40da      	lsrle	r2, r3
 800ddd0:	2201      	movgt	r2, #1
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	4610      	mov	r0, r2
 800ddd8:	ec41 0b10 	vmov	d0, r0, r1
 800dddc:	b002      	add	sp, #8
 800ddde:	4770      	bx	lr
 800dde0:	7ff00000 	.word	0x7ff00000

0800dde4 <__b2d>:
 800dde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dde8:	6906      	ldr	r6, [r0, #16]
 800ddea:	f100 0814 	add.w	r8, r0, #20
 800ddee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ddf2:	1f37      	subs	r7, r6, #4
 800ddf4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ddf8:	4610      	mov	r0, r2
 800ddfa:	f7ff fd53 	bl	800d8a4 <__hi0bits>
 800ddfe:	f1c0 0320 	rsb	r3, r0, #32
 800de02:	280a      	cmp	r0, #10
 800de04:	600b      	str	r3, [r1, #0]
 800de06:	491b      	ldr	r1, [pc, #108]	; (800de74 <__b2d+0x90>)
 800de08:	dc15      	bgt.n	800de36 <__b2d+0x52>
 800de0a:	f1c0 0c0b 	rsb	ip, r0, #11
 800de0e:	fa22 f30c 	lsr.w	r3, r2, ip
 800de12:	45b8      	cmp	r8, r7
 800de14:	ea43 0501 	orr.w	r5, r3, r1
 800de18:	bf34      	ite	cc
 800de1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800de1e:	2300      	movcs	r3, #0
 800de20:	3015      	adds	r0, #21
 800de22:	fa02 f000 	lsl.w	r0, r2, r0
 800de26:	fa23 f30c 	lsr.w	r3, r3, ip
 800de2a:	4303      	orrs	r3, r0
 800de2c:	461c      	mov	r4, r3
 800de2e:	ec45 4b10 	vmov	d0, r4, r5
 800de32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de36:	45b8      	cmp	r8, r7
 800de38:	bf3a      	itte	cc
 800de3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800de3e:	f1a6 0708 	subcc.w	r7, r6, #8
 800de42:	2300      	movcs	r3, #0
 800de44:	380b      	subs	r0, #11
 800de46:	d012      	beq.n	800de6e <__b2d+0x8a>
 800de48:	f1c0 0120 	rsb	r1, r0, #32
 800de4c:	fa23 f401 	lsr.w	r4, r3, r1
 800de50:	4082      	lsls	r2, r0
 800de52:	4322      	orrs	r2, r4
 800de54:	4547      	cmp	r7, r8
 800de56:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800de5a:	bf8c      	ite	hi
 800de5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800de60:	2200      	movls	r2, #0
 800de62:	4083      	lsls	r3, r0
 800de64:	40ca      	lsrs	r2, r1
 800de66:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800de6a:	4313      	orrs	r3, r2
 800de6c:	e7de      	b.n	800de2c <__b2d+0x48>
 800de6e:	ea42 0501 	orr.w	r5, r2, r1
 800de72:	e7db      	b.n	800de2c <__b2d+0x48>
 800de74:	3ff00000 	.word	0x3ff00000

0800de78 <__d2b>:
 800de78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de7c:	460f      	mov	r7, r1
 800de7e:	2101      	movs	r1, #1
 800de80:	ec59 8b10 	vmov	r8, r9, d0
 800de84:	4616      	mov	r6, r2
 800de86:	f7ff fc1b 	bl	800d6c0 <_Balloc>
 800de8a:	4604      	mov	r4, r0
 800de8c:	b930      	cbnz	r0, 800de9c <__d2b+0x24>
 800de8e:	4602      	mov	r2, r0
 800de90:	4b24      	ldr	r3, [pc, #144]	; (800df24 <__d2b+0xac>)
 800de92:	4825      	ldr	r0, [pc, #148]	; (800df28 <__d2b+0xb0>)
 800de94:	f240 310f 	movw	r1, #783	; 0x30f
 800de98:	f000 fc8c 	bl	800e7b4 <__assert_func>
 800de9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dea0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dea4:	bb2d      	cbnz	r5, 800def2 <__d2b+0x7a>
 800dea6:	9301      	str	r3, [sp, #4]
 800dea8:	f1b8 0300 	subs.w	r3, r8, #0
 800deac:	d026      	beq.n	800defc <__d2b+0x84>
 800deae:	4668      	mov	r0, sp
 800deb0:	9300      	str	r3, [sp, #0]
 800deb2:	f7ff fd17 	bl	800d8e4 <__lo0bits>
 800deb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800deba:	b1e8      	cbz	r0, 800def8 <__d2b+0x80>
 800debc:	f1c0 0320 	rsb	r3, r0, #32
 800dec0:	fa02 f303 	lsl.w	r3, r2, r3
 800dec4:	430b      	orrs	r3, r1
 800dec6:	40c2      	lsrs	r2, r0
 800dec8:	6163      	str	r3, [r4, #20]
 800deca:	9201      	str	r2, [sp, #4]
 800decc:	9b01      	ldr	r3, [sp, #4]
 800dece:	61a3      	str	r3, [r4, #24]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	bf14      	ite	ne
 800ded4:	2202      	movne	r2, #2
 800ded6:	2201      	moveq	r2, #1
 800ded8:	6122      	str	r2, [r4, #16]
 800deda:	b1bd      	cbz	r5, 800df0c <__d2b+0x94>
 800dedc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dee0:	4405      	add	r5, r0
 800dee2:	603d      	str	r5, [r7, #0]
 800dee4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dee8:	6030      	str	r0, [r6, #0]
 800deea:	4620      	mov	r0, r4
 800deec:	b003      	add	sp, #12
 800deee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800def2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800def6:	e7d6      	b.n	800dea6 <__d2b+0x2e>
 800def8:	6161      	str	r1, [r4, #20]
 800defa:	e7e7      	b.n	800decc <__d2b+0x54>
 800defc:	a801      	add	r0, sp, #4
 800defe:	f7ff fcf1 	bl	800d8e4 <__lo0bits>
 800df02:	9b01      	ldr	r3, [sp, #4]
 800df04:	6163      	str	r3, [r4, #20]
 800df06:	3020      	adds	r0, #32
 800df08:	2201      	movs	r2, #1
 800df0a:	e7e5      	b.n	800ded8 <__d2b+0x60>
 800df0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df14:	6038      	str	r0, [r7, #0]
 800df16:	6918      	ldr	r0, [r3, #16]
 800df18:	f7ff fcc4 	bl	800d8a4 <__hi0bits>
 800df1c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df20:	e7e2      	b.n	800dee8 <__d2b+0x70>
 800df22:	bf00      	nop
 800df24:	0800f3c1 	.word	0x0800f3c1
 800df28:	0800f449 	.word	0x0800f449

0800df2c <__ratio>:
 800df2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df30:	4688      	mov	r8, r1
 800df32:	4669      	mov	r1, sp
 800df34:	4681      	mov	r9, r0
 800df36:	f7ff ff55 	bl	800dde4 <__b2d>
 800df3a:	a901      	add	r1, sp, #4
 800df3c:	4640      	mov	r0, r8
 800df3e:	ec55 4b10 	vmov	r4, r5, d0
 800df42:	f7ff ff4f 	bl	800dde4 <__b2d>
 800df46:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df4a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800df4e:	eba3 0c02 	sub.w	ip, r3, r2
 800df52:	e9dd 3200 	ldrd	r3, r2, [sp]
 800df56:	1a9b      	subs	r3, r3, r2
 800df58:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800df5c:	ec51 0b10 	vmov	r0, r1, d0
 800df60:	2b00      	cmp	r3, #0
 800df62:	bfd6      	itet	le
 800df64:	460a      	movle	r2, r1
 800df66:	462a      	movgt	r2, r5
 800df68:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800df6c:	468b      	mov	fp, r1
 800df6e:	462f      	mov	r7, r5
 800df70:	bfd4      	ite	le
 800df72:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800df76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800df7a:	4620      	mov	r0, r4
 800df7c:	ee10 2a10 	vmov	r2, s0
 800df80:	465b      	mov	r3, fp
 800df82:	4639      	mov	r1, r7
 800df84:	f7f2 fc72 	bl	800086c <__aeabi_ddiv>
 800df88:	ec41 0b10 	vmov	d0, r0, r1
 800df8c:	b003      	add	sp, #12
 800df8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df92 <__copybits>:
 800df92:	3901      	subs	r1, #1
 800df94:	b570      	push	{r4, r5, r6, lr}
 800df96:	1149      	asrs	r1, r1, #5
 800df98:	6914      	ldr	r4, [r2, #16]
 800df9a:	3101      	adds	r1, #1
 800df9c:	f102 0314 	add.w	r3, r2, #20
 800dfa0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dfa4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dfa8:	1f05      	subs	r5, r0, #4
 800dfaa:	42a3      	cmp	r3, r4
 800dfac:	d30c      	bcc.n	800dfc8 <__copybits+0x36>
 800dfae:	1aa3      	subs	r3, r4, r2
 800dfb0:	3b11      	subs	r3, #17
 800dfb2:	f023 0303 	bic.w	r3, r3, #3
 800dfb6:	3211      	adds	r2, #17
 800dfb8:	42a2      	cmp	r2, r4
 800dfba:	bf88      	it	hi
 800dfbc:	2300      	movhi	r3, #0
 800dfbe:	4418      	add	r0, r3
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	4288      	cmp	r0, r1
 800dfc4:	d305      	bcc.n	800dfd2 <__copybits+0x40>
 800dfc6:	bd70      	pop	{r4, r5, r6, pc}
 800dfc8:	f853 6b04 	ldr.w	r6, [r3], #4
 800dfcc:	f845 6f04 	str.w	r6, [r5, #4]!
 800dfd0:	e7eb      	b.n	800dfaa <__copybits+0x18>
 800dfd2:	f840 3b04 	str.w	r3, [r0], #4
 800dfd6:	e7f4      	b.n	800dfc2 <__copybits+0x30>

0800dfd8 <__any_on>:
 800dfd8:	f100 0214 	add.w	r2, r0, #20
 800dfdc:	6900      	ldr	r0, [r0, #16]
 800dfde:	114b      	asrs	r3, r1, #5
 800dfe0:	4298      	cmp	r0, r3
 800dfe2:	b510      	push	{r4, lr}
 800dfe4:	db11      	blt.n	800e00a <__any_on+0x32>
 800dfe6:	dd0a      	ble.n	800dffe <__any_on+0x26>
 800dfe8:	f011 011f 	ands.w	r1, r1, #31
 800dfec:	d007      	beq.n	800dffe <__any_on+0x26>
 800dfee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dff2:	fa24 f001 	lsr.w	r0, r4, r1
 800dff6:	fa00 f101 	lsl.w	r1, r0, r1
 800dffa:	428c      	cmp	r4, r1
 800dffc:	d10b      	bne.n	800e016 <__any_on+0x3e>
 800dffe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e002:	4293      	cmp	r3, r2
 800e004:	d803      	bhi.n	800e00e <__any_on+0x36>
 800e006:	2000      	movs	r0, #0
 800e008:	bd10      	pop	{r4, pc}
 800e00a:	4603      	mov	r3, r0
 800e00c:	e7f7      	b.n	800dffe <__any_on+0x26>
 800e00e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e012:	2900      	cmp	r1, #0
 800e014:	d0f5      	beq.n	800e002 <__any_on+0x2a>
 800e016:	2001      	movs	r0, #1
 800e018:	e7f6      	b.n	800e008 <__any_on+0x30>

0800e01a <__ascii_wctomb>:
 800e01a:	b149      	cbz	r1, 800e030 <__ascii_wctomb+0x16>
 800e01c:	2aff      	cmp	r2, #255	; 0xff
 800e01e:	bf85      	ittet	hi
 800e020:	238a      	movhi	r3, #138	; 0x8a
 800e022:	6003      	strhi	r3, [r0, #0]
 800e024:	700a      	strbls	r2, [r1, #0]
 800e026:	f04f 30ff 	movhi.w	r0, #4294967295
 800e02a:	bf98      	it	ls
 800e02c:	2001      	movls	r0, #1
 800e02e:	4770      	bx	lr
 800e030:	4608      	mov	r0, r1
 800e032:	4770      	bx	lr

0800e034 <__ssputs_r>:
 800e034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e038:	688e      	ldr	r6, [r1, #8]
 800e03a:	461f      	mov	r7, r3
 800e03c:	42be      	cmp	r6, r7
 800e03e:	680b      	ldr	r3, [r1, #0]
 800e040:	4682      	mov	sl, r0
 800e042:	460c      	mov	r4, r1
 800e044:	4690      	mov	r8, r2
 800e046:	d82c      	bhi.n	800e0a2 <__ssputs_r+0x6e>
 800e048:	898a      	ldrh	r2, [r1, #12]
 800e04a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e04e:	d026      	beq.n	800e09e <__ssputs_r+0x6a>
 800e050:	6965      	ldr	r5, [r4, #20]
 800e052:	6909      	ldr	r1, [r1, #16]
 800e054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e058:	eba3 0901 	sub.w	r9, r3, r1
 800e05c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e060:	1c7b      	adds	r3, r7, #1
 800e062:	444b      	add	r3, r9
 800e064:	106d      	asrs	r5, r5, #1
 800e066:	429d      	cmp	r5, r3
 800e068:	bf38      	it	cc
 800e06a:	461d      	movcc	r5, r3
 800e06c:	0553      	lsls	r3, r2, #21
 800e06e:	d527      	bpl.n	800e0c0 <__ssputs_r+0x8c>
 800e070:	4629      	mov	r1, r5
 800e072:	f7ff fa87 	bl	800d584 <_malloc_r>
 800e076:	4606      	mov	r6, r0
 800e078:	b360      	cbz	r0, 800e0d4 <__ssputs_r+0xa0>
 800e07a:	6921      	ldr	r1, [r4, #16]
 800e07c:	464a      	mov	r2, r9
 800e07e:	f7fe fea0 	bl	800cdc2 <memcpy>
 800e082:	89a3      	ldrh	r3, [r4, #12]
 800e084:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e08c:	81a3      	strh	r3, [r4, #12]
 800e08e:	6126      	str	r6, [r4, #16]
 800e090:	6165      	str	r5, [r4, #20]
 800e092:	444e      	add	r6, r9
 800e094:	eba5 0509 	sub.w	r5, r5, r9
 800e098:	6026      	str	r6, [r4, #0]
 800e09a:	60a5      	str	r5, [r4, #8]
 800e09c:	463e      	mov	r6, r7
 800e09e:	42be      	cmp	r6, r7
 800e0a0:	d900      	bls.n	800e0a4 <__ssputs_r+0x70>
 800e0a2:	463e      	mov	r6, r7
 800e0a4:	6820      	ldr	r0, [r4, #0]
 800e0a6:	4632      	mov	r2, r6
 800e0a8:	4641      	mov	r1, r8
 800e0aa:	f000 fb59 	bl	800e760 <memmove>
 800e0ae:	68a3      	ldr	r3, [r4, #8]
 800e0b0:	1b9b      	subs	r3, r3, r6
 800e0b2:	60a3      	str	r3, [r4, #8]
 800e0b4:	6823      	ldr	r3, [r4, #0]
 800e0b6:	4433      	add	r3, r6
 800e0b8:	6023      	str	r3, [r4, #0]
 800e0ba:	2000      	movs	r0, #0
 800e0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0c0:	462a      	mov	r2, r5
 800e0c2:	f000 fbb3 	bl	800e82c <_realloc_r>
 800e0c6:	4606      	mov	r6, r0
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d1e0      	bne.n	800e08e <__ssputs_r+0x5a>
 800e0cc:	6921      	ldr	r1, [r4, #16]
 800e0ce:	4650      	mov	r0, sl
 800e0d0:	f7fe fe94 	bl	800cdfc <_free_r>
 800e0d4:	230c      	movs	r3, #12
 800e0d6:	f8ca 3000 	str.w	r3, [sl]
 800e0da:	89a3      	ldrh	r3, [r4, #12]
 800e0dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0e0:	81a3      	strh	r3, [r4, #12]
 800e0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e0e6:	e7e9      	b.n	800e0bc <__ssputs_r+0x88>

0800e0e8 <_svfiprintf_r>:
 800e0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ec:	4698      	mov	r8, r3
 800e0ee:	898b      	ldrh	r3, [r1, #12]
 800e0f0:	061b      	lsls	r3, r3, #24
 800e0f2:	b09d      	sub	sp, #116	; 0x74
 800e0f4:	4607      	mov	r7, r0
 800e0f6:	460d      	mov	r5, r1
 800e0f8:	4614      	mov	r4, r2
 800e0fa:	d50e      	bpl.n	800e11a <_svfiprintf_r+0x32>
 800e0fc:	690b      	ldr	r3, [r1, #16]
 800e0fe:	b963      	cbnz	r3, 800e11a <_svfiprintf_r+0x32>
 800e100:	2140      	movs	r1, #64	; 0x40
 800e102:	f7ff fa3f 	bl	800d584 <_malloc_r>
 800e106:	6028      	str	r0, [r5, #0]
 800e108:	6128      	str	r0, [r5, #16]
 800e10a:	b920      	cbnz	r0, 800e116 <_svfiprintf_r+0x2e>
 800e10c:	230c      	movs	r3, #12
 800e10e:	603b      	str	r3, [r7, #0]
 800e110:	f04f 30ff 	mov.w	r0, #4294967295
 800e114:	e0d0      	b.n	800e2b8 <_svfiprintf_r+0x1d0>
 800e116:	2340      	movs	r3, #64	; 0x40
 800e118:	616b      	str	r3, [r5, #20]
 800e11a:	2300      	movs	r3, #0
 800e11c:	9309      	str	r3, [sp, #36]	; 0x24
 800e11e:	2320      	movs	r3, #32
 800e120:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e124:	f8cd 800c 	str.w	r8, [sp, #12]
 800e128:	2330      	movs	r3, #48	; 0x30
 800e12a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e2d0 <_svfiprintf_r+0x1e8>
 800e12e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e132:	f04f 0901 	mov.w	r9, #1
 800e136:	4623      	mov	r3, r4
 800e138:	469a      	mov	sl, r3
 800e13a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e13e:	b10a      	cbz	r2, 800e144 <_svfiprintf_r+0x5c>
 800e140:	2a25      	cmp	r2, #37	; 0x25
 800e142:	d1f9      	bne.n	800e138 <_svfiprintf_r+0x50>
 800e144:	ebba 0b04 	subs.w	fp, sl, r4
 800e148:	d00b      	beq.n	800e162 <_svfiprintf_r+0x7a>
 800e14a:	465b      	mov	r3, fp
 800e14c:	4622      	mov	r2, r4
 800e14e:	4629      	mov	r1, r5
 800e150:	4638      	mov	r0, r7
 800e152:	f7ff ff6f 	bl	800e034 <__ssputs_r>
 800e156:	3001      	adds	r0, #1
 800e158:	f000 80a9 	beq.w	800e2ae <_svfiprintf_r+0x1c6>
 800e15c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e15e:	445a      	add	r2, fp
 800e160:	9209      	str	r2, [sp, #36]	; 0x24
 800e162:	f89a 3000 	ldrb.w	r3, [sl]
 800e166:	2b00      	cmp	r3, #0
 800e168:	f000 80a1 	beq.w	800e2ae <_svfiprintf_r+0x1c6>
 800e16c:	2300      	movs	r3, #0
 800e16e:	f04f 32ff 	mov.w	r2, #4294967295
 800e172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e176:	f10a 0a01 	add.w	sl, sl, #1
 800e17a:	9304      	str	r3, [sp, #16]
 800e17c:	9307      	str	r3, [sp, #28]
 800e17e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e182:	931a      	str	r3, [sp, #104]	; 0x68
 800e184:	4654      	mov	r4, sl
 800e186:	2205      	movs	r2, #5
 800e188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e18c:	4850      	ldr	r0, [pc, #320]	; (800e2d0 <_svfiprintf_r+0x1e8>)
 800e18e:	f7f2 f837 	bl	8000200 <memchr>
 800e192:	9a04      	ldr	r2, [sp, #16]
 800e194:	b9d8      	cbnz	r0, 800e1ce <_svfiprintf_r+0xe6>
 800e196:	06d0      	lsls	r0, r2, #27
 800e198:	bf44      	itt	mi
 800e19a:	2320      	movmi	r3, #32
 800e19c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1a0:	0711      	lsls	r1, r2, #28
 800e1a2:	bf44      	itt	mi
 800e1a4:	232b      	movmi	r3, #43	; 0x2b
 800e1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e1ae:	2b2a      	cmp	r3, #42	; 0x2a
 800e1b0:	d015      	beq.n	800e1de <_svfiprintf_r+0xf6>
 800e1b2:	9a07      	ldr	r2, [sp, #28]
 800e1b4:	4654      	mov	r4, sl
 800e1b6:	2000      	movs	r0, #0
 800e1b8:	f04f 0c0a 	mov.w	ip, #10
 800e1bc:	4621      	mov	r1, r4
 800e1be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1c2:	3b30      	subs	r3, #48	; 0x30
 800e1c4:	2b09      	cmp	r3, #9
 800e1c6:	d94d      	bls.n	800e264 <_svfiprintf_r+0x17c>
 800e1c8:	b1b0      	cbz	r0, 800e1f8 <_svfiprintf_r+0x110>
 800e1ca:	9207      	str	r2, [sp, #28]
 800e1cc:	e014      	b.n	800e1f8 <_svfiprintf_r+0x110>
 800e1ce:	eba0 0308 	sub.w	r3, r0, r8
 800e1d2:	fa09 f303 	lsl.w	r3, r9, r3
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	9304      	str	r3, [sp, #16]
 800e1da:	46a2      	mov	sl, r4
 800e1dc:	e7d2      	b.n	800e184 <_svfiprintf_r+0x9c>
 800e1de:	9b03      	ldr	r3, [sp, #12]
 800e1e0:	1d19      	adds	r1, r3, #4
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	9103      	str	r1, [sp, #12]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	bfbb      	ittet	lt
 800e1ea:	425b      	neglt	r3, r3
 800e1ec:	f042 0202 	orrlt.w	r2, r2, #2
 800e1f0:	9307      	strge	r3, [sp, #28]
 800e1f2:	9307      	strlt	r3, [sp, #28]
 800e1f4:	bfb8      	it	lt
 800e1f6:	9204      	strlt	r2, [sp, #16]
 800e1f8:	7823      	ldrb	r3, [r4, #0]
 800e1fa:	2b2e      	cmp	r3, #46	; 0x2e
 800e1fc:	d10c      	bne.n	800e218 <_svfiprintf_r+0x130>
 800e1fe:	7863      	ldrb	r3, [r4, #1]
 800e200:	2b2a      	cmp	r3, #42	; 0x2a
 800e202:	d134      	bne.n	800e26e <_svfiprintf_r+0x186>
 800e204:	9b03      	ldr	r3, [sp, #12]
 800e206:	1d1a      	adds	r2, r3, #4
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	9203      	str	r2, [sp, #12]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	bfb8      	it	lt
 800e210:	f04f 33ff 	movlt.w	r3, #4294967295
 800e214:	3402      	adds	r4, #2
 800e216:	9305      	str	r3, [sp, #20]
 800e218:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e2e0 <_svfiprintf_r+0x1f8>
 800e21c:	7821      	ldrb	r1, [r4, #0]
 800e21e:	2203      	movs	r2, #3
 800e220:	4650      	mov	r0, sl
 800e222:	f7f1 ffed 	bl	8000200 <memchr>
 800e226:	b138      	cbz	r0, 800e238 <_svfiprintf_r+0x150>
 800e228:	9b04      	ldr	r3, [sp, #16]
 800e22a:	eba0 000a 	sub.w	r0, r0, sl
 800e22e:	2240      	movs	r2, #64	; 0x40
 800e230:	4082      	lsls	r2, r0
 800e232:	4313      	orrs	r3, r2
 800e234:	3401      	adds	r4, #1
 800e236:	9304      	str	r3, [sp, #16]
 800e238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e23c:	4825      	ldr	r0, [pc, #148]	; (800e2d4 <_svfiprintf_r+0x1ec>)
 800e23e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e242:	2206      	movs	r2, #6
 800e244:	f7f1 ffdc 	bl	8000200 <memchr>
 800e248:	2800      	cmp	r0, #0
 800e24a:	d038      	beq.n	800e2be <_svfiprintf_r+0x1d6>
 800e24c:	4b22      	ldr	r3, [pc, #136]	; (800e2d8 <_svfiprintf_r+0x1f0>)
 800e24e:	bb1b      	cbnz	r3, 800e298 <_svfiprintf_r+0x1b0>
 800e250:	9b03      	ldr	r3, [sp, #12]
 800e252:	3307      	adds	r3, #7
 800e254:	f023 0307 	bic.w	r3, r3, #7
 800e258:	3308      	adds	r3, #8
 800e25a:	9303      	str	r3, [sp, #12]
 800e25c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e25e:	4433      	add	r3, r6
 800e260:	9309      	str	r3, [sp, #36]	; 0x24
 800e262:	e768      	b.n	800e136 <_svfiprintf_r+0x4e>
 800e264:	fb0c 3202 	mla	r2, ip, r2, r3
 800e268:	460c      	mov	r4, r1
 800e26a:	2001      	movs	r0, #1
 800e26c:	e7a6      	b.n	800e1bc <_svfiprintf_r+0xd4>
 800e26e:	2300      	movs	r3, #0
 800e270:	3401      	adds	r4, #1
 800e272:	9305      	str	r3, [sp, #20]
 800e274:	4619      	mov	r1, r3
 800e276:	f04f 0c0a 	mov.w	ip, #10
 800e27a:	4620      	mov	r0, r4
 800e27c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e280:	3a30      	subs	r2, #48	; 0x30
 800e282:	2a09      	cmp	r2, #9
 800e284:	d903      	bls.n	800e28e <_svfiprintf_r+0x1a6>
 800e286:	2b00      	cmp	r3, #0
 800e288:	d0c6      	beq.n	800e218 <_svfiprintf_r+0x130>
 800e28a:	9105      	str	r1, [sp, #20]
 800e28c:	e7c4      	b.n	800e218 <_svfiprintf_r+0x130>
 800e28e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e292:	4604      	mov	r4, r0
 800e294:	2301      	movs	r3, #1
 800e296:	e7f0      	b.n	800e27a <_svfiprintf_r+0x192>
 800e298:	ab03      	add	r3, sp, #12
 800e29a:	9300      	str	r3, [sp, #0]
 800e29c:	462a      	mov	r2, r5
 800e29e:	4b0f      	ldr	r3, [pc, #60]	; (800e2dc <_svfiprintf_r+0x1f4>)
 800e2a0:	a904      	add	r1, sp, #16
 800e2a2:	4638      	mov	r0, r7
 800e2a4:	f3af 8000 	nop.w
 800e2a8:	1c42      	adds	r2, r0, #1
 800e2aa:	4606      	mov	r6, r0
 800e2ac:	d1d6      	bne.n	800e25c <_svfiprintf_r+0x174>
 800e2ae:	89ab      	ldrh	r3, [r5, #12]
 800e2b0:	065b      	lsls	r3, r3, #25
 800e2b2:	f53f af2d 	bmi.w	800e110 <_svfiprintf_r+0x28>
 800e2b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2b8:	b01d      	add	sp, #116	; 0x74
 800e2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2be:	ab03      	add	r3, sp, #12
 800e2c0:	9300      	str	r3, [sp, #0]
 800e2c2:	462a      	mov	r2, r5
 800e2c4:	4b05      	ldr	r3, [pc, #20]	; (800e2dc <_svfiprintf_r+0x1f4>)
 800e2c6:	a904      	add	r1, sp, #16
 800e2c8:	4638      	mov	r0, r7
 800e2ca:	f000 f879 	bl	800e3c0 <_printf_i>
 800e2ce:	e7eb      	b.n	800e2a8 <_svfiprintf_r+0x1c0>
 800e2d0:	0800f5a4 	.word	0x0800f5a4
 800e2d4:	0800f5ae 	.word	0x0800f5ae
 800e2d8:	00000000 	.word	0x00000000
 800e2dc:	0800e035 	.word	0x0800e035
 800e2e0:	0800f5aa 	.word	0x0800f5aa

0800e2e4 <_printf_common>:
 800e2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2e8:	4616      	mov	r6, r2
 800e2ea:	4699      	mov	r9, r3
 800e2ec:	688a      	ldr	r2, [r1, #8]
 800e2ee:	690b      	ldr	r3, [r1, #16]
 800e2f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	bfb8      	it	lt
 800e2f8:	4613      	movlt	r3, r2
 800e2fa:	6033      	str	r3, [r6, #0]
 800e2fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e300:	4607      	mov	r7, r0
 800e302:	460c      	mov	r4, r1
 800e304:	b10a      	cbz	r2, 800e30a <_printf_common+0x26>
 800e306:	3301      	adds	r3, #1
 800e308:	6033      	str	r3, [r6, #0]
 800e30a:	6823      	ldr	r3, [r4, #0]
 800e30c:	0699      	lsls	r1, r3, #26
 800e30e:	bf42      	ittt	mi
 800e310:	6833      	ldrmi	r3, [r6, #0]
 800e312:	3302      	addmi	r3, #2
 800e314:	6033      	strmi	r3, [r6, #0]
 800e316:	6825      	ldr	r5, [r4, #0]
 800e318:	f015 0506 	ands.w	r5, r5, #6
 800e31c:	d106      	bne.n	800e32c <_printf_common+0x48>
 800e31e:	f104 0a19 	add.w	sl, r4, #25
 800e322:	68e3      	ldr	r3, [r4, #12]
 800e324:	6832      	ldr	r2, [r6, #0]
 800e326:	1a9b      	subs	r3, r3, r2
 800e328:	42ab      	cmp	r3, r5
 800e32a:	dc26      	bgt.n	800e37a <_printf_common+0x96>
 800e32c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e330:	1e13      	subs	r3, r2, #0
 800e332:	6822      	ldr	r2, [r4, #0]
 800e334:	bf18      	it	ne
 800e336:	2301      	movne	r3, #1
 800e338:	0692      	lsls	r2, r2, #26
 800e33a:	d42b      	bmi.n	800e394 <_printf_common+0xb0>
 800e33c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e340:	4649      	mov	r1, r9
 800e342:	4638      	mov	r0, r7
 800e344:	47c0      	blx	r8
 800e346:	3001      	adds	r0, #1
 800e348:	d01e      	beq.n	800e388 <_printf_common+0xa4>
 800e34a:	6823      	ldr	r3, [r4, #0]
 800e34c:	6922      	ldr	r2, [r4, #16]
 800e34e:	f003 0306 	and.w	r3, r3, #6
 800e352:	2b04      	cmp	r3, #4
 800e354:	bf02      	ittt	eq
 800e356:	68e5      	ldreq	r5, [r4, #12]
 800e358:	6833      	ldreq	r3, [r6, #0]
 800e35a:	1aed      	subeq	r5, r5, r3
 800e35c:	68a3      	ldr	r3, [r4, #8]
 800e35e:	bf0c      	ite	eq
 800e360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e364:	2500      	movne	r5, #0
 800e366:	4293      	cmp	r3, r2
 800e368:	bfc4      	itt	gt
 800e36a:	1a9b      	subgt	r3, r3, r2
 800e36c:	18ed      	addgt	r5, r5, r3
 800e36e:	2600      	movs	r6, #0
 800e370:	341a      	adds	r4, #26
 800e372:	42b5      	cmp	r5, r6
 800e374:	d11a      	bne.n	800e3ac <_printf_common+0xc8>
 800e376:	2000      	movs	r0, #0
 800e378:	e008      	b.n	800e38c <_printf_common+0xa8>
 800e37a:	2301      	movs	r3, #1
 800e37c:	4652      	mov	r2, sl
 800e37e:	4649      	mov	r1, r9
 800e380:	4638      	mov	r0, r7
 800e382:	47c0      	blx	r8
 800e384:	3001      	adds	r0, #1
 800e386:	d103      	bne.n	800e390 <_printf_common+0xac>
 800e388:	f04f 30ff 	mov.w	r0, #4294967295
 800e38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e390:	3501      	adds	r5, #1
 800e392:	e7c6      	b.n	800e322 <_printf_common+0x3e>
 800e394:	18e1      	adds	r1, r4, r3
 800e396:	1c5a      	adds	r2, r3, #1
 800e398:	2030      	movs	r0, #48	; 0x30
 800e39a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e39e:	4422      	add	r2, r4
 800e3a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e3a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e3a8:	3302      	adds	r3, #2
 800e3aa:	e7c7      	b.n	800e33c <_printf_common+0x58>
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	4622      	mov	r2, r4
 800e3b0:	4649      	mov	r1, r9
 800e3b2:	4638      	mov	r0, r7
 800e3b4:	47c0      	blx	r8
 800e3b6:	3001      	adds	r0, #1
 800e3b8:	d0e6      	beq.n	800e388 <_printf_common+0xa4>
 800e3ba:	3601      	adds	r6, #1
 800e3bc:	e7d9      	b.n	800e372 <_printf_common+0x8e>
	...

0800e3c0 <_printf_i>:
 800e3c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c4:	7e0f      	ldrb	r7, [r1, #24]
 800e3c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e3c8:	2f78      	cmp	r7, #120	; 0x78
 800e3ca:	4691      	mov	r9, r2
 800e3cc:	4680      	mov	r8, r0
 800e3ce:	460c      	mov	r4, r1
 800e3d0:	469a      	mov	sl, r3
 800e3d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e3d6:	d807      	bhi.n	800e3e8 <_printf_i+0x28>
 800e3d8:	2f62      	cmp	r7, #98	; 0x62
 800e3da:	d80a      	bhi.n	800e3f2 <_printf_i+0x32>
 800e3dc:	2f00      	cmp	r7, #0
 800e3de:	f000 80d4 	beq.w	800e58a <_printf_i+0x1ca>
 800e3e2:	2f58      	cmp	r7, #88	; 0x58
 800e3e4:	f000 80c0 	beq.w	800e568 <_printf_i+0x1a8>
 800e3e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e3f0:	e03a      	b.n	800e468 <_printf_i+0xa8>
 800e3f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e3f6:	2b15      	cmp	r3, #21
 800e3f8:	d8f6      	bhi.n	800e3e8 <_printf_i+0x28>
 800e3fa:	a101      	add	r1, pc, #4	; (adr r1, 800e400 <_printf_i+0x40>)
 800e3fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e400:	0800e459 	.word	0x0800e459
 800e404:	0800e46d 	.word	0x0800e46d
 800e408:	0800e3e9 	.word	0x0800e3e9
 800e40c:	0800e3e9 	.word	0x0800e3e9
 800e410:	0800e3e9 	.word	0x0800e3e9
 800e414:	0800e3e9 	.word	0x0800e3e9
 800e418:	0800e46d 	.word	0x0800e46d
 800e41c:	0800e3e9 	.word	0x0800e3e9
 800e420:	0800e3e9 	.word	0x0800e3e9
 800e424:	0800e3e9 	.word	0x0800e3e9
 800e428:	0800e3e9 	.word	0x0800e3e9
 800e42c:	0800e571 	.word	0x0800e571
 800e430:	0800e499 	.word	0x0800e499
 800e434:	0800e52b 	.word	0x0800e52b
 800e438:	0800e3e9 	.word	0x0800e3e9
 800e43c:	0800e3e9 	.word	0x0800e3e9
 800e440:	0800e593 	.word	0x0800e593
 800e444:	0800e3e9 	.word	0x0800e3e9
 800e448:	0800e499 	.word	0x0800e499
 800e44c:	0800e3e9 	.word	0x0800e3e9
 800e450:	0800e3e9 	.word	0x0800e3e9
 800e454:	0800e533 	.word	0x0800e533
 800e458:	682b      	ldr	r3, [r5, #0]
 800e45a:	1d1a      	adds	r2, r3, #4
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	602a      	str	r2, [r5, #0]
 800e460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e468:	2301      	movs	r3, #1
 800e46a:	e09f      	b.n	800e5ac <_printf_i+0x1ec>
 800e46c:	6820      	ldr	r0, [r4, #0]
 800e46e:	682b      	ldr	r3, [r5, #0]
 800e470:	0607      	lsls	r7, r0, #24
 800e472:	f103 0104 	add.w	r1, r3, #4
 800e476:	6029      	str	r1, [r5, #0]
 800e478:	d501      	bpl.n	800e47e <_printf_i+0xbe>
 800e47a:	681e      	ldr	r6, [r3, #0]
 800e47c:	e003      	b.n	800e486 <_printf_i+0xc6>
 800e47e:	0646      	lsls	r6, r0, #25
 800e480:	d5fb      	bpl.n	800e47a <_printf_i+0xba>
 800e482:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e486:	2e00      	cmp	r6, #0
 800e488:	da03      	bge.n	800e492 <_printf_i+0xd2>
 800e48a:	232d      	movs	r3, #45	; 0x2d
 800e48c:	4276      	negs	r6, r6
 800e48e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e492:	485a      	ldr	r0, [pc, #360]	; (800e5fc <_printf_i+0x23c>)
 800e494:	230a      	movs	r3, #10
 800e496:	e012      	b.n	800e4be <_printf_i+0xfe>
 800e498:	682b      	ldr	r3, [r5, #0]
 800e49a:	6820      	ldr	r0, [r4, #0]
 800e49c:	1d19      	adds	r1, r3, #4
 800e49e:	6029      	str	r1, [r5, #0]
 800e4a0:	0605      	lsls	r5, r0, #24
 800e4a2:	d501      	bpl.n	800e4a8 <_printf_i+0xe8>
 800e4a4:	681e      	ldr	r6, [r3, #0]
 800e4a6:	e002      	b.n	800e4ae <_printf_i+0xee>
 800e4a8:	0641      	lsls	r1, r0, #25
 800e4aa:	d5fb      	bpl.n	800e4a4 <_printf_i+0xe4>
 800e4ac:	881e      	ldrh	r6, [r3, #0]
 800e4ae:	4853      	ldr	r0, [pc, #332]	; (800e5fc <_printf_i+0x23c>)
 800e4b0:	2f6f      	cmp	r7, #111	; 0x6f
 800e4b2:	bf0c      	ite	eq
 800e4b4:	2308      	moveq	r3, #8
 800e4b6:	230a      	movne	r3, #10
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e4be:	6865      	ldr	r5, [r4, #4]
 800e4c0:	60a5      	str	r5, [r4, #8]
 800e4c2:	2d00      	cmp	r5, #0
 800e4c4:	bfa2      	ittt	ge
 800e4c6:	6821      	ldrge	r1, [r4, #0]
 800e4c8:	f021 0104 	bicge.w	r1, r1, #4
 800e4cc:	6021      	strge	r1, [r4, #0]
 800e4ce:	b90e      	cbnz	r6, 800e4d4 <_printf_i+0x114>
 800e4d0:	2d00      	cmp	r5, #0
 800e4d2:	d04b      	beq.n	800e56c <_printf_i+0x1ac>
 800e4d4:	4615      	mov	r5, r2
 800e4d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800e4da:	fb03 6711 	mls	r7, r3, r1, r6
 800e4de:	5dc7      	ldrb	r7, [r0, r7]
 800e4e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e4e4:	4637      	mov	r7, r6
 800e4e6:	42bb      	cmp	r3, r7
 800e4e8:	460e      	mov	r6, r1
 800e4ea:	d9f4      	bls.n	800e4d6 <_printf_i+0x116>
 800e4ec:	2b08      	cmp	r3, #8
 800e4ee:	d10b      	bne.n	800e508 <_printf_i+0x148>
 800e4f0:	6823      	ldr	r3, [r4, #0]
 800e4f2:	07de      	lsls	r6, r3, #31
 800e4f4:	d508      	bpl.n	800e508 <_printf_i+0x148>
 800e4f6:	6923      	ldr	r3, [r4, #16]
 800e4f8:	6861      	ldr	r1, [r4, #4]
 800e4fa:	4299      	cmp	r1, r3
 800e4fc:	bfde      	ittt	le
 800e4fe:	2330      	movle	r3, #48	; 0x30
 800e500:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e504:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e508:	1b52      	subs	r2, r2, r5
 800e50a:	6122      	str	r2, [r4, #16]
 800e50c:	f8cd a000 	str.w	sl, [sp]
 800e510:	464b      	mov	r3, r9
 800e512:	aa03      	add	r2, sp, #12
 800e514:	4621      	mov	r1, r4
 800e516:	4640      	mov	r0, r8
 800e518:	f7ff fee4 	bl	800e2e4 <_printf_common>
 800e51c:	3001      	adds	r0, #1
 800e51e:	d14a      	bne.n	800e5b6 <_printf_i+0x1f6>
 800e520:	f04f 30ff 	mov.w	r0, #4294967295
 800e524:	b004      	add	sp, #16
 800e526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e52a:	6823      	ldr	r3, [r4, #0]
 800e52c:	f043 0320 	orr.w	r3, r3, #32
 800e530:	6023      	str	r3, [r4, #0]
 800e532:	4833      	ldr	r0, [pc, #204]	; (800e600 <_printf_i+0x240>)
 800e534:	2778      	movs	r7, #120	; 0x78
 800e536:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e53a:	6823      	ldr	r3, [r4, #0]
 800e53c:	6829      	ldr	r1, [r5, #0]
 800e53e:	061f      	lsls	r7, r3, #24
 800e540:	f851 6b04 	ldr.w	r6, [r1], #4
 800e544:	d402      	bmi.n	800e54c <_printf_i+0x18c>
 800e546:	065f      	lsls	r7, r3, #25
 800e548:	bf48      	it	mi
 800e54a:	b2b6      	uxthmi	r6, r6
 800e54c:	07df      	lsls	r7, r3, #31
 800e54e:	bf48      	it	mi
 800e550:	f043 0320 	orrmi.w	r3, r3, #32
 800e554:	6029      	str	r1, [r5, #0]
 800e556:	bf48      	it	mi
 800e558:	6023      	strmi	r3, [r4, #0]
 800e55a:	b91e      	cbnz	r6, 800e564 <_printf_i+0x1a4>
 800e55c:	6823      	ldr	r3, [r4, #0]
 800e55e:	f023 0320 	bic.w	r3, r3, #32
 800e562:	6023      	str	r3, [r4, #0]
 800e564:	2310      	movs	r3, #16
 800e566:	e7a7      	b.n	800e4b8 <_printf_i+0xf8>
 800e568:	4824      	ldr	r0, [pc, #144]	; (800e5fc <_printf_i+0x23c>)
 800e56a:	e7e4      	b.n	800e536 <_printf_i+0x176>
 800e56c:	4615      	mov	r5, r2
 800e56e:	e7bd      	b.n	800e4ec <_printf_i+0x12c>
 800e570:	682b      	ldr	r3, [r5, #0]
 800e572:	6826      	ldr	r6, [r4, #0]
 800e574:	6961      	ldr	r1, [r4, #20]
 800e576:	1d18      	adds	r0, r3, #4
 800e578:	6028      	str	r0, [r5, #0]
 800e57a:	0635      	lsls	r5, r6, #24
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	d501      	bpl.n	800e584 <_printf_i+0x1c4>
 800e580:	6019      	str	r1, [r3, #0]
 800e582:	e002      	b.n	800e58a <_printf_i+0x1ca>
 800e584:	0670      	lsls	r0, r6, #25
 800e586:	d5fb      	bpl.n	800e580 <_printf_i+0x1c0>
 800e588:	8019      	strh	r1, [r3, #0]
 800e58a:	2300      	movs	r3, #0
 800e58c:	6123      	str	r3, [r4, #16]
 800e58e:	4615      	mov	r5, r2
 800e590:	e7bc      	b.n	800e50c <_printf_i+0x14c>
 800e592:	682b      	ldr	r3, [r5, #0]
 800e594:	1d1a      	adds	r2, r3, #4
 800e596:	602a      	str	r2, [r5, #0]
 800e598:	681d      	ldr	r5, [r3, #0]
 800e59a:	6862      	ldr	r2, [r4, #4]
 800e59c:	2100      	movs	r1, #0
 800e59e:	4628      	mov	r0, r5
 800e5a0:	f7f1 fe2e 	bl	8000200 <memchr>
 800e5a4:	b108      	cbz	r0, 800e5aa <_printf_i+0x1ea>
 800e5a6:	1b40      	subs	r0, r0, r5
 800e5a8:	6060      	str	r0, [r4, #4]
 800e5aa:	6863      	ldr	r3, [r4, #4]
 800e5ac:	6123      	str	r3, [r4, #16]
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5b4:	e7aa      	b.n	800e50c <_printf_i+0x14c>
 800e5b6:	6923      	ldr	r3, [r4, #16]
 800e5b8:	462a      	mov	r2, r5
 800e5ba:	4649      	mov	r1, r9
 800e5bc:	4640      	mov	r0, r8
 800e5be:	47d0      	blx	sl
 800e5c0:	3001      	adds	r0, #1
 800e5c2:	d0ad      	beq.n	800e520 <_printf_i+0x160>
 800e5c4:	6823      	ldr	r3, [r4, #0]
 800e5c6:	079b      	lsls	r3, r3, #30
 800e5c8:	d413      	bmi.n	800e5f2 <_printf_i+0x232>
 800e5ca:	68e0      	ldr	r0, [r4, #12]
 800e5cc:	9b03      	ldr	r3, [sp, #12]
 800e5ce:	4298      	cmp	r0, r3
 800e5d0:	bfb8      	it	lt
 800e5d2:	4618      	movlt	r0, r3
 800e5d4:	e7a6      	b.n	800e524 <_printf_i+0x164>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	4632      	mov	r2, r6
 800e5da:	4649      	mov	r1, r9
 800e5dc:	4640      	mov	r0, r8
 800e5de:	47d0      	blx	sl
 800e5e0:	3001      	adds	r0, #1
 800e5e2:	d09d      	beq.n	800e520 <_printf_i+0x160>
 800e5e4:	3501      	adds	r5, #1
 800e5e6:	68e3      	ldr	r3, [r4, #12]
 800e5e8:	9903      	ldr	r1, [sp, #12]
 800e5ea:	1a5b      	subs	r3, r3, r1
 800e5ec:	42ab      	cmp	r3, r5
 800e5ee:	dcf2      	bgt.n	800e5d6 <_printf_i+0x216>
 800e5f0:	e7eb      	b.n	800e5ca <_printf_i+0x20a>
 800e5f2:	2500      	movs	r5, #0
 800e5f4:	f104 0619 	add.w	r6, r4, #25
 800e5f8:	e7f5      	b.n	800e5e6 <_printf_i+0x226>
 800e5fa:	bf00      	nop
 800e5fc:	0800f5b5 	.word	0x0800f5b5
 800e600:	0800f5c6 	.word	0x0800f5c6

0800e604 <__sflush_r>:
 800e604:	898a      	ldrh	r2, [r1, #12]
 800e606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e60a:	4605      	mov	r5, r0
 800e60c:	0710      	lsls	r0, r2, #28
 800e60e:	460c      	mov	r4, r1
 800e610:	d458      	bmi.n	800e6c4 <__sflush_r+0xc0>
 800e612:	684b      	ldr	r3, [r1, #4]
 800e614:	2b00      	cmp	r3, #0
 800e616:	dc05      	bgt.n	800e624 <__sflush_r+0x20>
 800e618:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	dc02      	bgt.n	800e624 <__sflush_r+0x20>
 800e61e:	2000      	movs	r0, #0
 800e620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e626:	2e00      	cmp	r6, #0
 800e628:	d0f9      	beq.n	800e61e <__sflush_r+0x1a>
 800e62a:	2300      	movs	r3, #0
 800e62c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e630:	682f      	ldr	r7, [r5, #0]
 800e632:	6a21      	ldr	r1, [r4, #32]
 800e634:	602b      	str	r3, [r5, #0]
 800e636:	d032      	beq.n	800e69e <__sflush_r+0x9a>
 800e638:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e63a:	89a3      	ldrh	r3, [r4, #12]
 800e63c:	075a      	lsls	r2, r3, #29
 800e63e:	d505      	bpl.n	800e64c <__sflush_r+0x48>
 800e640:	6863      	ldr	r3, [r4, #4]
 800e642:	1ac0      	subs	r0, r0, r3
 800e644:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e646:	b10b      	cbz	r3, 800e64c <__sflush_r+0x48>
 800e648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e64a:	1ac0      	subs	r0, r0, r3
 800e64c:	2300      	movs	r3, #0
 800e64e:	4602      	mov	r2, r0
 800e650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e652:	6a21      	ldr	r1, [r4, #32]
 800e654:	4628      	mov	r0, r5
 800e656:	47b0      	blx	r6
 800e658:	1c43      	adds	r3, r0, #1
 800e65a:	89a3      	ldrh	r3, [r4, #12]
 800e65c:	d106      	bne.n	800e66c <__sflush_r+0x68>
 800e65e:	6829      	ldr	r1, [r5, #0]
 800e660:	291d      	cmp	r1, #29
 800e662:	d82b      	bhi.n	800e6bc <__sflush_r+0xb8>
 800e664:	4a29      	ldr	r2, [pc, #164]	; (800e70c <__sflush_r+0x108>)
 800e666:	410a      	asrs	r2, r1
 800e668:	07d6      	lsls	r6, r2, #31
 800e66a:	d427      	bmi.n	800e6bc <__sflush_r+0xb8>
 800e66c:	2200      	movs	r2, #0
 800e66e:	6062      	str	r2, [r4, #4]
 800e670:	04d9      	lsls	r1, r3, #19
 800e672:	6922      	ldr	r2, [r4, #16]
 800e674:	6022      	str	r2, [r4, #0]
 800e676:	d504      	bpl.n	800e682 <__sflush_r+0x7e>
 800e678:	1c42      	adds	r2, r0, #1
 800e67a:	d101      	bne.n	800e680 <__sflush_r+0x7c>
 800e67c:	682b      	ldr	r3, [r5, #0]
 800e67e:	b903      	cbnz	r3, 800e682 <__sflush_r+0x7e>
 800e680:	6560      	str	r0, [r4, #84]	; 0x54
 800e682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e684:	602f      	str	r7, [r5, #0]
 800e686:	2900      	cmp	r1, #0
 800e688:	d0c9      	beq.n	800e61e <__sflush_r+0x1a>
 800e68a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e68e:	4299      	cmp	r1, r3
 800e690:	d002      	beq.n	800e698 <__sflush_r+0x94>
 800e692:	4628      	mov	r0, r5
 800e694:	f7fe fbb2 	bl	800cdfc <_free_r>
 800e698:	2000      	movs	r0, #0
 800e69a:	6360      	str	r0, [r4, #52]	; 0x34
 800e69c:	e7c0      	b.n	800e620 <__sflush_r+0x1c>
 800e69e:	2301      	movs	r3, #1
 800e6a0:	4628      	mov	r0, r5
 800e6a2:	47b0      	blx	r6
 800e6a4:	1c41      	adds	r1, r0, #1
 800e6a6:	d1c8      	bne.n	800e63a <__sflush_r+0x36>
 800e6a8:	682b      	ldr	r3, [r5, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d0c5      	beq.n	800e63a <__sflush_r+0x36>
 800e6ae:	2b1d      	cmp	r3, #29
 800e6b0:	d001      	beq.n	800e6b6 <__sflush_r+0xb2>
 800e6b2:	2b16      	cmp	r3, #22
 800e6b4:	d101      	bne.n	800e6ba <__sflush_r+0xb6>
 800e6b6:	602f      	str	r7, [r5, #0]
 800e6b8:	e7b1      	b.n	800e61e <__sflush_r+0x1a>
 800e6ba:	89a3      	ldrh	r3, [r4, #12]
 800e6bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6c0:	81a3      	strh	r3, [r4, #12]
 800e6c2:	e7ad      	b.n	800e620 <__sflush_r+0x1c>
 800e6c4:	690f      	ldr	r7, [r1, #16]
 800e6c6:	2f00      	cmp	r7, #0
 800e6c8:	d0a9      	beq.n	800e61e <__sflush_r+0x1a>
 800e6ca:	0793      	lsls	r3, r2, #30
 800e6cc:	680e      	ldr	r6, [r1, #0]
 800e6ce:	bf08      	it	eq
 800e6d0:	694b      	ldreq	r3, [r1, #20]
 800e6d2:	600f      	str	r7, [r1, #0]
 800e6d4:	bf18      	it	ne
 800e6d6:	2300      	movne	r3, #0
 800e6d8:	eba6 0807 	sub.w	r8, r6, r7
 800e6dc:	608b      	str	r3, [r1, #8]
 800e6de:	f1b8 0f00 	cmp.w	r8, #0
 800e6e2:	dd9c      	ble.n	800e61e <__sflush_r+0x1a>
 800e6e4:	6a21      	ldr	r1, [r4, #32]
 800e6e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e6e8:	4643      	mov	r3, r8
 800e6ea:	463a      	mov	r2, r7
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	47b0      	blx	r6
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	dc06      	bgt.n	800e702 <__sflush_r+0xfe>
 800e6f4:	89a3      	ldrh	r3, [r4, #12]
 800e6f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6fa:	81a3      	strh	r3, [r4, #12]
 800e6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e700:	e78e      	b.n	800e620 <__sflush_r+0x1c>
 800e702:	4407      	add	r7, r0
 800e704:	eba8 0800 	sub.w	r8, r8, r0
 800e708:	e7e9      	b.n	800e6de <__sflush_r+0xda>
 800e70a:	bf00      	nop
 800e70c:	dfbffffe 	.word	0xdfbffffe

0800e710 <_fflush_r>:
 800e710:	b538      	push	{r3, r4, r5, lr}
 800e712:	690b      	ldr	r3, [r1, #16]
 800e714:	4605      	mov	r5, r0
 800e716:	460c      	mov	r4, r1
 800e718:	b913      	cbnz	r3, 800e720 <_fflush_r+0x10>
 800e71a:	2500      	movs	r5, #0
 800e71c:	4628      	mov	r0, r5
 800e71e:	bd38      	pop	{r3, r4, r5, pc}
 800e720:	b118      	cbz	r0, 800e72a <_fflush_r+0x1a>
 800e722:	6a03      	ldr	r3, [r0, #32]
 800e724:	b90b      	cbnz	r3, 800e72a <_fflush_r+0x1a>
 800e726:	f7fe f9d9 	bl	800cadc <__sinit>
 800e72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d0f3      	beq.n	800e71a <_fflush_r+0xa>
 800e732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e734:	07d0      	lsls	r0, r2, #31
 800e736:	d404      	bmi.n	800e742 <_fflush_r+0x32>
 800e738:	0599      	lsls	r1, r3, #22
 800e73a:	d402      	bmi.n	800e742 <_fflush_r+0x32>
 800e73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e73e:	f7fe fb36 	bl	800cdae <__retarget_lock_acquire_recursive>
 800e742:	4628      	mov	r0, r5
 800e744:	4621      	mov	r1, r4
 800e746:	f7ff ff5d 	bl	800e604 <__sflush_r>
 800e74a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e74c:	07da      	lsls	r2, r3, #31
 800e74e:	4605      	mov	r5, r0
 800e750:	d4e4      	bmi.n	800e71c <_fflush_r+0xc>
 800e752:	89a3      	ldrh	r3, [r4, #12]
 800e754:	059b      	lsls	r3, r3, #22
 800e756:	d4e1      	bmi.n	800e71c <_fflush_r+0xc>
 800e758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e75a:	f7fe fb29 	bl	800cdb0 <__retarget_lock_release_recursive>
 800e75e:	e7dd      	b.n	800e71c <_fflush_r+0xc>

0800e760 <memmove>:
 800e760:	4288      	cmp	r0, r1
 800e762:	b510      	push	{r4, lr}
 800e764:	eb01 0402 	add.w	r4, r1, r2
 800e768:	d902      	bls.n	800e770 <memmove+0x10>
 800e76a:	4284      	cmp	r4, r0
 800e76c:	4623      	mov	r3, r4
 800e76e:	d807      	bhi.n	800e780 <memmove+0x20>
 800e770:	1e43      	subs	r3, r0, #1
 800e772:	42a1      	cmp	r1, r4
 800e774:	d008      	beq.n	800e788 <memmove+0x28>
 800e776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e77a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e77e:	e7f8      	b.n	800e772 <memmove+0x12>
 800e780:	4402      	add	r2, r0
 800e782:	4601      	mov	r1, r0
 800e784:	428a      	cmp	r2, r1
 800e786:	d100      	bne.n	800e78a <memmove+0x2a>
 800e788:	bd10      	pop	{r4, pc}
 800e78a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e78e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e792:	e7f7      	b.n	800e784 <memmove+0x24>

0800e794 <_sbrk_r>:
 800e794:	b538      	push	{r3, r4, r5, lr}
 800e796:	4d06      	ldr	r5, [pc, #24]	; (800e7b0 <_sbrk_r+0x1c>)
 800e798:	2300      	movs	r3, #0
 800e79a:	4604      	mov	r4, r0
 800e79c:	4608      	mov	r0, r1
 800e79e:	602b      	str	r3, [r5, #0]
 800e7a0:	f7f2 ff5c 	bl	800165c <_sbrk>
 800e7a4:	1c43      	adds	r3, r0, #1
 800e7a6:	d102      	bne.n	800e7ae <_sbrk_r+0x1a>
 800e7a8:	682b      	ldr	r3, [r5, #0]
 800e7aa:	b103      	cbz	r3, 800e7ae <_sbrk_r+0x1a>
 800e7ac:	6023      	str	r3, [r4, #0]
 800e7ae:	bd38      	pop	{r3, r4, r5, pc}
 800e7b0:	200027f4 	.word	0x200027f4

0800e7b4 <__assert_func>:
 800e7b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7b6:	4614      	mov	r4, r2
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	4b09      	ldr	r3, [pc, #36]	; (800e7e0 <__assert_func+0x2c>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	4605      	mov	r5, r0
 800e7c0:	68d8      	ldr	r0, [r3, #12]
 800e7c2:	b14c      	cbz	r4, 800e7d8 <__assert_func+0x24>
 800e7c4:	4b07      	ldr	r3, [pc, #28]	; (800e7e4 <__assert_func+0x30>)
 800e7c6:	9100      	str	r1, [sp, #0]
 800e7c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7cc:	4906      	ldr	r1, [pc, #24]	; (800e7e8 <__assert_func+0x34>)
 800e7ce:	462b      	mov	r3, r5
 800e7d0:	f000 f85c 	bl	800e88c <fiprintf>
 800e7d4:	f000 f86c 	bl	800e8b0 <abort>
 800e7d8:	4b04      	ldr	r3, [pc, #16]	; (800e7ec <__assert_func+0x38>)
 800e7da:	461c      	mov	r4, r3
 800e7dc:	e7f3      	b.n	800e7c6 <__assert_func+0x12>
 800e7de:	bf00      	nop
 800e7e0:	200002d4 	.word	0x200002d4
 800e7e4:	0800f5d7 	.word	0x0800f5d7
 800e7e8:	0800f5e4 	.word	0x0800f5e4
 800e7ec:	0800f612 	.word	0x0800f612

0800e7f0 <_calloc_r>:
 800e7f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7f2:	fba1 2402 	umull	r2, r4, r1, r2
 800e7f6:	b94c      	cbnz	r4, 800e80c <_calloc_r+0x1c>
 800e7f8:	4611      	mov	r1, r2
 800e7fa:	9201      	str	r2, [sp, #4]
 800e7fc:	f7fe fec2 	bl	800d584 <_malloc_r>
 800e800:	9a01      	ldr	r2, [sp, #4]
 800e802:	4605      	mov	r5, r0
 800e804:	b930      	cbnz	r0, 800e814 <_calloc_r+0x24>
 800e806:	4628      	mov	r0, r5
 800e808:	b003      	add	sp, #12
 800e80a:	bd30      	pop	{r4, r5, pc}
 800e80c:	220c      	movs	r2, #12
 800e80e:	6002      	str	r2, [r0, #0]
 800e810:	2500      	movs	r5, #0
 800e812:	e7f8      	b.n	800e806 <_calloc_r+0x16>
 800e814:	4621      	mov	r1, r4
 800e816:	f7fe fa13 	bl	800cc40 <memset>
 800e81a:	e7f4      	b.n	800e806 <_calloc_r+0x16>

0800e81c <malloc>:
 800e81c:	4b02      	ldr	r3, [pc, #8]	; (800e828 <malloc+0xc>)
 800e81e:	4601      	mov	r1, r0
 800e820:	6818      	ldr	r0, [r3, #0]
 800e822:	f7fe beaf 	b.w	800d584 <_malloc_r>
 800e826:	bf00      	nop
 800e828:	200002d4 	.word	0x200002d4

0800e82c <_realloc_r>:
 800e82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e830:	4680      	mov	r8, r0
 800e832:	4614      	mov	r4, r2
 800e834:	460e      	mov	r6, r1
 800e836:	b921      	cbnz	r1, 800e842 <_realloc_r+0x16>
 800e838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e83c:	4611      	mov	r1, r2
 800e83e:	f7fe bea1 	b.w	800d584 <_malloc_r>
 800e842:	b92a      	cbnz	r2, 800e850 <_realloc_r+0x24>
 800e844:	f7fe fada 	bl	800cdfc <_free_r>
 800e848:	4625      	mov	r5, r4
 800e84a:	4628      	mov	r0, r5
 800e84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e850:	f000 f835 	bl	800e8be <_malloc_usable_size_r>
 800e854:	4284      	cmp	r4, r0
 800e856:	4607      	mov	r7, r0
 800e858:	d802      	bhi.n	800e860 <_realloc_r+0x34>
 800e85a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e85e:	d812      	bhi.n	800e886 <_realloc_r+0x5a>
 800e860:	4621      	mov	r1, r4
 800e862:	4640      	mov	r0, r8
 800e864:	f7fe fe8e 	bl	800d584 <_malloc_r>
 800e868:	4605      	mov	r5, r0
 800e86a:	2800      	cmp	r0, #0
 800e86c:	d0ed      	beq.n	800e84a <_realloc_r+0x1e>
 800e86e:	42bc      	cmp	r4, r7
 800e870:	4622      	mov	r2, r4
 800e872:	4631      	mov	r1, r6
 800e874:	bf28      	it	cs
 800e876:	463a      	movcs	r2, r7
 800e878:	f7fe faa3 	bl	800cdc2 <memcpy>
 800e87c:	4631      	mov	r1, r6
 800e87e:	4640      	mov	r0, r8
 800e880:	f7fe fabc 	bl	800cdfc <_free_r>
 800e884:	e7e1      	b.n	800e84a <_realloc_r+0x1e>
 800e886:	4635      	mov	r5, r6
 800e888:	e7df      	b.n	800e84a <_realloc_r+0x1e>
	...

0800e88c <fiprintf>:
 800e88c:	b40e      	push	{r1, r2, r3}
 800e88e:	b503      	push	{r0, r1, lr}
 800e890:	4601      	mov	r1, r0
 800e892:	ab03      	add	r3, sp, #12
 800e894:	4805      	ldr	r0, [pc, #20]	; (800e8ac <fiprintf+0x20>)
 800e896:	f853 2b04 	ldr.w	r2, [r3], #4
 800e89a:	6800      	ldr	r0, [r0, #0]
 800e89c:	9301      	str	r3, [sp, #4]
 800e89e:	f000 f83f 	bl	800e920 <_vfiprintf_r>
 800e8a2:	b002      	add	sp, #8
 800e8a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8a8:	b003      	add	sp, #12
 800e8aa:	4770      	bx	lr
 800e8ac:	200002d4 	.word	0x200002d4

0800e8b0 <abort>:
 800e8b0:	b508      	push	{r3, lr}
 800e8b2:	2006      	movs	r0, #6
 800e8b4:	f000 fa0c 	bl	800ecd0 <raise>
 800e8b8:	2001      	movs	r0, #1
 800e8ba:	f7f2 fe57 	bl	800156c <_exit>

0800e8be <_malloc_usable_size_r>:
 800e8be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8c2:	1f18      	subs	r0, r3, #4
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	bfbc      	itt	lt
 800e8c8:	580b      	ldrlt	r3, [r1, r0]
 800e8ca:	18c0      	addlt	r0, r0, r3
 800e8cc:	4770      	bx	lr

0800e8ce <__sfputc_r>:
 800e8ce:	6893      	ldr	r3, [r2, #8]
 800e8d0:	3b01      	subs	r3, #1
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	b410      	push	{r4}
 800e8d6:	6093      	str	r3, [r2, #8]
 800e8d8:	da08      	bge.n	800e8ec <__sfputc_r+0x1e>
 800e8da:	6994      	ldr	r4, [r2, #24]
 800e8dc:	42a3      	cmp	r3, r4
 800e8de:	db01      	blt.n	800e8e4 <__sfputc_r+0x16>
 800e8e0:	290a      	cmp	r1, #10
 800e8e2:	d103      	bne.n	800e8ec <__sfputc_r+0x1e>
 800e8e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8e8:	f000 b934 	b.w	800eb54 <__swbuf_r>
 800e8ec:	6813      	ldr	r3, [r2, #0]
 800e8ee:	1c58      	adds	r0, r3, #1
 800e8f0:	6010      	str	r0, [r2, #0]
 800e8f2:	7019      	strb	r1, [r3, #0]
 800e8f4:	4608      	mov	r0, r1
 800e8f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <__sfputs_r>:
 800e8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8fe:	4606      	mov	r6, r0
 800e900:	460f      	mov	r7, r1
 800e902:	4614      	mov	r4, r2
 800e904:	18d5      	adds	r5, r2, r3
 800e906:	42ac      	cmp	r4, r5
 800e908:	d101      	bne.n	800e90e <__sfputs_r+0x12>
 800e90a:	2000      	movs	r0, #0
 800e90c:	e007      	b.n	800e91e <__sfputs_r+0x22>
 800e90e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e912:	463a      	mov	r2, r7
 800e914:	4630      	mov	r0, r6
 800e916:	f7ff ffda 	bl	800e8ce <__sfputc_r>
 800e91a:	1c43      	adds	r3, r0, #1
 800e91c:	d1f3      	bne.n	800e906 <__sfputs_r+0xa>
 800e91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e920 <_vfiprintf_r>:
 800e920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e924:	460d      	mov	r5, r1
 800e926:	b09d      	sub	sp, #116	; 0x74
 800e928:	4614      	mov	r4, r2
 800e92a:	4698      	mov	r8, r3
 800e92c:	4606      	mov	r6, r0
 800e92e:	b118      	cbz	r0, 800e938 <_vfiprintf_r+0x18>
 800e930:	6a03      	ldr	r3, [r0, #32]
 800e932:	b90b      	cbnz	r3, 800e938 <_vfiprintf_r+0x18>
 800e934:	f7fe f8d2 	bl	800cadc <__sinit>
 800e938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e93a:	07d9      	lsls	r1, r3, #31
 800e93c:	d405      	bmi.n	800e94a <_vfiprintf_r+0x2a>
 800e93e:	89ab      	ldrh	r3, [r5, #12]
 800e940:	059a      	lsls	r2, r3, #22
 800e942:	d402      	bmi.n	800e94a <_vfiprintf_r+0x2a>
 800e944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e946:	f7fe fa32 	bl	800cdae <__retarget_lock_acquire_recursive>
 800e94a:	89ab      	ldrh	r3, [r5, #12]
 800e94c:	071b      	lsls	r3, r3, #28
 800e94e:	d501      	bpl.n	800e954 <_vfiprintf_r+0x34>
 800e950:	692b      	ldr	r3, [r5, #16]
 800e952:	b99b      	cbnz	r3, 800e97c <_vfiprintf_r+0x5c>
 800e954:	4629      	mov	r1, r5
 800e956:	4630      	mov	r0, r6
 800e958:	f000 f93a 	bl	800ebd0 <__swsetup_r>
 800e95c:	b170      	cbz	r0, 800e97c <_vfiprintf_r+0x5c>
 800e95e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e960:	07dc      	lsls	r4, r3, #31
 800e962:	d504      	bpl.n	800e96e <_vfiprintf_r+0x4e>
 800e964:	f04f 30ff 	mov.w	r0, #4294967295
 800e968:	b01d      	add	sp, #116	; 0x74
 800e96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e96e:	89ab      	ldrh	r3, [r5, #12]
 800e970:	0598      	lsls	r0, r3, #22
 800e972:	d4f7      	bmi.n	800e964 <_vfiprintf_r+0x44>
 800e974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e976:	f7fe fa1b 	bl	800cdb0 <__retarget_lock_release_recursive>
 800e97a:	e7f3      	b.n	800e964 <_vfiprintf_r+0x44>
 800e97c:	2300      	movs	r3, #0
 800e97e:	9309      	str	r3, [sp, #36]	; 0x24
 800e980:	2320      	movs	r3, #32
 800e982:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e986:	f8cd 800c 	str.w	r8, [sp, #12]
 800e98a:	2330      	movs	r3, #48	; 0x30
 800e98c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800eb40 <_vfiprintf_r+0x220>
 800e990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e994:	f04f 0901 	mov.w	r9, #1
 800e998:	4623      	mov	r3, r4
 800e99a:	469a      	mov	sl, r3
 800e99c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9a0:	b10a      	cbz	r2, 800e9a6 <_vfiprintf_r+0x86>
 800e9a2:	2a25      	cmp	r2, #37	; 0x25
 800e9a4:	d1f9      	bne.n	800e99a <_vfiprintf_r+0x7a>
 800e9a6:	ebba 0b04 	subs.w	fp, sl, r4
 800e9aa:	d00b      	beq.n	800e9c4 <_vfiprintf_r+0xa4>
 800e9ac:	465b      	mov	r3, fp
 800e9ae:	4622      	mov	r2, r4
 800e9b0:	4629      	mov	r1, r5
 800e9b2:	4630      	mov	r0, r6
 800e9b4:	f7ff ffa2 	bl	800e8fc <__sfputs_r>
 800e9b8:	3001      	adds	r0, #1
 800e9ba:	f000 80a9 	beq.w	800eb10 <_vfiprintf_r+0x1f0>
 800e9be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9c0:	445a      	add	r2, fp
 800e9c2:	9209      	str	r2, [sp, #36]	; 0x24
 800e9c4:	f89a 3000 	ldrb.w	r3, [sl]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f000 80a1 	beq.w	800eb10 <_vfiprintf_r+0x1f0>
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e9d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9d8:	f10a 0a01 	add.w	sl, sl, #1
 800e9dc:	9304      	str	r3, [sp, #16]
 800e9de:	9307      	str	r3, [sp, #28]
 800e9e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9e4:	931a      	str	r3, [sp, #104]	; 0x68
 800e9e6:	4654      	mov	r4, sl
 800e9e8:	2205      	movs	r2, #5
 800e9ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9ee:	4854      	ldr	r0, [pc, #336]	; (800eb40 <_vfiprintf_r+0x220>)
 800e9f0:	f7f1 fc06 	bl	8000200 <memchr>
 800e9f4:	9a04      	ldr	r2, [sp, #16]
 800e9f6:	b9d8      	cbnz	r0, 800ea30 <_vfiprintf_r+0x110>
 800e9f8:	06d1      	lsls	r1, r2, #27
 800e9fa:	bf44      	itt	mi
 800e9fc:	2320      	movmi	r3, #32
 800e9fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea02:	0713      	lsls	r3, r2, #28
 800ea04:	bf44      	itt	mi
 800ea06:	232b      	movmi	r3, #43	; 0x2b
 800ea08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ea10:	2b2a      	cmp	r3, #42	; 0x2a
 800ea12:	d015      	beq.n	800ea40 <_vfiprintf_r+0x120>
 800ea14:	9a07      	ldr	r2, [sp, #28]
 800ea16:	4654      	mov	r4, sl
 800ea18:	2000      	movs	r0, #0
 800ea1a:	f04f 0c0a 	mov.w	ip, #10
 800ea1e:	4621      	mov	r1, r4
 800ea20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea24:	3b30      	subs	r3, #48	; 0x30
 800ea26:	2b09      	cmp	r3, #9
 800ea28:	d94d      	bls.n	800eac6 <_vfiprintf_r+0x1a6>
 800ea2a:	b1b0      	cbz	r0, 800ea5a <_vfiprintf_r+0x13a>
 800ea2c:	9207      	str	r2, [sp, #28]
 800ea2e:	e014      	b.n	800ea5a <_vfiprintf_r+0x13a>
 800ea30:	eba0 0308 	sub.w	r3, r0, r8
 800ea34:	fa09 f303 	lsl.w	r3, r9, r3
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	9304      	str	r3, [sp, #16]
 800ea3c:	46a2      	mov	sl, r4
 800ea3e:	e7d2      	b.n	800e9e6 <_vfiprintf_r+0xc6>
 800ea40:	9b03      	ldr	r3, [sp, #12]
 800ea42:	1d19      	adds	r1, r3, #4
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	9103      	str	r1, [sp, #12]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	bfbb      	ittet	lt
 800ea4c:	425b      	neglt	r3, r3
 800ea4e:	f042 0202 	orrlt.w	r2, r2, #2
 800ea52:	9307      	strge	r3, [sp, #28]
 800ea54:	9307      	strlt	r3, [sp, #28]
 800ea56:	bfb8      	it	lt
 800ea58:	9204      	strlt	r2, [sp, #16]
 800ea5a:	7823      	ldrb	r3, [r4, #0]
 800ea5c:	2b2e      	cmp	r3, #46	; 0x2e
 800ea5e:	d10c      	bne.n	800ea7a <_vfiprintf_r+0x15a>
 800ea60:	7863      	ldrb	r3, [r4, #1]
 800ea62:	2b2a      	cmp	r3, #42	; 0x2a
 800ea64:	d134      	bne.n	800ead0 <_vfiprintf_r+0x1b0>
 800ea66:	9b03      	ldr	r3, [sp, #12]
 800ea68:	1d1a      	adds	r2, r3, #4
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	9203      	str	r2, [sp, #12]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	bfb8      	it	lt
 800ea72:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea76:	3402      	adds	r4, #2
 800ea78:	9305      	str	r3, [sp, #20]
 800ea7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800eb50 <_vfiprintf_r+0x230>
 800ea7e:	7821      	ldrb	r1, [r4, #0]
 800ea80:	2203      	movs	r2, #3
 800ea82:	4650      	mov	r0, sl
 800ea84:	f7f1 fbbc 	bl	8000200 <memchr>
 800ea88:	b138      	cbz	r0, 800ea9a <_vfiprintf_r+0x17a>
 800ea8a:	9b04      	ldr	r3, [sp, #16]
 800ea8c:	eba0 000a 	sub.w	r0, r0, sl
 800ea90:	2240      	movs	r2, #64	; 0x40
 800ea92:	4082      	lsls	r2, r0
 800ea94:	4313      	orrs	r3, r2
 800ea96:	3401      	adds	r4, #1
 800ea98:	9304      	str	r3, [sp, #16]
 800ea9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea9e:	4829      	ldr	r0, [pc, #164]	; (800eb44 <_vfiprintf_r+0x224>)
 800eaa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eaa4:	2206      	movs	r2, #6
 800eaa6:	f7f1 fbab 	bl	8000200 <memchr>
 800eaaa:	2800      	cmp	r0, #0
 800eaac:	d03f      	beq.n	800eb2e <_vfiprintf_r+0x20e>
 800eaae:	4b26      	ldr	r3, [pc, #152]	; (800eb48 <_vfiprintf_r+0x228>)
 800eab0:	bb1b      	cbnz	r3, 800eafa <_vfiprintf_r+0x1da>
 800eab2:	9b03      	ldr	r3, [sp, #12]
 800eab4:	3307      	adds	r3, #7
 800eab6:	f023 0307 	bic.w	r3, r3, #7
 800eaba:	3308      	adds	r3, #8
 800eabc:	9303      	str	r3, [sp, #12]
 800eabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eac0:	443b      	add	r3, r7
 800eac2:	9309      	str	r3, [sp, #36]	; 0x24
 800eac4:	e768      	b.n	800e998 <_vfiprintf_r+0x78>
 800eac6:	fb0c 3202 	mla	r2, ip, r2, r3
 800eaca:	460c      	mov	r4, r1
 800eacc:	2001      	movs	r0, #1
 800eace:	e7a6      	b.n	800ea1e <_vfiprintf_r+0xfe>
 800ead0:	2300      	movs	r3, #0
 800ead2:	3401      	adds	r4, #1
 800ead4:	9305      	str	r3, [sp, #20]
 800ead6:	4619      	mov	r1, r3
 800ead8:	f04f 0c0a 	mov.w	ip, #10
 800eadc:	4620      	mov	r0, r4
 800eade:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eae2:	3a30      	subs	r2, #48	; 0x30
 800eae4:	2a09      	cmp	r2, #9
 800eae6:	d903      	bls.n	800eaf0 <_vfiprintf_r+0x1d0>
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d0c6      	beq.n	800ea7a <_vfiprintf_r+0x15a>
 800eaec:	9105      	str	r1, [sp, #20]
 800eaee:	e7c4      	b.n	800ea7a <_vfiprintf_r+0x15a>
 800eaf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaf4:	4604      	mov	r4, r0
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	e7f0      	b.n	800eadc <_vfiprintf_r+0x1bc>
 800eafa:	ab03      	add	r3, sp, #12
 800eafc:	9300      	str	r3, [sp, #0]
 800eafe:	462a      	mov	r2, r5
 800eb00:	4b12      	ldr	r3, [pc, #72]	; (800eb4c <_vfiprintf_r+0x22c>)
 800eb02:	a904      	add	r1, sp, #16
 800eb04:	4630      	mov	r0, r6
 800eb06:	f3af 8000 	nop.w
 800eb0a:	4607      	mov	r7, r0
 800eb0c:	1c78      	adds	r0, r7, #1
 800eb0e:	d1d6      	bne.n	800eabe <_vfiprintf_r+0x19e>
 800eb10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb12:	07d9      	lsls	r1, r3, #31
 800eb14:	d405      	bmi.n	800eb22 <_vfiprintf_r+0x202>
 800eb16:	89ab      	ldrh	r3, [r5, #12]
 800eb18:	059a      	lsls	r2, r3, #22
 800eb1a:	d402      	bmi.n	800eb22 <_vfiprintf_r+0x202>
 800eb1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb1e:	f7fe f947 	bl	800cdb0 <__retarget_lock_release_recursive>
 800eb22:	89ab      	ldrh	r3, [r5, #12]
 800eb24:	065b      	lsls	r3, r3, #25
 800eb26:	f53f af1d 	bmi.w	800e964 <_vfiprintf_r+0x44>
 800eb2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb2c:	e71c      	b.n	800e968 <_vfiprintf_r+0x48>
 800eb2e:	ab03      	add	r3, sp, #12
 800eb30:	9300      	str	r3, [sp, #0]
 800eb32:	462a      	mov	r2, r5
 800eb34:	4b05      	ldr	r3, [pc, #20]	; (800eb4c <_vfiprintf_r+0x22c>)
 800eb36:	a904      	add	r1, sp, #16
 800eb38:	4630      	mov	r0, r6
 800eb3a:	f7ff fc41 	bl	800e3c0 <_printf_i>
 800eb3e:	e7e4      	b.n	800eb0a <_vfiprintf_r+0x1ea>
 800eb40:	0800f5a4 	.word	0x0800f5a4
 800eb44:	0800f5ae 	.word	0x0800f5ae
 800eb48:	00000000 	.word	0x00000000
 800eb4c:	0800e8fd 	.word	0x0800e8fd
 800eb50:	0800f5aa 	.word	0x0800f5aa

0800eb54 <__swbuf_r>:
 800eb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb56:	460e      	mov	r6, r1
 800eb58:	4614      	mov	r4, r2
 800eb5a:	4605      	mov	r5, r0
 800eb5c:	b118      	cbz	r0, 800eb66 <__swbuf_r+0x12>
 800eb5e:	6a03      	ldr	r3, [r0, #32]
 800eb60:	b90b      	cbnz	r3, 800eb66 <__swbuf_r+0x12>
 800eb62:	f7fd ffbb 	bl	800cadc <__sinit>
 800eb66:	69a3      	ldr	r3, [r4, #24]
 800eb68:	60a3      	str	r3, [r4, #8]
 800eb6a:	89a3      	ldrh	r3, [r4, #12]
 800eb6c:	071a      	lsls	r2, r3, #28
 800eb6e:	d525      	bpl.n	800ebbc <__swbuf_r+0x68>
 800eb70:	6923      	ldr	r3, [r4, #16]
 800eb72:	b31b      	cbz	r3, 800ebbc <__swbuf_r+0x68>
 800eb74:	6823      	ldr	r3, [r4, #0]
 800eb76:	6922      	ldr	r2, [r4, #16]
 800eb78:	1a98      	subs	r0, r3, r2
 800eb7a:	6963      	ldr	r3, [r4, #20]
 800eb7c:	b2f6      	uxtb	r6, r6
 800eb7e:	4283      	cmp	r3, r0
 800eb80:	4637      	mov	r7, r6
 800eb82:	dc04      	bgt.n	800eb8e <__swbuf_r+0x3a>
 800eb84:	4621      	mov	r1, r4
 800eb86:	4628      	mov	r0, r5
 800eb88:	f7ff fdc2 	bl	800e710 <_fflush_r>
 800eb8c:	b9e0      	cbnz	r0, 800ebc8 <__swbuf_r+0x74>
 800eb8e:	68a3      	ldr	r3, [r4, #8]
 800eb90:	3b01      	subs	r3, #1
 800eb92:	60a3      	str	r3, [r4, #8]
 800eb94:	6823      	ldr	r3, [r4, #0]
 800eb96:	1c5a      	adds	r2, r3, #1
 800eb98:	6022      	str	r2, [r4, #0]
 800eb9a:	701e      	strb	r6, [r3, #0]
 800eb9c:	6962      	ldr	r2, [r4, #20]
 800eb9e:	1c43      	adds	r3, r0, #1
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d004      	beq.n	800ebae <__swbuf_r+0x5a>
 800eba4:	89a3      	ldrh	r3, [r4, #12]
 800eba6:	07db      	lsls	r3, r3, #31
 800eba8:	d506      	bpl.n	800ebb8 <__swbuf_r+0x64>
 800ebaa:	2e0a      	cmp	r6, #10
 800ebac:	d104      	bne.n	800ebb8 <__swbuf_r+0x64>
 800ebae:	4621      	mov	r1, r4
 800ebb0:	4628      	mov	r0, r5
 800ebb2:	f7ff fdad 	bl	800e710 <_fflush_r>
 800ebb6:	b938      	cbnz	r0, 800ebc8 <__swbuf_r+0x74>
 800ebb8:	4638      	mov	r0, r7
 800ebba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebbc:	4621      	mov	r1, r4
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	f000 f806 	bl	800ebd0 <__swsetup_r>
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	d0d5      	beq.n	800eb74 <__swbuf_r+0x20>
 800ebc8:	f04f 37ff 	mov.w	r7, #4294967295
 800ebcc:	e7f4      	b.n	800ebb8 <__swbuf_r+0x64>
	...

0800ebd0 <__swsetup_r>:
 800ebd0:	b538      	push	{r3, r4, r5, lr}
 800ebd2:	4b2a      	ldr	r3, [pc, #168]	; (800ec7c <__swsetup_r+0xac>)
 800ebd4:	4605      	mov	r5, r0
 800ebd6:	6818      	ldr	r0, [r3, #0]
 800ebd8:	460c      	mov	r4, r1
 800ebda:	b118      	cbz	r0, 800ebe4 <__swsetup_r+0x14>
 800ebdc:	6a03      	ldr	r3, [r0, #32]
 800ebde:	b90b      	cbnz	r3, 800ebe4 <__swsetup_r+0x14>
 800ebe0:	f7fd ff7c 	bl	800cadc <__sinit>
 800ebe4:	89a3      	ldrh	r3, [r4, #12]
 800ebe6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ebea:	0718      	lsls	r0, r3, #28
 800ebec:	d422      	bmi.n	800ec34 <__swsetup_r+0x64>
 800ebee:	06d9      	lsls	r1, r3, #27
 800ebf0:	d407      	bmi.n	800ec02 <__swsetup_r+0x32>
 800ebf2:	2309      	movs	r3, #9
 800ebf4:	602b      	str	r3, [r5, #0]
 800ebf6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ebfa:	81a3      	strh	r3, [r4, #12]
 800ebfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ec00:	e034      	b.n	800ec6c <__swsetup_r+0x9c>
 800ec02:	0758      	lsls	r0, r3, #29
 800ec04:	d512      	bpl.n	800ec2c <__swsetup_r+0x5c>
 800ec06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec08:	b141      	cbz	r1, 800ec1c <__swsetup_r+0x4c>
 800ec0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec0e:	4299      	cmp	r1, r3
 800ec10:	d002      	beq.n	800ec18 <__swsetup_r+0x48>
 800ec12:	4628      	mov	r0, r5
 800ec14:	f7fe f8f2 	bl	800cdfc <_free_r>
 800ec18:	2300      	movs	r3, #0
 800ec1a:	6363      	str	r3, [r4, #52]	; 0x34
 800ec1c:	89a3      	ldrh	r3, [r4, #12]
 800ec1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ec22:	81a3      	strh	r3, [r4, #12]
 800ec24:	2300      	movs	r3, #0
 800ec26:	6063      	str	r3, [r4, #4]
 800ec28:	6923      	ldr	r3, [r4, #16]
 800ec2a:	6023      	str	r3, [r4, #0]
 800ec2c:	89a3      	ldrh	r3, [r4, #12]
 800ec2e:	f043 0308 	orr.w	r3, r3, #8
 800ec32:	81a3      	strh	r3, [r4, #12]
 800ec34:	6923      	ldr	r3, [r4, #16]
 800ec36:	b94b      	cbnz	r3, 800ec4c <__swsetup_r+0x7c>
 800ec38:	89a3      	ldrh	r3, [r4, #12]
 800ec3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec42:	d003      	beq.n	800ec4c <__swsetup_r+0x7c>
 800ec44:	4621      	mov	r1, r4
 800ec46:	4628      	mov	r0, r5
 800ec48:	f000 f884 	bl	800ed54 <__smakebuf_r>
 800ec4c:	89a0      	ldrh	r0, [r4, #12]
 800ec4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec52:	f010 0301 	ands.w	r3, r0, #1
 800ec56:	d00a      	beq.n	800ec6e <__swsetup_r+0x9e>
 800ec58:	2300      	movs	r3, #0
 800ec5a:	60a3      	str	r3, [r4, #8]
 800ec5c:	6963      	ldr	r3, [r4, #20]
 800ec5e:	425b      	negs	r3, r3
 800ec60:	61a3      	str	r3, [r4, #24]
 800ec62:	6923      	ldr	r3, [r4, #16]
 800ec64:	b943      	cbnz	r3, 800ec78 <__swsetup_r+0xa8>
 800ec66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec6a:	d1c4      	bne.n	800ebf6 <__swsetup_r+0x26>
 800ec6c:	bd38      	pop	{r3, r4, r5, pc}
 800ec6e:	0781      	lsls	r1, r0, #30
 800ec70:	bf58      	it	pl
 800ec72:	6963      	ldrpl	r3, [r4, #20]
 800ec74:	60a3      	str	r3, [r4, #8]
 800ec76:	e7f4      	b.n	800ec62 <__swsetup_r+0x92>
 800ec78:	2000      	movs	r0, #0
 800ec7a:	e7f7      	b.n	800ec6c <__swsetup_r+0x9c>
 800ec7c:	200002d4 	.word	0x200002d4

0800ec80 <_raise_r>:
 800ec80:	291f      	cmp	r1, #31
 800ec82:	b538      	push	{r3, r4, r5, lr}
 800ec84:	4604      	mov	r4, r0
 800ec86:	460d      	mov	r5, r1
 800ec88:	d904      	bls.n	800ec94 <_raise_r+0x14>
 800ec8a:	2316      	movs	r3, #22
 800ec8c:	6003      	str	r3, [r0, #0]
 800ec8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec92:	bd38      	pop	{r3, r4, r5, pc}
 800ec94:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ec96:	b112      	cbz	r2, 800ec9e <_raise_r+0x1e>
 800ec98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec9c:	b94b      	cbnz	r3, 800ecb2 <_raise_r+0x32>
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f000 f830 	bl	800ed04 <_getpid_r>
 800eca4:	462a      	mov	r2, r5
 800eca6:	4601      	mov	r1, r0
 800eca8:	4620      	mov	r0, r4
 800ecaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecae:	f000 b817 	b.w	800ece0 <_kill_r>
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d00a      	beq.n	800eccc <_raise_r+0x4c>
 800ecb6:	1c59      	adds	r1, r3, #1
 800ecb8:	d103      	bne.n	800ecc2 <_raise_r+0x42>
 800ecba:	2316      	movs	r3, #22
 800ecbc:	6003      	str	r3, [r0, #0]
 800ecbe:	2001      	movs	r0, #1
 800ecc0:	e7e7      	b.n	800ec92 <_raise_r+0x12>
 800ecc2:	2400      	movs	r4, #0
 800ecc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ecc8:	4628      	mov	r0, r5
 800ecca:	4798      	blx	r3
 800eccc:	2000      	movs	r0, #0
 800ecce:	e7e0      	b.n	800ec92 <_raise_r+0x12>

0800ecd0 <raise>:
 800ecd0:	4b02      	ldr	r3, [pc, #8]	; (800ecdc <raise+0xc>)
 800ecd2:	4601      	mov	r1, r0
 800ecd4:	6818      	ldr	r0, [r3, #0]
 800ecd6:	f7ff bfd3 	b.w	800ec80 <_raise_r>
 800ecda:	bf00      	nop
 800ecdc:	200002d4 	.word	0x200002d4

0800ece0 <_kill_r>:
 800ece0:	b538      	push	{r3, r4, r5, lr}
 800ece2:	4d07      	ldr	r5, [pc, #28]	; (800ed00 <_kill_r+0x20>)
 800ece4:	2300      	movs	r3, #0
 800ece6:	4604      	mov	r4, r0
 800ece8:	4608      	mov	r0, r1
 800ecea:	4611      	mov	r1, r2
 800ecec:	602b      	str	r3, [r5, #0]
 800ecee:	f7f2 fc2d 	bl	800154c <_kill>
 800ecf2:	1c43      	adds	r3, r0, #1
 800ecf4:	d102      	bne.n	800ecfc <_kill_r+0x1c>
 800ecf6:	682b      	ldr	r3, [r5, #0]
 800ecf8:	b103      	cbz	r3, 800ecfc <_kill_r+0x1c>
 800ecfa:	6023      	str	r3, [r4, #0]
 800ecfc:	bd38      	pop	{r3, r4, r5, pc}
 800ecfe:	bf00      	nop
 800ed00:	200027f4 	.word	0x200027f4

0800ed04 <_getpid_r>:
 800ed04:	f7f2 bc1a 	b.w	800153c <_getpid>

0800ed08 <__swhatbuf_r>:
 800ed08:	b570      	push	{r4, r5, r6, lr}
 800ed0a:	460c      	mov	r4, r1
 800ed0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed10:	2900      	cmp	r1, #0
 800ed12:	b096      	sub	sp, #88	; 0x58
 800ed14:	4615      	mov	r5, r2
 800ed16:	461e      	mov	r6, r3
 800ed18:	da0d      	bge.n	800ed36 <__swhatbuf_r+0x2e>
 800ed1a:	89a3      	ldrh	r3, [r4, #12]
 800ed1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ed20:	f04f 0100 	mov.w	r1, #0
 800ed24:	bf0c      	ite	eq
 800ed26:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ed2a:	2340      	movne	r3, #64	; 0x40
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	6031      	str	r1, [r6, #0]
 800ed30:	602b      	str	r3, [r5, #0]
 800ed32:	b016      	add	sp, #88	; 0x58
 800ed34:	bd70      	pop	{r4, r5, r6, pc}
 800ed36:	466a      	mov	r2, sp
 800ed38:	f000 f848 	bl	800edcc <_fstat_r>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	dbec      	blt.n	800ed1a <__swhatbuf_r+0x12>
 800ed40:	9901      	ldr	r1, [sp, #4]
 800ed42:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ed46:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ed4a:	4259      	negs	r1, r3
 800ed4c:	4159      	adcs	r1, r3
 800ed4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed52:	e7eb      	b.n	800ed2c <__swhatbuf_r+0x24>

0800ed54 <__smakebuf_r>:
 800ed54:	898b      	ldrh	r3, [r1, #12]
 800ed56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed58:	079d      	lsls	r5, r3, #30
 800ed5a:	4606      	mov	r6, r0
 800ed5c:	460c      	mov	r4, r1
 800ed5e:	d507      	bpl.n	800ed70 <__smakebuf_r+0x1c>
 800ed60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed64:	6023      	str	r3, [r4, #0]
 800ed66:	6123      	str	r3, [r4, #16]
 800ed68:	2301      	movs	r3, #1
 800ed6a:	6163      	str	r3, [r4, #20]
 800ed6c:	b002      	add	sp, #8
 800ed6e:	bd70      	pop	{r4, r5, r6, pc}
 800ed70:	ab01      	add	r3, sp, #4
 800ed72:	466a      	mov	r2, sp
 800ed74:	f7ff ffc8 	bl	800ed08 <__swhatbuf_r>
 800ed78:	9900      	ldr	r1, [sp, #0]
 800ed7a:	4605      	mov	r5, r0
 800ed7c:	4630      	mov	r0, r6
 800ed7e:	f7fe fc01 	bl	800d584 <_malloc_r>
 800ed82:	b948      	cbnz	r0, 800ed98 <__smakebuf_r+0x44>
 800ed84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed88:	059a      	lsls	r2, r3, #22
 800ed8a:	d4ef      	bmi.n	800ed6c <__smakebuf_r+0x18>
 800ed8c:	f023 0303 	bic.w	r3, r3, #3
 800ed90:	f043 0302 	orr.w	r3, r3, #2
 800ed94:	81a3      	strh	r3, [r4, #12]
 800ed96:	e7e3      	b.n	800ed60 <__smakebuf_r+0xc>
 800ed98:	89a3      	ldrh	r3, [r4, #12]
 800ed9a:	6020      	str	r0, [r4, #0]
 800ed9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eda0:	81a3      	strh	r3, [r4, #12]
 800eda2:	9b00      	ldr	r3, [sp, #0]
 800eda4:	6163      	str	r3, [r4, #20]
 800eda6:	9b01      	ldr	r3, [sp, #4]
 800eda8:	6120      	str	r0, [r4, #16]
 800edaa:	b15b      	cbz	r3, 800edc4 <__smakebuf_r+0x70>
 800edac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edb0:	4630      	mov	r0, r6
 800edb2:	f000 f81d 	bl	800edf0 <_isatty_r>
 800edb6:	b128      	cbz	r0, 800edc4 <__smakebuf_r+0x70>
 800edb8:	89a3      	ldrh	r3, [r4, #12]
 800edba:	f023 0303 	bic.w	r3, r3, #3
 800edbe:	f043 0301 	orr.w	r3, r3, #1
 800edc2:	81a3      	strh	r3, [r4, #12]
 800edc4:	89a3      	ldrh	r3, [r4, #12]
 800edc6:	431d      	orrs	r5, r3
 800edc8:	81a5      	strh	r5, [r4, #12]
 800edca:	e7cf      	b.n	800ed6c <__smakebuf_r+0x18>

0800edcc <_fstat_r>:
 800edcc:	b538      	push	{r3, r4, r5, lr}
 800edce:	4d07      	ldr	r5, [pc, #28]	; (800edec <_fstat_r+0x20>)
 800edd0:	2300      	movs	r3, #0
 800edd2:	4604      	mov	r4, r0
 800edd4:	4608      	mov	r0, r1
 800edd6:	4611      	mov	r1, r2
 800edd8:	602b      	str	r3, [r5, #0]
 800edda:	f7f2 fc16 	bl	800160a <_fstat>
 800edde:	1c43      	adds	r3, r0, #1
 800ede0:	d102      	bne.n	800ede8 <_fstat_r+0x1c>
 800ede2:	682b      	ldr	r3, [r5, #0]
 800ede4:	b103      	cbz	r3, 800ede8 <_fstat_r+0x1c>
 800ede6:	6023      	str	r3, [r4, #0]
 800ede8:	bd38      	pop	{r3, r4, r5, pc}
 800edea:	bf00      	nop
 800edec:	200027f4 	.word	0x200027f4

0800edf0 <_isatty_r>:
 800edf0:	b538      	push	{r3, r4, r5, lr}
 800edf2:	4d06      	ldr	r5, [pc, #24]	; (800ee0c <_isatty_r+0x1c>)
 800edf4:	2300      	movs	r3, #0
 800edf6:	4604      	mov	r4, r0
 800edf8:	4608      	mov	r0, r1
 800edfa:	602b      	str	r3, [r5, #0]
 800edfc:	f7f2 fc15 	bl	800162a <_isatty>
 800ee00:	1c43      	adds	r3, r0, #1
 800ee02:	d102      	bne.n	800ee0a <_isatty_r+0x1a>
 800ee04:	682b      	ldr	r3, [r5, #0]
 800ee06:	b103      	cbz	r3, 800ee0a <_isatty_r+0x1a>
 800ee08:	6023      	str	r3, [r4, #0]
 800ee0a:	bd38      	pop	{r3, r4, r5, pc}
 800ee0c:	200027f4 	.word	0x200027f4

0800ee10 <_init>:
 800ee10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee12:	bf00      	nop
 800ee14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee16:	bc08      	pop	{r3}
 800ee18:	469e      	mov	lr, r3
 800ee1a:	4770      	bx	lr

0800ee1c <_fini>:
 800ee1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee1e:	bf00      	nop
 800ee20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee22:	bc08      	pop	{r3}
 800ee24:	469e      	mov	lr, r3
 800ee26:	4770      	bx	lr
