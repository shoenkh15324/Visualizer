
visualizer_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a248  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d024  0801a400  0801a400  0002a400  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027424  08027424  00040364  2**0
                  CONTENTS
  4 .ARM          00000008  08027424  08027424  00037424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802742c  0802742c  00040364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802742c  0802742c  0003742c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027430  08027430  00037430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  08027434  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008dbc  20000380  08027798  00040380  2**6
                  ALLOC
 10 ._user_heap_stack 00000604  2000913c  08027798  0004913c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040364  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040394  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002400e  00000000  00000000  000403d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006f6d  00000000  00000000  000643e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002060  00000000  00000000  0006b358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001858  00000000  00000000  0006d3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020649  00000000  00000000  0006ec10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030858  00000000  00000000  0008f259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000970a4  00000000  00000000  000bfab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000969c  00000000  00000000  00156b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001601f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000380 	.word	0x20000380
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801a3d0 	.word	0x0801a3d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000384 	.word	0x20000384
 80001dc:	0801a3d0 	.word	0x0801a3d0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b9a6 	b.w	8000fbc <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f83c 	bl	8000cf4 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff33 	bl	8000afc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fca9 	bl	8000618 <__aeabi_dmul>
 8000cc6:	f7ff ff57 	bl	8000b78 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc2a 	bl	8000524 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fca0 	bl	8000618 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fae2 	bl	80002a8 <__aeabi_dsub>
 8000ce4:	f7ff ff48 	bl	8000b78 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9e08      	ldr	r6, [sp, #32]
 8000cfa:	460d      	mov	r5, r1
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	460f      	mov	r7, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14a      	bne.n	8000d9a <__udivmoddi4+0xa6>
 8000d04:	428a      	cmp	r2, r1
 8000d06:	4694      	mov	ip, r2
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0xe2>
 8000d0a:	fab2 f382 	clz	r3, r2
 8000d0e:	b143      	cbz	r3, 8000d22 <__udivmoddi4+0x2e>
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	f1c3 0220 	rsb	r2, r3, #32
 8000d18:	409f      	lsls	r7, r3
 8000d1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	409c      	lsls	r4, r3
 8000d22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d26:	fa1f f58c 	uxth.w	r5, ip
 8000d2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d2e:	0c22      	lsrs	r2, r4, #16
 8000d30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d38:	fb01 f005 	mul.w	r0, r1, r5
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	d90a      	bls.n	8000d56 <__udivmoddi4+0x62>
 8000d40:	eb1c 0202 	adds.w	r2, ip, r2
 8000d44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d48:	f080 811c 	bcs.w	8000f84 <__udivmoddi4+0x290>
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	f240 8119 	bls.w	8000f84 <__udivmoddi4+0x290>
 8000d52:	3902      	subs	r1, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	1a12      	subs	r2, r2, r0
 8000d58:	b2a4      	uxth	r4, r4
 8000d5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d66:	fb00 f505 	mul.w	r5, r0, r5
 8000d6a:	42a5      	cmp	r5, r4
 8000d6c:	d90a      	bls.n	8000d84 <__udivmoddi4+0x90>
 8000d6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x294>
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x294>
 8000d80:	4464      	add	r4, ip
 8000d82:	3802      	subs	r0, #2
 8000d84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	b11e      	cbz	r6, 8000d96 <__udivmoddi4+0xa2>
 8000d8e:	40dc      	lsrs	r4, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	e9c6 4300 	strd	r4, r3, [r6]
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0xbc>
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f000 80ed 	beq.w	8000f7e <__udivmoddi4+0x28a>
 8000da4:	2100      	movs	r1, #0
 8000da6:	e9c6 0500 	strd	r0, r5, [r6]
 8000daa:	4608      	mov	r0, r1
 8000dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db0:	fab3 f183 	clz	r1, r3
 8000db4:	2900      	cmp	r1, #0
 8000db6:	d149      	bne.n	8000e4c <__udivmoddi4+0x158>
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	d302      	bcc.n	8000dc2 <__udivmoddi4+0xce>
 8000dbc:	4282      	cmp	r2, r0
 8000dbe:	f200 80f8 	bhi.w	8000fb2 <__udivmoddi4+0x2be>
 8000dc2:	1a84      	subs	r4, r0, r2
 8000dc4:	eb65 0203 	sbc.w	r2, r5, r3
 8000dc8:	2001      	movs	r0, #1
 8000dca:	4617      	mov	r7, r2
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d0e2      	beq.n	8000d96 <__udivmoddi4+0xa2>
 8000dd0:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd4:	e7df      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000dd6:	b902      	cbnz	r2, 8000dda <__udivmoddi4+0xe6>
 8000dd8:	deff      	udf	#255	; 0xff
 8000dda:	fab2 f382 	clz	r3, r2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8090 	bne.w	8000f04 <__udivmoddi4+0x210>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	2101      	movs	r1, #1
 8000df0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df4:	fb07 2015 	mls	r0, r7, r5, r2
 8000df8:	0c22      	lsrs	r2, r4, #16
 8000dfa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dfe:	fb0e f005 	mul.w	r0, lr, r5
 8000e02:	4290      	cmp	r0, r2
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x124>
 8000e06:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x122>
 8000e10:	4290      	cmp	r0, r2
 8000e12:	f200 80cb 	bhi.w	8000fac <__udivmoddi4+0x2b8>
 8000e16:	4645      	mov	r5, r8
 8000e18:	1a12      	subs	r2, r2, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e20:	fb07 2210 	mls	r2, r7, r0, r2
 8000e24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e28:	fb0e fe00 	mul.w	lr, lr, r0
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x14e>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x14c>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f200 80bb 	bhi.w	8000fb6 <__udivmoddi4+0x2c2>
 8000e40:	4610      	mov	r0, r2
 8000e42:	eba4 040e 	sub.w	r4, r4, lr
 8000e46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4a:	e79f      	b.n	8000d8c <__udivmoddi4+0x98>
 8000e4c:	f1c1 0720 	rsb	r7, r1, #32
 8000e50:	408b      	lsls	r3, r1
 8000e52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e62:	40fd      	lsrs	r5, r7
 8000e64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e68:	4323      	orrs	r3, r4
 8000e6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	fb09 5518 	mls	r5, r9, r8, r5
 8000e76:	0c1c      	lsrs	r4, r3, #16
 8000e78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e80:	42a5      	cmp	r5, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8a:	d90b      	bls.n	8000ea4 <__udivmoddi4+0x1b0>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e94:	f080 8088 	bcs.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e98:	42a5      	cmp	r5, r4
 8000e9a:	f240 8085 	bls.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea2:	4464      	add	r4, ip
 8000ea4:	1b64      	subs	r4, r4, r5
 8000ea6:	b29d      	uxth	r5, r3
 8000ea8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eac:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x1da>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec4:	d26c      	bcs.n	8000fa0 <__udivmoddi4+0x2ac>
 8000ec6:	45a6      	cmp	lr, r4
 8000ec8:	d96a      	bls.n	8000fa0 <__udivmoddi4+0x2ac>
 8000eca:	3b02      	subs	r3, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ed6:	eba4 040e 	sub.w	r4, r4, lr
 8000eda:	42ac      	cmp	r4, r5
 8000edc:	46c8      	mov	r8, r9
 8000ede:	46ae      	mov	lr, r5
 8000ee0:	d356      	bcc.n	8000f90 <__udivmoddi4+0x29c>
 8000ee2:	d053      	beq.n	8000f8c <__udivmoddi4+0x298>
 8000ee4:	b156      	cbz	r6, 8000efc <__udivmoddi4+0x208>
 8000ee6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eea:	eb64 040e 	sbc.w	r4, r4, lr
 8000eee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef2:	40ca      	lsrs	r2, r1
 8000ef4:	40cc      	lsrs	r4, r1
 8000ef6:	4317      	orrs	r7, r2
 8000ef8:	e9c6 7400 	strd	r7, r4, [r6]
 8000efc:	4618      	mov	r0, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f04:	f1c3 0120 	rsb	r1, r3, #32
 8000f08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f10:	fa25 f101 	lsr.w	r1, r5, r1
 8000f14:	409d      	lsls	r5, r3
 8000f16:	432a      	orrs	r2, r5
 8000f18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f24:	fb07 1510 	mls	r5, r7, r0, r1
 8000f28:	0c11      	lsrs	r1, r2, #16
 8000f2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f32:	428d      	cmp	r5, r1
 8000f34:	fa04 f403 	lsl.w	r4, r4, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x258>
 8000f3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f42:	d22f      	bcs.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f44:	428d      	cmp	r5, r1
 8000f46:	d92d      	bls.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1b49      	subs	r1, r1, r5
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f54:	fb07 1115 	mls	r1, r7, r5, r1
 8000f58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f60:	4291      	cmp	r1, r2
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x282>
 8000f64:	eb1c 0202 	adds.w	r2, ip, r2
 8000f68:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f6c:	d216      	bcs.n	8000f9c <__udivmoddi4+0x2a8>
 8000f6e:	4291      	cmp	r1, r2
 8000f70:	d914      	bls.n	8000f9c <__udivmoddi4+0x2a8>
 8000f72:	3d02      	subs	r5, #2
 8000f74:	4462      	add	r2, ip
 8000f76:	1a52      	subs	r2, r2, r1
 8000f78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f7c:	e738      	b.n	8000df0 <__udivmoddi4+0xfc>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000f84:	4639      	mov	r1, r7
 8000f86:	e6e6      	b.n	8000d56 <__udivmoddi4+0x62>
 8000f88:	4610      	mov	r0, r2
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x90>
 8000f8c:	4548      	cmp	r0, r9
 8000f8e:	d2a9      	bcs.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f90:	ebb9 0802 	subs.w	r8, r9, r2
 8000f94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	e7a3      	b.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f9c:	4645      	mov	r5, r8
 8000f9e:	e7ea      	b.n	8000f76 <__udivmoddi4+0x282>
 8000fa0:	462b      	mov	r3, r5
 8000fa2:	e794      	b.n	8000ece <__udivmoddi4+0x1da>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	e7d1      	b.n	8000f4c <__udivmoddi4+0x258>
 8000fa8:	46d0      	mov	r8, sl
 8000faa:	e77b      	b.n	8000ea4 <__udivmoddi4+0x1b0>
 8000fac:	3d02      	subs	r5, #2
 8000fae:	4462      	add	r2, ip
 8000fb0:	e732      	b.n	8000e18 <__udivmoddi4+0x124>
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	e70a      	b.n	8000dcc <__udivmoddi4+0xd8>
 8000fb6:	4464      	add	r4, ip
 8000fb8:	3802      	subs	r0, #2
 8000fba:	e742      	b.n	8000e42 <__udivmoddi4+0x14e>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_DMA_Init+0x5c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a13      	ldr	r2, [pc, #76]	; (800101c <MX_DMA_Init+0x5c>)
 8000fd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_DMA_Init+0x5c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	2039      	movs	r0, #57	; 0x39
 8000fe8:	f005 fabf 	bl	800656a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000fec:	2039      	movs	r0, #57	; 0x39
 8000fee:	f005 fad8 	bl	80065a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	203b      	movs	r0, #59	; 0x3b
 8000ff8:	f005 fab7 	bl	800656a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ffc:	203b      	movs	r0, #59	; 0x3b
 8000ffe:	f005 fad0 	bl	80065a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2105      	movs	r1, #5
 8001006:	2045      	movs	r0, #69	; 0x45
 8001008:	f005 faaf 	bl	800656a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800100c:	2045      	movs	r0, #69	; 0x45
 800100e:	f005 fac8 	bl	80065a2 <HAL_NVIC_EnableIRQ>

}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800

08001020 <flashInit>:
#ifdef _USE_HW_CLI
static void cliFlash(cli_args_t *args);
#endif

bool flashInit(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

#ifdef _USE_HW_CLI
	cliAdd("flash", cliFlash);
 8001024:	4903      	ldr	r1, [pc, #12]	; (8001034 <flashInit+0x14>)
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <flashInit+0x18>)
 8001028:	f002 fa42 	bl	80034b0 <cliAdd>
#endif

	return true;
 800102c:	2301      	movs	r3, #1
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	080011ed 	.word	0x080011ed
 8001038:	0801a400 	.word	0x0801a400

0800103c <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	bool ret = false;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  uint16_t start_sector_num = -1;
 800104c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001050:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t sector_count = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	85bb      	strh	r3, [r7, #44]	; 0x2c

  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
 800105a:	e00f      	b.n	800107c <flashErase+0x40>
  {
  	if(flashInSector(i, addr, length) == true)
 800105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105e:	b29b      	uxth	r3, r3
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f869 	bl	800113c <flashInSector>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <flashErase+0x3a>
  	{
  		if(start_sector_num < 0)
  		{
  			start_sector_num = i;
  		}
  		sector_count++;
 8001070:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001072:	3301      	adds	r3, #1
 8001074:	85bb      	strh	r3, [r7, #44]	; 0x2c
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001078:	3301      	adds	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
 800107c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107e:	2b07      	cmp	r3, #7
 8001080:	ddec      	ble.n	800105c <flashErase+0x20>
  	}
  }

  if(sector_count > 0)
 8001082:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d01f      	beq.n	80010c8 <flashErase+0x8c>
  {
  	HAL_FLASH_Unlock();
 8001088:	f005 ff12 	bl	8006eb0 <HAL_FLASH_Unlock>

    init.TypeErase   = FLASH_TYPEERASE_SECTORS;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
    init.Banks       = FLASH_BANK_1;
 8001090:	2301      	movs	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
    init.Sector      = start_sector_num;
 8001094:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001096:	61bb      	str	r3, [r7, #24]
    init.NbSectors   = sector_count;
 8001098:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800109a:	61fb      	str	r3, [r7, #28]
    init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800109c:	2302      	movs	r3, #2
 800109e:	623b      	str	r3, [r7, #32]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 80010a0:	f107 020c 	add.w	r2, r7, #12
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f006 f872 	bl	8007194 <HAL_FLASHEx_Erase>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if(status == HAL_OK)
 80010b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <flashErase+0x88>
    {
    	ret = true;
 80010be:	2301      	movs	r3, #1
 80010c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    HAL_FLASH_Lock();
 80010c4:	f005 ff16 	bl	8006ef4 <HAL_FLASH_Lock>
  }

  return ret;
 80010c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3730      	adds	r7, #48	; 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
	bool ret = true;
 80010e0:	2301      	movs	r3, #1
 80010e2:	77fb      	strb	r3, [r7, #31]
	HAL_StatusTypeDef status;

	HAL_FLASH_Unlock();
 80010e4:	f005 fee4 	bl	8006eb0 <HAL_FLASH_Unlock>

	for(int i=0; i<length; i++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	e01b      	b.n	8001126 <flashWrite+0x52>
	{
		uint16_t data;

		data = p_data[i+0] << 0;
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	4413      	add	r3, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	82fb      	strh	r3, [r7, #22]

		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint16_t)data);
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	18d1      	adds	r1, r2, r3
 80010fe:	8afb      	ldrh	r3, [r7, #22]
 8001100:	2200      	movs	r2, #0
 8001102:	461c      	mov	r4, r3
 8001104:	4615      	mov	r5, r2
 8001106:	4622      	mov	r2, r4
 8001108:	462b      	mov	r3, r5
 800110a:	2000      	movs	r0, #0
 800110c:	f005 fe7c 	bl	8006e08 <HAL_FLASH_Program>
 8001110:	4603      	mov	r3, r0
 8001112:	757b      	strb	r3, [r7, #21]
		if(status != HAL_OK)
 8001114:	7d7b      	ldrb	r3, [r7, #21]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <flashWrite+0x4c>
		{
			ret = false;
 800111a:	2300      	movs	r3, #0
 800111c:	77fb      	strb	r3, [r7, #31]
			break;
 800111e:	e006      	b.n	800112e <flashWrite+0x5a>
	for(int i=0; i<length; i++)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	3301      	adds	r3, #1
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	d8df      	bhi.n	80010ee <flashWrite+0x1a>
		}
	}

	HAL_FLASH_Lock();
 800112e:	f005 fee1 	bl	8006ef4 <HAL_FLASH_Lock>

	return ret;
 8001132:	7ffb      	ldrb	r3, [r7, #31]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bdb0      	pop	{r4, r5, r7, pc}

0800113c <flashInSector>:

	return ret;
}

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 800113c:	b480      	push	{r7}
 800113e:	b08b      	sub	sp, #44	; 0x2c
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	81fb      	strh	r3, [r7, #14]
	bool ret = false;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t sector_start;
	uint32_t sector_end;
	uint32_t flash_start;
	uint32_t flash_end;

	sector_start = flash_tbl[sector_num].addr;
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	4a25      	ldr	r2, [pc, #148]	; (80011e8 <flashInSector+0xac>)
 8001154:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001158:	623b      	str	r3, [r7, #32]
	sector_end = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <flashInSector+0xac>)
 800115e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	4920      	ldr	r1, [pc, #128]	; (80011e8 <flashInSector+0xac>)
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	440b      	add	r3, r1
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4413      	add	r3, r2
 800116e:	3b01      	subs	r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
	flash_start = addr;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	61bb      	str	r3, [r7, #24]
	flash_end = addr + length - 1;
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	3b01      	subs	r3, #1
 800117e:	617b      	str	r3, [r7, #20]

	if(sector_start >= flash_start && sector_start <= flash_end)
 8001180:	6a3a      	ldr	r2, [r7, #32]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	429a      	cmp	r2, r3
 8001186:	d306      	bcc.n	8001196 <flashInSector+0x5a>
 8001188:	6a3a      	ldr	r2, [r7, #32]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	d802      	bhi.n	8001196 <flashInSector+0x5a>
	{
		ret = true;
 8001190:	2301      	movs	r3, #1
 8001192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

  if (sector_end >= flash_start && sector_end <= flash_end)
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	429a      	cmp	r2, r3
 800119c:	d306      	bcc.n	80011ac <flashInSector+0x70>
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d802      	bhi.n	80011ac <flashInSector+0x70>
  {
    ret = true;
 80011a6:	2301      	movs	r3, #1
 80011a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d306      	bcc.n	80011c2 <flashInSector+0x86>
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d802      	bhi.n	80011c2 <flashInSector+0x86>
  {
    ret = true;
 80011bc:	2301      	movs	r3, #1
 80011be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d306      	bcc.n	80011d8 <flashInSector+0x9c>
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d802      	bhi.n	80011d8 <flashInSector+0x9c>
  {
    ret = true;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 80011d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80011dc:	4618      	mov	r0, r3
 80011de:	372c      	adds	r7, #44	; 0x2c
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	20000000 	.word	0x20000000

080011ec <cliFlash>:


#ifdef _USE_HW_CLI

void cliFlash(cli_args_t *args)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(args->argc == 1 && args->isStr(0, "info") == true)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d121      	bne.n	8001246 <cliFlash+0x5a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	495c      	ldr	r1, [pc, #368]	; (8001378 <cliFlash+0x18c>)
 8001208:	2000      	movs	r0, #0
 800120a:	4798      	blx	r3
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d019      	beq.n	8001246 <cliFlash+0x5a>
	{
		for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
 8001216:	e010      	b.n	800123a <cliFlash+0x4e>
		{
			cliPrintf("0x%X : %dKB\n", flash_tbl[i].addr, flash_tbl[i].length / 1024);
 8001218:	4a58      	ldr	r2, [pc, #352]	; (800137c <cliFlash+0x190>)
 800121a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001220:	4a56      	ldr	r2, [pc, #344]	; (800137c <cliFlash+0x190>)
 8001222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	0a9b      	lsrs	r3, r3, #10
 800122c:	461a      	mov	r2, r3
 800122e:	4854      	ldr	r0, [pc, #336]	; (8001380 <cliFlash+0x194>)
 8001230:	f002 f82e 	bl	8003290 <cliPrintf>
		for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	3301      	adds	r3, #1
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
 800123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123c:	2b07      	cmp	r3, #7
 800123e:	ddeb      	ble.n	8001218 <cliFlash+0x2c>
		}

		ret = true;
 8001240:	2301      	movs	r3, #1
 8001242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d12b      	bne.n	80012a6 <cliFlash+0xba>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	494c      	ldr	r1, [pc, #304]	; (8001384 <cliFlash+0x198>)
 8001254:	2000      	movs	r0, #0
 8001256:	4798      	blx	r3
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d023      	beq.n	80012a6 <cliFlash+0xba>
	{
		uint32_t addr;
		uint32_t length;

		addr = (uint32_t)args->getData(1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2001      	movs	r0, #1
 8001264:	4798      	blx	r3
 8001266:	4603      	mov	r3, r0
 8001268:	623b      	str	r3, [r7, #32]
		length = (uint32_t)args->getData(2);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2002      	movs	r0, #2
 8001270:	4798      	blx	r3
 8001272:	4603      	mov	r3, r0
 8001274:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<length; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
 800127a:	e00d      	b.n	8001298 <cliFlash+0xac>
		{
			cliPrintf("0x%X : 0x%X\n", addr + i, *((uint8_t *)(addr + i)));
 800127c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	18d1      	adds	r1, r2, r3
 8001282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	483e      	ldr	r0, [pc, #248]	; (8001388 <cliFlash+0x19c>)
 800128e:	f001 ffff 	bl	8003290 <cliPrintf>
		for(int i=0; i<length; i++)
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	3301      	adds	r3, #1
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8ed      	bhi.n	800127c <cliFlash+0x90>
		}

		ret = true;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(args->argc == 3 && args->isStr(0, "erase") == true)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d121      	bne.n	80012f2 <cliFlash+0x106>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4936      	ldr	r1, [pc, #216]	; (800138c <cliFlash+0x1a0>)
 80012b4:	2000      	movs	r0, #0
 80012b6:	4798      	blx	r3
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d019      	beq.n	80012f2 <cliFlash+0x106>
	{
		uint32_t addr;
		uint32_t length;

		addr = (uint32_t)args->getData(1);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2001      	movs	r0, #1
 80012c4:	4798      	blx	r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]
		length = (uint32_t)args->getData(2);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2002      	movs	r0, #2
 80012d0:	4798      	blx	r3
 80012d2:	4603      	mov	r3, r0
 80012d4:	617b      	str	r3, [r7, #20]

		if(flashErase(addr, length) == true)
 80012d6:	6979      	ldr	r1, [r7, #20]
 80012d8:	69b8      	ldr	r0, [r7, #24]
 80012da:	f7ff feaf 	bl	800103c <flashErase>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <cliFlash+0x100>
		{
			cliPrintf("Erase OK\n");
 80012e4:	482a      	ldr	r0, [pc, #168]	; (8001390 <cliFlash+0x1a4>)
 80012e6:	f001 ffd3 	bl	8003290 <cliPrintf>
 80012ea:	e002      	b.n	80012f2 <cliFlash+0x106>
		}
		else
		{
			cliPrintf("Erase Fail\n");
 80012ec:	4829      	ldr	r0, [pc, #164]	; (8001394 <cliFlash+0x1a8>)
 80012ee:	f001 ffcf 	bl	8003290 <cliPrintf>
		}
	}


  if (args->argc == 3 && args->isStr(0, "write") == true)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d127      	bne.n	800134a <cliFlash+0x15e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4926      	ldr	r1, [pc, #152]	; (8001398 <cliFlash+0x1ac>)
 8001300:	2000      	movs	r0, #0
 8001302:	4798      	blx	r3
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d01f      	beq.n	800134a <cliFlash+0x15e>
  {
    uint32_t addr;
    uint32_t data;

    addr   = (uint32_t)args->getData(1);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2001      	movs	r0, #1
 8001310:	4798      	blx	r3
 8001312:	4603      	mov	r3, r0
 8001314:	613b      	str	r3, [r7, #16]
    data   = (uint32_t)args->getData(2);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2002      	movs	r0, #2
 800131c:	4798      	blx	r3
 800131e:	4603      	mov	r3, r0
 8001320:	60fb      	str	r3, [r7, #12]

    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	2204      	movs	r2, #4
 8001328:	4619      	mov	r1, r3
 800132a:	6938      	ldr	r0, [r7, #16]
 800132c:	f7ff fed2 	bl	80010d4 <flashWrite>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <cliFlash+0x152>
    {
      cliPrintf("Write OK\n");
 8001336:	4819      	ldr	r0, [pc, #100]	; (800139c <cliFlash+0x1b0>)
 8001338:	f001 ffaa 	bl	8003290 <cliPrintf>
 800133c:	e002      	b.n	8001344 <cliFlash+0x158>
    }
    else
    {
      cliPrintf("Write Fail\n");
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <cliFlash+0x1b4>)
 8001340:	f001 ffa6 	bl	8003290 <cliPrintf>
    }

    ret = true;
 8001344:	2301      	movs	r3, #1
 8001346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (ret != true)
 800134a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00b      	beq.n	8001370 <cliFlash+0x184>
  {
    cliPrintf("flash info\n");
 8001358:	4812      	ldr	r0, [pc, #72]	; (80013a4 <cliFlash+0x1b8>)
 800135a:	f001 ff99 	bl	8003290 <cliPrintf>
    cliPrintf("flash read  addr length\n");
 800135e:	4812      	ldr	r0, [pc, #72]	; (80013a8 <cliFlash+0x1bc>)
 8001360:	f001 ff96 	bl	8003290 <cliPrintf>
    cliPrintf("flash erase addr length\n");
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <cliFlash+0x1c0>)
 8001366:	f001 ff93 	bl	8003290 <cliPrintf>
    cliPrintf("flash write addr data\n");
 800136a:	4811      	ldr	r0, [pc, #68]	; (80013b0 <cliFlash+0x1c4>)
 800136c:	f001 ff90 	bl	8003290 <cliPrintf>
  }
}
 8001370:	bf00      	nop
 8001372:	3730      	adds	r7, #48	; 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	0801a408 	.word	0x0801a408
 800137c:	20000000 	.word	0x20000000
 8001380:	0801a410 	.word	0x0801a410
 8001384:	0801a420 	.word	0x0801a420
 8001388:	0801a428 	.word	0x0801a428
 800138c:	0801a438 	.word	0x0801a438
 8001390:	0801a440 	.word	0x0801a440
 8001394:	0801a44c 	.word	0x0801a44c
 8001398:	0801a458 	.word	0x0801a458
 800139c:	0801a460 	.word	0x0801a460
 80013a0:	0801a46c 	.word	0x0801a46c
 80013a4:	0801a478 	.word	0x0801a478
 80013a8:	0801a484 	.word	0x0801a484
 80013ac:	0801a4a0 	.word	0x0801a4a0
 80013b0:	0801a4bc 	.word	0x0801a4bc

080013b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b37      	ldr	r3, [pc, #220]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a36      	ldr	r2, [pc, #216]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b34      	ldr	r3, [pc, #208]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b30      	ldr	r3, [pc, #192]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a2f      	ldr	r2, [pc, #188]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a28      	ldr	r2, [pc, #160]	; (80014ac <MX_GPIO_Init+0xf8>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a21      	ldr	r2, [pc, #132]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	481b      	ldr	r0, [pc, #108]	; (80014b0 <MX_GPIO_Init+0xfc>)
 8001442:	f006 fa49 	bl	80078d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	211c      	movs	r1, #28
 800144a:	481a      	ldr	r0, [pc, #104]	; (80014b4 <MX_GPIO_Init+0x100>)
 800144c:	f006 fa44 	bl	80078d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4811      	ldr	r0, [pc, #68]	; (80014b0 <MX_GPIO_Init+0xfc>)
 800146a:	f005 ffb5 	bl	80073d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800146e:	231c      	movs	r3, #28
 8001470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <MX_GPIO_Init+0x100>)
 8001486:	f005 ffa7 	bl	80073d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800148a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_GPIO_Init+0x104>)
 80014a0:	f005 ff9a 	bl	80073d8 <HAL_GPIO_Init>

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f004 febe 	bl	8006240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f826 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f7ff ff74 	bl	80013b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80014cc:	f7ff fd78 	bl	8000fc0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80014d0:	f015 f8e4 	bl	801669c <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 80014d4:	f000 f88c 	bl	80015f0 <MX_SDIO_SD_Init>
  //MX_SPI4_Init();
  //MX_I2C2_Init();
  /* USER CODE BEGIN 2 */
  cliInit();
 80014d8:	f001 f9c0 	bl	800285c <cliInit>
  ledInit();
 80014dc:	f003 fda2 	bl	8005024 <ledInit>
  gpioInit();
 80014e0:	f002 fb08 	bl	8003af4 <gpioInit>
  flashInit();
 80014e4:	f7ff fd9c 	bl	8001020 <flashInit>
  spiInit();
 80014e8:	f004 fa42 	bl	8005970 <spiInit>
  i2cInit();
 80014ec:	f002 fc50 	bl	8003d90 <i2cInit>

  if(sdInit() == true)
 80014f0:	f003 fe42 	bl	8005178 <sdInit>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <main+0x42>
  {
  	fatfsInit();
 80014fa:	f002 f8fd 	bl	80036f8 <fatfsInit>
  }

  lcdInit();
 80014fe:	f003 f88f 	bl	8004620 <lcdInit>


  cliOpen(_DEF_UART1, 57600);
 8001502:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001506:	2000      	movs	r0, #0
 8001508:	f001 f9f4 	bl	80028f4 <cliOpen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	cliMain();
 800150c:	f001 faaa 	bl	8002a64 <cliMain>
 8001510:	e7fc      	b.n	800150c <main+0x50>
	...

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b094      	sub	sp, #80	; 0x50
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	2230      	movs	r2, #48	; 0x30
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f016 ff20 	bl	8018368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <SystemClock_Config+0xc8>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a26      	ldr	r2, [pc, #152]	; (80015dc <SystemClock_Config+0xc8>)
 8001542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <SystemClock_Config+0xc8>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <SystemClock_Config+0xcc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a20      	ldr	r2, [pc, #128]	; (80015e0 <SystemClock_Config+0xcc>)
 800155e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <SystemClock_Config+0xcc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001570:	2301      	movs	r3, #1
 8001572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157a:	2302      	movs	r3, #2
 800157c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800157e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001584:	2319      	movs	r3, #25
 8001586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001588:	23c0      	movs	r3, #192	; 0xc0
 800158a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800158c:	2302      	movs	r3, #2
 800158e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001590:	2304      	movs	r3, #4
 8001592:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	4618      	mov	r0, r3
 800159a:	f00a fafb 	bl	800bb94 <HAL_RCC_OscConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015a4:	f000 f81e 	bl	80015e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a8:	230f      	movs	r3, #15
 80015aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ac:	2302      	movs	r3, #2
 80015ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	2103      	movs	r1, #3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f00a fd5d 	bl	800c084 <HAL_RCC_ClockConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015d0:	f000 f808 	bl	80015e4 <Error_Handler>
  }
}
 80015d4:	bf00      	nop
 80015d6:	3750      	adds	r7, #80	; 0x50
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40007000 	.word	0x40007000

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>
	...

080015f0 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 80015f6:	4a15      	ldr	r2, [pc, #84]	; (800164c <MX_SDIO_SD_Init+0x5c>)
 80015f8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800161e:	480a      	ldr	r0, [pc, #40]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 8001620:	f00a fefc 	bl	800c41c <HAL_SD_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800162a:	f7ff ffdb 	bl	80015e4 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800162e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 8001634:	f00b fcd4 	bl	800cfe0 <HAL_SD_ConfigWideBusOperation>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800163e:	f7ff ffd1 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000039c 	.word	0x2000039c
 800164c:	40012c00 	.word	0x40012c00

08001650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_MspInit+0x4c>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a0f      	ldr	r2, [pc, #60]	; (800169c <HAL_MspInit+0x4c>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_MspInit+0x4c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_MspInit+0x4c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a08      	ldr	r2, [pc, #32]	; (800169c <HAL_MspInit+0x4c>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a4:	e7fe      	b.n	80016a4 <NMI_Handler+0x4>

080016a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <MemManage_Handler+0x4>

080016b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <BusFault_Handler+0x4>

080016b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <UsageFault_Handler+0x4>

080016be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ec:	f004 fdfa 	bl	80062e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <I2C2_EV_IRQHandler+0x10>)
 80016fa:	f006 ff03 	bl	8008504 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000de4 	.word	0x20000de4

08001708 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <I2C2_ER_IRQHandler+0x10>)
 800170e:	f007 f84c 	bl	80087aa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000de4 	.word	0x20000de4

0800171c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <SDIO_IRQHandler+0x10>)
 8001722:	f00b f8f3 	bl	800c90c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000039c 	.word	0x2000039c

08001730 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <DMA2_Stream1_IRQHandler+0x10>)
 8001736:	f005 f8e3 	bl	8006900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20007348 	.word	0x20007348

08001744 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <DMA2_Stream3_IRQHandler+0x10>)
 800174a:	f005 f8d9 	bl	8006900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000420 	.word	0x20000420

08001758 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <OTG_FS_IRQHandler+0x10>)
 800175e:	f009 f90d 	bl	800a97c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200088ec 	.word	0x200088ec

0800176c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <DMA2_Stream6_IRQHandler+0x10>)
 8001772:	f005 f8c5 	bl	8006900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000480 	.word	0x20000480

08001780 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <SPI4_IRQHandler+0x10>)
 8001786:	f00c fca1 	bl	800e0cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200072f0 	.word	0x200072f0

08001794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return 1;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_kill>:

int _kill(int pid, int sig)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ae:	f016 fe77 	bl	80184a0 <__errno>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2216      	movs	r2, #22
 80017b6:	601a      	str	r2, [r3, #0]
  return -1;
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_exit>:

void _exit (int status)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffe7 	bl	80017a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017d6:	e7fe      	b.n	80017d6 <_exit+0x12>

080017d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e00a      	b.n	8001800 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ea:	f3af 8000 	nop.w
 80017ee:	4601      	mov	r1, r0
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	60ba      	str	r2, [r7, #8]
 80017f6:	b2ca      	uxtb	r2, r1
 80017f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbf0      	blt.n	80017ea <_read+0x12>
  }

  return len;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e009      	b.n	8001838 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	60ba      	str	r2, [r7, #8]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbf1      	blt.n	8001824 <_write+0x12>
  }
  return len;
 8001840:	687b      	ldr	r3, [r7, #4]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_close>:

int _close(int file)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001872:	605a      	str	r2, [r3, #4]
  return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_isatty>:

int _isatty(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f016 fddc 	bl	80184a0 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20020000 	.word	0x20020000
 8001914:	00000400 	.word	0x00000400
 8001918:	200004e0 	.word	0x200004e0
 800191c:	20009140 	.word	0x20009140

08001920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800197c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001948:	f7ff ffea 	bl	8001920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800194e:	490d      	ldr	r1, [pc, #52]	; (8001984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001950:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001964:	4c0a      	ldr	r4, [pc, #40]	; (8001990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001972:	f016 fd9b 	bl	80184ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7ff fda1 	bl	80014bc <main>
  bx  lr    
 800197a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800197c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 8001988:	08027434 	.word	0x08027434
  ldr r2, =_sbss
 800198c:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 8001990:	2000913c 	.word	0x2000913c

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>

08001996 <delay>:
#include "common.h"



void delay(uint32_t ms)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f004 fcc0 	bl	8006324 <HAL_Delay>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <millis>:


uint32_t millis(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80019b0:	f004 fcac 	bl	800630c <HAL_GetTick>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <SD_CheckStatus+0x80>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 80019cc:	f003 fc26 	bl	800521c <sdIsInit>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f083 0301 	eor.w	r3, r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d007      	beq.n	80019ec <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 80019dc:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <SD_CheckStatus+0x80>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <SD_CheckStatus+0x80>)
 80019ea:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 80019ec:	f003 fc22 	bl	8005234 <sdIsDetected>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f083 0301 	eor.w	r3, r3, #1
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d007      	beq.n	8001a0c <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <SD_CheckStatus+0x80>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f043 0302 	orr.w	r3, r3, #2
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <SD_CheckStatus+0x80>)
 8001a0a:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 8001a0c:	200a      	movs	r0, #10
 8001a0e:	f003 fc95 	bl	800533c <sdIsReady>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f083 0301 	eor.w	r3, r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <SD_CheckStatus+0x80>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <SD_CheckStatus+0x80>)
 8001a2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001a2e:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <SD_CheckStatus+0x80>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b2db      	uxtb	r3, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000044 	.word	0x20000044

08001a40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <SD_initialize+0x40>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]

  if (sdIsInit() != true)
 8001a50:	f003 fbe4 	bl	800521c <sdIsInit>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f083 0301 	eor.w	r3, r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <SD_initialize+0x30>
  {
    Stat |= STA_NOINIT;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <SD_initialize+0x40>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <SD_initialize+0x40>)
 8001a6e:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <SD_initialize+0x40>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000044 	.word	0x20000044

08001a84 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff93 	bl	80019bc <SD_CheckStatus>
 8001a96:	4603      	mov	r3, r0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	75fb      	strb	r3, [r7, #23]


  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 8001ab4:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	68b9      	ldr	r1, [r7, #8]
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f003 fc5d 	bl	800537c <sdReadBlocks>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SD_read+0x2c>
  {
    res = RES_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	75fb      	strb	r3, [r7, #23]

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 8001aea:	f242 7310 	movw	r3, #10000	; 0x2710
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f003 fc8c 	bl	8005410 <sdWriteBlocks>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <SD_write+0x2c>
  {
    res = RES_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8001b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08c      	sub	sp, #48	; 0x30
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	603a      	str	r2, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b22:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <SD_ioctl+0xac>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <SD_ioctl+0x28>
 8001b30:	2303      	movs	r3, #3
 8001b32:	e03c      	b.n	8001bae <SD_ioctl+0xa2>

  switch (cmd)
 8001b34:	79bb      	ldrb	r3, [r7, #6]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d834      	bhi.n	8001ba4 <SD_ioctl+0x98>
 8001b3a:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <SD_ioctl+0x34>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001b51 	.word	0x08001b51
 8001b44:	08001b59 	.word	0x08001b59
 8001b48:	08001b71 	.word	0x08001b71
 8001b4c:	08001b8b 	.word	0x08001b8b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001b56:	e028      	b.n	8001baa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    sdGetInfo(&sd_info);
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fb7f 	bl	8005260 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 8001b62:	6a3a      	ldr	r2, [r7, #32]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001b6e:	e01c      	b.n	8001baa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    sdGetInfo(&sd_info);
 8001b70:	f107 0308 	add.w	r3, r7, #8
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 fb73 	bl	8005260 <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001b88:	e00f      	b.n	8001baa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    sdGetInfo(&sd_info);
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 fb66 	bl	8005260 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	0a5a      	lsrs	r2, r3, #9
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001ba2:	e002      	b.n	8001baa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8001baa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3730      	adds	r7, #48	; 0x30
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000044 	.word	0x20000044

08001bbc <hanFontLoad>:
void hanWanFontLoad(char *HanCode, han_font_t *FontPtr);
void hanUniFontLoad(char *HanCode, han_font_t *FontPtr);
uint16_t hanCnvCodeWan2Johab(uint16_t WanCode);

uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
	// buffer reset
	memset(FontPtr->FontBuffer, 0x00, 32);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	3306      	adds	r3, #6
 8001bca:	2220      	movs	r2, #32
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f016 fbca 	bl	8018368 <memset>

	FontPtr->Code_Type = PHAN_NULL_CODE;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	809a      	strh	r2, [r3, #4]

	// Identifying if it's a Korean code
	if(!HanCode[0] || HanCode[0] == 0x0A)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <hanFontLoad+0x2e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b0a      	cmp	r3, #10
 8001be8:	d107      	bne.n	8001bfa <hanFontLoad+0x3e>
	{
		FontPtr->Code_Type = PHAN_END_CODE;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2204      	movs	r2, #4
 8001bee:	809a      	strh	r2, [r3, #4]
		FontPtr->Size_Char = 1;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	805a      	strh	r2, [r3, #2]
		return PHAN_END_CODE;
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	e03b      	b.n	8001c72 <hanFontLoad+0xb6>
	}
	else if(HanCode[0] & 0x80)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da2b      	bge.n	8001c5c <hanFontLoad+0xa0>
	{
		uint32_t utf8_code;

		utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	041a      	lsls	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	4313      	orrs	r3, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	3202      	adds	r2, #2
 8001c18:	7812      	ldrb	r2, [r2, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]

		if(utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <hanFontLoad+0xc0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d30e      	bcc.n	8001c44 <hanFontLoad+0x88>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <hanFontLoad+0xc4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d80a      	bhi.n	8001c44 <hanFontLoad+0x88>
		{
			FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2201      	movs	r2, #1
 8001c32:	809a      	strh	r2, [r3, #4]
			FontPtr->Size_Char = 3;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2203      	movs	r2, #3
 8001c38:	805a      	strh	r2, [r3, #2]
			hanUniFontLoad(HanCode, FontPtr);
 8001c3a:	6839      	ldr	r1, [r7, #0]
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f91f 	bl	8001e80 <hanUniFontLoad>
 8001c42:	e009      	b.n	8001c58 <hanFontLoad+0x9c>
		}
		else
		{
			FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	809a      	strh	r2, [r3, #4]
			FontPtr->Size_Char = 2;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	805a      	strh	r2, [r3, #2]
			hanWanFontLoad(HanCode, FontPtr);
 8001c50:	6839      	ldr	r1, [r7, #0]
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f816 	bl	8001c84 <hanWanFontLoad>
		}

		return PHAN_HANGUL_CODE;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e00a      	b.n	8001c72 <hanFontLoad+0xb6>
	}
	else // eng code
	{
		FontPtr->Code_Type = PHAN_ENG_CODE;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	809a      	strh	r2, [r3, #4]
		FontPtr->Size_Char = 1;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2201      	movs	r2, #1
 8001c66:	805a      	strh	r2, [r3, #2]
		hanEngFontLoad(HanCode, FontPtr);
 8001c68:	6839      	ldr	r1, [r7, #0]
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fa30 	bl	80020d0 <hanEngFontLoad>
		return PHAN_ENG_CODE;
 8001c70:	2302      	movs	r3, #2
	}

	return FontPtr->Code_Type;
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	00eab080 	.word	0x00eab080
 8001c80:	00ed9fb0 	.word	0x00ed9fb0

08001c84 <hanWanFontLoad>:

// 완성형 한글 코드를 기반으로 한글 폰트를 로드
void hanWanFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
	uint16_t wHanCode;

	// static declaration 은 속도를 높이기 위한것임.
	static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType, uJonType;

	wHanCode = (uint16_t)HanCode[0]<<8 | ((uint16_t)HanCode[1] & 0x00FF);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	b21b      	sxth	r3, r3
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	b21b      	sxth	r3, r3
 8001ca2:	81bb      	strh	r3, [r7, #12]
	wHanCode = hanCnvCodeWan2Johab(wHanCode);
 8001ca4:	89bb      	ldrh	r3, [r7, #12]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fa3c 	bl	8002124 <hanCnvCodeWan2Johab>
 8001cac:	4603      	mov	r3, r0
 8001cae:	81bb      	strh	r3, [r7, #12]

	// seperate phoneme code
	uChosung = (wHanCode>>10) & 0x001F; // Chosung code
 8001cb0:	89bb      	ldrh	r3, [r7, #12]
 8001cb2:	0a9b      	lsrs	r3, r3, #10
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <hanWanFontLoad+0x1c8>)
 8001cbe:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) & 0x001F;//Joongsung code
 8001cc0:	89bb      	ldrh	r3, [r7, #12]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	4b60      	ldr	r3, [pc, #384]	; (8001e50 <hanWanFontLoad+0x1cc>)
 8001cce:	801a      	strh	r2, [r3, #0]
	uJongsung  = wHanCode & 0x001F;    //Jongsung code
 8001cd0:	89bb      	ldrh	r3, [r7, #12]
 8001cd2:	f003 031f 	and.w	r3, r3, #31
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	4b5e      	ldr	r3, [pc, #376]	; (8001e54 <hanWanFontLoad+0x1d0>)
 8001cda:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 8001cdc:	4b5b      	ldr	r3, [pc, #364]	; (8001e4c <hanWanFontLoad+0x1c8>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <hanWanFontLoad+0x1d4>)
 8001ce4:	5c9b      	ldrb	r3, [r3, r2]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b58      	ldr	r3, [pc, #352]	; (8001e4c <hanWanFontLoad+0x1c8>)
 8001cea:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 8001cec:	4b58      	ldr	r3, [pc, #352]	; (8001e50 <hanWanFontLoad+0x1cc>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b5a      	ldr	r3, [pc, #360]	; (8001e5c <hanWanFontLoad+0x1d8>)
 8001cf4:	5c9b      	ldrb	r3, [r3, r2]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4b55      	ldr	r3, [pc, #340]	; (8001e50 <hanWanFontLoad+0x1cc>)
 8001cfa:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8001cfc:	4b55      	ldr	r3, [pc, #340]	; (8001e54 <hanWanFontLoad+0x1d0>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b57      	ldr	r3, [pc, #348]	; (8001e60 <hanWanFontLoad+0x1dc>)
 8001d04:	5c9b      	ldrb	r3, [r3, r2]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4b52      	ldr	r3, [pc, #328]	; (8001e54 <hanWanFontLoad+0x1d0>)
 8001d0a:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8001d0c:	4b51      	ldr	r3, [pc, #324]	; (8001e54 <hanWanFontLoad+0x1d0>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d006      	beq.n	8001d22 <hanWanFontLoad+0x9e>
 8001d14:	4b4e      	ldr	r3, [pc, #312]	; (8001e50 <hanWanFontLoad+0x1cc>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b52      	ldr	r3, [pc, #328]	; (8001e64 <hanWanFontLoad+0x1e0>)
 8001d1c:	5c9b      	ldrb	r3, [r3, r2]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e005      	b.n	8001d2e <hanWanFontLoad+0xaa>
 8001d22:	4b4b      	ldr	r3, [pc, #300]	; (8001e50 <hanWanFontLoad+0x1cc>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b4f      	ldr	r3, [pc, #316]	; (8001e68 <hanWanFontLoad+0x1e4>)
 8001d2a:	5c9b      	ldrb	r3, [r3, r2]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	4a4f      	ldr	r2, [pc, #316]	; (8001e6c <hanWanFontLoad+0x1e8>)
 8001d30:	8013      	strh	r3, [r2, #0]

  //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 || uChosung == 16 ) ? 0: 1) + (uJongsung ? 2 : 0);
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <hanWanFontLoad+0x1c8>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <hanWanFontLoad+0xca>
 8001d3a:	4b44      	ldr	r3, [pc, #272]	; (8001e4c <hanWanFontLoad+0x1c8>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d005      	beq.n	8001d4e <hanWanFontLoad+0xca>
 8001d42:	4b42      	ldr	r3, [pc, #264]	; (8001e4c <hanWanFontLoad+0x1c8>)
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d001      	beq.n	8001d4e <hanWanFontLoad+0xca>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <hanWanFontLoad+0xcc>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	4a40      	ldr	r2, [pc, #256]	; (8001e54 <hanWanFontLoad+0x1d0>)
 8001d54:	8812      	ldrh	r2, [r2, #0]
 8001d56:	2a00      	cmp	r2, #0
 8001d58:	d001      	beq.n	8001d5e <hanWanFontLoad+0xda>
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	e000      	b.n	8001d60 <hanWanFontLoad+0xdc>
 8001d5e:	2200      	movs	r2, #0
 8001d60:	4413      	add	r3, r2
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	4b42      	ldr	r3, [pc, #264]	; (8001e70 <hanWanFontLoad+0x1ec>)
 8001d66:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8001d68:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <hanWanFontLoad+0x1cc>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <hanWanFontLoad+0x1f0>)
 8001d70:	5c9b      	ldrb	r3, [r3, r2]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	4b40      	ldr	r3, [pc, #256]	; (8001e78 <hanWanFontLoad+0x1f4>)
 8001d76:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	81fb      	strh	r3, [r7, #14]
 8001d7c:	e035      	b.n	8001dea <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 8001d7e:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <hanWanFontLoad+0x1e8>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <hanWanFontLoad+0x1c8>)
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	441a      	add	r2, r3
 8001d94:	89fb      	ldrh	r3, [r7, #14]
 8001d96:	4939      	ldr	r1, [pc, #228]	; (8001e7c <hanWanFontLoad+0x1f8>)
 8001d98:	0152      	lsls	r2, r2, #5
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001da0:	89fb      	ldrh	r3, [r7, #14]
 8001da2:	b2d1      	uxtb	r1, r2
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	460a      	mov	r2, r1
 8001daa:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8001dac:	89fb      	ldrh	r3, [r7, #14]
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	7999      	ldrb	r1, [r3, #6]
 8001db4:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <hanWanFontLoad+0x1ec>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	2316      	movs	r3, #22
 8001dbc:	fb02 f303 	mul.w	r3, r2, r3
 8001dc0:	33a0      	adds	r3, #160	; 0xa0
 8001dc2:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <hanWanFontLoad+0x1cc>)
 8001dc4:	8812      	ldrh	r2, [r2, #0]
 8001dc6:	441a      	add	r2, r3
 8001dc8:	89fb      	ldrh	r3, [r7, #14]
 8001dca:	482c      	ldr	r0, [pc, #176]	; (8001e7c <hanWanFontLoad+0x1f8>)
 8001dcc:	0152      	lsls	r2, r2, #5
 8001dce:	4413      	add	r3, r2
 8001dd0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	89fb      	ldrh	r3, [r7, #14]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	b2d1      	uxtb	r1, r2
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	460a      	mov	r2, r1
 8001de2:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8001de4:	89fb      	ldrh	r3, [r7, #14]
 8001de6:	3301      	adds	r3, #1
 8001de8:	81fb      	strh	r3, [r7, #14]
 8001dea:	89fb      	ldrh	r3, [r7, #14]
 8001dec:	2b1f      	cmp	r3, #31
 8001dee:	d9c6      	bls.n	8001d7e <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 8001df0:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <hanWanFontLoad+0x1d0>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d025      	beq.n	8001e44 <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8001df8:	2300      	movs	r3, #0
 8001dfa:	81fb      	strh	r3, [r7, #14]
 8001dfc:	e01f      	b.n	8001e3e <hanWanFontLoad+0x1ba>
 8001dfe:	89fb      	ldrh	r3, [r7, #14]
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	7999      	ldrb	r1, [r3, #6]
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <hanWanFontLoad+0x1f4>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	33f8      	adds	r3, #248	; 0xf8
 8001e16:	4a0f      	ldr	r2, [pc, #60]	; (8001e54 <hanWanFontLoad+0x1d0>)
 8001e18:	8812      	ldrh	r2, [r2, #0]
 8001e1a:	441a      	add	r2, r3
 8001e1c:	89fb      	ldrh	r3, [r7, #14]
 8001e1e:	4817      	ldr	r0, [pc, #92]	; (8001e7c <hanWanFontLoad+0x1f8>)
 8001e20:	0152      	lsls	r2, r2, #5
 8001e22:	4413      	add	r3, r2
 8001e24:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	89fb      	ldrh	r3, [r7, #14]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	b2d1      	uxtb	r1, r2
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	460a      	mov	r2, r1
 8001e36:	719a      	strb	r2, [r3, #6]
 8001e38:	89fb      	ldrh	r3, [r7, #14]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	81fb      	strh	r3, [r7, #14]
 8001e3e:	89fb      	ldrh	r3, [r7, #14]
 8001e40:	2b1f      	cmp	r3, #31
 8001e42:	d9dc      	bls.n	8001dfe <hanWanFontLoad+0x17a>
  }
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200004e4 	.word	0x200004e4
 8001e50:	200004e6 	.word	0x200004e6
 8001e54:	200004e8 	.word	0x200004e8
 8001e58:	0801c3a4 	.word	0x0801c3a4
 8001e5c:	0801c3c4 	.word	0x0801c3c4
 8001e60:	0801c3e4 	.word	0x0801c3e4
 8001e64:	0801c47c 	.word	0x0801c47c
 8001e68:	0801c464 	.word	0x0801c464
 8001e6c:	200004ea 	.word	0x200004ea
 8001e70:	200004ec 	.word	0x200004ec
 8001e74:	0801c494 	.word	0x0801c494
 8001e78:	200004ee 	.word	0x200004ee
 8001e7c:	0801e980 	.word	0x0801e980

08001e80 <hanUniFontLoad>:

// 유니코드를 기반으로 한글 폰트를 로드
void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint16_t utf16;

  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	031b      	lsls	r3, r3, #12
 8001e90:	b21a      	sxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3301      	adds	r3, #1
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	019b      	lsls	r3, r3, #6
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	b21b      	sxth	r3, r3
 8001eb8:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  utf16 -= 0xac00;
 8001eba:	89bb      	ldrh	r3, [r7, #12]
 8001ebc:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8001ec0:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 8001ec2:	89ba      	ldrh	r2, [r7, #12]
 8001ec4:	0893      	lsrs	r3, r2, #2
 8001ec6:	4973      	ldr	r1, [pc, #460]	; (8002094 <hanUniFontLoad+0x214>)
 8001ec8:	fba1 3103 	umull	r3, r1, r1, r3
 8001ecc:	460b      	mov	r3, r1
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	1a5b      	subs	r3, r3, r1
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	4b6f      	ldr	r3, [pc, #444]	; (8002098 <hanUniFontLoad+0x218>)
 8001eda:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 8001edc:	89bb      	ldrh	r3, [r7, #12]
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	4a6c      	ldr	r2, [pc, #432]	; (8002094 <hanUniFontLoad+0x214>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 8001ee8:	89b9      	ldrh	r1, [r7, #12]
 8001eea:	4b6c      	ldr	r3, [pc, #432]	; (800209c <hanUniFontLoad+0x21c>)
 8001eec:	fba3 2301 	umull	r2, r3, r3, r1
 8001ef0:	1aca      	subs	r2, r1, r3
 8001ef2:	0852      	lsrs	r2, r2, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	091a      	lsrs	r2, r3, #4
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	00da      	lsls	r2, r3, #3
 8001f00:	1ad2      	subs	r2, r2, r3
 8001f02:	1a8b      	subs	r3, r1, r2
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	4b66      	ldr	r3, [pc, #408]	; (80020a0 <hanUniFontLoad+0x220>)
 8001f08:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 8001f0a:	89ba      	ldrh	r2, [r7, #12]
 8001f0c:	4b63      	ldr	r3, [pc, #396]	; (800209c <hanUniFontLoad+0x21c>)
 8001f0e:	fba3 1302 	umull	r1, r3, r3, r2
 8001f12:	1ad2      	subs	r2, r2, r3
 8001f14:	0852      	lsrs	r2, r2, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	4b61      	ldr	r3, [pc, #388]	; (80020a4 <hanUniFontLoad+0x224>)
 8001f1e:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 8001f20:	4b60      	ldr	r3, [pc, #384]	; (80020a4 <hanUniFontLoad+0x224>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b60      	ldr	r3, [pc, #384]	; (80020a8 <hanUniFontLoad+0x228>)
 8001f28:	5c9b      	ldrb	r3, [r3, r2]
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	4b5d      	ldr	r3, [pc, #372]	; (80020a4 <hanUniFontLoad+0x224>)
 8001f2e:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 8001f30:	4b5b      	ldr	r3, [pc, #364]	; (80020a0 <hanUniFontLoad+0x220>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b5d      	ldr	r3, [pc, #372]	; (80020ac <hanUniFontLoad+0x22c>)
 8001f38:	5c9b      	ldrb	r3, [r3, r2]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	4b58      	ldr	r3, [pc, #352]	; (80020a0 <hanUniFontLoad+0x220>)
 8001f3e:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 8001f40:	4b55      	ldr	r3, [pc, #340]	; (8002098 <hanUniFontLoad+0x218>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b5a      	ldr	r3, [pc, #360]	; (80020b0 <hanUniFontLoad+0x230>)
 8001f48:	5c9b      	ldrb	r3, [r3, r2]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b52      	ldr	r3, [pc, #328]	; (8002098 <hanUniFontLoad+0x218>)
 8001f4e:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8001f50:	4b51      	ldr	r3, [pc, #324]	; (8002098 <hanUniFontLoad+0x218>)
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <hanUniFontLoad+0xe6>
 8001f58:	4b51      	ldr	r3, [pc, #324]	; (80020a0 <hanUniFontLoad+0x220>)
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b55      	ldr	r3, [pc, #340]	; (80020b4 <hanUniFontLoad+0x234>)
 8001f60:	5c9b      	ldrb	r3, [r3, r2]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	e005      	b.n	8001f72 <hanUniFontLoad+0xf2>
 8001f66:	4b4e      	ldr	r3, [pc, #312]	; (80020a0 <hanUniFontLoad+0x220>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b52      	ldr	r3, [pc, #328]	; (80020b8 <hanUniFontLoad+0x238>)
 8001f6e:	5c9b      	ldrb	r3, [r3, r2]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4a52      	ldr	r2, [pc, #328]	; (80020bc <hanUniFontLoad+0x23c>)
 8001f74:	8013      	strh	r3, [r2, #0]

  //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8001f76:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <hanUniFontLoad+0x224>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <hanUniFontLoad+0x112>
 8001f7e:	4b49      	ldr	r3, [pc, #292]	; (80020a4 <hanUniFontLoad+0x224>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d005      	beq.n	8001f92 <hanUniFontLoad+0x112>
 8001f86:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <hanUniFontLoad+0x224>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d001      	beq.n	8001f92 <hanUniFontLoad+0x112>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <hanUniFontLoad+0x114>
 8001f92:	2300      	movs	r3, #0
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	4a40      	ldr	r2, [pc, #256]	; (8002098 <hanUniFontLoad+0x218>)
 8001f98:	8812      	ldrh	r2, [r2, #0]
 8001f9a:	2a00      	cmp	r2, #0
 8001f9c:	d001      	beq.n	8001fa2 <hanUniFontLoad+0x122>
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	e000      	b.n	8001fa4 <hanUniFontLoad+0x124>
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	4413      	add	r3, r2
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4b45      	ldr	r3, [pc, #276]	; (80020c0 <hanUniFontLoad+0x240>)
 8001faa:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8001fac:	4b3c      	ldr	r3, [pc, #240]	; (80020a0 <hanUniFontLoad+0x220>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <hanUniFontLoad+0x244>)
 8001fb4:	5c9b      	ldrb	r3, [r3, r2]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <hanUniFontLoad+0x248>)
 8001fba:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	81fb      	strh	r3, [r7, #14]
 8001fc0:	e035      	b.n	800202e <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 8001fc2:	4b3e      	ldr	r3, [pc, #248]	; (80020bc <hanUniFontLoad+0x23c>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <hanUniFontLoad+0x224>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	441a      	add	r2, r3
 8001fd8:	89fb      	ldrh	r3, [r7, #14]
 8001fda:	493c      	ldr	r1, [pc, #240]	; (80020cc <hanUniFontLoad+0x24c>)
 8001fdc:	0152      	lsls	r2, r2, #5
 8001fde:	4413      	add	r3, r2
 8001fe0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001fe4:	89fb      	ldrh	r3, [r7, #14]
 8001fe6:	b2d1      	uxtb	r1, r2
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	460a      	mov	r2, r1
 8001fee:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 8001ff0:	89fb      	ldrh	r3, [r7, #14]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	7999      	ldrb	r1, [r3, #6]
 8001ff8:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <hanUniFontLoad+0x240>)
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2316      	movs	r3, #22
 8002000:	fb02 f303 	mul.w	r3, r2, r3
 8002004:	33a0      	adds	r3, #160	; 0xa0
 8002006:	4a26      	ldr	r2, [pc, #152]	; (80020a0 <hanUniFontLoad+0x220>)
 8002008:	8812      	ldrh	r2, [r2, #0]
 800200a:	441a      	add	r2, r3
 800200c:	89fb      	ldrh	r3, [r7, #14]
 800200e:	482f      	ldr	r0, [pc, #188]	; (80020cc <hanUniFontLoad+0x24c>)
 8002010:	0152      	lsls	r2, r2, #5
 8002012:	4413      	add	r3, r2
 8002014:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	89fb      	ldrh	r3, [r7, #14]
 800201c:	430a      	orrs	r2, r1
 800201e:	b2d1      	uxtb	r1, r2
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	4413      	add	r3, r2
 8002024:	460a      	mov	r2, r1
 8002026:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8002028:	89fb      	ldrh	r3, [r7, #14]
 800202a:	3301      	adds	r3, #1
 800202c:	81fb      	strh	r3, [r7, #14]
 800202e:	89fb      	ldrh	r3, [r7, #14]
 8002030:	2b1f      	cmp	r3, #31
 8002032:	d9c6      	bls.n	8001fc2 <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 8002034:	4b18      	ldr	r3, [pc, #96]	; (8002098 <hanUniFontLoad+0x218>)
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d025      	beq.n	8002088 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 800203c:	2300      	movs	r3, #0
 800203e:	81fb      	strh	r3, [r7, #14]
 8002040:	e01f      	b.n	8002082 <hanUniFontLoad+0x202>
 8002042:	89fb      	ldrh	r3, [r7, #14]
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	7999      	ldrb	r1, [r3, #6]
 800204a:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <hanUniFontLoad+0x248>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	33f8      	adds	r3, #248	; 0xf8
 800205a:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <hanUniFontLoad+0x218>)
 800205c:	8812      	ldrh	r2, [r2, #0]
 800205e:	441a      	add	r2, r3
 8002060:	89fb      	ldrh	r3, [r7, #14]
 8002062:	481a      	ldr	r0, [pc, #104]	; (80020cc <hanUniFontLoad+0x24c>)
 8002064:	0152      	lsls	r2, r2, #5
 8002066:	4413      	add	r3, r2
 8002068:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	89fb      	ldrh	r3, [r7, #14]
 8002070:	430a      	orrs	r2, r1
 8002072:	b2d1      	uxtb	r1, r2
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	4413      	add	r3, r2
 8002078:	460a      	mov	r2, r1
 800207a:	719a      	strb	r2, [r3, #6]
 800207c:	89fb      	ldrh	r3, [r7, #14]
 800207e:	3301      	adds	r3, #1
 8002080:	81fb      	strh	r3, [r7, #14]
 8002082:	89fb      	ldrh	r3, [r7, #14]
 8002084:	2b1f      	cmp	r3, #31
 8002086:	d9dc      	bls.n	8002042 <hanUniFontLoad+0x1c2>
  }
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	24924925 	.word	0x24924925
 8002098:	200004f0 	.word	0x200004f0
 800209c:	86186187 	.word	0x86186187
 80020a0:	200004f2 	.word	0x200004f2
 80020a4:	200004f4 	.word	0x200004f4
 80020a8:	0801c404 	.word	0x0801c404
 80020ac:	0801c424 	.word	0x0801c424
 80020b0:	0801c444 	.word	0x0801c444
 80020b4:	0801c47c 	.word	0x0801c47c
 80020b8:	0801c464 	.word	0x0801c464
 80020bc:	200004f6 	.word	0x200004f6
 80020c0:	200004f8 	.word	0x200004f8
 80020c4:	0801c494 	.word	0x0801c494
 80020c8:	200004fa 	.word	0x200004fa
 80020cc:	0801e980 	.word	0x0801e980

080020d0 <hanEngFontLoad>:

// 영문 코드를 기반으로 영문 폰트를 로드
void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 80020e0:	7b7b      	ldrb	r3, [r7, #13]
 80020e2:	3b20      	subs	r3, #32
 80020e4:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 80020e6:	2300      	movs	r3, #0
 80020e8:	81fb      	strh	r3, [r7, #14]
 80020ea:	e00f      	b.n	800210c <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 80020ec:	7b7a      	ldrb	r2, [r7, #13]
 80020ee:	89fb      	ldrh	r3, [r7, #14]
 80020f0:	490b      	ldr	r1, [pc, #44]	; (8002120 <hanEngFontLoad+0x50>)
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	4413      	add	r3, r2
 80020f6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80020fa:	89fb      	ldrh	r3, [r7, #14]
 80020fc:	b2d1      	uxtb	r1, r2
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	4413      	add	r3, r2
 8002102:	460a      	mov	r2, r1
 8002104:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	3301      	adds	r3, #1
 800210a:	81fb      	strh	r3, [r7, #14]
 800210c:	89fb      	ldrh	r3, [r7, #14]
 800210e:	2b0f      	cmp	r3, #15
 8002110:	d9ec      	bls.n	80020ec <hanEngFontLoad+0x1c>
  }
}
 8002112:	bf00      	nop
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	0801aba4 	.word	0x0801aba4

08002124 <hanCnvCodeWan2Johab>:

// 완성형 코드를 조합형 코드로 변환
uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 800213a:	89fb      	ldrh	r3, [r7, #14]
 800213c:	3bb0      	subs	r3, #176	; 0xb0
 800213e:	225e      	movs	r2, #94	; 0x5e
 8002140:	fb03 f202 	mul.w	r2, r3, r2
 8002144:	89bb      	ldrh	r3, [r7, #12]
 8002146:	3ba1      	subs	r3, #161	; 0xa1
 8002148:	4413      	add	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 800214c:	4a05      	ldr	r2, [pc, #20]	; (8002164 <hanCnvCodeWan2Johab+0x40>)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002154:	b29b      	uxth	r3, r3
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	0801c4c0 	.word	0x0801c4c0

08002168 <TransferDoneISR>:
static void st7735SetRotation(uint8_t m);
static bool st7735Reset(void);


static void TransferDoneISR(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  if (is_write_frame == true)
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <TransferDoneISR+0x30>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00d      	beq.n	8002192 <TransferDoneISR+0x2a>
  {
    is_write_frame = false;
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <TransferDoneISR+0x30>)
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 800217c:	2101      	movs	r1, #1
 800217e:	2002      	movs	r0, #2
 8002180:	f001 fcca 	bl	8003b18 <gpioPinWrite>

    if (frameCallBack != NULL)
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <TransferDoneISR+0x34>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <TransferDoneISR+0x2a>
    {
      frameCallBack();
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <TransferDoneISR+0x34>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4798      	blx	r3
    }
  }
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000504 	.word	0x20000504
 800219c:	20000500 	.word	0x20000500

080021a0 <st7735Init>:


bool st7735Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
  bool ret;

  ret = st7735Reset();
 80021a6:	f000 f835 	bl	8002214 <st7735Reset>
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]

  return ret;
 80021ae:	79fb      	ldrb	r3, [r7, #7]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <st7735InitDriver>:

bool st7735InitDriver(lcd_driver_t *p_driver)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  p_driver->init = st7735Init;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <st7735InitDriver+0x40>)
 80021c4:	601a      	str	r2, [r3, #0]
  p_driver->reset = st7735Reset;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <st7735InitDriver+0x44>)
 80021ca:	605a      	str	r2, [r3, #4]
  p_driver->setWindow = st7735SetWindow;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <st7735InitDriver+0x48>)
 80021d0:	609a      	str	r2, [r3, #8]
  p_driver->getWidth = st7735GetWidth;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <st7735InitDriver+0x4c>)
 80021d6:	60da      	str	r2, [r3, #12]
  p_driver->getHeight = st7735GetHeight;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <st7735InitDriver+0x50>)
 80021dc:	611a      	str	r2, [r3, #16]
  p_driver->setCallBack = st7735SetCallBack;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a0a      	ldr	r2, [pc, #40]	; (800220c <st7735InitDriver+0x54>)
 80021e2:	615a      	str	r2, [r3, #20]
  p_driver->sendBuffer = st7735SendBuffer;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <st7735InitDriver+0x58>)
 80021e8:	619a      	str	r2, [r3, #24]
  return true;
 80021ea:	2301      	movs	r3, #1
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	080021a1 	.word	0x080021a1
 80021fc:	08002215 	.word	0x08002215
 8002200:	080024d9 	.word	0x080024d9
 8002204:	0800228d 	.word	0x0800228d
 8002208:	0800229d 	.word	0x0800229d
 800220c:	0800272d 	.word	0x0800272d
 8002210:	080026e1 	.word	0x080026e1

08002214 <st7735Reset>:

bool st7735Reset(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af02      	add	r7, sp, #8
  spiBegin(spi_ch);
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <st7735Reset+0x70>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f003 fbf8 	bl	8005a14 <spiBegin>
  spiSetDataMode(spi_ch, SPI_MODE0);
 8002224:	4b17      	ldr	r3, [pc, #92]	; (8002284 <st7735Reset+0x70>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f003 fc8e 	bl	8005b4c <spiSetDataMode>

  spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 8002230:	4b14      	ldr	r3, [pc, #80]	; (8002284 <st7735Reset+0x70>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	4914      	ldr	r1, [pc, #80]	; (8002288 <st7735Reset+0x74>)
 8002236:	4618      	mov	r0, r3
 8002238:	f003 fdbe 	bl	8005db8 <spiAttachTxInterrupt>

  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 800223c:	2100      	movs	r1, #0
 800223e:	2001      	movs	r0, #1
 8002240:	f001 fc6a 	bl	8003b18 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_DC,  _DEF_HIGH);
 8002244:	2101      	movs	r1, #1
 8002246:	2003      	movs	r0, #3
 8002248:	f001 fc66 	bl	8003b18 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS,  _DEF_HIGH);
 800224c:	2101      	movs	r1, #1
 800224e:	2002      	movs	r0, #2
 8002250:	f001 fc62 	bl	8003b18 <gpioPinWrite>
  delay(10);
 8002254:	200a      	movs	r0, #10
 8002256:	f7ff fb9e 	bl	8001996 <delay>

  st7735InitRegs();
 800225a:	f000 f863 	bl	8002324 <st7735InitRegs>


  st7735SetRotation(3);
 800225e:	2003      	movs	r0, #3
 8002260:	f000 f910 	bl	8002484 <st7735SetRotation>
  st7735FillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, black);
 8002264:	2300      	movs	r3, #0
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2350      	movs	r3, #80	; 0x50
 800226a:	22a0      	movs	r2, #160	; 0xa0
 800226c:	2100      	movs	r1, #0
 800226e:	2000      	movs	r0, #0
 8002270:	f000 f97e 	bl	8002570 <st7735FillRect>
  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8002274:	2100      	movs	r1, #0
 8002276:	2001      	movs	r0, #1
 8002278:	f001 fc4e 	bl	8003b18 <gpioPinWrite>
  return true;
 800227c:	2301      	movs	r3, #1
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200004fc 	.word	0x200004fc
 8002288:	08002169 	.word	0x08002169

0800228c <st7735GetWidth>:

uint16_t st7735GetWidth(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return HW_LCD_WIDTH;
 8002290:	23a0      	movs	r3, #160	; 0xa0
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <st7735GetHeight>:

uint16_t st7735GetHeight(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return HW_LCD_HEIGHT;
 80022a0:	2350      	movs	r3, #80	; 0x50
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <writecommand>:

void writecommand(uint8_t c)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_LOW);
 80022b6:	2100      	movs	r1, #0
 80022b8:	2003      	movs	r0, #3
 80022ba:	f001 fc2d 	bl	8003b18 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 80022be:	2100      	movs	r1, #0
 80022c0:	2002      	movs	r0, #2
 80022c2:	f001 fc29 	bl	8003b18 <gpioPinWrite>

  spiTransfer8(spi_ch, c);
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <writecommand+0x38>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	79fa      	ldrb	r2, [r7, #7]
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f003 fcd0 	bl	8005c74 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80022d4:	2101      	movs	r1, #1
 80022d6:	2002      	movs	r0, #2
 80022d8:	f001 fc1e 	bl	8003b18 <gpioPinWrite>
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200004fc 	.word	0x200004fc

080022e8 <writedata>:

void writedata(uint8_t d)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 80022f2:	2101      	movs	r1, #1
 80022f4:	2003      	movs	r0, #3
 80022f6:	f001 fc0f 	bl	8003b18 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 80022fa:	2100      	movs	r1, #0
 80022fc:	2002      	movs	r0, #2
 80022fe:	f001 fc0b 	bl	8003b18 <gpioPinWrite>

  spiTransfer8(spi_ch, d);
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <writedata+0x38>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	79fa      	ldrb	r2, [r7, #7]
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f003 fcb2 	bl	8005c74 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8002310:	2101      	movs	r1, #1
 8002312:	2002      	movs	r0, #2
 8002314:	f001 fc00 	bl	8003b18 <gpioPinWrite>
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	200004fc 	.word	0x200004fc

08002324 <st7735InitRegs>:

void st7735InitRegs(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  writecommand(ST7735_SWRESET); //  1: Software reset, 0 args, w/delay
 8002328:	2001      	movs	r0, #1
 800232a:	f7ff ffbf 	bl	80022ac <writecommand>
  delay(10);
 800232e:	200a      	movs	r0, #10
 8002330:	f7ff fb31 	bl	8001996 <delay>

  writecommand(ST7735_SLPOUT);  //  2: Out of sleep mode, 0 args, w/delay
 8002334:	2011      	movs	r0, #17
 8002336:	f7ff ffb9 	bl	80022ac <writecommand>
  delay(10);
 800233a:	200a      	movs	r0, #10
 800233c:	f7ff fb2b 	bl	8001996 <delay>

  writecommand(ST7735_FRMCTR1); //  3: Frame rate ctrl - normal mode, 3 args:
 8002340:	20b1      	movs	r0, #177	; 0xb1
 8002342:	f7ff ffb3 	bl	80022ac <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8002346:	2001      	movs	r0, #1
 8002348:	f7ff ffce 	bl	80022e8 <writedata>
  writedata(0x2C);
 800234c:	202c      	movs	r0, #44	; 0x2c
 800234e:	f7ff ffcb 	bl	80022e8 <writedata>
  writedata(0x2D);
 8002352:	202d      	movs	r0, #45	; 0x2d
 8002354:	f7ff ffc8 	bl	80022e8 <writedata>

  writecommand(ST7735_FRMCTR2); //  4: Frame rate control - idle mode, 3 args:
 8002358:	20b2      	movs	r0, #178	; 0xb2
 800235a:	f7ff ffa7 	bl	80022ac <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 800235e:	2001      	movs	r0, #1
 8002360:	f7ff ffc2 	bl	80022e8 <writedata>
  writedata(0x2C);
 8002364:	202c      	movs	r0, #44	; 0x2c
 8002366:	f7ff ffbf 	bl	80022e8 <writedata>
  writedata(0x2D);
 800236a:	202d      	movs	r0, #45	; 0x2d
 800236c:	f7ff ffbc 	bl	80022e8 <writedata>

  writecommand(ST7735_FRMCTR3); //  5: Frame rate ctrl - partial mode, 6 args:
 8002370:	20b3      	movs	r0, #179	; 0xb3
 8002372:	f7ff ff9b 	bl	80022ac <writecommand>
  writedata(0x01);              //     Dot inversion mode
 8002376:	2001      	movs	r0, #1
 8002378:	f7ff ffb6 	bl	80022e8 <writedata>
  writedata(0x2C);
 800237c:	202c      	movs	r0, #44	; 0x2c
 800237e:	f7ff ffb3 	bl	80022e8 <writedata>
  writedata(0x2D);
 8002382:	202d      	movs	r0, #45	; 0x2d
 8002384:	f7ff ffb0 	bl	80022e8 <writedata>
  writedata(0x01);              //     Line inversion mode
 8002388:	2001      	movs	r0, #1
 800238a:	f7ff ffad 	bl	80022e8 <writedata>
  writedata(0x2C);
 800238e:	202c      	movs	r0, #44	; 0x2c
 8002390:	f7ff ffaa 	bl	80022e8 <writedata>
  writedata(0x2D);
 8002394:	202d      	movs	r0, #45	; 0x2d
 8002396:	f7ff ffa7 	bl	80022e8 <writedata>

  writecommand(ST7735_INVCTR);  //  6: Display inversion ctrl, 1 arg, no delay:
 800239a:	20b4      	movs	r0, #180	; 0xb4
 800239c:	f7ff ff86 	bl	80022ac <writecommand>
  writedata(0x07);              //     No inversion
 80023a0:	2007      	movs	r0, #7
 80023a2:	f7ff ffa1 	bl	80022e8 <writedata>

  writecommand(ST7735_PWCTR1);  //  7: Power control, 3 args, no delay:
 80023a6:	20c0      	movs	r0, #192	; 0xc0
 80023a8:	f7ff ff80 	bl	80022ac <writecommand>
  writedata(0xA2);
 80023ac:	20a2      	movs	r0, #162	; 0xa2
 80023ae:	f7ff ff9b 	bl	80022e8 <writedata>
  writedata(0x02);              //     -4.6V
 80023b2:	2002      	movs	r0, #2
 80023b4:	f7ff ff98 	bl	80022e8 <writedata>
  writedata(0x84);              //     AUTO mode
 80023b8:	2084      	movs	r0, #132	; 0x84
 80023ba:	f7ff ff95 	bl	80022e8 <writedata>

  writecommand(ST7735_PWCTR2);  //  8: Power control, 1 arg, no delay:
 80023be:	20c1      	movs	r0, #193	; 0xc1
 80023c0:	f7ff ff74 	bl	80022ac <writecommand>
  writedata(0xC5);              //     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 80023c4:	20c5      	movs	r0, #197	; 0xc5
 80023c6:	f7ff ff8f 	bl	80022e8 <writedata>

  writecommand(ST7735_PWCTR3);  //  9: Power control, 2 args, no delay:
 80023ca:	20c2      	movs	r0, #194	; 0xc2
 80023cc:	f7ff ff6e 	bl	80022ac <writecommand>
  writedata(0x0A);              //     Opamp current small
 80023d0:	200a      	movs	r0, #10
 80023d2:	f7ff ff89 	bl	80022e8 <writedata>
  writedata(0x00);              //     Boost frequency
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7ff ff86 	bl	80022e8 <writedata>

  writecommand(ST7735_PWCTR4);  // 10: Power control, 2 args, no delay:
 80023dc:	20c3      	movs	r0, #195	; 0xc3
 80023de:	f7ff ff65 	bl	80022ac <writecommand>
  writedata(0x8A);              //     BCLK/2, Opamp current small & Medium low
 80023e2:	208a      	movs	r0, #138	; 0x8a
 80023e4:	f7ff ff80 	bl	80022e8 <writedata>
  writedata(0x2A);
 80023e8:	202a      	movs	r0, #42	; 0x2a
 80023ea:	f7ff ff7d 	bl	80022e8 <writedata>

  writecommand(ST7735_PWCTR5);  // 11: Power control, 2 args, no delay:
 80023ee:	20c4      	movs	r0, #196	; 0xc4
 80023f0:	f7ff ff5c 	bl	80022ac <writecommand>
  writedata(0x8A);
 80023f4:	208a      	movs	r0, #138	; 0x8a
 80023f6:	f7ff ff77 	bl	80022e8 <writedata>
  writedata(0xEE);
 80023fa:	20ee      	movs	r0, #238	; 0xee
 80023fc:	f7ff ff74 	bl	80022e8 <writedata>

  writecommand(ST7735_VMCTR1);  // 12: Power control, 1 arg, no delay:
 8002400:	20c5      	movs	r0, #197	; 0xc5
 8002402:	f7ff ff53 	bl	80022ac <writecommand>
  writedata(0x0E);
 8002406:	200e      	movs	r0, #14
 8002408:	f7ff ff6e 	bl	80022e8 <writedata>

#if HW_ST7735_MODEL == 0
  writecommand(ST7735_INVON);   // 13: Don't invert display, no args, no delay
 800240c:	2021      	movs	r0, #33	; 0x21
 800240e:	f7ff ff4d 	bl	80022ac <writecommand>
#else
  writecommand(ST7735_INVOFF);  // 13: Don't invert display, no args, no delay
#endif

  writecommand(ST7735_MADCTL);  // 14: Memory access control (directions), 1 arg:
 8002412:	2036      	movs	r0, #54	; 0x36
 8002414:	f7ff ff4a 	bl	80022ac <writecommand>
  writedata(0xC8);              //     row addr/col addr, bottom to top refresh
 8002418:	20c8      	movs	r0, #200	; 0xc8
 800241a:	f7ff ff65 	bl	80022e8 <writedata>

  writecommand(ST7735_COLMOD);  // 15: set color mode, 1 arg, no delay:
 800241e:	203a      	movs	r0, #58	; 0x3a
 8002420:	f7ff ff44 	bl	80022ac <writecommand>
  writedata(0x05);              //     16-bit color
 8002424:	2005      	movs	r0, #5
 8002426:	f7ff ff5f 	bl	80022e8 <writedata>


  writecommand(ST7735_CASET);   //  1: Column addr set, 4 args, no delay:
 800242a:	202a      	movs	r0, #42	; 0x2a
 800242c:	f7ff ff3e 	bl	80022ac <writecommand>
  writedata(0x00);
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff ff59 	bl	80022e8 <writedata>
  writedata(0x00);              //     XSTART = 0
 8002436:	2000      	movs	r0, #0
 8002438:	f7ff ff56 	bl	80022e8 <writedata>
  writedata(0x00);
 800243c:	2000      	movs	r0, #0
 800243e:	f7ff ff53 	bl	80022e8 <writedata>
  writedata(HW_LCD_WIDTH-1);    //     XEND = 159
 8002442:	209f      	movs	r0, #159	; 0x9f
 8002444:	f7ff ff50 	bl	80022e8 <writedata>

  writecommand(ST7735_RASET);   //  2: Row addr set, 4 args, no delay:
 8002448:	202b      	movs	r0, #43	; 0x2b
 800244a:	f7ff ff2f 	bl	80022ac <writecommand>
  writedata(0x00);
 800244e:	2000      	movs	r0, #0
 8002450:	f7ff ff4a 	bl	80022e8 <writedata>
  writedata(0x00);              //     XSTART = 0
 8002454:	2000      	movs	r0, #0
 8002456:	f7ff ff47 	bl	80022e8 <writedata>
  writedata(0x00);
 800245a:	2000      	movs	r0, #0
 800245c:	f7ff ff44 	bl	80022e8 <writedata>
  writedata(HW_LCD_HEIGHT-1);   //     XEND = 79
 8002460:	204f      	movs	r0, #79	; 0x4f
 8002462:	f7ff ff41 	bl	80022e8 <writedata>


  writecommand(ST7735_NORON);   //  3: Normal display on, no args, w/delay
 8002466:	2013      	movs	r0, #19
 8002468:	f7ff ff20 	bl	80022ac <writecommand>
  delay(10);
 800246c:	200a      	movs	r0, #10
 800246e:	f7ff fa92 	bl	8001996 <delay>
  writecommand(ST7735_DISPON);  //  4: Main screen turn on, no args w/delay
 8002472:	2029      	movs	r0, #41	; 0x29
 8002474:	f7ff ff1a 	bl	80022ac <writecommand>
  delay(10);
 8002478:	200a      	movs	r0, #10
 800247a:	f7ff fa8c 	bl	8001996 <delay>
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <st7735SetRotation>:

void st7735SetRotation(uint8_t mode)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  writecommand(ST7735_MADCTL);
 800248e:	2036      	movs	r0, #54	; 0x36
 8002490:	f7ff ff0c 	bl	80022ac <writecommand>

  switch (mode)
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d81a      	bhi.n	80024d0 <st7735SetRotation+0x4c>
 800249a:	a201      	add	r2, pc, #4	; (adr r2, 80024a0 <st7735SetRotation+0x1c>)
 800249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a0:	080024b1 	.word	0x080024b1
 80024a4:	080024b9 	.word	0x080024b9
 80024a8:	080024c1 	.word	0x080024c1
 80024ac:	080024c9 	.word	0x080024c9
  {
   case 0:
     writedata(MADCTL_MX | MADCTL_MY | MADCTL_BGR);
 80024b0:	20c8      	movs	r0, #200	; 0xc8
 80024b2:	f7ff ff19 	bl	80022e8 <writedata>
     break;
 80024b6:	e00b      	b.n	80024d0 <st7735SetRotation+0x4c>

   case 1:
     writedata(MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 80024b8:	20a8      	movs	r0, #168	; 0xa8
 80024ba:	f7ff ff15 	bl	80022e8 <writedata>
     break;
 80024be:	e007      	b.n	80024d0 <st7735SetRotation+0x4c>

  case 2:
    writedata(MADCTL_BGR);
 80024c0:	2008      	movs	r0, #8
 80024c2:	f7ff ff11 	bl	80022e8 <writedata>
    break;
 80024c6:	e003      	b.n	80024d0 <st7735SetRotation+0x4c>

   case 3:
     writedata(MADCTL_MX | MADCTL_MV | MADCTL_BGR);
 80024c8:	2068      	movs	r0, #104	; 0x68
 80024ca:	f7ff ff0d 	bl	80022e8 <writedata>
     break;
 80024ce:	bf00      	nop
  }
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <st7735SetWindow>:

void st7735SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  spiSetBitWidth(spi_ch, 8);
 80024e6:	4b21      	ldr	r3, [pc, #132]	; (800256c <st7735SetWindow+0x94>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2108      	movs	r1, #8
 80024ec:	4618      	mov	r0, r3
 80024ee:	f003 fb91 	bl	8005c14 <spiSetBitWidth>

  writecommand(ST7735_CASET); // Column addr set
 80024f2:	202a      	movs	r0, #42	; 0x2a
 80024f4:	f7ff feda 	bl	80022ac <writecommand>
  writedata(0x00);
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7ff fef5 	bl	80022e8 <writedata>
  writedata(x0+colstart);     // XSTART
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	2301      	movs	r3, #1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	4413      	add	r3, r2
 8002508:	b2db      	uxtb	r3, r3
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff feec 	bl	80022e8 <writedata>
  writedata(0x00);
 8002510:	2000      	movs	r0, #0
 8002512:	f7ff fee9 	bl	80022e8 <writedata>
  writedata(x1+colstart);     // XEND
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	2301      	movs	r3, #1
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4413      	add	r3, r2
 8002520:	b2db      	uxtb	r3, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fee0 	bl	80022e8 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 8002528:	202b      	movs	r0, #43	; 0x2b
 800252a:	f7ff febf 	bl	80022ac <writecommand>
  writedata(0x00);
 800252e:	2000      	movs	r0, #0
 8002530:	f7ff feda 	bl	80022e8 <writedata>
  writedata(y0+rowstart);     // YSTART
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	231a      	movs	r3, #26
 800253a:	b2db      	uxtb	r3, r3
 800253c:	4413      	add	r3, r2
 800253e:	b2db      	uxtb	r3, r3
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fed1 	bl	80022e8 <writedata>
  writedata(0x00);
 8002546:	2000      	movs	r0, #0
 8002548:	f7ff fece 	bl	80022e8 <writedata>
  writedata(y1+rowstart);     // YEND
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	b2da      	uxtb	r2, r3
 8002550:	231a      	movs	r3, #26
 8002552:	b2db      	uxtb	r3, r3
 8002554:	4413      	add	r3, r2
 8002556:	b2db      	uxtb	r3, r3
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fec5 	bl	80022e8 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 800255e:	202c      	movs	r0, #44	; 0x2c
 8002560:	f7ff fea4 	bl	80022ac <writecommand>
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	200004fc 	.word	0x200004fc

08002570 <st7735FillRect>:

void st7735FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)
{
 8002570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002574:	b089      	sub	sp, #36	; 0x24
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	466b      	mov	r3, sp
 8002582:	461e      	mov	r6, r3
  uint16_t line_buf[w];
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	1e4b      	subs	r3, r1, #1
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	460a      	mov	r2, r1
 800258c:	2300      	movs	r3, #0
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800259e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80025a2:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80025a6:	460a      	mov	r2, r1
 80025a8:	2300      	movs	r3, #0
 80025aa:	4614      	mov	r4, r2
 80025ac:	461d      	mov	r5, r3
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	012b      	lsls	r3, r5, #4
 80025b8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80025bc:	0122      	lsls	r2, r4, #4
 80025be:	460b      	mov	r3, r1
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	3307      	adds	r3, #7
 80025c4:	08db      	lsrs	r3, r3, #3
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	ebad 0d03 	sub.w	sp, sp, r3
 80025cc:	466b      	mov	r3, sp
 80025ce:	3301      	adds	r3, #1
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	613b      	str	r3, [r7, #16]

  // Clipping
  if ((x >= _width) || (y >= _height)) return;
 80025d6:	22a0      	movs	r2, #160	; 0xa0
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4293      	cmp	r3, r2
 80025dc:	da79      	bge.n	80026d2 <st7735FillRect+0x162>
 80025de:	2250      	movs	r2, #80	; 0x50
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4293      	cmp	r3, r2
 80025e4:	da75      	bge.n	80026d2 <st7735FillRect+0x162>

  if (x < 0) { w += x; x = 0; }
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	da05      	bge.n	80025f8 <st7735FillRect+0x88>
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4413      	add	r3, r2
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
  if (y < 0) { h += y; y = 0; }
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	da05      	bge.n	800260a <st7735FillRect+0x9a>
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4413      	add	r3, r2
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]

  if ((x + w) > _width)  w = _width  - x;
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	22a0      	movs	r2, #160	; 0xa0
 8002612:	4293      	cmp	r3, r2
 8002614:	dd03      	ble.n	800261e <st7735FillRect+0xae>
 8002616:	22a0      	movs	r2, #160	; 0xa0
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	607b      	str	r3, [r7, #4]
  if ((y + h) > _height) h = _height - y;
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	4413      	add	r3, r2
 8002624:	2250      	movs	r2, #80	; 0x50
 8002626:	4293      	cmp	r3, r2
 8002628:	dd03      	ble.n	8002632 <st7735FillRect+0xc2>
 800262a:	2250      	movs	r2, #80	; 0x50
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	603b      	str	r3, [r7, #0]

  if ((w < 1) || (h < 1)) return;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	dd4b      	ble.n	80026d0 <st7735FillRect+0x160>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	dd48      	ble.n	80026d0 <st7735FillRect+0x160>


  st7735SetWindow(x, y, x + w - 1, y + h - 1);
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	1e59      	subs	r1, r3, #1
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	4413      	add	r3, r2
 800264c:	3b01      	subs	r3, #1
 800264e:	460a      	mov	r2, r1
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f7ff ff40 	bl	80024d8 <st7735SetWindow>
  spiSetBitWidth(spi_ch, 16);
 8002658:	4b20      	ldr	r3, [pc, #128]	; (80026dc <st7735FillRect+0x16c>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2110      	movs	r1, #16
 800265e:	4618      	mov	r0, r3
 8002660:	f003 fad8 	bl	8005c14 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8002664:	2101      	movs	r1, #1
 8002666:	2003      	movs	r0, #3
 8002668:	f001 fa56 	bl	8003b18 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 800266c:	2100      	movs	r1, #0
 800266e:	2002      	movs	r0, #2
 8002670:	f001 fa52 	bl	8003b18 <gpioPinWrite>

  for (int i=0; i<w; i++)
 8002674:	2300      	movs	r3, #0
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	e008      	b.n	800268c <st7735FillRect+0x11c>
  {
    line_buf[i] = color;
 800267a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800267c:	b299      	uxth	r1, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i=0; i<w; i++)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3301      	adds	r3, #1
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	429a      	cmp	r2, r3
 8002692:	dbf2      	blt.n	800267a <st7735FillRect+0x10a>
  }
  for (int i=0; i<h; i++)
 8002694:	2300      	movs	r3, #0
 8002696:	61bb      	str	r3, [r7, #24]
 8002698:	e00e      	b.n	80026b8 <st7735FillRect+0x148>
  {
    if (spiDmaTxTransfer(_DEF_SPI1, (void *)line_buf, w, 10) != true)
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	230a      	movs	r3, #10
 800269e:	6939      	ldr	r1, [r7, #16]
 80026a0:	2000      	movs	r0, #0
 80026a2:	f003 fb39 	bl	8005d18 <spiDmaTxTransfer>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f083 0301 	eor.w	r3, r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d107      	bne.n	80026c2 <st7735FillRect+0x152>
  for (int i=0; i<h; i++)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	dbec      	blt.n	800269a <st7735FillRect+0x12a>
 80026c0:	e000      	b.n	80026c4 <st7735FillRect+0x154>
    {
      break;
 80026c2:	bf00      	nop
    }
  }
  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80026c4:	2101      	movs	r1, #1
 80026c6:	2002      	movs	r0, #2
 80026c8:	f001 fa26 	bl	8003b18 <gpioPinWrite>
 80026cc:	46b5      	mov	sp, r6
 80026ce:	e001      	b.n	80026d4 <st7735FillRect+0x164>
  if ((w < 1) || (h < 1)) return;
 80026d0:	bf00      	nop
  if ((x >= _width) || (y >= _height)) return;
 80026d2:	46b5      	mov	sp, r6
}
 80026d4:	3724      	adds	r7, #36	; 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026dc:	200004fc 	.word	0x200004fc

080026e0 <st7735SendBuffer>:

bool st7735SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  is_write_frame = true;
 80026ec:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <st7735SendBuffer+0x44>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]

  spiSetBitWidth(spi_ch, 16);
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <st7735SendBuffer+0x48>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2110      	movs	r1, #16
 80026f8:	4618      	mov	r0, r3
 80026fa:	f003 fa8b 	bl	8005c14 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 80026fe:	2101      	movs	r1, #1
 8002700:	2003      	movs	r0, #3
 8002702:	f001 fa09 	bl	8003b18 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8002706:	2100      	movs	r1, #0
 8002708:	2002      	movs	r0, #2
 800270a:	f001 fa05 	bl	8003b18 <gpioPinWrite>

  spiDmaTxTransfer(_DEF_SPI1, (void *)p_data, length, 0);
 800270e:	2300      	movs	r3, #0
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	68f9      	ldr	r1, [r7, #12]
 8002714:	2000      	movs	r0, #0
 8002716:	f003 faff 	bl	8005d18 <spiDmaTxTransfer>
  return true;
 800271a:	2301      	movs	r3, #1
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000504 	.word	0x20000504
 8002728:	200004fc 	.word	0x200004fc

0800272c <st7735SetCallBack>:

bool st7735SetCallBack(void (*p_func)(void))
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  frameCallBack = p_func;
 8002734:	4a04      	ldr	r2, [pc, #16]	; (8002748 <st7735SetCallBack+0x1c>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6013      	str	r3, [r2, #0]

  return true;
 800273a:	2301      	movs	r3, #1
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	20000500 	.word	0x20000500

0800274c <cdcAvailable>:
bool rx_full=false;



uint32_t cdcAvailable(void)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % BUF_SIZE;
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <cdcAvailable+0x24>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b07      	ldr	r3, [pc, #28]	; (8002774 <cdcAvailable+0x28>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002760:	607b      	str	r3, [r7, #4]

	return ret;
 8002762:	687b      	ldr	r3, [r7, #4]
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	20000708 	.word	0x20000708
 8002774:	2000070c 	.word	0x2000070c

08002778 <cdcRead>:

uint8_t cdcRead(void)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	71fb      	strb	r3, [r7, #7]

	ret = rx_buf[rx_out];
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <cdcRead+0x3c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <cdcRead+0x40>)
 8002788:	5cd3      	ldrb	r3, [r2, r3]
 800278a:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <cdcRead+0x3c>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <cdcRead+0x44>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d006      	beq.n	80027a6 <cdcRead+0x2e>
	{
		rx_out = (rx_out + 1) % BUF_SIZE;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <cdcRead+0x3c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a2:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <cdcRead+0x3c>)
 80027a4:	6013      	str	r3, [r2, #0]
	}

	return ret;
 80027a6:	79fb      	ldrb	r3, [r7, #7]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	2000070c 	.word	0x2000070c
 80027b8:	20000508 	.word	0x20000508
 80027bc:	20000708 	.word	0x20000708

080027c0 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
	rx_buf[rx_in] = rx_data;
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <cdcDataIn+0x3c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	490c      	ldr	r1, [pc, #48]	; (8002800 <cdcDataIn+0x40>)
 80027d0:	79fa      	ldrb	r2, [r7, #7]
 80027d2:	54ca      	strb	r2, [r1, r3]

	uint8_t next_rx_in = (rx_in + 1) % BUF_SIZE;
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <cdcDataIn+0x3c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	3301      	adds	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]

	if(next_rx_in != rx_out)
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	4b08      	ldr	r3, [pc, #32]	; (8002804 <cdcDataIn+0x44>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d002      	beq.n	80027ee <cdcDataIn+0x2e>
	{
		rx_in = next_rx_in;
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	4a04      	ldr	r2, [pc, #16]	; (80027fc <cdcDataIn+0x3c>)
 80027ec:	6013      	str	r3, [r2, #0]
	}
}
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20000708 	.word	0x20000708
 8002800:	20000508 	.word	0x20000508
 8002804:	2000070c 	.word	0x2000070c

08002808 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t len)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
	uint32_t pre_time = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
	uint8_t ret;

	pre_time = millis();
 8002816:	f7ff f8c9 	bl	80019ac <millis>
 800281a:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(p_data, len);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	4619      	mov	r1, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f014 f866 	bl	80168f4 <CDC_Transmit_FS>
 8002828:	4603      	mov	r3, r0
 800282a:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 800282c:	7afb      	ldrb	r3, [r7, #11]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <cdcWrite+0x2e>
			{
				return len;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	e00e      	b.n	8002854 <cdcWrite+0x4c>
			}
			else if(ret == USBD_FAIL)
 8002836:	7afb      	ldrb	r3, [r7, #11]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d101      	bne.n	8002840 <cdcWrite+0x38>
			{
				return 0;
 800283c:	2300      	movs	r3, #0
 800283e:	e009      	b.n	8002854 <cdcWrite+0x4c>
			}

			if(millis() - pre_time >= 100)
 8002840:	f7ff f8b4 	bl	80019ac <millis>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b63      	cmp	r3, #99	; 0x63
 800284c:	d800      	bhi.n	8002850 <cdcWrite+0x48>
		ret = CDC_Transmit_FS(p_data, len);
 800284e:	e7e5      	b.n	800281c <cdcWrite+0x14>
			{
				break;
 8002850:	bf00      	nop
			}
	}

	return 0;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <cliInit+0x74>)
 8002862:	2200      	movs	r2, #0
 8002864:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <cliInit+0x74>)
 8002868:	2200      	movs	r2, #0
 800286a:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 800286c:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <cliInit+0x74>)
 800286e:	2200      	movs	r2, #0
 8002870:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8002872:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <cliInit+0x74>)
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <cliInit+0x74>)
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <cliInit+0x74>)
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 800288a:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <cliInit+0x74>)
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <cliInit+0x74>)
 8002894:	4a0f      	ldr	r2, [pc, #60]	; (80028d4 <cliInit+0x78>)
 8002896:	f8c3 2474 	str.w	r2, [r3, #1140]	; 0x474
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800289a:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <cliInit+0x74>)
 800289c:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <cliInit+0x7c>)
 800289e:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80028a2:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <cliInit+0x74>)
 80028a4:	4a0d      	ldr	r2, [pc, #52]	; (80028dc <cliInit+0x80>)
 80028a6:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <cliInit+0x74>)
 80028ac:	4a0c      	ldr	r2, [pc, #48]	; (80028e0 <cliInit+0x84>)
 80028ae:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

  cliLineClean(&cli_node);
 80028b2:	4807      	ldr	r0, [pc, #28]	; (80028d0 <cliInit+0x74>)
 80028b4:	f000 fb5c 	bl	8002f70 <cliLineClean>


  cliAdd("help", cliShowList);
 80028b8:	490a      	ldr	r1, [pc, #40]	; (80028e4 <cliInit+0x88>)
 80028ba:	480b      	ldr	r0, [pc, #44]	; (80028e8 <cliInit+0x8c>)
 80028bc:	f000 fdf8 	bl	80034b0 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80028c0:	490a      	ldr	r1, [pc, #40]	; (80028ec <cliInit+0x90>)
 80028c2:	480b      	ldr	r0, [pc, #44]	; (80028f0 <cliInit+0x94>)
 80028c4:	f000 fdf4 	bl	80034b0 <cliAdd>

  return true;
 80028c8:	2301      	movs	r3, #1
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000710 	.word	0x20000710
 80028d4:	08003341 	.word	0x08003341
 80028d8:	08003391 	.word	0x08003391
 80028dc:	080033e9 	.word	0x080033e9
 80028e0:	08003431 	.word	0x08003431
 80028e4:	08003545 	.word	0x08003545
 80028e8:	0801a4d4 	.word	0x0801a4d4
 80028ec:	080035b5 	.word	0x080035b5
 80028f0:	0801a4dc 	.word	0x0801a4dc

080028f4 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8002900:	4a0a      	ldr	r2, [pc, #40]	; (800292c <cliOpen+0x38>)
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8002906:	4a09      	ldr	r2, [pc, #36]	; (800292c <cliOpen+0x38>)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	6839      	ldr	r1, [r7, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f003 fc03 	bl	800611c <uartOpen>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <cliOpen+0x38>)
 800291c:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 800291e:	4b03      	ldr	r3, [pc, #12]	; (800292c <cliOpen+0x38>)
 8002920:	7a1b      	ldrb	r3, [r3, #8]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000710 	.word	0x20000710

08002930 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8002938:	4b34      	ldr	r3, [pc, #208]	; (8002a0c <cliShowLog+0xdc>)
 800293a:	7a5b      	ldrb	r3, [r3, #9]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d061      	beq.n	8002a04 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	7a98      	ldrb	r0, [r3, #10]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 800294a:	461a      	mov	r2, r3
 800294c:	4930      	ldr	r1, [pc, #192]	; (8002a10 <cliShowLog+0xe0>)
 800294e:	f003 fc3f 	bl	80061d0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7a98      	ldrb	r0, [r3, #10]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 800295c:	461a      	mov	r2, r3
 800295e:	492d      	ldr	r1, [pc, #180]	; (8002a14 <cliShowLog+0xe4>)
 8002960:	f003 fc36 	bl	80061d0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7a98      	ldrb	r0, [r3, #10]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 800296e:	461a      	mov	r2, r3
 8002970:	4929      	ldr	r1, [pc, #164]	; (8002a18 <cliShowLog+0xe8>)
 8002972:	f003 fc2d 	bl	80061d0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7a98      	ldrb	r0, [r3, #10]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002980:	461a      	mov	r2, r3
 8002982:	4926      	ldr	r1, [pc, #152]	; (8002a1c <cliShowLog+0xec>)
 8002984:	f003 fc24 	bl	80061d0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7a98      	ldrb	r0, [r3, #10]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002992:	461a      	mov	r2, r3
 8002994:	4922      	ldr	r1, [pc, #136]	; (8002a20 <cliShowLog+0xf0>)
 8002996:	f003 fc1b 	bl	80061d0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	7a98      	ldrb	r0, [r3, #10]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80029a4:	461a      	mov	r2, r3
 80029a6:	491f      	ldr	r1, [pc, #124]	; (8002a24 <cliShowLog+0xf4>)
 80029a8:	f003 fc12 	bl	80061d0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7a98      	ldrb	r0, [r3, #10]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80029b6:	461a      	mov	r2, r3
 80029b8:	491b      	ldr	r1, [pc, #108]	; (8002a28 <cliShowLog+0xf8>)
 80029ba:	f003 fc09 	bl	80061d0 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	e012      	b.n	80029ea <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	7a98      	ldrb	r0, [r3, #10]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4613      	mov	r3, r2
 80029cc:	015b      	lsls	r3, r3, #5
 80029ce:	4413      	add	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4413      	add	r3, r2
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4913      	ldr	r1, [pc, #76]	; (8002a2c <cliShowLog+0xfc>)
 80029e0:	f003 fbf6 	bl	80061d0 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3301      	adds	r3, #1
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80029f0:	461a      	mov	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4293      	cmp	r3, r2
 80029f6:	dbe5      	blt.n	80029c4 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	7a9b      	ldrb	r3, [r3, #10]
 80029fc:	490c      	ldr	r1, [pc, #48]	; (8002a30 <cliShowLog+0x100>)
 80029fe:	4618      	mov	r0, r3
 8002a00:	f003 fbe6 	bl	80061d0 <uartPrintf>
  }
}
 8002a04:	bf00      	nop
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000710 	.word	0x20000710
 8002a10:	0801a4e0 	.word	0x0801a4e0
 8002a14:	0801a4f0 	.word	0x0801a4f0
 8002a18:	0801a500 	.word	0x0801a500
 8002a1c:	0801a510 	.word	0x0801a510
 8002a20:	0801a520 	.word	0x0801a520
 8002a24:	0801a530 	.word	0x0801a530
 8002a28:	0801a540 	.word	0x0801a540
 8002a2c:	0801a550 	.word	0x0801a550
 8002a30:	0801a560 	.word	0x0801a560

08002a34 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	4906      	ldr	r1, [pc, #24]	; (8002a5c <cliShowPrompt+0x28>)
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 fbc4 	bl	80061d0 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4904      	ldr	r1, [pc, #16]	; (8002a60 <cliShowPrompt+0x2c>)
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 fbbe 	bl	80061d0 <uartPrintf>
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	0801a564 	.word	0x0801a564
 8002a60:	0801a568 	.word	0x0801a568

08002a64 <cliMain>:

bool cliMain(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8002a68:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <cliMain+0x40>)
 8002a6a:	7a1b      	ldrb	r3, [r3, #8]
 8002a6c:	f083 0301 	eor.w	r3, r3, #1
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <cliMain+0x16>
  {
    return false;
 8002a76:	2300      	movs	r3, #0
 8002a78:	e012      	b.n	8002aa0 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <cliMain+0x40>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 fb68 	bl	8006154 <uartAvailable>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <cliMain+0x40>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f003 fb73 	bl	800617a <uartRead>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4619      	mov	r1, r3
 8002a98:	4802      	ldr	r0, [pc, #8]	; (8002aa4 <cliMain+0x40>)
 8002a9a:	f000 f805 	bl	8002aa8 <cliUpdate>
  }

  return true;
 8002a9e:	2301      	movs	r3, #1
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20000710 	.word	0x20000710

08002aa8 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08c      	sub	sp, #48	; 0x30
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002ac0:	61fb      	str	r3, [r7, #28]

  if (p_cli->state == CLI_RX_IDLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7c1b      	ldrb	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 816d 	bne.w	8002da6 <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	2b7f      	cmp	r3, #127	; 0x7f
 8002ad0:	d02a      	beq.n	8002b28 <cliUpdate+0x80>
 8002ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ad4:	f300 80da 	bgt.w	8002c8c <cliUpdate+0x1e4>
 8002ad8:	2b1b      	cmp	r3, #27
 8002ada:	d021      	beq.n	8002b20 <cliUpdate+0x78>
 8002adc:	2b1b      	cmp	r3, #27
 8002ade:	f300 80d5 	bgt.w	8002c8c <cliUpdate+0x1e4>
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d062      	beq.n	8002bac <cliUpdate+0x104>
 8002ae6:	2b0d      	cmp	r3, #13
 8002ae8:	f040 80d0 	bne.w	8002c8c <cliUpdate+0x1e4>
    {
      // 엔터
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fa54 	bl	8002fa4 <cliLineAdd>
          cliRunCmd(p_cli);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fb25 	bl	800314c <cliRunCmd>
        }

        line->count = 0;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ff8b 	bl	8002a34 <cliShowPrompt>
        break;
 8002b1e:	e142      	b.n	8002da6 <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	741a      	strb	r2, [r3, #16]
        break;
 8002b26:	e13e      	b.n	8002da6 <cliUpdate+0x2fe>

      // DEL
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f080 8131 	bcs.w	8002d9c <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4e:	e013      	b.n	8002b78 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b56:	461a      	mov	r2, r3
 8002b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5a:	441a      	add	r2, r3
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b62:	4619      	mov	r1, r3
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b66:	440b      	add	r3, r1
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	69f9      	ldr	r1, [r7, #28]
 8002b6c:	5c89      	ldrb	r1, [r1, r2]
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8002b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b74:	3301      	adds	r3, #1
 8002b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b78:	7efb      	ldrb	r3, [r7, #27]
 8002b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	dbe7      	blt.n	8002b50 <cliUpdate+0xa8>
          }

          line->count--;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b96:	461a      	mov	r2, r3
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	498d      	ldr	r1, [pc, #564]	; (8002dd8 <cliUpdate+0x330>)
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 fb13 	bl	80061d0 <uartPrintf>
        }
        break;
 8002baa:	e0f7      	b.n	8002d9c <cliUpdate+0x2f4>

      // 백스페이스
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d055      	beq.n	8002c62 <cliUpdate+0x1ba>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d050      	beq.n	8002c62 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d10e      	bne.n	8002bee <cliUpdate+0x146>
          {
            line->count--;
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002be6:	461a      	mov	r2, r3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2100      	movs	r1, #0
 8002bec:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d231      	bcs.n	8002c62 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c12:	e013      	b.n	8002c3c <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	441a      	add	r2, r3
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c26:	4619      	mov	r1, r3
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	69f9      	ldr	r1, [r7, #28]
 8002c30:	5c89      	ldrb	r1, [r1, r2]
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	3301      	adds	r3, #1
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c3c:	7ebb      	ldrb	r3, [r7, #26]
 8002c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c40:	429a      	cmp	r2, r3
 8002c42:	dbe7      	blt.n	8002c14 <cliUpdate+0x16c>
            }

            line->count--;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2100      	movs	r1, #0
 8002c60:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 8099 	beq.w	8002da0 <cliUpdate+0x2f8>
        {
          line->cursor--;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	4956      	ldr	r1, [pc, #344]	; (8002ddc <cliUpdate+0x334>)
 8002c84:	4618      	mov	r0, r3
 8002c86:	f003 faa3 	bl	80061d0 <uartPrintf>
        }
        break;
 8002c8a:	e089      	b.n	8002da0 <cliUpdate+0x2f8>

      default:
        if ((line->count + 1) < line->buf_len)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c92:	3301      	adds	r3, #1
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	f280 8082 	bge.w	8002da4 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d124      	bne.n	8002cfa <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	1cf9      	adds	r1, r7, #3
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 fa72 	bl	80061a2 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	78f9      	ldrb	r1, [r7, #3]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	5499      	strb	r1, [r3, r2]
            line->count++;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d24c      	bcs.n	8002da4 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	e013      	b.n	8002d48 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d26:	461a      	mov	r2, r3
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	1e5a      	subs	r2, r3, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d34:	4619      	mov	r1, r3
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	1acb      	subs	r3, r1, r3
 8002d3a:	69f9      	ldr	r1, [r7, #28]
 8002d3c:	5c89      	ldrb	r1, [r1, r2]
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	3301      	adds	r3, #1
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
 8002d48:	7e7b      	ldrb	r3, [r7, #25]
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	dbe7      	blt.n	8002d20 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d56:	461a      	mov	r2, r3
 8002d58:	78f9      	ldrb	r1, [r7, #3]
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	5499      	strb	r1, [r3, r2]
            line->count++;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d64:	3301      	adds	r3, #1
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d74:	3301      	adds	r3, #1
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d84:	461a      	mov	r2, r3
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	2100      	movs	r1, #0
 8002d8a:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	4913      	ldr	r1, [pc, #76]	; (8002de0 <cliUpdate+0x338>)
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 fa1b 	bl	80061d0 <uartPrintf>
          }
        }
        break;
 8002d9a:	e003      	b.n	8002da4 <cliUpdate+0x2fc>
        break;
 8002d9c:	bf00      	nop
 8002d9e:	e002      	b.n	8002da6 <cliUpdate+0x2fe>
        break;
 8002da0:	bf00      	nop
 8002da2:	e000      	b.n	8002da6 <cliUpdate+0x2fe>
        break;
 8002da4:	bf00      	nop
    }
  }

  switch(p_cli->state)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7c1b      	ldrb	r3, [r3, #16]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	f200 80d2 	bhi.w	8002f56 <cliUpdate+0x4ae>
 8002db2:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <cliUpdate+0x310>)
 8002db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db8:	08002dc9 	.word	0x08002dc9
 8002dbc:	08002dd1 	.word	0x08002dd1
 8002dc0:	08002de5 	.word	0x08002de5
 8002dc4:	08002f4d 	.word	0x08002f4d
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	741a      	strb	r2, [r3, #16]
      break;
 8002dce:	e0c2      	b.n	8002f56 <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	741a      	strb	r2, [r3, #16]
      break;
 8002dd6:	e0be      	b.n	8002f56 <cliUpdate+0x4ae>
 8002dd8:	0801a570 	.word	0x0801a570
 8002ddc:	0801a578 	.word	0x0801a578
 8002de0:	0801a580 	.word	0x0801a580

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	2b44      	cmp	r3, #68	; 0x44
 8002dee:	d11a      	bne.n	8002e26 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d015      	beq.n	8002e26 <cliUpdate+0x37e>
        {
          line->cursor--;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8002e0a:	231b      	movs	r3, #27
 8002e0c:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8002e0e:	235b      	movs	r3, #91	; 0x5b
 8002e10:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	f107 010c 	add.w	r1, r7, #12
 8002e1e:	2203      	movs	r2, #3
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 f9be 	bl	80061a2 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8002e26:	78fb      	ldrb	r3, [r7, #3]
 8002e28:	2b43      	cmp	r3, #67	; 0x43
 8002e2a:	d11d      	bne.n	8002e68 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d215      	bcs.n	8002e68 <cliUpdate+0x3c0>
        {
          line->cursor++;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e42:	3301      	adds	r3, #1
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 8002e4c:	231b      	movs	r3, #27
 8002e4e:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8002e50:	235b      	movs	r3, #91	; 0x5b
 8002e52:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	f107 010c 	add.w	r1, r7, #12
 8002e60:	2203      	movs	r2, #3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f003 f99d 	bl	80061a2 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	2b41      	cmp	r3, #65	; 0x41
 8002e6c:	d10c      	bne.n	8002e88 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8002e6e:	2101      	movs	r1, #1
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f8e1 	bl	8003038 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	781a      	ldrb	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002e80:	4619      	mov	r1, r3
 8002e82:	4610      	mov	r0, r2
 8002e84:	f003 f9a4 	bl	80061d0 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	2b42      	cmp	r3, #66	; 0x42
 8002e8c:	d10c      	bne.n	8002ea8 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8002e8e:	2100      	movs	r1, #0
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f8d1 	bl	8003038 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	f003 f994 	bl	80061d0 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	2b31      	cmp	r3, #49	; 0x31
 8002eac:	d10f      	bne.n	8002ece <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7818      	ldrb	r0, [r3, #0]
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb8:	461a      	mov	r2, r3
 8002eba:	492b      	ldr	r1, [pc, #172]	; (8002f68 <cliUpdate+0x4c0>)
 8002ebc:	f003 f988 	bl	80061d0 <uartPrintf>
        line->cursor = 0;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	2b34      	cmp	r3, #52	; 0x34
 8002ed2:	d13f      	bne.n	8002f54 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d210      	bcs.n	8002f06 <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	8afa      	ldrh	r2, [r7, #22]
 8002efe:	491b      	ldr	r1, [pc, #108]	; (8002f6c <cliUpdate+0x4c4>)
 8002f00:	4618      	mov	r0, r3
 8002f02:	f003 f965 	bl	80061d0 <uartPrintf>
        }
        if (line->cursor > line->count)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d910      	bls.n	8002f38 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	8afa      	ldrh	r2, [r7, #22]
 8002f30:	490d      	ldr	r1, [pc, #52]	; (8002f68 <cliUpdate+0x4c0>)
 8002f32:	4618      	mov	r0, r3
 8002f34:	f003 f94c 	bl	80061d0 <uartPrintf>
        }
        line->cursor = line->count;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2204      	movs	r2, #4
 8002f48:	741a      	strb	r2, [r3, #16]
      }
      break;
 8002f4a:	e003      	b.n	8002f54 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	741a      	strb	r2, [r3, #16]
      break;
 8002f52:	e000      	b.n	8002f56 <cliUpdate+0x4ae>
      break;
 8002f54:	bf00      	nop
  }

  cliShowLog(p_cli);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff fcea 	bl	8002930 <cliShowLog>

  return ret;
 8002f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3730      	adds	r7, #48	; 0x30
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	0801a58c 	.word	0x0801a58c
 8002f6c:	0801a594 	.word	0x0801a594

08002f70 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
  p_cli->line.cursor  = 0;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	223f      	movs	r2, #63	; 0x3f
 8002f8c:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
  p_cli->line.buf[0]  = 0;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	015b      	lsls	r3, r3, #5
 8002fba:	4413      	add	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	4413      	add	r3, r2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002fce:	2243      	movs	r2, #67	; 0x43
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f015 fa9a 	bl	801850a <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d807      	bhi.n	8002ff0 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002ff6:	b25a      	sxtb	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <cliLineAdd+0x90>)
 8003008:	fb83 1302 	smull	r1, r3, r3, r2
 800300c:	1059      	asrs	r1, r3, #1
 800300e:	17d3      	asrs	r3, r2, #31
 8003010:	1ac9      	subs	r1, r1, r3
 8003012:	460b      	mov	r3, r1
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	1ad1      	subs	r1, r2, r3
 800301a:	b2ca      	uxtb	r2, r1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	66666667 	.word	0x66666667

08003038 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800304a:	2b00      	cmp	r3, #0
 800304c:	d076      	beq.n	800313c <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7818      	ldrb	r0, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8003062:	461a      	mov	r2, r3
 8003064:	4937      	ldr	r1, [pc, #220]	; (8003144 <cliLineChange+0x10c>)
 8003066:	f003 f8b3 	bl	80061d0 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	7818      	ldrb	r0, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 800307e:	461a      	mov	r2, r3
 8003080:	4931      	ldr	r1, [pc, #196]	; (8003148 <cliLineChange+0x110>)
 8003082:	f003 f8a5 	bl	80061d0 <uartPrintf>
  }


  if (key_up == true)
 8003086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d125      	bne.n	80030da <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8003094:	2b00      	cmp	r3, #0
 8003096:	d006      	beq.n	80030a6 <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800309e:	b25a      	sxtb	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80030ac:	461a      	mov	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80030b4:	4413      	add	r3, r2
 80030b6:	3b01      	subs	r3, #1
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 80030be:	fb93 f1f2 	sdiv	r1, r3, r2
 80030c2:	fb01 f202 	mul.w	r2, r1, r2
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	b25a      	sxtb	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	e013      	b.n	8003102 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80030e0:	3301      	adds	r3, #1
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 80030e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80030ec:	fb01 f202 	mul.w	r2, r1, r2
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	b25a      	sxtb	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8003100:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8003102:	7bfa      	ldrb	r2, [r7, #15]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	015b      	lsls	r3, r3, #5
 800310c:	4413      	add	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	4403      	add	r3, r0
 8003114:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8003118:	f201 23e7 	addw	r3, r1, #743	; 0x2e7
 800311c:	4611      	mov	r1, r2
 800311e:	2243      	movs	r2, #67	; 0x43
 8003120:	4618      	mov	r0, r3
 8003122:	f015 f9f2 	bl	801850a <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

  p_cli->hist_line_new = false;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800313a:	e000      	b.n	800313e <cliLineChange+0x106>
    return;
 800313c:	bf00      	nop
}
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	0801a58c 	.word	0x0801a58c
 8003148:	0801a59c 	.word	0x0801a59c

0800314c <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003154:	2300      	movs	r3, #0
 8003156:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f851 	bl	8003200 <cliParseArgs>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d046      	beq.n	80031f2 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8003164:	4825      	ldr	r0, [pc, #148]	; (80031fc <cliRunCmd+0xb0>)
 8003166:	f000 f893 	bl	8003290 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003170:	4618      	mov	r0, r3
 8003172:	f000 f8b1 	bl	80032d8 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	e033      	b.n	80031e4 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	3304      	adds	r3, #4
 8003196:	4619      	mov	r1, r3
 8003198:	f7fd f822 	bl	80001e0 <strcmp>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d11d      	bne.n	80031de <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f503 728c 	add.w	r2, r3, #280	; 0x118
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	f202 426c 	addw	r2, r2, #1132	; 0x46c
 80031d8:	4610      	mov	r0, r2
 80031da:	4798      	blx	r3
        break;
 80031dc:	e009      	b.n	80031f2 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3301      	adds	r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4293      	cmp	r3, r2
 80031f0:	dbc4      	blt.n	800317c <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 80031f2:	7afb      	ldrb	r3, [r7, #11]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	0801a5a4 	.word	0x0801a5a4

08003200 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003208:	2300      	movs	r3, #0
 800320a:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 800321e:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8003226:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8003228:	8afb      	ldrh	r3, [r7, #22]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8003234:	4b15      	ldr	r3, [pc, #84]	; (800328c <cliParseArgs+0x8c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f107 0208 	add.w	r2, r7, #8
 800323c:	4619      	mov	r1, r3
 800323e:	6938      	ldr	r0, [r7, #16]
 8003240:	f015 f8d4 	bl	80183ec <strtok_r>
 8003244:	61b8      	str	r0, [r7, #24]
 8003246:	e010      	b.n	800326a <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8003248:	8afb      	ldrh	r3, [r7, #22]
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	82fa      	strh	r2, [r7, #22]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <cliParseArgs+0x8c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f107 0208 	add.w	r2, r7, #8
 8003260:	4619      	mov	r1, r3
 8003262:	2000      	movs	r0, #0
 8003264:	f015 f8c2 	bl	80183ec <strtok_r>
 8003268:	61b8      	str	r0, [r7, #24]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1eb      	bne.n	8003248 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8afa      	ldrh	r2, [r7, #22]
 8003274:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 8003278:	8afb      	ldrh	r3, [r7, #22]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <cliParseArgs+0x82>
  {
    ret = true;
 800327e:	2301      	movs	r3, #1
 8003280:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8003282:	7ffb      	ldrb	r3, [r7, #31]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3720      	adds	r7, #32
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000068 	.word	0x20000068

08003290 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8003290:	b40f      	push	{r0, r1, r2, r3}
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8003298:	f107 031c 	add.w	r3, r7, #28
 800329c:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 800329e:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <cliPrintf+0x44>)
 80032a0:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f103 0011 	add.w	r0, r3, #17
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032b0:	f015 f84c 	bl	801834c <vsniprintf>
 80032b4:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	7818      	ldrb	r0, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	3311      	adds	r3, #17
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	4619      	mov	r1, r3
 80032c2:	f002 ff6e 	bl	80061a2 <uartWrite>
}
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032d0:	b004      	add	sp, #16
 80032d2:	4770      	bx	lr
 80032d4:	20000710 	.word	0x20000710

080032d8 <cliToUpper>:

void cliToUpper(char *str)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80032e0:	2300      	movs	r3, #0
 80032e2:	81fb      	strh	r3, [r7, #14]
 80032e4:	e018      	b.n	8003318 <cliToUpper+0x40>
  {
    str_ch = str[i];
 80032e6:	89fb      	ldrh	r3, [r7, #14]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80032f0:	7b7b      	ldrb	r3, [r7, #13]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d014      	beq.n	8003320 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80032f6:	7b7b      	ldrb	r3, [r7, #13]
 80032f8:	2b60      	cmp	r3, #96	; 0x60
 80032fa:	d905      	bls.n	8003308 <cliToUpper+0x30>
 80032fc:	7b7b      	ldrb	r3, [r7, #13]
 80032fe:	2b7a      	cmp	r3, #122	; 0x7a
 8003300:	d802      	bhi.n	8003308 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8003302:	7b7b      	ldrb	r3, [r7, #13]
 8003304:	3b20      	subs	r3, #32
 8003306:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8003308:	89fb      	ldrh	r3, [r7, #14]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	7b7a      	ldrb	r2, [r7, #13]
 8003310:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8003312:	89fb      	ldrh	r3, [r7, #14]
 8003314:	3301      	adds	r3, #1
 8003316:	81fb      	strh	r3, [r7, #14]
 8003318:	89fb      	ldrh	r3, [r7, #14]
 800331a:	2b0f      	cmp	r3, #15
 800331c:	d9e3      	bls.n	80032e6 <cliToUpper+0xe>
 800331e:	e000      	b.n	8003322 <cliToUpper+0x4a>
      break;
 8003320:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8003322:	89fb      	ldrh	r3, [r7, #14]
 8003324:	2b10      	cmp	r3, #16
 8003326:	d105      	bne.n	8003334 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8003328:	89fb      	ldrh	r3, [r7, #14]
 800332a:	3b01      	subs	r3, #1
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	4413      	add	r3, r2
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
  }
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800334e:	4b0f      	ldr	r3, [pc, #60]	; (800338c <cliArgsGetData+0x4c>)
 8003350:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	b29a      	uxth	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 800335c:	429a      	cmp	r2, r3
 800335e:	d301      	bcc.n	8003364 <cliArgsGetData+0x24>
  {
    return 0;
 8003360:	2300      	movs	r3, #0
 8003362:	e00e      	b.n	8003382 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2200      	movs	r2, #0
 8003374:	2100      	movs	r1, #0
 8003376:	4618      	mov	r0, r3
 8003378:	f014 feae 	bl	80180d8 <strtoul>
 800337c:	4603      	mov	r3, r0
 800337e:	60fb      	str	r3, [r7, #12]

  return ret;
 8003380:	68fb      	ldr	r3, [r7, #12]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000710 	.word	0x20000710

08003390 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80033a0:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <cliArgsGetFloat+0x54>)
 80033a2:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d302      	bcc.n	80033b8 <cliArgsGetFloat+0x28>
  {
    return 0;
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	e00d      	b.n	80033d4 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f014 fdad 	bl	8017f28 <strtof>
 80033ce:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 80033d2:	68fb      	ldr	r3, [r7, #12]
}
 80033d4:	ee07 3a90 	vmov	s15, r3
 80033d8:	eeb0 0a67 	vmov.f32	s0, s15
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000710 	.word	0x20000710

080033e8 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80033f6:	4b0d      	ldr	r3, [pc, #52]	; (800342c <cliArgsGetStr+0x44>)
 80033f8:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 8003404:	429a      	cmp	r2, r3
 8003406:	d301      	bcc.n	800340c <cliArgsGetStr+0x24>
  {
    return 0;
 8003408:	2300      	movs	r3, #0
 800340a:	e008      	b.n	800341e <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]

  return ret;
 800341c:	68fb      	ldr	r3, [r7, #12]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000710 	.word	0x20000710

08003430 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	6039      	str	r1, [r7, #0]
 800343a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800343c:	2300      	movs	r3, #0
 800343e:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8003440:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <cliArgsIsStr+0x50>)
 8003442:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	b29a      	uxth	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 800344e:	429a      	cmp	r2, r3
 8003450:	d301      	bcc.n	8003456 <cliArgsIsStr+0x26>
  {
    return 0;
 8003452:	2300      	movs	r3, #0
 8003454:	e010      	b.n	8003478 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4619      	mov	r1, r3
 8003466:	6838      	ldr	r0, [r7, #0]
 8003468:	f7fc feba 	bl	80001e0 <strcmp>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <cliArgsIsStr+0x46>
  {
    ret = true;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003476:	7bfb      	ldrb	r3, [r7, #15]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000710 	.word	0x20000710

08003484 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800348a:	4b08      	ldr	r3, [pc, #32]	; (80034ac <cliKeepLoop+0x28>)
 800348c:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f002 fe5e 	bl	8006154 <uartAvailable>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <cliKeepLoop+0x1e>
  {
    return true;
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 80034a2:	2300      	movs	r3, #0
  }
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	20000710 	.word	0x20000710

080034b0 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80034ba:	2301      	movs	r3, #1
 80034bc:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <cliAdd+0x90>)
 80034c0:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80034c8:	2b0f      	cmp	r3, #15
 80034ca:	d901      	bls.n	80034d0 <cliAdd+0x20>
  {
    return false;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e032      	b.n	8003536 <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80034d6:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80034d8:	89fa      	ldrh	r2, [r7, #14]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4413      	add	r3, r2
 80034ea:	3304      	adds	r3, #4
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f015 f803 	bl	80184fa <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80034f4:	89fa      	ldrh	r2, [r7, #14]
 80034f6:	6939      	ldr	r1, [r7, #16]
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800350a:	89fa      	ldrh	r2, [r7, #14]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4413      	add	r3, r2
 800351c:	3304      	adds	r3, #4
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff feda 	bl	80032d8 <cliToUpper>

  p_cli->cmd_count++;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 800352a:	3301      	adds	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f8a3 232a 	strh.w	r2, [r3, #810]	; 0x32a

  return ret;
 8003534:	7dfb      	ldrb	r3, [r7, #23]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000710 	.word	0x20000710

08003544 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 800354c:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <cliShowList+0x60>)
 800354e:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8003550:	4815      	ldr	r0, [pc, #84]	; (80035a8 <cliShowList+0x64>)
 8003552:	f7ff fe9d 	bl	8003290 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8003556:	4815      	ldr	r0, [pc, #84]	; (80035ac <cliShowList+0x68>)
 8003558:	f7ff fe9a 	bl	8003290 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e012      	b.n	8003588 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	4413      	add	r3, r2
 8003574:	3304      	adds	r3, #4
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fe8a 	bl	8003290 <cliPrintf>
    cliPrintf("\r\n");
 800357c:	480a      	ldr	r0, [pc, #40]	; (80035a8 <cliShowList+0x64>)
 800357e:	f7ff fe87 	bl	8003290 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3301      	adds	r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 800358e:	461a      	mov	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4293      	cmp	r3, r2
 8003594:	dbe5      	blt.n	8003562 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8003596:	4806      	ldr	r0, [pc, #24]	; (80035b0 <cliShowList+0x6c>)
 8003598:	f7ff fe7a 	bl	8003290 <cliPrintf>
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000710 	.word	0x20000710
 80035a8:	0801a5a4 	.word	0x0801a5a4
 80035ac:	0801a5a8 	.word	0x0801a5a8
 80035b0:	0801a5c8 	.word	0x0801a5c8

080035b4 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08c      	sub	sp, #48	; 0x30
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 80035bc:	2310      	movs	r3, #16
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d103      	bne.n	80035dc <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 80035d4:	4840      	ldr	r0, [pc, #256]	; (80036d8 <cliMemoryDump+0x124>)
 80035d6:	f7ff fe5b 	bl	8003290 <cliPrintf>
 80035da:	e07a      	b.n	80036d2 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	dd09      	ble.n	80035f6 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	3304      	adds	r3, #4
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2200      	movs	r2, #0
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f014 fd73 	bl	80180d8 <strtoul>
 80035f2:	4603      	mov	r3, r0
 80035f4:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2200      	movs	r2, #0
 80035fc:	2100      	movs	r1, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	f014 fd6a 	bl	80180d8 <strtoul>
 8003604:	4603      	mov	r3, r0
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 800360c:	4833      	ldr	r0, [pc, #204]	; (80036dc <cliMemoryDump+0x128>)
 800360e:	f7ff fe3f 	bl	8003290 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8003612:	2300      	movs	r3, #0
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003616:	e058      	b.n	80036ca <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8003618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	4619      	mov	r1, r3
 8003626:	482e      	ldr	r0, [pc, #184]	; (80036e0 <cliMemoryDump+0x12c>)
 8003628:	f7ff fe32 	bl	8003290 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4619      	mov	r1, r3
 8003632:	482c      	ldr	r0, [pc, #176]	; (80036e4 <cliMemoryDump+0x130>)
 8003634:	f7ff fe2c 	bl	8003290 <cliPrintf>

    if ((idx%4) == 3)
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	425a      	negs	r2, r3
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	f002 0203 	and.w	r2, r2, #3
 8003644:	bf58      	it	pl
 8003646:	4253      	negpl	r3, r2
 8003648:	2b03      	cmp	r3, #3
 800364a:	d138      	bne.n	80036be <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 800364c:	4826      	ldr	r0, [pc, #152]	; (80036e8 <cliMemoryDump+0x134>)
 800364e:	f7ff fe1f 	bl	8003290 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8003652:	2300      	movs	r3, #0
 8003654:	623b      	str	r3, [r7, #32]
 8003656:	e02c      	b.n	80036b2 <cliMemoryDump+0xfe>
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 800365c:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	e01d      	b.n	80036a0 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8003664:	f107 020c 	add.w	r2, r7, #12
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	4413      	add	r3, r2
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b1f      	cmp	r3, #31
 8003670:	d910      	bls.n	8003694 <cliMemoryDump+0xe0>
 8003672:	f107 020c 	add.w	r2, r7, #12
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	4413      	add	r3, r2
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b7e      	cmp	r3, #126	; 0x7e
 800367e:	d809      	bhi.n	8003694 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8003680:	f107 020c 	add.w	r2, r7, #12
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	4413      	add	r3, r2
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	4619      	mov	r1, r3
 800368c:	4817      	ldr	r0, [pc, #92]	; (80036ec <cliMemoryDump+0x138>)
 800368e:	f7ff fdff 	bl	8003290 <cliPrintf>
 8003692:	e002      	b.n	800369a <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8003694:	4816      	ldr	r0, [pc, #88]	; (80036f0 <cliMemoryDump+0x13c>)
 8003696:	f7ff fdfb 	bl	8003290 <cliPrintf>
        for (i=0;i<4;i++)
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3301      	adds	r3, #1
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	ddde      	ble.n	8003664 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	3304      	adds	r3, #4
 80036aa:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	3301      	adds	r3, #1
 80036b0:	623b      	str	r3, [r7, #32]
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	ddcf      	ble.n	8003658 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 80036b8:	480e      	ldr	r0, [pc, #56]	; (80036f4 <cliMemoryDump+0x140>)
 80036ba:	f7ff fde9 	bl	8003290 <cliPrintf>
    }
    addr++;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	3304      	adds	r3, #4
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	3301      	adds	r3, #1
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	429a      	cmp	r2, r3
 80036d0:	dba2      	blt.n	8003618 <cliMemoryDump+0x64>
  }
}
 80036d2:	3730      	adds	r7, #48	; 0x30
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	0801a5e8 	.word	0x0801a5e8
 80036dc:	0801a5fc 	.word	0x0801a5fc
 80036e0:	0801a604 	.word	0x0801a604
 80036e4:	0801a610 	.word	0x0801a610
 80036e8:	0801a618 	.word	0x0801a618
 80036ec:	0801a61c 	.word	0x0801a61c
 80036f0:	0801a620 	.word	0x0801a620
 80036f4:	0801a624 	.word	0x0801a624

080036f8 <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
	bool ret = false;
 80036fe:	2300      	movs	r3, #0
 8003700:	71fb      	strb	r3, [r7, #7]

	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8003702:	490d      	ldr	r1, [pc, #52]	; (8003738 <fatfsInit+0x40>)
 8003704:	480d      	ldr	r0, [pc, #52]	; (800373c <fatfsInit+0x44>)
 8003706:	f010 ff15 	bl	8014534 <FATFS_LinkDriver>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <fatfsInit+0x2e>
	{
		if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8003710:	2200      	movs	r2, #0
 8003712:	4909      	ldr	r1, [pc, #36]	; (8003738 <fatfsInit+0x40>)
 8003714:	480a      	ldr	r0, [pc, #40]	; (8003740 <fatfsInit+0x48>)
 8003716:	f00f fb07 	bl	8012d28 <f_mount>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <fatfsInit+0x2e>
		{
			is_init = true;
 8003720:	4b08      	ldr	r3, [pc, #32]	; (8003744 <fatfsInit+0x4c>)
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
		}
	}

	#ifdef _USE_HW_CLI
		cliAdd("fatfs", cliFatfs);
 8003726:	4908      	ldr	r1, [pc, #32]	; (8003748 <fatfsInit+0x50>)
 8003728:	4808      	ldr	r0, [pc, #32]	; (800374c <fatfsInit+0x54>)
 800372a:	f7ff fec1 	bl	80034b0 <cliAdd>
	#endif

	return ret;
 800372e:	79fb      	ldrb	r3, [r7, #7]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000dcc 	.word	0x20000dcc
 800373c:	0801ab90 	.word	0x0801ab90
 8003740:	20000b98 	.word	0x20000b98
 8003744:	20000b94 	.word	0x20000b94
 8003748:	08003825 	.word	0x08003825
 800374c:	0801a634 	.word	0x0801a634

08003750 <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char *path)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b0d6      	sub	sp, #344	; 0x158
 8003754:	af00      	add	r7, sp, #0
 8003756:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800375a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800375e:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dir;
	FILINFO fno;

	res = f_opendir(&dir, path);
 8003760:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003764:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003768:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800376c:	6819      	ldr	r1, [r3, #0]
 800376e:	4610      	mov	r0, r2
 8003770:	f010 fa53 	bl	8013c1a <f_opendir>
 8003774:	4603      	mov	r3, r0
 8003776:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	if(res == FR_OK)
 800377a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800377e:	2b00      	cmp	r3, #0
 8003780:	d144      	bne.n	800380c <fatfsDir+0xbc>
	{
		for(;;)
		{
			res = f_readdir(&dir, &fno);
 8003782:	f107 0208 	add.w	r2, r7, #8
 8003786:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800378a:	4611      	mov	r1, r2
 800378c:	4618      	mov	r0, r3
 800378e:	f010 faed 	bl	8013d6c <f_readdir>
 8003792:	4603      	mov	r3, r0
 8003794:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			if(res != FR_OK || fno.fname[0] == 0)
 8003798:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800379c:	2b00      	cmp	r3, #0
 800379e:	d130      	bne.n	8003802 <fatfsDir+0xb2>
 80037a0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80037a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037a8:	7d9b      	ldrb	r3, [r3, #22]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d029      	beq.n	8003802 <fatfsDir+0xb2>
				break;

			if(fno.fattrib & AM_DIR)
 80037ae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80037b2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037b6:	7a1b      	ldrb	r3, [r3, #8]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00c      	beq.n	80037da <fatfsDir+0x8a>
			{
				cliPrintf(" %s/%s \n", path, fno.fname);
 80037c0:	f107 0308 	add.w	r3, r7, #8
 80037c4:	f103 0216 	add.w	r2, r3, #22
 80037c8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80037cc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80037d0:	6819      	ldr	r1, [r3, #0]
 80037d2:	4812      	ldr	r0, [pc, #72]	; (800381c <fatfsDir+0xcc>)
 80037d4:	f7ff fd5c 	bl	8003290 <cliPrintf>
 80037d8:	e7d3      	b.n	8003782 <fatfsDir+0x32>
			}
			else
			{
				cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 80037da:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80037de:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f107 0308 	add.w	r3, r7, #8
 80037ea:	f103 0216 	add.w	r2, r3, #22
 80037ee:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80037f2:	f5a3 71aa 	sub.w	r1, r3, #340	; 0x154
 80037f6:	4603      	mov	r3, r0
 80037f8:	6809      	ldr	r1, [r1, #0]
 80037fa:	4809      	ldr	r0, [pc, #36]	; (8003820 <fatfsDir+0xd0>)
 80037fc:	f7ff fd48 	bl	8003290 <cliPrintf>
			res = f_readdir(&dir, &fno);
 8003800:	e7bf      	b.n	8003782 <fatfsDir+0x32>
			}
		}

		f_closedir(&dir);
 8003802:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003806:	4618      	mov	r0, r3
 8003808:	f010 fa8a 	bl	8013d20 <f_closedir>
	}

	return res;
 800380c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8003810:	4618      	mov	r0, r3
 8003812:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	0801a63c 	.word	0x0801a63c
 8003820:	0801a648 	.word	0x0801a648

08003824 <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800382a:	af00      	add	r7, sp, #0
 800382c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003830:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003834:	6018      	str	r0, [r3, #0]
	bool ret = false;
 8003836:	2300      	movs	r3, #0
 8003838:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267

	if(args->argc == 1 && args->isStr(0, "info") == true)
 800383c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003840:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d14d      	bne.n	80038e8 <cliFatfs+0xc4>
 800384c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003850:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	4990      	ldr	r1, [pc, #576]	; (8003a9c <cliFatfs+0x278>)
 800385a:	2000      	movs	r0, #0
 800385c:	4798      	blx	r3
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d041      	beq.n	80038e8 <cliFatfs+0xc4>
	{
		cliPrintf("fatfs init \t: %d\n", is_init);
 8003864:	4b8e      	ldr	r3, [pc, #568]	; (8003aa0 <cliFatfs+0x27c>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	4619      	mov	r1, r3
 800386a:	488e      	ldr	r0, [pc, #568]	; (8003aa4 <cliFatfs+0x280>)
 800386c:	f7ff fd10 	bl	8003290 <cliPrintf>

		if(is_init == true)
 8003870:	4b8b      	ldr	r3, [pc, #556]	; (8003aa0 <cliFatfs+0x27c>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d034      	beq.n	80038e2 <cliFatfs+0xbe>
			FATFS *fs;
			DWORD fre_clust, fre_sect, tot_sect;
			FRESULT res;

			/* Get volume information and free clusters of drive 1 */
			res = f_getfree("", &fre_clust, &fs);
 8003878:	f507 7211 	add.w	r2, r7, #580	; 0x244
 800387c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003880:	4619      	mov	r1, r3
 8003882:	4889      	ldr	r0, [pc, #548]	; (8003aa8 <cliFatfs+0x284>)
 8003884:	f010 fabf 	bl	8013e06 <f_getfree>
 8003888:	4603      	mov	r3, r0
 800388a:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if(res == FR_OK)
 800388e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8003892:	2b00      	cmp	r3, #0
 8003894:	d11f      	bne.n	80038d6 <cliFatfs+0xb2>
			{
				/* Get total sectors and free sectors */
				tot_sect = (fs->n_fatent - 2) * fs->csize;
 8003896:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	3b02      	subs	r3, #2
 800389e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80038a2:	8952      	ldrh	r2, [r2, #10]
 80038a4:	fb02 f303 	mul.w	r3, r2, r3
 80038a8:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
				fre_sect = fre_clust * fs->csize;
 80038ac:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80038b0:	895b      	ldrh	r3, [r3, #10]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

				/* Print the free space (assuming 512 bytes/sector) */
				cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect/2, fre_sect/2);
 80038c0:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80038c4:	0859      	lsrs	r1, r3, #1
 80038c6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	461a      	mov	r2, r3
 80038ce:	4877      	ldr	r0, [pc, #476]	; (8003aac <cliFatfs+0x288>)
 80038d0:	f7ff fcde 	bl	8003290 <cliPrintf>
 80038d4:	e005      	b.n	80038e2 <cliFatfs+0xbe>
			}
			else
			{
				cliPrintf(" err : %d\n", res);
 80038d6:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80038da:	4619      	mov	r1, r3
 80038dc:	4874      	ldr	r0, [pc, #464]	; (8003ab0 <cliFatfs+0x28c>)
 80038de:	f7ff fcd7 	bl	8003290 <cliPrintf>
			}
		}

		ret = true;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(args->argc == 1 && args->isStr(0, "dir") == true)
 80038e8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80038ec:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d11e      	bne.n	8003936 <cliFatfs+0x112>
 80038f8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80038fc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	496b      	ldr	r1, [pc, #428]	; (8003ab4 <cliFatfs+0x290>)
 8003906:	2000      	movs	r0, #0
 8003908:	4798      	blx	r3
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d012      	beq.n	8003936 <cliFatfs+0x112>
	{
		FRESULT res;

		res = fatfsDir("/");
 8003910:	4869      	ldr	r0, [pc, #420]	; (8003ab8 <cliFatfs+0x294>)
 8003912:	f7ff ff1d 	bl	8003750 <fatfsDir>
 8003916:	4603      	mov	r3, r0
 8003918:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
		if(res != FR_OK)
 800391c:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <cliFatfs+0x10c>
		{
			cliPrintf(" err : %d\n", res);
 8003924:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8003928:	4619      	mov	r1, r3
 800392a:	4861      	ldr	r0, [pc, #388]	; (8003ab0 <cliFatfs+0x28c>)
 800392c:	f7ff fcb0 	bl	8003290 <cliPrintf>
		}

		ret = true;
 8003930:	2301      	movs	r3, #1
 8003932:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(args->argc == 1 && args->isStr(0, "test") == true)
 8003936:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800393a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	2b01      	cmp	r3, #1
 8003944:	f040 8095 	bne.w	8003a72 <cliFatfs+0x24e>
 8003948:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800394c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	4959      	ldr	r1, [pc, #356]	; (8003abc <cliFatfs+0x298>)
 8003956:	2000      	movs	r0, #0
 8003958:	4798      	blx	r3
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8088 	beq.w	8003a72 <cliFatfs+0x24e>
	{
		FRESULT fp_ret;
		FIL log_file;
		uint32_t pre_time;

		pre_time = millis();
 8003962:	f7fe f823 	bl	80019ac <millis>
 8003966:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 800396a:	f107 0308 	add.w	r3, r7, #8
 800396e:	220b      	movs	r2, #11
 8003970:	4953      	ldr	r1, [pc, #332]	; (8003ac0 <cliFatfs+0x29c>)
 8003972:	4618      	mov	r0, r3
 8003974:	f00f fa1e 	bl	8012db4 <f_open>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
		if(fp_ret == FR_OK)
 800397e:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8003982:	2b00      	cmp	r3, #0
 8003984:	d165      	bne.n	8003a52 <cliFatfs+0x22e>
		{
			f_printf(&log_file, "test1, ");
 8003986:	f107 0308 	add.w	r3, r7, #8
 800398a:	494e      	ldr	r1, [pc, #312]	; (8003ac4 <cliFatfs+0x2a0>)
 800398c:	4618      	mov	r0, r3
 800398e:	f010 fb67 	bl	8014060 <f_printf>
			f_printf(&log_file, "test2, ");
 8003992:	f107 0308 	add.w	r3, r7, #8
 8003996:	494c      	ldr	r1, [pc, #304]	; (8003ac8 <cliFatfs+0x2a4>)
 8003998:	4618      	mov	r0, r3
 800399a:	f010 fb61 	bl	8014060 <f_printf>
			f_printf(&log_file, "test3, ");
 800399e:	f107 0308 	add.w	r3, r7, #8
 80039a2:	494a      	ldr	r1, [pc, #296]	; (8003acc <cliFatfs+0x2a8>)
 80039a4:	4618      	mov	r0, r3
 80039a6:	f010 fb5b 	bl	8014060 <f_printf>
			f_printf(&log_file, ", ");
 80039aa:	f107 0308 	add.w	r3, r7, #8
 80039ae:	4948      	ldr	r1, [pc, #288]	; (8003ad0 <cliFatfs+0x2ac>)
 80039b0:	4618      	mov	r0, r3
 80039b2:	f010 fb55 	bl	8014060 <f_printf>
			f_printf(&log_file, "\n");
 80039b6:	f107 0308 	add.w	r3, r7, #8
 80039ba:	4946      	ldr	r1, [pc, #280]	; (8003ad4 <cliFatfs+0x2b0>)
 80039bc:	4618      	mov	r0, r3
 80039be:	f010 fb4f 	bl	8014060 <f_printf>

			for(int i=0; i<8; i++)
 80039c2:	2300      	movs	r3, #0
 80039c4:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80039c8:	e00c      	b.n	80039e4 <cliFatfs+0x1c0>
			{
				f_printf(&log_file, "%d \n", i);
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80039d2:	4941      	ldr	r1, [pc, #260]	; (8003ad8 <cliFatfs+0x2b4>)
 80039d4:	4618      	mov	r0, r3
 80039d6:	f010 fb43 	bl	8014060 <f_printf>
			for(int i=0; i<8; i++)
 80039da:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80039de:	3301      	adds	r3, #1
 80039e0:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80039e4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80039e8:	2b07      	cmp	r3, #7
 80039ea:	ddee      	ble.n	80039ca <cliFatfs+0x1a6>
			}

			f_rewind(&log_file);
 80039ec:	f107 0308 	add.w	r3, r7, #8
 80039f0:	2100      	movs	r1, #0
 80039f2:	4618      	mov	r0, r3
 80039f4:	f00f ff08 	bl	8013808 <f_lseek>


			UINT len;
			uint8_t data;

			while(cliKeepLoop())
 80039f8:	e01c      	b.n	8003a34 <cliFatfs+0x210>
			{
				len = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
				fp_ret = f_read(&log_file, &data, 1, &len);
 8003a00:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8003a04:	f207 213b 	addw	r1, r7, #571	; 0x23b
 8003a08:	f107 0008 	add.w	r0, r7, #8
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f00f fb9f 	bl	8013150 <f_read>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

				if(fp_ret != FR_OK)
 8003a18:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10f      	bne.n	8003a40 <cliFatfs+0x21c>
				{
					break;
				}

				if(len == 0)
 8003a20:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <cliFatfs+0x220>
				{
					break;
				}

				cliPrintf("%c", data);
 8003a28:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	482b      	ldr	r0, [pc, #172]	; (8003adc <cliFatfs+0x2b8>)
 8003a30:	f7ff fc2e 	bl	8003290 <cliPrintf>
			while(cliKeepLoop())
 8003a34:	f7ff fd26 	bl	8003484 <cliKeepLoop>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1dd      	bne.n	80039fa <cliFatfs+0x1d6>
 8003a3e:	e002      	b.n	8003a46 <cliFatfs+0x222>
					break;
 8003a40:	bf00      	nop
 8003a42:	e000      	b.n	8003a46 <cliFatfs+0x222>
					break;
 8003a44:	bf00      	nop
			}

			f_close(&log_file);
 8003a46:	f107 0308 	add.w	r3, r7, #8
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f00f feb2 	bl	80137b4 <f_close>
 8003a50:	e002      	b.n	8003a58 <cliFatfs+0x234>
		}
		else
		{
			cliPrintf("f_open fail\r\n");
 8003a52:	4823      	ldr	r0, [pc, #140]	; (8003ae0 <cliFatfs+0x2bc>)
 8003a54:	f7ff fc1c 	bl	8003290 <cliPrintf>
		}

		cliPrintf("%d ms\r\n", millis() - pre_time);
 8003a58:	f7fd ffa8 	bl	80019ac <millis>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	4619      	mov	r1, r3
 8003a66:	481f      	ldr	r0, [pc, #124]	; (8003ae4 <cliFatfs+0x2c0>)
 8003a68:	f7ff fc12 	bl	8003290 <cliPrintf>

		ret = true;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(ret != true)
 8003a72:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8003a76:	f083 0301 	eor.w	r3, r3, #1
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <cliFatfs+0x26e>
	{
		cliPrintf("fatfs info\n");
 8003a80:	4819      	ldr	r0, [pc, #100]	; (8003ae8 <cliFatfs+0x2c4>)
 8003a82:	f7ff fc05 	bl	8003290 <cliPrintf>
		cliPrintf("fatfs dir\n");
 8003a86:	4819      	ldr	r0, [pc, #100]	; (8003aec <cliFatfs+0x2c8>)
 8003a88:	f7ff fc02 	bl	8003290 <cliPrintf>
		cliPrintf("fatfs test\n");
 8003a8c:	4818      	ldr	r0, [pc, #96]	; (8003af0 <cliFatfs+0x2cc>)
 8003a8e:	f7ff fbff 	bl	8003290 <cliPrintf>
	}
}
 8003a92:	bf00      	nop
 8003a94:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	0801a65c 	.word	0x0801a65c
 8003aa0:	20000b94 	.word	0x20000b94
 8003aa4:	0801a664 	.word	0x0801a664
 8003aa8:	0801a678 	.word	0x0801a678
 8003aac:	0801a67c 	.word	0x0801a67c
 8003ab0:	0801a6b0 	.word	0x0801a6b0
 8003ab4:	0801a6bc 	.word	0x0801a6bc
 8003ab8:	0801a6c0 	.word	0x0801a6c0
 8003abc:	0801a6c4 	.word	0x0801a6c4
 8003ac0:	0801a6cc 	.word	0x0801a6cc
 8003ac4:	0801a6d4 	.word	0x0801a6d4
 8003ac8:	0801a6dc 	.word	0x0801a6dc
 8003acc:	0801a6e4 	.word	0x0801a6e4
 8003ad0:	0801a6ec 	.word	0x0801a6ec
 8003ad4:	0801a6f0 	.word	0x0801a6f0
 8003ad8:	0801a6f4 	.word	0x0801a6f4
 8003adc:	0801a6fc 	.word	0x0801a6fc
 8003ae0:	0801a700 	.word	0x0801a700
 8003ae4:	0801a710 	.word	0x0801a710
 8003ae8:	0801a718 	.word	0x0801a718
 8003aec:	0801a724 	.word	0x0801a724
 8003af0:	0801a730 	.word	0x0801a730

08003af4 <gpioInit>:
static void cliGpio(cli_args_t *args);
#endif


bool gpioInit(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
	bool ret = true;
 8003afa:	2301      	movs	r3, #1
 8003afc:	71fb      	strb	r3, [r7, #7]

#ifdef _USE_HW_CLI
	cliAdd("gpio", cliGpio);
 8003afe:	4904      	ldr	r1, [pc, #16]	; (8003b10 <gpioInit+0x1c>)
 8003b00:	4804      	ldr	r0, [pc, #16]	; (8003b14 <gpioInit+0x20>)
 8003b02:	f7ff fcd5 	bl	80034b0 <cliAdd>
#endif

	return ret;
 8003b06:	79fb      	ldrb	r3, [r7, #7]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	08003c2d 	.word	0x08003c2d
 8003b14:	0801a73c 	.word	0x0801a73c

08003b18 <gpioPinWrite>:

	return ret;
}

void gpioPinWrite(uint8_t ch, bool value)
{
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	460a      	mov	r2, r1
 8003b22:	71fb      	strb	r3, [r7, #7]
 8003b24:	4613      	mov	r3, r2
 8003b26:	71bb      	strb	r3, [r7, #6]
	if(ch >= GPIO_MAX_CH)
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d840      	bhi.n	8003bb0 <gpioPinWrite+0x98>
	{
		return;
	}

	if(value)
 8003b2e:	79bb      	ldrb	r3, [r7, #6]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01e      	beq.n	8003b72 <gpioPinWrite+0x5a>
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8003b34:	79fa      	ldrb	r2, [r7, #7]
 8003b36:	4920      	ldr	r1, [pc, #128]	; (8003bb8 <gpioPinWrite+0xa0>)
 8003b38:	4613      	mov	r3, r2
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	79fa      	ldrb	r2, [r7, #7]
 8003b46:	491c      	ldr	r1, [pc, #112]	; (8003bb8 <gpioPinWrite+0xa0>)
 8003b48:	4613      	mov	r3, r2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	3304      	adds	r3, #4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	b299      	uxth	r1, r3
 8003b58:	79fa      	ldrb	r2, [r7, #7]
 8003b5a:	4c17      	ldr	r4, [pc, #92]	; (8003bb8 <gpioPinWrite+0xa0>)
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4423      	add	r3, r4
 8003b66:	3309      	adds	r3, #9
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f003 feb4 	bl	80078d8 <HAL_GPIO_WritePin>
 8003b70:	e01f      	b.n	8003bb2 <gpioPinWrite+0x9a>
	}
	else
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8003b72:	79fa      	ldrb	r2, [r7, #7]
 8003b74:	4910      	ldr	r1, [pc, #64]	; (8003bb8 <gpioPinWrite+0xa0>)
 8003b76:	4613      	mov	r3, r2
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	79fa      	ldrb	r2, [r7, #7]
 8003b84:	490c      	ldr	r1, [pc, #48]	; (8003bb8 <gpioPinWrite+0xa0>)
 8003b86:	4613      	mov	r3, r2
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	3304      	adds	r3, #4
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	b299      	uxth	r1, r3
 8003b96:	79fa      	ldrb	r2, [r7, #7]
 8003b98:	4c07      	ldr	r4, [pc, #28]	; (8003bb8 <gpioPinWrite+0xa0>)
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4423      	add	r3, r4
 8003ba4:	330a      	adds	r3, #10
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f003 fe95 	bl	80078d8 <HAL_GPIO_WritePin>
 8003bae:	e000      	b.n	8003bb2 <gpioPinWrite+0x9a>
		return;
 8003bb0:	bf00      	nop
	}
}
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd90      	pop	{r4, r7, pc}
 8003bb8:	08026b94 	.word	0x08026b94

08003bbc <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]

	if(ch >= GPIO_MAX_CH)
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d901      	bls.n	8003bd4 <gpioPinRead+0x18>
	{
		return false;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e024      	b.n	8003c1e <gpioPinRead+0x62>
	}

	if(HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8003bd4:	79fa      	ldrb	r2, [r7, #7]
 8003bd6:	4914      	ldr	r1, [pc, #80]	; (8003c28 <gpioPinRead+0x6c>)
 8003bd8:	4613      	mov	r3, r2
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	79fa      	ldrb	r2, [r7, #7]
 8003be6:	4910      	ldr	r1, [pc, #64]	; (8003c28 <gpioPinRead+0x6c>)
 8003be8:	4613      	mov	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	f003 fe55 	bl	80078a8 <HAL_GPIO_ReadPin>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4618      	mov	r0, r3
 8003c02:	79fa      	ldrb	r2, [r7, #7]
 8003c04:	4908      	ldr	r1, [pc, #32]	; (8003c28 <gpioPinRead+0x6c>)
 8003c06:	4613      	mov	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	3309      	adds	r3, #9
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4298      	cmp	r0, r3
 8003c16:	d101      	bne.n	8003c1c <gpioPinRead+0x60>
	{
		ret = true;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	08026b94 	.word	0x08026b94

08003c2c <cliGpio>:


#ifdef _USE_HW_CLI

void cliGpio(cli_args_t *args)
{
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003c34:	2300      	movs	r3, #0
 8003c36:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 1 && args->isStr(0, "show") == true)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d129      	bne.n	8003c94 <cliGpio+0x68>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	4948      	ldr	r1, [pc, #288]	; (8003d68 <cliGpio+0x13c>)
 8003c46:	2000      	movs	r0, #0
 8003c48:	4798      	blx	r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d021      	beq.n	8003c94 <cliGpio+0x68>
	{
		while(cliKeepLoop())
 8003c50:	e019      	b.n	8003c86 <cliGpio+0x5a>
		{
			for(int i=0; i<GPIO_MAX_CH; i++)
 8003c52:	2300      	movs	r3, #0
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	e00c      	b.n	8003c72 <cliGpio+0x46>
			{
				cliPrintf("%d", gpioPinRead(i));
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ffad 	bl	8003bbc <gpioPinRead>
 8003c62:	4603      	mov	r3, r0
 8003c64:	4619      	mov	r1, r3
 8003c66:	4841      	ldr	r0, [pc, #260]	; (8003d6c <cliGpio+0x140>)
 8003c68:	f7ff fb12 	bl	8003290 <cliPrintf>
			for(int i=0; i<GPIO_MAX_CH; i++)
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	ddef      	ble.n	8003c58 <cliGpio+0x2c>
			}
			cliPrintf("\n");
 8003c78:	483d      	ldr	r0, [pc, #244]	; (8003d70 <cliGpio+0x144>)
 8003c7a:	f7ff fb09 	bl	8003290 <cliPrintf>
			delay(300);
 8003c7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003c82:	f7fd fe88 	bl	8001996 <delay>
		while(cliKeepLoop())
 8003c86:	f7ff fbfd 	bl	8003484 <cliKeepLoop>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e0      	bne.n	8003c52 <cliGpio+0x26>
		}

		ret = true;
 8003c90:	2301      	movs	r3, #1
 8003c92:	75fb      	strb	r3, [r7, #23]
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d124      	bne.n	8003ce6 <cliGpio+0xba>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	4934      	ldr	r1, [pc, #208]	; (8003d74 <cliGpio+0x148>)
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	4798      	blx	r3
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01c      	beq.n	8003ce6 <cliGpio+0xba>
	{
		uint8_t ch;

		ch = (uint8_t)args->getData(1);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	4798      	blx	r3
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	73fb      	strb	r3, [r7, #15]

		while(cliKeepLoop())
 8003cb8:	e00e      	b.n	8003cd8 <cliGpio+0xac>
		{
			cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8003cba:	7bfc      	ldrb	r4, [r7, #15]
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff ff7c 	bl	8003bbc <gpioPinRead>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4621      	mov	r1, r4
 8003cca:	482b      	ldr	r0, [pc, #172]	; (8003d78 <cliGpio+0x14c>)
 8003ccc:	f7ff fae0 	bl	8003290 <cliPrintf>
			delay(300);
 8003cd0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003cd4:	f7fd fe5f 	bl	8001996 <delay>
		while(cliKeepLoop())
 8003cd8:	f7ff fbd4 	bl	8003484 <cliKeepLoop>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1eb      	bne.n	8003cba <cliGpio+0x8e>
		}

		ret = true;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	75fb      	strb	r3, [r7, #23]
	}

	if(args->argc == 3 && args->isStr(0, "write") == true)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d126      	bne.n	8003d3c <cliGpio+0x110>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	4922      	ldr	r1, [pc, #136]	; (8003d7c <cliGpio+0x150>)
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	4798      	blx	r3
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d01e      	beq.n	8003d3c <cliGpio+0x110>
	{
		uint8_t ch;
		uint8_t data;

		ch = (uint8_t)args->getData(1);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2001      	movs	r0, #1
 8003d04:	4798      	blx	r3
 8003d06:	4603      	mov	r3, r0
 8003d08:	73bb      	strb	r3, [r7, #14]
		data = (uint8_t)args->getData(2);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2002      	movs	r0, #2
 8003d10:	4798      	blx	r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	737b      	strb	r3, [r7, #13]

		gpioPinWrite(ch, data);
 8003d16:	7b7b      	ldrb	r3, [r7, #13]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf14      	ite	ne
 8003d1c:	2301      	movne	r3, #1
 8003d1e:	2300      	moveq	r3, #0
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	7bbb      	ldrb	r3, [r7, #14]
 8003d24:	4611      	mov	r1, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff fef6 	bl	8003b18 <gpioPinWrite>

		cliPrintf("gpio write %d : %d\n", ch, data);
 8003d2c:	7bbb      	ldrb	r3, [r7, #14]
 8003d2e:	7b7a      	ldrb	r2, [r7, #13]
 8003d30:	4619      	mov	r1, r3
 8003d32:	4813      	ldr	r0, [pc, #76]	; (8003d80 <cliGpio+0x154>)
 8003d34:	f7ff faac 	bl	8003290 <cliPrintf>

		ret = true;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 8003d3c:	7dfb      	ldrb	r3, [r7, #23]
 8003d3e:	f083 0301 	eor.w	r3, r3, #1
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <cliGpio+0x132>
	{
		cliPrintf("gpio show\n");
 8003d48:	480e      	ldr	r0, [pc, #56]	; (8003d84 <cliGpio+0x158>)
 8003d4a:	f7ff faa1 	bl	8003290 <cliPrintf>
		cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8003d4e:	2103      	movs	r1, #3
 8003d50:	480d      	ldr	r0, [pc, #52]	; (8003d88 <cliGpio+0x15c>)
 8003d52:	f7ff fa9d 	bl	8003290 <cliPrintf>
		cliPrintf("gpio write ch[0~%d]\n", GPIO_MAX_CH-1);
 8003d56:	2103      	movs	r1, #3
 8003d58:	480c      	ldr	r0, [pc, #48]	; (8003d8c <cliGpio+0x160>)
 8003d5a:	f7ff fa99 	bl	8003290 <cliPrintf>
	}
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd90      	pop	{r4, r7, pc}
 8003d66:	bf00      	nop
 8003d68:	0801a744 	.word	0x0801a744
 8003d6c:	0801a74c 	.word	0x0801a74c
 8003d70:	0801a750 	.word	0x0801a750
 8003d74:	0801a754 	.word	0x0801a754
 8003d78:	0801a75c 	.word	0x0801a75c
 8003d7c:	0801a770 	.word	0x0801a770
 8003d80:	0801a778 	.word	0x0801a778
 8003d84:	0801a78c 	.word	0x0801a78c
 8003d88:	0801a798 	.word	0x0801a798
 8003d8c:	0801a7ac 	.word	0x0801a7ac

08003d90 <i2cInit>:

static void delayUs(uint32_t us);


bool i2cInit(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i=0; i<I2C_MAX_CH; i++)
 8003d96:	2300      	movs	r3, #0
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	e011      	b.n	8003dc0 <i2cInit+0x30>
	{
		i2c_timeout[i] = 10;
 8003d9c:	4a10      	ldr	r2, [pc, #64]	; (8003de0 <i2cInit+0x50>)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	210a      	movs	r1, #10
 8003da2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		i2c_errcount[i] = 0;
 8003da6:	4a0f      	ldr	r2, [pc, #60]	; (8003de4 <i2cInit+0x54>)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2100      	movs	r1, #0
 8003dac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		is_begin[i] = false;
 8003db0:	4a0d      	ldr	r2, [pc, #52]	; (8003de8 <i2cInit+0x58>)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4413      	add	r3, r2
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
	for(i=0; i<I2C_MAX_CH; i++)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	607b      	str	r3, [r7, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0ea      	beq.n	8003d9c <i2cInit+0xc>
	}

#ifdef _USE_HW_CLI
	cliAdd("i2c", cliI2C);
 8003dc6:	4909      	ldr	r1, [pc, #36]	; (8003dec <i2cInit+0x5c>)
 8003dc8:	4809      	ldr	r0, [pc, #36]	; (8003df0 <i2cInit+0x60>)
 8003dca:	f7ff fb71 	bl	80034b0 <cliAdd>
#endif

	is_init = true;
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <i2cInit+0x64>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
	return true;
 8003dd4:	2301      	movs	r3, #1
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000dd0 	.word	0x20000dd0
 8003de4:	20000dd4 	.word	0x20000dd4
 8003de8:	20000de0 	.word	0x20000de0
 8003dec:	08004305 	.word	0x08004305
 8003df0:	0801a7c4 	.word	0x0801a7c4
 8003df4:	20000ddc 	.word	0x20000ddc

08003df8 <i2cBegin>:
{
	return is_init;
}

bool i2cBegin(uint8_t ch, uint32_t freq_khz)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	6039      	str	r1, [r7, #0]
 8003e02:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]

	I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8003e08:	79fa      	ldrb	r2, [r7, #7]
 8003e0a:	4929      	ldr	r1, [pc, #164]	; (8003eb0 <i2cBegin+0xb8>)
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60bb      	str	r3, [r7, #8]

	if(ch>=I2C_MAX_CH)
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <i2cBegin+0x2c>
	{
		return false;
 8003e20:	2300      	movs	r3, #0
 8003e22:	e041      	b.n	8003ea8 <i2cBegin+0xb0>
	}

	switch(ch)
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d13d      	bne.n	8003ea6 <i2cBegin+0xae>
	{
		case _DEF_I2C1:
			i2c_freq[ch] = freq_khz;
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	4921      	ldr	r1, [pc, #132]	; (8003eb4 <i2cBegin+0xbc>)
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			hi2c2.Instance = I2C2;
 8003e34:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <i2cBegin+0xc0>)
 8003e36:	4a21      	ldr	r2, [pc, #132]	; (8003ebc <i2cBegin+0xc4>)
 8003e38:	601a      	str	r2, [r3, #0]
			hi2c2.Init.ClockSpeed = freq_khz * 1000;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e40:	fb02 f303 	mul.w	r3, r2, r3
 8003e44:	4a1c      	ldr	r2, [pc, #112]	; (8003eb8 <i2cBegin+0xc0>)
 8003e46:	6053      	str	r3, [r2, #4]
			hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e48:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <i2cBegin+0xc0>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	609a      	str	r2, [r3, #8]
			hi2c2.Init.OwnAddress1 = 0;
 8003e4e:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <i2cBegin+0xc0>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	60da      	str	r2, [r3, #12]
			hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e54:	4b18      	ldr	r3, [pc, #96]	; (8003eb8 <i2cBegin+0xc0>)
 8003e56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e5a:	611a      	str	r2, [r3, #16]
			hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e5c:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <i2cBegin+0xc0>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	615a      	str	r2, [r3, #20]
			hi2c2.Init.OwnAddress2 = 0;
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <i2cBegin+0xc0>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	619a      	str	r2, [r3, #24]
			hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e68:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <i2cBegin+0xc0>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	61da      	str	r2, [r3, #28]
			hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e6e:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <i2cBegin+0xc0>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	621a      	str	r2, [r3, #32]

			i2cReset(ch);
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f824 	bl	8003ec4 <i2cReset>

			HAL_I2C_DeInit(p_handle);
 8003e7c:	68b8      	ldr	r0, [r7, #8]
 8003e7e:	f003 fea3 	bl	8007bc8 <HAL_I2C_DeInit>
			if(HAL_I2C_Init(p_handle) != HAL_OK)
 8003e82:	68b8      	ldr	r0, [r7, #8]
 8003e84:	f003 fd5c 	bl	8007940 <HAL_I2C_Init>
			{

			}

      /* Enable the Analog I2C Filter */
      HAL_I2CEx_ConfigAnalogFilter(p_handle,I2C_ANALOGFILTER_ENABLE);
 8003e88:	2100      	movs	r1, #0
 8003e8a:	68b8      	ldr	r0, [r7, #8]
 8003e8c:	f006 fbb7 	bl	800a5fe <HAL_I2CEx_ConfigAnalogFilter>

      /* Configure Digital filter */
      HAL_I2CEx_ConfigDigitalFilter(p_handle, 0);
 8003e90:	2100      	movs	r1, #0
 8003e92:	68b8      	ldr	r0, [r7, #8]
 8003e94:	f006 fbef 	bl	800a676 <HAL_I2CEx_ConfigDigitalFilter>

      ret = true;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      is_begin[ch] = true;
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	4a08      	ldr	r2, [pc, #32]	; (8003ec0 <i2cBegin+0xc8>)
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	54d1      	strb	r1, [r2, r3]
      break;
 8003ea4:	bf00      	nop
	}

	return ret;
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	2000006c 	.word	0x2000006c
 8003eb4:	20000dd8 	.word	0x20000dd8
 8003eb8:	20000de4 	.word	0x20000de4
 8003ebc:	40005800 	.word	0x40005800
 8003ec0:	20000de0 	.word	0x20000de0

08003ec4 <i2cReset>:
{
	return is_begin[ch];
}

void i2cReset(uint8_t ch)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08a      	sub	sp, #40	; 0x28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  i2c_tbl_t *p_pin = &i2c_tbl[ch];
 8003ece:	79fa      	ldrb	r2, [r7, #7]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4a44      	ldr	r2, [pc, #272]	; (8003fec <i2cReset+0x128>)
 8003eda:	4413      	add	r3, r2
 8003edc:	623b      	str	r3, [r7, #32]


  GPIO_InitStruct.Pin       = p_pin->scl_pin;
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_OD;
 8003ee4:	2311      	movs	r3, #17
 8003ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8003eec:	2303      	movs	r3, #3
 8003eee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(p_pin->scl_port, &GPIO_InitStruct);
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f107 020c 	add.w	r2, r7, #12
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f003 fa6c 	bl	80073d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin       = p_pin->sda_pin;
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_OD;
 8003f06:	2311      	movs	r3, #17
 8003f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(p_pin->sda_port, &GPIO_InitStruct);
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f107 020c 	add.w	r2, r7, #12
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f003 fa5d 	bl	80073d8 <HAL_GPIO_Init>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
  */

  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	6858      	ldr	r0, [r3, #4]
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2201      	movs	r2, #1
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f003 fcd4 	bl	80078d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_SET);
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	68d8      	ldr	r0, [r3, #12]
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f003 fccb 	bl	80078d8 <HAL_GPIO_WritePin>
  delayUs(5);
 8003f42:	2005      	movs	r0, #5
 8003f44:	f000 f92a 	bl	800419c <delayUs>

  for (int i = 0; i < 9; i++)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4c:	e01a      	b.n	8003f84 <i2cReset+0xc0>
  {

    HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_RESET);
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	6858      	ldr	r0, [r3, #4]
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2200      	movs	r2, #0
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	f003 fcbc 	bl	80078d8 <HAL_GPIO_WritePin>
    delayUs(5);
 8003f60:	2005      	movs	r0, #5
 8003f62:	f000 f91b 	bl	800419c <delayUs>
    HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	6858      	ldr	r0, [r3, #4]
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2201      	movs	r2, #1
 8003f72:	4619      	mov	r1, r3
 8003f74:	f003 fcb0 	bl	80078d8 <HAL_GPIO_WritePin>
    delayUs(5);
 8003f78:	2005      	movs	r0, #5
 8003f7a:	f000 f90f 	bl	800419c <delayUs>
  for (int i = 0; i < 9; i++)
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	3301      	adds	r3, #1
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	dde1      	ble.n	8003f4e <i2cReset+0x8a>
  }

  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_RESET);
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	6858      	ldr	r0, [r3, #4]
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2200      	movs	r2, #0
 8003f96:	4619      	mov	r1, r3
 8003f98:	f003 fc9e 	bl	80078d8 <HAL_GPIO_WritePin>
  delayUs(5);
 8003f9c:	2005      	movs	r0, #5
 8003f9e:	f000 f8fd 	bl	800419c <delayUs>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_RESET);
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	68d8      	ldr	r0, [r3, #12]
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2200      	movs	r2, #0
 8003fae:	4619      	mov	r1, r3
 8003fb0:	f003 fc92 	bl	80078d8 <HAL_GPIO_WritePin>
  delayUs(5);
 8003fb4:	2005      	movs	r0, #5
 8003fb6:	f000 f8f1 	bl	800419c <delayUs>

  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	6858      	ldr	r0, [r3, #4]
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	f003 fc86 	bl	80078d8 <HAL_GPIO_WritePin>
  delayUs(5);
 8003fcc:	2005      	movs	r0, #5
 8003fce:	f000 f8e5 	bl	800419c <delayUs>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_SET);
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	68d8      	ldr	r0, [r3, #12]
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2201      	movs	r2, #1
 8003fde:	4619      	mov	r1, r3
 8003fe0:	f003 fc7a 	bl	80078d8 <HAL_GPIO_WritePin>
}
 8003fe4:	bf00      	nop
 8003fe6:	3728      	adds	r7, #40	; 0x28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	2000006c 	.word	0x2000006c

08003ff0 <i2cIsDeviceReady>:

bool i2cIsDeviceReady(uint8_t ch, uint8_t dev_addr)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	460a      	mov	r2, r1
 8003ffa:	71fb      	strb	r3, [r7, #7]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	71bb      	strb	r3, [r7, #6]
	I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8004000:	79fa      	ldrb	r2, [r7, #7]
 8004002:	490e      	ldr	r1, [pc, #56]	; (800403c <i2cIsDeviceReady+0x4c>)
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_IsDeviceReady(p_handle, dev_addr << 1, 10, 10) == HAL_OK)
 8004012:	79bb      	ldrb	r3, [r7, #6]
 8004014:	b29b      	uxth	r3, r3
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	b299      	uxth	r1, r3
 800401a:	230a      	movs	r3, #10
 800401c:	220a      	movs	r2, #10
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f004 f942 	bl	80082a8 <HAL_I2C_IsDeviceReady>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <i2cIsDeviceReady+0x42>
  __ASM volatile ("cpsie i" : : : "memory");
 800402a:	b662      	cpsie	i
}
 800402c:	bf00      	nop
	{
		__enable_irq();
		return true;
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <i2cIsDeviceReady+0x44>
	}

	return false;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	2000006c 	.word	0x2000006c

08004040 <i2cReadByte>:

	return ret;
}

bool i2cReadByte(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t timeout)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af02      	add	r7, sp, #8
 8004046:	607b      	str	r3, [r7, #4]
 8004048:	4603      	mov	r3, r0
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	460b      	mov	r3, r1
 800404e:	81bb      	strh	r3, [r7, #12]
 8004050:	4613      	mov	r3, r2
 8004052:	817b      	strh	r3, [r7, #10]
	return i2cReadBytes(ch, dev_addr, reg_addr, p_data, 1, timeout);
 8004054:	897a      	ldrh	r2, [r7, #10]
 8004056:	89b9      	ldrh	r1, [r7, #12]
 8004058:	7bf8      	ldrb	r0, [r7, #15]
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	9301      	str	r3, [sp, #4]
 800405e:	2301      	movs	r3, #1
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f000 f806 	bl	8004074 <i2cReadBytes>
 8004068:	4603      	mov	r3, r0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <i2cReadBytes>:

bool i2cReadBytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08c      	sub	sp, #48	; 0x30
 8004078:	af04      	add	r7, sp, #16
 800407a:	607b      	str	r3, [r7, #4]
 800407c:	4603      	mov	r3, r0
 800407e:	73fb      	strb	r3, [r7, #15]
 8004080:	460b      	mov	r3, r1
 8004082:	81bb      	strh	r3, [r7, #12]
 8004084:	4613      	mov	r3, r2
 8004086:	817b      	strh	r3, [r7, #10]
	bool ret;
	HAL_StatusTypeDef i2c_ret;
	I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8004088:	7bfa      	ldrb	r2, [r7, #15]
 800408a:	4916      	ldr	r1, [pc, #88]	; (80040e4 <i2cReadBytes+0x70>)
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	61bb      	str	r3, [r7, #24]

	if(ch>=I2C_MAX_CH)
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <i2cReadBytes+0x30>
	{
		return false;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e01a      	b.n	80040da <i2cReadBytes+0x66>
	}

	i2c_ret = HAL_I2C_Mem_Read(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, p_data, length, timeout);
 80040a4:	89bb      	ldrh	r3, [r7, #12]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	b299      	uxth	r1, r3
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	8978      	ldrh	r0, [r7, #10]
 80040b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b2:	9202      	str	r2, [sp, #8]
 80040b4:	9301      	str	r3, [sp, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	2301      	movs	r3, #1
 80040bc:	4602      	mov	r2, r0
 80040be:	69b8      	ldr	r0, [r7, #24]
 80040c0:	f003 fec0 	bl	8007e44 <HAL_I2C_Mem_Read>
 80040c4:	4603      	mov	r3, r0
 80040c6:	75fb      	strb	r3, [r7, #23]

	if(i2c_ret == HAL_OK)
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d102      	bne.n	80040d4 <i2cReadBytes+0x60>
	{
		ret = true;
 80040ce:	2301      	movs	r3, #1
 80040d0:	77fb      	strb	r3, [r7, #31]
 80040d2:	e001      	b.n	80040d8 <i2cReadBytes+0x64>
	}
	else
	{
		ret = false;
 80040d4:	2300      	movs	r3, #0
 80040d6:	77fb      	strb	r3, [r7, #31]
	}

	return ret;
 80040d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3720      	adds	r7, #32
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	2000006c 	.word	0x2000006c

080040e8 <i2cWriteByte>:

	return ret;
}

bool i2cWriteByte(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t data, uint32_t timeout)
{
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	4604      	mov	r4, r0
 80040f0:	4608      	mov	r0, r1
 80040f2:	4611      	mov	r1, r2
 80040f4:	461a      	mov	r2, r3
 80040f6:	4623      	mov	r3, r4
 80040f8:	71fb      	strb	r3, [r7, #7]
 80040fa:	4603      	mov	r3, r0
 80040fc:	80bb      	strh	r3, [r7, #4]
 80040fe:	460b      	mov	r3, r1
 8004100:	807b      	strh	r3, [r7, #2]
 8004102:	4613      	mov	r3, r2
 8004104:	71bb      	strb	r3, [r7, #6]
	return i2cWriteBytes(ch, dev_addr, reg_addr, &data, 1, timeout);
 8004106:	1dbc      	adds	r4, r7, #6
 8004108:	887a      	ldrh	r2, [r7, #2]
 800410a:	88b9      	ldrh	r1, [r7, #4]
 800410c:	79f8      	ldrb	r0, [r7, #7]
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	2301      	movs	r3, #1
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	4623      	mov	r3, r4
 8004118:	f000 f806 	bl	8004128 <i2cWriteBytes>
 800411c:	4603      	mov	r3, r0
}
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bd90      	pop	{r4, r7, pc}
	...

08004128 <i2cWriteBytes>:

bool i2cWriteBytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08c      	sub	sp, #48	; 0x30
 800412c:	af04      	add	r7, sp, #16
 800412e:	607b      	str	r3, [r7, #4]
 8004130:	4603      	mov	r3, r0
 8004132:	73fb      	strb	r3, [r7, #15]
 8004134:	460b      	mov	r3, r1
 8004136:	81bb      	strh	r3, [r7, #12]
 8004138:	4613      	mov	r3, r2
 800413a:	817b      	strh	r3, [r7, #10]
	bool ret;
	HAL_StatusTypeDef i2c_ret;
	I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 800413c:	7bfa      	ldrb	r2, [r7, #15]
 800413e:	4916      	ldr	r1, [pc, #88]	; (8004198 <i2cWriteBytes+0x70>)
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	61bb      	str	r3, [r7, #24]

	if(ch>=I2C_MAX_CH)
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <i2cWriteBytes+0x30>
	{
		return false;
 8004154:	2300      	movs	r3, #0
 8004156:	e01a      	b.n	800418e <i2cWriteBytes+0x66>
	}

	i2c_ret = HAL_I2C_Mem_Write(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, p_data, length, timeout);
 8004158:	89bb      	ldrh	r3, [r7, #12]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	b299      	uxth	r1, r3
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	b29b      	uxth	r3, r3
 8004162:	8978      	ldrh	r0, [r7, #10]
 8004164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004166:	9202      	str	r2, [sp, #8]
 8004168:	9301      	str	r3, [sp, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	2301      	movs	r3, #1
 8004170:	4602      	mov	r2, r0
 8004172:	69b8      	ldr	r0, [r7, #24]
 8004174:	f003 fd6c 	bl	8007c50 <HAL_I2C_Mem_Write>
 8004178:	4603      	mov	r3, r0
 800417a:	75fb      	strb	r3, [r7, #23]

	if(i2c_ret == HAL_OK)
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <i2cWriteBytes+0x60>
	{
		ret = true;
 8004182:	2301      	movs	r3, #1
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e001      	b.n	800418c <i2cWriteBytes+0x64>
	}
	else
	{
		ret = false;
 8004188:	2300      	movs	r3, #0
 800418a:	77fb      	strb	r3, [r7, #31]
	}

	return ret;
 800418c:	7ffb      	ldrb	r3, [r7, #31]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3720      	adds	r7, #32
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	2000006c 	.word	0x2000006c

0800419c <delayUs>:
{
	return i2c_errcount[ch];
}

void delayUs(uint32_t us)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	volatile uint32_t i;

	for(i=0; i<us*1000; i++)
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	e002      	b.n	80041b0 <delayUs+0x14>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3301      	adds	r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041b6:	fb03 f202 	mul.w	r2, r3, r2
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d8f4      	bhi.n	80041aa <delayUs+0xe>
	{

	}
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
	UNUSED(hi2c);
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
	...

080041e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a29      	ldr	r2, [pc, #164]	; (80042a8 <HAL_I2C_MspInit+0xc4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d14c      	bne.n	80042a0 <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	4b28      	ldr	r3, [pc, #160]	; (80042ac <HAL_I2C_MspInit+0xc8>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	4a27      	ldr	r2, [pc, #156]	; (80042ac <HAL_I2C_MspInit+0xc8>)
 8004210:	f043 0302 	orr.w	r3, r3, #2
 8004214:	6313      	str	r3, [r2, #48]	; 0x30
 8004216:	4b25      	ldr	r3, [pc, #148]	; (80042ac <HAL_I2C_MspInit+0xc8>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004228:	2312      	movs	r3, #18
 800422a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422c:	2300      	movs	r3, #0
 800422e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004230:	2303      	movs	r3, #3
 8004232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004234:	2304      	movs	r3, #4
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	4619      	mov	r1, r3
 800423e:	481c      	ldr	r0, [pc, #112]	; (80042b0 <HAL_I2C_MspInit+0xcc>)
 8004240:	f003 f8ca 	bl	80073d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004244:	2308      	movs	r3, #8
 8004246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004248:	2312      	movs	r3, #18
 800424a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424c:	2300      	movs	r3, #0
 800424e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004250:	2303      	movs	r3, #3
 8004252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004254:	2309      	movs	r3, #9
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004258:	f107 0314 	add.w	r3, r7, #20
 800425c:	4619      	mov	r1, r3
 800425e:	4814      	ldr	r0, [pc, #80]	; (80042b0 <HAL_I2C_MspInit+0xcc>)
 8004260:	f003 f8ba 	bl	80073d8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	4b10      	ldr	r3, [pc, #64]	; (80042ac <HAL_I2C_MspInit+0xc8>)
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	4a0f      	ldr	r2, [pc, #60]	; (80042ac <HAL_I2C_MspInit+0xc8>)
 800426e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004272:	6413      	str	r3, [r2, #64]	; 0x40
 8004274:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <HAL_I2C_MspInit+0xc8>)
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8004280:	2200      	movs	r2, #0
 8004282:	2100      	movs	r1, #0
 8004284:	2021      	movs	r0, #33	; 0x21
 8004286:	f002 f970 	bl	800656a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800428a:	2021      	movs	r0, #33	; 0x21
 800428c:	f002 f989 	bl	80065a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8004290:	2200      	movs	r2, #0
 8004292:	2100      	movs	r1, #0
 8004294:	2022      	movs	r0, #34	; 0x22
 8004296:	f002 f968 	bl	800656a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800429a:	2022      	movs	r0, #34	; 0x22
 800429c:	f002 f981 	bl	80065a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80042a0:	bf00      	nop
 80042a2:	3728      	adds	r7, #40	; 0x28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40005800 	.word	0x40005800
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40020400 	.word	0x40020400

080042b4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a0d      	ldr	r2, [pc, #52]	; (80042f8 <HAL_I2C_MspDeInit+0x44>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d114      	bne.n	80042f0 <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80042c6:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <HAL_I2C_MspDeInit+0x48>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	4a0c      	ldr	r2, [pc, #48]	; (80042fc <HAL_I2C_MspDeInit+0x48>)
 80042cc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80042d0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80042d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042d6:	480a      	ldr	r0, [pc, #40]	; (8004300 <HAL_I2C_MspDeInit+0x4c>)
 80042d8:	f003 fa02 	bl	80076e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 80042dc:	2108      	movs	r1, #8
 80042de:	4808      	ldr	r0, [pc, #32]	; (8004300 <HAL_I2C_MspDeInit+0x4c>)
 80042e0:	f003 f9fe 	bl	80076e0 <HAL_GPIO_DeInit>

    /* I2C2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80042e4:	2021      	movs	r0, #33	; 0x21
 80042e6:	f002 f96a 	bl	80065be <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80042ea:	2022      	movs	r0, #34	; 0x22
 80042ec:	f002 f967 	bl	80065be <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40005800 	.word	0x40005800
 80042fc:	40023800 	.word	0x40023800
 8004300:	40020400 	.word	0x40020400

08004304 <cliI2C>:

#ifdef _USE_HW_CLI
void cliI2C(cli_args_t *args)
{
 8004304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004306:	b0ad      	sub	sp, #180	; 0xb4
 8004308:	af02      	add	r7, sp, #8
 800430a:	6078      	str	r0, [r7, #4]
	bool ret = true;
 800430c:	2301      	movs	r3, #1
 800430e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	uint32_t i;
	uint8_t i2c_data[128];
	uint32_t pre_time;

	if(args->argc == 2)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d16b      	bne.n	80043f2 <cliI2C+0xee>
	{
		print_ch = (uint16_t)args->getData(1);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2001      	movs	r0, #1
 8004320:	4798      	blx	r3
 8004322:	4603      	mov	r3, r0
 8004324:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		print_ch = constrain(print_ch, 1, I2C_MAX_CH);
 8004328:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800432c:	2b00      	cmp	r3, #0
 800432e:	d006      	beq.n	800433e <cliI2C+0x3a>
 8004330:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004334:	2b01      	cmp	r3, #1
 8004336:	bf28      	it	cs
 8004338:	2301      	movcs	r3, #1
 800433a:	b2db      	uxtb	r3, r3
 800433c:	e000      	b.n	8004340 <cliI2C+0x3c>
 800433e:	2301      	movs	r3, #1
 8004340:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		print_ch -= 1;
 8004344:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004348:	3b01      	subs	r3, #1
 800434a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

		if(args->isStr(0, "scan") == true)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	4991      	ldr	r1, [pc, #580]	; (8004598 <cliI2C+0x294>)
 8004354:	2000      	movs	r0, #0
 8004356:	4798      	blx	r3
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d022      	beq.n	80043a4 <cliI2C+0xa0>
		{
			for(i=0x00; i<= 0x7F; i++)
 800435e:	2300      	movs	r3, #0
 8004360:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004364:	e019      	b.n	800439a <cliI2C+0x96>
			{
				if(i2cIsDeviceReady(print_ch, i) == true)
 8004366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800436a:	b2da      	uxtb	r2, r3
 800436c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004370:	4611      	mov	r1, r2
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fe3c 	bl	8003ff0 <i2cIsDeviceReady>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <cliI2C+0x8c>
				{
					cliPrintf("I2C CH%d Addr 0x%X : OK\n", print_ch+1, i);
 800437e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004382:	3301      	adds	r3, #1
 8004384:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004388:	4619      	mov	r1, r3
 800438a:	4884      	ldr	r0, [pc, #528]	; (800459c <cliI2C+0x298>)
 800438c:	f7fe ff80 	bl	8003290 <cliPrintf>
			for(i=0x00; i<= 0x7F; i++)
 8004390:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004394:	3301      	adds	r3, #1
 8004396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800439a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800439e:	2b7f      	cmp	r3, #127	; 0x7f
 80043a0:	d9e1      	bls.n	8004366 <cliI2C+0x62>
 80043a2:	e0df      	b.n	8004564 <cliI2C+0x260>
				}
			}
		}
		else if(args->isStr(0, "begin") == true)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	497d      	ldr	r1, [pc, #500]	; (80045a0 <cliI2C+0x29c>)
 80043aa:	2000      	movs	r0, #0
 80043ac:	4798      	blx	r3
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80d7 	beq.w	8004564 <cliI2C+0x260>
		{
			i2c_ret = i2cBegin(print_ch, 400);
 80043b6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80043ba:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fd1a 	bl	8003df8 <i2cBegin>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			if(i2c_ret == true)
 80043ca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <cliI2C+0xde>
			{
				cliPrintf("I2C CH%d Begin OK\n", print_ch + 1);
 80043d2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80043d6:	3301      	adds	r3, #1
 80043d8:	4619      	mov	r1, r3
 80043da:	4872      	ldr	r0, [pc, #456]	; (80045a4 <cliI2C+0x2a0>)
 80043dc:	f7fe ff58 	bl	8003290 <cliPrintf>
 80043e0:	e0c0      	b.n	8004564 <cliI2C+0x260>
			}
			else
			{
				cliPrintf("I2C CH%d Begin Fail\n", print_ch + 1);
 80043e2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80043e6:	3301      	adds	r3, #1
 80043e8:	4619      	mov	r1, r3
 80043ea:	486f      	ldr	r0, [pc, #444]	; (80045a8 <cliI2C+0x2a4>)
 80043ec:	f7fe ff50 	bl	8003290 <cliPrintf>
 80043f0:	e0b8      	b.n	8004564 <cliI2C+0x260>
			}
		}
	}
	else if(args->argc == 5)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	2b05      	cmp	r3, #5
 80043f8:	f040 80b1 	bne.w	800455e <cliI2C+0x25a>
	{
		print_ch = (uint16_t)args->getData(1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2001      	movs	r0, #1
 8004402:	4798      	blx	r3
 8004404:	4603      	mov	r3, r0
 8004406:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		print_ch = constrain(print_ch, 1, I2C_MAX_CH);
 800440a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800440e:	2b00      	cmp	r3, #0
 8004410:	d006      	beq.n	8004420 <cliI2C+0x11c>
 8004412:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004416:	2b01      	cmp	r3, #1
 8004418:	bf28      	it	cs
 800441a:	2301      	movcs	r3, #1
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e000      	b.n	8004422 <cliI2C+0x11e>
 8004420:	2301      	movs	r3, #1
 8004422:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		dev_addr = (uint16_t)args->getData(2);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	2002      	movs	r0, #2
 800442c:	4798      	blx	r3
 800442e:	4603      	mov	r3, r0
 8004430:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
		reg_addr = (uint16_t)args->getData(3);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2003      	movs	r0, #3
 800443a:	4798      	blx	r3
 800443c:	4603      	mov	r3, r0
 800443e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
		length = (uint16_t)args->getData(4);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2004      	movs	r0, #4
 8004448:	4798      	blx	r3
 800444a:	4603      	mov	r3, r0
 800444c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
		ch = print_ch - 1;
 8004450:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004454:	3b01      	subs	r3, #1
 8004456:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

		if(args->isStr(0, "read") == true)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	4953      	ldr	r1, [pc, #332]	; (80045ac <cliI2C+0x2a8>)
 8004460:	2000      	movs	r0, #0
 8004462:	4798      	blx	r3
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d03a      	beq.n	80044e0 <cliI2C+0x1dc>
		{
			for(i=0; i<length; i++)
 800446a:	2300      	movs	r3, #0
 800446c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004470:	e02f      	b.n	80044d2 <cliI2C+0x1ce>
			{
				i2c_ret = i2cReadByte(ch, dev_addr, reg_addr + i, i2c_data, 100);
 8004472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004476:	b29a      	uxth	r2, r3
 8004478:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800447c:	4413      	add	r3, r2
 800447e:	b29a      	uxth	r2, r3
 8004480:	f107 030c 	add.w	r3, r7, #12
 8004484:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8004488:	f897 0097 	ldrb.w	r0, [r7, #151]	; 0x97
 800448c:	2464      	movs	r4, #100	; 0x64
 800448e:	9400      	str	r4, [sp, #0]
 8004490:	f7ff fdd6 	bl	8004040 <i2cReadByte>
 8004494:	4603      	mov	r3, r0
 8004496:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

				if(i2c_ret == true)
 800449a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00b      	beq.n	80044ba <cliI2C+0x1b6>
				{
          cliPrintf("%d I2C - 0x%02X : 0x%02X\n", print_ch, reg_addr+i, i2c_data[0]);
 80044a2:	f897 109f 	ldrb.w	r1, [r7, #159]	; 0x9f
 80044a6:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 80044aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044ae:	441a      	add	r2, r3
 80044b0:	7b3b      	ldrb	r3, [r7, #12]
 80044b2:	483f      	ldr	r0, [pc, #252]	; (80045b0 <cliI2C+0x2ac>)
 80044b4:	f7fe feec 	bl	8003290 <cliPrintf>
 80044b8:	e006      	b.n	80044c8 <cliI2C+0x1c4>
				}
				else
				{
          cliPrintf("%d I2C - Fail \n", print_ch);
 80044ba:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80044be:	4619      	mov	r1, r3
 80044c0:	483c      	ldr	r0, [pc, #240]	; (80045b4 <cliI2C+0x2b0>)
 80044c2:	f7fe fee5 	bl	8003290 <cliPrintf>
          break;
 80044c6:	e04d      	b.n	8004564 <cliI2C+0x260>
			for(i=0; i<length; i++)
 80044c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044cc:	3301      	adds	r3, #1
 80044ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044d2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80044d6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80044da:	429a      	cmp	r2, r3
 80044dc:	d3c9      	bcc.n	8004472 <cliI2C+0x16e>
 80044de:	e041      	b.n	8004564 <cliI2C+0x260>
				}
			}
		}
		else if(args->isStr(0, "write") == true)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	4934      	ldr	r1, [pc, #208]	; (80045b8 <cliI2C+0x2b4>)
 80044e6:	2000      	movs	r0, #0
 80044e8:	4798      	blx	r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d032      	beq.n	8004556 <cliI2C+0x252>
		{
			pre_time = millis();
 80044f0:	f7fd fa5c 	bl	80019ac <millis>
 80044f4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
			i2c_ret = i2cWriteByte(ch, dev_addr, reg_addr, (uint8_t)length, 100);
 80044f8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8004502:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8004506:	f897 0097 	ldrb.w	r0, [r7, #151]	; 0x97
 800450a:	2464      	movs	r4, #100	; 0x64
 800450c:	9400      	str	r4, [sp, #0]
 800450e:	f7ff fdeb 	bl	80040e8 <i2cWriteByte>
 8004512:	4603      	mov	r3, r0
 8004514:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

			if(i2c_ret == true)
 8004518:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800451c:	2b00      	cmp	r3, #0
 800451e:	d013      	beq.n	8004548 <cliI2C+0x244>
			{
				cliPrintf("%d I2C - 0x%02X : 0x%02X, %d ms\n", print_ch, reg_addr, length, millis()-pre_time);
 8004520:	f897 409f 	ldrb.w	r4, [r7, #159]	; 0x9f
 8004524:	f8b7 509a 	ldrh.w	r5, [r7, #154]	; 0x9a
 8004528:	f8b7 6098 	ldrh.w	r6, [r7, #152]	; 0x98
 800452c:	f7fd fa3e 	bl	80019ac <millis>
 8004530:	4602      	mov	r2, r0
 8004532:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	4633      	mov	r3, r6
 800453c:	462a      	mov	r2, r5
 800453e:	4621      	mov	r1, r4
 8004540:	481e      	ldr	r0, [pc, #120]	; (80045bc <cliI2C+0x2b8>)
 8004542:	f7fe fea5 	bl	8003290 <cliPrintf>
 8004546:	e00d      	b.n	8004564 <cliI2C+0x260>
			}
			else
			{
				cliPrintf("%d I2C - Fail \n", print_ch);
 8004548:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800454c:	4619      	mov	r1, r3
 800454e:	4819      	ldr	r0, [pc, #100]	; (80045b4 <cliI2C+0x2b0>)
 8004550:	f7fe fe9e 	bl	8003290 <cliPrintf>
 8004554:	e006      	b.n	8004564 <cliI2C+0x260>
			}
		}
		else
		{
			ret = false;
 8004556:	2300      	movs	r3, #0
 8004558:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800455c:	e002      	b.n	8004564 <cliI2C+0x260>
		}
	}
	else
	{
		ret = false;
 800455e:	2300      	movs	r3, #0
 8004560:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}

	if(ret == false)
 8004564:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004568:	f083 0301 	eor.w	r3, r3, #1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00d      	beq.n	800458e <cliI2C+0x28a>
	{
    cliPrintf( "i2c begin channel[1~%d]\n", I2C_MAX_CH);
 8004572:	2101      	movs	r1, #1
 8004574:	4812      	ldr	r0, [pc, #72]	; (80045c0 <cliI2C+0x2bc>)
 8004576:	f7fe fe8b 	bl	8003290 <cliPrintf>
    cliPrintf( "i2c scan channel[1~%d]\n", I2C_MAX_CH);
 800457a:	2101      	movs	r1, #1
 800457c:	4811      	ldr	r0, [pc, #68]	; (80045c4 <cliI2C+0x2c0>)
 800457e:	f7fe fe87 	bl	8003290 <cliPrintf>
    cliPrintf( "i2c read channel dev_addr reg_addr length\n");
 8004582:	4811      	ldr	r0, [pc, #68]	; (80045c8 <cliI2C+0x2c4>)
 8004584:	f7fe fe84 	bl	8003290 <cliPrintf>
    cliPrintf( "i2c write channel dev_addr reg_addr data\n");
 8004588:	4810      	ldr	r0, [pc, #64]	; (80045cc <cliI2C+0x2c8>)
 800458a:	f7fe fe81 	bl	8003290 <cliPrintf>
	}
}
 800458e:	bf00      	nop
 8004590:	37ac      	adds	r7, #172	; 0xac
 8004592:	46bd      	mov	sp, r7
 8004594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004596:	bf00      	nop
 8004598:	0801a7c8 	.word	0x0801a7c8
 800459c:	0801a7d0 	.word	0x0801a7d0
 80045a0:	0801a7ec 	.word	0x0801a7ec
 80045a4:	0801a7f4 	.word	0x0801a7f4
 80045a8:	0801a808 	.word	0x0801a808
 80045ac:	0801a820 	.word	0x0801a820
 80045b0:	0801a828 	.word	0x0801a828
 80045b4:	0801a844 	.word	0x0801a844
 80045b8:	0801a854 	.word	0x0801a854
 80045bc:	0801a85c 	.word	0x0801a85c
 80045c0:	0801a880 	.word	0x0801a880
 80045c4:	0801a89c 	.word	0x0801a89c
 80045c8:	0801a8b4 	.word	0x0801a8b4
 80045cc:	0801a8e0 	.word	0x0801a8e0

080045d0 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 80045d4:	f7fd f9ea 	bl	80019ac <millis>
 80045d8:	4602      	mov	r2, r0
 80045da:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <TransferDoneISR+0x40>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	4a0c      	ldr	r2, [pc, #48]	; (8004614 <TransferDoneISR+0x44>)
 80045e2:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 80045e4:	f7fd f9e2 	bl	80019ac <millis>
 80045e8:	4603      	mov	r3, r0
 80045ea:	4a09      	ldr	r2, [pc, #36]	; (8004610 <TransferDoneISR+0x40>)
 80045ec:	6013      	str	r3, [r2, #0]

  if (fps_time > 0)
 80045ee:	4b09      	ldr	r3, [pc, #36]	; (8004614 <TransferDoneISR+0x44>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 80045f6:	4b07      	ldr	r3, [pc, #28]	; (8004614 <TransferDoneISR+0x44>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004602:	4a05      	ldr	r2, [pc, #20]	; (8004618 <TransferDoneISR+0x48>)
 8004604:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 8004606:	4b05      	ldr	r3, [pc, #20]	; (800461c <TransferDoneISR+0x4c>)
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
}
 800460c:	bf00      	nop
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000e58 	.word	0x20000e58
 8004614:	20000e5c 	.word	0x20000e5c
 8004618:	20000e60 	.word	0x20000e60
 800461c:	20000e56 	.word	0x20000e56

08004620 <lcdInit>:


bool lcdInit(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af02      	add	r7, sp, #8
  backlight_value = 100;
 8004626:	4b27      	ldr	r3, [pc, #156]	; (80046c4 <lcdInit+0xa4>)
 8004628:	2264      	movs	r2, #100	; 0x64
 800462a:	701a      	strb	r2, [r3, #0]


#ifdef _USE_HW_ST7735
  is_init = st7735Init();
 800462c:	f7fd fdb8 	bl	80021a0 <st7735Init>
 8004630:	4603      	mov	r3, r0
 8004632:	461a      	mov	r2, r3
 8004634:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <lcdInit+0xa8>)
 8004636:	701a      	strb	r2, [r3, #0]
  st7735InitDriver(&lcd);
 8004638:	4824      	ldr	r0, [pc, #144]	; (80046cc <lcdInit+0xac>)
 800463a:	f7fd fdbd 	bl	80021b8 <st7735InitDriver>
#ifdef _USE_HW_SSD1306
  is_init = ssd1306Init();
  ssd1306InitDriver(&lcd);
#endif

  lcd.setCallBack(TransferDoneISR);
 800463e:	4b23      	ldr	r3, [pc, #140]	; (80046cc <lcdInit+0xac>)
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	4823      	ldr	r0, [pc, #140]	; (80046d0 <lcdInit+0xb0>)
 8004644:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8004646:	2300      	movs	r3, #0
 8004648:	607b      	str	r3, [r7, #4]
 800464a:	e007      	b.n	800465c <lcdInit+0x3c>
  {
    frame_buffer[0][i] = black;
 800464c:	4a21      	ldr	r2, [pc, #132]	; (80046d4 <lcdInit+0xb4>)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2100      	movs	r1, #0
 8004652:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3301      	adds	r3, #1
 800465a:	607b      	str	r3, [r7, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 8004662:	dbf3      	blt.n	800464c <lcdInit+0x2c>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 8004664:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004668:	2100      	movs	r1, #0
 800466a:	481a      	ldr	r0, [pc, #104]	; (80046d4 <lcdInit+0xb4>)
 800466c:	f013 fe7c 	bl	8018368 <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 8004670:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <lcdInit+0xb8>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	4a15      	ldr	r2, [pc, #84]	; (80046d4 <lcdInit+0xb4>)
 8004680:	4413      	add	r3, r2
 8004682:	4a16      	ldr	r2, [pc, #88]	; (80046dc <lcdInit+0xbc>)
 8004684:	6013      	str	r3, [r2, #0]


  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 8004686:	2300      	movs	r3, #0
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	2350      	movs	r3, #80	; 0x50
 800468c:	22a0      	movs	r2, #160	; 0xa0
 800468e:	2100      	movs	r1, #0
 8004690:	2000      	movs	r0, #0
 8004692:	f000 f9e3 	bl	8004a5c <lcdDrawFillRect>
  lcdUpdateDraw();
 8004696:	f000 f8cd 	bl	8004834 <lcdUpdateDraw>

  lcdSetBackLight(100);
 800469a:	2064      	movs	r0, #100	; 0x64
 800469c:	f000 f824 	bl	80046e8 <lcdSetBackLight>


  if (is_init != true)
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <lcdInit+0xa8>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	f083 0301 	eor.w	r3, r3, #1
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <lcdInit+0x92>
  {
    return false;
 80046ae:	2300      	movs	r3, #0
 80046b0:	e004      	b.n	80046bc <lcdInit+0x9c>
  }

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
 80046b2:	490b      	ldr	r1, [pc, #44]	; (80046e0 <lcdInit+0xc0>)
 80046b4:	480b      	ldr	r0, [pc, #44]	; (80046e4 <lcdInit+0xc4>)
 80046b6:	f7fe fefb 	bl	80034b0 <cliAdd>
#endif

  return true;
 80046ba:	2301      	movs	r3, #1
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20000080 	.word	0x20000080
 80046c8:	20000e54 	.word	0x20000e54
 80046cc:	20000e38 	.word	0x20000e38
 80046d0:	080045d1 	.word	0x080045d1
 80046d4:	20000e80 	.word	0x20000e80
 80046d8:	20000e55 	.word	0x20000e55
 80046dc:	20000e64 	.word	0x20000e64
 80046e0:	08004e7d 	.word	0x08004e7d
 80046e4:	08026bc4 	.word	0x08026bc4

080046e8 <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	2b64      	cmp	r3, #100	; 0x64
 80046f6:	bf28      	it	cs
 80046f8:	2364      	movcs	r3, #100	; 0x64
 80046fa:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 80046fc:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <lcdSetBackLight+0x48>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	79fa      	ldrb	r2, [r7, #7]
 8004702:	429a      	cmp	r2, r3
 8004704:	d002      	beq.n	800470c <lcdSetBackLight+0x24>
  {
    backlight_value = value;
 8004706:	4a0a      	ldr	r2, [pc, #40]	; (8004730 <lcdSetBackLight+0x48>)
 8004708:	79fb      	ldrb	r3, [r7, #7]
 800470a:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 800470c:	4b08      	ldr	r3, [pc, #32]	; (8004730 <lcdSetBackLight+0x48>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d004      	beq.n	800471e <lcdSetBackLight+0x36>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 8004714:	2101      	movs	r1, #1
 8004716:	2001      	movs	r0, #1
 8004718:	f7ff f9fe 	bl	8003b18 <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 800471c:	e003      	b.n	8004726 <lcdSetBackLight+0x3e>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 800471e:	2100      	movs	r1, #0
 8004720:	2001      	movs	r0, #1
 8004722:	f7ff f9f9 	bl	8003b18 <gpioPinWrite>
}
 8004726:	bf00      	nop
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000080 	.word	0x20000080

08004734 <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 8004734:	4b04      	ldr	r3, [pc, #16]	; (8004748 <lcdDrawPixel+0x14>)
 8004736:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8004740:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
}
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000e64 	.word	0x20000e64

0800474c <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 800474c:	b510      	push	{r4, lr}
 800474e:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 8004750:	f000 f89c 	bl	800488c <lcdGetFrameBuffer>
 8004754:	f500 41c7 	add.w	r1, r0, #25472	; 0x6380

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 8004758:	b2a2      	uxth	r2, r4
 800475a:	1e83      	subs	r3, r0, #2
 800475c:	317e      	adds	r1, #126	; 0x7e
 800475e:	f823 2f02 	strh.w	r2, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 8004762:	428b      	cmp	r3, r1
 8004764:	d1fb      	bne.n	800475e <lcdClearBuffer+0x12>
  }
}
 8004766:	bd10      	pop	{r4, pc}

08004768 <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  return fps_count;
 800476c:	4b03      	ldr	r3, [pc, #12]	; (800477c <lcdGetFps+0x14>)
 800476e:	681b      	ldr	r3, [r3, #0]
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20000e60 	.word	0x20000e60

08004780 <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  return fps_time;
 8004784:	4b03      	ldr	r3, [pc, #12]	; (8004794 <lcdGetFpsTime+0x14>)
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000e5c 	.word	0x20000e5c

08004798 <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 800479c:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <lcdDrawAvailable+0x28>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f083 0301 	eor.w	r3, r3, #1
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	b2db      	uxtb	r3, r3
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	20000e56 	.word	0x20000e56

080047c4 <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 80047c4:	b598      	push	{r3, r4, r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  if (is_init != true)
 80047c8:	4b15      	ldr	r3, [pc, #84]	; (8004820 <lcdRequestDraw+0x5c>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f083 0301 	eor.w	r3, r3, #1
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <lcdRequestDraw+0x16>
  {
    return false;
 80047d6:	2300      	movs	r3, #0
 80047d8:	e01f      	b.n	800481a <lcdRequestDraw+0x56>
  }
  if (lcd_request_draw == true)
 80047da:	4b12      	ldr	r3, [pc, #72]	; (8004824 <lcdRequestDraw+0x60>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <lcdRequestDraw+0x22>
  {
    return false;
 80047e2:	2300      	movs	r3, #0
 80047e4:	e019      	b.n	800481a <lcdRequestDraw+0x56>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 80047e6:	4b10      	ldr	r3, [pc, #64]	; (8004828 <lcdRequestDraw+0x64>)
 80047e8:	689c      	ldr	r4, [r3, #8]
 80047ea:	234f      	movs	r3, #79	; 0x4f
 80047ec:	229f      	movs	r2, #159	; 0x9f
 80047ee:	2100      	movs	r1, #0
 80047f0:	2000      	movs	r0, #0
 80047f2:	47a0      	blx	r4

  lcd_request_draw = true;
 80047f4:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <lcdRequestDraw+0x60>)
 80047f6:	2201      	movs	r2, #1
 80047f8:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 80047fa:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <lcdRequestDraw+0x64>)
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	4a0b      	ldr	r2, [pc, #44]	; (800482c <lcdRequestDraw+0x68>)
 8004800:	7812      	ldrb	r2, [r2, #0]
 8004802:	4611      	mov	r1, r2
 8004804:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004808:	fb01 f202 	mul.w	r2, r1, r2
 800480c:	4908      	ldr	r1, [pc, #32]	; (8004830 <lcdRequestDraw+0x6c>)
 800480e:	1850      	adds	r0, r2, r1
 8004810:	2200      	movs	r2, #0
 8004812:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 8004816:	4798      	blx	r3

  return true;
 8004818:	2301      	movs	r3, #1
}
 800481a:	4618      	mov	r0, r3
 800481c:	bd98      	pop	{r3, r4, r7, pc}
 800481e:	bf00      	nop
 8004820:	20000e54 	.word	0x20000e54
 8004824:	20000e56 	.word	0x20000e56
 8004828:	20000e38 	.word	0x20000e38
 800482c:	20000e55 	.word	0x20000e55
 8004830:	20000e80 	.word	0x20000e80

08004834 <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  if (is_init != true)
 800483a:	4b13      	ldr	r3, [pc, #76]	; (8004888 <lcdUpdateDraw+0x54>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	f083 0301 	eor.w	r3, r3, #1
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d118      	bne.n	800487a <lcdUpdateDraw+0x46>
  {
    return;
  }

  lcdRequestDraw();
 8004848:	f7ff ffbc 	bl	80047c4 <lcdRequestDraw>

  pre_time = millis();
 800484c:	f7fd f8ae 	bl	80019ac <millis>
 8004850:	6078      	str	r0, [r7, #4]
  while(lcdDrawAvailable() != true)
 8004852:	e009      	b.n	8004868 <lcdUpdateDraw+0x34>
  {
    delay(1);
 8004854:	2001      	movs	r0, #1
 8004856:	f7fd f89e 	bl	8001996 <delay>
    if (millis()-pre_time >= 100)
 800485a:	f7fd f8a7 	bl	80019ac <millis>
 800485e:	4602      	mov	r2, r0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b63      	cmp	r3, #99	; 0x63
 8004866:	d80a      	bhi.n	800487e <lcdUpdateDraw+0x4a>
  while(lcdDrawAvailable() != true)
 8004868:	f7ff ff96 	bl	8004798 <lcdDrawAvailable>
 800486c:	4603      	mov	r3, r0
 800486e:	f083 0301 	eor.w	r3, r3, #1
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1ed      	bne.n	8004854 <lcdUpdateDraw+0x20>
 8004878:	e002      	b.n	8004880 <lcdUpdateDraw+0x4c>
    return;
 800487a:	bf00      	nop
 800487c:	e000      	b.n	8004880 <lcdUpdateDraw+0x4c>
    {
      break;
 800487e:	bf00      	nop
    }
  }
}
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000e54 	.word	0x20000e54

0800488c <lcdGetFrameBuffer>:

  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 8004890:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <lcdGetFrameBuffer+0x14>)
 8004892:	681b      	ldr	r3, [r3, #0]
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000e64 	.word	0x20000e64

080048a4 <lcdDrawLine>:
  return LCD_HEIGHT;
}


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80048a4:	b590      	push	{r4, r7, lr}
 80048a6:	b089      	sub	sp, #36	; 0x24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4604      	mov	r4, r0
 80048ac:	4608      	mov	r0, r1
 80048ae:	4611      	mov	r1, r2
 80048b0:	461a      	mov	r2, r3
 80048b2:	4623      	mov	r3, r4
 80048b4:	80fb      	strh	r3, [r7, #6]
 80048b6:	4603      	mov	r3, r0
 80048b8:	80bb      	strh	r3, [r7, #4]
 80048ba:	460b      	mov	r3, r1
 80048bc:	807b      	strh	r3, [r7, #2]
 80048be:	4613      	mov	r3, r2
 80048c0:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80048c2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80048c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80048d0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80048d4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80048d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048dc:	1acb      	subs	r3, r1, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	bfb8      	it	lt
 80048e2:	425b      	neglt	r3, r3
 80048e4:	429a      	cmp	r2, r3
 80048e6:	bfcc      	ite	gt
 80048e8:	2301      	movgt	r3, #1
 80048ea:	2300      	movle	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 80048f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	da01      	bge.n	80048fc <lcdDrawLine+0x58>
 80048f8:	2300      	movs	r3, #0
 80048fa:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 80048fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	da01      	bge.n	8004908 <lcdDrawLine+0x64>
 8004904:	2300      	movs	r3, #0
 8004906:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 8004908:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800490c:	2b00      	cmp	r3, #0
 800490e:	da01      	bge.n	8004914 <lcdDrawLine+0x70>
 8004910:	2300      	movs	r3, #0
 8004912:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 8004914:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004918:	2b00      	cmp	r3, #0
 800491a:	da01      	bge.n	8004920 <lcdDrawLine+0x7c>
 800491c:	2300      	movs	r3, #0
 800491e:	803b      	strh	r3, [r7, #0]


  if (steep)
 8004920:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00b      	beq.n	8004940 <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	833b      	strh	r3, [r7, #24]
 800492c:	88bb      	ldrh	r3, [r7, #4]
 800492e:	80fb      	strh	r3, [r7, #6]
 8004930:	8b3b      	ldrh	r3, [r7, #24]
 8004932:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8004934:	887b      	ldrh	r3, [r7, #2]
 8004936:	82fb      	strh	r3, [r7, #22]
 8004938:	883b      	ldrh	r3, [r7, #0]
 800493a:	807b      	strh	r3, [r7, #2]
 800493c:	8afb      	ldrh	r3, [r7, #22]
 800493e:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8004940:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004944:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004948:	429a      	cmp	r2, r3
 800494a:	dd0b      	ble.n	8004964 <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	82bb      	strh	r3, [r7, #20]
 8004950:	887b      	ldrh	r3, [r7, #2]
 8004952:	80fb      	strh	r3, [r7, #6]
 8004954:	8abb      	ldrh	r3, [r7, #20]
 8004956:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8004958:	88bb      	ldrh	r3, [r7, #4]
 800495a:	827b      	strh	r3, [r7, #18]
 800495c:	883b      	ldrh	r3, [r7, #0]
 800495e:	80bb      	strh	r3, [r7, #4]
 8004960:	8a7b      	ldrh	r3, [r7, #18]
 8004962:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8004964:	887a      	ldrh	r2, [r7, #2]
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	b29b      	uxth	r3, r3
 800496c:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 800496e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004972:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	bfb8      	it	lt
 800497c:	425b      	neglt	r3, r3
 800497e:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8004980:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004984:	0fda      	lsrs	r2, r3, #31
 8004986:	4413      	add	r3, r2
 8004988:	105b      	asrs	r3, r3, #1
 800498a:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 800498c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004990:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004994:	429a      	cmp	r2, r3
 8004996:	da02      	bge.n	800499e <lcdDrawLine+0xfa>
  {
    ystep = 1;
 8004998:	2301      	movs	r3, #1
 800499a:	83bb      	strh	r3, [r7, #28]
 800499c:	e02d      	b.n	80049fa <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 800499e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049a2:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 80049a4:	e029      	b.n	80049fa <lcdDrawLine+0x156>
  {
    if (steep)
 80049a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d006      	beq.n	80049bc <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 80049ae:	88bb      	ldrh	r3, [r7, #4]
 80049b0:	88f9      	ldrh	r1, [r7, #6]
 80049b2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff febd 	bl	8004734 <lcdDrawPixel>
 80049ba:	e005      	b.n	80049c8 <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	88b9      	ldrh	r1, [r7, #4]
 80049c0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff feb6 	bl	8004734 <lcdDrawPixel>
    }
    err -= dy;
 80049c8:	8bfa      	ldrh	r2, [r7, #30]
 80049ca:	89fb      	ldrh	r3, [r7, #14]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 80049d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	da09      	bge.n	80049ee <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 80049da:	88ba      	ldrh	r2, [r7, #4]
 80049dc:	8bbb      	ldrh	r3, [r7, #28]
 80049de:	4413      	add	r3, r2
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	80bb      	strh	r3, [r7, #4]
      err += dx;
 80049e4:	8bfa      	ldrh	r2, [r7, #30]
 80049e6:	8a3b      	ldrh	r3, [r7, #16]
 80049e8:	4413      	add	r3, r2
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 80049ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3301      	adds	r3, #1
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	80fb      	strh	r3, [r7, #6]
 80049fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80049fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	ddcf      	ble.n	80049a6 <lcdDrawLine+0x102>
    }
  }
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	3724      	adds	r7, #36	; 0x24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd90      	pop	{r4, r7, pc}

08004a10 <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8004a10:	b590      	push	{r4, r7, lr}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	4604      	mov	r4, r0
 8004a18:	4608      	mov	r0, r1
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4623      	mov	r3, r4
 8004a20:	80fb      	strh	r3, [r7, #6]
 8004a22:	4603      	mov	r3, r0
 8004a24:	80bb      	strh	r3, [r7, #4]
 8004a26:	460b      	mov	r3, r1
 8004a28:	807b      	strh	r3, [r7, #2]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 8004a2e:	88ba      	ldrh	r2, [r7, #4]
 8004a30:	887b      	ldrh	r3, [r7, #2]
 8004a32:	4413      	add	r3, r2
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	b21c      	sxth	r4, r3
 8004a3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a40:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004a44:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004a48:	883b      	ldrh	r3, [r7, #0]
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	4623      	mov	r3, r4
 8004a4e:	f7ff ff29 	bl	80048a4 <lcdDrawLine>
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd90      	pop	{r4, r7, pc}
 8004a5a:	bf00      	nop

08004a5c <lcdDrawFillRect>:
{
  lcdDrawLine(x, y, x+w-1, y, color);
}

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8004a5c:	b590      	push	{r4, r7, lr}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	4604      	mov	r4, r0
 8004a64:	4608      	mov	r0, r1
 8004a66:	4611      	mov	r1, r2
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4623      	mov	r3, r4
 8004a6c:	80fb      	strh	r3, [r7, #6]
 8004a6e:	4603      	mov	r3, r0
 8004a70:	80bb      	strh	r3, [r7, #4]
 8004a72:	460b      	mov	r3, r1
 8004a74:	807b      	strh	r3, [r7, #2]
 8004a76:	4613      	mov	r3, r2
 8004a78:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 8004a7a:	88fb      	ldrh	r3, [r7, #6]
 8004a7c:	81fb      	strh	r3, [r7, #14]
 8004a7e:	e00e      	b.n	8004a9e <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 8004a80:	8c3b      	ldrh	r3, [r7, #32]
 8004a82:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004a86:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004a8a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8004a8e:	f7ff ffbf 	bl	8004a10 <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 8004a92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3301      	adds	r3, #1
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	81fb      	strh	r3, [r7, #14]
 8004a9e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004aa2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004aa6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004aaa:	440b      	add	r3, r1
 8004aac:	429a      	cmp	r2, r3
 8004aae:	dbe7      	blt.n	8004a80 <lcdDrawFillRect+0x24>
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd90      	pop	{r4, r7, pc}
 8004aba:	bf00      	nop

08004abc <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 8004abc:	b408      	push	{r3}
 8004abe:	b590      	push	{r4, r7, lr}
 8004ac0:	b0d8      	sub	sp, #352	; 0x160
 8004ac2:	af02      	add	r7, sp, #8
 8004ac4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004ac8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004acc:	6018      	str	r0, [r3, #0]
 8004ace:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004ad2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004ad6:	6019      	str	r1, [r3, #0]
 8004ad8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004adc:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8004ae0:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 8004ae2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004ae6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 8004aea:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004aee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  han_font_t FontBuf;
  uint8_t font_width;
  uint8_t font_height;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 8004af8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004afc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004b00:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8004b04:	21ff      	movs	r1, #255	; 0xff
 8004b06:	f013 fc21 	bl	801834c <vsniprintf>
 8004b0a:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
  va_end (arg);

  if (font_tbl[lcd_font]->data != NULL)
 8004b0e:	4b80      	ldr	r3, [pc, #512]	; (8004d10 <lcdPrintf+0x254>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	4b7f      	ldr	r3, [pc, #508]	; (8004d14 <lcdPrintf+0x258>)
 8004b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d072      	beq.n	8004c06 <lcdPrintf+0x14a>
  {
    for( i=0; i<len; i+=Size_Char )
 8004b20:	2300      	movs	r3, #0
 8004b22:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004b26:	e067      	b.n	8004bf8 <lcdPrintf+0x13c>
    {
      disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 8004b28:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004b2c:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8004b30:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004b34:	4413      	add	r3, r2
 8004b36:	781a      	ldrb	r2, [r3, #0]
 8004b38:	4b75      	ldr	r3, [pc, #468]	; (8004d10 <lcdPrintf+0x254>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4b75      	ldr	r3, [pc, #468]	; (8004d14 <lcdPrintf+0x258>)
 8004b40:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8004b44:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004b48:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8004b4c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004b50:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 8004b54:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004b58:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	4623      	mov	r3, r4
 8004b62:	6809      	ldr	r1, [r1, #0]
 8004b64:	6800      	ldr	r0, [r0, #0]
 8004b66:	f000 f92d 	bl	8004dc4 <disEngFont>

      Size_Char = 1;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      font_width = font_tbl[lcd_font]->width;
 8004b70:	4b67      	ldr	r3, [pc, #412]	; (8004d10 <lcdPrintf+0x254>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	4b67      	ldr	r3, [pc, #412]	; (8004d14 <lcdPrintf+0x258>)
 8004b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      font_height = font_tbl[lcd_font]->height;
 8004b82:	4b63      	ldr	r3, [pc, #396]	; (8004d10 <lcdPrintf+0x254>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	4b62      	ldr	r3, [pc, #392]	; (8004d14 <lcdPrintf+0x258>)
 8004b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b8e:	785b      	ldrb	r3, [r3, #1]
 8004b90:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
      x += font_width;
 8004b94:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8004b98:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004b9c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004ba0:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8004ba4:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8004ba8:	6809      	ldr	r1, [r1, #0]
 8004baa:	440a      	add	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]

      if ((x+font_width) > HW_LCD_WIDTH)
 8004bae:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8004bb2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004bb6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	2ba0      	cmp	r3, #160	; 0xa0
 8004bc0:	dd13      	ble.n	8004bea <lcdPrintf+0x12e>
      {
        x  = x_Pre;
 8004bc2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004bc6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004bca:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004bce:	601a      	str	r2, [r3, #0]
        y += font_height;
 8004bd0:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 8004bd4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004bd8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004bdc:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8004be0:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 8004be4:	6809      	ldr	r1, [r1, #0]
 8004be6:	440a      	add	r2, r1
 8004be8:	601a      	str	r2, [r3, #0]
    for( i=0; i<len; i+=Size_Char )
 8004bea:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004bee:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004bf8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004bfc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004c00:	429a      	cmp	r2, r3
 8004c02:	db91      	blt.n	8004b28 <lcdPrintf+0x6c>
      }

      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
    }
  }
}
 8004c04:	e07b      	b.n	8004cfe <lcdPrintf+0x242>
    for( i=0; i<len; i+=Size_Char )
 8004c06:	2300      	movs	r3, #0
 8004c08:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004c0c:	e06f      	b.n	8004cee <lcdPrintf+0x232>
      hanFontLoad( &print_buffer[i], &FontBuf );
 8004c0e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004c12:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004c16:	4413      	add	r3, r2
 8004c18:	f107 0214 	add.w	r2, r7, #20
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fc ffcc 	bl	8001bbc <hanFontLoad>
      disHanFont( x, y, &FontBuf, color);
 8004c24:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c28:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	f107 0214 	add.w	r2, r7, #20
 8004c32:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8004c36:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 8004c3a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8004c3e:	f5a0 70a6 	sub.w	r0, r0, #332	; 0x14c
 8004c42:	6809      	ldr	r1, [r1, #0]
 8004c44:	6800      	ldr	r0, [r0, #0]
 8004c46:	f000 f867 	bl	8004d18 <disHanFont>
      Size_Char = FontBuf.Size_Char;
 8004c4a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c4e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004c52:	885b      	ldrh	r3, [r3, #2]
 8004c54:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      if (Size_Char >= 2)
 8004c58:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	dd0e      	ble.n	8004c7e <lcdPrintf+0x1c2>
        font_width = 16;
 8004c60:	2310      	movs	r3, #16
 8004c62:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 2*8;
 8004c66:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c6a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c6e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004c72:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	3210      	adds	r2, #16
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	e00d      	b.n	8004c9a <lcdPrintf+0x1de>
        font_width = 8;
 8004c7e:	2308      	movs	r3, #8
 8004c80:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 1*8;
 8004c84:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c88:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c8c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004c90:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	3208      	adds	r2, #8
 8004c98:	601a      	str	r2, [r3, #0]
      if ((x+font_width) > HW_LCD_WIDTH)
 8004c9a:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8004c9e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004ca2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4413      	add	r3, r2
 8004caa:	2ba0      	cmp	r3, #160	; 0xa0
 8004cac:	dd11      	ble.n	8004cd2 <lcdPrintf+0x216>
        x  = x_Pre;
 8004cae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004cb2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004cb6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004cba:	601a      	str	r2, [r3, #0]
        y += 16;
 8004cbc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004cc0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004cc4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004cc8:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	3210      	adds	r2, #16
 8004cd0:	601a      	str	r2, [r3, #0]
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8004cd2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004cd6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004cda:	889b      	ldrh	r3, [r3, #4]
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d00d      	beq.n	8004cfc <lcdPrintf+0x240>
    for( i=0; i<len; i+=Size_Char )
 8004ce0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004ce4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004ce8:	4413      	add	r3, r2
 8004cea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004cee:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004cf2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	db89      	blt.n	8004c0e <lcdPrintf+0x152>
}
 8004cfa:	e000      	b.n	8004cfe <lcdPrintf+0x242>
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8004cfc:	bf00      	nop
}
 8004cfe:	bf00      	nop
 8004d00:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8004d04:	46bd      	mov	sp, r7
 8004d06:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004d0a:	b001      	add	sp, #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000081 	.word	0x20000081
 8004d14:	20000084 	.word	0x20000084

08004d18 <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	885b      	ldrh	r3, [r3, #2]
 8004d2a:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 8004d2c:	8b3b      	ldrh	r3, [r7, #24]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <disHanFont+0x1e>
  {
    FontSize = 2;
 8004d32:	2302      	movs	r3, #2
 8004d34:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8004d36:	2300      	movs	r3, #0
 8004d38:	83fb      	strh	r3, [r7, #30]
 8004d3a:	e03a      	b.n	8004db2 <disHanFont+0x9a>
  {
    index_x = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8004d40:	2300      	movs	r3, #0
 8004d42:	83bb      	strh	r3, [r7, #28]
 8004d44:	e02e      	b.n	8004da4 <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 8004d46:	8bfb      	ldrh	r3, [r7, #30]
 8004d48:	8b3a      	ldrh	r2, [r7, #24]
 8004d4a:	fb03 f202 	mul.w	r2, r3, r2
 8004d4e:	8bbb      	ldrh	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	4413      	add	r3, r2
 8004d56:	799b      	ldrb	r3, [r3, #6]
 8004d58:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	837b      	strh	r3, [r7, #26]
 8004d5e:	e01b      	b.n	8004d98 <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 8004d60:	7d7a      	ldrb	r2, [r7, #21]
 8004d62:	8b7b      	ldrh	r3, [r7, #26]
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00d      	beq.n	8004d8c <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	8afb      	ldrh	r3, [r7, #22]
 8004d76:	4413      	add	r3, r2
 8004d78:	b298      	uxth	r0, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	8bfb      	ldrh	r3, [r7, #30]
 8004d80:	4413      	add	r3, r2
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	887a      	ldrh	r2, [r7, #2]
 8004d86:	4619      	mov	r1, r3
 8004d88:	f7ff fcd4 	bl	8004734 <lcdDrawPixel>
        }
        index_x++;
 8004d8c:	8afb      	ldrh	r3, [r7, #22]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 8004d92:	8b7b      	ldrh	r3, [r7, #26]
 8004d94:	3301      	adds	r3, #1
 8004d96:	837b      	strh	r3, [r7, #26]
 8004d98:	8b7b      	ldrh	r3, [r7, #26]
 8004d9a:	2b07      	cmp	r3, #7
 8004d9c:	d9e0      	bls.n	8004d60 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8004d9e:	8bbb      	ldrh	r3, [r7, #28]
 8004da0:	3301      	adds	r3, #1
 8004da2:	83bb      	strh	r3, [r7, #28]
 8004da4:	8bba      	ldrh	r2, [r7, #28]
 8004da6:	8b3b      	ldrh	r3, [r7, #24]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d3cc      	bcc.n	8004d46 <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8004dac:	8bfb      	ldrh	r3, [r7, #30]
 8004dae:	3301      	adds	r3, #1
 8004db0:	83fb      	strh	r3, [r7, #30]
 8004db2:	8bfb      	ldrh	r3, [r7, #30]
 8004db4:	2b0f      	cmp	r3, #15
 8004db6:	d9c1      	bls.n	8004d3c <disHanFont+0x24>
      }
    }
  }
}
 8004db8:	bf00      	nop
 8004dba:	bf00      	nop
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop

08004dc4 <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	71fb      	strb	r3, [r7, #7]
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61fb      	str	r3, [r7, #28]
 8004dd8:	e035      	b.n	8004e46 <disEngFont+0x82>
  {
    b = font->data[(ch - 32) * font->height + i];
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	3b20      	subs	r3, #32
 8004de2:	6839      	ldr	r1, [r7, #0]
 8004de4:	7849      	ldrb	r1, [r1, #1]
 8004de6:	fb01 f303 	mul.w	r3, r1, r3
 8004dea:	4619      	mov	r1, r3
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	440b      	add	r3, r1
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	4413      	add	r3, r2
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++)
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61bb      	str	r3, [r7, #24]
 8004dfc:	e01a      	b.n	8004e34 <disEngFont+0x70>
    {
      if ((b << j) & 0x8000)
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00f      	beq.n	8004e2e <disEngFont+0x6a>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	4413      	add	r3, r2
 8004e18:	b298      	uxth	r0, r3
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	4413      	add	r3, r2
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004e28:	4619      	mov	r1, r3
 8004e2a:	f7ff fc83 	bl	8004734 <lcdDrawPixel>
    for (j = 0; j < font->width; j++)
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	3301      	adds	r3, #1
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d3de      	bcc.n	8004dfe <disEngFont+0x3a>
  for (i = 0; i < font->height; i++)
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	3301      	adds	r3, #1
 8004e44:	61fb      	str	r3, [r7, #28]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	785b      	ldrb	r3, [r3, #1]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d3c3      	bcc.n	8004dda <disEngFont+0x16>
      }
    }
  }
}
 8004e52:	bf00      	nop
 8004e54:	bf00      	nop
 8004e56:	3720      	adds	r7, #32
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	71fb      	strb	r3, [r7, #7]
  lcd_font = font;
 8004e66:	4a04      	ldr	r2, [pc, #16]	; (8004e78 <lcdSetFont+0x1c>)
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	7013      	strb	r3, [r2, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	20000081 	.word	0x20000081

08004e7c <cliLcd>:
}

#ifdef _USE_HW_CLI

void cliLcd(cli_args_t *args)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004e84:	2300      	movs	r3, #0
 8004e86:	73fb      	strb	r3, [r7, #15]

	if(args->argc == 1 && args->isStr(0, "test") == true)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d163      	bne.n	8004f58 <cliLcd+0xdc>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	4958      	ldr	r1, [pc, #352]	; (8004ff8 <cliLcd+0x17c>)
 8004e96:	2000      	movs	r0, #0
 8004e98:	4798      	blx	r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d05b      	beq.n	8004f58 <cliLcd+0xdc>
	{
		lcdSetFont(LCD_FONT_HAN);
 8004ea0:	2003      	movs	r0, #3
 8004ea2:	f7ff ffdb 	bl	8004e5c <lcdSetFont>

		while(cliKeepLoop())
 8004ea6:	e04b      	b.n	8004f40 <cliLcd+0xc4>
		{
			if(lcdDrawAvailable() == true)
 8004ea8:	f7ff fc76 	bl	8004798 <lcdDrawAvailable>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d046      	beq.n	8004f40 <cliLcd+0xc4>
			{
				lcdClearBuffer(black);
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	f7ff fc4a 	bl	800474c <lcdClearBuffer>

				lcdPrintf(25, 16*0, green, "[LCD Test]");
 8004eb8:	4b50      	ldr	r3, [pc, #320]	; (8004ffc <cliLcd+0x180>)
 8004eba:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	2019      	movs	r0, #25
 8004ec2:	f7ff fdfb 	bl	8004abc <lcdPrintf>

				lcdPrintf(0, 16*1, white, "%d fps", lcdGetFps());
 8004ec6:	f7ff fc4f 	bl	8004768 <lcdGetFps>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	4b4c      	ldr	r3, [pc, #304]	; (8005000 <cliLcd+0x184>)
 8004ed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ed4:	2110      	movs	r1, #16
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f7ff fdf0 	bl	8004abc <lcdPrintf>
				lcdPrintf(0, 16*2, white, "%d ms", lcdGetFpsTime());
 8004edc:	f7ff fc50 	bl	8004780 <lcdGetFpsTime>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	4b47      	ldr	r3, [pc, #284]	; (8005004 <cliLcd+0x188>)
 8004ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eea:	2120      	movs	r1, #32
 8004eec:	2000      	movs	r0, #0
 8004eee:	f7ff fde5 	bl	8004abc <lcdPrintf>
				lcdPrintf(0, 16*3, white, "%d ms", millis());
 8004ef2:	f7fc fd5b 	bl	80019ac <millis>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	4b42      	ldr	r3, [pc, #264]	; (8005004 <cliLcd+0x188>)
 8004efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f00:	2130      	movs	r1, #48	; 0x30
 8004f02:	2000      	movs	r0, #0
 8004f04:	f7ff fdda 	bl	8004abc <lcdPrintf>

				lcdDrawFillRect(0, 70, 10, 10, red);
 8004f08:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	230a      	movs	r3, #10
 8004f10:	220a      	movs	r2, #10
 8004f12:	2146      	movs	r1, #70	; 0x46
 8004f14:	2000      	movs	r0, #0
 8004f16:	f7ff fda1 	bl	8004a5c <lcdDrawFillRect>
				lcdDrawFillRect(10, 70, 10, 10, green);
 8004f1a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	230a      	movs	r3, #10
 8004f22:	220a      	movs	r2, #10
 8004f24:	2146      	movs	r1, #70	; 0x46
 8004f26:	200a      	movs	r0, #10
 8004f28:	f7ff fd98 	bl	8004a5c <lcdDrawFillRect>
				lcdDrawFillRect(20, 70, 10, 10, blue);
 8004f2c:	231f      	movs	r3, #31
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	230a      	movs	r3, #10
 8004f32:	220a      	movs	r2, #10
 8004f34:	2146      	movs	r1, #70	; 0x46
 8004f36:	2014      	movs	r0, #20
 8004f38:	f7ff fd90 	bl	8004a5c <lcdDrawFillRect>

				lcdRequestDraw();
 8004f3c:	f7ff fc42 	bl	80047c4 <lcdRequestDraw>
		while(cliKeepLoop())
 8004f40:	f7fe faa0 	bl	8003484 <cliKeepLoop>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1ae      	bne.n	8004ea8 <cliLcd+0x2c>
			}
		}

		lcdClearBuffer(black);
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f7ff fbfe 	bl	800474c <lcdClearBuffer>
		lcdUpdateDraw();
 8004f50:	f7ff fc70 	bl	8004834 <lcdUpdateDraw>

		ret = true;
 8004f54:	2301      	movs	r3, #1
 8004f56:	73fb      	strb	r3, [r7, #15]
	}

	if(args->argc == 2 && args->isStr(0, "bl") == true)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d126      	bne.n	8004fae <cliLcd+0x132>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	4928      	ldr	r1, [pc, #160]	; (8005008 <cliLcd+0x18c>)
 8004f66:	2000      	movs	r0, #0
 8004f68:	4798      	blx	r3
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01e      	beq.n	8004fae <cliLcd+0x132>
	{
		char *bl_status;

		bl_status = args->getStr(1);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	2001      	movs	r0, #1
 8004f76:	4798      	blx	r3
 8004f78:	60b8      	str	r0, [r7, #8]

		if(bl_status != NULL)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d014      	beq.n	8004faa <cliLcd+0x12e>
		{
			if(strcmp(bl_status, "on") == 0)
 8004f80:	4922      	ldr	r1, [pc, #136]	; (800500c <cliLcd+0x190>)
 8004f82:	68b8      	ldr	r0, [r7, #8]
 8004f84:	f7fb f92c 	bl	80001e0 <strcmp>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <cliLcd+0x11a>
			{
				lcdSetBackLight(100);
 8004f8e:	2064      	movs	r0, #100	; 0x64
 8004f90:	f7ff fbaa 	bl	80046e8 <lcdSetBackLight>
 8004f94:	e009      	b.n	8004faa <cliLcd+0x12e>
			}
			else if(strcmp(bl_status, "off") == 0)
 8004f96:	491e      	ldr	r1, [pc, #120]	; (8005010 <cliLcd+0x194>)
 8004f98:	68b8      	ldr	r0, [r7, #8]
 8004f9a:	f7fb f921 	bl	80001e0 <strcmp>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d102      	bne.n	8004faa <cliLcd+0x12e>
			{
				lcdSetBackLight(0);
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	f7ff fb9f 	bl	80046e8 <lcdSetBackLight>
			else
			{
			}
		}

		ret = true;
 8004faa:	2301      	movs	r3, #1
 8004fac:	73fb      	strb	r3, [r7, #15]
	}

	if(args->argc == 1 && args->isStr(0, "cb") == true)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d10d      	bne.n	8004fd2 <cliLcd+0x156>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	4916      	ldr	r1, [pc, #88]	; (8005014 <cliLcd+0x198>)
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	4798      	blx	r3
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <cliLcd+0x156>
	{
		lcdClearBuffer(white);
 8004fc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004fca:	f7ff fbbf 	bl	800474c <lcdClearBuffer>

		ret = true;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
	}

	if(ret != true)
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	f083 0301 	eor.w	r3, r3, #1
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d008      	beq.n	8004ff0 <cliLcd+0x174>
	{
		cliPrintf("lcd test\n");
 8004fde:	480e      	ldr	r0, [pc, #56]	; (8005018 <cliLcd+0x19c>)
 8004fe0:	f7fe f956 	bl	8003290 <cliPrintf>
		cliPrintf("lcd bl on/off\n");
 8004fe4:	480d      	ldr	r0, [pc, #52]	; (800501c <cliLcd+0x1a0>)
 8004fe6:	f7fe f953 	bl	8003290 <cliPrintf>
		cliPrintf("lcd cb\n");
 8004fea:	480d      	ldr	r0, [pc, #52]	; (8005020 <cliLcd+0x1a4>)
 8004fec:	f7fe f950 	bl	8003290 <cliPrintf>
	}
}
 8004ff0:	bf00      	nop
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	08026bc8 	.word	0x08026bc8
 8004ffc:	08026bd0 	.word	0x08026bd0
 8005000:	08026bdc 	.word	0x08026bdc
 8005004:	08026be4 	.word	0x08026be4
 8005008:	08026bec 	.word	0x08026bec
 800500c:	08026bf0 	.word	0x08026bf0
 8005010:	08026bf4 	.word	0x08026bf4
 8005014:	08026bf8 	.word	0x08026bf8
 8005018:	08026bfc 	.word	0x08026bfc
 800501c:	08026c08 	.word	0x08026c08
 8005020:	08026c18 	.word	0x08026c18

08005024 <ledInit>:
				{GPIOC, GPIO_PIN_13, GPIO_PIN_RESET, GPIO_PIN_SET},
		};


bool ledInit(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
	for(int i=0; i<LED_MAX_CH; i++)
 800502a:	2300      	movs	r3, #0
 800502c:	607b      	str	r3, [r7, #4]
 800502e:	e007      	b.n	8005040 <ledInit+0x1c>
	{
		ledOff(i);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	4618      	mov	r0, r3
 8005036:	f000 f813 	bl	8005060 <ledOff>
	for(int i=0; i<LED_MAX_CH; i++)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3301      	adds	r3, #1
 800503e:	607b      	str	r3, [r7, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	ddf4      	ble.n	8005030 <ledInit+0xc>
	}

#ifdef _USE_HW_CLI
	cliAdd("led", cliLed);
 8005046:	4904      	ldr	r1, [pc, #16]	; (8005058 <ledInit+0x34>)
 8005048:	4804      	ldr	r0, [pc, #16]	; (800505c <ledInit+0x38>)
 800504a:	f7fe fa31 	bl	80034b0 <cliAdd>
#endif

	return true;
 800504e:	2301      	movs	r3, #1
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	080050d9 	.word	0x080050d9
 800505c:	0801a90c 	.word	0x0801a90c

08005060 <ledOff>:

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	4603      	mov	r3, r0
 8005068:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d111      	bne.n	8005094 <ledOff+0x34>

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	4a0a      	ldr	r2, [pc, #40]	; (800509c <ledOff+0x3c>)
 8005074:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	4a08      	ldr	r2, [pc, #32]	; (800509c <ledOff+0x3c>)
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	4413      	add	r3, r2
 8005080:	8899      	ldrh	r1, [r3, #4]
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	4a05      	ldr	r2, [pc, #20]	; (800509c <ledOff+0x3c>)
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4413      	add	r3, r2
 800508a:	79db      	ldrb	r3, [r3, #7]
 800508c:	461a      	mov	r2, r3
 800508e:	f002 fc23 	bl	80078d8 <HAL_GPIO_WritePin>
 8005092:	e000      	b.n	8005096 <ledOff+0x36>
	if(ch >= LED_MAX_CH) return;
 8005094:	bf00      	nop
}
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20000094 	.word	0x20000094

080050a0 <ledToggle>:

void ledToggle(uint8_t ch)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10d      	bne.n	80050cc <ledToggle+0x2c>

	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	4a08      	ldr	r2, [pc, #32]	; (80050d4 <ledToggle+0x34>)
 80050b4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	4906      	ldr	r1, [pc, #24]	; (80050d4 <ledToggle+0x34>)
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	440b      	add	r3, r1
 80050c0:	889b      	ldrh	r3, [r3, #4]
 80050c2:	4619      	mov	r1, r3
 80050c4:	4610      	mov	r0, r2
 80050c6:	f002 fc20 	bl	800790a <HAL_GPIO_TogglePin>
 80050ca:	e000      	b.n	80050ce <ledToggle+0x2e>
	if(ch >= LED_MAX_CH) return;
 80050cc:	bf00      	nop
}
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000094 	.word	0x20000094

080050d8 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80050e0:	2300      	movs	r3, #0
 80050e2:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 3 && args->isStr(0, "toggle") == true)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d133      	bne.n	8005154 <cliLed+0x7c>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	491f      	ldr	r1, [pc, #124]	; (8005170 <cliLed+0x98>)
 80050f2:	2000      	movs	r0, #0
 80050f4:	4798      	blx	r3
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d02b      	beq.n	8005154 <cliLed+0x7c>
	{
		uint8_t led_ch;
		uint32_t toggle_time;
		uint32_t pre_time;

		led_ch = (uint8_t)args->getData(1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2001      	movs	r0, #1
 8005102:	4798      	blx	r3
 8005104:	4603      	mov	r3, r0
 8005106:	75bb      	strb	r3, [r7, #22]
		toggle_time = (uint32_t)args->getData(2);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2002      	movs	r0, #2
 800510e:	4798      	blx	r3
 8005110:	4603      	mov	r3, r0
 8005112:	60fb      	str	r3, [r7, #12]

		if(led_ch > 0)
 8005114:	7dbb      	ldrb	r3, [r7, #22]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <cliLed+0x48>
		{
			led_ch--;
 800511a:	7dbb      	ldrb	r3, [r7, #22]
 800511c:	3b01      	subs	r3, #1
 800511e:	75bb      	strb	r3, [r7, #22]
		}

		pre_time = millis();
 8005120:	f7fc fc44 	bl	80019ac <millis>
 8005124:	6138      	str	r0, [r7, #16]
		while(cliKeepLoop())
 8005126:	e00e      	b.n	8005146 <cliLed+0x6e>
		{
			if(millis() - pre_time >= toggle_time)
 8005128:	f7fc fc40 	bl	80019ac <millis>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	429a      	cmp	r2, r3
 8005136:	d806      	bhi.n	8005146 <cliLed+0x6e>
			{
				pre_time = millis();
 8005138:	f7fc fc38 	bl	80019ac <millis>
 800513c:	6138      	str	r0, [r7, #16]
				ledToggle(led_ch);
 800513e:	7dbb      	ldrb	r3, [r7, #22]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff ffad 	bl	80050a0 <ledToggle>
		while(cliKeepLoop())
 8005146:	f7fe f99d 	bl	8003484 <cliKeepLoop>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1eb      	bne.n	8005128 <cliLed+0x50>
			}
		}

		ret = true;
 8005150:	2301      	movs	r3, #1
 8005152:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	f083 0301 	eor.w	r3, r3, #1
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <cliLed+0x90>
	{
		cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8005160:	2101      	movs	r1, #1
 8005162:	4804      	ldr	r0, [pc, #16]	; (8005174 <cliLed+0x9c>)
 8005164:	f7fe f894 	bl	8003290 <cliPrintf>
	}
}
 8005168:	bf00      	nop
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	0801a910 	.word	0x0801a910
 8005174:	0801a918 	.word	0x0801a918

08005178 <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
  bool ret = false;
 800517e:	2300      	movs	r3, #0
 8005180:	71fb      	strb	r3, [r7, #7]


  hsd.Instance            = SDIO;
 8005182:	4b20      	ldr	r3, [pc, #128]	; (8005204 <sdInit+0x8c>)
 8005184:	4a20      	ldr	r2, [pc, #128]	; (8005208 <sdInit+0x90>)
 8005186:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge      = SDIO_CLOCK_EDGE_RISING;
 8005188:	4b1e      	ldr	r3, [pc, #120]	; (8005204 <sdInit+0x8c>)
 800518a:	2200      	movs	r2, #0
 800518c:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass    = SDIO_CLOCK_BYPASS_DISABLE;
 800518e:	4b1d      	ldr	r3, [pc, #116]	; (8005204 <sdInit+0x8c>)
 8005190:	2200      	movs	r2, #0
 8005192:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005194:	4b1b      	ldr	r3, [pc, #108]	; (8005204 <sdInit+0x8c>)
 8005196:	2200      	movs	r2, #0
 8005198:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide        = SDIO_BUS_WIDE_1B;
 800519a:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <sdInit+0x8c>)
 800519c:	2200      	movs	r2, #0
 800519e:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80051a0:	4b18      	ldr	r3, [pc, #96]	; (8005204 <sdInit+0x8c>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv       = SDIO_TRANSFER_CLK_DIV;
 80051a6:	4b17      	ldr	r3, [pc, #92]	; (8005204 <sdInit+0x8c>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	619a      	str	r2, [r3, #24]


  is_detected = false;
 80051ac:	4b17      	ldr	r3, [pc, #92]	; (800520c <sdInit+0x94>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	701a      	strb	r2, [r3, #0]
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 80051b2:	2000      	movs	r0, #0
 80051b4:	f7fe fd02 	bl	8003bbc <gpioPinRead>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <sdInit+0x4c>
  {
    is_detected = true;
 80051be:	4b13      	ldr	r3, [pc, #76]	; (800520c <sdInit+0x94>)
 80051c0:	2201      	movs	r2, #1
 80051c2:	701a      	strb	r2, [r3, #0]
  }

  if (is_detected == true)
 80051c4:	4b11      	ldr	r3, [pc, #68]	; (800520c <sdInit+0x94>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00f      	beq.n	80051ec <sdInit+0x74>
  {
    if (HAL_SD_Init(&hsd) == HAL_OK)
 80051cc:	480d      	ldr	r0, [pc, #52]	; (8005204 <sdInit+0x8c>)
 80051ce:	f007 f925 	bl	800c41c <HAL_SD_Init>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d109      	bne.n	80051ec <sdInit+0x74>
    {
      if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 80051d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80051dc:	4809      	ldr	r0, [pc, #36]	; (8005204 <sdInit+0x8c>)
 80051de:	f007 feff 	bl	800cfe0 <HAL_SD_ConfigWideBusOperation>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <sdInit+0x74>
      {
        ret = true;
 80051e8:	2301      	movs	r3, #1
 80051ea:	71fb      	strb	r3, [r7, #7]
      }
    }
  }

  is_init = ret;
 80051ec:	4a08      	ldr	r2, [pc, #32]	; (8005210 <sdInit+0x98>)
 80051ee:	79fb      	ldrb	r3, [r7, #7]
 80051f0:	7013      	strb	r3, [r2, #0]


#ifdef _USE_HW_CLI
  cliAdd("sd", cliSd);
 80051f2:	4908      	ldr	r1, [pc, #32]	; (8005214 <sdInit+0x9c>)
 80051f4:	4808      	ldr	r0, [pc, #32]	; (8005218 <sdInit+0xa0>)
 80051f6:	f7fe f95b 	bl	80034b0 <cliAdd>
#endif

  return ret;
 80051fa:	79fb      	ldrb	r3, [r7, #7]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	2000039c 	.word	0x2000039c
 8005208:	40012c00 	.word	0x40012c00
 800520c:	20007281 	.word	0x20007281
 8005210:	20007280 	.word	0x20007280
 8005214:	08005705 	.word	0x08005705
 8005218:	0801a938 	.word	0x0801a938

0800521c <sdIsInit>:

  return ret;
}

bool sdIsInit(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
  return is_init;
 8005220:	4b03      	ldr	r3, [pc, #12]	; (8005230 <sdIsInit+0x14>)
 8005222:	781b      	ldrb	r3, [r3, #0]
}
 8005224:	4618      	mov	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	20007280 	.word	0x20007280

08005234 <sdIsDetected>:

bool sdIsDetected(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8005238:	2000      	movs	r0, #0
 800523a:	f7fe fcbf 	bl	8003bbc <gpioPinRead>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <sdIsDetected+0x18>
  {
    is_detected = true;
 8005244:	4b05      	ldr	r3, [pc, #20]	; (800525c <sdIsDetected+0x28>)
 8005246:	2201      	movs	r2, #1
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	e002      	b.n	8005252 <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 800524c:	4b03      	ldr	r3, [pc, #12]	; (800525c <sdIsDetected+0x28>)
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 8005252:	4b02      	ldr	r3, [pc, #8]	; (800525c <sdIsDetected+0x28>)
 8005254:	781b      	ldrb	r3, [r3, #0]
}
 8005256:	4618      	mov	r0, r3
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20007281 	.word	0x20007281

08005260 <sdGetInfo>:

bool sdGetInfo(sd_info_t *p_info)
{
 8005260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005264:	b08c      	sub	sp, #48	; 0x30
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800526a:	2300      	movs	r3, #0
 800526c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 8005274:	4b24      	ldr	r3, [pc, #144]	; (8005308 <sdGetInfo+0xa8>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d03d      	beq.n	80052f8 <sdGetInfo+0x98>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 800527c:	f107 0308 	add.w	r3, r7, #8
 8005280:	4619      	mov	r1, r3
 8005282:	4822      	ldr	r0, [pc, #136]	; (800530c <sdGetInfo+0xac>)
 8005284:	f007 fe80 	bl	800cf88 <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005292:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a4:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 80052ac:	6a3a      	ldr	r2, [r7, #32]
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 80052b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t) p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	2200      	movs	r2, #0
 80052be:	469a      	mov	sl, r3
 80052c0:	4693      	mov	fp, r2
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	2200      	movs	r2, #0
 80052c8:	4698      	mov	r8, r3
 80052ca:	4691      	mov	r9, r2
 80052cc:	fb08 f20b 	mul.w	r2, r8, fp
 80052d0:	fb0a f309 	mul.w	r3, sl, r9
 80052d4:	4413      	add	r3, r2
 80052d6:	fbaa 4508 	umull	r4, r5, sl, r8
 80052da:	442b      	add	r3, r5
 80052dc:	461d      	mov	r5, r3
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	0d22      	lsrs	r2, r4, #20
 80052e8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 80052ec:	0d2b      	lsrs	r3, r5, #20
 80052ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f0:	621a      	str	r2, [r3, #32]
    ret = true;
 80052f2:	2301      	movs	r3, #1
 80052f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 80052f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3730      	adds	r7, #48	; 0x30
 8005300:	46bd      	mov	sp, r7
 8005302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005306:	bf00      	nop
 8005308:	20007280 	.word	0x20007280
 800530c:	2000039c 	.word	0x2000039c

08005310 <sdIsBusy>:

bool sdIsBusy(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 8005316:	4808      	ldr	r0, [pc, #32]	; (8005338 <sdIsBusy+0x28>)
 8005318:	f007 fefc 	bl	800d114 <HAL_SD_GetCardState>
 800531c:	4603      	mov	r3, r0
 800531e:	2b04      	cmp	r3, #4
 8005320:	d102      	bne.n	8005328 <sdIsBusy+0x18>
  {
    is_busy = false;
 8005322:	2300      	movs	r3, #0
 8005324:	71fb      	strb	r3, [r7, #7]
 8005326:	e001      	b.n	800532c <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 8005328:	2301      	movs	r3, #1
 800532a:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 800532c:	79fb      	ldrb	r3, [r7, #7]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	2000039c 	.word	0x2000039c

0800533c <sdIsReady>:

bool sdIsReady(uint32_t timeout)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t pre_time;

  pre_time = millis();
 8005344:	f7fc fb32 	bl	80019ac <millis>
 8005348:	60f8      	str	r0, [r7, #12]

  while(millis() - pre_time < timeout)
 800534a:	e009      	b.n	8005360 <sdIsReady+0x24>
  {
    if (sdIsBusy() == false)
 800534c:	f7ff ffe0 	bl	8005310 <sdIsBusy>
 8005350:	4603      	mov	r3, r0
 8005352:	f083 0301 	eor.w	r3, r3, #1
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <sdIsReady+0x24>
    {
      return true;
 800535c:	2301      	movs	r3, #1
 800535e:	e008      	b.n	8005372 <sdIsReady+0x36>
  while(millis() - pre_time < timeout)
 8005360:	f7fc fb24 	bl	80019ac <millis>
 8005364:	4602      	mov	r2, r0
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	429a      	cmp	r2, r3
 800536e:	d8ed      	bhi.n	800534c <sdIsReady+0x10>
    }
  }

  return false;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <sdReadBlocks>:

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
  bool ret = false;
 800538a:	2300      	movs	r3, #0
 800538c:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 800538e:	4b1e      	ldr	r3, [pc, #120]	; (8005408 <sdReadBlocks+0x8c>)
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	481c      	ldr	r0, [pc, #112]	; (800540c <sdReadBlocks+0x90>)
 800539c:	f007 f8ee 	bl	800c57c <HAL_SD_ReadBlocks_DMA>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d12a      	bne.n	80053fc <sdReadBlocks+0x80>
  {

    pre_time = millis();
 80053a6:	f7fc fb01 	bl	80019ac <millis>
 80053aa:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 80053ac:	e007      	b.n	80053be <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 80053ae:	f7fc fafd 	bl	80019ac <millis>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d908      	bls.n	80053d0 <sdReadBlocks+0x54>
    while(is_rx_done == false)
 80053be:	4b12      	ldr	r3, [pc, #72]	; (8005408 <sdReadBlocks+0x8c>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	f083 0301 	eor.w	r3, r3, #1
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1ef      	bne.n	80053ae <sdReadBlocks+0x32>
 80053ce:	e00d      	b.n	80053ec <sdReadBlocks+0x70>
      {
        break;
 80053d0:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 80053d2:	e00b      	b.n	80053ec <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 80053d4:	f7fc faea 	bl	80019ac <millis>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d803      	bhi.n	80053ec <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 80053e4:	4b08      	ldr	r3, [pc, #32]	; (8005408 <sdReadBlocks+0x8c>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	701a      	strb	r2, [r3, #0]
        break;
 80053ea:	e004      	b.n	80053f6 <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 80053ec:	f7ff ff90 	bl	8005310 <sdIsBusy>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1ee      	bne.n	80053d4 <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 80053f6:	4b04      	ldr	r3, [pc, #16]	; (8005408 <sdReadBlocks+0x8c>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80053fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20007282 	.word	0x20007282
 800540c:	2000039c 	.word	0x2000039c

08005410 <sdWriteBlocks>:

bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	603b      	str	r3, [r7, #0]
  bool ret = false;
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_tx_done = false;
 8005422:	4b1f      	ldr	r3, [pc, #124]	; (80054a0 <sdWriteBlocks+0x90>)
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	481d      	ldr	r0, [pc, #116]	; (80054a4 <sdWriteBlocks+0x94>)
 8005430:	f007 f986 	bl	800c740 <HAL_SD_WriteBlocks_DMA>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d12d      	bne.n	8005496 <sdWriteBlocks+0x86>
  {
    pre_time = millis();
 800543a:	f7fc fab7 	bl	80019ac <millis>
 800543e:	6138      	str	r0, [r7, #16]
    while(is_tx_done == false)
 8005440:	e007      	b.n	8005452 <sdWriteBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 8005442:	f7fc fab3 	bl	80019ac <millis>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d908      	bls.n	8005464 <sdWriteBlocks+0x54>
    while(is_tx_done == false)
 8005452:	4b13      	ldr	r3, [pc, #76]	; (80054a0 <sdWriteBlocks+0x90>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f083 0301 	eor.w	r3, r3, #1
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1ef      	bne.n	8005442 <sdWriteBlocks+0x32>
 8005462:	e000      	b.n	8005466 <sdWriteBlocks+0x56>
      {
        break;
 8005464:	bf00      	nop
      }
    }
    pre_time = millis();
 8005466:	f7fc faa1 	bl	80019ac <millis>
 800546a:	6138      	str	r0, [r7, #16]
    while(sdIsBusy() == true)
 800546c:	e00b      	b.n	8005486 <sdWriteBlocks+0x76>
    {
      if (millis()-pre_time >= timeout_ms)
 800546e:	f7fc fa9d 	bl	80019ac <millis>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d803      	bhi.n	8005486 <sdWriteBlocks+0x76>
      {
        is_tx_done = false;
 800547e:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <sdWriteBlocks+0x90>)
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
        break;
 8005484:	e004      	b.n	8005490 <sdWriteBlocks+0x80>
    while(sdIsBusy() == true)
 8005486:	f7ff ff43 	bl	8005310 <sdIsBusy>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1ee      	bne.n	800546e <sdWriteBlocks+0x5e>
      }
    }
    ret = is_tx_done;
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <sdWriteBlocks+0x90>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005496:	7dfb      	ldrb	r3, [r7, #23]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20007283 	.word	0x20007283
 80054a4:	2000039c 	.word	0x2000039c

080054a8 <HAL_SD_RxCpltCallback>:




void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 80054b0:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <HAL_SD_RxCpltCallback+0x1c>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	701a      	strb	r2, [r3, #0]
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20007282 	.word	0x20007282

080054c8 <HAL_SD_TxCpltCallback>:

void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <HAL_SD_TxCpltCallback+0x1c>)
 80054d2:	2201      	movs	r2, #1
 80054d4:	701a      	strb	r2, [r3, #0]
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20007283 	.word	0x20007283

080054e8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08c      	sub	sp, #48	; 0x30
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f0:	f107 031c 	add.w	r3, r7, #28
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	605a      	str	r2, [r3, #4]
 80054fa:	609a      	str	r2, [r3, #8]
 80054fc:	60da      	str	r2, [r3, #12]
 80054fe:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a77      	ldr	r2, [pc, #476]	; (80056e4 <HAL_SD_MspInit+0x1fc>)
 8005506:	4293      	cmp	r3, r2
 8005508:	f040 80e8 	bne.w	80056dc <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */
    __HAL_RCC_DMA2_CLK_ENABLE();
 800550c:	2300      	movs	r3, #0
 800550e:	61bb      	str	r3, [r7, #24]
 8005510:	4b75      	ldr	r3, [pc, #468]	; (80056e8 <HAL_SD_MspInit+0x200>)
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	4a74      	ldr	r2, [pc, #464]	; (80056e8 <HAL_SD_MspInit+0x200>)
 8005516:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800551a:	6313      	str	r3, [r2, #48]	; 0x30
 800551c:	4b72      	ldr	r3, [pc, #456]	; (80056e8 <HAL_SD_MspInit+0x200>)
 800551e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005524:	61bb      	str	r3, [r7, #24]
 8005526:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	4b6e      	ldr	r3, [pc, #440]	; (80056e8 <HAL_SD_MspInit+0x200>)
 800552e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005530:	4a6d      	ldr	r2, [pc, #436]	; (80056e8 <HAL_SD_MspInit+0x200>)
 8005532:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005536:	6453      	str	r3, [r2, #68]	; 0x44
 8005538:	4b6b      	ldr	r3, [pc, #428]	; (80056e8 <HAL_SD_MspInit+0x200>)
 800553a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005544:	2300      	movs	r3, #0
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	4b67      	ldr	r3, [pc, #412]	; (80056e8 <HAL_SD_MspInit+0x200>)
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	4a66      	ldr	r2, [pc, #408]	; (80056e8 <HAL_SD_MspInit+0x200>)
 800554e:	f043 0301 	orr.w	r3, r3, #1
 8005552:	6313      	str	r3, [r2, #48]	; 0x30
 8005554:	4b64      	ldr	r3, [pc, #400]	; (80056e8 <HAL_SD_MspInit+0x200>)
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	4b60      	ldr	r3, [pc, #384]	; (80056e8 <HAL_SD_MspInit+0x200>)
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	4a5f      	ldr	r2, [pc, #380]	; (80056e8 <HAL_SD_MspInit+0x200>)
 800556a:	f043 0302 	orr.w	r3, r3, #2
 800556e:	6313      	str	r3, [r2, #48]	; 0x30
 8005570:	4b5d      	ldr	r3, [pc, #372]	; (80056e8 <HAL_SD_MspInit+0x200>)
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800557c:	f44f 7350 	mov.w	r3, #832	; 0x340
 8005580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005582:	2302      	movs	r3, #2
 8005584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005586:	2301      	movs	r3, #1
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800558a:	2301      	movs	r3, #1
 800558c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800558e:	230c      	movs	r3, #12
 8005590:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005592:	f107 031c 	add.w	r3, r7, #28
 8005596:	4619      	mov	r1, r3
 8005598:	4854      	ldr	r0, [pc, #336]	; (80056ec <HAL_SD_MspInit+0x204>)
 800559a:	f001 ff1d 	bl	80073d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 800559e:	f248 03a0 	movw	r3, #32928	; 0x80a0
 80055a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a4:	2302      	movs	r3, #2
 80055a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055a8:	2301      	movs	r3, #1
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80055ac:	2301      	movs	r3, #1
 80055ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80055b0:	230c      	movs	r3, #12
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055b4:	f107 031c 	add.w	r3, r7, #28
 80055b8:	4619      	mov	r1, r3
 80055ba:	484d      	ldr	r0, [pc, #308]	; (80056f0 <HAL_SD_MspInit+0x208>)
 80055bc:	f001 ff0c 	bl	80073d8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80055c0:	4b4c      	ldr	r3, [pc, #304]	; (80056f4 <HAL_SD_MspInit+0x20c>)
 80055c2:	4a4d      	ldr	r2, [pc, #308]	; (80056f8 <HAL_SD_MspInit+0x210>)
 80055c4:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80055c6:	4b4b      	ldr	r3, [pc, #300]	; (80056f4 <HAL_SD_MspInit+0x20c>)
 80055c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055cc:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055ce:	4b49      	ldr	r3, [pc, #292]	; (80056f4 <HAL_SD_MspInit+0x20c>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055d4:	4b47      	ldr	r3, [pc, #284]	; (80056f4 <HAL_SD_MspInit+0x20c>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055da:	4b46      	ldr	r3, [pc, #280]	; (80056f4 <HAL_SD_MspInit+0x20c>)
 80055dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055e0:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80055e2:	4b44      	ldr	r3, [pc, #272]	; (80056f4 <HAL_SD_MspInit+0x20c>)
 80055e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055e8:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80055ea:	4b42      	ldr	r3, [pc, #264]	; (80056f4 <HAL_SD_MspInit+0x20c>)
 80055ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055f0:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80055f2:	4b40      	ldr	r3, [pc, #256]	; (80056f4 <HAL_SD_MspInit+0x20c>)
 80055f4:	2220      	movs	r2, #32
 80055f6:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80055f8:	4b3e      	ldr	r3, [pc, #248]	; (80056f4 <HAL_SD_MspInit+0x20c>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80055fe:	4b3d      	ldr	r3, [pc, #244]	; (80056f4 <HAL_SD_MspInit+0x20c>)
 8005600:	2204      	movs	r2, #4
 8005602:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005604:	4b3b      	ldr	r3, [pc, #236]	; (80056f4 <HAL_SD_MspInit+0x20c>)
 8005606:	2203      	movs	r2, #3
 8005608:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800560a:	4b3a      	ldr	r3, [pc, #232]	; (80056f4 <HAL_SD_MspInit+0x20c>)
 800560c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005610:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005612:	4b38      	ldr	r3, [pc, #224]	; (80056f4 <HAL_SD_MspInit+0x20c>)
 8005614:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005618:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800561a:	4836      	ldr	r0, [pc, #216]	; (80056f4 <HAL_SD_MspInit+0x20c>)
 800561c:	f000 ffea 	bl	80065f4 <HAL_DMA_Init>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 8005626:	f7fb ffdd 	bl	80015e4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a31      	ldr	r2, [pc, #196]	; (80056f4 <HAL_SD_MspInit+0x20c>)
 800562e:	641a      	str	r2, [r3, #64]	; 0x40
 8005630:	4a30      	ldr	r2, [pc, #192]	; (80056f4 <HAL_SD_MspInit+0x20c>)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005636:	4b31      	ldr	r3, [pc, #196]	; (80056fc <HAL_SD_MspInit+0x214>)
 8005638:	4a31      	ldr	r2, [pc, #196]	; (8005700 <HAL_SD_MspInit+0x218>)
 800563a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800563c:	4b2f      	ldr	r3, [pc, #188]	; (80056fc <HAL_SD_MspInit+0x214>)
 800563e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005642:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005644:	4b2d      	ldr	r3, [pc, #180]	; (80056fc <HAL_SD_MspInit+0x214>)
 8005646:	2240      	movs	r2, #64	; 0x40
 8005648:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800564a:	4b2c      	ldr	r3, [pc, #176]	; (80056fc <HAL_SD_MspInit+0x214>)
 800564c:	2200      	movs	r2, #0
 800564e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005650:	4b2a      	ldr	r3, [pc, #168]	; (80056fc <HAL_SD_MspInit+0x214>)
 8005652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005656:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005658:	4b28      	ldr	r3, [pc, #160]	; (80056fc <HAL_SD_MspInit+0x214>)
 800565a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800565e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005660:	4b26      	ldr	r3, [pc, #152]	; (80056fc <HAL_SD_MspInit+0x214>)
 8005662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005666:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005668:	4b24      	ldr	r3, [pc, #144]	; (80056fc <HAL_SD_MspInit+0x214>)
 800566a:	2220      	movs	r2, #32
 800566c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800566e:	4b23      	ldr	r3, [pc, #140]	; (80056fc <HAL_SD_MspInit+0x214>)
 8005670:	2200      	movs	r2, #0
 8005672:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005674:	4b21      	ldr	r3, [pc, #132]	; (80056fc <HAL_SD_MspInit+0x214>)
 8005676:	2204      	movs	r2, #4
 8005678:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800567a:	4b20      	ldr	r3, [pc, #128]	; (80056fc <HAL_SD_MspInit+0x214>)
 800567c:	2203      	movs	r2, #3
 800567e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005680:	4b1e      	ldr	r3, [pc, #120]	; (80056fc <HAL_SD_MspInit+0x214>)
 8005682:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005686:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005688:	4b1c      	ldr	r3, [pc, #112]	; (80056fc <HAL_SD_MspInit+0x214>)
 800568a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005690:	481a      	ldr	r0, [pc, #104]	; (80056fc <HAL_SD_MspInit+0x214>)
 8005692:	f000 ffaf 	bl	80065f4 <HAL_DMA_Init>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 800569c:	f7fb ffa2 	bl	80015e4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a16      	ldr	r2, [pc, #88]	; (80056fc <HAL_SD_MspInit+0x214>)
 80056a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80056a6:	4a15      	ldr	r2, [pc, #84]	; (80056fc <HAL_SD_MspInit+0x214>)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 4, 0);
 80056ac:	2200      	movs	r2, #0
 80056ae:	2104      	movs	r1, #4
 80056b0:	2031      	movs	r0, #49	; 0x31
 80056b2:	f000 ff5a 	bl	800656a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80056b6:	2031      	movs	r0, #49	; 0x31
 80056b8:	f000 ff73 	bl	80065a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80056bc:	2200      	movs	r2, #0
 80056be:	2103      	movs	r1, #3
 80056c0:	203b      	movs	r0, #59	; 0x3b
 80056c2:	f000 ff52 	bl	800656a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80056c6:	203b      	movs	r0, #59	; 0x3b
 80056c8:	f000 ff6b 	bl	80065a2 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 80056cc:	2200      	movs	r2, #0
 80056ce:	2103      	movs	r1, #3
 80056d0:	2045      	movs	r0, #69	; 0x45
 80056d2:	f000 ff4a 	bl	800656a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80056d6:	2045      	movs	r0, #69	; 0x45
 80056d8:	f000 ff63 	bl	80065a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80056dc:	bf00      	nop
 80056de:	3730      	adds	r7, #48	; 0x30
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40012c00 	.word	0x40012c00
 80056e8:	40023800 	.word	0x40023800
 80056ec:	40020000 	.word	0x40020000
 80056f0:	40020400 	.word	0x40020400
 80056f4:	20000420 	.word	0x20000420
 80056f8:	40026458 	.word	0x40026458
 80056fc:	20000480 	.word	0x20000480
 8005700:	400264a0 	.word	0x400264a0

08005704 <cliSd>:



#ifdef _USE_HW_CLI
void cliSd(cli_args_t *args)
{
 8005704:	b590      	push	{r4, r7, lr}
 8005706:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800570a:	af00      	add	r7, sp, #0
 800570c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005710:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8005714:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8005716:	2300      	movs	r3, #0
 8005718:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  if (args->argc == 1 && args->isStr(0, "info") == true)
 800571c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005720:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	2b01      	cmp	r3, #1
 800572a:	f040 8094 	bne.w	8005856 <cliSd+0x152>
 800572e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005732:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	4979      	ldr	r1, [pc, #484]	; (8005920 <cliSd+0x21c>)
 800573c:	2000      	movs	r0, #0
 800573e:	4798      	blx	r3
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 8087 	beq.w	8005856 <cliSd+0x152>
  {
    sd_info_t sd_info;

    cliPrintf("sd init      : %d\n", is_init);
 8005748:	4b76      	ldr	r3, [pc, #472]	; (8005924 <cliSd+0x220>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	4619      	mov	r1, r3
 800574e:	4876      	ldr	r0, [pc, #472]	; (8005928 <cliSd+0x224>)
 8005750:	f7fd fd9e 	bl	8003290 <cliPrintf>
    cliPrintf("sd connected : %d\n", is_detected);
 8005754:	4b75      	ldr	r3, [pc, #468]	; (800592c <cliSd+0x228>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	4619      	mov	r1, r3
 800575a:	4875      	ldr	r0, [pc, #468]	; (8005930 <cliSd+0x22c>)
 800575c:	f7fd fd98 	bl	8003290 <cliPrintf>

    if (is_init == true)
 8005760:	4b70      	ldr	r3, [pc, #448]	; (8005924 <cliSd+0x220>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d073      	beq.n	8005850 <cliSd+0x14c>
    {
      if (sdGetInfo(&sd_info) == true)
 8005768:	f107 030c 	add.w	r3, r7, #12
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff fd77 	bl	8005260 <sdGetInfo>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d06b      	beq.n	8005850 <cliSd+0x14c>
      {
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 8005778:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800577c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4619      	mov	r1, r3
 8005784:	486b      	ldr	r0, [pc, #428]	; (8005934 <cliSd+0x230>)
 8005786:	f7fd fd83 	bl	8003290 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 800578a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800578e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	4619      	mov	r1, r3
 8005796:	4868      	ldr	r0, [pc, #416]	; (8005938 <cliSd+0x234>)
 8005798:	f7fd fd7a 	bl	8003290 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 800579c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057a0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	4619      	mov	r1, r3
 80057a8:	4864      	ldr	r0, [pc, #400]	; (800593c <cliSd+0x238>)
 80057aa:	f7fd fd71 	bl	8003290 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 80057ae:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057b2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	4619      	mov	r1, r3
 80057ba:	4861      	ldr	r0, [pc, #388]	; (8005940 <cliSd+0x23c>)
 80057bc:	f7fd fd68 	bl	8003290 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 80057c0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057c4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	4619      	mov	r1, r3
 80057cc:	485d      	ldr	r0, [pc, #372]	; (8005944 <cliSd+0x240>)
 80057ce:	f7fd fd5f 	bl	8003290 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 80057d2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057d6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	4619      	mov	r1, r3
 80057de:	485a      	ldr	r0, [pc, #360]	; (8005948 <cliSd+0x244>)
 80057e0:	f7fd fd56 	bl	8003290 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 80057e4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057e8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	4619      	mov	r1, r3
 80057f0:	4856      	ldr	r0, [pc, #344]	; (800594c <cliSd+0x248>)
 80057f2:	f7fd fd4d 	bl	8003290 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 80057f6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057fa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	4619      	mov	r1, r3
 8005802:	4853      	ldr	r0, [pc, #332]	; (8005950 <cliSd+0x24c>)
 8005804:	f7fd fd44 	bl	8003290 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 8005808:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800580c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005810:	6a18      	ldr	r0, [r3, #32]
 8005812:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005816:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	0a9c      	lsrs	r4, r3, #10
 800581e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005822:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005826:	6a1a      	ldr	r2, [r3, #32]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	0a99      	lsrs	r1, r3, #10
 8005832:	4b48      	ldr	r3, [pc, #288]	; (8005954 <cliSd+0x250>)
 8005834:	fba3 2301 	umull	r2, r3, r3, r1
 8005838:	08da      	lsrs	r2, r3, #3
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	1aca      	subs	r2, r1, r3
 8005844:	4613      	mov	r3, r2
 8005846:	4622      	mov	r2, r4
 8005848:	4601      	mov	r1, r0
 800584a:	4843      	ldr	r0, [pc, #268]	; (8005958 <cliSd+0x254>)
 800584c:	f7fd fd20 	bl	8003290 <cliPrintf>
      }
    }
    ret = true;
 8005850:	2301      	movs	r3, #1
 8005852:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8005856:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800585a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d146      	bne.n	80058f4 <cliSd+0x1f0>
 8005866:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800586a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	493a      	ldr	r1, [pc, #232]	; (800595c <cliSd+0x258>)
 8005874:	2000      	movs	r0, #0
 8005876:	4798      	blx	r3
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d03a      	beq.n	80058f4 <cliSd+0x1f0>
  {
    uint32_t number;
    uint32_t buf[512/4];

    number = args->getData(1);
 800587e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005882:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2001      	movs	r0, #1
 800588c:	4798      	blx	r3
 800588e:	4603      	mov	r3, r0
 8005890:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 8005894:	f107 010c 	add.w	r1, r7, #12
 8005898:	2364      	movs	r3, #100	; 0x64
 800589a:	2201      	movs	r2, #1
 800589c:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80058a0:	f7ff fd6c 	bl	800537c <sdReadBlocks>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01e      	beq.n	80058e8 <cliSd+0x1e4>
    {
      for (int i=0; i<512/4; i++)
 80058aa:	2300      	movs	r3, #0
 80058ac:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80058b0:	e015      	b.n	80058de <cliSd+0x1da>
      {
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 80058b2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80058b6:	0099      	lsls	r1, r3, #2
 80058b8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80058bc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80058c0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80058c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c8:	460a      	mov	r2, r1
 80058ca:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80058ce:	4824      	ldr	r0, [pc, #144]	; (8005960 <cliSd+0x25c>)
 80058d0:	f7fd fcde 	bl	8003290 <cliPrintf>
      for (int i=0; i<512/4; i++)
 80058d4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80058d8:	3301      	adds	r3, #1
 80058da:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80058de:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80058e2:	2b7f      	cmp	r3, #127	; 0x7f
 80058e4:	dde5      	ble.n	80058b2 <cliSd+0x1ae>
 80058e6:	e002      	b.n	80058ee <cliSd+0x1ea>
      }
    }
    else
    {
      cliPrintf("sdRead Fail\n");
 80058e8:	481e      	ldr	r0, [pc, #120]	; (8005964 <cliSd+0x260>)
 80058ea:	f7fd fcd1 	bl	8003290 <cliPrintf>
    }

    ret = true;
 80058ee:	2301      	movs	r3, #1
 80058f0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (ret != true)
 80058f4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80058f8:	f083 0301 	eor.w	r3, r3, #1
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <cliSd+0x212>
  {
    cliPrintf("sd info\n");
 8005902:	4819      	ldr	r0, [pc, #100]	; (8005968 <cliSd+0x264>)
 8005904:	f7fd fcc4 	bl	8003290 <cliPrintf>

    if (is_init == true)
 8005908:	4b06      	ldr	r3, [pc, #24]	; (8005924 <cliSd+0x220>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <cliSd+0x212>
    {
      cliPrintf("sd read block_number\n");
 8005910:	4816      	ldr	r0, [pc, #88]	; (800596c <cliSd+0x268>)
 8005912:	f7fd fcbd 	bl	8003290 <cliPrintf>
    }
  }
}
 8005916:	bf00      	nop
 8005918:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800591c:	46bd      	mov	sp, r7
 800591e:	bd90      	pop	{r4, r7, pc}
 8005920:	0801a93c 	.word	0x0801a93c
 8005924:	20007280 	.word	0x20007280
 8005928:	0801a944 	.word	0x0801a944
 800592c:	20007281 	.word	0x20007281
 8005930:	0801a958 	.word	0x0801a958
 8005934:	0801a96c 	.word	0x0801a96c
 8005938:	0801a98c 	.word	0x0801a98c
 800593c:	0801a9ac 	.word	0x0801a9ac
 8005940:	0801a9cc 	.word	0x0801a9cc
 8005944:	0801a9ec 	.word	0x0801a9ec
 8005948:	0801aa0c 	.word	0x0801aa0c
 800594c:	0801aa2c 	.word	0x0801aa2c
 8005950:	0801aa4c 	.word	0x0801aa4c
 8005954:	cccccccd 	.word	0xcccccccd
 8005958:	0801aa6c 	.word	0x0801aa6c
 800595c:	0801aa98 	.word	0x0801aa98
 8005960:	0801aaa0 	.word	0x0801aaa0
 8005964:	0801aab4 	.word	0x0801aab4
 8005968:	0801aac4 	.word	0x0801aac4
 800596c:	0801aad0 	.word	0x0801aad0

08005970 <spiInit>:
SPI_HandleTypeDef hspi4;
DMA_HandleTypeDef hdma_spi4_tx;


bool spiInit(void)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
  bool ret = true;
 8005976:	2301      	movs	r3, #1
 8005978:	70fb      	strb	r3, [r7, #3]


  for (int i=0; i<SPI_MAX_CH; i++)
 800597a:	2300      	movs	r3, #0
 800597c:	607b      	str	r3, [r7, #4]
 800597e:	e03d      	b.n	80059fc <spiInit+0x8c>
  {
    spi_tbl[i].is_open = false;
 8005980:	4923      	ldr	r1, [pc, #140]	; (8005a10 <spiInit+0xa0>)
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	440b      	add	r3, r1
 800598e:	2200      	movs	r2, #0
 8005990:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 8005992:	491f      	ldr	r1, [pc, #124]	; (8005a10 <spiInit+0xa0>)
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	440b      	add	r3, r1
 80059a0:	3301      	adds	r3, #1
 80059a2:	2201      	movs	r2, #1
 80059a4:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_error = false;
 80059a6:	491a      	ldr	r1, [pc, #104]	; (8005a10 <spiInit+0xa0>)
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	440b      	add	r3, r1
 80059b4:	3302      	adds	r3, #2
 80059b6:	2200      	movs	r2, #0
 80059b8:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 80059ba:	4915      	ldr	r1, [pc, #84]	; (8005a10 <spiInit+0xa0>)
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	4613      	mov	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	440b      	add	r3, r1
 80059c8:	3304      	adds	r3, #4
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_rx = NULL;
 80059ce:	4910      	ldr	r1, [pc, #64]	; (8005a10 <spiInit+0xa0>)
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	440b      	add	r3, r1
 80059dc:	3310      	adds	r3, #16
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_tx = NULL;
 80059e2:	490b      	ldr	r1, [pc, #44]	; (8005a10 <spiInit+0xa0>)
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	440b      	add	r3, r1
 80059f0:	330c      	adds	r3, #12
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3301      	adds	r3, #1
 80059fa:	607b      	str	r3, [r7, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	ddbe      	ble.n	8005980 <spiInit+0x10>
  }

  return ret;
 8005a02:	78fb      	ldrb	r3, [r7, #3]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	20007284 	.word	0x20007284

08005a14 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 8005a22:	79fa      	ldrb	r2, [r7, #7]
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4a41      	ldr	r2, [pc, #260]	; (8005b34 <spiBegin+0x120>)
 8005a2e:	4413      	add	r3, r2
 8005a30:	60bb      	str	r3, [r7, #8]

  switch(ch)
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <spiBegin+0x2a>
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d03b      	beq.n	8005ab4 <spiBegin+0xa0>
 8005a3c:	e075      	b.n	8005b2a <spiBegin+0x116>
  {
    case _DEF_SPI1:
      p_spi->h_spi = &hspi4;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	4a3d      	ldr	r2, [pc, #244]	; (8005b38 <spiBegin+0x124>)
 8005a42:	609a      	str	r2, [r3, #8]
      p_spi->h_dma_tx = &hdma_spi4_tx;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4a3d      	ldr	r2, [pc, #244]	; (8005b3c <spiBegin+0x128>)
 8005a48:	60da      	str	r2, [r3, #12]

      hspi4.Instance              = SPI4;
 8005a4a:	4b3b      	ldr	r3, [pc, #236]	; (8005b38 <spiBegin+0x124>)
 8005a4c:	4a3c      	ldr	r2, [pc, #240]	; (8005b40 <spiBegin+0x12c>)
 8005a4e:	601a      	str	r2, [r3, #0]
      hspi4.Init.Mode             = SPI_MODE_MASTER;
 8005a50:	4b39      	ldr	r3, [pc, #228]	; (8005b38 <spiBegin+0x124>)
 8005a52:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005a56:	605a      	str	r2, [r3, #4]
      hspi4.Init.Direction        = SPI_DIRECTION_2LINES;
 8005a58:	4b37      	ldr	r3, [pc, #220]	; (8005b38 <spiBegin+0x124>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	609a      	str	r2, [r3, #8]
      hspi4.Init.DataSize         = SPI_DATASIZE_8BIT;
 8005a5e:	4b36      	ldr	r3, [pc, #216]	; (8005b38 <spiBegin+0x124>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	60da      	str	r2, [r3, #12]
      hspi4.Init.CLKPolarity      = SPI_POLARITY_LOW;
 8005a64:	4b34      	ldr	r3, [pc, #208]	; (8005b38 <spiBegin+0x124>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	611a      	str	r2, [r3, #16]
      hspi4.Init.CLKPhase         = SPI_PHASE_1EDGE;
 8005a6a:	4b33      	ldr	r3, [pc, #204]	; (8005b38 <spiBegin+0x124>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	615a      	str	r2, [r3, #20]
      hspi4.Init.NSS              = SPI_NSS_SOFT;
 8005a70:	4b31      	ldr	r3, [pc, #196]	; (8005b38 <spiBegin+0x124>)
 8005a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a76:	619a      	str	r2, [r3, #24]
      hspi4.Init.BaudRatePrescaler= SPI_BAUDRATEPRESCALER_2;
 8005a78:	4b2f      	ldr	r3, [pc, #188]	; (8005b38 <spiBegin+0x124>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	61da      	str	r2, [r3, #28]
      hspi4.Init.FirstBit         = SPI_FIRSTBIT_MSB;
 8005a7e:	4b2e      	ldr	r3, [pc, #184]	; (8005b38 <spiBegin+0x124>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	621a      	str	r2, [r3, #32]
      hspi4.Init.TIMode           = SPI_TIMODE_DISABLE;
 8005a84:	4b2c      	ldr	r3, [pc, #176]	; (8005b38 <spiBegin+0x124>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24
      hspi4.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 8005a8a:	4b2b      	ldr	r3, [pc, #172]	; (8005b38 <spiBegin+0x124>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	629a      	str	r2, [r3, #40]	; 0x28
      hspi4.Init.CRCPolynomial    = 10;
 8005a90:	4b29      	ldr	r3, [pc, #164]	; (8005b38 <spiBegin+0x124>)
 8005a92:	220a      	movs	r2, #10
 8005a94:	62da      	str	r2, [r3, #44]	; 0x2c

      HAL_SPI_DeInit(&hspi4);
 8005a96:	4828      	ldr	r0, [pc, #160]	; (8005b38 <spiBegin+0x124>)
 8005a98:	f008 f88d 	bl	800dbb6 <HAL_SPI_DeInit>
      if (HAL_SPI_Init(&hspi4) == HAL_OK)
 8005a9c:	4826      	ldr	r0, [pc, #152]	; (8005b38 <spiBegin+0x124>)
 8005a9e:	f008 f801 	bl	800daa4 <HAL_SPI_Init>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d13d      	bne.n	8005b24 <spiBegin+0x110>
      {
        p_spi->is_open = true;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	701a      	strb	r2, [r3, #0]
        ret = true;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ab2:	e037      	b.n	8005b24 <spiBegin+0x110>

    case _DEF_SPI2:
      p_spi->h_spi = &hspi1;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4a23      	ldr	r2, [pc, #140]	; (8005b44 <spiBegin+0x130>)
 8005ab8:	609a      	str	r2, [r3, #8]

      hspi1.Instance              = SPI1;
 8005aba:	4b22      	ldr	r3, [pc, #136]	; (8005b44 <spiBegin+0x130>)
 8005abc:	4a22      	ldr	r2, [pc, #136]	; (8005b48 <spiBegin+0x134>)
 8005abe:	601a      	str	r2, [r3, #0]
      hspi1.Init.Mode             = SPI_MODE_MASTER;
 8005ac0:	4b20      	ldr	r3, [pc, #128]	; (8005b44 <spiBegin+0x130>)
 8005ac2:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ac6:	605a      	str	r2, [r3, #4]
      hspi1.Init.Direction        = SPI_DIRECTION_2LINES;
 8005ac8:	4b1e      	ldr	r3, [pc, #120]	; (8005b44 <spiBegin+0x130>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	609a      	str	r2, [r3, #8]
      hspi1.Init.DataSize         = SPI_DATASIZE_8BIT;
 8005ace:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <spiBegin+0x130>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	60da      	str	r2, [r3, #12]
      hspi1.Init.CLKPolarity      = SPI_POLARITY_LOW;
 8005ad4:	4b1b      	ldr	r3, [pc, #108]	; (8005b44 <spiBegin+0x130>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	611a      	str	r2, [r3, #16]
      hspi1.Init.CLKPhase         = SPI_PHASE_1EDGE;
 8005ada:	4b1a      	ldr	r3, [pc, #104]	; (8005b44 <spiBegin+0x130>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	615a      	str	r2, [r3, #20]
      hspi1.Init.NSS              = SPI_NSS_SOFT;
 8005ae0:	4b18      	ldr	r3, [pc, #96]	; (8005b44 <spiBegin+0x130>)
 8005ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae6:	619a      	str	r2, [r3, #24]
      hspi1.Init.BaudRatePrescaler= SPI_BAUDRATEPRESCALER_16;
 8005ae8:	4b16      	ldr	r3, [pc, #88]	; (8005b44 <spiBegin+0x130>)
 8005aea:	2218      	movs	r2, #24
 8005aec:	61da      	str	r2, [r3, #28]
      hspi1.Init.FirstBit         = SPI_FIRSTBIT_MSB;
 8005aee:	4b15      	ldr	r3, [pc, #84]	; (8005b44 <spiBegin+0x130>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	621a      	str	r2, [r3, #32]
      hspi1.Init.TIMode           = SPI_TIMODE_DISABLE;
 8005af4:	4b13      	ldr	r3, [pc, #76]	; (8005b44 <spiBegin+0x130>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	625a      	str	r2, [r3, #36]	; 0x24
      hspi1.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 8005afa:	4b12      	ldr	r3, [pc, #72]	; (8005b44 <spiBegin+0x130>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	629a      	str	r2, [r3, #40]	; 0x28
      hspi1.Init.CRCPolynomial    = 10;
 8005b00:	4b10      	ldr	r3, [pc, #64]	; (8005b44 <spiBegin+0x130>)
 8005b02:	220a      	movs	r2, #10
 8005b04:	62da      	str	r2, [r3, #44]	; 0x2c

      HAL_SPI_DeInit(&hspi1);
 8005b06:	480f      	ldr	r0, [pc, #60]	; (8005b44 <spiBegin+0x130>)
 8005b08:	f008 f855 	bl	800dbb6 <HAL_SPI_DeInit>
      if (HAL_SPI_Init(&hspi1) == HAL_OK)
 8005b0c:	480d      	ldr	r0, [pc, #52]	; (8005b44 <spiBegin+0x130>)
 8005b0e:	f007 ffc9 	bl	800daa4 <HAL_SPI_Init>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d107      	bne.n	8005b28 <spiBegin+0x114>
      {
        p_spi->is_open = true;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	701a      	strb	r2, [r3, #0]
        ret = true;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b22:	e001      	b.n	8005b28 <spiBegin+0x114>
      break;
 8005b24:	bf00      	nop
 8005b26:	e000      	b.n	8005b2a <spiBegin+0x116>
      break;
 8005b28:	bf00      	nop
  }

  return ret;
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20007284 	.word	0x20007284
 8005b38:	200072f0 	.word	0x200072f0
 8005b3c:	20007348 	.word	0x20007348
 8005b40:	40013400 	.word	0x40013400
 8005b44:	20007298 	.word	0x20007298
 8005b48:	40013000 	.word	0x40013000

08005b4c <spiSetDataMode>:

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	4603      	mov	r3, r0
 8005b54:	460a      	mov	r2, r1
 8005b56:	71fb      	strb	r3, [r7, #7]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8005b5c:	79fa      	ldrb	r2, [r7, #7]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4a2a      	ldr	r2, [pc, #168]	; (8005c10 <spiSetDataMode+0xc4>)
 8005b68:	4413      	add	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	f083 0301 	eor.w	r3, r3, #1
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d146      	bne.n	8005c08 <spiSetDataMode+0xbc>


  switch( dataMode )
 8005b7a:	79bb      	ldrb	r3, [r7, #6]
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d844      	bhi.n	8005c0a <spiSetDataMode+0xbe>
 8005b80:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <spiSetDataMode+0x3c>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005b99 	.word	0x08005b99
 8005b8c:	08005bb5 	.word	0x08005bb5
 8005b90:	08005bd1 	.word	0x08005bd1
 8005b94:	08005bed 	.word	0x08005bed
  {
    // CPOL=0, CPHA=0
    case SPI_MODE0:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f007 ff79 	bl	800daa4 <HAL_SPI_Init>
      break;
 8005bb2:	e02a      	b.n	8005c0a <spiSetDataMode+0xbe>

    // CPOL=0, CPHA=1
    case SPI_MODE1:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f007 ff6b 	bl	800daa4 <HAL_SPI_Init>
      break;
 8005bce:	e01c      	b.n	8005c0a <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=0
    case SPI_MODE2:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f007 ff5d 	bl	800daa4 <HAL_SPI_Init>
      break;
 8005bea:	e00e      	b.n	8005c0a <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=1
    case SPI_MODE3:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f007 ff4f 	bl	800daa4 <HAL_SPI_Init>
      break;
 8005c06:	e000      	b.n	8005c0a <spiSetDataMode+0xbe>
  if (p_spi->is_open == false) return;
 8005c08:	bf00      	nop
  }
}
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20007284 	.word	0x20007284

08005c14 <spiSetBitWidth>:

void spiSetBitWidth(uint8_t ch, uint8_t bit_width)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	460a      	mov	r2, r1
 8005c1e:	71fb      	strb	r3, [r7, #7]
 8005c20:	4613      	mov	r3, r2
 8005c22:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8005c24:	79fa      	ldrb	r2, [r7, #7]
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4a10      	ldr	r2, [pc, #64]	; (8005c70 <spiSetBitWidth+0x5c>)
 8005c30:	4413      	add	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false) return;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	f083 0301 	eor.w	r3, r3, #1
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d111      	bne.n	8005c66 <spiSetBitWidth+0x52>

  p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2200      	movs	r2, #0
 8005c48:	60da      	str	r2, [r3, #12]

  if (bit_width == 16)
 8005c4a:	79bb      	ldrb	r3, [r7, #6]
 8005c4c:	2b10      	cmp	r3, #16
 8005c4e:	d104      	bne.n	8005c5a <spiSetBitWidth+0x46>
  {
    p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c58:	60da      	str	r2, [r3, #12]
  }
  HAL_SPI_Init(p_spi->h_spi);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f007 ff20 	bl	800daa4 <HAL_SPI_Init>
 8005c64:	e000      	b.n	8005c68 <spiSetBitWidth+0x54>
  if (p_spi->is_open == false) return;
 8005c66:	bf00      	nop
}
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20007284 	.word	0x20007284

08005c74 <spiTransfer8>:

uint8_t spiTransfer8(uint8_t ch, uint8_t data)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	460a      	mov	r2, r1
 8005c7e:	71fb      	strb	r3, [r7, #7]
 8005c80:	4613      	mov	r3, r2
 8005c82:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  spi_t  *p_spi = &spi_tbl[ch];
 8005c84:	79fa      	ldrb	r2, [r7, #7]
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4a0d      	ldr	r2, [pc, #52]	; (8005cc4 <spiTransfer8+0x50>)
 8005c90:	4413      	add	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return 0;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	f083 0301 	eor.w	r3, r3, #1
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <spiTransfer8+0x32>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e00a      	b.n	8005cbc <spiTransfer8+0x48>

  HAL_SPI_TransmitReceive(p_spi->h_spi, &data, &ret, 1, 10);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6898      	ldr	r0, [r3, #8]
 8005caa:	f107 020b 	add.w	r2, r7, #11
 8005cae:	1db9      	adds	r1, r7, #6
 8005cb0:	230a      	movs	r3, #10
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f007 ffa6 	bl	800dc06 <HAL_SPI_TransmitReceive>

  return ret;
 8005cba:	7afb      	ldrb	r3, [r7, #11]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	20007284 	.word	0x20007284

08005cc8 <spiDmaTxStart>:

  return ret;
}

void spiDmaTxStart(uint8_t spi_ch, uint8_t *p_buf, uint32_t length)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	73fb      	strb	r3, [r7, #15]
  spi_t  *p_spi = &spi_tbl[spi_ch];
 8005cd6:	7bfa      	ldrb	r2, [r7, #15]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4a0c      	ldr	r2, [pc, #48]	; (8005d14 <spiDmaTxStart+0x4c>)
 8005ce2:	4413      	add	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

  if (p_spi->is_open == false) return;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f083 0301 	eor.w	r3, r3, #1
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10b      	bne.n	8005d0c <spiDmaTxStart+0x44>

  p_spi->is_tx_done = false;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit_DMA(p_spi->h_spi, p_buf, length);
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	b292      	uxth	r2, r2
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f008 f92f 	bl	800df68 <HAL_SPI_Transmit_DMA>
 8005d0a:	e000      	b.n	8005d0e <spiDmaTxStart+0x46>
  if (p_spi->is_open == false) return;
 8005d0c:	bf00      	nop
}
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20007284 	.word	0x20007284

08005d18 <spiDmaTxTransfer>:

bool spiDmaTxTransfer(uint8_t ch, void *buf, uint32_t length, uint32_t timeout)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	4603      	mov	r3, r0
 8005d26:	73fb      	strb	r3, [r7, #15]
  bool ret = true;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]
  uint32_t t_time;


  spiDmaTxStart(ch, (uint8_t *)buf, length);
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff ffc8 	bl	8005cc8 <spiDmaTxStart>

  t_time = millis();
 8005d38:	f7fb fe38 	bl	80019ac <millis>
 8005d3c:	6138      	str	r0, [r7, #16]

  if (timeout == 0) return true;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <spiDmaTxTransfer+0x30>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e013      	b.n	8005d70 <spiDmaTxTransfer+0x58>

  while(1)
  {
    if(spiDmaTxIsDone(ch))
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 f814 	bl	8005d78 <spiDmaTxIsDone>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10a      	bne.n	8005d6c <spiDmaTxTransfer+0x54>
    {
      break;
    }
    if((millis()-t_time) > timeout)
 8005d56:	f7fb fe29 	bl	80019ac <millis>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d2f0      	bcs.n	8005d48 <spiDmaTxTransfer+0x30>
    {
      ret = false;
 8005d66:	2300      	movs	r3, #0
 8005d68:	75fb      	strb	r3, [r7, #23]
      break;
 8005d6a:	e000      	b.n	8005d6e <spiDmaTxTransfer+0x56>
      break;
 8005d6c:	bf00      	nop
    }
  }

  return ret;
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <spiDmaTxIsDone>:

bool spiDmaTxIsDone(uint8_t ch)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 8005d82:	79fa      	ldrb	r2, [r7, #7]
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4a09      	ldr	r2, [pc, #36]	; (8005db4 <spiDmaTxIsDone+0x3c>)
 8005d8e:	4413      	add	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false)     return true;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	f083 0301 	eor.w	r3, r3, #1
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <spiDmaTxIsDone+0x2c>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e001      	b.n	8005da8 <spiDmaTxIsDone+0x30>

  return p_spi->is_tx_done;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	785b      	ldrb	r3, [r3, #1]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	20007284 	.word	0x20007284

08005db8 <spiAttachTxInterrupt>:

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	6039      	str	r1, [r7, #0]
 8005dc2:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 8005dc4:	79fa      	ldrb	r2, [r7, #7]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <spiAttachTxInterrupt+0x40>)
 8005dd0:	4413      	add	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false)     return;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	f083 0301 	eor.w	r3, r3, #1
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d103      	bne.n	8005dea <spiAttachTxInterrupt+0x32>

  p_spi->func_tx = func;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	605a      	str	r2, [r3, #4]
 8005de8:	e000      	b.n	8005dec <spiAttachTxInterrupt+0x34>
  if (p_spi->is_open == false)     return;
 8005dea:	bf00      	nop
}
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	20007284 	.word	0x20007284

08005dfc <HAL_SPI_ErrorCallback>:



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <HAL_SPI_ErrorCallback+0x28>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d102      	bne.n	8005e18 <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 8005e12:	4b04      	ldr	r3, [pc, #16]	; (8005e24 <HAL_SPI_ErrorCallback+0x28>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	709a      	strb	r2, [r3, #2]
  }
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	20007284 	.word	0x20007284

08005e28 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  spi_t  *p_spi;

  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	4b0a      	ldr	r3, [pc, #40]	; (8005e60 <HAL_SPI_TxCpltCallback+0x38>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d10b      	bne.n	8005e56 <HAL_SPI_TxCpltCallback+0x2e>
  {
    p_spi = &spi_tbl[_DEF_SPI1];
 8005e3e:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <HAL_SPI_TxCpltCallback+0x38>)
 8005e40:	60fb      	str	r3, [r7, #12]

    p_spi->is_tx_done = true;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	705a      	strb	r2, [r3, #1]

    if (p_spi->func_tx != NULL)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <HAL_SPI_TxCpltCallback+0x2e>
    {
      (*p_spi->func_tx)();
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	4798      	blx	r3
    }
  }
}
 8005e56:	bf00      	nop
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20007284 	.word	0x20007284

08005e64 <HAL_SPI_MspInit>:
    }
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08e      	sub	sp, #56	; 0x38
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	605a      	str	r2, [r3, #4]
 8005e76:	609a      	str	r2, [r3, #8]
 8005e78:	60da      	str	r2, [r3, #12]
 8005e7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a7c      	ldr	r2, [pc, #496]	; (8006074 <HAL_SPI_MspInit+0x210>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d152      	bne.n	8005f2c <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */
  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005e86:	2300      	movs	r3, #0
 8005e88:	623b      	str	r3, [r7, #32]
 8005e8a:	4b7b      	ldr	r3, [pc, #492]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8e:	4a7a      	ldr	r2, [pc, #488]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e94:	6453      	str	r3, [r2, #68]	; 0x44
 8005e96:	4b78      	ldr	r3, [pc, #480]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e9e:	623b      	str	r3, [r7, #32]
 8005ea0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61fb      	str	r3, [r7, #28]
 8005ea6:	4b74      	ldr	r3, [pc, #464]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eaa:	4a73      	ldr	r2, [pc, #460]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005eac:	f043 0301 	orr.w	r3, r3, #1
 8005eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8005eb2:	4b71      	ldr	r3, [pc, #452]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	61bb      	str	r3, [r7, #24]
 8005ec2:	4b6d      	ldr	r3, [pc, #436]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec6:	4a6c      	ldr	r2, [pc, #432]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005ec8:	f043 0302 	orr.w	r3, r3, #2
 8005ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8005ece:	4b6a      	ldr	r3, [pc, #424]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	61bb      	str	r3, [r7, #24]
 8005ed8:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005eda:	23a0      	movs	r3, #160	; 0xa0
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ede:	2302      	movs	r3, #2
 8005ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005eea:	2305      	movs	r3, #5
 8005eec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4861      	ldr	r0, [pc, #388]	; (800607c <HAL_SPI_MspInit+0x218>)
 8005ef6:	f001 fa6f 	bl	80073d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005efa:	2310      	movs	r3, #16
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005efe:	2302      	movs	r3, #2
 8005f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f06:	2303      	movs	r3, #3
 8005f08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005f0a:	2305      	movs	r3, #5
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f12:	4619      	mov	r1, r3
 8005f14:	485a      	ldr	r0, [pc, #360]	; (8006080 <HAL_SPI_MspInit+0x21c>)
 8005f16:	f001 fa5f 	bl	80073d8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2105      	movs	r1, #5
 8005f1e:	2023      	movs	r0, #35	; 0x23
 8005f20:	f000 fb23 	bl	800656a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005f24:	2023      	movs	r0, #35	; 0x23
 8005f26:	f000 fb3c 	bl	80065a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */
    HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8005f2a:	e09e      	b.n	800606a <HAL_SPI_MspInit+0x206>
  else if(spiHandle->Instance==SPI4)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a54      	ldr	r2, [pc, #336]	; (8006084 <HAL_SPI_MspInit+0x220>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	f040 8099 	bne.w	800606a <HAL_SPI_MspInit+0x206>
    __HAL_RCC_DMA2_CLK_ENABLE();
 8005f38:	2300      	movs	r3, #0
 8005f3a:	617b      	str	r3, [r7, #20]
 8005f3c:	4b4e      	ldr	r3, [pc, #312]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f40:	4a4d      	ldr	r2, [pc, #308]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005f42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f46:	6313      	str	r3, [r2, #48]	; 0x30
 8005f48:	4b4b      	ldr	r3, [pc, #300]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005f54:	2300      	movs	r3, #0
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	4b47      	ldr	r3, [pc, #284]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5c:	4a46      	ldr	r2, [pc, #280]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005f5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f62:	6453      	str	r3, [r2, #68]	; 0x44
 8005f64:	4b44      	ldr	r3, [pc, #272]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f6c:	613b      	str	r3, [r7, #16]
 8005f6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	4b40      	ldr	r3, [pc, #256]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f78:	4a3f      	ldr	r2, [pc, #252]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f80:	4b3d      	ldr	r3, [pc, #244]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60bb      	str	r3, [r7, #8]
 8005f90:	4b39      	ldr	r3, [pc, #228]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	4a38      	ldr	r2, [pc, #224]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005f96:	f043 0302 	orr.w	r3, r3, #2
 8005f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8005f9c:	4b36      	ldr	r3, [pc, #216]	; (8006078 <HAL_SPI_MspInit+0x214>)
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	60bb      	str	r3, [r7, #8]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fac:	2302      	movs	r3, #2
 8005fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8005fb8:	2305      	movs	r3, #5
 8005fba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	482e      	ldr	r0, [pc, #184]	; (800607c <HAL_SPI_MspInit+0x218>)
 8005fc4:	f001 fa08 	bl	80073d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fce:	2302      	movs	r3, #2
 8005fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8005fda:	2306      	movs	r3, #6
 8005fdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4826      	ldr	r0, [pc, #152]	; (8006080 <HAL_SPI_MspInit+0x21c>)
 8005fe6:	f001 f9f7 	bl	80073d8 <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8005fea:	4b27      	ldr	r3, [pc, #156]	; (8006088 <HAL_SPI_MspInit+0x224>)
 8005fec:	4a27      	ldr	r2, [pc, #156]	; (800608c <HAL_SPI_MspInit+0x228>)
 8005fee:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8005ff0:	4b25      	ldr	r3, [pc, #148]	; (8006088 <HAL_SPI_MspInit+0x224>)
 8005ff2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ff6:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ff8:	4b23      	ldr	r3, [pc, #140]	; (8006088 <HAL_SPI_MspInit+0x224>)
 8005ffa:	2240      	movs	r2, #64	; 0x40
 8005ffc:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ffe:	4b22      	ldr	r3, [pc, #136]	; (8006088 <HAL_SPI_MspInit+0x224>)
 8006000:	2200      	movs	r2, #0
 8006002:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006004:	4b20      	ldr	r3, [pc, #128]	; (8006088 <HAL_SPI_MspInit+0x224>)
 8006006:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800600a:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800600c:	4b1e      	ldr	r3, [pc, #120]	; (8006088 <HAL_SPI_MspInit+0x224>)
 800600e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006012:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006014:	4b1c      	ldr	r3, [pc, #112]	; (8006088 <HAL_SPI_MspInit+0x224>)
 8006016:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800601a:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800601c:	4b1a      	ldr	r3, [pc, #104]	; (8006088 <HAL_SPI_MspInit+0x224>)
 800601e:	2200      	movs	r2, #0
 8006020:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006022:	4b19      	ldr	r3, [pc, #100]	; (8006088 <HAL_SPI_MspInit+0x224>)
 8006024:	2200      	movs	r2, #0
 8006026:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006028:	4b17      	ldr	r3, [pc, #92]	; (8006088 <HAL_SPI_MspInit+0x224>)
 800602a:	2200      	movs	r2, #0
 800602c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800602e:	4816      	ldr	r0, [pc, #88]	; (8006088 <HAL_SPI_MspInit+0x224>)
 8006030:	f000 fae0 	bl	80065f4 <HAL_DMA_Init>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <HAL_SPI_MspInit+0x1da>
      Error_Handler();
 800603a:	f7fb fad3 	bl	80015e4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a11      	ldr	r2, [pc, #68]	; (8006088 <HAL_SPI_MspInit+0x224>)
 8006042:	649a      	str	r2, [r3, #72]	; 0x48
 8006044:	4a10      	ldr	r2, [pc, #64]	; (8006088 <HAL_SPI_MspInit+0x224>)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 800604a:	2200      	movs	r2, #0
 800604c:	2105      	movs	r1, #5
 800604e:	2054      	movs	r0, #84	; 0x54
 8006050:	f000 fa8b 	bl	800656a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8006054:	2054      	movs	r0, #84	; 0x54
 8006056:	f000 faa4 	bl	80065a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800605a:	2200      	movs	r2, #0
 800605c:	2105      	movs	r1, #5
 800605e:	2039      	movs	r0, #57	; 0x39
 8006060:	f000 fa83 	bl	800656a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8006064:	2039      	movs	r0, #57	; 0x39
 8006066:	f000 fa9c 	bl	80065a2 <HAL_NVIC_EnableIRQ>
}
 800606a:	bf00      	nop
 800606c:	3738      	adds	r7, #56	; 0x38
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40013000 	.word	0x40013000
 8006078:	40023800 	.word	0x40023800
 800607c:	40020000 	.word	0x40020000
 8006080:	40020400 	.word	0x40020400
 8006084:	40013400 	.word	0x40013400
 8006088:	20007348 	.word	0x20007348
 800608c:	40026428 	.word	0x40026428

08006090 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1a      	ldr	r2, [pc, #104]	; (8006108 <HAL_SPI_MspDeInit+0x78>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d111      	bne.n	80060c6 <HAL_SPI_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80060a2:	4b1a      	ldr	r3, [pc, #104]	; (800610c <HAL_SPI_MspDeInit+0x7c>)
 80060a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a6:	4a19      	ldr	r2, [pc, #100]	; (800610c <HAL_SPI_MspDeInit+0x7c>)
 80060a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060ac:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 80060ae:	21a0      	movs	r1, #160	; 0xa0
 80060b0:	4817      	ldr	r0, [pc, #92]	; (8006110 <HAL_SPI_MspDeInit+0x80>)
 80060b2:	f001 fb15 	bl	80076e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 80060b6:	2110      	movs	r1, #16
 80060b8:	4816      	ldr	r0, [pc, #88]	; (8006114 <HAL_SPI_MspDeInit+0x84>)
 80060ba:	f001 fb11 	bl	80076e0 <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80060be:	2023      	movs	r0, #35	; 0x23
 80060c0:	f000 fa7d 	bl	80065be <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }
}
 80060c4:	e01b      	b.n	80060fe <HAL_SPI_MspDeInit+0x6e>
  else if(spiHandle->Instance==SPI4)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a13      	ldr	r2, [pc, #76]	; (8006118 <HAL_SPI_MspDeInit+0x88>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d116      	bne.n	80060fe <HAL_SPI_MspDeInit+0x6e>
    __HAL_RCC_SPI4_CLK_DISABLE();
 80060d0:	4b0e      	ldr	r3, [pc, #56]	; (800610c <HAL_SPI_MspDeInit+0x7c>)
 80060d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d4:	4a0d      	ldr	r2, [pc, #52]	; (800610c <HAL_SPI_MspDeInit+0x7c>)
 80060d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060da:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
 80060dc:	2102      	movs	r1, #2
 80060de:	480c      	ldr	r0, [pc, #48]	; (8006110 <HAL_SPI_MspDeInit+0x80>)
 80060e0:	f001 fafe 	bl	80076e0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 80060e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060e8:	480a      	ldr	r0, [pc, #40]	; (8006114 <HAL_SPI_MspDeInit+0x84>)
 80060ea:	f001 faf9 	bl	80076e0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmatx);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fb2c 	bl	8006750 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(SPI4_IRQn);
 80060f8:	2054      	movs	r0, #84	; 0x54
 80060fa:	f000 fa60 	bl	80065be <HAL_NVIC_DisableIRQ>
}
 80060fe:	bf00      	nop
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	40013000 	.word	0x40013000
 800610c:	40023800 	.word	0x40023800
 8006110:	40020000 	.word	0x40020000
 8006114:	40020400 	.word	0x40020400
 8006118:	40013400 	.word	0x40013400

0800611c <uartOpen>:
{
	return true;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	4603      	mov	r3, r0
 8006124:	6039      	str	r1, [r7, #0]
 8006126:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8006128:	2300      	movs	r3, #0
 800612a:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d106      	bne.n	8006140 <uartOpen+0x24>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	4a06      	ldr	r2, [pc, #24]	; (8006150 <uartOpen+0x34>)
 8006136:	2101      	movs	r1, #1
 8006138:	54d1      	strb	r1, [r2, r3]
			ret = true;
 800613a:	2301      	movs	r3, #1
 800613c:	73fb      	strb	r3, [r7, #15]
			break;
 800613e:	bf00      	nop
			qbuffer[ch].out = qbuffer[ch].in;
			break;
			#endif
	}

	return ret;
 8006140:	7bfb      	ldrb	r3, [r7, #15]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	200073a8 	.word	0x200073a8

08006154 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	4603      	mov	r3, r0
 800615c:	71fb      	strb	r3, [r7, #7]
	uint32_t ret;

	switch(ch)
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <uartAvailable+0x14>
 8006164:	2b01      	cmp	r3, #1
		case _DEF_UART2:
			#ifdef _USE_UART2
			qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
			ret = qbufferAvailable(&qbuffer[ch]);
			#endif
			break;
 8006166:	e003      	b.n	8006170 <uartAvailable+0x1c>
			ret = cdcAvailable();
 8006168:	f7fc faf0 	bl	800274c <cdcAvailable>
 800616c:	60f8      	str	r0, [r7, #12]
			break;
 800616e:	bf00      	nop
	}

	return ret;
 8006170:	68fb      	ldr	r3, [r7, #12]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	4603      	mov	r3, r0
 8006182:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 8006184:	79fb      	ldrb	r3, [r7, #7]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <uartRead+0x14>
 800618a:	2b01      	cmp	r3, #1

		case _DEF_UART2:
			#ifdef _USE_UART2
			qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
			#endif
			break;
 800618c:	e004      	b.n	8006198 <uartRead+0x1e>
			ret = cdcRead();
 800618e:	f7fc faf3 	bl	8002778 <cdcRead>
 8006192:	4603      	mov	r3, r0
 8006194:	73fb      	strb	r3, [r7, #15]
			break;
 8006196:	bf00      	nop
	}

	return ret;
 8006198:	7bfb      	ldrb	r3, [r7, #15]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b086      	sub	sp, #24
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	4603      	mov	r3, r0
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	607a      	str	r2, [r7, #4]
 80061ae:	73fb      	strb	r3, [r7, #15]

	#ifdef _USE_UART2
	HAL_StatusTypeDef status;
	#endif

	switch(ch)
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <uartWrite+0x18>
 80061b6:	2b01      	cmp	r3, #1
			if(status == HAL_OK)
			{
				ret = length;
			}
			#endif
			break;
 80061b8:	e005      	b.n	80061c6 <uartWrite+0x24>
			ret = cdcWrite(p_data, length);
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	68b8      	ldr	r0, [r7, #8]
 80061be:	f7fc fb23 	bl	8002808 <cdcWrite>
 80061c2:	6178      	str	r0, [r7, #20]
			break;
 80061c4:	bf00      	nop
	}

	return ret;
 80061c6:	697b      	ldr	r3, [r7, #20]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80061d0:	b40e      	push	{r1, r2, r3}
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b0c7      	sub	sp, #284	; 0x11c
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	4602      	mov	r2, r0
 80061da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80061de:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80061e2:	701a      	strb	r2, [r3, #0]
	char buf[256];
	va_list args;
	int len;
	uint32_t ret;

	va_start(args, fmt);
 80061e4:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80061e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80061ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061f0:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf, 256, fmt, args);
 80061f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80061f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061fa:	f107 0010 	add.w	r0, r7, #16
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006208:	f012 f8a0 	bl	801834c <vsniprintf>
 800620c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	ret = uartWrite(ch, (uint8_t *)buf, len);
 8006210:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006214:	f107 0110 	add.w	r1, r7, #16
 8006218:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800621c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff ffbd 	bl	80061a2 <uartWrite>
 8006228:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	va_end(args);

	return ret;
 800622c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8006230:	4618      	mov	r0, r3
 8006232:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8006236:	46bd      	mov	sp, r7
 8006238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800623c:	b003      	add	sp, #12
 800623e:	4770      	bx	lr

08006240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006244:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <HAL_Init+0x40>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a0d      	ldr	r2, [pc, #52]	; (8006280 <HAL_Init+0x40>)
 800624a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800624e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <HAL_Init+0x40>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <HAL_Init+0x40>)
 8006256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800625a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800625c:	4b08      	ldr	r3, [pc, #32]	; (8006280 <HAL_Init+0x40>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a07      	ldr	r2, [pc, #28]	; (8006280 <HAL_Init+0x40>)
 8006262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006268:	2003      	movs	r0, #3
 800626a:	f000 f973 	bl	8006554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800626e:	2000      	movs	r0, #0
 8006270:	f000 f808 	bl	8006284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006274:	f7fb f9ec 	bl	8001650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	40023c00 	.word	0x40023c00

08006284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800628c:	4b12      	ldr	r3, [pc, #72]	; (80062d8 <HAL_InitTick+0x54>)
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	4b12      	ldr	r3, [pc, #72]	; (80062dc <HAL_InitTick+0x58>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	4619      	mov	r1, r3
 8006296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800629a:	fbb3 f3f1 	udiv	r3, r3, r1
 800629e:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 f999 	bl	80065da <HAL_SYSTICK_Config>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e00e      	b.n	80062d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b0f      	cmp	r3, #15
 80062b6:	d80a      	bhi.n	80062ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062b8:	2200      	movs	r2, #0
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	f04f 30ff 	mov.w	r0, #4294967295
 80062c0:	f000 f953 	bl	800656a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80062c4:	4a06      	ldr	r2, [pc, #24]	; (80062e0 <HAL_InitTick+0x5c>)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	e000      	b.n	80062d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20000040 	.word	0x20000040
 80062dc:	200000a0 	.word	0x200000a0
 80062e0:	2000009c 	.word	0x2000009c

080062e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062e8:	4b06      	ldr	r3, [pc, #24]	; (8006304 <HAL_IncTick+0x20>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	4b06      	ldr	r3, [pc, #24]	; (8006308 <HAL_IncTick+0x24>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4413      	add	r3, r2
 80062f4:	4a04      	ldr	r2, [pc, #16]	; (8006308 <HAL_IncTick+0x24>)
 80062f6:	6013      	str	r3, [r2, #0]
}
 80062f8:	bf00      	nop
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	200000a0 	.word	0x200000a0
 8006308:	200073ac 	.word	0x200073ac

0800630c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  return uwTick;
 8006310:	4b03      	ldr	r3, [pc, #12]	; (8006320 <HAL_GetTick+0x14>)
 8006312:	681b      	ldr	r3, [r3, #0]
}
 8006314:	4618      	mov	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	200073ac 	.word	0x200073ac

08006324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800632c:	f7ff ffee 	bl	800630c <HAL_GetTick>
 8006330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633c:	d005      	beq.n	800634a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800633e:	4b0a      	ldr	r3, [pc, #40]	; (8006368 <HAL_Delay+0x44>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800634a:	bf00      	nop
 800634c:	f7ff ffde 	bl	800630c <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	429a      	cmp	r2, r3
 800635a:	d8f7      	bhi.n	800634c <HAL_Delay+0x28>
  {
  }
}
 800635c:	bf00      	nop
 800635e:	bf00      	nop
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	200000a0 	.word	0x200000a0

0800636c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800637c:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <__NVIC_SetPriorityGrouping+0x44>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006388:	4013      	ands	r3, r2
 800638a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800639c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800639e:	4a04      	ldr	r2, [pc, #16]	; (80063b0 <__NVIC_SetPriorityGrouping+0x44>)
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	60d3      	str	r3, [r2, #12]
}
 80063a4:	bf00      	nop
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	e000ed00 	.word	0xe000ed00

080063b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063b8:	4b04      	ldr	r3, [pc, #16]	; (80063cc <__NVIC_GetPriorityGrouping+0x18>)
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	0a1b      	lsrs	r3, r3, #8
 80063be:	f003 0307 	and.w	r3, r3, #7
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	e000ed00 	.word	0xe000ed00

080063d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	4603      	mov	r3, r0
 80063d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	db0b      	blt.n	80063fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063e2:	79fb      	ldrb	r3, [r7, #7]
 80063e4:	f003 021f 	and.w	r2, r3, #31
 80063e8:	4907      	ldr	r1, [pc, #28]	; (8006408 <__NVIC_EnableIRQ+0x38>)
 80063ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ee:	095b      	lsrs	r3, r3, #5
 80063f0:	2001      	movs	r0, #1
 80063f2:	fa00 f202 	lsl.w	r2, r0, r2
 80063f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80063fa:	bf00      	nop
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	e000e100 	.word	0xe000e100

0800640c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	4603      	mov	r3, r0
 8006414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800641a:	2b00      	cmp	r3, #0
 800641c:	db12      	blt.n	8006444 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800641e:	79fb      	ldrb	r3, [r7, #7]
 8006420:	f003 021f 	and.w	r2, r3, #31
 8006424:	490a      	ldr	r1, [pc, #40]	; (8006450 <__NVIC_DisableIRQ+0x44>)
 8006426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	2001      	movs	r0, #1
 800642e:	fa00 f202 	lsl.w	r2, r0, r2
 8006432:	3320      	adds	r3, #32
 8006434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006438:	f3bf 8f4f 	dsb	sy
}
 800643c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800643e:	f3bf 8f6f 	isb	sy
}
 8006442:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	e000e100 	.word	0xe000e100

08006454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	6039      	str	r1, [r7, #0]
 800645e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006464:	2b00      	cmp	r3, #0
 8006466:	db0a      	blt.n	800647e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	b2da      	uxtb	r2, r3
 800646c:	490c      	ldr	r1, [pc, #48]	; (80064a0 <__NVIC_SetPriority+0x4c>)
 800646e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006472:	0112      	lsls	r2, r2, #4
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	440b      	add	r3, r1
 8006478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800647c:	e00a      	b.n	8006494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	b2da      	uxtb	r2, r3
 8006482:	4908      	ldr	r1, [pc, #32]	; (80064a4 <__NVIC_SetPriority+0x50>)
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	3b04      	subs	r3, #4
 800648c:	0112      	lsls	r2, r2, #4
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	440b      	add	r3, r1
 8006492:	761a      	strb	r2, [r3, #24]
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	e000e100 	.word	0xe000e100
 80064a4:	e000ed00 	.word	0xe000ed00

080064a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b089      	sub	sp, #36	; 0x24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	f1c3 0307 	rsb	r3, r3, #7
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	bf28      	it	cs
 80064c6:	2304      	movcs	r3, #4
 80064c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	3304      	adds	r3, #4
 80064ce:	2b06      	cmp	r3, #6
 80064d0:	d902      	bls.n	80064d8 <NVIC_EncodePriority+0x30>
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	3b03      	subs	r3, #3
 80064d6:	e000      	b.n	80064da <NVIC_EncodePriority+0x32>
 80064d8:	2300      	movs	r3, #0
 80064da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064dc:	f04f 32ff 	mov.w	r2, #4294967295
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	fa02 f303 	lsl.w	r3, r2, r3
 80064e6:	43da      	mvns	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	401a      	ands	r2, r3
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064f0:	f04f 31ff 	mov.w	r1, #4294967295
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	fa01 f303 	lsl.w	r3, r1, r3
 80064fa:	43d9      	mvns	r1, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006500:	4313      	orrs	r3, r2
         );
}
 8006502:	4618      	mov	r0, r3
 8006504:	3724      	adds	r7, #36	; 0x24
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
	...

08006510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3b01      	subs	r3, #1
 800651c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006520:	d301      	bcc.n	8006526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006522:	2301      	movs	r3, #1
 8006524:	e00f      	b.n	8006546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006526:	4a0a      	ldr	r2, [pc, #40]	; (8006550 <SysTick_Config+0x40>)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3b01      	subs	r3, #1
 800652c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800652e:	210f      	movs	r1, #15
 8006530:	f04f 30ff 	mov.w	r0, #4294967295
 8006534:	f7ff ff8e 	bl	8006454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006538:	4b05      	ldr	r3, [pc, #20]	; (8006550 <SysTick_Config+0x40>)
 800653a:	2200      	movs	r2, #0
 800653c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800653e:	4b04      	ldr	r3, [pc, #16]	; (8006550 <SysTick_Config+0x40>)
 8006540:	2207      	movs	r2, #7
 8006542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	e000e010 	.word	0xe000e010

08006554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff ff05 	bl	800636c <__NVIC_SetPriorityGrouping>
}
 8006562:	bf00      	nop
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800656a:	b580      	push	{r7, lr}
 800656c:	b086      	sub	sp, #24
 800656e:	af00      	add	r7, sp, #0
 8006570:	4603      	mov	r3, r0
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	607a      	str	r2, [r7, #4]
 8006576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006578:	2300      	movs	r3, #0
 800657a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800657c:	f7ff ff1a 	bl	80063b4 <__NVIC_GetPriorityGrouping>
 8006580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	68b9      	ldr	r1, [r7, #8]
 8006586:	6978      	ldr	r0, [r7, #20]
 8006588:	f7ff ff8e 	bl	80064a8 <NVIC_EncodePriority>
 800658c:	4602      	mov	r2, r0
 800658e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006592:	4611      	mov	r1, r2
 8006594:	4618      	mov	r0, r3
 8006596:	f7ff ff5d 	bl	8006454 <__NVIC_SetPriority>
}
 800659a:	bf00      	nop
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b082      	sub	sp, #8
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	4603      	mov	r3, r0
 80065aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff ff0d 	bl	80063d0 <__NVIC_EnableIRQ>
}
 80065b6:	bf00      	nop
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	4603      	mov	r3, r0
 80065c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80065c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff ff1d 	bl	800640c <__NVIC_DisableIRQ>
}
 80065d2:	bf00      	nop
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff ff94 	bl	8006510 <SysTick_Config>
 80065e8:	4603      	mov	r3, r0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006600:	f7ff fe84 	bl	800630c <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e099      	b.n	8006744 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0201 	bic.w	r2, r2, #1
 800662e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006630:	e00f      	b.n	8006652 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006632:	f7ff fe6b 	bl	800630c <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b05      	cmp	r3, #5
 800663e:	d908      	bls.n	8006652 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2203      	movs	r2, #3
 800664a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e078      	b.n	8006744 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e8      	bne.n	8006632 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4b38      	ldr	r3, [pc, #224]	; (800674c <HAL_DMA_Init+0x158>)
 800666c:	4013      	ands	r3, r2
 800666e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800667e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800668a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006696:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d107      	bne.n	80066bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b4:	4313      	orrs	r3, r2
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f023 0307 	bic.w	r3, r3, #7
 80066d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d117      	bne.n	8006716 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00e      	beq.n	8006716 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fb09 	bl	8006d10 <DMA_CheckFifoParam>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d008      	beq.n	8006716 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2240      	movs	r2, #64	; 0x40
 8006708:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006712:	2301      	movs	r3, #1
 8006714:	e016      	b.n	8006744 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fac0 	bl	8006ca4 <DMA_CalcBaseAndBitshift>
 8006724:	4603      	mov	r3, r0
 8006726:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672c:	223f      	movs	r2, #63	; 0x3f
 800672e:	409a      	lsls	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	f010803f 	.word	0xf010803f

08006750 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e050      	b.n	8006804 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d101      	bne.n	8006772 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800676e:	2302      	movs	r3, #2
 8006770:	e048      	b.n	8006804 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0201 	bic.w	r2, r2, #1
 8006780:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2200      	movs	r2, #0
 8006790:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2200      	movs	r2, #0
 8006798:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2200      	movs	r2, #0
 80067a0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2200      	movs	r2, #0
 80067a8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2221      	movs	r2, #33	; 0x21
 80067b0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fa76 	bl	8006ca4 <DMA_CalcBaseAndBitshift>
 80067b8:	4603      	mov	r3, r0
 80067ba:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e4:	223f      	movs	r2, #63	; 0x3f
 80067e6:	409a      	lsls	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006822:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_DMA_Start_IT+0x26>
 800682e:	2302      	movs	r3, #2
 8006830:	e040      	b.n	80068b4 <HAL_DMA_Start_IT+0xa8>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b01      	cmp	r3, #1
 8006844:	d12f      	bne.n	80068a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 f9f4 	bl	8006c48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006864:	223f      	movs	r2, #63	; 0x3f
 8006866:	409a      	lsls	r2, r3
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0216 	orr.w	r2, r2, #22
 800687a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	2b00      	cmp	r3, #0
 8006882:	d007      	beq.n	8006894 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0208 	orr.w	r2, r2, #8
 8006892:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	e005      	b.n	80068b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80068ae:	2302      	movs	r3, #2
 80068b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d004      	beq.n	80068da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2280      	movs	r2, #128	; 0x80
 80068d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e00c      	b.n	80068f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2205      	movs	r2, #5
 80068de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0201 	bic.w	r2, r2, #1
 80068f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800690c:	4b8e      	ldr	r3, [pc, #568]	; (8006b48 <HAL_DMA_IRQHandler+0x248>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a8e      	ldr	r2, [pc, #568]	; (8006b4c <HAL_DMA_IRQHandler+0x24c>)
 8006912:	fba2 2303 	umull	r2, r3, r2, r3
 8006916:	0a9b      	lsrs	r3, r3, #10
 8006918:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800692a:	2208      	movs	r2, #8
 800692c:	409a      	lsls	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4013      	ands	r3, r2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d01a      	beq.n	800696c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d013      	beq.n	800696c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0204 	bic.w	r2, r2, #4
 8006952:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006958:	2208      	movs	r2, #8
 800695a:	409a      	lsls	r2, r3
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006964:	f043 0201 	orr.w	r2, r3, #1
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006970:	2201      	movs	r2, #1
 8006972:	409a      	lsls	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4013      	ands	r3, r2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d012      	beq.n	80069a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00b      	beq.n	80069a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800698e:	2201      	movs	r2, #1
 8006990:	409a      	lsls	r2, r3
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699a:	f043 0202 	orr.w	r2, r3, #2
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069a6:	2204      	movs	r2, #4
 80069a8:	409a      	lsls	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4013      	ands	r3, r2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d012      	beq.n	80069d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00b      	beq.n	80069d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c4:	2204      	movs	r2, #4
 80069c6:	409a      	lsls	r2, r3
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d0:	f043 0204 	orr.w	r2, r3, #4
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069dc:	2210      	movs	r2, #16
 80069de:	409a      	lsls	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4013      	ands	r3, r2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d043      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d03c      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069fa:	2210      	movs	r2, #16
 80069fc:	409a      	lsls	r2, r3
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d018      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d108      	bne.n	8006a30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d024      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	4798      	blx	r3
 8006a2e:	e01f      	b.n	8006a70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01b      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
 8006a40:	e016      	b.n	8006a70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d107      	bne.n	8006a60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0208 	bic.w	r2, r2, #8
 8006a5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d003      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a74:	2220      	movs	r2, #32
 8006a76:	409a      	lsls	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 808f 	beq.w	8006ba0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 8087 	beq.w	8006ba0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a96:	2220      	movs	r2, #32
 8006a98:	409a      	lsls	r2, r3
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b05      	cmp	r3, #5
 8006aa8:	d136      	bne.n	8006b18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0216 	bic.w	r2, r2, #22
 8006ab8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	695a      	ldr	r2, [r3, #20]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ac8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d103      	bne.n	8006ada <HAL_DMA_IRQHandler+0x1da>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d007      	beq.n	8006aea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0208 	bic.w	r2, r2, #8
 8006ae8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aee:	223f      	movs	r2, #63	; 0x3f
 8006af0:	409a      	lsls	r2, r3
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d07e      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	4798      	blx	r3
        }
        return;
 8006b16:	e079      	b.n	8006c0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d01d      	beq.n	8006b62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10d      	bne.n	8006b50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d031      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	4798      	blx	r3
 8006b44:	e02c      	b.n	8006ba0 <HAL_DMA_IRQHandler+0x2a0>
 8006b46:	bf00      	nop
 8006b48:	20000040 	.word	0x20000040
 8006b4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d023      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	4798      	blx	r3
 8006b60:	e01e      	b.n	8006ba0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10f      	bne.n	8006b90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0210 	bic.w	r2, r2, #16
 8006b7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d032      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d022      	beq.n	8006bfa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2205      	movs	r2, #5
 8006bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 0201 	bic.w	r2, r2, #1
 8006bca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	60bb      	str	r3, [r7, #8]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d307      	bcc.n	8006be8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1f2      	bne.n	8006bcc <HAL_DMA_IRQHandler+0x2cc>
 8006be6:	e000      	b.n	8006bea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006be8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	4798      	blx	r3
 8006c0a:	e000      	b.n	8006c0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8006c0c:	bf00      	nop
    }
  }
}
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c22:	b2db      	uxtb	r3, r3
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2b40      	cmp	r3, #64	; 0x40
 8006c74:	d108      	bne.n	8006c88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006c86:	e007      	b.n	8006c98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	60da      	str	r2, [r3, #12]
}
 8006c98:	bf00      	nop
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	3b10      	subs	r3, #16
 8006cb4:	4a14      	ldr	r2, [pc, #80]	; (8006d08 <DMA_CalcBaseAndBitshift+0x64>)
 8006cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cba:	091b      	lsrs	r3, r3, #4
 8006cbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006cbe:	4a13      	ldr	r2, [pc, #76]	; (8006d0c <DMA_CalcBaseAndBitshift+0x68>)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d909      	bls.n	8006ce6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006cda:	f023 0303 	bic.w	r3, r3, #3
 8006cde:	1d1a      	adds	r2, r3, #4
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	659a      	str	r2, [r3, #88]	; 0x58
 8006ce4:	e007      	b.n	8006cf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006cee:	f023 0303 	bic.w	r3, r3, #3
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	aaaaaaab 	.word	0xaaaaaaab
 8006d0c:	08026c20 	.word	0x08026c20

08006d10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d11f      	bne.n	8006d6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d856      	bhi.n	8006dde <DMA_CheckFifoParam+0xce>
 8006d30:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <DMA_CheckFifoParam+0x28>)
 8006d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	08006d49 	.word	0x08006d49
 8006d3c:	08006d5b 	.word	0x08006d5b
 8006d40:	08006d49 	.word	0x08006d49
 8006d44:	08006ddf 	.word	0x08006ddf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d046      	beq.n	8006de2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d58:	e043      	b.n	8006de2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d62:	d140      	bne.n	8006de6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d68:	e03d      	b.n	8006de6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d72:	d121      	bne.n	8006db8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d837      	bhi.n	8006dea <DMA_CheckFifoParam+0xda>
 8006d7a:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <DMA_CheckFifoParam+0x70>)
 8006d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d80:	08006d91 	.word	0x08006d91
 8006d84:	08006d97 	.word	0x08006d97
 8006d88:	08006d91 	.word	0x08006d91
 8006d8c:	08006da9 	.word	0x08006da9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	73fb      	strb	r3, [r7, #15]
      break;
 8006d94:	e030      	b.n	8006df8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d025      	beq.n	8006dee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006da6:	e022      	b.n	8006dee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006db0:	d11f      	bne.n	8006df2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006db6:	e01c      	b.n	8006df2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d903      	bls.n	8006dc6 <DMA_CheckFifoParam+0xb6>
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	d003      	beq.n	8006dcc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006dc4:	e018      	b.n	8006df8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8006dca:	e015      	b.n	8006df8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00e      	beq.n	8006df6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	73fb      	strb	r3, [r7, #15]
      break;
 8006ddc:	e00b      	b.n	8006df6 <DMA_CheckFifoParam+0xe6>
      break;
 8006dde:	bf00      	nop
 8006de0:	e00a      	b.n	8006df8 <DMA_CheckFifoParam+0xe8>
      break;
 8006de2:	bf00      	nop
 8006de4:	e008      	b.n	8006df8 <DMA_CheckFifoParam+0xe8>
      break;
 8006de6:	bf00      	nop
 8006de8:	e006      	b.n	8006df8 <DMA_CheckFifoParam+0xe8>
      break;
 8006dea:	bf00      	nop
 8006dec:	e004      	b.n	8006df8 <DMA_CheckFifoParam+0xe8>
      break;
 8006dee:	bf00      	nop
 8006df0:	e002      	b.n	8006df8 <DMA_CheckFifoParam+0xe8>
      break;   
 8006df2:	bf00      	nop
 8006df4:	e000      	b.n	8006df8 <DMA_CheckFifoParam+0xe8>
      break;
 8006df6:	bf00      	nop
    }
  } 
  
  return status; 
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop

08006e08 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006e1a:	4b23      	ldr	r3, [pc, #140]	; (8006ea8 <HAL_FLASH_Program+0xa0>)
 8006e1c:	7e1b      	ldrb	r3, [r3, #24]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <HAL_FLASH_Program+0x1e>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e03b      	b.n	8006e9e <HAL_FLASH_Program+0x96>
 8006e26:	4b20      	ldr	r3, [pc, #128]	; (8006ea8 <HAL_FLASH_Program+0xa0>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006e2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006e30:	f000 f870 	bl	8006f14 <FLASH_WaitForLastOperation>
 8006e34:	4603      	mov	r3, r0
 8006e36:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006e38:	7dfb      	ldrb	r3, [r7, #23]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d12b      	bne.n	8006e96 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d105      	bne.n	8006e50 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006e44:	783b      	ldrb	r3, [r7, #0]
 8006e46:	4619      	mov	r1, r3
 8006e48:	68b8      	ldr	r0, [r7, #8]
 8006e4a:	f000 f91b 	bl	8007084 <FLASH_Program_Byte>
 8006e4e:	e016      	b.n	8006e7e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d105      	bne.n	8006e62 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006e56:	883b      	ldrh	r3, [r7, #0]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	68b8      	ldr	r0, [r7, #8]
 8006e5c:	f000 f8ee 	bl	800703c <FLASH_Program_HalfWord>
 8006e60:	e00d      	b.n	8006e7e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d105      	bne.n	8006e74 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	68b8      	ldr	r0, [r7, #8]
 8006e6e:	f000 f8c3 	bl	8006ff8 <FLASH_Program_Word>
 8006e72:	e004      	b.n	8006e7e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e78:	68b8      	ldr	r0, [r7, #8]
 8006e7a:	f000 f88b 	bl	8006f94 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006e7e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006e82:	f000 f847 	bl	8006f14 <FLASH_WaitForLastOperation>
 8006e86:	4603      	mov	r3, r0
 8006e88:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8006e8a:	4b08      	ldr	r3, [pc, #32]	; (8006eac <HAL_FLASH_Program+0xa4>)
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	4a07      	ldr	r2, [pc, #28]	; (8006eac <HAL_FLASH_Program+0xa4>)
 8006e90:	f023 0301 	bic.w	r3, r3, #1
 8006e94:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006e96:	4b04      	ldr	r3, [pc, #16]	; (8006ea8 <HAL_FLASH_Program+0xa0>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	200073b0 	.word	0x200073b0
 8006eac:	40023c00 	.word	0x40023c00

08006eb0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006eba:	4b0b      	ldr	r3, [pc, #44]	; (8006ee8 <HAL_FLASH_Unlock+0x38>)
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	da0b      	bge.n	8006eda <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006ec2:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <HAL_FLASH_Unlock+0x38>)
 8006ec4:	4a09      	ldr	r2, [pc, #36]	; (8006eec <HAL_FLASH_Unlock+0x3c>)
 8006ec6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006ec8:	4b07      	ldr	r3, [pc, #28]	; (8006ee8 <HAL_FLASH_Unlock+0x38>)
 8006eca:	4a09      	ldr	r2, [pc, #36]	; (8006ef0 <HAL_FLASH_Unlock+0x40>)
 8006ecc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006ece:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <HAL_FLASH_Unlock+0x38>)
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	da01      	bge.n	8006eda <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006eda:	79fb      	ldrb	r3, [r7, #7]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	40023c00 	.word	0x40023c00
 8006eec:	45670123 	.word	0x45670123
 8006ef0:	cdef89ab 	.word	0xcdef89ab

08006ef4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006ef8:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <HAL_FLASH_Lock+0x1c>)
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	4a04      	ldr	r2, [pc, #16]	; (8006f10 <HAL_FLASH_Lock+0x1c>)
 8006efe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f02:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	40023c00 	.word	0x40023c00

08006f14 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006f20:	4b1a      	ldr	r3, [pc, #104]	; (8006f8c <FLASH_WaitForLastOperation+0x78>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006f26:	f7ff f9f1 	bl	800630c <HAL_GetTick>
 8006f2a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006f2c:	e010      	b.n	8006f50 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f34:	d00c      	beq.n	8006f50 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d007      	beq.n	8006f4c <FLASH_WaitForLastOperation+0x38>
 8006f3c:	f7ff f9e6 	bl	800630c <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d201      	bcs.n	8006f50 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e019      	b.n	8006f84 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006f50:	4b0f      	ldr	r3, [pc, #60]	; (8006f90 <FLASH_WaitForLastOperation+0x7c>)
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e8      	bne.n	8006f2e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006f5c:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <FLASH_WaitForLastOperation+0x7c>)
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006f68:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <FLASH_WaitForLastOperation+0x7c>)
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006f6e:	4b08      	ldr	r3, [pc, #32]	; (8006f90 <FLASH_WaitForLastOperation+0x7c>)
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006f7a:	f000 f8a5 	bl	80070c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
  
}  
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	200073b0 	.word	0x200073b0
 8006f90:	40023c00 	.word	0x40023c00

08006f94 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006fa0:	4b14      	ldr	r3, [pc, #80]	; (8006ff4 <FLASH_Program_DoubleWord+0x60>)
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	4a13      	ldr	r2, [pc, #76]	; (8006ff4 <FLASH_Program_DoubleWord+0x60>)
 8006fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006faa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006fac:	4b11      	ldr	r3, [pc, #68]	; (8006ff4 <FLASH_Program_DoubleWord+0x60>)
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	4a10      	ldr	r2, [pc, #64]	; (8006ff4 <FLASH_Program_DoubleWord+0x60>)
 8006fb2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006fb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006fb8:	4b0e      	ldr	r3, [pc, #56]	; (8006ff4 <FLASH_Program_DoubleWord+0x60>)
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	4a0d      	ldr	r2, [pc, #52]	; (8006ff4 <FLASH_Program_DoubleWord+0x60>)
 8006fbe:	f043 0301 	orr.w	r3, r3, #1
 8006fc2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006fca:	f3bf 8f6f 	isb	sy
}
 8006fce:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006fd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	f04f 0300 	mov.w	r3, #0
 8006fdc:	000a      	movs	r2, r1
 8006fde:	2300      	movs	r3, #0
 8006fe0:	68f9      	ldr	r1, [r7, #12]
 8006fe2:	3104      	adds	r1, #4
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	600b      	str	r3, [r1, #0]
}
 8006fe8:	bf00      	nop
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	40023c00 	.word	0x40023c00

08006ff8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007002:	4b0d      	ldr	r3, [pc, #52]	; (8007038 <FLASH_Program_Word+0x40>)
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	4a0c      	ldr	r2, [pc, #48]	; (8007038 <FLASH_Program_Word+0x40>)
 8007008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800700c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800700e:	4b0a      	ldr	r3, [pc, #40]	; (8007038 <FLASH_Program_Word+0x40>)
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	4a09      	ldr	r2, [pc, #36]	; (8007038 <FLASH_Program_Word+0x40>)
 8007014:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007018:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800701a:	4b07      	ldr	r3, [pc, #28]	; (8007038 <FLASH_Program_Word+0x40>)
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	4a06      	ldr	r2, [pc, #24]	; (8007038 <FLASH_Program_Word+0x40>)
 8007020:	f043 0301 	orr.w	r3, r3, #1
 8007024:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	601a      	str	r2, [r3, #0]
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	40023c00 	.word	0x40023c00

0800703c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007048:	4b0d      	ldr	r3, [pc, #52]	; (8007080 <FLASH_Program_HalfWord+0x44>)
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	4a0c      	ldr	r2, [pc, #48]	; (8007080 <FLASH_Program_HalfWord+0x44>)
 800704e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007052:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007054:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <FLASH_Program_HalfWord+0x44>)
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	4a09      	ldr	r2, [pc, #36]	; (8007080 <FLASH_Program_HalfWord+0x44>)
 800705a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800705e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007060:	4b07      	ldr	r3, [pc, #28]	; (8007080 <FLASH_Program_HalfWord+0x44>)
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	4a06      	ldr	r2, [pc, #24]	; (8007080 <FLASH_Program_HalfWord+0x44>)
 8007066:	f043 0301 	orr.w	r3, r3, #1
 800706a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	887a      	ldrh	r2, [r7, #2]
 8007070:	801a      	strh	r2, [r3, #0]
}
 8007072:	bf00      	nop
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40023c00 	.word	0x40023c00

08007084 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007090:	4b0c      	ldr	r3, [pc, #48]	; (80070c4 <FLASH_Program_Byte+0x40>)
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	4a0b      	ldr	r2, [pc, #44]	; (80070c4 <FLASH_Program_Byte+0x40>)
 8007096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800709a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800709c:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <FLASH_Program_Byte+0x40>)
 800709e:	4a09      	ldr	r2, [pc, #36]	; (80070c4 <FLASH_Program_Byte+0x40>)
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80070a4:	4b07      	ldr	r3, [pc, #28]	; (80070c4 <FLASH_Program_Byte+0x40>)
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	4a06      	ldr	r2, [pc, #24]	; (80070c4 <FLASH_Program_Byte+0x40>)
 80070aa:	f043 0301 	orr.w	r3, r3, #1
 80070ae:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	78fa      	ldrb	r2, [r7, #3]
 80070b4:	701a      	strb	r2, [r3, #0]
}
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	40023c00 	.word	0x40023c00

080070c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80070cc:	4b2f      	ldr	r3, [pc, #188]	; (800718c <FLASH_SetErrorCode+0xc4>)
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f003 0310 	and.w	r3, r3, #16
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d008      	beq.n	80070ea <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80070d8:	4b2d      	ldr	r3, [pc, #180]	; (8007190 <FLASH_SetErrorCode+0xc8>)
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	f043 0310 	orr.w	r3, r3, #16
 80070e0:	4a2b      	ldr	r2, [pc, #172]	; (8007190 <FLASH_SetErrorCode+0xc8>)
 80070e2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80070e4:	4b29      	ldr	r3, [pc, #164]	; (800718c <FLASH_SetErrorCode+0xc4>)
 80070e6:	2210      	movs	r2, #16
 80070e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80070ea:	4b28      	ldr	r3, [pc, #160]	; (800718c <FLASH_SetErrorCode+0xc4>)
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d008      	beq.n	8007108 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80070f6:	4b26      	ldr	r3, [pc, #152]	; (8007190 <FLASH_SetErrorCode+0xc8>)
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	f043 0308 	orr.w	r3, r3, #8
 80070fe:	4a24      	ldr	r2, [pc, #144]	; (8007190 <FLASH_SetErrorCode+0xc8>)
 8007100:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007102:	4b22      	ldr	r3, [pc, #136]	; (800718c <FLASH_SetErrorCode+0xc4>)
 8007104:	2220      	movs	r2, #32
 8007106:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007108:	4b20      	ldr	r3, [pc, #128]	; (800718c <FLASH_SetErrorCode+0xc4>)
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007110:	2b00      	cmp	r3, #0
 8007112:	d008      	beq.n	8007126 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007114:	4b1e      	ldr	r3, [pc, #120]	; (8007190 <FLASH_SetErrorCode+0xc8>)
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	f043 0304 	orr.w	r3, r3, #4
 800711c:	4a1c      	ldr	r2, [pc, #112]	; (8007190 <FLASH_SetErrorCode+0xc8>)
 800711e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007120:	4b1a      	ldr	r3, [pc, #104]	; (800718c <FLASH_SetErrorCode+0xc4>)
 8007122:	2240      	movs	r2, #64	; 0x40
 8007124:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007126:	4b19      	ldr	r3, [pc, #100]	; (800718c <FLASH_SetErrorCode+0xc4>)
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712e:	2b00      	cmp	r3, #0
 8007130:	d008      	beq.n	8007144 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007132:	4b17      	ldr	r3, [pc, #92]	; (8007190 <FLASH_SetErrorCode+0xc8>)
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	f043 0302 	orr.w	r3, r3, #2
 800713a:	4a15      	ldr	r2, [pc, #84]	; (8007190 <FLASH_SetErrorCode+0xc8>)
 800713c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800713e:	4b13      	ldr	r3, [pc, #76]	; (800718c <FLASH_SetErrorCode+0xc4>)
 8007140:	2280      	movs	r2, #128	; 0x80
 8007142:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8007144:	4b11      	ldr	r3, [pc, #68]	; (800718c <FLASH_SetErrorCode+0xc4>)
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714c:	2b00      	cmp	r3, #0
 800714e:	d009      	beq.n	8007164 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8007150:	4b0f      	ldr	r3, [pc, #60]	; (8007190 <FLASH_SetErrorCode+0xc8>)
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	f043 0301 	orr.w	r3, r3, #1
 8007158:	4a0d      	ldr	r2, [pc, #52]	; (8007190 <FLASH_SetErrorCode+0xc8>)
 800715a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800715c:	4b0b      	ldr	r3, [pc, #44]	; (800718c <FLASH_SetErrorCode+0xc4>)
 800715e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007162:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007164:	4b09      	ldr	r3, [pc, #36]	; (800718c <FLASH_SetErrorCode+0xc4>)
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d008      	beq.n	8007182 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007170:	4b07      	ldr	r3, [pc, #28]	; (8007190 <FLASH_SetErrorCode+0xc8>)
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	f043 0320 	orr.w	r3, r3, #32
 8007178:	4a05      	ldr	r2, [pc, #20]	; (8007190 <FLASH_SetErrorCode+0xc8>)
 800717a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800717c:	4b03      	ldr	r3, [pc, #12]	; (800718c <FLASH_SetErrorCode+0xc4>)
 800717e:	2202      	movs	r2, #2
 8007180:	60da      	str	r2, [r3, #12]
  }
}
 8007182:	bf00      	nop
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	40023c00 	.word	0x40023c00
 8007190:	200073b0 	.word	0x200073b0

08007194 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80071a6:	4b31      	ldr	r3, [pc, #196]	; (800726c <HAL_FLASHEx_Erase+0xd8>)
 80071a8:	7e1b      	ldrb	r3, [r3, #24]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d101      	bne.n	80071b2 <HAL_FLASHEx_Erase+0x1e>
 80071ae:	2302      	movs	r3, #2
 80071b0:	e058      	b.n	8007264 <HAL_FLASHEx_Erase+0xd0>
 80071b2:	4b2e      	ldr	r3, [pc, #184]	; (800726c <HAL_FLASHEx_Erase+0xd8>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80071b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80071bc:	f7ff feaa 	bl	8006f14 <FLASH_WaitForLastOperation>
 80071c0:	4603      	mov	r3, r0
 80071c2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d148      	bne.n	800725c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	f04f 32ff 	mov.w	r2, #4294967295
 80071d0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d115      	bne.n	8007206 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	4619      	mov	r1, r3
 80071e6:	4610      	mov	r0, r2
 80071e8:	f000 f844 	bl	8007274 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80071ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80071f0:	f7ff fe90 	bl	8006f14 <FLASH_WaitForLastOperation>
 80071f4:	4603      	mov	r3, r0
 80071f6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80071f8:	4b1d      	ldr	r3, [pc, #116]	; (8007270 <HAL_FLASHEx_Erase+0xdc>)
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	4a1c      	ldr	r2, [pc, #112]	; (8007270 <HAL_FLASHEx_Erase+0xdc>)
 80071fe:	f023 0304 	bic.w	r3, r3, #4
 8007202:	6113      	str	r3, [r2, #16]
 8007204:	e028      	b.n	8007258 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	60bb      	str	r3, [r7, #8]
 800720c:	e01c      	b.n	8007248 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	4619      	mov	r1, r3
 8007216:	68b8      	ldr	r0, [r7, #8]
 8007218:	f000 f850 	bl	80072bc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800721c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007220:	f7ff fe78 	bl	8006f14 <FLASH_WaitForLastOperation>
 8007224:	4603      	mov	r3, r0
 8007226:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007228:	4b11      	ldr	r3, [pc, #68]	; (8007270 <HAL_FLASHEx_Erase+0xdc>)
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	4a10      	ldr	r2, [pc, #64]	; (8007270 <HAL_FLASHEx_Erase+0xdc>)
 800722e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007232:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	601a      	str	r2, [r3, #0]
          break;
 8007240:	e00a      	b.n	8007258 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	3301      	adds	r3, #1
 8007246:	60bb      	str	r3, [r7, #8]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68da      	ldr	r2, [r3, #12]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	4413      	add	r3, r2
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	429a      	cmp	r2, r3
 8007256:	d3da      	bcc.n	800720e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007258:	f000 f878 	bl	800734c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800725c:	4b03      	ldr	r3, [pc, #12]	; (800726c <HAL_FLASHEx_Erase+0xd8>)
 800725e:	2200      	movs	r2, #0
 8007260:	761a      	strb	r2, [r3, #24]

  return status;
 8007262:	7bfb      	ldrb	r3, [r7, #15]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	200073b0 	.word	0x200073b0
 8007270:	40023c00 	.word	0x40023c00

08007274 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	6039      	str	r1, [r7, #0]
 800727e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007280:	4b0d      	ldr	r3, [pc, #52]	; (80072b8 <FLASH_MassErase+0x44>)
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	4a0c      	ldr	r2, [pc, #48]	; (80072b8 <FLASH_MassErase+0x44>)
 8007286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800728a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <FLASH_MassErase+0x44>)
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	4a09      	ldr	r2, [pc, #36]	; (80072b8 <FLASH_MassErase+0x44>)
 8007292:	f043 0304 	orr.w	r3, r3, #4
 8007296:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8007298:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <FLASH_MassErase+0x44>)
 800729a:	691a      	ldr	r2, [r3, #16]
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	021b      	lsls	r3, r3, #8
 80072a0:	4313      	orrs	r3, r2
 80072a2:	4a05      	ldr	r2, [pc, #20]	; (80072b8 <FLASH_MassErase+0x44>)
 80072a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072a8:	6113      	str	r3, [r2, #16]
}
 80072aa:	bf00      	nop
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	40023c00 	.word	0x40023c00

080072bc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d102      	bne.n	80072d8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	e010      	b.n	80072fa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80072d8:	78fb      	ldrb	r3, [r7, #3]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d103      	bne.n	80072e6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80072de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	e009      	b.n	80072fa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80072e6:	78fb      	ldrb	r3, [r7, #3]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d103      	bne.n	80072f4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80072ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	e002      	b.n	80072fa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80072f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80072f8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80072fa:	4b13      	ldr	r3, [pc, #76]	; (8007348 <FLASH_Erase_Sector+0x8c>)
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	4a12      	ldr	r2, [pc, #72]	; (8007348 <FLASH_Erase_Sector+0x8c>)
 8007300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007304:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007306:	4b10      	ldr	r3, [pc, #64]	; (8007348 <FLASH_Erase_Sector+0x8c>)
 8007308:	691a      	ldr	r2, [r3, #16]
 800730a:	490f      	ldr	r1, [pc, #60]	; (8007348 <FLASH_Erase_Sector+0x8c>)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4313      	orrs	r3, r2
 8007310:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007312:	4b0d      	ldr	r3, [pc, #52]	; (8007348 <FLASH_Erase_Sector+0x8c>)
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	4a0c      	ldr	r2, [pc, #48]	; (8007348 <FLASH_Erase_Sector+0x8c>)
 8007318:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800731c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800731e:	4b0a      	ldr	r3, [pc, #40]	; (8007348 <FLASH_Erase_Sector+0x8c>)
 8007320:	691a      	ldr	r2, [r3, #16]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	4313      	orrs	r3, r2
 8007328:	4a07      	ldr	r2, [pc, #28]	; (8007348 <FLASH_Erase_Sector+0x8c>)
 800732a:	f043 0302 	orr.w	r3, r3, #2
 800732e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007330:	4b05      	ldr	r3, [pc, #20]	; (8007348 <FLASH_Erase_Sector+0x8c>)
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	4a04      	ldr	r2, [pc, #16]	; (8007348 <FLASH_Erase_Sector+0x8c>)
 8007336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800733a:	6113      	str	r3, [r2, #16]
}
 800733c:	bf00      	nop
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	40023c00 	.word	0x40023c00

0800734c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8007350:	4b20      	ldr	r3, [pc, #128]	; (80073d4 <FLASH_FlushCaches+0x88>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007358:	2b00      	cmp	r3, #0
 800735a:	d017      	beq.n	800738c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800735c:	4b1d      	ldr	r3, [pc, #116]	; (80073d4 <FLASH_FlushCaches+0x88>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a1c      	ldr	r2, [pc, #112]	; (80073d4 <FLASH_FlushCaches+0x88>)
 8007362:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007366:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007368:	4b1a      	ldr	r3, [pc, #104]	; (80073d4 <FLASH_FlushCaches+0x88>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a19      	ldr	r2, [pc, #100]	; (80073d4 <FLASH_FlushCaches+0x88>)
 800736e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	4b17      	ldr	r3, [pc, #92]	; (80073d4 <FLASH_FlushCaches+0x88>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a16      	ldr	r2, [pc, #88]	; (80073d4 <FLASH_FlushCaches+0x88>)
 800737a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800737e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007380:	4b14      	ldr	r3, [pc, #80]	; (80073d4 <FLASH_FlushCaches+0x88>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a13      	ldr	r2, [pc, #76]	; (80073d4 <FLASH_FlushCaches+0x88>)
 8007386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800738a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800738c:	4b11      	ldr	r3, [pc, #68]	; (80073d4 <FLASH_FlushCaches+0x88>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007394:	2b00      	cmp	r3, #0
 8007396:	d017      	beq.n	80073c8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007398:	4b0e      	ldr	r3, [pc, #56]	; (80073d4 <FLASH_FlushCaches+0x88>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a0d      	ldr	r2, [pc, #52]	; (80073d4 <FLASH_FlushCaches+0x88>)
 800739e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073a2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80073a4:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <FLASH_FlushCaches+0x88>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a0a      	ldr	r2, [pc, #40]	; (80073d4 <FLASH_FlushCaches+0x88>)
 80073aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	4b08      	ldr	r3, [pc, #32]	; (80073d4 <FLASH_FlushCaches+0x88>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a07      	ldr	r2, [pc, #28]	; (80073d4 <FLASH_FlushCaches+0x88>)
 80073b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073ba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80073bc:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <FLASH_FlushCaches+0x88>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a04      	ldr	r2, [pc, #16]	; (80073d4 <FLASH_FlushCaches+0x88>)
 80073c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80073c6:	6013      	str	r3, [r2, #0]
  }
}
 80073c8:	bf00      	nop
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	40023c00 	.word	0x40023c00

080073d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073d8:	b480      	push	{r7}
 80073da:	b089      	sub	sp, #36	; 0x24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80073ee:	2300      	movs	r3, #0
 80073f0:	61fb      	str	r3, [r7, #28]
 80073f2:	e159      	b.n	80076a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80073f4:	2201      	movs	r2, #1
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	fa02 f303 	lsl.w	r3, r2, r3
 80073fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	4013      	ands	r3, r2
 8007406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	429a      	cmp	r2, r3
 800740e:	f040 8148 	bne.w	80076a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	2b01      	cmp	r3, #1
 800741c:	d005      	beq.n	800742a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007426:	2b02      	cmp	r3, #2
 8007428:	d130      	bne.n	800748c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	2203      	movs	r2, #3
 8007436:	fa02 f303 	lsl.w	r3, r2, r3
 800743a:	43db      	mvns	r3, r3
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	4013      	ands	r3, r2
 8007440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	fa02 f303 	lsl.w	r3, r2, r3
 800744e:	69ba      	ldr	r2, [r7, #24]
 8007450:	4313      	orrs	r3, r2
 8007452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007460:	2201      	movs	r2, #1
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	fa02 f303 	lsl.w	r3, r2, r3
 8007468:	43db      	mvns	r3, r3
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	4013      	ands	r3, r2
 800746e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	091b      	lsrs	r3, r3, #4
 8007476:	f003 0201 	and.w	r2, r3, #1
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	fa02 f303 	lsl.w	r3, r2, r3
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	4313      	orrs	r3, r2
 8007484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f003 0303 	and.w	r3, r3, #3
 8007494:	2b03      	cmp	r3, #3
 8007496:	d017      	beq.n	80074c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	2203      	movs	r2, #3
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	43db      	mvns	r3, r3
 80074aa:	69ba      	ldr	r2, [r7, #24]
 80074ac:	4013      	ands	r3, r2
 80074ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	005b      	lsls	r3, r3, #1
 80074b8:	fa02 f303 	lsl.w	r3, r2, r3
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	4313      	orrs	r3, r2
 80074c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f003 0303 	and.w	r3, r3, #3
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d123      	bne.n	800751c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	08da      	lsrs	r2, r3, #3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3208      	adds	r2, #8
 80074dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	220f      	movs	r2, #15
 80074ec:	fa02 f303 	lsl.w	r3, r2, r3
 80074f0:	43db      	mvns	r3, r3
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	4013      	ands	r3, r2
 80074f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	691a      	ldr	r2, [r3, #16]
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	f003 0307 	and.w	r3, r3, #7
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	fa02 f303 	lsl.w	r3, r2, r3
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	4313      	orrs	r3, r2
 800750c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	08da      	lsrs	r2, r3, #3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3208      	adds	r2, #8
 8007516:	69b9      	ldr	r1, [r7, #24]
 8007518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	2203      	movs	r2, #3
 8007528:	fa02 f303 	lsl.w	r3, r2, r3
 800752c:	43db      	mvns	r3, r3
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	4013      	ands	r3, r2
 8007532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f003 0203 	and.w	r2, r3, #3
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	fa02 f303 	lsl.w	r3, r2, r3
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	4313      	orrs	r3, r2
 8007548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 80a2 	beq.w	80076a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	4b57      	ldr	r3, [pc, #348]	; (80076c0 <HAL_GPIO_Init+0x2e8>)
 8007564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007566:	4a56      	ldr	r2, [pc, #344]	; (80076c0 <HAL_GPIO_Init+0x2e8>)
 8007568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800756c:	6453      	str	r3, [r2, #68]	; 0x44
 800756e:	4b54      	ldr	r3, [pc, #336]	; (80076c0 <HAL_GPIO_Init+0x2e8>)
 8007570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800757a:	4a52      	ldr	r2, [pc, #328]	; (80076c4 <HAL_GPIO_Init+0x2ec>)
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	089b      	lsrs	r3, r3, #2
 8007580:	3302      	adds	r3, #2
 8007582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	220f      	movs	r2, #15
 8007592:	fa02 f303 	lsl.w	r3, r2, r3
 8007596:	43db      	mvns	r3, r3
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	4013      	ands	r3, r2
 800759c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a49      	ldr	r2, [pc, #292]	; (80076c8 <HAL_GPIO_Init+0x2f0>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d019      	beq.n	80075da <HAL_GPIO_Init+0x202>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a48      	ldr	r2, [pc, #288]	; (80076cc <HAL_GPIO_Init+0x2f4>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d013      	beq.n	80075d6 <HAL_GPIO_Init+0x1fe>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a47      	ldr	r2, [pc, #284]	; (80076d0 <HAL_GPIO_Init+0x2f8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00d      	beq.n	80075d2 <HAL_GPIO_Init+0x1fa>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a46      	ldr	r2, [pc, #280]	; (80076d4 <HAL_GPIO_Init+0x2fc>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d007      	beq.n	80075ce <HAL_GPIO_Init+0x1f6>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a45      	ldr	r2, [pc, #276]	; (80076d8 <HAL_GPIO_Init+0x300>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d101      	bne.n	80075ca <HAL_GPIO_Init+0x1f2>
 80075c6:	2304      	movs	r3, #4
 80075c8:	e008      	b.n	80075dc <HAL_GPIO_Init+0x204>
 80075ca:	2307      	movs	r3, #7
 80075cc:	e006      	b.n	80075dc <HAL_GPIO_Init+0x204>
 80075ce:	2303      	movs	r3, #3
 80075d0:	e004      	b.n	80075dc <HAL_GPIO_Init+0x204>
 80075d2:	2302      	movs	r3, #2
 80075d4:	e002      	b.n	80075dc <HAL_GPIO_Init+0x204>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e000      	b.n	80075dc <HAL_GPIO_Init+0x204>
 80075da:	2300      	movs	r3, #0
 80075dc:	69fa      	ldr	r2, [r7, #28]
 80075de:	f002 0203 	and.w	r2, r2, #3
 80075e2:	0092      	lsls	r2, r2, #2
 80075e4:	4093      	lsls	r3, r2
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075ec:	4935      	ldr	r1, [pc, #212]	; (80076c4 <HAL_GPIO_Init+0x2ec>)
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	089b      	lsrs	r3, r3, #2
 80075f2:	3302      	adds	r3, #2
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80075fa:	4b38      	ldr	r3, [pc, #224]	; (80076dc <HAL_GPIO_Init+0x304>)
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	43db      	mvns	r3, r3
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	4013      	ands	r3, r2
 8007608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	4313      	orrs	r3, r2
 800761c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800761e:	4a2f      	ldr	r2, [pc, #188]	; (80076dc <HAL_GPIO_Init+0x304>)
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007624:	4b2d      	ldr	r3, [pc, #180]	; (80076dc <HAL_GPIO_Init+0x304>)
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	43db      	mvns	r3, r3
 800762e:	69ba      	ldr	r2, [r7, #24]
 8007630:	4013      	ands	r3, r2
 8007632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d003      	beq.n	8007648 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	4313      	orrs	r3, r2
 8007646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007648:	4a24      	ldr	r2, [pc, #144]	; (80076dc <HAL_GPIO_Init+0x304>)
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800764e:	4b23      	ldr	r3, [pc, #140]	; (80076dc <HAL_GPIO_Init+0x304>)
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	43db      	mvns	r3, r3
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	4013      	ands	r3, r2
 800765c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	4313      	orrs	r3, r2
 8007670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007672:	4a1a      	ldr	r2, [pc, #104]	; (80076dc <HAL_GPIO_Init+0x304>)
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007678:	4b18      	ldr	r3, [pc, #96]	; (80076dc <HAL_GPIO_Init+0x304>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	43db      	mvns	r3, r3
 8007682:	69ba      	ldr	r2, [r7, #24]
 8007684:	4013      	ands	r3, r2
 8007686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	4313      	orrs	r3, r2
 800769a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800769c:	4a0f      	ldr	r2, [pc, #60]	; (80076dc <HAL_GPIO_Init+0x304>)
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	3301      	adds	r3, #1
 80076a6:	61fb      	str	r3, [r7, #28]
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	2b0f      	cmp	r3, #15
 80076ac:	f67f aea2 	bls.w	80073f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	3724      	adds	r7, #36	; 0x24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40023800 	.word	0x40023800
 80076c4:	40013800 	.word	0x40013800
 80076c8:	40020000 	.word	0x40020000
 80076cc:	40020400 	.word	0x40020400
 80076d0:	40020800 	.word	0x40020800
 80076d4:	40020c00 	.word	0x40020c00
 80076d8:	40021000 	.word	0x40021000
 80076dc:	40013c00 	.word	0x40013c00

080076e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80076f6:	2300      	movs	r3, #0
 80076f8:	617b      	str	r3, [r7, #20]
 80076fa:	e0bb      	b.n	8007874 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80076fc:	2201      	movs	r2, #1
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	fa02 f303 	lsl.w	r3, r2, r3
 8007704:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	4013      	ands	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	429a      	cmp	r2, r3
 8007714:	f040 80ab 	bne.w	800786e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007718:	4a5c      	ldr	r2, [pc, #368]	; (800788c <HAL_GPIO_DeInit+0x1ac>)
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	089b      	lsrs	r3, r3, #2
 800771e:	3302      	adds	r3, #2
 8007720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007724:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f003 0303 	and.w	r3, r3, #3
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	220f      	movs	r2, #15
 8007730:	fa02 f303 	lsl.w	r3, r2, r3
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	4013      	ands	r3, r2
 8007738:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a54      	ldr	r2, [pc, #336]	; (8007890 <HAL_GPIO_DeInit+0x1b0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d019      	beq.n	8007776 <HAL_GPIO_DeInit+0x96>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a53      	ldr	r2, [pc, #332]	; (8007894 <HAL_GPIO_DeInit+0x1b4>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d013      	beq.n	8007772 <HAL_GPIO_DeInit+0x92>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a52      	ldr	r2, [pc, #328]	; (8007898 <HAL_GPIO_DeInit+0x1b8>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d00d      	beq.n	800776e <HAL_GPIO_DeInit+0x8e>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a51      	ldr	r2, [pc, #324]	; (800789c <HAL_GPIO_DeInit+0x1bc>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d007      	beq.n	800776a <HAL_GPIO_DeInit+0x8a>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a50      	ldr	r2, [pc, #320]	; (80078a0 <HAL_GPIO_DeInit+0x1c0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d101      	bne.n	8007766 <HAL_GPIO_DeInit+0x86>
 8007762:	2304      	movs	r3, #4
 8007764:	e008      	b.n	8007778 <HAL_GPIO_DeInit+0x98>
 8007766:	2307      	movs	r3, #7
 8007768:	e006      	b.n	8007778 <HAL_GPIO_DeInit+0x98>
 800776a:	2303      	movs	r3, #3
 800776c:	e004      	b.n	8007778 <HAL_GPIO_DeInit+0x98>
 800776e:	2302      	movs	r3, #2
 8007770:	e002      	b.n	8007778 <HAL_GPIO_DeInit+0x98>
 8007772:	2301      	movs	r3, #1
 8007774:	e000      	b.n	8007778 <HAL_GPIO_DeInit+0x98>
 8007776:	2300      	movs	r3, #0
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	f002 0203 	and.w	r2, r2, #3
 800777e:	0092      	lsls	r2, r2, #2
 8007780:	4093      	lsls	r3, r2
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	429a      	cmp	r2, r3
 8007786:	d132      	bne.n	80077ee <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007788:	4b46      	ldr	r3, [pc, #280]	; (80078a4 <HAL_GPIO_DeInit+0x1c4>)
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	43db      	mvns	r3, r3
 8007790:	4944      	ldr	r1, [pc, #272]	; (80078a4 <HAL_GPIO_DeInit+0x1c4>)
 8007792:	4013      	ands	r3, r2
 8007794:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007796:	4b43      	ldr	r3, [pc, #268]	; (80078a4 <HAL_GPIO_DeInit+0x1c4>)
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	43db      	mvns	r3, r3
 800779e:	4941      	ldr	r1, [pc, #260]	; (80078a4 <HAL_GPIO_DeInit+0x1c4>)
 80077a0:	4013      	ands	r3, r2
 80077a2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80077a4:	4b3f      	ldr	r3, [pc, #252]	; (80078a4 <HAL_GPIO_DeInit+0x1c4>)
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	43db      	mvns	r3, r3
 80077ac:	493d      	ldr	r1, [pc, #244]	; (80078a4 <HAL_GPIO_DeInit+0x1c4>)
 80077ae:	4013      	ands	r3, r2
 80077b0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80077b2:	4b3c      	ldr	r3, [pc, #240]	; (80078a4 <HAL_GPIO_DeInit+0x1c4>)
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	43db      	mvns	r3, r3
 80077ba:	493a      	ldr	r1, [pc, #232]	; (80078a4 <HAL_GPIO_DeInit+0x1c4>)
 80077bc:	4013      	ands	r3, r2
 80077be:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f003 0303 	and.w	r3, r3, #3
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	220f      	movs	r2, #15
 80077ca:	fa02 f303 	lsl.w	r3, r2, r3
 80077ce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80077d0:	4a2e      	ldr	r2, [pc, #184]	; (800788c <HAL_GPIO_DeInit+0x1ac>)
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	089b      	lsrs	r3, r3, #2
 80077d6:	3302      	adds	r3, #2
 80077d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	43da      	mvns	r2, r3
 80077e0:	482a      	ldr	r0, [pc, #168]	; (800788c <HAL_GPIO_DeInit+0x1ac>)
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	089b      	lsrs	r3, r3, #2
 80077e6:	400a      	ands	r2, r1
 80077e8:	3302      	adds	r3, #2
 80077ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	2103      	movs	r1, #3
 80077f8:	fa01 f303 	lsl.w	r3, r1, r3
 80077fc:	43db      	mvns	r3, r3
 80077fe:	401a      	ands	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	08da      	lsrs	r2, r3, #3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3208      	adds	r2, #8
 800780c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	220f      	movs	r2, #15
 800781a:	fa02 f303 	lsl.w	r3, r2, r3
 800781e:	43db      	mvns	r3, r3
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	08d2      	lsrs	r2, r2, #3
 8007824:	4019      	ands	r1, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3208      	adds	r2, #8
 800782a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	2103      	movs	r1, #3
 8007838:	fa01 f303 	lsl.w	r3, r1, r3
 800783c:	43db      	mvns	r3, r3
 800783e:	401a      	ands	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	2101      	movs	r1, #1
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	fa01 f303 	lsl.w	r3, r1, r3
 8007850:	43db      	mvns	r3, r3
 8007852:	401a      	ands	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	005b      	lsls	r3, r3, #1
 8007860:	2103      	movs	r1, #3
 8007862:	fa01 f303 	lsl.w	r3, r1, r3
 8007866:	43db      	mvns	r3, r3
 8007868:	401a      	ands	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	3301      	adds	r3, #1
 8007872:	617b      	str	r3, [r7, #20]
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	2b0f      	cmp	r3, #15
 8007878:	f67f af40 	bls.w	80076fc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800787c:	bf00      	nop
 800787e:	bf00      	nop
 8007880:	371c      	adds	r7, #28
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	40013800 	.word	0x40013800
 8007890:	40020000 	.word	0x40020000
 8007894:	40020400 	.word	0x40020400
 8007898:	40020800 	.word	0x40020800
 800789c:	40020c00 	.word	0x40020c00
 80078a0:	40021000 	.word	0x40021000
 80078a4:	40013c00 	.word	0x40013c00

080078a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	691a      	ldr	r2, [r3, #16]
 80078b8:	887b      	ldrh	r3, [r7, #2]
 80078ba:	4013      	ands	r3, r2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80078c0:	2301      	movs	r3, #1
 80078c2:	73fb      	strb	r3, [r7, #15]
 80078c4:	e001      	b.n	80078ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80078c6:	2300      	movs	r3, #0
 80078c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	807b      	strh	r3, [r7, #2]
 80078e4:	4613      	mov	r3, r2
 80078e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80078e8:	787b      	ldrb	r3, [r7, #1]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80078ee:	887a      	ldrh	r2, [r7, #2]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80078f4:	e003      	b.n	80078fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80078f6:	887b      	ldrh	r3, [r7, #2]
 80078f8:	041a      	lsls	r2, r3, #16
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	619a      	str	r2, [r3, #24]
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800790a:	b480      	push	{r7}
 800790c:	b085      	sub	sp, #20
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	460b      	mov	r3, r1
 8007914:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800791c:	887a      	ldrh	r2, [r7, #2]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4013      	ands	r3, r2
 8007922:	041a      	lsls	r2, r3, #16
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	43d9      	mvns	r1, r3
 8007928:	887b      	ldrh	r3, [r7, #2]
 800792a:	400b      	ands	r3, r1
 800792c:	431a      	orrs	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	619a      	str	r2, [r3, #24]
}
 8007932:	bf00      	nop
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
	...

08007940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d101      	bne.n	8007952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e12b      	b.n	8007baa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d106      	bne.n	800796c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7fc fc3c 	bl	80041e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2224      	movs	r2, #36	; 0x24
 8007970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 0201 	bic.w	r2, r2, #1
 8007982:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007992:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80079a4:	f004 fd26 	bl	800c3f4 <HAL_RCC_GetPCLK1Freq>
 80079a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	4a81      	ldr	r2, [pc, #516]	; (8007bb4 <HAL_I2C_Init+0x274>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d807      	bhi.n	80079c4 <HAL_I2C_Init+0x84>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4a80      	ldr	r2, [pc, #512]	; (8007bb8 <HAL_I2C_Init+0x278>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	bf94      	ite	ls
 80079bc:	2301      	movls	r3, #1
 80079be:	2300      	movhi	r3, #0
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	e006      	b.n	80079d2 <HAL_I2C_Init+0x92>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4a7d      	ldr	r2, [pc, #500]	; (8007bbc <HAL_I2C_Init+0x27c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	bf94      	ite	ls
 80079cc:	2301      	movls	r3, #1
 80079ce:	2300      	movhi	r3, #0
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e0e7      	b.n	8007baa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4a78      	ldr	r2, [pc, #480]	; (8007bc0 <HAL_I2C_Init+0x280>)
 80079de:	fba2 2303 	umull	r2, r3, r2, r3
 80079e2:	0c9b      	lsrs	r3, r3, #18
 80079e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	4a6a      	ldr	r2, [pc, #424]	; (8007bb4 <HAL_I2C_Init+0x274>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d802      	bhi.n	8007a14 <HAL_I2C_Init+0xd4>
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	3301      	adds	r3, #1
 8007a12:	e009      	b.n	8007a28 <HAL_I2C_Init+0xe8>
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007a1a:	fb02 f303 	mul.w	r3, r2, r3
 8007a1e:	4a69      	ldr	r2, [pc, #420]	; (8007bc4 <HAL_I2C_Init+0x284>)
 8007a20:	fba2 2303 	umull	r2, r3, r2, r3
 8007a24:	099b      	lsrs	r3, r3, #6
 8007a26:	3301      	adds	r3, #1
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6812      	ldr	r2, [r2, #0]
 8007a2c:	430b      	orrs	r3, r1
 8007a2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007a3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	495c      	ldr	r1, [pc, #368]	; (8007bb4 <HAL_I2C_Init+0x274>)
 8007a44:	428b      	cmp	r3, r1
 8007a46:	d819      	bhi.n	8007a7c <HAL_I2C_Init+0x13c>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	1e59      	subs	r1, r3, #1
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a56:	1c59      	adds	r1, r3, #1
 8007a58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007a5c:	400b      	ands	r3, r1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00a      	beq.n	8007a78 <HAL_I2C_Init+0x138>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	1e59      	subs	r1, r3, #1
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a70:	3301      	adds	r3, #1
 8007a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a76:	e051      	b.n	8007b1c <HAL_I2C_Init+0x1dc>
 8007a78:	2304      	movs	r3, #4
 8007a7a:	e04f      	b.n	8007b1c <HAL_I2C_Init+0x1dc>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d111      	bne.n	8007aa8 <HAL_I2C_Init+0x168>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	1e58      	subs	r0, r3, #1
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6859      	ldr	r1, [r3, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	440b      	add	r3, r1
 8007a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a96:	3301      	adds	r3, #1
 8007a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	bf0c      	ite	eq
 8007aa0:	2301      	moveq	r3, #1
 8007aa2:	2300      	movne	r3, #0
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	e012      	b.n	8007ace <HAL_I2C_Init+0x18e>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	1e58      	subs	r0, r3, #1
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6859      	ldr	r1, [r3, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	440b      	add	r3, r1
 8007ab6:	0099      	lsls	r1, r3, #2
 8007ab8:	440b      	add	r3, r1
 8007aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8007abe:	3301      	adds	r3, #1
 8007ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	bf0c      	ite	eq
 8007ac8:	2301      	moveq	r3, #1
 8007aca:	2300      	movne	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <HAL_I2C_Init+0x196>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e022      	b.n	8007b1c <HAL_I2C_Init+0x1dc>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10e      	bne.n	8007afc <HAL_I2C_Init+0x1bc>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	1e58      	subs	r0, r3, #1
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6859      	ldr	r1, [r3, #4]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	440b      	add	r3, r1
 8007aec:	fbb0 f3f3 	udiv	r3, r0, r3
 8007af0:	3301      	adds	r3, #1
 8007af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007afa:	e00f      	b.n	8007b1c <HAL_I2C_Init+0x1dc>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	1e58      	subs	r0, r3, #1
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6859      	ldr	r1, [r3, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	440b      	add	r3, r1
 8007b0a:	0099      	lsls	r1, r3, #2
 8007b0c:	440b      	add	r3, r1
 8007b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b12:	3301      	adds	r3, #1
 8007b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b1c:	6879      	ldr	r1, [r7, #4]
 8007b1e:	6809      	ldr	r1, [r1, #0]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	69da      	ldr	r2, [r3, #28]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	431a      	orrs	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007b4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	6911      	ldr	r1, [r2, #16]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	68d2      	ldr	r2, [r2, #12]
 8007b56:	4311      	orrs	r1, r2
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	6812      	ldr	r2, [r2, #0]
 8007b5c:	430b      	orrs	r3, r1
 8007b5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	695a      	ldr	r2, [r3, #20]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	431a      	orrs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	430a      	orrs	r2, r1
 8007b7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0201 	orr.w	r2, r2, #1
 8007b8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	000186a0 	.word	0x000186a0
 8007bb8:	001e847f 	.word	0x001e847f
 8007bbc:	003d08ff 	.word	0x003d08ff
 8007bc0:	431bde83 	.word	0x431bde83
 8007bc4:	10624dd3 	.word	0x10624dd3

08007bc8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d101      	bne.n	8007bda <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e021      	b.n	8007c1e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2224      	movs	r2, #36	; 0x24
 8007bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f022 0201 	bic.w	r2, r2, #1
 8007bf0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7fc fb5e 	bl	80042b4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c38:	2b80      	cmp	r3, #128	; 0x80
 8007c3a:	d103      	bne.n	8007c44 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2200      	movs	r2, #0
 8007c42:	611a      	str	r2, [r3, #16]
  }
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af02      	add	r7, sp, #8
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	4608      	mov	r0, r1
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	4603      	mov	r3, r0
 8007c60:	817b      	strh	r3, [r7, #10]
 8007c62:	460b      	mov	r3, r1
 8007c64:	813b      	strh	r3, [r7, #8]
 8007c66:	4613      	mov	r3, r2
 8007c68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007c6a:	f7fe fb4f 	bl	800630c <HAL_GetTick>
 8007c6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b20      	cmp	r3, #32
 8007c7a:	f040 80d9 	bne.w	8007e30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	2319      	movs	r3, #25
 8007c84:	2201      	movs	r2, #1
 8007c86:	496d      	ldr	r1, [pc, #436]	; (8007e3c <HAL_I2C_Mem_Write+0x1ec>)
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f002 fa35 	bl	800a0f8 <I2C_WaitOnFlagUntilTimeout>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007c94:	2302      	movs	r3, #2
 8007c96:	e0cc      	b.n	8007e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d101      	bne.n	8007ca6 <HAL_I2C_Mem_Write+0x56>
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	e0c5      	b.n	8007e32 <HAL_I2C_Mem_Write+0x1e2>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d007      	beq.n	8007ccc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0201 	orr.w	r2, r2, #1
 8007cca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2221      	movs	r2, #33	; 0x21
 8007ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2240      	movs	r2, #64	; 0x40
 8007ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6a3a      	ldr	r2, [r7, #32]
 8007cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4a4d      	ldr	r2, [pc, #308]	; (8007e40 <HAL_I2C_Mem_Write+0x1f0>)
 8007d0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d0e:	88f8      	ldrh	r0, [r7, #6]
 8007d10:	893a      	ldrh	r2, [r7, #8]
 8007d12:	8979      	ldrh	r1, [r7, #10]
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	9301      	str	r3, [sp, #4]
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f001 ffc4 	bl	8009cac <I2C_RequestMemoryWrite>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d052      	beq.n	8007dd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e081      	b.n	8007e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f002 fafa 	bl	800a32c <I2C_WaitOnTXEFlagUntilTimeout>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00d      	beq.n	8007d5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	d107      	bne.n	8007d56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e06b      	b.n	8007e32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5e:	781a      	ldrb	r2, [r3, #0]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d74:	3b01      	subs	r3, #1
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d11b      	bne.n	8007dd0 <HAL_I2C_Mem_Write+0x180>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d017      	beq.n	8007dd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	781a      	ldrb	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1aa      	bne.n	8007d2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f002 faed 	bl	800a3bc <I2C_WaitOnBTFFlagUntilTimeout>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00d      	beq.n	8007e04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dec:	2b04      	cmp	r3, #4
 8007dee:	d107      	bne.n	8007e00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e016      	b.n	8007e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2220      	movs	r2, #32
 8007e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	e000      	b.n	8007e32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007e30:	2302      	movs	r3, #2
  }
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3718      	adds	r7, #24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	00100002 	.word	0x00100002
 8007e40:	ffff0000 	.word	0xffff0000

08007e44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b08c      	sub	sp, #48	; 0x30
 8007e48:	af02      	add	r7, sp, #8
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	4611      	mov	r1, r2
 8007e50:	461a      	mov	r2, r3
 8007e52:	4603      	mov	r3, r0
 8007e54:	817b      	strh	r3, [r7, #10]
 8007e56:	460b      	mov	r3, r1
 8007e58:	813b      	strh	r3, [r7, #8]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007e5e:	f7fe fa55 	bl	800630c <HAL_GetTick>
 8007e62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b20      	cmp	r3, #32
 8007e6e:	f040 8214 	bne.w	800829a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	2319      	movs	r3, #25
 8007e78:	2201      	movs	r2, #1
 8007e7a:	497b      	ldr	r1, [pc, #492]	; (8008068 <HAL_I2C_Mem_Read+0x224>)
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f002 f93b 	bl	800a0f8 <I2C_WaitOnFlagUntilTimeout>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e207      	b.n	800829c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d101      	bne.n	8007e9a <HAL_I2C_Mem_Read+0x56>
 8007e96:	2302      	movs	r3, #2
 8007e98:	e200      	b.n	800829c <HAL_I2C_Mem_Read+0x458>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d007      	beq.n	8007ec0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f042 0201 	orr.w	r2, r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ece:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2222      	movs	r2, #34	; 0x22
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2240      	movs	r2, #64	; 0x40
 8007edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4a5b      	ldr	r2, [pc, #364]	; (800806c <HAL_I2C_Mem_Read+0x228>)
 8007f00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f02:	88f8      	ldrh	r0, [r7, #6]
 8007f04:	893a      	ldrh	r2, [r7, #8]
 8007f06:	8979      	ldrh	r1, [r7, #10]
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	9301      	str	r3, [sp, #4]
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	4603      	mov	r3, r0
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f001 ff60 	bl	8009dd8 <I2C_RequestMemoryRead>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e1bc      	b.n	800829c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d113      	bne.n	8007f52 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	623b      	str	r3, [r7, #32]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	623b      	str	r3, [r7, #32]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	623b      	str	r3, [r7, #32]
 8007f3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	e190      	b.n	8008274 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d11b      	bne.n	8007f92 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	61fb      	str	r3, [r7, #28]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	61fb      	str	r3, [r7, #28]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	61fb      	str	r3, [r7, #28]
 8007f7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	e170      	b.n	8008274 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d11b      	bne.n	8007fd2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fa8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61bb      	str	r3, [r7, #24]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	695b      	ldr	r3, [r3, #20]
 8007fc4:	61bb      	str	r3, [r7, #24]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	61bb      	str	r3, [r7, #24]
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	e150      	b.n	8008274 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	617b      	str	r3, [r7, #20]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	617b      	str	r3, [r7, #20]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	617b      	str	r3, [r7, #20]
 8007fe6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007fe8:	e144      	b.n	8008274 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	f200 80f1 	bhi.w	80081d6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d123      	bne.n	8008044 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ffe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f002 fa55 	bl	800a4b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e145      	b.n	800829c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	691a      	ldr	r2, [r3, #16]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801a:	b2d2      	uxtb	r2, r2
 800801c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800802c:	3b01      	subs	r3, #1
 800802e:	b29a      	uxth	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008038:	b29b      	uxth	r3, r3
 800803a:	3b01      	subs	r3, #1
 800803c:	b29a      	uxth	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008042:	e117      	b.n	8008274 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008048:	2b02      	cmp	r3, #2
 800804a:	d14e      	bne.n	80080ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	2200      	movs	r2, #0
 8008054:	4906      	ldr	r1, [pc, #24]	; (8008070 <HAL_I2C_Mem_Read+0x22c>)
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f002 f84e 	bl	800a0f8 <I2C_WaitOnFlagUntilTimeout>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d008      	beq.n	8008074 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e11a      	b.n	800829c <HAL_I2C_Mem_Read+0x458>
 8008066:	bf00      	nop
 8008068:	00100002 	.word	0x00100002
 800806c:	ffff0000 	.word	0xffff0000
 8008070:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008082:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	691a      	ldr	r2, [r3, #16]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	b2d2      	uxtb	r2, r2
 8008090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	1c5a      	adds	r2, r3, #1
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080a0:	3b01      	subs	r3, #1
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	3b01      	subs	r3, #1
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	691a      	ldr	r2, [r3, #16]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	b2d2      	uxtb	r2, r2
 80080c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	1c5a      	adds	r2, r3, #1
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080de:	b29b      	uxth	r3, r3
 80080e0:	3b01      	subs	r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080e8:	e0c4      	b.n	8008274 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80080ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f0:	2200      	movs	r2, #0
 80080f2:	496c      	ldr	r1, [pc, #432]	; (80082a4 <HAL_I2C_Mem_Read+0x460>)
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f001 ffff 	bl	800a0f8 <I2C_WaitOnFlagUntilTimeout>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e0cb      	b.n	800829c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008112:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	691a      	ldr	r2, [r3, #16]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	b2d2      	uxtb	r2, r2
 8008120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008130:	3b01      	subs	r3, #1
 8008132:	b29a      	uxth	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800813c:	b29b      	uxth	r3, r3
 800813e:	3b01      	subs	r3, #1
 8008140:	b29a      	uxth	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814c:	2200      	movs	r2, #0
 800814e:	4955      	ldr	r1, [pc, #340]	; (80082a4 <HAL_I2C_Mem_Read+0x460>)
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f001 ffd1 	bl	800a0f8 <I2C_WaitOnFlagUntilTimeout>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d001      	beq.n	8008160 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e09d      	b.n	800829c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800816e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	691a      	ldr	r2, [r3, #16]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817a:	b2d2      	uxtb	r2, r2
 800817c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800818c:	3b01      	subs	r3, #1
 800818e:	b29a      	uxth	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008198:	b29b      	uxth	r3, r3
 800819a:	3b01      	subs	r3, #1
 800819c:	b29a      	uxth	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	691a      	ldr	r2, [r3, #16]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	b2d2      	uxtb	r2, r2
 80081ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081be:	3b01      	subs	r3, #1
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80081d4:	e04e      	b.n	8008274 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f002 f968 	bl	800a4b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e058      	b.n	800829c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	691a      	ldr	r2, [r3, #16]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	b2d2      	uxtb	r2, r2
 80081f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008206:	3b01      	subs	r3, #1
 8008208:	b29a      	uxth	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008212:	b29b      	uxth	r3, r3
 8008214:	3b01      	subs	r3, #1
 8008216:	b29a      	uxth	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	f003 0304 	and.w	r3, r3, #4
 8008226:	2b04      	cmp	r3, #4
 8008228:	d124      	bne.n	8008274 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822e:	2b03      	cmp	r3, #3
 8008230:	d107      	bne.n	8008242 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008240:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	691a      	ldr	r2, [r3, #16]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824c:	b2d2      	uxtb	r2, r2
 800824e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008254:	1c5a      	adds	r2, r3, #1
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800825e:	3b01      	subs	r3, #1
 8008260:	b29a      	uxth	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800826a:	b29b      	uxth	r3, r3
 800826c:	3b01      	subs	r3, #1
 800826e:	b29a      	uxth	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008278:	2b00      	cmp	r3, #0
 800827a:	f47f aeb6 	bne.w	8007fea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2220      	movs	r2, #32
 8008282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	e000      	b.n	800829c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800829a:	2302      	movs	r3, #2
  }
}
 800829c:	4618      	mov	r0, r3
 800829e:	3728      	adds	r7, #40	; 0x28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	00010004 	.word	0x00010004

080082a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	; 0x28
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	607a      	str	r2, [r7, #4]
 80082b2:	603b      	str	r3, [r7, #0]
 80082b4:	460b      	mov	r3, r1
 80082b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80082b8:	f7fe f828 	bl	800630c <HAL_GetTick>
 80082bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b20      	cmp	r3, #32
 80082cc:	f040 8111 	bne.w	80084f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	2319      	movs	r3, #25
 80082d6:	2201      	movs	r2, #1
 80082d8:	4988      	ldr	r1, [pc, #544]	; (80084fc <HAL_I2C_IsDeviceReady+0x254>)
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f001 ff0c 	bl	800a0f8 <I2C_WaitOnFlagUntilTimeout>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80082e6:	2302      	movs	r3, #2
 80082e8:	e104      	b.n	80084f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d101      	bne.n	80082f8 <HAL_I2C_IsDeviceReady+0x50>
 80082f4:	2302      	movs	r3, #2
 80082f6:	e0fd      	b.n	80084f4 <HAL_I2C_IsDeviceReady+0x24c>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b01      	cmp	r3, #1
 800830c:	d007      	beq.n	800831e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f042 0201 	orr.w	r2, r2, #1
 800831c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800832c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2224      	movs	r2, #36	; 0x24
 8008332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4a70      	ldr	r2, [pc, #448]	; (8008500 <HAL_I2C_IsDeviceReady+0x258>)
 8008340:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008350:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2200      	movs	r2, #0
 800835a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f001 feca 	bl	800a0f8 <I2C_WaitOnFlagUntilTimeout>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00d      	beq.n	8008386 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008378:	d103      	bne.n	8008382 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008380:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e0b6      	b.n	80084f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008386:	897b      	ldrh	r3, [r7, #10]
 8008388:	b2db      	uxtb	r3, r3
 800838a:	461a      	mov	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008394:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008396:	f7fd ffb9 	bl	800630c <HAL_GetTick>
 800839a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	bf0c      	ite	eq
 80083aa:	2301      	moveq	r3, #1
 80083ac:	2300      	movne	r3, #0
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	695b      	ldr	r3, [r3, #20]
 80083b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083c0:	bf0c      	ite	eq
 80083c2:	2301      	moveq	r3, #1
 80083c4:	2300      	movne	r3, #0
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80083ca:	e025      	b.n	8008418 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80083cc:	f7fd ff9e 	bl	800630c <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d302      	bcc.n	80083e2 <HAL_I2C_IsDeviceReady+0x13a>
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d103      	bne.n	80083ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	22a0      	movs	r2, #160	; 0xa0
 80083e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	f003 0302 	and.w	r3, r3, #2
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	bf0c      	ite	eq
 80083f8:	2301      	moveq	r3, #1
 80083fa:	2300      	movne	r3, #0
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800840a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800840e:	bf0c      	ite	eq
 8008410:	2301      	moveq	r3, #1
 8008412:	2300      	movne	r3, #0
 8008414:	b2db      	uxtb	r3, r3
 8008416:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2ba0      	cmp	r3, #160	; 0xa0
 8008422:	d005      	beq.n	8008430 <HAL_I2C_IsDeviceReady+0x188>
 8008424:	7dfb      	ldrb	r3, [r7, #23]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d102      	bne.n	8008430 <HAL_I2C_IsDeviceReady+0x188>
 800842a:	7dbb      	ldrb	r3, [r7, #22]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0cd      	beq.n	80083cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b02      	cmp	r3, #2
 8008444:	d129      	bne.n	800849a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008454:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008456:	2300      	movs	r3, #0
 8008458:	613b      	str	r3, [r7, #16]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	613b      	str	r3, [r7, #16]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	613b      	str	r3, [r7, #16]
 800846a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	2319      	movs	r3, #25
 8008472:	2201      	movs	r2, #1
 8008474:	4921      	ldr	r1, [pc, #132]	; (80084fc <HAL_I2C_IsDeviceReady+0x254>)
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f001 fe3e 	bl	800a0f8 <I2C_WaitOnFlagUntilTimeout>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e036      	b.n	80084f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2220      	movs	r2, #32
 800848a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	e02c      	b.n	80084f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	2319      	movs	r3, #25
 80084ba:	2201      	movs	r2, #1
 80084bc:	490f      	ldr	r1, [pc, #60]	; (80084fc <HAL_I2C_IsDeviceReady+0x254>)
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f001 fe1a 	bl	800a0f8 <I2C_WaitOnFlagUntilTimeout>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e012      	b.n	80084f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	3301      	adds	r3, #1
 80084d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80084d4:	69ba      	ldr	r2, [r7, #24]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	429a      	cmp	r2, r3
 80084da:	f4ff af32 	bcc.w	8008342 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2220      	movs	r2, #32
 80084e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e000      	b.n	80084f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80084f2:	2302      	movs	r3, #2
  }
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3720      	adds	r7, #32
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	00100002 	.word	0x00100002
 8008500:	ffff0000 	.word	0xffff0000

08008504 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b088      	sub	sp, #32
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800850c:	2300      	movs	r3, #0
 800850e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008524:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800852c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800852e:	7bfb      	ldrb	r3, [r7, #15]
 8008530:	2b10      	cmp	r3, #16
 8008532:	d003      	beq.n	800853c <HAL_I2C_EV_IRQHandler+0x38>
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	2b40      	cmp	r3, #64	; 0x40
 8008538:	f040 80b1 	bne.w	800869e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10d      	bne.n	8008572 <HAL_I2C_EV_IRQHandler+0x6e>
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800855c:	d003      	beq.n	8008566 <HAL_I2C_EV_IRQHandler+0x62>
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008564:	d101      	bne.n	800856a <HAL_I2C_EV_IRQHandler+0x66>
 8008566:	2301      	movs	r3, #1
 8008568:	e000      	b.n	800856c <HAL_I2C_EV_IRQHandler+0x68>
 800856a:	2300      	movs	r3, #0
 800856c:	2b01      	cmp	r3, #1
 800856e:	f000 8114 	beq.w	800879a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	f003 0301 	and.w	r3, r3, #1
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00b      	beq.n	8008594 <HAL_I2C_EV_IRQHandler+0x90>
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008582:	2b00      	cmp	r3, #0
 8008584:	d006      	beq.n	8008594 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f002 f81e 	bl	800a5c8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fd70 	bl	8009072 <I2C_Master_SB>
 8008592:	e083      	b.n	800869c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	f003 0308 	and.w	r3, r3, #8
 800859a:	2b00      	cmp	r3, #0
 800859c:	d008      	beq.n	80085b0 <HAL_I2C_EV_IRQHandler+0xac>
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fde8 	bl	800917e <I2C_Master_ADD10>
 80085ae:	e075      	b.n	800869c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d008      	beq.n	80085cc <HAL_I2C_EV_IRQHandler+0xc8>
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fe04 	bl	80091d2 <I2C_Master_ADDR>
 80085ca:	e067      	b.n	800869c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f003 0304 	and.w	r3, r3, #4
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d036      	beq.n	8008644 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085e4:	f000 80db 	beq.w	800879e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00d      	beq.n	800860e <HAL_I2C_EV_IRQHandler+0x10a>
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d008      	beq.n	800860e <HAL_I2C_EV_IRQHandler+0x10a>
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f003 0304 	and.w	r3, r3, #4
 8008602:	2b00      	cmp	r3, #0
 8008604:	d103      	bne.n	800860e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f9cc 	bl	80089a4 <I2C_MasterTransmit_TXE>
 800860c:	e046      	b.n	800869c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	f003 0304 	and.w	r3, r3, #4
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 80c2 	beq.w	800879e <HAL_I2C_EV_IRQHandler+0x29a>
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 80bc 	beq.w	800879e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	2b21      	cmp	r3, #33	; 0x21
 800862a:	d103      	bne.n	8008634 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fa55 	bl	8008adc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008632:	e0b4      	b.n	800879e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	2b40      	cmp	r3, #64	; 0x40
 8008638:	f040 80b1 	bne.w	800879e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fac3 	bl	8008bc8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008642:	e0ac      	b.n	800879e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800864e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008652:	f000 80a4 	beq.w	800879e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00d      	beq.n	800867c <HAL_I2C_EV_IRQHandler+0x178>
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008666:	2b00      	cmp	r3, #0
 8008668:	d008      	beq.n	800867c <HAL_I2C_EV_IRQHandler+0x178>
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	2b00      	cmp	r3, #0
 8008672:	d103      	bne.n	800867c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fb3f 	bl	8008cf8 <I2C_MasterReceive_RXNE>
 800867a:	e00f      	b.n	800869c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	f003 0304 	and.w	r3, r3, #4
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 808b 	beq.w	800879e <HAL_I2C_EV_IRQHandler+0x29a>
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 8085 	beq.w	800879e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fbf7 	bl	8008e88 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800869a:	e080      	b.n	800879e <HAL_I2C_EV_IRQHandler+0x29a>
 800869c:	e07f      	b.n	800879e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d004      	beq.n	80086b0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	61fb      	str	r3, [r7, #28]
 80086ae:	e007      	b.n	80086c0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d011      	beq.n	80086ee <HAL_I2C_EV_IRQHandler+0x1ea>
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00c      	beq.n	80086ee <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80086e4:	69b9      	ldr	r1, [r7, #24]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 ffc2 	bl	8009670 <I2C_Slave_ADDR>
 80086ec:	e05a      	b.n	80087a4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	f003 0310 	and.w	r3, r3, #16
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d008      	beq.n	800870a <HAL_I2C_EV_IRQHandler+0x206>
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d003      	beq.n	800870a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fffc 	bl	8009700 <I2C_Slave_STOPF>
 8008708:	e04c      	b.n	80087a4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	2b21      	cmp	r3, #33	; 0x21
 800870e:	d002      	beq.n	8008716 <HAL_I2C_EV_IRQHandler+0x212>
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	2b29      	cmp	r3, #41	; 0x29
 8008714:	d120      	bne.n	8008758 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00d      	beq.n	800873c <HAL_I2C_EV_IRQHandler+0x238>
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008726:	2b00      	cmp	r3, #0
 8008728:	d008      	beq.n	800873c <HAL_I2C_EV_IRQHandler+0x238>
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	f003 0304 	and.w	r3, r3, #4
 8008730:	2b00      	cmp	r3, #0
 8008732:	d103      	bne.n	800873c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fedd 	bl	80094f4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800873a:	e032      	b.n	80087a2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f003 0304 	and.w	r3, r3, #4
 8008742:	2b00      	cmp	r3, #0
 8008744:	d02d      	beq.n	80087a2 <HAL_I2C_EV_IRQHandler+0x29e>
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800874c:	2b00      	cmp	r3, #0
 800874e:	d028      	beq.n	80087a2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 ff0c 	bl	800956e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008756:	e024      	b.n	80087a2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00d      	beq.n	800877e <HAL_I2C_EV_IRQHandler+0x27a>
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008768:	2b00      	cmp	r3, #0
 800876a:	d008      	beq.n	800877e <HAL_I2C_EV_IRQHandler+0x27a>
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	f003 0304 	and.w	r3, r3, #4
 8008772:	2b00      	cmp	r3, #0
 8008774:	d103      	bne.n	800877e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 ff1a 	bl	80095b0 <I2C_SlaveReceive_RXNE>
 800877c:	e012      	b.n	80087a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	f003 0304 	and.w	r3, r3, #4
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00d      	beq.n	80087a4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800878e:	2b00      	cmp	r3, #0
 8008790:	d008      	beq.n	80087a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 ff4a 	bl	800962c <I2C_SlaveReceive_BTF>
 8008798:	e004      	b.n	80087a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800879a:	bf00      	nop
 800879c:	e002      	b.n	80087a4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800879e:	bf00      	nop
 80087a0:	e000      	b.n	80087a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80087a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80087a4:	3720      	adds	r7, #32
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b08a      	sub	sp, #40	; 0x28
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80087c2:	2300      	movs	r3, #0
 80087c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087cc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00d      	beq.n	80087f4 <HAL_I2C_ER_IRQHandler+0x4a>
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d008      	beq.n	80087f4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	f043 0301 	orr.w	r3, r3, #1
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80087f2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00d      	beq.n	800881a <HAL_I2C_ER_IRQHandler+0x70>
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008804:	2b00      	cmp	r3, #0
 8008806:	d008      	beq.n	800881a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	f043 0302 	orr.w	r3, r3, #2
 800880e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008818:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008820:	2b00      	cmp	r3, #0
 8008822:	d03e      	beq.n	80088a2 <HAL_I2C_ER_IRQHandler+0xf8>
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800882a:	2b00      	cmp	r3, #0
 800882c:	d039      	beq.n	80088a2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800882e:	7efb      	ldrb	r3, [r7, #27]
 8008830:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008836:	b29b      	uxth	r3, r3
 8008838:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008840:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008846:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008848:	7ebb      	ldrb	r3, [r7, #26]
 800884a:	2b20      	cmp	r3, #32
 800884c:	d112      	bne.n	8008874 <HAL_I2C_ER_IRQHandler+0xca>
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10f      	bne.n	8008874 <HAL_I2C_ER_IRQHandler+0xca>
 8008854:	7cfb      	ldrb	r3, [r7, #19]
 8008856:	2b21      	cmp	r3, #33	; 0x21
 8008858:	d008      	beq.n	800886c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800885a:	7cfb      	ldrb	r3, [r7, #19]
 800885c:	2b29      	cmp	r3, #41	; 0x29
 800885e:	d005      	beq.n	800886c <HAL_I2C_ER_IRQHandler+0xc2>
 8008860:	7cfb      	ldrb	r3, [r7, #19]
 8008862:	2b28      	cmp	r3, #40	; 0x28
 8008864:	d106      	bne.n	8008874 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b21      	cmp	r3, #33	; 0x21
 800886a:	d103      	bne.n	8008874 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f001 f877 	bl	8009960 <I2C_Slave_AF>
 8008872:	e016      	b.n	80088a2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800887c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	f043 0304 	orr.w	r3, r3, #4
 8008884:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008886:	7efb      	ldrb	r3, [r7, #27]
 8008888:	2b10      	cmp	r3, #16
 800888a:	d002      	beq.n	8008892 <HAL_I2C_ER_IRQHandler+0xe8>
 800888c:	7efb      	ldrb	r3, [r7, #27]
 800888e:	2b40      	cmp	r3, #64	; 0x40
 8008890:	d107      	bne.n	80088a2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088a0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00d      	beq.n	80088c8 <HAL_I2C_ER_IRQHandler+0x11e>
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d008      	beq.n	80088c8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	f043 0308 	orr.w	r3, r3, #8
 80088bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80088c6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d008      	beq.n	80088e0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	431a      	orrs	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 f8b4 	bl	8009a48 <I2C_ITError>
  }
}
 80088e0:	bf00      	nop
 80088e2:	3728      	adds	r7, #40	; 0x28
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	70fb      	strb	r3, [r7, #3]
 8008944:	4613      	mov	r3, r2
 8008946:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d150      	bne.n	8008a6c <I2C_MasterTransmit_TXE+0xc8>
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	2b21      	cmp	r3, #33	; 0x21
 80089ce:	d14d      	bne.n	8008a6c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	2b08      	cmp	r3, #8
 80089d4:	d01d      	beq.n	8008a12 <I2C_MasterTransmit_TXE+0x6e>
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2b20      	cmp	r3, #32
 80089da:	d01a      	beq.n	8008a12 <I2C_MasterTransmit_TXE+0x6e>
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80089e2:	d016      	beq.n	8008a12 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	685a      	ldr	r2, [r3, #4]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80089f2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2211      	movs	r2, #17
 80089f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2220      	movs	r2, #32
 8008a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7ff ff6c 	bl	80088e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008a10:	e060      	b.n	8008ad4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a20:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a30:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b40      	cmp	r3, #64	; 0x40
 8008a4a:	d107      	bne.n	8008a5c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff ff87 	bl	8008968 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008a5a:	e03b      	b.n	8008ad4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7ff ff3f 	bl	80088e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008a6a:	e033      	b.n	8008ad4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	2b21      	cmp	r3, #33	; 0x21
 8008a70:	d005      	beq.n	8008a7e <I2C_MasterTransmit_TXE+0xda>
 8008a72:	7bbb      	ldrb	r3, [r7, #14]
 8008a74:	2b40      	cmp	r3, #64	; 0x40
 8008a76:	d12d      	bne.n	8008ad4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	2b22      	cmp	r3, #34	; 0x22
 8008a7c:	d12a      	bne.n	8008ad4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d108      	bne.n	8008a9a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a96:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008a98:	e01c      	b.n	8008ad4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b40      	cmp	r3, #64	; 0x40
 8008aa4:	d103      	bne.n	8008aae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f88e 	bl	8008bc8 <I2C_MemoryTransmit_TXE_BTF>
}
 8008aac:	e012      	b.n	8008ad4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab2:	781a      	ldrb	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abe:	1c5a      	adds	r2, r3, #1
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	3b01      	subs	r3, #1
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008ad2:	e7ff      	b.n	8008ad4 <I2C_MasterTransmit_TXE+0x130>
 8008ad4:	bf00      	nop
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b21      	cmp	r3, #33	; 0x21
 8008af4:	d164      	bne.n	8008bc0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d012      	beq.n	8008b26 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	781a      	ldrb	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	1c5a      	adds	r2, r3, #1
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008b24:	e04c      	b.n	8008bc0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2b08      	cmp	r3, #8
 8008b2a:	d01d      	beq.n	8008b68 <I2C_MasterTransmit_BTF+0x8c>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2b20      	cmp	r3, #32
 8008b30:	d01a      	beq.n	8008b68 <I2C_MasterTransmit_BTF+0x8c>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008b38:	d016      	beq.n	8008b68 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008b48:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2211      	movs	r2, #17
 8008b4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7ff fec1 	bl	80088e8 <HAL_I2C_MasterTxCpltCallback>
}
 8008b66:	e02b      	b.n	8008bc0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008b76:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b86:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b40      	cmp	r3, #64	; 0x40
 8008ba0:	d107      	bne.n	8008bb2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7ff fedc 	bl	8008968 <HAL_I2C_MemTxCpltCallback>
}
 8008bb0:	e006      	b.n	8008bc0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7ff fe94 	bl	80088e8 <HAL_I2C_MasterTxCpltCallback>
}
 8008bc0:	bf00      	nop
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bd6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d11d      	bne.n	8008c1c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d10b      	bne.n	8008c00 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bf8:	1c9a      	adds	r2, r3, #2
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8008bfe:	e077      	b.n	8008cf0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	121b      	asrs	r3, r3, #8
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c14:	1c5a      	adds	r2, r3, #1
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008c1a:	e069      	b.n	8008cf0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d10b      	bne.n	8008c3c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c34:	1c5a      	adds	r2, r3, #1
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008c3a:	e059      	b.n	8008cf0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d152      	bne.n	8008cea <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
 8008c46:	2b22      	cmp	r3, #34	; 0x22
 8008c48:	d10d      	bne.n	8008c66 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c58:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c5e:	1c5a      	adds	r2, r3, #1
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008c64:	e044      	b.n	8008cf0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d015      	beq.n	8008c9c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
 8008c72:	2b21      	cmp	r3, #33	; 0x21
 8008c74:	d112      	bne.n	8008c9c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7a:	781a      	ldrb	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	3b01      	subs	r3, #1
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008c9a:	e029      	b.n	8008cf0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d124      	bne.n	8008cf0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	2b21      	cmp	r3, #33	; 0x21
 8008caa:	d121      	bne.n	8008cf0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008cba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7ff fe40 	bl	8008968 <HAL_I2C_MemTxCpltCallback>
}
 8008ce8:	e002      	b.n	8008cf0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7fe ff9b 	bl	8007c26 <I2C_Flush_DR>
}
 8008cf0:	bf00      	nop
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b22      	cmp	r3, #34	; 0x22
 8008d0a:	f040 80b9 	bne.w	8008e80 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d12:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	d921      	bls.n	8008d66 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	691a      	ldr	r2, [r3, #16]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2c:	b2d2      	uxtb	r2, r2
 8008d2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d34:	1c5a      	adds	r2, r3, #1
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	3b01      	subs	r3, #1
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	f040 8096 	bne.w	8008e80 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d62:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008d64:	e08c      	b.n	8008e80 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d07f      	beq.n	8008e6e <I2C_MasterReceive_RXNE+0x176>
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d002      	beq.n	8008d7a <I2C_MasterReceive_RXNE+0x82>
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d179      	bne.n	8008e6e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f001 fb66 	bl	800a44c <I2C_WaitOnSTOPRequestThroughIT>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d14c      	bne.n	8008e20 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d94:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008da4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	691a      	ldr	r2, [r3, #16]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db0:	b2d2      	uxtb	r2, r2
 8008db2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db8:	1c5a      	adds	r2, r3, #1
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2220      	movs	r2, #32
 8008dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b40      	cmp	r3, #64	; 0x40
 8008dde:	d10a      	bne.n	8008df6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7ff fdc4 	bl	800897c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008df4:	e044      	b.n	8008e80 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2b08      	cmp	r3, #8
 8008e02:	d002      	beq.n	8008e0a <I2C_MasterReceive_RXNE+0x112>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	d103      	bne.n	8008e12 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8008e10:	e002      	b.n	8008e18 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2212      	movs	r2, #18
 8008e16:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff fd6f 	bl	80088fc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008e1e:	e02f      	b.n	8008e80 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e2e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	691a      	ldr	r2, [r3, #16]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3a:	b2d2      	uxtb	r2, r2
 8008e3c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e42:	1c5a      	adds	r2, r3, #1
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7fb f9b1 	bl	80041ce <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008e6c:	e008      	b.n	8008e80 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e7c:	605a      	str	r2, [r3, #4]
}
 8008e7e:	e7ff      	b.n	8008e80 <I2C_MasterReceive_RXNE+0x188>
 8008e80:	bf00      	nop
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e94:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	2b04      	cmp	r3, #4
 8008e9e:	d11b      	bne.n	8008ed8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008eae:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	691a      	ldr	r2, [r3, #16]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eba:	b2d2      	uxtb	r2, r2
 8008ebc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008ed6:	e0c8      	b.n	800906a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d129      	bne.n	8008f36 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ef0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2b04      	cmp	r3, #4
 8008ef6:	d00a      	beq.n	8008f0e <I2C_MasterReceive_BTF+0x86>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d007      	beq.n	8008f0e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f0c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	691a      	ldr	r2, [r3, #16]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f18:	b2d2      	uxtb	r2, r2
 8008f1a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f20:	1c5a      	adds	r2, r3, #1
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008f34:	e099      	b.n	800906a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	f040 8081 	bne.w	8009044 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d002      	beq.n	8008f4e <I2C_MasterReceive_BTF+0xc6>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2b10      	cmp	r3, #16
 8008f4c:	d108      	bne.n	8008f60 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	e019      	b.n	8008f94 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2b04      	cmp	r3, #4
 8008f64:	d002      	beq.n	8008f6c <I2C_MasterReceive_BTF+0xe4>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d108      	bne.n	8008f7e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	e00a      	b.n	8008f94 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b10      	cmp	r3, #16
 8008f82:	d007      	beq.n	8008f94 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f92:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	691a      	ldr	r2, [r3, #16]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9e:	b2d2      	uxtb	r2, r2
 8008fa0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	1c5a      	adds	r2, r3, #1
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	691a      	ldr	r2, [r3, #16]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc4:	b2d2      	uxtb	r2, r2
 8008fc6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	685a      	ldr	r2, [r3, #4]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008fee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2220      	movs	r2, #32
 8008ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b40      	cmp	r3, #64	; 0x40
 8009002:	d10a      	bne.n	800901a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7ff fcb2 	bl	800897c <HAL_I2C_MemRxCpltCallback>
}
 8009018:	e027      	b.n	800906a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b08      	cmp	r3, #8
 8009026:	d002      	beq.n	800902e <I2C_MasterReceive_BTF+0x1a6>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b20      	cmp	r3, #32
 800902c:	d103      	bne.n	8009036 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	631a      	str	r2, [r3, #48]	; 0x30
 8009034:	e002      	b.n	800903c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2212      	movs	r2, #18
 800903a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f7ff fc5d 	bl	80088fc <HAL_I2C_MasterRxCpltCallback>
}
 8009042:	e012      	b.n	800906a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	691a      	ldr	r2, [r3, #16]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904e:	b2d2      	uxtb	r2, r2
 8009050:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009060:	b29b      	uxth	r3, r3
 8009062:	3b01      	subs	r3, #1
 8009064:	b29a      	uxth	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8009072:	b480      	push	{r7}
 8009074:	b083      	sub	sp, #12
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b40      	cmp	r3, #64	; 0x40
 8009084:	d117      	bne.n	80090b6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800908a:	2b00      	cmp	r3, #0
 800908c:	d109      	bne.n	80090a2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009092:	b2db      	uxtb	r3, r3
 8009094:	461a      	mov	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800909e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80090a0:	e067      	b.n	8009172 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	f043 0301 	orr.w	r3, r3, #1
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	611a      	str	r2, [r3, #16]
}
 80090b4:	e05d      	b.n	8009172 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090be:	d133      	bne.n	8009128 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b21      	cmp	r3, #33	; 0x21
 80090ca:	d109      	bne.n	80090e0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	461a      	mov	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80090dc:	611a      	str	r2, [r3, #16]
 80090de:	e008      	b.n	80090f2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	f043 0301 	orr.w	r3, r3, #1
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d004      	beq.n	8009104 <I2C_Master_SB+0x92>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009100:	2b00      	cmp	r3, #0
 8009102:	d108      	bne.n	8009116 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009108:	2b00      	cmp	r3, #0
 800910a:	d032      	beq.n	8009172 <I2C_Master_SB+0x100>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009112:	2b00      	cmp	r3, #0
 8009114:	d02d      	beq.n	8009172 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009124:	605a      	str	r2, [r3, #4]
}
 8009126:	e024      	b.n	8009172 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10e      	bne.n	800914e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009134:	b29b      	uxth	r3, r3
 8009136:	11db      	asrs	r3, r3, #7
 8009138:	b2db      	uxtb	r3, r3
 800913a:	f003 0306 	and.w	r3, r3, #6
 800913e:	b2db      	uxtb	r3, r3
 8009140:	f063 030f 	orn	r3, r3, #15
 8009144:	b2da      	uxtb	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	611a      	str	r2, [r3, #16]
}
 800914c:	e011      	b.n	8009172 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009152:	2b01      	cmp	r3, #1
 8009154:	d10d      	bne.n	8009172 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800915a:	b29b      	uxth	r3, r3
 800915c:	11db      	asrs	r3, r3, #7
 800915e:	b2db      	uxtb	r3, r3
 8009160:	f003 0306 	and.w	r3, r3, #6
 8009164:	b2db      	uxtb	r3, r3
 8009166:	f063 030e 	orn	r3, r3, #14
 800916a:	b2da      	uxtb	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	611a      	str	r2, [r3, #16]
}
 8009172:	bf00      	nop
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800917e:	b480      	push	{r7}
 8009180:	b083      	sub	sp, #12
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800918a:	b2da      	uxtb	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009196:	2b00      	cmp	r3, #0
 8009198:	d004      	beq.n	80091a4 <I2C_Master_ADD10+0x26>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d108      	bne.n	80091b6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00c      	beq.n	80091c6 <I2C_Master_ADD10+0x48>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d007      	beq.n	80091c6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091c4:	605a      	str	r2, [r3, #4]
  }
}
 80091c6:	bf00      	nop
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b091      	sub	sp, #68	; 0x44
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ee:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b22      	cmp	r3, #34	; 0x22
 80091fa:	f040 8169 	bne.w	80094d0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10f      	bne.n	8009226 <I2C_Master_ADDR+0x54>
 8009206:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800920a:	2b40      	cmp	r3, #64	; 0x40
 800920c:	d10b      	bne.n	8009226 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800920e:	2300      	movs	r3, #0
 8009210:	633b      	str	r3, [r7, #48]	; 0x30
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	633b      	str	r3, [r7, #48]	; 0x30
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	633b      	str	r3, [r7, #48]	; 0x30
 8009222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009224:	e160      	b.n	80094e8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800922a:	2b00      	cmp	r3, #0
 800922c:	d11d      	bne.n	800926a <I2C_Master_ADDR+0x98>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009236:	d118      	bne.n	800926a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009238:	2300      	movs	r3, #0
 800923a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800924c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800925c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009262:	1c5a      	adds	r2, r3, #1
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	651a      	str	r2, [r3, #80]	; 0x50
 8009268:	e13e      	b.n	80094e8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800926e:	b29b      	uxth	r3, r3
 8009270:	2b00      	cmp	r3, #0
 8009272:	d113      	bne.n	800929c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009274:	2300      	movs	r3, #0
 8009276:	62bb      	str	r3, [r7, #40]	; 0x28
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	62bb      	str	r3, [r7, #40]	; 0x28
 8009288:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009298:	601a      	str	r2, [r3, #0]
 800929a:	e115      	b.n	80094c8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	f040 808a 	bne.w	80093bc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80092a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80092ae:	d137      	bne.n	8009320 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092be:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092ce:	d113      	bne.n	80092f8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092de:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092e0:	2300      	movs	r3, #0
 80092e2:	627b      	str	r3, [r7, #36]	; 0x24
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	695b      	ldr	r3, [r3, #20]
 80092ea:	627b      	str	r3, [r7, #36]	; 0x24
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	627b      	str	r3, [r7, #36]	; 0x24
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	e0e7      	b.n	80094c8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092f8:	2300      	movs	r3, #0
 80092fa:	623b      	str	r3, [r7, #32]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	623b      	str	r3, [r7, #32]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	623b      	str	r3, [r7, #32]
 800930c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	e0d3      	b.n	80094c8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009322:	2b08      	cmp	r3, #8
 8009324:	d02e      	beq.n	8009384 <I2C_Master_ADDR+0x1b2>
 8009326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009328:	2b20      	cmp	r3, #32
 800932a:	d02b      	beq.n	8009384 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800932c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932e:	2b12      	cmp	r3, #18
 8009330:	d102      	bne.n	8009338 <I2C_Master_ADDR+0x166>
 8009332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009334:	2b01      	cmp	r3, #1
 8009336:	d125      	bne.n	8009384 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933a:	2b04      	cmp	r3, #4
 800933c:	d00e      	beq.n	800935c <I2C_Master_ADDR+0x18a>
 800933e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009340:	2b02      	cmp	r3, #2
 8009342:	d00b      	beq.n	800935c <I2C_Master_ADDR+0x18a>
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	2b10      	cmp	r3, #16
 8009348:	d008      	beq.n	800935c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	e007      	b.n	800936c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800936a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800936c:	2300      	movs	r3, #0
 800936e:	61fb      	str	r3, [r7, #28]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	61fb      	str	r3, [r7, #28]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	61fb      	str	r3, [r7, #28]
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	e0a1      	b.n	80094c8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009392:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009394:	2300      	movs	r3, #0
 8009396:	61bb      	str	r3, [r7, #24]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	695b      	ldr	r3, [r3, #20]
 800939e:	61bb      	str	r3, [r7, #24]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	61bb      	str	r3, [r7, #24]
 80093a8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093b8:	601a      	str	r2, [r3, #0]
 80093ba:	e085      	b.n	80094c8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d14d      	bne.n	8009462 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80093c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c8:	2b04      	cmp	r3, #4
 80093ca:	d016      	beq.n	80093fa <I2C_Master_ADDR+0x228>
 80093cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d013      	beq.n	80093fa <I2C_Master_ADDR+0x228>
 80093d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d4:	2b10      	cmp	r3, #16
 80093d6:	d010      	beq.n	80093fa <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093e6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	e007      	b.n	800940a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009408:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009418:	d117      	bne.n	800944a <I2C_Master_ADDR+0x278>
 800941a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009420:	d00b      	beq.n	800943a <I2C_Master_ADDR+0x268>
 8009422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009424:	2b01      	cmp	r3, #1
 8009426:	d008      	beq.n	800943a <I2C_Master_ADDR+0x268>
 8009428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942a:	2b08      	cmp	r3, #8
 800942c:	d005      	beq.n	800943a <I2C_Master_ADDR+0x268>
 800942e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009430:	2b10      	cmp	r3, #16
 8009432:	d002      	beq.n	800943a <I2C_Master_ADDR+0x268>
 8009434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009436:	2b20      	cmp	r3, #32
 8009438:	d107      	bne.n	800944a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009448:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800944a:	2300      	movs	r3, #0
 800944c:	617b      	str	r3, [r7, #20]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	695b      	ldr	r3, [r3, #20]
 8009454:	617b      	str	r3, [r7, #20]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	617b      	str	r3, [r7, #20]
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	e032      	b.n	80094c8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009470:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800947c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009480:	d117      	bne.n	80094b2 <I2C_Master_ADDR+0x2e0>
 8009482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009484:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009488:	d00b      	beq.n	80094a2 <I2C_Master_ADDR+0x2d0>
 800948a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948c:	2b01      	cmp	r3, #1
 800948e:	d008      	beq.n	80094a2 <I2C_Master_ADDR+0x2d0>
 8009490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009492:	2b08      	cmp	r3, #8
 8009494:	d005      	beq.n	80094a2 <I2C_Master_ADDR+0x2d0>
 8009496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009498:	2b10      	cmp	r3, #16
 800949a:	d002      	beq.n	80094a2 <I2C_Master_ADDR+0x2d0>
 800949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949e:	2b20      	cmp	r3, #32
 80094a0:	d107      	bne.n	80094b2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80094b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094b2:	2300      	movs	r3, #0
 80094b4:	613b      	str	r3, [r7, #16]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	613b      	str	r3, [r7, #16]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	613b      	str	r3, [r7, #16]
 80094c6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80094ce:	e00b      	b.n	80094e8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094d0:	2300      	movs	r3, #0
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	60fb      	str	r3, [r7, #12]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	68fb      	ldr	r3, [r7, #12]
}
 80094e6:	e7ff      	b.n	80094e8 <I2C_Master_ADDR+0x316>
 80094e8:	bf00      	nop
 80094ea:	3744      	adds	r7, #68	; 0x44
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009502:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009508:	b29b      	uxth	r3, r3
 800950a:	2b00      	cmp	r3, #0
 800950c:	d02b      	beq.n	8009566 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009512:	781a      	ldrb	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951e:	1c5a      	adds	r2, r3, #1
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009528:	b29b      	uxth	r3, r3
 800952a:	3b01      	subs	r3, #1
 800952c:	b29a      	uxth	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009536:	b29b      	uxth	r3, r3
 8009538:	2b00      	cmp	r3, #0
 800953a:	d114      	bne.n	8009566 <I2C_SlaveTransmit_TXE+0x72>
 800953c:	7bfb      	ldrb	r3, [r7, #15]
 800953e:	2b29      	cmp	r3, #41	; 0x29
 8009540:	d111      	bne.n	8009566 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009550:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2221      	movs	r2, #33	; 0x21
 8009556:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2228      	movs	r2, #40	; 0x28
 800955c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f7ff f9d5 	bl	8008910 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800956e:	b480      	push	{r7}
 8009570:	b083      	sub	sp, #12
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800957a:	b29b      	uxth	r3, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	d011      	beq.n	80095a4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009584:	781a      	ldrb	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800959a:	b29b      	uxth	r3, r3
 800959c:	3b01      	subs	r3, #1
 800959e:	b29a      	uxth	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d02c      	beq.n	8009624 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	691a      	ldr	r2, [r3, #16]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d4:	b2d2      	uxtb	r2, r2
 80095d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	1c5a      	adds	r2, r3, #1
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	3b01      	subs	r3, #1
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d114      	bne.n	8009624 <I2C_SlaveReceive_RXNE+0x74>
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
 80095fc:	2b2a      	cmp	r3, #42	; 0x2a
 80095fe:	d111      	bne.n	8009624 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800960e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2222      	movs	r2, #34	; 0x22
 8009614:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2228      	movs	r2, #40	; 0x28
 800961a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f7ff f980 	bl	8008924 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009624:	bf00      	nop
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009638:	b29b      	uxth	r3, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	d012      	beq.n	8009664 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	691a      	ldr	r2, [r3, #16]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009648:	b2d2      	uxtb	r2, r2
 800964a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009650:	1c5a      	adds	r2, r3, #1
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800965a:	b29b      	uxth	r3, r3
 800965c:	3b01      	subs	r3, #1
 800965e:	b29a      	uxth	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800967a:	2300      	movs	r3, #0
 800967c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009684:	b2db      	uxtb	r3, r3
 8009686:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800968a:	2b28      	cmp	r3, #40	; 0x28
 800968c:	d125      	bne.n	80096da <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	685a      	ldr	r2, [r3, #4]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800969c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80096a8:	2301      	movs	r3, #1
 80096aa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d103      	bne.n	80096be <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	81bb      	strh	r3, [r7, #12]
 80096bc:	e002      	b.n	80096c4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80096cc:	89ba      	ldrh	r2, [r7, #12]
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff f930 	bl	8008938 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80096d8:	e00e      	b.n	80096f8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096da:	2300      	movs	r3, #0
 80096dc:	60bb      	str	r3, [r7, #8]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	695b      	ldr	r3, [r3, #20]
 80096e4:	60bb      	str	r3, [r7, #8]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	60bb      	str	r3, [r7, #8]
 80096ee:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80096f8:	bf00      	nop
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800970e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800971e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009720:	2300      	movs	r3, #0
 8009722:	60bb      	str	r3, [r7, #8]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	60bb      	str	r3, [r7, #8]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f042 0201 	orr.w	r2, r2, #1
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800974c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800975c:	d172      	bne.n	8009844 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800975e:	7bfb      	ldrb	r3, [r7, #15]
 8009760:	2b22      	cmp	r3, #34	; 0x22
 8009762:	d002      	beq.n	800976a <I2C_Slave_STOPF+0x6a>
 8009764:	7bfb      	ldrb	r3, [r7, #15]
 8009766:	2b2a      	cmp	r3, #42	; 0x2a
 8009768:	d135      	bne.n	80097d6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	b29a      	uxth	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800977c:	b29b      	uxth	r3, r3
 800977e:	2b00      	cmp	r3, #0
 8009780:	d005      	beq.n	800978e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009786:	f043 0204 	orr.w	r2, r3, #4
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	685a      	ldr	r2, [r3, #4]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800979c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fd fa36 	bl	8006c14 <HAL_DMA_GetState>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d049      	beq.n	8009842 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b2:	4a69      	ldr	r2, [pc, #420]	; (8009958 <I2C_Slave_STOPF+0x258>)
 80097b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fd f87e 	bl	80068bc <HAL_DMA_Abort_IT>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d03d      	beq.n	8009842 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80097d0:	4610      	mov	r0, r2
 80097d2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097d4:	e035      	b.n	8009842 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	b29a      	uxth	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d005      	beq.n	80097fa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f2:	f043 0204 	orr.w	r2, r3, #4
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009808:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980e:	4618      	mov	r0, r3
 8009810:	f7fd fa00 	bl	8006c14 <HAL_DMA_GetState>
 8009814:	4603      	mov	r3, r0
 8009816:	2b01      	cmp	r3, #1
 8009818:	d014      	beq.n	8009844 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800981e:	4a4e      	ldr	r2, [pc, #312]	; (8009958 <I2C_Slave_STOPF+0x258>)
 8009820:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009826:	4618      	mov	r0, r3
 8009828:	f7fd f848 	bl	80068bc <HAL_DMA_Abort_IT>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d008      	beq.n	8009844 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800983c:	4610      	mov	r0, r2
 800983e:	4798      	blx	r3
 8009840:	e000      	b.n	8009844 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009842:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009848:	b29b      	uxth	r3, r3
 800984a:	2b00      	cmp	r3, #0
 800984c:	d03e      	beq.n	80098cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	f003 0304 	and.w	r3, r3, #4
 8009858:	2b04      	cmp	r3, #4
 800985a:	d112      	bne.n	8009882 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	691a      	ldr	r2, [r3, #16]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	b2d2      	uxtb	r2, r2
 8009868:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986e:	1c5a      	adds	r2, r3, #1
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009878:	b29b      	uxth	r3, r3
 800987a:	3b01      	subs	r3, #1
 800987c:	b29a      	uxth	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	695b      	ldr	r3, [r3, #20]
 8009888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800988c:	2b40      	cmp	r3, #64	; 0x40
 800988e:	d112      	bne.n	80098b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	691a      	ldr	r2, [r3, #16]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989a:	b2d2      	uxtb	r2, r2
 800989c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	3b01      	subs	r3, #1
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d005      	beq.n	80098cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c4:	f043 0204 	orr.w	r2, r3, #4
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d003      	beq.n	80098dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f8b7 	bl	8009a48 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80098da:	e039      	b.n	8009950 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
 80098de:	2b2a      	cmp	r3, #42	; 0x2a
 80098e0:	d109      	bne.n	80098f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2228      	movs	r2, #40	; 0x28
 80098ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7ff f817 	bl	8008924 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b28      	cmp	r3, #40	; 0x28
 8009900:	d111      	bne.n	8009926 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a15      	ldr	r2, [pc, #84]	; (800995c <I2C_Slave_STOPF+0x25c>)
 8009906:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2220      	movs	r2, #32
 8009912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f7ff f818 	bl	8008954 <HAL_I2C_ListenCpltCallback>
}
 8009924:	e014      	b.n	8009950 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992a:	2b22      	cmp	r3, #34	; 0x22
 800992c:	d002      	beq.n	8009934 <I2C_Slave_STOPF+0x234>
 800992e:	7bfb      	ldrb	r3, [r7, #15]
 8009930:	2b22      	cmp	r3, #34	; 0x22
 8009932:	d10d      	bne.n	8009950 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2220      	movs	r2, #32
 800993e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7fe ffea 	bl	8008924 <HAL_I2C_SlaveRxCpltCallback>
}
 8009950:	bf00      	nop
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	08009fa9 	.word	0x08009fa9
 800995c:	ffff0000 	.word	0xffff0000

08009960 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800996e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009974:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	2b08      	cmp	r3, #8
 800997a:	d002      	beq.n	8009982 <I2C_Slave_AF+0x22>
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	2b20      	cmp	r3, #32
 8009980:	d129      	bne.n	80099d6 <I2C_Slave_AF+0x76>
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	2b28      	cmp	r3, #40	; 0x28
 8009986:	d126      	bne.n	80099d6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a2e      	ldr	r2, [pc, #184]	; (8009a44 <I2C_Slave_AF+0xe4>)
 800998c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	685a      	ldr	r2, [r3, #4]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800999c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80099a6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099b6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2220      	movs	r2, #32
 80099c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7fe ffc0 	bl	8008954 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80099d4:	e031      	b.n	8009a3a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
 80099d8:	2b21      	cmp	r3, #33	; 0x21
 80099da:	d129      	bne.n	8009a30 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a19      	ldr	r2, [pc, #100]	; (8009a44 <I2C_Slave_AF+0xe4>)
 80099e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2221      	movs	r2, #33	; 0x21
 80099e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2220      	movs	r2, #32
 80099ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009a06:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009a10:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a20:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7fe f8ff 	bl	8007c26 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7fe ff71 	bl	8008910 <HAL_I2C_SlaveTxCpltCallback>
}
 8009a2e:	e004      	b.n	8009a3a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009a38:	615a      	str	r2, [r3, #20]
}
 8009a3a:	bf00      	nop
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	ffff0000 	.word	0xffff0000

08009a48 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009a60:	7bbb      	ldrb	r3, [r7, #14]
 8009a62:	2b10      	cmp	r3, #16
 8009a64:	d002      	beq.n	8009a6c <I2C_ITError+0x24>
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
 8009a68:	2b40      	cmp	r3, #64	; 0x40
 8009a6a:	d10a      	bne.n	8009a82 <I2C_ITError+0x3a>
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
 8009a6e:	2b22      	cmp	r3, #34	; 0x22
 8009a70:	d107      	bne.n	8009a82 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a80:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a82:	7bfb      	ldrb	r3, [r7, #15]
 8009a84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a88:	2b28      	cmp	r3, #40	; 0x28
 8009a8a:	d107      	bne.n	8009a9c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2228      	movs	r2, #40	; 0x28
 8009a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009a9a:	e015      	b.n	8009ac8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aaa:	d00a      	beq.n	8009ac2 <I2C_ITError+0x7a>
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	2b60      	cmp	r3, #96	; 0x60
 8009ab0:	d007      	beq.n	8009ac2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2220      	movs	r2, #32
 8009ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ad6:	d162      	bne.n	8009b9e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	685a      	ldr	r2, [r3, #4]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ae6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d020      	beq.n	8009b38 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009afa:	4a6a      	ldr	r2, [pc, #424]	; (8009ca4 <I2C_ITError+0x25c>)
 8009afc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fc feda 	bl	80068bc <HAL_DMA_Abort_IT>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f000 8089 	beq.w	8009c22 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f022 0201 	bic.w	r2, r2, #1
 8009b1e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2220      	movs	r2, #32
 8009b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009b32:	4610      	mov	r0, r2
 8009b34:	4798      	blx	r3
 8009b36:	e074      	b.n	8009c22 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3c:	4a59      	ldr	r2, [pc, #356]	; (8009ca4 <I2C_ITError+0x25c>)
 8009b3e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fc feb9 	bl	80068bc <HAL_DMA_Abort_IT>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d068      	beq.n	8009c22 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	695b      	ldr	r3, [r3, #20]
 8009b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b5a:	2b40      	cmp	r3, #64	; 0x40
 8009b5c:	d10b      	bne.n	8009b76 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	691a      	ldr	r2, [r3, #16]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b68:	b2d2      	uxtb	r2, r2
 8009b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f022 0201 	bic.w	r2, r2, #1
 8009b84:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2220      	movs	r2, #32
 8009b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009b98:	4610      	mov	r0, r2
 8009b9a:	4798      	blx	r3
 8009b9c:	e041      	b.n	8009c22 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b60      	cmp	r3, #96	; 0x60
 8009ba8:	d125      	bne.n	8009bf6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2220      	movs	r2, #32
 8009bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc2:	2b40      	cmp	r3, #64	; 0x40
 8009bc4:	d10b      	bne.n	8009bde <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	691a      	ldr	r2, [r3, #16]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd0:	b2d2      	uxtb	r2, r2
 8009bd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f022 0201 	bic.w	r2, r2, #1
 8009bec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7fe fece 	bl	8008990 <HAL_I2C_AbortCpltCallback>
 8009bf4:	e015      	b.n	8009c22 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c00:	2b40      	cmp	r3, #64	; 0x40
 8009c02:	d10b      	bne.n	8009c1c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	691a      	ldr	r2, [r3, #16]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0e:	b2d2      	uxtb	r2, r2
 8009c10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7fa fad6 	bl	80041ce <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c26:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10e      	bne.n	8009c50 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d109      	bne.n	8009c50 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d104      	bne.n	8009c50 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d007      	beq.n	8009c60 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009c5e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c66:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6c:	f003 0304 	and.w	r3, r3, #4
 8009c70:	2b04      	cmp	r3, #4
 8009c72:	d113      	bne.n	8009c9c <I2C_ITError+0x254>
 8009c74:	7bfb      	ldrb	r3, [r7, #15]
 8009c76:	2b28      	cmp	r3, #40	; 0x28
 8009c78:	d110      	bne.n	8009c9c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a0a      	ldr	r2, [pc, #40]	; (8009ca8 <I2C_ITError+0x260>)
 8009c7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2220      	movs	r2, #32
 8009c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7fe fe5c 	bl	8008954 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009c9c:	bf00      	nop
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	08009fa9 	.word	0x08009fa9
 8009ca8:	ffff0000 	.word	0xffff0000

08009cac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b088      	sub	sp, #32
 8009cb0:	af02      	add	r7, sp, #8
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	4608      	mov	r0, r1
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	461a      	mov	r2, r3
 8009cba:	4603      	mov	r3, r0
 8009cbc:	817b      	strh	r3, [r7, #10]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	813b      	strh	r3, [r7, #8]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	6a3b      	ldr	r3, [r7, #32]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f000 fa08 	bl	800a0f8 <I2C_WaitOnFlagUntilTimeout>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00d      	beq.n	8009d0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cfc:	d103      	bne.n	8009d06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009d06:	2303      	movs	r3, #3
 8009d08:	e05f      	b.n	8009dca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009d0a:	897b      	ldrh	r3, [r7, #10]
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	461a      	mov	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009d18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1c:	6a3a      	ldr	r2, [r7, #32]
 8009d1e:	492d      	ldr	r1, [pc, #180]	; (8009dd4 <I2C_RequestMemoryWrite+0x128>)
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f000 fa63 	bl	800a1ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e04c      	b.n	8009dca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d30:	2300      	movs	r3, #0
 8009d32:	617b      	str	r3, [r7, #20]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	617b      	str	r3, [r7, #20]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	617b      	str	r3, [r7, #20]
 8009d44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d48:	6a39      	ldr	r1, [r7, #32]
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f000 faee 	bl	800a32c <I2C_WaitOnTXEFlagUntilTimeout>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00d      	beq.n	8009d72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5a:	2b04      	cmp	r3, #4
 8009d5c:	d107      	bne.n	8009d6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e02b      	b.n	8009dca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009d72:	88fb      	ldrh	r3, [r7, #6]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d105      	bne.n	8009d84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d78:	893b      	ldrh	r3, [r7, #8]
 8009d7a:	b2da      	uxtb	r2, r3
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	611a      	str	r2, [r3, #16]
 8009d82:	e021      	b.n	8009dc8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009d84:	893b      	ldrh	r3, [r7, #8]
 8009d86:	0a1b      	lsrs	r3, r3, #8
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d94:	6a39      	ldr	r1, [r7, #32]
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f000 fac8 	bl	800a32c <I2C_WaitOnTXEFlagUntilTimeout>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00d      	beq.n	8009dbe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da6:	2b04      	cmp	r3, #4
 8009da8:	d107      	bne.n	8009dba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009db8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e005      	b.n	8009dca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009dbe:	893b      	ldrh	r3, [r7, #8]
 8009dc0:	b2da      	uxtb	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3718      	adds	r7, #24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	00010002 	.word	0x00010002

08009dd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b088      	sub	sp, #32
 8009ddc:	af02      	add	r7, sp, #8
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	4608      	mov	r0, r1
 8009de2:	4611      	mov	r1, r2
 8009de4:	461a      	mov	r2, r3
 8009de6:	4603      	mov	r3, r0
 8009de8:	817b      	strh	r3, [r7, #10]
 8009dea:	460b      	mov	r3, r1
 8009dec:	813b      	strh	r3, [r7, #8]
 8009dee:	4613      	mov	r3, r2
 8009df0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009e00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f000 f96a 	bl	800a0f8 <I2C_WaitOnFlagUntilTimeout>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00d      	beq.n	8009e46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e38:	d103      	bne.n	8009e42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e42:	2303      	movs	r3, #3
 8009e44:	e0aa      	b.n	8009f9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e46:	897b      	ldrh	r3, [r7, #10]
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009e54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e58:	6a3a      	ldr	r2, [r7, #32]
 8009e5a:	4952      	ldr	r1, [pc, #328]	; (8009fa4 <I2C_RequestMemoryRead+0x1cc>)
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f000 f9c5 	bl	800a1ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e097      	b.n	8009f9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	617b      	str	r3, [r7, #20]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	617b      	str	r3, [r7, #20]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	617b      	str	r3, [r7, #20]
 8009e80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e84:	6a39      	ldr	r1, [r7, #32]
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f000 fa50 	bl	800a32c <I2C_WaitOnTXEFlagUntilTimeout>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00d      	beq.n	8009eae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e96:	2b04      	cmp	r3, #4
 8009e98:	d107      	bne.n	8009eaa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ea8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e076      	b.n	8009f9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009eae:	88fb      	ldrh	r3, [r7, #6]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d105      	bne.n	8009ec0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009eb4:	893b      	ldrh	r3, [r7, #8]
 8009eb6:	b2da      	uxtb	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	611a      	str	r2, [r3, #16]
 8009ebe:	e021      	b.n	8009f04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009ec0:	893b      	ldrh	r3, [r7, #8]
 8009ec2:	0a1b      	lsrs	r3, r3, #8
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed0:	6a39      	ldr	r1, [r7, #32]
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f000 fa2a 	bl	800a32c <I2C_WaitOnTXEFlagUntilTimeout>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00d      	beq.n	8009efa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee2:	2b04      	cmp	r3, #4
 8009ee4:	d107      	bne.n	8009ef6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ef4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e050      	b.n	8009f9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009efa:	893b      	ldrh	r3, [r7, #8]
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f06:	6a39      	ldr	r1, [r7, #32]
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f000 fa0f 	bl	800a32c <I2C_WaitOnTXEFlagUntilTimeout>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00d      	beq.n	8009f30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f18:	2b04      	cmp	r3, #4
 8009f1a:	d107      	bne.n	8009f2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e035      	b.n	8009f9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	6a3b      	ldr	r3, [r7, #32]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f000 f8d3 	bl	800a0f8 <I2C_WaitOnFlagUntilTimeout>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00d      	beq.n	8009f74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f66:	d103      	bne.n	8009f70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f70:	2303      	movs	r3, #3
 8009f72:	e013      	b.n	8009f9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009f74:	897b      	ldrh	r3, [r7, #10]
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	f043 0301 	orr.w	r3, r3, #1
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	6a3a      	ldr	r2, [r7, #32]
 8009f88:	4906      	ldr	r1, [pc, #24]	; (8009fa4 <I2C_RequestMemoryRead+0x1cc>)
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f000 f92e 	bl	800a1ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e000      	b.n	8009f9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	00010002 	.word	0x00010002

08009fa8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fc0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009fc2:	4b4b      	ldr	r3, [pc, #300]	; (800a0f0 <I2C_DMAAbort+0x148>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	08db      	lsrs	r3, r3, #3
 8009fc8:	4a4a      	ldr	r2, [pc, #296]	; (800a0f4 <I2C_DMAAbort+0x14c>)
 8009fca:	fba2 2303 	umull	r2, r3, r2, r3
 8009fce:	0a1a      	lsrs	r2, r3, #8
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	00da      	lsls	r2, r3, #3
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d106      	bne.n	8009ff0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe6:	f043 0220 	orr.w	r2, r3, #32
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009fee:	e00a      	b.n	800a006 <I2C_DMAAbort+0x5e>
    }
    count--;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a004:	d0ea      	beq.n	8009fdc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d003      	beq.n	800a016 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a012:	2200      	movs	r2, #0
 800a014:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a022:	2200      	movs	r2, #0
 800a024:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a034:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2200      	movs	r2, #0
 800a03a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a040:	2b00      	cmp	r3, #0
 800a042:	d003      	beq.n	800a04c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a048:	2200      	movs	r2, #0
 800a04a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a050:	2b00      	cmp	r3, #0
 800a052:	d003      	beq.n	800a05c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a058:	2200      	movs	r2, #0
 800a05a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f022 0201 	bic.w	r2, r2, #1
 800a06a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a072:	b2db      	uxtb	r3, r3
 800a074:	2b60      	cmp	r3, #96	; 0x60
 800a076:	d10e      	bne.n	800a096 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2220      	movs	r2, #32
 800a07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2200      	movs	r2, #0
 800a08c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a08e:	6978      	ldr	r0, [r7, #20]
 800a090:	f7fe fc7e 	bl	8008990 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a094:	e027      	b.n	800a0e6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a096:	7cfb      	ldrb	r3, [r7, #19]
 800a098:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a09c:	2b28      	cmp	r3, #40	; 0x28
 800a09e:	d117      	bne.n	800a0d0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f042 0201 	orr.w	r2, r2, #1
 800a0ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a0be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	2228      	movs	r2, #40	; 0x28
 800a0ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a0ce:	e007      	b.n	800a0e0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	2220      	movs	r2, #32
 800a0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a0e0:	6978      	ldr	r0, [r7, #20]
 800a0e2:	f7fa f874 	bl	80041ce <HAL_I2C_ErrorCallback>
}
 800a0e6:	bf00      	nop
 800a0e8:	3718      	adds	r7, #24
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000040 	.word	0x20000040
 800a0f4:	14f8b589 	.word	0x14f8b589

0800a0f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	603b      	str	r3, [r7, #0]
 800a104:	4613      	mov	r3, r2
 800a106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a108:	e048      	b.n	800a19c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a110:	d044      	beq.n	800a19c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a112:	f7fc f8fb 	bl	800630c <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d302      	bcc.n	800a128 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d139      	bne.n	800a19c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	0c1b      	lsrs	r3, r3, #16
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d10d      	bne.n	800a14e <I2C_WaitOnFlagUntilTimeout+0x56>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	695b      	ldr	r3, [r3, #20]
 800a138:	43da      	mvns	r2, r3
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	4013      	ands	r3, r2
 800a13e:	b29b      	uxth	r3, r3
 800a140:	2b00      	cmp	r3, #0
 800a142:	bf0c      	ite	eq
 800a144:	2301      	moveq	r3, #1
 800a146:	2300      	movne	r3, #0
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	461a      	mov	r2, r3
 800a14c:	e00c      	b.n	800a168 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	43da      	mvns	r2, r3
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	4013      	ands	r3, r2
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	bf0c      	ite	eq
 800a160:	2301      	moveq	r3, #1
 800a162:	2300      	movne	r3, #0
 800a164:	b2db      	uxtb	r3, r3
 800a166:	461a      	mov	r2, r3
 800a168:	79fb      	ldrb	r3, [r7, #7]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d116      	bne.n	800a19c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2220      	movs	r2, #32
 800a178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a188:	f043 0220 	orr.w	r2, r3, #32
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e023      	b.n	800a1e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	0c1b      	lsrs	r3, r3, #16
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d10d      	bne.n	800a1c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	695b      	ldr	r3, [r3, #20]
 800a1ac:	43da      	mvns	r2, r3
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	bf0c      	ite	eq
 800a1b8:	2301      	moveq	r3, #1
 800a1ba:	2300      	movne	r3, #0
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	461a      	mov	r2, r3
 800a1c0:	e00c      	b.n	800a1dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	43da      	mvns	r2, r3
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	bf0c      	ite	eq
 800a1d4:	2301      	moveq	r3, #1
 800a1d6:	2300      	movne	r3, #0
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	461a      	mov	r2, r3
 800a1dc:	79fb      	ldrb	r3, [r7, #7]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d093      	beq.n	800a10a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
 800a1f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a1fa:	e071      	b.n	800a2e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a20a:	d123      	bne.n	800a254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a21a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a224:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2220      	movs	r2, #32
 800a230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a240:	f043 0204 	orr.w	r2, r3, #4
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e067      	b.n	800a324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25a:	d041      	beq.n	800a2e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a25c:	f7fc f856 	bl	800630c <HAL_GetTick>
 800a260:	4602      	mov	r2, r0
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d302      	bcc.n	800a272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d136      	bne.n	800a2e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	0c1b      	lsrs	r3, r3, #16
 800a276:	b2db      	uxtb	r3, r3
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d10c      	bne.n	800a296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	695b      	ldr	r3, [r3, #20]
 800a282:	43da      	mvns	r2, r3
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	4013      	ands	r3, r2
 800a288:	b29b      	uxth	r3, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	bf14      	ite	ne
 800a28e:	2301      	movne	r3, #1
 800a290:	2300      	moveq	r3, #0
 800a292:	b2db      	uxtb	r3, r3
 800a294:	e00b      	b.n	800a2ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	43da      	mvns	r2, r3
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	bf14      	ite	ne
 800a2a8:	2301      	movne	r3, #1
 800a2aa:	2300      	moveq	r3, #0
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d016      	beq.n	800a2e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2220      	movs	r2, #32
 800a2bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2cc:	f043 0220 	orr.w	r2, r3, #32
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e021      	b.n	800a324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	0c1b      	lsrs	r3, r3, #16
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d10c      	bne.n	800a304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	43da      	mvns	r2, r3
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	bf14      	ite	ne
 800a2fc:	2301      	movne	r3, #1
 800a2fe:	2300      	moveq	r3, #0
 800a300:	b2db      	uxtb	r3, r3
 800a302:	e00b      	b.n	800a31c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	43da      	mvns	r2, r3
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	4013      	ands	r3, r2
 800a310:	b29b      	uxth	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	bf14      	ite	ne
 800a316:	2301      	movne	r3, #1
 800a318:	2300      	moveq	r3, #0
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f47f af6d 	bne.w	800a1fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a338:	e034      	b.n	800a3a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f000 f915 	bl	800a56a <I2C_IsAcknowledgeFailed>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d001      	beq.n	800a34a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e034      	b.n	800a3b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a350:	d028      	beq.n	800a3a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a352:	f7fb ffdb 	bl	800630c <HAL_GetTick>
 800a356:	4602      	mov	r2, r0
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d302      	bcc.n	800a368 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d11d      	bne.n	800a3a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a372:	2b80      	cmp	r3, #128	; 0x80
 800a374:	d016      	beq.n	800a3a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2220      	movs	r2, #32
 800a380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a390:	f043 0220 	orr.w	r2, r3, #32
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e007      	b.n	800a3b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	695b      	ldr	r3, [r3, #20]
 800a3aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ae:	2b80      	cmp	r3, #128	; 0x80
 800a3b0:	d1c3      	bne.n	800a33a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a3c8:	e034      	b.n	800a434 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f000 f8cd 	bl	800a56a <I2C_IsAcknowledgeFailed>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d001      	beq.n	800a3da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e034      	b.n	800a444 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e0:	d028      	beq.n	800a434 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3e2:	f7fb ff93 	bl	800630c <HAL_GetTick>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d302      	bcc.n	800a3f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d11d      	bne.n	800a434 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	f003 0304 	and.w	r3, r3, #4
 800a402:	2b04      	cmp	r3, #4
 800a404:	d016      	beq.n	800a434 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2220      	movs	r2, #32
 800a410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a420:	f043 0220 	orr.w	r2, r3, #32
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	e007      	b.n	800a444 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	695b      	ldr	r3, [r3, #20]
 800a43a:	f003 0304 	and.w	r3, r3, #4
 800a43e:	2b04      	cmp	r3, #4
 800a440:	d1c3      	bne.n	800a3ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a454:	2300      	movs	r3, #0
 800a456:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a458:	4b13      	ldr	r3, [pc, #76]	; (800a4a8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	08db      	lsrs	r3, r3, #3
 800a45e:	4a13      	ldr	r2, [pc, #76]	; (800a4ac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a460:	fba2 2303 	umull	r2, r3, r2, r3
 800a464:	0a1a      	lsrs	r2, r3, #8
 800a466:	4613      	mov	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4413      	add	r3, r2
 800a46c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3b01      	subs	r3, #1
 800a472:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d107      	bne.n	800a48a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a47e:	f043 0220 	orr.w	r2, r3, #32
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e008      	b.n	800a49c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a498:	d0e9      	beq.n	800a46e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3714      	adds	r7, #20
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr
 800a4a8:	20000040 	.word	0x20000040
 800a4ac:	14f8b589 	.word	0x14f8b589

0800a4b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a4bc:	e049      	b.n	800a552 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	695b      	ldr	r3, [r3, #20]
 800a4c4:	f003 0310 	and.w	r3, r3, #16
 800a4c8:	2b10      	cmp	r3, #16
 800a4ca:	d119      	bne.n	800a500 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f06f 0210 	mvn.w	r2, #16
 800a4d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2220      	movs	r2, #32
 800a4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e030      	b.n	800a562 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a500:	f7fb ff04 	bl	800630c <HAL_GetTick>
 800a504:	4602      	mov	r2, r0
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	68ba      	ldr	r2, [r7, #8]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d302      	bcc.n	800a516 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d11d      	bne.n	800a552 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	695b      	ldr	r3, [r3, #20]
 800a51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a520:	2b40      	cmp	r3, #64	; 0x40
 800a522:	d016      	beq.n	800a552 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2220      	movs	r2, #32
 800a52e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a53e:	f043 0220 	orr.w	r2, r3, #32
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e007      	b.n	800a562 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	695b      	ldr	r3, [r3, #20]
 800a558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a55c:	2b40      	cmp	r3, #64	; 0x40
 800a55e:	d1ae      	bne.n	800a4be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b083      	sub	sp, #12
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	695b      	ldr	r3, [r3, #20]
 800a578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a57c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a580:	d11b      	bne.n	800a5ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a58a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2220      	movs	r2, #32
 800a596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a6:	f043 0204 	orr.w	r2, r3, #4
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e000      	b.n	800a5bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a5d8:	d103      	bne.n	800a5e2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a5e0:	e007      	b.n	800a5f2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a5ea:	d102      	bne.n	800a5f2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2208      	movs	r2, #8
 800a5f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a5f2:	bf00      	nop
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b083      	sub	sp, #12
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b20      	cmp	r3, #32
 800a612:	d129      	bne.n	800a668 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2224      	movs	r2, #36	; 0x24
 800a618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f022 0201 	bic.w	r2, r2, #1
 800a62a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f022 0210 	bic.w	r2, r2, #16
 800a63a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	430a      	orrs	r2, r1
 800a64a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f042 0201 	orr.w	r2, r2, #1
 800a65a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2220      	movs	r2, #32
 800a660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	e000      	b.n	800a66a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800a668:	2302      	movs	r3, #2
  }
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a676:	b480      	push	{r7}
 800a678:	b085      	sub	sp, #20
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
 800a67e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800a680:	2300      	movs	r3, #0
 800a682:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b20      	cmp	r3, #32
 800a68e:	d12a      	bne.n	800a6e6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2224      	movs	r2, #36	; 0x24
 800a694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f022 0201 	bic.w	r2, r2, #1
 800a6a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800a6b0:	89fb      	ldrh	r3, [r7, #14]
 800a6b2:	f023 030f 	bic.w	r3, r3, #15
 800a6b6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	89fb      	ldrh	r3, [r7, #14]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	89fa      	ldrh	r2, [r7, #14]
 800a6c8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f042 0201 	orr.w	r2, r2, #1
 800a6d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2220      	movs	r2, #32
 800a6de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	e000      	b.n	800a6e8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800a6e6:	2302      	movs	r3, #2
  }
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3714      	adds	r7, #20
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af02      	add	r7, sp, #8
 800a6fa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	e101      	b.n	800a90a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800a712:	b2db      	uxtb	r3, r3
 800a714:	2b00      	cmp	r3, #0
 800a716:	d106      	bne.n	800a726 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f00c fa2f 	bl	8016b84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2203      	movs	r2, #3
 800a72a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a734:	d102      	bne.n	800a73c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4618      	mov	r0, r3
 800a742:	f004 fdbe 	bl	800f2c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6818      	ldr	r0, [r3, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	7c1a      	ldrb	r2, [r3, #16]
 800a74e:	f88d 2000 	strb.w	r2, [sp]
 800a752:	3304      	adds	r3, #4
 800a754:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a756:	f004 fc9d 	bl	800f094 <USB_CoreInit>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d005      	beq.n	800a76c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2202      	movs	r2, #2
 800a764:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e0ce      	b.n	800a90a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2100      	movs	r1, #0
 800a772:	4618      	mov	r0, r3
 800a774:	f004 fdb6 	bl	800f2e4 <USB_SetCurrentMode>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d005      	beq.n	800a78a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2202      	movs	r2, #2
 800a782:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e0bf      	b.n	800a90a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a78a:	2300      	movs	r3, #0
 800a78c:	73fb      	strb	r3, [r7, #15]
 800a78e:	e04a      	b.n	800a826 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a790:	7bfa      	ldrb	r2, [r7, #15]
 800a792:	6879      	ldr	r1, [r7, #4]
 800a794:	4613      	mov	r3, r2
 800a796:	00db      	lsls	r3, r3, #3
 800a798:	4413      	add	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	440b      	add	r3, r1
 800a79e:	3315      	adds	r3, #21
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a7a4:	7bfa      	ldrb	r2, [r7, #15]
 800a7a6:	6879      	ldr	r1, [r7, #4]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	00db      	lsls	r3, r3, #3
 800a7ac:	4413      	add	r3, r2
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	440b      	add	r3, r1
 800a7b2:	3314      	adds	r3, #20
 800a7b4:	7bfa      	ldrb	r2, [r7, #15]
 800a7b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a7b8:	7bfa      	ldrb	r2, [r7, #15]
 800a7ba:	7bfb      	ldrb	r3, [r7, #15]
 800a7bc:	b298      	uxth	r0, r3
 800a7be:	6879      	ldr	r1, [r7, #4]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	00db      	lsls	r3, r3, #3
 800a7c4:	4413      	add	r3, r2
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	440b      	add	r3, r1
 800a7ca:	332e      	adds	r3, #46	; 0x2e
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a7d0:	7bfa      	ldrb	r2, [r7, #15]
 800a7d2:	6879      	ldr	r1, [r7, #4]
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	00db      	lsls	r3, r3, #3
 800a7d8:	4413      	add	r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	440b      	add	r3, r1
 800a7de:	3318      	adds	r3, #24
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a7e4:	7bfa      	ldrb	r2, [r7, #15]
 800a7e6:	6879      	ldr	r1, [r7, #4]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	00db      	lsls	r3, r3, #3
 800a7ec:	4413      	add	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	440b      	add	r3, r1
 800a7f2:	331c      	adds	r3, #28
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a7f8:	7bfa      	ldrb	r2, [r7, #15]
 800a7fa:	6879      	ldr	r1, [r7, #4]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	00db      	lsls	r3, r3, #3
 800a800:	4413      	add	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	440b      	add	r3, r1
 800a806:	3320      	adds	r3, #32
 800a808:	2200      	movs	r2, #0
 800a80a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a80c:	7bfa      	ldrb	r2, [r7, #15]
 800a80e:	6879      	ldr	r1, [r7, #4]
 800a810:	4613      	mov	r3, r2
 800a812:	00db      	lsls	r3, r3, #3
 800a814:	4413      	add	r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	440b      	add	r3, r1
 800a81a:	3324      	adds	r3, #36	; 0x24
 800a81c:	2200      	movs	r2, #0
 800a81e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a820:	7bfb      	ldrb	r3, [r7, #15]
 800a822:	3301      	adds	r3, #1
 800a824:	73fb      	strb	r3, [r7, #15]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	791b      	ldrb	r3, [r3, #4]
 800a82a:	7bfa      	ldrb	r2, [r7, #15]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d3af      	bcc.n	800a790 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a830:	2300      	movs	r3, #0
 800a832:	73fb      	strb	r3, [r7, #15]
 800a834:	e044      	b.n	800a8c0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a836:	7bfa      	ldrb	r2, [r7, #15]
 800a838:	6879      	ldr	r1, [r7, #4]
 800a83a:	4613      	mov	r3, r2
 800a83c:	00db      	lsls	r3, r3, #3
 800a83e:	4413      	add	r3, r2
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	440b      	add	r3, r1
 800a844:	f203 2355 	addw	r3, r3, #597	; 0x255
 800a848:	2200      	movs	r2, #0
 800a84a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a84c:	7bfa      	ldrb	r2, [r7, #15]
 800a84e:	6879      	ldr	r1, [r7, #4]
 800a850:	4613      	mov	r3, r2
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	4413      	add	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	440b      	add	r3, r1
 800a85a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800a85e:	7bfa      	ldrb	r2, [r7, #15]
 800a860:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a862:	7bfa      	ldrb	r2, [r7, #15]
 800a864:	6879      	ldr	r1, [r7, #4]
 800a866:	4613      	mov	r3, r2
 800a868:	00db      	lsls	r3, r3, #3
 800a86a:	4413      	add	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	440b      	add	r3, r1
 800a870:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800a874:	2200      	movs	r2, #0
 800a876:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a878:	7bfa      	ldrb	r2, [r7, #15]
 800a87a:	6879      	ldr	r1, [r7, #4]
 800a87c:	4613      	mov	r3, r2
 800a87e:	00db      	lsls	r3, r3, #3
 800a880:	4413      	add	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	440b      	add	r3, r1
 800a886:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800a88a:	2200      	movs	r2, #0
 800a88c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a88e:	7bfa      	ldrb	r2, [r7, #15]
 800a890:	6879      	ldr	r1, [r7, #4]
 800a892:	4613      	mov	r3, r2
 800a894:	00db      	lsls	r3, r3, #3
 800a896:	4413      	add	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	440b      	add	r3, r1
 800a89c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a8a4:	7bfa      	ldrb	r2, [r7, #15]
 800a8a6:	6879      	ldr	r1, [r7, #4]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	00db      	lsls	r3, r3, #3
 800a8ac:	4413      	add	r3, r2
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	440b      	add	r3, r1
 800a8b2:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	73fb      	strb	r3, [r7, #15]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	791b      	ldrb	r3, [r3, #4]
 800a8c4:	7bfa      	ldrb	r2, [r7, #15]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d3b5      	bcc.n	800a836 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6818      	ldr	r0, [r3, #0]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	7c1a      	ldrb	r2, [r3, #16]
 800a8d2:	f88d 2000 	strb.w	r2, [sp]
 800a8d6:	3304      	adds	r3, #4
 800a8d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a8da:	f004 fd4f 	bl	800f37c <USB_DevInit>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d005      	beq.n	800a8f0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e00c      	b.n	800a90a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4618      	mov	r0, r3
 800a904:	f005 fd93 	bl	801042e <USB_DevDisconnect>

  return HAL_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b084      	sub	sp, #16
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800a926:	2b01      	cmp	r3, #1
 800a928:	d101      	bne.n	800a92e <HAL_PCD_Start+0x1c>
 800a92a:	2302      	movs	r3, #2
 800a92c:	e022      	b.n	800a974 <HAL_PCD_Start+0x62>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d009      	beq.n	800a956 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a946:	2b01      	cmp	r3, #1
 800a948:	d105      	bne.n	800a956 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4618      	mov	r0, r3
 800a95c:	f004 fca0 	bl	800f2a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4618      	mov	r0, r3
 800a966:	f005 fd41 	bl	80103ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a97c:	b590      	push	{r4, r7, lr}
 800a97e:	b08d      	sub	sp, #52	; 0x34
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a98a:	6a3b      	ldr	r3, [r7, #32]
 800a98c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4618      	mov	r0, r3
 800a994:	f005 fdff 	bl	8010596 <USB_GetMode>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f040 848c 	bne.w	800b2b8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f005 fd63 	bl	8010470 <USB_ReadInterrupts>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 8482 	beq.w	800b2b6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	0a1b      	lsrs	r3, r3, #8
 800a9bc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f005 fd50 	bl	8010470 <USB_ReadInterrupts>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	f003 0302 	and.w	r3, r3, #2
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d107      	bne.n	800a9ea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	695a      	ldr	r2, [r3, #20]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f002 0202 	and.w	r2, r2, #2
 800a9e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f005 fd3e 	bl	8010470 <USB_ReadInterrupts>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	f003 0310 	and.w	r3, r3, #16
 800a9fa:	2b10      	cmp	r3, #16
 800a9fc:	d161      	bne.n	800aac2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	699a      	ldr	r2, [r3, #24]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f022 0210 	bic.w	r2, r2, #16
 800aa0c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800aa0e:	6a3b      	ldr	r3, [r7, #32]
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	f003 020f 	and.w	r2, r3, #15
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	00db      	lsls	r3, r3, #3
 800aa1e:	4413      	add	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	4413      	add	r3, r2
 800aa2a:	3304      	adds	r3, #4
 800aa2c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	0c5b      	lsrs	r3, r3, #17
 800aa32:	f003 030f 	and.w	r3, r3, #15
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d124      	bne.n	800aa84 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800aa3a:	69ba      	ldr	r2, [r7, #24]
 800aa3c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800aa40:	4013      	ands	r3, r2
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d035      	beq.n	800aab2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	091b      	lsrs	r3, r3, #4
 800aa4e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800aa50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	461a      	mov	r2, r3
 800aa58:	6a38      	ldr	r0, [r7, #32]
 800aa5a:	f005 fb75 	bl	8010148 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	68da      	ldr	r2, [r3, #12]
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	091b      	lsrs	r3, r3, #4
 800aa66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa6a:	441a      	add	r2, r3
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	695a      	ldr	r2, [r3, #20]
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	091b      	lsrs	r3, r3, #4
 800aa78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa7c:	441a      	add	r2, r3
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	615a      	str	r2, [r3, #20]
 800aa82:	e016      	b.n	800aab2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	0c5b      	lsrs	r3, r3, #17
 800aa88:	f003 030f 	and.w	r3, r3, #15
 800aa8c:	2b06      	cmp	r3, #6
 800aa8e:	d110      	bne.n	800aab2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800aa96:	2208      	movs	r2, #8
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6a38      	ldr	r0, [r7, #32]
 800aa9c:	f005 fb54 	bl	8010148 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	695a      	ldr	r2, [r3, #20]
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	091b      	lsrs	r3, r3, #4
 800aaa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aaac:	441a      	add	r2, r3
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	699a      	ldr	r2, [r3, #24]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f042 0210 	orr.w	r2, r2, #16
 800aac0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4618      	mov	r0, r3
 800aac8:	f005 fcd2 	bl	8010470 <USB_ReadInterrupts>
 800aacc:	4603      	mov	r3, r0
 800aace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aad2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aad6:	f040 80a7 	bne.w	800ac28 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800aada:	2300      	movs	r3, #0
 800aadc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f005 fcd7 	bl	8010496 <USB_ReadDevAllOutEpInterrupt>
 800aae8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800aaea:	e099      	b.n	800ac20 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800aaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaee:	f003 0301 	and.w	r3, r3, #1
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f000 808e 	beq.w	800ac14 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aafe:	b2d2      	uxtb	r2, r2
 800ab00:	4611      	mov	r1, r2
 800ab02:	4618      	mov	r0, r3
 800ab04:	f005 fcfb 	bl	80104fe <USB_ReadDevOutEPInterrupt>
 800ab08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	f003 0301 	and.w	r3, r3, #1
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00c      	beq.n	800ab2e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	015a      	lsls	r2, r3, #5
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab20:	461a      	mov	r2, r3
 800ab22:	2301      	movs	r3, #1
 800ab24:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800ab26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fea1 	bl	800b870 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	f003 0308 	and.w	r3, r3, #8
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00c      	beq.n	800ab52 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800ab38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3a:	015a      	lsls	r2, r3, #5
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	4413      	add	r3, r2
 800ab40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab44:	461a      	mov	r2, r3
 800ab46:	2308      	movs	r3, #8
 800ab48:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800ab4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 ff77 	bl	800ba40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	f003 0310 	and.w	r3, r3, #16
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d008      	beq.n	800ab6e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	015a      	lsls	r2, r3, #5
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	4413      	add	r3, r2
 800ab64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab68:	461a      	mov	r2, r3
 800ab6a:	2310      	movs	r3, #16
 800ab6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	f003 0302 	and.w	r3, r3, #2
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d030      	beq.n	800abda <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800ab78:	6a3b      	ldr	r3, [r7, #32]
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab80:	2b80      	cmp	r3, #128	; 0x80
 800ab82:	d109      	bne.n	800ab98 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	69fa      	ldr	r2, [r7, #28]
 800ab8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ab96:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800ab98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	00db      	lsls	r3, r3, #3
 800ab9e:	4413      	add	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	4413      	add	r3, r2
 800abaa:	3304      	adds	r3, #4
 800abac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	78db      	ldrb	r3, [r3, #3]
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d108      	bne.n	800abc8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	2200      	movs	r2, #0
 800abba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800abbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	4619      	mov	r1, r3
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f00c f8da 	bl	8016d7c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abca:	015a      	lsls	r2, r3, #5
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	4413      	add	r3, r2
 800abd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abd4:	461a      	mov	r2, r3
 800abd6:	2302      	movs	r3, #2
 800abd8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	f003 0320 	and.w	r3, r3, #32
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d008      	beq.n	800abf6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf0:	461a      	mov	r2, r3
 800abf2:	2320      	movs	r3, #32
 800abf4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d009      	beq.n	800ac14 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ac00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac02:	015a      	lsls	r2, r3, #5
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	4413      	add	r3, r2
 800ac08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac12:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac16:	3301      	adds	r3, #1
 800ac18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800ac1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1c:	085b      	lsrs	r3, r3, #1
 800ac1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f47f af62 	bne.w	800aaec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f005 fc1f 	bl	8010470 <USB_ReadInterrupts>
 800ac32:	4603      	mov	r3, r0
 800ac34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac3c:	f040 80db 	bne.w	800adf6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4618      	mov	r0, r3
 800ac46:	f005 fc40 	bl	80104ca <USB_ReadDevAllInEpInterrupt>
 800ac4a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800ac50:	e0cd      	b.n	800adee <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ac52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac54:	f003 0301 	and.w	r3, r3, #1
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f000 80c2 	beq.w	800ade2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac64:	b2d2      	uxtb	r2, r2
 800ac66:	4611      	mov	r1, r2
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f005 fc66 	bl	801053a <USB_ReadDevInEPInterrupt>
 800ac6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d057      	beq.n	800ad2a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7c:	f003 030f 	and.w	r3, r3, #15
 800ac80:	2201      	movs	r2, #1
 800ac82:	fa02 f303 	lsl.w	r3, r2, r3
 800ac86:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	43db      	mvns	r3, r3
 800ac94:	69f9      	ldr	r1, [r7, #28]
 800ac96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	015a      	lsls	r2, r3, #5
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	4413      	add	r3, r2
 800aca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acaa:	461a      	mov	r2, r3
 800acac:	2301      	movs	r3, #1
 800acae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	799b      	ldrb	r3, [r3, #6]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d132      	bne.n	800ad1e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800acb8:	6879      	ldr	r1, [r7, #4]
 800acba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acbc:	4613      	mov	r3, r2
 800acbe:	00db      	lsls	r3, r3, #3
 800acc0:	4413      	add	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	440b      	add	r3, r1
 800acc6:	3320      	adds	r3, #32
 800acc8:	6819      	ldr	r1, [r3, #0]
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acce:	4613      	mov	r3, r2
 800acd0:	00db      	lsls	r3, r3, #3
 800acd2:	4413      	add	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4403      	add	r3, r0
 800acd8:	331c      	adds	r3, #28
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4419      	add	r1, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ace2:	4613      	mov	r3, r2
 800ace4:	00db      	lsls	r3, r3, #3
 800ace6:	4413      	add	r3, r2
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	4403      	add	r3, r0
 800acec:	3320      	adds	r3, #32
 800acee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800acf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d113      	bne.n	800ad1e <HAL_PCD_IRQHandler+0x3a2>
 800acf6:	6879      	ldr	r1, [r7, #4]
 800acf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acfa:	4613      	mov	r3, r2
 800acfc:	00db      	lsls	r3, r3, #3
 800acfe:	4413      	add	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	440b      	add	r3, r1
 800ad04:	3324      	adds	r3, #36	; 0x24
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d108      	bne.n	800ad1e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6818      	ldr	r0, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800ad16:	461a      	mov	r2, r3
 800ad18:	2101      	movs	r1, #1
 800ad1a:	f005 fc6d 	bl	80105f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800ad1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	4619      	mov	r1, r3
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f00b ffae 	bl	8016c86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	f003 0308 	and.w	r3, r3, #8
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d008      	beq.n	800ad46 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad36:	015a      	lsls	r2, r3, #5
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad40:	461a      	mov	r2, r3
 800ad42:	2308      	movs	r3, #8
 800ad44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	f003 0310 	and.w	r3, r3, #16
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d008      	beq.n	800ad62 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad52:	015a      	lsls	r2, r3, #5
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	4413      	add	r3, r2
 800ad58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	2310      	movs	r3, #16
 800ad60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d008      	beq.n	800ad7e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	015a      	lsls	r2, r3, #5
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	4413      	add	r3, r2
 800ad74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad78:	461a      	mov	r2, r3
 800ad7a:	2340      	movs	r3, #64	; 0x40
 800ad7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f003 0302 	and.w	r3, r3, #2
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d023      	beq.n	800add0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800ad88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad8a:	6a38      	ldr	r0, [r7, #32]
 800ad8c:	f004 fc5a 	bl	800f644 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800ad90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad92:	4613      	mov	r3, r2
 800ad94:	00db      	lsls	r3, r3, #3
 800ad96:	4413      	add	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	3310      	adds	r3, #16
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	4413      	add	r3, r2
 800ada0:	3304      	adds	r3, #4
 800ada2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	78db      	ldrb	r3, [r3, #3]
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d108      	bne.n	800adbe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	2200      	movs	r2, #0
 800adb0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800adb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f00b fff1 	bl	8016da0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800adbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc0:	015a      	lsls	r2, r3, #5
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	4413      	add	r3, r2
 800adc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adca:	461a      	mov	r2, r3
 800adcc:	2302      	movs	r3, #2
 800adce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800add6:	2b00      	cmp	r3, #0
 800add8:	d003      	beq.n	800ade2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800adda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fcbb 	bl	800b758 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800ade2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade4:	3301      	adds	r3, #1
 800ade6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800ade8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adea:	085b      	lsrs	r3, r3, #1
 800adec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800adee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f47f af2e 	bne.w	800ac52 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4618      	mov	r0, r3
 800adfc:	f005 fb38 	bl	8010470 <USB_ReadInterrupts>
 800ae00:	4603      	mov	r3, r0
 800ae02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae0a:	d122      	bne.n	800ae52 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	69fa      	ldr	r2, [r7, #28]
 800ae16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae1a:	f023 0301 	bic.w	r3, r3, #1
 800ae1e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d108      	bne.n	800ae3c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800ae32:	2100      	movs	r1, #0
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fea1 	bl	800bb7c <HAL_PCDEx_LPM_Callback>
 800ae3a:	e002      	b.n	800ae42 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f00b ff8f 	bl	8016d60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	695a      	ldr	r2, [r3, #20]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800ae50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4618      	mov	r0, r3
 800ae58:	f005 fb0a 	bl	8010470 <USB_ReadInterrupts>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae66:	d112      	bne.n	800ae8e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	f003 0301 	and.w	r3, r3, #1
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d102      	bne.n	800ae7e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f00b ff4b 	bl	8016d14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	695a      	ldr	r2, [r3, #20]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ae8c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f005 faec 	bl	8010470 <USB_ReadInterrupts>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aea2:	f040 80b7 	bne.w	800b014 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	69fa      	ldr	r2, [r7, #28]
 800aeb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aeb4:	f023 0301 	bic.w	r3, r3, #1
 800aeb8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2110      	movs	r1, #16
 800aec0:	4618      	mov	r0, r3
 800aec2:	f004 fbbf 	bl	800f644 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aec6:	2300      	movs	r3, #0
 800aec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aeca:	e046      	b.n	800af5a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800aecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aece:	015a      	lsls	r2, r3, #5
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	4413      	add	r3, r2
 800aed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aed8:	461a      	mov	r2, r3
 800aeda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aede:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee2:	015a      	lsls	r2, r3, #5
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	4413      	add	r3, r2
 800aee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aef0:	0151      	lsls	r1, r2, #5
 800aef2:	69fa      	ldr	r2, [r7, #28]
 800aef4:	440a      	add	r2, r1
 800aef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aefa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aefe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800af00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af02:	015a      	lsls	r2, r3, #5
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af0c:	461a      	mov	r2, r3
 800af0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800af12:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800af14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af16:	015a      	lsls	r2, r3, #5
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	4413      	add	r3, r2
 800af1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af24:	0151      	lsls	r1, r2, #5
 800af26:	69fa      	ldr	r2, [r7, #28]
 800af28:	440a      	add	r2, r1
 800af2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800af32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800af34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af36:	015a      	lsls	r2, r3, #5
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	4413      	add	r3, r2
 800af3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af44:	0151      	lsls	r1, r2, #5
 800af46:	69fa      	ldr	r2, [r7, #28]
 800af48:	440a      	add	r2, r1
 800af4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af52:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800af54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af56:	3301      	adds	r3, #1
 800af58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	791b      	ldrb	r3, [r3, #4]
 800af5e:	461a      	mov	r2, r3
 800af60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af62:	4293      	cmp	r3, r2
 800af64:	d3b2      	bcc.n	800aecc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af6c:	69db      	ldr	r3, [r3, #28]
 800af6e:	69fa      	ldr	r2, [r7, #28]
 800af70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af74:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800af78:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	7bdb      	ldrb	r3, [r3, #15]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d016      	beq.n	800afb0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af8c:	69fa      	ldr	r2, [r7, #28]
 800af8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af92:	f043 030b 	orr.w	r3, r3, #11
 800af96:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afa2:	69fa      	ldr	r2, [r7, #28]
 800afa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afa8:	f043 030b 	orr.w	r3, r3, #11
 800afac:	6453      	str	r3, [r2, #68]	; 0x44
 800afae:	e015      	b.n	800afdc <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afb6:	695b      	ldr	r3, [r3, #20]
 800afb8:	69fa      	ldr	r2, [r7, #28]
 800afba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800afc2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800afc6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800afc8:	69fb      	ldr	r3, [r7, #28]
 800afca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	69fa      	ldr	r2, [r7, #28]
 800afd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afd6:	f043 030b 	orr.w	r3, r3, #11
 800afda:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	69fa      	ldr	r2, [r7, #28]
 800afe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800afee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6818      	ldr	r0, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800affe:	461a      	mov	r2, r3
 800b000:	f005 fafa 	bl	80105f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	695a      	ldr	r2, [r3, #20]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b012:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4618      	mov	r0, r3
 800b01a:	f005 fa29 	bl	8010470 <USB_ReadInterrupts>
 800b01e:	4603      	mov	r3, r0
 800b020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b028:	d123      	bne.n	800b072 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4618      	mov	r0, r3
 800b030:	f005 fabf 	bl	80105b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4618      	mov	r0, r3
 800b03a:	f004 fb7c 	bl	800f736 <USB_GetDevSpeed>
 800b03e:	4603      	mov	r3, r0
 800b040:	461a      	mov	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681c      	ldr	r4, [r3, #0]
 800b04a:	f001 f9c7 	bl	800c3dc <HAL_RCC_GetHCLKFreq>
 800b04e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b054:	461a      	mov	r2, r3
 800b056:	4620      	mov	r0, r4
 800b058:	f004 f880 	bl	800f15c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f00b fe3a 	bl	8016cd6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	695a      	ldr	r2, [r3, #20]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b070:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4618      	mov	r0, r3
 800b078:	f005 f9fa 	bl	8010470 <USB_ReadInterrupts>
 800b07c:	4603      	mov	r3, r0
 800b07e:	f003 0308 	and.w	r3, r3, #8
 800b082:	2b08      	cmp	r3, #8
 800b084:	d10a      	bne.n	800b09c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f00b fe17 	bl	8016cba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	695a      	ldr	r2, [r3, #20]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f002 0208 	and.w	r2, r2, #8
 800b09a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f005 f9e5 	bl	8010470 <USB_ReadInterrupts>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ac:	2b80      	cmp	r3, #128	; 0x80
 800b0ae:	d123      	bne.n	800b0f8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b0b0:	6a3b      	ldr	r3, [r7, #32]
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b0b8:	6a3b      	ldr	r3, [r7, #32]
 800b0ba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b0bc:	2301      	movs	r3, #1
 800b0be:	627b      	str	r3, [r7, #36]	; 0x24
 800b0c0:	e014      	b.n	800b0ec <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b0c2:	6879      	ldr	r1, [r7, #4]
 800b0c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	00db      	lsls	r3, r3, #3
 800b0ca:	4413      	add	r3, r2
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	440b      	add	r3, r1
 800b0d0:	f203 2357 	addw	r3, r3, #599	; 0x257
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d105      	bne.n	800b0e6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fb08 	bl	800b6f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	627b      	str	r3, [r7, #36]	; 0x24
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	791b      	ldrb	r3, [r3, #4]
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d3e4      	bcc.n	800b0c2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f005 f9b7 	bl	8010470 <USB_ReadInterrupts>
 800b102:	4603      	mov	r3, r0
 800b104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b10c:	d13c      	bne.n	800b188 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b10e:	2301      	movs	r3, #1
 800b110:	627b      	str	r3, [r7, #36]	; 0x24
 800b112:	e02b      	b.n	800b16c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b124:	6879      	ldr	r1, [r7, #4]
 800b126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b128:	4613      	mov	r3, r2
 800b12a:	00db      	lsls	r3, r3, #3
 800b12c:	4413      	add	r3, r2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	440b      	add	r3, r1
 800b132:	3318      	adds	r3, #24
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	2b01      	cmp	r3, #1
 800b138:	d115      	bne.n	800b166 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b13a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	da12      	bge.n	800b166 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b140:	6879      	ldr	r1, [r7, #4]
 800b142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b144:	4613      	mov	r3, r2
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	440b      	add	r3, r1
 800b14e:	3317      	adds	r3, #23
 800b150:	2201      	movs	r2, #1
 800b152:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b156:	b2db      	uxtb	r3, r3
 800b158:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	4619      	mov	r1, r3
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fac8 	bl	800b6f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b168:	3301      	adds	r3, #1
 800b16a:	627b      	str	r3, [r7, #36]	; 0x24
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	791b      	ldrb	r3, [r3, #4]
 800b170:	461a      	mov	r2, r3
 800b172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b174:	4293      	cmp	r3, r2
 800b176:	d3cd      	bcc.n	800b114 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	695a      	ldr	r2, [r3, #20]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b186:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4618      	mov	r0, r3
 800b18e:	f005 f96f 	bl	8010470 <USB_ReadInterrupts>
 800b192:	4603      	mov	r3, r0
 800b194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b19c:	d156      	bne.n	800b24c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b19e:	2301      	movs	r3, #1
 800b1a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b1a2:	e045      	b.n	800b230 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a6:	015a      	lsls	r2, r3, #5
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b1b4:	6879      	ldr	r1, [r7, #4]
 800b1b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	00db      	lsls	r3, r3, #3
 800b1bc:	4413      	add	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	440b      	add	r3, r1
 800b1c2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d12e      	bne.n	800b22a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b1cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	da2b      	bge.n	800b22a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800b1de:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d121      	bne.n	800b22a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b1e6:	6879      	ldr	r1, [r7, #4]
 800b1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	00db      	lsls	r3, r3, #3
 800b1ee:	4413      	add	r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	440b      	add	r3, r1
 800b1f4:	f203 2357 	addw	r3, r3, #599	; 0x257
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b1fc:	6a3b      	ldr	r3, [r7, #32]
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b204:	6a3b      	ldr	r3, [r7, #32]
 800b206:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	695b      	ldr	r3, [r3, #20]
 800b20c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10a      	bne.n	800b22a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	69fa      	ldr	r2, [r7, #28]
 800b21e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b226:	6053      	str	r3, [r2, #4]
            break;
 800b228:	e008      	b.n	800b23c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22c:	3301      	adds	r3, #1
 800b22e:	627b      	str	r3, [r7, #36]	; 0x24
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	791b      	ldrb	r3, [r3, #4]
 800b234:	461a      	mov	r2, r3
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	4293      	cmp	r3, r2
 800b23a:	d3b3      	bcc.n	800b1a4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	695a      	ldr	r2, [r3, #20]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b24a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4618      	mov	r0, r3
 800b252:	f005 f90d 	bl	8010470 <USB_ReadInterrupts>
 800b256:	4603      	mov	r3, r0
 800b258:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b25c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b260:	d10a      	bne.n	800b278 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f00b fdae 	bl	8016dc4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	695a      	ldr	r2, [r3, #20]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b276:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4618      	mov	r0, r3
 800b27e:	f005 f8f7 	bl	8010470 <USB_ReadInterrupts>
 800b282:	4603      	mov	r3, r0
 800b284:	f003 0304 	and.w	r3, r3, #4
 800b288:	2b04      	cmp	r3, #4
 800b28a:	d115      	bne.n	800b2b8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	f003 0304 	and.w	r3, r3, #4
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d002      	beq.n	800b2a4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f00b fd9e 	bl	8016de0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	6859      	ldr	r1, [r3, #4]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	69ba      	ldr	r2, [r7, #24]
 800b2b0:	430a      	orrs	r2, r1
 800b2b2:	605a      	str	r2, [r3, #4]
 800b2b4:	e000      	b.n	800b2b8 <HAL_PCD_IRQHandler+0x93c>
      return;
 800b2b6:	bf00      	nop
    }
  }
}
 800b2b8:	3734      	adds	r7, #52	; 0x34
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd90      	pop	{r4, r7, pc}

0800b2be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b082      	sub	sp, #8
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d101      	bne.n	800b2d8 <HAL_PCD_SetAddress+0x1a>
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	e012      	b.n	800b2fe <HAL_PCD_SetAddress+0x40>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	78fa      	ldrb	r2, [r7, #3]
 800b2e4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	78fa      	ldrb	r2, [r7, #3]
 800b2ec:	4611      	mov	r1, r2
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f005 f856 	bl	80103a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3708      	adds	r7, #8
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b084      	sub	sp, #16
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
 800b30e:	4608      	mov	r0, r1
 800b310:	4611      	mov	r1, r2
 800b312:	461a      	mov	r2, r3
 800b314:	4603      	mov	r3, r0
 800b316:	70fb      	strb	r3, [r7, #3]
 800b318:	460b      	mov	r3, r1
 800b31a:	803b      	strh	r3, [r7, #0]
 800b31c:	4613      	mov	r3, r2
 800b31e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b320:	2300      	movs	r3, #0
 800b322:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	da0f      	bge.n	800b34c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b32c:	78fb      	ldrb	r3, [r7, #3]
 800b32e:	f003 020f 	and.w	r2, r3, #15
 800b332:	4613      	mov	r3, r2
 800b334:	00db      	lsls	r3, r3, #3
 800b336:	4413      	add	r3, r2
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	3310      	adds	r3, #16
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	4413      	add	r3, r2
 800b340:	3304      	adds	r3, #4
 800b342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2201      	movs	r2, #1
 800b348:	705a      	strb	r2, [r3, #1]
 800b34a:	e00f      	b.n	800b36c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b34c:	78fb      	ldrb	r3, [r7, #3]
 800b34e:	f003 020f 	and.w	r2, r3, #15
 800b352:	4613      	mov	r3, r2
 800b354:	00db      	lsls	r3, r3, #3
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	4413      	add	r3, r2
 800b362:	3304      	adds	r3, #4
 800b364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b36c:	78fb      	ldrb	r3, [r7, #3]
 800b36e:	f003 030f 	and.w	r3, r3, #15
 800b372:	b2da      	uxtb	r2, r3
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b378:	883a      	ldrh	r2, [r7, #0]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	78ba      	ldrb	r2, [r7, #2]
 800b382:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	785b      	ldrb	r3, [r3, #1]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d004      	beq.n	800b396 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	b29a      	uxth	r2, r3
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b396:	78bb      	ldrb	r3, [r7, #2]
 800b398:	2b02      	cmp	r3, #2
 800b39a:	d102      	bne.n	800b3a2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d101      	bne.n	800b3b0 <HAL_PCD_EP_Open+0xaa>
 800b3ac:	2302      	movs	r3, #2
 800b3ae:	e00e      	b.n	800b3ce <HAL_PCD_EP_Open+0xc8>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68f9      	ldr	r1, [r7, #12]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f004 f9de 	bl	800f780 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800b3cc:	7afb      	ldrb	r3, [r7, #11]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b084      	sub	sp, #16
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	460b      	mov	r3, r1
 800b3e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b3e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	da0f      	bge.n	800b40a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b3ea:	78fb      	ldrb	r3, [r7, #3]
 800b3ec:	f003 020f 	and.w	r2, r3, #15
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	00db      	lsls	r3, r3, #3
 800b3f4:	4413      	add	r3, r2
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	3310      	adds	r3, #16
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	3304      	adds	r3, #4
 800b400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2201      	movs	r2, #1
 800b406:	705a      	strb	r2, [r3, #1]
 800b408:	e00f      	b.n	800b42a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b40a:	78fb      	ldrb	r3, [r7, #3]
 800b40c:	f003 020f 	and.w	r2, r3, #15
 800b410:	4613      	mov	r3, r2
 800b412:	00db      	lsls	r3, r3, #3
 800b414:	4413      	add	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	4413      	add	r3, r2
 800b420:	3304      	adds	r3, #4
 800b422:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b42a:	78fb      	ldrb	r3, [r7, #3]
 800b42c:	f003 030f 	and.w	r3, r3, #15
 800b430:	b2da      	uxtb	r2, r3
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d101      	bne.n	800b444 <HAL_PCD_EP_Close+0x6e>
 800b440:	2302      	movs	r3, #2
 800b442:	e00e      	b.n	800b462 <HAL_PCD_EP_Close+0x8c>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	68f9      	ldr	r1, [r7, #12]
 800b452:	4618      	mov	r0, r3
 800b454:	f004 fa1c 	bl	800f890 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b086      	sub	sp, #24
 800b46e:	af00      	add	r7, sp, #0
 800b470:	60f8      	str	r0, [r7, #12]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	603b      	str	r3, [r7, #0]
 800b476:	460b      	mov	r3, r1
 800b478:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b47a:	7afb      	ldrb	r3, [r7, #11]
 800b47c:	f003 020f 	and.w	r2, r3, #15
 800b480:	4613      	mov	r3, r2
 800b482:	00db      	lsls	r3, r3, #3
 800b484:	4413      	add	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	4413      	add	r3, r2
 800b490:	3304      	adds	r3, #4
 800b492:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	683a      	ldr	r2, [r7, #0]
 800b49e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b4ac:	7afb      	ldrb	r3, [r7, #11]
 800b4ae:	f003 030f 	and.w	r3, r3, #15
 800b4b2:	b2da      	uxtb	r2, r3
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	799b      	ldrb	r3, [r3, #6]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d102      	bne.n	800b4c6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	6818      	ldr	r0, [r3, #0]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	799b      	ldrb	r3, [r3, #6]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	6979      	ldr	r1, [r7, #20]
 800b4d2:	f004 fab9 	bl	800fa48 <USB_EPStartXfer>

  return HAL_OK;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3718      	adds	r7, #24
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b4ec:	78fb      	ldrb	r3, [r7, #3]
 800b4ee:	f003 020f 	and.w	r2, r3, #15
 800b4f2:	6879      	ldr	r1, [r7, #4]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	00db      	lsls	r3, r3, #3
 800b4f8:	4413      	add	r3, r2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	440b      	add	r3, r1
 800b4fe:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800b502:	681b      	ldr	r3, [r3, #0]
}
 800b504:	4618      	mov	r0, r3
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	607a      	str	r2, [r7, #4]
 800b51a:	603b      	str	r3, [r7, #0]
 800b51c:	460b      	mov	r3, r1
 800b51e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b520:	7afb      	ldrb	r3, [r7, #11]
 800b522:	f003 020f 	and.w	r2, r3, #15
 800b526:	4613      	mov	r3, r2
 800b528:	00db      	lsls	r3, r3, #3
 800b52a:	4413      	add	r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	3310      	adds	r3, #16
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	4413      	add	r3, r2
 800b534:	3304      	adds	r3, #4
 800b536:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	683a      	ldr	r2, [r7, #0]
 800b542:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	2200      	movs	r2, #0
 800b548:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2201      	movs	r2, #1
 800b54e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b550:	7afb      	ldrb	r3, [r7, #11]
 800b552:	f003 030f 	and.w	r3, r3, #15
 800b556:	b2da      	uxtb	r2, r3
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	799b      	ldrb	r3, [r3, #6]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d102      	bne.n	800b56a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6818      	ldr	r0, [r3, #0]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	799b      	ldrb	r3, [r3, #6]
 800b572:	461a      	mov	r2, r3
 800b574:	6979      	ldr	r1, [r7, #20]
 800b576:	f004 fa67 	bl	800fa48 <USB_EPStartXfer>

  return HAL_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3718      	adds	r7, #24
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b590:	78fb      	ldrb	r3, [r7, #3]
 800b592:	f003 030f 	and.w	r3, r3, #15
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	7912      	ldrb	r2, [r2, #4]
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d901      	bls.n	800b5a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e04f      	b.n	800b642 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b5a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	da0f      	bge.n	800b5ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b5aa:	78fb      	ldrb	r3, [r7, #3]
 800b5ac:	f003 020f 	and.w	r2, r3, #15
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	00db      	lsls	r3, r3, #3
 800b5b4:	4413      	add	r3, r2
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	3310      	adds	r3, #16
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	4413      	add	r3, r2
 800b5be:	3304      	adds	r3, #4
 800b5c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	705a      	strb	r2, [r3, #1]
 800b5c8:	e00d      	b.n	800b5e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b5ca:	78fa      	ldrb	r2, [r7, #3]
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	00db      	lsls	r3, r3, #3
 800b5d0:	4413      	add	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	4413      	add	r3, r2
 800b5dc:	3304      	adds	r3, #4
 800b5de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b5ec:	78fb      	ldrb	r3, [r7, #3]
 800b5ee:	f003 030f 	and.w	r3, r3, #15
 800b5f2:	b2da      	uxtb	r2, r3
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d101      	bne.n	800b606 <HAL_PCD_EP_SetStall+0x82>
 800b602:	2302      	movs	r3, #2
 800b604:	e01d      	b.n	800b642 <HAL_PCD_EP_SetStall+0xbe>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2201      	movs	r2, #1
 800b60a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	68f9      	ldr	r1, [r7, #12]
 800b614:	4618      	mov	r0, r3
 800b616:	f004 fdef 	bl	80101f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b61a:	78fb      	ldrb	r3, [r7, #3]
 800b61c:	f003 030f 	and.w	r3, r3, #15
 800b620:	2b00      	cmp	r3, #0
 800b622:	d109      	bne.n	800b638 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6818      	ldr	r0, [r3, #0]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	7999      	ldrb	r1, [r3, #6]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b632:	461a      	mov	r2, r3
 800b634:	f004 ffe0 	bl	80105f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b084      	sub	sp, #16
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	460b      	mov	r3, r1
 800b654:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b656:	78fb      	ldrb	r3, [r7, #3]
 800b658:	f003 030f 	and.w	r3, r3, #15
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	7912      	ldrb	r2, [r2, #4]
 800b660:	4293      	cmp	r3, r2
 800b662:	d901      	bls.n	800b668 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	e042      	b.n	800b6ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b668:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	da0f      	bge.n	800b690 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b670:	78fb      	ldrb	r3, [r7, #3]
 800b672:	f003 020f 	and.w	r2, r3, #15
 800b676:	4613      	mov	r3, r2
 800b678:	00db      	lsls	r3, r3, #3
 800b67a:	4413      	add	r3, r2
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	3310      	adds	r3, #16
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	4413      	add	r3, r2
 800b684:	3304      	adds	r3, #4
 800b686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2201      	movs	r2, #1
 800b68c:	705a      	strb	r2, [r3, #1]
 800b68e:	e00f      	b.n	800b6b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b690:	78fb      	ldrb	r3, [r7, #3]
 800b692:	f003 020f 	and.w	r2, r3, #15
 800b696:	4613      	mov	r3, r2
 800b698:	00db      	lsls	r3, r3, #3
 800b69a:	4413      	add	r3, r2
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	3304      	adds	r3, #4
 800b6a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b6b6:	78fb      	ldrb	r3, [r7, #3]
 800b6b8:	f003 030f 	and.w	r3, r3, #15
 800b6bc:	b2da      	uxtb	r2, r3
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d101      	bne.n	800b6d0 <HAL_PCD_EP_ClrStall+0x86>
 800b6cc:	2302      	movs	r3, #2
 800b6ce:	e00e      	b.n	800b6ee <HAL_PCD_EP_ClrStall+0xa4>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68f9      	ldr	r1, [r7, #12]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f004 fdf8 	bl	80102d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b084      	sub	sp, #16
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	460b      	mov	r3, r1
 800b700:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800b702:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b706:	2b00      	cmp	r3, #0
 800b708:	da0c      	bge.n	800b724 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b70a:	78fb      	ldrb	r3, [r7, #3]
 800b70c:	f003 020f 	and.w	r2, r3, #15
 800b710:	4613      	mov	r3, r2
 800b712:	00db      	lsls	r3, r3, #3
 800b714:	4413      	add	r3, r2
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	3310      	adds	r3, #16
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	4413      	add	r3, r2
 800b71e:	3304      	adds	r3, #4
 800b720:	60fb      	str	r3, [r7, #12]
 800b722:	e00c      	b.n	800b73e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b724:	78fb      	ldrb	r3, [r7, #3]
 800b726:	f003 020f 	and.w	r2, r3, #15
 800b72a:	4613      	mov	r3, r2
 800b72c:	00db      	lsls	r3, r3, #3
 800b72e:	4413      	add	r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	4413      	add	r3, r2
 800b73a:	3304      	adds	r3, #4
 800b73c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68f9      	ldr	r1, [r7, #12]
 800b744:	4618      	mov	r0, r3
 800b746:	f004 fc17 	bl	800ff78 <USB_EPStopXfer>
 800b74a:	4603      	mov	r3, r0
 800b74c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800b74e:	7afb      	ldrb	r3, [r7, #11]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b08a      	sub	sp, #40	; 0x28
 800b75c:	af02      	add	r7, sp, #8
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	4613      	mov	r3, r2
 800b770:	00db      	lsls	r3, r3, #3
 800b772:	4413      	add	r3, r2
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	3310      	adds	r3, #16
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	4413      	add	r3, r2
 800b77c:	3304      	adds	r3, #4
 800b77e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	695a      	ldr	r2, [r3, #20]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	691b      	ldr	r3, [r3, #16]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d901      	bls.n	800b790 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b78c:	2301      	movs	r3, #1
 800b78e:	e06b      	b.n	800b868 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	691a      	ldr	r2, [r3, #16]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	695b      	ldr	r3, [r3, #20]
 800b798:	1ad3      	subs	r3, r2, r3
 800b79a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	69fa      	ldr	r2, [r7, #28]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d902      	bls.n	800b7ac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	3303      	adds	r3, #3
 800b7b0:	089b      	lsrs	r3, r3, #2
 800b7b2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b7b4:	e02a      	b.n	800b80c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	691a      	ldr	r2, [r3, #16]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	69fa      	ldr	r2, [r7, #28]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d902      	bls.n	800b7d2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	3303      	adds	r3, #3
 800b7d6:	089b      	lsrs	r3, r3, #2
 800b7d8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	68d9      	ldr	r1, [r3, #12]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	b2da      	uxtb	r2, r3
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	6978      	ldr	r0, [r7, #20]
 800b7f0:	f004 fc6c 	bl	80100cc <USB_WritePacket>

    ep->xfer_buff  += len;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	68da      	ldr	r2, [r3, #12]
 800b7f8:	69fb      	ldr	r3, [r7, #28]
 800b7fa:	441a      	add	r2, r3
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	695a      	ldr	r2, [r3, #20]
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	441a      	add	r2, r3
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	015a      	lsls	r2, r3, #5
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	4413      	add	r3, r2
 800b814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b81c:	69ba      	ldr	r2, [r7, #24]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d809      	bhi.n	800b836 <PCD_WriteEmptyTxFifo+0xde>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	695a      	ldr	r2, [r3, #20]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d203      	bcs.n	800b836 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	691b      	ldr	r3, [r3, #16]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1bf      	bne.n	800b7b6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	691a      	ldr	r2, [r3, #16]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d811      	bhi.n	800b866 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	f003 030f 	and.w	r3, r3, #15
 800b848:	2201      	movs	r2, #1
 800b84a:	fa02 f303 	lsl.w	r3, r2, r3
 800b84e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	43db      	mvns	r3, r3
 800b85c:	6939      	ldr	r1, [r7, #16]
 800b85e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b862:	4013      	ands	r3, r2
 800b864:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b866:	2300      	movs	r3, #0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3720      	adds	r7, #32
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b088      	sub	sp, #32
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	333c      	adds	r3, #60	; 0x3c
 800b888:	3304      	adds	r3, #4
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	015a      	lsls	r2, r3, #5
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	4413      	add	r3, r2
 800b896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	799b      	ldrb	r3, [r3, #6]
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d17b      	bne.n	800b99e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	f003 0308 	and.w	r3, r3, #8
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d015      	beq.n	800b8dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	4a61      	ldr	r2, [pc, #388]	; (800ba38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	f240 80b9 	bls.w	800ba2c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f000 80b3 	beq.w	800ba2c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	015a      	lsls	r2, r3, #5
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8d8:	6093      	str	r3, [r2, #8]
 800b8da:	e0a7      	b.n	800ba2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	f003 0320 	and.w	r3, r3, #32
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d009      	beq.n	800b8fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	015a      	lsls	r2, r3, #5
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	2320      	movs	r3, #32
 800b8f6:	6093      	str	r3, [r2, #8]
 800b8f8:	e098      	b.n	800ba2c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b900:	2b00      	cmp	r3, #0
 800b902:	f040 8093 	bne.w	800ba2c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	4a4b      	ldr	r2, [pc, #300]	; (800ba38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d90f      	bls.n	800b92e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b914:	2b00      	cmp	r3, #0
 800b916:	d00a      	beq.n	800b92e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	015a      	lsls	r2, r3, #5
 800b91c:	69bb      	ldr	r3, [r7, #24]
 800b91e:	4413      	add	r3, r2
 800b920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b924:	461a      	mov	r2, r3
 800b926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b92a:	6093      	str	r3, [r2, #8]
 800b92c:	e07e      	b.n	800ba2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800b92e:	683a      	ldr	r2, [r7, #0]
 800b930:	4613      	mov	r3, r2
 800b932:	00db      	lsls	r3, r3, #3
 800b934:	4413      	add	r3, r2
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	4413      	add	r3, r2
 800b940:	3304      	adds	r3, #4
 800b942:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6a1a      	ldr	r2, [r3, #32]
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	0159      	lsls	r1, r3, #5
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	440b      	add	r3, r1
 800b950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b954:	691b      	ldr	r3, [r3, #16]
 800b956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b95a:	1ad2      	subs	r2, r2, r3
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d114      	bne.n	800b990 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	691b      	ldr	r3, [r3, #16]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d109      	bne.n	800b982 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6818      	ldr	r0, [r3, #0]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b978:	461a      	mov	r2, r3
 800b97a:	2101      	movs	r1, #1
 800b97c:	f004 fe3c 	bl	80105f8 <USB_EP0_OutStart>
 800b980:	e006      	b.n	800b990 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	68da      	ldr	r2, [r3, #12]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	695b      	ldr	r3, [r3, #20]
 800b98a:	441a      	add	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	b2db      	uxtb	r3, r3
 800b994:	4619      	mov	r1, r3
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f00b f95a 	bl	8016c50 <HAL_PCD_DataOutStageCallback>
 800b99c:	e046      	b.n	800ba2c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	4a26      	ldr	r2, [pc, #152]	; (800ba3c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d124      	bne.n	800b9f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00a      	beq.n	800b9c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	015a      	lsls	r2, r3, #5
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9bc:	461a      	mov	r2, r3
 800b9be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9c2:	6093      	str	r3, [r2, #8]
 800b9c4:	e032      	b.n	800ba2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	f003 0320 	and.w	r3, r3, #32
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d008      	beq.n	800b9e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	015a      	lsls	r2, r3, #5
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9dc:	461a      	mov	r2, r3
 800b9de:	2320      	movs	r3, #32
 800b9e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f00b f931 	bl	8016c50 <HAL_PCD_DataOutStageCallback>
 800b9ee:	e01d      	b.n	800ba2c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d114      	bne.n	800ba20 <PCD_EP_OutXfrComplete_int+0x1b0>
 800b9f6:	6879      	ldr	r1, [r7, #4]
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	00db      	lsls	r3, r3, #3
 800b9fe:	4413      	add	r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	440b      	add	r3, r1
 800ba04:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d108      	bne.n	800ba20 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6818      	ldr	r0, [r3, #0]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800ba18:	461a      	mov	r2, r3
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	f004 fdec 	bl	80105f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	4619      	mov	r1, r3
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f00b f912 	bl	8016c50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3720      	adds	r7, #32
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	4f54300a 	.word	0x4f54300a
 800ba3c:	4f54310a 	.word	0x4f54310a

0800ba40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b086      	sub	sp, #24
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	333c      	adds	r3, #60	; 0x3c
 800ba58:	3304      	adds	r3, #4
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	015a      	lsls	r2, r3, #5
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	4413      	add	r3, r2
 800ba66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	4a15      	ldr	r2, [pc, #84]	; (800bac8 <PCD_EP_OutSetupPacket_int+0x88>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d90e      	bls.n	800ba94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d009      	beq.n	800ba94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	015a      	lsls	r2, r3, #5
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	4413      	add	r3, r2
 800ba88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f00b f8c9 	bl	8016c2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	4a0a      	ldr	r2, [pc, #40]	; (800bac8 <PCD_EP_OutSetupPacket_int+0x88>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d90c      	bls.n	800babc <PCD_EP_OutSetupPacket_int+0x7c>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	799b      	ldrb	r3, [r3, #6]
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d108      	bne.n	800babc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6818      	ldr	r0, [r3, #0]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800bab4:	461a      	mov	r2, r3
 800bab6:	2101      	movs	r1, #1
 800bab8:	f004 fd9e 	bl	80105f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3718      	adds	r7, #24
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	4f54300a 	.word	0x4f54300a

0800bacc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bacc:	b480      	push	{r7}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	460b      	mov	r3, r1
 800bad6:	70fb      	strb	r3, [r7, #3]
 800bad8:	4613      	mov	r3, r2
 800bada:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bae4:	78fb      	ldrb	r3, [r7, #3]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d107      	bne.n	800bafa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800baea:	883b      	ldrh	r3, [r7, #0]
 800baec:	0419      	lsls	r1, r3, #16
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	68ba      	ldr	r2, [r7, #8]
 800baf4:	430a      	orrs	r2, r1
 800baf6:	629a      	str	r2, [r3, #40]	; 0x28
 800baf8:	e028      	b.n	800bb4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb00:	0c1b      	lsrs	r3, r3, #16
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	4413      	add	r3, r2
 800bb06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bb08:	2300      	movs	r3, #0
 800bb0a:	73fb      	strb	r3, [r7, #15]
 800bb0c:	e00d      	b.n	800bb2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
 800bb14:	3340      	adds	r3, #64	; 0x40
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	4413      	add	r3, r2
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	0c1b      	lsrs	r3, r3, #16
 800bb1e:	68ba      	ldr	r2, [r7, #8]
 800bb20:	4413      	add	r3, r2
 800bb22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bb24:	7bfb      	ldrb	r3, [r7, #15]
 800bb26:	3301      	adds	r3, #1
 800bb28:	73fb      	strb	r3, [r7, #15]
 800bb2a:	7bfa      	ldrb	r2, [r7, #15]
 800bb2c:	78fb      	ldrb	r3, [r7, #3]
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d3ec      	bcc.n	800bb0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bb34:	883b      	ldrh	r3, [r7, #0]
 800bb36:	0418      	lsls	r0, r3, #16
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6819      	ldr	r1, [r3, #0]
 800bb3c:	78fb      	ldrb	r3, [r7, #3]
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	4302      	orrs	r2, r0
 800bb44:	3340      	adds	r3, #64	; 0x40
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	440b      	add	r3, r1
 800bb4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3714      	adds	r7, #20
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	b083      	sub	sp, #12
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	460b      	mov	r3, r1
 800bb64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	887a      	ldrh	r2, [r7, #2]
 800bb6c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bb6e:	2300      	movs	r3, #0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	460b      	mov	r3, r1
 800bb86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800bb88:	bf00      	nop
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b086      	sub	sp, #24
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d101      	bne.n	800bba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	e267      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f003 0301 	and.w	r3, r3, #1
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d075      	beq.n	800bc9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bbb2:	4b88      	ldr	r3, [pc, #544]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	f003 030c 	and.w	r3, r3, #12
 800bbba:	2b04      	cmp	r3, #4
 800bbbc:	d00c      	beq.n	800bbd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bbbe:	4b85      	ldr	r3, [pc, #532]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bbc6:	2b08      	cmp	r3, #8
 800bbc8:	d112      	bne.n	800bbf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bbca:	4b82      	ldr	r3, [pc, #520]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbd6:	d10b      	bne.n	800bbf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbd8:	4b7e      	ldr	r3, [pc, #504]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d05b      	beq.n	800bc9c <HAL_RCC_OscConfig+0x108>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d157      	bne.n	800bc9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	e242      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbf8:	d106      	bne.n	800bc08 <HAL_RCC_OscConfig+0x74>
 800bbfa:	4b76      	ldr	r3, [pc, #472]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a75      	ldr	r2, [pc, #468]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bc00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc04:	6013      	str	r3, [r2, #0]
 800bc06:	e01d      	b.n	800bc44 <HAL_RCC_OscConfig+0xb0>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc10:	d10c      	bne.n	800bc2c <HAL_RCC_OscConfig+0x98>
 800bc12:	4b70      	ldr	r3, [pc, #448]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a6f      	ldr	r2, [pc, #444]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bc18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc1c:	6013      	str	r3, [r2, #0]
 800bc1e:	4b6d      	ldr	r3, [pc, #436]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a6c      	ldr	r2, [pc, #432]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bc24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc28:	6013      	str	r3, [r2, #0]
 800bc2a:	e00b      	b.n	800bc44 <HAL_RCC_OscConfig+0xb0>
 800bc2c:	4b69      	ldr	r3, [pc, #420]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a68      	ldr	r2, [pc, #416]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bc32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc36:	6013      	str	r3, [r2, #0]
 800bc38:	4b66      	ldr	r3, [pc, #408]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a65      	ldr	r2, [pc, #404]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bc3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d013      	beq.n	800bc74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc4c:	f7fa fb5e 	bl	800630c <HAL_GetTick>
 800bc50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc52:	e008      	b.n	800bc66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc54:	f7fa fb5a 	bl	800630c <HAL_GetTick>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	1ad3      	subs	r3, r2, r3
 800bc5e:	2b64      	cmp	r3, #100	; 0x64
 800bc60:	d901      	bls.n	800bc66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bc62:	2303      	movs	r3, #3
 800bc64:	e207      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc66:	4b5b      	ldr	r3, [pc, #364]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d0f0      	beq.n	800bc54 <HAL_RCC_OscConfig+0xc0>
 800bc72:	e014      	b.n	800bc9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc74:	f7fa fb4a 	bl	800630c <HAL_GetTick>
 800bc78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc7a:	e008      	b.n	800bc8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc7c:	f7fa fb46 	bl	800630c <HAL_GetTick>
 800bc80:	4602      	mov	r2, r0
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	2b64      	cmp	r3, #100	; 0x64
 800bc88:	d901      	bls.n	800bc8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bc8a:	2303      	movs	r3, #3
 800bc8c:	e1f3      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc8e:	4b51      	ldr	r3, [pc, #324]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1f0      	bne.n	800bc7c <HAL_RCC_OscConfig+0xe8>
 800bc9a:	e000      	b.n	800bc9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f003 0302 	and.w	r3, r3, #2
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d063      	beq.n	800bd72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bcaa:	4b4a      	ldr	r3, [pc, #296]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	f003 030c 	and.w	r3, r3, #12
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00b      	beq.n	800bcce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bcb6:	4b47      	ldr	r3, [pc, #284]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bcbe:	2b08      	cmp	r3, #8
 800bcc0:	d11c      	bne.n	800bcfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bcc2:	4b44      	ldr	r3, [pc, #272]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d116      	bne.n	800bcfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bcce:	4b41      	ldr	r3, [pc, #260]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f003 0302 	and.w	r3, r3, #2
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d005      	beq.n	800bce6 <HAL_RCC_OscConfig+0x152>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d001      	beq.n	800bce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bce2:	2301      	movs	r3, #1
 800bce4:	e1c7      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bce6:	4b3b      	ldr	r3, [pc, #236]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	00db      	lsls	r3, r3, #3
 800bcf4:	4937      	ldr	r1, [pc, #220]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bcfa:	e03a      	b.n	800bd72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d020      	beq.n	800bd46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bd04:	4b34      	ldr	r3, [pc, #208]	; (800bdd8 <HAL_RCC_OscConfig+0x244>)
 800bd06:	2201      	movs	r2, #1
 800bd08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd0a:	f7fa faff 	bl	800630c <HAL_GetTick>
 800bd0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd10:	e008      	b.n	800bd24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bd12:	f7fa fafb 	bl	800630c <HAL_GetTick>
 800bd16:	4602      	mov	r2, r0
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d901      	bls.n	800bd24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bd20:	2303      	movs	r3, #3
 800bd22:	e1a8      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd24:	4b2b      	ldr	r3, [pc, #172]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f003 0302 	and.w	r3, r3, #2
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d0f0      	beq.n	800bd12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd30:	4b28      	ldr	r3, [pc, #160]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	00db      	lsls	r3, r3, #3
 800bd3e:	4925      	ldr	r1, [pc, #148]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bd40:	4313      	orrs	r3, r2
 800bd42:	600b      	str	r3, [r1, #0]
 800bd44:	e015      	b.n	800bd72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bd46:	4b24      	ldr	r3, [pc, #144]	; (800bdd8 <HAL_RCC_OscConfig+0x244>)
 800bd48:	2200      	movs	r2, #0
 800bd4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd4c:	f7fa fade 	bl	800630c <HAL_GetTick>
 800bd50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd52:	e008      	b.n	800bd66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bd54:	f7fa fada 	bl	800630c <HAL_GetTick>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	1ad3      	subs	r3, r2, r3
 800bd5e:	2b02      	cmp	r3, #2
 800bd60:	d901      	bls.n	800bd66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bd62:	2303      	movs	r3, #3
 800bd64:	e187      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd66:	4b1b      	ldr	r3, [pc, #108]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f003 0302 	and.w	r3, r3, #2
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d1f0      	bne.n	800bd54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f003 0308 	and.w	r3, r3, #8
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d036      	beq.n	800bdec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	695b      	ldr	r3, [r3, #20]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d016      	beq.n	800bdb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bd86:	4b15      	ldr	r3, [pc, #84]	; (800bddc <HAL_RCC_OscConfig+0x248>)
 800bd88:	2201      	movs	r2, #1
 800bd8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd8c:	f7fa fabe 	bl	800630c <HAL_GetTick>
 800bd90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd92:	e008      	b.n	800bda6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd94:	f7fa faba 	bl	800630c <HAL_GetTick>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	d901      	bls.n	800bda6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bda2:	2303      	movs	r3, #3
 800bda4:	e167      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bda6:	4b0b      	ldr	r3, [pc, #44]	; (800bdd4 <HAL_RCC_OscConfig+0x240>)
 800bda8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdaa:	f003 0302 	and.w	r3, r3, #2
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d0f0      	beq.n	800bd94 <HAL_RCC_OscConfig+0x200>
 800bdb2:	e01b      	b.n	800bdec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bdb4:	4b09      	ldr	r3, [pc, #36]	; (800bddc <HAL_RCC_OscConfig+0x248>)
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bdba:	f7fa faa7 	bl	800630c <HAL_GetTick>
 800bdbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bdc0:	e00e      	b.n	800bde0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bdc2:	f7fa faa3 	bl	800630c <HAL_GetTick>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	2b02      	cmp	r3, #2
 800bdce:	d907      	bls.n	800bde0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800bdd0:	2303      	movs	r3, #3
 800bdd2:	e150      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
 800bdd4:	40023800 	.word	0x40023800
 800bdd8:	42470000 	.word	0x42470000
 800bddc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bde0:	4b88      	ldr	r3, [pc, #544]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800bde2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bde4:	f003 0302 	and.w	r3, r3, #2
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1ea      	bne.n	800bdc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f003 0304 	and.w	r3, r3, #4
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f000 8097 	beq.w	800bf28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bdfe:	4b81      	ldr	r3, [pc, #516]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800be00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10f      	bne.n	800be2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800be0a:	2300      	movs	r3, #0
 800be0c:	60bb      	str	r3, [r7, #8]
 800be0e:	4b7d      	ldr	r3, [pc, #500]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800be10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be12:	4a7c      	ldr	r2, [pc, #496]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800be14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be18:	6413      	str	r3, [r2, #64]	; 0x40
 800be1a:	4b7a      	ldr	r3, [pc, #488]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800be1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be22:	60bb      	str	r3, [r7, #8]
 800be24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800be26:	2301      	movs	r3, #1
 800be28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be2a:	4b77      	ldr	r3, [pc, #476]	; (800c008 <HAL_RCC_OscConfig+0x474>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be32:	2b00      	cmp	r3, #0
 800be34:	d118      	bne.n	800be68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800be36:	4b74      	ldr	r3, [pc, #464]	; (800c008 <HAL_RCC_OscConfig+0x474>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4a73      	ldr	r2, [pc, #460]	; (800c008 <HAL_RCC_OscConfig+0x474>)
 800be3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800be42:	f7fa fa63 	bl	800630c <HAL_GetTick>
 800be46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be48:	e008      	b.n	800be5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be4a:	f7fa fa5f 	bl	800630c <HAL_GetTick>
 800be4e:	4602      	mov	r2, r0
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	1ad3      	subs	r3, r2, r3
 800be54:	2b02      	cmp	r3, #2
 800be56:	d901      	bls.n	800be5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800be58:	2303      	movs	r3, #3
 800be5a:	e10c      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be5c:	4b6a      	ldr	r3, [pc, #424]	; (800c008 <HAL_RCC_OscConfig+0x474>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be64:	2b00      	cmp	r3, #0
 800be66:	d0f0      	beq.n	800be4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d106      	bne.n	800be7e <HAL_RCC_OscConfig+0x2ea>
 800be70:	4b64      	ldr	r3, [pc, #400]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800be72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be74:	4a63      	ldr	r2, [pc, #396]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800be76:	f043 0301 	orr.w	r3, r3, #1
 800be7a:	6713      	str	r3, [r2, #112]	; 0x70
 800be7c:	e01c      	b.n	800beb8 <HAL_RCC_OscConfig+0x324>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	2b05      	cmp	r3, #5
 800be84:	d10c      	bne.n	800bea0 <HAL_RCC_OscConfig+0x30c>
 800be86:	4b5f      	ldr	r3, [pc, #380]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800be88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be8a:	4a5e      	ldr	r2, [pc, #376]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800be8c:	f043 0304 	orr.w	r3, r3, #4
 800be90:	6713      	str	r3, [r2, #112]	; 0x70
 800be92:	4b5c      	ldr	r3, [pc, #368]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800be94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be96:	4a5b      	ldr	r2, [pc, #364]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800be98:	f043 0301 	orr.w	r3, r3, #1
 800be9c:	6713      	str	r3, [r2, #112]	; 0x70
 800be9e:	e00b      	b.n	800beb8 <HAL_RCC_OscConfig+0x324>
 800bea0:	4b58      	ldr	r3, [pc, #352]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800bea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bea4:	4a57      	ldr	r2, [pc, #348]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800bea6:	f023 0301 	bic.w	r3, r3, #1
 800beaa:	6713      	str	r3, [r2, #112]	; 0x70
 800beac:	4b55      	ldr	r3, [pc, #340]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800beae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb0:	4a54      	ldr	r2, [pc, #336]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800beb2:	f023 0304 	bic.w	r3, r3, #4
 800beb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d015      	beq.n	800beec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bec0:	f7fa fa24 	bl	800630c <HAL_GetTick>
 800bec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bec6:	e00a      	b.n	800bede <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bec8:	f7fa fa20 	bl	800630c <HAL_GetTick>
 800becc:	4602      	mov	r2, r0
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	1ad3      	subs	r3, r2, r3
 800bed2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d901      	bls.n	800bede <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800beda:	2303      	movs	r3, #3
 800bedc:	e0cb      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bede:	4b49      	ldr	r3, [pc, #292]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800bee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bee2:	f003 0302 	and.w	r3, r3, #2
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d0ee      	beq.n	800bec8 <HAL_RCC_OscConfig+0x334>
 800beea:	e014      	b.n	800bf16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800beec:	f7fa fa0e 	bl	800630c <HAL_GetTick>
 800bef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bef2:	e00a      	b.n	800bf0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bef4:	f7fa fa0a 	bl	800630c <HAL_GetTick>
 800bef8:	4602      	mov	r2, r0
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	1ad3      	subs	r3, r2, r3
 800befe:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d901      	bls.n	800bf0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800bf06:	2303      	movs	r3, #3
 800bf08:	e0b5      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bf0a:	4b3e      	ldr	r3, [pc, #248]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800bf0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf0e:	f003 0302 	and.w	r3, r3, #2
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1ee      	bne.n	800bef4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bf16:	7dfb      	ldrb	r3, [r7, #23]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d105      	bne.n	800bf28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bf1c:	4b39      	ldr	r3, [pc, #228]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800bf1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf20:	4a38      	ldr	r2, [pc, #224]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800bf22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	699b      	ldr	r3, [r3, #24]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f000 80a1 	beq.w	800c074 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bf32:	4b34      	ldr	r3, [pc, #208]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	f003 030c 	and.w	r3, r3, #12
 800bf3a:	2b08      	cmp	r3, #8
 800bf3c:	d05c      	beq.n	800bff8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	699b      	ldr	r3, [r3, #24]
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d141      	bne.n	800bfca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf46:	4b31      	ldr	r3, [pc, #196]	; (800c00c <HAL_RCC_OscConfig+0x478>)
 800bf48:	2200      	movs	r2, #0
 800bf4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf4c:	f7fa f9de 	bl	800630c <HAL_GetTick>
 800bf50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf52:	e008      	b.n	800bf66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf54:	f7fa f9da 	bl	800630c <HAL_GetTick>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	1ad3      	subs	r3, r2, r3
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d901      	bls.n	800bf66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800bf62:	2303      	movs	r3, #3
 800bf64:	e087      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf66:	4b27      	ldr	r3, [pc, #156]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1f0      	bne.n	800bf54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	69da      	ldr	r2, [r3, #28]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a1b      	ldr	r3, [r3, #32]
 800bf7a:	431a      	orrs	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf80:	019b      	lsls	r3, r3, #6
 800bf82:	431a      	orrs	r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf88:	085b      	lsrs	r3, r3, #1
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	041b      	lsls	r3, r3, #16
 800bf8e:	431a      	orrs	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf94:	061b      	lsls	r3, r3, #24
 800bf96:	491b      	ldr	r1, [pc, #108]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bf9c:	4b1b      	ldr	r3, [pc, #108]	; (800c00c <HAL_RCC_OscConfig+0x478>)
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfa2:	f7fa f9b3 	bl	800630c <HAL_GetTick>
 800bfa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bfa8:	e008      	b.n	800bfbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bfaa:	f7fa f9af 	bl	800630c <HAL_GetTick>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	1ad3      	subs	r3, r2, r3
 800bfb4:	2b02      	cmp	r3, #2
 800bfb6:	d901      	bls.n	800bfbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bfb8:	2303      	movs	r3, #3
 800bfba:	e05c      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bfbc:	4b11      	ldr	r3, [pc, #68]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d0f0      	beq.n	800bfaa <HAL_RCC_OscConfig+0x416>
 800bfc8:	e054      	b.n	800c074 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bfca:	4b10      	ldr	r3, [pc, #64]	; (800c00c <HAL_RCC_OscConfig+0x478>)
 800bfcc:	2200      	movs	r2, #0
 800bfce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfd0:	f7fa f99c 	bl	800630c <HAL_GetTick>
 800bfd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bfd6:	e008      	b.n	800bfea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bfd8:	f7fa f998 	bl	800630c <HAL_GetTick>
 800bfdc:	4602      	mov	r2, r0
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	1ad3      	subs	r3, r2, r3
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d901      	bls.n	800bfea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800bfe6:	2303      	movs	r3, #3
 800bfe8:	e045      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bfea:	4b06      	ldr	r3, [pc, #24]	; (800c004 <HAL_RCC_OscConfig+0x470>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1f0      	bne.n	800bfd8 <HAL_RCC_OscConfig+0x444>
 800bff6:	e03d      	b.n	800c074 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	699b      	ldr	r3, [r3, #24]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d107      	bne.n	800c010 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	e038      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
 800c004:	40023800 	.word	0x40023800
 800c008:	40007000 	.word	0x40007000
 800c00c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c010:	4b1b      	ldr	r3, [pc, #108]	; (800c080 <HAL_RCC_OscConfig+0x4ec>)
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	699b      	ldr	r3, [r3, #24]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d028      	beq.n	800c070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c028:	429a      	cmp	r2, r3
 800c02a:	d121      	bne.n	800c070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c036:	429a      	cmp	r2, r3
 800c038:	d11a      	bne.n	800c070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c040:	4013      	ands	r3, r2
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c048:	4293      	cmp	r3, r2
 800c04a:	d111      	bne.n	800c070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c056:	085b      	lsrs	r3, r3, #1
 800c058:	3b01      	subs	r3, #1
 800c05a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d107      	bne.n	800c070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d001      	beq.n	800c074 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800c070:	2301      	movs	r3, #1
 800c072:	e000      	b.n	800c076 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c074:	2300      	movs	r3, #0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3718      	adds	r7, #24
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	40023800 	.word	0x40023800

0800c084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d101      	bne.n	800c098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c094:	2301      	movs	r3, #1
 800c096:	e0cc      	b.n	800c232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c098:	4b68      	ldr	r3, [pc, #416]	; (800c23c <HAL_RCC_ClockConfig+0x1b8>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f003 0307 	and.w	r3, r3, #7
 800c0a0:	683a      	ldr	r2, [r7, #0]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d90c      	bls.n	800c0c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0a6:	4b65      	ldr	r3, [pc, #404]	; (800c23c <HAL_RCC_ClockConfig+0x1b8>)
 800c0a8:	683a      	ldr	r2, [r7, #0]
 800c0aa:	b2d2      	uxtb	r2, r2
 800c0ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0ae:	4b63      	ldr	r3, [pc, #396]	; (800c23c <HAL_RCC_ClockConfig+0x1b8>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f003 0307 	and.w	r3, r3, #7
 800c0b6:	683a      	ldr	r2, [r7, #0]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d001      	beq.n	800c0c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e0b8      	b.n	800c232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f003 0302 	and.w	r3, r3, #2
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d020      	beq.n	800c10e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f003 0304 	and.w	r3, r3, #4
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d005      	beq.n	800c0e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c0d8:	4b59      	ldr	r3, [pc, #356]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	4a58      	ldr	r2, [pc, #352]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c0de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c0e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f003 0308 	and.w	r3, r3, #8
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d005      	beq.n	800c0fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c0f0:	4b53      	ldr	r3, [pc, #332]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	4a52      	ldr	r2, [pc, #328]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c0f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c0fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c0fc:	4b50      	ldr	r3, [pc, #320]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	494d      	ldr	r1, [pc, #308]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c10a:	4313      	orrs	r3, r2
 800c10c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f003 0301 	and.w	r3, r3, #1
 800c116:	2b00      	cmp	r3, #0
 800c118:	d044      	beq.n	800c1a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d107      	bne.n	800c132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c122:	4b47      	ldr	r3, [pc, #284]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d119      	bne.n	800c162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c12e:	2301      	movs	r3, #1
 800c130:	e07f      	b.n	800c232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	2b02      	cmp	r3, #2
 800c138:	d003      	beq.n	800c142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c13e:	2b03      	cmp	r3, #3
 800c140:	d107      	bne.n	800c152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c142:	4b3f      	ldr	r3, [pc, #252]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d109      	bne.n	800c162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c14e:	2301      	movs	r3, #1
 800c150:	e06f      	b.n	800c232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c152:	4b3b      	ldr	r3, [pc, #236]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f003 0302 	and.w	r3, r3, #2
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	e067      	b.n	800c232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c162:	4b37      	ldr	r3, [pc, #220]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	f023 0203 	bic.w	r2, r3, #3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	4934      	ldr	r1, [pc, #208]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c170:	4313      	orrs	r3, r2
 800c172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c174:	f7fa f8ca 	bl	800630c <HAL_GetTick>
 800c178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c17a:	e00a      	b.n	800c192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c17c:	f7fa f8c6 	bl	800630c <HAL_GetTick>
 800c180:	4602      	mov	r2, r0
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	1ad3      	subs	r3, r2, r3
 800c186:	f241 3288 	movw	r2, #5000	; 0x1388
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d901      	bls.n	800c192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c18e:	2303      	movs	r3, #3
 800c190:	e04f      	b.n	800c232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c192:	4b2b      	ldr	r3, [pc, #172]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	f003 020c 	and.w	r2, r3, #12
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d1eb      	bne.n	800c17c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c1a4:	4b25      	ldr	r3, [pc, #148]	; (800c23c <HAL_RCC_ClockConfig+0x1b8>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f003 0307 	and.w	r3, r3, #7
 800c1ac:	683a      	ldr	r2, [r7, #0]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d20c      	bcs.n	800c1cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c1b2:	4b22      	ldr	r3, [pc, #136]	; (800c23c <HAL_RCC_ClockConfig+0x1b8>)
 800c1b4:	683a      	ldr	r2, [r7, #0]
 800c1b6:	b2d2      	uxtb	r2, r2
 800c1b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c1ba:	4b20      	ldr	r3, [pc, #128]	; (800c23c <HAL_RCC_ClockConfig+0x1b8>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f003 0307 	and.w	r3, r3, #7
 800c1c2:	683a      	ldr	r2, [r7, #0]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d001      	beq.n	800c1cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e032      	b.n	800c232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f003 0304 	and.w	r3, r3, #4
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d008      	beq.n	800c1ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c1d8:	4b19      	ldr	r3, [pc, #100]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c1da:	689b      	ldr	r3, [r3, #8]
 800c1dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	4916      	ldr	r1, [pc, #88]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f003 0308 	and.w	r3, r3, #8
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d009      	beq.n	800c20a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c1f6:	4b12      	ldr	r3, [pc, #72]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	691b      	ldr	r3, [r3, #16]
 800c202:	00db      	lsls	r3, r3, #3
 800c204:	490e      	ldr	r1, [pc, #56]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c206:	4313      	orrs	r3, r2
 800c208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c20a:	f000 f821 	bl	800c250 <HAL_RCC_GetSysClockFreq>
 800c20e:	4602      	mov	r2, r0
 800c210:	4b0b      	ldr	r3, [pc, #44]	; (800c240 <HAL_RCC_ClockConfig+0x1bc>)
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	091b      	lsrs	r3, r3, #4
 800c216:	f003 030f 	and.w	r3, r3, #15
 800c21a:	490a      	ldr	r1, [pc, #40]	; (800c244 <HAL_RCC_ClockConfig+0x1c0>)
 800c21c:	5ccb      	ldrb	r3, [r1, r3]
 800c21e:	fa22 f303 	lsr.w	r3, r2, r3
 800c222:	4a09      	ldr	r2, [pc, #36]	; (800c248 <HAL_RCC_ClockConfig+0x1c4>)
 800c224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c226:	4b09      	ldr	r3, [pc, #36]	; (800c24c <HAL_RCC_ClockConfig+0x1c8>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fa f82a 	bl	8006284 <HAL_InitTick>

  return HAL_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	40023c00 	.word	0x40023c00
 800c240:	40023800 	.word	0x40023800
 800c244:	0801ab78 	.word	0x0801ab78
 800c248:	20000040 	.word	0x20000040
 800c24c:	2000009c 	.word	0x2000009c

0800c250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c254:	b090      	sub	sp, #64	; 0x40
 800c256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c258:	2300      	movs	r3, #0
 800c25a:	637b      	str	r3, [r7, #52]	; 0x34
 800c25c:	2300      	movs	r3, #0
 800c25e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c260:	2300      	movs	r3, #0
 800c262:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800c264:	2300      	movs	r3, #0
 800c266:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c268:	4b59      	ldr	r3, [pc, #356]	; (800c3d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	f003 030c 	and.w	r3, r3, #12
 800c270:	2b08      	cmp	r3, #8
 800c272:	d00d      	beq.n	800c290 <HAL_RCC_GetSysClockFreq+0x40>
 800c274:	2b08      	cmp	r3, #8
 800c276:	f200 80a1 	bhi.w	800c3bc <HAL_RCC_GetSysClockFreq+0x16c>
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d002      	beq.n	800c284 <HAL_RCC_GetSysClockFreq+0x34>
 800c27e:	2b04      	cmp	r3, #4
 800c280:	d003      	beq.n	800c28a <HAL_RCC_GetSysClockFreq+0x3a>
 800c282:	e09b      	b.n	800c3bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c284:	4b53      	ldr	r3, [pc, #332]	; (800c3d4 <HAL_RCC_GetSysClockFreq+0x184>)
 800c286:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800c288:	e09b      	b.n	800c3c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c28a:	4b53      	ldr	r3, [pc, #332]	; (800c3d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800c28c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c28e:	e098      	b.n	800c3c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c290:	4b4f      	ldr	r3, [pc, #316]	; (800c3d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c298:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c29a:	4b4d      	ldr	r3, [pc, #308]	; (800c3d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d028      	beq.n	800c2f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c2a6:	4b4a      	ldr	r3, [pc, #296]	; (800c3d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	099b      	lsrs	r3, r3, #6
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	623b      	str	r3, [r7, #32]
 800c2b0:	627a      	str	r2, [r7, #36]	; 0x24
 800c2b2:	6a3b      	ldr	r3, [r7, #32]
 800c2b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	4b47      	ldr	r3, [pc, #284]	; (800c3d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800c2bc:	fb03 f201 	mul.w	r2, r3, r1
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	fb00 f303 	mul.w	r3, r0, r3
 800c2c6:	4413      	add	r3, r2
 800c2c8:	4a43      	ldr	r2, [pc, #268]	; (800c3d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800c2ca:	fba0 1202 	umull	r1, r2, r0, r2
 800c2ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c2d0:	460a      	mov	r2, r1
 800c2d2:	62ba      	str	r2, [r7, #40]	; 0x28
 800c2d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2d6:	4413      	add	r3, r2
 800c2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2dc:	2200      	movs	r2, #0
 800c2de:	61bb      	str	r3, [r7, #24]
 800c2e0:	61fa      	str	r2, [r7, #28]
 800c2e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c2e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c2ea:	f7f4 fcb5 	bl	8000c58 <__aeabi_uldivmod>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	4613      	mov	r3, r2
 800c2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2f6:	e053      	b.n	800c3a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c2f8:	4b35      	ldr	r3, [pc, #212]	; (800c3d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	099b      	lsrs	r3, r3, #6
 800c2fe:	2200      	movs	r2, #0
 800c300:	613b      	str	r3, [r7, #16]
 800c302:	617a      	str	r2, [r7, #20]
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c30a:	f04f 0b00 	mov.w	fp, #0
 800c30e:	4652      	mov	r2, sl
 800c310:	465b      	mov	r3, fp
 800c312:	f04f 0000 	mov.w	r0, #0
 800c316:	f04f 0100 	mov.w	r1, #0
 800c31a:	0159      	lsls	r1, r3, #5
 800c31c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c320:	0150      	lsls	r0, r2, #5
 800c322:	4602      	mov	r2, r0
 800c324:	460b      	mov	r3, r1
 800c326:	ebb2 080a 	subs.w	r8, r2, sl
 800c32a:	eb63 090b 	sbc.w	r9, r3, fp
 800c32e:	f04f 0200 	mov.w	r2, #0
 800c332:	f04f 0300 	mov.w	r3, #0
 800c336:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c33a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c33e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c342:	ebb2 0408 	subs.w	r4, r2, r8
 800c346:	eb63 0509 	sbc.w	r5, r3, r9
 800c34a:	f04f 0200 	mov.w	r2, #0
 800c34e:	f04f 0300 	mov.w	r3, #0
 800c352:	00eb      	lsls	r3, r5, #3
 800c354:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c358:	00e2      	lsls	r2, r4, #3
 800c35a:	4614      	mov	r4, r2
 800c35c:	461d      	mov	r5, r3
 800c35e:	eb14 030a 	adds.w	r3, r4, sl
 800c362:	603b      	str	r3, [r7, #0]
 800c364:	eb45 030b 	adc.w	r3, r5, fp
 800c368:	607b      	str	r3, [r7, #4]
 800c36a:	f04f 0200 	mov.w	r2, #0
 800c36e:	f04f 0300 	mov.w	r3, #0
 800c372:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c376:	4629      	mov	r1, r5
 800c378:	028b      	lsls	r3, r1, #10
 800c37a:	4621      	mov	r1, r4
 800c37c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c380:	4621      	mov	r1, r4
 800c382:	028a      	lsls	r2, r1, #10
 800c384:	4610      	mov	r0, r2
 800c386:	4619      	mov	r1, r3
 800c388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c38a:	2200      	movs	r2, #0
 800c38c:	60bb      	str	r3, [r7, #8]
 800c38e:	60fa      	str	r2, [r7, #12]
 800c390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c394:	f7f4 fc60 	bl	8000c58 <__aeabi_uldivmod>
 800c398:	4602      	mov	r2, r0
 800c39a:	460b      	mov	r3, r1
 800c39c:	4613      	mov	r3, r2
 800c39e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c3a0:	4b0b      	ldr	r3, [pc, #44]	; (800c3d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	0c1b      	lsrs	r3, r3, #16
 800c3a6:	f003 0303 	and.w	r3, r3, #3
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	005b      	lsls	r3, r3, #1
 800c3ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800c3b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c3ba:	e002      	b.n	800c3c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c3bc:	4b05      	ldr	r3, [pc, #20]	; (800c3d4 <HAL_RCC_GetSysClockFreq+0x184>)
 800c3be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c3c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3740      	adds	r7, #64	; 0x40
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c3ce:	bf00      	nop
 800c3d0:	40023800 	.word	0x40023800
 800c3d4:	00f42400 	.word	0x00f42400
 800c3d8:	017d7840 	.word	0x017d7840

0800c3dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c3e0:	4b03      	ldr	r3, [pc, #12]	; (800c3f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	20000040 	.word	0x20000040

0800c3f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c3f8:	f7ff fff0 	bl	800c3dc <HAL_RCC_GetHCLKFreq>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	4b05      	ldr	r3, [pc, #20]	; (800c414 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	0a9b      	lsrs	r3, r3, #10
 800c404:	f003 0307 	and.w	r3, r3, #7
 800c408:	4903      	ldr	r1, [pc, #12]	; (800c418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c40a:	5ccb      	ldrb	r3, [r1, r3]
 800c40c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c410:	4618      	mov	r0, r3
 800c412:	bd80      	pop	{r7, pc}
 800c414:	40023800 	.word	0x40023800
 800c418:	0801ab88 	.word	0x0801ab88

0800c41c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d101      	bne.n	800c42e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c42a:	2301      	movs	r3, #1
 800c42c:	e022      	b.n	800c474 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c434:	b2db      	uxtb	r3, r3
 800c436:	2b00      	cmp	r3, #0
 800c438:	d105      	bne.n	800c446 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f7f9 f851 	bl	80054e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2203      	movs	r2, #3
 800c44a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 f814 	bl	800c47c <HAL_SD_InitCard>
 800c454:	4603      	mov	r3, r0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d001      	beq.n	800c45e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c45a:	2301      	movs	r3, #1
 800c45c:	e00a      	b.n	800c474 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2201      	movs	r2, #1
 800c46e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c47c:	b5b0      	push	{r4, r5, r7, lr}
 800c47e:	b08e      	sub	sp, #56	; 0x38
 800c480:	af04      	add	r7, sp, #16
 800c482:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c484:	2300      	movs	r3, #0
 800c486:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c488:	2300      	movs	r3, #0
 800c48a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c48c:	2300      	movs	r3, #0
 800c48e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c490:	2300      	movs	r3, #0
 800c492:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c494:	2300      	movs	r3, #0
 800c496:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c498:	2376      	movs	r3, #118	; 0x76
 800c49a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681d      	ldr	r5, [r3, #0]
 800c4a0:	466c      	mov	r4, sp
 800c4a2:	f107 0314 	add.w	r3, r7, #20
 800c4a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c4aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c4ae:	f107 0308 	add.w	r3, r7, #8
 800c4b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	f002 f879 	bl	800e5ac <SDIO_Init>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c4c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d001      	beq.n	800c4cc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e04f      	b.n	800c56c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c4cc:	4b29      	ldr	r3, [pc, #164]	; (800c574 <HAL_SD_InitCard+0xf8>)
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f002 f8b1 	bl	800e63e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c4dc:	4b25      	ldr	r3, [pc, #148]	; (800c574 <HAL_SD_InitCard+0xf8>)
 800c4de:	2201      	movs	r2, #1
 800c4e0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800c4e2:	2002      	movs	r0, #2
 800c4e4:	f7f9 ff1e 	bl	8006324 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f001 f80f 	bl	800d50c <SD_PowerON>
 800c4ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c4f0:	6a3b      	ldr	r3, [r7, #32]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00b      	beq.n	800c50e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c502:	6a3b      	ldr	r3, [r7, #32]
 800c504:	431a      	orrs	r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	e02e      	b.n	800c56c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 ff2e 	bl	800d370 <SD_InitCard>
 800c514:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c516:	6a3b      	ldr	r3, [r7, #32]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00b      	beq.n	800c534 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2201      	movs	r2, #1
 800c520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c528:	6a3b      	ldr	r3, [r7, #32]
 800c52a:	431a      	orrs	r2, r3
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c530:	2301      	movs	r3, #1
 800c532:	e01b      	b.n	800c56c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c53c:	4618      	mov	r0, r3
 800c53e:	f002 f910 	bl	800e762 <SDMMC_CmdBlockLength>
 800c542:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c544:	6a3b      	ldr	r3, [r7, #32]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00f      	beq.n	800c56a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4a0a      	ldr	r2, [pc, #40]	; (800c578 <HAL_SD_InitCard+0xfc>)
 800c550:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c556:	6a3b      	ldr	r3, [r7, #32]
 800c558:	431a      	orrs	r2, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2201      	movs	r2, #1
 800c562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c566:	2301      	movs	r3, #1
 800c568:	e000      	b.n	800c56c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800c56a:	2300      	movs	r3, #0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3728      	adds	r7, #40	; 0x28
 800c570:	46bd      	mov	sp, r7
 800c572:	bdb0      	pop	{r4, r5, r7, pc}
 800c574:	422580a0 	.word	0x422580a0
 800c578:	004005ff 	.word	0x004005ff

0800c57c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b08c      	sub	sp, #48	; 0x30
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
 800c588:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d107      	bne.n	800c5a4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c598:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	e0c0      	b.n	800c726 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	f040 80b9 	bne.w	800c724 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c5b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	441a      	add	r2, r3
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d907      	bls.n	800c5d6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	e0a7      	b.n	800c726 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2203      	movs	r2, #3
 800c5da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ec:	68fa      	ldr	r2, [r7, #12]
 800c5ee:	6812      	ldr	r2, [r2, #0]
 800c5f0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800c5f4:	f043 0302 	orr.w	r3, r3, #2
 800c5f8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5fe:	4a4c      	ldr	r2, [pc, #304]	; (800c730 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800c600:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c606:	4a4b      	ldr	r2, [pc, #300]	; (800c734 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800c608:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60e:	2200      	movs	r2, #0
 800c610:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c616:	2200      	movs	r2, #0
 800c618:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c62a:	689a      	ldr	r2, [r3, #8]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	430a      	orrs	r2, r1
 800c634:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	3380      	adds	r3, #128	; 0x80
 800c640:	4619      	mov	r1, r3
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	025b      	lsls	r3, r3, #9
 800c648:	089b      	lsrs	r3, r3, #2
 800c64a:	f7fa f8df 	bl	800680c <HAL_DMA_Start_IT>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d017      	beq.n	800c684 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800c662:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4a33      	ldr	r2, [pc, #204]	; (800c738 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800c66a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c670:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c680:	2301      	movs	r3, #1
 800c682:	e050      	b.n	800c726 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c684:	4b2d      	ldr	r3, [pc, #180]	; (800c73c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c686:	2201      	movs	r2, #1
 800c688:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d002      	beq.n	800c698 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800c692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c694:	025b      	lsls	r3, r3, #9
 800c696:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c698:	f04f 33ff 	mov.w	r3, #4294967295
 800c69c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	025b      	lsls	r3, r3, #9
 800c6a2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c6a4:	2390      	movs	r3, #144	; 0x90
 800c6a6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f107 0210 	add.w	r2, r7, #16
 800c6bc:	4611      	mov	r1, r2
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f002 f823 	bl	800e70a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d90a      	bls.n	800c6e0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2282      	movs	r2, #130	; 0x82
 800c6ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f002 f887 	bl	800e7ea <SDMMC_CmdReadMultiBlock>
 800c6dc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c6de:	e009      	b.n	800c6f4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2281      	movs	r2, #129	; 0x81
 800c6e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f002 f85a 	bl	800e7a6 <SDMMC_CmdReadSingleBlock>
 800c6f2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d012      	beq.n	800c720 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a0e      	ldr	r2, [pc, #56]	; (800c738 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800c700:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c708:	431a      	orrs	r2, r3
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2201      	movs	r2, #1
 800c712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2200      	movs	r2, #0
 800c71a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800c71c:	2301      	movs	r3, #1
 800c71e:	e002      	b.n	800c726 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800c720:	2300      	movs	r3, #0
 800c722:	e000      	b.n	800c726 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800c724:	2302      	movs	r3, #2
  }
}
 800c726:	4618      	mov	r0, r3
 800c728:	3730      	adds	r7, #48	; 0x30
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	0800d17f 	.word	0x0800d17f
 800c734:	0800d1f1 	.word	0x0800d1f1
 800c738:	004005ff 	.word	0x004005ff
 800c73c:	4225858c 	.word	0x4225858c

0800c740 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b08c      	sub	sp, #48	; 0x30
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
 800c74c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d107      	bne.n	800c768 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c75c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c764:	2301      	movs	r3, #1
 800c766:	e0c5      	b.n	800c8f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	2b01      	cmp	r3, #1
 800c772:	f040 80be 	bne.w	800c8f2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2200      	movs	r2, #0
 800c77a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c77c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	441a      	add	r2, r3
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c786:	429a      	cmp	r2, r3
 800c788:	d907      	bls.n	800c79a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c78e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c796:	2301      	movs	r3, #1
 800c798:	e0ac      	b.n	800c8f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2203      	movs	r2, #3
 800c79e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	6812      	ldr	r2, [r2, #0]
 800c7b4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800c7b8:	f043 0302 	orr.w	r3, r3, #2
 800c7bc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7c2:	4a4e      	ldr	r2, [pc, #312]	; (800c8fc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800c7c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ca:	4a4d      	ldr	r2, [pc, #308]	; (800c900 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800c7cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d002      	beq.n	800c7e4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800c7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e0:	025b      	lsls	r3, r3, #9
 800c7e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d90a      	bls.n	800c800 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	22a0      	movs	r2, #160	; 0xa0
 800c7ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f002 f83b 	bl	800e872 <SDMMC_CmdWriteMultiBlock>
 800c7fc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c7fe:	e009      	b.n	800c814 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2290      	movs	r2, #144	; 0x90
 800c804:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c80c:	4618      	mov	r0, r3
 800c80e:	f002 f80e 	bl	800e82e <SDMMC_CmdWriteSingleBlock>
 800c812:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c816:	2b00      	cmp	r3, #0
 800c818:	d012      	beq.n	800c840 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a39      	ldr	r2, [pc, #228]	; (800c904 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800c820:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c828:	431a      	orrs	r2, r3
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2201      	movs	r2, #1
 800c832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2200      	movs	r2, #0
 800c83a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c83c:	2301      	movs	r3, #1
 800c83e:	e059      	b.n	800c8f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c840:	4b31      	ldr	r3, [pc, #196]	; (800c908 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c842:	2201      	movs	r2, #1
 800c844:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c84a:	2240      	movs	r2, #64	; 0x40
 800c84c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c85e:	689a      	ldr	r2, [r3, #8]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	430a      	orrs	r2, r1
 800c868:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c86e:	68b9      	ldr	r1, [r7, #8]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	3380      	adds	r3, #128	; 0x80
 800c876:	461a      	mov	r2, r3
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	025b      	lsls	r3, r3, #9
 800c87c:	089b      	lsrs	r3, r3, #2
 800c87e:	f7f9 ffc5 	bl	800680c <HAL_DMA_Start_IT>
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	d01c      	beq.n	800c8c2 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	6812      	ldr	r2, [r2, #0]
 800c892:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800c896:	f023 0302 	bic.w	r3, r3, #2
 800c89a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a18      	ldr	r2, [pc, #96]	; (800c904 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800c8a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e018      	b.n	800c8f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	025b      	lsls	r3, r3, #9
 800c8cc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c8ce:	2390      	movs	r3, #144	; 0x90
 800c8d0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f107 0210 	add.w	r2, r7, #16
 800c8e6:	4611      	mov	r1, r2
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f001 ff0e 	bl	800e70a <SDIO_ConfigData>

      return HAL_OK;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	e000      	b.n	800c8f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800c8f2:	2302      	movs	r3, #2
  }
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3730      	adds	r7, #48	; 0x30
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	0800d155 	.word	0x0800d155
 800c900:	0800d1f1 	.word	0x0800d1f1
 800c904:	004005ff 	.word	0x004005ff
 800c908:	4225858c 	.word	0x4225858c

0800c90c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c918:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c924:	2b00      	cmp	r3, #0
 800c926:	d008      	beq.n	800c93a <HAL_SD_IRQHandler+0x2e>
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f003 0308 	and.w	r3, r3, #8
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d003      	beq.n	800c93a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f001 f810 	bl	800d958 <SD_Read_IT>
 800c938:	e165      	b.n	800cc06 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c944:	2b00      	cmp	r3, #0
 800c946:	f000 808f 	beq.w	800ca68 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c952:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	6812      	ldr	r2, [r2, #0]
 800c95e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800c962:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800c966:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f022 0201 	bic.w	r2, r2, #1
 800c976:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f003 0308 	and.w	r3, r3, #8
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d039      	beq.n	800c9f6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f003 0302 	and.w	r3, r3, #2
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d104      	bne.n	800c996 <HAL_SD_IRQHandler+0x8a>
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f003 0320 	and.w	r3, r3, #32
 800c992:	2b00      	cmp	r3, #0
 800c994:	d011      	beq.n	800c9ba <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4618      	mov	r0, r3
 800c99c:	f001 ff8c 	bl	800e8b8 <SDMMC_CmdStopTransfer>
 800c9a0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d008      	beq.n	800c9ba <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	431a      	orrs	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 f92f 	bl	800cc18 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f240 523a 	movw	r2, #1338	; 0x53a
 800c9c2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f003 0301 	and.w	r3, r3, #1
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d104      	bne.n	800c9e6 <HAL_SD_IRQHandler+0xda>
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f003 0302 	and.w	r3, r3, #2
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d003      	beq.n	800c9ee <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f7f8 fd5e 	bl	80054a8 <HAL_SD_RxCpltCallback>
 800c9ec:	e10b      	b.n	800cc06 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f7f8 fd6a 	bl	80054c8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c9f4:	e107      	b.n	800cc06 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f000 8102 	beq.w	800cc06 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f003 0320 	and.w	r3, r3, #32
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d011      	beq.n	800ca30 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f001 ff51 	bl	800e8b8 <SDMMC_CmdStopTransfer>
 800ca16:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d008      	beq.n	800ca30 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	431a      	orrs	r2, r3
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 f8f4 	bl	800cc18 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f003 0301 	and.w	r3, r3, #1
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f040 80e5 	bne.w	800cc06 <HAL_SD_IRQHandler+0x2fa>
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f003 0302 	and.w	r3, r3, #2
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f040 80df 	bne.w	800cc06 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f022 0208 	bic.w	r2, r2, #8
 800ca56:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f7f8 fd31 	bl	80054c8 <HAL_SD_TxCpltCallback>
}
 800ca66:	e0ce      	b.n	800cc06 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d008      	beq.n	800ca88 <HAL_SD_IRQHandler+0x17c>
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f003 0308 	and.w	r3, r3, #8
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d003      	beq.n	800ca88 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 ffba 	bl	800d9fa <SD_Write_IT>
 800ca86:	e0be      	b.n	800cc06 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca8e:	f240 233a 	movw	r3, #570	; 0x23a
 800ca92:	4013      	ands	r3, r2
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	f000 80b6 	beq.w	800cc06 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caa0:	f003 0302 	and.w	r3, r3, #2
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d005      	beq.n	800cab4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caac:	f043 0202 	orr.w	r2, r3, #2
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caba:	f003 0308 	and.w	r3, r3, #8
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d005      	beq.n	800cace <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac6:	f043 0208 	orr.w	r2, r3, #8
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cad4:	f003 0320 	and.w	r3, r3, #32
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d005      	beq.n	800cae8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae0:	f043 0220 	orr.w	r2, r3, #32
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caee:	f003 0310 	and.w	r3, r3, #16
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d005      	beq.n	800cb02 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cafa:	f043 0210 	orr.w	r2, r3, #16
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d005      	beq.n	800cb1c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb14:	f043 0208 	orr.w	r2, r3, #8
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f240 723a 	movw	r2, #1850	; 0x73a
 800cb24:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	6812      	ldr	r2, [r2, #0]
 800cb30:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800cb34:	f023 0302 	bic.w	r3, r3, #2
 800cb38:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f001 feba 	bl	800e8b8 <SDMMC_CmdStopTransfer>
 800cb44:	4602      	mov	r2, r0
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4a:	431a      	orrs	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f003 0308 	and.w	r3, r3, #8
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d00a      	beq.n	800cb70 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2200      	movs	r2, #0
 800cb66:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 f855 	bl	800cc18 <HAL_SD_ErrorCallback>
}
 800cb6e:	e04a      	b.n	800cc06 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d045      	beq.n	800cc06 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f003 0310 	and.w	r3, r3, #16
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d104      	bne.n	800cb8e <HAL_SD_IRQHandler+0x282>
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f003 0320 	and.w	r3, r3, #32
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d011      	beq.n	800cbb2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb92:	4a1f      	ldr	r2, [pc, #124]	; (800cc10 <HAL_SD_IRQHandler+0x304>)
 800cb94:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7f9 fe8e 	bl	80068bc <HAL_DMA_Abort_IT>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d02f      	beq.n	800cc06 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f000 fb72 	bl	800d294 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800cbb0:	e029      	b.n	800cc06 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f003 0301 	and.w	r3, r3, #1
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d104      	bne.n	800cbc6 <HAL_SD_IRQHandler+0x2ba>
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f003 0302 	and.w	r3, r3, #2
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d011      	beq.n	800cbea <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbca:	4a12      	ldr	r2, [pc, #72]	; (800cc14 <HAL_SD_IRQHandler+0x308>)
 800cbcc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7f9 fe72 	bl	80068bc <HAL_DMA_Abort_IT>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d013      	beq.n	800cc06 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f000 fb8d 	bl	800d302 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800cbe8:	e00d      	b.n	800cc06 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f814 	bl	800cc2c <HAL_SD_AbortCallback>
}
 800cc04:	e7ff      	b.n	800cc06 <HAL_SD_IRQHandler+0x2fa>
 800cc06:	bf00      	nop
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	0800d295 	.word	0x0800d295
 800cc14:	0800d303 	.word	0x0800d303

0800cc18 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cc20:	bf00      	nop
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 800cc34:	bf00      	nop
 800cc36:	370c      	adds	r7, #12
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc4e:	0f9b      	lsrs	r3, r3, #30
 800cc50:	b2da      	uxtb	r2, r3
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc5a:	0e9b      	lsrs	r3, r3, #26
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	f003 030f 	and.w	r3, r3, #15
 800cc62:	b2da      	uxtb	r2, r3
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc6c:	0e1b      	lsrs	r3, r3, #24
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	f003 0303 	and.w	r3, r3, #3
 800cc74:	b2da      	uxtb	r2, r3
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc7e:	0c1b      	lsrs	r3, r3, #16
 800cc80:	b2da      	uxtb	r2, r3
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc8a:	0a1b      	lsrs	r3, r3, #8
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc96:	b2da      	uxtb	r2, r3
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cca0:	0d1b      	lsrs	r3, r3, #20
 800cca2:	b29a      	uxth	r2, r3
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccac:	0c1b      	lsrs	r3, r3, #16
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	f003 030f 	and.w	r3, r3, #15
 800ccb4:	b2da      	uxtb	r2, r3
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccbe:	0bdb      	lsrs	r3, r3, #15
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	f003 0301 	and.w	r3, r3, #1
 800ccc6:	b2da      	uxtb	r2, r3
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccd0:	0b9b      	lsrs	r3, r3, #14
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	f003 0301 	and.w	r3, r3, #1
 800ccd8:	b2da      	uxtb	r2, r3
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cce2:	0b5b      	lsrs	r3, r3, #13
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	f003 0301 	and.w	r3, r3, #1
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccf4:	0b1b      	lsrs	r3, r3, #12
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	f003 0301 	and.w	r3, r3, #1
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	2200      	movs	r2, #0
 800cd06:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d163      	bne.n	800cdd8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd14:	009a      	lsls	r2, r3, #2
 800cd16:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cd1a:	4013      	ands	r3, r2
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800cd20:	0f92      	lsrs	r2, r2, #30
 800cd22:	431a      	orrs	r2, r3
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd2c:	0edb      	lsrs	r3, r3, #27
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	f003 0307 	and.w	r3, r3, #7
 800cd34:	b2da      	uxtb	r2, r3
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd3e:	0e1b      	lsrs	r3, r3, #24
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	f003 0307 	and.w	r3, r3, #7
 800cd46:	b2da      	uxtb	r2, r3
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd50:	0d5b      	lsrs	r3, r3, #21
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	f003 0307 	and.w	r3, r3, #7
 800cd58:	b2da      	uxtb	r2, r3
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd62:	0c9b      	lsrs	r3, r3, #18
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	f003 0307 	and.w	r3, r3, #7
 800cd6a:	b2da      	uxtb	r2, r3
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd74:	0bdb      	lsrs	r3, r3, #15
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	f003 0307 	and.w	r3, r3, #7
 800cd7c:	b2da      	uxtb	r2, r3
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	691b      	ldr	r3, [r3, #16]
 800cd86:	1c5a      	adds	r2, r3, #1
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	7e1b      	ldrb	r3, [r3, #24]
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	f003 0307 	and.w	r3, r3, #7
 800cd96:	3302      	adds	r3, #2
 800cd98:	2201      	movs	r2, #1
 800cd9a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800cda2:	fb03 f202 	mul.w	r2, r3, r2
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	7a1b      	ldrb	r3, [r3, #8]
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	f003 030f 	and.w	r3, r3, #15
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	409a      	lsls	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800cdc4:	0a52      	lsrs	r2, r2, #9
 800cdc6:	fb03 f202 	mul.w	r2, r3, r2
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cdd4:	661a      	str	r2, [r3, #96]	; 0x60
 800cdd6:	e031      	b.n	800ce3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d11d      	bne.n	800ce1c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cde4:	041b      	lsls	r3, r3, #16
 800cde6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdee:	0c1b      	lsrs	r3, r3, #16
 800cdf0:	431a      	orrs	r2, r3
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	691b      	ldr	r3, [r3, #16]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	029a      	lsls	r2, r3, #10
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce10:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	661a      	str	r2, [r3, #96]	; 0x60
 800ce1a:	e00f      	b.n	800ce3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a58      	ldr	r2, [pc, #352]	; (800cf84 <HAL_SD_GetCardCSD+0x344>)
 800ce22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e09d      	b.n	800cf78 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce40:	0b9b      	lsrs	r3, r3, #14
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	f003 0301 	and.w	r3, r3, #1
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce52:	09db      	lsrs	r3, r3, #7
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce5a:	b2da      	uxtb	r2, r3
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce6a:	b2da      	uxtb	r2, r3
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce74:	0fdb      	lsrs	r3, r3, #31
 800ce76:	b2da      	uxtb	r2, r3
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce80:	0f5b      	lsrs	r3, r3, #29
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	f003 0303 	and.w	r3, r3, #3
 800ce88:	b2da      	uxtb	r2, r3
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce92:	0e9b      	lsrs	r3, r3, #26
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	f003 0307 	and.w	r3, r3, #7
 800ce9a:	b2da      	uxtb	r2, r3
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea4:	0d9b      	lsrs	r3, r3, #22
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	f003 030f 	and.w	r3, r3, #15
 800ceac:	b2da      	uxtb	r2, r3
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceb6:	0d5b      	lsrs	r3, r3, #21
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	f003 0301 	and.w	r3, r3, #1
 800cebe:	b2da      	uxtb	r2, r3
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ced2:	0c1b      	lsrs	r3, r3, #16
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	f003 0301 	and.w	r3, r3, #1
 800ceda:	b2da      	uxtb	r2, r3
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cee6:	0bdb      	lsrs	r3, r3, #15
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	f003 0301 	and.w	r3, r3, #1
 800ceee:	b2da      	uxtb	r2, r3
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cefa:	0b9b      	lsrs	r3, r3, #14
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	f003 0301 	and.w	r3, r3, #1
 800cf02:	b2da      	uxtb	r2, r3
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf0e:	0b5b      	lsrs	r3, r3, #13
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	f003 0301 	and.w	r3, r3, #1
 800cf16:	b2da      	uxtb	r2, r3
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf22:	0b1b      	lsrs	r3, r3, #12
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	f003 0301 	and.w	r3, r3, #1
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf36:	0a9b      	lsrs	r3, r3, #10
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	f003 0303 	and.w	r3, r3, #3
 800cf3e:	b2da      	uxtb	r2, r3
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf4a:	0a1b      	lsrs	r3, r3, #8
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	f003 0303 	and.w	r3, r3, #3
 800cf52:	b2da      	uxtb	r2, r3
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf5e:	085b      	lsrs	r3, r3, #1
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf66:	b2da      	uxtb	r2, r3
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800cf76:	2300      	movs	r3, #0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	370c      	adds	r7, #12
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr
 800cf84:	004005ff 	.word	0x004005ff

0800cf88 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cfd2:	2300      	movs	r3, #0
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cfe0:	b5b0      	push	{r4, r5, r7, lr}
 800cfe2:	b08e      	sub	sp, #56	; 0x38
 800cfe4:	af04      	add	r7, sp, #16
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cfea:	2300      	movs	r3, #0
 800cfec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2203      	movs	r2, #3
 800cff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cffc:	2b03      	cmp	r3, #3
 800cffe:	d02e      	beq.n	800d05e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d006:	d106      	bne.n	800d016 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	639a      	str	r2, [r3, #56]	; 0x38
 800d014:	e029      	b.n	800d06a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d01c:	d10a      	bne.n	800d034 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 fb2a 	bl	800d678 <SD_WideBus_Enable>
 800d024:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d02a:	6a3b      	ldr	r3, [r7, #32]
 800d02c:	431a      	orrs	r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	639a      	str	r2, [r3, #56]	; 0x38
 800d032:	e01a      	b.n	800d06a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d10a      	bne.n	800d050 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 fb67 	bl	800d70e <SD_WideBus_Disable>
 800d040:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d046:	6a3b      	ldr	r3, [r7, #32]
 800d048:	431a      	orrs	r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	639a      	str	r2, [r3, #56]	; 0x38
 800d04e:	e00c      	b.n	800d06a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d054:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	639a      	str	r2, [r3, #56]	; 0x38
 800d05c:	e005      	b.n	800d06a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d062:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00b      	beq.n	800d08a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a26      	ldr	r2, [pc, #152]	; (800d110 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d078:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2201      	movs	r2, #1
 800d07e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d082:	2301      	movs	r3, #1
 800d084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d088:	e01f      	b.n	800d0ca <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	695b      	ldr	r3, [r3, #20]
 800d0a4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	699b      	ldr	r3, [r3, #24]
 800d0aa:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681d      	ldr	r5, [r3, #0]
 800d0b0:	466c      	mov	r4, sp
 800d0b2:	f107 0314 	add.w	r3, r7, #20
 800d0b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d0ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d0be:	f107 0308 	add.w	r3, r7, #8
 800d0c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d0c4:	4628      	mov	r0, r5
 800d0c6:	f001 fa71 	bl	800e5ac <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f001 fb45 	bl	800e762 <SDMMC_CmdBlockLength>
 800d0d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d0da:	6a3b      	ldr	r3, [r7, #32]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00c      	beq.n	800d0fa <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4a0a      	ldr	r2, [pc, #40]	; (800d110 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d0e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0ec:	6a3b      	ldr	r3, [r7, #32]
 800d0ee:	431a      	orrs	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800d102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d106:	4618      	mov	r0, r3
 800d108:	3728      	adds	r7, #40	; 0x28
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bdb0      	pop	{r4, r5, r7, pc}
 800d10e:	bf00      	nop
 800d110:	004005ff 	.word	0x004005ff

0800d114 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b086      	sub	sp, #24
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d11c:	2300      	movs	r3, #0
 800d11e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d120:	f107 030c 	add.w	r3, r7, #12
 800d124:	4619      	mov	r1, r3
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 fa7e 	bl	800d628 <SD_SendStatus>
 800d12c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d005      	beq.n	800d140 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	431a      	orrs	r2, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	0a5b      	lsrs	r3, r3, #9
 800d144:	f003 030f 	and.w	r3, r3, #15
 800d148:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d14a:	693b      	ldr	r3, [r7, #16]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3718      	adds	r7, #24
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d154:	b480      	push	{r7}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d160:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d170:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d172:	bf00      	nop
 800d174:	3714      	adds	r7, #20
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr

0800d17e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d17e:	b580      	push	{r7, lr}
 800d180:	b084      	sub	sp, #16
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d18a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d190:	2b82      	cmp	r3, #130	; 0x82
 800d192:	d111      	bne.n	800d1b8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4618      	mov	r0, r3
 800d19a:	f001 fb8d 	bl	800e8b8 <SDMMC_CmdStopTransfer>
 800d19e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d008      	beq.n	800d1b8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	431a      	orrs	r2, r3
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f7ff fd30 	bl	800cc18 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f022 0208 	bic.w	r2, r2, #8
 800d1c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f240 523a 	movw	r2, #1338	; 0x53a
 800d1d0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f7f8 f961 	bl	80054a8 <HAL_SD_RxCpltCallback>
#endif
}
 800d1e6:	bf00      	nop
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
	...

0800d1f0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b086      	sub	sp, #24
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1fc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7f9 fd16 	bl	8006c30 <HAL_DMA_GetError>
 800d204:	4603      	mov	r3, r0
 800d206:	2b02      	cmp	r3, #2
 800d208:	d03e      	beq.n	800d288 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d20e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d210:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d218:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d002      	beq.n	800d226 <SD_DMAError+0x36>
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2b01      	cmp	r3, #1
 800d224:	d12d      	bne.n	800d282 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a19      	ldr	r2, [pc, #100]	; (800d290 <SD_DMAError+0xa0>)
 800d22c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d23c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d242:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d24a:	6978      	ldr	r0, [r7, #20]
 800d24c:	f7ff ff62 	bl	800d114 <HAL_SD_GetCardState>
 800d250:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	2b06      	cmp	r3, #6
 800d256:	d002      	beq.n	800d25e <SD_DMAError+0x6e>
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	2b05      	cmp	r3, #5
 800d25c:	d10a      	bne.n	800d274 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4618      	mov	r0, r3
 800d264:	f001 fb28 	bl	800e8b8 <SDMMC_CmdStopTransfer>
 800d268:	4602      	mov	r2, r0
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d26e:	431a      	orrs	r2, r3
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	2201      	movs	r2, #1
 800d278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	2200      	movs	r2, #0
 800d280:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d282:	6978      	ldr	r0, [r7, #20]
 800d284:	f7ff fcc8 	bl	800cc18 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d288:	bf00      	nop
 800d28a:	3718      	adds	r7, #24
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	004005ff 	.word	0x004005ff

0800d294 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f240 523a 	movw	r2, #1338	; 0x53a
 800d2aa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d2ac:	68f8      	ldr	r0, [r7, #12]
 800d2ae:	f7ff ff31 	bl	800d114 <HAL_SD_GetCardState>
 800d2b2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	2b06      	cmp	r3, #6
 800d2c6:	d002      	beq.n	800d2ce <SD_DMATxAbort+0x3a>
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	2b05      	cmp	r3, #5
 800d2cc:	d10a      	bne.n	800d2e4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f001 faf0 	bl	800e8b8 <SDMMC_CmdStopTransfer>
 800d2d8:	4602      	mov	r2, r0
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2de:	431a      	orrs	r2, r3
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d103      	bne.n	800d2f4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f7ff fc9d 	bl	800cc2c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d2f2:	e002      	b.n	800d2fa <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d2f4:	68f8      	ldr	r0, [r7, #12]
 800d2f6:	f7ff fc8f 	bl	800cc18 <HAL_SD_ErrorCallback>
}
 800d2fa:	bf00      	nop
 800d2fc:	3710      	adds	r7, #16
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d302:	b580      	push	{r7, lr}
 800d304:	b084      	sub	sp, #16
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d30e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f240 523a 	movw	r2, #1338	; 0x53a
 800d318:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d31a:	68f8      	ldr	r0, [r7, #12]
 800d31c:	f7ff fefa 	bl	800d114 <HAL_SD_GetCardState>
 800d320:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2201      	movs	r2, #1
 800d326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2200      	movs	r2, #0
 800d32e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	2b06      	cmp	r3, #6
 800d334:	d002      	beq.n	800d33c <SD_DMARxAbort+0x3a>
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	2b05      	cmp	r3, #5
 800d33a:	d10a      	bne.n	800d352 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4618      	mov	r0, r3
 800d342:	f001 fab9 	bl	800e8b8 <SDMMC_CmdStopTransfer>
 800d346:	4602      	mov	r2, r0
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d34c:	431a      	orrs	r2, r3
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d356:	2b00      	cmp	r3, #0
 800d358:	d103      	bne.n	800d362 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f7ff fc66 	bl	800cc2c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d360:	e002      	b.n	800d368 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d362:	68f8      	ldr	r0, [r7, #12]
 800d364:	f7ff fc58 	bl	800cc18 <HAL_SD_ErrorCallback>
}
 800d368:	bf00      	nop
 800d36a:	3710      	adds	r7, #16
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d370:	b5b0      	push	{r4, r5, r7, lr}
 800d372:	b094      	sub	sp, #80	; 0x50
 800d374:	af04      	add	r7, sp, #16
 800d376:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d378:	2301      	movs	r3, #1
 800d37a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4618      	mov	r0, r3
 800d382:	f001 f96a 	bl	800e65a <SDIO_GetPowerState>
 800d386:	4603      	mov	r3, r0
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d102      	bne.n	800d392 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d38c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d390:	e0b8      	b.n	800d504 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d396:	2b03      	cmp	r3, #3
 800d398:	d02f      	beq.n	800d3fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f001 fb94 	bl	800eacc <SDMMC_CmdSendCID>
 800d3a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d001      	beq.n	800d3b0 <SD_InitCard+0x40>
    {
      return errorstate;
 800d3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ae:	e0a9      	b.n	800d504 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2100      	movs	r1, #0
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f001 f994 	bl	800e6e4 <SDIO_GetResponse>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2104      	movs	r1, #4
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f001 f98b 	bl	800e6e4 <SDIO_GetResponse>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	2108      	movs	r1, #8
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f001 f982 	bl	800e6e4 <SDIO_GetResponse>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	210c      	movs	r1, #12
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f001 f979 	bl	800e6e4 <SDIO_GetResponse>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3fe:	2b03      	cmp	r3, #3
 800d400:	d00d      	beq.n	800d41e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f107 020e 	add.w	r2, r7, #14
 800d40a:	4611      	mov	r1, r2
 800d40c:	4618      	mov	r0, r3
 800d40e:	f001 fb9a 	bl	800eb46 <SDMMC_CmdSetRelAdd>
 800d412:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d416:	2b00      	cmp	r3, #0
 800d418:	d001      	beq.n	800d41e <SD_InitCard+0xae>
    {
      return errorstate;
 800d41a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d41c:	e072      	b.n	800d504 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d422:	2b03      	cmp	r3, #3
 800d424:	d036      	beq.n	800d494 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d426:	89fb      	ldrh	r3, [r7, #14]
 800d428:	461a      	mov	r2, r3
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d436:	041b      	lsls	r3, r3, #16
 800d438:	4619      	mov	r1, r3
 800d43a:	4610      	mov	r0, r2
 800d43c:	f001 fb64 	bl	800eb08 <SDMMC_CmdSendCSD>
 800d440:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d444:	2b00      	cmp	r3, #0
 800d446:	d001      	beq.n	800d44c <SD_InitCard+0xdc>
    {
      return errorstate;
 800d448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d44a:	e05b      	b.n	800d504 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2100      	movs	r1, #0
 800d452:	4618      	mov	r0, r3
 800d454:	f001 f946 	bl	800e6e4 <SDIO_GetResponse>
 800d458:	4602      	mov	r2, r0
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	2104      	movs	r1, #4
 800d464:	4618      	mov	r0, r3
 800d466:	f001 f93d 	bl	800e6e4 <SDIO_GetResponse>
 800d46a:	4602      	mov	r2, r0
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2108      	movs	r1, #8
 800d476:	4618      	mov	r0, r3
 800d478:	f001 f934 	bl	800e6e4 <SDIO_GetResponse>
 800d47c:	4602      	mov	r2, r0
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	210c      	movs	r1, #12
 800d488:	4618      	mov	r0, r3
 800d48a:	f001 f92b 	bl	800e6e4 <SDIO_GetResponse>
 800d48e:	4602      	mov	r2, r0
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2104      	movs	r1, #4
 800d49a:	4618      	mov	r0, r3
 800d49c:	f001 f922 	bl	800e6e4 <SDIO_GetResponse>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	0d1a      	lsrs	r2, r3, #20
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d4a8:	f107 0310 	add.w	r3, r7, #16
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f7ff fbc6 	bl	800cc40 <HAL_SD_GetCardCSD>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d002      	beq.n	800d4c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d4be:	e021      	b.n	800d504 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6819      	ldr	r1, [r3, #0]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4c8:	041b      	lsls	r3, r3, #16
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	461c      	mov	r4, r3
 800d4ce:	4615      	mov	r5, r2
 800d4d0:	4622      	mov	r2, r4
 800d4d2:	462b      	mov	r3, r5
 800d4d4:	4608      	mov	r0, r1
 800d4d6:	f001 fa11 	bl	800e8fc <SDMMC_CmdSelDesel>
 800d4da:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d001      	beq.n	800d4e6 <SD_InitCard+0x176>
  {
    return errorstate;
 800d4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4e4:	e00e      	b.n	800d504 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681d      	ldr	r5, [r3, #0]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	466c      	mov	r4, sp
 800d4ee:	f103 0210 	add.w	r2, r3, #16
 800d4f2:	ca07      	ldmia	r2, {r0, r1, r2}
 800d4f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d4f8:	3304      	adds	r3, #4
 800d4fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	f001 f855 	bl	800e5ac <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d502:	2300      	movs	r3, #0
}
 800d504:	4618      	mov	r0, r3
 800d506:	3740      	adds	r7, #64	; 0x40
 800d508:	46bd      	mov	sp, r7
 800d50a:	bdb0      	pop	{r4, r5, r7, pc}

0800d50c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b086      	sub	sp, #24
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d514:	2300      	movs	r3, #0
 800d516:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d518:	2300      	movs	r3, #0
 800d51a:	617b      	str	r3, [r7, #20]
 800d51c:	2300      	movs	r3, #0
 800d51e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4618      	mov	r0, r3
 800d526:	f001 fa0c 	bl	800e942 <SDMMC_CmdGoIdleState>
 800d52a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d001      	beq.n	800d536 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	e072      	b.n	800d61c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4618      	mov	r0, r3
 800d53c:	f001 fa1f 	bl	800e97e <SDMMC_CmdOperCond>
 800d540:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00d      	beq.n	800d564 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2200      	movs	r2, #0
 800d54c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	4618      	mov	r0, r3
 800d554:	f001 f9f5 	bl	800e942 <SDMMC_CmdGoIdleState>
 800d558:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d004      	beq.n	800d56a <SD_PowerON+0x5e>
    {
      return errorstate;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	e05b      	b.n	800d61c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2201      	movs	r2, #1
 800d568:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d56e:	2b01      	cmp	r3, #1
 800d570:	d137      	bne.n	800d5e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	2100      	movs	r1, #0
 800d578:	4618      	mov	r0, r3
 800d57a:	f001 fa1f 	bl	800e9bc <SDMMC_CmdAppCommand>
 800d57e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d02d      	beq.n	800d5e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d586:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d58a:	e047      	b.n	800d61c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2100      	movs	r1, #0
 800d592:	4618      	mov	r0, r3
 800d594:	f001 fa12 	bl	800e9bc <SDMMC_CmdAppCommand>
 800d598:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d001      	beq.n	800d5a4 <SD_PowerON+0x98>
    {
      return errorstate;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	e03b      	b.n	800d61c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	491e      	ldr	r1, [pc, #120]	; (800d624 <SD_PowerON+0x118>)
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f001 fa28 	bl	800ea00 <SDMMC_CmdAppOperCommand>
 800d5b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d002      	beq.n	800d5be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d5b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d5bc:	e02e      	b.n	800d61c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2100      	movs	r1, #0
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f001 f88d 	bl	800e6e4 <SDIO_GetResponse>
 800d5ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	0fdb      	lsrs	r3, r3, #31
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d101      	bne.n	800d5d8 <SD_PowerON+0xcc>
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	e000      	b.n	800d5da <SD_PowerON+0xce>
 800d5d8:	2300      	movs	r3, #0
 800d5da:	613b      	str	r3, [r7, #16]

    count++;
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	3301      	adds	r3, #1
 800d5e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d802      	bhi.n	800d5f2 <SD_PowerON+0xe6>
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d0cc      	beq.n	800d58c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d902      	bls.n	800d602 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d5fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d600:	e00c      	b.n	800d61c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d003      	beq.n	800d614 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2201      	movs	r2, #1
 800d610:	645a      	str	r2, [r3, #68]	; 0x44
 800d612:	e002      	b.n	800d61a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2200      	movs	r2, #0
 800d618:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d61a:	2300      	movs	r3, #0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3718      	adds	r7, #24
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	c1100000 	.word	0xc1100000

0800d628 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d102      	bne.n	800d63e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d638:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d63c:	e018      	b.n	800d670 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d646:	041b      	lsls	r3, r3, #16
 800d648:	4619      	mov	r1, r3
 800d64a:	4610      	mov	r0, r2
 800d64c:	f001 fa9c 	bl	800eb88 <SDMMC_CmdSendStatus>
 800d650:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d001      	beq.n	800d65c <SD_SendStatus+0x34>
  {
    return errorstate;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	e009      	b.n	800d670 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2100      	movs	r1, #0
 800d662:	4618      	mov	r0, r3
 800d664:	f001 f83e 	bl	800e6e4 <SDIO_GetResponse>
 800d668:	4602      	mov	r2, r0
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d66e:	2300      	movs	r3, #0
}
 800d670:	4618      	mov	r0, r3
 800d672:	3710      	adds	r7, #16
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b086      	sub	sp, #24
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d680:	2300      	movs	r3, #0
 800d682:	60fb      	str	r3, [r7, #12]
 800d684:	2300      	movs	r3, #0
 800d686:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2100      	movs	r1, #0
 800d68e:	4618      	mov	r0, r3
 800d690:	f001 f828 	bl	800e6e4 <SDIO_GetResponse>
 800d694:	4603      	mov	r3, r0
 800d696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d69a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d69e:	d102      	bne.n	800d6a6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d6a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d6a4:	e02f      	b.n	800d706 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d6a6:	f107 030c 	add.w	r3, r7, #12
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 f879 	bl	800d7a4 <SD_FindSCR>
 800d6b2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d001      	beq.n	800d6be <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	e023      	b.n	800d706 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d01c      	beq.n	800d702 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6d0:	041b      	lsls	r3, r3, #16
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	4610      	mov	r0, r2
 800d6d6:	f001 f971 	bl	800e9bc <SDMMC_CmdAppCommand>
 800d6da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	e00f      	b.n	800d706 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2102      	movs	r1, #2
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f001 f9aa 	bl	800ea46 <SDMMC_CmdBusWidth>
 800d6f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d001      	beq.n	800d6fe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	e003      	b.n	800d706 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d6fe:	2300      	movs	r3, #0
 800d700:	e001      	b.n	800d706 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d702:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d706:	4618      	mov	r0, r3
 800d708:	3718      	adds	r7, #24
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d70e:	b580      	push	{r7, lr}
 800d710:	b086      	sub	sp, #24
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d716:	2300      	movs	r3, #0
 800d718:	60fb      	str	r3, [r7, #12]
 800d71a:	2300      	movs	r3, #0
 800d71c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	2100      	movs	r1, #0
 800d724:	4618      	mov	r0, r3
 800d726:	f000 ffdd 	bl	800e6e4 <SDIO_GetResponse>
 800d72a:	4603      	mov	r3, r0
 800d72c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d730:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d734:	d102      	bne.n	800d73c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d736:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d73a:	e02f      	b.n	800d79c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d73c:	f107 030c 	add.w	r3, r7, #12
 800d740:	4619      	mov	r1, r3
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f000 f82e 	bl	800d7a4 <SD_FindSCR>
 800d748:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d001      	beq.n	800d754 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	e023      	b.n	800d79c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d01c      	beq.n	800d798 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d766:	041b      	lsls	r3, r3, #16
 800d768:	4619      	mov	r1, r3
 800d76a:	4610      	mov	r0, r2
 800d76c:	f001 f926 	bl	800e9bc <SDMMC_CmdAppCommand>
 800d770:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d001      	beq.n	800d77c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	e00f      	b.n	800d79c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2100      	movs	r1, #0
 800d782:	4618      	mov	r0, r3
 800d784:	f001 f95f 	bl	800ea46 <SDMMC_CmdBusWidth>
 800d788:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d001      	beq.n	800d794 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	e003      	b.n	800d79c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d794:	2300      	movs	r3, #0
 800d796:	e001      	b.n	800d79c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d798:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3718      	adds	r7, #24
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d7a4:	b590      	push	{r4, r7, lr}
 800d7a6:	b08f      	sub	sp, #60	; 0x3c
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d7ae:	f7f8 fdad 	bl	800630c <HAL_GetTick>
 800d7b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	60bb      	str	r3, [r7, #8]
 800d7bc:	2300      	movs	r3, #0
 800d7be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2108      	movs	r1, #8
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f000 ffc9 	bl	800e762 <SDMMC_CmdBlockLength>
 800d7d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d001      	beq.n	800d7dc <SD_FindSCR+0x38>
  {
    return errorstate;
 800d7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7da:	e0b9      	b.n	800d950 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7e4:	041b      	lsls	r3, r3, #16
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	4610      	mov	r0, r2
 800d7ea:	f001 f8e7 	bl	800e9bc <SDMMC_CmdAppCommand>
 800d7ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d001      	beq.n	800d7fa <SD_FindSCR+0x56>
  {
    return errorstate;
 800d7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f8:	e0aa      	b.n	800d950 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d7fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d800:	2308      	movs	r3, #8
 800d802:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800d804:	2330      	movs	r3, #48	; 0x30
 800d806:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d808:	2302      	movs	r3, #2
 800d80a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d80c:	2300      	movs	r3, #0
 800d80e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800d810:	2301      	movs	r3, #1
 800d812:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f107 0210 	add.w	r2, r7, #16
 800d81c:	4611      	mov	r1, r2
 800d81e:	4618      	mov	r0, r3
 800d820:	f000 ff73 	bl	800e70a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4618      	mov	r0, r3
 800d82a:	f001 f92e 	bl	800ea8a <SDMMC_CmdSendSCR>
 800d82e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d832:	2b00      	cmp	r3, #0
 800d834:	d02a      	beq.n	800d88c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800d836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d838:	e08a      	b.n	800d950 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d844:	2b00      	cmp	r3, #0
 800d846:	d00f      	beq.n	800d868 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6819      	ldr	r1, [r3, #0]
 800d84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	f107 0208 	add.w	r2, r7, #8
 800d854:	18d4      	adds	r4, r2, r3
 800d856:	4608      	mov	r0, r1
 800d858:	f000 fed3 	bl	800e602 <SDIO_ReadFIFO>
 800d85c:	4603      	mov	r3, r0
 800d85e:	6023      	str	r3, [r4, #0]
      index++;
 800d860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d862:	3301      	adds	r3, #1
 800d864:	637b      	str	r3, [r7, #52]	; 0x34
 800d866:	e006      	b.n	800d876 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d86e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d872:	2b00      	cmp	r3, #0
 800d874:	d012      	beq.n	800d89c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800d876:	f7f8 fd49 	bl	800630c <HAL_GetTick>
 800d87a:	4602      	mov	r2, r0
 800d87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87e:	1ad3      	subs	r3, r2, r3
 800d880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d884:	d102      	bne.n	800d88c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d886:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d88a:	e061      	b.n	800d950 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d892:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800d896:	2b00      	cmp	r3, #0
 800d898:	d0cf      	beq.n	800d83a <SD_FindSCR+0x96>
 800d89a:	e000      	b.n	800d89e <SD_FindSCR+0xfa>
      break;
 800d89c:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a4:	f003 0308 	and.w	r3, r3, #8
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d106      	bne.n	800d8ba <SD_FindSCR+0x116>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d005      	beq.n	800d8c6 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	2208      	movs	r2, #8
 800d8c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d8c2:	2308      	movs	r3, #8
 800d8c4:	e044      	b.n	800d950 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8cc:	f003 0302 	and.w	r3, r3, #2
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d005      	beq.n	800d8e0 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2202      	movs	r2, #2
 800d8da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d8dc:	2302      	movs	r3, #2
 800d8de:	e037      	b.n	800d950 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8e6:	f003 0320 	and.w	r3, r3, #32
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d005      	beq.n	800d8fa <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	2220      	movs	r2, #32
 800d8f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d8f6:	2320      	movs	r3, #32
 800d8f8:	e02a      	b.n	800d950 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f240 523a 	movw	r2, #1338	; 0x53a
 800d902:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	061a      	lsls	r2, r3, #24
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	021b      	lsls	r3, r3, #8
 800d90c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d910:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	0a1b      	lsrs	r3, r3, #8
 800d916:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d91a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	0e1b      	lsrs	r3, r3, #24
 800d920:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d924:	601a      	str	r2, [r3, #0]
    scr++;
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	3304      	adds	r3, #4
 800d92a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	061a      	lsls	r2, r3, #24
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	021b      	lsls	r3, r3, #8
 800d934:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d938:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	0a1b      	lsrs	r3, r3, #8
 800d93e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d942:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	0e1b      	lsrs	r3, r3, #24
 800d948:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	373c      	adds	r7, #60	; 0x3c
 800d954:	46bd      	mov	sp, r7
 800d956:	bd90      	pop	{r4, r7, pc}

0800d958 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b086      	sub	sp, #24
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d964:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d03f      	beq.n	800d9f2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d972:	2300      	movs	r3, #0
 800d974:	617b      	str	r3, [r7, #20]
 800d976:	e033      	b.n	800d9e0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f000 fe40 	bl	800e602 <SDIO_ReadFIFO>
 800d982:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	b2da      	uxtb	r2, r3
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	3301      	adds	r3, #1
 800d990:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	3b01      	subs	r3, #1
 800d996:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	0a1b      	lsrs	r3, r3, #8
 800d99c:	b2da      	uxtb	r2, r3
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	3b01      	subs	r3, #1
 800d9ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	0c1b      	lsrs	r3, r3, #16
 800d9b2:	b2da      	uxtb	r2, r3
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	0e1b      	lsrs	r3, r3, #24
 800d9c8:	b2da      	uxtb	r2, r3
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	3b01      	subs	r3, #1
 800d9d8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	617b      	str	r3, [r7, #20]
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	2b07      	cmp	r3, #7
 800d9e4:	d9c8      	bls.n	800d978 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	68fa      	ldr	r2, [r7, #12]
 800d9ea:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	693a      	ldr	r2, [r7, #16]
 800d9f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d9f2:	bf00      	nop
 800d9f4:	3718      	adds	r7, #24
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b086      	sub	sp, #24
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a1b      	ldr	r3, [r3, #32]
 800da06:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da0c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d043      	beq.n	800da9c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800da14:	2300      	movs	r3, #0
 800da16:	617b      	str	r3, [r7, #20]
 800da18:	e037      	b.n	800da8a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	3301      	adds	r3, #1
 800da24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	3b01      	subs	r3, #1
 800da2a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	021a      	lsls	r2, r3, #8
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	4313      	orrs	r3, r2
 800da36:	60bb      	str	r3, [r7, #8]
      tmp++;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	3301      	adds	r3, #1
 800da3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	3b01      	subs	r3, #1
 800da42:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	041a      	lsls	r2, r3, #16
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	4313      	orrs	r3, r2
 800da4e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	3301      	adds	r3, #1
 800da54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	3b01      	subs	r3, #1
 800da5a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	061a      	lsls	r2, r3, #24
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	4313      	orrs	r3, r2
 800da66:	60bb      	str	r3, [r7, #8]
      tmp++;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	3301      	adds	r3, #1
 800da6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	3b01      	subs	r3, #1
 800da72:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f107 0208 	add.w	r2, r7, #8
 800da7c:	4611      	mov	r1, r2
 800da7e:	4618      	mov	r0, r3
 800da80:	f000 fdcc 	bl	800e61c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	3301      	adds	r3, #1
 800da88:	617b      	str	r3, [r7, #20]
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	2b07      	cmp	r3, #7
 800da8e:	d9c4      	bls.n	800da1a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	68fa      	ldr	r2, [r7, #12]
 800da94:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	693a      	ldr	r2, [r7, #16]
 800da9a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800da9c:	bf00      	nop
 800da9e:	3718      	adds	r7, #24
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d101      	bne.n	800dab6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dab2:	2301      	movs	r3, #1
 800dab4:	e07b      	b.n	800dbae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d108      	bne.n	800dad0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	685b      	ldr	r3, [r3, #4]
 800dac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dac6:	d009      	beq.n	800dadc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	61da      	str	r2, [r3, #28]
 800dace:	e005      	b.n	800dadc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2200      	movs	r2, #0
 800dada:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2200      	movs	r2, #0
 800dae0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	2b00      	cmp	r3, #0
 800daec:	d106      	bne.n	800dafc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f7f8 f9b4 	bl	8005e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2202      	movs	r2, #2
 800db00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	689b      	ldr	r3, [r3, #8]
 800db20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800db24:	431a      	orrs	r2, r3
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db2e:	431a      	orrs	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	691b      	ldr	r3, [r3, #16]
 800db34:	f003 0302 	and.w	r3, r3, #2
 800db38:	431a      	orrs	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	695b      	ldr	r3, [r3, #20]
 800db3e:	f003 0301 	and.w	r3, r3, #1
 800db42:	431a      	orrs	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	699b      	ldr	r3, [r3, #24]
 800db48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800db4c:	431a      	orrs	r2, r3
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	69db      	ldr	r3, [r3, #28]
 800db52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db56:	431a      	orrs	r2, r3
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6a1b      	ldr	r3, [r3, #32]
 800db5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db60:	ea42 0103 	orr.w	r1, r2, r3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	430a      	orrs	r2, r1
 800db72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	699b      	ldr	r3, [r3, #24]
 800db78:	0c1b      	lsrs	r3, r3, #16
 800db7a:	f003 0104 	and.w	r1, r3, #4
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db82:	f003 0210 	and.w	r2, r3, #16
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	430a      	orrs	r2, r1
 800db8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	69da      	ldr	r2, [r3, #28]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2201      	movs	r2, #1
 800dba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800dbac:	2300      	movs	r3, #0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b082      	sub	sp, #8
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d101      	bne.n	800dbc8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	e01a      	b.n	800dbfe <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2202      	movs	r2, #2
 800dbcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dbde:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f7f8 fa55 	bl	8006090 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3708      	adds	r7, #8
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b08c      	sub	sp, #48	; 0x30
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	60f8      	str	r0, [r7, #12]
 800dc0e:	60b9      	str	r1, [r7, #8]
 800dc10:	607a      	str	r2, [r7, #4]
 800dc12:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800dc14:	2301      	movs	r3, #1
 800dc16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d101      	bne.n	800dc2c <HAL_SPI_TransmitReceive+0x26>
 800dc28:	2302      	movs	r3, #2
 800dc2a:	e198      	b.n	800df5e <HAL_SPI_TransmitReceive+0x358>
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2201      	movs	r2, #1
 800dc30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc34:	f7f8 fb6a 	bl	800630c <HAL_GetTick>
 800dc38:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dc40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	685b      	ldr	r3, [r3, #4]
 800dc48:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800dc4a:	887b      	ldrh	r3, [r7, #2]
 800dc4c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dc4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d00f      	beq.n	800dc76 <HAL_SPI_TransmitReceive+0x70>
 800dc56:	69fb      	ldr	r3, [r7, #28]
 800dc58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dc5c:	d107      	bne.n	800dc6e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d103      	bne.n	800dc6e <HAL_SPI_TransmitReceive+0x68>
 800dc66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc6a:	2b04      	cmp	r3, #4
 800dc6c:	d003      	beq.n	800dc76 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800dc6e:	2302      	movs	r3, #2
 800dc70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dc74:	e16d      	b.n	800df52 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d005      	beq.n	800dc88 <HAL_SPI_TransmitReceive+0x82>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d002      	beq.n	800dc88 <HAL_SPI_TransmitReceive+0x82>
 800dc82:	887b      	ldrh	r3, [r7, #2]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d103      	bne.n	800dc90 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dc8e:	e160      	b.n	800df52 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	2b04      	cmp	r3, #4
 800dc9a:	d003      	beq.n	800dca4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2205      	movs	r2, #5
 800dca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2200      	movs	r2, #0
 800dca8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	687a      	ldr	r2, [r7, #4]
 800dcae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	887a      	ldrh	r2, [r7, #2]
 800dcb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	887a      	ldrh	r2, [r7, #2]
 800dcba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	68ba      	ldr	r2, [r7, #8]
 800dcc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	887a      	ldrh	r2, [r7, #2]
 800dcc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	887a      	ldrh	r2, [r7, #2]
 800dccc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dce4:	2b40      	cmp	r3, #64	; 0x40
 800dce6:	d007      	beq.n	800dcf8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dcf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd00:	d17c      	bne.n	800ddfc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d002      	beq.n	800dd10 <HAL_SPI_TransmitReceive+0x10a>
 800dd0a:	8b7b      	ldrh	r3, [r7, #26]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d16a      	bne.n	800dde6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd14:	881a      	ldrh	r2, [r3, #0]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd20:	1c9a      	adds	r2, r3, #2
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	3b01      	subs	r3, #1
 800dd2e:	b29a      	uxth	r2, r3
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd34:	e057      	b.n	800dde6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	689b      	ldr	r3, [r3, #8]
 800dd3c:	f003 0302 	and.w	r3, r3, #2
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	d11b      	bne.n	800dd7c <HAL_SPI_TransmitReceive+0x176>
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d016      	beq.n	800dd7c <HAL_SPI_TransmitReceive+0x176>
 800dd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d113      	bne.n	800dd7c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd58:	881a      	ldrh	r2, [r3, #0]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd64:	1c9a      	adds	r2, r3, #2
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	3b01      	subs	r3, #1
 800dd72:	b29a      	uxth	r2, r3
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	f003 0301 	and.w	r3, r3, #1
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	d119      	bne.n	800ddbe <HAL_SPI_TransmitReceive+0x1b8>
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d014      	beq.n	800ddbe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	68da      	ldr	r2, [r3, #12]
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd9e:	b292      	uxth	r2, r2
 800dda0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dda6:	1c9a      	adds	r2, r3, #2
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	3b01      	subs	r3, #1
 800ddb4:	b29a      	uxth	r2, r3
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ddbe:	f7f8 faa5 	bl	800630c <HAL_GetTick>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc6:	1ad3      	subs	r3, r2, r3
 800ddc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d80b      	bhi.n	800dde6 <HAL_SPI_TransmitReceive+0x1e0>
 800ddce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd4:	d007      	beq.n	800dde6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800ddd6:	2303      	movs	r3, #3
 800ddd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	2201      	movs	r2, #1
 800dde0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800dde4:	e0b5      	b.n	800df52 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d1a2      	bne.n	800dd36 <HAL_SPI_TransmitReceive+0x130>
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d19d      	bne.n	800dd36 <HAL_SPI_TransmitReceive+0x130>
 800ddfa:	e080      	b.n	800defe <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d002      	beq.n	800de0a <HAL_SPI_TransmitReceive+0x204>
 800de04:	8b7b      	ldrh	r3, [r7, #26]
 800de06:	2b01      	cmp	r3, #1
 800de08:	d16f      	bne.n	800deea <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	330c      	adds	r3, #12
 800de14:	7812      	ldrb	r2, [r2, #0]
 800de16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de1c:	1c5a      	adds	r2, r3, #1
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de26:	b29b      	uxth	r3, r3
 800de28:	3b01      	subs	r3, #1
 800de2a:	b29a      	uxth	r2, r3
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800de30:	e05b      	b.n	800deea <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	f003 0302 	and.w	r3, r3, #2
 800de3c:	2b02      	cmp	r3, #2
 800de3e:	d11c      	bne.n	800de7a <HAL_SPI_TransmitReceive+0x274>
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de44:	b29b      	uxth	r3, r3
 800de46:	2b00      	cmp	r3, #0
 800de48:	d017      	beq.n	800de7a <HAL_SPI_TransmitReceive+0x274>
 800de4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d114      	bne.n	800de7a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	330c      	adds	r3, #12
 800de5a:	7812      	ldrb	r2, [r2, #0]
 800de5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de62:	1c5a      	adds	r2, r3, #1
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	3b01      	subs	r3, #1
 800de70:	b29a      	uxth	r2, r3
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800de76:	2300      	movs	r3, #0
 800de78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	689b      	ldr	r3, [r3, #8]
 800de80:	f003 0301 	and.w	r3, r3, #1
 800de84:	2b01      	cmp	r3, #1
 800de86:	d119      	bne.n	800debc <HAL_SPI_TransmitReceive+0x2b6>
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d014      	beq.n	800debc <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	68da      	ldr	r2, [r3, #12]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de9c:	b2d2      	uxtb	r2, r2
 800de9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea4:	1c5a      	adds	r2, r3, #1
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800deae:	b29b      	uxth	r3, r3
 800deb0:	3b01      	subs	r3, #1
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800deb8:	2301      	movs	r3, #1
 800deba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800debc:	f7f8 fa26 	bl	800630c <HAL_GetTick>
 800dec0:	4602      	mov	r2, r0
 800dec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec4:	1ad3      	subs	r3, r2, r3
 800dec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dec8:	429a      	cmp	r2, r3
 800deca:	d803      	bhi.n	800ded4 <HAL_SPI_TransmitReceive+0x2ce>
 800decc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ded2:	d102      	bne.n	800deda <HAL_SPI_TransmitReceive+0x2d4>
 800ded4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d107      	bne.n	800deea <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800deda:	2303      	movs	r3, #3
 800dedc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2201      	movs	r2, #1
 800dee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800dee8:	e033      	b.n	800df52 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800deee:	b29b      	uxth	r3, r3
 800def0:	2b00      	cmp	r3, #0
 800def2:	d19e      	bne.n	800de32 <HAL_SPI_TransmitReceive+0x22c>
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800def8:	b29b      	uxth	r3, r3
 800defa:	2b00      	cmp	r3, #0
 800defc:	d199      	bne.n	800de32 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800defe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	f000 fafe 	bl	800e504 <SPI_EndRxTxTransaction>
 800df08:	4603      	mov	r3, r0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d006      	beq.n	800df1c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800df0e:	2301      	movs	r3, #1
 800df10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2220      	movs	r2, #32
 800df18:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800df1a:	e01a      	b.n	800df52 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d10a      	bne.n	800df3a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df24:	2300      	movs	r3, #0
 800df26:	617b      	str	r3, [r7, #20]
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	617b      	str	r3, [r7, #20]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	689b      	ldr	r3, [r3, #8]
 800df36:	617b      	str	r3, [r7, #20]
 800df38:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d003      	beq.n	800df4a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800df42:	2301      	movs	r3, #1
 800df44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df48:	e003      	b.n	800df52 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2201      	movs	r2, #1
 800df4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	2200      	movs	r2, #0
 800df56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800df5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3730      	adds	r7, #48	; 0x30
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
	...

0800df68 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	4613      	mov	r3, r2
 800df74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800df76:	2300      	movs	r3, #0
 800df78:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800df80:	2b01      	cmp	r3, #1
 800df82:	d101      	bne.n	800df88 <HAL_SPI_Transmit_DMA+0x20>
 800df84:	2302      	movs	r3, #2
 800df86:	e097      	b.n	800e0b8 <HAL_SPI_Transmit_DMA+0x150>
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2201      	movs	r2, #1
 800df8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800df96:	b2db      	uxtb	r3, r3
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d002      	beq.n	800dfa2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800df9c:	2302      	movs	r3, #2
 800df9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dfa0:	e085      	b.n	800e0ae <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d002      	beq.n	800dfae <HAL_SPI_Transmit_DMA+0x46>
 800dfa8:	88fb      	ldrh	r3, [r7, #6]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d102      	bne.n	800dfb4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dfb2:	e07c      	b.n	800e0ae <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2203      	movs	r2, #3
 800dfb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	88fa      	ldrh	r2, [r7, #6]
 800dfcc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	88fa      	ldrh	r2, [r7, #6]
 800dfd2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	2200      	movs	r2, #0
 800dff0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dffa:	d10f      	bne.n	800e01c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	681a      	ldr	r2, [r3, #0]
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e00a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	681a      	ldr	r2, [r3, #0]
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e01a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e020:	4a27      	ldr	r2, [pc, #156]	; (800e0c0 <HAL_SPI_Transmit_DMA+0x158>)
 800e022:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e028:	4a26      	ldr	r2, [pc, #152]	; (800e0c4 <HAL_SPI_Transmit_DMA+0x15c>)
 800e02a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e030:	4a25      	ldr	r2, [pc, #148]	; (800e0c8 <HAL_SPI_Transmit_DMA+0x160>)
 800e032:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e038:	2200      	movs	r2, #0
 800e03a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e044:	4619      	mov	r1, r3
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	330c      	adds	r3, #12
 800e04c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e052:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e054:	f7f8 fbda 	bl	800680c <HAL_DMA_Start_IT>
 800e058:	4603      	mov	r3, r0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d008      	beq.n	800e070 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e062:	f043 0210 	orr.w	r2, r3, #16
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800e06e:	e01e      	b.n	800e0ae <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e07a:	2b40      	cmp	r3, #64	; 0x40
 800e07c:	d007      	beq.n	800e08e <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e08c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	685a      	ldr	r2, [r3, #4]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f042 0220 	orr.w	r2, r2, #32
 800e09c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	685a      	ldr	r2, [r3, #4]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f042 0202 	orr.w	r2, r2, #2
 800e0ac:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3718      	adds	r7, #24
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	0800e371 	.word	0x0800e371
 800e0c4:	0800e2c9 	.word	0x0800e2c9
 800e0c8:	0800e38d 	.word	0x0800e38d

0800e0cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b088      	sub	sp, #32
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	689b      	ldr	r3, [r3, #8]
 800e0e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e0e4:	69bb      	ldr	r3, [r7, #24]
 800e0e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d10e      	bne.n	800e10c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e0ee:	69bb      	ldr	r3, [r7, #24]
 800e0f0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d009      	beq.n	800e10c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d004      	beq.n	800e10c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	4798      	blx	r3
    return;
 800e10a:	e0ce      	b.n	800e2aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e10c:	69bb      	ldr	r3, [r7, #24]
 800e10e:	f003 0302 	and.w	r3, r3, #2
 800e112:	2b00      	cmp	r3, #0
 800e114:	d009      	beq.n	800e12a <HAL_SPI_IRQHandler+0x5e>
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d004      	beq.n	800e12a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	4798      	blx	r3
    return;
 800e128:	e0bf      	b.n	800e2aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e12a:	69bb      	ldr	r3, [r7, #24]
 800e12c:	f003 0320 	and.w	r3, r3, #32
 800e130:	2b00      	cmp	r3, #0
 800e132:	d10a      	bne.n	800e14a <HAL_SPI_IRQHandler+0x7e>
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d105      	bne.n	800e14a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e13e:	69bb      	ldr	r3, [r7, #24]
 800e140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e144:	2b00      	cmp	r3, #0
 800e146:	f000 80b0 	beq.w	800e2aa <HAL_SPI_IRQHandler+0x1de>
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	f003 0320 	and.w	r3, r3, #32
 800e150:	2b00      	cmp	r3, #0
 800e152:	f000 80aa 	beq.w	800e2aa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e156:	69bb      	ldr	r3, [r7, #24]
 800e158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d023      	beq.n	800e1a8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e166:	b2db      	uxtb	r3, r3
 800e168:	2b03      	cmp	r3, #3
 800e16a:	d011      	beq.n	800e190 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e170:	f043 0204 	orr.w	r2, r3, #4
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e178:	2300      	movs	r3, #0
 800e17a:	617b      	str	r3, [r7, #20]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	68db      	ldr	r3, [r3, #12]
 800e182:	617b      	str	r3, [r7, #20]
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	689b      	ldr	r3, [r3, #8]
 800e18a:	617b      	str	r3, [r7, #20]
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	e00b      	b.n	800e1a8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e190:	2300      	movs	r3, #0
 800e192:	613b      	str	r3, [r7, #16]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	613b      	str	r3, [r7, #16]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	689b      	ldr	r3, [r3, #8]
 800e1a2:	613b      	str	r3, [r7, #16]
 800e1a4:	693b      	ldr	r3, [r7, #16]
        return;
 800e1a6:	e080      	b.n	800e2aa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	f003 0320 	and.w	r3, r3, #32
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d014      	beq.n	800e1dc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1b6:	f043 0201 	orr.w	r2, r3, #1
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e1be:	2300      	movs	r3, #0
 800e1c0:	60fb      	str	r3, [r7, #12]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	689b      	ldr	r3, [r3, #8]
 800e1c8:	60fb      	str	r3, [r7, #12]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1d8:	601a      	str	r2, [r3, #0]
 800e1da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e1dc:	69bb      	ldr	r3, [r7, #24]
 800e1de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d00c      	beq.n	800e200 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1ea:	f043 0208 	orr.w	r2, r3, #8
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	60bb      	str	r3, [r7, #8]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	60bb      	str	r3, [r7, #8]
 800e1fe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e204:	2b00      	cmp	r3, #0
 800e206:	d04f      	beq.n	800e2a8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	685a      	ldr	r2, [r3, #4]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e216:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2201      	movs	r2, #1
 800e21c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	f003 0302 	and.w	r3, r3, #2
 800e226:	2b00      	cmp	r3, #0
 800e228:	d104      	bne.n	800e234 <HAL_SPI_IRQHandler+0x168>
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	f003 0301 	and.w	r3, r3, #1
 800e230:	2b00      	cmp	r3, #0
 800e232:	d034      	beq.n	800e29e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	685a      	ldr	r2, [r3, #4]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f022 0203 	bic.w	r2, r2, #3
 800e242:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d011      	beq.n	800e270 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e250:	4a17      	ldr	r2, [pc, #92]	; (800e2b0 <HAL_SPI_IRQHandler+0x1e4>)
 800e252:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e258:	4618      	mov	r0, r3
 800e25a:	f7f8 fb2f 	bl	80068bc <HAL_DMA_Abort_IT>
 800e25e:	4603      	mov	r3, r0
 800e260:	2b00      	cmp	r3, #0
 800e262:	d005      	beq.n	800e270 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e268:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e274:	2b00      	cmp	r3, #0
 800e276:	d016      	beq.n	800e2a6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e27c:	4a0c      	ldr	r2, [pc, #48]	; (800e2b0 <HAL_SPI_IRQHandler+0x1e4>)
 800e27e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e284:	4618      	mov	r0, r3
 800e286:	f7f8 fb19 	bl	80068bc <HAL_DMA_Abort_IT>
 800e28a:	4603      	mov	r3, r0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d00a      	beq.n	800e2a6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e294:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800e29c:	e003      	b.n	800e2a6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f7f7 fdac 	bl	8005dfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e2a4:	e000      	b.n	800e2a8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800e2a6:	bf00      	nop
    return;
 800e2a8:	bf00      	nop
  }
}
 800e2aa:	3720      	adds	r7, #32
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	0800e3cd 	.word	0x0800e3cd

0800e2b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e2bc:	bf00      	nop
 800e2be:	370c      	adds	r7, #12
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b086      	sub	sp, #24
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e2d6:	f7f8 f819 	bl	800630c <HAL_GetTick>
 800e2da:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2ea:	d03b      	beq.n	800e364 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	685a      	ldr	r2, [r3, #4]
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f022 0220 	bic.w	r2, r2, #32
 800e2fa:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	685a      	ldr	r2, [r3, #4]
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f022 0202 	bic.w	r2, r2, #2
 800e30a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e30c:	693a      	ldr	r2, [r7, #16]
 800e30e:	2164      	movs	r1, #100	; 0x64
 800e310:	6978      	ldr	r0, [r7, #20]
 800e312:	f000 f8f7 	bl	800e504 <SPI_EndRxTxTransaction>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d005      	beq.n	800e328 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e320:	f043 0220 	orr.w	r2, r3, #32
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	689b      	ldr	r3, [r3, #8]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d10a      	bne.n	800e346 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e330:	2300      	movs	r3, #0
 800e332:	60fb      	str	r3, [r7, #12]
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	60fb      	str	r3, [r7, #12]
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	60fb      	str	r3, [r7, #12]
 800e344:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	2200      	movs	r2, #0
 800e34a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	2201      	movs	r2, #1
 800e350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d003      	beq.n	800e364 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e35c:	6978      	ldr	r0, [r7, #20]
 800e35e:	f7f7 fd4d 	bl	8005dfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e362:	e002      	b.n	800e36a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800e364:	6978      	ldr	r0, [r7, #20]
 800e366:	f7f7 fd5f 	bl	8005e28 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e36a:	3718      	adds	r7, #24
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e37c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800e37e:	68f8      	ldr	r0, [r7, #12]
 800e380:	f7ff ff98 	bl	800e2b4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e384:	bf00      	nop
 800e386:	3710      	adds	r7, #16
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e398:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	685a      	ldr	r2, [r3, #4]
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	f022 0203 	bic.w	r2, r2, #3
 800e3a8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3ae:	f043 0210 	orr.w	r2, r3, #16
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f7f7 fd1c 	bl	8005dfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e3c4:	bf00      	nop
 800e3c6:	3710      	adds	r7, #16
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f7f7 fd08 	bl	8005dfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e3ec:	bf00      	nop
 800e3ee:	3710      	adds	r7, #16
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b088      	sub	sp, #32
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	60f8      	str	r0, [r7, #12]
 800e3fc:	60b9      	str	r1, [r7, #8]
 800e3fe:	603b      	str	r3, [r7, #0]
 800e400:	4613      	mov	r3, r2
 800e402:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e404:	f7f7 ff82 	bl	800630c <HAL_GetTick>
 800e408:	4602      	mov	r2, r0
 800e40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40c:	1a9b      	subs	r3, r3, r2
 800e40e:	683a      	ldr	r2, [r7, #0]
 800e410:	4413      	add	r3, r2
 800e412:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e414:	f7f7 ff7a 	bl	800630c <HAL_GetTick>
 800e418:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e41a:	4b39      	ldr	r3, [pc, #228]	; (800e500 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	015b      	lsls	r3, r3, #5
 800e420:	0d1b      	lsrs	r3, r3, #20
 800e422:	69fa      	ldr	r2, [r7, #28]
 800e424:	fb02 f303 	mul.w	r3, r2, r3
 800e428:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e42a:	e054      	b.n	800e4d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e432:	d050      	beq.n	800e4d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e434:	f7f7 ff6a 	bl	800630c <HAL_GetTick>
 800e438:	4602      	mov	r2, r0
 800e43a:	69bb      	ldr	r3, [r7, #24]
 800e43c:	1ad3      	subs	r3, r2, r3
 800e43e:	69fa      	ldr	r2, [r7, #28]
 800e440:	429a      	cmp	r2, r3
 800e442:	d902      	bls.n	800e44a <SPI_WaitFlagStateUntilTimeout+0x56>
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d13d      	bne.n	800e4c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	685a      	ldr	r2, [r3, #4]
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e458:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e462:	d111      	bne.n	800e488 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	689b      	ldr	r3, [r3, #8]
 800e468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e46c:	d004      	beq.n	800e478 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	689b      	ldr	r3, [r3, #8]
 800e472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e476:	d107      	bne.n	800e488 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e486:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e48c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e490:	d10f      	bne.n	800e4b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	681a      	ldr	r2, [r3, #0]
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e4a0:	601a      	str	r2, [r3, #0]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e4b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	2201      	movs	r2, #1
 800e4b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e4c2:	2303      	movs	r3, #3
 800e4c4:	e017      	b.n	800e4f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d101      	bne.n	800e4d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	3b01      	subs	r3, #1
 800e4d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	689a      	ldr	r2, [r3, #8]
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	4013      	ands	r3, r2
 800e4e0:	68ba      	ldr	r2, [r7, #8]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	bf0c      	ite	eq
 800e4e6:	2301      	moveq	r3, #1
 800e4e8:	2300      	movne	r3, #0
 800e4ea:	b2db      	uxtb	r3, r3
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	79fb      	ldrb	r3, [r7, #7]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d19b      	bne.n	800e42c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e4f4:	2300      	movs	r3, #0
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3720      	adds	r7, #32
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	20000040 	.word	0x20000040

0800e504 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b088      	sub	sp, #32
 800e508:	af02      	add	r7, sp, #8
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	9300      	str	r3, [sp, #0]
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	2201      	movs	r2, #1
 800e518:	2102      	movs	r1, #2
 800e51a:	68f8      	ldr	r0, [r7, #12]
 800e51c:	f7ff ff6a 	bl	800e3f4 <SPI_WaitFlagStateUntilTimeout>
 800e520:	4603      	mov	r3, r0
 800e522:	2b00      	cmp	r3, #0
 800e524:	d007      	beq.n	800e536 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e52a:	f043 0220 	orr.w	r2, r3, #32
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800e532:	2303      	movs	r3, #3
 800e534:	e032      	b.n	800e59c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e536:	4b1b      	ldr	r3, [pc, #108]	; (800e5a4 <SPI_EndRxTxTransaction+0xa0>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	4a1b      	ldr	r2, [pc, #108]	; (800e5a8 <SPI_EndRxTxTransaction+0xa4>)
 800e53c:	fba2 2303 	umull	r2, r3, r2, r3
 800e540:	0d5b      	lsrs	r3, r3, #21
 800e542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e546:	fb02 f303 	mul.w	r3, r2, r3
 800e54a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e554:	d112      	bne.n	800e57c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	9300      	str	r3, [sp, #0]
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	2200      	movs	r2, #0
 800e55e:	2180      	movs	r1, #128	; 0x80
 800e560:	68f8      	ldr	r0, [r7, #12]
 800e562:	f7ff ff47 	bl	800e3f4 <SPI_WaitFlagStateUntilTimeout>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d016      	beq.n	800e59a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e570:	f043 0220 	orr.w	r2, r3, #32
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e578:	2303      	movs	r3, #3
 800e57a:	e00f      	b.n	800e59c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00a      	beq.n	800e598 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	3b01      	subs	r3, #1
 800e586:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	689b      	ldr	r3, [r3, #8]
 800e58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e592:	2b80      	cmp	r3, #128	; 0x80
 800e594:	d0f2      	beq.n	800e57c <SPI_EndRxTxTransaction+0x78>
 800e596:	e000      	b.n	800e59a <SPI_EndRxTxTransaction+0x96>
        break;
 800e598:	bf00      	nop
  }

  return HAL_OK;
 800e59a:	2300      	movs	r3, #0
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3718      	adds	r7, #24
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	20000040 	.word	0x20000040
 800e5a8:	165e9f81 	.word	0x165e9f81

0800e5ac <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e5ac:	b084      	sub	sp, #16
 800e5ae:	b480      	push	{r7}
 800e5b0:	b085      	sub	sp, #20
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	6078      	str	r0, [r7, #4]
 800e5b6:	f107 001c 	add.w	r0, r7, #28
 800e5ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e5c2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e5c4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e5c6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e5ca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e5ce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e5d2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e5d6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	4313      	orrs	r3, r2
 800e5dc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e5e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e5ea:	68fa      	ldr	r2, [r7, #12]
 800e5ec:	431a      	orrs	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e5f2:	2300      	movs	r3, #0
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3714      	adds	r7, #20
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	b004      	add	sp, #16
 800e600:	4770      	bx	lr

0800e602 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e602:	b480      	push	{r7}
 800e604:	b083      	sub	sp, #12
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e610:	4618      	mov	r0, r3
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	681a      	ldr	r2, [r3, #0]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e630:	2300      	movs	r3, #0
}
 800e632:	4618      	mov	r0, r3
 800e634:	370c      	adds	r7, #12
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr

0800e63e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e63e:	b480      	push	{r7}
 800e640:	b083      	sub	sp, #12
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2203      	movs	r2, #3
 800e64a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e64c:	2300      	movs	r3, #0
}
 800e64e:	4618      	mov	r0, r3
 800e650:	370c      	adds	r7, #12
 800e652:	46bd      	mov	sp, r7
 800e654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e658:	4770      	bx	lr

0800e65a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e65a:	b480      	push	{r7}
 800e65c:	b083      	sub	sp, #12
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f003 0303 	and.w	r3, r3, #3
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	370c      	adds	r7, #12
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr

0800e676 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e676:	b480      	push	{r7}
 800e678:	b085      	sub	sp, #20
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
 800e67e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e680:	2300      	movs	r3, #0
 800e682:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e694:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e69a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e6a0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e6a2:	68fa      	ldr	r2, [r7, #12]
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	68db      	ldr	r3, [r3, #12]
 800e6ac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e6b0:	f023 030f 	bic.w	r3, r3, #15
 800e6b4:	68fa      	ldr	r2, [r7, #12]
 800e6b6:	431a      	orrs	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e6bc:	2300      	movs	r3, #0
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3714      	adds	r7, #20
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr

0800e6ca <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e6ca:	b480      	push	{r7}
 800e6cc:	b083      	sub	sp, #12
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	691b      	ldr	r3, [r3, #16]
 800e6d6:	b2db      	uxtb	r3, r3
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	370c      	adds	r7, #12
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr

0800e6e4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b085      	sub	sp, #20
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	3314      	adds	r3, #20
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
}  
 800e6fe:	4618      	mov	r0, r3
 800e700:	3714      	adds	r7, #20
 800e702:	46bd      	mov	sp, r7
 800e704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e708:	4770      	bx	lr

0800e70a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e70a:	b480      	push	{r7}
 800e70c:	b085      	sub	sp, #20
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
 800e712:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e714:	2300      	movs	r3, #0
 800e716:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	685a      	ldr	r2, [r3, #4]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e730:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e736:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e73c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e73e:	68fa      	ldr	r2, [r7, #12]
 800e740:	4313      	orrs	r3, r2
 800e742:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e748:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	431a      	orrs	r2, r3
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e754:	2300      	movs	r3, #0

}
 800e756:	4618      	mov	r0, r3
 800e758:	3714      	adds	r7, #20
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr

0800e762 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e762:	b580      	push	{r7, lr}
 800e764:	b088      	sub	sp, #32
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
 800e76a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e770:	2310      	movs	r3, #16
 800e772:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e774:	2340      	movs	r3, #64	; 0x40
 800e776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e778:	2300      	movs	r3, #0
 800e77a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e77c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e780:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e782:	f107 0308 	add.w	r3, r7, #8
 800e786:	4619      	mov	r1, r3
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f7ff ff74 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e78e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e792:	2110      	movs	r1, #16
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f000 fa19 	bl	800ebcc <SDMMC_GetCmdResp1>
 800e79a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e79c:	69fb      	ldr	r3, [r7, #28]
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3720      	adds	r7, #32
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}

0800e7a6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e7a6:	b580      	push	{r7, lr}
 800e7a8:	b088      	sub	sp, #32
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	6078      	str	r0, [r7, #4]
 800e7ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e7b4:	2311      	movs	r3, #17
 800e7b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e7b8:	2340      	movs	r3, #64	; 0x40
 800e7ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e7c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e7c6:	f107 0308 	add.w	r3, r7, #8
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f7ff ff52 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e7d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7d6:	2111      	movs	r1, #17
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 f9f7 	bl	800ebcc <SDMMC_GetCmdResp1>
 800e7de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7e0:	69fb      	ldr	r3, [r7, #28]
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3720      	adds	r7, #32
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}

0800e7ea <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e7ea:	b580      	push	{r7, lr}
 800e7ec:	b088      	sub	sp, #32
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	6078      	str	r0, [r7, #4]
 800e7f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e7f8:	2312      	movs	r3, #18
 800e7fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e7fc:	2340      	movs	r3, #64	; 0x40
 800e7fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e800:	2300      	movs	r3, #0
 800e802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e808:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e80a:	f107 0308 	add.w	r3, r7, #8
 800e80e:	4619      	mov	r1, r3
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f7ff ff30 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e816:	f241 3288 	movw	r2, #5000	; 0x1388
 800e81a:	2112      	movs	r1, #18
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f000 f9d5 	bl	800ebcc <SDMMC_GetCmdResp1>
 800e822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e824:	69fb      	ldr	r3, [r7, #28]
}
 800e826:	4618      	mov	r0, r3
 800e828:	3720      	adds	r7, #32
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}

0800e82e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e82e:	b580      	push	{r7, lr}
 800e830:	b088      	sub	sp, #32
 800e832:	af00      	add	r7, sp, #0
 800e834:	6078      	str	r0, [r7, #4]
 800e836:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e83c:	2318      	movs	r3, #24
 800e83e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e840:	2340      	movs	r3, #64	; 0x40
 800e842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e844:	2300      	movs	r3, #0
 800e846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e84c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e84e:	f107 0308 	add.w	r3, r7, #8
 800e852:	4619      	mov	r1, r3
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f7ff ff0e 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e85a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e85e:	2118      	movs	r1, #24
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f000 f9b3 	bl	800ebcc <SDMMC_GetCmdResp1>
 800e866:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e868:	69fb      	ldr	r3, [r7, #28]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3720      	adds	r7, #32
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e872:	b580      	push	{r7, lr}
 800e874:	b088      	sub	sp, #32
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
 800e87a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e880:	2319      	movs	r3, #25
 800e882:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e884:	2340      	movs	r3, #64	; 0x40
 800e886:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e888:	2300      	movs	r3, #0
 800e88a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e88c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e890:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e892:	f107 0308 	add.w	r3, r7, #8
 800e896:	4619      	mov	r1, r3
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f7ff feec 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e89e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8a2:	2119      	movs	r1, #25
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f000 f991 	bl	800ebcc <SDMMC_GetCmdResp1>
 800e8aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8ac:	69fb      	ldr	r3, [r7, #28]
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3720      	adds	r7, #32
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
	...

0800e8b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b088      	sub	sp, #32
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e8c4:	230c      	movs	r3, #12
 800e8c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e8c8:	2340      	movs	r3, #64	; 0x40
 800e8ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e8d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e8d6:	f107 0308 	add.w	r3, r7, #8
 800e8da:	4619      	mov	r1, r3
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f7ff feca 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e8e2:	4a05      	ldr	r2, [pc, #20]	; (800e8f8 <SDMMC_CmdStopTransfer+0x40>)
 800e8e4:	210c      	movs	r1, #12
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f000 f970 	bl	800ebcc <SDMMC_GetCmdResp1>
 800e8ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8ee:	69fb      	ldr	r3, [r7, #28]
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3720      	adds	r7, #32
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}
 800e8f8:	05f5e100 	.word	0x05f5e100

0800e8fc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b08a      	sub	sp, #40	; 0x28
 800e900:	af00      	add	r7, sp, #0
 800e902:	60f8      	str	r0, [r7, #12]
 800e904:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e90c:	2307      	movs	r3, #7
 800e90e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e910:	2340      	movs	r3, #64	; 0x40
 800e912:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e914:	2300      	movs	r3, #0
 800e916:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e91c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e91e:	f107 0310 	add.w	r3, r7, #16
 800e922:	4619      	mov	r1, r3
 800e924:	68f8      	ldr	r0, [r7, #12]
 800e926:	f7ff fea6 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e92a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e92e:	2107      	movs	r1, #7
 800e930:	68f8      	ldr	r0, [r7, #12]
 800e932:	f000 f94b 	bl	800ebcc <SDMMC_GetCmdResp1>
 800e936:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3728      	adds	r7, #40	; 0x28
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e942:	b580      	push	{r7, lr}
 800e944:	b088      	sub	sp, #32
 800e946:	af00      	add	r7, sp, #0
 800e948:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e94a:	2300      	movs	r3, #0
 800e94c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e94e:	2300      	movs	r3, #0
 800e950:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e952:	2300      	movs	r3, #0
 800e954:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e956:	2300      	movs	r3, #0
 800e958:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e95a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e95e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e960:	f107 0308 	add.w	r3, r7, #8
 800e964:	4619      	mov	r1, r3
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f7ff fe85 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 fb65 	bl	800f03c <SDMMC_GetCmdError>
 800e972:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e974:	69fb      	ldr	r3, [r7, #28]
}
 800e976:	4618      	mov	r0, r3
 800e978:	3720      	adds	r7, #32
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e97e:	b580      	push	{r7, lr}
 800e980:	b088      	sub	sp, #32
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e986:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e98a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e98c:	2308      	movs	r3, #8
 800e98e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e990:	2340      	movs	r3, #64	; 0x40
 800e992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e994:	2300      	movs	r3, #0
 800e996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e99c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e99e:	f107 0308 	add.w	r3, r7, #8
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7ff fe66 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 faf8 	bl	800efa0 <SDMMC_GetCmdResp7>
 800e9b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9b2:	69fb      	ldr	r3, [r7, #28]
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3720      	adds	r7, #32
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b088      	sub	sp, #32
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e9ca:	2337      	movs	r3, #55	; 0x37
 800e9cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e9ce:	2340      	movs	r3, #64	; 0x40
 800e9d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e9d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e9dc:	f107 0308 	add.w	r3, r7, #8
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f7ff fe47 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e9e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9ec:	2137      	movs	r1, #55	; 0x37
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 f8ec 	bl	800ebcc <SDMMC_GetCmdResp1>
 800e9f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9f6:	69fb      	ldr	r3, [r7, #28]
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3720      	adds	r7, #32
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b088      	sub	sp, #32
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ea10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ea16:	2329      	movs	r3, #41	; 0x29
 800ea18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ea1a:	2340      	movs	r3, #64	; 0x40
 800ea1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea28:	f107 0308 	add.w	r3, r7, #8
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f7ff fe21 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f000 f9ff 	bl	800ee38 <SDMMC_GetCmdResp3>
 800ea3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea3c:	69fb      	ldr	r3, [r7, #28]
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3720      	adds	r7, #32
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}

0800ea46 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ea46:	b580      	push	{r7, lr}
 800ea48:	b088      	sub	sp, #32
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]
 800ea4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ea54:	2306      	movs	r3, #6
 800ea56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ea58:	2340      	movs	r3, #64	; 0x40
 800ea5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea66:	f107 0308 	add.w	r3, r7, #8
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7ff fe02 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ea72:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea76:	2106      	movs	r1, #6
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f000 f8a7 	bl	800ebcc <SDMMC_GetCmdResp1>
 800ea7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea80:	69fb      	ldr	r3, [r7, #28]
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3720      	adds	r7, #32
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ea8a:	b580      	push	{r7, lr}
 800ea8c:	b088      	sub	sp, #32
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ea92:	2300      	movs	r3, #0
 800ea94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ea96:	2333      	movs	r3, #51	; 0x33
 800ea98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ea9a:	2340      	movs	r3, #64	; 0x40
 800ea9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eaa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaa6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eaa8:	f107 0308 	add.w	r3, r7, #8
 800eaac:	4619      	mov	r1, r3
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f7ff fde1 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800eab4:	f241 3288 	movw	r2, #5000	; 0x1388
 800eab8:	2133      	movs	r1, #51	; 0x33
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f000 f886 	bl	800ebcc <SDMMC_GetCmdResp1>
 800eac0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eac2:	69fb      	ldr	r3, [r7, #28]
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3720      	adds	r7, #32
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b088      	sub	sp, #32
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ead4:	2300      	movs	r3, #0
 800ead6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ead8:	2302      	movs	r3, #2
 800eada:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800eadc:	23c0      	movs	r3, #192	; 0xc0
 800eade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eae0:	2300      	movs	r3, #0
 800eae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eae8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eaea:	f107 0308 	add.w	r3, r7, #8
 800eaee:	4619      	mov	r1, r3
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f7ff fdc0 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 f956 	bl	800eda8 <SDMMC_GetCmdResp2>
 800eafc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eafe:	69fb      	ldr	r3, [r7, #28]
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3720      	adds	r7, #32
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b088      	sub	sp, #32
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800eb16:	2309      	movs	r3, #9
 800eb18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800eb1a:	23c0      	movs	r3, #192	; 0xc0
 800eb1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb28:	f107 0308 	add.w	r3, r7, #8
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f7ff fda1 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f000 f937 	bl	800eda8 <SDMMC_GetCmdResp2>
 800eb3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb3c:	69fb      	ldr	r3, [r7, #28]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3720      	adds	r7, #32
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800eb46:	b580      	push	{r7, lr}
 800eb48:	b088      	sub	sp, #32
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
 800eb4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800eb50:	2300      	movs	r3, #0
 800eb52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800eb54:	2303      	movs	r3, #3
 800eb56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eb58:	2340      	movs	r3, #64	; 0x40
 800eb5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb66:	f107 0308 	add.w	r3, r7, #8
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f7ff fd82 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800eb72:	683a      	ldr	r2, [r7, #0]
 800eb74:	2103      	movs	r1, #3
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f000 f99c 	bl	800eeb4 <SDMMC_GetCmdResp6>
 800eb7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb7e:	69fb      	ldr	r3, [r7, #28]
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3720      	adds	r7, #32
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b088      	sub	sp, #32
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800eb96:	230d      	movs	r3, #13
 800eb98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eb9a:	2340      	movs	r3, #64	; 0x40
 800eb9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eba6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eba8:	f107 0308 	add.w	r3, r7, #8
 800ebac:	4619      	mov	r1, r3
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f7ff fd61 	bl	800e676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ebb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebb8:	210d      	movs	r1, #13
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f000 f806 	bl	800ebcc <SDMMC_GetCmdResp1>
 800ebc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebc2:	69fb      	ldr	r3, [r7, #28]
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3720      	adds	r7, #32
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b088      	sub	sp, #32
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	60f8      	str	r0, [r7, #12]
 800ebd4:	460b      	mov	r3, r1
 800ebd6:	607a      	str	r2, [r7, #4]
 800ebd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ebda:	4b70      	ldr	r3, [pc, #448]	; (800ed9c <SDMMC_GetCmdResp1+0x1d0>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4a70      	ldr	r2, [pc, #448]	; (800eda0 <SDMMC_GetCmdResp1+0x1d4>)
 800ebe0:	fba2 2303 	umull	r2, r3, r2, r3
 800ebe4:	0a5a      	lsrs	r2, r3, #9
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	fb02 f303 	mul.w	r3, r2, r3
 800ebec:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ebee:	69fb      	ldr	r3, [r7, #28]
 800ebf0:	1e5a      	subs	r2, r3, #1
 800ebf2:	61fa      	str	r2, [r7, #28]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d102      	bne.n	800ebfe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ebf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ebfc:	e0c9      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec02:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d0ef      	beq.n	800ebee <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d1ea      	bne.n	800ebee <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec1c:	f003 0304 	and.w	r3, r3, #4
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d004      	beq.n	800ec2e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2204      	movs	r2, #4
 800ec28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec2a:	2304      	movs	r3, #4
 800ec2c:	e0b1      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec32:	f003 0301 	and.w	r3, r3, #1
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d004      	beq.n	800ec44 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec40:	2301      	movs	r3, #1
 800ec42:	e0a6      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	22c5      	movs	r2, #197	; 0xc5
 800ec48:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ec4a:	68f8      	ldr	r0, [r7, #12]
 800ec4c:	f7ff fd3d 	bl	800e6ca <SDIO_GetCommandResponse>
 800ec50:	4603      	mov	r3, r0
 800ec52:	461a      	mov	r2, r3
 800ec54:	7afb      	ldrb	r3, [r7, #11]
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d001      	beq.n	800ec5e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	e099      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ec5e:	2100      	movs	r1, #0
 800ec60:	68f8      	ldr	r0, [r7, #12]
 800ec62:	f7ff fd3f 	bl	800e6e4 <SDIO_GetResponse>
 800ec66:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ec68:	697a      	ldr	r2, [r7, #20]
 800ec6a:	4b4e      	ldr	r3, [pc, #312]	; (800eda4 <SDMMC_GetCmdResp1+0x1d8>)
 800ec6c:	4013      	ands	r3, r2
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d101      	bne.n	800ec76 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ec72:	2300      	movs	r3, #0
 800ec74:	e08d      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	da02      	bge.n	800ec82 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ec7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ec80:	e087      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d001      	beq.n	800ec90 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ec8c:	2340      	movs	r3, #64	; 0x40
 800ec8e:	e080      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d001      	beq.n	800ec9e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ec9a:	2380      	movs	r3, #128	; 0x80
 800ec9c:	e079      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d002      	beq.n	800ecae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800eca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ecac:	e071      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d002      	beq.n	800ecbe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ecb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ecbc:	e069      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d002      	beq.n	800ecce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ecc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eccc:	e061      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d002      	beq.n	800ecde <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ecd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ecdc:	e059      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d002      	beq.n	800ecee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ece8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ecec:	e051      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d002      	beq.n	800ecfe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ecf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ecfc:	e049      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d002      	beq.n	800ed0e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ed08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ed0c:	e041      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d002      	beq.n	800ed1e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ed18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed1c:	e039      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d002      	beq.n	800ed2e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ed28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ed2c:	e031      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d002      	beq.n	800ed3e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ed38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ed3c:	e029      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d002      	beq.n	800ed4e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ed48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ed4c:	e021      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d002      	beq.n	800ed5e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ed58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ed5c:	e019      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d002      	beq.n	800ed6e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ed68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ed6c:	e011      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d002      	beq.n	800ed7e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ed78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ed7c:	e009      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	f003 0308 	and.w	r3, r3, #8
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d002      	beq.n	800ed8e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ed88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ed8c:	e001      	b.n	800ed92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ed8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3720      	adds	r7, #32
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	20000040 	.word	0x20000040
 800eda0:	10624dd3 	.word	0x10624dd3
 800eda4:	fdffe008 	.word	0xfdffe008

0800eda8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b085      	sub	sp, #20
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800edb0:	4b1f      	ldr	r3, [pc, #124]	; (800ee30 <SDMMC_GetCmdResp2+0x88>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4a1f      	ldr	r2, [pc, #124]	; (800ee34 <SDMMC_GetCmdResp2+0x8c>)
 800edb6:	fba2 2303 	umull	r2, r3, r2, r3
 800edba:	0a5b      	lsrs	r3, r3, #9
 800edbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800edc0:	fb02 f303 	mul.w	r3, r2, r3
 800edc4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	1e5a      	subs	r2, r3, #1
 800edca:	60fa      	str	r2, [r7, #12]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d102      	bne.n	800edd6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800edd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800edd4:	e026      	b.n	800ee24 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d0ef      	beq.n	800edc6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800edec:	2b00      	cmp	r3, #0
 800edee:	d1ea      	bne.n	800edc6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edf4:	f003 0304 	and.w	r3, r3, #4
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d004      	beq.n	800ee06 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2204      	movs	r2, #4
 800ee00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee02:	2304      	movs	r3, #4
 800ee04:	e00e      	b.n	800ee24 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee0a:	f003 0301 	and.w	r3, r3, #1
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d004      	beq.n	800ee1c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2201      	movs	r2, #1
 800ee16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	e003      	b.n	800ee24 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	22c5      	movs	r2, #197	; 0xc5
 800ee20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ee22:	2300      	movs	r3, #0
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3714      	adds	r7, #20
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2e:	4770      	bx	lr
 800ee30:	20000040 	.word	0x20000040
 800ee34:	10624dd3 	.word	0x10624dd3

0800ee38 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b085      	sub	sp, #20
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ee40:	4b1a      	ldr	r3, [pc, #104]	; (800eeac <SDMMC_GetCmdResp3+0x74>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	4a1a      	ldr	r2, [pc, #104]	; (800eeb0 <SDMMC_GetCmdResp3+0x78>)
 800ee46:	fba2 2303 	umull	r2, r3, r2, r3
 800ee4a:	0a5b      	lsrs	r3, r3, #9
 800ee4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee50:	fb02 f303 	mul.w	r3, r2, r3
 800ee54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	1e5a      	subs	r2, r3, #1
 800ee5a:	60fa      	str	r2, [r7, #12]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d102      	bne.n	800ee66 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ee60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ee64:	e01b      	b.n	800ee9e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d0ef      	beq.n	800ee56 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d1ea      	bne.n	800ee56 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee84:	f003 0304 	and.w	r3, r3, #4
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d004      	beq.n	800ee96 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2204      	movs	r2, #4
 800ee90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee92:	2304      	movs	r3, #4
 800ee94:	e003      	b.n	800ee9e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	22c5      	movs	r2, #197	; 0xc5
 800ee9a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ee9c:	2300      	movs	r3, #0
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3714      	adds	r7, #20
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr
 800eeaa:	bf00      	nop
 800eeac:	20000040 	.word	0x20000040
 800eeb0:	10624dd3 	.word	0x10624dd3

0800eeb4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b088      	sub	sp, #32
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	460b      	mov	r3, r1
 800eebe:	607a      	str	r2, [r7, #4]
 800eec0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eec2:	4b35      	ldr	r3, [pc, #212]	; (800ef98 <SDMMC_GetCmdResp6+0xe4>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a35      	ldr	r2, [pc, #212]	; (800ef9c <SDMMC_GetCmdResp6+0xe8>)
 800eec8:	fba2 2303 	umull	r2, r3, r2, r3
 800eecc:	0a5b      	lsrs	r3, r3, #9
 800eece:	f241 3288 	movw	r2, #5000	; 0x1388
 800eed2:	fb02 f303 	mul.w	r3, r2, r3
 800eed6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800eed8:	69fb      	ldr	r3, [r7, #28]
 800eeda:	1e5a      	subs	r2, r3, #1
 800eedc:	61fa      	str	r2, [r7, #28]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d102      	bne.n	800eee8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eee2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eee6:	e052      	b.n	800ef8e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeec:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eeee:	69bb      	ldr	r3, [r7, #24]
 800eef0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d0ef      	beq.n	800eed8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1ea      	bne.n	800eed8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef06:	f003 0304 	and.w	r3, r3, #4
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d004      	beq.n	800ef18 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2204      	movs	r2, #4
 800ef12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef14:	2304      	movs	r3, #4
 800ef16:	e03a      	b.n	800ef8e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef1c:	f003 0301 	and.w	r3, r3, #1
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d004      	beq.n	800ef2e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2201      	movs	r2, #1
 800ef28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	e02f      	b.n	800ef8e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	f7ff fbcb 	bl	800e6ca <SDIO_GetCommandResponse>
 800ef34:	4603      	mov	r3, r0
 800ef36:	461a      	mov	r2, r3
 800ef38:	7afb      	ldrb	r3, [r7, #11]
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d001      	beq.n	800ef42 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e025      	b.n	800ef8e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	22c5      	movs	r2, #197	; 0xc5
 800ef46:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ef48:	2100      	movs	r1, #0
 800ef4a:	68f8      	ldr	r0, [r7, #12]
 800ef4c:	f7ff fbca 	bl	800e6e4 <SDIO_GetResponse>
 800ef50:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d106      	bne.n	800ef6a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	0c1b      	lsrs	r3, r3, #16
 800ef60:	b29a      	uxth	r2, r3
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ef66:	2300      	movs	r3, #0
 800ef68:	e011      	b.n	800ef8e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d002      	beq.n	800ef7a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ef74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ef78:	e009      	b.n	800ef8e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d002      	beq.n	800ef8a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ef84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef88:	e001      	b.n	800ef8e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ef8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3720      	adds	r7, #32
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop
 800ef98:	20000040 	.word	0x20000040
 800ef9c:	10624dd3 	.word	0x10624dd3

0800efa0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b085      	sub	sp, #20
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800efa8:	4b22      	ldr	r3, [pc, #136]	; (800f034 <SDMMC_GetCmdResp7+0x94>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4a22      	ldr	r2, [pc, #136]	; (800f038 <SDMMC_GetCmdResp7+0x98>)
 800efae:	fba2 2303 	umull	r2, r3, r2, r3
 800efb2:	0a5b      	lsrs	r3, r3, #9
 800efb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800efb8:	fb02 f303 	mul.w	r3, r2, r3
 800efbc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	1e5a      	subs	r2, r3, #1
 800efc2:	60fa      	str	r2, [r7, #12]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d102      	bne.n	800efce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800efc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800efcc:	e02c      	b.n	800f028 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efd2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d0ef      	beq.n	800efbe <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d1ea      	bne.n	800efbe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efec:	f003 0304 	and.w	r3, r3, #4
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d004      	beq.n	800effe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2204      	movs	r2, #4
 800eff8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800effa:	2304      	movs	r3, #4
 800effc:	e014      	b.n	800f028 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f002:	f003 0301 	and.w	r3, r3, #1
 800f006:	2b00      	cmp	r3, #0
 800f008:	d004      	beq.n	800f014 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2201      	movs	r2, #1
 800f00e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f010:	2301      	movs	r3, #1
 800f012:	e009      	b.n	800f028 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d002      	beq.n	800f026 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2240      	movs	r2, #64	; 0x40
 800f024:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f026:	2300      	movs	r3, #0
  
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3714      	adds	r7, #20
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr
 800f034:	20000040 	.word	0x20000040
 800f038:	10624dd3 	.word	0x10624dd3

0800f03c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b085      	sub	sp, #20
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f044:	4b11      	ldr	r3, [pc, #68]	; (800f08c <SDMMC_GetCmdError+0x50>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4a11      	ldr	r2, [pc, #68]	; (800f090 <SDMMC_GetCmdError+0x54>)
 800f04a:	fba2 2303 	umull	r2, r3, r2, r3
 800f04e:	0a5b      	lsrs	r3, r3, #9
 800f050:	f241 3288 	movw	r2, #5000	; 0x1388
 800f054:	fb02 f303 	mul.w	r3, r2, r3
 800f058:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	1e5a      	subs	r2, r3, #1
 800f05e:	60fa      	str	r2, [r7, #12]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d102      	bne.n	800f06a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f064:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f068:	e009      	b.n	800f07e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f072:	2b00      	cmp	r3, #0
 800f074:	d0f1      	beq.n	800f05a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	22c5      	movs	r2, #197	; 0xc5
 800f07a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3714      	adds	r7, #20
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr
 800f08a:	bf00      	nop
 800f08c:	20000040 	.word	0x20000040
 800f090:	10624dd3 	.word	0x10624dd3

0800f094 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f094:	b084      	sub	sp, #16
 800f096:	b580      	push	{r7, lr}
 800f098:	b084      	sub	sp, #16
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	6078      	str	r0, [r7, #4]
 800f09e:	f107 001c 	add.w	r0, r7, #28
 800f0a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f0a6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d123      	bne.n	800f0f6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	68db      	ldr	r3, [r3, #12]
 800f0be:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f0c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	68db      	ldr	r3, [r3, #12]
 800f0ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f0d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d105      	bne.n	800f0ea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	68db      	ldr	r3, [r3, #12]
 800f0e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f001 fae2 	bl	80106b4 <USB_CoreReset>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	73fb      	strb	r3, [r7, #15]
 800f0f4:	e01b      	b.n	800f12e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	68db      	ldr	r3, [r3, #12]
 800f0fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f001 fad6 	bl	80106b4 <USB_CoreReset>
 800f108:	4603      	mov	r3, r0
 800f10a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f10c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f110:	2b00      	cmp	r3, #0
 800f112:	d106      	bne.n	800f122 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f118:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	639a      	str	r2, [r3, #56]	; 0x38
 800f120:	e005      	b.n	800f12e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f126:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f12e:	7fbb      	ldrb	r3, [r7, #30]
 800f130:	2b01      	cmp	r3, #1
 800f132:	d10b      	bne.n	800f14c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	689b      	ldr	r3, [r3, #8]
 800f138:	f043 0206 	orr.w	r2, r3, #6
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	689b      	ldr	r3, [r3, #8]
 800f144:	f043 0220 	orr.w	r2, r3, #32
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3710      	adds	r7, #16
 800f152:	46bd      	mov	sp, r7
 800f154:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f158:	b004      	add	sp, #16
 800f15a:	4770      	bx	lr

0800f15c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f15c:	b480      	push	{r7}
 800f15e:	b087      	sub	sp, #28
 800f160:	af00      	add	r7, sp, #0
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	4613      	mov	r3, r2
 800f168:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f16a:	79fb      	ldrb	r3, [r7, #7]
 800f16c:	2b02      	cmp	r3, #2
 800f16e:	d165      	bne.n	800f23c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	4a41      	ldr	r2, [pc, #260]	; (800f278 <USB_SetTurnaroundTime+0x11c>)
 800f174:	4293      	cmp	r3, r2
 800f176:	d906      	bls.n	800f186 <USB_SetTurnaroundTime+0x2a>
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	4a40      	ldr	r2, [pc, #256]	; (800f27c <USB_SetTurnaroundTime+0x120>)
 800f17c:	4293      	cmp	r3, r2
 800f17e:	d202      	bcs.n	800f186 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f180:	230f      	movs	r3, #15
 800f182:	617b      	str	r3, [r7, #20]
 800f184:	e062      	b.n	800f24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	4a3c      	ldr	r2, [pc, #240]	; (800f27c <USB_SetTurnaroundTime+0x120>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d306      	bcc.n	800f19c <USB_SetTurnaroundTime+0x40>
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	4a3b      	ldr	r2, [pc, #236]	; (800f280 <USB_SetTurnaroundTime+0x124>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d202      	bcs.n	800f19c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f196:	230e      	movs	r3, #14
 800f198:	617b      	str	r3, [r7, #20]
 800f19a:	e057      	b.n	800f24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	4a38      	ldr	r2, [pc, #224]	; (800f280 <USB_SetTurnaroundTime+0x124>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d306      	bcc.n	800f1b2 <USB_SetTurnaroundTime+0x56>
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	4a37      	ldr	r2, [pc, #220]	; (800f284 <USB_SetTurnaroundTime+0x128>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d202      	bcs.n	800f1b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f1ac:	230d      	movs	r3, #13
 800f1ae:	617b      	str	r3, [r7, #20]
 800f1b0:	e04c      	b.n	800f24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	4a33      	ldr	r2, [pc, #204]	; (800f284 <USB_SetTurnaroundTime+0x128>)
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	d306      	bcc.n	800f1c8 <USB_SetTurnaroundTime+0x6c>
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	4a32      	ldr	r2, [pc, #200]	; (800f288 <USB_SetTurnaroundTime+0x12c>)
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	d802      	bhi.n	800f1c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f1c2:	230c      	movs	r3, #12
 800f1c4:	617b      	str	r3, [r7, #20]
 800f1c6:	e041      	b.n	800f24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	4a2f      	ldr	r2, [pc, #188]	; (800f288 <USB_SetTurnaroundTime+0x12c>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d906      	bls.n	800f1de <USB_SetTurnaroundTime+0x82>
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	4a2e      	ldr	r2, [pc, #184]	; (800f28c <USB_SetTurnaroundTime+0x130>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d802      	bhi.n	800f1de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f1d8:	230b      	movs	r3, #11
 800f1da:	617b      	str	r3, [r7, #20]
 800f1dc:	e036      	b.n	800f24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	4a2a      	ldr	r2, [pc, #168]	; (800f28c <USB_SetTurnaroundTime+0x130>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d906      	bls.n	800f1f4 <USB_SetTurnaroundTime+0x98>
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	4a29      	ldr	r2, [pc, #164]	; (800f290 <USB_SetTurnaroundTime+0x134>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d802      	bhi.n	800f1f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f1ee:	230a      	movs	r3, #10
 800f1f0:	617b      	str	r3, [r7, #20]
 800f1f2:	e02b      	b.n	800f24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	4a26      	ldr	r2, [pc, #152]	; (800f290 <USB_SetTurnaroundTime+0x134>)
 800f1f8:	4293      	cmp	r3, r2
 800f1fa:	d906      	bls.n	800f20a <USB_SetTurnaroundTime+0xae>
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	4a25      	ldr	r2, [pc, #148]	; (800f294 <USB_SetTurnaroundTime+0x138>)
 800f200:	4293      	cmp	r3, r2
 800f202:	d202      	bcs.n	800f20a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f204:	2309      	movs	r3, #9
 800f206:	617b      	str	r3, [r7, #20]
 800f208:	e020      	b.n	800f24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	4a21      	ldr	r2, [pc, #132]	; (800f294 <USB_SetTurnaroundTime+0x138>)
 800f20e:	4293      	cmp	r3, r2
 800f210:	d306      	bcc.n	800f220 <USB_SetTurnaroundTime+0xc4>
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	4a20      	ldr	r2, [pc, #128]	; (800f298 <USB_SetTurnaroundTime+0x13c>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d802      	bhi.n	800f220 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f21a:	2308      	movs	r3, #8
 800f21c:	617b      	str	r3, [r7, #20]
 800f21e:	e015      	b.n	800f24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	4a1d      	ldr	r2, [pc, #116]	; (800f298 <USB_SetTurnaroundTime+0x13c>)
 800f224:	4293      	cmp	r3, r2
 800f226:	d906      	bls.n	800f236 <USB_SetTurnaroundTime+0xda>
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	4a1c      	ldr	r2, [pc, #112]	; (800f29c <USB_SetTurnaroundTime+0x140>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d202      	bcs.n	800f236 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f230:	2307      	movs	r3, #7
 800f232:	617b      	str	r3, [r7, #20]
 800f234:	e00a      	b.n	800f24c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f236:	2306      	movs	r3, #6
 800f238:	617b      	str	r3, [r7, #20]
 800f23a:	e007      	b.n	800f24c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f23c:	79fb      	ldrb	r3, [r7, #7]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d102      	bne.n	800f248 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f242:	2309      	movs	r3, #9
 800f244:	617b      	str	r3, [r7, #20]
 800f246:	e001      	b.n	800f24c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f248:	2309      	movs	r3, #9
 800f24a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	68db      	ldr	r3, [r3, #12]
 800f250:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	68da      	ldr	r2, [r3, #12]
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	029b      	lsls	r3, r3, #10
 800f260:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f264:	431a      	orrs	r2, r3
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f26a:	2300      	movs	r3, #0
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	371c      	adds	r7, #28
 800f270:	46bd      	mov	sp, r7
 800f272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f276:	4770      	bx	lr
 800f278:	00d8acbf 	.word	0x00d8acbf
 800f27c:	00e4e1c0 	.word	0x00e4e1c0
 800f280:	00f42400 	.word	0x00f42400
 800f284:	01067380 	.word	0x01067380
 800f288:	011a499f 	.word	0x011a499f
 800f28c:	01312cff 	.word	0x01312cff
 800f290:	014ca43f 	.word	0x014ca43f
 800f294:	016e3600 	.word	0x016e3600
 800f298:	01a6ab1f 	.word	0x01a6ab1f
 800f29c:	01e84800 	.word	0x01e84800

0800f2a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	689b      	ldr	r3, [r3, #8]
 800f2ac:	f043 0201 	orr.w	r2, r3, #1
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f2b4:	2300      	movs	r3, #0
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	370c      	adds	r7, #12
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr

0800f2c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f2c2:	b480      	push	{r7}
 800f2c4:	b083      	sub	sp, #12
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	689b      	ldr	r3, [r3, #8]
 800f2ce:	f023 0201 	bic.w	r2, r3, #1
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f2d6:	2300      	movs	r3, #0
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	370c      	adds	r7, #12
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b084      	sub	sp, #16
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	68db      	ldr	r3, [r3, #12]
 800f2f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f300:	78fb      	ldrb	r3, [r7, #3]
 800f302:	2b01      	cmp	r3, #1
 800f304:	d115      	bne.n	800f332 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	68db      	ldr	r3, [r3, #12]
 800f30a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f312:	200a      	movs	r0, #10
 800f314:	f7f7 f806 	bl	8006324 <HAL_Delay>
      ms += 10U;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	330a      	adds	r3, #10
 800f31c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f001 f939 	bl	8010596 <USB_GetMode>
 800f324:	4603      	mov	r3, r0
 800f326:	2b01      	cmp	r3, #1
 800f328:	d01e      	beq.n	800f368 <USB_SetCurrentMode+0x84>
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	2bc7      	cmp	r3, #199	; 0xc7
 800f32e:	d9f0      	bls.n	800f312 <USB_SetCurrentMode+0x2e>
 800f330:	e01a      	b.n	800f368 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f332:	78fb      	ldrb	r3, [r7, #3]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d115      	bne.n	800f364 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	68db      	ldr	r3, [r3, #12]
 800f33c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f344:	200a      	movs	r0, #10
 800f346:	f7f6 ffed 	bl	8006324 <HAL_Delay>
      ms += 10U;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	330a      	adds	r3, #10
 800f34e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f001 f920 	bl	8010596 <USB_GetMode>
 800f356:	4603      	mov	r3, r0
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d005      	beq.n	800f368 <USB_SetCurrentMode+0x84>
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2bc7      	cmp	r3, #199	; 0xc7
 800f360:	d9f0      	bls.n	800f344 <USB_SetCurrentMode+0x60>
 800f362:	e001      	b.n	800f368 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f364:	2301      	movs	r3, #1
 800f366:	e005      	b.n	800f374 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2bc8      	cmp	r3, #200	; 0xc8
 800f36c:	d101      	bne.n	800f372 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f36e:	2301      	movs	r3, #1
 800f370:	e000      	b.n	800f374 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f372:	2300      	movs	r3, #0
}
 800f374:	4618      	mov	r0, r3
 800f376:	3710      	adds	r7, #16
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f37c:	b084      	sub	sp, #16
 800f37e:	b580      	push	{r7, lr}
 800f380:	b086      	sub	sp, #24
 800f382:	af00      	add	r7, sp, #0
 800f384:	6078      	str	r0, [r7, #4]
 800f386:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f38a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f38e:	2300      	movs	r3, #0
 800f390:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f396:	2300      	movs	r3, #0
 800f398:	613b      	str	r3, [r7, #16]
 800f39a:	e009      	b.n	800f3b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f39c:	687a      	ldr	r2, [r7, #4]
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	3340      	adds	r3, #64	; 0x40
 800f3a2:	009b      	lsls	r3, r3, #2
 800f3a4:	4413      	add	r3, r2
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	613b      	str	r3, [r7, #16]
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	2b0e      	cmp	r3, #14
 800f3b4:	d9f2      	bls.n	800f39c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f3b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d11c      	bne.n	800f3f8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	68fa      	ldr	r2, [r7, #12]
 800f3c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f3cc:	f043 0302 	orr.w	r3, r3, #2
 800f3d0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3e2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3ee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	639a      	str	r2, [r3, #56]	; 0x38
 800f3f6:	e00b      	b.n	800f410 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f408:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f416:	461a      	mov	r2, r3
 800f418:	2300      	movs	r3, #0
 800f41a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f41c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800f420:	2b01      	cmp	r3, #1
 800f422:	d10d      	bne.n	800f440 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d104      	bne.n	800f436 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f42c:	2100      	movs	r1, #0
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 f968 	bl	800f704 <USB_SetDevSpeed>
 800f434:	e008      	b.n	800f448 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f436:	2101      	movs	r1, #1
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f000 f963 	bl	800f704 <USB_SetDevSpeed>
 800f43e:	e003      	b.n	800f448 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f440:	2103      	movs	r1, #3
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f000 f95e 	bl	800f704 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f448:	2110      	movs	r1, #16
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f000 f8fa 	bl	800f644 <USB_FlushTxFifo>
 800f450:	4603      	mov	r3, r0
 800f452:	2b00      	cmp	r3, #0
 800f454:	d001      	beq.n	800f45a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800f456:	2301      	movs	r3, #1
 800f458:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f000 f924 	bl	800f6a8 <USB_FlushRxFifo>
 800f460:	4603      	mov	r3, r0
 800f462:	2b00      	cmp	r3, #0
 800f464:	d001      	beq.n	800f46a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800f466:	2301      	movs	r3, #1
 800f468:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f470:	461a      	mov	r2, r3
 800f472:	2300      	movs	r3, #0
 800f474:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f47c:	461a      	mov	r2, r3
 800f47e:	2300      	movs	r3, #0
 800f480:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f488:	461a      	mov	r2, r3
 800f48a:	2300      	movs	r3, #0
 800f48c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f48e:	2300      	movs	r3, #0
 800f490:	613b      	str	r3, [r7, #16]
 800f492:	e043      	b.n	800f51c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	015a      	lsls	r2, r3, #5
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	4413      	add	r3, r2
 800f49c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f4a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f4aa:	d118      	bne.n	800f4de <USB_DevInit+0x162>
    {
      if (i == 0U)
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d10a      	bne.n	800f4c8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	015a      	lsls	r2, r3, #5
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	4413      	add	r3, r2
 800f4ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4be:	461a      	mov	r2, r3
 800f4c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f4c4:	6013      	str	r3, [r2, #0]
 800f4c6:	e013      	b.n	800f4f0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	015a      	lsls	r2, r3, #5
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	4413      	add	r3, r2
 800f4d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f4da:	6013      	str	r3, [r2, #0]
 800f4dc:	e008      	b.n	800f4f0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	015a      	lsls	r2, r3, #5
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	4413      	add	r3, r2
 800f4e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	015a      	lsls	r2, r3, #5
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	4413      	add	r3, r2
 800f4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	2300      	movs	r3, #0
 800f500:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	015a      	lsls	r2, r3, #5
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	4413      	add	r3, r2
 800f50a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f50e:	461a      	mov	r2, r3
 800f510:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f514:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	3301      	adds	r3, #1
 800f51a:	613b      	str	r3, [r7, #16]
 800f51c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f520:	461a      	mov	r2, r3
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	4293      	cmp	r3, r2
 800f526:	d3b5      	bcc.n	800f494 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f528:	2300      	movs	r3, #0
 800f52a:	613b      	str	r3, [r7, #16]
 800f52c:	e043      	b.n	800f5b6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	015a      	lsls	r2, r3, #5
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	4413      	add	r3, r2
 800f536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f544:	d118      	bne.n	800f578 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d10a      	bne.n	800f562 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	015a      	lsls	r2, r3, #5
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	4413      	add	r3, r2
 800f554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f558:	461a      	mov	r2, r3
 800f55a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f55e:	6013      	str	r3, [r2, #0]
 800f560:	e013      	b.n	800f58a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	015a      	lsls	r2, r3, #5
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	4413      	add	r3, r2
 800f56a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f56e:	461a      	mov	r2, r3
 800f570:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f574:	6013      	str	r3, [r2, #0]
 800f576:	e008      	b.n	800f58a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	015a      	lsls	r2, r3, #5
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	4413      	add	r3, r2
 800f580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f584:	461a      	mov	r2, r3
 800f586:	2300      	movs	r3, #0
 800f588:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	015a      	lsls	r2, r3, #5
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	4413      	add	r3, r2
 800f592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f596:	461a      	mov	r2, r3
 800f598:	2300      	movs	r3, #0
 800f59a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	015a      	lsls	r2, r3, #5
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	4413      	add	r3, r2
 800f5a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f5ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	613b      	str	r3, [r7, #16]
 800f5b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d3b5      	bcc.n	800f52e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5c8:	691b      	ldr	r3, [r3, #16]
 800f5ca:	68fa      	ldr	r2, [r7, #12]
 800f5cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f5d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f5d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f5e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f5e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d105      	bne.n	800f5f8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	699b      	ldr	r3, [r3, #24]
 800f5f0:	f043 0210 	orr.w	r2, r3, #16
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	699a      	ldr	r2, [r3, #24]
 800f5fc:	4b10      	ldr	r3, [pc, #64]	; (800f640 <USB_DevInit+0x2c4>)
 800f5fe:	4313      	orrs	r3, r2
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f604:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d005      	beq.n	800f618 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	699b      	ldr	r3, [r3, #24]
 800f610:	f043 0208 	orr.w	r2, r3, #8
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f618:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d107      	bne.n	800f630 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	699b      	ldr	r3, [r3, #24]
 800f624:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f628:	f043 0304 	orr.w	r3, r3, #4
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f630:	7dfb      	ldrb	r3, [r7, #23]
}
 800f632:	4618      	mov	r0, r3
 800f634:	3718      	adds	r7, #24
 800f636:	46bd      	mov	sp, r7
 800f638:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f63c:	b004      	add	sp, #16
 800f63e:	4770      	bx	lr
 800f640:	803c3800 	.word	0x803c3800

0800f644 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f644:	b480      	push	{r7}
 800f646:	b085      	sub	sp, #20
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f64e:	2300      	movs	r3, #0
 800f650:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	3301      	adds	r3, #1
 800f656:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800f65e:	d901      	bls.n	800f664 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f660:	2303      	movs	r3, #3
 800f662:	e01b      	b.n	800f69c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	691b      	ldr	r3, [r3, #16]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	daf2      	bge.n	800f652 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f66c:	2300      	movs	r3, #0
 800f66e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	019b      	lsls	r3, r3, #6
 800f674:	f043 0220 	orr.w	r2, r3, #32
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	3301      	adds	r3, #1
 800f680:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800f688:	d901      	bls.n	800f68e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f68a:	2303      	movs	r3, #3
 800f68c:	e006      	b.n	800f69c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	691b      	ldr	r3, [r3, #16]
 800f692:	f003 0320 	and.w	r3, r3, #32
 800f696:	2b20      	cmp	r3, #32
 800f698:	d0f0      	beq.n	800f67c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f69a:	2300      	movs	r3, #0
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3714      	adds	r7, #20
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr

0800f6a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b085      	sub	sp, #20
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800f6c0:	d901      	bls.n	800f6c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f6c2:	2303      	movs	r3, #3
 800f6c4:	e018      	b.n	800f6f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	691b      	ldr	r3, [r3, #16]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	daf2      	bge.n	800f6b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2210      	movs	r2, #16
 800f6d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800f6e4:	d901      	bls.n	800f6ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f6e6:	2303      	movs	r3, #3
 800f6e8:	e006      	b.n	800f6f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	691b      	ldr	r3, [r3, #16]
 800f6ee:	f003 0310 	and.w	r3, r3, #16
 800f6f2:	2b10      	cmp	r3, #16
 800f6f4:	d0f0      	beq.n	800f6d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f6f6:	2300      	movs	r3, #0
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3714      	adds	r7, #20
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f704:	b480      	push	{r7}
 800f706:	b085      	sub	sp, #20
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	460b      	mov	r3, r1
 800f70e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	78fb      	ldrb	r3, [r7, #3]
 800f71e:	68f9      	ldr	r1, [r7, #12]
 800f720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f724:	4313      	orrs	r3, r2
 800f726:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f728:	2300      	movs	r3, #0
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3714      	adds	r7, #20
 800f72e:	46bd      	mov	sp, r7
 800f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f734:	4770      	bx	lr

0800f736 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800f736:	b480      	push	{r7}
 800f738:	b087      	sub	sp, #28
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f748:	689b      	ldr	r3, [r3, #8]
 800f74a:	f003 0306 	and.w	r3, r3, #6
 800f74e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d102      	bne.n	800f75c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f756:	2300      	movs	r3, #0
 800f758:	75fb      	strb	r3, [r7, #23]
 800f75a:	e00a      	b.n	800f772 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2b02      	cmp	r3, #2
 800f760:	d002      	beq.n	800f768 <USB_GetDevSpeed+0x32>
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2b06      	cmp	r3, #6
 800f766:	d102      	bne.n	800f76e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f768:	2302      	movs	r3, #2
 800f76a:	75fb      	strb	r3, [r7, #23]
 800f76c:	e001      	b.n	800f772 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f76e:	230f      	movs	r3, #15
 800f770:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f772:	7dfb      	ldrb	r3, [r7, #23]
}
 800f774:	4618      	mov	r0, r3
 800f776:	371c      	adds	r7, #28
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f780:	b480      	push	{r7}
 800f782:	b085      	sub	sp, #20
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	785b      	ldrb	r3, [r3, #1]
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d13a      	bne.n	800f812 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7a2:	69da      	ldr	r2, [r3, #28]
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	f003 030f 	and.w	r3, r3, #15
 800f7ac:	2101      	movs	r1, #1
 800f7ae:	fa01 f303 	lsl.w	r3, r1, r3
 800f7b2:	b29b      	uxth	r3, r3
 800f7b4:	68f9      	ldr	r1, [r7, #12]
 800f7b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f7ba:	4313      	orrs	r3, r2
 800f7bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	015a      	lsls	r2, r3, #5
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	4413      	add	r3, r2
 800f7c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d155      	bne.n	800f880 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	015a      	lsls	r2, r3, #5
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	4413      	add	r3, r2
 800f7dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	689b      	ldr	r3, [r3, #8]
 800f7e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	791b      	ldrb	r3, [r3, #4]
 800f7ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f7f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	059b      	lsls	r3, r3, #22
 800f7f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f7f8:	4313      	orrs	r3, r2
 800f7fa:	68ba      	ldr	r2, [r7, #8]
 800f7fc:	0151      	lsls	r1, r2, #5
 800f7fe:	68fa      	ldr	r2, [r7, #12]
 800f800:	440a      	add	r2, r1
 800f802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f80a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f80e:	6013      	str	r3, [r2, #0]
 800f810:	e036      	b.n	800f880 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f818:	69da      	ldr	r2, [r3, #28]
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	f003 030f 	and.w	r3, r3, #15
 800f822:	2101      	movs	r1, #1
 800f824:	fa01 f303 	lsl.w	r3, r1, r3
 800f828:	041b      	lsls	r3, r3, #16
 800f82a:	68f9      	ldr	r1, [r7, #12]
 800f82c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f830:	4313      	orrs	r3, r2
 800f832:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	015a      	lsls	r2, r3, #5
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	4413      	add	r3, r2
 800f83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f846:	2b00      	cmp	r3, #0
 800f848:	d11a      	bne.n	800f880 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	015a      	lsls	r2, r3, #5
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	4413      	add	r3, r2
 800f852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	689b      	ldr	r3, [r3, #8]
 800f85c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	791b      	ldrb	r3, [r3, #4]
 800f864:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f866:	430b      	orrs	r3, r1
 800f868:	4313      	orrs	r3, r2
 800f86a:	68ba      	ldr	r2, [r7, #8]
 800f86c:	0151      	lsls	r1, r2, #5
 800f86e:	68fa      	ldr	r2, [r7, #12]
 800f870:	440a      	add	r2, r1
 800f872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f87a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f87e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f880:	2300      	movs	r3, #0
}
 800f882:	4618      	mov	r0, r3
 800f884:	3714      	adds	r7, #20
 800f886:	46bd      	mov	sp, r7
 800f888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88c:	4770      	bx	lr
	...

0800f890 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f890:	b480      	push	{r7}
 800f892:	b085      	sub	sp, #20
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	785b      	ldrb	r3, [r3, #1]
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	d161      	bne.n	800f970 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	015a      	lsls	r2, r3, #5
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	4413      	add	r3, r2
 800f8b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f8be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f8c2:	d11f      	bne.n	800f904 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	015a      	lsls	r2, r3, #5
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	4413      	add	r3, r2
 800f8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	68ba      	ldr	r2, [r7, #8]
 800f8d4:	0151      	lsls	r1, r2, #5
 800f8d6:	68fa      	ldr	r2, [r7, #12]
 800f8d8:	440a      	add	r2, r1
 800f8da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f8e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	015a      	lsls	r2, r3, #5
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	4413      	add	r3, r2
 800f8ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	68ba      	ldr	r2, [r7, #8]
 800f8f4:	0151      	lsls	r1, r2, #5
 800f8f6:	68fa      	ldr	r2, [r7, #12]
 800f8f8:	440a      	add	r2, r1
 800f8fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f902:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f90a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	f003 030f 	and.w	r3, r3, #15
 800f914:	2101      	movs	r1, #1
 800f916:	fa01 f303 	lsl.w	r3, r1, r3
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	43db      	mvns	r3, r3
 800f91e:	68f9      	ldr	r1, [r7, #12]
 800f920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f924:	4013      	ands	r3, r2
 800f926:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f92e:	69da      	ldr	r2, [r3, #28]
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	f003 030f 	and.w	r3, r3, #15
 800f938:	2101      	movs	r1, #1
 800f93a:	fa01 f303 	lsl.w	r3, r1, r3
 800f93e:	b29b      	uxth	r3, r3
 800f940:	43db      	mvns	r3, r3
 800f942:	68f9      	ldr	r1, [r7, #12]
 800f944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f948:	4013      	ands	r3, r2
 800f94a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	015a      	lsls	r2, r3, #5
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	4413      	add	r3, r2
 800f954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f958:	681a      	ldr	r2, [r3, #0]
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	0159      	lsls	r1, r3, #5
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	440b      	add	r3, r1
 800f962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f966:	4619      	mov	r1, r3
 800f968:	4b35      	ldr	r3, [pc, #212]	; (800fa40 <USB_DeactivateEndpoint+0x1b0>)
 800f96a:	4013      	ands	r3, r2
 800f96c:	600b      	str	r3, [r1, #0]
 800f96e:	e060      	b.n	800fa32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	015a      	lsls	r2, r3, #5
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	4413      	add	r3, r2
 800f978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f982:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f986:	d11f      	bne.n	800f9c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	015a      	lsls	r2, r3, #5
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	4413      	add	r3, r2
 800f990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	68ba      	ldr	r2, [r7, #8]
 800f998:	0151      	lsls	r1, r2, #5
 800f99a:	68fa      	ldr	r2, [r7, #12]
 800f99c:	440a      	add	r2, r1
 800f99e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f9a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	015a      	lsls	r2, r3, #5
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	68ba      	ldr	r2, [r7, #8]
 800f9b8:	0151      	lsls	r1, r2, #5
 800f9ba:	68fa      	ldr	r2, [r7, #12]
 800f9bc:	440a      	add	r2, r1
 800f9be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f9c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	f003 030f 	and.w	r3, r3, #15
 800f9d8:	2101      	movs	r1, #1
 800f9da:	fa01 f303 	lsl.w	r3, r1, r3
 800f9de:	041b      	lsls	r3, r3, #16
 800f9e0:	43db      	mvns	r3, r3
 800f9e2:	68f9      	ldr	r1, [r7, #12]
 800f9e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f9e8:	4013      	ands	r3, r2
 800f9ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9f2:	69da      	ldr	r2, [r3, #28]
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	f003 030f 	and.w	r3, r3, #15
 800f9fc:	2101      	movs	r1, #1
 800f9fe:	fa01 f303 	lsl.w	r3, r1, r3
 800fa02:	041b      	lsls	r3, r3, #16
 800fa04:	43db      	mvns	r3, r3
 800fa06:	68f9      	ldr	r1, [r7, #12]
 800fa08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa0c:	4013      	ands	r3, r2
 800fa0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	015a      	lsls	r2, r3, #5
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	4413      	add	r3, r2
 800fa18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa1c:	681a      	ldr	r2, [r3, #0]
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	0159      	lsls	r1, r3, #5
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	440b      	add	r3, r1
 800fa26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	4b05      	ldr	r3, [pc, #20]	; (800fa44 <USB_DeactivateEndpoint+0x1b4>)
 800fa2e:	4013      	ands	r3, r2
 800fa30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fa32:	2300      	movs	r3, #0
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3714      	adds	r7, #20
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr
 800fa40:	ec337800 	.word	0xec337800
 800fa44:	eff37800 	.word	0xeff37800

0800fa48 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b08a      	sub	sp, #40	; 0x28
 800fa4c:	af02      	add	r7, sp, #8
 800fa4e:	60f8      	str	r0, [r7, #12]
 800fa50:	60b9      	str	r1, [r7, #8]
 800fa52:	4613      	mov	r3, r2
 800fa54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	785b      	ldrb	r3, [r3, #1]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	f040 817a 	bne.w	800fd5e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	691b      	ldr	r3, [r3, #16]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d132      	bne.n	800fad8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa72:	69bb      	ldr	r3, [r7, #24]
 800fa74:	015a      	lsls	r2, r3, #5
 800fa76:	69fb      	ldr	r3, [r7, #28]
 800fa78:	4413      	add	r3, r2
 800fa7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa7e:	691b      	ldr	r3, [r3, #16]
 800fa80:	69ba      	ldr	r2, [r7, #24]
 800fa82:	0151      	lsls	r1, r2, #5
 800fa84:	69fa      	ldr	r2, [r7, #28]
 800fa86:	440a      	add	r2, r1
 800fa88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fa90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fa94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fa96:	69bb      	ldr	r3, [r7, #24]
 800fa98:	015a      	lsls	r2, r3, #5
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	4413      	add	r3, r2
 800fa9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faa2:	691b      	ldr	r3, [r3, #16]
 800faa4:	69ba      	ldr	r2, [r7, #24]
 800faa6:	0151      	lsls	r1, r2, #5
 800faa8:	69fa      	ldr	r2, [r7, #28]
 800faaa:	440a      	add	r2, r1
 800faac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fab0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fab4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fab6:	69bb      	ldr	r3, [r7, #24]
 800fab8:	015a      	lsls	r2, r3, #5
 800faba:	69fb      	ldr	r3, [r7, #28]
 800fabc:	4413      	add	r3, r2
 800fabe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fac2:	691b      	ldr	r3, [r3, #16]
 800fac4:	69ba      	ldr	r2, [r7, #24]
 800fac6:	0151      	lsls	r1, r2, #5
 800fac8:	69fa      	ldr	r2, [r7, #28]
 800faca:	440a      	add	r2, r1
 800facc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fad0:	0cdb      	lsrs	r3, r3, #19
 800fad2:	04db      	lsls	r3, r3, #19
 800fad4:	6113      	str	r3, [r2, #16]
 800fad6:	e092      	b.n	800fbfe <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fad8:	69bb      	ldr	r3, [r7, #24]
 800fada:	015a      	lsls	r2, r3, #5
 800fadc:	69fb      	ldr	r3, [r7, #28]
 800fade:	4413      	add	r3, r2
 800fae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fae4:	691b      	ldr	r3, [r3, #16]
 800fae6:	69ba      	ldr	r2, [r7, #24]
 800fae8:	0151      	lsls	r1, r2, #5
 800faea:	69fa      	ldr	r2, [r7, #28]
 800faec:	440a      	add	r2, r1
 800faee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800faf2:	0cdb      	lsrs	r3, r3, #19
 800faf4:	04db      	lsls	r3, r3, #19
 800faf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	015a      	lsls	r2, r3, #5
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	4413      	add	r3, r2
 800fb00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb04:	691b      	ldr	r3, [r3, #16]
 800fb06:	69ba      	ldr	r2, [r7, #24]
 800fb08:	0151      	lsls	r1, r2, #5
 800fb0a:	69fa      	ldr	r2, [r7, #28]
 800fb0c:	440a      	add	r2, r1
 800fb0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fb16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fb1a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800fb1c:	69bb      	ldr	r3, [r7, #24]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d11a      	bne.n	800fb58 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	691a      	ldr	r2, [r3, #16]
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	689b      	ldr	r3, [r3, #8]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d903      	bls.n	800fb36 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	689a      	ldr	r2, [r3, #8]
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fb36:	69bb      	ldr	r3, [r7, #24]
 800fb38:	015a      	lsls	r2, r3, #5
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb42:	691b      	ldr	r3, [r3, #16]
 800fb44:	69ba      	ldr	r2, [r7, #24]
 800fb46:	0151      	lsls	r1, r2, #5
 800fb48:	69fa      	ldr	r2, [r7, #28]
 800fb4a:	440a      	add	r2, r1
 800fb4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fb54:	6113      	str	r3, [r2, #16]
 800fb56:	e01b      	b.n	800fb90 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fb58:	69bb      	ldr	r3, [r7, #24]
 800fb5a:	015a      	lsls	r2, r3, #5
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	4413      	add	r3, r2
 800fb60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb64:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	6919      	ldr	r1, [r3, #16]
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	689b      	ldr	r3, [r3, #8]
 800fb6e:	440b      	add	r3, r1
 800fb70:	1e59      	subs	r1, r3, #1
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	fbb1 f3f3 	udiv	r3, r1, r3
 800fb7a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fb7c:	4ba2      	ldr	r3, [pc, #648]	; (800fe08 <USB_EPStartXfer+0x3c0>)
 800fb7e:	400b      	ands	r3, r1
 800fb80:	69b9      	ldr	r1, [r7, #24]
 800fb82:	0148      	lsls	r0, r1, #5
 800fb84:	69f9      	ldr	r1, [r7, #28]
 800fb86:	4401      	add	r1, r0
 800fb88:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fb8c:	4313      	orrs	r3, r2
 800fb8e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fb90:	69bb      	ldr	r3, [r7, #24]
 800fb92:	015a      	lsls	r2, r3, #5
 800fb94:	69fb      	ldr	r3, [r7, #28]
 800fb96:	4413      	add	r3, r2
 800fb98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb9c:	691a      	ldr	r2, [r3, #16]
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	691b      	ldr	r3, [r3, #16]
 800fba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fba6:	69b9      	ldr	r1, [r7, #24]
 800fba8:	0148      	lsls	r0, r1, #5
 800fbaa:	69f9      	ldr	r1, [r7, #28]
 800fbac:	4401      	add	r1, r0
 800fbae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fbb2:	4313      	orrs	r3, r2
 800fbb4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	791b      	ldrb	r3, [r3, #4]
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	d11f      	bne.n	800fbfe <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fbbe:	69bb      	ldr	r3, [r7, #24]
 800fbc0:	015a      	lsls	r2, r3, #5
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbca:	691b      	ldr	r3, [r3, #16]
 800fbcc:	69ba      	ldr	r2, [r7, #24]
 800fbce:	0151      	lsls	r1, r2, #5
 800fbd0:	69fa      	ldr	r2, [r7, #28]
 800fbd2:	440a      	add	r2, r1
 800fbd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbd8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800fbdc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800fbde:	69bb      	ldr	r3, [r7, #24]
 800fbe0:	015a      	lsls	r2, r3, #5
 800fbe2:	69fb      	ldr	r3, [r7, #28]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbea:	691b      	ldr	r3, [r3, #16]
 800fbec:	69ba      	ldr	r2, [r7, #24]
 800fbee:	0151      	lsls	r1, r2, #5
 800fbf0:	69fa      	ldr	r2, [r7, #28]
 800fbf2:	440a      	add	r2, r1
 800fbf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbf8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fbfc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800fbfe:	79fb      	ldrb	r3, [r7, #7]
 800fc00:	2b01      	cmp	r3, #1
 800fc02:	d14b      	bne.n	800fc9c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	69db      	ldr	r3, [r3, #28]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d009      	beq.n	800fc20 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fc0c:	69bb      	ldr	r3, [r7, #24]
 800fc0e:	015a      	lsls	r2, r3, #5
 800fc10:	69fb      	ldr	r3, [r7, #28]
 800fc12:	4413      	add	r3, r2
 800fc14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc18:	461a      	mov	r2, r3
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	69db      	ldr	r3, [r3, #28]
 800fc1e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	791b      	ldrb	r3, [r3, #4]
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d128      	bne.n	800fc7a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fc28:	69fb      	ldr	r3, [r7, #28]
 800fc2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc2e:	689b      	ldr	r3, [r3, #8]
 800fc30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d110      	bne.n	800fc5a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fc38:	69bb      	ldr	r3, [r7, #24]
 800fc3a:	015a      	lsls	r2, r3, #5
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	4413      	add	r3, r2
 800fc40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	69ba      	ldr	r2, [r7, #24]
 800fc48:	0151      	lsls	r1, r2, #5
 800fc4a:	69fa      	ldr	r2, [r7, #28]
 800fc4c:	440a      	add	r2, r1
 800fc4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fc56:	6013      	str	r3, [r2, #0]
 800fc58:	e00f      	b.n	800fc7a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fc5a:	69bb      	ldr	r3, [r7, #24]
 800fc5c:	015a      	lsls	r2, r3, #5
 800fc5e:	69fb      	ldr	r3, [r7, #28]
 800fc60:	4413      	add	r3, r2
 800fc62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	69ba      	ldr	r2, [r7, #24]
 800fc6a:	0151      	lsls	r1, r2, #5
 800fc6c:	69fa      	ldr	r2, [r7, #28]
 800fc6e:	440a      	add	r2, r1
 800fc70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc78:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fc7a:	69bb      	ldr	r3, [r7, #24]
 800fc7c:	015a      	lsls	r2, r3, #5
 800fc7e:	69fb      	ldr	r3, [r7, #28]
 800fc80:	4413      	add	r3, r2
 800fc82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	69ba      	ldr	r2, [r7, #24]
 800fc8a:	0151      	lsls	r1, r2, #5
 800fc8c:	69fa      	ldr	r2, [r7, #28]
 800fc8e:	440a      	add	r2, r1
 800fc90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fc98:	6013      	str	r3, [r2, #0]
 800fc9a:	e165      	b.n	800ff68 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fc9c:	69bb      	ldr	r3, [r7, #24]
 800fc9e:	015a      	lsls	r2, r3, #5
 800fca0:	69fb      	ldr	r3, [r7, #28]
 800fca2:	4413      	add	r3, r2
 800fca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	69ba      	ldr	r2, [r7, #24]
 800fcac:	0151      	lsls	r1, r2, #5
 800fcae:	69fa      	ldr	r2, [r7, #28]
 800fcb0:	440a      	add	r2, r1
 800fcb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fcba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	791b      	ldrb	r3, [r3, #4]
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	d015      	beq.n	800fcf0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	691b      	ldr	r3, [r3, #16]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	f000 814d 	beq.w	800ff68 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fcce:	69fb      	ldr	r3, [r7, #28]
 800fcd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	f003 030f 	and.w	r3, r3, #15
 800fcde:	2101      	movs	r1, #1
 800fce0:	fa01 f303 	lsl.w	r3, r1, r3
 800fce4:	69f9      	ldr	r1, [r7, #28]
 800fce6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fcea:	4313      	orrs	r3, r2
 800fcec:	634b      	str	r3, [r1, #52]	; 0x34
 800fcee:	e13b      	b.n	800ff68 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fcf0:	69fb      	ldr	r3, [r7, #28]
 800fcf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcf6:	689b      	ldr	r3, [r3, #8]
 800fcf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d110      	bne.n	800fd22 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fd00:	69bb      	ldr	r3, [r7, #24]
 800fd02:	015a      	lsls	r2, r3, #5
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	4413      	add	r3, r2
 800fd08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	69ba      	ldr	r2, [r7, #24]
 800fd10:	0151      	lsls	r1, r2, #5
 800fd12:	69fa      	ldr	r2, [r7, #28]
 800fd14:	440a      	add	r2, r1
 800fd16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fd1e:	6013      	str	r3, [r2, #0]
 800fd20:	e00f      	b.n	800fd42 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fd22:	69bb      	ldr	r3, [r7, #24]
 800fd24:	015a      	lsls	r2, r3, #5
 800fd26:	69fb      	ldr	r3, [r7, #28]
 800fd28:	4413      	add	r3, r2
 800fd2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	69ba      	ldr	r2, [r7, #24]
 800fd32:	0151      	lsls	r1, r2, #5
 800fd34:	69fa      	ldr	r2, [r7, #28]
 800fd36:	440a      	add	r2, r1
 800fd38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd40:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	68d9      	ldr	r1, [r3, #12]
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	781a      	ldrb	r2, [r3, #0]
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	691b      	ldr	r3, [r3, #16]
 800fd4e:	b298      	uxth	r0, r3
 800fd50:	79fb      	ldrb	r3, [r7, #7]
 800fd52:	9300      	str	r3, [sp, #0]
 800fd54:	4603      	mov	r3, r0
 800fd56:	68f8      	ldr	r0, [r7, #12]
 800fd58:	f000 f9b8 	bl	80100cc <USB_WritePacket>
 800fd5c:	e104      	b.n	800ff68 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fd5e:	69bb      	ldr	r3, [r7, #24]
 800fd60:	015a      	lsls	r2, r3, #5
 800fd62:	69fb      	ldr	r3, [r7, #28]
 800fd64:	4413      	add	r3, r2
 800fd66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd6a:	691b      	ldr	r3, [r3, #16]
 800fd6c:	69ba      	ldr	r2, [r7, #24]
 800fd6e:	0151      	lsls	r1, r2, #5
 800fd70:	69fa      	ldr	r2, [r7, #28]
 800fd72:	440a      	add	r2, r1
 800fd74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd78:	0cdb      	lsrs	r3, r3, #19
 800fd7a:	04db      	lsls	r3, r3, #19
 800fd7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fd7e:	69bb      	ldr	r3, [r7, #24]
 800fd80:	015a      	lsls	r2, r3, #5
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	4413      	add	r3, r2
 800fd86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd8a:	691b      	ldr	r3, [r3, #16]
 800fd8c:	69ba      	ldr	r2, [r7, #24]
 800fd8e:	0151      	lsls	r1, r2, #5
 800fd90:	69fa      	ldr	r2, [r7, #28]
 800fd92:	440a      	add	r2, r1
 800fd94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fd9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fda0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800fda2:	69bb      	ldr	r3, [r7, #24]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d131      	bne.n	800fe0c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	691b      	ldr	r3, [r3, #16]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d003      	beq.n	800fdb8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	689a      	ldr	r2, [r3, #8]
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	689a      	ldr	r2, [r3, #8]
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800fdc0:	69bb      	ldr	r3, [r7, #24]
 800fdc2:	015a      	lsls	r2, r3, #5
 800fdc4:	69fb      	ldr	r3, [r7, #28]
 800fdc6:	4413      	add	r3, r2
 800fdc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdcc:	691a      	ldr	r2, [r3, #16]
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	6a1b      	ldr	r3, [r3, #32]
 800fdd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fdd6:	69b9      	ldr	r1, [r7, #24]
 800fdd8:	0148      	lsls	r0, r1, #5
 800fdda:	69f9      	ldr	r1, [r7, #28]
 800fddc:	4401      	add	r1, r0
 800fdde:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fde2:	4313      	orrs	r3, r2
 800fde4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fde6:	69bb      	ldr	r3, [r7, #24]
 800fde8:	015a      	lsls	r2, r3, #5
 800fdea:	69fb      	ldr	r3, [r7, #28]
 800fdec:	4413      	add	r3, r2
 800fdee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdf2:	691b      	ldr	r3, [r3, #16]
 800fdf4:	69ba      	ldr	r2, [r7, #24]
 800fdf6:	0151      	lsls	r1, r2, #5
 800fdf8:	69fa      	ldr	r2, [r7, #28]
 800fdfa:	440a      	add	r2, r1
 800fdfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe04:	6113      	str	r3, [r2, #16]
 800fe06:	e061      	b.n	800fecc <USB_EPStartXfer+0x484>
 800fe08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	691b      	ldr	r3, [r3, #16]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d123      	bne.n	800fe5c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fe14:	69bb      	ldr	r3, [r7, #24]
 800fe16:	015a      	lsls	r2, r3, #5
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	4413      	add	r3, r2
 800fe1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe20:	691a      	ldr	r2, [r3, #16]
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	689b      	ldr	r3, [r3, #8]
 800fe26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe2a:	69b9      	ldr	r1, [r7, #24]
 800fe2c:	0148      	lsls	r0, r1, #5
 800fe2e:	69f9      	ldr	r1, [r7, #28]
 800fe30:	4401      	add	r1, r0
 800fe32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fe36:	4313      	orrs	r3, r2
 800fe38:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fe3a:	69bb      	ldr	r3, [r7, #24]
 800fe3c:	015a      	lsls	r2, r3, #5
 800fe3e:	69fb      	ldr	r3, [r7, #28]
 800fe40:	4413      	add	r3, r2
 800fe42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe46:	691b      	ldr	r3, [r3, #16]
 800fe48:	69ba      	ldr	r2, [r7, #24]
 800fe4a:	0151      	lsls	r1, r2, #5
 800fe4c:	69fa      	ldr	r2, [r7, #28]
 800fe4e:	440a      	add	r2, r1
 800fe50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe58:	6113      	str	r3, [r2, #16]
 800fe5a:	e037      	b.n	800fecc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	691a      	ldr	r2, [r3, #16]
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	689b      	ldr	r3, [r3, #8]
 800fe64:	4413      	add	r3, r2
 800fe66:	1e5a      	subs	r2, r3, #1
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	689b      	ldr	r3, [r3, #8]
 800fe6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe70:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	689b      	ldr	r3, [r3, #8]
 800fe76:	8afa      	ldrh	r2, [r7, #22]
 800fe78:	fb03 f202 	mul.w	r2, r3, r2
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fe80:	69bb      	ldr	r3, [r7, #24]
 800fe82:	015a      	lsls	r2, r3, #5
 800fe84:	69fb      	ldr	r3, [r7, #28]
 800fe86:	4413      	add	r3, r2
 800fe88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe8c:	691a      	ldr	r2, [r3, #16]
 800fe8e:	8afb      	ldrh	r3, [r7, #22]
 800fe90:	04d9      	lsls	r1, r3, #19
 800fe92:	4b38      	ldr	r3, [pc, #224]	; (800ff74 <USB_EPStartXfer+0x52c>)
 800fe94:	400b      	ands	r3, r1
 800fe96:	69b9      	ldr	r1, [r7, #24]
 800fe98:	0148      	lsls	r0, r1, #5
 800fe9a:	69f9      	ldr	r1, [r7, #28]
 800fe9c:	4401      	add	r1, r0
 800fe9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fea2:	4313      	orrs	r3, r2
 800fea4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800fea6:	69bb      	ldr	r3, [r7, #24]
 800fea8:	015a      	lsls	r2, r3, #5
 800feaa:	69fb      	ldr	r3, [r7, #28]
 800feac:	4413      	add	r3, r2
 800feae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800feb2:	691a      	ldr	r2, [r3, #16]
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	6a1b      	ldr	r3, [r3, #32]
 800feb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800febc:	69b9      	ldr	r1, [r7, #24]
 800febe:	0148      	lsls	r0, r1, #5
 800fec0:	69f9      	ldr	r1, [r7, #28]
 800fec2:	4401      	add	r1, r0
 800fec4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fec8:	4313      	orrs	r3, r2
 800feca:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800fecc:	79fb      	ldrb	r3, [r7, #7]
 800fece:	2b01      	cmp	r3, #1
 800fed0:	d10d      	bne.n	800feee <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	68db      	ldr	r3, [r3, #12]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d009      	beq.n	800feee <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	68d9      	ldr	r1, [r3, #12]
 800fede:	69bb      	ldr	r3, [r7, #24]
 800fee0:	015a      	lsls	r2, r3, #5
 800fee2:	69fb      	ldr	r3, [r7, #28]
 800fee4:	4413      	add	r3, r2
 800fee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800feea:	460a      	mov	r2, r1
 800feec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	791b      	ldrb	r3, [r3, #4]
 800fef2:	2b01      	cmp	r3, #1
 800fef4:	d128      	bne.n	800ff48 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fef6:	69fb      	ldr	r3, [r7, #28]
 800fef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fefc:	689b      	ldr	r3, [r3, #8]
 800fefe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d110      	bne.n	800ff28 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	015a      	lsls	r2, r3, #5
 800ff0a:	69fb      	ldr	r3, [r7, #28]
 800ff0c:	4413      	add	r3, r2
 800ff0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	69ba      	ldr	r2, [r7, #24]
 800ff16:	0151      	lsls	r1, r2, #5
 800ff18:	69fa      	ldr	r2, [r7, #28]
 800ff1a:	440a      	add	r2, r1
 800ff1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ff24:	6013      	str	r3, [r2, #0]
 800ff26:	e00f      	b.n	800ff48 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ff28:	69bb      	ldr	r3, [r7, #24]
 800ff2a:	015a      	lsls	r2, r3, #5
 800ff2c:	69fb      	ldr	r3, [r7, #28]
 800ff2e:	4413      	add	r3, r2
 800ff30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	69ba      	ldr	r2, [r7, #24]
 800ff38:	0151      	lsls	r1, r2, #5
 800ff3a:	69fa      	ldr	r2, [r7, #28]
 800ff3c:	440a      	add	r2, r1
 800ff3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ff48:	69bb      	ldr	r3, [r7, #24]
 800ff4a:	015a      	lsls	r2, r3, #5
 800ff4c:	69fb      	ldr	r3, [r7, #28]
 800ff4e:	4413      	add	r3, r2
 800ff50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	69ba      	ldr	r2, [r7, #24]
 800ff58:	0151      	lsls	r1, r2, #5
 800ff5a:	69fa      	ldr	r2, [r7, #28]
 800ff5c:	440a      	add	r2, r1
 800ff5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ff66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ff68:	2300      	movs	r3, #0
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3720      	adds	r7, #32
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
 800ff72:	bf00      	nop
 800ff74:	1ff80000 	.word	0x1ff80000

0800ff78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b087      	sub	sp, #28
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ff82:	2300      	movs	r3, #0
 800ff84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ff86:	2300      	movs	r3, #0
 800ff88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	785b      	ldrb	r3, [r3, #1]
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d14a      	bne.n	801002c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	015a      	lsls	r2, r3, #5
 800ff9c:	693b      	ldr	r3, [r7, #16]
 800ff9e:	4413      	add	r3, r2
 800ffa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ffaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ffae:	f040 8086 	bne.w	80100be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	015a      	lsls	r2, r3, #5
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	4413      	add	r3, r2
 800ffbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	683a      	ldr	r2, [r7, #0]
 800ffc4:	7812      	ldrb	r2, [r2, #0]
 800ffc6:	0151      	lsls	r1, r2, #5
 800ffc8:	693a      	ldr	r2, [r7, #16]
 800ffca:	440a      	add	r2, r1
 800ffcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ffd4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	781b      	ldrb	r3, [r3, #0]
 800ffda:	015a      	lsls	r2, r3, #5
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	4413      	add	r3, r2
 800ffe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	683a      	ldr	r2, [r7, #0]
 800ffe8:	7812      	ldrb	r2, [r2, #0]
 800ffea:	0151      	lsls	r1, r2, #5
 800ffec:	693a      	ldr	r2, [r7, #16]
 800ffee:	440a      	add	r2, r1
 800fff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fff4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fff8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	3301      	adds	r3, #1
 800fffe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	f242 7210 	movw	r2, #10000	; 0x2710
 8010006:	4293      	cmp	r3, r2
 8010008:	d902      	bls.n	8010010 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801000a:	2301      	movs	r3, #1
 801000c:	75fb      	strb	r3, [r7, #23]
          break;
 801000e:	e056      	b.n	80100be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	015a      	lsls	r2, r3, #5
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	4413      	add	r3, r2
 801001a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010028:	d0e7      	beq.n	800fffa <USB_EPStopXfer+0x82>
 801002a:	e048      	b.n	80100be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	781b      	ldrb	r3, [r3, #0]
 8010030:	015a      	lsls	r2, r3, #5
 8010032:	693b      	ldr	r3, [r7, #16]
 8010034:	4413      	add	r3, r2
 8010036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010044:	d13b      	bne.n	80100be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	015a      	lsls	r2, r3, #5
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	4413      	add	r3, r2
 8010050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	683a      	ldr	r2, [r7, #0]
 8010058:	7812      	ldrb	r2, [r2, #0]
 801005a:	0151      	lsls	r1, r2, #5
 801005c:	693a      	ldr	r2, [r7, #16]
 801005e:	440a      	add	r2, r1
 8010060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010064:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010068:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	015a      	lsls	r2, r3, #5
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	4413      	add	r3, r2
 8010074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	683a      	ldr	r2, [r7, #0]
 801007c:	7812      	ldrb	r2, [r2, #0]
 801007e:	0151      	lsls	r1, r2, #5
 8010080:	693a      	ldr	r2, [r7, #16]
 8010082:	440a      	add	r2, r1
 8010084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010088:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801008c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	3301      	adds	r3, #1
 8010092:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	f242 7210 	movw	r2, #10000	; 0x2710
 801009a:	4293      	cmp	r3, r2
 801009c:	d902      	bls.n	80100a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801009e:	2301      	movs	r3, #1
 80100a0:	75fb      	strb	r3, [r7, #23]
          break;
 80100a2:	e00c      	b.n	80100be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	015a      	lsls	r2, r3, #5
 80100aa:	693b      	ldr	r3, [r7, #16]
 80100ac:	4413      	add	r3, r2
 80100ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80100b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80100bc:	d0e7      	beq.n	801008e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80100be:	7dfb      	ldrb	r3, [r7, #23]
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	371c      	adds	r7, #28
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr

080100cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b089      	sub	sp, #36	; 0x24
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	60f8      	str	r0, [r7, #12]
 80100d4:	60b9      	str	r1, [r7, #8]
 80100d6:	4611      	mov	r1, r2
 80100d8:	461a      	mov	r2, r3
 80100da:	460b      	mov	r3, r1
 80100dc:	71fb      	strb	r3, [r7, #7]
 80100de:	4613      	mov	r3, r2
 80100e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80100ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d123      	bne.n	801013a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80100f2:	88bb      	ldrh	r3, [r7, #4]
 80100f4:	3303      	adds	r3, #3
 80100f6:	089b      	lsrs	r3, r3, #2
 80100f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80100fa:	2300      	movs	r3, #0
 80100fc:	61bb      	str	r3, [r7, #24]
 80100fe:	e018      	b.n	8010132 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010100:	79fb      	ldrb	r3, [r7, #7]
 8010102:	031a      	lsls	r2, r3, #12
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	4413      	add	r3, r2
 8010108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801010c:	461a      	mov	r2, r3
 801010e:	69fb      	ldr	r3, [r7, #28]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	3301      	adds	r3, #1
 8010118:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801011a:	69fb      	ldr	r3, [r7, #28]
 801011c:	3301      	adds	r3, #1
 801011e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010120:	69fb      	ldr	r3, [r7, #28]
 8010122:	3301      	adds	r3, #1
 8010124:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010126:	69fb      	ldr	r3, [r7, #28]
 8010128:	3301      	adds	r3, #1
 801012a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801012c:	69bb      	ldr	r3, [r7, #24]
 801012e:	3301      	adds	r3, #1
 8010130:	61bb      	str	r3, [r7, #24]
 8010132:	69ba      	ldr	r2, [r7, #24]
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	429a      	cmp	r2, r3
 8010138:	d3e2      	bcc.n	8010100 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801013a:	2300      	movs	r3, #0
}
 801013c:	4618      	mov	r0, r3
 801013e:	3724      	adds	r7, #36	; 0x24
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr

08010148 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010148:	b480      	push	{r7}
 801014a:	b08b      	sub	sp, #44	; 0x2c
 801014c:	af00      	add	r7, sp, #0
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	60b9      	str	r1, [r7, #8]
 8010152:	4613      	mov	r3, r2
 8010154:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801015e:	88fb      	ldrh	r3, [r7, #6]
 8010160:	089b      	lsrs	r3, r3, #2
 8010162:	b29b      	uxth	r3, r3
 8010164:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010166:	88fb      	ldrh	r3, [r7, #6]
 8010168:	f003 0303 	and.w	r3, r3, #3
 801016c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801016e:	2300      	movs	r3, #0
 8010170:	623b      	str	r3, [r7, #32]
 8010172:	e014      	b.n	801019e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010174:	69bb      	ldr	r3, [r7, #24]
 8010176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801017a:	681a      	ldr	r2, [r3, #0]
 801017c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017e:	601a      	str	r2, [r3, #0]
    pDest++;
 8010180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010182:	3301      	adds	r3, #1
 8010184:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010188:	3301      	adds	r3, #1
 801018a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801018c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801018e:	3301      	adds	r3, #1
 8010190:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010194:	3301      	adds	r3, #1
 8010196:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010198:	6a3b      	ldr	r3, [r7, #32]
 801019a:	3301      	adds	r3, #1
 801019c:	623b      	str	r3, [r7, #32]
 801019e:	6a3a      	ldr	r2, [r7, #32]
 80101a0:	697b      	ldr	r3, [r7, #20]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d3e6      	bcc.n	8010174 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80101a6:	8bfb      	ldrh	r3, [r7, #30]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d01e      	beq.n	80101ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80101ac:	2300      	movs	r3, #0
 80101ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80101b0:	69bb      	ldr	r3, [r7, #24]
 80101b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101b6:	461a      	mov	r2, r3
 80101b8:	f107 0310 	add.w	r3, r7, #16
 80101bc:	6812      	ldr	r2, [r2, #0]
 80101be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80101c0:	693a      	ldr	r2, [r7, #16]
 80101c2:	6a3b      	ldr	r3, [r7, #32]
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	00db      	lsls	r3, r3, #3
 80101c8:	fa22 f303 	lsr.w	r3, r2, r3
 80101cc:	b2da      	uxtb	r2, r3
 80101ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d0:	701a      	strb	r2, [r3, #0]
      i++;
 80101d2:	6a3b      	ldr	r3, [r7, #32]
 80101d4:	3301      	adds	r3, #1
 80101d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80101d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101da:	3301      	adds	r3, #1
 80101dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80101de:	8bfb      	ldrh	r3, [r7, #30]
 80101e0:	3b01      	subs	r3, #1
 80101e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80101e4:	8bfb      	ldrh	r3, [r7, #30]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d1ea      	bne.n	80101c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80101ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	372c      	adds	r7, #44	; 0x2c
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr

080101f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b085      	sub	sp, #20
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	781b      	ldrb	r3, [r3, #0]
 801020a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	785b      	ldrb	r3, [r3, #1]
 8010210:	2b01      	cmp	r3, #1
 8010212:	d12c      	bne.n	801026e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	015a      	lsls	r2, r3, #5
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	4413      	add	r3, r2
 801021c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	2b00      	cmp	r3, #0
 8010224:	db12      	blt.n	801024c <USB_EPSetStall+0x54>
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d00f      	beq.n	801024c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	015a      	lsls	r2, r3, #5
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	4413      	add	r3, r2
 8010234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	68ba      	ldr	r2, [r7, #8]
 801023c:	0151      	lsls	r1, r2, #5
 801023e:	68fa      	ldr	r2, [r7, #12]
 8010240:	440a      	add	r2, r1
 8010242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010246:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801024a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	015a      	lsls	r2, r3, #5
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	4413      	add	r3, r2
 8010254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	68ba      	ldr	r2, [r7, #8]
 801025c:	0151      	lsls	r1, r2, #5
 801025e:	68fa      	ldr	r2, [r7, #12]
 8010260:	440a      	add	r2, r1
 8010262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010266:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801026a:	6013      	str	r3, [r2, #0]
 801026c:	e02b      	b.n	80102c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	015a      	lsls	r2, r3, #5
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	4413      	add	r3, r2
 8010276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	db12      	blt.n	80102a6 <USB_EPSetStall+0xae>
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d00f      	beq.n	80102a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	015a      	lsls	r2, r3, #5
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	4413      	add	r3, r2
 801028e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	68ba      	ldr	r2, [r7, #8]
 8010296:	0151      	lsls	r1, r2, #5
 8010298:	68fa      	ldr	r2, [r7, #12]
 801029a:	440a      	add	r2, r1
 801029c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80102a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	015a      	lsls	r2, r3, #5
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	4413      	add	r3, r2
 80102ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	68ba      	ldr	r2, [r7, #8]
 80102b6:	0151      	lsls	r1, r2, #5
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	440a      	add	r2, r1
 80102bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80102c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80102c6:	2300      	movs	r3, #0
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3714      	adds	r7, #20
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr

080102d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b085      	sub	sp, #20
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	785b      	ldrb	r3, [r3, #1]
 80102ec:	2b01      	cmp	r3, #1
 80102ee:	d128      	bne.n	8010342 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	015a      	lsls	r2, r3, #5
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	4413      	add	r3, r2
 80102f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	68ba      	ldr	r2, [r7, #8]
 8010300:	0151      	lsls	r1, r2, #5
 8010302:	68fa      	ldr	r2, [r7, #12]
 8010304:	440a      	add	r2, r1
 8010306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801030a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801030e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	791b      	ldrb	r3, [r3, #4]
 8010314:	2b03      	cmp	r3, #3
 8010316:	d003      	beq.n	8010320 <USB_EPClearStall+0x4c>
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	791b      	ldrb	r3, [r3, #4]
 801031c:	2b02      	cmp	r3, #2
 801031e:	d138      	bne.n	8010392 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	015a      	lsls	r2, r3, #5
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	4413      	add	r3, r2
 8010328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	68ba      	ldr	r2, [r7, #8]
 8010330:	0151      	lsls	r1, r2, #5
 8010332:	68fa      	ldr	r2, [r7, #12]
 8010334:	440a      	add	r2, r1
 8010336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801033a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801033e:	6013      	str	r3, [r2, #0]
 8010340:	e027      	b.n	8010392 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	015a      	lsls	r2, r3, #5
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	4413      	add	r3, r2
 801034a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	68ba      	ldr	r2, [r7, #8]
 8010352:	0151      	lsls	r1, r2, #5
 8010354:	68fa      	ldr	r2, [r7, #12]
 8010356:	440a      	add	r2, r1
 8010358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801035c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010360:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	791b      	ldrb	r3, [r3, #4]
 8010366:	2b03      	cmp	r3, #3
 8010368:	d003      	beq.n	8010372 <USB_EPClearStall+0x9e>
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	791b      	ldrb	r3, [r3, #4]
 801036e:	2b02      	cmp	r3, #2
 8010370:	d10f      	bne.n	8010392 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	015a      	lsls	r2, r3, #5
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	4413      	add	r3, r2
 801037a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	68ba      	ldr	r2, [r7, #8]
 8010382:	0151      	lsls	r1, r2, #5
 8010384:	68fa      	ldr	r2, [r7, #12]
 8010386:	440a      	add	r2, r1
 8010388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801038c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010390:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010392:	2300      	movs	r3, #0
}
 8010394:	4618      	mov	r0, r3
 8010396:	3714      	adds	r7, #20
 8010398:	46bd      	mov	sp, r7
 801039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039e:	4770      	bx	lr

080103a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b085      	sub	sp, #20
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
 80103a8:	460b      	mov	r3, r1
 80103aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	68fa      	ldr	r2, [r7, #12]
 80103ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80103be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80103c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	78fb      	ldrb	r3, [r7, #3]
 80103ce:	011b      	lsls	r3, r3, #4
 80103d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80103d4:	68f9      	ldr	r1, [r7, #12]
 80103d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80103da:	4313      	orrs	r3, r2
 80103dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80103de:	2300      	movs	r3, #0
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3714      	adds	r7, #20
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr

080103ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80103ec:	b480      	push	{r7}
 80103ee:	b085      	sub	sp, #20
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	68fa      	ldr	r2, [r7, #12]
 8010402:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010406:	f023 0303 	bic.w	r3, r3, #3
 801040a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	68fa      	ldr	r2, [r7, #12]
 8010416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801041a:	f023 0302 	bic.w	r3, r3, #2
 801041e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010420:	2300      	movs	r3, #0
}
 8010422:	4618      	mov	r0, r3
 8010424:	3714      	adds	r7, #20
 8010426:	46bd      	mov	sp, r7
 8010428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042c:	4770      	bx	lr

0801042e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801042e:	b480      	push	{r7}
 8010430:	b085      	sub	sp, #20
 8010432:	af00      	add	r7, sp, #0
 8010434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	68fa      	ldr	r2, [r7, #12]
 8010444:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010448:	f023 0303 	bic.w	r3, r3, #3
 801044c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010454:	685b      	ldr	r3, [r3, #4]
 8010456:	68fa      	ldr	r2, [r7, #12]
 8010458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801045c:	f043 0302 	orr.w	r3, r3, #2
 8010460:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010462:	2300      	movs	r3, #0
}
 8010464:	4618      	mov	r0, r3
 8010466:	3714      	adds	r7, #20
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr

08010470 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010470:	b480      	push	{r7}
 8010472:	b085      	sub	sp, #20
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	695b      	ldr	r3, [r3, #20]
 801047c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	699b      	ldr	r3, [r3, #24]
 8010482:	68fa      	ldr	r2, [r7, #12]
 8010484:	4013      	ands	r3, r2
 8010486:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010488:	68fb      	ldr	r3, [r7, #12]
}
 801048a:	4618      	mov	r0, r3
 801048c:	3714      	adds	r7, #20
 801048e:	46bd      	mov	sp, r7
 8010490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010494:	4770      	bx	lr

08010496 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010496:	b480      	push	{r7}
 8010498:	b085      	sub	sp, #20
 801049a:	af00      	add	r7, sp, #0
 801049c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104a8:	699b      	ldr	r3, [r3, #24]
 80104aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104b2:	69db      	ldr	r3, [r3, #28]
 80104b4:	68ba      	ldr	r2, [r7, #8]
 80104b6:	4013      	ands	r3, r2
 80104b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	0c1b      	lsrs	r3, r3, #16
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3714      	adds	r7, #20
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr

080104ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80104ca:	b480      	push	{r7}
 80104cc:	b085      	sub	sp, #20
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104dc:	699b      	ldr	r3, [r3, #24]
 80104de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104e6:	69db      	ldr	r3, [r3, #28]
 80104e8:	68ba      	ldr	r2, [r7, #8]
 80104ea:	4013      	ands	r3, r2
 80104ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	b29b      	uxth	r3, r3
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3714      	adds	r7, #20
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr

080104fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80104fe:	b480      	push	{r7}
 8010500:	b085      	sub	sp, #20
 8010502:	af00      	add	r7, sp, #0
 8010504:	6078      	str	r0, [r7, #4]
 8010506:	460b      	mov	r3, r1
 8010508:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801050e:	78fb      	ldrb	r3, [r7, #3]
 8010510:	015a      	lsls	r2, r3, #5
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	4413      	add	r3, r2
 8010516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801051a:	689b      	ldr	r3, [r3, #8]
 801051c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010524:	695b      	ldr	r3, [r3, #20]
 8010526:	68ba      	ldr	r2, [r7, #8]
 8010528:	4013      	ands	r3, r2
 801052a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801052c:	68bb      	ldr	r3, [r7, #8]
}
 801052e:	4618      	mov	r0, r3
 8010530:	3714      	adds	r7, #20
 8010532:	46bd      	mov	sp, r7
 8010534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010538:	4770      	bx	lr

0801053a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801053a:	b480      	push	{r7}
 801053c:	b087      	sub	sp, #28
 801053e:	af00      	add	r7, sp, #0
 8010540:	6078      	str	r0, [r7, #4]
 8010542:	460b      	mov	r3, r1
 8010544:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010550:	691b      	ldr	r3, [r3, #16]
 8010552:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801055a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801055c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801055e:	78fb      	ldrb	r3, [r7, #3]
 8010560:	f003 030f 	and.w	r3, r3, #15
 8010564:	68fa      	ldr	r2, [r7, #12]
 8010566:	fa22 f303 	lsr.w	r3, r2, r3
 801056a:	01db      	lsls	r3, r3, #7
 801056c:	b2db      	uxtb	r3, r3
 801056e:	693a      	ldr	r2, [r7, #16]
 8010570:	4313      	orrs	r3, r2
 8010572:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010574:	78fb      	ldrb	r3, [r7, #3]
 8010576:	015a      	lsls	r2, r3, #5
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	4413      	add	r3, r2
 801057c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010580:	689b      	ldr	r3, [r3, #8]
 8010582:	693a      	ldr	r2, [r7, #16]
 8010584:	4013      	ands	r3, r2
 8010586:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010588:	68bb      	ldr	r3, [r7, #8]
}
 801058a:	4618      	mov	r0, r3
 801058c:	371c      	adds	r7, #28
 801058e:	46bd      	mov	sp, r7
 8010590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010594:	4770      	bx	lr

08010596 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010596:	b480      	push	{r7}
 8010598:	b083      	sub	sp, #12
 801059a:	af00      	add	r7, sp, #0
 801059c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	695b      	ldr	r3, [r3, #20]
 80105a2:	f003 0301 	and.w	r3, r3, #1
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	370c      	adds	r7, #12
 80105aa:	46bd      	mov	sp, r7
 80105ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b0:	4770      	bx	lr

080105b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80105b2:	b480      	push	{r7}
 80105b4:	b085      	sub	sp, #20
 80105b6:	af00      	add	r7, sp, #0
 80105b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	68fa      	ldr	r2, [r7, #12]
 80105c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80105d0:	f023 0307 	bic.w	r3, r3, #7
 80105d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	68fa      	ldr	r2, [r7, #12]
 80105e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80105e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80105e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80105ea:	2300      	movs	r3, #0
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3714      	adds	r7, #20
 80105f0:	46bd      	mov	sp, r7
 80105f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f6:	4770      	bx	lr

080105f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80105f8:	b480      	push	{r7}
 80105fa:	b087      	sub	sp, #28
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	60f8      	str	r0, [r7, #12]
 8010600:	460b      	mov	r3, r1
 8010602:	607a      	str	r2, [r7, #4]
 8010604:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	333c      	adds	r3, #60	; 0x3c
 801060e:	3304      	adds	r3, #4
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010614:	693b      	ldr	r3, [r7, #16]
 8010616:	4a26      	ldr	r2, [pc, #152]	; (80106b0 <USB_EP0_OutStart+0xb8>)
 8010618:	4293      	cmp	r3, r2
 801061a:	d90a      	bls.n	8010632 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801062c:	d101      	bne.n	8010632 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801062e:	2300      	movs	r3, #0
 8010630:	e037      	b.n	80106a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010638:	461a      	mov	r2, r3
 801063a:	2300      	movs	r3, #0
 801063c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010644:	691b      	ldr	r3, [r3, #16]
 8010646:	697a      	ldr	r2, [r7, #20]
 8010648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801064c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010650:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010652:	697b      	ldr	r3, [r7, #20]
 8010654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010658:	691b      	ldr	r3, [r3, #16]
 801065a:	697a      	ldr	r2, [r7, #20]
 801065c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010660:	f043 0318 	orr.w	r3, r3, #24
 8010664:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801066c:	691b      	ldr	r3, [r3, #16]
 801066e:	697a      	ldr	r2, [r7, #20]
 8010670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010674:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010678:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801067a:	7afb      	ldrb	r3, [r7, #11]
 801067c:	2b01      	cmp	r3, #1
 801067e:	d10f      	bne.n	80106a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010686:	461a      	mov	r2, r3
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	697a      	ldr	r2, [r7, #20]
 8010696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801069a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801069e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80106a0:	2300      	movs	r3, #0
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	371c      	adds	r7, #28
 80106a6:	46bd      	mov	sp, r7
 80106a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ac:	4770      	bx	lr
 80106ae:	bf00      	nop
 80106b0:	4f54300a 	.word	0x4f54300a

080106b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b085      	sub	sp, #20
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80106bc:	2300      	movs	r3, #0
 80106be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	3301      	adds	r3, #1
 80106c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80106cc:	d901      	bls.n	80106d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80106ce:	2303      	movs	r3, #3
 80106d0:	e01b      	b.n	801070a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	691b      	ldr	r3, [r3, #16]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	daf2      	bge.n	80106c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80106da:	2300      	movs	r3, #0
 80106dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	691b      	ldr	r3, [r3, #16]
 80106e2:	f043 0201 	orr.w	r2, r3, #1
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	3301      	adds	r3, #1
 80106ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80106f6:	d901      	bls.n	80106fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80106f8:	2303      	movs	r3, #3
 80106fa:	e006      	b.n	801070a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	691b      	ldr	r3, [r3, #16]
 8010700:	f003 0301 	and.w	r3, r3, #1
 8010704:	2b01      	cmp	r3, #1
 8010706:	d0f0      	beq.n	80106ea <USB_CoreReset+0x36>

  return HAL_OK;
 8010708:	2300      	movs	r3, #0
}
 801070a:	4618      	mov	r0, r3
 801070c:	3714      	adds	r7, #20
 801070e:	46bd      	mov	sp, r7
 8010710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010714:	4770      	bx	lr
	...

08010718 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	4603      	mov	r3, r0
 8010720:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010722:	79fb      	ldrb	r3, [r7, #7]
 8010724:	4a08      	ldr	r2, [pc, #32]	; (8010748 <disk_status+0x30>)
 8010726:	009b      	lsls	r3, r3, #2
 8010728:	4413      	add	r3, r2
 801072a:	685b      	ldr	r3, [r3, #4]
 801072c:	685b      	ldr	r3, [r3, #4]
 801072e:	79fa      	ldrb	r2, [r7, #7]
 8010730:	4905      	ldr	r1, [pc, #20]	; (8010748 <disk_status+0x30>)
 8010732:	440a      	add	r2, r1
 8010734:	7b12      	ldrb	r2, [r2, #12]
 8010736:	4610      	mov	r0, r2
 8010738:	4798      	blx	r3
 801073a:	4603      	mov	r3, r0
 801073c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801073e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010740:	4618      	mov	r0, r3
 8010742:	3710      	adds	r7, #16
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}
 8010748:	200073fc 	.word	0x200073fc

0801074c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	4603      	mov	r3, r0
 8010754:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010756:	2300      	movs	r3, #0
 8010758:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801075a:	79fb      	ldrb	r3, [r7, #7]
 801075c:	4a0d      	ldr	r2, [pc, #52]	; (8010794 <disk_initialize+0x48>)
 801075e:	5cd3      	ldrb	r3, [r2, r3]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d111      	bne.n	8010788 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010764:	79fb      	ldrb	r3, [r7, #7]
 8010766:	4a0b      	ldr	r2, [pc, #44]	; (8010794 <disk_initialize+0x48>)
 8010768:	2101      	movs	r1, #1
 801076a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801076c:	79fb      	ldrb	r3, [r7, #7]
 801076e:	4a09      	ldr	r2, [pc, #36]	; (8010794 <disk_initialize+0x48>)
 8010770:	009b      	lsls	r3, r3, #2
 8010772:	4413      	add	r3, r2
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	79fa      	ldrb	r2, [r7, #7]
 801077a:	4906      	ldr	r1, [pc, #24]	; (8010794 <disk_initialize+0x48>)
 801077c:	440a      	add	r2, r1
 801077e:	7b12      	ldrb	r2, [r2, #12]
 8010780:	4610      	mov	r0, r2
 8010782:	4798      	blx	r3
 8010784:	4603      	mov	r3, r0
 8010786:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010788:	7bfb      	ldrb	r3, [r7, #15]
}
 801078a:	4618      	mov	r0, r3
 801078c:	3710      	adds	r7, #16
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	200073fc 	.word	0x200073fc

08010798 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010798:	b590      	push	{r4, r7, lr}
 801079a:	b087      	sub	sp, #28
 801079c:	af00      	add	r7, sp, #0
 801079e:	60b9      	str	r1, [r7, #8]
 80107a0:	607a      	str	r2, [r7, #4]
 80107a2:	603b      	str	r3, [r7, #0]
 80107a4:	4603      	mov	r3, r0
 80107a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80107a8:	7bfb      	ldrb	r3, [r7, #15]
 80107aa:	4a0a      	ldr	r2, [pc, #40]	; (80107d4 <disk_read+0x3c>)
 80107ac:	009b      	lsls	r3, r3, #2
 80107ae:	4413      	add	r3, r2
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	689c      	ldr	r4, [r3, #8]
 80107b4:	7bfb      	ldrb	r3, [r7, #15]
 80107b6:	4a07      	ldr	r2, [pc, #28]	; (80107d4 <disk_read+0x3c>)
 80107b8:	4413      	add	r3, r2
 80107ba:	7b18      	ldrb	r0, [r3, #12]
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	687a      	ldr	r2, [r7, #4]
 80107c0:	68b9      	ldr	r1, [r7, #8]
 80107c2:	47a0      	blx	r4
 80107c4:	4603      	mov	r3, r0
 80107c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80107c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	371c      	adds	r7, #28
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd90      	pop	{r4, r7, pc}
 80107d2:	bf00      	nop
 80107d4:	200073fc 	.word	0x200073fc

080107d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80107d8:	b590      	push	{r4, r7, lr}
 80107da:	b087      	sub	sp, #28
 80107dc:	af00      	add	r7, sp, #0
 80107de:	60b9      	str	r1, [r7, #8]
 80107e0:	607a      	str	r2, [r7, #4]
 80107e2:	603b      	str	r3, [r7, #0]
 80107e4:	4603      	mov	r3, r0
 80107e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80107e8:	7bfb      	ldrb	r3, [r7, #15]
 80107ea:	4a0a      	ldr	r2, [pc, #40]	; (8010814 <disk_write+0x3c>)
 80107ec:	009b      	lsls	r3, r3, #2
 80107ee:	4413      	add	r3, r2
 80107f0:	685b      	ldr	r3, [r3, #4]
 80107f2:	68dc      	ldr	r4, [r3, #12]
 80107f4:	7bfb      	ldrb	r3, [r7, #15]
 80107f6:	4a07      	ldr	r2, [pc, #28]	; (8010814 <disk_write+0x3c>)
 80107f8:	4413      	add	r3, r2
 80107fa:	7b18      	ldrb	r0, [r3, #12]
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	687a      	ldr	r2, [r7, #4]
 8010800:	68b9      	ldr	r1, [r7, #8]
 8010802:	47a0      	blx	r4
 8010804:	4603      	mov	r3, r0
 8010806:	75fb      	strb	r3, [r7, #23]
  return res;
 8010808:	7dfb      	ldrb	r3, [r7, #23]
}
 801080a:	4618      	mov	r0, r3
 801080c:	371c      	adds	r7, #28
 801080e:	46bd      	mov	sp, r7
 8010810:	bd90      	pop	{r4, r7, pc}
 8010812:	bf00      	nop
 8010814:	200073fc 	.word	0x200073fc

08010818 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	4603      	mov	r3, r0
 8010820:	603a      	str	r2, [r7, #0]
 8010822:	71fb      	strb	r3, [r7, #7]
 8010824:	460b      	mov	r3, r1
 8010826:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010828:	79fb      	ldrb	r3, [r7, #7]
 801082a:	4a09      	ldr	r2, [pc, #36]	; (8010850 <disk_ioctl+0x38>)
 801082c:	009b      	lsls	r3, r3, #2
 801082e:	4413      	add	r3, r2
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	691b      	ldr	r3, [r3, #16]
 8010834:	79fa      	ldrb	r2, [r7, #7]
 8010836:	4906      	ldr	r1, [pc, #24]	; (8010850 <disk_ioctl+0x38>)
 8010838:	440a      	add	r2, r1
 801083a:	7b10      	ldrb	r0, [r2, #12]
 801083c:	79b9      	ldrb	r1, [r7, #6]
 801083e:	683a      	ldr	r2, [r7, #0]
 8010840:	4798      	blx	r3
 8010842:	4603      	mov	r3, r0
 8010844:	73fb      	strb	r3, [r7, #15]
  return res;
 8010846:	7bfb      	ldrb	r3, [r7, #15]
}
 8010848:	4618      	mov	r0, r3
 801084a:	3710      	adds	r7, #16
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}
 8010850:	200073fc 	.word	0x200073fc

08010854 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8010854:	b480      	push	{r7}
 8010856:	af00      	add	r7, sp, #0
  return 0;
 8010858:	2300      	movs	r3, #0
}
 801085a:	4618      	mov	r0, r3
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr

08010864 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010864:	b480      	push	{r7}
 8010866:	b085      	sub	sp, #20
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	3301      	adds	r3, #1
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010874:	89fb      	ldrh	r3, [r7, #14]
 8010876:	021b      	lsls	r3, r3, #8
 8010878:	b21a      	sxth	r2, r3
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	781b      	ldrb	r3, [r3, #0]
 801087e:	b21b      	sxth	r3, r3
 8010880:	4313      	orrs	r3, r2
 8010882:	b21b      	sxth	r3, r3
 8010884:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010886:	89fb      	ldrh	r3, [r7, #14]
}
 8010888:	4618      	mov	r0, r3
 801088a:	3714      	adds	r7, #20
 801088c:	46bd      	mov	sp, r7
 801088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010892:	4770      	bx	lr

08010894 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010894:	b480      	push	{r7}
 8010896:	b085      	sub	sp, #20
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	3303      	adds	r3, #3
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	021b      	lsls	r3, r3, #8
 80108a8:	687a      	ldr	r2, [r7, #4]
 80108aa:	3202      	adds	r2, #2
 80108ac:	7812      	ldrb	r2, [r2, #0]
 80108ae:	4313      	orrs	r3, r2
 80108b0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	021b      	lsls	r3, r3, #8
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	3201      	adds	r2, #1
 80108ba:	7812      	ldrb	r2, [r2, #0]
 80108bc:	4313      	orrs	r3, r2
 80108be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	021b      	lsls	r3, r3, #8
 80108c4:	687a      	ldr	r2, [r7, #4]
 80108c6:	7812      	ldrb	r2, [r2, #0]
 80108c8:	4313      	orrs	r3, r2
 80108ca:	60fb      	str	r3, [r7, #12]
	return rv;
 80108cc:	68fb      	ldr	r3, [r7, #12]
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3714      	adds	r7, #20
 80108d2:	46bd      	mov	sp, r7
 80108d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d8:	4770      	bx	lr

080108da <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80108da:	b480      	push	{r7}
 80108dc:	b083      	sub	sp, #12
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
 80108e2:	460b      	mov	r3, r1
 80108e4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	1c5a      	adds	r2, r3, #1
 80108ea:	607a      	str	r2, [r7, #4]
 80108ec:	887a      	ldrh	r2, [r7, #2]
 80108ee:	b2d2      	uxtb	r2, r2
 80108f0:	701a      	strb	r2, [r3, #0]
 80108f2:	887b      	ldrh	r3, [r7, #2]
 80108f4:	0a1b      	lsrs	r3, r3, #8
 80108f6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	1c5a      	adds	r2, r3, #1
 80108fc:	607a      	str	r2, [r7, #4]
 80108fe:	887a      	ldrh	r2, [r7, #2]
 8010900:	b2d2      	uxtb	r2, r2
 8010902:	701a      	strb	r2, [r3, #0]
}
 8010904:	bf00      	nop
 8010906:	370c      	adds	r7, #12
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr

08010910 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010910:	b480      	push	{r7}
 8010912:	b083      	sub	sp, #12
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
 8010918:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	1c5a      	adds	r2, r3, #1
 801091e:	607a      	str	r2, [r7, #4]
 8010920:	683a      	ldr	r2, [r7, #0]
 8010922:	b2d2      	uxtb	r2, r2
 8010924:	701a      	strb	r2, [r3, #0]
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	0a1b      	lsrs	r3, r3, #8
 801092a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	1c5a      	adds	r2, r3, #1
 8010930:	607a      	str	r2, [r7, #4]
 8010932:	683a      	ldr	r2, [r7, #0]
 8010934:	b2d2      	uxtb	r2, r2
 8010936:	701a      	strb	r2, [r3, #0]
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	0a1b      	lsrs	r3, r3, #8
 801093c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	1c5a      	adds	r2, r3, #1
 8010942:	607a      	str	r2, [r7, #4]
 8010944:	683a      	ldr	r2, [r7, #0]
 8010946:	b2d2      	uxtb	r2, r2
 8010948:	701a      	strb	r2, [r3, #0]
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	0a1b      	lsrs	r3, r3, #8
 801094e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	1c5a      	adds	r2, r3, #1
 8010954:	607a      	str	r2, [r7, #4]
 8010956:	683a      	ldr	r2, [r7, #0]
 8010958:	b2d2      	uxtb	r2, r2
 801095a:	701a      	strb	r2, [r3, #0]
}
 801095c:	bf00      	nop
 801095e:	370c      	adds	r7, #12
 8010960:	46bd      	mov	sp, r7
 8010962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010966:	4770      	bx	lr

08010968 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010968:	b480      	push	{r7}
 801096a:	b087      	sub	sp, #28
 801096c:	af00      	add	r7, sp, #0
 801096e:	60f8      	str	r0, [r7, #12]
 8010970:	60b9      	str	r1, [r7, #8]
 8010972:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d00d      	beq.n	801099e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010982:	693a      	ldr	r2, [r7, #16]
 8010984:	1c53      	adds	r3, r2, #1
 8010986:	613b      	str	r3, [r7, #16]
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	1c59      	adds	r1, r3, #1
 801098c:	6179      	str	r1, [r7, #20]
 801098e:	7812      	ldrb	r2, [r2, #0]
 8010990:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	3b01      	subs	r3, #1
 8010996:	607b      	str	r3, [r7, #4]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d1f1      	bne.n	8010982 <mem_cpy+0x1a>
	}
}
 801099e:	bf00      	nop
 80109a0:	371c      	adds	r7, #28
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr

080109aa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80109aa:	b480      	push	{r7}
 80109ac:	b087      	sub	sp, #28
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	60f8      	str	r0, [r7, #12]
 80109b2:	60b9      	str	r1, [r7, #8]
 80109b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80109ba:	697b      	ldr	r3, [r7, #20]
 80109bc:	1c5a      	adds	r2, r3, #1
 80109be:	617a      	str	r2, [r7, #20]
 80109c0:	68ba      	ldr	r2, [r7, #8]
 80109c2:	b2d2      	uxtb	r2, r2
 80109c4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	3b01      	subs	r3, #1
 80109ca:	607b      	str	r3, [r7, #4]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d1f3      	bne.n	80109ba <mem_set+0x10>
}
 80109d2:	bf00      	nop
 80109d4:	bf00      	nop
 80109d6:	371c      	adds	r7, #28
 80109d8:	46bd      	mov	sp, r7
 80109da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109de:	4770      	bx	lr

080109e0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80109e0:	b480      	push	{r7}
 80109e2:	b089      	sub	sp, #36	; 0x24
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	60b9      	str	r1, [r7, #8]
 80109ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	61fb      	str	r3, [r7, #28]
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80109f4:	2300      	movs	r3, #0
 80109f6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80109f8:	69fb      	ldr	r3, [r7, #28]
 80109fa:	1c5a      	adds	r2, r3, #1
 80109fc:	61fa      	str	r2, [r7, #28]
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	4619      	mov	r1, r3
 8010a02:	69bb      	ldr	r3, [r7, #24]
 8010a04:	1c5a      	adds	r2, r3, #1
 8010a06:	61ba      	str	r2, [r7, #24]
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	1acb      	subs	r3, r1, r3
 8010a0c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	3b01      	subs	r3, #1
 8010a12:	607b      	str	r3, [r7, #4]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d002      	beq.n	8010a20 <mem_cmp+0x40>
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d0eb      	beq.n	80109f8 <mem_cmp+0x18>

	return r;
 8010a20:	697b      	ldr	r3, [r7, #20]
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3724      	adds	r7, #36	; 0x24
 8010a26:	46bd      	mov	sp, r7
 8010a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2c:	4770      	bx	lr

08010a2e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010a2e:	b480      	push	{r7}
 8010a30:	b083      	sub	sp, #12
 8010a32:	af00      	add	r7, sp, #0
 8010a34:	6078      	str	r0, [r7, #4]
 8010a36:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010a38:	e002      	b.n	8010a40 <chk_chr+0x12>
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	607b      	str	r3, [r7, #4]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d005      	beq.n	8010a54 <chk_chr+0x26>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	4293      	cmp	r3, r2
 8010a52:	d1f2      	bne.n	8010a3a <chk_chr+0xc>
	return *str;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	781b      	ldrb	r3, [r3, #0]
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	370c      	adds	r7, #12
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr

08010a64 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010a64:	b480      	push	{r7}
 8010a66:	b085      	sub	sp, #20
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010a6e:	2300      	movs	r3, #0
 8010a70:	60bb      	str	r3, [r7, #8]
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	60fb      	str	r3, [r7, #12]
 8010a76:	e029      	b.n	8010acc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010a78:	4a27      	ldr	r2, [pc, #156]	; (8010b18 <chk_lock+0xb4>)
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	011b      	lsls	r3, r3, #4
 8010a7e:	4413      	add	r3, r2
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d01d      	beq.n	8010ac2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010a86:	4a24      	ldr	r2, [pc, #144]	; (8010b18 <chk_lock+0xb4>)
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	011b      	lsls	r3, r3, #4
 8010a8c:	4413      	add	r3, r2
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d116      	bne.n	8010ac6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010a98:	4a1f      	ldr	r2, [pc, #124]	; (8010b18 <chk_lock+0xb4>)
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	011b      	lsls	r3, r3, #4
 8010a9e:	4413      	add	r3, r2
 8010aa0:	3304      	adds	r3, #4
 8010aa2:	681a      	ldr	r2, [r3, #0]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d10c      	bne.n	8010ac6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010aac:	4a1a      	ldr	r2, [pc, #104]	; (8010b18 <chk_lock+0xb4>)
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	011b      	lsls	r3, r3, #4
 8010ab2:	4413      	add	r3, r2
 8010ab4:	3308      	adds	r3, #8
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d102      	bne.n	8010ac6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010ac0:	e007      	b.n	8010ad2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	3301      	adds	r3, #1
 8010aca:	60fb      	str	r3, [r7, #12]
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	2b01      	cmp	r3, #1
 8010ad0:	d9d2      	bls.n	8010a78 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2b02      	cmp	r3, #2
 8010ad6:	d109      	bne.n	8010aec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d102      	bne.n	8010ae4 <chk_lock+0x80>
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	2b02      	cmp	r3, #2
 8010ae2:	d101      	bne.n	8010ae8 <chk_lock+0x84>
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	e010      	b.n	8010b0a <chk_lock+0xa6>
 8010ae8:	2312      	movs	r3, #18
 8010aea:	e00e      	b.n	8010b0a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d108      	bne.n	8010b04 <chk_lock+0xa0>
 8010af2:	4a09      	ldr	r2, [pc, #36]	; (8010b18 <chk_lock+0xb4>)
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	011b      	lsls	r3, r3, #4
 8010af8:	4413      	add	r3, r2
 8010afa:	330c      	adds	r3, #12
 8010afc:	881b      	ldrh	r3, [r3, #0]
 8010afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b02:	d101      	bne.n	8010b08 <chk_lock+0xa4>
 8010b04:	2310      	movs	r3, #16
 8010b06:	e000      	b.n	8010b0a <chk_lock+0xa6>
 8010b08:	2300      	movs	r3, #0
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	3714      	adds	r7, #20
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b14:	4770      	bx	lr
 8010b16:	bf00      	nop
 8010b18:	200073dc 	.word	0x200073dc

08010b1c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	b083      	sub	sp, #12
 8010b20:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010b22:	2300      	movs	r3, #0
 8010b24:	607b      	str	r3, [r7, #4]
 8010b26:	e002      	b.n	8010b2e <enq_lock+0x12>
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	607b      	str	r3, [r7, #4]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2b01      	cmp	r3, #1
 8010b32:	d806      	bhi.n	8010b42 <enq_lock+0x26>
 8010b34:	4a09      	ldr	r2, [pc, #36]	; (8010b5c <enq_lock+0x40>)
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	011b      	lsls	r3, r3, #4
 8010b3a:	4413      	add	r3, r2
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d1f2      	bne.n	8010b28 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2b02      	cmp	r3, #2
 8010b46:	bf14      	ite	ne
 8010b48:	2301      	movne	r3, #1
 8010b4a:	2300      	moveq	r3, #0
 8010b4c:	b2db      	uxtb	r3, r3
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	370c      	adds	r7, #12
 8010b52:	46bd      	mov	sp, r7
 8010b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b58:	4770      	bx	lr
 8010b5a:	bf00      	nop
 8010b5c:	200073dc 	.word	0x200073dc

08010b60 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010b60:	b480      	push	{r7}
 8010b62:	b085      	sub	sp, #20
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	60fb      	str	r3, [r7, #12]
 8010b6e:	e01f      	b.n	8010bb0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010b70:	4a41      	ldr	r2, [pc, #260]	; (8010c78 <inc_lock+0x118>)
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	011b      	lsls	r3, r3, #4
 8010b76:	4413      	add	r3, r2
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d113      	bne.n	8010baa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010b82:	4a3d      	ldr	r2, [pc, #244]	; (8010c78 <inc_lock+0x118>)
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	011b      	lsls	r3, r3, #4
 8010b88:	4413      	add	r3, r2
 8010b8a:	3304      	adds	r3, #4
 8010b8c:	681a      	ldr	r2, [r3, #0]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d109      	bne.n	8010baa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010b96:	4a38      	ldr	r2, [pc, #224]	; (8010c78 <inc_lock+0x118>)
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	011b      	lsls	r3, r3, #4
 8010b9c:	4413      	add	r3, r2
 8010b9e:	3308      	adds	r3, #8
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d006      	beq.n	8010bb8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	3301      	adds	r3, #1
 8010bae:	60fb      	str	r3, [r7, #12]
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	2b01      	cmp	r3, #1
 8010bb4:	d9dc      	bls.n	8010b70 <inc_lock+0x10>
 8010bb6:	e000      	b.n	8010bba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010bb8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	2b02      	cmp	r3, #2
 8010bbe:	d132      	bne.n	8010c26 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	60fb      	str	r3, [r7, #12]
 8010bc4:	e002      	b.n	8010bcc <inc_lock+0x6c>
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	3301      	adds	r3, #1
 8010bca:	60fb      	str	r3, [r7, #12]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	2b01      	cmp	r3, #1
 8010bd0:	d806      	bhi.n	8010be0 <inc_lock+0x80>
 8010bd2:	4a29      	ldr	r2, [pc, #164]	; (8010c78 <inc_lock+0x118>)
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	011b      	lsls	r3, r3, #4
 8010bd8:	4413      	add	r3, r2
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d1f2      	bne.n	8010bc6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	2b02      	cmp	r3, #2
 8010be4:	d101      	bne.n	8010bea <inc_lock+0x8a>
 8010be6:	2300      	movs	r3, #0
 8010be8:	e040      	b.n	8010c6c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681a      	ldr	r2, [r3, #0]
 8010bee:	4922      	ldr	r1, [pc, #136]	; (8010c78 <inc_lock+0x118>)
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	011b      	lsls	r3, r3, #4
 8010bf4:	440b      	add	r3, r1
 8010bf6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	689a      	ldr	r2, [r3, #8]
 8010bfc:	491e      	ldr	r1, [pc, #120]	; (8010c78 <inc_lock+0x118>)
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	011b      	lsls	r3, r3, #4
 8010c02:	440b      	add	r3, r1
 8010c04:	3304      	adds	r3, #4
 8010c06:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	695a      	ldr	r2, [r3, #20]
 8010c0c:	491a      	ldr	r1, [pc, #104]	; (8010c78 <inc_lock+0x118>)
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	011b      	lsls	r3, r3, #4
 8010c12:	440b      	add	r3, r1
 8010c14:	3308      	adds	r3, #8
 8010c16:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010c18:	4a17      	ldr	r2, [pc, #92]	; (8010c78 <inc_lock+0x118>)
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	011b      	lsls	r3, r3, #4
 8010c1e:	4413      	add	r3, r2
 8010c20:	330c      	adds	r3, #12
 8010c22:	2200      	movs	r2, #0
 8010c24:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d009      	beq.n	8010c40 <inc_lock+0xe0>
 8010c2c:	4a12      	ldr	r2, [pc, #72]	; (8010c78 <inc_lock+0x118>)
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	011b      	lsls	r3, r3, #4
 8010c32:	4413      	add	r3, r2
 8010c34:	330c      	adds	r3, #12
 8010c36:	881b      	ldrh	r3, [r3, #0]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d001      	beq.n	8010c40 <inc_lock+0xe0>
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	e015      	b.n	8010c6c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d108      	bne.n	8010c58 <inc_lock+0xf8>
 8010c46:	4a0c      	ldr	r2, [pc, #48]	; (8010c78 <inc_lock+0x118>)
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	011b      	lsls	r3, r3, #4
 8010c4c:	4413      	add	r3, r2
 8010c4e:	330c      	adds	r3, #12
 8010c50:	881b      	ldrh	r3, [r3, #0]
 8010c52:	3301      	adds	r3, #1
 8010c54:	b29a      	uxth	r2, r3
 8010c56:	e001      	b.n	8010c5c <inc_lock+0xfc>
 8010c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010c5c:	4906      	ldr	r1, [pc, #24]	; (8010c78 <inc_lock+0x118>)
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	011b      	lsls	r3, r3, #4
 8010c62:	440b      	add	r3, r1
 8010c64:	330c      	adds	r3, #12
 8010c66:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	3301      	adds	r3, #1
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3714      	adds	r7, #20
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr
 8010c78:	200073dc 	.word	0x200073dc

08010c7c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b085      	sub	sp, #20
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	3b01      	subs	r3, #1
 8010c88:	607b      	str	r3, [r7, #4]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	2b01      	cmp	r3, #1
 8010c8e:	d825      	bhi.n	8010cdc <dec_lock+0x60>
		n = Files[i].ctr;
 8010c90:	4a17      	ldr	r2, [pc, #92]	; (8010cf0 <dec_lock+0x74>)
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	011b      	lsls	r3, r3, #4
 8010c96:	4413      	add	r3, r2
 8010c98:	330c      	adds	r3, #12
 8010c9a:	881b      	ldrh	r3, [r3, #0]
 8010c9c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010c9e:	89fb      	ldrh	r3, [r7, #14]
 8010ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ca4:	d101      	bne.n	8010caa <dec_lock+0x2e>
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010caa:	89fb      	ldrh	r3, [r7, #14]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d002      	beq.n	8010cb6 <dec_lock+0x3a>
 8010cb0:	89fb      	ldrh	r3, [r7, #14]
 8010cb2:	3b01      	subs	r3, #1
 8010cb4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010cb6:	4a0e      	ldr	r2, [pc, #56]	; (8010cf0 <dec_lock+0x74>)
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	011b      	lsls	r3, r3, #4
 8010cbc:	4413      	add	r3, r2
 8010cbe:	330c      	adds	r3, #12
 8010cc0:	89fa      	ldrh	r2, [r7, #14]
 8010cc2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010cc4:	89fb      	ldrh	r3, [r7, #14]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d105      	bne.n	8010cd6 <dec_lock+0x5a>
 8010cca:	4a09      	ldr	r2, [pc, #36]	; (8010cf0 <dec_lock+0x74>)
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	011b      	lsls	r3, r3, #4
 8010cd0:	4413      	add	r3, r2
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	737b      	strb	r3, [r7, #13]
 8010cda:	e001      	b.n	8010ce0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010cdc:	2302      	movs	r3, #2
 8010cde:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010ce0:	7b7b      	ldrb	r3, [r7, #13]
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3714      	adds	r7, #20
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cec:	4770      	bx	lr
 8010cee:	bf00      	nop
 8010cf0:	200073dc 	.word	0x200073dc

08010cf4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	b085      	sub	sp, #20
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	60fb      	str	r3, [r7, #12]
 8010d00:	e010      	b.n	8010d24 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010d02:	4a0d      	ldr	r2, [pc, #52]	; (8010d38 <clear_lock+0x44>)
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	011b      	lsls	r3, r3, #4
 8010d08:	4413      	add	r3, r2
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	687a      	ldr	r2, [r7, #4]
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d105      	bne.n	8010d1e <clear_lock+0x2a>
 8010d12:	4a09      	ldr	r2, [pc, #36]	; (8010d38 <clear_lock+0x44>)
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	011b      	lsls	r3, r3, #4
 8010d18:	4413      	add	r3, r2
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	3301      	adds	r3, #1
 8010d22:	60fb      	str	r3, [r7, #12]
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	2b01      	cmp	r3, #1
 8010d28:	d9eb      	bls.n	8010d02 <clear_lock+0xe>
	}
}
 8010d2a:	bf00      	nop
 8010d2c:	bf00      	nop
 8010d2e:	3714      	adds	r7, #20
 8010d30:	46bd      	mov	sp, r7
 8010d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d36:	4770      	bx	lr
 8010d38:	200073dc 	.word	0x200073dc

08010d3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b086      	sub	sp, #24
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010d44:	2300      	movs	r3, #0
 8010d46:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	78db      	ldrb	r3, [r3, #3]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d034      	beq.n	8010dba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	7858      	ldrb	r0, [r3, #1]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010d60:	2301      	movs	r3, #1
 8010d62:	697a      	ldr	r2, [r7, #20]
 8010d64:	f7ff fd38 	bl	80107d8 <disk_write>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d002      	beq.n	8010d74 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010d6e:	2301      	movs	r3, #1
 8010d70:	73fb      	strb	r3, [r7, #15]
 8010d72:	e022      	b.n	8010dba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2200      	movs	r2, #0
 8010d78:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d7e:	697a      	ldr	r2, [r7, #20]
 8010d80:	1ad2      	subs	r2, r2, r3
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	69db      	ldr	r3, [r3, #28]
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d217      	bcs.n	8010dba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	789b      	ldrb	r3, [r3, #2]
 8010d8e:	613b      	str	r3, [r7, #16]
 8010d90:	e010      	b.n	8010db4 <sync_window+0x78>
					wsect += fs->fsize;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	69db      	ldr	r3, [r3, #28]
 8010d96:	697a      	ldr	r2, [r7, #20]
 8010d98:	4413      	add	r3, r2
 8010d9a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	7858      	ldrb	r0, [r3, #1]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010da6:	2301      	movs	r3, #1
 8010da8:	697a      	ldr	r2, [r7, #20]
 8010daa:	f7ff fd15 	bl	80107d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	3b01      	subs	r3, #1
 8010db2:	613b      	str	r3, [r7, #16]
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	2b01      	cmp	r3, #1
 8010db8:	d8eb      	bhi.n	8010d92 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3718      	adds	r7, #24
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b084      	sub	sp, #16
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dd6:	683a      	ldr	r2, [r7, #0]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d01b      	beq.n	8010e14 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f7ff ffad 	bl	8010d3c <sync_window>
 8010de2:	4603      	mov	r3, r0
 8010de4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010de6:	7bfb      	ldrb	r3, [r7, #15]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d113      	bne.n	8010e14 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	7858      	ldrb	r0, [r3, #1]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010df6:	2301      	movs	r3, #1
 8010df8:	683a      	ldr	r2, [r7, #0]
 8010dfa:	f7ff fccd 	bl	8010798 <disk_read>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d004      	beq.n	8010e0e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010e04:	f04f 33ff 	mov.w	r3, #4294967295
 8010e08:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	683a      	ldr	r2, [r7, #0]
 8010e12:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3710      	adds	r7, #16
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}
	...

08010e20 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b084      	sub	sp, #16
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f7ff ff87 	bl	8010d3c <sync_window>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010e32:	7bfb      	ldrb	r3, [r7, #15]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d158      	bne.n	8010eea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	2b03      	cmp	r3, #3
 8010e3e:	d148      	bne.n	8010ed2 <sync_fs+0xb2>
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	791b      	ldrb	r3, [r3, #4]
 8010e44:	2b01      	cmp	r3, #1
 8010e46:	d144      	bne.n	8010ed2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	3334      	adds	r3, #52	; 0x34
 8010e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010e50:	2100      	movs	r1, #0
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7ff fda9 	bl	80109aa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	3334      	adds	r3, #52	; 0x34
 8010e5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010e60:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7ff fd38 	bl	80108da <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	3334      	adds	r3, #52	; 0x34
 8010e6e:	4921      	ldr	r1, [pc, #132]	; (8010ef4 <sync_fs+0xd4>)
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7ff fd4d 	bl	8010910 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	3334      	adds	r3, #52	; 0x34
 8010e7a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010e7e:	491e      	ldr	r1, [pc, #120]	; (8010ef8 <sync_fs+0xd8>)
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7ff fd45 	bl	8010910 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	3334      	adds	r3, #52	; 0x34
 8010e8a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	695b      	ldr	r3, [r3, #20]
 8010e92:	4619      	mov	r1, r3
 8010e94:	4610      	mov	r0, r2
 8010e96:	f7ff fd3b 	bl	8010910 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	3334      	adds	r3, #52	; 0x34
 8010e9e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	691b      	ldr	r3, [r3, #16]
 8010ea6:	4619      	mov	r1, r3
 8010ea8:	4610      	mov	r0, r2
 8010eaa:	f7ff fd31 	bl	8010910 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	6a1b      	ldr	r3, [r3, #32]
 8010eb2:	1c5a      	adds	r2, r3, #1
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	7858      	ldrb	r0, [r3, #1]
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	f7ff fc86 	bl	80107d8 <disk_write>
			fs->fsi_flag = 0;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2200      	movs	r2, #0
 8010ed0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	785b      	ldrb	r3, [r3, #1]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	2100      	movs	r1, #0
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7ff fc9c 	bl	8010818 <disk_ioctl>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d001      	beq.n	8010eea <sync_fs+0xca>
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eec:	4618      	mov	r0, r3
 8010eee:	3710      	adds	r7, #16
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd80      	pop	{r7, pc}
 8010ef4:	41615252 	.word	0x41615252
 8010ef8:	61417272 	.word	0x61417272

08010efc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010efc:	b480      	push	{r7}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
 8010f04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	3b02      	subs	r3, #2
 8010f0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	699b      	ldr	r3, [r3, #24]
 8010f10:	3b02      	subs	r3, #2
 8010f12:	683a      	ldr	r2, [r7, #0]
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d301      	bcc.n	8010f1c <clust2sect+0x20>
 8010f18:	2300      	movs	r3, #0
 8010f1a:	e008      	b.n	8010f2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	895b      	ldrh	r3, [r3, #10]
 8010f20:	461a      	mov	r2, r3
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	fb03 f202 	mul.w	r2, r3, r2
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f2c:	4413      	add	r3, r2
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	370c      	adds	r7, #12
 8010f32:	46bd      	mov	sp, r7
 8010f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f38:	4770      	bx	lr

08010f3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010f3a:	b580      	push	{r7, lr}
 8010f3c:	b086      	sub	sp, #24
 8010f3e:	af00      	add	r7, sp, #0
 8010f40:	6078      	str	r0, [r7, #4]
 8010f42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	2b01      	cmp	r3, #1
 8010f4e:	d904      	bls.n	8010f5a <get_fat+0x20>
 8010f50:	693b      	ldr	r3, [r7, #16]
 8010f52:	699b      	ldr	r3, [r3, #24]
 8010f54:	683a      	ldr	r2, [r7, #0]
 8010f56:	429a      	cmp	r2, r3
 8010f58:	d302      	bcc.n	8010f60 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	617b      	str	r3, [r7, #20]
 8010f5e:	e08f      	b.n	8011080 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010f60:	f04f 33ff 	mov.w	r3, #4294967295
 8010f64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	781b      	ldrb	r3, [r3, #0]
 8010f6a:	2b03      	cmp	r3, #3
 8010f6c:	d062      	beq.n	8011034 <get_fat+0xfa>
 8010f6e:	2b03      	cmp	r3, #3
 8010f70:	dc7c      	bgt.n	801106c <get_fat+0x132>
 8010f72:	2b01      	cmp	r3, #1
 8010f74:	d002      	beq.n	8010f7c <get_fat+0x42>
 8010f76:	2b02      	cmp	r3, #2
 8010f78:	d042      	beq.n	8011000 <get_fat+0xc6>
 8010f7a:	e077      	b.n	801106c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	60fb      	str	r3, [r7, #12]
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	085b      	lsrs	r3, r3, #1
 8010f84:	68fa      	ldr	r2, [r7, #12]
 8010f86:	4413      	add	r3, r2
 8010f88:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010f8a:	693b      	ldr	r3, [r7, #16]
 8010f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	0a5b      	lsrs	r3, r3, #9
 8010f92:	4413      	add	r3, r2
 8010f94:	4619      	mov	r1, r3
 8010f96:	6938      	ldr	r0, [r7, #16]
 8010f98:	f7ff ff14 	bl	8010dc4 <move_window>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d167      	bne.n	8011072 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	1c5a      	adds	r2, r3, #1
 8010fa6:	60fa      	str	r2, [r7, #12]
 8010fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fac:	693a      	ldr	r2, [r7, #16]
 8010fae:	4413      	add	r3, r2
 8010fb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010fb4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010fb6:	693b      	ldr	r3, [r7, #16]
 8010fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	0a5b      	lsrs	r3, r3, #9
 8010fbe:	4413      	add	r3, r2
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	6938      	ldr	r0, [r7, #16]
 8010fc4:	f7ff fefe 	bl	8010dc4 <move_window>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d153      	bne.n	8011076 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fd4:	693a      	ldr	r2, [r7, #16]
 8010fd6:	4413      	add	r3, r2
 8010fd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010fdc:	021b      	lsls	r3, r3, #8
 8010fde:	461a      	mov	r2, r3
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	4313      	orrs	r3, r2
 8010fe4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	f003 0301 	and.w	r3, r3, #1
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d002      	beq.n	8010ff6 <get_fat+0xbc>
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	091b      	lsrs	r3, r3, #4
 8010ff4:	e002      	b.n	8010ffc <get_fat+0xc2>
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010ffc:	617b      	str	r3, [r7, #20]
			break;
 8010ffe:	e03f      	b.n	8011080 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	0a1b      	lsrs	r3, r3, #8
 8011008:	4413      	add	r3, r2
 801100a:	4619      	mov	r1, r3
 801100c:	6938      	ldr	r0, [r7, #16]
 801100e:	f7ff fed9 	bl	8010dc4 <move_window>
 8011012:	4603      	mov	r3, r0
 8011014:	2b00      	cmp	r3, #0
 8011016:	d130      	bne.n	801107a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	005b      	lsls	r3, r3, #1
 8011022:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011026:	4413      	add	r3, r2
 8011028:	4618      	mov	r0, r3
 801102a:	f7ff fc1b 	bl	8010864 <ld_word>
 801102e:	4603      	mov	r3, r0
 8011030:	617b      	str	r3, [r7, #20]
			break;
 8011032:	e025      	b.n	8011080 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	09db      	lsrs	r3, r3, #7
 801103c:	4413      	add	r3, r2
 801103e:	4619      	mov	r1, r3
 8011040:	6938      	ldr	r0, [r7, #16]
 8011042:	f7ff febf 	bl	8010dc4 <move_window>
 8011046:	4603      	mov	r3, r0
 8011048:	2b00      	cmp	r3, #0
 801104a:	d118      	bne.n	801107e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	009b      	lsls	r3, r3, #2
 8011056:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801105a:	4413      	add	r3, r2
 801105c:	4618      	mov	r0, r3
 801105e:	f7ff fc19 	bl	8010894 <ld_dword>
 8011062:	4603      	mov	r3, r0
 8011064:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011068:	617b      	str	r3, [r7, #20]
			break;
 801106a:	e009      	b.n	8011080 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801106c:	2301      	movs	r3, #1
 801106e:	617b      	str	r3, [r7, #20]
 8011070:	e006      	b.n	8011080 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011072:	bf00      	nop
 8011074:	e004      	b.n	8011080 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011076:	bf00      	nop
 8011078:	e002      	b.n	8011080 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801107a:	bf00      	nop
 801107c:	e000      	b.n	8011080 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801107e:	bf00      	nop
		}
	}

	return val;
 8011080:	697b      	ldr	r3, [r7, #20]
}
 8011082:	4618      	mov	r0, r3
 8011084:	3718      	adds	r7, #24
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}

0801108a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801108a:	b590      	push	{r4, r7, lr}
 801108c:	b089      	sub	sp, #36	; 0x24
 801108e:	af00      	add	r7, sp, #0
 8011090:	60f8      	str	r0, [r7, #12]
 8011092:	60b9      	str	r1, [r7, #8]
 8011094:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011096:	2302      	movs	r3, #2
 8011098:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	2b01      	cmp	r3, #1
 801109e:	f240 80d9 	bls.w	8011254 <put_fat+0x1ca>
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	699b      	ldr	r3, [r3, #24]
 80110a6:	68ba      	ldr	r2, [r7, #8]
 80110a8:	429a      	cmp	r2, r3
 80110aa:	f080 80d3 	bcs.w	8011254 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	781b      	ldrb	r3, [r3, #0]
 80110b2:	2b03      	cmp	r3, #3
 80110b4:	f000 8096 	beq.w	80111e4 <put_fat+0x15a>
 80110b8:	2b03      	cmp	r3, #3
 80110ba:	f300 80cb 	bgt.w	8011254 <put_fat+0x1ca>
 80110be:	2b01      	cmp	r3, #1
 80110c0:	d002      	beq.n	80110c8 <put_fat+0x3e>
 80110c2:	2b02      	cmp	r3, #2
 80110c4:	d06e      	beq.n	80111a4 <put_fat+0x11a>
 80110c6:	e0c5      	b.n	8011254 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	61bb      	str	r3, [r7, #24]
 80110cc:	69bb      	ldr	r3, [r7, #24]
 80110ce:	085b      	lsrs	r3, r3, #1
 80110d0:	69ba      	ldr	r2, [r7, #24]
 80110d2:	4413      	add	r3, r2
 80110d4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110da:	69bb      	ldr	r3, [r7, #24]
 80110dc:	0a5b      	lsrs	r3, r3, #9
 80110de:	4413      	add	r3, r2
 80110e0:	4619      	mov	r1, r3
 80110e2:	68f8      	ldr	r0, [r7, #12]
 80110e4:	f7ff fe6e 	bl	8010dc4 <move_window>
 80110e8:	4603      	mov	r3, r0
 80110ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80110ec:	7ffb      	ldrb	r3, [r7, #31]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	f040 80a9 	bne.w	8011246 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80110fa:	69bb      	ldr	r3, [r7, #24]
 80110fc:	1c59      	adds	r1, r3, #1
 80110fe:	61b9      	str	r1, [r7, #24]
 8011100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011104:	4413      	add	r3, r2
 8011106:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	f003 0301 	and.w	r3, r3, #1
 801110e:	2b00      	cmp	r3, #0
 8011110:	d00d      	beq.n	801112e <put_fat+0xa4>
 8011112:	697b      	ldr	r3, [r7, #20]
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	b25b      	sxtb	r3, r3
 8011118:	f003 030f 	and.w	r3, r3, #15
 801111c:	b25a      	sxtb	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	b2db      	uxtb	r3, r3
 8011122:	011b      	lsls	r3, r3, #4
 8011124:	b25b      	sxtb	r3, r3
 8011126:	4313      	orrs	r3, r2
 8011128:	b25b      	sxtb	r3, r3
 801112a:	b2db      	uxtb	r3, r3
 801112c:	e001      	b.n	8011132 <put_fat+0xa8>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	b2db      	uxtb	r3, r3
 8011132:	697a      	ldr	r2, [r7, #20]
 8011134:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2201      	movs	r2, #1
 801113a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011140:	69bb      	ldr	r3, [r7, #24]
 8011142:	0a5b      	lsrs	r3, r3, #9
 8011144:	4413      	add	r3, r2
 8011146:	4619      	mov	r1, r3
 8011148:	68f8      	ldr	r0, [r7, #12]
 801114a:	f7ff fe3b 	bl	8010dc4 <move_window>
 801114e:	4603      	mov	r3, r0
 8011150:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011152:	7ffb      	ldrb	r3, [r7, #31]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d178      	bne.n	801124a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801115e:	69bb      	ldr	r3, [r7, #24]
 8011160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011164:	4413      	add	r3, r2
 8011166:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	f003 0301 	and.w	r3, r3, #1
 801116e:	2b00      	cmp	r3, #0
 8011170:	d003      	beq.n	801117a <put_fat+0xf0>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	091b      	lsrs	r3, r3, #4
 8011176:	b2db      	uxtb	r3, r3
 8011178:	e00e      	b.n	8011198 <put_fat+0x10e>
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	b25b      	sxtb	r3, r3
 8011180:	f023 030f 	bic.w	r3, r3, #15
 8011184:	b25a      	sxtb	r2, r3
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	0a1b      	lsrs	r3, r3, #8
 801118a:	b25b      	sxtb	r3, r3
 801118c:	f003 030f 	and.w	r3, r3, #15
 8011190:	b25b      	sxtb	r3, r3
 8011192:	4313      	orrs	r3, r2
 8011194:	b25b      	sxtb	r3, r3
 8011196:	b2db      	uxtb	r3, r3
 8011198:	697a      	ldr	r2, [r7, #20]
 801119a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	2201      	movs	r2, #1
 80111a0:	70da      	strb	r2, [r3, #3]
			break;
 80111a2:	e057      	b.n	8011254 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	0a1b      	lsrs	r3, r3, #8
 80111ac:	4413      	add	r3, r2
 80111ae:	4619      	mov	r1, r3
 80111b0:	68f8      	ldr	r0, [r7, #12]
 80111b2:	f7ff fe07 	bl	8010dc4 <move_window>
 80111b6:	4603      	mov	r3, r0
 80111b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80111ba:	7ffb      	ldrb	r3, [r7, #31]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d146      	bne.n	801124e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	005b      	lsls	r3, r3, #1
 80111ca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80111ce:	4413      	add	r3, r2
 80111d0:	687a      	ldr	r2, [r7, #4]
 80111d2:	b292      	uxth	r2, r2
 80111d4:	4611      	mov	r1, r2
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7ff fb7f 	bl	80108da <st_word>
			fs->wflag = 1;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	2201      	movs	r2, #1
 80111e0:	70da      	strb	r2, [r3, #3]
			break;
 80111e2:	e037      	b.n	8011254 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	09db      	lsrs	r3, r3, #7
 80111ec:	4413      	add	r3, r2
 80111ee:	4619      	mov	r1, r3
 80111f0:	68f8      	ldr	r0, [r7, #12]
 80111f2:	f7ff fde7 	bl	8010dc4 <move_window>
 80111f6:	4603      	mov	r3, r0
 80111f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80111fa:	7ffb      	ldrb	r3, [r7, #31]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d128      	bne.n	8011252 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	009b      	lsls	r3, r3, #2
 8011210:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011214:	4413      	add	r3, r2
 8011216:	4618      	mov	r0, r3
 8011218:	f7ff fb3c 	bl	8010894 <ld_dword>
 801121c:	4603      	mov	r3, r0
 801121e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011222:	4323      	orrs	r3, r4
 8011224:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	009b      	lsls	r3, r3, #2
 8011230:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011234:	4413      	add	r3, r2
 8011236:	6879      	ldr	r1, [r7, #4]
 8011238:	4618      	mov	r0, r3
 801123a:	f7ff fb69 	bl	8010910 <st_dword>
			fs->wflag = 1;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2201      	movs	r2, #1
 8011242:	70da      	strb	r2, [r3, #3]
			break;
 8011244:	e006      	b.n	8011254 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011246:	bf00      	nop
 8011248:	e004      	b.n	8011254 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801124a:	bf00      	nop
 801124c:	e002      	b.n	8011254 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801124e:	bf00      	nop
 8011250:	e000      	b.n	8011254 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011252:	bf00      	nop
		}
	}
	return res;
 8011254:	7ffb      	ldrb	r3, [r7, #31]
}
 8011256:	4618      	mov	r0, r3
 8011258:	3724      	adds	r7, #36	; 0x24
 801125a:	46bd      	mov	sp, r7
 801125c:	bd90      	pop	{r4, r7, pc}

0801125e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801125e:	b580      	push	{r7, lr}
 8011260:	b088      	sub	sp, #32
 8011262:	af00      	add	r7, sp, #0
 8011264:	60f8      	str	r0, [r7, #12]
 8011266:	60b9      	str	r1, [r7, #8]
 8011268:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801126a:	2300      	movs	r3, #0
 801126c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	2b01      	cmp	r3, #1
 8011278:	d904      	bls.n	8011284 <remove_chain+0x26>
 801127a:	69bb      	ldr	r3, [r7, #24]
 801127c:	699b      	ldr	r3, [r3, #24]
 801127e:	68ba      	ldr	r2, [r7, #8]
 8011280:	429a      	cmp	r2, r3
 8011282:	d301      	bcc.n	8011288 <remove_chain+0x2a>
 8011284:	2302      	movs	r3, #2
 8011286:	e04b      	b.n	8011320 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d00c      	beq.n	80112a8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801128e:	f04f 32ff 	mov.w	r2, #4294967295
 8011292:	6879      	ldr	r1, [r7, #4]
 8011294:	69b8      	ldr	r0, [r7, #24]
 8011296:	f7ff fef8 	bl	801108a <put_fat>
 801129a:	4603      	mov	r3, r0
 801129c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801129e:	7ffb      	ldrb	r3, [r7, #31]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d001      	beq.n	80112a8 <remove_chain+0x4a>
 80112a4:	7ffb      	ldrb	r3, [r7, #31]
 80112a6:	e03b      	b.n	8011320 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80112a8:	68b9      	ldr	r1, [r7, #8]
 80112aa:	68f8      	ldr	r0, [r7, #12]
 80112ac:	f7ff fe45 	bl	8010f3a <get_fat>
 80112b0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d031      	beq.n	801131c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	2b01      	cmp	r3, #1
 80112bc:	d101      	bne.n	80112c2 <remove_chain+0x64>
 80112be:	2302      	movs	r3, #2
 80112c0:	e02e      	b.n	8011320 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112c8:	d101      	bne.n	80112ce <remove_chain+0x70>
 80112ca:	2301      	movs	r3, #1
 80112cc:	e028      	b.n	8011320 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80112ce:	2200      	movs	r2, #0
 80112d0:	68b9      	ldr	r1, [r7, #8]
 80112d2:	69b8      	ldr	r0, [r7, #24]
 80112d4:	f7ff fed9 	bl	801108a <put_fat>
 80112d8:	4603      	mov	r3, r0
 80112da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80112dc:	7ffb      	ldrb	r3, [r7, #31]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d001      	beq.n	80112e6 <remove_chain+0x88>
 80112e2:	7ffb      	ldrb	r3, [r7, #31]
 80112e4:	e01c      	b.n	8011320 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80112e6:	69bb      	ldr	r3, [r7, #24]
 80112e8:	695a      	ldr	r2, [r3, #20]
 80112ea:	69bb      	ldr	r3, [r7, #24]
 80112ec:	699b      	ldr	r3, [r3, #24]
 80112ee:	3b02      	subs	r3, #2
 80112f0:	429a      	cmp	r2, r3
 80112f2:	d20b      	bcs.n	801130c <remove_chain+0xae>
			fs->free_clst++;
 80112f4:	69bb      	ldr	r3, [r7, #24]
 80112f6:	695b      	ldr	r3, [r3, #20]
 80112f8:	1c5a      	adds	r2, r3, #1
 80112fa:	69bb      	ldr	r3, [r7, #24]
 80112fc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80112fe:	69bb      	ldr	r3, [r7, #24]
 8011300:	791b      	ldrb	r3, [r3, #4]
 8011302:	f043 0301 	orr.w	r3, r3, #1
 8011306:	b2da      	uxtb	r2, r3
 8011308:	69bb      	ldr	r3, [r7, #24]
 801130a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011310:	69bb      	ldr	r3, [r7, #24]
 8011312:	699b      	ldr	r3, [r3, #24]
 8011314:	68ba      	ldr	r2, [r7, #8]
 8011316:	429a      	cmp	r2, r3
 8011318:	d3c6      	bcc.n	80112a8 <remove_chain+0x4a>
 801131a:	e000      	b.n	801131e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801131c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801131e:	2300      	movs	r3, #0
}
 8011320:	4618      	mov	r0, r3
 8011322:	3720      	adds	r7, #32
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}

08011328 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b088      	sub	sp, #32
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d10d      	bne.n	801135a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	691b      	ldr	r3, [r3, #16]
 8011342:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011344:	69bb      	ldr	r3, [r7, #24]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d004      	beq.n	8011354 <create_chain+0x2c>
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	699b      	ldr	r3, [r3, #24]
 801134e:	69ba      	ldr	r2, [r7, #24]
 8011350:	429a      	cmp	r2, r3
 8011352:	d31b      	bcc.n	801138c <create_chain+0x64>
 8011354:	2301      	movs	r3, #1
 8011356:	61bb      	str	r3, [r7, #24]
 8011358:	e018      	b.n	801138c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801135a:	6839      	ldr	r1, [r7, #0]
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f7ff fdec 	bl	8010f3a <get_fat>
 8011362:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	2b01      	cmp	r3, #1
 8011368:	d801      	bhi.n	801136e <create_chain+0x46>
 801136a:	2301      	movs	r3, #1
 801136c:	e070      	b.n	8011450 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011374:	d101      	bne.n	801137a <create_chain+0x52>
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	e06a      	b.n	8011450 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801137a:	693b      	ldr	r3, [r7, #16]
 801137c:	699b      	ldr	r3, [r3, #24]
 801137e:	68fa      	ldr	r2, [r7, #12]
 8011380:	429a      	cmp	r2, r3
 8011382:	d201      	bcs.n	8011388 <create_chain+0x60>
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	e063      	b.n	8011450 <create_chain+0x128>
		scl = clst;
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801138c:	69bb      	ldr	r3, [r7, #24]
 801138e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011390:	69fb      	ldr	r3, [r7, #28]
 8011392:	3301      	adds	r3, #1
 8011394:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	699b      	ldr	r3, [r3, #24]
 801139a:	69fa      	ldr	r2, [r7, #28]
 801139c:	429a      	cmp	r2, r3
 801139e:	d307      	bcc.n	80113b0 <create_chain+0x88>
				ncl = 2;
 80113a0:	2302      	movs	r3, #2
 80113a2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80113a4:	69fa      	ldr	r2, [r7, #28]
 80113a6:	69bb      	ldr	r3, [r7, #24]
 80113a8:	429a      	cmp	r2, r3
 80113aa:	d901      	bls.n	80113b0 <create_chain+0x88>
 80113ac:	2300      	movs	r3, #0
 80113ae:	e04f      	b.n	8011450 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80113b0:	69f9      	ldr	r1, [r7, #28]
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f7ff fdc1 	bl	8010f3a <get_fat>
 80113b8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d00e      	beq.n	80113de <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	d003      	beq.n	80113ce <create_chain+0xa6>
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113cc:	d101      	bne.n	80113d2 <create_chain+0xaa>
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	e03e      	b.n	8011450 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80113d2:	69fa      	ldr	r2, [r7, #28]
 80113d4:	69bb      	ldr	r3, [r7, #24]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d1da      	bne.n	8011390 <create_chain+0x68>
 80113da:	2300      	movs	r3, #0
 80113dc:	e038      	b.n	8011450 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80113de:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80113e0:	f04f 32ff 	mov.w	r2, #4294967295
 80113e4:	69f9      	ldr	r1, [r7, #28]
 80113e6:	6938      	ldr	r0, [r7, #16]
 80113e8:	f7ff fe4f 	bl	801108a <put_fat>
 80113ec:	4603      	mov	r3, r0
 80113ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80113f0:	7dfb      	ldrb	r3, [r7, #23]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d109      	bne.n	801140a <create_chain+0xe2>
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d006      	beq.n	801140a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80113fc:	69fa      	ldr	r2, [r7, #28]
 80113fe:	6839      	ldr	r1, [r7, #0]
 8011400:	6938      	ldr	r0, [r7, #16]
 8011402:	f7ff fe42 	bl	801108a <put_fat>
 8011406:	4603      	mov	r3, r0
 8011408:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801140a:	7dfb      	ldrb	r3, [r7, #23]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d116      	bne.n	801143e <create_chain+0x116>
		fs->last_clst = ncl;
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	69fa      	ldr	r2, [r7, #28]
 8011414:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	695a      	ldr	r2, [r3, #20]
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	699b      	ldr	r3, [r3, #24]
 801141e:	3b02      	subs	r3, #2
 8011420:	429a      	cmp	r2, r3
 8011422:	d804      	bhi.n	801142e <create_chain+0x106>
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	695b      	ldr	r3, [r3, #20]
 8011428:	1e5a      	subs	r2, r3, #1
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	791b      	ldrb	r3, [r3, #4]
 8011432:	f043 0301 	orr.w	r3, r3, #1
 8011436:	b2da      	uxtb	r2, r3
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	711a      	strb	r2, [r3, #4]
 801143c:	e007      	b.n	801144e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801143e:	7dfb      	ldrb	r3, [r7, #23]
 8011440:	2b01      	cmp	r3, #1
 8011442:	d102      	bne.n	801144a <create_chain+0x122>
 8011444:	f04f 33ff 	mov.w	r3, #4294967295
 8011448:	e000      	b.n	801144c <create_chain+0x124>
 801144a:	2301      	movs	r3, #1
 801144c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801144e:	69fb      	ldr	r3, [r7, #28]
}
 8011450:	4618      	mov	r0, r3
 8011452:	3720      	adds	r7, #32
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011458:	b480      	push	{r7}
 801145a:	b087      	sub	sp, #28
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801146c:	3304      	adds	r3, #4
 801146e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	0a5b      	lsrs	r3, r3, #9
 8011474:	68fa      	ldr	r2, [r7, #12]
 8011476:	8952      	ldrh	r2, [r2, #10]
 8011478:	fbb3 f3f2 	udiv	r3, r3, r2
 801147c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801147e:	693b      	ldr	r3, [r7, #16]
 8011480:	1d1a      	adds	r2, r3, #4
 8011482:	613a      	str	r2, [r7, #16]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d101      	bne.n	8011492 <clmt_clust+0x3a>
 801148e:	2300      	movs	r3, #0
 8011490:	e010      	b.n	80114b4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011492:	697a      	ldr	r2, [r7, #20]
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	429a      	cmp	r2, r3
 8011498:	d307      	bcc.n	80114aa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801149a:	697a      	ldr	r2, [r7, #20]
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	1ad3      	subs	r3, r2, r3
 80114a0:	617b      	str	r3, [r7, #20]
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	3304      	adds	r3, #4
 80114a6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80114a8:	e7e9      	b.n	801147e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80114aa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	681a      	ldr	r2, [r3, #0]
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	4413      	add	r3, r2
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	371c      	adds	r7, #28
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr

080114c0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b086      	sub	sp, #24
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
 80114c8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80114d6:	d204      	bcs.n	80114e2 <dir_sdi+0x22>
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	f003 031f 	and.w	r3, r3, #31
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d001      	beq.n	80114e6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80114e2:	2302      	movs	r3, #2
 80114e4:	e063      	b.n	80115ae <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	683a      	ldr	r2, [r7, #0]
 80114ea:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	689b      	ldr	r3, [r3, #8]
 80114f0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d106      	bne.n	8011506 <dir_sdi+0x46>
 80114f8:	693b      	ldr	r3, [r7, #16]
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	2b02      	cmp	r3, #2
 80114fe:	d902      	bls.n	8011506 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011504:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d10c      	bne.n	8011526 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	095b      	lsrs	r3, r3, #5
 8011510:	693a      	ldr	r2, [r7, #16]
 8011512:	8912      	ldrh	r2, [r2, #8]
 8011514:	4293      	cmp	r3, r2
 8011516:	d301      	bcc.n	801151c <dir_sdi+0x5c>
 8011518:	2302      	movs	r3, #2
 801151a:	e048      	b.n	80115ae <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	61da      	str	r2, [r3, #28]
 8011524:	e029      	b.n	801157a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	895b      	ldrh	r3, [r3, #10]
 801152a:	025b      	lsls	r3, r3, #9
 801152c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801152e:	e019      	b.n	8011564 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6979      	ldr	r1, [r7, #20]
 8011534:	4618      	mov	r0, r3
 8011536:	f7ff fd00 	bl	8010f3a <get_fat>
 801153a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011542:	d101      	bne.n	8011548 <dir_sdi+0x88>
 8011544:	2301      	movs	r3, #1
 8011546:	e032      	b.n	80115ae <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	2b01      	cmp	r3, #1
 801154c:	d904      	bls.n	8011558 <dir_sdi+0x98>
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	699b      	ldr	r3, [r3, #24]
 8011552:	697a      	ldr	r2, [r7, #20]
 8011554:	429a      	cmp	r2, r3
 8011556:	d301      	bcc.n	801155c <dir_sdi+0x9c>
 8011558:	2302      	movs	r3, #2
 801155a:	e028      	b.n	80115ae <dir_sdi+0xee>
			ofs -= csz;
 801155c:	683a      	ldr	r2, [r7, #0]
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	1ad3      	subs	r3, r2, r3
 8011562:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011564:	683a      	ldr	r2, [r7, #0]
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	429a      	cmp	r2, r3
 801156a:	d2e1      	bcs.n	8011530 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801156c:	6979      	ldr	r1, [r7, #20]
 801156e:	6938      	ldr	r0, [r7, #16]
 8011570:	f7ff fcc4 	bl	8010efc <clust2sect>
 8011574:	4602      	mov	r2, r0
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	697a      	ldr	r2, [r7, #20]
 801157e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	69db      	ldr	r3, [r3, #28]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d101      	bne.n	801158c <dir_sdi+0xcc>
 8011588:	2302      	movs	r3, #2
 801158a:	e010      	b.n	80115ae <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	69da      	ldr	r2, [r3, #28]
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	0a5b      	lsrs	r3, r3, #9
 8011594:	441a      	add	r2, r3
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115a6:	441a      	add	r2, r3
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80115ac:	2300      	movs	r3, #0
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3718      	adds	r7, #24
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}

080115b6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80115b6:	b580      	push	{r7, lr}
 80115b8:	b086      	sub	sp, #24
 80115ba:	af00      	add	r7, sp, #0
 80115bc:	6078      	str	r0, [r7, #4]
 80115be:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	695b      	ldr	r3, [r3, #20]
 80115ca:	3320      	adds	r3, #32
 80115cc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	69db      	ldr	r3, [r3, #28]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d003      	beq.n	80115de <dir_next+0x28>
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80115dc:	d301      	bcc.n	80115e2 <dir_next+0x2c>
 80115de:	2304      	movs	r3, #4
 80115e0:	e0aa      	b.n	8011738 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	f040 8098 	bne.w	801171e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	69db      	ldr	r3, [r3, #28]
 80115f2:	1c5a      	adds	r2, r3, #1
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	699b      	ldr	r3, [r3, #24]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d10b      	bne.n	8011618 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	095b      	lsrs	r3, r3, #5
 8011604:	68fa      	ldr	r2, [r7, #12]
 8011606:	8912      	ldrh	r2, [r2, #8]
 8011608:	4293      	cmp	r3, r2
 801160a:	f0c0 8088 	bcc.w	801171e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2200      	movs	r2, #0
 8011612:	61da      	str	r2, [r3, #28]
 8011614:	2304      	movs	r3, #4
 8011616:	e08f      	b.n	8011738 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	0a5b      	lsrs	r3, r3, #9
 801161c:	68fa      	ldr	r2, [r7, #12]
 801161e:	8952      	ldrh	r2, [r2, #10]
 8011620:	3a01      	subs	r2, #1
 8011622:	4013      	ands	r3, r2
 8011624:	2b00      	cmp	r3, #0
 8011626:	d17a      	bne.n	801171e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011628:	687a      	ldr	r2, [r7, #4]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	699b      	ldr	r3, [r3, #24]
 801162e:	4619      	mov	r1, r3
 8011630:	4610      	mov	r0, r2
 8011632:	f7ff fc82 	bl	8010f3a <get_fat>
 8011636:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	2b01      	cmp	r3, #1
 801163c:	d801      	bhi.n	8011642 <dir_next+0x8c>
 801163e:	2302      	movs	r3, #2
 8011640:	e07a      	b.n	8011738 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011648:	d101      	bne.n	801164e <dir_next+0x98>
 801164a:	2301      	movs	r3, #1
 801164c:	e074      	b.n	8011738 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	699b      	ldr	r3, [r3, #24]
 8011652:	697a      	ldr	r2, [r7, #20]
 8011654:	429a      	cmp	r2, r3
 8011656:	d358      	bcc.n	801170a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d104      	bne.n	8011668 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2200      	movs	r2, #0
 8011662:	61da      	str	r2, [r3, #28]
 8011664:	2304      	movs	r3, #4
 8011666:	e067      	b.n	8011738 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011668:	687a      	ldr	r2, [r7, #4]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	699b      	ldr	r3, [r3, #24]
 801166e:	4619      	mov	r1, r3
 8011670:	4610      	mov	r0, r2
 8011672:	f7ff fe59 	bl	8011328 <create_chain>
 8011676:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d101      	bne.n	8011682 <dir_next+0xcc>
 801167e:	2307      	movs	r3, #7
 8011680:	e05a      	b.n	8011738 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	2b01      	cmp	r3, #1
 8011686:	d101      	bne.n	801168c <dir_next+0xd6>
 8011688:	2302      	movs	r3, #2
 801168a:	e055      	b.n	8011738 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011692:	d101      	bne.n	8011698 <dir_next+0xe2>
 8011694:	2301      	movs	r3, #1
 8011696:	e04f      	b.n	8011738 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011698:	68f8      	ldr	r0, [r7, #12]
 801169a:	f7ff fb4f 	bl	8010d3c <sync_window>
 801169e:	4603      	mov	r3, r0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d001      	beq.n	80116a8 <dir_next+0xf2>
 80116a4:	2301      	movs	r3, #1
 80116a6:	e047      	b.n	8011738 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	3334      	adds	r3, #52	; 0x34
 80116ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80116b0:	2100      	movs	r1, #0
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7ff f979 	bl	80109aa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80116b8:	2300      	movs	r3, #0
 80116ba:	613b      	str	r3, [r7, #16]
 80116bc:	6979      	ldr	r1, [r7, #20]
 80116be:	68f8      	ldr	r0, [r7, #12]
 80116c0:	f7ff fc1c 	bl	8010efc <clust2sect>
 80116c4:	4602      	mov	r2, r0
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	631a      	str	r2, [r3, #48]	; 0x30
 80116ca:	e012      	b.n	80116f2 <dir_next+0x13c>
						fs->wflag = 1;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	2201      	movs	r2, #1
 80116d0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80116d2:	68f8      	ldr	r0, [r7, #12]
 80116d4:	f7ff fb32 	bl	8010d3c <sync_window>
 80116d8:	4603      	mov	r3, r0
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d001      	beq.n	80116e2 <dir_next+0x12c>
 80116de:	2301      	movs	r3, #1
 80116e0:	e02a      	b.n	8011738 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80116e2:	693b      	ldr	r3, [r7, #16]
 80116e4:	3301      	adds	r3, #1
 80116e6:	613b      	str	r3, [r7, #16]
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ec:	1c5a      	adds	r2, r3, #1
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	631a      	str	r2, [r3, #48]	; 0x30
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	895b      	ldrh	r3, [r3, #10]
 80116f6:	461a      	mov	r2, r3
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	4293      	cmp	r3, r2
 80116fc:	d3e6      	bcc.n	80116cc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011702:	693b      	ldr	r3, [r7, #16]
 8011704:	1ad2      	subs	r2, r2, r3
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	697a      	ldr	r2, [r7, #20]
 801170e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011710:	6979      	ldr	r1, [r7, #20]
 8011712:	68f8      	ldr	r0, [r7, #12]
 8011714:	f7ff fbf2 	bl	8010efc <clust2sect>
 8011718:	4602      	mov	r2, r0
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	68ba      	ldr	r2, [r7, #8]
 8011722:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011730:	441a      	add	r2, r3
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011736:	2300      	movs	r3, #0
}
 8011738:	4618      	mov	r0, r3
 801173a:	3718      	adds	r7, #24
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}

08011740 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b086      	sub	sp, #24
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011750:	2100      	movs	r1, #0
 8011752:	6878      	ldr	r0, [r7, #4]
 8011754:	f7ff feb4 	bl	80114c0 <dir_sdi>
 8011758:	4603      	mov	r3, r0
 801175a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801175c:	7dfb      	ldrb	r3, [r7, #23]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d12b      	bne.n	80117ba <dir_alloc+0x7a>
		n = 0;
 8011762:	2300      	movs	r3, #0
 8011764:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	69db      	ldr	r3, [r3, #28]
 801176a:	4619      	mov	r1, r3
 801176c:	68f8      	ldr	r0, [r7, #12]
 801176e:	f7ff fb29 	bl	8010dc4 <move_window>
 8011772:	4603      	mov	r3, r0
 8011774:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011776:	7dfb      	ldrb	r3, [r7, #23]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d11d      	bne.n	80117b8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	6a1b      	ldr	r3, [r3, #32]
 8011780:	781b      	ldrb	r3, [r3, #0]
 8011782:	2be5      	cmp	r3, #229	; 0xe5
 8011784:	d004      	beq.n	8011790 <dir_alloc+0x50>
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6a1b      	ldr	r3, [r3, #32]
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d107      	bne.n	80117a0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	3301      	adds	r3, #1
 8011794:	613b      	str	r3, [r7, #16]
 8011796:	693a      	ldr	r2, [r7, #16]
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	429a      	cmp	r2, r3
 801179c:	d102      	bne.n	80117a4 <dir_alloc+0x64>
 801179e:	e00c      	b.n	80117ba <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80117a0:	2300      	movs	r3, #0
 80117a2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80117a4:	2101      	movs	r1, #1
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	f7ff ff05 	bl	80115b6 <dir_next>
 80117ac:	4603      	mov	r3, r0
 80117ae:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80117b0:	7dfb      	ldrb	r3, [r7, #23]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d0d7      	beq.n	8011766 <dir_alloc+0x26>
 80117b6:	e000      	b.n	80117ba <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80117b8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80117ba:	7dfb      	ldrb	r3, [r7, #23]
 80117bc:	2b04      	cmp	r3, #4
 80117be:	d101      	bne.n	80117c4 <dir_alloc+0x84>
 80117c0:	2307      	movs	r3, #7
 80117c2:	75fb      	strb	r3, [r7, #23]
	return res;
 80117c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80117c6:	4618      	mov	r0, r3
 80117c8:	3718      	adds	r7, #24
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}

080117ce <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80117ce:	b580      	push	{r7, lr}
 80117d0:	b084      	sub	sp, #16
 80117d2:	af00      	add	r7, sp, #0
 80117d4:	6078      	str	r0, [r7, #4]
 80117d6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	331a      	adds	r3, #26
 80117dc:	4618      	mov	r0, r3
 80117de:	f7ff f841 	bl	8010864 <ld_word>
 80117e2:	4603      	mov	r3, r0
 80117e4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	2b03      	cmp	r3, #3
 80117ec:	d109      	bne.n	8011802 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	3314      	adds	r3, #20
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7ff f836 	bl	8010864 <ld_word>
 80117f8:	4603      	mov	r3, r0
 80117fa:	041b      	lsls	r3, r3, #16
 80117fc:	68fa      	ldr	r2, [r7, #12]
 80117fe:	4313      	orrs	r3, r2
 8011800:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011802:	68fb      	ldr	r3, [r7, #12]
}
 8011804:	4618      	mov	r0, r3
 8011806:	3710      	adds	r7, #16
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}

0801180c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b084      	sub	sp, #16
 8011810:	af00      	add	r7, sp, #0
 8011812:	60f8      	str	r0, [r7, #12]
 8011814:	60b9      	str	r1, [r7, #8]
 8011816:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	331a      	adds	r3, #26
 801181c:	687a      	ldr	r2, [r7, #4]
 801181e:	b292      	uxth	r2, r2
 8011820:	4611      	mov	r1, r2
 8011822:	4618      	mov	r0, r3
 8011824:	f7ff f859 	bl	80108da <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	2b03      	cmp	r3, #3
 801182e:	d109      	bne.n	8011844 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011830:	68bb      	ldr	r3, [r7, #8]
 8011832:	f103 0214 	add.w	r2, r3, #20
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	0c1b      	lsrs	r3, r3, #16
 801183a:	b29b      	uxth	r3, r3
 801183c:	4619      	mov	r1, r3
 801183e:	4610      	mov	r0, r2
 8011840:	f7ff f84b 	bl	80108da <st_word>
	}
}
 8011844:	bf00      	nop
 8011846:	3710      	adds	r7, #16
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}

0801184c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801184c:	b590      	push	{r4, r7, lr}
 801184e:	b087      	sub	sp, #28
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	331a      	adds	r3, #26
 801185a:	4618      	mov	r0, r3
 801185c:	f7ff f802 	bl	8010864 <ld_word>
 8011860:	4603      	mov	r3, r0
 8011862:	2b00      	cmp	r3, #0
 8011864:	d001      	beq.n	801186a <cmp_lfn+0x1e>
 8011866:	2300      	movs	r3, #0
 8011868:	e059      	b.n	801191e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011872:	1e5a      	subs	r2, r3, #1
 8011874:	4613      	mov	r3, r2
 8011876:	005b      	lsls	r3, r3, #1
 8011878:	4413      	add	r3, r2
 801187a:	009b      	lsls	r3, r3, #2
 801187c:	4413      	add	r3, r2
 801187e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011880:	2301      	movs	r3, #1
 8011882:	81fb      	strh	r3, [r7, #14]
 8011884:	2300      	movs	r3, #0
 8011886:	613b      	str	r3, [r7, #16]
 8011888:	e033      	b.n	80118f2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801188a:	4a27      	ldr	r2, [pc, #156]	; (8011928 <cmp_lfn+0xdc>)
 801188c:	693b      	ldr	r3, [r7, #16]
 801188e:	4413      	add	r3, r2
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	461a      	mov	r2, r3
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	4413      	add	r3, r2
 8011898:	4618      	mov	r0, r3
 801189a:	f7fe ffe3 	bl	8010864 <ld_word>
 801189e:	4603      	mov	r3, r0
 80118a0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80118a2:	89fb      	ldrh	r3, [r7, #14]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d01a      	beq.n	80118de <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	2bfe      	cmp	r3, #254	; 0xfe
 80118ac:	d812      	bhi.n	80118d4 <cmp_lfn+0x88>
 80118ae:	89bb      	ldrh	r3, [r7, #12]
 80118b0:	4618      	mov	r0, r3
 80118b2:	f002 fea1 	bl	80145f8 <ff_wtoupper>
 80118b6:	4603      	mov	r3, r0
 80118b8:	461c      	mov	r4, r3
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	1c5a      	adds	r2, r3, #1
 80118be:	617a      	str	r2, [r7, #20]
 80118c0:	005b      	lsls	r3, r3, #1
 80118c2:	687a      	ldr	r2, [r7, #4]
 80118c4:	4413      	add	r3, r2
 80118c6:	881b      	ldrh	r3, [r3, #0]
 80118c8:	4618      	mov	r0, r3
 80118ca:	f002 fe95 	bl	80145f8 <ff_wtoupper>
 80118ce:	4603      	mov	r3, r0
 80118d0:	429c      	cmp	r4, r3
 80118d2:	d001      	beq.n	80118d8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80118d4:	2300      	movs	r3, #0
 80118d6:	e022      	b.n	801191e <cmp_lfn+0xd2>
			}
			wc = uc;
 80118d8:	89bb      	ldrh	r3, [r7, #12]
 80118da:	81fb      	strh	r3, [r7, #14]
 80118dc:	e006      	b.n	80118ec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80118de:	89bb      	ldrh	r3, [r7, #12]
 80118e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118e4:	4293      	cmp	r3, r2
 80118e6:	d001      	beq.n	80118ec <cmp_lfn+0xa0>
 80118e8:	2300      	movs	r3, #0
 80118ea:	e018      	b.n	801191e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80118ec:	693b      	ldr	r3, [r7, #16]
 80118ee:	3301      	adds	r3, #1
 80118f0:	613b      	str	r3, [r7, #16]
 80118f2:	693b      	ldr	r3, [r7, #16]
 80118f4:	2b0c      	cmp	r3, #12
 80118f6:	d9c8      	bls.n	801188a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	781b      	ldrb	r3, [r3, #0]
 80118fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011900:	2b00      	cmp	r3, #0
 8011902:	d00b      	beq.n	801191c <cmp_lfn+0xd0>
 8011904:	89fb      	ldrh	r3, [r7, #14]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d008      	beq.n	801191c <cmp_lfn+0xd0>
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	005b      	lsls	r3, r3, #1
 801190e:	687a      	ldr	r2, [r7, #4]
 8011910:	4413      	add	r3, r2
 8011912:	881b      	ldrh	r3, [r3, #0]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d001      	beq.n	801191c <cmp_lfn+0xd0>
 8011918:	2300      	movs	r3, #0
 801191a:	e000      	b.n	801191e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801191c:	2301      	movs	r3, #1
}
 801191e:	4618      	mov	r0, r3
 8011920:	371c      	adds	r7, #28
 8011922:	46bd      	mov	sp, r7
 8011924:	bd90      	pop	{r4, r7, pc}
 8011926:	bf00      	nop
 8011928:	08026ca8 	.word	0x08026ca8

0801192c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b086      	sub	sp, #24
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	331a      	adds	r3, #26
 801193a:	4618      	mov	r0, r3
 801193c:	f7fe ff92 	bl	8010864 <ld_word>
 8011940:	4603      	mov	r3, r0
 8011942:	2b00      	cmp	r3, #0
 8011944:	d001      	beq.n	801194a <pick_lfn+0x1e>
 8011946:	2300      	movs	r3, #0
 8011948:	e04d      	b.n	80119e6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011952:	1e5a      	subs	r2, r3, #1
 8011954:	4613      	mov	r3, r2
 8011956:	005b      	lsls	r3, r3, #1
 8011958:	4413      	add	r3, r2
 801195a:	009b      	lsls	r3, r3, #2
 801195c:	4413      	add	r3, r2
 801195e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011960:	2301      	movs	r3, #1
 8011962:	81fb      	strh	r3, [r7, #14]
 8011964:	2300      	movs	r3, #0
 8011966:	613b      	str	r3, [r7, #16]
 8011968:	e028      	b.n	80119bc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801196a:	4a21      	ldr	r2, [pc, #132]	; (80119f0 <pick_lfn+0xc4>)
 801196c:	693b      	ldr	r3, [r7, #16]
 801196e:	4413      	add	r3, r2
 8011970:	781b      	ldrb	r3, [r3, #0]
 8011972:	461a      	mov	r2, r3
 8011974:	683b      	ldr	r3, [r7, #0]
 8011976:	4413      	add	r3, r2
 8011978:	4618      	mov	r0, r3
 801197a:	f7fe ff73 	bl	8010864 <ld_word>
 801197e:	4603      	mov	r3, r0
 8011980:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011982:	89fb      	ldrh	r3, [r7, #14]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d00f      	beq.n	80119a8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	2bfe      	cmp	r3, #254	; 0xfe
 801198c:	d901      	bls.n	8011992 <pick_lfn+0x66>
 801198e:	2300      	movs	r3, #0
 8011990:	e029      	b.n	80119e6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011992:	89bb      	ldrh	r3, [r7, #12]
 8011994:	81fb      	strh	r3, [r7, #14]
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	1c5a      	adds	r2, r3, #1
 801199a:	617a      	str	r2, [r7, #20]
 801199c:	005b      	lsls	r3, r3, #1
 801199e:	687a      	ldr	r2, [r7, #4]
 80119a0:	4413      	add	r3, r2
 80119a2:	89fa      	ldrh	r2, [r7, #14]
 80119a4:	801a      	strh	r2, [r3, #0]
 80119a6:	e006      	b.n	80119b6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80119a8:	89bb      	ldrh	r3, [r7, #12]
 80119aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119ae:	4293      	cmp	r3, r2
 80119b0:	d001      	beq.n	80119b6 <pick_lfn+0x8a>
 80119b2:	2300      	movs	r3, #0
 80119b4:	e017      	b.n	80119e6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80119b6:	693b      	ldr	r3, [r7, #16]
 80119b8:	3301      	adds	r3, #1
 80119ba:	613b      	str	r3, [r7, #16]
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	2b0c      	cmp	r3, #12
 80119c0:	d9d3      	bls.n	801196a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	781b      	ldrb	r3, [r3, #0]
 80119c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d00a      	beq.n	80119e4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	2bfe      	cmp	r3, #254	; 0xfe
 80119d2:	d901      	bls.n	80119d8 <pick_lfn+0xac>
 80119d4:	2300      	movs	r3, #0
 80119d6:	e006      	b.n	80119e6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	005b      	lsls	r3, r3, #1
 80119dc:	687a      	ldr	r2, [r7, #4]
 80119de:	4413      	add	r3, r2
 80119e0:	2200      	movs	r2, #0
 80119e2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80119e4:	2301      	movs	r3, #1
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	3718      	adds	r7, #24
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}
 80119ee:	bf00      	nop
 80119f0:	08026ca8 	.word	0x08026ca8

080119f4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b088      	sub	sp, #32
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	60f8      	str	r0, [r7, #12]
 80119fc:	60b9      	str	r1, [r7, #8]
 80119fe:	4611      	mov	r1, r2
 8011a00:	461a      	mov	r2, r3
 8011a02:	460b      	mov	r3, r1
 8011a04:	71fb      	strb	r3, [r7, #7]
 8011a06:	4613      	mov	r3, r2
 8011a08:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011a0a:	68bb      	ldr	r3, [r7, #8]
 8011a0c:	330d      	adds	r3, #13
 8011a0e:	79ba      	ldrb	r2, [r7, #6]
 8011a10:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	330b      	adds	r3, #11
 8011a16:	220f      	movs	r2, #15
 8011a18:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	330c      	adds	r3, #12
 8011a1e:	2200      	movs	r2, #0
 8011a20:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	331a      	adds	r3, #26
 8011a26:	2100      	movs	r1, #0
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7fe ff56 	bl	80108da <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011a2e:	79fb      	ldrb	r3, [r7, #7]
 8011a30:	1e5a      	subs	r2, r3, #1
 8011a32:	4613      	mov	r3, r2
 8011a34:	005b      	lsls	r3, r3, #1
 8011a36:	4413      	add	r3, r2
 8011a38:	009b      	lsls	r3, r3, #2
 8011a3a:	4413      	add	r3, r2
 8011a3c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	82fb      	strh	r3, [r7, #22]
 8011a42:	2300      	movs	r3, #0
 8011a44:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011a46:	8afb      	ldrh	r3, [r7, #22]
 8011a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a4c:	4293      	cmp	r3, r2
 8011a4e:	d007      	beq.n	8011a60 <put_lfn+0x6c>
 8011a50:	69fb      	ldr	r3, [r7, #28]
 8011a52:	1c5a      	adds	r2, r3, #1
 8011a54:	61fa      	str	r2, [r7, #28]
 8011a56:	005b      	lsls	r3, r3, #1
 8011a58:	68fa      	ldr	r2, [r7, #12]
 8011a5a:	4413      	add	r3, r2
 8011a5c:	881b      	ldrh	r3, [r3, #0]
 8011a5e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011a60:	4a17      	ldr	r2, [pc, #92]	; (8011ac0 <put_lfn+0xcc>)
 8011a62:	69bb      	ldr	r3, [r7, #24]
 8011a64:	4413      	add	r3, r2
 8011a66:	781b      	ldrb	r3, [r3, #0]
 8011a68:	461a      	mov	r2, r3
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	8afa      	ldrh	r2, [r7, #22]
 8011a70:	4611      	mov	r1, r2
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7fe ff31 	bl	80108da <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011a78:	8afb      	ldrh	r3, [r7, #22]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d102      	bne.n	8011a84 <put_lfn+0x90>
 8011a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a82:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8011a84:	69bb      	ldr	r3, [r7, #24]
 8011a86:	3301      	adds	r3, #1
 8011a88:	61bb      	str	r3, [r7, #24]
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	2b0c      	cmp	r3, #12
 8011a8e:	d9da      	bls.n	8011a46 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011a90:	8afb      	ldrh	r3, [r7, #22]
 8011a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a96:	4293      	cmp	r3, r2
 8011a98:	d006      	beq.n	8011aa8 <put_lfn+0xb4>
 8011a9a:	69fb      	ldr	r3, [r7, #28]
 8011a9c:	005b      	lsls	r3, r3, #1
 8011a9e:	68fa      	ldr	r2, [r7, #12]
 8011aa0:	4413      	add	r3, r2
 8011aa2:	881b      	ldrh	r3, [r3, #0]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d103      	bne.n	8011ab0 <put_lfn+0xbc>
 8011aa8:	79fb      	ldrb	r3, [r7, #7]
 8011aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aae:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	79fa      	ldrb	r2, [r7, #7]
 8011ab4:	701a      	strb	r2, [r3, #0]
}
 8011ab6:	bf00      	nop
 8011ab8:	3720      	adds	r7, #32
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
 8011abe:	bf00      	nop
 8011ac0:	08026ca8 	.word	0x08026ca8

08011ac4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b08c      	sub	sp, #48	; 0x30
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	60f8      	str	r0, [r7, #12]
 8011acc:	60b9      	str	r1, [r7, #8]
 8011ace:	607a      	str	r2, [r7, #4]
 8011ad0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8011ad2:	220b      	movs	r2, #11
 8011ad4:	68b9      	ldr	r1, [r7, #8]
 8011ad6:	68f8      	ldr	r0, [r7, #12]
 8011ad8:	f7fe ff46 	bl	8010968 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	2b05      	cmp	r3, #5
 8011ae0:	d92b      	bls.n	8011b3a <gen_numname+0x76>
		sr = seq;
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8011ae6:	e022      	b.n	8011b2e <gen_numname+0x6a>
			wc = *lfn++;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	1c9a      	adds	r2, r3, #2
 8011aec:	607a      	str	r2, [r7, #4]
 8011aee:	881b      	ldrh	r3, [r3, #0]
 8011af0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8011af2:	2300      	movs	r3, #0
 8011af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8011af6:	e017      	b.n	8011b28 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8011af8:	69fb      	ldr	r3, [r7, #28]
 8011afa:	005a      	lsls	r2, r3, #1
 8011afc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011afe:	f003 0301 	and.w	r3, r3, #1
 8011b02:	4413      	add	r3, r2
 8011b04:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011b06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b08:	085b      	lsrs	r3, r3, #1
 8011b0a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011b0c:	69fb      	ldr	r3, [r7, #28]
 8011b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d005      	beq.n	8011b22 <gen_numname+0x5e>
 8011b16:	69fb      	ldr	r3, [r7, #28]
 8011b18:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8011b1c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8011b20:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8011b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b24:	3301      	adds	r3, #1
 8011b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8011b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b2a:	2b0f      	cmp	r3, #15
 8011b2c:	d9e4      	bls.n	8011af8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	881b      	ldrh	r3, [r3, #0]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d1d8      	bne.n	8011ae8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8011b36:	69fb      	ldr	r3, [r7, #28]
 8011b38:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8011b3a:	2307      	movs	r3, #7
 8011b3c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	b2db      	uxtb	r3, r3
 8011b42:	f003 030f 	and.w	r3, r3, #15
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	3330      	adds	r3, #48	; 0x30
 8011b4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8011b4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b52:	2b39      	cmp	r3, #57	; 0x39
 8011b54:	d904      	bls.n	8011b60 <gen_numname+0x9c>
 8011b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b5a:	3307      	adds	r3, #7
 8011b5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8011b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b62:	1e5a      	subs	r2, r3, #1
 8011b64:	62ba      	str	r2, [r7, #40]	; 0x28
 8011b66:	3330      	adds	r3, #48	; 0x30
 8011b68:	443b      	add	r3, r7
 8011b6a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011b6e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	091b      	lsrs	r3, r3, #4
 8011b76:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d1df      	bne.n	8011b3e <gen_numname+0x7a>
	ns[i] = '~';
 8011b7e:	f107 0214 	add.w	r2, r7, #20
 8011b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b84:	4413      	add	r3, r2
 8011b86:	227e      	movs	r2, #126	; 0x7e
 8011b88:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8011b8e:	e002      	b.n	8011b96 <gen_numname+0xd2>
 8011b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b92:	3301      	adds	r3, #1
 8011b94:	627b      	str	r3, [r7, #36]	; 0x24
 8011b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d205      	bcs.n	8011baa <gen_numname+0xe6>
 8011b9e:	68fa      	ldr	r2, [r7, #12]
 8011ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba2:	4413      	add	r3, r2
 8011ba4:	781b      	ldrb	r3, [r3, #0]
 8011ba6:	2b20      	cmp	r3, #32
 8011ba8:	d1f2      	bne.n	8011b90 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bac:	2b07      	cmp	r3, #7
 8011bae:	d807      	bhi.n	8011bc0 <gen_numname+0xfc>
 8011bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb2:	1c5a      	adds	r2, r3, #1
 8011bb4:	62ba      	str	r2, [r7, #40]	; 0x28
 8011bb6:	3330      	adds	r3, #48	; 0x30
 8011bb8:	443b      	add	r3, r7
 8011bba:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011bbe:	e000      	b.n	8011bc2 <gen_numname+0xfe>
 8011bc0:	2120      	movs	r1, #32
 8011bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc4:	1c5a      	adds	r2, r3, #1
 8011bc6:	627a      	str	r2, [r7, #36]	; 0x24
 8011bc8:	68fa      	ldr	r2, [r7, #12]
 8011bca:	4413      	add	r3, r2
 8011bcc:	460a      	mov	r2, r1
 8011bce:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd2:	2b07      	cmp	r3, #7
 8011bd4:	d9e9      	bls.n	8011baa <gen_numname+0xe6>
}
 8011bd6:	bf00      	nop
 8011bd8:	bf00      	nop
 8011bda:	3730      	adds	r7, #48	; 0x30
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}

08011be0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011be0:	b480      	push	{r7}
 8011be2:	b085      	sub	sp, #20
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011be8:	2300      	movs	r3, #0
 8011bea:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011bec:	230b      	movs	r3, #11
 8011bee:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011bf0:	7bfb      	ldrb	r3, [r7, #15]
 8011bf2:	b2da      	uxtb	r2, r3
 8011bf4:	0852      	lsrs	r2, r2, #1
 8011bf6:	01db      	lsls	r3, r3, #7
 8011bf8:	4313      	orrs	r3, r2
 8011bfa:	b2da      	uxtb	r2, r3
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	1c59      	adds	r1, r3, #1
 8011c00:	6079      	str	r1, [r7, #4]
 8011c02:	781b      	ldrb	r3, [r3, #0]
 8011c04:	4413      	add	r3, r2
 8011c06:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	3b01      	subs	r3, #1
 8011c0c:	60bb      	str	r3, [r7, #8]
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d1ed      	bne.n	8011bf0 <sum_sfn+0x10>
	return sum;
 8011c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3714      	adds	r7, #20
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c20:	4770      	bx	lr

08011c22 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011c22:	b580      	push	{r7, lr}
 8011c24:	b086      	sub	sp, #24
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
 8011c2a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011c2c:	2304      	movs	r3, #4
 8011c2e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8011c36:	23ff      	movs	r3, #255	; 0xff
 8011c38:	757b      	strb	r3, [r7, #21]
 8011c3a:	23ff      	movs	r3, #255	; 0xff
 8011c3c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8011c3e:	e081      	b.n	8011d44 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	69db      	ldr	r3, [r3, #28]
 8011c44:	4619      	mov	r1, r3
 8011c46:	6938      	ldr	r0, [r7, #16]
 8011c48:	f7ff f8bc 	bl	8010dc4 <move_window>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011c50:	7dfb      	ldrb	r3, [r7, #23]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d17c      	bne.n	8011d50 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6a1b      	ldr	r3, [r3, #32]
 8011c5a:	781b      	ldrb	r3, [r3, #0]
 8011c5c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8011c5e:	7dbb      	ldrb	r3, [r7, #22]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d102      	bne.n	8011c6a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011c64:	2304      	movs	r3, #4
 8011c66:	75fb      	strb	r3, [r7, #23]
 8011c68:	e077      	b.n	8011d5a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6a1b      	ldr	r3, [r3, #32]
 8011c6e:	330b      	adds	r3, #11
 8011c70:	781b      	ldrb	r3, [r3, #0]
 8011c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011c76:	73fb      	strb	r3, [r7, #15]
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	7bfa      	ldrb	r2, [r7, #15]
 8011c7c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8011c7e:	7dbb      	ldrb	r3, [r7, #22]
 8011c80:	2be5      	cmp	r3, #229	; 0xe5
 8011c82:	d00e      	beq.n	8011ca2 <dir_read+0x80>
 8011c84:	7dbb      	ldrb	r3, [r7, #22]
 8011c86:	2b2e      	cmp	r3, #46	; 0x2e
 8011c88:	d00b      	beq.n	8011ca2 <dir_read+0x80>
 8011c8a:	7bfb      	ldrb	r3, [r7, #15]
 8011c8c:	f023 0320 	bic.w	r3, r3, #32
 8011c90:	2b08      	cmp	r3, #8
 8011c92:	bf0c      	ite	eq
 8011c94:	2301      	moveq	r3, #1
 8011c96:	2300      	movne	r3, #0
 8011c98:	b2db      	uxtb	r3, r3
 8011c9a:	461a      	mov	r2, r3
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	4293      	cmp	r3, r2
 8011ca0:	d002      	beq.n	8011ca8 <dir_read+0x86>
				ord = 0xFF;
 8011ca2:	23ff      	movs	r3, #255	; 0xff
 8011ca4:	757b      	strb	r3, [r7, #21]
 8011ca6:	e044      	b.n	8011d32 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8011ca8:	7bfb      	ldrb	r3, [r7, #15]
 8011caa:	2b0f      	cmp	r3, #15
 8011cac:	d12f      	bne.n	8011d0e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8011cae:	7dbb      	ldrb	r3, [r7, #22]
 8011cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d00d      	beq.n	8011cd4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6a1b      	ldr	r3, [r3, #32]
 8011cbc:	7b5b      	ldrb	r3, [r3, #13]
 8011cbe:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8011cc0:	7dbb      	ldrb	r3, [r7, #22]
 8011cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011cc6:	75bb      	strb	r3, [r7, #22]
 8011cc8:	7dbb      	ldrb	r3, [r7, #22]
 8011cca:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	695a      	ldr	r2, [r3, #20]
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011cd4:	7dba      	ldrb	r2, [r7, #22]
 8011cd6:	7d7b      	ldrb	r3, [r7, #21]
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d115      	bne.n	8011d08 <dir_read+0xe6>
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6a1b      	ldr	r3, [r3, #32]
 8011ce0:	330d      	adds	r3, #13
 8011ce2:	781b      	ldrb	r3, [r3, #0]
 8011ce4:	7d3a      	ldrb	r2, [r7, #20]
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d10e      	bne.n	8011d08 <dir_read+0xe6>
 8011cea:	693b      	ldr	r3, [r7, #16]
 8011cec:	68da      	ldr	r2, [r3, #12]
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6a1b      	ldr	r3, [r3, #32]
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	4610      	mov	r0, r2
 8011cf6:	f7ff fe19 	bl	801192c <pick_lfn>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d003      	beq.n	8011d08 <dir_read+0xe6>
 8011d00:	7d7b      	ldrb	r3, [r7, #21]
 8011d02:	3b01      	subs	r3, #1
 8011d04:	b2db      	uxtb	r3, r3
 8011d06:	e000      	b.n	8011d0a <dir_read+0xe8>
 8011d08:	23ff      	movs	r3, #255	; 0xff
 8011d0a:	757b      	strb	r3, [r7, #21]
 8011d0c:	e011      	b.n	8011d32 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8011d0e:	7d7b      	ldrb	r3, [r7, #21]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d109      	bne.n	8011d28 <dir_read+0x106>
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6a1b      	ldr	r3, [r3, #32]
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f7ff ff61 	bl	8011be0 <sum_sfn>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	461a      	mov	r2, r3
 8011d22:	7d3b      	ldrb	r3, [r7, #20]
 8011d24:	4293      	cmp	r3, r2
 8011d26:	d015      	beq.n	8011d54 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8011d2e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8011d30:	e010      	b.n	8011d54 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011d32:	2100      	movs	r1, #0
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f7ff fc3e 	bl	80115b6 <dir_next>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011d3e:	7dfb      	ldrb	r3, [r7, #23]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d109      	bne.n	8011d58 <dir_read+0x136>
	while (dp->sect) {
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	69db      	ldr	r3, [r3, #28]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	f47f af79 	bne.w	8011c40 <dir_read+0x1e>
 8011d4e:	e004      	b.n	8011d5a <dir_read+0x138>
		if (res != FR_OK) break;
 8011d50:	bf00      	nop
 8011d52:	e002      	b.n	8011d5a <dir_read+0x138>
					break;
 8011d54:	bf00      	nop
 8011d56:	e000      	b.n	8011d5a <dir_read+0x138>
		if (res != FR_OK) break;
 8011d58:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011d5a:	7dfb      	ldrb	r3, [r7, #23]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d002      	beq.n	8011d66 <dir_read+0x144>
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	2200      	movs	r2, #0
 8011d64:	61da      	str	r2, [r3, #28]
	return res;
 8011d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3718      	adds	r7, #24
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b086      	sub	sp, #24
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011d7e:	2100      	movs	r1, #0
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f7ff fb9d 	bl	80114c0 <dir_sdi>
 8011d86:	4603      	mov	r3, r0
 8011d88:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011d8a:	7dfb      	ldrb	r3, [r7, #23]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d001      	beq.n	8011d94 <dir_find+0x24>
 8011d90:	7dfb      	ldrb	r3, [r7, #23]
 8011d92:	e0a9      	b.n	8011ee8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011d94:	23ff      	movs	r3, #255	; 0xff
 8011d96:	753b      	strb	r3, [r7, #20]
 8011d98:	7d3b      	ldrb	r3, [r7, #20]
 8011d9a:	757b      	strb	r3, [r7, #21]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8011da2:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	69db      	ldr	r3, [r3, #28]
 8011da8:	4619      	mov	r1, r3
 8011daa:	6938      	ldr	r0, [r7, #16]
 8011dac:	f7ff f80a 	bl	8010dc4 <move_window>
 8011db0:	4603      	mov	r3, r0
 8011db2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011db4:	7dfb      	ldrb	r3, [r7, #23]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	f040 8090 	bne.w	8011edc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6a1b      	ldr	r3, [r3, #32]
 8011dc0:	781b      	ldrb	r3, [r3, #0]
 8011dc2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011dc4:	7dbb      	ldrb	r3, [r7, #22]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d102      	bne.n	8011dd0 <dir_find+0x60>
 8011dca:	2304      	movs	r3, #4
 8011dcc:	75fb      	strb	r3, [r7, #23]
 8011dce:	e08a      	b.n	8011ee6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6a1b      	ldr	r3, [r3, #32]
 8011dd4:	330b      	adds	r3, #11
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011ddc:	73fb      	strb	r3, [r7, #15]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	7bfa      	ldrb	r2, [r7, #15]
 8011de2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8011de4:	7dbb      	ldrb	r3, [r7, #22]
 8011de6:	2be5      	cmp	r3, #229	; 0xe5
 8011de8:	d007      	beq.n	8011dfa <dir_find+0x8a>
 8011dea:	7bfb      	ldrb	r3, [r7, #15]
 8011dec:	f003 0308 	and.w	r3, r3, #8
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d009      	beq.n	8011e08 <dir_find+0x98>
 8011df4:	7bfb      	ldrb	r3, [r7, #15]
 8011df6:	2b0f      	cmp	r3, #15
 8011df8:	d006      	beq.n	8011e08 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011dfa:	23ff      	movs	r3, #255	; 0xff
 8011dfc:	757b      	strb	r3, [r7, #21]
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f04f 32ff 	mov.w	r2, #4294967295
 8011e04:	631a      	str	r2, [r3, #48]	; 0x30
 8011e06:	e05e      	b.n	8011ec6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8011e08:	7bfb      	ldrb	r3, [r7, #15]
 8011e0a:	2b0f      	cmp	r3, #15
 8011e0c:	d136      	bne.n	8011e7c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d154      	bne.n	8011ec6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8011e1c:	7dbb      	ldrb	r3, [r7, #22]
 8011e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d00d      	beq.n	8011e42 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6a1b      	ldr	r3, [r3, #32]
 8011e2a:	7b5b      	ldrb	r3, [r3, #13]
 8011e2c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8011e2e:	7dbb      	ldrb	r3, [r7, #22]
 8011e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011e34:	75bb      	strb	r3, [r7, #22]
 8011e36:	7dbb      	ldrb	r3, [r7, #22]
 8011e38:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	695a      	ldr	r2, [r3, #20]
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011e42:	7dba      	ldrb	r2, [r7, #22]
 8011e44:	7d7b      	ldrb	r3, [r7, #21]
 8011e46:	429a      	cmp	r2, r3
 8011e48:	d115      	bne.n	8011e76 <dir_find+0x106>
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	6a1b      	ldr	r3, [r3, #32]
 8011e4e:	330d      	adds	r3, #13
 8011e50:	781b      	ldrb	r3, [r3, #0]
 8011e52:	7d3a      	ldrb	r2, [r7, #20]
 8011e54:	429a      	cmp	r2, r3
 8011e56:	d10e      	bne.n	8011e76 <dir_find+0x106>
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	68da      	ldr	r2, [r3, #12]
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6a1b      	ldr	r3, [r3, #32]
 8011e60:	4619      	mov	r1, r3
 8011e62:	4610      	mov	r0, r2
 8011e64:	f7ff fcf2 	bl	801184c <cmp_lfn>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d003      	beq.n	8011e76 <dir_find+0x106>
 8011e6e:	7d7b      	ldrb	r3, [r7, #21]
 8011e70:	3b01      	subs	r3, #1
 8011e72:	b2db      	uxtb	r3, r3
 8011e74:	e000      	b.n	8011e78 <dir_find+0x108>
 8011e76:	23ff      	movs	r3, #255	; 0xff
 8011e78:	757b      	strb	r3, [r7, #21]
 8011e7a:	e024      	b.n	8011ec6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011e7c:	7d7b      	ldrb	r3, [r7, #21]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d109      	bne.n	8011e96 <dir_find+0x126>
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6a1b      	ldr	r3, [r3, #32]
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7ff feaa 	bl	8011be0 <sum_sfn>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	461a      	mov	r2, r3
 8011e90:	7d3b      	ldrb	r3, [r7, #20]
 8011e92:	4293      	cmp	r3, r2
 8011e94:	d024      	beq.n	8011ee0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011e9c:	f003 0301 	and.w	r3, r3, #1
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d10a      	bne.n	8011eba <dir_find+0x14a>
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	6a18      	ldr	r0, [r3, #32]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	3324      	adds	r3, #36	; 0x24
 8011eac:	220b      	movs	r2, #11
 8011eae:	4619      	mov	r1, r3
 8011eb0:	f7fe fd96 	bl	80109e0 <mem_cmp>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d014      	beq.n	8011ee4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011eba:	23ff      	movs	r3, #255	; 0xff
 8011ebc:	757b      	strb	r3, [r7, #21]
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8011ec4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011ec6:	2100      	movs	r1, #0
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f7ff fb74 	bl	80115b6 <dir_next>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011ed2:	7dfb      	ldrb	r3, [r7, #23]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	f43f af65 	beq.w	8011da4 <dir_find+0x34>
 8011eda:	e004      	b.n	8011ee6 <dir_find+0x176>
		if (res != FR_OK) break;
 8011edc:	bf00      	nop
 8011ede:	e002      	b.n	8011ee6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011ee0:	bf00      	nop
 8011ee2:	e000      	b.n	8011ee6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011ee4:	bf00      	nop

	return res;
 8011ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3718      	adds	r7, #24
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}

08011ef0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b08c      	sub	sp, #48	; 0x30
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011f04:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d001      	beq.n	8011f10 <dir_register+0x20>
 8011f0c:	2306      	movs	r3, #6
 8011f0e:	e0e0      	b.n	80120d2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8011f10:	2300      	movs	r3, #0
 8011f12:	627b      	str	r3, [r7, #36]	; 0x24
 8011f14:	e002      	b.n	8011f1c <dir_register+0x2c>
 8011f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f18:	3301      	adds	r3, #1
 8011f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8011f1c:	69fb      	ldr	r3, [r7, #28]
 8011f1e:	68da      	ldr	r2, [r3, #12]
 8011f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f22:	005b      	lsls	r3, r3, #1
 8011f24:	4413      	add	r3, r2
 8011f26:	881b      	ldrh	r3, [r3, #0]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d1f4      	bne.n	8011f16 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8011f32:	f107 030c 	add.w	r3, r7, #12
 8011f36:	220c      	movs	r2, #12
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7fe fd15 	bl	8010968 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8011f3e:	7dfb      	ldrb	r3, [r7, #23]
 8011f40:	f003 0301 	and.w	r3, r3, #1
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d032      	beq.n	8011fae <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2240      	movs	r2, #64	; 0x40
 8011f4c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8011f50:	2301      	movs	r3, #1
 8011f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f54:	e016      	b.n	8011f84 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8011f5c:	69fb      	ldr	r3, [r7, #28]
 8011f5e:	68da      	ldr	r2, [r3, #12]
 8011f60:	f107 010c 	add.w	r1, r7, #12
 8011f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f66:	f7ff fdad 	bl	8011ac4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f7ff ff00 	bl	8011d70 <dir_find>
 8011f70:	4603      	mov	r3, r0
 8011f72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8011f76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d106      	bne.n	8011f8c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8011f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f80:	3301      	adds	r3, #1
 8011f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f86:	2b63      	cmp	r3, #99	; 0x63
 8011f88:	d9e5      	bls.n	8011f56 <dir_register+0x66>
 8011f8a:	e000      	b.n	8011f8e <dir_register+0x9e>
			if (res != FR_OK) break;
 8011f8c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8011f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f90:	2b64      	cmp	r3, #100	; 0x64
 8011f92:	d101      	bne.n	8011f98 <dir_register+0xa8>
 8011f94:	2307      	movs	r3, #7
 8011f96:	e09c      	b.n	80120d2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8011f98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f9c:	2b04      	cmp	r3, #4
 8011f9e:	d002      	beq.n	8011fa6 <dir_register+0xb6>
 8011fa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fa4:	e095      	b.n	80120d2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8011fa6:	7dfa      	ldrb	r2, [r7, #23]
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011fae:	7dfb      	ldrb	r3, [r7, #23]
 8011fb0:	f003 0302 	and.w	r3, r3, #2
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d007      	beq.n	8011fc8 <dir_register+0xd8>
 8011fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fba:	330c      	adds	r3, #12
 8011fbc:	4a47      	ldr	r2, [pc, #284]	; (80120dc <dir_register+0x1ec>)
 8011fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8011fc2:	089b      	lsrs	r3, r3, #2
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	e000      	b.n	8011fca <dir_register+0xda>
 8011fc8:	2301      	movs	r3, #1
 8011fca:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011fcc:	6a39      	ldr	r1, [r7, #32]
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f7ff fbb6 	bl	8011740 <dir_alloc>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8011fda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d148      	bne.n	8012074 <dir_register+0x184>
 8011fe2:	6a3b      	ldr	r3, [r7, #32]
 8011fe4:	3b01      	subs	r3, #1
 8011fe6:	623b      	str	r3, [r7, #32]
 8011fe8:	6a3b      	ldr	r3, [r7, #32]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d042      	beq.n	8012074 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	695a      	ldr	r2, [r3, #20]
 8011ff2:	6a3b      	ldr	r3, [r7, #32]
 8011ff4:	015b      	lsls	r3, r3, #5
 8011ff6:	1ad3      	subs	r3, r2, r3
 8011ff8:	4619      	mov	r1, r3
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f7ff fa60 	bl	80114c0 <dir_sdi>
 8012000:	4603      	mov	r3, r0
 8012002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8012006:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801200a:	2b00      	cmp	r3, #0
 801200c:	d132      	bne.n	8012074 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	3324      	adds	r3, #36	; 0x24
 8012012:	4618      	mov	r0, r3
 8012014:	f7ff fde4 	bl	8011be0 <sum_sfn>
 8012018:	4603      	mov	r3, r0
 801201a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	69db      	ldr	r3, [r3, #28]
 8012020:	4619      	mov	r1, r3
 8012022:	69f8      	ldr	r0, [r7, #28]
 8012024:	f7fe fece 	bl	8010dc4 <move_window>
 8012028:	4603      	mov	r3, r0
 801202a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801202e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012032:	2b00      	cmp	r3, #0
 8012034:	d11d      	bne.n	8012072 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012036:	69fb      	ldr	r3, [r7, #28]
 8012038:	68d8      	ldr	r0, [r3, #12]
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	6a19      	ldr	r1, [r3, #32]
 801203e:	6a3b      	ldr	r3, [r7, #32]
 8012040:	b2da      	uxtb	r2, r3
 8012042:	7efb      	ldrb	r3, [r7, #27]
 8012044:	f7ff fcd6 	bl	80119f4 <put_lfn>
				fs->wflag = 1;
 8012048:	69fb      	ldr	r3, [r7, #28]
 801204a:	2201      	movs	r2, #1
 801204c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801204e:	2100      	movs	r1, #0
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f7ff fab0 	bl	80115b6 <dir_next>
 8012056:	4603      	mov	r3, r0
 8012058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801205c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012060:	2b00      	cmp	r3, #0
 8012062:	d107      	bne.n	8012074 <dir_register+0x184>
 8012064:	6a3b      	ldr	r3, [r7, #32]
 8012066:	3b01      	subs	r3, #1
 8012068:	623b      	str	r3, [r7, #32]
 801206a:	6a3b      	ldr	r3, [r7, #32]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d1d5      	bne.n	801201c <dir_register+0x12c>
 8012070:	e000      	b.n	8012074 <dir_register+0x184>
				if (res != FR_OK) break;
 8012072:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012078:	2b00      	cmp	r3, #0
 801207a:	d128      	bne.n	80120ce <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	69db      	ldr	r3, [r3, #28]
 8012080:	4619      	mov	r1, r3
 8012082:	69f8      	ldr	r0, [r7, #28]
 8012084:	f7fe fe9e 	bl	8010dc4 <move_window>
 8012088:	4603      	mov	r3, r0
 801208a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801208e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012092:	2b00      	cmp	r3, #0
 8012094:	d11b      	bne.n	80120ce <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	6a1b      	ldr	r3, [r3, #32]
 801209a:	2220      	movs	r2, #32
 801209c:	2100      	movs	r1, #0
 801209e:	4618      	mov	r0, r3
 80120a0:	f7fe fc83 	bl	80109aa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	6a18      	ldr	r0, [r3, #32]
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	3324      	adds	r3, #36	; 0x24
 80120ac:	220b      	movs	r2, #11
 80120ae:	4619      	mov	r1, r3
 80120b0:	f7fe fc5a 	bl	8010968 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6a1b      	ldr	r3, [r3, #32]
 80120be:	330c      	adds	r3, #12
 80120c0:	f002 0218 	and.w	r2, r2, #24
 80120c4:	b2d2      	uxtb	r2, r2
 80120c6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	2201      	movs	r2, #1
 80120cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80120ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3730      	adds	r7, #48	; 0x30
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}
 80120da:	bf00      	nop
 80120dc:	4ec4ec4f 	.word	0x4ec4ec4f

080120e0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b088      	sub	sp, #32
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	2200      	movs	r2, #0
 80120f4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	69db      	ldr	r3, [r3, #28]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	f000 80c9 	beq.w	8012292 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012108:	d032      	beq.n	8012170 <get_fileinfo+0x90>
			i = j = 0;
 801210a:	2300      	movs	r3, #0
 801210c:	61bb      	str	r3, [r7, #24]
 801210e:	69bb      	ldr	r3, [r7, #24]
 8012110:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8012112:	e01b      	b.n	801214c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8012114:	89fb      	ldrh	r3, [r7, #14]
 8012116:	2100      	movs	r1, #0
 8012118:	4618      	mov	r0, r3
 801211a:	f002 fa31 	bl	8014580 <ff_convert>
 801211e:	4603      	mov	r3, r0
 8012120:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8012122:	89fb      	ldrh	r3, [r7, #14]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d102      	bne.n	801212e <get_fileinfo+0x4e>
 8012128:	2300      	movs	r3, #0
 801212a:	61fb      	str	r3, [r7, #28]
 801212c:	e01a      	b.n	8012164 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801212e:	69fb      	ldr	r3, [r7, #28]
 8012130:	2bfe      	cmp	r3, #254	; 0xfe
 8012132:	d902      	bls.n	801213a <get_fileinfo+0x5a>
 8012134:	2300      	movs	r3, #0
 8012136:	61fb      	str	r3, [r7, #28]
 8012138:	e014      	b.n	8012164 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801213a:	69fb      	ldr	r3, [r7, #28]
 801213c:	1c5a      	adds	r2, r3, #1
 801213e:	61fa      	str	r2, [r7, #28]
 8012140:	89fa      	ldrh	r2, [r7, #14]
 8012142:	b2d1      	uxtb	r1, r2
 8012144:	683a      	ldr	r2, [r7, #0]
 8012146:	4413      	add	r3, r2
 8012148:	460a      	mov	r2, r1
 801214a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	68da      	ldr	r2, [r3, #12]
 8012150:	69bb      	ldr	r3, [r7, #24]
 8012152:	1c59      	adds	r1, r3, #1
 8012154:	61b9      	str	r1, [r7, #24]
 8012156:	005b      	lsls	r3, r3, #1
 8012158:	4413      	add	r3, r2
 801215a:	881b      	ldrh	r3, [r3, #0]
 801215c:	81fb      	strh	r3, [r7, #14]
 801215e:	89fb      	ldrh	r3, [r7, #14]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d1d7      	bne.n	8012114 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8012164:	683a      	ldr	r2, [r7, #0]
 8012166:	69fb      	ldr	r3, [r7, #28]
 8012168:	4413      	add	r3, r2
 801216a:	3316      	adds	r3, #22
 801216c:	2200      	movs	r2, #0
 801216e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8012170:	2300      	movs	r3, #0
 8012172:	61bb      	str	r3, [r7, #24]
 8012174:	69bb      	ldr	r3, [r7, #24]
 8012176:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8012178:	683a      	ldr	r2, [r7, #0]
 801217a:	69fb      	ldr	r3, [r7, #28]
 801217c:	4413      	add	r3, r2
 801217e:	3316      	adds	r3, #22
 8012180:	781b      	ldrb	r3, [r3, #0]
 8012182:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8012184:	e04c      	b.n	8012220 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6a1a      	ldr	r2, [r3, #32]
 801218a:	69fb      	ldr	r3, [r7, #28]
 801218c:	1c59      	adds	r1, r3, #1
 801218e:	61f9      	str	r1, [r7, #28]
 8012190:	4413      	add	r3, r2
 8012192:	781b      	ldrb	r3, [r3, #0]
 8012194:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012196:	7dfb      	ldrb	r3, [r7, #23]
 8012198:	2b20      	cmp	r3, #32
 801219a:	d100      	bne.n	801219e <get_fileinfo+0xbe>
 801219c:	e040      	b.n	8012220 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801219e:	7dfb      	ldrb	r3, [r7, #23]
 80121a0:	2b05      	cmp	r3, #5
 80121a2:	d101      	bne.n	80121a8 <get_fileinfo+0xc8>
 80121a4:	23e5      	movs	r3, #229	; 0xe5
 80121a6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80121a8:	69fb      	ldr	r3, [r7, #28]
 80121aa:	2b09      	cmp	r3, #9
 80121ac:	d10f      	bne.n	80121ce <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80121ae:	89bb      	ldrh	r3, [r7, #12]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d105      	bne.n	80121c0 <get_fileinfo+0xe0>
 80121b4:	683a      	ldr	r2, [r7, #0]
 80121b6:	69bb      	ldr	r3, [r7, #24]
 80121b8:	4413      	add	r3, r2
 80121ba:	3316      	adds	r3, #22
 80121bc:	222e      	movs	r2, #46	; 0x2e
 80121be:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	1c5a      	adds	r2, r3, #1
 80121c4:	61ba      	str	r2, [r7, #24]
 80121c6:	683a      	ldr	r2, [r7, #0]
 80121c8:	4413      	add	r3, r2
 80121ca:	222e      	movs	r2, #46	; 0x2e
 80121cc:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80121ce:	683a      	ldr	r2, [r7, #0]
 80121d0:	69bb      	ldr	r3, [r7, #24]
 80121d2:	4413      	add	r3, r2
 80121d4:	3309      	adds	r3, #9
 80121d6:	7dfa      	ldrb	r2, [r7, #23]
 80121d8:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80121da:	89bb      	ldrh	r3, [r7, #12]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d11c      	bne.n	801221a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80121e0:	7dfb      	ldrb	r3, [r7, #23]
 80121e2:	2b40      	cmp	r3, #64	; 0x40
 80121e4:	d913      	bls.n	801220e <get_fileinfo+0x12e>
 80121e6:	7dfb      	ldrb	r3, [r7, #23]
 80121e8:	2b5a      	cmp	r3, #90	; 0x5a
 80121ea:	d810      	bhi.n	801220e <get_fileinfo+0x12e>
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6a1b      	ldr	r3, [r3, #32]
 80121f0:	330c      	adds	r3, #12
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	461a      	mov	r2, r3
 80121f6:	69fb      	ldr	r3, [r7, #28]
 80121f8:	2b08      	cmp	r3, #8
 80121fa:	d901      	bls.n	8012200 <get_fileinfo+0x120>
 80121fc:	2310      	movs	r3, #16
 80121fe:	e000      	b.n	8012202 <get_fileinfo+0x122>
 8012200:	2308      	movs	r3, #8
 8012202:	4013      	ands	r3, r2
 8012204:	2b00      	cmp	r3, #0
 8012206:	d002      	beq.n	801220e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8012208:	7dfb      	ldrb	r3, [r7, #23]
 801220a:	3320      	adds	r3, #32
 801220c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801220e:	683a      	ldr	r2, [r7, #0]
 8012210:	69bb      	ldr	r3, [r7, #24]
 8012212:	4413      	add	r3, r2
 8012214:	3316      	adds	r3, #22
 8012216:	7dfa      	ldrb	r2, [r7, #23]
 8012218:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801221a:	69bb      	ldr	r3, [r7, #24]
 801221c:	3301      	adds	r3, #1
 801221e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8012220:	69fb      	ldr	r3, [r7, #28]
 8012222:	2b0a      	cmp	r3, #10
 8012224:	d9af      	bls.n	8012186 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8012226:	89bb      	ldrh	r3, [r7, #12]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d10d      	bne.n	8012248 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 801222c:	683a      	ldr	r2, [r7, #0]
 801222e:	69bb      	ldr	r3, [r7, #24]
 8012230:	4413      	add	r3, r2
 8012232:	3316      	adds	r3, #22
 8012234:	2200      	movs	r2, #0
 8012236:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	6a1b      	ldr	r3, [r3, #32]
 801223c:	330c      	adds	r3, #12
 801223e:	781b      	ldrb	r3, [r3, #0]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d101      	bne.n	8012248 <get_fileinfo+0x168>
 8012244:	2300      	movs	r3, #0
 8012246:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8012248:	683a      	ldr	r2, [r7, #0]
 801224a:	69bb      	ldr	r3, [r7, #24]
 801224c:	4413      	add	r3, r2
 801224e:	3309      	adds	r3, #9
 8012250:	2200      	movs	r2, #0
 8012252:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6a1b      	ldr	r3, [r3, #32]
 8012258:	7ada      	ldrb	r2, [r3, #11]
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	6a1b      	ldr	r3, [r3, #32]
 8012262:	331c      	adds	r3, #28
 8012264:	4618      	mov	r0, r3
 8012266:	f7fe fb15 	bl	8010894 <ld_dword>
 801226a:	4602      	mov	r2, r0
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6a1b      	ldr	r3, [r3, #32]
 8012274:	3316      	adds	r3, #22
 8012276:	4618      	mov	r0, r3
 8012278:	f7fe fb0c 	bl	8010894 <ld_dword>
 801227c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	b29a      	uxth	r2, r3
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	80da      	strh	r2, [r3, #6]
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	0c1b      	lsrs	r3, r3, #16
 801228a:	b29a      	uxth	r2, r3
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	809a      	strh	r2, [r3, #4]
 8012290:	e000      	b.n	8012294 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012292:	bf00      	nop
}
 8012294:	3720      	adds	r7, #32
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}
	...

0801229c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b08a      	sub	sp, #40	; 0x28
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
 80122a4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	613b      	str	r3, [r7, #16]
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	68db      	ldr	r3, [r3, #12]
 80122b2:	60fb      	str	r3, [r7, #12]
 80122b4:	2300      	movs	r3, #0
 80122b6:	617b      	str	r3, [r7, #20]
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80122bc:	69bb      	ldr	r3, [r7, #24]
 80122be:	1c5a      	adds	r2, r3, #1
 80122c0:	61ba      	str	r2, [r7, #24]
 80122c2:	693a      	ldr	r2, [r7, #16]
 80122c4:	4413      	add	r3, r2
 80122c6:	781b      	ldrb	r3, [r3, #0]
 80122c8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80122ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122cc:	2b1f      	cmp	r3, #31
 80122ce:	d940      	bls.n	8012352 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80122d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122d2:	2b2f      	cmp	r3, #47	; 0x2f
 80122d4:	d006      	beq.n	80122e4 <create_name+0x48>
 80122d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122d8:	2b5c      	cmp	r3, #92	; 0x5c
 80122da:	d110      	bne.n	80122fe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80122dc:	e002      	b.n	80122e4 <create_name+0x48>
 80122de:	69bb      	ldr	r3, [r7, #24]
 80122e0:	3301      	adds	r3, #1
 80122e2:	61bb      	str	r3, [r7, #24]
 80122e4:	693a      	ldr	r2, [r7, #16]
 80122e6:	69bb      	ldr	r3, [r7, #24]
 80122e8:	4413      	add	r3, r2
 80122ea:	781b      	ldrb	r3, [r3, #0]
 80122ec:	2b2f      	cmp	r3, #47	; 0x2f
 80122ee:	d0f6      	beq.n	80122de <create_name+0x42>
 80122f0:	693a      	ldr	r2, [r7, #16]
 80122f2:	69bb      	ldr	r3, [r7, #24]
 80122f4:	4413      	add	r3, r2
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	2b5c      	cmp	r3, #92	; 0x5c
 80122fa:	d0f0      	beq.n	80122de <create_name+0x42>
			break;
 80122fc:	e02a      	b.n	8012354 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	2bfe      	cmp	r3, #254	; 0xfe
 8012302:	d901      	bls.n	8012308 <create_name+0x6c>
 8012304:	2306      	movs	r3, #6
 8012306:	e17d      	b.n	8012604 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012308:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801230a:	b2db      	uxtb	r3, r3
 801230c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801230e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012310:	2101      	movs	r1, #1
 8012312:	4618      	mov	r0, r3
 8012314:	f002 f934 	bl	8014580 <ff_convert>
 8012318:	4603      	mov	r3, r0
 801231a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801231c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801231e:	2b00      	cmp	r3, #0
 8012320:	d101      	bne.n	8012326 <create_name+0x8a>
 8012322:	2306      	movs	r3, #6
 8012324:	e16e      	b.n	8012604 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012328:	2b7f      	cmp	r3, #127	; 0x7f
 801232a:	d809      	bhi.n	8012340 <create_name+0xa4>
 801232c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801232e:	4619      	mov	r1, r3
 8012330:	488d      	ldr	r0, [pc, #564]	; (8012568 <create_name+0x2cc>)
 8012332:	f7fe fb7c 	bl	8010a2e <chk_chr>
 8012336:	4603      	mov	r3, r0
 8012338:	2b00      	cmp	r3, #0
 801233a:	d001      	beq.n	8012340 <create_name+0xa4>
 801233c:	2306      	movs	r3, #6
 801233e:	e161      	b.n	8012604 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	1c5a      	adds	r2, r3, #1
 8012344:	617a      	str	r2, [r7, #20]
 8012346:	005b      	lsls	r3, r3, #1
 8012348:	68fa      	ldr	r2, [r7, #12]
 801234a:	4413      	add	r3, r2
 801234c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801234e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8012350:	e7b4      	b.n	80122bc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8012352:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8012354:	693a      	ldr	r2, [r7, #16]
 8012356:	69bb      	ldr	r3, [r7, #24]
 8012358:	441a      	add	r2, r3
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801235e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012360:	2b1f      	cmp	r3, #31
 8012362:	d801      	bhi.n	8012368 <create_name+0xcc>
 8012364:	2304      	movs	r3, #4
 8012366:	e000      	b.n	801236a <create_name+0xce>
 8012368:	2300      	movs	r3, #0
 801236a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801236e:	e011      	b.n	8012394 <create_name+0xf8>
		w = lfn[di - 1];
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012376:	3b01      	subs	r3, #1
 8012378:	005b      	lsls	r3, r3, #1
 801237a:	68fa      	ldr	r2, [r7, #12]
 801237c:	4413      	add	r3, r2
 801237e:	881b      	ldrh	r3, [r3, #0]
 8012380:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8012382:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012384:	2b20      	cmp	r3, #32
 8012386:	d002      	beq.n	801238e <create_name+0xf2>
 8012388:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801238a:	2b2e      	cmp	r3, #46	; 0x2e
 801238c:	d106      	bne.n	801239c <create_name+0x100>
		di--;
 801238e:	697b      	ldr	r3, [r7, #20]
 8012390:	3b01      	subs	r3, #1
 8012392:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d1ea      	bne.n	8012370 <create_name+0xd4>
 801239a:	e000      	b.n	801239e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801239c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	005b      	lsls	r3, r3, #1
 80123a2:	68fa      	ldr	r2, [r7, #12]
 80123a4:	4413      	add	r3, r2
 80123a6:	2200      	movs	r2, #0
 80123a8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80123aa:	697b      	ldr	r3, [r7, #20]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d101      	bne.n	80123b4 <create_name+0x118>
 80123b0:	2306      	movs	r3, #6
 80123b2:	e127      	b.n	8012604 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	3324      	adds	r3, #36	; 0x24
 80123b8:	220b      	movs	r2, #11
 80123ba:	2120      	movs	r1, #32
 80123bc:	4618      	mov	r0, r3
 80123be:	f7fe faf4 	bl	80109aa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80123c2:	2300      	movs	r3, #0
 80123c4:	61bb      	str	r3, [r7, #24]
 80123c6:	e002      	b.n	80123ce <create_name+0x132>
 80123c8:	69bb      	ldr	r3, [r7, #24]
 80123ca:	3301      	adds	r3, #1
 80123cc:	61bb      	str	r3, [r7, #24]
 80123ce:	69bb      	ldr	r3, [r7, #24]
 80123d0:	005b      	lsls	r3, r3, #1
 80123d2:	68fa      	ldr	r2, [r7, #12]
 80123d4:	4413      	add	r3, r2
 80123d6:	881b      	ldrh	r3, [r3, #0]
 80123d8:	2b20      	cmp	r3, #32
 80123da:	d0f5      	beq.n	80123c8 <create_name+0x12c>
 80123dc:	69bb      	ldr	r3, [r7, #24]
 80123de:	005b      	lsls	r3, r3, #1
 80123e0:	68fa      	ldr	r2, [r7, #12]
 80123e2:	4413      	add	r3, r2
 80123e4:	881b      	ldrh	r3, [r3, #0]
 80123e6:	2b2e      	cmp	r3, #46	; 0x2e
 80123e8:	d0ee      	beq.n	80123c8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80123ea:	69bb      	ldr	r3, [r7, #24]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d009      	beq.n	8012404 <create_name+0x168>
 80123f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123f4:	f043 0303 	orr.w	r3, r3, #3
 80123f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80123fc:	e002      	b.n	8012404 <create_name+0x168>
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	3b01      	subs	r3, #1
 8012402:	617b      	str	r3, [r7, #20]
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d009      	beq.n	801241e <create_name+0x182>
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012410:	3b01      	subs	r3, #1
 8012412:	005b      	lsls	r3, r3, #1
 8012414:	68fa      	ldr	r2, [r7, #12]
 8012416:	4413      	add	r3, r2
 8012418:	881b      	ldrh	r3, [r3, #0]
 801241a:	2b2e      	cmp	r3, #46	; 0x2e
 801241c:	d1ef      	bne.n	80123fe <create_name+0x162>

	i = b = 0; ni = 8;
 801241e:	2300      	movs	r3, #0
 8012420:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012424:	2300      	movs	r3, #0
 8012426:	623b      	str	r3, [r7, #32]
 8012428:	2308      	movs	r3, #8
 801242a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801242c:	69bb      	ldr	r3, [r7, #24]
 801242e:	1c5a      	adds	r2, r3, #1
 8012430:	61ba      	str	r2, [r7, #24]
 8012432:	005b      	lsls	r3, r3, #1
 8012434:	68fa      	ldr	r2, [r7, #12]
 8012436:	4413      	add	r3, r2
 8012438:	881b      	ldrh	r3, [r3, #0]
 801243a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801243c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801243e:	2b00      	cmp	r3, #0
 8012440:	f000 8090 	beq.w	8012564 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8012444:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012446:	2b20      	cmp	r3, #32
 8012448:	d006      	beq.n	8012458 <create_name+0x1bc>
 801244a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801244c:	2b2e      	cmp	r3, #46	; 0x2e
 801244e:	d10a      	bne.n	8012466 <create_name+0x1ca>
 8012450:	69ba      	ldr	r2, [r7, #24]
 8012452:	697b      	ldr	r3, [r7, #20]
 8012454:	429a      	cmp	r2, r3
 8012456:	d006      	beq.n	8012466 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8012458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801245c:	f043 0303 	orr.w	r3, r3, #3
 8012460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012464:	e07d      	b.n	8012562 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8012466:	6a3a      	ldr	r2, [r7, #32]
 8012468:	69fb      	ldr	r3, [r7, #28]
 801246a:	429a      	cmp	r2, r3
 801246c:	d203      	bcs.n	8012476 <create_name+0x1da>
 801246e:	69ba      	ldr	r2, [r7, #24]
 8012470:	697b      	ldr	r3, [r7, #20]
 8012472:	429a      	cmp	r2, r3
 8012474:	d123      	bne.n	80124be <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8012476:	69fb      	ldr	r3, [r7, #28]
 8012478:	2b0b      	cmp	r3, #11
 801247a:	d106      	bne.n	801248a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801247c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012480:	f043 0303 	orr.w	r3, r3, #3
 8012484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012488:	e075      	b.n	8012576 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801248a:	69ba      	ldr	r2, [r7, #24]
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	429a      	cmp	r2, r3
 8012490:	d005      	beq.n	801249e <create_name+0x202>
 8012492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012496:	f043 0303 	orr.w	r3, r3, #3
 801249a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801249e:	69ba      	ldr	r2, [r7, #24]
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d866      	bhi.n	8012574 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	61bb      	str	r3, [r7, #24]
 80124aa:	2308      	movs	r3, #8
 80124ac:	623b      	str	r3, [r7, #32]
 80124ae:	230b      	movs	r3, #11
 80124b0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80124b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80124b6:	009b      	lsls	r3, r3, #2
 80124b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80124bc:	e051      	b.n	8012562 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80124be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124c0:	2b7f      	cmp	r3, #127	; 0x7f
 80124c2:	d914      	bls.n	80124ee <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80124c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124c6:	2100      	movs	r1, #0
 80124c8:	4618      	mov	r0, r3
 80124ca:	f002 f859 	bl	8014580 <ff_convert>
 80124ce:	4603      	mov	r3, r0
 80124d0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80124d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d004      	beq.n	80124e2 <create_name+0x246>
 80124d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124da:	3b80      	subs	r3, #128	; 0x80
 80124dc:	4a23      	ldr	r2, [pc, #140]	; (801256c <create_name+0x2d0>)
 80124de:	5cd3      	ldrb	r3, [r2, r3]
 80124e0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80124e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80124e6:	f043 0302 	orr.w	r3, r3, #2
 80124ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80124ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d007      	beq.n	8012504 <create_name+0x268>
 80124f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124f6:	4619      	mov	r1, r3
 80124f8:	481d      	ldr	r0, [pc, #116]	; (8012570 <create_name+0x2d4>)
 80124fa:	f7fe fa98 	bl	8010a2e <chk_chr>
 80124fe:	4603      	mov	r3, r0
 8012500:	2b00      	cmp	r3, #0
 8012502:	d008      	beq.n	8012516 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012504:	235f      	movs	r3, #95	; 0x5f
 8012506:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801250c:	f043 0303 	orr.w	r3, r3, #3
 8012510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012514:	e01b      	b.n	801254e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8012516:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012518:	2b40      	cmp	r3, #64	; 0x40
 801251a:	d909      	bls.n	8012530 <create_name+0x294>
 801251c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801251e:	2b5a      	cmp	r3, #90	; 0x5a
 8012520:	d806      	bhi.n	8012530 <create_name+0x294>
					b |= 2;
 8012522:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012526:	f043 0302 	orr.w	r3, r3, #2
 801252a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801252e:	e00e      	b.n	801254e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012532:	2b60      	cmp	r3, #96	; 0x60
 8012534:	d90b      	bls.n	801254e <create_name+0x2b2>
 8012536:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012538:	2b7a      	cmp	r3, #122	; 0x7a
 801253a:	d808      	bhi.n	801254e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801253c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012540:	f043 0301 	orr.w	r3, r3, #1
 8012544:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801254a:	3b20      	subs	r3, #32
 801254c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801254e:	6a3b      	ldr	r3, [r7, #32]
 8012550:	1c5a      	adds	r2, r3, #1
 8012552:	623a      	str	r2, [r7, #32]
 8012554:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012556:	b2d1      	uxtb	r1, r2
 8012558:	687a      	ldr	r2, [r7, #4]
 801255a:	4413      	add	r3, r2
 801255c:	460a      	mov	r2, r1
 801255e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8012562:	e763      	b.n	801242c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8012564:	bf00      	nop
 8012566:	e006      	b.n	8012576 <create_name+0x2da>
 8012568:	0801aae8 	.word	0x0801aae8
 801256c:	08026c28 	.word	0x08026c28
 8012570:	0801aaf4 	.word	0x0801aaf4
			if (si > di) break;			/* No extension */
 8012574:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801257c:	2be5      	cmp	r3, #229	; 0xe5
 801257e:	d103      	bne.n	8012588 <create_name+0x2ec>
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2205      	movs	r2, #5
 8012584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8012588:	69fb      	ldr	r3, [r7, #28]
 801258a:	2b08      	cmp	r3, #8
 801258c:	d104      	bne.n	8012598 <create_name+0x2fc>
 801258e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012592:	009b      	lsls	r3, r3, #2
 8012594:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012598:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801259c:	f003 030c 	and.w	r3, r3, #12
 80125a0:	2b0c      	cmp	r3, #12
 80125a2:	d005      	beq.n	80125b0 <create_name+0x314>
 80125a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80125a8:	f003 0303 	and.w	r3, r3, #3
 80125ac:	2b03      	cmp	r3, #3
 80125ae:	d105      	bne.n	80125bc <create_name+0x320>
 80125b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125b4:	f043 0302 	orr.w	r3, r3, #2
 80125b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80125bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125c0:	f003 0302 	and.w	r3, r3, #2
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d117      	bne.n	80125f8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80125c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80125cc:	f003 0303 	and.w	r3, r3, #3
 80125d0:	2b01      	cmp	r3, #1
 80125d2:	d105      	bne.n	80125e0 <create_name+0x344>
 80125d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125d8:	f043 0310 	orr.w	r3, r3, #16
 80125dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80125e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80125e4:	f003 030c 	and.w	r3, r3, #12
 80125e8:	2b04      	cmp	r3, #4
 80125ea:	d105      	bne.n	80125f8 <create_name+0x35c>
 80125ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125f0:	f043 0308 	orr.w	r3, r3, #8
 80125f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80125fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8012602:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012604:	4618      	mov	r0, r3
 8012606:	3728      	adds	r7, #40	; 0x28
 8012608:	46bd      	mov	sp, r7
 801260a:	bd80      	pop	{r7, pc}

0801260c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b086      	sub	sp, #24
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
 8012614:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801261a:	693b      	ldr	r3, [r7, #16]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012620:	e002      	b.n	8012628 <follow_path+0x1c>
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	3301      	adds	r3, #1
 8012626:	603b      	str	r3, [r7, #0]
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	781b      	ldrb	r3, [r3, #0]
 801262c:	2b2f      	cmp	r3, #47	; 0x2f
 801262e:	d0f8      	beq.n	8012622 <follow_path+0x16>
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	2b5c      	cmp	r3, #92	; 0x5c
 8012636:	d0f4      	beq.n	8012622 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012638:	693b      	ldr	r3, [r7, #16]
 801263a:	2200      	movs	r2, #0
 801263c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	2b1f      	cmp	r3, #31
 8012644:	d80a      	bhi.n	801265c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	2280      	movs	r2, #128	; 0x80
 801264a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801264e:	2100      	movs	r1, #0
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f7fe ff35 	bl	80114c0 <dir_sdi>
 8012656:	4603      	mov	r3, r0
 8012658:	75fb      	strb	r3, [r7, #23]
 801265a:	e043      	b.n	80126e4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801265c:	463b      	mov	r3, r7
 801265e:	4619      	mov	r1, r3
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f7ff fe1b 	bl	801229c <create_name>
 8012666:	4603      	mov	r3, r0
 8012668:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801266a:	7dfb      	ldrb	r3, [r7, #23]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d134      	bne.n	80126da <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f7ff fb7d 	bl	8011d70 <dir_find>
 8012676:	4603      	mov	r3, r0
 8012678:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012680:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012682:	7dfb      	ldrb	r3, [r7, #23]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d00a      	beq.n	801269e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012688:	7dfb      	ldrb	r3, [r7, #23]
 801268a:	2b04      	cmp	r3, #4
 801268c:	d127      	bne.n	80126de <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801268e:	7afb      	ldrb	r3, [r7, #11]
 8012690:	f003 0304 	and.w	r3, r3, #4
 8012694:	2b00      	cmp	r3, #0
 8012696:	d122      	bne.n	80126de <follow_path+0xd2>
 8012698:	2305      	movs	r3, #5
 801269a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801269c:	e01f      	b.n	80126de <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801269e:	7afb      	ldrb	r3, [r7, #11]
 80126a0:	f003 0304 	and.w	r3, r3, #4
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d11c      	bne.n	80126e2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80126a8:	693b      	ldr	r3, [r7, #16]
 80126aa:	799b      	ldrb	r3, [r3, #6]
 80126ac:	f003 0310 	and.w	r3, r3, #16
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d102      	bne.n	80126ba <follow_path+0xae>
				res = FR_NO_PATH; break;
 80126b4:	2305      	movs	r3, #5
 80126b6:	75fb      	strb	r3, [r7, #23]
 80126b8:	e014      	b.n	80126e4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	695b      	ldr	r3, [r3, #20]
 80126c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126c8:	4413      	add	r3, r2
 80126ca:	4619      	mov	r1, r3
 80126cc:	68f8      	ldr	r0, [r7, #12]
 80126ce:	f7ff f87e 	bl	80117ce <ld_clust>
 80126d2:	4602      	mov	r2, r0
 80126d4:	693b      	ldr	r3, [r7, #16]
 80126d6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80126d8:	e7c0      	b.n	801265c <follow_path+0x50>
			if (res != FR_OK) break;
 80126da:	bf00      	nop
 80126dc:	e002      	b.n	80126e4 <follow_path+0xd8>
				break;
 80126de:	bf00      	nop
 80126e0:	e000      	b.n	80126e4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80126e2:	bf00      	nop
			}
		}
	}

	return res;
 80126e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3718      	adds	r7, #24
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}

080126ee <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80126ee:	b480      	push	{r7}
 80126f0:	b087      	sub	sp, #28
 80126f2:	af00      	add	r7, sp, #0
 80126f4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80126f6:	f04f 33ff 	mov.w	r3, #4294967295
 80126fa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d031      	beq.n	8012768 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	617b      	str	r3, [r7, #20]
 801270a:	e002      	b.n	8012712 <get_ldnumber+0x24>
 801270c:	697b      	ldr	r3, [r7, #20]
 801270e:	3301      	adds	r3, #1
 8012710:	617b      	str	r3, [r7, #20]
 8012712:	697b      	ldr	r3, [r7, #20]
 8012714:	781b      	ldrb	r3, [r3, #0]
 8012716:	2b1f      	cmp	r3, #31
 8012718:	d903      	bls.n	8012722 <get_ldnumber+0x34>
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	781b      	ldrb	r3, [r3, #0]
 801271e:	2b3a      	cmp	r3, #58	; 0x3a
 8012720:	d1f4      	bne.n	801270c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012722:	697b      	ldr	r3, [r7, #20]
 8012724:	781b      	ldrb	r3, [r3, #0]
 8012726:	2b3a      	cmp	r3, #58	; 0x3a
 8012728:	d11c      	bne.n	8012764 <get_ldnumber+0x76>
			tp = *path;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	1c5a      	adds	r2, r3, #1
 8012734:	60fa      	str	r2, [r7, #12]
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	3b30      	subs	r3, #48	; 0x30
 801273a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801273c:	68bb      	ldr	r3, [r7, #8]
 801273e:	2b09      	cmp	r3, #9
 8012740:	d80e      	bhi.n	8012760 <get_ldnumber+0x72>
 8012742:	68fa      	ldr	r2, [r7, #12]
 8012744:	697b      	ldr	r3, [r7, #20]
 8012746:	429a      	cmp	r2, r3
 8012748:	d10a      	bne.n	8012760 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801274a:	68bb      	ldr	r3, [r7, #8]
 801274c:	2b01      	cmp	r3, #1
 801274e:	d807      	bhi.n	8012760 <get_ldnumber+0x72>
					vol = (int)i;
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012754:	697b      	ldr	r3, [r7, #20]
 8012756:	3301      	adds	r3, #1
 8012758:	617b      	str	r3, [r7, #20]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	697a      	ldr	r2, [r7, #20]
 801275e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012760:	693b      	ldr	r3, [r7, #16]
 8012762:	e002      	b.n	801276a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012764:	2300      	movs	r3, #0
 8012766:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012768:	693b      	ldr	r3, [r7, #16]
}
 801276a:	4618      	mov	r0, r3
 801276c:	371c      	adds	r7, #28
 801276e:	46bd      	mov	sp, r7
 8012770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012774:	4770      	bx	lr
	...

08012778 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2200      	movs	r2, #0
 8012786:	70da      	strb	r2, [r3, #3]
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f04f 32ff 	mov.w	r2, #4294967295
 801278e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012790:	6839      	ldr	r1, [r7, #0]
 8012792:	6878      	ldr	r0, [r7, #4]
 8012794:	f7fe fb16 	bl	8010dc4 <move_window>
 8012798:	4603      	mov	r3, r0
 801279a:	2b00      	cmp	r3, #0
 801279c:	d001      	beq.n	80127a2 <check_fs+0x2a>
 801279e:	2304      	movs	r3, #4
 80127a0:	e038      	b.n	8012814 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	3334      	adds	r3, #52	; 0x34
 80127a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7fe f85a 	bl	8010864 <ld_word>
 80127b0:	4603      	mov	r3, r0
 80127b2:	461a      	mov	r2, r3
 80127b4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d001      	beq.n	80127c0 <check_fs+0x48>
 80127bc:	2303      	movs	r3, #3
 80127be:	e029      	b.n	8012814 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80127c6:	2be9      	cmp	r3, #233	; 0xe9
 80127c8:	d009      	beq.n	80127de <check_fs+0x66>
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80127d0:	2beb      	cmp	r3, #235	; 0xeb
 80127d2:	d11e      	bne.n	8012812 <check_fs+0x9a>
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80127da:	2b90      	cmp	r3, #144	; 0x90
 80127dc:	d119      	bne.n	8012812 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	3334      	adds	r3, #52	; 0x34
 80127e2:	3336      	adds	r3, #54	; 0x36
 80127e4:	4618      	mov	r0, r3
 80127e6:	f7fe f855 	bl	8010894 <ld_dword>
 80127ea:	4603      	mov	r3, r0
 80127ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80127f0:	4a0a      	ldr	r2, [pc, #40]	; (801281c <check_fs+0xa4>)
 80127f2:	4293      	cmp	r3, r2
 80127f4:	d101      	bne.n	80127fa <check_fs+0x82>
 80127f6:	2300      	movs	r3, #0
 80127f8:	e00c      	b.n	8012814 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	3334      	adds	r3, #52	; 0x34
 80127fe:	3352      	adds	r3, #82	; 0x52
 8012800:	4618      	mov	r0, r3
 8012802:	f7fe f847 	bl	8010894 <ld_dword>
 8012806:	4603      	mov	r3, r0
 8012808:	4a05      	ldr	r2, [pc, #20]	; (8012820 <check_fs+0xa8>)
 801280a:	4293      	cmp	r3, r2
 801280c:	d101      	bne.n	8012812 <check_fs+0x9a>
 801280e:	2300      	movs	r3, #0
 8012810:	e000      	b.n	8012814 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012812:	2302      	movs	r3, #2
}
 8012814:	4618      	mov	r0, r3
 8012816:	3708      	adds	r7, #8
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}
 801281c:	00544146 	.word	0x00544146
 8012820:	33544146 	.word	0x33544146

08012824 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b096      	sub	sp, #88	; 0x58
 8012828:	af00      	add	r7, sp, #0
 801282a:	60f8      	str	r0, [r7, #12]
 801282c:	60b9      	str	r1, [r7, #8]
 801282e:	4613      	mov	r3, r2
 8012830:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	2200      	movs	r2, #0
 8012836:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012838:	68f8      	ldr	r0, [r7, #12]
 801283a:	f7ff ff58 	bl	80126ee <get_ldnumber>
 801283e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012842:	2b00      	cmp	r3, #0
 8012844:	da01      	bge.n	801284a <find_volume+0x26>
 8012846:	230b      	movs	r3, #11
 8012848:	e22d      	b.n	8012ca6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801284a:	4aa1      	ldr	r2, [pc, #644]	; (8012ad0 <find_volume+0x2ac>)
 801284c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012852:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012856:	2b00      	cmp	r3, #0
 8012858:	d101      	bne.n	801285e <find_volume+0x3a>
 801285a:	230c      	movs	r3, #12
 801285c:	e223      	b.n	8012ca6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012862:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012864:	79fb      	ldrb	r3, [r7, #7]
 8012866:	f023 0301 	bic.w	r3, r3, #1
 801286a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801286e:	781b      	ldrb	r3, [r3, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d01a      	beq.n	80128aa <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012876:	785b      	ldrb	r3, [r3, #1]
 8012878:	4618      	mov	r0, r3
 801287a:	f7fd ff4d 	bl	8010718 <disk_status>
 801287e:	4603      	mov	r3, r0
 8012880:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012884:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012888:	f003 0301 	and.w	r3, r3, #1
 801288c:	2b00      	cmp	r3, #0
 801288e:	d10c      	bne.n	80128aa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012890:	79fb      	ldrb	r3, [r7, #7]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d007      	beq.n	80128a6 <find_volume+0x82>
 8012896:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801289a:	f003 0304 	and.w	r3, r3, #4
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d001      	beq.n	80128a6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80128a2:	230a      	movs	r3, #10
 80128a4:	e1ff      	b.n	8012ca6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80128a6:	2300      	movs	r3, #0
 80128a8:	e1fd      	b.n	8012ca6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80128aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ac:	2200      	movs	r2, #0
 80128ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80128b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128b2:	b2da      	uxtb	r2, r3
 80128b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80128b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ba:	785b      	ldrb	r3, [r3, #1]
 80128bc:	4618      	mov	r0, r3
 80128be:	f7fd ff45 	bl	801074c <disk_initialize>
 80128c2:	4603      	mov	r3, r0
 80128c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80128c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80128cc:	f003 0301 	and.w	r3, r3, #1
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d001      	beq.n	80128d8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80128d4:	2303      	movs	r3, #3
 80128d6:	e1e6      	b.n	8012ca6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80128d8:	79fb      	ldrb	r3, [r7, #7]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d007      	beq.n	80128ee <find_volume+0xca>
 80128de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80128e2:	f003 0304 	and.w	r3, r3, #4
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d001      	beq.n	80128ee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80128ea:	230a      	movs	r3, #10
 80128ec:	e1db      	b.n	8012ca6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80128ee:	2300      	movs	r3, #0
 80128f0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80128f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80128f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80128f6:	f7ff ff3f 	bl	8012778 <check_fs>
 80128fa:	4603      	mov	r3, r0
 80128fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012900:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012904:	2b02      	cmp	r3, #2
 8012906:	d149      	bne.n	801299c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012908:	2300      	movs	r3, #0
 801290a:	643b      	str	r3, [r7, #64]	; 0x40
 801290c:	e01e      	b.n	801294c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801290e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012910:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012916:	011b      	lsls	r3, r3, #4
 8012918:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801291c:	4413      	add	r3, r2
 801291e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012922:	3304      	adds	r3, #4
 8012924:	781b      	ldrb	r3, [r3, #0]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d006      	beq.n	8012938 <find_volume+0x114>
 801292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801292c:	3308      	adds	r3, #8
 801292e:	4618      	mov	r0, r3
 8012930:	f7fd ffb0 	bl	8010894 <ld_dword>
 8012934:	4602      	mov	r2, r0
 8012936:	e000      	b.n	801293a <find_volume+0x116>
 8012938:	2200      	movs	r2, #0
 801293a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801293c:	009b      	lsls	r3, r3, #2
 801293e:	3358      	adds	r3, #88	; 0x58
 8012940:	443b      	add	r3, r7
 8012942:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012948:	3301      	adds	r3, #1
 801294a:	643b      	str	r3, [r7, #64]	; 0x40
 801294c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801294e:	2b03      	cmp	r3, #3
 8012950:	d9dd      	bls.n	801290e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012952:	2300      	movs	r3, #0
 8012954:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012958:	2b00      	cmp	r3, #0
 801295a:	d002      	beq.n	8012962 <find_volume+0x13e>
 801295c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801295e:	3b01      	subs	r3, #1
 8012960:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012964:	009b      	lsls	r3, r3, #2
 8012966:	3358      	adds	r3, #88	; 0x58
 8012968:	443b      	add	r3, r7
 801296a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801296e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012972:	2b00      	cmp	r3, #0
 8012974:	d005      	beq.n	8012982 <find_volume+0x15e>
 8012976:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012978:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801297a:	f7ff fefd 	bl	8012778 <check_fs>
 801297e:	4603      	mov	r3, r0
 8012980:	e000      	b.n	8012984 <find_volume+0x160>
 8012982:	2303      	movs	r3, #3
 8012984:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012988:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801298c:	2b01      	cmp	r3, #1
 801298e:	d905      	bls.n	801299c <find_volume+0x178>
 8012990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012992:	3301      	adds	r3, #1
 8012994:	643b      	str	r3, [r7, #64]	; 0x40
 8012996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012998:	2b03      	cmp	r3, #3
 801299a:	d9e2      	bls.n	8012962 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801299c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80129a0:	2b04      	cmp	r3, #4
 80129a2:	d101      	bne.n	80129a8 <find_volume+0x184>
 80129a4:	2301      	movs	r3, #1
 80129a6:	e17e      	b.n	8012ca6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80129a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80129ac:	2b01      	cmp	r3, #1
 80129ae:	d901      	bls.n	80129b4 <find_volume+0x190>
 80129b0:	230d      	movs	r3, #13
 80129b2:	e178      	b.n	8012ca6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80129b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b6:	3334      	adds	r3, #52	; 0x34
 80129b8:	330b      	adds	r3, #11
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7fd ff52 	bl	8010864 <ld_word>
 80129c0:	4603      	mov	r3, r0
 80129c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80129c6:	d001      	beq.n	80129cc <find_volume+0x1a8>
 80129c8:	230d      	movs	r3, #13
 80129ca:	e16c      	b.n	8012ca6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80129cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ce:	3334      	adds	r3, #52	; 0x34
 80129d0:	3316      	adds	r3, #22
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7fd ff46 	bl	8010864 <ld_word>
 80129d8:	4603      	mov	r3, r0
 80129da:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80129dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d106      	bne.n	80129f0 <find_volume+0x1cc>
 80129e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e4:	3334      	adds	r3, #52	; 0x34
 80129e6:	3324      	adds	r3, #36	; 0x24
 80129e8:	4618      	mov	r0, r3
 80129ea:	f7fd ff53 	bl	8010894 <ld_dword>
 80129ee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80129f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80129f4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80129f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80129fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a02:	789b      	ldrb	r3, [r3, #2]
 8012a04:	2b01      	cmp	r3, #1
 8012a06:	d005      	beq.n	8012a14 <find_volume+0x1f0>
 8012a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a0a:	789b      	ldrb	r3, [r3, #2]
 8012a0c:	2b02      	cmp	r3, #2
 8012a0e:	d001      	beq.n	8012a14 <find_volume+0x1f0>
 8012a10:	230d      	movs	r3, #13
 8012a12:	e148      	b.n	8012ca6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a16:	789b      	ldrb	r3, [r3, #2]
 8012a18:	461a      	mov	r2, r3
 8012a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a1c:	fb02 f303 	mul.w	r3, r2, r3
 8012a20:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012a28:	b29a      	uxth	r2, r3
 8012a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a2c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a30:	895b      	ldrh	r3, [r3, #10]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d008      	beq.n	8012a48 <find_volume+0x224>
 8012a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a38:	895b      	ldrh	r3, [r3, #10]
 8012a3a:	461a      	mov	r2, r3
 8012a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a3e:	895b      	ldrh	r3, [r3, #10]
 8012a40:	3b01      	subs	r3, #1
 8012a42:	4013      	ands	r3, r2
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d001      	beq.n	8012a4c <find_volume+0x228>
 8012a48:	230d      	movs	r3, #13
 8012a4a:	e12c      	b.n	8012ca6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a4e:	3334      	adds	r3, #52	; 0x34
 8012a50:	3311      	adds	r3, #17
 8012a52:	4618      	mov	r0, r3
 8012a54:	f7fd ff06 	bl	8010864 <ld_word>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	461a      	mov	r2, r3
 8012a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a5e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a62:	891b      	ldrh	r3, [r3, #8]
 8012a64:	f003 030f 	and.w	r3, r3, #15
 8012a68:	b29b      	uxth	r3, r3
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d001      	beq.n	8012a72 <find_volume+0x24e>
 8012a6e:	230d      	movs	r3, #13
 8012a70:	e119      	b.n	8012ca6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a74:	3334      	adds	r3, #52	; 0x34
 8012a76:	3313      	adds	r3, #19
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f7fd fef3 	bl	8010864 <ld_word>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d106      	bne.n	8012a96 <find_volume+0x272>
 8012a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a8a:	3334      	adds	r3, #52	; 0x34
 8012a8c:	3320      	adds	r3, #32
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7fd ff00 	bl	8010894 <ld_dword>
 8012a94:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a98:	3334      	adds	r3, #52	; 0x34
 8012a9a:	330e      	adds	r3, #14
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7fd fee1 	bl	8010864 <ld_word>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012aa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d101      	bne.n	8012ab0 <find_volume+0x28c>
 8012aac:	230d      	movs	r3, #13
 8012aae:	e0fa      	b.n	8012ca6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012ab0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ab4:	4413      	add	r3, r2
 8012ab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ab8:	8912      	ldrh	r2, [r2, #8]
 8012aba:	0912      	lsrs	r2, r2, #4
 8012abc:	b292      	uxth	r2, r2
 8012abe:	4413      	add	r3, r2
 8012ac0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac6:	429a      	cmp	r2, r3
 8012ac8:	d204      	bcs.n	8012ad4 <find_volume+0x2b0>
 8012aca:	230d      	movs	r3, #13
 8012acc:	e0eb      	b.n	8012ca6 <find_volume+0x482>
 8012ace:	bf00      	nop
 8012ad0:	200073d0 	.word	0x200073d0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ad8:	1ad3      	subs	r3, r2, r3
 8012ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012adc:	8952      	ldrh	r2, [r2, #10]
 8012ade:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ae2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d101      	bne.n	8012aee <find_volume+0x2ca>
 8012aea:	230d      	movs	r3, #13
 8012aec:	e0db      	b.n	8012ca6 <find_volume+0x482>
		fmt = FS_FAT32;
 8012aee:	2303      	movs	r3, #3
 8012af0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012af6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012afa:	4293      	cmp	r3, r2
 8012afc:	d802      	bhi.n	8012b04 <find_volume+0x2e0>
 8012afe:	2302      	movs	r3, #2
 8012b00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b06:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d802      	bhi.n	8012b14 <find_volume+0x2f0>
 8012b0e:	2301      	movs	r3, #1
 8012b10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b16:	1c9a      	adds	r2, r3, #2
 8012b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b1a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8012b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012b20:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012b22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b26:	441a      	add	r2, r3
 8012b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b2a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8012b2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b30:	441a      	add	r2, r3
 8012b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b34:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8012b36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b3a:	2b03      	cmp	r3, #3
 8012b3c:	d11e      	bne.n	8012b7c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b40:	3334      	adds	r3, #52	; 0x34
 8012b42:	332a      	adds	r3, #42	; 0x2a
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7fd fe8d 	bl	8010864 <ld_word>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d001      	beq.n	8012b54 <find_volume+0x330>
 8012b50:	230d      	movs	r3, #13
 8012b52:	e0a8      	b.n	8012ca6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b56:	891b      	ldrh	r3, [r3, #8]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d001      	beq.n	8012b60 <find_volume+0x33c>
 8012b5c:	230d      	movs	r3, #13
 8012b5e:	e0a2      	b.n	8012ca6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b62:	3334      	adds	r3, #52	; 0x34
 8012b64:	332c      	adds	r3, #44	; 0x2c
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7fd fe94 	bl	8010894 <ld_dword>
 8012b6c:	4602      	mov	r2, r0
 8012b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b70:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b74:	699b      	ldr	r3, [r3, #24]
 8012b76:	009b      	lsls	r3, r3, #2
 8012b78:	647b      	str	r3, [r7, #68]	; 0x44
 8012b7a:	e01f      	b.n	8012bbc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7e:	891b      	ldrh	r3, [r3, #8]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d101      	bne.n	8012b88 <find_volume+0x364>
 8012b84:	230d      	movs	r3, #13
 8012b86:	e08e      	b.n	8012ca6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b8e:	441a      	add	r2, r3
 8012b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b92:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012b94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b98:	2b02      	cmp	r3, #2
 8012b9a:	d103      	bne.n	8012ba4 <find_volume+0x380>
 8012b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b9e:	699b      	ldr	r3, [r3, #24]
 8012ba0:	005b      	lsls	r3, r3, #1
 8012ba2:	e00a      	b.n	8012bba <find_volume+0x396>
 8012ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba6:	699a      	ldr	r2, [r3, #24]
 8012ba8:	4613      	mov	r3, r2
 8012baa:	005b      	lsls	r3, r3, #1
 8012bac:	4413      	add	r3, r2
 8012bae:	085a      	lsrs	r2, r3, #1
 8012bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb2:	699b      	ldr	r3, [r3, #24]
 8012bb4:	f003 0301 	and.w	r3, r3, #1
 8012bb8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012bba:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bbe:	69da      	ldr	r2, [r3, #28]
 8012bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bc2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8012bc6:	0a5b      	lsrs	r3, r3, #9
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d201      	bcs.n	8012bd0 <find_volume+0x3ac>
 8012bcc:	230d      	movs	r3, #13
 8012bce:	e06a      	b.n	8012ca6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8012bd6:	615a      	str	r2, [r3, #20]
 8012bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bda:	695a      	ldr	r2, [r3, #20]
 8012bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bde:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be2:	2280      	movs	r2, #128	; 0x80
 8012be4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012be6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012bea:	2b03      	cmp	r3, #3
 8012bec:	d149      	bne.n	8012c82 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf0:	3334      	adds	r3, #52	; 0x34
 8012bf2:	3330      	adds	r3, #48	; 0x30
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	f7fd fe35 	bl	8010864 <ld_word>
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	d140      	bne.n	8012c82 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c02:	3301      	adds	r3, #1
 8012c04:	4619      	mov	r1, r3
 8012c06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012c08:	f7fe f8dc 	bl	8010dc4 <move_window>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d137      	bne.n	8012c82 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8012c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c14:	2200      	movs	r2, #0
 8012c16:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c1a:	3334      	adds	r3, #52	; 0x34
 8012c1c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7fd fe1f 	bl	8010864 <ld_word>
 8012c26:	4603      	mov	r3, r0
 8012c28:	461a      	mov	r2, r3
 8012c2a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d127      	bne.n	8012c82 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c34:	3334      	adds	r3, #52	; 0x34
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7fd fe2c 	bl	8010894 <ld_dword>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	4a1c      	ldr	r2, [pc, #112]	; (8012cb0 <find_volume+0x48c>)
 8012c40:	4293      	cmp	r3, r2
 8012c42:	d11e      	bne.n	8012c82 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c46:	3334      	adds	r3, #52	; 0x34
 8012c48:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f7fd fe21 	bl	8010894 <ld_dword>
 8012c52:	4603      	mov	r3, r0
 8012c54:	4a17      	ldr	r2, [pc, #92]	; (8012cb4 <find_volume+0x490>)
 8012c56:	4293      	cmp	r3, r2
 8012c58:	d113      	bne.n	8012c82 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c5c:	3334      	adds	r3, #52	; 0x34
 8012c5e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012c62:	4618      	mov	r0, r3
 8012c64:	f7fd fe16 	bl	8010894 <ld_dword>
 8012c68:	4602      	mov	r2, r0
 8012c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c6c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c70:	3334      	adds	r3, #52	; 0x34
 8012c72:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012c76:	4618      	mov	r0, r3
 8012c78:	f7fd fe0c 	bl	8010894 <ld_dword>
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c80:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c84:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012c88:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012c8a:	4b0b      	ldr	r3, [pc, #44]	; (8012cb8 <find_volume+0x494>)
 8012c8c:	881b      	ldrh	r3, [r3, #0]
 8012c8e:	3301      	adds	r3, #1
 8012c90:	b29a      	uxth	r2, r3
 8012c92:	4b09      	ldr	r3, [pc, #36]	; (8012cb8 <find_volume+0x494>)
 8012c94:	801a      	strh	r2, [r3, #0]
 8012c96:	4b08      	ldr	r3, [pc, #32]	; (8012cb8 <find_volume+0x494>)
 8012c98:	881a      	ldrh	r2, [r3, #0]
 8012c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c9c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012c9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012ca0:	f7fe f828 	bl	8010cf4 <clear_lock>
#endif
	return FR_OK;
 8012ca4:	2300      	movs	r3, #0
}
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	3758      	adds	r7, #88	; 0x58
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd80      	pop	{r7, pc}
 8012cae:	bf00      	nop
 8012cb0:	41615252 	.word	0x41615252
 8012cb4:	61417272 	.word	0x61417272
 8012cb8:	200073d8 	.word	0x200073d8

08012cbc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b084      	sub	sp, #16
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
 8012cc4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012cc6:	2309      	movs	r3, #9
 8012cc8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d01c      	beq.n	8012d0a <validate+0x4e>
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d018      	beq.n	8012d0a <validate+0x4e>
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	781b      	ldrb	r3, [r3, #0]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d013      	beq.n	8012d0a <validate+0x4e>
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	889a      	ldrh	r2, [r3, #4]
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	88db      	ldrh	r3, [r3, #6]
 8012cec:	429a      	cmp	r2, r3
 8012cee:	d10c      	bne.n	8012d0a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	785b      	ldrb	r3, [r3, #1]
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7fd fd0e 	bl	8010718 <disk_status>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	f003 0301 	and.w	r3, r3, #1
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d101      	bne.n	8012d0a <validate+0x4e>
			res = FR_OK;
 8012d06:	2300      	movs	r3, #0
 8012d08:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012d0a:	7bfb      	ldrb	r3, [r7, #15]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d102      	bne.n	8012d16 <validate+0x5a>
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	e000      	b.n	8012d18 <validate+0x5c>
 8012d16:	2300      	movs	r3, #0
 8012d18:	683a      	ldr	r2, [r7, #0]
 8012d1a:	6013      	str	r3, [r2, #0]
	return res;
 8012d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d1e:	4618      	mov	r0, r3
 8012d20:	3710      	adds	r7, #16
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}
	...

08012d28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b088      	sub	sp, #32
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	60f8      	str	r0, [r7, #12]
 8012d30:	60b9      	str	r1, [r7, #8]
 8012d32:	4613      	mov	r3, r2
 8012d34:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012d3a:	f107 0310 	add.w	r3, r7, #16
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7ff fcd5 	bl	80126ee <get_ldnumber>
 8012d44:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012d46:	69fb      	ldr	r3, [r7, #28]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	da01      	bge.n	8012d50 <f_mount+0x28>
 8012d4c:	230b      	movs	r3, #11
 8012d4e:	e02b      	b.n	8012da8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012d50:	4a17      	ldr	r2, [pc, #92]	; (8012db0 <f_mount+0x88>)
 8012d52:	69fb      	ldr	r3, [r7, #28]
 8012d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d58:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012d5a:	69bb      	ldr	r3, [r7, #24]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d005      	beq.n	8012d6c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012d60:	69b8      	ldr	r0, [r7, #24]
 8012d62:	f7fd ffc7 	bl	8010cf4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012d66:	69bb      	ldr	r3, [r7, #24]
 8012d68:	2200      	movs	r2, #0
 8012d6a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d002      	beq.n	8012d78 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	2200      	movs	r2, #0
 8012d76:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012d78:	68fa      	ldr	r2, [r7, #12]
 8012d7a:	490d      	ldr	r1, [pc, #52]	; (8012db0 <f_mount+0x88>)
 8012d7c:	69fb      	ldr	r3, [r7, #28]
 8012d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d002      	beq.n	8012d8e <f_mount+0x66>
 8012d88:	79fb      	ldrb	r3, [r7, #7]
 8012d8a:	2b01      	cmp	r3, #1
 8012d8c:	d001      	beq.n	8012d92 <f_mount+0x6a>
 8012d8e:	2300      	movs	r3, #0
 8012d90:	e00a      	b.n	8012da8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012d92:	f107 010c 	add.w	r1, r7, #12
 8012d96:	f107 0308 	add.w	r3, r7, #8
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7ff fd41 	bl	8012824 <find_volume>
 8012da2:	4603      	mov	r3, r0
 8012da4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3720      	adds	r7, #32
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}
 8012db0:	200073d0 	.word	0x200073d0

08012db4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b09a      	sub	sp, #104	; 0x68
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	60f8      	str	r0, [r7, #12]
 8012dbc:	60b9      	str	r1, [r7, #8]
 8012dbe:	4613      	mov	r3, r2
 8012dc0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d101      	bne.n	8012dcc <f_open+0x18>
 8012dc8:	2309      	movs	r3, #9
 8012dca:	e1bd      	b.n	8013148 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012dcc:	79fb      	ldrb	r3, [r7, #7]
 8012dce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012dd2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012dd4:	79fa      	ldrb	r2, [r7, #7]
 8012dd6:	f107 0110 	add.w	r1, r7, #16
 8012dda:	f107 0308 	add.w	r3, r7, #8
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7ff fd20 	bl	8012824 <find_volume>
 8012de4:	4603      	mov	r3, r0
 8012de6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8012dea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	f040 81a1 	bne.w	8013136 <f_open+0x382>
		dj.obj.fs = fs;
 8012df4:	693b      	ldr	r3, [r7, #16]
 8012df6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8012df8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012dfc:	f001 fba9 	bl	8014552 <ff_memalloc>
 8012e00:	65b8      	str	r0, [r7, #88]	; 0x58
 8012e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d101      	bne.n	8012e0c <f_open+0x58>
 8012e08:	2311      	movs	r3, #17
 8012e0a:	e19d      	b.n	8013148 <f_open+0x394>
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012e10:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8012e12:	68ba      	ldr	r2, [r7, #8]
 8012e14:	f107 0314 	add.w	r3, r7, #20
 8012e18:	4611      	mov	r1, r2
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7ff fbf6 	bl	801260c <follow_path>
 8012e20:	4603      	mov	r3, r0
 8012e22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012e26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d11a      	bne.n	8012e64 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012e2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012e32:	b25b      	sxtb	r3, r3
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	da03      	bge.n	8012e40 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8012e38:	2306      	movs	r3, #6
 8012e3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012e3e:	e011      	b.n	8012e64 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012e40:	79fb      	ldrb	r3, [r7, #7]
 8012e42:	f023 0301 	bic.w	r3, r3, #1
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	bf14      	ite	ne
 8012e4a:	2301      	movne	r3, #1
 8012e4c:	2300      	moveq	r3, #0
 8012e4e:	b2db      	uxtb	r3, r3
 8012e50:	461a      	mov	r2, r3
 8012e52:	f107 0314 	add.w	r3, r7, #20
 8012e56:	4611      	mov	r1, r2
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7fd fe03 	bl	8010a64 <chk_lock>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012e64:	79fb      	ldrb	r3, [r7, #7]
 8012e66:	f003 031c 	and.w	r3, r3, #28
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d07f      	beq.n	8012f6e <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 8012e6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d017      	beq.n	8012ea6 <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012e76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012e7a:	2b04      	cmp	r3, #4
 8012e7c:	d10e      	bne.n	8012e9c <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012e7e:	f7fd fe4d 	bl	8010b1c <enq_lock>
 8012e82:	4603      	mov	r3, r0
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d006      	beq.n	8012e96 <f_open+0xe2>
 8012e88:	f107 0314 	add.w	r3, r7, #20
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f7ff f82f 	bl	8011ef0 <dir_register>
 8012e92:	4603      	mov	r3, r0
 8012e94:	e000      	b.n	8012e98 <f_open+0xe4>
 8012e96:	2312      	movs	r3, #18
 8012e98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012e9c:	79fb      	ldrb	r3, [r7, #7]
 8012e9e:	f043 0308 	orr.w	r3, r3, #8
 8012ea2:	71fb      	strb	r3, [r7, #7]
 8012ea4:	e010      	b.n	8012ec8 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012ea6:	7ebb      	ldrb	r3, [r7, #26]
 8012ea8:	f003 0311 	and.w	r3, r3, #17
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d003      	beq.n	8012eb8 <f_open+0x104>
					res = FR_DENIED;
 8012eb0:	2307      	movs	r3, #7
 8012eb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012eb6:	e007      	b.n	8012ec8 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012eb8:	79fb      	ldrb	r3, [r7, #7]
 8012eba:	f003 0304 	and.w	r3, r3, #4
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d002      	beq.n	8012ec8 <f_open+0x114>
 8012ec2:	2308      	movs	r3, #8
 8012ec4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012ec8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d168      	bne.n	8012fa2 <f_open+0x1ee>
 8012ed0:	79fb      	ldrb	r3, [r7, #7]
 8012ed2:	f003 0308 	and.w	r3, r3, #8
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d063      	beq.n	8012fa2 <f_open+0x1ee>
				dw = GET_FATTIME();
 8012eda:	f7fd fcbb 	bl	8010854 <get_fattime>
 8012ede:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ee2:	330e      	adds	r3, #14
 8012ee4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f7fd fd12 	bl	8010910 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eee:	3316      	adds	r3, #22
 8012ef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f7fd fd0c 	bl	8010910 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012efa:	330b      	adds	r3, #11
 8012efc:	2220      	movs	r2, #32
 8012efe:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f04:	4611      	mov	r1, r2
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7fe fc61 	bl	80117ce <ld_clust>
 8012f0c:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012f0e:	693b      	ldr	r3, [r7, #16]
 8012f10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012f12:	2200      	movs	r2, #0
 8012f14:	4618      	mov	r0, r3
 8012f16:	f7fe fc79 	bl	801180c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f1c:	331c      	adds	r3, #28
 8012f1e:	2100      	movs	r1, #0
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7fd fcf5 	bl	8010910 <st_dword>
					fs->wflag = 1;
 8012f26:	693b      	ldr	r3, [r7, #16]
 8012f28:	2201      	movs	r2, #1
 8012f2a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d037      	beq.n	8012fa2 <f_open+0x1ee>
						dw = fs->winsect;
 8012f32:	693b      	ldr	r3, [r7, #16]
 8012f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f36:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8012f38:	f107 0314 	add.w	r3, r7, #20
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7fe f98c 	bl	801125e <remove_chain>
 8012f46:	4603      	mov	r3, r0
 8012f48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8012f4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d126      	bne.n	8012fa2 <f_open+0x1ee>
							res = move_window(fs, dw);
 8012f54:	693b      	ldr	r3, [r7, #16]
 8012f56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f7fd ff33 	bl	8010dc4 <move_window>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012f68:	3a01      	subs	r2, #1
 8012f6a:	611a      	str	r2, [r3, #16]
 8012f6c:	e019      	b.n	8012fa2 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012f6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d115      	bne.n	8012fa2 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012f76:	7ebb      	ldrb	r3, [r7, #26]
 8012f78:	f003 0310 	and.w	r3, r3, #16
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d003      	beq.n	8012f88 <f_open+0x1d4>
					res = FR_NO_FILE;
 8012f80:	2304      	movs	r3, #4
 8012f82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012f86:	e00c      	b.n	8012fa2 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012f88:	79fb      	ldrb	r3, [r7, #7]
 8012f8a:	f003 0302 	and.w	r3, r3, #2
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d007      	beq.n	8012fa2 <f_open+0x1ee>
 8012f92:	7ebb      	ldrb	r3, [r7, #26]
 8012f94:	f003 0301 	and.w	r3, r3, #1
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d002      	beq.n	8012fa2 <f_open+0x1ee>
						res = FR_DENIED;
 8012f9c:	2307      	movs	r3, #7
 8012f9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8012fa2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d128      	bne.n	8012ffc <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012faa:	79fb      	ldrb	r3, [r7, #7]
 8012fac:	f003 0308 	and.w	r3, r3, #8
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d003      	beq.n	8012fbc <f_open+0x208>
				mode |= FA_MODIFIED;
 8012fb4:	79fb      	ldrb	r3, [r7, #7]
 8012fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fba:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012fbc:	693b      	ldr	r3, [r7, #16]
 8012fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012fca:	79fb      	ldrb	r3, [r7, #7]
 8012fcc:	f023 0301 	bic.w	r3, r3, #1
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	bf14      	ite	ne
 8012fd4:	2301      	movne	r3, #1
 8012fd6:	2300      	moveq	r3, #0
 8012fd8:	b2db      	uxtb	r3, r3
 8012fda:	461a      	mov	r2, r3
 8012fdc:	f107 0314 	add.w	r3, r7, #20
 8012fe0:	4611      	mov	r1, r2
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7fd fdbc 	bl	8010b60 <inc_lock>
 8012fe8:	4602      	mov	r2, r0
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	691b      	ldr	r3, [r3, #16]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d102      	bne.n	8012ffc <f_open+0x248>
 8012ff6:	2302      	movs	r3, #2
 8012ff8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012ffc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013000:	2b00      	cmp	r3, #0
 8013002:	f040 8095 	bne.w	8013130 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013006:	693b      	ldr	r3, [r7, #16]
 8013008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801300a:	4611      	mov	r1, r2
 801300c:	4618      	mov	r0, r3
 801300e:	f7fe fbde 	bl	80117ce <ld_clust>
 8013012:	4602      	mov	r2, r0
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801301a:	331c      	adds	r3, #28
 801301c:	4618      	mov	r0, r3
 801301e:	f7fd fc39 	bl	8010894 <ld_dword>
 8013022:	4602      	mov	r2, r0
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	2200      	movs	r2, #0
 801302c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801302e:	693a      	ldr	r2, [r7, #16]
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013034:	693b      	ldr	r3, [r7, #16]
 8013036:	88da      	ldrh	r2, [r3, #6]
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	79fa      	ldrb	r2, [r7, #7]
 8013040:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	2200      	movs	r2, #0
 8013046:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	2200      	movs	r2, #0
 801304c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	2200      	movs	r2, #0
 8013052:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	3330      	adds	r3, #48	; 0x30
 8013058:	f44f 7200 	mov.w	r2, #512	; 0x200
 801305c:	2100      	movs	r1, #0
 801305e:	4618      	mov	r0, r3
 8013060:	f7fd fca3 	bl	80109aa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013064:	79fb      	ldrb	r3, [r7, #7]
 8013066:	f003 0320 	and.w	r3, r3, #32
 801306a:	2b00      	cmp	r3, #0
 801306c:	d060      	beq.n	8013130 <f_open+0x37c>
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	68db      	ldr	r3, [r3, #12]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d05c      	beq.n	8013130 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	68da      	ldr	r2, [r3, #12]
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801307e:	693b      	ldr	r3, [r7, #16]
 8013080:	895b      	ldrh	r3, [r3, #10]
 8013082:	025b      	lsls	r3, r3, #9
 8013084:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	689b      	ldr	r3, [r3, #8]
 801308a:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	68db      	ldr	r3, [r3, #12]
 8013090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013092:	e016      	b.n	80130c2 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013098:	4618      	mov	r0, r3
 801309a:	f7fd ff4e 	bl	8010f3a <get_fat>
 801309e:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80130a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130a2:	2b01      	cmp	r3, #1
 80130a4:	d802      	bhi.n	80130ac <f_open+0x2f8>
 80130a6:	2302      	movs	r3, #2
 80130a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80130ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130b2:	d102      	bne.n	80130ba <f_open+0x306>
 80130b4:	2301      	movs	r3, #1
 80130b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80130ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80130bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130be:	1ad3      	subs	r3, r2, r3
 80130c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80130c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d103      	bne.n	80130d2 <f_open+0x31e>
 80130ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80130cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130ce:	429a      	cmp	r2, r3
 80130d0:	d8e0      	bhi.n	8013094 <f_open+0x2e0>
				}
				fp->clust = clst;
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80130d6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80130d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d127      	bne.n	8013130 <f_open+0x37c>
 80130e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80130e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d022      	beq.n	8013130 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80130ea:	693b      	ldr	r3, [r7, #16]
 80130ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80130ee:	4618      	mov	r0, r3
 80130f0:	f7fd ff04 	bl	8010efc <clust2sect>
 80130f4:	64b8      	str	r0, [r7, #72]	; 0x48
 80130f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d103      	bne.n	8013104 <f_open+0x350>
						res = FR_INT_ERR;
 80130fc:	2302      	movs	r3, #2
 80130fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8013102:	e015      	b.n	8013130 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013106:	0a5a      	lsrs	r2, r3, #9
 8013108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801310a:	441a      	add	r2, r3
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013110:	693b      	ldr	r3, [r7, #16]
 8013112:	7858      	ldrb	r0, [r3, #1]
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	6a1a      	ldr	r2, [r3, #32]
 801311e:	2301      	movs	r3, #1
 8013120:	f7fd fb3a 	bl	8010798 <disk_read>
 8013124:	4603      	mov	r3, r0
 8013126:	2b00      	cmp	r3, #0
 8013128:	d002      	beq.n	8013130 <f_open+0x37c>
 801312a:	2301      	movs	r3, #1
 801312c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8013130:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8013132:	f001 fa1a 	bl	801456a <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013136:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801313a:	2b00      	cmp	r3, #0
 801313c:	d002      	beq.n	8013144 <f_open+0x390>
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	2200      	movs	r2, #0
 8013142:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013144:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8013148:	4618      	mov	r0, r3
 801314a:	3768      	adds	r7, #104	; 0x68
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}

08013150 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b08e      	sub	sp, #56	; 0x38
 8013154:	af00      	add	r7, sp, #0
 8013156:	60f8      	str	r0, [r7, #12]
 8013158:	60b9      	str	r1, [r7, #8]
 801315a:	607a      	str	r2, [r7, #4]
 801315c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8013162:	683b      	ldr	r3, [r7, #0]
 8013164:	2200      	movs	r2, #0
 8013166:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	f107 0214 	add.w	r2, r7, #20
 801316e:	4611      	mov	r1, r2
 8013170:	4618      	mov	r0, r3
 8013172:	f7ff fda3 	bl	8012cbc <validate>
 8013176:	4603      	mov	r3, r0
 8013178:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801317c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013180:	2b00      	cmp	r3, #0
 8013182:	d107      	bne.n	8013194 <f_read+0x44>
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	7d5b      	ldrb	r3, [r3, #21]
 8013188:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801318c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013190:	2b00      	cmp	r3, #0
 8013192:	d002      	beq.n	801319a <f_read+0x4a>
 8013194:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013198:	e115      	b.n	80133c6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	7d1b      	ldrb	r3, [r3, #20]
 801319e:	f003 0301 	and.w	r3, r3, #1
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d101      	bne.n	80131aa <f_read+0x5a>
 80131a6:	2307      	movs	r3, #7
 80131a8:	e10d      	b.n	80133c6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	68da      	ldr	r2, [r3, #12]
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	699b      	ldr	r3, [r3, #24]
 80131b2:	1ad3      	subs	r3, r2, r3
 80131b4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80131b6:	687a      	ldr	r2, [r7, #4]
 80131b8:	6a3b      	ldr	r3, [r7, #32]
 80131ba:	429a      	cmp	r2, r3
 80131bc:	f240 80fe 	bls.w	80133bc <f_read+0x26c>
 80131c0:	6a3b      	ldr	r3, [r7, #32]
 80131c2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80131c4:	e0fa      	b.n	80133bc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	699b      	ldr	r3, [r3, #24]
 80131ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	f040 80c6 	bne.w	8013360 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	699b      	ldr	r3, [r3, #24]
 80131d8:	0a5b      	lsrs	r3, r3, #9
 80131da:	697a      	ldr	r2, [r7, #20]
 80131dc:	8952      	ldrh	r2, [r2, #10]
 80131de:	3a01      	subs	r2, #1
 80131e0:	4013      	ands	r3, r2
 80131e2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80131e4:	69fb      	ldr	r3, [r7, #28]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d12f      	bne.n	801324a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	699b      	ldr	r3, [r3, #24]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d103      	bne.n	80131fa <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	689b      	ldr	r3, [r3, #8]
 80131f6:	633b      	str	r3, [r7, #48]	; 0x30
 80131f8:	e013      	b.n	8013222 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d007      	beq.n	8013212 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	699b      	ldr	r3, [r3, #24]
 8013206:	4619      	mov	r1, r3
 8013208:	68f8      	ldr	r0, [r7, #12]
 801320a:	f7fe f925 	bl	8011458 <clmt_clust>
 801320e:	6338      	str	r0, [r7, #48]	; 0x30
 8013210:	e007      	b.n	8013222 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013212:	68fa      	ldr	r2, [r7, #12]
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	69db      	ldr	r3, [r3, #28]
 8013218:	4619      	mov	r1, r3
 801321a:	4610      	mov	r0, r2
 801321c:	f7fd fe8d 	bl	8010f3a <get_fat>
 8013220:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013224:	2b01      	cmp	r3, #1
 8013226:	d804      	bhi.n	8013232 <f_read+0xe2>
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	2202      	movs	r2, #2
 801322c:	755a      	strb	r2, [r3, #21]
 801322e:	2302      	movs	r3, #2
 8013230:	e0c9      	b.n	80133c6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013238:	d104      	bne.n	8013244 <f_read+0xf4>
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	2201      	movs	r2, #1
 801323e:	755a      	strb	r2, [r3, #21]
 8013240:	2301      	movs	r3, #1
 8013242:	e0c0      	b.n	80133c6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013248:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801324a:	697a      	ldr	r2, [r7, #20]
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	69db      	ldr	r3, [r3, #28]
 8013250:	4619      	mov	r1, r3
 8013252:	4610      	mov	r0, r2
 8013254:	f7fd fe52 	bl	8010efc <clust2sect>
 8013258:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801325a:	69bb      	ldr	r3, [r7, #24]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d104      	bne.n	801326a <f_read+0x11a>
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	2202      	movs	r2, #2
 8013264:	755a      	strb	r2, [r3, #21]
 8013266:	2302      	movs	r3, #2
 8013268:	e0ad      	b.n	80133c6 <f_read+0x276>
			sect += csect;
 801326a:	69ba      	ldr	r2, [r7, #24]
 801326c:	69fb      	ldr	r3, [r7, #28]
 801326e:	4413      	add	r3, r2
 8013270:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	0a5b      	lsrs	r3, r3, #9
 8013276:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801327a:	2b00      	cmp	r3, #0
 801327c:	d039      	beq.n	80132f2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801327e:	69fa      	ldr	r2, [r7, #28]
 8013280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013282:	4413      	add	r3, r2
 8013284:	697a      	ldr	r2, [r7, #20]
 8013286:	8952      	ldrh	r2, [r2, #10]
 8013288:	4293      	cmp	r3, r2
 801328a:	d905      	bls.n	8013298 <f_read+0x148>
					cc = fs->csize - csect;
 801328c:	697b      	ldr	r3, [r7, #20]
 801328e:	895b      	ldrh	r3, [r3, #10]
 8013290:	461a      	mov	r2, r3
 8013292:	69fb      	ldr	r3, [r7, #28]
 8013294:	1ad3      	subs	r3, r2, r3
 8013296:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013298:	697b      	ldr	r3, [r7, #20]
 801329a:	7858      	ldrb	r0, [r3, #1]
 801329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801329e:	69ba      	ldr	r2, [r7, #24]
 80132a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80132a2:	f7fd fa79 	bl	8010798 <disk_read>
 80132a6:	4603      	mov	r3, r0
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d004      	beq.n	80132b6 <f_read+0x166>
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	2201      	movs	r2, #1
 80132b0:	755a      	strb	r2, [r3, #21]
 80132b2:	2301      	movs	r3, #1
 80132b4:	e087      	b.n	80133c6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	7d1b      	ldrb	r3, [r3, #20]
 80132ba:	b25b      	sxtb	r3, r3
 80132bc:	2b00      	cmp	r3, #0
 80132be:	da14      	bge.n	80132ea <f_read+0x19a>
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	6a1a      	ldr	r2, [r3, #32]
 80132c4:	69bb      	ldr	r3, [r7, #24]
 80132c6:	1ad3      	subs	r3, r2, r3
 80132c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132ca:	429a      	cmp	r2, r3
 80132cc:	d90d      	bls.n	80132ea <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	6a1a      	ldr	r2, [r3, #32]
 80132d2:	69bb      	ldr	r3, [r7, #24]
 80132d4:	1ad3      	subs	r3, r2, r3
 80132d6:	025b      	lsls	r3, r3, #9
 80132d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132da:	18d0      	adds	r0, r2, r3
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	3330      	adds	r3, #48	; 0x30
 80132e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80132e4:	4619      	mov	r1, r3
 80132e6:	f7fd fb3f 	bl	8010968 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80132ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ec:	025b      	lsls	r3, r3, #9
 80132ee:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80132f0:	e050      	b.n	8013394 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	6a1b      	ldr	r3, [r3, #32]
 80132f6:	69ba      	ldr	r2, [r7, #24]
 80132f8:	429a      	cmp	r2, r3
 80132fa:	d02e      	beq.n	801335a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	7d1b      	ldrb	r3, [r3, #20]
 8013300:	b25b      	sxtb	r3, r3
 8013302:	2b00      	cmp	r3, #0
 8013304:	da18      	bge.n	8013338 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	7858      	ldrb	r0, [r3, #1]
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	6a1a      	ldr	r2, [r3, #32]
 8013314:	2301      	movs	r3, #1
 8013316:	f7fd fa5f 	bl	80107d8 <disk_write>
 801331a:	4603      	mov	r3, r0
 801331c:	2b00      	cmp	r3, #0
 801331e:	d004      	beq.n	801332a <f_read+0x1da>
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	2201      	movs	r2, #1
 8013324:	755a      	strb	r2, [r3, #21]
 8013326:	2301      	movs	r3, #1
 8013328:	e04d      	b.n	80133c6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	7d1b      	ldrb	r3, [r3, #20]
 801332e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013332:	b2da      	uxtb	r2, r3
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	7858      	ldrb	r0, [r3, #1]
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013342:	2301      	movs	r3, #1
 8013344:	69ba      	ldr	r2, [r7, #24]
 8013346:	f7fd fa27 	bl	8010798 <disk_read>
 801334a:	4603      	mov	r3, r0
 801334c:	2b00      	cmp	r3, #0
 801334e:	d004      	beq.n	801335a <f_read+0x20a>
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	2201      	movs	r2, #1
 8013354:	755a      	strb	r2, [r3, #21]
 8013356:	2301      	movs	r3, #1
 8013358:	e035      	b.n	80133c6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	69ba      	ldr	r2, [r7, #24]
 801335e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	699b      	ldr	r3, [r3, #24]
 8013364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013368:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801336c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801336e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	429a      	cmp	r2, r3
 8013374:	d901      	bls.n	801337a <f_read+0x22a>
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	699b      	ldr	r3, [r3, #24]
 8013384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013388:	4413      	add	r3, r2
 801338a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801338c:	4619      	mov	r1, r3
 801338e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013390:	f7fd faea 	bl	8010968 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013398:	4413      	add	r3, r2
 801339a:	627b      	str	r3, [r7, #36]	; 0x24
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	699a      	ldr	r2, [r3, #24]
 80133a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a2:	441a      	add	r2, r3
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	619a      	str	r2, [r3, #24]
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	681a      	ldr	r2, [r3, #0]
 80133ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ae:	441a      	add	r2, r3
 80133b0:	683b      	ldr	r3, [r7, #0]
 80133b2:	601a      	str	r2, [r3, #0]
 80133b4:	687a      	ldr	r2, [r7, #4]
 80133b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b8:	1ad3      	subs	r3, r2, r3
 80133ba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	f47f af01 	bne.w	80131c6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80133c4:	2300      	movs	r3, #0
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	3738      	adds	r7, #56	; 0x38
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd80      	pop	{r7, pc}

080133ce <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80133ce:	b580      	push	{r7, lr}
 80133d0:	b08c      	sub	sp, #48	; 0x30
 80133d2:	af00      	add	r7, sp, #0
 80133d4:	60f8      	str	r0, [r7, #12]
 80133d6:	60b9      	str	r1, [r7, #8]
 80133d8:	607a      	str	r2, [r7, #4]
 80133da:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	2200      	movs	r2, #0
 80133e4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	f107 0210 	add.w	r2, r7, #16
 80133ec:	4611      	mov	r1, r2
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7ff fc64 	bl	8012cbc <validate>
 80133f4:	4603      	mov	r3, r0
 80133f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80133fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d107      	bne.n	8013412 <f_write+0x44>
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	7d5b      	ldrb	r3, [r3, #21]
 8013406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801340a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801340e:	2b00      	cmp	r3, #0
 8013410:	d002      	beq.n	8013418 <f_write+0x4a>
 8013412:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013416:	e14b      	b.n	80136b0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	7d1b      	ldrb	r3, [r3, #20]
 801341c:	f003 0302 	and.w	r3, r3, #2
 8013420:	2b00      	cmp	r3, #0
 8013422:	d101      	bne.n	8013428 <f_write+0x5a>
 8013424:	2307      	movs	r3, #7
 8013426:	e143      	b.n	80136b0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	699a      	ldr	r2, [r3, #24]
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	441a      	add	r2, r3
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	699b      	ldr	r3, [r3, #24]
 8013434:	429a      	cmp	r2, r3
 8013436:	f080 812d 	bcs.w	8013694 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	699b      	ldr	r3, [r3, #24]
 801343e:	43db      	mvns	r3, r3
 8013440:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013442:	e127      	b.n	8013694 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	699b      	ldr	r3, [r3, #24]
 8013448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801344c:	2b00      	cmp	r3, #0
 801344e:	f040 80e3 	bne.w	8013618 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	699b      	ldr	r3, [r3, #24]
 8013456:	0a5b      	lsrs	r3, r3, #9
 8013458:	693a      	ldr	r2, [r7, #16]
 801345a:	8952      	ldrh	r2, [r2, #10]
 801345c:	3a01      	subs	r2, #1
 801345e:	4013      	ands	r3, r2
 8013460:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013462:	69bb      	ldr	r3, [r7, #24]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d143      	bne.n	80134f0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	699b      	ldr	r3, [r3, #24]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d10c      	bne.n	801348a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	689b      	ldr	r3, [r3, #8]
 8013474:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013478:	2b00      	cmp	r3, #0
 801347a:	d11a      	bne.n	80134b2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	2100      	movs	r1, #0
 8013480:	4618      	mov	r0, r3
 8013482:	f7fd ff51 	bl	8011328 <create_chain>
 8013486:	62b8      	str	r0, [r7, #40]	; 0x28
 8013488:	e013      	b.n	80134b2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801348e:	2b00      	cmp	r3, #0
 8013490:	d007      	beq.n	80134a2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	699b      	ldr	r3, [r3, #24]
 8013496:	4619      	mov	r1, r3
 8013498:	68f8      	ldr	r0, [r7, #12]
 801349a:	f7fd ffdd 	bl	8011458 <clmt_clust>
 801349e:	62b8      	str	r0, [r7, #40]	; 0x28
 80134a0:	e007      	b.n	80134b2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80134a2:	68fa      	ldr	r2, [r7, #12]
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	69db      	ldr	r3, [r3, #28]
 80134a8:	4619      	mov	r1, r3
 80134aa:	4610      	mov	r0, r2
 80134ac:	f7fd ff3c 	bl	8011328 <create_chain>
 80134b0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80134b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	f000 80f2 	beq.w	801369e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80134ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134bc:	2b01      	cmp	r3, #1
 80134be:	d104      	bne.n	80134ca <f_write+0xfc>
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	2202      	movs	r2, #2
 80134c4:	755a      	strb	r2, [r3, #21]
 80134c6:	2302      	movs	r3, #2
 80134c8:	e0f2      	b.n	80136b0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80134ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134d0:	d104      	bne.n	80134dc <f_write+0x10e>
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	2201      	movs	r2, #1
 80134d6:	755a      	strb	r2, [r3, #21]
 80134d8:	2301      	movs	r3, #1
 80134da:	e0e9      	b.n	80136b0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134e0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	689b      	ldr	r3, [r3, #8]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d102      	bne.n	80134f0 <f_write+0x122>
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134ee:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	7d1b      	ldrb	r3, [r3, #20]
 80134f4:	b25b      	sxtb	r3, r3
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	da18      	bge.n	801352c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80134fa:	693b      	ldr	r3, [r7, #16]
 80134fc:	7858      	ldrb	r0, [r3, #1]
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	6a1a      	ldr	r2, [r3, #32]
 8013508:	2301      	movs	r3, #1
 801350a:	f7fd f965 	bl	80107d8 <disk_write>
 801350e:	4603      	mov	r3, r0
 8013510:	2b00      	cmp	r3, #0
 8013512:	d004      	beq.n	801351e <f_write+0x150>
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	2201      	movs	r2, #1
 8013518:	755a      	strb	r2, [r3, #21]
 801351a:	2301      	movs	r3, #1
 801351c:	e0c8      	b.n	80136b0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	7d1b      	ldrb	r3, [r3, #20]
 8013522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013526:	b2da      	uxtb	r2, r3
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801352c:	693a      	ldr	r2, [r7, #16]
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	69db      	ldr	r3, [r3, #28]
 8013532:	4619      	mov	r1, r3
 8013534:	4610      	mov	r0, r2
 8013536:	f7fd fce1 	bl	8010efc <clust2sect>
 801353a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d104      	bne.n	801354c <f_write+0x17e>
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	2202      	movs	r2, #2
 8013546:	755a      	strb	r2, [r3, #21]
 8013548:	2302      	movs	r3, #2
 801354a:	e0b1      	b.n	80136b0 <f_write+0x2e2>
			sect += csect;
 801354c:	697a      	ldr	r2, [r7, #20]
 801354e:	69bb      	ldr	r3, [r7, #24]
 8013550:	4413      	add	r3, r2
 8013552:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	0a5b      	lsrs	r3, r3, #9
 8013558:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801355a:	6a3b      	ldr	r3, [r7, #32]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d03c      	beq.n	80135da <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013560:	69ba      	ldr	r2, [r7, #24]
 8013562:	6a3b      	ldr	r3, [r7, #32]
 8013564:	4413      	add	r3, r2
 8013566:	693a      	ldr	r2, [r7, #16]
 8013568:	8952      	ldrh	r2, [r2, #10]
 801356a:	4293      	cmp	r3, r2
 801356c:	d905      	bls.n	801357a <f_write+0x1ac>
					cc = fs->csize - csect;
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	895b      	ldrh	r3, [r3, #10]
 8013572:	461a      	mov	r2, r3
 8013574:	69bb      	ldr	r3, [r7, #24]
 8013576:	1ad3      	subs	r3, r2, r3
 8013578:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	7858      	ldrb	r0, [r3, #1]
 801357e:	6a3b      	ldr	r3, [r7, #32]
 8013580:	697a      	ldr	r2, [r7, #20]
 8013582:	69f9      	ldr	r1, [r7, #28]
 8013584:	f7fd f928 	bl	80107d8 <disk_write>
 8013588:	4603      	mov	r3, r0
 801358a:	2b00      	cmp	r3, #0
 801358c:	d004      	beq.n	8013598 <f_write+0x1ca>
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	2201      	movs	r2, #1
 8013592:	755a      	strb	r2, [r3, #21]
 8013594:	2301      	movs	r3, #1
 8013596:	e08b      	b.n	80136b0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	6a1a      	ldr	r2, [r3, #32]
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	1ad3      	subs	r3, r2, r3
 80135a0:	6a3a      	ldr	r2, [r7, #32]
 80135a2:	429a      	cmp	r2, r3
 80135a4:	d915      	bls.n	80135d2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	6a1a      	ldr	r2, [r3, #32]
 80135b0:	697b      	ldr	r3, [r7, #20]
 80135b2:	1ad3      	subs	r3, r2, r3
 80135b4:	025b      	lsls	r3, r3, #9
 80135b6:	69fa      	ldr	r2, [r7, #28]
 80135b8:	4413      	add	r3, r2
 80135ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80135be:	4619      	mov	r1, r3
 80135c0:	f7fd f9d2 	bl	8010968 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	7d1b      	ldrb	r3, [r3, #20]
 80135c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135cc:	b2da      	uxtb	r2, r3
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80135d2:	6a3b      	ldr	r3, [r7, #32]
 80135d4:	025b      	lsls	r3, r3, #9
 80135d6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80135d8:	e03f      	b.n	801365a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	6a1b      	ldr	r3, [r3, #32]
 80135de:	697a      	ldr	r2, [r7, #20]
 80135e0:	429a      	cmp	r2, r3
 80135e2:	d016      	beq.n	8013612 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	699a      	ldr	r2, [r3, #24]
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d210      	bcs.n	8013612 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	7858      	ldrb	r0, [r3, #1]
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80135fa:	2301      	movs	r3, #1
 80135fc:	697a      	ldr	r2, [r7, #20]
 80135fe:	f7fd f8cb 	bl	8010798 <disk_read>
 8013602:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013604:	2b00      	cmp	r3, #0
 8013606:	d004      	beq.n	8013612 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	2201      	movs	r2, #1
 801360c:	755a      	strb	r2, [r3, #21]
 801360e:	2301      	movs	r3, #1
 8013610:	e04e      	b.n	80136b0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	697a      	ldr	r2, [r7, #20]
 8013616:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	699b      	ldr	r3, [r3, #24]
 801361c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013620:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8013624:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	429a      	cmp	r2, r3
 801362c:	d901      	bls.n	8013632 <f_write+0x264>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	699b      	ldr	r3, [r3, #24]
 801363c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013640:	4413      	add	r3, r2
 8013642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013644:	69f9      	ldr	r1, [r7, #28]
 8013646:	4618      	mov	r0, r3
 8013648:	f7fd f98e 	bl	8010968 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	7d1b      	ldrb	r3, [r3, #20]
 8013650:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013654:	b2da      	uxtb	r2, r3
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801365a:	69fa      	ldr	r2, [r7, #28]
 801365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801365e:	4413      	add	r3, r2
 8013660:	61fb      	str	r3, [r7, #28]
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	699a      	ldr	r2, [r3, #24]
 8013666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013668:	441a      	add	r2, r3
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	619a      	str	r2, [r3, #24]
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	68da      	ldr	r2, [r3, #12]
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	699b      	ldr	r3, [r3, #24]
 8013676:	429a      	cmp	r2, r3
 8013678:	bf38      	it	cc
 801367a:	461a      	movcc	r2, r3
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	60da      	str	r2, [r3, #12]
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	681a      	ldr	r2, [r3, #0]
 8013684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013686:	441a      	add	r2, r3
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	601a      	str	r2, [r3, #0]
 801368c:	687a      	ldr	r2, [r7, #4]
 801368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013690:	1ad3      	subs	r3, r2, r3
 8013692:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2b00      	cmp	r3, #0
 8013698:	f47f aed4 	bne.w	8013444 <f_write+0x76>
 801369c:	e000      	b.n	80136a0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801369e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	7d1b      	ldrb	r3, [r3, #20]
 80136a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136a8:	b2da      	uxtb	r2, r3
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80136ae:	2300      	movs	r3, #0
}
 80136b0:	4618      	mov	r0, r3
 80136b2:	3730      	adds	r7, #48	; 0x30
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}

080136b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b086      	sub	sp, #24
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	f107 0208 	add.w	r2, r7, #8
 80136c6:	4611      	mov	r1, r2
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7ff faf7 	bl	8012cbc <validate>
 80136ce:	4603      	mov	r3, r0
 80136d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80136d2:	7dfb      	ldrb	r3, [r7, #23]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d168      	bne.n	80137aa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	7d1b      	ldrb	r3, [r3, #20]
 80136dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d062      	beq.n	80137aa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	7d1b      	ldrb	r3, [r3, #20]
 80136e8:	b25b      	sxtb	r3, r3
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	da15      	bge.n	801371a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	7858      	ldrb	r0, [r3, #1]
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	6a1a      	ldr	r2, [r3, #32]
 80136fc:	2301      	movs	r3, #1
 80136fe:	f7fd f86b 	bl	80107d8 <disk_write>
 8013702:	4603      	mov	r3, r0
 8013704:	2b00      	cmp	r3, #0
 8013706:	d001      	beq.n	801370c <f_sync+0x54>
 8013708:	2301      	movs	r3, #1
 801370a:	e04f      	b.n	80137ac <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	7d1b      	ldrb	r3, [r3, #20]
 8013710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013714:	b2da      	uxtb	r2, r3
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801371a:	f7fd f89b 	bl	8010854 <get_fattime>
 801371e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013720:	68ba      	ldr	r2, [r7, #8]
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013726:	4619      	mov	r1, r3
 8013728:	4610      	mov	r0, r2
 801372a:	f7fd fb4b 	bl	8010dc4 <move_window>
 801372e:	4603      	mov	r3, r0
 8013730:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013732:	7dfb      	ldrb	r3, [r7, #23]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d138      	bne.n	80137aa <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801373c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	330b      	adds	r3, #11
 8013742:	781a      	ldrb	r2, [r3, #0]
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	330b      	adds	r3, #11
 8013748:	f042 0220 	orr.w	r2, r2, #32
 801374c:	b2d2      	uxtb	r2, r2
 801374e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	6818      	ldr	r0, [r3, #0]
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	689b      	ldr	r3, [r3, #8]
 8013758:	461a      	mov	r2, r3
 801375a:	68f9      	ldr	r1, [r7, #12]
 801375c:	f7fe f856 	bl	801180c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	f103 021c 	add.w	r2, r3, #28
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	68db      	ldr	r3, [r3, #12]
 801376a:	4619      	mov	r1, r3
 801376c:	4610      	mov	r0, r2
 801376e:	f7fd f8cf 	bl	8010910 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	3316      	adds	r3, #22
 8013776:	6939      	ldr	r1, [r7, #16]
 8013778:	4618      	mov	r0, r3
 801377a:	f7fd f8c9 	bl	8010910 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	3312      	adds	r3, #18
 8013782:	2100      	movs	r1, #0
 8013784:	4618      	mov	r0, r3
 8013786:	f7fd f8a8 	bl	80108da <st_word>
					fs->wflag = 1;
 801378a:	68bb      	ldr	r3, [r7, #8]
 801378c:	2201      	movs	r2, #1
 801378e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	4618      	mov	r0, r3
 8013794:	f7fd fb44 	bl	8010e20 <sync_fs>
 8013798:	4603      	mov	r3, r0
 801379a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	7d1b      	ldrb	r3, [r3, #20]
 80137a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80137a4:	b2da      	uxtb	r2, r3
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80137aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80137ac:	4618      	mov	r0, r3
 80137ae:	3718      	adds	r7, #24
 80137b0:	46bd      	mov	sp, r7
 80137b2:	bd80      	pop	{r7, pc}

080137b4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b084      	sub	sp, #16
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80137bc:	6878      	ldr	r0, [r7, #4]
 80137be:	f7ff ff7b 	bl	80136b8 <f_sync>
 80137c2:	4603      	mov	r3, r0
 80137c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80137c6:	7bfb      	ldrb	r3, [r7, #15]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d118      	bne.n	80137fe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	f107 0208 	add.w	r2, r7, #8
 80137d2:	4611      	mov	r1, r2
 80137d4:	4618      	mov	r0, r3
 80137d6:	f7ff fa71 	bl	8012cbc <validate>
 80137da:	4603      	mov	r3, r0
 80137dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80137de:	7bfb      	ldrb	r3, [r7, #15]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d10c      	bne.n	80137fe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	691b      	ldr	r3, [r3, #16]
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7fd fa47 	bl	8010c7c <dec_lock>
 80137ee:	4603      	mov	r3, r0
 80137f0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80137f2:	7bfb      	ldrb	r3, [r7, #15]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d102      	bne.n	80137fe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2200      	movs	r2, #0
 80137fc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80137fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8013800:	4618      	mov	r0, r3
 8013802:	3710      	adds	r7, #16
 8013804:	46bd      	mov	sp, r7
 8013806:	bd80      	pop	{r7, pc}

08013808 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b090      	sub	sp, #64	; 0x40
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
 8013810:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	f107 0208 	add.w	r2, r7, #8
 8013818:	4611      	mov	r1, r2
 801381a:	4618      	mov	r0, r3
 801381c:	f7ff fa4e 	bl	8012cbc <validate>
 8013820:	4603      	mov	r3, r0
 8013822:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013826:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801382a:	2b00      	cmp	r3, #0
 801382c:	d103      	bne.n	8013836 <f_lseek+0x2e>
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	7d5b      	ldrb	r3, [r3, #21]
 8013832:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013836:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801383a:	2b00      	cmp	r3, #0
 801383c:	d002      	beq.n	8013844 <f_lseek+0x3c>
 801383e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013842:	e1e6      	b.n	8013c12 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013848:	2b00      	cmp	r3, #0
 801384a:	f000 80d1 	beq.w	80139f0 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013854:	d15a      	bne.n	801390c <f_lseek+0x104>
			tbl = fp->cltbl;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801385a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385e:	1d1a      	adds	r2, r3, #4
 8013860:	627a      	str	r2, [r7, #36]	; 0x24
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	617b      	str	r3, [r7, #20]
 8013866:	2302      	movs	r3, #2
 8013868:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	689b      	ldr	r3, [r3, #8]
 801386e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013872:	2b00      	cmp	r3, #0
 8013874:	d03a      	beq.n	80138ec <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013878:	613b      	str	r3, [r7, #16]
 801387a:	2300      	movs	r3, #0
 801387c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013880:	3302      	adds	r3, #2
 8013882:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013886:	60fb      	str	r3, [r7, #12]
 8013888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801388a:	3301      	adds	r3, #1
 801388c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013892:	4618      	mov	r0, r3
 8013894:	f7fd fb51 	bl	8010f3a <get_fat>
 8013898:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801389c:	2b01      	cmp	r3, #1
 801389e:	d804      	bhi.n	80138aa <f_lseek+0xa2>
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2202      	movs	r2, #2
 80138a4:	755a      	strb	r2, [r3, #21]
 80138a6:	2302      	movs	r3, #2
 80138a8:	e1b3      	b.n	8013c12 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80138aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138b0:	d104      	bne.n	80138bc <f_lseek+0xb4>
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2201      	movs	r2, #1
 80138b6:	755a      	strb	r2, [r3, #21]
 80138b8:	2301      	movs	r3, #1
 80138ba:	e1aa      	b.n	8013c12 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	3301      	adds	r3, #1
 80138c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138c2:	429a      	cmp	r2, r3
 80138c4:	d0de      	beq.n	8013884 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80138c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138c8:	697b      	ldr	r3, [r7, #20]
 80138ca:	429a      	cmp	r2, r3
 80138cc:	d809      	bhi.n	80138e2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80138ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d0:	1d1a      	adds	r2, r3, #4
 80138d2:	627a      	str	r2, [r7, #36]	; 0x24
 80138d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138d6:	601a      	str	r2, [r3, #0]
 80138d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138da:	1d1a      	adds	r2, r3, #4
 80138dc:	627a      	str	r2, [r7, #36]	; 0x24
 80138de:	693a      	ldr	r2, [r7, #16]
 80138e0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	699b      	ldr	r3, [r3, #24]
 80138e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138e8:	429a      	cmp	r2, r3
 80138ea:	d3c4      	bcc.n	8013876 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138f2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80138f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138f6:	697b      	ldr	r3, [r7, #20]
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d803      	bhi.n	8013904 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80138fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138fe:	2200      	movs	r2, #0
 8013900:	601a      	str	r2, [r3, #0]
 8013902:	e184      	b.n	8013c0e <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013904:	2311      	movs	r3, #17
 8013906:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801390a:	e180      	b.n	8013c0e <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	68db      	ldr	r3, [r3, #12]
 8013910:	683a      	ldr	r2, [r7, #0]
 8013912:	429a      	cmp	r2, r3
 8013914:	d902      	bls.n	801391c <f_lseek+0x114>
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	68db      	ldr	r3, [r3, #12]
 801391a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	683a      	ldr	r2, [r7, #0]
 8013920:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013922:	683b      	ldr	r3, [r7, #0]
 8013924:	2b00      	cmp	r3, #0
 8013926:	f000 8172 	beq.w	8013c0e <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	3b01      	subs	r3, #1
 801392e:	4619      	mov	r1, r3
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f7fd fd91 	bl	8011458 <clmt_clust>
 8013936:	4602      	mov	r2, r0
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801393c:	68ba      	ldr	r2, [r7, #8]
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	69db      	ldr	r3, [r3, #28]
 8013942:	4619      	mov	r1, r3
 8013944:	4610      	mov	r0, r2
 8013946:	f7fd fad9 	bl	8010efc <clust2sect>
 801394a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801394c:	69bb      	ldr	r3, [r7, #24]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d104      	bne.n	801395c <f_lseek+0x154>
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	2202      	movs	r2, #2
 8013956:	755a      	strb	r2, [r3, #21]
 8013958:	2302      	movs	r3, #2
 801395a:	e15a      	b.n	8013c12 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	3b01      	subs	r3, #1
 8013960:	0a5b      	lsrs	r3, r3, #9
 8013962:	68ba      	ldr	r2, [r7, #8]
 8013964:	8952      	ldrh	r2, [r2, #10]
 8013966:	3a01      	subs	r2, #1
 8013968:	4013      	ands	r3, r2
 801396a:	69ba      	ldr	r2, [r7, #24]
 801396c:	4413      	add	r3, r2
 801396e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	699b      	ldr	r3, [r3, #24]
 8013974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013978:	2b00      	cmp	r3, #0
 801397a:	f000 8148 	beq.w	8013c0e <f_lseek+0x406>
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	6a1b      	ldr	r3, [r3, #32]
 8013982:	69ba      	ldr	r2, [r7, #24]
 8013984:	429a      	cmp	r2, r3
 8013986:	f000 8142 	beq.w	8013c0e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	7d1b      	ldrb	r3, [r3, #20]
 801398e:	b25b      	sxtb	r3, r3
 8013990:	2b00      	cmp	r3, #0
 8013992:	da18      	bge.n	80139c6 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	7858      	ldrb	r0, [r3, #1]
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	6a1a      	ldr	r2, [r3, #32]
 80139a2:	2301      	movs	r3, #1
 80139a4:	f7fc ff18 	bl	80107d8 <disk_write>
 80139a8:	4603      	mov	r3, r0
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d004      	beq.n	80139b8 <f_lseek+0x1b0>
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2201      	movs	r2, #1
 80139b2:	755a      	strb	r2, [r3, #21]
 80139b4:	2301      	movs	r3, #1
 80139b6:	e12c      	b.n	8013c12 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	7d1b      	ldrb	r3, [r3, #20]
 80139bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139c0:	b2da      	uxtb	r2, r3
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80139c6:	68bb      	ldr	r3, [r7, #8]
 80139c8:	7858      	ldrb	r0, [r3, #1]
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139d0:	2301      	movs	r3, #1
 80139d2:	69ba      	ldr	r2, [r7, #24]
 80139d4:	f7fc fee0 	bl	8010798 <disk_read>
 80139d8:	4603      	mov	r3, r0
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d004      	beq.n	80139e8 <f_lseek+0x1e0>
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2201      	movs	r2, #1
 80139e2:	755a      	strb	r2, [r3, #21]
 80139e4:	2301      	movs	r3, #1
 80139e6:	e114      	b.n	8013c12 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	69ba      	ldr	r2, [r7, #24]
 80139ec:	621a      	str	r2, [r3, #32]
 80139ee:	e10e      	b.n	8013c0e <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	68db      	ldr	r3, [r3, #12]
 80139f4:	683a      	ldr	r2, [r7, #0]
 80139f6:	429a      	cmp	r2, r3
 80139f8:	d908      	bls.n	8013a0c <f_lseek+0x204>
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	7d1b      	ldrb	r3, [r3, #20]
 80139fe:	f003 0302 	and.w	r3, r3, #2
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d102      	bne.n	8013a0c <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	68db      	ldr	r3, [r3, #12]
 8013a0a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	699b      	ldr	r3, [r3, #24]
 8013a10:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013a12:	2300      	movs	r3, #0
 8013a14:	637b      	str	r3, [r7, #52]	; 0x34
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a1a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	f000 80a7 	beq.w	8013b72 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013a24:	68bb      	ldr	r3, [r7, #8]
 8013a26:	895b      	ldrh	r3, [r3, #10]
 8013a28:	025b      	lsls	r3, r3, #9
 8013a2a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013a2c:	6a3b      	ldr	r3, [r7, #32]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d01b      	beq.n	8013a6a <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	1e5a      	subs	r2, r3, #1
 8013a36:	69fb      	ldr	r3, [r7, #28]
 8013a38:	fbb2 f2f3 	udiv	r2, r2, r3
 8013a3c:	6a3b      	ldr	r3, [r7, #32]
 8013a3e:	1e59      	subs	r1, r3, #1
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d30f      	bcc.n	8013a6a <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013a4a:	6a3b      	ldr	r3, [r7, #32]
 8013a4c:	1e5a      	subs	r2, r3, #1
 8013a4e:	69fb      	ldr	r3, [r7, #28]
 8013a50:	425b      	negs	r3, r3
 8013a52:	401a      	ands	r2, r3
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	699b      	ldr	r3, [r3, #24]
 8013a5c:	683a      	ldr	r2, [r7, #0]
 8013a5e:	1ad3      	subs	r3, r2, r3
 8013a60:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	69db      	ldr	r3, [r3, #28]
 8013a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8013a68:	e022      	b.n	8013ab0 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	689b      	ldr	r3, [r3, #8]
 8013a6e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d119      	bne.n	8013aaa <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2100      	movs	r1, #0
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f7fd fc54 	bl	8011328 <create_chain>
 8013a80:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a84:	2b01      	cmp	r3, #1
 8013a86:	d104      	bne.n	8013a92 <f_lseek+0x28a>
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	2202      	movs	r2, #2
 8013a8c:	755a      	strb	r2, [r3, #21]
 8013a8e:	2302      	movs	r3, #2
 8013a90:	e0bf      	b.n	8013c12 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a98:	d104      	bne.n	8013aa4 <f_lseek+0x29c>
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	2201      	movs	r2, #1
 8013a9e:	755a      	strb	r2, [r3, #21]
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	e0b6      	b.n	8013c12 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013aa8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013aae:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d05d      	beq.n	8013b72 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8013ab6:	e03a      	b.n	8013b2e <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8013ab8:	683a      	ldr	r2, [r7, #0]
 8013aba:	69fb      	ldr	r3, [r7, #28]
 8013abc:	1ad3      	subs	r3, r2, r3
 8013abe:	603b      	str	r3, [r7, #0]
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	699a      	ldr	r2, [r3, #24]
 8013ac4:	69fb      	ldr	r3, [r7, #28]
 8013ac6:	441a      	add	r2, r3
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	7d1b      	ldrb	r3, [r3, #20]
 8013ad0:	f003 0302 	and.w	r3, r3, #2
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d00b      	beq.n	8013af0 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7fd fc23 	bl	8011328 <create_chain>
 8013ae2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d108      	bne.n	8013afc <f_lseek+0x2f4>
							ofs = 0; break;
 8013aea:	2300      	movs	r3, #0
 8013aec:	603b      	str	r3, [r7, #0]
 8013aee:	e022      	b.n	8013b36 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7fd fa20 	bl	8010f3a <get_fat>
 8013afa:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b02:	d104      	bne.n	8013b0e <f_lseek+0x306>
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	2201      	movs	r2, #1
 8013b08:	755a      	strb	r2, [r3, #21]
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	e081      	b.n	8013c12 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b10:	2b01      	cmp	r3, #1
 8013b12:	d904      	bls.n	8013b1e <f_lseek+0x316>
 8013b14:	68bb      	ldr	r3, [r7, #8]
 8013b16:	699b      	ldr	r3, [r3, #24]
 8013b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b1a:	429a      	cmp	r2, r3
 8013b1c:	d304      	bcc.n	8013b28 <f_lseek+0x320>
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	2202      	movs	r2, #2
 8013b22:	755a      	strb	r2, [r3, #21]
 8013b24:	2302      	movs	r3, #2
 8013b26:	e074      	b.n	8013c12 <f_lseek+0x40a>
					fp->clust = clst;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b2c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013b2e:	683a      	ldr	r2, [r7, #0]
 8013b30:	69fb      	ldr	r3, [r7, #28]
 8013b32:	429a      	cmp	r2, r3
 8013b34:	d8c0      	bhi.n	8013ab8 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	699a      	ldr	r2, [r3, #24]
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	441a      	add	r2, r3
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d012      	beq.n	8013b72 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7fd f9d3 	bl	8010efc <clust2sect>
 8013b56:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d104      	bne.n	8013b68 <f_lseek+0x360>
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2202      	movs	r2, #2
 8013b62:	755a      	strb	r2, [r3, #21]
 8013b64:	2302      	movs	r3, #2
 8013b66:	e054      	b.n	8013c12 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	0a5b      	lsrs	r3, r3, #9
 8013b6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b6e:	4413      	add	r3, r2
 8013b70:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	699a      	ldr	r2, [r3, #24]
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	68db      	ldr	r3, [r3, #12]
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d90a      	bls.n	8013b94 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	699a      	ldr	r2, [r3, #24]
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	7d1b      	ldrb	r3, [r3, #20]
 8013b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b8e:	b2da      	uxtb	r2, r3
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	699b      	ldr	r3, [r3, #24]
 8013b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d036      	beq.n	8013c0e <f_lseek+0x406>
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	6a1b      	ldr	r3, [r3, #32]
 8013ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d031      	beq.n	8013c0e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	7d1b      	ldrb	r3, [r3, #20]
 8013bae:	b25b      	sxtb	r3, r3
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	da18      	bge.n	8013be6 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	7858      	ldrb	r0, [r3, #1]
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	6a1a      	ldr	r2, [r3, #32]
 8013bc2:	2301      	movs	r3, #1
 8013bc4:	f7fc fe08 	bl	80107d8 <disk_write>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d004      	beq.n	8013bd8 <f_lseek+0x3d0>
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	2201      	movs	r2, #1
 8013bd2:	755a      	strb	r2, [r3, #21]
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	e01c      	b.n	8013c12 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	7d1b      	ldrb	r3, [r3, #20]
 8013bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013be0:	b2da      	uxtb	r2, r3
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	7858      	ldrb	r0, [r3, #1]
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bf4:	f7fc fdd0 	bl	8010798 <disk_read>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d004      	beq.n	8013c08 <f_lseek+0x400>
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	2201      	movs	r2, #1
 8013c02:	755a      	strb	r2, [r3, #21]
 8013c04:	2301      	movs	r3, #1
 8013c06:	e004      	b.n	8013c12 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c0c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013c0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	3740      	adds	r7, #64	; 0x40
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bd80      	pop	{r7, pc}

08013c1a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013c1a:	b580      	push	{r7, lr}
 8013c1c:	b086      	sub	sp, #24
 8013c1e:	af00      	add	r7, sp, #0
 8013c20:	6078      	str	r0, [r7, #4]
 8013c22:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d101      	bne.n	8013c2e <f_opendir+0x14>
 8013c2a:	2309      	movs	r3, #9
 8013c2c:	e074      	b.n	8013d18 <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8013c32:	f107 0108 	add.w	r1, r7, #8
 8013c36:	463b      	mov	r3, r7
 8013c38:	2200      	movs	r2, #0
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7fe fdf2 	bl	8012824 <find_volume>
 8013c40:	4603      	mov	r3, r0
 8013c42:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013c44:	7dfb      	ldrb	r3, [r7, #23]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d15f      	bne.n	8013d0a <f_opendir+0xf0>
		obj->fs = fs;
 8013c4a:	68ba      	ldr	r2, [r7, #8]
 8013c4c:	693b      	ldr	r3, [r7, #16]
 8013c4e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8013c50:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013c54:	f000 fc7d 	bl	8014552 <ff_memalloc>
 8013c58:	60f8      	str	r0, [r7, #12]
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d101      	bne.n	8013c64 <f_opendir+0x4a>
 8013c60:	2311      	movs	r3, #17
 8013c62:	e059      	b.n	8013d18 <f_opendir+0xfe>
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	68fa      	ldr	r2, [r7, #12]
 8013c68:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	4619      	mov	r1, r3
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f7fe fccc 	bl	801260c <follow_path>
 8013c74:	4603      	mov	r3, r0
 8013c76:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8013c78:	7dfb      	ldrb	r3, [r7, #23]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d13d      	bne.n	8013cfa <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013c84:	b25b      	sxtb	r3, r3
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	db12      	blt.n	8013cb0 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8013c8a:	693b      	ldr	r3, [r7, #16]
 8013c8c:	799b      	ldrb	r3, [r3, #6]
 8013c8e:	f003 0310 	and.w	r3, r3, #16
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d00a      	beq.n	8013cac <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8013c96:	68ba      	ldr	r2, [r7, #8]
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	6a1b      	ldr	r3, [r3, #32]
 8013c9c:	4619      	mov	r1, r3
 8013c9e:	4610      	mov	r0, r2
 8013ca0:	f7fd fd95 	bl	80117ce <ld_clust>
 8013ca4:	4602      	mov	r2, r0
 8013ca6:	693b      	ldr	r3, [r7, #16]
 8013ca8:	609a      	str	r2, [r3, #8]
 8013caa:	e001      	b.n	8013cb0 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8013cac:	2305      	movs	r3, #5
 8013cae:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8013cb0:	7dfb      	ldrb	r3, [r7, #23]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d121      	bne.n	8013cfa <f_opendir+0xe0>
				obj->id = fs->id;
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	88da      	ldrh	r2, [r3, #6]
 8013cba:	693b      	ldr	r3, [r7, #16]
 8013cbc:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8013cbe:	2100      	movs	r1, #0
 8013cc0:	6878      	ldr	r0, [r7, #4]
 8013cc2:	f7fd fbfd 	bl	80114c0 <dir_sdi>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8013cca:	7dfb      	ldrb	r3, [r7, #23]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d114      	bne.n	8013cfa <f_opendir+0xe0>
					if (obj->sclust) {
 8013cd0:	693b      	ldr	r3, [r7, #16]
 8013cd2:	689b      	ldr	r3, [r3, #8]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d00d      	beq.n	8013cf4 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8013cd8:	2100      	movs	r1, #0
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f7fc ff40 	bl	8010b60 <inc_lock>
 8013ce0:	4602      	mov	r2, r0
 8013ce2:	693b      	ldr	r3, [r7, #16]
 8013ce4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8013ce6:	693b      	ldr	r3, [r7, #16]
 8013ce8:	691b      	ldr	r3, [r3, #16]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d105      	bne.n	8013cfa <f_opendir+0xe0>
 8013cee:	2312      	movs	r3, #18
 8013cf0:	75fb      	strb	r3, [r7, #23]
 8013cf2:	e002      	b.n	8013cfa <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8013cf4:	693b      	ldr	r3, [r7, #16]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 8013cfa:	68f8      	ldr	r0, [r7, #12]
 8013cfc:	f000 fc35 	bl	801456a <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013d00:	7dfb      	ldrb	r3, [r7, #23]
 8013d02:	2b04      	cmp	r3, #4
 8013d04:	d101      	bne.n	8013d0a <f_opendir+0xf0>
 8013d06:	2305      	movs	r3, #5
 8013d08:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8013d0a:	7dfb      	ldrb	r3, [r7, #23]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d002      	beq.n	8013d16 <f_opendir+0xfc>
 8013d10:	693b      	ldr	r3, [r7, #16]
 8013d12:	2200      	movs	r2, #0
 8013d14:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	3718      	adds	r7, #24
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}

08013d20 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b084      	sub	sp, #16
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f107 0208 	add.w	r2, r7, #8
 8013d2e:	4611      	mov	r1, r2
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7fe ffc3 	bl	8012cbc <validate>
 8013d36:	4603      	mov	r3, r0
 8013d38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013d3a:	7bfb      	ldrb	r3, [r7, #15]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d110      	bne.n	8013d62 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	691b      	ldr	r3, [r3, #16]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d006      	beq.n	8013d56 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	691b      	ldr	r3, [r3, #16]
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7fc ff95 	bl	8010c7c <dec_lock>
 8013d52:	4603      	mov	r3, r0
 8013d54:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8013d56:	7bfb      	ldrb	r3, [r7, #15]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d102      	bne.n	8013d62 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8013d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	3710      	adds	r7, #16
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}

08013d6c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b086      	sub	sp, #24
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
 8013d74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	f107 020c 	add.w	r2, r7, #12
 8013d7c:	4611      	mov	r1, r2
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7fe ff9c 	bl	8012cbc <validate>
 8013d84:	4603      	mov	r3, r0
 8013d86:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013d88:	7dfb      	ldrb	r3, [r7, #23]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d136      	bne.n	8013dfc <f_readdir+0x90>
		if (!fno) {
 8013d8e:	683b      	ldr	r3, [r7, #0]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d106      	bne.n	8013da2 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8013d94:	2100      	movs	r1, #0
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	f7fd fb92 	bl	80114c0 <dir_sdi>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	75fb      	strb	r3, [r7, #23]
 8013da0:	e02c      	b.n	8013dfc <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 8013da2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013da6:	f000 fbd4 	bl	8014552 <ff_memalloc>
 8013daa:	6138      	str	r0, [r7, #16]
 8013dac:	693b      	ldr	r3, [r7, #16]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d101      	bne.n	8013db6 <f_readdir+0x4a>
 8013db2:	2311      	movs	r3, #17
 8013db4:	e023      	b.n	8013dfe <f_readdir+0x92>
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	693a      	ldr	r2, [r7, #16]
 8013dba:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8013dbc:	2100      	movs	r1, #0
 8013dbe:	6878      	ldr	r0, [r7, #4]
 8013dc0:	f7fd ff2f 	bl	8011c22 <dir_read>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8013dc8:	7dfb      	ldrb	r3, [r7, #23]
 8013dca:	2b04      	cmp	r3, #4
 8013dcc:	d101      	bne.n	8013dd2 <f_readdir+0x66>
 8013dce:	2300      	movs	r3, #0
 8013dd0:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 8013dd2:	7dfb      	ldrb	r3, [r7, #23]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d10e      	bne.n	8013df6 <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 8013dd8:	6839      	ldr	r1, [r7, #0]
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f7fe f980 	bl	80120e0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8013de0:	2100      	movs	r1, #0
 8013de2:	6878      	ldr	r0, [r7, #4]
 8013de4:	f7fd fbe7 	bl	80115b6 <dir_next>
 8013de8:	4603      	mov	r3, r0
 8013dea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8013dec:	7dfb      	ldrb	r3, [r7, #23]
 8013dee:	2b04      	cmp	r3, #4
 8013df0:	d101      	bne.n	8013df6 <f_readdir+0x8a>
 8013df2:	2300      	movs	r3, #0
 8013df4:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 8013df6:	6938      	ldr	r0, [r7, #16]
 8013df8:	f000 fbb7 	bl	801456a <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 8013dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3718      	adds	r7, #24
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}

08013e06 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8013e06:	b580      	push	{r7, lr}
 8013e08:	b092      	sub	sp, #72	; 0x48
 8013e0a:	af00      	add	r7, sp, #0
 8013e0c:	60f8      	str	r0, [r7, #12]
 8013e0e:	60b9      	str	r1, [r7, #8]
 8013e10:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013e12:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8013e16:	f107 030c 	add.w	r3, r7, #12
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f7fe fd01 	bl	8012824 <find_volume>
 8013e22:	4603      	mov	r3, r0
 8013e24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8013e28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	f040 8099 	bne.w	8013f64 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8013e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8013e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e3a:	695a      	ldr	r2, [r3, #20]
 8013e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e3e:	699b      	ldr	r3, [r3, #24]
 8013e40:	3b02      	subs	r3, #2
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d804      	bhi.n	8013e50 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8013e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e48:	695a      	ldr	r2, [r3, #20]
 8013e4a:	68bb      	ldr	r3, [r7, #8]
 8013e4c:	601a      	str	r2, [r3, #0]
 8013e4e:	e089      	b.n	8013f64 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8013e50:	2300      	movs	r3, #0
 8013e52:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8013e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e56:	781b      	ldrb	r3, [r3, #0]
 8013e58:	2b01      	cmp	r3, #1
 8013e5a:	d128      	bne.n	8013eae <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8013e5c:	2302      	movs	r3, #2
 8013e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e62:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8013e64:	f107 0314 	add.w	r3, r7, #20
 8013e68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7fd f865 	bl	8010f3a <get_fat>
 8013e70:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8013e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e78:	d103      	bne.n	8013e82 <f_getfree+0x7c>
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8013e80:	e063      	b.n	8013f4a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8013e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e84:	2b01      	cmp	r3, #1
 8013e86:	d103      	bne.n	8013e90 <f_getfree+0x8a>
 8013e88:	2302      	movs	r3, #2
 8013e8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8013e8e:	e05c      	b.n	8013f4a <f_getfree+0x144>
					if (stat == 0) nfree++;
 8013e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d102      	bne.n	8013e9c <f_getfree+0x96>
 8013e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e98:	3301      	adds	r3, #1
 8013e9a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8013e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e9e:	3301      	adds	r3, #1
 8013ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea4:	699b      	ldr	r3, [r3, #24]
 8013ea6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013ea8:	429a      	cmp	r2, r3
 8013eaa:	d3db      	bcc.n	8013e64 <f_getfree+0x5e>
 8013eac:	e04d      	b.n	8013f4a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8013eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb0:	699b      	ldr	r3, [r3, #24]
 8013eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eb8:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8013eba:	2300      	movs	r3, #0
 8013ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8013ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d113      	bne.n	8013ef0 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8013ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ecc:	1c5a      	adds	r2, r3, #1
 8013ece:	63ba      	str	r2, [r7, #56]	; 0x38
 8013ed0:	4619      	mov	r1, r3
 8013ed2:	f7fc ff77 	bl	8010dc4 <move_window>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8013edc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d131      	bne.n	8013f48 <f_getfree+0x142>
							p = fs->win;
 8013ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee6:	3334      	adds	r3, #52	; 0x34
 8013ee8:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8013eea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013eee:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8013ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ef2:	781b      	ldrb	r3, [r3, #0]
 8013ef4:	2b02      	cmp	r3, #2
 8013ef6:	d10f      	bne.n	8013f18 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8013ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013efa:	f7fc fcb3 	bl	8010864 <ld_word>
 8013efe:	4603      	mov	r3, r0
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d102      	bne.n	8013f0a <f_getfree+0x104>
 8013f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f06:	3301      	adds	r3, #1
 8013f08:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8013f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f0c:	3302      	adds	r3, #2
 8013f0e:	633b      	str	r3, [r7, #48]	; 0x30
 8013f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f12:	3b02      	subs	r3, #2
 8013f14:	637b      	str	r3, [r7, #52]	; 0x34
 8013f16:	e010      	b.n	8013f3a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8013f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f1a:	f7fc fcbb 	bl	8010894 <ld_dword>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d102      	bne.n	8013f2e <f_getfree+0x128>
 8013f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f2a:	3301      	adds	r3, #1
 8013f2c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8013f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f30:	3304      	adds	r3, #4
 8013f32:	633b      	str	r3, [r7, #48]	; 0x30
 8013f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f36:	3b04      	subs	r3, #4
 8013f38:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8013f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f3c:	3b01      	subs	r3, #1
 8013f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d1bd      	bne.n	8013ec2 <f_getfree+0xbc>
 8013f46:	e000      	b.n	8013f4a <f_getfree+0x144>
							if (res != FR_OK) break;
 8013f48:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013f4e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8013f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013f54:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8013f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f58:	791a      	ldrb	r2, [r3, #4]
 8013f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f5c:	f042 0201 	orr.w	r2, r2, #1
 8013f60:	b2d2      	uxtb	r2, r2
 8013f62:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8013f64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	3748      	adds	r7, #72	; 0x48
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}

08013f70 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b084      	sub	sp, #16
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
 8013f78:	460b      	mov	r3, r1
 8013f7a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8013f7c:	78fb      	ldrb	r3, [r7, #3]
 8013f7e:	2b0a      	cmp	r3, #10
 8013f80:	d103      	bne.n	8013f8a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8013f82:	210d      	movs	r1, #13
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f7ff fff3 	bl	8013f70 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	685b      	ldr	r3, [r3, #4]
 8013f8e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	db25      	blt.n	8013fe2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	1c5a      	adds	r2, r3, #1
 8013f9a:	60fa      	str	r2, [r7, #12]
 8013f9c:	687a      	ldr	r2, [r7, #4]
 8013f9e:	4413      	add	r3, r2
 8013fa0:	78fa      	ldrb	r2, [r7, #3]
 8013fa2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	2b3c      	cmp	r3, #60	; 0x3c
 8013fa8:	dd12      	ble.n	8013fd0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	6818      	ldr	r0, [r3, #0]
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	f103 010c 	add.w	r1, r3, #12
 8013fb4:	68fa      	ldr	r2, [r7, #12]
 8013fb6:	f107 0308 	add.w	r3, r7, #8
 8013fba:	f7ff fa08 	bl	80133ce <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8013fbe:	68ba      	ldr	r2, [r7, #8]
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	429a      	cmp	r2, r3
 8013fc4:	d101      	bne.n	8013fca <putc_bfd+0x5a>
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	e001      	b.n	8013fce <putc_bfd+0x5e>
 8013fca:	f04f 33ff 	mov.w	r3, #4294967295
 8013fce:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	68fa      	ldr	r2, [r7, #12]
 8013fd4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	689b      	ldr	r3, [r3, #8]
 8013fda:	1c5a      	adds	r2, r3, #1
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	609a      	str	r2, [r3, #8]
 8013fe0:	e000      	b.n	8013fe4 <putc_bfd+0x74>
	if (i < 0) return;
 8013fe2:	bf00      	nop
}
 8013fe4:	3710      	adds	r7, #16
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}

08013fea <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8013fea:	b580      	push	{r7, lr}
 8013fec:	b084      	sub	sp, #16
 8013fee:	af00      	add	r7, sp, #0
 8013ff0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	685b      	ldr	r3, [r3, #4]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	db16      	blt.n	8014028 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	6818      	ldr	r0, [r3, #0]
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f103 010c 	add.w	r1, r3, #12
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	685b      	ldr	r3, [r3, #4]
 8014008:	461a      	mov	r2, r3
 801400a:	f107 030c 	add.w	r3, r7, #12
 801400e:	f7ff f9de 	bl	80133ce <f_write>
 8014012:	4603      	mov	r3, r0
 8014014:	2b00      	cmp	r3, #0
 8014016:	d107      	bne.n	8014028 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	685b      	ldr	r3, [r3, #4]
 801401c:	68fa      	ldr	r2, [r7, #12]
 801401e:	4293      	cmp	r3, r2
 8014020:	d102      	bne.n	8014028 <putc_flush+0x3e>
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	689b      	ldr	r3, [r3, #8]
 8014026:	e001      	b.n	801402c <putc_flush+0x42>
	return EOF;
 8014028:	f04f 33ff 	mov.w	r3, #4294967295
}
 801402c:	4618      	mov	r0, r3
 801402e:	3710      	adds	r7, #16
 8014030:	46bd      	mov	sp, r7
 8014032:	bd80      	pop	{r7, pc}

08014034 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8014034:	b480      	push	{r7}
 8014036:	b083      	sub	sp, #12
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
 801403c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	683a      	ldr	r2, [r7, #0]
 8014042:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2200      	movs	r2, #0
 8014048:	605a      	str	r2, [r3, #4]
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	685a      	ldr	r2, [r3, #4]
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	609a      	str	r2, [r3, #8]
}
 8014052:	bf00      	nop
 8014054:	370c      	adds	r7, #12
 8014056:	46bd      	mov	sp, r7
 8014058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405c:	4770      	bx	lr
	...

08014060 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8014060:	b40e      	push	{r1, r2, r3}
 8014062:	b580      	push	{r7, lr}
 8014064:	b0a7      	sub	sp, #156	; 0x9c
 8014066:	af00      	add	r7, sp, #0
 8014068:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 801406a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801406e:	6879      	ldr	r1, [r7, #4]
 8014070:	4618      	mov	r0, r3
 8014072:	f7ff ffdf 	bl	8014034 <putc_init>

	va_start(arp, fmt);
 8014076:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801407a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 801407c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014080:	1c5a      	adds	r2, r3, #1
 8014082:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014086:	781b      	ldrb	r3, [r3, #0]
 8014088:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 801408c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8014090:	2b00      	cmp	r3, #0
 8014092:	f000 81f2 	beq.w	801447a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8014096:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801409a:	2b25      	cmp	r3, #37	; 0x25
 801409c:	d008      	beq.n	80140b0 <f_printf+0x50>
			putc_bfd(&pb, c);
 801409e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80140a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80140a6:	4611      	mov	r1, r2
 80140a8:	4618      	mov	r0, r3
 80140aa:	f7ff ff61 	bl	8013f70 <putc_bfd>
			continue;
 80140ae:	e1e3      	b.n	8014478 <f_printf+0x418>
		}
		w = f = 0;
 80140b0:	2300      	movs	r3, #0
 80140b2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80140b6:	2300      	movs	r3, #0
 80140b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 80140bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80140c0:	1c5a      	adds	r2, r3, #1
 80140c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80140c6:	781b      	ldrb	r3, [r3, #0]
 80140c8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80140cc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80140d0:	2b30      	cmp	r3, #48	; 0x30
 80140d2:	d10b      	bne.n	80140ec <f_printf+0x8c>
			f = 1; c = *fmt++;
 80140d4:	2301      	movs	r3, #1
 80140d6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80140da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80140de:	1c5a      	adds	r2, r3, #1
 80140e0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80140e4:	781b      	ldrb	r3, [r3, #0]
 80140e6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80140ea:	e024      	b.n	8014136 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80140ec:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80140f0:	2b2d      	cmp	r3, #45	; 0x2d
 80140f2:	d120      	bne.n	8014136 <f_printf+0xd6>
				f = 2; c = *fmt++;
 80140f4:	2302      	movs	r3, #2
 80140f6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80140fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80140fe:	1c5a      	adds	r2, r3, #1
 8014100:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014104:	781b      	ldrb	r3, [r3, #0]
 8014106:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801410a:	e014      	b.n	8014136 <f_printf+0xd6>
			w = w * 10 + c - '0';
 801410c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014110:	4613      	mov	r3, r2
 8014112:	009b      	lsls	r3, r3, #2
 8014114:	4413      	add	r3, r2
 8014116:	005b      	lsls	r3, r3, #1
 8014118:	461a      	mov	r2, r3
 801411a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801411e:	4413      	add	r3, r2
 8014120:	3b30      	subs	r3, #48	; 0x30
 8014122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8014126:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801412a:	1c5a      	adds	r2, r3, #1
 801412c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014130:	781b      	ldrb	r3, [r3, #0]
 8014132:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8014136:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801413a:	2b2f      	cmp	r3, #47	; 0x2f
 801413c:	d903      	bls.n	8014146 <f_printf+0xe6>
 801413e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8014142:	2b39      	cmp	r3, #57	; 0x39
 8014144:	d9e2      	bls.n	801410c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8014146:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801414a:	2b6c      	cmp	r3, #108	; 0x6c
 801414c:	d003      	beq.n	8014156 <f_printf+0xf6>
 801414e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8014152:	2b4c      	cmp	r3, #76	; 0x4c
 8014154:	d10d      	bne.n	8014172 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8014156:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801415a:	f043 0304 	orr.w	r3, r3, #4
 801415e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8014162:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014166:	1c5a      	adds	r2, r3, #1
 8014168:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801416c:	781b      	ldrb	r3, [r3, #0]
 801416e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8014172:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8014176:	2b00      	cmp	r3, #0
 8014178:	f000 8181 	beq.w	801447e <f_printf+0x41e>
		d = c;
 801417c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8014180:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8014184:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8014188:	2b60      	cmp	r3, #96	; 0x60
 801418a:	d908      	bls.n	801419e <f_printf+0x13e>
 801418c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8014190:	2b7a      	cmp	r3, #122	; 0x7a
 8014192:	d804      	bhi.n	801419e <f_printf+0x13e>
 8014194:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8014198:	3b20      	subs	r3, #32
 801419a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 801419e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80141a2:	3b42      	subs	r3, #66	; 0x42
 80141a4:	2b16      	cmp	r3, #22
 80141a6:	f200 8098 	bhi.w	80142da <f_printf+0x27a>
 80141aa:	a201      	add	r2, pc, #4	; (adr r2, 80141b0 <f_printf+0x150>)
 80141ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141b0:	080142bb 	.word	0x080142bb
 80141b4:	080142a3 	.word	0x080142a3
 80141b8:	080142cb 	.word	0x080142cb
 80141bc:	080142db 	.word	0x080142db
 80141c0:	080142db 	.word	0x080142db
 80141c4:	080142db 	.word	0x080142db
 80141c8:	080142db 	.word	0x080142db
 80141cc:	080142db 	.word	0x080142db
 80141d0:	080142db 	.word	0x080142db
 80141d4:	080142db 	.word	0x080142db
 80141d8:	080142db 	.word	0x080142db
 80141dc:	080142db 	.word	0x080142db
 80141e0:	080142db 	.word	0x080142db
 80141e4:	080142c3 	.word	0x080142c3
 80141e8:	080142db 	.word	0x080142db
 80141ec:	080142db 	.word	0x080142db
 80141f0:	080142db 	.word	0x080142db
 80141f4:	0801420d 	.word	0x0801420d
 80141f8:	080142db 	.word	0x080142db
 80141fc:	080142cb 	.word	0x080142cb
 8014200:	080142db 	.word	0x080142db
 8014204:	080142db 	.word	0x080142db
 8014208:	080142d3 	.word	0x080142d3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 801420c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801420e:	1d1a      	adds	r2, r3, #4
 8014210:	67ba      	str	r2, [r7, #120]	; 0x78
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8014216:	2300      	movs	r3, #0
 8014218:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801421c:	e004      	b.n	8014228 <f_printf+0x1c8>
 801421e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014222:	3301      	adds	r3, #1
 8014224:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014228:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801422a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801422e:	4413      	add	r3, r2
 8014230:	781b      	ldrb	r3, [r3, #0]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d1f3      	bne.n	801421e <f_printf+0x1be>
			if (!(f & 2)) {
 8014236:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801423a:	f003 0302 	and.w	r3, r3, #2
 801423e:	2b00      	cmp	r3, #0
 8014240:	d11a      	bne.n	8014278 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8014242:	e005      	b.n	8014250 <f_printf+0x1f0>
 8014244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014248:	2120      	movs	r1, #32
 801424a:	4618      	mov	r0, r3
 801424c:	f7ff fe90 	bl	8013f70 <putc_bfd>
 8014250:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014254:	1c5a      	adds	r2, r3, #1
 8014256:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801425a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801425e:	429a      	cmp	r2, r3
 8014260:	d8f0      	bhi.n	8014244 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8014262:	e009      	b.n	8014278 <f_printf+0x218>
 8014264:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014266:	1c5a      	adds	r2, r3, #1
 8014268:	67fa      	str	r2, [r7, #124]	; 0x7c
 801426a:	781a      	ldrb	r2, [r3, #0]
 801426c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014270:	4611      	mov	r1, r2
 8014272:	4618      	mov	r0, r3
 8014274:	f7ff fe7c 	bl	8013f70 <putc_bfd>
 8014278:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801427a:	781b      	ldrb	r3, [r3, #0]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d1f1      	bne.n	8014264 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8014280:	e005      	b.n	801428e <f_printf+0x22e>
 8014282:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014286:	2120      	movs	r1, #32
 8014288:	4618      	mov	r0, r3
 801428a:	f7ff fe71 	bl	8013f70 <putc_bfd>
 801428e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014292:	1c5a      	adds	r2, r3, #1
 8014294:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014298:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801429c:	429a      	cmp	r2, r3
 801429e:	d8f0      	bhi.n	8014282 <f_printf+0x222>
			continue;
 80142a0:	e0ea      	b.n	8014478 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80142a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142a4:	1d1a      	adds	r2, r3, #4
 80142a6:	67ba      	str	r2, [r7, #120]	; 0x78
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	b2da      	uxtb	r2, r3
 80142ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80142b0:	4611      	mov	r1, r2
 80142b2:	4618      	mov	r0, r3
 80142b4:	f7ff fe5c 	bl	8013f70 <putc_bfd>
 80142b8:	e0de      	b.n	8014478 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 80142ba:	2302      	movs	r3, #2
 80142bc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80142c0:	e014      	b.n	80142ec <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80142c2:	2308      	movs	r3, #8
 80142c4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80142c8:	e010      	b.n	80142ec <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80142ca:	230a      	movs	r3, #10
 80142cc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80142d0:	e00c      	b.n	80142ec <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80142d2:	2310      	movs	r3, #16
 80142d4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80142d8:	e008      	b.n	80142ec <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80142da:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80142de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80142e2:	4611      	mov	r1, r2
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7ff fe43 	bl	8013f70 <putc_bfd>
 80142ea:	e0c5      	b.n	8014478 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80142ec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80142f0:	f003 0304 	and.w	r3, r3, #4
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d004      	beq.n	8014302 <f_printf+0x2a2>
 80142f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142fa:	1d1a      	adds	r2, r3, #4
 80142fc:	67ba      	str	r2, [r7, #120]	; 0x78
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	e00c      	b.n	801431c <f_printf+0x2bc>
 8014302:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8014306:	2b44      	cmp	r3, #68	; 0x44
 8014308:	d104      	bne.n	8014314 <f_printf+0x2b4>
 801430a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801430c:	1d1a      	adds	r2, r3, #4
 801430e:	67ba      	str	r2, [r7, #120]	; 0x78
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	e003      	b.n	801431c <f_printf+0x2bc>
 8014314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014316:	1d1a      	adds	r2, r3, #4
 8014318:	67ba      	str	r2, [r7, #120]	; 0x78
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8014320:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8014324:	2b44      	cmp	r3, #68	; 0x44
 8014326:	d10e      	bne.n	8014346 <f_printf+0x2e6>
 8014328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801432c:	2b00      	cmp	r3, #0
 801432e:	da0a      	bge.n	8014346 <f_printf+0x2e6>
			v = 0 - v;
 8014330:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014334:	425b      	negs	r3, r3
 8014336:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 801433a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801433e:	f043 0308 	orr.w	r3, r3, #8
 8014342:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8014346:	2300      	movs	r3, #0
 8014348:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 801434c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8014350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014354:	fbb3 f1f2 	udiv	r1, r3, r2
 8014358:	fb01 f202 	mul.w	r2, r1, r2
 801435c:	1a9b      	subs	r3, r3, r2
 801435e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8014362:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8014366:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801436a:	fbb2 f3f3 	udiv	r3, r2, r3
 801436e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8014372:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8014376:	2b09      	cmp	r3, #9
 8014378:	d90b      	bls.n	8014392 <f_printf+0x332>
 801437a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801437e:	2b78      	cmp	r3, #120	; 0x78
 8014380:	d101      	bne.n	8014386 <f_printf+0x326>
 8014382:	2227      	movs	r2, #39	; 0x27
 8014384:	e000      	b.n	8014388 <f_printf+0x328>
 8014386:	2207      	movs	r2, #7
 8014388:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801438c:	4413      	add	r3, r2
 801438e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8014392:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014396:	1c5a      	adds	r2, r3, #1
 8014398:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801439c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80143a0:	3230      	adds	r2, #48	; 0x30
 80143a2:	b2d2      	uxtb	r2, r2
 80143a4:	3398      	adds	r3, #152	; 0x98
 80143a6:	443b      	add	r3, r7
 80143a8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 80143ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d003      	beq.n	80143bc <f_printf+0x35c>
 80143b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80143b8:	2b1f      	cmp	r3, #31
 80143ba:	d9c7      	bls.n	801434c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80143bc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80143c0:	f003 0308 	and.w	r3, r3, #8
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d009      	beq.n	80143dc <f_printf+0x37c>
 80143c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80143cc:	1c5a      	adds	r2, r3, #1
 80143ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80143d2:	3398      	adds	r3, #152	; 0x98
 80143d4:	443b      	add	r3, r7
 80143d6:	222d      	movs	r2, #45	; 0x2d
 80143d8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80143dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80143e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80143e4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80143e8:	f003 0301 	and.w	r3, r3, #1
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d001      	beq.n	80143f4 <f_printf+0x394>
 80143f0:	2330      	movs	r3, #48	; 0x30
 80143f2:	e000      	b.n	80143f6 <f_printf+0x396>
 80143f4:	2320      	movs	r3, #32
 80143f6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80143fa:	e007      	b.n	801440c <f_printf+0x3ac>
 80143fc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8014400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014404:	4611      	mov	r1, r2
 8014406:	4618      	mov	r0, r3
 8014408:	f7ff fdb2 	bl	8013f70 <putc_bfd>
 801440c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8014410:	f003 0302 	and.w	r3, r3, #2
 8014414:	2b00      	cmp	r3, #0
 8014416:	d108      	bne.n	801442a <f_printf+0x3ca>
 8014418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801441c:	1c5a      	adds	r2, r3, #1
 801441e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014422:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014426:	429a      	cmp	r2, r3
 8014428:	d8e8      	bhi.n	80143fc <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 801442a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801442e:	3b01      	subs	r3, #1
 8014430:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014434:	f107 020c 	add.w	r2, r7, #12
 8014438:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801443c:	4413      	add	r3, r2
 801443e:	781a      	ldrb	r2, [r3, #0]
 8014440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014444:	4611      	mov	r1, r2
 8014446:	4618      	mov	r0, r3
 8014448:	f7ff fd92 	bl	8013f70 <putc_bfd>
		} while (i);
 801444c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014450:	2b00      	cmp	r3, #0
 8014452:	d1ea      	bne.n	801442a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8014454:	e007      	b.n	8014466 <f_printf+0x406>
 8014456:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801445a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801445e:	4611      	mov	r1, r2
 8014460:	4618      	mov	r0, r3
 8014462:	f7ff fd85 	bl	8013f70 <putc_bfd>
 8014466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801446a:	1c5a      	adds	r2, r3, #1
 801446c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014470:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014474:	429a      	cmp	r2, r3
 8014476:	d8ee      	bhi.n	8014456 <f_printf+0x3f6>
		c = *fmt++;
 8014478:	e600      	b.n	801407c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 801447a:	bf00      	nop
 801447c:	e000      	b.n	8014480 <f_printf+0x420>
		if (!c) break;
 801447e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8014480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014484:	4618      	mov	r0, r3
 8014486:	f7ff fdb0 	bl	8013fea <putc_flush>
 801448a:	4603      	mov	r3, r0
}
 801448c:	4618      	mov	r0, r3
 801448e:	379c      	adds	r7, #156	; 0x9c
 8014490:	46bd      	mov	sp, r7
 8014492:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014496:	b003      	add	sp, #12
 8014498:	4770      	bx	lr
 801449a:	bf00      	nop

0801449c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801449c:	b480      	push	{r7}
 801449e:	b087      	sub	sp, #28
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	60f8      	str	r0, [r7, #12]
 80144a4:	60b9      	str	r1, [r7, #8]
 80144a6:	4613      	mov	r3, r2
 80144a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80144aa:	2301      	movs	r3, #1
 80144ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80144ae:	2300      	movs	r3, #0
 80144b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80144b2:	4b1f      	ldr	r3, [pc, #124]	; (8014530 <FATFS_LinkDriverEx+0x94>)
 80144b4:	7b9b      	ldrb	r3, [r3, #14]
 80144b6:	b2db      	uxtb	r3, r3
 80144b8:	2b01      	cmp	r3, #1
 80144ba:	d831      	bhi.n	8014520 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80144bc:	4b1c      	ldr	r3, [pc, #112]	; (8014530 <FATFS_LinkDriverEx+0x94>)
 80144be:	7b9b      	ldrb	r3, [r3, #14]
 80144c0:	b2db      	uxtb	r3, r3
 80144c2:	461a      	mov	r2, r3
 80144c4:	4b1a      	ldr	r3, [pc, #104]	; (8014530 <FATFS_LinkDriverEx+0x94>)
 80144c6:	2100      	movs	r1, #0
 80144c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80144ca:	4b19      	ldr	r3, [pc, #100]	; (8014530 <FATFS_LinkDriverEx+0x94>)
 80144cc:	7b9b      	ldrb	r3, [r3, #14]
 80144ce:	b2db      	uxtb	r3, r3
 80144d0:	4a17      	ldr	r2, [pc, #92]	; (8014530 <FATFS_LinkDriverEx+0x94>)
 80144d2:	009b      	lsls	r3, r3, #2
 80144d4:	4413      	add	r3, r2
 80144d6:	68fa      	ldr	r2, [r7, #12]
 80144d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80144da:	4b15      	ldr	r3, [pc, #84]	; (8014530 <FATFS_LinkDriverEx+0x94>)
 80144dc:	7b9b      	ldrb	r3, [r3, #14]
 80144de:	b2db      	uxtb	r3, r3
 80144e0:	461a      	mov	r2, r3
 80144e2:	4b13      	ldr	r3, [pc, #76]	; (8014530 <FATFS_LinkDriverEx+0x94>)
 80144e4:	4413      	add	r3, r2
 80144e6:	79fa      	ldrb	r2, [r7, #7]
 80144e8:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 80144ea:	4b11      	ldr	r3, [pc, #68]	; (8014530 <FATFS_LinkDriverEx+0x94>)
 80144ec:	7b9b      	ldrb	r3, [r3, #14]
 80144ee:	b2db      	uxtb	r3, r3
 80144f0:	1c5a      	adds	r2, r3, #1
 80144f2:	b2d1      	uxtb	r1, r2
 80144f4:	4a0e      	ldr	r2, [pc, #56]	; (8014530 <FATFS_LinkDriverEx+0x94>)
 80144f6:	7391      	strb	r1, [r2, #14]
 80144f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80144fa:	7dbb      	ldrb	r3, [r7, #22]
 80144fc:	3330      	adds	r3, #48	; 0x30
 80144fe:	b2da      	uxtb	r2, r3
 8014500:	68bb      	ldr	r3, [r7, #8]
 8014502:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014504:	68bb      	ldr	r3, [r7, #8]
 8014506:	3301      	adds	r3, #1
 8014508:	223a      	movs	r2, #58	; 0x3a
 801450a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801450c:	68bb      	ldr	r3, [r7, #8]
 801450e:	3302      	adds	r3, #2
 8014510:	222f      	movs	r2, #47	; 0x2f
 8014512:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014514:	68bb      	ldr	r3, [r7, #8]
 8014516:	3303      	adds	r3, #3
 8014518:	2200      	movs	r2, #0
 801451a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801451c:	2300      	movs	r3, #0
 801451e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014520:	7dfb      	ldrb	r3, [r7, #23]
}
 8014522:	4618      	mov	r0, r3
 8014524:	371c      	adds	r7, #28
 8014526:	46bd      	mov	sp, r7
 8014528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452c:	4770      	bx	lr
 801452e:	bf00      	nop
 8014530:	200073fc 	.word	0x200073fc

08014534 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b082      	sub	sp, #8
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
 801453c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801453e:	2200      	movs	r2, #0
 8014540:	6839      	ldr	r1, [r7, #0]
 8014542:	6878      	ldr	r0, [r7, #4]
 8014544:	f7ff ffaa 	bl	801449c <FATFS_LinkDriverEx>
 8014548:	4603      	mov	r3, r0
}
 801454a:	4618      	mov	r0, r3
 801454c:	3708      	adds	r7, #8
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}

08014552 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8014552:	b580      	push	{r7, lr}
 8014554:	b082      	sub	sp, #8
 8014556:	af00      	add	r7, sp, #0
 8014558:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 801455a:	6878      	ldr	r0, [r7, #4]
 801455c:	f002 fe1c 	bl	8017198 <malloc>
 8014560:	4603      	mov	r3, r0
}
 8014562:	4618      	mov	r0, r3
 8014564:	3708      	adds	r7, #8
 8014566:	46bd      	mov	sp, r7
 8014568:	bd80      	pop	{r7, pc}

0801456a <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 801456a:	b580      	push	{r7, lr}
 801456c:	b082      	sub	sp, #8
 801456e:	af00      	add	r7, sp, #0
 8014570:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8014572:	6878      	ldr	r0, [r7, #4]
 8014574:	f002 fe18 	bl	80171a8 <free>
}
 8014578:	bf00      	nop
 801457a:	3708      	adds	r7, #8
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}

08014580 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8014580:	b480      	push	{r7}
 8014582:	b085      	sub	sp, #20
 8014584:	af00      	add	r7, sp, #0
 8014586:	4603      	mov	r3, r0
 8014588:	6039      	str	r1, [r7, #0]
 801458a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801458c:	88fb      	ldrh	r3, [r7, #6]
 801458e:	2b7f      	cmp	r3, #127	; 0x7f
 8014590:	d802      	bhi.n	8014598 <ff_convert+0x18>
		c = chr;
 8014592:	88fb      	ldrh	r3, [r7, #6]
 8014594:	81fb      	strh	r3, [r7, #14]
 8014596:	e025      	b.n	80145e4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8014598:	683b      	ldr	r3, [r7, #0]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d00b      	beq.n	80145b6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801459e:	88fb      	ldrh	r3, [r7, #6]
 80145a0:	2bff      	cmp	r3, #255	; 0xff
 80145a2:	d805      	bhi.n	80145b0 <ff_convert+0x30>
 80145a4:	88fb      	ldrh	r3, [r7, #6]
 80145a6:	3b80      	subs	r3, #128	; 0x80
 80145a8:	4a12      	ldr	r2, [pc, #72]	; (80145f4 <ff_convert+0x74>)
 80145aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80145ae:	e000      	b.n	80145b2 <ff_convert+0x32>
 80145b0:	2300      	movs	r3, #0
 80145b2:	81fb      	strh	r3, [r7, #14]
 80145b4:	e016      	b.n	80145e4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80145b6:	2300      	movs	r3, #0
 80145b8:	81fb      	strh	r3, [r7, #14]
 80145ba:	e009      	b.n	80145d0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80145bc:	89fb      	ldrh	r3, [r7, #14]
 80145be:	4a0d      	ldr	r2, [pc, #52]	; (80145f4 <ff_convert+0x74>)
 80145c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80145c4:	88fa      	ldrh	r2, [r7, #6]
 80145c6:	429a      	cmp	r2, r3
 80145c8:	d006      	beq.n	80145d8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80145ca:	89fb      	ldrh	r3, [r7, #14]
 80145cc:	3301      	adds	r3, #1
 80145ce:	81fb      	strh	r3, [r7, #14]
 80145d0:	89fb      	ldrh	r3, [r7, #14]
 80145d2:	2b7f      	cmp	r3, #127	; 0x7f
 80145d4:	d9f2      	bls.n	80145bc <ff_convert+0x3c>
 80145d6:	e000      	b.n	80145da <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80145d8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80145da:	89fb      	ldrh	r3, [r7, #14]
 80145dc:	3380      	adds	r3, #128	; 0x80
 80145de:	b29b      	uxth	r3, r3
 80145e0:	b2db      	uxtb	r3, r3
 80145e2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80145e4:	89fb      	ldrh	r3, [r7, #14]
}
 80145e6:	4618      	mov	r0, r3
 80145e8:	3714      	adds	r7, #20
 80145ea:	46bd      	mov	sp, r7
 80145ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f0:	4770      	bx	lr
 80145f2:	bf00      	nop
 80145f4:	08026cb8 	.word	0x08026cb8

080145f8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80145f8:	b480      	push	{r7}
 80145fa:	b087      	sub	sp, #28
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	4603      	mov	r3, r0
 8014600:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8014602:	88fb      	ldrh	r3, [r7, #6]
 8014604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014608:	d201      	bcs.n	801460e <ff_wtoupper+0x16>
 801460a:	4b3e      	ldr	r3, [pc, #248]	; (8014704 <ff_wtoupper+0x10c>)
 801460c:	e000      	b.n	8014610 <ff_wtoupper+0x18>
 801460e:	4b3e      	ldr	r3, [pc, #248]	; (8014708 <ff_wtoupper+0x110>)
 8014610:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8014612:	697b      	ldr	r3, [r7, #20]
 8014614:	1c9a      	adds	r2, r3, #2
 8014616:	617a      	str	r2, [r7, #20]
 8014618:	881b      	ldrh	r3, [r3, #0]
 801461a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801461c:	8a7b      	ldrh	r3, [r7, #18]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d068      	beq.n	80146f4 <ff_wtoupper+0xfc>
 8014622:	88fa      	ldrh	r2, [r7, #6]
 8014624:	8a7b      	ldrh	r3, [r7, #18]
 8014626:	429a      	cmp	r2, r3
 8014628:	d364      	bcc.n	80146f4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801462a:	697b      	ldr	r3, [r7, #20]
 801462c:	1c9a      	adds	r2, r3, #2
 801462e:	617a      	str	r2, [r7, #20]
 8014630:	881b      	ldrh	r3, [r3, #0]
 8014632:	823b      	strh	r3, [r7, #16]
 8014634:	8a3b      	ldrh	r3, [r7, #16]
 8014636:	0a1b      	lsrs	r3, r3, #8
 8014638:	81fb      	strh	r3, [r7, #14]
 801463a:	8a3b      	ldrh	r3, [r7, #16]
 801463c:	b2db      	uxtb	r3, r3
 801463e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8014640:	88fa      	ldrh	r2, [r7, #6]
 8014642:	8a79      	ldrh	r1, [r7, #18]
 8014644:	8a3b      	ldrh	r3, [r7, #16]
 8014646:	440b      	add	r3, r1
 8014648:	429a      	cmp	r2, r3
 801464a:	da49      	bge.n	80146e0 <ff_wtoupper+0xe8>
			switch (cmd) {
 801464c:	89fb      	ldrh	r3, [r7, #14]
 801464e:	2b08      	cmp	r3, #8
 8014650:	d84f      	bhi.n	80146f2 <ff_wtoupper+0xfa>
 8014652:	a201      	add	r2, pc, #4	; (adr r2, 8014658 <ff_wtoupper+0x60>)
 8014654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014658:	0801467d 	.word	0x0801467d
 801465c:	0801468f 	.word	0x0801468f
 8014660:	080146a5 	.word	0x080146a5
 8014664:	080146ad 	.word	0x080146ad
 8014668:	080146b5 	.word	0x080146b5
 801466c:	080146bd 	.word	0x080146bd
 8014670:	080146c5 	.word	0x080146c5
 8014674:	080146cd 	.word	0x080146cd
 8014678:	080146d5 	.word	0x080146d5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801467c:	88fa      	ldrh	r2, [r7, #6]
 801467e:	8a7b      	ldrh	r3, [r7, #18]
 8014680:	1ad3      	subs	r3, r2, r3
 8014682:	005b      	lsls	r3, r3, #1
 8014684:	697a      	ldr	r2, [r7, #20]
 8014686:	4413      	add	r3, r2
 8014688:	881b      	ldrh	r3, [r3, #0]
 801468a:	80fb      	strh	r3, [r7, #6]
 801468c:	e027      	b.n	80146de <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801468e:	88fa      	ldrh	r2, [r7, #6]
 8014690:	8a7b      	ldrh	r3, [r7, #18]
 8014692:	1ad3      	subs	r3, r2, r3
 8014694:	b29b      	uxth	r3, r3
 8014696:	f003 0301 	and.w	r3, r3, #1
 801469a:	b29b      	uxth	r3, r3
 801469c:	88fa      	ldrh	r2, [r7, #6]
 801469e:	1ad3      	subs	r3, r2, r3
 80146a0:	80fb      	strh	r3, [r7, #6]
 80146a2:	e01c      	b.n	80146de <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80146a4:	88fb      	ldrh	r3, [r7, #6]
 80146a6:	3b10      	subs	r3, #16
 80146a8:	80fb      	strh	r3, [r7, #6]
 80146aa:	e018      	b.n	80146de <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80146ac:	88fb      	ldrh	r3, [r7, #6]
 80146ae:	3b20      	subs	r3, #32
 80146b0:	80fb      	strh	r3, [r7, #6]
 80146b2:	e014      	b.n	80146de <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80146b4:	88fb      	ldrh	r3, [r7, #6]
 80146b6:	3b30      	subs	r3, #48	; 0x30
 80146b8:	80fb      	strh	r3, [r7, #6]
 80146ba:	e010      	b.n	80146de <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80146bc:	88fb      	ldrh	r3, [r7, #6]
 80146be:	3b1a      	subs	r3, #26
 80146c0:	80fb      	strh	r3, [r7, #6]
 80146c2:	e00c      	b.n	80146de <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80146c4:	88fb      	ldrh	r3, [r7, #6]
 80146c6:	3308      	adds	r3, #8
 80146c8:	80fb      	strh	r3, [r7, #6]
 80146ca:	e008      	b.n	80146de <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80146cc:	88fb      	ldrh	r3, [r7, #6]
 80146ce:	3b50      	subs	r3, #80	; 0x50
 80146d0:	80fb      	strh	r3, [r7, #6]
 80146d2:	e004      	b.n	80146de <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80146d4:	88fb      	ldrh	r3, [r7, #6]
 80146d6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80146da:	80fb      	strh	r3, [r7, #6]
 80146dc:	bf00      	nop
			}
			break;
 80146de:	e008      	b.n	80146f2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80146e0:	89fb      	ldrh	r3, [r7, #14]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d195      	bne.n	8014612 <ff_wtoupper+0x1a>
 80146e6:	8a3b      	ldrh	r3, [r7, #16]
 80146e8:	005b      	lsls	r3, r3, #1
 80146ea:	697a      	ldr	r2, [r7, #20]
 80146ec:	4413      	add	r3, r2
 80146ee:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80146f0:	e78f      	b.n	8014612 <ff_wtoupper+0x1a>
			break;
 80146f2:	bf00      	nop
	}

	return chr;
 80146f4:	88fb      	ldrh	r3, [r7, #6]
}
 80146f6:	4618      	mov	r0, r3
 80146f8:	371c      	adds	r7, #28
 80146fa:	46bd      	mov	sp, r7
 80146fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014700:	4770      	bx	lr
 8014702:	bf00      	nop
 8014704:	08026db8 	.word	0x08026db8
 8014708:	08026fac 	.word	0x08026fac

0801470c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b084      	sub	sp, #16
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	460b      	mov	r3, r1
 8014716:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014718:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801471c:	f002 fcf8 	bl	8017110 <USBD_static_malloc>
 8014720:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d109      	bne.n	801473c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	32b0      	adds	r2, #176	; 0xb0
 8014732:	2100      	movs	r1, #0
 8014734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014738:	2302      	movs	r3, #2
 801473a:	e0d4      	b.n	80148e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801473c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014740:	2100      	movs	r1, #0
 8014742:	68f8      	ldr	r0, [r7, #12]
 8014744:	f003 fe10 	bl	8018368 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	32b0      	adds	r2, #176	; 0xb0
 8014752:	68f9      	ldr	r1, [r7, #12]
 8014754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	32b0      	adds	r2, #176	; 0xb0
 8014762:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	7c1b      	ldrb	r3, [r3, #16]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d138      	bne.n	80147e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014774:	4b5e      	ldr	r3, [pc, #376]	; (80148f0 <USBD_CDC_Init+0x1e4>)
 8014776:	7819      	ldrb	r1, [r3, #0]
 8014778:	f44f 7300 	mov.w	r3, #512	; 0x200
 801477c:	2202      	movs	r2, #2
 801477e:	6878      	ldr	r0, [r7, #4]
 8014780:	f002 fba3 	bl	8016eca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014784:	4b5a      	ldr	r3, [pc, #360]	; (80148f0 <USBD_CDC_Init+0x1e4>)
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	f003 020f 	and.w	r2, r3, #15
 801478c:	6879      	ldr	r1, [r7, #4]
 801478e:	4613      	mov	r3, r2
 8014790:	009b      	lsls	r3, r3, #2
 8014792:	4413      	add	r3, r2
 8014794:	009b      	lsls	r3, r3, #2
 8014796:	440b      	add	r3, r1
 8014798:	3324      	adds	r3, #36	; 0x24
 801479a:	2201      	movs	r2, #1
 801479c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801479e:	4b55      	ldr	r3, [pc, #340]	; (80148f4 <USBD_CDC_Init+0x1e8>)
 80147a0:	7819      	ldrb	r1, [r3, #0]
 80147a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80147a6:	2202      	movs	r2, #2
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	f002 fb8e 	bl	8016eca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80147ae:	4b51      	ldr	r3, [pc, #324]	; (80148f4 <USBD_CDC_Init+0x1e8>)
 80147b0:	781b      	ldrb	r3, [r3, #0]
 80147b2:	f003 020f 	and.w	r2, r3, #15
 80147b6:	6879      	ldr	r1, [r7, #4]
 80147b8:	4613      	mov	r3, r2
 80147ba:	009b      	lsls	r3, r3, #2
 80147bc:	4413      	add	r3, r2
 80147be:	009b      	lsls	r3, r3, #2
 80147c0:	440b      	add	r3, r1
 80147c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80147c6:	2201      	movs	r2, #1
 80147c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80147ca:	4b4b      	ldr	r3, [pc, #300]	; (80148f8 <USBD_CDC_Init+0x1ec>)
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	f003 020f 	and.w	r2, r3, #15
 80147d2:	6879      	ldr	r1, [r7, #4]
 80147d4:	4613      	mov	r3, r2
 80147d6:	009b      	lsls	r3, r3, #2
 80147d8:	4413      	add	r3, r2
 80147da:	009b      	lsls	r3, r3, #2
 80147dc:	440b      	add	r3, r1
 80147de:	3326      	adds	r3, #38	; 0x26
 80147e0:	2210      	movs	r2, #16
 80147e2:	801a      	strh	r2, [r3, #0]
 80147e4:	e035      	b.n	8014852 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80147e6:	4b42      	ldr	r3, [pc, #264]	; (80148f0 <USBD_CDC_Init+0x1e4>)
 80147e8:	7819      	ldrb	r1, [r3, #0]
 80147ea:	2340      	movs	r3, #64	; 0x40
 80147ec:	2202      	movs	r2, #2
 80147ee:	6878      	ldr	r0, [r7, #4]
 80147f0:	f002 fb6b 	bl	8016eca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80147f4:	4b3e      	ldr	r3, [pc, #248]	; (80148f0 <USBD_CDC_Init+0x1e4>)
 80147f6:	781b      	ldrb	r3, [r3, #0]
 80147f8:	f003 020f 	and.w	r2, r3, #15
 80147fc:	6879      	ldr	r1, [r7, #4]
 80147fe:	4613      	mov	r3, r2
 8014800:	009b      	lsls	r3, r3, #2
 8014802:	4413      	add	r3, r2
 8014804:	009b      	lsls	r3, r3, #2
 8014806:	440b      	add	r3, r1
 8014808:	3324      	adds	r3, #36	; 0x24
 801480a:	2201      	movs	r2, #1
 801480c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801480e:	4b39      	ldr	r3, [pc, #228]	; (80148f4 <USBD_CDC_Init+0x1e8>)
 8014810:	7819      	ldrb	r1, [r3, #0]
 8014812:	2340      	movs	r3, #64	; 0x40
 8014814:	2202      	movs	r2, #2
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f002 fb57 	bl	8016eca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801481c:	4b35      	ldr	r3, [pc, #212]	; (80148f4 <USBD_CDC_Init+0x1e8>)
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	f003 020f 	and.w	r2, r3, #15
 8014824:	6879      	ldr	r1, [r7, #4]
 8014826:	4613      	mov	r3, r2
 8014828:	009b      	lsls	r3, r3, #2
 801482a:	4413      	add	r3, r2
 801482c:	009b      	lsls	r3, r3, #2
 801482e:	440b      	add	r3, r1
 8014830:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014834:	2201      	movs	r2, #1
 8014836:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014838:	4b2f      	ldr	r3, [pc, #188]	; (80148f8 <USBD_CDC_Init+0x1ec>)
 801483a:	781b      	ldrb	r3, [r3, #0]
 801483c:	f003 020f 	and.w	r2, r3, #15
 8014840:	6879      	ldr	r1, [r7, #4]
 8014842:	4613      	mov	r3, r2
 8014844:	009b      	lsls	r3, r3, #2
 8014846:	4413      	add	r3, r2
 8014848:	009b      	lsls	r3, r3, #2
 801484a:	440b      	add	r3, r1
 801484c:	3326      	adds	r3, #38	; 0x26
 801484e:	2210      	movs	r2, #16
 8014850:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014852:	4b29      	ldr	r3, [pc, #164]	; (80148f8 <USBD_CDC_Init+0x1ec>)
 8014854:	7819      	ldrb	r1, [r3, #0]
 8014856:	2308      	movs	r3, #8
 8014858:	2203      	movs	r2, #3
 801485a:	6878      	ldr	r0, [r7, #4]
 801485c:	f002 fb35 	bl	8016eca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014860:	4b25      	ldr	r3, [pc, #148]	; (80148f8 <USBD_CDC_Init+0x1ec>)
 8014862:	781b      	ldrb	r3, [r3, #0]
 8014864:	f003 020f 	and.w	r2, r3, #15
 8014868:	6879      	ldr	r1, [r7, #4]
 801486a:	4613      	mov	r3, r2
 801486c:	009b      	lsls	r3, r3, #2
 801486e:	4413      	add	r3, r2
 8014870:	009b      	lsls	r3, r3, #2
 8014872:	440b      	add	r3, r1
 8014874:	3324      	adds	r3, #36	; 0x24
 8014876:	2201      	movs	r2, #1
 8014878:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	2200      	movs	r2, #0
 801487e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014888:	687a      	ldr	r2, [r7, #4]
 801488a:	33b0      	adds	r3, #176	; 0xb0
 801488c:	009b      	lsls	r3, r3, #2
 801488e:	4413      	add	r3, r2
 8014890:	685b      	ldr	r3, [r3, #4]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	2200      	movs	r2, #0
 801489a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	2200      	movs	r2, #0
 80148a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d101      	bne.n	80148b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80148b0:	2302      	movs	r3, #2
 80148b2:	e018      	b.n	80148e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	7c1b      	ldrb	r3, [r3, #16]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d10a      	bne.n	80148d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80148bc:	4b0d      	ldr	r3, [pc, #52]	; (80148f4 <USBD_CDC_Init+0x1e8>)
 80148be:	7819      	ldrb	r1, [r3, #0]
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80148c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f002 fbec 	bl	80170a8 <USBD_LL_PrepareReceive>
 80148d0:	e008      	b.n	80148e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80148d2:	4b08      	ldr	r3, [pc, #32]	; (80148f4 <USBD_CDC_Init+0x1e8>)
 80148d4:	7819      	ldrb	r1, [r3, #0]
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80148dc:	2340      	movs	r3, #64	; 0x40
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f002 fbe2 	bl	80170a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80148e4:	2300      	movs	r3, #0
}
 80148e6:	4618      	mov	r0, r3
 80148e8:	3710      	adds	r7, #16
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bd80      	pop	{r7, pc}
 80148ee:	bf00      	nop
 80148f0:	2000012b 	.word	0x2000012b
 80148f4:	2000012c 	.word	0x2000012c
 80148f8:	2000012d 	.word	0x2000012d

080148fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b082      	sub	sp, #8
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
 8014904:	460b      	mov	r3, r1
 8014906:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014908:	4b3a      	ldr	r3, [pc, #232]	; (80149f4 <USBD_CDC_DeInit+0xf8>)
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	4619      	mov	r1, r3
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f002 fb01 	bl	8016f16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014914:	4b37      	ldr	r3, [pc, #220]	; (80149f4 <USBD_CDC_DeInit+0xf8>)
 8014916:	781b      	ldrb	r3, [r3, #0]
 8014918:	f003 020f 	and.w	r2, r3, #15
 801491c:	6879      	ldr	r1, [r7, #4]
 801491e:	4613      	mov	r3, r2
 8014920:	009b      	lsls	r3, r3, #2
 8014922:	4413      	add	r3, r2
 8014924:	009b      	lsls	r3, r3, #2
 8014926:	440b      	add	r3, r1
 8014928:	3324      	adds	r3, #36	; 0x24
 801492a:	2200      	movs	r2, #0
 801492c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801492e:	4b32      	ldr	r3, [pc, #200]	; (80149f8 <USBD_CDC_DeInit+0xfc>)
 8014930:	781b      	ldrb	r3, [r3, #0]
 8014932:	4619      	mov	r1, r3
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	f002 faee 	bl	8016f16 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801493a:	4b2f      	ldr	r3, [pc, #188]	; (80149f8 <USBD_CDC_DeInit+0xfc>)
 801493c:	781b      	ldrb	r3, [r3, #0]
 801493e:	f003 020f 	and.w	r2, r3, #15
 8014942:	6879      	ldr	r1, [r7, #4]
 8014944:	4613      	mov	r3, r2
 8014946:	009b      	lsls	r3, r3, #2
 8014948:	4413      	add	r3, r2
 801494a:	009b      	lsls	r3, r3, #2
 801494c:	440b      	add	r3, r1
 801494e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014952:	2200      	movs	r2, #0
 8014954:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014956:	4b29      	ldr	r3, [pc, #164]	; (80149fc <USBD_CDC_DeInit+0x100>)
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	4619      	mov	r1, r3
 801495c:	6878      	ldr	r0, [r7, #4]
 801495e:	f002 fada 	bl	8016f16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014962:	4b26      	ldr	r3, [pc, #152]	; (80149fc <USBD_CDC_DeInit+0x100>)
 8014964:	781b      	ldrb	r3, [r3, #0]
 8014966:	f003 020f 	and.w	r2, r3, #15
 801496a:	6879      	ldr	r1, [r7, #4]
 801496c:	4613      	mov	r3, r2
 801496e:	009b      	lsls	r3, r3, #2
 8014970:	4413      	add	r3, r2
 8014972:	009b      	lsls	r3, r3, #2
 8014974:	440b      	add	r3, r1
 8014976:	3324      	adds	r3, #36	; 0x24
 8014978:	2200      	movs	r2, #0
 801497a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801497c:	4b1f      	ldr	r3, [pc, #124]	; (80149fc <USBD_CDC_DeInit+0x100>)
 801497e:	781b      	ldrb	r3, [r3, #0]
 8014980:	f003 020f 	and.w	r2, r3, #15
 8014984:	6879      	ldr	r1, [r7, #4]
 8014986:	4613      	mov	r3, r2
 8014988:	009b      	lsls	r3, r3, #2
 801498a:	4413      	add	r3, r2
 801498c:	009b      	lsls	r3, r3, #2
 801498e:	440b      	add	r3, r1
 8014990:	3326      	adds	r3, #38	; 0x26
 8014992:	2200      	movs	r2, #0
 8014994:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	32b0      	adds	r2, #176	; 0xb0
 80149a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d01f      	beq.n	80149e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149ae:	687a      	ldr	r2, [r7, #4]
 80149b0:	33b0      	adds	r3, #176	; 0xb0
 80149b2:	009b      	lsls	r3, r3, #2
 80149b4:	4413      	add	r3, r2
 80149b6:	685b      	ldr	r3, [r3, #4]
 80149b8:	685b      	ldr	r3, [r3, #4]
 80149ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	32b0      	adds	r2, #176	; 0xb0
 80149c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149ca:	4618      	mov	r0, r3
 80149cc:	f002 fbae 	bl	801712c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	32b0      	adds	r2, #176	; 0xb0
 80149da:	2100      	movs	r1, #0
 80149dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	2200      	movs	r2, #0
 80149e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80149e8:	2300      	movs	r3, #0
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3708      	adds	r7, #8
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}
 80149f2:	bf00      	nop
 80149f4:	2000012b 	.word	0x2000012b
 80149f8:	2000012c 	.word	0x2000012c
 80149fc:	2000012d 	.word	0x2000012d

08014a00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b086      	sub	sp, #24
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
 8014a08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	32b0      	adds	r2, #176	; 0xb0
 8014a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014a1e:	2300      	movs	r3, #0
 8014a20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a22:	2300      	movs	r3, #0
 8014a24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014a26:	693b      	ldr	r3, [r7, #16]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d101      	bne.n	8014a30 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014a2c:	2303      	movs	r3, #3
 8014a2e:	e0bf      	b.n	8014bb0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014a30:	683b      	ldr	r3, [r7, #0]
 8014a32:	781b      	ldrb	r3, [r3, #0]
 8014a34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d050      	beq.n	8014ade <USBD_CDC_Setup+0xde>
 8014a3c:	2b20      	cmp	r3, #32
 8014a3e:	f040 80af 	bne.w	8014ba0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014a42:	683b      	ldr	r3, [r7, #0]
 8014a44:	88db      	ldrh	r3, [r3, #6]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d03a      	beq.n	8014ac0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014a4a:	683b      	ldr	r3, [r7, #0]
 8014a4c:	781b      	ldrb	r3, [r3, #0]
 8014a4e:	b25b      	sxtb	r3, r3
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	da1b      	bge.n	8014a8c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a5a:	687a      	ldr	r2, [r7, #4]
 8014a5c:	33b0      	adds	r3, #176	; 0xb0
 8014a5e:	009b      	lsls	r3, r3, #2
 8014a60:	4413      	add	r3, r2
 8014a62:	685b      	ldr	r3, [r3, #4]
 8014a64:	689b      	ldr	r3, [r3, #8]
 8014a66:	683a      	ldr	r2, [r7, #0]
 8014a68:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014a6a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014a6c:	683a      	ldr	r2, [r7, #0]
 8014a6e:	88d2      	ldrh	r2, [r2, #6]
 8014a70:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	88db      	ldrh	r3, [r3, #6]
 8014a76:	2b07      	cmp	r3, #7
 8014a78:	bf28      	it	cs
 8014a7a:	2307      	movcs	r3, #7
 8014a7c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014a7e:	693b      	ldr	r3, [r7, #16]
 8014a80:	89fa      	ldrh	r2, [r7, #14]
 8014a82:	4619      	mov	r1, r3
 8014a84:	6878      	ldr	r0, [r7, #4]
 8014a86:	f001 fd89 	bl	801659c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014a8a:	e090      	b.n	8014bae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	785a      	ldrb	r2, [r3, #1]
 8014a90:	693b      	ldr	r3, [r7, #16]
 8014a92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014a96:	683b      	ldr	r3, [r7, #0]
 8014a98:	88db      	ldrh	r3, [r3, #6]
 8014a9a:	2b3f      	cmp	r3, #63	; 0x3f
 8014a9c:	d803      	bhi.n	8014aa6 <USBD_CDC_Setup+0xa6>
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	88db      	ldrh	r3, [r3, #6]
 8014aa2:	b2da      	uxtb	r2, r3
 8014aa4:	e000      	b.n	8014aa8 <USBD_CDC_Setup+0xa8>
 8014aa6:	2240      	movs	r2, #64	; 0x40
 8014aa8:	693b      	ldr	r3, [r7, #16]
 8014aaa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014aae:	6939      	ldr	r1, [r7, #16]
 8014ab0:	693b      	ldr	r3, [r7, #16]
 8014ab2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014ab6:	461a      	mov	r2, r3
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	f001 fd9b 	bl	80165f4 <USBD_CtlPrepareRx>
      break;
 8014abe:	e076      	b.n	8014bae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ac6:	687a      	ldr	r2, [r7, #4]
 8014ac8:	33b0      	adds	r3, #176	; 0xb0
 8014aca:	009b      	lsls	r3, r3, #2
 8014acc:	4413      	add	r3, r2
 8014ace:	685b      	ldr	r3, [r3, #4]
 8014ad0:	689b      	ldr	r3, [r3, #8]
 8014ad2:	683a      	ldr	r2, [r7, #0]
 8014ad4:	7850      	ldrb	r0, [r2, #1]
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	6839      	ldr	r1, [r7, #0]
 8014ada:	4798      	blx	r3
      break;
 8014adc:	e067      	b.n	8014bae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014ade:	683b      	ldr	r3, [r7, #0]
 8014ae0:	785b      	ldrb	r3, [r3, #1]
 8014ae2:	2b0b      	cmp	r3, #11
 8014ae4:	d851      	bhi.n	8014b8a <USBD_CDC_Setup+0x18a>
 8014ae6:	a201      	add	r2, pc, #4	; (adr r2, 8014aec <USBD_CDC_Setup+0xec>)
 8014ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014aec:	08014b1d 	.word	0x08014b1d
 8014af0:	08014b99 	.word	0x08014b99
 8014af4:	08014b8b 	.word	0x08014b8b
 8014af8:	08014b8b 	.word	0x08014b8b
 8014afc:	08014b8b 	.word	0x08014b8b
 8014b00:	08014b8b 	.word	0x08014b8b
 8014b04:	08014b8b 	.word	0x08014b8b
 8014b08:	08014b8b 	.word	0x08014b8b
 8014b0c:	08014b8b 	.word	0x08014b8b
 8014b10:	08014b8b 	.word	0x08014b8b
 8014b14:	08014b47 	.word	0x08014b47
 8014b18:	08014b71 	.word	0x08014b71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b22:	b2db      	uxtb	r3, r3
 8014b24:	2b03      	cmp	r3, #3
 8014b26:	d107      	bne.n	8014b38 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014b28:	f107 030a 	add.w	r3, r7, #10
 8014b2c:	2202      	movs	r2, #2
 8014b2e:	4619      	mov	r1, r3
 8014b30:	6878      	ldr	r0, [r7, #4]
 8014b32:	f001 fd33 	bl	801659c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014b36:	e032      	b.n	8014b9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014b38:	6839      	ldr	r1, [r7, #0]
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f001 fcbd 	bl	80164ba <USBD_CtlError>
            ret = USBD_FAIL;
 8014b40:	2303      	movs	r3, #3
 8014b42:	75fb      	strb	r3, [r7, #23]
          break;
 8014b44:	e02b      	b.n	8014b9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b4c:	b2db      	uxtb	r3, r3
 8014b4e:	2b03      	cmp	r3, #3
 8014b50:	d107      	bne.n	8014b62 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014b52:	f107 030d 	add.w	r3, r7, #13
 8014b56:	2201      	movs	r2, #1
 8014b58:	4619      	mov	r1, r3
 8014b5a:	6878      	ldr	r0, [r7, #4]
 8014b5c:	f001 fd1e 	bl	801659c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014b60:	e01d      	b.n	8014b9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014b62:	6839      	ldr	r1, [r7, #0]
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f001 fca8 	bl	80164ba <USBD_CtlError>
            ret = USBD_FAIL;
 8014b6a:	2303      	movs	r3, #3
 8014b6c:	75fb      	strb	r3, [r7, #23]
          break;
 8014b6e:	e016      	b.n	8014b9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b76:	b2db      	uxtb	r3, r3
 8014b78:	2b03      	cmp	r3, #3
 8014b7a:	d00f      	beq.n	8014b9c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014b7c:	6839      	ldr	r1, [r7, #0]
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f001 fc9b 	bl	80164ba <USBD_CtlError>
            ret = USBD_FAIL;
 8014b84:	2303      	movs	r3, #3
 8014b86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014b88:	e008      	b.n	8014b9c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014b8a:	6839      	ldr	r1, [r7, #0]
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f001 fc94 	bl	80164ba <USBD_CtlError>
          ret = USBD_FAIL;
 8014b92:	2303      	movs	r3, #3
 8014b94:	75fb      	strb	r3, [r7, #23]
          break;
 8014b96:	e002      	b.n	8014b9e <USBD_CDC_Setup+0x19e>
          break;
 8014b98:	bf00      	nop
 8014b9a:	e008      	b.n	8014bae <USBD_CDC_Setup+0x1ae>
          break;
 8014b9c:	bf00      	nop
      }
      break;
 8014b9e:	e006      	b.n	8014bae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014ba0:	6839      	ldr	r1, [r7, #0]
 8014ba2:	6878      	ldr	r0, [r7, #4]
 8014ba4:	f001 fc89 	bl	80164ba <USBD_CtlError>
      ret = USBD_FAIL;
 8014ba8:	2303      	movs	r3, #3
 8014baa:	75fb      	strb	r3, [r7, #23]
      break;
 8014bac:	bf00      	nop
  }

  return (uint8_t)ret;
 8014bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	3718      	adds	r7, #24
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}

08014bb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b084      	sub	sp, #16
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
 8014bc0:	460b      	mov	r3, r1
 8014bc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014bca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	32b0      	adds	r2, #176	; 0xb0
 8014bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d101      	bne.n	8014be2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014bde:	2303      	movs	r3, #3
 8014be0:	e065      	b.n	8014cae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	32b0      	adds	r2, #176	; 0xb0
 8014bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bf0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014bf2:	78fb      	ldrb	r3, [r7, #3]
 8014bf4:	f003 020f 	and.w	r2, r3, #15
 8014bf8:	6879      	ldr	r1, [r7, #4]
 8014bfa:	4613      	mov	r3, r2
 8014bfc:	009b      	lsls	r3, r3, #2
 8014bfe:	4413      	add	r3, r2
 8014c00:	009b      	lsls	r3, r3, #2
 8014c02:	440b      	add	r3, r1
 8014c04:	3318      	adds	r3, #24
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d02f      	beq.n	8014c6c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014c0c:	78fb      	ldrb	r3, [r7, #3]
 8014c0e:	f003 020f 	and.w	r2, r3, #15
 8014c12:	6879      	ldr	r1, [r7, #4]
 8014c14:	4613      	mov	r3, r2
 8014c16:	009b      	lsls	r3, r3, #2
 8014c18:	4413      	add	r3, r2
 8014c1a:	009b      	lsls	r3, r3, #2
 8014c1c:	440b      	add	r3, r1
 8014c1e:	3318      	adds	r3, #24
 8014c20:	681a      	ldr	r2, [r3, #0]
 8014c22:	78fb      	ldrb	r3, [r7, #3]
 8014c24:	f003 010f 	and.w	r1, r3, #15
 8014c28:	68f8      	ldr	r0, [r7, #12]
 8014c2a:	460b      	mov	r3, r1
 8014c2c:	00db      	lsls	r3, r3, #3
 8014c2e:	440b      	add	r3, r1
 8014c30:	009b      	lsls	r3, r3, #2
 8014c32:	4403      	add	r3, r0
 8014c34:	331c      	adds	r3, #28
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	fbb2 f1f3 	udiv	r1, r2, r3
 8014c3c:	fb01 f303 	mul.w	r3, r1, r3
 8014c40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d112      	bne.n	8014c6c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014c46:	78fb      	ldrb	r3, [r7, #3]
 8014c48:	f003 020f 	and.w	r2, r3, #15
 8014c4c:	6879      	ldr	r1, [r7, #4]
 8014c4e:	4613      	mov	r3, r2
 8014c50:	009b      	lsls	r3, r3, #2
 8014c52:	4413      	add	r3, r2
 8014c54:	009b      	lsls	r3, r3, #2
 8014c56:	440b      	add	r3, r1
 8014c58:	3318      	adds	r3, #24
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014c5e:	78f9      	ldrb	r1, [r7, #3]
 8014c60:	2300      	movs	r3, #0
 8014c62:	2200      	movs	r2, #0
 8014c64:	6878      	ldr	r0, [r7, #4]
 8014c66:	f002 f9fe 	bl	8017066 <USBD_LL_Transmit>
 8014c6a:	e01f      	b.n	8014cac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014c6c:	68bb      	ldr	r3, [r7, #8]
 8014c6e:	2200      	movs	r2, #0
 8014c70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c7a:	687a      	ldr	r2, [r7, #4]
 8014c7c:	33b0      	adds	r3, #176	; 0xb0
 8014c7e:	009b      	lsls	r3, r3, #2
 8014c80:	4413      	add	r3, r2
 8014c82:	685b      	ldr	r3, [r3, #4]
 8014c84:	691b      	ldr	r3, [r3, #16]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d010      	beq.n	8014cac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c90:	687a      	ldr	r2, [r7, #4]
 8014c92:	33b0      	adds	r3, #176	; 0xb0
 8014c94:	009b      	lsls	r3, r3, #2
 8014c96:	4413      	add	r3, r2
 8014c98:	685b      	ldr	r3, [r3, #4]
 8014c9a:	691b      	ldr	r3, [r3, #16]
 8014c9c:	68ba      	ldr	r2, [r7, #8]
 8014c9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014ca2:	68ba      	ldr	r2, [r7, #8]
 8014ca4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014ca8:	78fa      	ldrb	r2, [r7, #3]
 8014caa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014cac:	2300      	movs	r3, #0
}
 8014cae:	4618      	mov	r0, r3
 8014cb0:	3710      	adds	r7, #16
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	bd80      	pop	{r7, pc}

08014cb6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014cb6:	b580      	push	{r7, lr}
 8014cb8:	b084      	sub	sp, #16
 8014cba:	af00      	add	r7, sp, #0
 8014cbc:	6078      	str	r0, [r7, #4]
 8014cbe:	460b      	mov	r3, r1
 8014cc0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	32b0      	adds	r2, #176	; 0xb0
 8014ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cd0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	32b0      	adds	r2, #176	; 0xb0
 8014cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d101      	bne.n	8014ce8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014ce4:	2303      	movs	r3, #3
 8014ce6:	e01a      	b.n	8014d1e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014ce8:	78fb      	ldrb	r3, [r7, #3]
 8014cea:	4619      	mov	r1, r3
 8014cec:	6878      	ldr	r0, [r7, #4]
 8014cee:	f002 f9fc 	bl	80170ea <USBD_LL_GetRxDataSize>
 8014cf2:	4602      	mov	r2, r0
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014d00:	687a      	ldr	r2, [r7, #4]
 8014d02:	33b0      	adds	r3, #176	; 0xb0
 8014d04:	009b      	lsls	r3, r3, #2
 8014d06:	4413      	add	r3, r2
 8014d08:	685b      	ldr	r3, [r3, #4]
 8014d0a:	68db      	ldr	r3, [r3, #12]
 8014d0c:	68fa      	ldr	r2, [r7, #12]
 8014d0e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014d12:	68fa      	ldr	r2, [r7, #12]
 8014d14:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014d18:	4611      	mov	r1, r2
 8014d1a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014d1c:	2300      	movs	r3, #0
}
 8014d1e:	4618      	mov	r0, r3
 8014d20:	3710      	adds	r7, #16
 8014d22:	46bd      	mov	sp, r7
 8014d24:	bd80      	pop	{r7, pc}

08014d26 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014d26:	b580      	push	{r7, lr}
 8014d28:	b084      	sub	sp, #16
 8014d2a:	af00      	add	r7, sp, #0
 8014d2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	32b0      	adds	r2, #176	; 0xb0
 8014d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d101      	bne.n	8014d48 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014d44:	2303      	movs	r3, #3
 8014d46:	e025      	b.n	8014d94 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014d4e:	687a      	ldr	r2, [r7, #4]
 8014d50:	33b0      	adds	r3, #176	; 0xb0
 8014d52:	009b      	lsls	r3, r3, #2
 8014d54:	4413      	add	r3, r2
 8014d56:	685b      	ldr	r3, [r3, #4]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d01a      	beq.n	8014d92 <USBD_CDC_EP0_RxReady+0x6c>
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014d62:	2bff      	cmp	r3, #255	; 0xff
 8014d64:	d015      	beq.n	8014d92 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014d6c:	687a      	ldr	r2, [r7, #4]
 8014d6e:	33b0      	adds	r3, #176	; 0xb0
 8014d70:	009b      	lsls	r3, r3, #2
 8014d72:	4413      	add	r3, r2
 8014d74:	685b      	ldr	r3, [r3, #4]
 8014d76:	689b      	ldr	r3, [r3, #8]
 8014d78:	68fa      	ldr	r2, [r7, #12]
 8014d7a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014d7e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014d80:	68fa      	ldr	r2, [r7, #12]
 8014d82:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014d86:	b292      	uxth	r2, r2
 8014d88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	22ff      	movs	r2, #255	; 0xff
 8014d8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014d92:	2300      	movs	r3, #0
}
 8014d94:	4618      	mov	r0, r3
 8014d96:	3710      	adds	r7, #16
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}

08014d9c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b086      	sub	sp, #24
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014da4:	2182      	movs	r1, #130	; 0x82
 8014da6:	4818      	ldr	r0, [pc, #96]	; (8014e08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014da8:	f000 fd4f 	bl	801584a <USBD_GetEpDesc>
 8014dac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014dae:	2101      	movs	r1, #1
 8014db0:	4815      	ldr	r0, [pc, #84]	; (8014e08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014db2:	f000 fd4a 	bl	801584a <USBD_GetEpDesc>
 8014db6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014db8:	2181      	movs	r1, #129	; 0x81
 8014dba:	4813      	ldr	r0, [pc, #76]	; (8014e08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014dbc:	f000 fd45 	bl	801584a <USBD_GetEpDesc>
 8014dc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014dc2:	697b      	ldr	r3, [r7, #20]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d002      	beq.n	8014dce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014dc8:	697b      	ldr	r3, [r7, #20]
 8014dca:	2210      	movs	r2, #16
 8014dcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014dce:	693b      	ldr	r3, [r7, #16]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d006      	beq.n	8014de2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014dd4:	693b      	ldr	r3, [r7, #16]
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ddc:	711a      	strb	r2, [r3, #4]
 8014dde:	2200      	movs	r2, #0
 8014de0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d006      	beq.n	8014df6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	2200      	movs	r2, #0
 8014dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014df0:	711a      	strb	r2, [r3, #4]
 8014df2:	2200      	movs	r2, #0
 8014df4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	2243      	movs	r2, #67	; 0x43
 8014dfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014dfc:	4b02      	ldr	r3, [pc, #8]	; (8014e08 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014dfe:	4618      	mov	r0, r3
 8014e00:	3718      	adds	r7, #24
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}
 8014e06:	bf00      	nop
 8014e08:	200000e8 	.word	0x200000e8

08014e0c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b086      	sub	sp, #24
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014e14:	2182      	movs	r1, #130	; 0x82
 8014e16:	4818      	ldr	r0, [pc, #96]	; (8014e78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014e18:	f000 fd17 	bl	801584a <USBD_GetEpDesc>
 8014e1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014e1e:	2101      	movs	r1, #1
 8014e20:	4815      	ldr	r0, [pc, #84]	; (8014e78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014e22:	f000 fd12 	bl	801584a <USBD_GetEpDesc>
 8014e26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014e28:	2181      	movs	r1, #129	; 0x81
 8014e2a:	4813      	ldr	r0, [pc, #76]	; (8014e78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014e2c:	f000 fd0d 	bl	801584a <USBD_GetEpDesc>
 8014e30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014e32:	697b      	ldr	r3, [r7, #20]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d002      	beq.n	8014e3e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	2210      	movs	r2, #16
 8014e3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014e3e:	693b      	ldr	r3, [r7, #16]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d006      	beq.n	8014e52 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014e44:	693b      	ldr	r3, [r7, #16]
 8014e46:	2200      	movs	r2, #0
 8014e48:	711a      	strb	r2, [r3, #4]
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	f042 0202 	orr.w	r2, r2, #2
 8014e50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d006      	beq.n	8014e66 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	711a      	strb	r2, [r3, #4]
 8014e5e:	2200      	movs	r2, #0
 8014e60:	f042 0202 	orr.w	r2, r2, #2
 8014e64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	2243      	movs	r2, #67	; 0x43
 8014e6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014e6c:	4b02      	ldr	r3, [pc, #8]	; (8014e78 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014e6e:	4618      	mov	r0, r3
 8014e70:	3718      	adds	r7, #24
 8014e72:	46bd      	mov	sp, r7
 8014e74:	bd80      	pop	{r7, pc}
 8014e76:	bf00      	nop
 8014e78:	200000e8 	.word	0x200000e8

08014e7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b086      	sub	sp, #24
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014e84:	2182      	movs	r1, #130	; 0x82
 8014e86:	4818      	ldr	r0, [pc, #96]	; (8014ee8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014e88:	f000 fcdf 	bl	801584a <USBD_GetEpDesc>
 8014e8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014e8e:	2101      	movs	r1, #1
 8014e90:	4815      	ldr	r0, [pc, #84]	; (8014ee8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014e92:	f000 fcda 	bl	801584a <USBD_GetEpDesc>
 8014e96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014e98:	2181      	movs	r1, #129	; 0x81
 8014e9a:	4813      	ldr	r0, [pc, #76]	; (8014ee8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014e9c:	f000 fcd5 	bl	801584a <USBD_GetEpDesc>
 8014ea0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014ea2:	697b      	ldr	r3, [r7, #20]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d002      	beq.n	8014eae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014ea8:	697b      	ldr	r3, [r7, #20]
 8014eaa:	2210      	movs	r2, #16
 8014eac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014eae:	693b      	ldr	r3, [r7, #16]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d006      	beq.n	8014ec2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014eb4:	693b      	ldr	r3, [r7, #16]
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ebc:	711a      	strb	r2, [r3, #4]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d006      	beq.n	8014ed6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	2200      	movs	r2, #0
 8014ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ed0:	711a      	strb	r2, [r3, #4]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	2243      	movs	r2, #67	; 0x43
 8014eda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014edc:	4b02      	ldr	r3, [pc, #8]	; (8014ee8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014ede:	4618      	mov	r0, r3
 8014ee0:	3718      	adds	r7, #24
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	bd80      	pop	{r7, pc}
 8014ee6:	bf00      	nop
 8014ee8:	200000e8 	.word	0x200000e8

08014eec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014eec:	b480      	push	{r7}
 8014eee:	b083      	sub	sp, #12
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	220a      	movs	r2, #10
 8014ef8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014efa:	4b03      	ldr	r3, [pc, #12]	; (8014f08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014efc:	4618      	mov	r0, r3
 8014efe:	370c      	adds	r7, #12
 8014f00:	46bd      	mov	sp, r7
 8014f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f06:	4770      	bx	lr
 8014f08:	200000a4 	.word	0x200000a4

08014f0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014f0c:	b480      	push	{r7}
 8014f0e:	b083      	sub	sp, #12
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
 8014f14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d101      	bne.n	8014f20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014f1c:	2303      	movs	r3, #3
 8014f1e:	e009      	b.n	8014f34 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f26:	687a      	ldr	r2, [r7, #4]
 8014f28:	33b0      	adds	r3, #176	; 0xb0
 8014f2a:	009b      	lsls	r3, r3, #2
 8014f2c:	4413      	add	r3, r2
 8014f2e:	683a      	ldr	r2, [r7, #0]
 8014f30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014f32:	2300      	movs	r3, #0
}
 8014f34:	4618      	mov	r0, r3
 8014f36:	370c      	adds	r7, #12
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3e:	4770      	bx	lr

08014f40 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014f40:	b480      	push	{r7}
 8014f42:	b087      	sub	sp, #28
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	60f8      	str	r0, [r7, #12]
 8014f48:	60b9      	str	r1, [r7, #8]
 8014f4a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	32b0      	adds	r2, #176	; 0xb0
 8014f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f5a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d101      	bne.n	8014f66 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014f62:	2303      	movs	r3, #3
 8014f64:	e008      	b.n	8014f78 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014f66:	697b      	ldr	r3, [r7, #20]
 8014f68:	68ba      	ldr	r2, [r7, #8]
 8014f6a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014f6e:	697b      	ldr	r3, [r7, #20]
 8014f70:	687a      	ldr	r2, [r7, #4]
 8014f72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014f76:	2300      	movs	r3, #0
}
 8014f78:	4618      	mov	r0, r3
 8014f7a:	371c      	adds	r7, #28
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f82:	4770      	bx	lr

08014f84 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014f84:	b480      	push	{r7}
 8014f86:	b085      	sub	sp, #20
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	32b0      	adds	r2, #176	; 0xb0
 8014f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d101      	bne.n	8014fa8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014fa4:	2303      	movs	r3, #3
 8014fa6:	e004      	b.n	8014fb2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	683a      	ldr	r2, [r7, #0]
 8014fac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014fb0:	2300      	movs	r3, #0
}
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	3714      	adds	r7, #20
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fbc:	4770      	bx	lr
	...

08014fc0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b084      	sub	sp, #16
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	32b0      	adds	r2, #176	; 0xb0
 8014fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fd6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014fd8:	2301      	movs	r3, #1
 8014fda:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014fdc:	68bb      	ldr	r3, [r7, #8]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d101      	bne.n	8014fe6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014fe2:	2303      	movs	r3, #3
 8014fe4:	e025      	b.n	8015032 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014fe6:	68bb      	ldr	r3, [r7, #8]
 8014fe8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d11f      	bne.n	8015030 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014ff0:	68bb      	ldr	r3, [r7, #8]
 8014ff2:	2201      	movs	r2, #1
 8014ff4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014ff8:	4b10      	ldr	r3, [pc, #64]	; (801503c <USBD_CDC_TransmitPacket+0x7c>)
 8014ffa:	781b      	ldrb	r3, [r3, #0]
 8014ffc:	f003 020f 	and.w	r2, r3, #15
 8015000:	68bb      	ldr	r3, [r7, #8]
 8015002:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	4613      	mov	r3, r2
 801500a:	009b      	lsls	r3, r3, #2
 801500c:	4413      	add	r3, r2
 801500e:	009b      	lsls	r3, r3, #2
 8015010:	4403      	add	r3, r0
 8015012:	3318      	adds	r3, #24
 8015014:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015016:	4b09      	ldr	r3, [pc, #36]	; (801503c <USBD_CDC_TransmitPacket+0x7c>)
 8015018:	7819      	ldrb	r1, [r3, #0]
 801501a:	68bb      	ldr	r3, [r7, #8]
 801501c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015020:	68bb      	ldr	r3, [r7, #8]
 8015022:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015026:	6878      	ldr	r0, [r7, #4]
 8015028:	f002 f81d 	bl	8017066 <USBD_LL_Transmit>

    ret = USBD_OK;
 801502c:	2300      	movs	r3, #0
 801502e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015030:	7bfb      	ldrb	r3, [r7, #15]
}
 8015032:	4618      	mov	r0, r3
 8015034:	3710      	adds	r7, #16
 8015036:	46bd      	mov	sp, r7
 8015038:	bd80      	pop	{r7, pc}
 801503a:	bf00      	nop
 801503c:	2000012b 	.word	0x2000012b

08015040 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b084      	sub	sp, #16
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	32b0      	adds	r2, #176	; 0xb0
 8015052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015056:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	32b0      	adds	r2, #176	; 0xb0
 8015062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d101      	bne.n	801506e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801506a:	2303      	movs	r3, #3
 801506c:	e018      	b.n	80150a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	7c1b      	ldrb	r3, [r3, #16]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d10a      	bne.n	801508c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015076:	4b0c      	ldr	r3, [pc, #48]	; (80150a8 <USBD_CDC_ReceivePacket+0x68>)
 8015078:	7819      	ldrb	r1, [r3, #0]
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015084:	6878      	ldr	r0, [r7, #4]
 8015086:	f002 f80f 	bl	80170a8 <USBD_LL_PrepareReceive>
 801508a:	e008      	b.n	801509e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801508c:	4b06      	ldr	r3, [pc, #24]	; (80150a8 <USBD_CDC_ReceivePacket+0x68>)
 801508e:	7819      	ldrb	r1, [r3, #0]
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015096:	2340      	movs	r3, #64	; 0x40
 8015098:	6878      	ldr	r0, [r7, #4]
 801509a:	f002 f805 	bl	80170a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801509e:	2300      	movs	r3, #0
}
 80150a0:	4618      	mov	r0, r3
 80150a2:	3710      	adds	r7, #16
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}
 80150a8:	2000012c 	.word	0x2000012c

080150ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b086      	sub	sp, #24
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	60f8      	str	r0, [r7, #12]
 80150b4:	60b9      	str	r1, [r7, #8]
 80150b6:	4613      	mov	r3, r2
 80150b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d101      	bne.n	80150c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80150c0:	2303      	movs	r3, #3
 80150c2:	e01f      	b.n	8015104 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	2200      	movs	r2, #0
 80150c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	2200      	movs	r2, #0
 80150d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	2200      	movs	r2, #0
 80150d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80150dc:	68bb      	ldr	r3, [r7, #8]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d003      	beq.n	80150ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	68ba      	ldr	r2, [r7, #8]
 80150e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	2201      	movs	r2, #1
 80150ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	79fa      	ldrb	r2, [r7, #7]
 80150f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80150f8:	68f8      	ldr	r0, [r7, #12]
 80150fa:	f001 fe7f 	bl	8016dfc <USBD_LL_Init>
 80150fe:	4603      	mov	r3, r0
 8015100:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015102:	7dfb      	ldrb	r3, [r7, #23]
}
 8015104:	4618      	mov	r0, r3
 8015106:	3718      	adds	r7, #24
 8015108:	46bd      	mov	sp, r7
 801510a:	bd80      	pop	{r7, pc}

0801510c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b084      	sub	sp, #16
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
 8015114:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015116:	2300      	movs	r3, #0
 8015118:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801511a:	683b      	ldr	r3, [r7, #0]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d101      	bne.n	8015124 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015120:	2303      	movs	r3, #3
 8015122:	e025      	b.n	8015170 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	683a      	ldr	r2, [r7, #0]
 8015128:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	32ae      	adds	r2, #174	; 0xae
 8015136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801513c:	2b00      	cmp	r3, #0
 801513e:	d00f      	beq.n	8015160 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	32ae      	adds	r2, #174	; 0xae
 801514a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015150:	f107 020e 	add.w	r2, r7, #14
 8015154:	4610      	mov	r0, r2
 8015156:	4798      	blx	r3
 8015158:	4602      	mov	r2, r0
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015166:	1c5a      	adds	r2, r3, #1
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801516e:	2300      	movs	r3, #0
}
 8015170:	4618      	mov	r0, r3
 8015172:	3710      	adds	r7, #16
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}

08015178 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b082      	sub	sp, #8
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015180:	6878      	ldr	r0, [r7, #4]
 8015182:	f001 fe87 	bl	8016e94 <USBD_LL_Start>
 8015186:	4603      	mov	r3, r0
}
 8015188:	4618      	mov	r0, r3
 801518a:	3708      	adds	r7, #8
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}

08015190 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015190:	b480      	push	{r7}
 8015192:	b083      	sub	sp, #12
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015198:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801519a:	4618      	mov	r0, r3
 801519c:	370c      	adds	r7, #12
 801519e:	46bd      	mov	sp, r7
 80151a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a4:	4770      	bx	lr

080151a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80151a6:	b580      	push	{r7, lr}
 80151a8:	b084      	sub	sp, #16
 80151aa:	af00      	add	r7, sp, #0
 80151ac:	6078      	str	r0, [r7, #4]
 80151ae:	460b      	mov	r3, r1
 80151b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80151b2:	2300      	movs	r3, #0
 80151b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d009      	beq.n	80151d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	78fa      	ldrb	r2, [r7, #3]
 80151ca:	4611      	mov	r1, r2
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	4798      	blx	r3
 80151d0:	4603      	mov	r3, r0
 80151d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80151d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80151d6:	4618      	mov	r0, r3
 80151d8:	3710      	adds	r7, #16
 80151da:	46bd      	mov	sp, r7
 80151dc:	bd80      	pop	{r7, pc}

080151de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80151de:	b580      	push	{r7, lr}
 80151e0:	b084      	sub	sp, #16
 80151e2:	af00      	add	r7, sp, #0
 80151e4:	6078      	str	r0, [r7, #4]
 80151e6:	460b      	mov	r3, r1
 80151e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80151ea:	2300      	movs	r3, #0
 80151ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151f4:	685b      	ldr	r3, [r3, #4]
 80151f6:	78fa      	ldrb	r2, [r7, #3]
 80151f8:	4611      	mov	r1, r2
 80151fa:	6878      	ldr	r0, [r7, #4]
 80151fc:	4798      	blx	r3
 80151fe:	4603      	mov	r3, r0
 8015200:	2b00      	cmp	r3, #0
 8015202:	d001      	beq.n	8015208 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015204:	2303      	movs	r3, #3
 8015206:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015208:	7bfb      	ldrb	r3, [r7, #15]
}
 801520a:	4618      	mov	r0, r3
 801520c:	3710      	adds	r7, #16
 801520e:	46bd      	mov	sp, r7
 8015210:	bd80      	pop	{r7, pc}

08015212 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015212:	b580      	push	{r7, lr}
 8015214:	b084      	sub	sp, #16
 8015216:	af00      	add	r7, sp, #0
 8015218:	6078      	str	r0, [r7, #4]
 801521a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015222:	6839      	ldr	r1, [r7, #0]
 8015224:	4618      	mov	r0, r3
 8015226:	f001 f90e 	bl	8016446 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	2201      	movs	r2, #1
 801522e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015238:	461a      	mov	r2, r3
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015246:	f003 031f 	and.w	r3, r3, #31
 801524a:	2b02      	cmp	r3, #2
 801524c:	d01a      	beq.n	8015284 <USBD_LL_SetupStage+0x72>
 801524e:	2b02      	cmp	r3, #2
 8015250:	d822      	bhi.n	8015298 <USBD_LL_SetupStage+0x86>
 8015252:	2b00      	cmp	r3, #0
 8015254:	d002      	beq.n	801525c <USBD_LL_SetupStage+0x4a>
 8015256:	2b01      	cmp	r3, #1
 8015258:	d00a      	beq.n	8015270 <USBD_LL_SetupStage+0x5e>
 801525a:	e01d      	b.n	8015298 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015262:	4619      	mov	r1, r3
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f000 fb65 	bl	8015934 <USBD_StdDevReq>
 801526a:	4603      	mov	r3, r0
 801526c:	73fb      	strb	r3, [r7, #15]
      break;
 801526e:	e020      	b.n	80152b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015276:	4619      	mov	r1, r3
 8015278:	6878      	ldr	r0, [r7, #4]
 801527a:	f000 fbcd 	bl	8015a18 <USBD_StdItfReq>
 801527e:	4603      	mov	r3, r0
 8015280:	73fb      	strb	r3, [r7, #15]
      break;
 8015282:	e016      	b.n	80152b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801528a:	4619      	mov	r1, r3
 801528c:	6878      	ldr	r0, [r7, #4]
 801528e:	f000 fc2f 	bl	8015af0 <USBD_StdEPReq>
 8015292:	4603      	mov	r3, r0
 8015294:	73fb      	strb	r3, [r7, #15]
      break;
 8015296:	e00c      	b.n	80152b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801529e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80152a2:	b2db      	uxtb	r3, r3
 80152a4:	4619      	mov	r1, r3
 80152a6:	6878      	ldr	r0, [r7, #4]
 80152a8:	f001 fe54 	bl	8016f54 <USBD_LL_StallEP>
 80152ac:	4603      	mov	r3, r0
 80152ae:	73fb      	strb	r3, [r7, #15]
      break;
 80152b0:	bf00      	nop
  }

  return ret;
 80152b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80152b4:	4618      	mov	r0, r3
 80152b6:	3710      	adds	r7, #16
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}

080152bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b086      	sub	sp, #24
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	60f8      	str	r0, [r7, #12]
 80152c4:	460b      	mov	r3, r1
 80152c6:	607a      	str	r2, [r7, #4]
 80152c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80152ca:	2300      	movs	r3, #0
 80152cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80152ce:	7afb      	ldrb	r3, [r7, #11]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d16e      	bne.n	80153b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80152da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80152e2:	2b03      	cmp	r3, #3
 80152e4:	f040 8098 	bne.w	8015418 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80152e8:	693b      	ldr	r3, [r7, #16]
 80152ea:	689a      	ldr	r2, [r3, #8]
 80152ec:	693b      	ldr	r3, [r7, #16]
 80152ee:	68db      	ldr	r3, [r3, #12]
 80152f0:	429a      	cmp	r2, r3
 80152f2:	d913      	bls.n	801531c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80152f4:	693b      	ldr	r3, [r7, #16]
 80152f6:	689a      	ldr	r2, [r3, #8]
 80152f8:	693b      	ldr	r3, [r7, #16]
 80152fa:	68db      	ldr	r3, [r3, #12]
 80152fc:	1ad2      	subs	r2, r2, r3
 80152fe:	693b      	ldr	r3, [r7, #16]
 8015300:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015302:	693b      	ldr	r3, [r7, #16]
 8015304:	68da      	ldr	r2, [r3, #12]
 8015306:	693b      	ldr	r3, [r7, #16]
 8015308:	689b      	ldr	r3, [r3, #8]
 801530a:	4293      	cmp	r3, r2
 801530c:	bf28      	it	cs
 801530e:	4613      	movcs	r3, r2
 8015310:	461a      	mov	r2, r3
 8015312:	6879      	ldr	r1, [r7, #4]
 8015314:	68f8      	ldr	r0, [r7, #12]
 8015316:	f001 f98a 	bl	801662e <USBD_CtlContinueRx>
 801531a:	e07d      	b.n	8015418 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015322:	f003 031f 	and.w	r3, r3, #31
 8015326:	2b02      	cmp	r3, #2
 8015328:	d014      	beq.n	8015354 <USBD_LL_DataOutStage+0x98>
 801532a:	2b02      	cmp	r3, #2
 801532c:	d81d      	bhi.n	801536a <USBD_LL_DataOutStage+0xae>
 801532e:	2b00      	cmp	r3, #0
 8015330:	d002      	beq.n	8015338 <USBD_LL_DataOutStage+0x7c>
 8015332:	2b01      	cmp	r3, #1
 8015334:	d003      	beq.n	801533e <USBD_LL_DataOutStage+0x82>
 8015336:	e018      	b.n	801536a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015338:	2300      	movs	r3, #0
 801533a:	75bb      	strb	r3, [r7, #22]
            break;
 801533c:	e018      	b.n	8015370 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015344:	b2db      	uxtb	r3, r3
 8015346:	4619      	mov	r1, r3
 8015348:	68f8      	ldr	r0, [r7, #12]
 801534a:	f000 fa64 	bl	8015816 <USBD_CoreFindIF>
 801534e:	4603      	mov	r3, r0
 8015350:	75bb      	strb	r3, [r7, #22]
            break;
 8015352:	e00d      	b.n	8015370 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801535a:	b2db      	uxtb	r3, r3
 801535c:	4619      	mov	r1, r3
 801535e:	68f8      	ldr	r0, [r7, #12]
 8015360:	f000 fa66 	bl	8015830 <USBD_CoreFindEP>
 8015364:	4603      	mov	r3, r0
 8015366:	75bb      	strb	r3, [r7, #22]
            break;
 8015368:	e002      	b.n	8015370 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801536a:	2300      	movs	r3, #0
 801536c:	75bb      	strb	r3, [r7, #22]
            break;
 801536e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015370:	7dbb      	ldrb	r3, [r7, #22]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d119      	bne.n	80153aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801537c:	b2db      	uxtb	r3, r3
 801537e:	2b03      	cmp	r3, #3
 8015380:	d113      	bne.n	80153aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015382:	7dba      	ldrb	r2, [r7, #22]
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	32ae      	adds	r2, #174	; 0xae
 8015388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801538c:	691b      	ldr	r3, [r3, #16]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d00b      	beq.n	80153aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015392:	7dba      	ldrb	r2, [r7, #22]
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801539a:	7dba      	ldrb	r2, [r7, #22]
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	32ae      	adds	r2, #174	; 0xae
 80153a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153a4:	691b      	ldr	r3, [r3, #16]
 80153a6:	68f8      	ldr	r0, [r7, #12]
 80153a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80153aa:	68f8      	ldr	r0, [r7, #12]
 80153ac:	f001 f950 	bl	8016650 <USBD_CtlSendStatus>
 80153b0:	e032      	b.n	8015418 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80153b2:	7afb      	ldrb	r3, [r7, #11]
 80153b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80153b8:	b2db      	uxtb	r3, r3
 80153ba:	4619      	mov	r1, r3
 80153bc:	68f8      	ldr	r0, [r7, #12]
 80153be:	f000 fa37 	bl	8015830 <USBD_CoreFindEP>
 80153c2:	4603      	mov	r3, r0
 80153c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80153c6:	7dbb      	ldrb	r3, [r7, #22]
 80153c8:	2bff      	cmp	r3, #255	; 0xff
 80153ca:	d025      	beq.n	8015418 <USBD_LL_DataOutStage+0x15c>
 80153cc:	7dbb      	ldrb	r3, [r7, #22]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d122      	bne.n	8015418 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153d8:	b2db      	uxtb	r3, r3
 80153da:	2b03      	cmp	r3, #3
 80153dc:	d117      	bne.n	801540e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80153de:	7dba      	ldrb	r2, [r7, #22]
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	32ae      	adds	r2, #174	; 0xae
 80153e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153e8:	699b      	ldr	r3, [r3, #24]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d00f      	beq.n	801540e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80153ee:	7dba      	ldrb	r2, [r7, #22]
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80153f6:	7dba      	ldrb	r2, [r7, #22]
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	32ae      	adds	r2, #174	; 0xae
 80153fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015400:	699b      	ldr	r3, [r3, #24]
 8015402:	7afa      	ldrb	r2, [r7, #11]
 8015404:	4611      	mov	r1, r2
 8015406:	68f8      	ldr	r0, [r7, #12]
 8015408:	4798      	blx	r3
 801540a:	4603      	mov	r3, r0
 801540c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801540e:	7dfb      	ldrb	r3, [r7, #23]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d001      	beq.n	8015418 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015414:	7dfb      	ldrb	r3, [r7, #23]
 8015416:	e000      	b.n	801541a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015418:	2300      	movs	r3, #0
}
 801541a:	4618      	mov	r0, r3
 801541c:	3718      	adds	r7, #24
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}

08015422 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015422:	b580      	push	{r7, lr}
 8015424:	b086      	sub	sp, #24
 8015426:	af00      	add	r7, sp, #0
 8015428:	60f8      	str	r0, [r7, #12]
 801542a:	460b      	mov	r3, r1
 801542c:	607a      	str	r2, [r7, #4]
 801542e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015430:	7afb      	ldrb	r3, [r7, #11]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d16f      	bne.n	8015516 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	3314      	adds	r3, #20
 801543a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015442:	2b02      	cmp	r3, #2
 8015444:	d15a      	bne.n	80154fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015446:	693b      	ldr	r3, [r7, #16]
 8015448:	689a      	ldr	r2, [r3, #8]
 801544a:	693b      	ldr	r3, [r7, #16]
 801544c:	68db      	ldr	r3, [r3, #12]
 801544e:	429a      	cmp	r2, r3
 8015450:	d914      	bls.n	801547c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015452:	693b      	ldr	r3, [r7, #16]
 8015454:	689a      	ldr	r2, [r3, #8]
 8015456:	693b      	ldr	r3, [r7, #16]
 8015458:	68db      	ldr	r3, [r3, #12]
 801545a:	1ad2      	subs	r2, r2, r3
 801545c:	693b      	ldr	r3, [r7, #16]
 801545e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015460:	693b      	ldr	r3, [r7, #16]
 8015462:	689b      	ldr	r3, [r3, #8]
 8015464:	461a      	mov	r2, r3
 8015466:	6879      	ldr	r1, [r7, #4]
 8015468:	68f8      	ldr	r0, [r7, #12]
 801546a:	f001 f8b2 	bl	80165d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801546e:	2300      	movs	r3, #0
 8015470:	2200      	movs	r2, #0
 8015472:	2100      	movs	r1, #0
 8015474:	68f8      	ldr	r0, [r7, #12]
 8015476:	f001 fe17 	bl	80170a8 <USBD_LL_PrepareReceive>
 801547a:	e03f      	b.n	80154fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801547c:	693b      	ldr	r3, [r7, #16]
 801547e:	68da      	ldr	r2, [r3, #12]
 8015480:	693b      	ldr	r3, [r7, #16]
 8015482:	689b      	ldr	r3, [r3, #8]
 8015484:	429a      	cmp	r2, r3
 8015486:	d11c      	bne.n	80154c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015488:	693b      	ldr	r3, [r7, #16]
 801548a:	685a      	ldr	r2, [r3, #4]
 801548c:	693b      	ldr	r3, [r7, #16]
 801548e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015490:	429a      	cmp	r2, r3
 8015492:	d316      	bcc.n	80154c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015494:	693b      	ldr	r3, [r7, #16]
 8015496:	685a      	ldr	r2, [r3, #4]
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801549e:	429a      	cmp	r2, r3
 80154a0:	d20f      	bcs.n	80154c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80154a2:	2200      	movs	r2, #0
 80154a4:	2100      	movs	r1, #0
 80154a6:	68f8      	ldr	r0, [r7, #12]
 80154a8:	f001 f893 	bl	80165d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	2200      	movs	r2, #0
 80154b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80154b4:	2300      	movs	r3, #0
 80154b6:	2200      	movs	r2, #0
 80154b8:	2100      	movs	r1, #0
 80154ba:	68f8      	ldr	r0, [r7, #12]
 80154bc:	f001 fdf4 	bl	80170a8 <USBD_LL_PrepareReceive>
 80154c0:	e01c      	b.n	80154fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154c8:	b2db      	uxtb	r3, r3
 80154ca:	2b03      	cmp	r3, #3
 80154cc:	d10f      	bne.n	80154ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154d4:	68db      	ldr	r3, [r3, #12]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d009      	beq.n	80154ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	2200      	movs	r2, #0
 80154de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154e8:	68db      	ldr	r3, [r3, #12]
 80154ea:	68f8      	ldr	r0, [r7, #12]
 80154ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80154ee:	2180      	movs	r1, #128	; 0x80
 80154f0:	68f8      	ldr	r0, [r7, #12]
 80154f2:	f001 fd2f 	bl	8016f54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80154f6:	68f8      	ldr	r0, [r7, #12]
 80154f8:	f001 f8bd 	bl	8016676 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015502:	2b00      	cmp	r3, #0
 8015504:	d03a      	beq.n	801557c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015506:	68f8      	ldr	r0, [r7, #12]
 8015508:	f7ff fe42 	bl	8015190 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	2200      	movs	r2, #0
 8015510:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015514:	e032      	b.n	801557c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015516:	7afb      	ldrb	r3, [r7, #11]
 8015518:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801551c:	b2db      	uxtb	r3, r3
 801551e:	4619      	mov	r1, r3
 8015520:	68f8      	ldr	r0, [r7, #12]
 8015522:	f000 f985 	bl	8015830 <USBD_CoreFindEP>
 8015526:	4603      	mov	r3, r0
 8015528:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801552a:	7dfb      	ldrb	r3, [r7, #23]
 801552c:	2bff      	cmp	r3, #255	; 0xff
 801552e:	d025      	beq.n	801557c <USBD_LL_DataInStage+0x15a>
 8015530:	7dfb      	ldrb	r3, [r7, #23]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d122      	bne.n	801557c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801553c:	b2db      	uxtb	r3, r3
 801553e:	2b03      	cmp	r3, #3
 8015540:	d11c      	bne.n	801557c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015542:	7dfa      	ldrb	r2, [r7, #23]
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	32ae      	adds	r2, #174	; 0xae
 8015548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801554c:	695b      	ldr	r3, [r3, #20]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d014      	beq.n	801557c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015552:	7dfa      	ldrb	r2, [r7, #23]
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801555a:	7dfa      	ldrb	r2, [r7, #23]
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	32ae      	adds	r2, #174	; 0xae
 8015560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015564:	695b      	ldr	r3, [r3, #20]
 8015566:	7afa      	ldrb	r2, [r7, #11]
 8015568:	4611      	mov	r1, r2
 801556a:	68f8      	ldr	r0, [r7, #12]
 801556c:	4798      	blx	r3
 801556e:	4603      	mov	r3, r0
 8015570:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015572:	7dbb      	ldrb	r3, [r7, #22]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d001      	beq.n	801557c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015578:	7dbb      	ldrb	r3, [r7, #22]
 801557a:	e000      	b.n	801557e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801557c:	2300      	movs	r3, #0
}
 801557e:	4618      	mov	r0, r3
 8015580:	3718      	adds	r7, #24
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}

08015586 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015586:	b580      	push	{r7, lr}
 8015588:	b084      	sub	sp, #16
 801558a:	af00      	add	r7, sp, #0
 801558c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801558e:	2300      	movs	r3, #0
 8015590:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	2201      	movs	r2, #1
 8015596:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	2200      	movs	r2, #0
 801559e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2200      	movs	r2, #0
 80155a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	2200      	movs	r2, #0
 80155ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	2200      	movs	r2, #0
 80155b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d014      	beq.n	80155ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155c8:	685b      	ldr	r3, [r3, #4]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d00e      	beq.n	80155ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155d4:	685b      	ldr	r3, [r3, #4]
 80155d6:	687a      	ldr	r2, [r7, #4]
 80155d8:	6852      	ldr	r2, [r2, #4]
 80155da:	b2d2      	uxtb	r2, r2
 80155dc:	4611      	mov	r1, r2
 80155de:	6878      	ldr	r0, [r7, #4]
 80155e0:	4798      	blx	r3
 80155e2:	4603      	mov	r3, r0
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d001      	beq.n	80155ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80155e8:	2303      	movs	r3, #3
 80155ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80155ec:	2340      	movs	r3, #64	; 0x40
 80155ee:	2200      	movs	r2, #0
 80155f0:	2100      	movs	r1, #0
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	f001 fc69 	bl	8016eca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	2201      	movs	r2, #1
 80155fc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	2240      	movs	r2, #64	; 0x40
 8015604:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015608:	2340      	movs	r3, #64	; 0x40
 801560a:	2200      	movs	r2, #0
 801560c:	2180      	movs	r1, #128	; 0x80
 801560e:	6878      	ldr	r0, [r7, #4]
 8015610:	f001 fc5b 	bl	8016eca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	2201      	movs	r2, #1
 8015618:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	2240      	movs	r2, #64	; 0x40
 801561e:	621a      	str	r2, [r3, #32]

  return ret;
 8015620:	7bfb      	ldrb	r3, [r7, #15]
}
 8015622:	4618      	mov	r0, r3
 8015624:	3710      	adds	r7, #16
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}

0801562a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801562a:	b480      	push	{r7}
 801562c:	b083      	sub	sp, #12
 801562e:	af00      	add	r7, sp, #0
 8015630:	6078      	str	r0, [r7, #4]
 8015632:	460b      	mov	r3, r1
 8015634:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	78fa      	ldrb	r2, [r7, #3]
 801563a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801563c:	2300      	movs	r3, #0
}
 801563e:	4618      	mov	r0, r3
 8015640:	370c      	adds	r7, #12
 8015642:	46bd      	mov	sp, r7
 8015644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015648:	4770      	bx	lr

0801564a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801564a:	b480      	push	{r7}
 801564c:	b083      	sub	sp, #12
 801564e:	af00      	add	r7, sp, #0
 8015650:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015658:	b2db      	uxtb	r3, r3
 801565a:	2b04      	cmp	r3, #4
 801565c:	d006      	beq.n	801566c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015664:	b2da      	uxtb	r2, r3
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	2204      	movs	r2, #4
 8015670:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015674:	2300      	movs	r3, #0
}
 8015676:	4618      	mov	r0, r3
 8015678:	370c      	adds	r7, #12
 801567a:	46bd      	mov	sp, r7
 801567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015680:	4770      	bx	lr

08015682 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015682:	b480      	push	{r7}
 8015684:	b083      	sub	sp, #12
 8015686:	af00      	add	r7, sp, #0
 8015688:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015690:	b2db      	uxtb	r3, r3
 8015692:	2b04      	cmp	r3, #4
 8015694:	d106      	bne.n	80156a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801569c:	b2da      	uxtb	r2, r3
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80156a4:	2300      	movs	r3, #0
}
 80156a6:	4618      	mov	r0, r3
 80156a8:	370c      	adds	r7, #12
 80156aa:	46bd      	mov	sp, r7
 80156ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b0:	4770      	bx	lr

080156b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80156b2:	b580      	push	{r7, lr}
 80156b4:	b082      	sub	sp, #8
 80156b6:	af00      	add	r7, sp, #0
 80156b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156c0:	b2db      	uxtb	r3, r3
 80156c2:	2b03      	cmp	r3, #3
 80156c4:	d110      	bne.n	80156e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d00b      	beq.n	80156e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156d6:	69db      	ldr	r3, [r3, #28]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d005      	beq.n	80156e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156e2:	69db      	ldr	r3, [r3, #28]
 80156e4:	6878      	ldr	r0, [r7, #4]
 80156e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80156e8:	2300      	movs	r3, #0
}
 80156ea:	4618      	mov	r0, r3
 80156ec:	3708      	adds	r7, #8
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}

080156f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80156f2:	b580      	push	{r7, lr}
 80156f4:	b082      	sub	sp, #8
 80156f6:	af00      	add	r7, sp, #0
 80156f8:	6078      	str	r0, [r7, #4]
 80156fa:	460b      	mov	r3, r1
 80156fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	32ae      	adds	r2, #174	; 0xae
 8015708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d101      	bne.n	8015714 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015710:	2303      	movs	r3, #3
 8015712:	e01c      	b.n	801574e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801571a:	b2db      	uxtb	r3, r3
 801571c:	2b03      	cmp	r3, #3
 801571e:	d115      	bne.n	801574c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	32ae      	adds	r2, #174	; 0xae
 801572a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801572e:	6a1b      	ldr	r3, [r3, #32]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d00b      	beq.n	801574c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	32ae      	adds	r2, #174	; 0xae
 801573e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015742:	6a1b      	ldr	r3, [r3, #32]
 8015744:	78fa      	ldrb	r2, [r7, #3]
 8015746:	4611      	mov	r1, r2
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801574c:	2300      	movs	r3, #0
}
 801574e:	4618      	mov	r0, r3
 8015750:	3708      	adds	r7, #8
 8015752:	46bd      	mov	sp, r7
 8015754:	bd80      	pop	{r7, pc}

08015756 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015756:	b580      	push	{r7, lr}
 8015758:	b082      	sub	sp, #8
 801575a:	af00      	add	r7, sp, #0
 801575c:	6078      	str	r0, [r7, #4]
 801575e:	460b      	mov	r3, r1
 8015760:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	32ae      	adds	r2, #174	; 0xae
 801576c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d101      	bne.n	8015778 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015774:	2303      	movs	r3, #3
 8015776:	e01c      	b.n	80157b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801577e:	b2db      	uxtb	r3, r3
 8015780:	2b03      	cmp	r3, #3
 8015782:	d115      	bne.n	80157b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	32ae      	adds	r2, #174	; 0xae
 801578e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015794:	2b00      	cmp	r3, #0
 8015796:	d00b      	beq.n	80157b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	32ae      	adds	r2, #174	; 0xae
 80157a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157a8:	78fa      	ldrb	r2, [r7, #3]
 80157aa:	4611      	mov	r1, r2
 80157ac:	6878      	ldr	r0, [r7, #4]
 80157ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80157b0:	2300      	movs	r3, #0
}
 80157b2:	4618      	mov	r0, r3
 80157b4:	3708      	adds	r7, #8
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bd80      	pop	{r7, pc}

080157ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80157ba:	b480      	push	{r7}
 80157bc:	b083      	sub	sp, #12
 80157be:	af00      	add	r7, sp, #0
 80157c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80157c2:	2300      	movs	r3, #0
}
 80157c4:	4618      	mov	r0, r3
 80157c6:	370c      	adds	r7, #12
 80157c8:	46bd      	mov	sp, r7
 80157ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ce:	4770      	bx	lr

080157d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80157d8:	2300      	movs	r3, #0
 80157da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	2201      	movs	r2, #1
 80157e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d00e      	beq.n	801580c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157f4:	685b      	ldr	r3, [r3, #4]
 80157f6:	687a      	ldr	r2, [r7, #4]
 80157f8:	6852      	ldr	r2, [r2, #4]
 80157fa:	b2d2      	uxtb	r2, r2
 80157fc:	4611      	mov	r1, r2
 80157fe:	6878      	ldr	r0, [r7, #4]
 8015800:	4798      	blx	r3
 8015802:	4603      	mov	r3, r0
 8015804:	2b00      	cmp	r3, #0
 8015806:	d001      	beq.n	801580c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015808:	2303      	movs	r3, #3
 801580a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801580c:	7bfb      	ldrb	r3, [r7, #15]
}
 801580e:	4618      	mov	r0, r3
 8015810:	3710      	adds	r7, #16
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}

08015816 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015816:	b480      	push	{r7}
 8015818:	b083      	sub	sp, #12
 801581a:	af00      	add	r7, sp, #0
 801581c:	6078      	str	r0, [r7, #4]
 801581e:	460b      	mov	r3, r1
 8015820:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015822:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015824:	4618      	mov	r0, r3
 8015826:	370c      	adds	r7, #12
 8015828:	46bd      	mov	sp, r7
 801582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582e:	4770      	bx	lr

08015830 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015830:	b480      	push	{r7}
 8015832:	b083      	sub	sp, #12
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
 8015838:	460b      	mov	r3, r1
 801583a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801583c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801583e:	4618      	mov	r0, r3
 8015840:	370c      	adds	r7, #12
 8015842:	46bd      	mov	sp, r7
 8015844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015848:	4770      	bx	lr

0801584a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801584a:	b580      	push	{r7, lr}
 801584c:	b086      	sub	sp, #24
 801584e:	af00      	add	r7, sp, #0
 8015850:	6078      	str	r0, [r7, #4]
 8015852:	460b      	mov	r3, r1
 8015854:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801585e:	2300      	movs	r3, #0
 8015860:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	885b      	ldrh	r3, [r3, #2]
 8015866:	b29a      	uxth	r2, r3
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	781b      	ldrb	r3, [r3, #0]
 801586c:	b29b      	uxth	r3, r3
 801586e:	429a      	cmp	r2, r3
 8015870:	d920      	bls.n	80158b4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	781b      	ldrb	r3, [r3, #0]
 8015876:	b29b      	uxth	r3, r3
 8015878:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801587a:	e013      	b.n	80158a4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801587c:	f107 030a 	add.w	r3, r7, #10
 8015880:	4619      	mov	r1, r3
 8015882:	6978      	ldr	r0, [r7, #20]
 8015884:	f000 f81b 	bl	80158be <USBD_GetNextDesc>
 8015888:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801588a:	697b      	ldr	r3, [r7, #20]
 801588c:	785b      	ldrb	r3, [r3, #1]
 801588e:	2b05      	cmp	r3, #5
 8015890:	d108      	bne.n	80158a4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015892:	697b      	ldr	r3, [r7, #20]
 8015894:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015896:	693b      	ldr	r3, [r7, #16]
 8015898:	789b      	ldrb	r3, [r3, #2]
 801589a:	78fa      	ldrb	r2, [r7, #3]
 801589c:	429a      	cmp	r2, r3
 801589e:	d008      	beq.n	80158b2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80158a0:	2300      	movs	r3, #0
 80158a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	885b      	ldrh	r3, [r3, #2]
 80158a8:	b29a      	uxth	r2, r3
 80158aa:	897b      	ldrh	r3, [r7, #10]
 80158ac:	429a      	cmp	r2, r3
 80158ae:	d8e5      	bhi.n	801587c <USBD_GetEpDesc+0x32>
 80158b0:	e000      	b.n	80158b4 <USBD_GetEpDesc+0x6a>
          break;
 80158b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80158b4:	693b      	ldr	r3, [r7, #16]
}
 80158b6:	4618      	mov	r0, r3
 80158b8:	3718      	adds	r7, #24
 80158ba:	46bd      	mov	sp, r7
 80158bc:	bd80      	pop	{r7, pc}

080158be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80158be:	b480      	push	{r7}
 80158c0:	b085      	sub	sp, #20
 80158c2:	af00      	add	r7, sp, #0
 80158c4:	6078      	str	r0, [r7, #4]
 80158c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80158cc:	683b      	ldr	r3, [r7, #0]
 80158ce:	881a      	ldrh	r2, [r3, #0]
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	781b      	ldrb	r3, [r3, #0]
 80158d4:	b29b      	uxth	r3, r3
 80158d6:	4413      	add	r3, r2
 80158d8:	b29a      	uxth	r2, r3
 80158da:	683b      	ldr	r3, [r7, #0]
 80158dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	781b      	ldrb	r3, [r3, #0]
 80158e2:	461a      	mov	r2, r3
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	4413      	add	r3, r2
 80158e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80158ea:	68fb      	ldr	r3, [r7, #12]
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	3714      	adds	r7, #20
 80158f0:	46bd      	mov	sp, r7
 80158f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f6:	4770      	bx	lr

080158f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80158f8:	b480      	push	{r7}
 80158fa:	b087      	sub	sp, #28
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015904:	697b      	ldr	r3, [r7, #20]
 8015906:	781b      	ldrb	r3, [r3, #0]
 8015908:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801590a:	697b      	ldr	r3, [r7, #20]
 801590c:	3301      	adds	r3, #1
 801590e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015910:	697b      	ldr	r3, [r7, #20]
 8015912:	781b      	ldrb	r3, [r3, #0]
 8015914:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015916:	8a3b      	ldrh	r3, [r7, #16]
 8015918:	021b      	lsls	r3, r3, #8
 801591a:	b21a      	sxth	r2, r3
 801591c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015920:	4313      	orrs	r3, r2
 8015922:	b21b      	sxth	r3, r3
 8015924:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015926:	89fb      	ldrh	r3, [r7, #14]
}
 8015928:	4618      	mov	r0, r3
 801592a:	371c      	adds	r7, #28
 801592c:	46bd      	mov	sp, r7
 801592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015932:	4770      	bx	lr

08015934 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b084      	sub	sp, #16
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
 801593c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801593e:	2300      	movs	r3, #0
 8015940:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015942:	683b      	ldr	r3, [r7, #0]
 8015944:	781b      	ldrb	r3, [r3, #0]
 8015946:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801594a:	2b40      	cmp	r3, #64	; 0x40
 801594c:	d005      	beq.n	801595a <USBD_StdDevReq+0x26>
 801594e:	2b40      	cmp	r3, #64	; 0x40
 8015950:	d857      	bhi.n	8015a02 <USBD_StdDevReq+0xce>
 8015952:	2b00      	cmp	r3, #0
 8015954:	d00f      	beq.n	8015976 <USBD_StdDevReq+0x42>
 8015956:	2b20      	cmp	r3, #32
 8015958:	d153      	bne.n	8015a02 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	32ae      	adds	r2, #174	; 0xae
 8015964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015968:	689b      	ldr	r3, [r3, #8]
 801596a:	6839      	ldr	r1, [r7, #0]
 801596c:	6878      	ldr	r0, [r7, #4]
 801596e:	4798      	blx	r3
 8015970:	4603      	mov	r3, r0
 8015972:	73fb      	strb	r3, [r7, #15]
      break;
 8015974:	e04a      	b.n	8015a0c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015976:	683b      	ldr	r3, [r7, #0]
 8015978:	785b      	ldrb	r3, [r3, #1]
 801597a:	2b09      	cmp	r3, #9
 801597c:	d83b      	bhi.n	80159f6 <USBD_StdDevReq+0xc2>
 801597e:	a201      	add	r2, pc, #4	; (adr r2, 8015984 <USBD_StdDevReq+0x50>)
 8015980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015984:	080159d9 	.word	0x080159d9
 8015988:	080159ed 	.word	0x080159ed
 801598c:	080159f7 	.word	0x080159f7
 8015990:	080159e3 	.word	0x080159e3
 8015994:	080159f7 	.word	0x080159f7
 8015998:	080159b7 	.word	0x080159b7
 801599c:	080159ad 	.word	0x080159ad
 80159a0:	080159f7 	.word	0x080159f7
 80159a4:	080159cf 	.word	0x080159cf
 80159a8:	080159c1 	.word	0x080159c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80159ac:	6839      	ldr	r1, [r7, #0]
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f000 fa3c 	bl	8015e2c <USBD_GetDescriptor>
          break;
 80159b4:	e024      	b.n	8015a00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80159b6:	6839      	ldr	r1, [r7, #0]
 80159b8:	6878      	ldr	r0, [r7, #4]
 80159ba:	f000 fba1 	bl	8016100 <USBD_SetAddress>
          break;
 80159be:	e01f      	b.n	8015a00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80159c0:	6839      	ldr	r1, [r7, #0]
 80159c2:	6878      	ldr	r0, [r7, #4]
 80159c4:	f000 fbe0 	bl	8016188 <USBD_SetConfig>
 80159c8:	4603      	mov	r3, r0
 80159ca:	73fb      	strb	r3, [r7, #15]
          break;
 80159cc:	e018      	b.n	8015a00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80159ce:	6839      	ldr	r1, [r7, #0]
 80159d0:	6878      	ldr	r0, [r7, #4]
 80159d2:	f000 fc83 	bl	80162dc <USBD_GetConfig>
          break;
 80159d6:	e013      	b.n	8015a00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80159d8:	6839      	ldr	r1, [r7, #0]
 80159da:	6878      	ldr	r0, [r7, #4]
 80159dc:	f000 fcb4 	bl	8016348 <USBD_GetStatus>
          break;
 80159e0:	e00e      	b.n	8015a00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80159e2:	6839      	ldr	r1, [r7, #0]
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f000 fce3 	bl	80163b0 <USBD_SetFeature>
          break;
 80159ea:	e009      	b.n	8015a00 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80159ec:	6839      	ldr	r1, [r7, #0]
 80159ee:	6878      	ldr	r0, [r7, #4]
 80159f0:	f000 fd07 	bl	8016402 <USBD_ClrFeature>
          break;
 80159f4:	e004      	b.n	8015a00 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80159f6:	6839      	ldr	r1, [r7, #0]
 80159f8:	6878      	ldr	r0, [r7, #4]
 80159fa:	f000 fd5e 	bl	80164ba <USBD_CtlError>
          break;
 80159fe:	bf00      	nop
      }
      break;
 8015a00:	e004      	b.n	8015a0c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015a02:	6839      	ldr	r1, [r7, #0]
 8015a04:	6878      	ldr	r0, [r7, #4]
 8015a06:	f000 fd58 	bl	80164ba <USBD_CtlError>
      break;
 8015a0a:	bf00      	nop
  }

  return ret;
 8015a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a0e:	4618      	mov	r0, r3
 8015a10:	3710      	adds	r7, #16
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}
 8015a16:	bf00      	nop

08015a18 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b084      	sub	sp, #16
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a22:	2300      	movs	r3, #0
 8015a24:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a26:	683b      	ldr	r3, [r7, #0]
 8015a28:	781b      	ldrb	r3, [r3, #0]
 8015a2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015a2e:	2b40      	cmp	r3, #64	; 0x40
 8015a30:	d005      	beq.n	8015a3e <USBD_StdItfReq+0x26>
 8015a32:	2b40      	cmp	r3, #64	; 0x40
 8015a34:	d852      	bhi.n	8015adc <USBD_StdItfReq+0xc4>
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d001      	beq.n	8015a3e <USBD_StdItfReq+0x26>
 8015a3a:	2b20      	cmp	r3, #32
 8015a3c:	d14e      	bne.n	8015adc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a44:	b2db      	uxtb	r3, r3
 8015a46:	3b01      	subs	r3, #1
 8015a48:	2b02      	cmp	r3, #2
 8015a4a:	d840      	bhi.n	8015ace <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015a4c:	683b      	ldr	r3, [r7, #0]
 8015a4e:	889b      	ldrh	r3, [r3, #4]
 8015a50:	b2db      	uxtb	r3, r3
 8015a52:	2b01      	cmp	r3, #1
 8015a54:	d836      	bhi.n	8015ac4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015a56:	683b      	ldr	r3, [r7, #0]
 8015a58:	889b      	ldrh	r3, [r3, #4]
 8015a5a:	b2db      	uxtb	r3, r3
 8015a5c:	4619      	mov	r1, r3
 8015a5e:	6878      	ldr	r0, [r7, #4]
 8015a60:	f7ff fed9 	bl	8015816 <USBD_CoreFindIF>
 8015a64:	4603      	mov	r3, r0
 8015a66:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a68:	7bbb      	ldrb	r3, [r7, #14]
 8015a6a:	2bff      	cmp	r3, #255	; 0xff
 8015a6c:	d01d      	beq.n	8015aaa <USBD_StdItfReq+0x92>
 8015a6e:	7bbb      	ldrb	r3, [r7, #14]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d11a      	bne.n	8015aaa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015a74:	7bba      	ldrb	r2, [r7, #14]
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	32ae      	adds	r2, #174	; 0xae
 8015a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a7e:	689b      	ldr	r3, [r3, #8]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d00f      	beq.n	8015aa4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015a84:	7bba      	ldrb	r2, [r7, #14]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015a8c:	7bba      	ldrb	r2, [r7, #14]
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	32ae      	adds	r2, #174	; 0xae
 8015a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a96:	689b      	ldr	r3, [r3, #8]
 8015a98:	6839      	ldr	r1, [r7, #0]
 8015a9a:	6878      	ldr	r0, [r7, #4]
 8015a9c:	4798      	blx	r3
 8015a9e:	4603      	mov	r3, r0
 8015aa0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015aa2:	e004      	b.n	8015aae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015aa4:	2303      	movs	r3, #3
 8015aa6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015aa8:	e001      	b.n	8015aae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015aaa:	2303      	movs	r3, #3
 8015aac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015aae:	683b      	ldr	r3, [r7, #0]
 8015ab0:	88db      	ldrh	r3, [r3, #6]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d110      	bne.n	8015ad8 <USBD_StdItfReq+0xc0>
 8015ab6:	7bfb      	ldrb	r3, [r7, #15]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d10d      	bne.n	8015ad8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015abc:	6878      	ldr	r0, [r7, #4]
 8015abe:	f000 fdc7 	bl	8016650 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015ac2:	e009      	b.n	8015ad8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015ac4:	6839      	ldr	r1, [r7, #0]
 8015ac6:	6878      	ldr	r0, [r7, #4]
 8015ac8:	f000 fcf7 	bl	80164ba <USBD_CtlError>
          break;
 8015acc:	e004      	b.n	8015ad8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015ace:	6839      	ldr	r1, [r7, #0]
 8015ad0:	6878      	ldr	r0, [r7, #4]
 8015ad2:	f000 fcf2 	bl	80164ba <USBD_CtlError>
          break;
 8015ad6:	e000      	b.n	8015ada <USBD_StdItfReq+0xc2>
          break;
 8015ad8:	bf00      	nop
      }
      break;
 8015ada:	e004      	b.n	8015ae6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015adc:	6839      	ldr	r1, [r7, #0]
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f000 fceb 	bl	80164ba <USBD_CtlError>
      break;
 8015ae4:	bf00      	nop
  }

  return ret;
 8015ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	3710      	adds	r7, #16
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd80      	pop	{r7, pc}

08015af0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015af0:	b580      	push	{r7, lr}
 8015af2:	b084      	sub	sp, #16
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	6078      	str	r0, [r7, #4]
 8015af8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015afa:	2300      	movs	r3, #0
 8015afc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015afe:	683b      	ldr	r3, [r7, #0]
 8015b00:	889b      	ldrh	r3, [r3, #4]
 8015b02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	781b      	ldrb	r3, [r3, #0]
 8015b08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015b0c:	2b40      	cmp	r3, #64	; 0x40
 8015b0e:	d007      	beq.n	8015b20 <USBD_StdEPReq+0x30>
 8015b10:	2b40      	cmp	r3, #64	; 0x40
 8015b12:	f200 817f 	bhi.w	8015e14 <USBD_StdEPReq+0x324>
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d02a      	beq.n	8015b70 <USBD_StdEPReq+0x80>
 8015b1a:	2b20      	cmp	r3, #32
 8015b1c:	f040 817a 	bne.w	8015e14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015b20:	7bbb      	ldrb	r3, [r7, #14]
 8015b22:	4619      	mov	r1, r3
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	f7ff fe83 	bl	8015830 <USBD_CoreFindEP>
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015b2e:	7b7b      	ldrb	r3, [r7, #13]
 8015b30:	2bff      	cmp	r3, #255	; 0xff
 8015b32:	f000 8174 	beq.w	8015e1e <USBD_StdEPReq+0x32e>
 8015b36:	7b7b      	ldrb	r3, [r7, #13]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	f040 8170 	bne.w	8015e1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015b3e:	7b7a      	ldrb	r2, [r7, #13]
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015b46:	7b7a      	ldrb	r2, [r7, #13]
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	32ae      	adds	r2, #174	; 0xae
 8015b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b50:	689b      	ldr	r3, [r3, #8]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	f000 8163 	beq.w	8015e1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015b58:	7b7a      	ldrb	r2, [r7, #13]
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	32ae      	adds	r2, #174	; 0xae
 8015b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b62:	689b      	ldr	r3, [r3, #8]
 8015b64:	6839      	ldr	r1, [r7, #0]
 8015b66:	6878      	ldr	r0, [r7, #4]
 8015b68:	4798      	blx	r3
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015b6e:	e156      	b.n	8015e1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015b70:	683b      	ldr	r3, [r7, #0]
 8015b72:	785b      	ldrb	r3, [r3, #1]
 8015b74:	2b03      	cmp	r3, #3
 8015b76:	d008      	beq.n	8015b8a <USBD_StdEPReq+0x9a>
 8015b78:	2b03      	cmp	r3, #3
 8015b7a:	f300 8145 	bgt.w	8015e08 <USBD_StdEPReq+0x318>
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	f000 809b 	beq.w	8015cba <USBD_StdEPReq+0x1ca>
 8015b84:	2b01      	cmp	r3, #1
 8015b86:	d03c      	beq.n	8015c02 <USBD_StdEPReq+0x112>
 8015b88:	e13e      	b.n	8015e08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b90:	b2db      	uxtb	r3, r3
 8015b92:	2b02      	cmp	r3, #2
 8015b94:	d002      	beq.n	8015b9c <USBD_StdEPReq+0xac>
 8015b96:	2b03      	cmp	r3, #3
 8015b98:	d016      	beq.n	8015bc8 <USBD_StdEPReq+0xd8>
 8015b9a:	e02c      	b.n	8015bf6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b9c:	7bbb      	ldrb	r3, [r7, #14]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d00d      	beq.n	8015bbe <USBD_StdEPReq+0xce>
 8015ba2:	7bbb      	ldrb	r3, [r7, #14]
 8015ba4:	2b80      	cmp	r3, #128	; 0x80
 8015ba6:	d00a      	beq.n	8015bbe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015ba8:	7bbb      	ldrb	r3, [r7, #14]
 8015baa:	4619      	mov	r1, r3
 8015bac:	6878      	ldr	r0, [r7, #4]
 8015bae:	f001 f9d1 	bl	8016f54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015bb2:	2180      	movs	r1, #128	; 0x80
 8015bb4:	6878      	ldr	r0, [r7, #4]
 8015bb6:	f001 f9cd 	bl	8016f54 <USBD_LL_StallEP>
 8015bba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015bbc:	e020      	b.n	8015c00 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015bbe:	6839      	ldr	r1, [r7, #0]
 8015bc0:	6878      	ldr	r0, [r7, #4]
 8015bc2:	f000 fc7a 	bl	80164ba <USBD_CtlError>
              break;
 8015bc6:	e01b      	b.n	8015c00 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015bc8:	683b      	ldr	r3, [r7, #0]
 8015bca:	885b      	ldrh	r3, [r3, #2]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d10e      	bne.n	8015bee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015bd0:	7bbb      	ldrb	r3, [r7, #14]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d00b      	beq.n	8015bee <USBD_StdEPReq+0xfe>
 8015bd6:	7bbb      	ldrb	r3, [r7, #14]
 8015bd8:	2b80      	cmp	r3, #128	; 0x80
 8015bda:	d008      	beq.n	8015bee <USBD_StdEPReq+0xfe>
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	88db      	ldrh	r3, [r3, #6]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d104      	bne.n	8015bee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015be4:	7bbb      	ldrb	r3, [r7, #14]
 8015be6:	4619      	mov	r1, r3
 8015be8:	6878      	ldr	r0, [r7, #4]
 8015bea:	f001 f9b3 	bl	8016f54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015bee:	6878      	ldr	r0, [r7, #4]
 8015bf0:	f000 fd2e 	bl	8016650 <USBD_CtlSendStatus>

              break;
 8015bf4:	e004      	b.n	8015c00 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015bf6:	6839      	ldr	r1, [r7, #0]
 8015bf8:	6878      	ldr	r0, [r7, #4]
 8015bfa:	f000 fc5e 	bl	80164ba <USBD_CtlError>
              break;
 8015bfe:	bf00      	nop
          }
          break;
 8015c00:	e107      	b.n	8015e12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c08:	b2db      	uxtb	r3, r3
 8015c0a:	2b02      	cmp	r3, #2
 8015c0c:	d002      	beq.n	8015c14 <USBD_StdEPReq+0x124>
 8015c0e:	2b03      	cmp	r3, #3
 8015c10:	d016      	beq.n	8015c40 <USBD_StdEPReq+0x150>
 8015c12:	e04b      	b.n	8015cac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015c14:	7bbb      	ldrb	r3, [r7, #14]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d00d      	beq.n	8015c36 <USBD_StdEPReq+0x146>
 8015c1a:	7bbb      	ldrb	r3, [r7, #14]
 8015c1c:	2b80      	cmp	r3, #128	; 0x80
 8015c1e:	d00a      	beq.n	8015c36 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015c20:	7bbb      	ldrb	r3, [r7, #14]
 8015c22:	4619      	mov	r1, r3
 8015c24:	6878      	ldr	r0, [r7, #4]
 8015c26:	f001 f995 	bl	8016f54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015c2a:	2180      	movs	r1, #128	; 0x80
 8015c2c:	6878      	ldr	r0, [r7, #4]
 8015c2e:	f001 f991 	bl	8016f54 <USBD_LL_StallEP>
 8015c32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015c34:	e040      	b.n	8015cb8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015c36:	6839      	ldr	r1, [r7, #0]
 8015c38:	6878      	ldr	r0, [r7, #4]
 8015c3a:	f000 fc3e 	bl	80164ba <USBD_CtlError>
              break;
 8015c3e:	e03b      	b.n	8015cb8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	885b      	ldrh	r3, [r3, #2]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d136      	bne.n	8015cb6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015c48:	7bbb      	ldrb	r3, [r7, #14]
 8015c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d004      	beq.n	8015c5c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015c52:	7bbb      	ldrb	r3, [r7, #14]
 8015c54:	4619      	mov	r1, r3
 8015c56:	6878      	ldr	r0, [r7, #4]
 8015c58:	f001 f99b 	bl	8016f92 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f000 fcf7 	bl	8016650 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015c62:	7bbb      	ldrb	r3, [r7, #14]
 8015c64:	4619      	mov	r1, r3
 8015c66:	6878      	ldr	r0, [r7, #4]
 8015c68:	f7ff fde2 	bl	8015830 <USBD_CoreFindEP>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015c70:	7b7b      	ldrb	r3, [r7, #13]
 8015c72:	2bff      	cmp	r3, #255	; 0xff
 8015c74:	d01f      	beq.n	8015cb6 <USBD_StdEPReq+0x1c6>
 8015c76:	7b7b      	ldrb	r3, [r7, #13]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d11c      	bne.n	8015cb6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015c7c:	7b7a      	ldrb	r2, [r7, #13]
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015c84:	7b7a      	ldrb	r2, [r7, #13]
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	32ae      	adds	r2, #174	; 0xae
 8015c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c8e:	689b      	ldr	r3, [r3, #8]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d010      	beq.n	8015cb6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015c94:	7b7a      	ldrb	r2, [r7, #13]
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	32ae      	adds	r2, #174	; 0xae
 8015c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c9e:	689b      	ldr	r3, [r3, #8]
 8015ca0:	6839      	ldr	r1, [r7, #0]
 8015ca2:	6878      	ldr	r0, [r7, #4]
 8015ca4:	4798      	blx	r3
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015caa:	e004      	b.n	8015cb6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015cac:	6839      	ldr	r1, [r7, #0]
 8015cae:	6878      	ldr	r0, [r7, #4]
 8015cb0:	f000 fc03 	bl	80164ba <USBD_CtlError>
              break;
 8015cb4:	e000      	b.n	8015cb8 <USBD_StdEPReq+0x1c8>
              break;
 8015cb6:	bf00      	nop
          }
          break;
 8015cb8:	e0ab      	b.n	8015e12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015cc0:	b2db      	uxtb	r3, r3
 8015cc2:	2b02      	cmp	r3, #2
 8015cc4:	d002      	beq.n	8015ccc <USBD_StdEPReq+0x1dc>
 8015cc6:	2b03      	cmp	r3, #3
 8015cc8:	d032      	beq.n	8015d30 <USBD_StdEPReq+0x240>
 8015cca:	e097      	b.n	8015dfc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ccc:	7bbb      	ldrb	r3, [r7, #14]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d007      	beq.n	8015ce2 <USBD_StdEPReq+0x1f2>
 8015cd2:	7bbb      	ldrb	r3, [r7, #14]
 8015cd4:	2b80      	cmp	r3, #128	; 0x80
 8015cd6:	d004      	beq.n	8015ce2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015cd8:	6839      	ldr	r1, [r7, #0]
 8015cda:	6878      	ldr	r0, [r7, #4]
 8015cdc:	f000 fbed 	bl	80164ba <USBD_CtlError>
                break;
 8015ce0:	e091      	b.n	8015e06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ce2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	da0b      	bge.n	8015d02 <USBD_StdEPReq+0x212>
 8015cea:	7bbb      	ldrb	r3, [r7, #14]
 8015cec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015cf0:	4613      	mov	r3, r2
 8015cf2:	009b      	lsls	r3, r3, #2
 8015cf4:	4413      	add	r3, r2
 8015cf6:	009b      	lsls	r3, r3, #2
 8015cf8:	3310      	adds	r3, #16
 8015cfa:	687a      	ldr	r2, [r7, #4]
 8015cfc:	4413      	add	r3, r2
 8015cfe:	3304      	adds	r3, #4
 8015d00:	e00b      	b.n	8015d1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015d02:	7bbb      	ldrb	r3, [r7, #14]
 8015d04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015d08:	4613      	mov	r3, r2
 8015d0a:	009b      	lsls	r3, r3, #2
 8015d0c:	4413      	add	r3, r2
 8015d0e:	009b      	lsls	r3, r3, #2
 8015d10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015d14:	687a      	ldr	r2, [r7, #4]
 8015d16:	4413      	add	r3, r2
 8015d18:	3304      	adds	r3, #4
 8015d1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015d1c:	68bb      	ldr	r3, [r7, #8]
 8015d1e:	2200      	movs	r2, #0
 8015d20:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015d22:	68bb      	ldr	r3, [r7, #8]
 8015d24:	2202      	movs	r2, #2
 8015d26:	4619      	mov	r1, r3
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f000 fc37 	bl	801659c <USBD_CtlSendData>
              break;
 8015d2e:	e06a      	b.n	8015e06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015d30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	da11      	bge.n	8015d5c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015d38:	7bbb      	ldrb	r3, [r7, #14]
 8015d3a:	f003 020f 	and.w	r2, r3, #15
 8015d3e:	6879      	ldr	r1, [r7, #4]
 8015d40:	4613      	mov	r3, r2
 8015d42:	009b      	lsls	r3, r3, #2
 8015d44:	4413      	add	r3, r2
 8015d46:	009b      	lsls	r3, r3, #2
 8015d48:	440b      	add	r3, r1
 8015d4a:	3324      	adds	r3, #36	; 0x24
 8015d4c:	881b      	ldrh	r3, [r3, #0]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d117      	bne.n	8015d82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015d52:	6839      	ldr	r1, [r7, #0]
 8015d54:	6878      	ldr	r0, [r7, #4]
 8015d56:	f000 fbb0 	bl	80164ba <USBD_CtlError>
                  break;
 8015d5a:	e054      	b.n	8015e06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015d5c:	7bbb      	ldrb	r3, [r7, #14]
 8015d5e:	f003 020f 	and.w	r2, r3, #15
 8015d62:	6879      	ldr	r1, [r7, #4]
 8015d64:	4613      	mov	r3, r2
 8015d66:	009b      	lsls	r3, r3, #2
 8015d68:	4413      	add	r3, r2
 8015d6a:	009b      	lsls	r3, r3, #2
 8015d6c:	440b      	add	r3, r1
 8015d6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015d72:	881b      	ldrh	r3, [r3, #0]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d104      	bne.n	8015d82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015d78:	6839      	ldr	r1, [r7, #0]
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	f000 fb9d 	bl	80164ba <USBD_CtlError>
                  break;
 8015d80:	e041      	b.n	8015e06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015d82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	da0b      	bge.n	8015da2 <USBD_StdEPReq+0x2b2>
 8015d8a:	7bbb      	ldrb	r3, [r7, #14]
 8015d8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015d90:	4613      	mov	r3, r2
 8015d92:	009b      	lsls	r3, r3, #2
 8015d94:	4413      	add	r3, r2
 8015d96:	009b      	lsls	r3, r3, #2
 8015d98:	3310      	adds	r3, #16
 8015d9a:	687a      	ldr	r2, [r7, #4]
 8015d9c:	4413      	add	r3, r2
 8015d9e:	3304      	adds	r3, #4
 8015da0:	e00b      	b.n	8015dba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015da2:	7bbb      	ldrb	r3, [r7, #14]
 8015da4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015da8:	4613      	mov	r3, r2
 8015daa:	009b      	lsls	r3, r3, #2
 8015dac:	4413      	add	r3, r2
 8015dae:	009b      	lsls	r3, r3, #2
 8015db0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015db4:	687a      	ldr	r2, [r7, #4]
 8015db6:	4413      	add	r3, r2
 8015db8:	3304      	adds	r3, #4
 8015dba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015dbc:	7bbb      	ldrb	r3, [r7, #14]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d002      	beq.n	8015dc8 <USBD_StdEPReq+0x2d8>
 8015dc2:	7bbb      	ldrb	r3, [r7, #14]
 8015dc4:	2b80      	cmp	r3, #128	; 0x80
 8015dc6:	d103      	bne.n	8015dd0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015dc8:	68bb      	ldr	r3, [r7, #8]
 8015dca:	2200      	movs	r2, #0
 8015dcc:	601a      	str	r2, [r3, #0]
 8015dce:	e00e      	b.n	8015dee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015dd0:	7bbb      	ldrb	r3, [r7, #14]
 8015dd2:	4619      	mov	r1, r3
 8015dd4:	6878      	ldr	r0, [r7, #4]
 8015dd6:	f001 f8fb 	bl	8016fd0 <USBD_LL_IsStallEP>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d003      	beq.n	8015de8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015de0:	68bb      	ldr	r3, [r7, #8]
 8015de2:	2201      	movs	r2, #1
 8015de4:	601a      	str	r2, [r3, #0]
 8015de6:	e002      	b.n	8015dee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015de8:	68bb      	ldr	r3, [r7, #8]
 8015dea:	2200      	movs	r2, #0
 8015dec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015dee:	68bb      	ldr	r3, [r7, #8]
 8015df0:	2202      	movs	r2, #2
 8015df2:	4619      	mov	r1, r3
 8015df4:	6878      	ldr	r0, [r7, #4]
 8015df6:	f000 fbd1 	bl	801659c <USBD_CtlSendData>
              break;
 8015dfa:	e004      	b.n	8015e06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015dfc:	6839      	ldr	r1, [r7, #0]
 8015dfe:	6878      	ldr	r0, [r7, #4]
 8015e00:	f000 fb5b 	bl	80164ba <USBD_CtlError>
              break;
 8015e04:	bf00      	nop
          }
          break;
 8015e06:	e004      	b.n	8015e12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015e08:	6839      	ldr	r1, [r7, #0]
 8015e0a:	6878      	ldr	r0, [r7, #4]
 8015e0c:	f000 fb55 	bl	80164ba <USBD_CtlError>
          break;
 8015e10:	bf00      	nop
      }
      break;
 8015e12:	e005      	b.n	8015e20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015e14:	6839      	ldr	r1, [r7, #0]
 8015e16:	6878      	ldr	r0, [r7, #4]
 8015e18:	f000 fb4f 	bl	80164ba <USBD_CtlError>
      break;
 8015e1c:	e000      	b.n	8015e20 <USBD_StdEPReq+0x330>
      break;
 8015e1e:	bf00      	nop
  }

  return ret;
 8015e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	3710      	adds	r7, #16
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bd80      	pop	{r7, pc}
	...

08015e2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	b084      	sub	sp, #16
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	6078      	str	r0, [r7, #4]
 8015e34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015e36:	2300      	movs	r3, #0
 8015e38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015e3e:	2300      	movs	r3, #0
 8015e40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015e42:	683b      	ldr	r3, [r7, #0]
 8015e44:	885b      	ldrh	r3, [r3, #2]
 8015e46:	0a1b      	lsrs	r3, r3, #8
 8015e48:	b29b      	uxth	r3, r3
 8015e4a:	3b01      	subs	r3, #1
 8015e4c:	2b06      	cmp	r3, #6
 8015e4e:	f200 8128 	bhi.w	80160a2 <USBD_GetDescriptor+0x276>
 8015e52:	a201      	add	r2, pc, #4	; (adr r2, 8015e58 <USBD_GetDescriptor+0x2c>)
 8015e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e58:	08015e75 	.word	0x08015e75
 8015e5c:	08015e8d 	.word	0x08015e8d
 8015e60:	08015ecd 	.word	0x08015ecd
 8015e64:	080160a3 	.word	0x080160a3
 8015e68:	080160a3 	.word	0x080160a3
 8015e6c:	08016043 	.word	0x08016043
 8015e70:	0801606f 	.word	0x0801606f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	687a      	ldr	r2, [r7, #4]
 8015e7e:	7c12      	ldrb	r2, [r2, #16]
 8015e80:	f107 0108 	add.w	r1, r7, #8
 8015e84:	4610      	mov	r0, r2
 8015e86:	4798      	blx	r3
 8015e88:	60f8      	str	r0, [r7, #12]
      break;
 8015e8a:	e112      	b.n	80160b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	7c1b      	ldrb	r3, [r3, #16]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d10d      	bne.n	8015eb0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e9c:	f107 0208 	add.w	r2, r7, #8
 8015ea0:	4610      	mov	r0, r2
 8015ea2:	4798      	blx	r3
 8015ea4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	3301      	adds	r3, #1
 8015eaa:	2202      	movs	r2, #2
 8015eac:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015eae:	e100      	b.n	80160b2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015eb8:	f107 0208 	add.w	r2, r7, #8
 8015ebc:	4610      	mov	r0, r2
 8015ebe:	4798      	blx	r3
 8015ec0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	3301      	adds	r3, #1
 8015ec6:	2202      	movs	r2, #2
 8015ec8:	701a      	strb	r2, [r3, #0]
      break;
 8015eca:	e0f2      	b.n	80160b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015ecc:	683b      	ldr	r3, [r7, #0]
 8015ece:	885b      	ldrh	r3, [r3, #2]
 8015ed0:	b2db      	uxtb	r3, r3
 8015ed2:	2b05      	cmp	r3, #5
 8015ed4:	f200 80ac 	bhi.w	8016030 <USBD_GetDescriptor+0x204>
 8015ed8:	a201      	add	r2, pc, #4	; (adr r2, 8015ee0 <USBD_GetDescriptor+0xb4>)
 8015eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ede:	bf00      	nop
 8015ee0:	08015ef9 	.word	0x08015ef9
 8015ee4:	08015f2d 	.word	0x08015f2d
 8015ee8:	08015f61 	.word	0x08015f61
 8015eec:	08015f95 	.word	0x08015f95
 8015ef0:	08015fc9 	.word	0x08015fc9
 8015ef4:	08015ffd 	.word	0x08015ffd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015efe:	685b      	ldr	r3, [r3, #4]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d00b      	beq.n	8015f1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f0a:	685b      	ldr	r3, [r3, #4]
 8015f0c:	687a      	ldr	r2, [r7, #4]
 8015f0e:	7c12      	ldrb	r2, [r2, #16]
 8015f10:	f107 0108 	add.w	r1, r7, #8
 8015f14:	4610      	mov	r0, r2
 8015f16:	4798      	blx	r3
 8015f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f1a:	e091      	b.n	8016040 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015f1c:	6839      	ldr	r1, [r7, #0]
 8015f1e:	6878      	ldr	r0, [r7, #4]
 8015f20:	f000 facb 	bl	80164ba <USBD_CtlError>
            err++;
 8015f24:	7afb      	ldrb	r3, [r7, #11]
 8015f26:	3301      	adds	r3, #1
 8015f28:	72fb      	strb	r3, [r7, #11]
          break;
 8015f2a:	e089      	b.n	8016040 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f32:	689b      	ldr	r3, [r3, #8]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d00b      	beq.n	8015f50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f3e:	689b      	ldr	r3, [r3, #8]
 8015f40:	687a      	ldr	r2, [r7, #4]
 8015f42:	7c12      	ldrb	r2, [r2, #16]
 8015f44:	f107 0108 	add.w	r1, r7, #8
 8015f48:	4610      	mov	r0, r2
 8015f4a:	4798      	blx	r3
 8015f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f4e:	e077      	b.n	8016040 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015f50:	6839      	ldr	r1, [r7, #0]
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f000 fab1 	bl	80164ba <USBD_CtlError>
            err++;
 8015f58:	7afb      	ldrb	r3, [r7, #11]
 8015f5a:	3301      	adds	r3, #1
 8015f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8015f5e:	e06f      	b.n	8016040 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f66:	68db      	ldr	r3, [r3, #12]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d00b      	beq.n	8015f84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f72:	68db      	ldr	r3, [r3, #12]
 8015f74:	687a      	ldr	r2, [r7, #4]
 8015f76:	7c12      	ldrb	r2, [r2, #16]
 8015f78:	f107 0108 	add.w	r1, r7, #8
 8015f7c:	4610      	mov	r0, r2
 8015f7e:	4798      	blx	r3
 8015f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f82:	e05d      	b.n	8016040 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015f84:	6839      	ldr	r1, [r7, #0]
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f000 fa97 	bl	80164ba <USBD_CtlError>
            err++;
 8015f8c:	7afb      	ldrb	r3, [r7, #11]
 8015f8e:	3301      	adds	r3, #1
 8015f90:	72fb      	strb	r3, [r7, #11]
          break;
 8015f92:	e055      	b.n	8016040 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f9a:	691b      	ldr	r3, [r3, #16]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d00b      	beq.n	8015fb8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015fa6:	691b      	ldr	r3, [r3, #16]
 8015fa8:	687a      	ldr	r2, [r7, #4]
 8015faa:	7c12      	ldrb	r2, [r2, #16]
 8015fac:	f107 0108 	add.w	r1, r7, #8
 8015fb0:	4610      	mov	r0, r2
 8015fb2:	4798      	blx	r3
 8015fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015fb6:	e043      	b.n	8016040 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015fb8:	6839      	ldr	r1, [r7, #0]
 8015fba:	6878      	ldr	r0, [r7, #4]
 8015fbc:	f000 fa7d 	bl	80164ba <USBD_CtlError>
            err++;
 8015fc0:	7afb      	ldrb	r3, [r7, #11]
 8015fc2:	3301      	adds	r3, #1
 8015fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8015fc6:	e03b      	b.n	8016040 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015fce:	695b      	ldr	r3, [r3, #20]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d00b      	beq.n	8015fec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015fda:	695b      	ldr	r3, [r3, #20]
 8015fdc:	687a      	ldr	r2, [r7, #4]
 8015fde:	7c12      	ldrb	r2, [r2, #16]
 8015fe0:	f107 0108 	add.w	r1, r7, #8
 8015fe4:	4610      	mov	r0, r2
 8015fe6:	4798      	blx	r3
 8015fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015fea:	e029      	b.n	8016040 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015fec:	6839      	ldr	r1, [r7, #0]
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f000 fa63 	bl	80164ba <USBD_CtlError>
            err++;
 8015ff4:	7afb      	ldrb	r3, [r7, #11]
 8015ff6:	3301      	adds	r3, #1
 8015ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8015ffa:	e021      	b.n	8016040 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016002:	699b      	ldr	r3, [r3, #24]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d00b      	beq.n	8016020 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801600e:	699b      	ldr	r3, [r3, #24]
 8016010:	687a      	ldr	r2, [r7, #4]
 8016012:	7c12      	ldrb	r2, [r2, #16]
 8016014:	f107 0108 	add.w	r1, r7, #8
 8016018:	4610      	mov	r0, r2
 801601a:	4798      	blx	r3
 801601c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801601e:	e00f      	b.n	8016040 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016020:	6839      	ldr	r1, [r7, #0]
 8016022:	6878      	ldr	r0, [r7, #4]
 8016024:	f000 fa49 	bl	80164ba <USBD_CtlError>
            err++;
 8016028:	7afb      	ldrb	r3, [r7, #11]
 801602a:	3301      	adds	r3, #1
 801602c:	72fb      	strb	r3, [r7, #11]
          break;
 801602e:	e007      	b.n	8016040 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016030:	6839      	ldr	r1, [r7, #0]
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f000 fa41 	bl	80164ba <USBD_CtlError>
          err++;
 8016038:	7afb      	ldrb	r3, [r7, #11]
 801603a:	3301      	adds	r3, #1
 801603c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801603e:	bf00      	nop
      }
      break;
 8016040:	e037      	b.n	80160b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	7c1b      	ldrb	r3, [r3, #16]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d109      	bne.n	801605e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016052:	f107 0208 	add.w	r2, r7, #8
 8016056:	4610      	mov	r0, r2
 8016058:	4798      	blx	r3
 801605a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801605c:	e029      	b.n	80160b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801605e:	6839      	ldr	r1, [r7, #0]
 8016060:	6878      	ldr	r0, [r7, #4]
 8016062:	f000 fa2a 	bl	80164ba <USBD_CtlError>
        err++;
 8016066:	7afb      	ldrb	r3, [r7, #11]
 8016068:	3301      	adds	r3, #1
 801606a:	72fb      	strb	r3, [r7, #11]
      break;
 801606c:	e021      	b.n	80160b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	7c1b      	ldrb	r3, [r3, #16]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d10d      	bne.n	8016092 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801607e:	f107 0208 	add.w	r2, r7, #8
 8016082:	4610      	mov	r0, r2
 8016084:	4798      	blx	r3
 8016086:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	3301      	adds	r3, #1
 801608c:	2207      	movs	r2, #7
 801608e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016090:	e00f      	b.n	80160b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016092:	6839      	ldr	r1, [r7, #0]
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f000 fa10 	bl	80164ba <USBD_CtlError>
        err++;
 801609a:	7afb      	ldrb	r3, [r7, #11]
 801609c:	3301      	adds	r3, #1
 801609e:	72fb      	strb	r3, [r7, #11]
      break;
 80160a0:	e007      	b.n	80160b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80160a2:	6839      	ldr	r1, [r7, #0]
 80160a4:	6878      	ldr	r0, [r7, #4]
 80160a6:	f000 fa08 	bl	80164ba <USBD_CtlError>
      err++;
 80160aa:	7afb      	ldrb	r3, [r7, #11]
 80160ac:	3301      	adds	r3, #1
 80160ae:	72fb      	strb	r3, [r7, #11]
      break;
 80160b0:	bf00      	nop
  }

  if (err != 0U)
 80160b2:	7afb      	ldrb	r3, [r7, #11]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d11e      	bne.n	80160f6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80160b8:	683b      	ldr	r3, [r7, #0]
 80160ba:	88db      	ldrh	r3, [r3, #6]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d016      	beq.n	80160ee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80160c0:	893b      	ldrh	r3, [r7, #8]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d00e      	beq.n	80160e4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	88da      	ldrh	r2, [r3, #6]
 80160ca:	893b      	ldrh	r3, [r7, #8]
 80160cc:	4293      	cmp	r3, r2
 80160ce:	bf28      	it	cs
 80160d0:	4613      	movcs	r3, r2
 80160d2:	b29b      	uxth	r3, r3
 80160d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80160d6:	893b      	ldrh	r3, [r7, #8]
 80160d8:	461a      	mov	r2, r3
 80160da:	68f9      	ldr	r1, [r7, #12]
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f000 fa5d 	bl	801659c <USBD_CtlSendData>
 80160e2:	e009      	b.n	80160f8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80160e4:	6839      	ldr	r1, [r7, #0]
 80160e6:	6878      	ldr	r0, [r7, #4]
 80160e8:	f000 f9e7 	bl	80164ba <USBD_CtlError>
 80160ec:	e004      	b.n	80160f8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80160ee:	6878      	ldr	r0, [r7, #4]
 80160f0:	f000 faae 	bl	8016650 <USBD_CtlSendStatus>
 80160f4:	e000      	b.n	80160f8 <USBD_GetDescriptor+0x2cc>
    return;
 80160f6:	bf00      	nop
  }
}
 80160f8:	3710      	adds	r7, #16
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}
 80160fe:	bf00      	nop

08016100 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b084      	sub	sp, #16
 8016104:	af00      	add	r7, sp, #0
 8016106:	6078      	str	r0, [r7, #4]
 8016108:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801610a:	683b      	ldr	r3, [r7, #0]
 801610c:	889b      	ldrh	r3, [r3, #4]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d131      	bne.n	8016176 <USBD_SetAddress+0x76>
 8016112:	683b      	ldr	r3, [r7, #0]
 8016114:	88db      	ldrh	r3, [r3, #6]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d12d      	bne.n	8016176 <USBD_SetAddress+0x76>
 801611a:	683b      	ldr	r3, [r7, #0]
 801611c:	885b      	ldrh	r3, [r3, #2]
 801611e:	2b7f      	cmp	r3, #127	; 0x7f
 8016120:	d829      	bhi.n	8016176 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016122:	683b      	ldr	r3, [r7, #0]
 8016124:	885b      	ldrh	r3, [r3, #2]
 8016126:	b2db      	uxtb	r3, r3
 8016128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801612c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016134:	b2db      	uxtb	r3, r3
 8016136:	2b03      	cmp	r3, #3
 8016138:	d104      	bne.n	8016144 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801613a:	6839      	ldr	r1, [r7, #0]
 801613c:	6878      	ldr	r0, [r7, #4]
 801613e:	f000 f9bc 	bl	80164ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016142:	e01d      	b.n	8016180 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	7bfa      	ldrb	r2, [r7, #15]
 8016148:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801614c:	7bfb      	ldrb	r3, [r7, #15]
 801614e:	4619      	mov	r1, r3
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f000 ff69 	bl	8017028 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016156:	6878      	ldr	r0, [r7, #4]
 8016158:	f000 fa7a 	bl	8016650 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801615c:	7bfb      	ldrb	r3, [r7, #15]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d004      	beq.n	801616c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	2202      	movs	r2, #2
 8016166:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801616a:	e009      	b.n	8016180 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	2201      	movs	r2, #1
 8016170:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016174:	e004      	b.n	8016180 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016176:	6839      	ldr	r1, [r7, #0]
 8016178:	6878      	ldr	r0, [r7, #4]
 801617a:	f000 f99e 	bl	80164ba <USBD_CtlError>
  }
}
 801617e:	bf00      	nop
 8016180:	bf00      	nop
 8016182:	3710      	adds	r7, #16
 8016184:	46bd      	mov	sp, r7
 8016186:	bd80      	pop	{r7, pc}

08016188 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b084      	sub	sp, #16
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
 8016190:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016192:	2300      	movs	r3, #0
 8016194:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016196:	683b      	ldr	r3, [r7, #0]
 8016198:	885b      	ldrh	r3, [r3, #2]
 801619a:	b2da      	uxtb	r2, r3
 801619c:	4b4e      	ldr	r3, [pc, #312]	; (80162d8 <USBD_SetConfig+0x150>)
 801619e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80161a0:	4b4d      	ldr	r3, [pc, #308]	; (80162d8 <USBD_SetConfig+0x150>)
 80161a2:	781b      	ldrb	r3, [r3, #0]
 80161a4:	2b01      	cmp	r3, #1
 80161a6:	d905      	bls.n	80161b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80161a8:	6839      	ldr	r1, [r7, #0]
 80161aa:	6878      	ldr	r0, [r7, #4]
 80161ac:	f000 f985 	bl	80164ba <USBD_CtlError>
    return USBD_FAIL;
 80161b0:	2303      	movs	r3, #3
 80161b2:	e08c      	b.n	80162ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161ba:	b2db      	uxtb	r3, r3
 80161bc:	2b02      	cmp	r3, #2
 80161be:	d002      	beq.n	80161c6 <USBD_SetConfig+0x3e>
 80161c0:	2b03      	cmp	r3, #3
 80161c2:	d029      	beq.n	8016218 <USBD_SetConfig+0x90>
 80161c4:	e075      	b.n	80162b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80161c6:	4b44      	ldr	r3, [pc, #272]	; (80162d8 <USBD_SetConfig+0x150>)
 80161c8:	781b      	ldrb	r3, [r3, #0]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d020      	beq.n	8016210 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80161ce:	4b42      	ldr	r3, [pc, #264]	; (80162d8 <USBD_SetConfig+0x150>)
 80161d0:	781b      	ldrb	r3, [r3, #0]
 80161d2:	461a      	mov	r2, r3
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80161d8:	4b3f      	ldr	r3, [pc, #252]	; (80162d8 <USBD_SetConfig+0x150>)
 80161da:	781b      	ldrb	r3, [r3, #0]
 80161dc:	4619      	mov	r1, r3
 80161de:	6878      	ldr	r0, [r7, #4]
 80161e0:	f7fe ffe1 	bl	80151a6 <USBD_SetClassConfig>
 80161e4:	4603      	mov	r3, r0
 80161e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80161e8:	7bfb      	ldrb	r3, [r7, #15]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d008      	beq.n	8016200 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80161ee:	6839      	ldr	r1, [r7, #0]
 80161f0:	6878      	ldr	r0, [r7, #4]
 80161f2:	f000 f962 	bl	80164ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	2202      	movs	r2, #2
 80161fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80161fe:	e065      	b.n	80162cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016200:	6878      	ldr	r0, [r7, #4]
 8016202:	f000 fa25 	bl	8016650 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	2203      	movs	r2, #3
 801620a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801620e:	e05d      	b.n	80162cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016210:	6878      	ldr	r0, [r7, #4]
 8016212:	f000 fa1d 	bl	8016650 <USBD_CtlSendStatus>
      break;
 8016216:	e059      	b.n	80162cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016218:	4b2f      	ldr	r3, [pc, #188]	; (80162d8 <USBD_SetConfig+0x150>)
 801621a:	781b      	ldrb	r3, [r3, #0]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d112      	bne.n	8016246 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	2202      	movs	r2, #2
 8016224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016228:	4b2b      	ldr	r3, [pc, #172]	; (80162d8 <USBD_SetConfig+0x150>)
 801622a:	781b      	ldrb	r3, [r3, #0]
 801622c:	461a      	mov	r2, r3
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016232:	4b29      	ldr	r3, [pc, #164]	; (80162d8 <USBD_SetConfig+0x150>)
 8016234:	781b      	ldrb	r3, [r3, #0]
 8016236:	4619      	mov	r1, r3
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f7fe ffd0 	bl	80151de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801623e:	6878      	ldr	r0, [r7, #4]
 8016240:	f000 fa06 	bl	8016650 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016244:	e042      	b.n	80162cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016246:	4b24      	ldr	r3, [pc, #144]	; (80162d8 <USBD_SetConfig+0x150>)
 8016248:	781b      	ldrb	r3, [r3, #0]
 801624a:	461a      	mov	r2, r3
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	685b      	ldr	r3, [r3, #4]
 8016250:	429a      	cmp	r2, r3
 8016252:	d02a      	beq.n	80162aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	685b      	ldr	r3, [r3, #4]
 8016258:	b2db      	uxtb	r3, r3
 801625a:	4619      	mov	r1, r3
 801625c:	6878      	ldr	r0, [r7, #4]
 801625e:	f7fe ffbe 	bl	80151de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016262:	4b1d      	ldr	r3, [pc, #116]	; (80162d8 <USBD_SetConfig+0x150>)
 8016264:	781b      	ldrb	r3, [r3, #0]
 8016266:	461a      	mov	r2, r3
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801626c:	4b1a      	ldr	r3, [pc, #104]	; (80162d8 <USBD_SetConfig+0x150>)
 801626e:	781b      	ldrb	r3, [r3, #0]
 8016270:	4619      	mov	r1, r3
 8016272:	6878      	ldr	r0, [r7, #4]
 8016274:	f7fe ff97 	bl	80151a6 <USBD_SetClassConfig>
 8016278:	4603      	mov	r3, r0
 801627a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801627c:	7bfb      	ldrb	r3, [r7, #15]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d00f      	beq.n	80162a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016282:	6839      	ldr	r1, [r7, #0]
 8016284:	6878      	ldr	r0, [r7, #4]
 8016286:	f000 f918 	bl	80164ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	685b      	ldr	r3, [r3, #4]
 801628e:	b2db      	uxtb	r3, r3
 8016290:	4619      	mov	r1, r3
 8016292:	6878      	ldr	r0, [r7, #4]
 8016294:	f7fe ffa3 	bl	80151de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2202      	movs	r2, #2
 801629c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80162a0:	e014      	b.n	80162cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80162a2:	6878      	ldr	r0, [r7, #4]
 80162a4:	f000 f9d4 	bl	8016650 <USBD_CtlSendStatus>
      break;
 80162a8:	e010      	b.n	80162cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80162aa:	6878      	ldr	r0, [r7, #4]
 80162ac:	f000 f9d0 	bl	8016650 <USBD_CtlSendStatus>
      break;
 80162b0:	e00c      	b.n	80162cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80162b2:	6839      	ldr	r1, [r7, #0]
 80162b4:	6878      	ldr	r0, [r7, #4]
 80162b6:	f000 f900 	bl	80164ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80162ba:	4b07      	ldr	r3, [pc, #28]	; (80162d8 <USBD_SetConfig+0x150>)
 80162bc:	781b      	ldrb	r3, [r3, #0]
 80162be:	4619      	mov	r1, r3
 80162c0:	6878      	ldr	r0, [r7, #4]
 80162c2:	f7fe ff8c 	bl	80151de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80162c6:	2303      	movs	r3, #3
 80162c8:	73fb      	strb	r3, [r7, #15]
      break;
 80162ca:	bf00      	nop
  }

  return ret;
 80162cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80162ce:	4618      	mov	r0, r3
 80162d0:	3710      	adds	r7, #16
 80162d2:	46bd      	mov	sp, r7
 80162d4:	bd80      	pop	{r7, pc}
 80162d6:	bf00      	nop
 80162d8:	2000740c 	.word	0x2000740c

080162dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b082      	sub	sp, #8
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	6078      	str	r0, [r7, #4]
 80162e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80162e6:	683b      	ldr	r3, [r7, #0]
 80162e8:	88db      	ldrh	r3, [r3, #6]
 80162ea:	2b01      	cmp	r3, #1
 80162ec:	d004      	beq.n	80162f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80162ee:	6839      	ldr	r1, [r7, #0]
 80162f0:	6878      	ldr	r0, [r7, #4]
 80162f2:	f000 f8e2 	bl	80164ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80162f6:	e023      	b.n	8016340 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162fe:	b2db      	uxtb	r3, r3
 8016300:	2b02      	cmp	r3, #2
 8016302:	dc02      	bgt.n	801630a <USBD_GetConfig+0x2e>
 8016304:	2b00      	cmp	r3, #0
 8016306:	dc03      	bgt.n	8016310 <USBD_GetConfig+0x34>
 8016308:	e015      	b.n	8016336 <USBD_GetConfig+0x5a>
 801630a:	2b03      	cmp	r3, #3
 801630c:	d00b      	beq.n	8016326 <USBD_GetConfig+0x4a>
 801630e:	e012      	b.n	8016336 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	2200      	movs	r2, #0
 8016314:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	3308      	adds	r3, #8
 801631a:	2201      	movs	r2, #1
 801631c:	4619      	mov	r1, r3
 801631e:	6878      	ldr	r0, [r7, #4]
 8016320:	f000 f93c 	bl	801659c <USBD_CtlSendData>
        break;
 8016324:	e00c      	b.n	8016340 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	3304      	adds	r3, #4
 801632a:	2201      	movs	r2, #1
 801632c:	4619      	mov	r1, r3
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f000 f934 	bl	801659c <USBD_CtlSendData>
        break;
 8016334:	e004      	b.n	8016340 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016336:	6839      	ldr	r1, [r7, #0]
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	f000 f8be 	bl	80164ba <USBD_CtlError>
        break;
 801633e:	bf00      	nop
}
 8016340:	bf00      	nop
 8016342:	3708      	adds	r7, #8
 8016344:	46bd      	mov	sp, r7
 8016346:	bd80      	pop	{r7, pc}

08016348 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b082      	sub	sp, #8
 801634c:	af00      	add	r7, sp, #0
 801634e:	6078      	str	r0, [r7, #4]
 8016350:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016358:	b2db      	uxtb	r3, r3
 801635a:	3b01      	subs	r3, #1
 801635c:	2b02      	cmp	r3, #2
 801635e:	d81e      	bhi.n	801639e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016360:	683b      	ldr	r3, [r7, #0]
 8016362:	88db      	ldrh	r3, [r3, #6]
 8016364:	2b02      	cmp	r3, #2
 8016366:	d004      	beq.n	8016372 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016368:	6839      	ldr	r1, [r7, #0]
 801636a:	6878      	ldr	r0, [r7, #4]
 801636c:	f000 f8a5 	bl	80164ba <USBD_CtlError>
        break;
 8016370:	e01a      	b.n	80163a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	2201      	movs	r2, #1
 8016376:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801637e:	2b00      	cmp	r3, #0
 8016380:	d005      	beq.n	801638e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	68db      	ldr	r3, [r3, #12]
 8016386:	f043 0202 	orr.w	r2, r3, #2
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	330c      	adds	r3, #12
 8016392:	2202      	movs	r2, #2
 8016394:	4619      	mov	r1, r3
 8016396:	6878      	ldr	r0, [r7, #4]
 8016398:	f000 f900 	bl	801659c <USBD_CtlSendData>
      break;
 801639c:	e004      	b.n	80163a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801639e:	6839      	ldr	r1, [r7, #0]
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f000 f88a 	bl	80164ba <USBD_CtlError>
      break;
 80163a6:	bf00      	nop
  }
}
 80163a8:	bf00      	nop
 80163aa:	3708      	adds	r7, #8
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd80      	pop	{r7, pc}

080163b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b082      	sub	sp, #8
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
 80163b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80163ba:	683b      	ldr	r3, [r7, #0]
 80163bc:	885b      	ldrh	r3, [r3, #2]
 80163be:	2b01      	cmp	r3, #1
 80163c0:	d107      	bne.n	80163d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	2201      	movs	r2, #1
 80163c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80163ca:	6878      	ldr	r0, [r7, #4]
 80163cc:	f000 f940 	bl	8016650 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80163d0:	e013      	b.n	80163fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80163d2:	683b      	ldr	r3, [r7, #0]
 80163d4:	885b      	ldrh	r3, [r3, #2]
 80163d6:	2b02      	cmp	r3, #2
 80163d8:	d10b      	bne.n	80163f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	889b      	ldrh	r3, [r3, #4]
 80163de:	0a1b      	lsrs	r3, r3, #8
 80163e0:	b29b      	uxth	r3, r3
 80163e2:	b2da      	uxtb	r2, r3
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80163ea:	6878      	ldr	r0, [r7, #4]
 80163ec:	f000 f930 	bl	8016650 <USBD_CtlSendStatus>
}
 80163f0:	e003      	b.n	80163fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80163f2:	6839      	ldr	r1, [r7, #0]
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f000 f860 	bl	80164ba <USBD_CtlError>
}
 80163fa:	bf00      	nop
 80163fc:	3708      	adds	r7, #8
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}

08016402 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016402:	b580      	push	{r7, lr}
 8016404:	b082      	sub	sp, #8
 8016406:	af00      	add	r7, sp, #0
 8016408:	6078      	str	r0, [r7, #4]
 801640a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016412:	b2db      	uxtb	r3, r3
 8016414:	3b01      	subs	r3, #1
 8016416:	2b02      	cmp	r3, #2
 8016418:	d80b      	bhi.n	8016432 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	885b      	ldrh	r3, [r3, #2]
 801641e:	2b01      	cmp	r3, #1
 8016420:	d10c      	bne.n	801643c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	2200      	movs	r2, #0
 8016426:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801642a:	6878      	ldr	r0, [r7, #4]
 801642c:	f000 f910 	bl	8016650 <USBD_CtlSendStatus>
      }
      break;
 8016430:	e004      	b.n	801643c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016432:	6839      	ldr	r1, [r7, #0]
 8016434:	6878      	ldr	r0, [r7, #4]
 8016436:	f000 f840 	bl	80164ba <USBD_CtlError>
      break;
 801643a:	e000      	b.n	801643e <USBD_ClrFeature+0x3c>
      break;
 801643c:	bf00      	nop
  }
}
 801643e:	bf00      	nop
 8016440:	3708      	adds	r7, #8
 8016442:	46bd      	mov	sp, r7
 8016444:	bd80      	pop	{r7, pc}

08016446 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016446:	b580      	push	{r7, lr}
 8016448:	b084      	sub	sp, #16
 801644a:	af00      	add	r7, sp, #0
 801644c:	6078      	str	r0, [r7, #4]
 801644e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016450:	683b      	ldr	r3, [r7, #0]
 8016452:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	781a      	ldrb	r2, [r3, #0]
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	3301      	adds	r3, #1
 8016460:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	781a      	ldrb	r2, [r3, #0]
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	3301      	adds	r3, #1
 801646e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016470:	68f8      	ldr	r0, [r7, #12]
 8016472:	f7ff fa41 	bl	80158f8 <SWAPBYTE>
 8016476:	4603      	mov	r3, r0
 8016478:	461a      	mov	r2, r3
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	3301      	adds	r3, #1
 8016482:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	3301      	adds	r3, #1
 8016488:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801648a:	68f8      	ldr	r0, [r7, #12]
 801648c:	f7ff fa34 	bl	80158f8 <SWAPBYTE>
 8016490:	4603      	mov	r3, r0
 8016492:	461a      	mov	r2, r3
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	3301      	adds	r3, #1
 801649c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	3301      	adds	r3, #1
 80164a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80164a4:	68f8      	ldr	r0, [r7, #12]
 80164a6:	f7ff fa27 	bl	80158f8 <SWAPBYTE>
 80164aa:	4603      	mov	r3, r0
 80164ac:	461a      	mov	r2, r3
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	80da      	strh	r2, [r3, #6]
}
 80164b2:	bf00      	nop
 80164b4:	3710      	adds	r7, #16
 80164b6:	46bd      	mov	sp, r7
 80164b8:	bd80      	pop	{r7, pc}

080164ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80164ba:	b580      	push	{r7, lr}
 80164bc:	b082      	sub	sp, #8
 80164be:	af00      	add	r7, sp, #0
 80164c0:	6078      	str	r0, [r7, #4]
 80164c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80164c4:	2180      	movs	r1, #128	; 0x80
 80164c6:	6878      	ldr	r0, [r7, #4]
 80164c8:	f000 fd44 	bl	8016f54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80164cc:	2100      	movs	r1, #0
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	f000 fd40 	bl	8016f54 <USBD_LL_StallEP>
}
 80164d4:	bf00      	nop
 80164d6:	3708      	adds	r7, #8
 80164d8:	46bd      	mov	sp, r7
 80164da:	bd80      	pop	{r7, pc}

080164dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	b086      	sub	sp, #24
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	60f8      	str	r0, [r7, #12]
 80164e4:	60b9      	str	r1, [r7, #8]
 80164e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80164e8:	2300      	movs	r3, #0
 80164ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d036      	beq.n	8016560 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80164f6:	6938      	ldr	r0, [r7, #16]
 80164f8:	f000 f836 	bl	8016568 <USBD_GetLen>
 80164fc:	4603      	mov	r3, r0
 80164fe:	3301      	adds	r3, #1
 8016500:	b29b      	uxth	r3, r3
 8016502:	005b      	lsls	r3, r3, #1
 8016504:	b29a      	uxth	r2, r3
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801650a:	7dfb      	ldrb	r3, [r7, #23]
 801650c:	68ba      	ldr	r2, [r7, #8]
 801650e:	4413      	add	r3, r2
 8016510:	687a      	ldr	r2, [r7, #4]
 8016512:	7812      	ldrb	r2, [r2, #0]
 8016514:	701a      	strb	r2, [r3, #0]
  idx++;
 8016516:	7dfb      	ldrb	r3, [r7, #23]
 8016518:	3301      	adds	r3, #1
 801651a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801651c:	7dfb      	ldrb	r3, [r7, #23]
 801651e:	68ba      	ldr	r2, [r7, #8]
 8016520:	4413      	add	r3, r2
 8016522:	2203      	movs	r2, #3
 8016524:	701a      	strb	r2, [r3, #0]
  idx++;
 8016526:	7dfb      	ldrb	r3, [r7, #23]
 8016528:	3301      	adds	r3, #1
 801652a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801652c:	e013      	b.n	8016556 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801652e:	7dfb      	ldrb	r3, [r7, #23]
 8016530:	68ba      	ldr	r2, [r7, #8]
 8016532:	4413      	add	r3, r2
 8016534:	693a      	ldr	r2, [r7, #16]
 8016536:	7812      	ldrb	r2, [r2, #0]
 8016538:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801653a:	693b      	ldr	r3, [r7, #16]
 801653c:	3301      	adds	r3, #1
 801653e:	613b      	str	r3, [r7, #16]
    idx++;
 8016540:	7dfb      	ldrb	r3, [r7, #23]
 8016542:	3301      	adds	r3, #1
 8016544:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016546:	7dfb      	ldrb	r3, [r7, #23]
 8016548:	68ba      	ldr	r2, [r7, #8]
 801654a:	4413      	add	r3, r2
 801654c:	2200      	movs	r2, #0
 801654e:	701a      	strb	r2, [r3, #0]
    idx++;
 8016550:	7dfb      	ldrb	r3, [r7, #23]
 8016552:	3301      	adds	r3, #1
 8016554:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016556:	693b      	ldr	r3, [r7, #16]
 8016558:	781b      	ldrb	r3, [r3, #0]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d1e7      	bne.n	801652e <USBD_GetString+0x52>
 801655e:	e000      	b.n	8016562 <USBD_GetString+0x86>
    return;
 8016560:	bf00      	nop
  }
}
 8016562:	3718      	adds	r7, #24
 8016564:	46bd      	mov	sp, r7
 8016566:	bd80      	pop	{r7, pc}

08016568 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016568:	b480      	push	{r7}
 801656a:	b085      	sub	sp, #20
 801656c:	af00      	add	r7, sp, #0
 801656e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016570:	2300      	movs	r3, #0
 8016572:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016578:	e005      	b.n	8016586 <USBD_GetLen+0x1e>
  {
    len++;
 801657a:	7bfb      	ldrb	r3, [r7, #15]
 801657c:	3301      	adds	r3, #1
 801657e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016580:	68bb      	ldr	r3, [r7, #8]
 8016582:	3301      	adds	r3, #1
 8016584:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016586:	68bb      	ldr	r3, [r7, #8]
 8016588:	781b      	ldrb	r3, [r3, #0]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d1f5      	bne.n	801657a <USBD_GetLen+0x12>
  }

  return len;
 801658e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016590:	4618      	mov	r0, r3
 8016592:	3714      	adds	r7, #20
 8016594:	46bd      	mov	sp, r7
 8016596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801659a:	4770      	bx	lr

0801659c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801659c:	b580      	push	{r7, lr}
 801659e:	b084      	sub	sp, #16
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	60f8      	str	r0, [r7, #12]
 80165a4:	60b9      	str	r1, [r7, #8]
 80165a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	2202      	movs	r2, #2
 80165ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	687a      	ldr	r2, [r7, #4]
 80165b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	687a      	ldr	r2, [r7, #4]
 80165ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	68ba      	ldr	r2, [r7, #8]
 80165c0:	2100      	movs	r1, #0
 80165c2:	68f8      	ldr	r0, [r7, #12]
 80165c4:	f000 fd4f 	bl	8017066 <USBD_LL_Transmit>

  return USBD_OK;
 80165c8:	2300      	movs	r3, #0
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	3710      	adds	r7, #16
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bd80      	pop	{r7, pc}

080165d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80165d2:	b580      	push	{r7, lr}
 80165d4:	b084      	sub	sp, #16
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	60f8      	str	r0, [r7, #12]
 80165da:	60b9      	str	r1, [r7, #8]
 80165dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	68ba      	ldr	r2, [r7, #8]
 80165e2:	2100      	movs	r1, #0
 80165e4:	68f8      	ldr	r0, [r7, #12]
 80165e6:	f000 fd3e 	bl	8017066 <USBD_LL_Transmit>

  return USBD_OK;
 80165ea:	2300      	movs	r3, #0
}
 80165ec:	4618      	mov	r0, r3
 80165ee:	3710      	adds	r7, #16
 80165f0:	46bd      	mov	sp, r7
 80165f2:	bd80      	pop	{r7, pc}

080165f4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b084      	sub	sp, #16
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	60f8      	str	r0, [r7, #12]
 80165fc:	60b9      	str	r1, [r7, #8]
 80165fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	2203      	movs	r2, #3
 8016604:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	687a      	ldr	r2, [r7, #4]
 801660c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	687a      	ldr	r2, [r7, #4]
 8016614:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	68ba      	ldr	r2, [r7, #8]
 801661c:	2100      	movs	r1, #0
 801661e:	68f8      	ldr	r0, [r7, #12]
 8016620:	f000 fd42 	bl	80170a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016624:	2300      	movs	r3, #0
}
 8016626:	4618      	mov	r0, r3
 8016628:	3710      	adds	r7, #16
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}

0801662e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801662e:	b580      	push	{r7, lr}
 8016630:	b084      	sub	sp, #16
 8016632:	af00      	add	r7, sp, #0
 8016634:	60f8      	str	r0, [r7, #12]
 8016636:	60b9      	str	r1, [r7, #8]
 8016638:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	68ba      	ldr	r2, [r7, #8]
 801663e:	2100      	movs	r1, #0
 8016640:	68f8      	ldr	r0, [r7, #12]
 8016642:	f000 fd31 	bl	80170a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016646:	2300      	movs	r3, #0
}
 8016648:	4618      	mov	r0, r3
 801664a:	3710      	adds	r7, #16
 801664c:	46bd      	mov	sp, r7
 801664e:	bd80      	pop	{r7, pc}

08016650 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b082      	sub	sp, #8
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2204      	movs	r2, #4
 801665c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016660:	2300      	movs	r3, #0
 8016662:	2200      	movs	r2, #0
 8016664:	2100      	movs	r1, #0
 8016666:	6878      	ldr	r0, [r7, #4]
 8016668:	f000 fcfd 	bl	8017066 <USBD_LL_Transmit>

  return USBD_OK;
 801666c:	2300      	movs	r3, #0
}
 801666e:	4618      	mov	r0, r3
 8016670:	3708      	adds	r7, #8
 8016672:	46bd      	mov	sp, r7
 8016674:	bd80      	pop	{r7, pc}

08016676 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016676:	b580      	push	{r7, lr}
 8016678:	b082      	sub	sp, #8
 801667a:	af00      	add	r7, sp, #0
 801667c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	2205      	movs	r2, #5
 8016682:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016686:	2300      	movs	r3, #0
 8016688:	2200      	movs	r2, #0
 801668a:	2100      	movs	r1, #0
 801668c:	6878      	ldr	r0, [r7, #4]
 801668e:	f000 fd0b 	bl	80170a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016692:	2300      	movs	r3, #0
}
 8016694:	4618      	mov	r0, r3
 8016696:	3708      	adds	r7, #8
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}

0801669c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80166a0:	2200      	movs	r2, #0
 80166a2:	4912      	ldr	r1, [pc, #72]	; (80166ec <MX_USB_DEVICE_Init+0x50>)
 80166a4:	4812      	ldr	r0, [pc, #72]	; (80166f0 <MX_USB_DEVICE_Init+0x54>)
 80166a6:	f7fe fd01 	bl	80150ac <USBD_Init>
 80166aa:	4603      	mov	r3, r0
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d001      	beq.n	80166b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80166b0:	f7ea ff98 	bl	80015e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80166b4:	490f      	ldr	r1, [pc, #60]	; (80166f4 <MX_USB_DEVICE_Init+0x58>)
 80166b6:	480e      	ldr	r0, [pc, #56]	; (80166f0 <MX_USB_DEVICE_Init+0x54>)
 80166b8:	f7fe fd28 	bl	801510c <USBD_RegisterClass>
 80166bc:	4603      	mov	r3, r0
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d001      	beq.n	80166c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80166c2:	f7ea ff8f 	bl	80015e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80166c6:	490c      	ldr	r1, [pc, #48]	; (80166f8 <MX_USB_DEVICE_Init+0x5c>)
 80166c8:	4809      	ldr	r0, [pc, #36]	; (80166f0 <MX_USB_DEVICE_Init+0x54>)
 80166ca:	f7fe fc1f 	bl	8014f0c <USBD_CDC_RegisterInterface>
 80166ce:	4603      	mov	r3, r0
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d001      	beq.n	80166d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80166d4:	f7ea ff86 	bl	80015e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80166d8:	4805      	ldr	r0, [pc, #20]	; (80166f0 <MX_USB_DEVICE_Init+0x54>)
 80166da:	f7fe fd4d 	bl	8015178 <USBD_Start>
 80166de:	4603      	mov	r3, r0
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d001      	beq.n	80166e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80166e4:	f7ea ff7e 	bl	80015e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80166e8:	bf00      	nop
 80166ea:	bd80      	pop	{r7, pc}
 80166ec:	2000014c 	.word	0x2000014c
 80166f0:	20007410 	.word	0x20007410
 80166f4:	200000b0 	.word	0x200000b0
 80166f8:	20000138 	.word	0x20000138

080166fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016700:	2200      	movs	r2, #0
 8016702:	4905      	ldr	r1, [pc, #20]	; (8016718 <CDC_Init_FS+0x1c>)
 8016704:	4805      	ldr	r0, [pc, #20]	; (801671c <CDC_Init_FS+0x20>)
 8016706:	f7fe fc1b 	bl	8014f40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801670a:	4905      	ldr	r1, [pc, #20]	; (8016720 <CDC_Init_FS+0x24>)
 801670c:	4803      	ldr	r0, [pc, #12]	; (801671c <CDC_Init_FS+0x20>)
 801670e:	f7fe fc39 	bl	8014f84 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016712:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016714:	4618      	mov	r0, r3
 8016716:	bd80      	pop	{r7, pc}
 8016718:	20007eec 	.word	0x20007eec
 801671c:	20007410 	.word	0x20007410
 8016720:	200076ec 	.word	0x200076ec

08016724 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016724:	b480      	push	{r7}
 8016726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016728:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801672a:	4618      	mov	r0, r3
 801672c:	46bd      	mov	sp, r7
 801672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016732:	4770      	bx	lr

08016734 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016734:	b480      	push	{r7}
 8016736:	b083      	sub	sp, #12
 8016738:	af00      	add	r7, sp, #0
 801673a:	4603      	mov	r3, r0
 801673c:	6039      	str	r1, [r7, #0]
 801673e:	71fb      	strb	r3, [r7, #7]
 8016740:	4613      	mov	r3, r2
 8016742:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016744:	79fb      	ldrb	r3, [r7, #7]
 8016746:	2b23      	cmp	r3, #35	; 0x23
 8016748:	f200 80a3 	bhi.w	8016892 <CDC_Control_FS+0x15e>
 801674c:	a201      	add	r2, pc, #4	; (adr r2, 8016754 <CDC_Control_FS+0x20>)
 801674e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016752:	bf00      	nop
 8016754:	08016893 	.word	0x08016893
 8016758:	08016893 	.word	0x08016893
 801675c:	08016893 	.word	0x08016893
 8016760:	08016893 	.word	0x08016893
 8016764:	08016893 	.word	0x08016893
 8016768:	08016893 	.word	0x08016893
 801676c:	08016893 	.word	0x08016893
 8016770:	08016893 	.word	0x08016893
 8016774:	08016893 	.word	0x08016893
 8016778:	08016893 	.word	0x08016893
 801677c:	08016893 	.word	0x08016893
 8016780:	08016893 	.word	0x08016893
 8016784:	08016893 	.word	0x08016893
 8016788:	08016893 	.word	0x08016893
 801678c:	08016893 	.word	0x08016893
 8016790:	08016893 	.word	0x08016893
 8016794:	08016893 	.word	0x08016893
 8016798:	08016893 	.word	0x08016893
 801679c:	08016893 	.word	0x08016893
 80167a0:	08016893 	.word	0x08016893
 80167a4:	08016893 	.word	0x08016893
 80167a8:	08016893 	.word	0x08016893
 80167ac:	08016893 	.word	0x08016893
 80167b0:	08016893 	.word	0x08016893
 80167b4:	08016893 	.word	0x08016893
 80167b8:	08016893 	.word	0x08016893
 80167bc:	08016893 	.word	0x08016893
 80167c0:	08016893 	.word	0x08016893
 80167c4:	08016893 	.word	0x08016893
 80167c8:	08016893 	.word	0x08016893
 80167cc:	08016893 	.word	0x08016893
 80167d0:	08016893 	.word	0x08016893
 80167d4:	080167e5 	.word	0x080167e5
 80167d8:	0801683f 	.word	0x0801683f
 80167dc:	08016893 	.word	0x08016893
 80167e0:	08016893 	.word	0x08016893
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	Linecoding.bitrate = (uint32_t)(pbuf[0]);
 80167e4:	683b      	ldr	r3, [r7, #0]
 80167e6:	781b      	ldrb	r3, [r3, #0]
 80167e8:	461a      	mov	r2, r3
 80167ea:	4b2e      	ldr	r3, [pc, #184]	; (80168a4 <CDC_Control_FS+0x170>)
 80167ec:	601a      	str	r2, [r3, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 80167ee:	4b2d      	ldr	r3, [pc, #180]	; (80168a4 <CDC_Control_FS+0x170>)
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	683a      	ldr	r2, [r7, #0]
 80167f4:	3201      	adds	r2, #1
 80167f6:	7812      	ldrb	r2, [r2, #0]
 80167f8:	0212      	lsls	r2, r2, #8
 80167fa:	4313      	orrs	r3, r2
 80167fc:	4a29      	ldr	r2, [pc, #164]	; (80168a4 <CDC_Control_FS+0x170>)
 80167fe:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 8016800:	4b28      	ldr	r3, [pc, #160]	; (80168a4 <CDC_Control_FS+0x170>)
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	683a      	ldr	r2, [r7, #0]
 8016806:	3202      	adds	r2, #2
 8016808:	7812      	ldrb	r2, [r2, #0]
 801680a:	0412      	lsls	r2, r2, #16
 801680c:	4313      	orrs	r3, r2
 801680e:	4a25      	ldr	r2, [pc, #148]	; (80168a4 <CDC_Control_FS+0x170>)
 8016810:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 8016812:	4b24      	ldr	r3, [pc, #144]	; (80168a4 <CDC_Control_FS+0x170>)
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	683a      	ldr	r2, [r7, #0]
 8016818:	3203      	adds	r2, #3
 801681a:	7812      	ldrb	r2, [r2, #0]
 801681c:	0612      	lsls	r2, r2, #24
 801681e:	4313      	orrs	r3, r2
 8016820:	4a20      	ldr	r2, [pc, #128]	; (80168a4 <CDC_Control_FS+0x170>)
 8016822:	6013      	str	r3, [r2, #0]
    	Linecoding.format = pbuf[4];
 8016824:	683b      	ldr	r3, [r7, #0]
 8016826:	791a      	ldrb	r2, [r3, #4]
 8016828:	4b1e      	ldr	r3, [pc, #120]	; (80168a4 <CDC_Control_FS+0x170>)
 801682a:	711a      	strb	r2, [r3, #4]
    	Linecoding.paritytype = pbuf[5];
 801682c:	683b      	ldr	r3, [r7, #0]
 801682e:	795a      	ldrb	r2, [r3, #5]
 8016830:	4b1c      	ldr	r3, [pc, #112]	; (80168a4 <CDC_Control_FS+0x170>)
 8016832:	715a      	strb	r2, [r3, #5]
    	Linecoding.datatype = pbuf[6];
 8016834:	683b      	ldr	r3, [r7, #0]
 8016836:	799a      	ldrb	r2, [r3, #6]
 8016838:	4b1a      	ldr	r3, [pc, #104]	; (80168a4 <CDC_Control_FS+0x170>)
 801683a:	719a      	strb	r2, [r3, #6]
    break;
 801683c:	e02a      	b.n	8016894 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(Linecoding.bitrate);
 801683e:	4b19      	ldr	r3, [pc, #100]	; (80168a4 <CDC_Control_FS+0x170>)
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	b2da      	uxtb	r2, r3
 8016844:	683b      	ldr	r3, [r7, #0]
 8016846:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(Linecoding.bitrate>>8);
 8016848:	4b16      	ldr	r3, [pc, #88]	; (80168a4 <CDC_Control_FS+0x170>)
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	0a1a      	lsrs	r2, r3, #8
 801684e:	683b      	ldr	r3, [r7, #0]
 8016850:	3301      	adds	r3, #1
 8016852:	b2d2      	uxtb	r2, r2
 8016854:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(Linecoding.bitrate>>16);
 8016856:	4b13      	ldr	r3, [pc, #76]	; (80168a4 <CDC_Control_FS+0x170>)
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	0c1a      	lsrs	r2, r3, #16
 801685c:	683b      	ldr	r3, [r7, #0]
 801685e:	3302      	adds	r3, #2
 8016860:	b2d2      	uxtb	r2, r2
 8016862:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(Linecoding.bitrate>>24);
 8016864:	4b0f      	ldr	r3, [pc, #60]	; (80168a4 <CDC_Control_FS+0x170>)
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	0e1a      	lsrs	r2, r3, #24
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	3303      	adds	r3, #3
 801686e:	b2d2      	uxtb	r2, r2
 8016870:	701a      	strb	r2, [r3, #0]
      pbuf[4] = Linecoding.format;
 8016872:	683b      	ldr	r3, [r7, #0]
 8016874:	3304      	adds	r3, #4
 8016876:	4a0b      	ldr	r2, [pc, #44]	; (80168a4 <CDC_Control_FS+0x170>)
 8016878:	7912      	ldrb	r2, [r2, #4]
 801687a:	701a      	strb	r2, [r3, #0]
      pbuf[5] = Linecoding.paritytype;
 801687c:	683b      	ldr	r3, [r7, #0]
 801687e:	3305      	adds	r3, #5
 8016880:	4a08      	ldr	r2, [pc, #32]	; (80168a4 <CDC_Control_FS+0x170>)
 8016882:	7952      	ldrb	r2, [r2, #5]
 8016884:	701a      	strb	r2, [r3, #0]
      pbuf[6] = Linecoding.datatype;
 8016886:	683b      	ldr	r3, [r7, #0]
 8016888:	3306      	adds	r3, #6
 801688a:	4a06      	ldr	r2, [pc, #24]	; (80168a4 <CDC_Control_FS+0x170>)
 801688c:	7992      	ldrb	r2, [r2, #6]
 801688e:	701a      	strb	r2, [r3, #0]
    break;
 8016890:	e000      	b.n	8016894 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016892:	bf00      	nop
  }

  return (USBD_OK);
 8016894:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016896:	4618      	mov	r0, r3
 8016898:	370c      	adds	r7, #12
 801689a:	46bd      	mov	sp, r7
 801689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a0:	4770      	bx	lr
 80168a2:	bf00      	nop
 80168a4:	20000130 	.word	0x20000130

080168a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b084      	sub	sp, #16
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	6078      	str	r0, [r7, #4]
 80168b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80168b2:	6879      	ldr	r1, [r7, #4]
 80168b4:	480e      	ldr	r0, [pc, #56]	; (80168f0 <CDC_Receive_FS+0x48>)
 80168b6:	f7fe fb65 	bl	8014f84 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80168ba:	480d      	ldr	r0, [pc, #52]	; (80168f0 <CDC_Receive_FS+0x48>)
 80168bc:	f7fe fbc0 	bl	8015040 <USBD_CDC_ReceivePacket>

  for(int i=0; i<*Len; i++)
 80168c0:	2300      	movs	r3, #0
 80168c2:	60fb      	str	r3, [r7, #12]
 80168c4:	e009      	b.n	80168da <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	687a      	ldr	r2, [r7, #4]
 80168ca:	4413      	add	r3, r2
 80168cc:	781b      	ldrb	r3, [r3, #0]
 80168ce:	4618      	mov	r0, r3
 80168d0:	f7eb ff76 	bl	80027c0 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	3301      	adds	r3, #1
 80168d8:	60fb      	str	r3, [r7, #12]
 80168da:	683b      	ldr	r3, [r7, #0]
 80168dc:	681a      	ldr	r2, [r3, #0]
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	429a      	cmp	r2, r3
 80168e2:	d8f0      	bhi.n	80168c6 <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 80168e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80168e6:	4618      	mov	r0, r3
 80168e8:	3710      	adds	r7, #16
 80168ea:	46bd      	mov	sp, r7
 80168ec:	bd80      	pop	{r7, pc}
 80168ee:	bf00      	nop
 80168f0:	20007410 	.word	0x20007410

080168f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b084      	sub	sp, #16
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
 80168fc:	460b      	mov	r3, r1
 80168fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016900:	2300      	movs	r3, #0
 8016902:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016904:	4b0d      	ldr	r3, [pc, #52]	; (801693c <CDC_Transmit_FS+0x48>)
 8016906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801690a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801690c:	68bb      	ldr	r3, [r7, #8]
 801690e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016912:	2b00      	cmp	r3, #0
 8016914:	d001      	beq.n	801691a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8016916:	2301      	movs	r3, #1
 8016918:	e00b      	b.n	8016932 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801691a:	887b      	ldrh	r3, [r7, #2]
 801691c:	461a      	mov	r2, r3
 801691e:	6879      	ldr	r1, [r7, #4]
 8016920:	4806      	ldr	r0, [pc, #24]	; (801693c <CDC_Transmit_FS+0x48>)
 8016922:	f7fe fb0d 	bl	8014f40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016926:	4805      	ldr	r0, [pc, #20]	; (801693c <CDC_Transmit_FS+0x48>)
 8016928:	f7fe fb4a 	bl	8014fc0 <USBD_CDC_TransmitPacket>
 801692c:	4603      	mov	r3, r0
 801692e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016930:	7bfb      	ldrb	r3, [r7, #15]
}
 8016932:	4618      	mov	r0, r3
 8016934:	3710      	adds	r7, #16
 8016936:	46bd      	mov	sp, r7
 8016938:	bd80      	pop	{r7, pc}
 801693a:	bf00      	nop
 801693c:	20007410 	.word	0x20007410

08016940 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016940:	b480      	push	{r7}
 8016942:	b087      	sub	sp, #28
 8016944:	af00      	add	r7, sp, #0
 8016946:	60f8      	str	r0, [r7, #12]
 8016948:	60b9      	str	r1, [r7, #8]
 801694a:	4613      	mov	r3, r2
 801694c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801694e:	2300      	movs	r3, #0
 8016950:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016952:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016956:	4618      	mov	r0, r3
 8016958:	371c      	adds	r7, #28
 801695a:	46bd      	mov	sp, r7
 801695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016960:	4770      	bx	lr
	...

08016964 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016964:	b480      	push	{r7}
 8016966:	b083      	sub	sp, #12
 8016968:	af00      	add	r7, sp, #0
 801696a:	4603      	mov	r3, r0
 801696c:	6039      	str	r1, [r7, #0]
 801696e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016970:	683b      	ldr	r3, [r7, #0]
 8016972:	2212      	movs	r2, #18
 8016974:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016976:	4b03      	ldr	r3, [pc, #12]	; (8016984 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016978:	4618      	mov	r0, r3
 801697a:	370c      	adds	r7, #12
 801697c:	46bd      	mov	sp, r7
 801697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016982:	4770      	bx	lr
 8016984:	20000168 	.word	0x20000168

08016988 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016988:	b480      	push	{r7}
 801698a:	b083      	sub	sp, #12
 801698c:	af00      	add	r7, sp, #0
 801698e:	4603      	mov	r3, r0
 8016990:	6039      	str	r1, [r7, #0]
 8016992:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016994:	683b      	ldr	r3, [r7, #0]
 8016996:	2204      	movs	r2, #4
 8016998:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801699a:	4b03      	ldr	r3, [pc, #12]	; (80169a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801699c:	4618      	mov	r0, r3
 801699e:	370c      	adds	r7, #12
 80169a0:	46bd      	mov	sp, r7
 80169a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a6:	4770      	bx	lr
 80169a8:	2000017c 	.word	0x2000017c

080169ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b082      	sub	sp, #8
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	4603      	mov	r3, r0
 80169b4:	6039      	str	r1, [r7, #0]
 80169b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80169b8:	79fb      	ldrb	r3, [r7, #7]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d105      	bne.n	80169ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80169be:	683a      	ldr	r2, [r7, #0]
 80169c0:	4907      	ldr	r1, [pc, #28]	; (80169e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80169c2:	4808      	ldr	r0, [pc, #32]	; (80169e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80169c4:	f7ff fd8a 	bl	80164dc <USBD_GetString>
 80169c8:	e004      	b.n	80169d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80169ca:	683a      	ldr	r2, [r7, #0]
 80169cc:	4904      	ldr	r1, [pc, #16]	; (80169e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80169ce:	4805      	ldr	r0, [pc, #20]	; (80169e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80169d0:	f7ff fd84 	bl	80164dc <USBD_GetString>
  }
  return USBD_StrDesc;
 80169d4:	4b02      	ldr	r3, [pc, #8]	; (80169e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80169d6:	4618      	mov	r0, r3
 80169d8:	3708      	adds	r7, #8
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}
 80169de:	bf00      	nop
 80169e0:	200086ec 	.word	0x200086ec
 80169e4:	0801ab30 	.word	0x0801ab30

080169e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b082      	sub	sp, #8
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	4603      	mov	r3, r0
 80169f0:	6039      	str	r1, [r7, #0]
 80169f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80169f4:	683a      	ldr	r2, [r7, #0]
 80169f6:	4904      	ldr	r1, [pc, #16]	; (8016a08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80169f8:	4804      	ldr	r0, [pc, #16]	; (8016a0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80169fa:	f7ff fd6f 	bl	80164dc <USBD_GetString>
  return USBD_StrDesc;
 80169fe:	4b02      	ldr	r3, [pc, #8]	; (8016a08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016a00:	4618      	mov	r0, r3
 8016a02:	3708      	adds	r7, #8
 8016a04:	46bd      	mov	sp, r7
 8016a06:	bd80      	pop	{r7, pc}
 8016a08:	200086ec 	.word	0x200086ec
 8016a0c:	0801ab48 	.word	0x0801ab48

08016a10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b082      	sub	sp, #8
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	4603      	mov	r3, r0
 8016a18:	6039      	str	r1, [r7, #0]
 8016a1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	221a      	movs	r2, #26
 8016a20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016a22:	f000 f843 	bl	8016aac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016a26:	4b02      	ldr	r3, [pc, #8]	; (8016a30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016a28:	4618      	mov	r0, r3
 8016a2a:	3708      	adds	r7, #8
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	bd80      	pop	{r7, pc}
 8016a30:	20000180 	.word	0x20000180

08016a34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a34:	b580      	push	{r7, lr}
 8016a36:	b082      	sub	sp, #8
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	4603      	mov	r3, r0
 8016a3c:	6039      	str	r1, [r7, #0]
 8016a3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016a40:	79fb      	ldrb	r3, [r7, #7]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d105      	bne.n	8016a52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016a46:	683a      	ldr	r2, [r7, #0]
 8016a48:	4907      	ldr	r1, [pc, #28]	; (8016a68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016a4a:	4808      	ldr	r0, [pc, #32]	; (8016a6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8016a4c:	f7ff fd46 	bl	80164dc <USBD_GetString>
 8016a50:	e004      	b.n	8016a5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016a52:	683a      	ldr	r2, [r7, #0]
 8016a54:	4904      	ldr	r1, [pc, #16]	; (8016a68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016a56:	4805      	ldr	r0, [pc, #20]	; (8016a6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8016a58:	f7ff fd40 	bl	80164dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8016a5c:	4b02      	ldr	r3, [pc, #8]	; (8016a68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016a5e:	4618      	mov	r0, r3
 8016a60:	3708      	adds	r7, #8
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}
 8016a66:	bf00      	nop
 8016a68:	200086ec 	.word	0x200086ec
 8016a6c:	0801ab5c 	.word	0x0801ab5c

08016a70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b082      	sub	sp, #8
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	4603      	mov	r3, r0
 8016a78:	6039      	str	r1, [r7, #0]
 8016a7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016a7c:	79fb      	ldrb	r3, [r7, #7]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d105      	bne.n	8016a8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016a82:	683a      	ldr	r2, [r7, #0]
 8016a84:	4907      	ldr	r1, [pc, #28]	; (8016aa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016a86:	4808      	ldr	r0, [pc, #32]	; (8016aa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016a88:	f7ff fd28 	bl	80164dc <USBD_GetString>
 8016a8c:	e004      	b.n	8016a98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016a8e:	683a      	ldr	r2, [r7, #0]
 8016a90:	4904      	ldr	r1, [pc, #16]	; (8016aa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016a92:	4805      	ldr	r0, [pc, #20]	; (8016aa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016a94:	f7ff fd22 	bl	80164dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8016a98:	4b02      	ldr	r3, [pc, #8]	; (8016aa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	3708      	adds	r7, #8
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd80      	pop	{r7, pc}
 8016aa2:	bf00      	nop
 8016aa4:	200086ec 	.word	0x200086ec
 8016aa8:	0801ab68 	.word	0x0801ab68

08016aac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b084      	sub	sp, #16
 8016ab0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016ab2:	4b0f      	ldr	r3, [pc, #60]	; (8016af0 <Get_SerialNum+0x44>)
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016ab8:	4b0e      	ldr	r3, [pc, #56]	; (8016af4 <Get_SerialNum+0x48>)
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016abe:	4b0e      	ldr	r3, [pc, #56]	; (8016af8 <Get_SerialNum+0x4c>)
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016ac4:	68fa      	ldr	r2, [r7, #12]
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	4413      	add	r3, r2
 8016aca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d009      	beq.n	8016ae6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016ad2:	2208      	movs	r2, #8
 8016ad4:	4909      	ldr	r1, [pc, #36]	; (8016afc <Get_SerialNum+0x50>)
 8016ad6:	68f8      	ldr	r0, [r7, #12]
 8016ad8:	f000 f814 	bl	8016b04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016adc:	2204      	movs	r2, #4
 8016ade:	4908      	ldr	r1, [pc, #32]	; (8016b00 <Get_SerialNum+0x54>)
 8016ae0:	68b8      	ldr	r0, [r7, #8]
 8016ae2:	f000 f80f 	bl	8016b04 <IntToUnicode>
  }
}
 8016ae6:	bf00      	nop
 8016ae8:	3710      	adds	r7, #16
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}
 8016aee:	bf00      	nop
 8016af0:	1fff7a10 	.word	0x1fff7a10
 8016af4:	1fff7a14 	.word	0x1fff7a14
 8016af8:	1fff7a18 	.word	0x1fff7a18
 8016afc:	20000182 	.word	0x20000182
 8016b00:	20000192 	.word	0x20000192

08016b04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016b04:	b480      	push	{r7}
 8016b06:	b087      	sub	sp, #28
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	60f8      	str	r0, [r7, #12]
 8016b0c:	60b9      	str	r1, [r7, #8]
 8016b0e:	4613      	mov	r3, r2
 8016b10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016b12:	2300      	movs	r3, #0
 8016b14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016b16:	2300      	movs	r3, #0
 8016b18:	75fb      	strb	r3, [r7, #23]
 8016b1a:	e027      	b.n	8016b6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	0f1b      	lsrs	r3, r3, #28
 8016b20:	2b09      	cmp	r3, #9
 8016b22:	d80b      	bhi.n	8016b3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	0f1b      	lsrs	r3, r3, #28
 8016b28:	b2da      	uxtb	r2, r3
 8016b2a:	7dfb      	ldrb	r3, [r7, #23]
 8016b2c:	005b      	lsls	r3, r3, #1
 8016b2e:	4619      	mov	r1, r3
 8016b30:	68bb      	ldr	r3, [r7, #8]
 8016b32:	440b      	add	r3, r1
 8016b34:	3230      	adds	r2, #48	; 0x30
 8016b36:	b2d2      	uxtb	r2, r2
 8016b38:	701a      	strb	r2, [r3, #0]
 8016b3a:	e00a      	b.n	8016b52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	0f1b      	lsrs	r3, r3, #28
 8016b40:	b2da      	uxtb	r2, r3
 8016b42:	7dfb      	ldrb	r3, [r7, #23]
 8016b44:	005b      	lsls	r3, r3, #1
 8016b46:	4619      	mov	r1, r3
 8016b48:	68bb      	ldr	r3, [r7, #8]
 8016b4a:	440b      	add	r3, r1
 8016b4c:	3237      	adds	r2, #55	; 0x37
 8016b4e:	b2d2      	uxtb	r2, r2
 8016b50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	011b      	lsls	r3, r3, #4
 8016b56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016b58:	7dfb      	ldrb	r3, [r7, #23]
 8016b5a:	005b      	lsls	r3, r3, #1
 8016b5c:	3301      	adds	r3, #1
 8016b5e:	68ba      	ldr	r2, [r7, #8]
 8016b60:	4413      	add	r3, r2
 8016b62:	2200      	movs	r2, #0
 8016b64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016b66:	7dfb      	ldrb	r3, [r7, #23]
 8016b68:	3301      	adds	r3, #1
 8016b6a:	75fb      	strb	r3, [r7, #23]
 8016b6c:	7dfa      	ldrb	r2, [r7, #23]
 8016b6e:	79fb      	ldrb	r3, [r7, #7]
 8016b70:	429a      	cmp	r2, r3
 8016b72:	d3d3      	bcc.n	8016b1c <IntToUnicode+0x18>
  }
}
 8016b74:	bf00      	nop
 8016b76:	bf00      	nop
 8016b78:	371c      	adds	r7, #28
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b80:	4770      	bx	lr
	...

08016b84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b08a      	sub	sp, #40	; 0x28
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016b8c:	f107 0314 	add.w	r3, r7, #20
 8016b90:	2200      	movs	r2, #0
 8016b92:	601a      	str	r2, [r3, #0]
 8016b94:	605a      	str	r2, [r3, #4]
 8016b96:	609a      	str	r2, [r3, #8]
 8016b98:	60da      	str	r2, [r3, #12]
 8016b9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016ba4:	d13a      	bne.n	8016c1c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	613b      	str	r3, [r7, #16]
 8016baa:	4b1e      	ldr	r3, [pc, #120]	; (8016c24 <HAL_PCD_MspInit+0xa0>)
 8016bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016bae:	4a1d      	ldr	r2, [pc, #116]	; (8016c24 <HAL_PCD_MspInit+0xa0>)
 8016bb0:	f043 0301 	orr.w	r3, r3, #1
 8016bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8016bb6:	4b1b      	ldr	r3, [pc, #108]	; (8016c24 <HAL_PCD_MspInit+0xa0>)
 8016bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016bba:	f003 0301 	and.w	r3, r3, #1
 8016bbe:	613b      	str	r3, [r7, #16]
 8016bc0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016bc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016bc8:	2302      	movs	r3, #2
 8016bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016bcc:	2300      	movs	r3, #0
 8016bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016bd0:	2303      	movs	r3, #3
 8016bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016bd4:	230a      	movs	r3, #10
 8016bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016bd8:	f107 0314 	add.w	r3, r7, #20
 8016bdc:	4619      	mov	r1, r3
 8016bde:	4812      	ldr	r0, [pc, #72]	; (8016c28 <HAL_PCD_MspInit+0xa4>)
 8016be0:	f7f0 fbfa 	bl	80073d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016be4:	4b0f      	ldr	r3, [pc, #60]	; (8016c24 <HAL_PCD_MspInit+0xa0>)
 8016be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016be8:	4a0e      	ldr	r2, [pc, #56]	; (8016c24 <HAL_PCD_MspInit+0xa0>)
 8016bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016bee:	6353      	str	r3, [r2, #52]	; 0x34
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	60fb      	str	r3, [r7, #12]
 8016bf4:	4b0b      	ldr	r3, [pc, #44]	; (8016c24 <HAL_PCD_MspInit+0xa0>)
 8016bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016bf8:	4a0a      	ldr	r2, [pc, #40]	; (8016c24 <HAL_PCD_MspInit+0xa0>)
 8016bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016bfe:	6453      	str	r3, [r2, #68]	; 0x44
 8016c00:	4b08      	ldr	r3, [pc, #32]	; (8016c24 <HAL_PCD_MspInit+0xa0>)
 8016c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016c08:	60fb      	str	r3, [r7, #12]
 8016c0a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8016c0c:	2200      	movs	r2, #0
 8016c0e:	2106      	movs	r1, #6
 8016c10:	2043      	movs	r0, #67	; 0x43
 8016c12:	f7ef fcaa 	bl	800656a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016c16:	2043      	movs	r0, #67	; 0x43
 8016c18:	f7ef fcc3 	bl	80065a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016c1c:	bf00      	nop
 8016c1e:	3728      	adds	r7, #40	; 0x28
 8016c20:	46bd      	mov	sp, r7
 8016c22:	bd80      	pop	{r7, pc}
 8016c24:	40023800 	.word	0x40023800
 8016c28:	40020000 	.word	0x40020000

08016c2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c2c:	b580      	push	{r7, lr}
 8016c2e:	b082      	sub	sp, #8
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8016c40:	4619      	mov	r1, r3
 8016c42:	4610      	mov	r0, r2
 8016c44:	f7fe fae5 	bl	8015212 <USBD_LL_SetupStage>
}
 8016c48:	bf00      	nop
 8016c4a:	3708      	adds	r7, #8
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}

08016c50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b082      	sub	sp, #8
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
 8016c58:	460b      	mov	r3, r1
 8016c5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8016c62:	78fa      	ldrb	r2, [r7, #3]
 8016c64:	6879      	ldr	r1, [r7, #4]
 8016c66:	4613      	mov	r3, r2
 8016c68:	00db      	lsls	r3, r3, #3
 8016c6a:	4413      	add	r3, r2
 8016c6c:	009b      	lsls	r3, r3, #2
 8016c6e:	440b      	add	r3, r1
 8016c70:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8016c74:	681a      	ldr	r2, [r3, #0]
 8016c76:	78fb      	ldrb	r3, [r7, #3]
 8016c78:	4619      	mov	r1, r3
 8016c7a:	f7fe fb1f 	bl	80152bc <USBD_LL_DataOutStage>
}
 8016c7e:	bf00      	nop
 8016c80:	3708      	adds	r7, #8
 8016c82:	46bd      	mov	sp, r7
 8016c84:	bd80      	pop	{r7, pc}

08016c86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c86:	b580      	push	{r7, lr}
 8016c88:	b082      	sub	sp, #8
 8016c8a:	af00      	add	r7, sp, #0
 8016c8c:	6078      	str	r0, [r7, #4]
 8016c8e:	460b      	mov	r3, r1
 8016c90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8016c98:	78fa      	ldrb	r2, [r7, #3]
 8016c9a:	6879      	ldr	r1, [r7, #4]
 8016c9c:	4613      	mov	r3, r2
 8016c9e:	00db      	lsls	r3, r3, #3
 8016ca0:	4413      	add	r3, r2
 8016ca2:	009b      	lsls	r3, r3, #2
 8016ca4:	440b      	add	r3, r1
 8016ca6:	3320      	adds	r3, #32
 8016ca8:	681a      	ldr	r2, [r3, #0]
 8016caa:	78fb      	ldrb	r3, [r7, #3]
 8016cac:	4619      	mov	r1, r3
 8016cae:	f7fe fbb8 	bl	8015422 <USBD_LL_DataInStage>
}
 8016cb2:	bf00      	nop
 8016cb4:	3708      	adds	r7, #8
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}

08016cba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cba:	b580      	push	{r7, lr}
 8016cbc:	b082      	sub	sp, #8
 8016cbe:	af00      	add	r7, sp, #0
 8016cc0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f7fe fcf2 	bl	80156b2 <USBD_LL_SOF>
}
 8016cce:	bf00      	nop
 8016cd0:	3708      	adds	r7, #8
 8016cd2:	46bd      	mov	sp, r7
 8016cd4:	bd80      	pop	{r7, pc}

08016cd6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cd6:	b580      	push	{r7, lr}
 8016cd8:	b084      	sub	sp, #16
 8016cda:	af00      	add	r7, sp, #0
 8016cdc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016cde:	2301      	movs	r3, #1
 8016ce0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	79db      	ldrb	r3, [r3, #7]
 8016ce6:	2b02      	cmp	r3, #2
 8016ce8:	d001      	beq.n	8016cee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8016cea:	f7ea fc7b 	bl	80015e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8016cf4:	7bfa      	ldrb	r2, [r7, #15]
 8016cf6:	4611      	mov	r1, r2
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	f7fe fc96 	bl	801562a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8016d04:	4618      	mov	r0, r3
 8016d06:	f7fe fc3e 	bl	8015586 <USBD_LL_Reset>
}
 8016d0a:	bf00      	nop
 8016d0c:	3710      	adds	r7, #16
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	bd80      	pop	{r7, pc}
	...

08016d14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b082      	sub	sp, #8
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8016d22:	4618      	mov	r0, r3
 8016d24:	f7fe fc91 	bl	801564a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	687a      	ldr	r2, [r7, #4]
 8016d34:	6812      	ldr	r2, [r2, #0]
 8016d36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016d3a:	f043 0301 	orr.w	r3, r3, #1
 8016d3e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	7adb      	ldrb	r3, [r3, #11]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d005      	beq.n	8016d54 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016d48:	4b04      	ldr	r3, [pc, #16]	; (8016d5c <HAL_PCD_SuspendCallback+0x48>)
 8016d4a:	691b      	ldr	r3, [r3, #16]
 8016d4c:	4a03      	ldr	r2, [pc, #12]	; (8016d5c <HAL_PCD_SuspendCallback+0x48>)
 8016d4e:	f043 0306 	orr.w	r3, r3, #6
 8016d52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016d54:	bf00      	nop
 8016d56:	3708      	adds	r7, #8
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	bd80      	pop	{r7, pc}
 8016d5c:	e000ed00 	.word	0xe000ed00

08016d60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b082      	sub	sp, #8
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8016d6e:	4618      	mov	r0, r3
 8016d70:	f7fe fc87 	bl	8015682 <USBD_LL_Resume>
}
 8016d74:	bf00      	nop
 8016d76:	3708      	adds	r7, #8
 8016d78:	46bd      	mov	sp, r7
 8016d7a:	bd80      	pop	{r7, pc}

08016d7c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b082      	sub	sp, #8
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
 8016d84:	460b      	mov	r3, r1
 8016d86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8016d8e:	78fa      	ldrb	r2, [r7, #3]
 8016d90:	4611      	mov	r1, r2
 8016d92:	4618      	mov	r0, r3
 8016d94:	f7fe fcdf 	bl	8015756 <USBD_LL_IsoOUTIncomplete>
}
 8016d98:	bf00      	nop
 8016d9a:	3708      	adds	r7, #8
 8016d9c:	46bd      	mov	sp, r7
 8016d9e:	bd80      	pop	{r7, pc}

08016da0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b082      	sub	sp, #8
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]
 8016da8:	460b      	mov	r3, r1
 8016daa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8016db2:	78fa      	ldrb	r2, [r7, #3]
 8016db4:	4611      	mov	r1, r2
 8016db6:	4618      	mov	r0, r3
 8016db8:	f7fe fc9b 	bl	80156f2 <USBD_LL_IsoINIncomplete>
}
 8016dbc:	bf00      	nop
 8016dbe:	3708      	adds	r7, #8
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	bd80      	pop	{r7, pc}

08016dc4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b082      	sub	sp, #8
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	f7fe fcf1 	bl	80157ba <USBD_LL_DevConnected>
}
 8016dd8:	bf00      	nop
 8016dda:	3708      	adds	r7, #8
 8016ddc:	46bd      	mov	sp, r7
 8016dde:	bd80      	pop	{r7, pc}

08016de0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b082      	sub	sp, #8
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8016dee:	4618      	mov	r0, r3
 8016df0:	f7fe fcee 	bl	80157d0 <USBD_LL_DevDisconnected>
}
 8016df4:	bf00      	nop
 8016df6:	3708      	adds	r7, #8
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	bd80      	pop	{r7, pc}

08016dfc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	b082      	sub	sp, #8
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	781b      	ldrb	r3, [r3, #0]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d13c      	bne.n	8016e86 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016e0c:	4a20      	ldr	r2, [pc, #128]	; (8016e90 <USBD_LL_Init+0x94>)
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	4a1e      	ldr	r2, [pc, #120]	; (8016e90 <USBD_LL_Init+0x94>)
 8016e18:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016e1c:	4b1c      	ldr	r3, [pc, #112]	; (8016e90 <USBD_LL_Init+0x94>)
 8016e1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016e22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016e24:	4b1a      	ldr	r3, [pc, #104]	; (8016e90 <USBD_LL_Init+0x94>)
 8016e26:	2204      	movs	r2, #4
 8016e28:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016e2a:	4b19      	ldr	r3, [pc, #100]	; (8016e90 <USBD_LL_Init+0x94>)
 8016e2c:	2202      	movs	r2, #2
 8016e2e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016e30:	4b17      	ldr	r3, [pc, #92]	; (8016e90 <USBD_LL_Init+0x94>)
 8016e32:	2200      	movs	r2, #0
 8016e34:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016e36:	4b16      	ldr	r3, [pc, #88]	; (8016e90 <USBD_LL_Init+0x94>)
 8016e38:	2202      	movs	r2, #2
 8016e3a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016e3c:	4b14      	ldr	r3, [pc, #80]	; (8016e90 <USBD_LL_Init+0x94>)
 8016e3e:	2200      	movs	r2, #0
 8016e40:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016e42:	4b13      	ldr	r3, [pc, #76]	; (8016e90 <USBD_LL_Init+0x94>)
 8016e44:	2200      	movs	r2, #0
 8016e46:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016e48:	4b11      	ldr	r3, [pc, #68]	; (8016e90 <USBD_LL_Init+0x94>)
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016e4e:	4b10      	ldr	r3, [pc, #64]	; (8016e90 <USBD_LL_Init+0x94>)
 8016e50:	2200      	movs	r2, #0
 8016e52:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016e54:	4b0e      	ldr	r3, [pc, #56]	; (8016e90 <USBD_LL_Init+0x94>)
 8016e56:	2200      	movs	r2, #0
 8016e58:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016e5a:	480d      	ldr	r0, [pc, #52]	; (8016e90 <USBD_LL_Init+0x94>)
 8016e5c:	f7f3 fc4a 	bl	800a6f4 <HAL_PCD_Init>
 8016e60:	4603      	mov	r3, r0
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d001      	beq.n	8016e6a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016e66:	f7ea fbbd 	bl	80015e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016e6a:	2180      	movs	r1, #128	; 0x80
 8016e6c:	4808      	ldr	r0, [pc, #32]	; (8016e90 <USBD_LL_Init+0x94>)
 8016e6e:	f7f4 fe74 	bl	800bb5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016e72:	2240      	movs	r2, #64	; 0x40
 8016e74:	2100      	movs	r1, #0
 8016e76:	4806      	ldr	r0, [pc, #24]	; (8016e90 <USBD_LL_Init+0x94>)
 8016e78:	f7f4 fe28 	bl	800bacc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016e7c:	2280      	movs	r2, #128	; 0x80
 8016e7e:	2101      	movs	r1, #1
 8016e80:	4803      	ldr	r0, [pc, #12]	; (8016e90 <USBD_LL_Init+0x94>)
 8016e82:	f7f4 fe23 	bl	800bacc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016e86:	2300      	movs	r3, #0
}
 8016e88:	4618      	mov	r0, r3
 8016e8a:	3708      	adds	r7, #8
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}
 8016e90:	200088ec 	.word	0x200088ec

08016e94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b084      	sub	sp, #16
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f7f3 fd31 	bl	800a912 <HAL_PCD_Start>
 8016eb0:	4603      	mov	r3, r0
 8016eb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016eb4:	7bfb      	ldrb	r3, [r7, #15]
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f000 f942 	bl	8017140 <USBD_Get_USB_Status>
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	3710      	adds	r7, #16
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	bd80      	pop	{r7, pc}

08016eca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016eca:	b580      	push	{r7, lr}
 8016ecc:	b084      	sub	sp, #16
 8016ece:	af00      	add	r7, sp, #0
 8016ed0:	6078      	str	r0, [r7, #4]
 8016ed2:	4608      	mov	r0, r1
 8016ed4:	4611      	mov	r1, r2
 8016ed6:	461a      	mov	r2, r3
 8016ed8:	4603      	mov	r3, r0
 8016eda:	70fb      	strb	r3, [r7, #3]
 8016edc:	460b      	mov	r3, r1
 8016ede:	70bb      	strb	r3, [r7, #2]
 8016ee0:	4613      	mov	r3, r2
 8016ee2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ee8:	2300      	movs	r3, #0
 8016eea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016ef2:	78bb      	ldrb	r3, [r7, #2]
 8016ef4:	883a      	ldrh	r2, [r7, #0]
 8016ef6:	78f9      	ldrb	r1, [r7, #3]
 8016ef8:	f7f4 fa05 	bl	800b306 <HAL_PCD_EP_Open>
 8016efc:	4603      	mov	r3, r0
 8016efe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f00:	7bfb      	ldrb	r3, [r7, #15]
 8016f02:	4618      	mov	r0, r3
 8016f04:	f000 f91c 	bl	8017140 <USBD_Get_USB_Status>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016f0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f0e:	4618      	mov	r0, r3
 8016f10:	3710      	adds	r7, #16
 8016f12:	46bd      	mov	sp, r7
 8016f14:	bd80      	pop	{r7, pc}

08016f16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f16:	b580      	push	{r7, lr}
 8016f18:	b084      	sub	sp, #16
 8016f1a:	af00      	add	r7, sp, #0
 8016f1c:	6078      	str	r0, [r7, #4]
 8016f1e:	460b      	mov	r3, r1
 8016f20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f22:	2300      	movs	r3, #0
 8016f24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f26:	2300      	movs	r3, #0
 8016f28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016f30:	78fa      	ldrb	r2, [r7, #3]
 8016f32:	4611      	mov	r1, r2
 8016f34:	4618      	mov	r0, r3
 8016f36:	f7f4 fa4e 	bl	800b3d6 <HAL_PCD_EP_Close>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f3e:	7bfb      	ldrb	r3, [r7, #15]
 8016f40:	4618      	mov	r0, r3
 8016f42:	f000 f8fd 	bl	8017140 <USBD_Get_USB_Status>
 8016f46:	4603      	mov	r3, r0
 8016f48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016f4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	3710      	adds	r7, #16
 8016f50:	46bd      	mov	sp, r7
 8016f52:	bd80      	pop	{r7, pc}

08016f54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f54:	b580      	push	{r7, lr}
 8016f56:	b084      	sub	sp, #16
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
 8016f5c:	460b      	mov	r3, r1
 8016f5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f60:	2300      	movs	r3, #0
 8016f62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f64:	2300      	movs	r3, #0
 8016f66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016f6e:	78fa      	ldrb	r2, [r7, #3]
 8016f70:	4611      	mov	r1, r2
 8016f72:	4618      	mov	r0, r3
 8016f74:	f7f4 fb06 	bl	800b584 <HAL_PCD_EP_SetStall>
 8016f78:	4603      	mov	r3, r0
 8016f7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f7c:	7bfb      	ldrb	r3, [r7, #15]
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f000 f8de 	bl	8017140 <USBD_Get_USB_Status>
 8016f84:	4603      	mov	r3, r0
 8016f86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016f88:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	3710      	adds	r7, #16
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}

08016f92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f92:	b580      	push	{r7, lr}
 8016f94:	b084      	sub	sp, #16
 8016f96:	af00      	add	r7, sp, #0
 8016f98:	6078      	str	r0, [r7, #4]
 8016f9a:	460b      	mov	r3, r1
 8016f9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fa2:	2300      	movs	r3, #0
 8016fa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016fac:	78fa      	ldrb	r2, [r7, #3]
 8016fae:	4611      	mov	r1, r2
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	f7f4 fb4a 	bl	800b64a <HAL_PCD_EP_ClrStall>
 8016fb6:	4603      	mov	r3, r0
 8016fb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016fba:	7bfb      	ldrb	r3, [r7, #15]
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	f000 f8bf 	bl	8017140 <USBD_Get_USB_Status>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016fc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8016fc8:	4618      	mov	r0, r3
 8016fca:	3710      	adds	r7, #16
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	bd80      	pop	{r7, pc}

08016fd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016fd0:	b480      	push	{r7}
 8016fd2:	b085      	sub	sp, #20
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
 8016fd8:	460b      	mov	r3, r1
 8016fda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016fe2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016fe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	da0b      	bge.n	8017004 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016fec:	78fb      	ldrb	r3, [r7, #3]
 8016fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016ff2:	68f9      	ldr	r1, [r7, #12]
 8016ff4:	4613      	mov	r3, r2
 8016ff6:	00db      	lsls	r3, r3, #3
 8016ff8:	4413      	add	r3, r2
 8016ffa:	009b      	lsls	r3, r3, #2
 8016ffc:	440b      	add	r3, r1
 8016ffe:	3316      	adds	r3, #22
 8017000:	781b      	ldrb	r3, [r3, #0]
 8017002:	e00b      	b.n	801701c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017004:	78fb      	ldrb	r3, [r7, #3]
 8017006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801700a:	68f9      	ldr	r1, [r7, #12]
 801700c:	4613      	mov	r3, r2
 801700e:	00db      	lsls	r3, r3, #3
 8017010:	4413      	add	r3, r2
 8017012:	009b      	lsls	r3, r3, #2
 8017014:	440b      	add	r3, r1
 8017016:	f203 2356 	addw	r3, r3, #598	; 0x256
 801701a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801701c:	4618      	mov	r0, r3
 801701e:	3714      	adds	r7, #20
 8017020:	46bd      	mov	sp, r7
 8017022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017026:	4770      	bx	lr

08017028 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b084      	sub	sp, #16
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
 8017030:	460b      	mov	r3, r1
 8017032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017034:	2300      	movs	r3, #0
 8017036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017038:	2300      	movs	r3, #0
 801703a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017042:	78fa      	ldrb	r2, [r7, #3]
 8017044:	4611      	mov	r1, r2
 8017046:	4618      	mov	r0, r3
 8017048:	f7f4 f939 	bl	800b2be <HAL_PCD_SetAddress>
 801704c:	4603      	mov	r3, r0
 801704e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017050:	7bfb      	ldrb	r3, [r7, #15]
 8017052:	4618      	mov	r0, r3
 8017054:	f000 f874 	bl	8017140 <USBD_Get_USB_Status>
 8017058:	4603      	mov	r3, r0
 801705a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801705c:	7bbb      	ldrb	r3, [r7, #14]
}
 801705e:	4618      	mov	r0, r3
 8017060:	3710      	adds	r7, #16
 8017062:	46bd      	mov	sp, r7
 8017064:	bd80      	pop	{r7, pc}

08017066 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017066:	b580      	push	{r7, lr}
 8017068:	b086      	sub	sp, #24
 801706a:	af00      	add	r7, sp, #0
 801706c:	60f8      	str	r0, [r7, #12]
 801706e:	607a      	str	r2, [r7, #4]
 8017070:	603b      	str	r3, [r7, #0]
 8017072:	460b      	mov	r3, r1
 8017074:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017076:	2300      	movs	r3, #0
 8017078:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801707a:	2300      	movs	r3, #0
 801707c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017084:	7af9      	ldrb	r1, [r7, #11]
 8017086:	683b      	ldr	r3, [r7, #0]
 8017088:	687a      	ldr	r2, [r7, #4]
 801708a:	f7f4 fa41 	bl	800b510 <HAL_PCD_EP_Transmit>
 801708e:	4603      	mov	r3, r0
 8017090:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017092:	7dfb      	ldrb	r3, [r7, #23]
 8017094:	4618      	mov	r0, r3
 8017096:	f000 f853 	bl	8017140 <USBD_Get_USB_Status>
 801709a:	4603      	mov	r3, r0
 801709c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801709e:	7dbb      	ldrb	r3, [r7, #22]
}
 80170a0:	4618      	mov	r0, r3
 80170a2:	3718      	adds	r7, #24
 80170a4:	46bd      	mov	sp, r7
 80170a6:	bd80      	pop	{r7, pc}

080170a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b086      	sub	sp, #24
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	60f8      	str	r0, [r7, #12]
 80170b0:	607a      	str	r2, [r7, #4]
 80170b2:	603b      	str	r3, [r7, #0]
 80170b4:	460b      	mov	r3, r1
 80170b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80170b8:	2300      	movs	r3, #0
 80170ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80170bc:	2300      	movs	r3, #0
 80170be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80170c6:	7af9      	ldrb	r1, [r7, #11]
 80170c8:	683b      	ldr	r3, [r7, #0]
 80170ca:	687a      	ldr	r2, [r7, #4]
 80170cc:	f7f4 f9cd 	bl	800b46a <HAL_PCD_EP_Receive>
 80170d0:	4603      	mov	r3, r0
 80170d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80170d4:	7dfb      	ldrb	r3, [r7, #23]
 80170d6:	4618      	mov	r0, r3
 80170d8:	f000 f832 	bl	8017140 <USBD_Get_USB_Status>
 80170dc:	4603      	mov	r3, r0
 80170de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80170e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80170e2:	4618      	mov	r0, r3
 80170e4:	3718      	adds	r7, #24
 80170e6:	46bd      	mov	sp, r7
 80170e8:	bd80      	pop	{r7, pc}

080170ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80170ea:	b580      	push	{r7, lr}
 80170ec:	b082      	sub	sp, #8
 80170ee:	af00      	add	r7, sp, #0
 80170f0:	6078      	str	r0, [r7, #4]
 80170f2:	460b      	mov	r3, r1
 80170f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80170fc:	78fa      	ldrb	r2, [r7, #3]
 80170fe:	4611      	mov	r1, r2
 8017100:	4618      	mov	r0, r3
 8017102:	f7f4 f9ed 	bl	800b4e0 <HAL_PCD_EP_GetRxCount>
 8017106:	4603      	mov	r3, r0
}
 8017108:	4618      	mov	r0, r3
 801710a:	3708      	adds	r7, #8
 801710c:	46bd      	mov	sp, r7
 801710e:	bd80      	pop	{r7, pc}

08017110 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017110:	b480      	push	{r7}
 8017112:	b083      	sub	sp, #12
 8017114:	af00      	add	r7, sp, #0
 8017116:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017118:	4b03      	ldr	r3, [pc, #12]	; (8017128 <USBD_static_malloc+0x18>)
}
 801711a:	4618      	mov	r0, r3
 801711c:	370c      	adds	r7, #12
 801711e:	46bd      	mov	sp, r7
 8017120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017124:	4770      	bx	lr
 8017126:	bf00      	nop
 8017128:	20008dd0 	.word	0x20008dd0

0801712c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801712c:	b480      	push	{r7}
 801712e:	b083      	sub	sp, #12
 8017130:	af00      	add	r7, sp, #0
 8017132:	6078      	str	r0, [r7, #4]

}
 8017134:	bf00      	nop
 8017136:	370c      	adds	r7, #12
 8017138:	46bd      	mov	sp, r7
 801713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801713e:	4770      	bx	lr

08017140 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017140:	b480      	push	{r7}
 8017142:	b085      	sub	sp, #20
 8017144:	af00      	add	r7, sp, #0
 8017146:	4603      	mov	r3, r0
 8017148:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801714a:	2300      	movs	r3, #0
 801714c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801714e:	79fb      	ldrb	r3, [r7, #7]
 8017150:	2b03      	cmp	r3, #3
 8017152:	d817      	bhi.n	8017184 <USBD_Get_USB_Status+0x44>
 8017154:	a201      	add	r2, pc, #4	; (adr r2, 801715c <USBD_Get_USB_Status+0x1c>)
 8017156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801715a:	bf00      	nop
 801715c:	0801716d 	.word	0x0801716d
 8017160:	08017173 	.word	0x08017173
 8017164:	08017179 	.word	0x08017179
 8017168:	0801717f 	.word	0x0801717f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801716c:	2300      	movs	r3, #0
 801716e:	73fb      	strb	r3, [r7, #15]
    break;
 8017170:	e00b      	b.n	801718a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017172:	2303      	movs	r3, #3
 8017174:	73fb      	strb	r3, [r7, #15]
    break;
 8017176:	e008      	b.n	801718a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017178:	2301      	movs	r3, #1
 801717a:	73fb      	strb	r3, [r7, #15]
    break;
 801717c:	e005      	b.n	801718a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801717e:	2303      	movs	r3, #3
 8017180:	73fb      	strb	r3, [r7, #15]
    break;
 8017182:	e002      	b.n	801718a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017184:	2303      	movs	r3, #3
 8017186:	73fb      	strb	r3, [r7, #15]
    break;
 8017188:	bf00      	nop
  }
  return usb_status;
 801718a:	7bfb      	ldrb	r3, [r7, #15]
}
 801718c:	4618      	mov	r0, r3
 801718e:	3714      	adds	r7, #20
 8017190:	46bd      	mov	sp, r7
 8017192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017196:	4770      	bx	lr

08017198 <malloc>:
 8017198:	4b02      	ldr	r3, [pc, #8]	; (80171a4 <malloc+0xc>)
 801719a:	4601      	mov	r1, r0
 801719c:	6818      	ldr	r0, [r3, #0]
 801719e:	f000 b82b 	b.w	80171f8 <_malloc_r>
 80171a2:	bf00      	nop
 80171a4:	20000360 	.word	0x20000360

080171a8 <free>:
 80171a8:	4b02      	ldr	r3, [pc, #8]	; (80171b4 <free+0xc>)
 80171aa:	4601      	mov	r1, r0
 80171ac:	6818      	ldr	r0, [r3, #0]
 80171ae:	f001 b9c9 	b.w	8018544 <_free_r>
 80171b2:	bf00      	nop
 80171b4:	20000360 	.word	0x20000360

080171b8 <sbrk_aligned>:
 80171b8:	b570      	push	{r4, r5, r6, lr}
 80171ba:	4e0e      	ldr	r6, [pc, #56]	; (80171f4 <sbrk_aligned+0x3c>)
 80171bc:	460c      	mov	r4, r1
 80171be:	6831      	ldr	r1, [r6, #0]
 80171c0:	4605      	mov	r5, r0
 80171c2:	b911      	cbnz	r1, 80171ca <sbrk_aligned+0x12>
 80171c4:	f001 f94a 	bl	801845c <_sbrk_r>
 80171c8:	6030      	str	r0, [r6, #0]
 80171ca:	4621      	mov	r1, r4
 80171cc:	4628      	mov	r0, r5
 80171ce:	f001 f945 	bl	801845c <_sbrk_r>
 80171d2:	1c43      	adds	r3, r0, #1
 80171d4:	d00a      	beq.n	80171ec <sbrk_aligned+0x34>
 80171d6:	1cc4      	adds	r4, r0, #3
 80171d8:	f024 0403 	bic.w	r4, r4, #3
 80171dc:	42a0      	cmp	r0, r4
 80171de:	d007      	beq.n	80171f0 <sbrk_aligned+0x38>
 80171e0:	1a21      	subs	r1, r4, r0
 80171e2:	4628      	mov	r0, r5
 80171e4:	f001 f93a 	bl	801845c <_sbrk_r>
 80171e8:	3001      	adds	r0, #1
 80171ea:	d101      	bne.n	80171f0 <sbrk_aligned+0x38>
 80171ec:	f04f 34ff 	mov.w	r4, #4294967295
 80171f0:	4620      	mov	r0, r4
 80171f2:	bd70      	pop	{r4, r5, r6, pc}
 80171f4:	20008ff4 	.word	0x20008ff4

080171f8 <_malloc_r>:
 80171f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171fc:	1ccd      	adds	r5, r1, #3
 80171fe:	f025 0503 	bic.w	r5, r5, #3
 8017202:	3508      	adds	r5, #8
 8017204:	2d0c      	cmp	r5, #12
 8017206:	bf38      	it	cc
 8017208:	250c      	movcc	r5, #12
 801720a:	2d00      	cmp	r5, #0
 801720c:	4607      	mov	r7, r0
 801720e:	db01      	blt.n	8017214 <_malloc_r+0x1c>
 8017210:	42a9      	cmp	r1, r5
 8017212:	d905      	bls.n	8017220 <_malloc_r+0x28>
 8017214:	230c      	movs	r3, #12
 8017216:	603b      	str	r3, [r7, #0]
 8017218:	2600      	movs	r6, #0
 801721a:	4630      	mov	r0, r6
 801721c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017220:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80172f4 <_malloc_r+0xfc>
 8017224:	f000 f868 	bl	80172f8 <__malloc_lock>
 8017228:	f8d8 3000 	ldr.w	r3, [r8]
 801722c:	461c      	mov	r4, r3
 801722e:	bb5c      	cbnz	r4, 8017288 <_malloc_r+0x90>
 8017230:	4629      	mov	r1, r5
 8017232:	4638      	mov	r0, r7
 8017234:	f7ff ffc0 	bl	80171b8 <sbrk_aligned>
 8017238:	1c43      	adds	r3, r0, #1
 801723a:	4604      	mov	r4, r0
 801723c:	d155      	bne.n	80172ea <_malloc_r+0xf2>
 801723e:	f8d8 4000 	ldr.w	r4, [r8]
 8017242:	4626      	mov	r6, r4
 8017244:	2e00      	cmp	r6, #0
 8017246:	d145      	bne.n	80172d4 <_malloc_r+0xdc>
 8017248:	2c00      	cmp	r4, #0
 801724a:	d048      	beq.n	80172de <_malloc_r+0xe6>
 801724c:	6823      	ldr	r3, [r4, #0]
 801724e:	4631      	mov	r1, r6
 8017250:	4638      	mov	r0, r7
 8017252:	eb04 0903 	add.w	r9, r4, r3
 8017256:	f001 f901 	bl	801845c <_sbrk_r>
 801725a:	4581      	cmp	r9, r0
 801725c:	d13f      	bne.n	80172de <_malloc_r+0xe6>
 801725e:	6821      	ldr	r1, [r4, #0]
 8017260:	1a6d      	subs	r5, r5, r1
 8017262:	4629      	mov	r1, r5
 8017264:	4638      	mov	r0, r7
 8017266:	f7ff ffa7 	bl	80171b8 <sbrk_aligned>
 801726a:	3001      	adds	r0, #1
 801726c:	d037      	beq.n	80172de <_malloc_r+0xe6>
 801726e:	6823      	ldr	r3, [r4, #0]
 8017270:	442b      	add	r3, r5
 8017272:	6023      	str	r3, [r4, #0]
 8017274:	f8d8 3000 	ldr.w	r3, [r8]
 8017278:	2b00      	cmp	r3, #0
 801727a:	d038      	beq.n	80172ee <_malloc_r+0xf6>
 801727c:	685a      	ldr	r2, [r3, #4]
 801727e:	42a2      	cmp	r2, r4
 8017280:	d12b      	bne.n	80172da <_malloc_r+0xe2>
 8017282:	2200      	movs	r2, #0
 8017284:	605a      	str	r2, [r3, #4]
 8017286:	e00f      	b.n	80172a8 <_malloc_r+0xb0>
 8017288:	6822      	ldr	r2, [r4, #0]
 801728a:	1b52      	subs	r2, r2, r5
 801728c:	d41f      	bmi.n	80172ce <_malloc_r+0xd6>
 801728e:	2a0b      	cmp	r2, #11
 8017290:	d917      	bls.n	80172c2 <_malloc_r+0xca>
 8017292:	1961      	adds	r1, r4, r5
 8017294:	42a3      	cmp	r3, r4
 8017296:	6025      	str	r5, [r4, #0]
 8017298:	bf18      	it	ne
 801729a:	6059      	strne	r1, [r3, #4]
 801729c:	6863      	ldr	r3, [r4, #4]
 801729e:	bf08      	it	eq
 80172a0:	f8c8 1000 	streq.w	r1, [r8]
 80172a4:	5162      	str	r2, [r4, r5]
 80172a6:	604b      	str	r3, [r1, #4]
 80172a8:	4638      	mov	r0, r7
 80172aa:	f104 060b 	add.w	r6, r4, #11
 80172ae:	f000 f829 	bl	8017304 <__malloc_unlock>
 80172b2:	f026 0607 	bic.w	r6, r6, #7
 80172b6:	1d23      	adds	r3, r4, #4
 80172b8:	1af2      	subs	r2, r6, r3
 80172ba:	d0ae      	beq.n	801721a <_malloc_r+0x22>
 80172bc:	1b9b      	subs	r3, r3, r6
 80172be:	50a3      	str	r3, [r4, r2]
 80172c0:	e7ab      	b.n	801721a <_malloc_r+0x22>
 80172c2:	42a3      	cmp	r3, r4
 80172c4:	6862      	ldr	r2, [r4, #4]
 80172c6:	d1dd      	bne.n	8017284 <_malloc_r+0x8c>
 80172c8:	f8c8 2000 	str.w	r2, [r8]
 80172cc:	e7ec      	b.n	80172a8 <_malloc_r+0xb0>
 80172ce:	4623      	mov	r3, r4
 80172d0:	6864      	ldr	r4, [r4, #4]
 80172d2:	e7ac      	b.n	801722e <_malloc_r+0x36>
 80172d4:	4634      	mov	r4, r6
 80172d6:	6876      	ldr	r6, [r6, #4]
 80172d8:	e7b4      	b.n	8017244 <_malloc_r+0x4c>
 80172da:	4613      	mov	r3, r2
 80172dc:	e7cc      	b.n	8017278 <_malloc_r+0x80>
 80172de:	230c      	movs	r3, #12
 80172e0:	603b      	str	r3, [r7, #0]
 80172e2:	4638      	mov	r0, r7
 80172e4:	f000 f80e 	bl	8017304 <__malloc_unlock>
 80172e8:	e797      	b.n	801721a <_malloc_r+0x22>
 80172ea:	6025      	str	r5, [r4, #0]
 80172ec:	e7dc      	b.n	80172a8 <_malloc_r+0xb0>
 80172ee:	605b      	str	r3, [r3, #4]
 80172f0:	deff      	udf	#255	; 0xff
 80172f2:	bf00      	nop
 80172f4:	20008ff0 	.word	0x20008ff0

080172f8 <__malloc_lock>:
 80172f8:	4801      	ldr	r0, [pc, #4]	; (8017300 <__malloc_lock+0x8>)
 80172fa:	f001 b8fc 	b.w	80184f6 <__retarget_lock_acquire_recursive>
 80172fe:	bf00      	nop
 8017300:	20009138 	.word	0x20009138

08017304 <__malloc_unlock>:
 8017304:	4801      	ldr	r0, [pc, #4]	; (801730c <__malloc_unlock+0x8>)
 8017306:	f001 b8f7 	b.w	80184f8 <__retarget_lock_release_recursive>
 801730a:	bf00      	nop
 801730c:	20009138 	.word	0x20009138

08017310 <sulp>:
 8017310:	b570      	push	{r4, r5, r6, lr}
 8017312:	4604      	mov	r4, r0
 8017314:	460d      	mov	r5, r1
 8017316:	ec45 4b10 	vmov	d0, r4, r5
 801731a:	4616      	mov	r6, r2
 801731c:	f002 f834 	bl	8019388 <__ulp>
 8017320:	ec51 0b10 	vmov	r0, r1, d0
 8017324:	b17e      	cbz	r6, 8017346 <sulp+0x36>
 8017326:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801732a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801732e:	2b00      	cmp	r3, #0
 8017330:	dd09      	ble.n	8017346 <sulp+0x36>
 8017332:	051b      	lsls	r3, r3, #20
 8017334:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017338:	2400      	movs	r4, #0
 801733a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801733e:	4622      	mov	r2, r4
 8017340:	462b      	mov	r3, r5
 8017342:	f7e9 f969 	bl	8000618 <__aeabi_dmul>
 8017346:	bd70      	pop	{r4, r5, r6, pc}

08017348 <_strtod_l>:
 8017348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801734c:	ed2d 8b02 	vpush	{d8}
 8017350:	b09b      	sub	sp, #108	; 0x6c
 8017352:	4604      	mov	r4, r0
 8017354:	9213      	str	r2, [sp, #76]	; 0x4c
 8017356:	2200      	movs	r2, #0
 8017358:	9216      	str	r2, [sp, #88]	; 0x58
 801735a:	460d      	mov	r5, r1
 801735c:	f04f 0800 	mov.w	r8, #0
 8017360:	f04f 0900 	mov.w	r9, #0
 8017364:	460a      	mov	r2, r1
 8017366:	9215      	str	r2, [sp, #84]	; 0x54
 8017368:	7811      	ldrb	r1, [r2, #0]
 801736a:	292b      	cmp	r1, #43	; 0x2b
 801736c:	d04c      	beq.n	8017408 <_strtod_l+0xc0>
 801736e:	d83a      	bhi.n	80173e6 <_strtod_l+0x9e>
 8017370:	290d      	cmp	r1, #13
 8017372:	d834      	bhi.n	80173de <_strtod_l+0x96>
 8017374:	2908      	cmp	r1, #8
 8017376:	d834      	bhi.n	80173e2 <_strtod_l+0x9a>
 8017378:	2900      	cmp	r1, #0
 801737a:	d03d      	beq.n	80173f8 <_strtod_l+0xb0>
 801737c:	2200      	movs	r2, #0
 801737e:	920a      	str	r2, [sp, #40]	; 0x28
 8017380:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8017382:	7832      	ldrb	r2, [r6, #0]
 8017384:	2a30      	cmp	r2, #48	; 0x30
 8017386:	f040 80b4 	bne.w	80174f2 <_strtod_l+0x1aa>
 801738a:	7872      	ldrb	r2, [r6, #1]
 801738c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8017390:	2a58      	cmp	r2, #88	; 0x58
 8017392:	d170      	bne.n	8017476 <_strtod_l+0x12e>
 8017394:	9302      	str	r3, [sp, #8]
 8017396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017398:	9301      	str	r3, [sp, #4]
 801739a:	ab16      	add	r3, sp, #88	; 0x58
 801739c:	9300      	str	r3, [sp, #0]
 801739e:	4a8e      	ldr	r2, [pc, #568]	; (80175d8 <_strtod_l+0x290>)
 80173a0:	ab17      	add	r3, sp, #92	; 0x5c
 80173a2:	a915      	add	r1, sp, #84	; 0x54
 80173a4:	4620      	mov	r0, r4
 80173a6:	f001 f981 	bl	80186ac <__gethex>
 80173aa:	f010 070f 	ands.w	r7, r0, #15
 80173ae:	4605      	mov	r5, r0
 80173b0:	d005      	beq.n	80173be <_strtod_l+0x76>
 80173b2:	2f06      	cmp	r7, #6
 80173b4:	d12a      	bne.n	801740c <_strtod_l+0xc4>
 80173b6:	3601      	adds	r6, #1
 80173b8:	2300      	movs	r3, #0
 80173ba:	9615      	str	r6, [sp, #84]	; 0x54
 80173bc:	930a      	str	r3, [sp, #40]	; 0x28
 80173be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	f040 857f 	bne.w	8017ec4 <_strtod_l+0xb7c>
 80173c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173c8:	b1db      	cbz	r3, 8017402 <_strtod_l+0xba>
 80173ca:	4642      	mov	r2, r8
 80173cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80173d0:	ec43 2b10 	vmov	d0, r2, r3
 80173d4:	b01b      	add	sp, #108	; 0x6c
 80173d6:	ecbd 8b02 	vpop	{d8}
 80173da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173de:	2920      	cmp	r1, #32
 80173e0:	d1cc      	bne.n	801737c <_strtod_l+0x34>
 80173e2:	3201      	adds	r2, #1
 80173e4:	e7bf      	b.n	8017366 <_strtod_l+0x1e>
 80173e6:	292d      	cmp	r1, #45	; 0x2d
 80173e8:	d1c8      	bne.n	801737c <_strtod_l+0x34>
 80173ea:	2101      	movs	r1, #1
 80173ec:	910a      	str	r1, [sp, #40]	; 0x28
 80173ee:	1c51      	adds	r1, r2, #1
 80173f0:	9115      	str	r1, [sp, #84]	; 0x54
 80173f2:	7852      	ldrb	r2, [r2, #1]
 80173f4:	2a00      	cmp	r2, #0
 80173f6:	d1c3      	bne.n	8017380 <_strtod_l+0x38>
 80173f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80173fa:	9515      	str	r5, [sp, #84]	; 0x54
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	f040 855f 	bne.w	8017ec0 <_strtod_l+0xb78>
 8017402:	4642      	mov	r2, r8
 8017404:	464b      	mov	r3, r9
 8017406:	e7e3      	b.n	80173d0 <_strtod_l+0x88>
 8017408:	2100      	movs	r1, #0
 801740a:	e7ef      	b.n	80173ec <_strtod_l+0xa4>
 801740c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801740e:	b13a      	cbz	r2, 8017420 <_strtod_l+0xd8>
 8017410:	2135      	movs	r1, #53	; 0x35
 8017412:	a818      	add	r0, sp, #96	; 0x60
 8017414:	f002 f8b5 	bl	8019582 <__copybits>
 8017418:	9916      	ldr	r1, [sp, #88]	; 0x58
 801741a:	4620      	mov	r0, r4
 801741c:	f001 fc88 	bl	8018d30 <_Bfree>
 8017420:	3f01      	subs	r7, #1
 8017422:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017424:	2f04      	cmp	r7, #4
 8017426:	d806      	bhi.n	8017436 <_strtod_l+0xee>
 8017428:	e8df f007 	tbb	[pc, r7]
 801742c:	201d0314 	.word	0x201d0314
 8017430:	14          	.byte	0x14
 8017431:	00          	.byte	0x00
 8017432:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8017436:	05e9      	lsls	r1, r5, #23
 8017438:	bf48      	it	mi
 801743a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801743e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017442:	0d1b      	lsrs	r3, r3, #20
 8017444:	051b      	lsls	r3, r3, #20
 8017446:	2b00      	cmp	r3, #0
 8017448:	d1b9      	bne.n	80173be <_strtod_l+0x76>
 801744a:	f001 f829 	bl	80184a0 <__errno>
 801744e:	2322      	movs	r3, #34	; 0x22
 8017450:	6003      	str	r3, [r0, #0]
 8017452:	e7b4      	b.n	80173be <_strtod_l+0x76>
 8017454:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8017458:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801745c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017460:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8017464:	e7e7      	b.n	8017436 <_strtod_l+0xee>
 8017466:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80175e0 <_strtod_l+0x298>
 801746a:	e7e4      	b.n	8017436 <_strtod_l+0xee>
 801746c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8017470:	f04f 38ff 	mov.w	r8, #4294967295
 8017474:	e7df      	b.n	8017436 <_strtod_l+0xee>
 8017476:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017478:	1c5a      	adds	r2, r3, #1
 801747a:	9215      	str	r2, [sp, #84]	; 0x54
 801747c:	785b      	ldrb	r3, [r3, #1]
 801747e:	2b30      	cmp	r3, #48	; 0x30
 8017480:	d0f9      	beq.n	8017476 <_strtod_l+0x12e>
 8017482:	2b00      	cmp	r3, #0
 8017484:	d09b      	beq.n	80173be <_strtod_l+0x76>
 8017486:	2301      	movs	r3, #1
 8017488:	f04f 0a00 	mov.w	sl, #0
 801748c:	9304      	str	r3, [sp, #16]
 801748e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017490:	930b      	str	r3, [sp, #44]	; 0x2c
 8017492:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017496:	46d3      	mov	fp, sl
 8017498:	220a      	movs	r2, #10
 801749a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801749c:	7806      	ldrb	r6, [r0, #0]
 801749e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80174a2:	b2d9      	uxtb	r1, r3
 80174a4:	2909      	cmp	r1, #9
 80174a6:	d926      	bls.n	80174f6 <_strtod_l+0x1ae>
 80174a8:	494c      	ldr	r1, [pc, #304]	; (80175dc <_strtod_l+0x294>)
 80174aa:	2201      	movs	r2, #1
 80174ac:	f000 ff64 	bl	8018378 <strncmp>
 80174b0:	2800      	cmp	r0, #0
 80174b2:	d030      	beq.n	8017516 <_strtod_l+0x1ce>
 80174b4:	2000      	movs	r0, #0
 80174b6:	4632      	mov	r2, r6
 80174b8:	9005      	str	r0, [sp, #20]
 80174ba:	465e      	mov	r6, fp
 80174bc:	4603      	mov	r3, r0
 80174be:	2a65      	cmp	r2, #101	; 0x65
 80174c0:	d001      	beq.n	80174c6 <_strtod_l+0x17e>
 80174c2:	2a45      	cmp	r2, #69	; 0x45
 80174c4:	d113      	bne.n	80174ee <_strtod_l+0x1a6>
 80174c6:	b91e      	cbnz	r6, 80174d0 <_strtod_l+0x188>
 80174c8:	9a04      	ldr	r2, [sp, #16]
 80174ca:	4302      	orrs	r2, r0
 80174cc:	d094      	beq.n	80173f8 <_strtod_l+0xb0>
 80174ce:	2600      	movs	r6, #0
 80174d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80174d2:	1c6a      	adds	r2, r5, #1
 80174d4:	9215      	str	r2, [sp, #84]	; 0x54
 80174d6:	786a      	ldrb	r2, [r5, #1]
 80174d8:	2a2b      	cmp	r2, #43	; 0x2b
 80174da:	d074      	beq.n	80175c6 <_strtod_l+0x27e>
 80174dc:	2a2d      	cmp	r2, #45	; 0x2d
 80174de:	d078      	beq.n	80175d2 <_strtod_l+0x28a>
 80174e0:	f04f 0c00 	mov.w	ip, #0
 80174e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80174e8:	2909      	cmp	r1, #9
 80174ea:	d97f      	bls.n	80175ec <_strtod_l+0x2a4>
 80174ec:	9515      	str	r5, [sp, #84]	; 0x54
 80174ee:	2700      	movs	r7, #0
 80174f0:	e09e      	b.n	8017630 <_strtod_l+0x2e8>
 80174f2:	2300      	movs	r3, #0
 80174f4:	e7c8      	b.n	8017488 <_strtod_l+0x140>
 80174f6:	f1bb 0f08 	cmp.w	fp, #8
 80174fa:	bfd8      	it	le
 80174fc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80174fe:	f100 0001 	add.w	r0, r0, #1
 8017502:	bfda      	itte	le
 8017504:	fb02 3301 	mlale	r3, r2, r1, r3
 8017508:	9309      	strle	r3, [sp, #36]	; 0x24
 801750a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801750e:	f10b 0b01 	add.w	fp, fp, #1
 8017512:	9015      	str	r0, [sp, #84]	; 0x54
 8017514:	e7c1      	b.n	801749a <_strtod_l+0x152>
 8017516:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017518:	1c5a      	adds	r2, r3, #1
 801751a:	9215      	str	r2, [sp, #84]	; 0x54
 801751c:	785a      	ldrb	r2, [r3, #1]
 801751e:	f1bb 0f00 	cmp.w	fp, #0
 8017522:	d037      	beq.n	8017594 <_strtod_l+0x24c>
 8017524:	9005      	str	r0, [sp, #20]
 8017526:	465e      	mov	r6, fp
 8017528:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801752c:	2b09      	cmp	r3, #9
 801752e:	d912      	bls.n	8017556 <_strtod_l+0x20e>
 8017530:	2301      	movs	r3, #1
 8017532:	e7c4      	b.n	80174be <_strtod_l+0x176>
 8017534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017536:	1c5a      	adds	r2, r3, #1
 8017538:	9215      	str	r2, [sp, #84]	; 0x54
 801753a:	785a      	ldrb	r2, [r3, #1]
 801753c:	3001      	adds	r0, #1
 801753e:	2a30      	cmp	r2, #48	; 0x30
 8017540:	d0f8      	beq.n	8017534 <_strtod_l+0x1ec>
 8017542:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8017546:	2b08      	cmp	r3, #8
 8017548:	f200 84c1 	bhi.w	8017ece <_strtod_l+0xb86>
 801754c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801754e:	9005      	str	r0, [sp, #20]
 8017550:	2000      	movs	r0, #0
 8017552:	930b      	str	r3, [sp, #44]	; 0x2c
 8017554:	4606      	mov	r6, r0
 8017556:	3a30      	subs	r2, #48	; 0x30
 8017558:	f100 0301 	add.w	r3, r0, #1
 801755c:	d014      	beq.n	8017588 <_strtod_l+0x240>
 801755e:	9905      	ldr	r1, [sp, #20]
 8017560:	4419      	add	r1, r3
 8017562:	9105      	str	r1, [sp, #20]
 8017564:	4633      	mov	r3, r6
 8017566:	eb00 0c06 	add.w	ip, r0, r6
 801756a:	210a      	movs	r1, #10
 801756c:	4563      	cmp	r3, ip
 801756e:	d113      	bne.n	8017598 <_strtod_l+0x250>
 8017570:	1833      	adds	r3, r6, r0
 8017572:	2b08      	cmp	r3, #8
 8017574:	f106 0601 	add.w	r6, r6, #1
 8017578:	4406      	add	r6, r0
 801757a:	dc1a      	bgt.n	80175b2 <_strtod_l+0x26a>
 801757c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801757e:	230a      	movs	r3, #10
 8017580:	fb03 2301 	mla	r3, r3, r1, r2
 8017584:	9309      	str	r3, [sp, #36]	; 0x24
 8017586:	2300      	movs	r3, #0
 8017588:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801758a:	1c51      	adds	r1, r2, #1
 801758c:	9115      	str	r1, [sp, #84]	; 0x54
 801758e:	7852      	ldrb	r2, [r2, #1]
 8017590:	4618      	mov	r0, r3
 8017592:	e7c9      	b.n	8017528 <_strtod_l+0x1e0>
 8017594:	4658      	mov	r0, fp
 8017596:	e7d2      	b.n	801753e <_strtod_l+0x1f6>
 8017598:	2b08      	cmp	r3, #8
 801759a:	f103 0301 	add.w	r3, r3, #1
 801759e:	dc03      	bgt.n	80175a8 <_strtod_l+0x260>
 80175a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80175a2:	434f      	muls	r7, r1
 80175a4:	9709      	str	r7, [sp, #36]	; 0x24
 80175a6:	e7e1      	b.n	801756c <_strtod_l+0x224>
 80175a8:	2b10      	cmp	r3, #16
 80175aa:	bfd8      	it	le
 80175ac:	fb01 fa0a 	mulle.w	sl, r1, sl
 80175b0:	e7dc      	b.n	801756c <_strtod_l+0x224>
 80175b2:	2e10      	cmp	r6, #16
 80175b4:	bfdc      	itt	le
 80175b6:	230a      	movle	r3, #10
 80175b8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80175bc:	e7e3      	b.n	8017586 <_strtod_l+0x23e>
 80175be:	2300      	movs	r3, #0
 80175c0:	9305      	str	r3, [sp, #20]
 80175c2:	2301      	movs	r3, #1
 80175c4:	e780      	b.n	80174c8 <_strtod_l+0x180>
 80175c6:	f04f 0c00 	mov.w	ip, #0
 80175ca:	1caa      	adds	r2, r5, #2
 80175cc:	9215      	str	r2, [sp, #84]	; 0x54
 80175ce:	78aa      	ldrb	r2, [r5, #2]
 80175d0:	e788      	b.n	80174e4 <_strtod_l+0x19c>
 80175d2:	f04f 0c01 	mov.w	ip, #1
 80175d6:	e7f8      	b.n	80175ca <_strtod_l+0x282>
 80175d8:	08027078 	.word	0x08027078
 80175dc:	08027068 	.word	0x08027068
 80175e0:	7ff00000 	.word	0x7ff00000
 80175e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80175e6:	1c51      	adds	r1, r2, #1
 80175e8:	9115      	str	r1, [sp, #84]	; 0x54
 80175ea:	7852      	ldrb	r2, [r2, #1]
 80175ec:	2a30      	cmp	r2, #48	; 0x30
 80175ee:	d0f9      	beq.n	80175e4 <_strtod_l+0x29c>
 80175f0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80175f4:	2908      	cmp	r1, #8
 80175f6:	f63f af7a 	bhi.w	80174ee <_strtod_l+0x1a6>
 80175fa:	3a30      	subs	r2, #48	; 0x30
 80175fc:	9208      	str	r2, [sp, #32]
 80175fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017600:	920c      	str	r2, [sp, #48]	; 0x30
 8017602:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017604:	1c57      	adds	r7, r2, #1
 8017606:	9715      	str	r7, [sp, #84]	; 0x54
 8017608:	7852      	ldrb	r2, [r2, #1]
 801760a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801760e:	f1be 0f09 	cmp.w	lr, #9
 8017612:	d938      	bls.n	8017686 <_strtod_l+0x33e>
 8017614:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017616:	1a7f      	subs	r7, r7, r1
 8017618:	2f08      	cmp	r7, #8
 801761a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801761e:	dc03      	bgt.n	8017628 <_strtod_l+0x2e0>
 8017620:	9908      	ldr	r1, [sp, #32]
 8017622:	428f      	cmp	r7, r1
 8017624:	bfa8      	it	ge
 8017626:	460f      	movge	r7, r1
 8017628:	f1bc 0f00 	cmp.w	ip, #0
 801762c:	d000      	beq.n	8017630 <_strtod_l+0x2e8>
 801762e:	427f      	negs	r7, r7
 8017630:	2e00      	cmp	r6, #0
 8017632:	d14f      	bne.n	80176d4 <_strtod_l+0x38c>
 8017634:	9904      	ldr	r1, [sp, #16]
 8017636:	4301      	orrs	r1, r0
 8017638:	f47f aec1 	bne.w	80173be <_strtod_l+0x76>
 801763c:	2b00      	cmp	r3, #0
 801763e:	f47f aedb 	bne.w	80173f8 <_strtod_l+0xb0>
 8017642:	2a69      	cmp	r2, #105	; 0x69
 8017644:	d029      	beq.n	801769a <_strtod_l+0x352>
 8017646:	dc26      	bgt.n	8017696 <_strtod_l+0x34e>
 8017648:	2a49      	cmp	r2, #73	; 0x49
 801764a:	d026      	beq.n	801769a <_strtod_l+0x352>
 801764c:	2a4e      	cmp	r2, #78	; 0x4e
 801764e:	f47f aed3 	bne.w	80173f8 <_strtod_l+0xb0>
 8017652:	499b      	ldr	r1, [pc, #620]	; (80178c0 <_strtod_l+0x578>)
 8017654:	a815      	add	r0, sp, #84	; 0x54
 8017656:	f001 fa69 	bl	8018b2c <__match>
 801765a:	2800      	cmp	r0, #0
 801765c:	f43f aecc 	beq.w	80173f8 <_strtod_l+0xb0>
 8017660:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017662:	781b      	ldrb	r3, [r3, #0]
 8017664:	2b28      	cmp	r3, #40	; 0x28
 8017666:	d12f      	bne.n	80176c8 <_strtod_l+0x380>
 8017668:	4996      	ldr	r1, [pc, #600]	; (80178c4 <_strtod_l+0x57c>)
 801766a:	aa18      	add	r2, sp, #96	; 0x60
 801766c:	a815      	add	r0, sp, #84	; 0x54
 801766e:	f001 fa71 	bl	8018b54 <__hexnan>
 8017672:	2805      	cmp	r0, #5
 8017674:	d128      	bne.n	80176c8 <_strtod_l+0x380>
 8017676:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017678:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801767c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8017680:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8017684:	e69b      	b.n	80173be <_strtod_l+0x76>
 8017686:	9f08      	ldr	r7, [sp, #32]
 8017688:	210a      	movs	r1, #10
 801768a:	fb01 2107 	mla	r1, r1, r7, r2
 801768e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8017692:	9208      	str	r2, [sp, #32]
 8017694:	e7b5      	b.n	8017602 <_strtod_l+0x2ba>
 8017696:	2a6e      	cmp	r2, #110	; 0x6e
 8017698:	e7d9      	b.n	801764e <_strtod_l+0x306>
 801769a:	498b      	ldr	r1, [pc, #556]	; (80178c8 <_strtod_l+0x580>)
 801769c:	a815      	add	r0, sp, #84	; 0x54
 801769e:	f001 fa45 	bl	8018b2c <__match>
 80176a2:	2800      	cmp	r0, #0
 80176a4:	f43f aea8 	beq.w	80173f8 <_strtod_l+0xb0>
 80176a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80176aa:	4988      	ldr	r1, [pc, #544]	; (80178cc <_strtod_l+0x584>)
 80176ac:	3b01      	subs	r3, #1
 80176ae:	a815      	add	r0, sp, #84	; 0x54
 80176b0:	9315      	str	r3, [sp, #84]	; 0x54
 80176b2:	f001 fa3b 	bl	8018b2c <__match>
 80176b6:	b910      	cbnz	r0, 80176be <_strtod_l+0x376>
 80176b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80176ba:	3301      	adds	r3, #1
 80176bc:	9315      	str	r3, [sp, #84]	; 0x54
 80176be:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80178dc <_strtod_l+0x594>
 80176c2:	f04f 0800 	mov.w	r8, #0
 80176c6:	e67a      	b.n	80173be <_strtod_l+0x76>
 80176c8:	4881      	ldr	r0, [pc, #516]	; (80178d0 <_strtod_l+0x588>)
 80176ca:	f000 ff2d 	bl	8018528 <nan>
 80176ce:	ec59 8b10 	vmov	r8, r9, d0
 80176d2:	e674      	b.n	80173be <_strtod_l+0x76>
 80176d4:	9b05      	ldr	r3, [sp, #20]
 80176d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80176d8:	1afb      	subs	r3, r7, r3
 80176da:	f1bb 0f00 	cmp.w	fp, #0
 80176de:	bf08      	it	eq
 80176e0:	46b3      	moveq	fp, r6
 80176e2:	2e10      	cmp	r6, #16
 80176e4:	9308      	str	r3, [sp, #32]
 80176e6:	4635      	mov	r5, r6
 80176e8:	bfa8      	it	ge
 80176ea:	2510      	movge	r5, #16
 80176ec:	f7e8 ff1a 	bl	8000524 <__aeabi_ui2d>
 80176f0:	2e09      	cmp	r6, #9
 80176f2:	4680      	mov	r8, r0
 80176f4:	4689      	mov	r9, r1
 80176f6:	dd13      	ble.n	8017720 <_strtod_l+0x3d8>
 80176f8:	4b76      	ldr	r3, [pc, #472]	; (80178d4 <_strtod_l+0x58c>)
 80176fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80176fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8017702:	f7e8 ff89 	bl	8000618 <__aeabi_dmul>
 8017706:	4680      	mov	r8, r0
 8017708:	4650      	mov	r0, sl
 801770a:	4689      	mov	r9, r1
 801770c:	f7e8 ff0a 	bl	8000524 <__aeabi_ui2d>
 8017710:	4602      	mov	r2, r0
 8017712:	460b      	mov	r3, r1
 8017714:	4640      	mov	r0, r8
 8017716:	4649      	mov	r1, r9
 8017718:	f7e8 fdc8 	bl	80002ac <__adddf3>
 801771c:	4680      	mov	r8, r0
 801771e:	4689      	mov	r9, r1
 8017720:	2e0f      	cmp	r6, #15
 8017722:	dc38      	bgt.n	8017796 <_strtod_l+0x44e>
 8017724:	9b08      	ldr	r3, [sp, #32]
 8017726:	2b00      	cmp	r3, #0
 8017728:	f43f ae49 	beq.w	80173be <_strtod_l+0x76>
 801772c:	dd24      	ble.n	8017778 <_strtod_l+0x430>
 801772e:	2b16      	cmp	r3, #22
 8017730:	dc0b      	bgt.n	801774a <_strtod_l+0x402>
 8017732:	4968      	ldr	r1, [pc, #416]	; (80178d4 <_strtod_l+0x58c>)
 8017734:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017738:	e9d1 0100 	ldrd	r0, r1, [r1]
 801773c:	4642      	mov	r2, r8
 801773e:	464b      	mov	r3, r9
 8017740:	f7e8 ff6a 	bl	8000618 <__aeabi_dmul>
 8017744:	4680      	mov	r8, r0
 8017746:	4689      	mov	r9, r1
 8017748:	e639      	b.n	80173be <_strtod_l+0x76>
 801774a:	9a08      	ldr	r2, [sp, #32]
 801774c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8017750:	4293      	cmp	r3, r2
 8017752:	db20      	blt.n	8017796 <_strtod_l+0x44e>
 8017754:	4c5f      	ldr	r4, [pc, #380]	; (80178d4 <_strtod_l+0x58c>)
 8017756:	f1c6 060f 	rsb	r6, r6, #15
 801775a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801775e:	4642      	mov	r2, r8
 8017760:	464b      	mov	r3, r9
 8017762:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017766:	f7e8 ff57 	bl	8000618 <__aeabi_dmul>
 801776a:	9b08      	ldr	r3, [sp, #32]
 801776c:	1b9e      	subs	r6, r3, r6
 801776e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8017772:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017776:	e7e3      	b.n	8017740 <_strtod_l+0x3f8>
 8017778:	9b08      	ldr	r3, [sp, #32]
 801777a:	3316      	adds	r3, #22
 801777c:	db0b      	blt.n	8017796 <_strtod_l+0x44e>
 801777e:	9b05      	ldr	r3, [sp, #20]
 8017780:	1bdf      	subs	r7, r3, r7
 8017782:	4b54      	ldr	r3, [pc, #336]	; (80178d4 <_strtod_l+0x58c>)
 8017784:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8017788:	e9d7 2300 	ldrd	r2, r3, [r7]
 801778c:	4640      	mov	r0, r8
 801778e:	4649      	mov	r1, r9
 8017790:	f7e9 f86c 	bl	800086c <__aeabi_ddiv>
 8017794:	e7d6      	b.n	8017744 <_strtod_l+0x3fc>
 8017796:	9b08      	ldr	r3, [sp, #32]
 8017798:	1b75      	subs	r5, r6, r5
 801779a:	441d      	add	r5, r3
 801779c:	2d00      	cmp	r5, #0
 801779e:	dd70      	ble.n	8017882 <_strtod_l+0x53a>
 80177a0:	f015 030f 	ands.w	r3, r5, #15
 80177a4:	d00a      	beq.n	80177bc <_strtod_l+0x474>
 80177a6:	494b      	ldr	r1, [pc, #300]	; (80178d4 <_strtod_l+0x58c>)
 80177a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80177ac:	4642      	mov	r2, r8
 80177ae:	464b      	mov	r3, r9
 80177b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80177b4:	f7e8 ff30 	bl	8000618 <__aeabi_dmul>
 80177b8:	4680      	mov	r8, r0
 80177ba:	4689      	mov	r9, r1
 80177bc:	f035 050f 	bics.w	r5, r5, #15
 80177c0:	d04d      	beq.n	801785e <_strtod_l+0x516>
 80177c2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80177c6:	dd22      	ble.n	801780e <_strtod_l+0x4c6>
 80177c8:	2500      	movs	r5, #0
 80177ca:	46ab      	mov	fp, r5
 80177cc:	9509      	str	r5, [sp, #36]	; 0x24
 80177ce:	9505      	str	r5, [sp, #20]
 80177d0:	2322      	movs	r3, #34	; 0x22
 80177d2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80178dc <_strtod_l+0x594>
 80177d6:	6023      	str	r3, [r4, #0]
 80177d8:	f04f 0800 	mov.w	r8, #0
 80177dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177de:	2b00      	cmp	r3, #0
 80177e0:	f43f aded 	beq.w	80173be <_strtod_l+0x76>
 80177e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80177e6:	4620      	mov	r0, r4
 80177e8:	f001 faa2 	bl	8018d30 <_Bfree>
 80177ec:	9905      	ldr	r1, [sp, #20]
 80177ee:	4620      	mov	r0, r4
 80177f0:	f001 fa9e 	bl	8018d30 <_Bfree>
 80177f4:	4659      	mov	r1, fp
 80177f6:	4620      	mov	r0, r4
 80177f8:	f001 fa9a 	bl	8018d30 <_Bfree>
 80177fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80177fe:	4620      	mov	r0, r4
 8017800:	f001 fa96 	bl	8018d30 <_Bfree>
 8017804:	4629      	mov	r1, r5
 8017806:	4620      	mov	r0, r4
 8017808:	f001 fa92 	bl	8018d30 <_Bfree>
 801780c:	e5d7      	b.n	80173be <_strtod_l+0x76>
 801780e:	4b32      	ldr	r3, [pc, #200]	; (80178d8 <_strtod_l+0x590>)
 8017810:	9304      	str	r3, [sp, #16]
 8017812:	2300      	movs	r3, #0
 8017814:	112d      	asrs	r5, r5, #4
 8017816:	4640      	mov	r0, r8
 8017818:	4649      	mov	r1, r9
 801781a:	469a      	mov	sl, r3
 801781c:	2d01      	cmp	r5, #1
 801781e:	dc21      	bgt.n	8017864 <_strtod_l+0x51c>
 8017820:	b10b      	cbz	r3, 8017826 <_strtod_l+0x4de>
 8017822:	4680      	mov	r8, r0
 8017824:	4689      	mov	r9, r1
 8017826:	492c      	ldr	r1, [pc, #176]	; (80178d8 <_strtod_l+0x590>)
 8017828:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801782c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017830:	4642      	mov	r2, r8
 8017832:	464b      	mov	r3, r9
 8017834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017838:	f7e8 feee 	bl	8000618 <__aeabi_dmul>
 801783c:	4b27      	ldr	r3, [pc, #156]	; (80178dc <_strtod_l+0x594>)
 801783e:	460a      	mov	r2, r1
 8017840:	400b      	ands	r3, r1
 8017842:	4927      	ldr	r1, [pc, #156]	; (80178e0 <_strtod_l+0x598>)
 8017844:	428b      	cmp	r3, r1
 8017846:	4680      	mov	r8, r0
 8017848:	d8be      	bhi.n	80177c8 <_strtod_l+0x480>
 801784a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801784e:	428b      	cmp	r3, r1
 8017850:	bf86      	itte	hi
 8017852:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80178e4 <_strtod_l+0x59c>
 8017856:	f04f 38ff 	movhi.w	r8, #4294967295
 801785a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801785e:	2300      	movs	r3, #0
 8017860:	9304      	str	r3, [sp, #16]
 8017862:	e07b      	b.n	801795c <_strtod_l+0x614>
 8017864:	07ea      	lsls	r2, r5, #31
 8017866:	d505      	bpl.n	8017874 <_strtod_l+0x52c>
 8017868:	9b04      	ldr	r3, [sp, #16]
 801786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801786e:	f7e8 fed3 	bl	8000618 <__aeabi_dmul>
 8017872:	2301      	movs	r3, #1
 8017874:	9a04      	ldr	r2, [sp, #16]
 8017876:	3208      	adds	r2, #8
 8017878:	f10a 0a01 	add.w	sl, sl, #1
 801787c:	106d      	asrs	r5, r5, #1
 801787e:	9204      	str	r2, [sp, #16]
 8017880:	e7cc      	b.n	801781c <_strtod_l+0x4d4>
 8017882:	d0ec      	beq.n	801785e <_strtod_l+0x516>
 8017884:	426d      	negs	r5, r5
 8017886:	f015 020f 	ands.w	r2, r5, #15
 801788a:	d00a      	beq.n	80178a2 <_strtod_l+0x55a>
 801788c:	4b11      	ldr	r3, [pc, #68]	; (80178d4 <_strtod_l+0x58c>)
 801788e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017892:	4640      	mov	r0, r8
 8017894:	4649      	mov	r1, r9
 8017896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801789a:	f7e8 ffe7 	bl	800086c <__aeabi_ddiv>
 801789e:	4680      	mov	r8, r0
 80178a0:	4689      	mov	r9, r1
 80178a2:	112d      	asrs	r5, r5, #4
 80178a4:	d0db      	beq.n	801785e <_strtod_l+0x516>
 80178a6:	2d1f      	cmp	r5, #31
 80178a8:	dd1e      	ble.n	80178e8 <_strtod_l+0x5a0>
 80178aa:	2500      	movs	r5, #0
 80178ac:	46ab      	mov	fp, r5
 80178ae:	9509      	str	r5, [sp, #36]	; 0x24
 80178b0:	9505      	str	r5, [sp, #20]
 80178b2:	2322      	movs	r3, #34	; 0x22
 80178b4:	f04f 0800 	mov.w	r8, #0
 80178b8:	f04f 0900 	mov.w	r9, #0
 80178bc:	6023      	str	r3, [r4, #0]
 80178be:	e78d      	b.n	80177dc <_strtod_l+0x494>
 80178c0:	08027073 	.word	0x08027073
 80178c4:	0802708c 	.word	0x0802708c
 80178c8:	0802706a 	.word	0x0802706a
 80178cc:	0802706d 	.word	0x0802706d
 80178d0:	08027422 	.word	0x08027422
 80178d4:	080272e0 	.word	0x080272e0
 80178d8:	080272b8 	.word	0x080272b8
 80178dc:	7ff00000 	.word	0x7ff00000
 80178e0:	7ca00000 	.word	0x7ca00000
 80178e4:	7fefffff 	.word	0x7fefffff
 80178e8:	f015 0310 	ands.w	r3, r5, #16
 80178ec:	bf18      	it	ne
 80178ee:	236a      	movne	r3, #106	; 0x6a
 80178f0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8017c94 <_strtod_l+0x94c>
 80178f4:	9304      	str	r3, [sp, #16]
 80178f6:	4640      	mov	r0, r8
 80178f8:	4649      	mov	r1, r9
 80178fa:	2300      	movs	r3, #0
 80178fc:	07ea      	lsls	r2, r5, #31
 80178fe:	d504      	bpl.n	801790a <_strtod_l+0x5c2>
 8017900:	e9da 2300 	ldrd	r2, r3, [sl]
 8017904:	f7e8 fe88 	bl	8000618 <__aeabi_dmul>
 8017908:	2301      	movs	r3, #1
 801790a:	106d      	asrs	r5, r5, #1
 801790c:	f10a 0a08 	add.w	sl, sl, #8
 8017910:	d1f4      	bne.n	80178fc <_strtod_l+0x5b4>
 8017912:	b10b      	cbz	r3, 8017918 <_strtod_l+0x5d0>
 8017914:	4680      	mov	r8, r0
 8017916:	4689      	mov	r9, r1
 8017918:	9b04      	ldr	r3, [sp, #16]
 801791a:	b1bb      	cbz	r3, 801794c <_strtod_l+0x604>
 801791c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8017920:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017924:	2b00      	cmp	r3, #0
 8017926:	4649      	mov	r1, r9
 8017928:	dd10      	ble.n	801794c <_strtod_l+0x604>
 801792a:	2b1f      	cmp	r3, #31
 801792c:	f340 811e 	ble.w	8017b6c <_strtod_l+0x824>
 8017930:	2b34      	cmp	r3, #52	; 0x34
 8017932:	bfde      	ittt	le
 8017934:	f04f 33ff 	movle.w	r3, #4294967295
 8017938:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801793c:	4093      	lslle	r3, r2
 801793e:	f04f 0800 	mov.w	r8, #0
 8017942:	bfcc      	ite	gt
 8017944:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8017948:	ea03 0901 	andle.w	r9, r3, r1
 801794c:	2200      	movs	r2, #0
 801794e:	2300      	movs	r3, #0
 8017950:	4640      	mov	r0, r8
 8017952:	4649      	mov	r1, r9
 8017954:	f7e9 f8c8 	bl	8000ae8 <__aeabi_dcmpeq>
 8017958:	2800      	cmp	r0, #0
 801795a:	d1a6      	bne.n	80178aa <_strtod_l+0x562>
 801795c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801795e:	9300      	str	r3, [sp, #0]
 8017960:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017962:	4633      	mov	r3, r6
 8017964:	465a      	mov	r2, fp
 8017966:	4620      	mov	r0, r4
 8017968:	f001 fa4a 	bl	8018e00 <__s2b>
 801796c:	9009      	str	r0, [sp, #36]	; 0x24
 801796e:	2800      	cmp	r0, #0
 8017970:	f43f af2a 	beq.w	80177c8 <_strtod_l+0x480>
 8017974:	9a08      	ldr	r2, [sp, #32]
 8017976:	9b05      	ldr	r3, [sp, #20]
 8017978:	2a00      	cmp	r2, #0
 801797a:	eba3 0307 	sub.w	r3, r3, r7
 801797e:	bfa8      	it	ge
 8017980:	2300      	movge	r3, #0
 8017982:	930c      	str	r3, [sp, #48]	; 0x30
 8017984:	2500      	movs	r5, #0
 8017986:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801798a:	9312      	str	r3, [sp, #72]	; 0x48
 801798c:	46ab      	mov	fp, r5
 801798e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017990:	4620      	mov	r0, r4
 8017992:	6859      	ldr	r1, [r3, #4]
 8017994:	f001 f98c 	bl	8018cb0 <_Balloc>
 8017998:	9005      	str	r0, [sp, #20]
 801799a:	2800      	cmp	r0, #0
 801799c:	f43f af18 	beq.w	80177d0 <_strtod_l+0x488>
 80179a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179a2:	691a      	ldr	r2, [r3, #16]
 80179a4:	3202      	adds	r2, #2
 80179a6:	f103 010c 	add.w	r1, r3, #12
 80179aa:	0092      	lsls	r2, r2, #2
 80179ac:	300c      	adds	r0, #12
 80179ae:	f000 fdac 	bl	801850a <memcpy>
 80179b2:	ec49 8b10 	vmov	d0, r8, r9
 80179b6:	aa18      	add	r2, sp, #96	; 0x60
 80179b8:	a917      	add	r1, sp, #92	; 0x5c
 80179ba:	4620      	mov	r0, r4
 80179bc:	f001 fd54 	bl	8019468 <__d2b>
 80179c0:	ec49 8b18 	vmov	d8, r8, r9
 80179c4:	9016      	str	r0, [sp, #88]	; 0x58
 80179c6:	2800      	cmp	r0, #0
 80179c8:	f43f af02 	beq.w	80177d0 <_strtod_l+0x488>
 80179cc:	2101      	movs	r1, #1
 80179ce:	4620      	mov	r0, r4
 80179d0:	f001 faae 	bl	8018f30 <__i2b>
 80179d4:	4683      	mov	fp, r0
 80179d6:	2800      	cmp	r0, #0
 80179d8:	f43f aefa 	beq.w	80177d0 <_strtod_l+0x488>
 80179dc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80179de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80179e0:	2e00      	cmp	r6, #0
 80179e2:	bfab      	itete	ge
 80179e4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80179e6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80179e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80179ea:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80179ee:	bfac      	ite	ge
 80179f0:	eb06 0a03 	addge.w	sl, r6, r3
 80179f4:	1b9f      	sublt	r7, r3, r6
 80179f6:	9b04      	ldr	r3, [sp, #16]
 80179f8:	1af6      	subs	r6, r6, r3
 80179fa:	4416      	add	r6, r2
 80179fc:	4ba0      	ldr	r3, [pc, #640]	; (8017c80 <_strtod_l+0x938>)
 80179fe:	3e01      	subs	r6, #1
 8017a00:	429e      	cmp	r6, r3
 8017a02:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017a06:	f280 80c4 	bge.w	8017b92 <_strtod_l+0x84a>
 8017a0a:	1b9b      	subs	r3, r3, r6
 8017a0c:	2b1f      	cmp	r3, #31
 8017a0e:	eba2 0203 	sub.w	r2, r2, r3
 8017a12:	f04f 0101 	mov.w	r1, #1
 8017a16:	f300 80b0 	bgt.w	8017b7a <_strtod_l+0x832>
 8017a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8017a1e:	930e      	str	r3, [sp, #56]	; 0x38
 8017a20:	2300      	movs	r3, #0
 8017a22:	930d      	str	r3, [sp, #52]	; 0x34
 8017a24:	eb0a 0602 	add.w	r6, sl, r2
 8017a28:	9b04      	ldr	r3, [sp, #16]
 8017a2a:	45b2      	cmp	sl, r6
 8017a2c:	4417      	add	r7, r2
 8017a2e:	441f      	add	r7, r3
 8017a30:	4653      	mov	r3, sl
 8017a32:	bfa8      	it	ge
 8017a34:	4633      	movge	r3, r6
 8017a36:	42bb      	cmp	r3, r7
 8017a38:	bfa8      	it	ge
 8017a3a:	463b      	movge	r3, r7
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	bfc2      	ittt	gt
 8017a40:	1af6      	subgt	r6, r6, r3
 8017a42:	1aff      	subgt	r7, r7, r3
 8017a44:	ebaa 0a03 	subgt.w	sl, sl, r3
 8017a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	dd17      	ble.n	8017a7e <_strtod_l+0x736>
 8017a4e:	4659      	mov	r1, fp
 8017a50:	461a      	mov	r2, r3
 8017a52:	4620      	mov	r0, r4
 8017a54:	f001 fb2c 	bl	80190b0 <__pow5mult>
 8017a58:	4683      	mov	fp, r0
 8017a5a:	2800      	cmp	r0, #0
 8017a5c:	f43f aeb8 	beq.w	80177d0 <_strtod_l+0x488>
 8017a60:	4601      	mov	r1, r0
 8017a62:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017a64:	4620      	mov	r0, r4
 8017a66:	f001 fa79 	bl	8018f5c <__multiply>
 8017a6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8017a6c:	2800      	cmp	r0, #0
 8017a6e:	f43f aeaf 	beq.w	80177d0 <_strtod_l+0x488>
 8017a72:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017a74:	4620      	mov	r0, r4
 8017a76:	f001 f95b 	bl	8018d30 <_Bfree>
 8017a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a7c:	9316      	str	r3, [sp, #88]	; 0x58
 8017a7e:	2e00      	cmp	r6, #0
 8017a80:	f300 808c 	bgt.w	8017b9c <_strtod_l+0x854>
 8017a84:	9b08      	ldr	r3, [sp, #32]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	dd08      	ble.n	8017a9c <_strtod_l+0x754>
 8017a8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017a8c:	9905      	ldr	r1, [sp, #20]
 8017a8e:	4620      	mov	r0, r4
 8017a90:	f001 fb0e 	bl	80190b0 <__pow5mult>
 8017a94:	9005      	str	r0, [sp, #20]
 8017a96:	2800      	cmp	r0, #0
 8017a98:	f43f ae9a 	beq.w	80177d0 <_strtod_l+0x488>
 8017a9c:	2f00      	cmp	r7, #0
 8017a9e:	dd08      	ble.n	8017ab2 <_strtod_l+0x76a>
 8017aa0:	9905      	ldr	r1, [sp, #20]
 8017aa2:	463a      	mov	r2, r7
 8017aa4:	4620      	mov	r0, r4
 8017aa6:	f001 fb5d 	bl	8019164 <__lshift>
 8017aaa:	9005      	str	r0, [sp, #20]
 8017aac:	2800      	cmp	r0, #0
 8017aae:	f43f ae8f 	beq.w	80177d0 <_strtod_l+0x488>
 8017ab2:	f1ba 0f00 	cmp.w	sl, #0
 8017ab6:	dd08      	ble.n	8017aca <_strtod_l+0x782>
 8017ab8:	4659      	mov	r1, fp
 8017aba:	4652      	mov	r2, sl
 8017abc:	4620      	mov	r0, r4
 8017abe:	f001 fb51 	bl	8019164 <__lshift>
 8017ac2:	4683      	mov	fp, r0
 8017ac4:	2800      	cmp	r0, #0
 8017ac6:	f43f ae83 	beq.w	80177d0 <_strtod_l+0x488>
 8017aca:	9a05      	ldr	r2, [sp, #20]
 8017acc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017ace:	4620      	mov	r0, r4
 8017ad0:	f001 fbd0 	bl	8019274 <__mdiff>
 8017ad4:	4605      	mov	r5, r0
 8017ad6:	2800      	cmp	r0, #0
 8017ad8:	f43f ae7a 	beq.w	80177d0 <_strtod_l+0x488>
 8017adc:	68c3      	ldr	r3, [r0, #12]
 8017ade:	930b      	str	r3, [sp, #44]	; 0x2c
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	60c3      	str	r3, [r0, #12]
 8017ae4:	4659      	mov	r1, fp
 8017ae6:	f001 fba9 	bl	801923c <__mcmp>
 8017aea:	2800      	cmp	r0, #0
 8017aec:	da60      	bge.n	8017bb0 <_strtod_l+0x868>
 8017aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017af0:	ea53 0308 	orrs.w	r3, r3, r8
 8017af4:	f040 8084 	bne.w	8017c00 <_strtod_l+0x8b8>
 8017af8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d17f      	bne.n	8017c00 <_strtod_l+0x8b8>
 8017b00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017b04:	0d1b      	lsrs	r3, r3, #20
 8017b06:	051b      	lsls	r3, r3, #20
 8017b08:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017b0c:	d978      	bls.n	8017c00 <_strtod_l+0x8b8>
 8017b0e:	696b      	ldr	r3, [r5, #20]
 8017b10:	b913      	cbnz	r3, 8017b18 <_strtod_l+0x7d0>
 8017b12:	692b      	ldr	r3, [r5, #16]
 8017b14:	2b01      	cmp	r3, #1
 8017b16:	dd73      	ble.n	8017c00 <_strtod_l+0x8b8>
 8017b18:	4629      	mov	r1, r5
 8017b1a:	2201      	movs	r2, #1
 8017b1c:	4620      	mov	r0, r4
 8017b1e:	f001 fb21 	bl	8019164 <__lshift>
 8017b22:	4659      	mov	r1, fp
 8017b24:	4605      	mov	r5, r0
 8017b26:	f001 fb89 	bl	801923c <__mcmp>
 8017b2a:	2800      	cmp	r0, #0
 8017b2c:	dd68      	ble.n	8017c00 <_strtod_l+0x8b8>
 8017b2e:	9904      	ldr	r1, [sp, #16]
 8017b30:	4a54      	ldr	r2, [pc, #336]	; (8017c84 <_strtod_l+0x93c>)
 8017b32:	464b      	mov	r3, r9
 8017b34:	2900      	cmp	r1, #0
 8017b36:	f000 8084 	beq.w	8017c42 <_strtod_l+0x8fa>
 8017b3a:	ea02 0109 	and.w	r1, r2, r9
 8017b3e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017b42:	dc7e      	bgt.n	8017c42 <_strtod_l+0x8fa>
 8017b44:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017b48:	f77f aeb3 	ble.w	80178b2 <_strtod_l+0x56a>
 8017b4c:	4b4e      	ldr	r3, [pc, #312]	; (8017c88 <_strtod_l+0x940>)
 8017b4e:	4640      	mov	r0, r8
 8017b50:	4649      	mov	r1, r9
 8017b52:	2200      	movs	r2, #0
 8017b54:	f7e8 fd60 	bl	8000618 <__aeabi_dmul>
 8017b58:	4b4a      	ldr	r3, [pc, #296]	; (8017c84 <_strtod_l+0x93c>)
 8017b5a:	400b      	ands	r3, r1
 8017b5c:	4680      	mov	r8, r0
 8017b5e:	4689      	mov	r9, r1
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	f47f ae3f 	bne.w	80177e4 <_strtod_l+0x49c>
 8017b66:	2322      	movs	r3, #34	; 0x22
 8017b68:	6023      	str	r3, [r4, #0]
 8017b6a:	e63b      	b.n	80177e4 <_strtod_l+0x49c>
 8017b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8017b70:	fa02 f303 	lsl.w	r3, r2, r3
 8017b74:	ea03 0808 	and.w	r8, r3, r8
 8017b78:	e6e8      	b.n	801794c <_strtod_l+0x604>
 8017b7a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017b7e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8017b82:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017b86:	36e2      	adds	r6, #226	; 0xe2
 8017b88:	fa01 f306 	lsl.w	r3, r1, r6
 8017b8c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8017b90:	e748      	b.n	8017a24 <_strtod_l+0x6dc>
 8017b92:	2100      	movs	r1, #0
 8017b94:	2301      	movs	r3, #1
 8017b96:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8017b9a:	e743      	b.n	8017a24 <_strtod_l+0x6dc>
 8017b9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017b9e:	4632      	mov	r2, r6
 8017ba0:	4620      	mov	r0, r4
 8017ba2:	f001 fadf 	bl	8019164 <__lshift>
 8017ba6:	9016      	str	r0, [sp, #88]	; 0x58
 8017ba8:	2800      	cmp	r0, #0
 8017baa:	f47f af6b 	bne.w	8017a84 <_strtod_l+0x73c>
 8017bae:	e60f      	b.n	80177d0 <_strtod_l+0x488>
 8017bb0:	46ca      	mov	sl, r9
 8017bb2:	d171      	bne.n	8017c98 <_strtod_l+0x950>
 8017bb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017bb6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017bba:	b352      	cbz	r2, 8017c12 <_strtod_l+0x8ca>
 8017bbc:	4a33      	ldr	r2, [pc, #204]	; (8017c8c <_strtod_l+0x944>)
 8017bbe:	4293      	cmp	r3, r2
 8017bc0:	d12a      	bne.n	8017c18 <_strtod_l+0x8d0>
 8017bc2:	9b04      	ldr	r3, [sp, #16]
 8017bc4:	4641      	mov	r1, r8
 8017bc6:	b1fb      	cbz	r3, 8017c08 <_strtod_l+0x8c0>
 8017bc8:	4b2e      	ldr	r3, [pc, #184]	; (8017c84 <_strtod_l+0x93c>)
 8017bca:	ea09 0303 	and.w	r3, r9, r3
 8017bce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8017bd6:	d81a      	bhi.n	8017c0e <_strtod_l+0x8c6>
 8017bd8:	0d1b      	lsrs	r3, r3, #20
 8017bda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017bde:	fa02 f303 	lsl.w	r3, r2, r3
 8017be2:	4299      	cmp	r1, r3
 8017be4:	d118      	bne.n	8017c18 <_strtod_l+0x8d0>
 8017be6:	4b2a      	ldr	r3, [pc, #168]	; (8017c90 <_strtod_l+0x948>)
 8017be8:	459a      	cmp	sl, r3
 8017bea:	d102      	bne.n	8017bf2 <_strtod_l+0x8aa>
 8017bec:	3101      	adds	r1, #1
 8017bee:	f43f adef 	beq.w	80177d0 <_strtod_l+0x488>
 8017bf2:	4b24      	ldr	r3, [pc, #144]	; (8017c84 <_strtod_l+0x93c>)
 8017bf4:	ea0a 0303 	and.w	r3, sl, r3
 8017bf8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8017bfc:	f04f 0800 	mov.w	r8, #0
 8017c00:	9b04      	ldr	r3, [sp, #16]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d1a2      	bne.n	8017b4c <_strtod_l+0x804>
 8017c06:	e5ed      	b.n	80177e4 <_strtod_l+0x49c>
 8017c08:	f04f 33ff 	mov.w	r3, #4294967295
 8017c0c:	e7e9      	b.n	8017be2 <_strtod_l+0x89a>
 8017c0e:	4613      	mov	r3, r2
 8017c10:	e7e7      	b.n	8017be2 <_strtod_l+0x89a>
 8017c12:	ea53 0308 	orrs.w	r3, r3, r8
 8017c16:	d08a      	beq.n	8017b2e <_strtod_l+0x7e6>
 8017c18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c1a:	b1e3      	cbz	r3, 8017c56 <_strtod_l+0x90e>
 8017c1c:	ea13 0f0a 	tst.w	r3, sl
 8017c20:	d0ee      	beq.n	8017c00 <_strtod_l+0x8b8>
 8017c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c24:	9a04      	ldr	r2, [sp, #16]
 8017c26:	4640      	mov	r0, r8
 8017c28:	4649      	mov	r1, r9
 8017c2a:	b1c3      	cbz	r3, 8017c5e <_strtod_l+0x916>
 8017c2c:	f7ff fb70 	bl	8017310 <sulp>
 8017c30:	4602      	mov	r2, r0
 8017c32:	460b      	mov	r3, r1
 8017c34:	ec51 0b18 	vmov	r0, r1, d8
 8017c38:	f7e8 fb38 	bl	80002ac <__adddf3>
 8017c3c:	4680      	mov	r8, r0
 8017c3e:	4689      	mov	r9, r1
 8017c40:	e7de      	b.n	8017c00 <_strtod_l+0x8b8>
 8017c42:	4013      	ands	r3, r2
 8017c44:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017c48:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8017c4c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8017c50:	f04f 38ff 	mov.w	r8, #4294967295
 8017c54:	e7d4      	b.n	8017c00 <_strtod_l+0x8b8>
 8017c56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c58:	ea13 0f08 	tst.w	r3, r8
 8017c5c:	e7e0      	b.n	8017c20 <_strtod_l+0x8d8>
 8017c5e:	f7ff fb57 	bl	8017310 <sulp>
 8017c62:	4602      	mov	r2, r0
 8017c64:	460b      	mov	r3, r1
 8017c66:	ec51 0b18 	vmov	r0, r1, d8
 8017c6a:	f7e8 fb1d 	bl	80002a8 <__aeabi_dsub>
 8017c6e:	2200      	movs	r2, #0
 8017c70:	2300      	movs	r3, #0
 8017c72:	4680      	mov	r8, r0
 8017c74:	4689      	mov	r9, r1
 8017c76:	f7e8 ff37 	bl	8000ae8 <__aeabi_dcmpeq>
 8017c7a:	2800      	cmp	r0, #0
 8017c7c:	d0c0      	beq.n	8017c00 <_strtod_l+0x8b8>
 8017c7e:	e618      	b.n	80178b2 <_strtod_l+0x56a>
 8017c80:	fffffc02 	.word	0xfffffc02
 8017c84:	7ff00000 	.word	0x7ff00000
 8017c88:	39500000 	.word	0x39500000
 8017c8c:	000fffff 	.word	0x000fffff
 8017c90:	7fefffff 	.word	0x7fefffff
 8017c94:	080270a0 	.word	0x080270a0
 8017c98:	4659      	mov	r1, fp
 8017c9a:	4628      	mov	r0, r5
 8017c9c:	f001 fc3e 	bl	801951c <__ratio>
 8017ca0:	ec57 6b10 	vmov	r6, r7, d0
 8017ca4:	ee10 0a10 	vmov	r0, s0
 8017ca8:	2200      	movs	r2, #0
 8017caa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017cae:	4639      	mov	r1, r7
 8017cb0:	f7e8 ff2e 	bl	8000b10 <__aeabi_dcmple>
 8017cb4:	2800      	cmp	r0, #0
 8017cb6:	d071      	beq.n	8017d9c <_strtod_l+0xa54>
 8017cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d17c      	bne.n	8017db8 <_strtod_l+0xa70>
 8017cbe:	f1b8 0f00 	cmp.w	r8, #0
 8017cc2:	d15a      	bne.n	8017d7a <_strtod_l+0xa32>
 8017cc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d15d      	bne.n	8017d88 <_strtod_l+0xa40>
 8017ccc:	4b90      	ldr	r3, [pc, #576]	; (8017f10 <_strtod_l+0xbc8>)
 8017cce:	2200      	movs	r2, #0
 8017cd0:	4630      	mov	r0, r6
 8017cd2:	4639      	mov	r1, r7
 8017cd4:	f7e8 ff12 	bl	8000afc <__aeabi_dcmplt>
 8017cd8:	2800      	cmp	r0, #0
 8017cda:	d15c      	bne.n	8017d96 <_strtod_l+0xa4e>
 8017cdc:	4630      	mov	r0, r6
 8017cde:	4639      	mov	r1, r7
 8017ce0:	4b8c      	ldr	r3, [pc, #560]	; (8017f14 <_strtod_l+0xbcc>)
 8017ce2:	2200      	movs	r2, #0
 8017ce4:	f7e8 fc98 	bl	8000618 <__aeabi_dmul>
 8017ce8:	4606      	mov	r6, r0
 8017cea:	460f      	mov	r7, r1
 8017cec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017cf0:	9606      	str	r6, [sp, #24]
 8017cf2:	9307      	str	r3, [sp, #28]
 8017cf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017cf8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8017cfc:	4b86      	ldr	r3, [pc, #536]	; (8017f18 <_strtod_l+0xbd0>)
 8017cfe:	ea0a 0303 	and.w	r3, sl, r3
 8017d02:	930d      	str	r3, [sp, #52]	; 0x34
 8017d04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017d06:	4b85      	ldr	r3, [pc, #532]	; (8017f1c <_strtod_l+0xbd4>)
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	f040 8090 	bne.w	8017e2e <_strtod_l+0xae6>
 8017d0e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8017d12:	ec49 8b10 	vmov	d0, r8, r9
 8017d16:	f001 fb37 	bl	8019388 <__ulp>
 8017d1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017d1e:	ec51 0b10 	vmov	r0, r1, d0
 8017d22:	f7e8 fc79 	bl	8000618 <__aeabi_dmul>
 8017d26:	4642      	mov	r2, r8
 8017d28:	464b      	mov	r3, r9
 8017d2a:	f7e8 fabf 	bl	80002ac <__adddf3>
 8017d2e:	460b      	mov	r3, r1
 8017d30:	4979      	ldr	r1, [pc, #484]	; (8017f18 <_strtod_l+0xbd0>)
 8017d32:	4a7b      	ldr	r2, [pc, #492]	; (8017f20 <_strtod_l+0xbd8>)
 8017d34:	4019      	ands	r1, r3
 8017d36:	4291      	cmp	r1, r2
 8017d38:	4680      	mov	r8, r0
 8017d3a:	d944      	bls.n	8017dc6 <_strtod_l+0xa7e>
 8017d3c:	ee18 2a90 	vmov	r2, s17
 8017d40:	4b78      	ldr	r3, [pc, #480]	; (8017f24 <_strtod_l+0xbdc>)
 8017d42:	429a      	cmp	r2, r3
 8017d44:	d104      	bne.n	8017d50 <_strtod_l+0xa08>
 8017d46:	ee18 3a10 	vmov	r3, s16
 8017d4a:	3301      	adds	r3, #1
 8017d4c:	f43f ad40 	beq.w	80177d0 <_strtod_l+0x488>
 8017d50:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8017f24 <_strtod_l+0xbdc>
 8017d54:	f04f 38ff 	mov.w	r8, #4294967295
 8017d58:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017d5a:	4620      	mov	r0, r4
 8017d5c:	f000 ffe8 	bl	8018d30 <_Bfree>
 8017d60:	9905      	ldr	r1, [sp, #20]
 8017d62:	4620      	mov	r0, r4
 8017d64:	f000 ffe4 	bl	8018d30 <_Bfree>
 8017d68:	4659      	mov	r1, fp
 8017d6a:	4620      	mov	r0, r4
 8017d6c:	f000 ffe0 	bl	8018d30 <_Bfree>
 8017d70:	4629      	mov	r1, r5
 8017d72:	4620      	mov	r0, r4
 8017d74:	f000 ffdc 	bl	8018d30 <_Bfree>
 8017d78:	e609      	b.n	801798e <_strtod_l+0x646>
 8017d7a:	f1b8 0f01 	cmp.w	r8, #1
 8017d7e:	d103      	bne.n	8017d88 <_strtod_l+0xa40>
 8017d80:	f1b9 0f00 	cmp.w	r9, #0
 8017d84:	f43f ad95 	beq.w	80178b2 <_strtod_l+0x56a>
 8017d88:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8017ee0 <_strtod_l+0xb98>
 8017d8c:	4f60      	ldr	r7, [pc, #384]	; (8017f10 <_strtod_l+0xbc8>)
 8017d8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017d92:	2600      	movs	r6, #0
 8017d94:	e7ae      	b.n	8017cf4 <_strtod_l+0x9ac>
 8017d96:	4f5f      	ldr	r7, [pc, #380]	; (8017f14 <_strtod_l+0xbcc>)
 8017d98:	2600      	movs	r6, #0
 8017d9a:	e7a7      	b.n	8017cec <_strtod_l+0x9a4>
 8017d9c:	4b5d      	ldr	r3, [pc, #372]	; (8017f14 <_strtod_l+0xbcc>)
 8017d9e:	4630      	mov	r0, r6
 8017da0:	4639      	mov	r1, r7
 8017da2:	2200      	movs	r2, #0
 8017da4:	f7e8 fc38 	bl	8000618 <__aeabi_dmul>
 8017da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017daa:	4606      	mov	r6, r0
 8017dac:	460f      	mov	r7, r1
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d09c      	beq.n	8017cec <_strtod_l+0x9a4>
 8017db2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8017db6:	e79d      	b.n	8017cf4 <_strtod_l+0x9ac>
 8017db8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8017ee8 <_strtod_l+0xba0>
 8017dbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017dc0:	ec57 6b17 	vmov	r6, r7, d7
 8017dc4:	e796      	b.n	8017cf4 <_strtod_l+0x9ac>
 8017dc6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8017dca:	9b04      	ldr	r3, [sp, #16]
 8017dcc:	46ca      	mov	sl, r9
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d1c2      	bne.n	8017d58 <_strtod_l+0xa10>
 8017dd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017dd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017dd8:	0d1b      	lsrs	r3, r3, #20
 8017dda:	051b      	lsls	r3, r3, #20
 8017ddc:	429a      	cmp	r2, r3
 8017dde:	d1bb      	bne.n	8017d58 <_strtod_l+0xa10>
 8017de0:	4630      	mov	r0, r6
 8017de2:	4639      	mov	r1, r7
 8017de4:	f7e8 ff50 	bl	8000c88 <__aeabi_d2lz>
 8017de8:	f7e8 fbe8 	bl	80005bc <__aeabi_l2d>
 8017dec:	4602      	mov	r2, r0
 8017dee:	460b      	mov	r3, r1
 8017df0:	4630      	mov	r0, r6
 8017df2:	4639      	mov	r1, r7
 8017df4:	f7e8 fa58 	bl	80002a8 <__aeabi_dsub>
 8017df8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017dfa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017dfe:	ea43 0308 	orr.w	r3, r3, r8
 8017e02:	4313      	orrs	r3, r2
 8017e04:	4606      	mov	r6, r0
 8017e06:	460f      	mov	r7, r1
 8017e08:	d054      	beq.n	8017eb4 <_strtod_l+0xb6c>
 8017e0a:	a339      	add	r3, pc, #228	; (adr r3, 8017ef0 <_strtod_l+0xba8>)
 8017e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e10:	f7e8 fe74 	bl	8000afc <__aeabi_dcmplt>
 8017e14:	2800      	cmp	r0, #0
 8017e16:	f47f ace5 	bne.w	80177e4 <_strtod_l+0x49c>
 8017e1a:	a337      	add	r3, pc, #220	; (adr r3, 8017ef8 <_strtod_l+0xbb0>)
 8017e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e20:	4630      	mov	r0, r6
 8017e22:	4639      	mov	r1, r7
 8017e24:	f7e8 fe88 	bl	8000b38 <__aeabi_dcmpgt>
 8017e28:	2800      	cmp	r0, #0
 8017e2a:	d095      	beq.n	8017d58 <_strtod_l+0xa10>
 8017e2c:	e4da      	b.n	80177e4 <_strtod_l+0x49c>
 8017e2e:	9b04      	ldr	r3, [sp, #16]
 8017e30:	b333      	cbz	r3, 8017e80 <_strtod_l+0xb38>
 8017e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017e38:	d822      	bhi.n	8017e80 <_strtod_l+0xb38>
 8017e3a:	a331      	add	r3, pc, #196	; (adr r3, 8017f00 <_strtod_l+0xbb8>)
 8017e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e40:	4630      	mov	r0, r6
 8017e42:	4639      	mov	r1, r7
 8017e44:	f7e8 fe64 	bl	8000b10 <__aeabi_dcmple>
 8017e48:	b1a0      	cbz	r0, 8017e74 <_strtod_l+0xb2c>
 8017e4a:	4639      	mov	r1, r7
 8017e4c:	4630      	mov	r0, r6
 8017e4e:	f7e8 fe93 	bl	8000b78 <__aeabi_d2uiz>
 8017e52:	2801      	cmp	r0, #1
 8017e54:	bf38      	it	cc
 8017e56:	2001      	movcc	r0, #1
 8017e58:	f7e8 fb64 	bl	8000524 <__aeabi_ui2d>
 8017e5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e5e:	4606      	mov	r6, r0
 8017e60:	460f      	mov	r7, r1
 8017e62:	bb23      	cbnz	r3, 8017eae <_strtod_l+0xb66>
 8017e64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017e68:	9010      	str	r0, [sp, #64]	; 0x40
 8017e6a:	9311      	str	r3, [sp, #68]	; 0x44
 8017e6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017e70:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8017e74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017e78:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017e7c:	1a9b      	subs	r3, r3, r2
 8017e7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e80:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8017e84:	eeb0 0a48 	vmov.f32	s0, s16
 8017e88:	eef0 0a68 	vmov.f32	s1, s17
 8017e8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8017e90:	f001 fa7a 	bl	8019388 <__ulp>
 8017e94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8017e98:	ec53 2b10 	vmov	r2, r3, d0
 8017e9c:	f7e8 fbbc 	bl	8000618 <__aeabi_dmul>
 8017ea0:	ec53 2b18 	vmov	r2, r3, d8
 8017ea4:	f7e8 fa02 	bl	80002ac <__adddf3>
 8017ea8:	4680      	mov	r8, r0
 8017eaa:	4689      	mov	r9, r1
 8017eac:	e78d      	b.n	8017dca <_strtod_l+0xa82>
 8017eae:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017eb2:	e7db      	b.n	8017e6c <_strtod_l+0xb24>
 8017eb4:	a314      	add	r3, pc, #80	; (adr r3, 8017f08 <_strtod_l+0xbc0>)
 8017eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017eba:	f7e8 fe1f 	bl	8000afc <__aeabi_dcmplt>
 8017ebe:	e7b3      	b.n	8017e28 <_strtod_l+0xae0>
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8017ec4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017ec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017ec8:	6013      	str	r3, [r2, #0]
 8017eca:	f7ff ba7c 	b.w	80173c6 <_strtod_l+0x7e>
 8017ece:	2a65      	cmp	r2, #101	; 0x65
 8017ed0:	f43f ab75 	beq.w	80175be <_strtod_l+0x276>
 8017ed4:	2a45      	cmp	r2, #69	; 0x45
 8017ed6:	f43f ab72 	beq.w	80175be <_strtod_l+0x276>
 8017eda:	2301      	movs	r3, #1
 8017edc:	f7ff bbaa 	b.w	8017634 <_strtod_l+0x2ec>
 8017ee0:	00000000 	.word	0x00000000
 8017ee4:	bff00000 	.word	0xbff00000
 8017ee8:	00000000 	.word	0x00000000
 8017eec:	3ff00000 	.word	0x3ff00000
 8017ef0:	94a03595 	.word	0x94a03595
 8017ef4:	3fdfffff 	.word	0x3fdfffff
 8017ef8:	35afe535 	.word	0x35afe535
 8017efc:	3fe00000 	.word	0x3fe00000
 8017f00:	ffc00000 	.word	0xffc00000
 8017f04:	41dfffff 	.word	0x41dfffff
 8017f08:	94a03595 	.word	0x94a03595
 8017f0c:	3fcfffff 	.word	0x3fcfffff
 8017f10:	3ff00000 	.word	0x3ff00000
 8017f14:	3fe00000 	.word	0x3fe00000
 8017f18:	7ff00000 	.word	0x7ff00000
 8017f1c:	7fe00000 	.word	0x7fe00000
 8017f20:	7c9fffff 	.word	0x7c9fffff
 8017f24:	7fefffff 	.word	0x7fefffff

08017f28 <strtof>:
 8017f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f2c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8017ff0 <strtof+0xc8>
 8017f30:	4b2a      	ldr	r3, [pc, #168]	; (8017fdc <strtof+0xb4>)
 8017f32:	460a      	mov	r2, r1
 8017f34:	ed2d 8b02 	vpush	{d8}
 8017f38:	4601      	mov	r1, r0
 8017f3a:	f8d8 0000 	ldr.w	r0, [r8]
 8017f3e:	f7ff fa03 	bl	8017348 <_strtod_l>
 8017f42:	ec55 4b10 	vmov	r4, r5, d0
 8017f46:	ee10 2a10 	vmov	r2, s0
 8017f4a:	ee10 0a10 	vmov	r0, s0
 8017f4e:	462b      	mov	r3, r5
 8017f50:	4629      	mov	r1, r5
 8017f52:	f7e8 fdfb 	bl	8000b4c <__aeabi_dcmpun>
 8017f56:	b190      	cbz	r0, 8017f7e <strtof+0x56>
 8017f58:	2d00      	cmp	r5, #0
 8017f5a:	4821      	ldr	r0, [pc, #132]	; (8017fe0 <strtof+0xb8>)
 8017f5c:	da09      	bge.n	8017f72 <strtof+0x4a>
 8017f5e:	f000 faeb 	bl	8018538 <nanf>
 8017f62:	eeb1 8a40 	vneg.f32	s16, s0
 8017f66:	eeb0 0a48 	vmov.f32	s0, s16
 8017f6a:	ecbd 8b02 	vpop	{d8}
 8017f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f72:	ecbd 8b02 	vpop	{d8}
 8017f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f7a:	f000 badd 	b.w	8018538 <nanf>
 8017f7e:	4620      	mov	r0, r4
 8017f80:	4629      	mov	r1, r5
 8017f82:	f7e8 fe19 	bl	8000bb8 <__aeabi_d2f>
 8017f86:	ee08 0a10 	vmov	s16, r0
 8017f8a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8017fe4 <strtof+0xbc>
 8017f8e:	eeb0 7ac8 	vabs.f32	s14, s16
 8017f92:	eeb4 7a67 	vcmp.f32	s14, s15
 8017f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f9a:	dd11      	ble.n	8017fc0 <strtof+0x98>
 8017f9c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8017fa0:	4b11      	ldr	r3, [pc, #68]	; (8017fe8 <strtof+0xc0>)
 8017fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8017fa6:	4620      	mov	r0, r4
 8017fa8:	4639      	mov	r1, r7
 8017faa:	f7e8 fdcf 	bl	8000b4c <__aeabi_dcmpun>
 8017fae:	b980      	cbnz	r0, 8017fd2 <strtof+0xaa>
 8017fb0:	4b0d      	ldr	r3, [pc, #52]	; (8017fe8 <strtof+0xc0>)
 8017fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8017fb6:	4620      	mov	r0, r4
 8017fb8:	4639      	mov	r1, r7
 8017fba:	f7e8 fda9 	bl	8000b10 <__aeabi_dcmple>
 8017fbe:	b940      	cbnz	r0, 8017fd2 <strtof+0xaa>
 8017fc0:	ee18 3a10 	vmov	r3, s16
 8017fc4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8017fc8:	d1cd      	bne.n	8017f66 <strtof+0x3e>
 8017fca:	4b08      	ldr	r3, [pc, #32]	; (8017fec <strtof+0xc4>)
 8017fcc:	402b      	ands	r3, r5
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d0c9      	beq.n	8017f66 <strtof+0x3e>
 8017fd2:	f8d8 3000 	ldr.w	r3, [r8]
 8017fd6:	2222      	movs	r2, #34	; 0x22
 8017fd8:	601a      	str	r2, [r3, #0]
 8017fda:	e7c4      	b.n	8017f66 <strtof+0x3e>
 8017fdc:	200001a8 	.word	0x200001a8
 8017fe0:	08027422 	.word	0x08027422
 8017fe4:	7f7fffff 	.word	0x7f7fffff
 8017fe8:	7fefffff 	.word	0x7fefffff
 8017fec:	7ff00000 	.word	0x7ff00000
 8017ff0:	20000360 	.word	0x20000360

08017ff4 <_strtoul_l.constprop.0>:
 8017ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ff8:	4f36      	ldr	r7, [pc, #216]	; (80180d4 <_strtoul_l.constprop.0+0xe0>)
 8017ffa:	4686      	mov	lr, r0
 8017ffc:	460d      	mov	r5, r1
 8017ffe:	4628      	mov	r0, r5
 8018000:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018004:	5d3e      	ldrb	r6, [r7, r4]
 8018006:	f016 0608 	ands.w	r6, r6, #8
 801800a:	d1f8      	bne.n	8017ffe <_strtoul_l.constprop.0+0xa>
 801800c:	2c2d      	cmp	r4, #45	; 0x2d
 801800e:	d130      	bne.n	8018072 <_strtoul_l.constprop.0+0x7e>
 8018010:	782c      	ldrb	r4, [r5, #0]
 8018012:	2601      	movs	r6, #1
 8018014:	1c85      	adds	r5, r0, #2
 8018016:	2b00      	cmp	r3, #0
 8018018:	d057      	beq.n	80180ca <_strtoul_l.constprop.0+0xd6>
 801801a:	2b10      	cmp	r3, #16
 801801c:	d109      	bne.n	8018032 <_strtoul_l.constprop.0+0x3e>
 801801e:	2c30      	cmp	r4, #48	; 0x30
 8018020:	d107      	bne.n	8018032 <_strtoul_l.constprop.0+0x3e>
 8018022:	7828      	ldrb	r0, [r5, #0]
 8018024:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8018028:	2858      	cmp	r0, #88	; 0x58
 801802a:	d149      	bne.n	80180c0 <_strtoul_l.constprop.0+0xcc>
 801802c:	786c      	ldrb	r4, [r5, #1]
 801802e:	2310      	movs	r3, #16
 8018030:	3502      	adds	r5, #2
 8018032:	f04f 38ff 	mov.w	r8, #4294967295
 8018036:	2700      	movs	r7, #0
 8018038:	fbb8 f8f3 	udiv	r8, r8, r3
 801803c:	fb03 f908 	mul.w	r9, r3, r8
 8018040:	ea6f 0909 	mvn.w	r9, r9
 8018044:	4638      	mov	r0, r7
 8018046:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801804a:	f1bc 0f09 	cmp.w	ip, #9
 801804e:	d815      	bhi.n	801807c <_strtoul_l.constprop.0+0x88>
 8018050:	4664      	mov	r4, ip
 8018052:	42a3      	cmp	r3, r4
 8018054:	dd23      	ble.n	801809e <_strtoul_l.constprop.0+0xaa>
 8018056:	f1b7 3fff 	cmp.w	r7, #4294967295
 801805a:	d007      	beq.n	801806c <_strtoul_l.constprop.0+0x78>
 801805c:	4580      	cmp	r8, r0
 801805e:	d31b      	bcc.n	8018098 <_strtoul_l.constprop.0+0xa4>
 8018060:	d101      	bne.n	8018066 <_strtoul_l.constprop.0+0x72>
 8018062:	45a1      	cmp	r9, r4
 8018064:	db18      	blt.n	8018098 <_strtoul_l.constprop.0+0xa4>
 8018066:	fb00 4003 	mla	r0, r0, r3, r4
 801806a:	2701      	movs	r7, #1
 801806c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018070:	e7e9      	b.n	8018046 <_strtoul_l.constprop.0+0x52>
 8018072:	2c2b      	cmp	r4, #43	; 0x2b
 8018074:	bf04      	itt	eq
 8018076:	782c      	ldrbeq	r4, [r5, #0]
 8018078:	1c85      	addeq	r5, r0, #2
 801807a:	e7cc      	b.n	8018016 <_strtoul_l.constprop.0+0x22>
 801807c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018080:	f1bc 0f19 	cmp.w	ip, #25
 8018084:	d801      	bhi.n	801808a <_strtoul_l.constprop.0+0x96>
 8018086:	3c37      	subs	r4, #55	; 0x37
 8018088:	e7e3      	b.n	8018052 <_strtoul_l.constprop.0+0x5e>
 801808a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801808e:	f1bc 0f19 	cmp.w	ip, #25
 8018092:	d804      	bhi.n	801809e <_strtoul_l.constprop.0+0xaa>
 8018094:	3c57      	subs	r4, #87	; 0x57
 8018096:	e7dc      	b.n	8018052 <_strtoul_l.constprop.0+0x5e>
 8018098:	f04f 37ff 	mov.w	r7, #4294967295
 801809c:	e7e6      	b.n	801806c <_strtoul_l.constprop.0+0x78>
 801809e:	1c7b      	adds	r3, r7, #1
 80180a0:	d106      	bne.n	80180b0 <_strtoul_l.constprop.0+0xbc>
 80180a2:	2322      	movs	r3, #34	; 0x22
 80180a4:	f8ce 3000 	str.w	r3, [lr]
 80180a8:	4638      	mov	r0, r7
 80180aa:	b932      	cbnz	r2, 80180ba <_strtoul_l.constprop.0+0xc6>
 80180ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80180b0:	b106      	cbz	r6, 80180b4 <_strtoul_l.constprop.0+0xc0>
 80180b2:	4240      	negs	r0, r0
 80180b4:	2a00      	cmp	r2, #0
 80180b6:	d0f9      	beq.n	80180ac <_strtoul_l.constprop.0+0xb8>
 80180b8:	b107      	cbz	r7, 80180bc <_strtoul_l.constprop.0+0xc8>
 80180ba:	1e69      	subs	r1, r5, #1
 80180bc:	6011      	str	r1, [r2, #0]
 80180be:	e7f5      	b.n	80180ac <_strtoul_l.constprop.0+0xb8>
 80180c0:	2430      	movs	r4, #48	; 0x30
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d1b5      	bne.n	8018032 <_strtoul_l.constprop.0+0x3e>
 80180c6:	2308      	movs	r3, #8
 80180c8:	e7b3      	b.n	8018032 <_strtoul_l.constprop.0+0x3e>
 80180ca:	2c30      	cmp	r4, #48	; 0x30
 80180cc:	d0a9      	beq.n	8018022 <_strtoul_l.constprop.0+0x2e>
 80180ce:	230a      	movs	r3, #10
 80180d0:	e7af      	b.n	8018032 <_strtoul_l.constprop.0+0x3e>
 80180d2:	bf00      	nop
 80180d4:	080270c9 	.word	0x080270c9

080180d8 <strtoul>:
 80180d8:	4613      	mov	r3, r2
 80180da:	460a      	mov	r2, r1
 80180dc:	4601      	mov	r1, r0
 80180de:	4802      	ldr	r0, [pc, #8]	; (80180e8 <strtoul+0x10>)
 80180e0:	6800      	ldr	r0, [r0, #0]
 80180e2:	f7ff bf87 	b.w	8017ff4 <_strtoul_l.constprop.0>
 80180e6:	bf00      	nop
 80180e8:	20000360 	.word	0x20000360

080180ec <std>:
 80180ec:	2300      	movs	r3, #0
 80180ee:	b510      	push	{r4, lr}
 80180f0:	4604      	mov	r4, r0
 80180f2:	e9c0 3300 	strd	r3, r3, [r0]
 80180f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80180fa:	6083      	str	r3, [r0, #8]
 80180fc:	8181      	strh	r1, [r0, #12]
 80180fe:	6643      	str	r3, [r0, #100]	; 0x64
 8018100:	81c2      	strh	r2, [r0, #14]
 8018102:	6183      	str	r3, [r0, #24]
 8018104:	4619      	mov	r1, r3
 8018106:	2208      	movs	r2, #8
 8018108:	305c      	adds	r0, #92	; 0x5c
 801810a:	f000 f92d 	bl	8018368 <memset>
 801810e:	4b0d      	ldr	r3, [pc, #52]	; (8018144 <std+0x58>)
 8018110:	6263      	str	r3, [r4, #36]	; 0x24
 8018112:	4b0d      	ldr	r3, [pc, #52]	; (8018148 <std+0x5c>)
 8018114:	62a3      	str	r3, [r4, #40]	; 0x28
 8018116:	4b0d      	ldr	r3, [pc, #52]	; (801814c <std+0x60>)
 8018118:	62e3      	str	r3, [r4, #44]	; 0x2c
 801811a:	4b0d      	ldr	r3, [pc, #52]	; (8018150 <std+0x64>)
 801811c:	6323      	str	r3, [r4, #48]	; 0x30
 801811e:	4b0d      	ldr	r3, [pc, #52]	; (8018154 <std+0x68>)
 8018120:	6224      	str	r4, [r4, #32]
 8018122:	429c      	cmp	r4, r3
 8018124:	d006      	beq.n	8018134 <std+0x48>
 8018126:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801812a:	4294      	cmp	r4, r2
 801812c:	d002      	beq.n	8018134 <std+0x48>
 801812e:	33d0      	adds	r3, #208	; 0xd0
 8018130:	429c      	cmp	r4, r3
 8018132:	d105      	bne.n	8018140 <std+0x54>
 8018134:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801813c:	f000 b9da 	b.w	80184f4 <__retarget_lock_init_recursive>
 8018140:	bd10      	pop	{r4, pc}
 8018142:	bf00      	nop
 8018144:	08018271 	.word	0x08018271
 8018148:	08018293 	.word	0x08018293
 801814c:	080182cb 	.word	0x080182cb
 8018150:	080182ef 	.word	0x080182ef
 8018154:	20008ff8 	.word	0x20008ff8

08018158 <stdio_exit_handler>:
 8018158:	4a02      	ldr	r2, [pc, #8]	; (8018164 <stdio_exit_handler+0xc>)
 801815a:	4903      	ldr	r1, [pc, #12]	; (8018168 <stdio_exit_handler+0x10>)
 801815c:	4803      	ldr	r0, [pc, #12]	; (801816c <stdio_exit_handler+0x14>)
 801815e:	f000 b869 	b.w	8018234 <_fwalk_sglue>
 8018162:	bf00      	nop
 8018164:	2000019c 	.word	0x2000019c
 8018168:	08019d01 	.word	0x08019d01
 801816c:	20000314 	.word	0x20000314

08018170 <cleanup_stdio>:
 8018170:	6841      	ldr	r1, [r0, #4]
 8018172:	4b0c      	ldr	r3, [pc, #48]	; (80181a4 <cleanup_stdio+0x34>)
 8018174:	4299      	cmp	r1, r3
 8018176:	b510      	push	{r4, lr}
 8018178:	4604      	mov	r4, r0
 801817a:	d001      	beq.n	8018180 <cleanup_stdio+0x10>
 801817c:	f001 fdc0 	bl	8019d00 <_fflush_r>
 8018180:	68a1      	ldr	r1, [r4, #8]
 8018182:	4b09      	ldr	r3, [pc, #36]	; (80181a8 <cleanup_stdio+0x38>)
 8018184:	4299      	cmp	r1, r3
 8018186:	d002      	beq.n	801818e <cleanup_stdio+0x1e>
 8018188:	4620      	mov	r0, r4
 801818a:	f001 fdb9 	bl	8019d00 <_fflush_r>
 801818e:	68e1      	ldr	r1, [r4, #12]
 8018190:	4b06      	ldr	r3, [pc, #24]	; (80181ac <cleanup_stdio+0x3c>)
 8018192:	4299      	cmp	r1, r3
 8018194:	d004      	beq.n	80181a0 <cleanup_stdio+0x30>
 8018196:	4620      	mov	r0, r4
 8018198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801819c:	f001 bdb0 	b.w	8019d00 <_fflush_r>
 80181a0:	bd10      	pop	{r4, pc}
 80181a2:	bf00      	nop
 80181a4:	20008ff8 	.word	0x20008ff8
 80181a8:	20009060 	.word	0x20009060
 80181ac:	200090c8 	.word	0x200090c8

080181b0 <global_stdio_init.part.0>:
 80181b0:	b510      	push	{r4, lr}
 80181b2:	4b0b      	ldr	r3, [pc, #44]	; (80181e0 <global_stdio_init.part.0+0x30>)
 80181b4:	4c0b      	ldr	r4, [pc, #44]	; (80181e4 <global_stdio_init.part.0+0x34>)
 80181b6:	4a0c      	ldr	r2, [pc, #48]	; (80181e8 <global_stdio_init.part.0+0x38>)
 80181b8:	601a      	str	r2, [r3, #0]
 80181ba:	4620      	mov	r0, r4
 80181bc:	2200      	movs	r2, #0
 80181be:	2104      	movs	r1, #4
 80181c0:	f7ff ff94 	bl	80180ec <std>
 80181c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80181c8:	2201      	movs	r2, #1
 80181ca:	2109      	movs	r1, #9
 80181cc:	f7ff ff8e 	bl	80180ec <std>
 80181d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80181d4:	2202      	movs	r2, #2
 80181d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181da:	2112      	movs	r1, #18
 80181dc:	f7ff bf86 	b.w	80180ec <std>
 80181e0:	20009130 	.word	0x20009130
 80181e4:	20008ff8 	.word	0x20008ff8
 80181e8:	08018159 	.word	0x08018159

080181ec <__sfp_lock_acquire>:
 80181ec:	4801      	ldr	r0, [pc, #4]	; (80181f4 <__sfp_lock_acquire+0x8>)
 80181ee:	f000 b982 	b.w	80184f6 <__retarget_lock_acquire_recursive>
 80181f2:	bf00      	nop
 80181f4:	20009139 	.word	0x20009139

080181f8 <__sfp_lock_release>:
 80181f8:	4801      	ldr	r0, [pc, #4]	; (8018200 <__sfp_lock_release+0x8>)
 80181fa:	f000 b97d 	b.w	80184f8 <__retarget_lock_release_recursive>
 80181fe:	bf00      	nop
 8018200:	20009139 	.word	0x20009139

08018204 <__sinit>:
 8018204:	b510      	push	{r4, lr}
 8018206:	4604      	mov	r4, r0
 8018208:	f7ff fff0 	bl	80181ec <__sfp_lock_acquire>
 801820c:	6a23      	ldr	r3, [r4, #32]
 801820e:	b11b      	cbz	r3, 8018218 <__sinit+0x14>
 8018210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018214:	f7ff bff0 	b.w	80181f8 <__sfp_lock_release>
 8018218:	4b04      	ldr	r3, [pc, #16]	; (801822c <__sinit+0x28>)
 801821a:	6223      	str	r3, [r4, #32]
 801821c:	4b04      	ldr	r3, [pc, #16]	; (8018230 <__sinit+0x2c>)
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d1f5      	bne.n	8018210 <__sinit+0xc>
 8018224:	f7ff ffc4 	bl	80181b0 <global_stdio_init.part.0>
 8018228:	e7f2      	b.n	8018210 <__sinit+0xc>
 801822a:	bf00      	nop
 801822c:	08018171 	.word	0x08018171
 8018230:	20009130 	.word	0x20009130

08018234 <_fwalk_sglue>:
 8018234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018238:	4607      	mov	r7, r0
 801823a:	4688      	mov	r8, r1
 801823c:	4614      	mov	r4, r2
 801823e:	2600      	movs	r6, #0
 8018240:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018244:	f1b9 0901 	subs.w	r9, r9, #1
 8018248:	d505      	bpl.n	8018256 <_fwalk_sglue+0x22>
 801824a:	6824      	ldr	r4, [r4, #0]
 801824c:	2c00      	cmp	r4, #0
 801824e:	d1f7      	bne.n	8018240 <_fwalk_sglue+0xc>
 8018250:	4630      	mov	r0, r6
 8018252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018256:	89ab      	ldrh	r3, [r5, #12]
 8018258:	2b01      	cmp	r3, #1
 801825a:	d907      	bls.n	801826c <_fwalk_sglue+0x38>
 801825c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018260:	3301      	adds	r3, #1
 8018262:	d003      	beq.n	801826c <_fwalk_sglue+0x38>
 8018264:	4629      	mov	r1, r5
 8018266:	4638      	mov	r0, r7
 8018268:	47c0      	blx	r8
 801826a:	4306      	orrs	r6, r0
 801826c:	3568      	adds	r5, #104	; 0x68
 801826e:	e7e9      	b.n	8018244 <_fwalk_sglue+0x10>

08018270 <__sread>:
 8018270:	b510      	push	{r4, lr}
 8018272:	460c      	mov	r4, r1
 8018274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018278:	f000 f8de 	bl	8018438 <_read_r>
 801827c:	2800      	cmp	r0, #0
 801827e:	bfab      	itete	ge
 8018280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018282:	89a3      	ldrhlt	r3, [r4, #12]
 8018284:	181b      	addge	r3, r3, r0
 8018286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801828a:	bfac      	ite	ge
 801828c:	6563      	strge	r3, [r4, #84]	; 0x54
 801828e:	81a3      	strhlt	r3, [r4, #12]
 8018290:	bd10      	pop	{r4, pc}

08018292 <__swrite>:
 8018292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018296:	461f      	mov	r7, r3
 8018298:	898b      	ldrh	r3, [r1, #12]
 801829a:	05db      	lsls	r3, r3, #23
 801829c:	4605      	mov	r5, r0
 801829e:	460c      	mov	r4, r1
 80182a0:	4616      	mov	r6, r2
 80182a2:	d505      	bpl.n	80182b0 <__swrite+0x1e>
 80182a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182a8:	2302      	movs	r3, #2
 80182aa:	2200      	movs	r2, #0
 80182ac:	f000 f8b2 	bl	8018414 <_lseek_r>
 80182b0:	89a3      	ldrh	r3, [r4, #12]
 80182b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80182b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80182ba:	81a3      	strh	r3, [r4, #12]
 80182bc:	4632      	mov	r2, r6
 80182be:	463b      	mov	r3, r7
 80182c0:	4628      	mov	r0, r5
 80182c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80182c6:	f000 b8d9 	b.w	801847c <_write_r>

080182ca <__sseek>:
 80182ca:	b510      	push	{r4, lr}
 80182cc:	460c      	mov	r4, r1
 80182ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182d2:	f000 f89f 	bl	8018414 <_lseek_r>
 80182d6:	1c43      	adds	r3, r0, #1
 80182d8:	89a3      	ldrh	r3, [r4, #12]
 80182da:	bf15      	itete	ne
 80182dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80182de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80182e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80182e6:	81a3      	strheq	r3, [r4, #12]
 80182e8:	bf18      	it	ne
 80182ea:	81a3      	strhne	r3, [r4, #12]
 80182ec:	bd10      	pop	{r4, pc}

080182ee <__sclose>:
 80182ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182f2:	f000 b87f 	b.w	80183f4 <_close_r>

080182f6 <_vsniprintf_r>:
 80182f6:	b530      	push	{r4, r5, lr}
 80182f8:	4614      	mov	r4, r2
 80182fa:	2c00      	cmp	r4, #0
 80182fc:	b09b      	sub	sp, #108	; 0x6c
 80182fe:	4605      	mov	r5, r0
 8018300:	461a      	mov	r2, r3
 8018302:	da05      	bge.n	8018310 <_vsniprintf_r+0x1a>
 8018304:	238b      	movs	r3, #139	; 0x8b
 8018306:	6003      	str	r3, [r0, #0]
 8018308:	f04f 30ff 	mov.w	r0, #4294967295
 801830c:	b01b      	add	sp, #108	; 0x6c
 801830e:	bd30      	pop	{r4, r5, pc}
 8018310:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018314:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018318:	bf14      	ite	ne
 801831a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801831e:	4623      	moveq	r3, r4
 8018320:	9302      	str	r3, [sp, #8]
 8018322:	9305      	str	r3, [sp, #20]
 8018324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018328:	9100      	str	r1, [sp, #0]
 801832a:	9104      	str	r1, [sp, #16]
 801832c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018330:	4669      	mov	r1, sp
 8018332:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018334:	f001 f9d0 	bl	80196d8 <_svfiprintf_r>
 8018338:	1c43      	adds	r3, r0, #1
 801833a:	bfbc      	itt	lt
 801833c:	238b      	movlt	r3, #139	; 0x8b
 801833e:	602b      	strlt	r3, [r5, #0]
 8018340:	2c00      	cmp	r4, #0
 8018342:	d0e3      	beq.n	801830c <_vsniprintf_r+0x16>
 8018344:	9b00      	ldr	r3, [sp, #0]
 8018346:	2200      	movs	r2, #0
 8018348:	701a      	strb	r2, [r3, #0]
 801834a:	e7df      	b.n	801830c <_vsniprintf_r+0x16>

0801834c <vsniprintf>:
 801834c:	b507      	push	{r0, r1, r2, lr}
 801834e:	9300      	str	r3, [sp, #0]
 8018350:	4613      	mov	r3, r2
 8018352:	460a      	mov	r2, r1
 8018354:	4601      	mov	r1, r0
 8018356:	4803      	ldr	r0, [pc, #12]	; (8018364 <vsniprintf+0x18>)
 8018358:	6800      	ldr	r0, [r0, #0]
 801835a:	f7ff ffcc 	bl	80182f6 <_vsniprintf_r>
 801835e:	b003      	add	sp, #12
 8018360:	f85d fb04 	ldr.w	pc, [sp], #4
 8018364:	20000360 	.word	0x20000360

08018368 <memset>:
 8018368:	4402      	add	r2, r0
 801836a:	4603      	mov	r3, r0
 801836c:	4293      	cmp	r3, r2
 801836e:	d100      	bne.n	8018372 <memset+0xa>
 8018370:	4770      	bx	lr
 8018372:	f803 1b01 	strb.w	r1, [r3], #1
 8018376:	e7f9      	b.n	801836c <memset+0x4>

08018378 <strncmp>:
 8018378:	b510      	push	{r4, lr}
 801837a:	b16a      	cbz	r2, 8018398 <strncmp+0x20>
 801837c:	3901      	subs	r1, #1
 801837e:	1884      	adds	r4, r0, r2
 8018380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018384:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018388:	429a      	cmp	r2, r3
 801838a:	d103      	bne.n	8018394 <strncmp+0x1c>
 801838c:	42a0      	cmp	r0, r4
 801838e:	d001      	beq.n	8018394 <strncmp+0x1c>
 8018390:	2a00      	cmp	r2, #0
 8018392:	d1f5      	bne.n	8018380 <strncmp+0x8>
 8018394:	1ad0      	subs	r0, r2, r3
 8018396:	bd10      	pop	{r4, pc}
 8018398:	4610      	mov	r0, r2
 801839a:	e7fc      	b.n	8018396 <strncmp+0x1e>

0801839c <__strtok_r>:
 801839c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801839e:	b908      	cbnz	r0, 80183a4 <__strtok_r+0x8>
 80183a0:	6810      	ldr	r0, [r2, #0]
 80183a2:	b188      	cbz	r0, 80183c8 <__strtok_r+0x2c>
 80183a4:	4604      	mov	r4, r0
 80183a6:	4620      	mov	r0, r4
 80183a8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80183ac:	460f      	mov	r7, r1
 80183ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 80183b2:	b91e      	cbnz	r6, 80183bc <__strtok_r+0x20>
 80183b4:	b965      	cbnz	r5, 80183d0 <__strtok_r+0x34>
 80183b6:	6015      	str	r5, [r2, #0]
 80183b8:	4628      	mov	r0, r5
 80183ba:	e005      	b.n	80183c8 <__strtok_r+0x2c>
 80183bc:	42b5      	cmp	r5, r6
 80183be:	d1f6      	bne.n	80183ae <__strtok_r+0x12>
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d1f0      	bne.n	80183a6 <__strtok_r+0xa>
 80183c4:	6014      	str	r4, [r2, #0]
 80183c6:	7003      	strb	r3, [r0, #0]
 80183c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183ca:	461c      	mov	r4, r3
 80183cc:	e00c      	b.n	80183e8 <__strtok_r+0x4c>
 80183ce:	b915      	cbnz	r5, 80183d6 <__strtok_r+0x3a>
 80183d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80183d4:	460e      	mov	r6, r1
 80183d6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80183da:	42ab      	cmp	r3, r5
 80183dc:	d1f7      	bne.n	80183ce <__strtok_r+0x32>
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d0f3      	beq.n	80183ca <__strtok_r+0x2e>
 80183e2:	2300      	movs	r3, #0
 80183e4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80183e8:	6014      	str	r4, [r2, #0]
 80183ea:	e7ed      	b.n	80183c8 <__strtok_r+0x2c>

080183ec <strtok_r>:
 80183ec:	2301      	movs	r3, #1
 80183ee:	f7ff bfd5 	b.w	801839c <__strtok_r>
	...

080183f4 <_close_r>:
 80183f4:	b538      	push	{r3, r4, r5, lr}
 80183f6:	4d06      	ldr	r5, [pc, #24]	; (8018410 <_close_r+0x1c>)
 80183f8:	2300      	movs	r3, #0
 80183fa:	4604      	mov	r4, r0
 80183fc:	4608      	mov	r0, r1
 80183fe:	602b      	str	r3, [r5, #0]
 8018400:	f7e9 fa23 	bl	800184a <_close>
 8018404:	1c43      	adds	r3, r0, #1
 8018406:	d102      	bne.n	801840e <_close_r+0x1a>
 8018408:	682b      	ldr	r3, [r5, #0]
 801840a:	b103      	cbz	r3, 801840e <_close_r+0x1a>
 801840c:	6023      	str	r3, [r4, #0]
 801840e:	bd38      	pop	{r3, r4, r5, pc}
 8018410:	20009134 	.word	0x20009134

08018414 <_lseek_r>:
 8018414:	b538      	push	{r3, r4, r5, lr}
 8018416:	4d07      	ldr	r5, [pc, #28]	; (8018434 <_lseek_r+0x20>)
 8018418:	4604      	mov	r4, r0
 801841a:	4608      	mov	r0, r1
 801841c:	4611      	mov	r1, r2
 801841e:	2200      	movs	r2, #0
 8018420:	602a      	str	r2, [r5, #0]
 8018422:	461a      	mov	r2, r3
 8018424:	f7e9 fa38 	bl	8001898 <_lseek>
 8018428:	1c43      	adds	r3, r0, #1
 801842a:	d102      	bne.n	8018432 <_lseek_r+0x1e>
 801842c:	682b      	ldr	r3, [r5, #0]
 801842e:	b103      	cbz	r3, 8018432 <_lseek_r+0x1e>
 8018430:	6023      	str	r3, [r4, #0]
 8018432:	bd38      	pop	{r3, r4, r5, pc}
 8018434:	20009134 	.word	0x20009134

08018438 <_read_r>:
 8018438:	b538      	push	{r3, r4, r5, lr}
 801843a:	4d07      	ldr	r5, [pc, #28]	; (8018458 <_read_r+0x20>)
 801843c:	4604      	mov	r4, r0
 801843e:	4608      	mov	r0, r1
 8018440:	4611      	mov	r1, r2
 8018442:	2200      	movs	r2, #0
 8018444:	602a      	str	r2, [r5, #0]
 8018446:	461a      	mov	r2, r3
 8018448:	f7e9 f9c6 	bl	80017d8 <_read>
 801844c:	1c43      	adds	r3, r0, #1
 801844e:	d102      	bne.n	8018456 <_read_r+0x1e>
 8018450:	682b      	ldr	r3, [r5, #0]
 8018452:	b103      	cbz	r3, 8018456 <_read_r+0x1e>
 8018454:	6023      	str	r3, [r4, #0]
 8018456:	bd38      	pop	{r3, r4, r5, pc}
 8018458:	20009134 	.word	0x20009134

0801845c <_sbrk_r>:
 801845c:	b538      	push	{r3, r4, r5, lr}
 801845e:	4d06      	ldr	r5, [pc, #24]	; (8018478 <_sbrk_r+0x1c>)
 8018460:	2300      	movs	r3, #0
 8018462:	4604      	mov	r4, r0
 8018464:	4608      	mov	r0, r1
 8018466:	602b      	str	r3, [r5, #0]
 8018468:	f7e9 fa24 	bl	80018b4 <_sbrk>
 801846c:	1c43      	adds	r3, r0, #1
 801846e:	d102      	bne.n	8018476 <_sbrk_r+0x1a>
 8018470:	682b      	ldr	r3, [r5, #0]
 8018472:	b103      	cbz	r3, 8018476 <_sbrk_r+0x1a>
 8018474:	6023      	str	r3, [r4, #0]
 8018476:	bd38      	pop	{r3, r4, r5, pc}
 8018478:	20009134 	.word	0x20009134

0801847c <_write_r>:
 801847c:	b538      	push	{r3, r4, r5, lr}
 801847e:	4d07      	ldr	r5, [pc, #28]	; (801849c <_write_r+0x20>)
 8018480:	4604      	mov	r4, r0
 8018482:	4608      	mov	r0, r1
 8018484:	4611      	mov	r1, r2
 8018486:	2200      	movs	r2, #0
 8018488:	602a      	str	r2, [r5, #0]
 801848a:	461a      	mov	r2, r3
 801848c:	f7e9 f9c1 	bl	8001812 <_write>
 8018490:	1c43      	adds	r3, r0, #1
 8018492:	d102      	bne.n	801849a <_write_r+0x1e>
 8018494:	682b      	ldr	r3, [r5, #0]
 8018496:	b103      	cbz	r3, 801849a <_write_r+0x1e>
 8018498:	6023      	str	r3, [r4, #0]
 801849a:	bd38      	pop	{r3, r4, r5, pc}
 801849c:	20009134 	.word	0x20009134

080184a0 <__errno>:
 80184a0:	4b01      	ldr	r3, [pc, #4]	; (80184a8 <__errno+0x8>)
 80184a2:	6818      	ldr	r0, [r3, #0]
 80184a4:	4770      	bx	lr
 80184a6:	bf00      	nop
 80184a8:	20000360 	.word	0x20000360

080184ac <__libc_init_array>:
 80184ac:	b570      	push	{r4, r5, r6, lr}
 80184ae:	4d0d      	ldr	r5, [pc, #52]	; (80184e4 <__libc_init_array+0x38>)
 80184b0:	4c0d      	ldr	r4, [pc, #52]	; (80184e8 <__libc_init_array+0x3c>)
 80184b2:	1b64      	subs	r4, r4, r5
 80184b4:	10a4      	asrs	r4, r4, #2
 80184b6:	2600      	movs	r6, #0
 80184b8:	42a6      	cmp	r6, r4
 80184ba:	d109      	bne.n	80184d0 <__libc_init_array+0x24>
 80184bc:	4d0b      	ldr	r5, [pc, #44]	; (80184ec <__libc_init_array+0x40>)
 80184be:	4c0c      	ldr	r4, [pc, #48]	; (80184f0 <__libc_init_array+0x44>)
 80184c0:	f001 ff86 	bl	801a3d0 <_init>
 80184c4:	1b64      	subs	r4, r4, r5
 80184c6:	10a4      	asrs	r4, r4, #2
 80184c8:	2600      	movs	r6, #0
 80184ca:	42a6      	cmp	r6, r4
 80184cc:	d105      	bne.n	80184da <__libc_init_array+0x2e>
 80184ce:	bd70      	pop	{r4, r5, r6, pc}
 80184d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80184d4:	4798      	blx	r3
 80184d6:	3601      	adds	r6, #1
 80184d8:	e7ee      	b.n	80184b8 <__libc_init_array+0xc>
 80184da:	f855 3b04 	ldr.w	r3, [r5], #4
 80184de:	4798      	blx	r3
 80184e0:	3601      	adds	r6, #1
 80184e2:	e7f2      	b.n	80184ca <__libc_init_array+0x1e>
 80184e4:	0802742c 	.word	0x0802742c
 80184e8:	0802742c 	.word	0x0802742c
 80184ec:	0802742c 	.word	0x0802742c
 80184f0:	08027430 	.word	0x08027430

080184f4 <__retarget_lock_init_recursive>:
 80184f4:	4770      	bx	lr

080184f6 <__retarget_lock_acquire_recursive>:
 80184f6:	4770      	bx	lr

080184f8 <__retarget_lock_release_recursive>:
 80184f8:	4770      	bx	lr

080184fa <strcpy>:
 80184fa:	4603      	mov	r3, r0
 80184fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018500:	f803 2b01 	strb.w	r2, [r3], #1
 8018504:	2a00      	cmp	r2, #0
 8018506:	d1f9      	bne.n	80184fc <strcpy+0x2>
 8018508:	4770      	bx	lr

0801850a <memcpy>:
 801850a:	440a      	add	r2, r1
 801850c:	4291      	cmp	r1, r2
 801850e:	f100 33ff 	add.w	r3, r0, #4294967295
 8018512:	d100      	bne.n	8018516 <memcpy+0xc>
 8018514:	4770      	bx	lr
 8018516:	b510      	push	{r4, lr}
 8018518:	f811 4b01 	ldrb.w	r4, [r1], #1
 801851c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018520:	4291      	cmp	r1, r2
 8018522:	d1f9      	bne.n	8018518 <memcpy+0xe>
 8018524:	bd10      	pop	{r4, pc}
	...

08018528 <nan>:
 8018528:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018530 <nan+0x8>
 801852c:	4770      	bx	lr
 801852e:	bf00      	nop
 8018530:	00000000 	.word	0x00000000
 8018534:	7ff80000 	.word	0x7ff80000

08018538 <nanf>:
 8018538:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018540 <nanf+0x8>
 801853c:	4770      	bx	lr
 801853e:	bf00      	nop
 8018540:	7fc00000 	.word	0x7fc00000

08018544 <_free_r>:
 8018544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018546:	2900      	cmp	r1, #0
 8018548:	d044      	beq.n	80185d4 <_free_r+0x90>
 801854a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801854e:	9001      	str	r0, [sp, #4]
 8018550:	2b00      	cmp	r3, #0
 8018552:	f1a1 0404 	sub.w	r4, r1, #4
 8018556:	bfb8      	it	lt
 8018558:	18e4      	addlt	r4, r4, r3
 801855a:	f7fe fecd 	bl	80172f8 <__malloc_lock>
 801855e:	4a1e      	ldr	r2, [pc, #120]	; (80185d8 <_free_r+0x94>)
 8018560:	9801      	ldr	r0, [sp, #4]
 8018562:	6813      	ldr	r3, [r2, #0]
 8018564:	b933      	cbnz	r3, 8018574 <_free_r+0x30>
 8018566:	6063      	str	r3, [r4, #4]
 8018568:	6014      	str	r4, [r2, #0]
 801856a:	b003      	add	sp, #12
 801856c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018570:	f7fe bec8 	b.w	8017304 <__malloc_unlock>
 8018574:	42a3      	cmp	r3, r4
 8018576:	d908      	bls.n	801858a <_free_r+0x46>
 8018578:	6825      	ldr	r5, [r4, #0]
 801857a:	1961      	adds	r1, r4, r5
 801857c:	428b      	cmp	r3, r1
 801857e:	bf01      	itttt	eq
 8018580:	6819      	ldreq	r1, [r3, #0]
 8018582:	685b      	ldreq	r3, [r3, #4]
 8018584:	1949      	addeq	r1, r1, r5
 8018586:	6021      	streq	r1, [r4, #0]
 8018588:	e7ed      	b.n	8018566 <_free_r+0x22>
 801858a:	461a      	mov	r2, r3
 801858c:	685b      	ldr	r3, [r3, #4]
 801858e:	b10b      	cbz	r3, 8018594 <_free_r+0x50>
 8018590:	42a3      	cmp	r3, r4
 8018592:	d9fa      	bls.n	801858a <_free_r+0x46>
 8018594:	6811      	ldr	r1, [r2, #0]
 8018596:	1855      	adds	r5, r2, r1
 8018598:	42a5      	cmp	r5, r4
 801859a:	d10b      	bne.n	80185b4 <_free_r+0x70>
 801859c:	6824      	ldr	r4, [r4, #0]
 801859e:	4421      	add	r1, r4
 80185a0:	1854      	adds	r4, r2, r1
 80185a2:	42a3      	cmp	r3, r4
 80185a4:	6011      	str	r1, [r2, #0]
 80185a6:	d1e0      	bne.n	801856a <_free_r+0x26>
 80185a8:	681c      	ldr	r4, [r3, #0]
 80185aa:	685b      	ldr	r3, [r3, #4]
 80185ac:	6053      	str	r3, [r2, #4]
 80185ae:	440c      	add	r4, r1
 80185b0:	6014      	str	r4, [r2, #0]
 80185b2:	e7da      	b.n	801856a <_free_r+0x26>
 80185b4:	d902      	bls.n	80185bc <_free_r+0x78>
 80185b6:	230c      	movs	r3, #12
 80185b8:	6003      	str	r3, [r0, #0]
 80185ba:	e7d6      	b.n	801856a <_free_r+0x26>
 80185bc:	6825      	ldr	r5, [r4, #0]
 80185be:	1961      	adds	r1, r4, r5
 80185c0:	428b      	cmp	r3, r1
 80185c2:	bf04      	itt	eq
 80185c4:	6819      	ldreq	r1, [r3, #0]
 80185c6:	685b      	ldreq	r3, [r3, #4]
 80185c8:	6063      	str	r3, [r4, #4]
 80185ca:	bf04      	itt	eq
 80185cc:	1949      	addeq	r1, r1, r5
 80185ce:	6021      	streq	r1, [r4, #0]
 80185d0:	6054      	str	r4, [r2, #4]
 80185d2:	e7ca      	b.n	801856a <_free_r+0x26>
 80185d4:	b003      	add	sp, #12
 80185d6:	bd30      	pop	{r4, r5, pc}
 80185d8:	20008ff0 	.word	0x20008ff0

080185dc <rshift>:
 80185dc:	6903      	ldr	r3, [r0, #16]
 80185de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80185e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80185e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80185ea:	f100 0414 	add.w	r4, r0, #20
 80185ee:	dd45      	ble.n	801867c <rshift+0xa0>
 80185f0:	f011 011f 	ands.w	r1, r1, #31
 80185f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80185f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80185fc:	d10c      	bne.n	8018618 <rshift+0x3c>
 80185fe:	f100 0710 	add.w	r7, r0, #16
 8018602:	4629      	mov	r1, r5
 8018604:	42b1      	cmp	r1, r6
 8018606:	d334      	bcc.n	8018672 <rshift+0x96>
 8018608:	1a9b      	subs	r3, r3, r2
 801860a:	009b      	lsls	r3, r3, #2
 801860c:	1eea      	subs	r2, r5, #3
 801860e:	4296      	cmp	r6, r2
 8018610:	bf38      	it	cc
 8018612:	2300      	movcc	r3, #0
 8018614:	4423      	add	r3, r4
 8018616:	e015      	b.n	8018644 <rshift+0x68>
 8018618:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801861c:	f1c1 0820 	rsb	r8, r1, #32
 8018620:	40cf      	lsrs	r7, r1
 8018622:	f105 0e04 	add.w	lr, r5, #4
 8018626:	46a1      	mov	r9, r4
 8018628:	4576      	cmp	r6, lr
 801862a:	46f4      	mov	ip, lr
 801862c:	d815      	bhi.n	801865a <rshift+0x7e>
 801862e:	1a9a      	subs	r2, r3, r2
 8018630:	0092      	lsls	r2, r2, #2
 8018632:	3a04      	subs	r2, #4
 8018634:	3501      	adds	r5, #1
 8018636:	42ae      	cmp	r6, r5
 8018638:	bf38      	it	cc
 801863a:	2200      	movcc	r2, #0
 801863c:	18a3      	adds	r3, r4, r2
 801863e:	50a7      	str	r7, [r4, r2]
 8018640:	b107      	cbz	r7, 8018644 <rshift+0x68>
 8018642:	3304      	adds	r3, #4
 8018644:	1b1a      	subs	r2, r3, r4
 8018646:	42a3      	cmp	r3, r4
 8018648:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801864c:	bf08      	it	eq
 801864e:	2300      	moveq	r3, #0
 8018650:	6102      	str	r2, [r0, #16]
 8018652:	bf08      	it	eq
 8018654:	6143      	streq	r3, [r0, #20]
 8018656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801865a:	f8dc c000 	ldr.w	ip, [ip]
 801865e:	fa0c fc08 	lsl.w	ip, ip, r8
 8018662:	ea4c 0707 	orr.w	r7, ip, r7
 8018666:	f849 7b04 	str.w	r7, [r9], #4
 801866a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801866e:	40cf      	lsrs	r7, r1
 8018670:	e7da      	b.n	8018628 <rshift+0x4c>
 8018672:	f851 cb04 	ldr.w	ip, [r1], #4
 8018676:	f847 cf04 	str.w	ip, [r7, #4]!
 801867a:	e7c3      	b.n	8018604 <rshift+0x28>
 801867c:	4623      	mov	r3, r4
 801867e:	e7e1      	b.n	8018644 <rshift+0x68>

08018680 <__hexdig_fun>:
 8018680:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018684:	2b09      	cmp	r3, #9
 8018686:	d802      	bhi.n	801868e <__hexdig_fun+0xe>
 8018688:	3820      	subs	r0, #32
 801868a:	b2c0      	uxtb	r0, r0
 801868c:	4770      	bx	lr
 801868e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018692:	2b05      	cmp	r3, #5
 8018694:	d801      	bhi.n	801869a <__hexdig_fun+0x1a>
 8018696:	3847      	subs	r0, #71	; 0x47
 8018698:	e7f7      	b.n	801868a <__hexdig_fun+0xa>
 801869a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801869e:	2b05      	cmp	r3, #5
 80186a0:	d801      	bhi.n	80186a6 <__hexdig_fun+0x26>
 80186a2:	3827      	subs	r0, #39	; 0x27
 80186a4:	e7f1      	b.n	801868a <__hexdig_fun+0xa>
 80186a6:	2000      	movs	r0, #0
 80186a8:	4770      	bx	lr
	...

080186ac <__gethex>:
 80186ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186b0:	4617      	mov	r7, r2
 80186b2:	680a      	ldr	r2, [r1, #0]
 80186b4:	b085      	sub	sp, #20
 80186b6:	f102 0b02 	add.w	fp, r2, #2
 80186ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80186be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80186c2:	4681      	mov	r9, r0
 80186c4:	468a      	mov	sl, r1
 80186c6:	9302      	str	r3, [sp, #8]
 80186c8:	32fe      	adds	r2, #254	; 0xfe
 80186ca:	eb02 030b 	add.w	r3, r2, fp
 80186ce:	46d8      	mov	r8, fp
 80186d0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80186d4:	9301      	str	r3, [sp, #4]
 80186d6:	2830      	cmp	r0, #48	; 0x30
 80186d8:	d0f7      	beq.n	80186ca <__gethex+0x1e>
 80186da:	f7ff ffd1 	bl	8018680 <__hexdig_fun>
 80186de:	4604      	mov	r4, r0
 80186e0:	2800      	cmp	r0, #0
 80186e2:	d138      	bne.n	8018756 <__gethex+0xaa>
 80186e4:	49a7      	ldr	r1, [pc, #668]	; (8018984 <__gethex+0x2d8>)
 80186e6:	2201      	movs	r2, #1
 80186e8:	4640      	mov	r0, r8
 80186ea:	f7ff fe45 	bl	8018378 <strncmp>
 80186ee:	4606      	mov	r6, r0
 80186f0:	2800      	cmp	r0, #0
 80186f2:	d169      	bne.n	80187c8 <__gethex+0x11c>
 80186f4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80186f8:	465d      	mov	r5, fp
 80186fa:	f7ff ffc1 	bl	8018680 <__hexdig_fun>
 80186fe:	2800      	cmp	r0, #0
 8018700:	d064      	beq.n	80187cc <__gethex+0x120>
 8018702:	465a      	mov	r2, fp
 8018704:	7810      	ldrb	r0, [r2, #0]
 8018706:	2830      	cmp	r0, #48	; 0x30
 8018708:	4690      	mov	r8, r2
 801870a:	f102 0201 	add.w	r2, r2, #1
 801870e:	d0f9      	beq.n	8018704 <__gethex+0x58>
 8018710:	f7ff ffb6 	bl	8018680 <__hexdig_fun>
 8018714:	2301      	movs	r3, #1
 8018716:	fab0 f480 	clz	r4, r0
 801871a:	0964      	lsrs	r4, r4, #5
 801871c:	465e      	mov	r6, fp
 801871e:	9301      	str	r3, [sp, #4]
 8018720:	4642      	mov	r2, r8
 8018722:	4615      	mov	r5, r2
 8018724:	3201      	adds	r2, #1
 8018726:	7828      	ldrb	r0, [r5, #0]
 8018728:	f7ff ffaa 	bl	8018680 <__hexdig_fun>
 801872c:	2800      	cmp	r0, #0
 801872e:	d1f8      	bne.n	8018722 <__gethex+0x76>
 8018730:	4994      	ldr	r1, [pc, #592]	; (8018984 <__gethex+0x2d8>)
 8018732:	2201      	movs	r2, #1
 8018734:	4628      	mov	r0, r5
 8018736:	f7ff fe1f 	bl	8018378 <strncmp>
 801873a:	b978      	cbnz	r0, 801875c <__gethex+0xb0>
 801873c:	b946      	cbnz	r6, 8018750 <__gethex+0xa4>
 801873e:	1c6e      	adds	r6, r5, #1
 8018740:	4632      	mov	r2, r6
 8018742:	4615      	mov	r5, r2
 8018744:	3201      	adds	r2, #1
 8018746:	7828      	ldrb	r0, [r5, #0]
 8018748:	f7ff ff9a 	bl	8018680 <__hexdig_fun>
 801874c:	2800      	cmp	r0, #0
 801874e:	d1f8      	bne.n	8018742 <__gethex+0x96>
 8018750:	1b73      	subs	r3, r6, r5
 8018752:	009e      	lsls	r6, r3, #2
 8018754:	e004      	b.n	8018760 <__gethex+0xb4>
 8018756:	2400      	movs	r4, #0
 8018758:	4626      	mov	r6, r4
 801875a:	e7e1      	b.n	8018720 <__gethex+0x74>
 801875c:	2e00      	cmp	r6, #0
 801875e:	d1f7      	bne.n	8018750 <__gethex+0xa4>
 8018760:	782b      	ldrb	r3, [r5, #0]
 8018762:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018766:	2b50      	cmp	r3, #80	; 0x50
 8018768:	d13d      	bne.n	80187e6 <__gethex+0x13a>
 801876a:	786b      	ldrb	r3, [r5, #1]
 801876c:	2b2b      	cmp	r3, #43	; 0x2b
 801876e:	d02f      	beq.n	80187d0 <__gethex+0x124>
 8018770:	2b2d      	cmp	r3, #45	; 0x2d
 8018772:	d031      	beq.n	80187d8 <__gethex+0x12c>
 8018774:	1c69      	adds	r1, r5, #1
 8018776:	f04f 0b00 	mov.w	fp, #0
 801877a:	7808      	ldrb	r0, [r1, #0]
 801877c:	f7ff ff80 	bl	8018680 <__hexdig_fun>
 8018780:	1e42      	subs	r2, r0, #1
 8018782:	b2d2      	uxtb	r2, r2
 8018784:	2a18      	cmp	r2, #24
 8018786:	d82e      	bhi.n	80187e6 <__gethex+0x13a>
 8018788:	f1a0 0210 	sub.w	r2, r0, #16
 801878c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018790:	f7ff ff76 	bl	8018680 <__hexdig_fun>
 8018794:	f100 3cff 	add.w	ip, r0, #4294967295
 8018798:	fa5f fc8c 	uxtb.w	ip, ip
 801879c:	f1bc 0f18 	cmp.w	ip, #24
 80187a0:	d91d      	bls.n	80187de <__gethex+0x132>
 80187a2:	f1bb 0f00 	cmp.w	fp, #0
 80187a6:	d000      	beq.n	80187aa <__gethex+0xfe>
 80187a8:	4252      	negs	r2, r2
 80187aa:	4416      	add	r6, r2
 80187ac:	f8ca 1000 	str.w	r1, [sl]
 80187b0:	b1dc      	cbz	r4, 80187ea <__gethex+0x13e>
 80187b2:	9b01      	ldr	r3, [sp, #4]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	bf14      	ite	ne
 80187b8:	f04f 0800 	movne.w	r8, #0
 80187bc:	f04f 0806 	moveq.w	r8, #6
 80187c0:	4640      	mov	r0, r8
 80187c2:	b005      	add	sp, #20
 80187c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187c8:	4645      	mov	r5, r8
 80187ca:	4626      	mov	r6, r4
 80187cc:	2401      	movs	r4, #1
 80187ce:	e7c7      	b.n	8018760 <__gethex+0xb4>
 80187d0:	f04f 0b00 	mov.w	fp, #0
 80187d4:	1ca9      	adds	r1, r5, #2
 80187d6:	e7d0      	b.n	801877a <__gethex+0xce>
 80187d8:	f04f 0b01 	mov.w	fp, #1
 80187dc:	e7fa      	b.n	80187d4 <__gethex+0x128>
 80187de:	230a      	movs	r3, #10
 80187e0:	fb03 0002 	mla	r0, r3, r2, r0
 80187e4:	e7d0      	b.n	8018788 <__gethex+0xdc>
 80187e6:	4629      	mov	r1, r5
 80187e8:	e7e0      	b.n	80187ac <__gethex+0x100>
 80187ea:	eba5 0308 	sub.w	r3, r5, r8
 80187ee:	3b01      	subs	r3, #1
 80187f0:	4621      	mov	r1, r4
 80187f2:	2b07      	cmp	r3, #7
 80187f4:	dc0a      	bgt.n	801880c <__gethex+0x160>
 80187f6:	4648      	mov	r0, r9
 80187f8:	f000 fa5a 	bl	8018cb0 <_Balloc>
 80187fc:	4604      	mov	r4, r0
 80187fe:	b940      	cbnz	r0, 8018812 <__gethex+0x166>
 8018800:	4b61      	ldr	r3, [pc, #388]	; (8018988 <__gethex+0x2dc>)
 8018802:	4602      	mov	r2, r0
 8018804:	21e4      	movs	r1, #228	; 0xe4
 8018806:	4861      	ldr	r0, [pc, #388]	; (801898c <__gethex+0x2e0>)
 8018808:	f001 fabc 	bl	8019d84 <__assert_func>
 801880c:	3101      	adds	r1, #1
 801880e:	105b      	asrs	r3, r3, #1
 8018810:	e7ef      	b.n	80187f2 <__gethex+0x146>
 8018812:	f100 0a14 	add.w	sl, r0, #20
 8018816:	2300      	movs	r3, #0
 8018818:	495a      	ldr	r1, [pc, #360]	; (8018984 <__gethex+0x2d8>)
 801881a:	f8cd a004 	str.w	sl, [sp, #4]
 801881e:	469b      	mov	fp, r3
 8018820:	45a8      	cmp	r8, r5
 8018822:	d342      	bcc.n	80188aa <__gethex+0x1fe>
 8018824:	9801      	ldr	r0, [sp, #4]
 8018826:	f840 bb04 	str.w	fp, [r0], #4
 801882a:	eba0 000a 	sub.w	r0, r0, sl
 801882e:	1080      	asrs	r0, r0, #2
 8018830:	6120      	str	r0, [r4, #16]
 8018832:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8018836:	4658      	mov	r0, fp
 8018838:	f000 fb2c 	bl	8018e94 <__hi0bits>
 801883c:	683d      	ldr	r5, [r7, #0]
 801883e:	eba8 0000 	sub.w	r0, r8, r0
 8018842:	42a8      	cmp	r0, r5
 8018844:	dd59      	ble.n	80188fa <__gethex+0x24e>
 8018846:	eba0 0805 	sub.w	r8, r0, r5
 801884a:	4641      	mov	r1, r8
 801884c:	4620      	mov	r0, r4
 801884e:	f000 febb 	bl	80195c8 <__any_on>
 8018852:	4683      	mov	fp, r0
 8018854:	b1b8      	cbz	r0, 8018886 <__gethex+0x1da>
 8018856:	f108 33ff 	add.w	r3, r8, #4294967295
 801885a:	1159      	asrs	r1, r3, #5
 801885c:	f003 021f 	and.w	r2, r3, #31
 8018860:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8018864:	f04f 0b01 	mov.w	fp, #1
 8018868:	fa0b f202 	lsl.w	r2, fp, r2
 801886c:	420a      	tst	r2, r1
 801886e:	d00a      	beq.n	8018886 <__gethex+0x1da>
 8018870:	455b      	cmp	r3, fp
 8018872:	dd06      	ble.n	8018882 <__gethex+0x1d6>
 8018874:	f1a8 0102 	sub.w	r1, r8, #2
 8018878:	4620      	mov	r0, r4
 801887a:	f000 fea5 	bl	80195c8 <__any_on>
 801887e:	2800      	cmp	r0, #0
 8018880:	d138      	bne.n	80188f4 <__gethex+0x248>
 8018882:	f04f 0b02 	mov.w	fp, #2
 8018886:	4641      	mov	r1, r8
 8018888:	4620      	mov	r0, r4
 801888a:	f7ff fea7 	bl	80185dc <rshift>
 801888e:	4446      	add	r6, r8
 8018890:	68bb      	ldr	r3, [r7, #8]
 8018892:	42b3      	cmp	r3, r6
 8018894:	da41      	bge.n	801891a <__gethex+0x26e>
 8018896:	4621      	mov	r1, r4
 8018898:	4648      	mov	r0, r9
 801889a:	f000 fa49 	bl	8018d30 <_Bfree>
 801889e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80188a0:	2300      	movs	r3, #0
 80188a2:	6013      	str	r3, [r2, #0]
 80188a4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80188a8:	e78a      	b.n	80187c0 <__gethex+0x114>
 80188aa:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80188ae:	2a2e      	cmp	r2, #46	; 0x2e
 80188b0:	d014      	beq.n	80188dc <__gethex+0x230>
 80188b2:	2b20      	cmp	r3, #32
 80188b4:	d106      	bne.n	80188c4 <__gethex+0x218>
 80188b6:	9b01      	ldr	r3, [sp, #4]
 80188b8:	f843 bb04 	str.w	fp, [r3], #4
 80188bc:	f04f 0b00 	mov.w	fp, #0
 80188c0:	9301      	str	r3, [sp, #4]
 80188c2:	465b      	mov	r3, fp
 80188c4:	7828      	ldrb	r0, [r5, #0]
 80188c6:	9303      	str	r3, [sp, #12]
 80188c8:	f7ff feda 	bl	8018680 <__hexdig_fun>
 80188cc:	9b03      	ldr	r3, [sp, #12]
 80188ce:	f000 000f 	and.w	r0, r0, #15
 80188d2:	4098      	lsls	r0, r3
 80188d4:	ea4b 0b00 	orr.w	fp, fp, r0
 80188d8:	3304      	adds	r3, #4
 80188da:	e7a1      	b.n	8018820 <__gethex+0x174>
 80188dc:	45a8      	cmp	r8, r5
 80188de:	d8e8      	bhi.n	80188b2 <__gethex+0x206>
 80188e0:	2201      	movs	r2, #1
 80188e2:	4628      	mov	r0, r5
 80188e4:	9303      	str	r3, [sp, #12]
 80188e6:	f7ff fd47 	bl	8018378 <strncmp>
 80188ea:	4926      	ldr	r1, [pc, #152]	; (8018984 <__gethex+0x2d8>)
 80188ec:	9b03      	ldr	r3, [sp, #12]
 80188ee:	2800      	cmp	r0, #0
 80188f0:	d1df      	bne.n	80188b2 <__gethex+0x206>
 80188f2:	e795      	b.n	8018820 <__gethex+0x174>
 80188f4:	f04f 0b03 	mov.w	fp, #3
 80188f8:	e7c5      	b.n	8018886 <__gethex+0x1da>
 80188fa:	da0b      	bge.n	8018914 <__gethex+0x268>
 80188fc:	eba5 0800 	sub.w	r8, r5, r0
 8018900:	4621      	mov	r1, r4
 8018902:	4642      	mov	r2, r8
 8018904:	4648      	mov	r0, r9
 8018906:	f000 fc2d 	bl	8019164 <__lshift>
 801890a:	eba6 0608 	sub.w	r6, r6, r8
 801890e:	4604      	mov	r4, r0
 8018910:	f100 0a14 	add.w	sl, r0, #20
 8018914:	f04f 0b00 	mov.w	fp, #0
 8018918:	e7ba      	b.n	8018890 <__gethex+0x1e4>
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	42b3      	cmp	r3, r6
 801891e:	dd73      	ble.n	8018a08 <__gethex+0x35c>
 8018920:	1b9e      	subs	r6, r3, r6
 8018922:	42b5      	cmp	r5, r6
 8018924:	dc34      	bgt.n	8018990 <__gethex+0x2e4>
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	2b02      	cmp	r3, #2
 801892a:	d023      	beq.n	8018974 <__gethex+0x2c8>
 801892c:	2b03      	cmp	r3, #3
 801892e:	d025      	beq.n	801897c <__gethex+0x2d0>
 8018930:	2b01      	cmp	r3, #1
 8018932:	d115      	bne.n	8018960 <__gethex+0x2b4>
 8018934:	42b5      	cmp	r5, r6
 8018936:	d113      	bne.n	8018960 <__gethex+0x2b4>
 8018938:	2d01      	cmp	r5, #1
 801893a:	d10b      	bne.n	8018954 <__gethex+0x2a8>
 801893c:	9a02      	ldr	r2, [sp, #8]
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	6013      	str	r3, [r2, #0]
 8018942:	2301      	movs	r3, #1
 8018944:	6123      	str	r3, [r4, #16]
 8018946:	f8ca 3000 	str.w	r3, [sl]
 801894a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801894c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8018950:	601c      	str	r4, [r3, #0]
 8018952:	e735      	b.n	80187c0 <__gethex+0x114>
 8018954:	1e69      	subs	r1, r5, #1
 8018956:	4620      	mov	r0, r4
 8018958:	f000 fe36 	bl	80195c8 <__any_on>
 801895c:	2800      	cmp	r0, #0
 801895e:	d1ed      	bne.n	801893c <__gethex+0x290>
 8018960:	4621      	mov	r1, r4
 8018962:	4648      	mov	r0, r9
 8018964:	f000 f9e4 	bl	8018d30 <_Bfree>
 8018968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801896a:	2300      	movs	r3, #0
 801896c:	6013      	str	r3, [r2, #0]
 801896e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8018972:	e725      	b.n	80187c0 <__gethex+0x114>
 8018974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018976:	2b00      	cmp	r3, #0
 8018978:	d1f2      	bne.n	8018960 <__gethex+0x2b4>
 801897a:	e7df      	b.n	801893c <__gethex+0x290>
 801897c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801897e:	2b00      	cmp	r3, #0
 8018980:	d1dc      	bne.n	801893c <__gethex+0x290>
 8018982:	e7ed      	b.n	8018960 <__gethex+0x2b4>
 8018984:	08027068 	.word	0x08027068
 8018988:	080271d1 	.word	0x080271d1
 801898c:	080271e2 	.word	0x080271e2
 8018990:	f106 38ff 	add.w	r8, r6, #4294967295
 8018994:	f1bb 0f00 	cmp.w	fp, #0
 8018998:	d133      	bne.n	8018a02 <__gethex+0x356>
 801899a:	f1b8 0f00 	cmp.w	r8, #0
 801899e:	d004      	beq.n	80189aa <__gethex+0x2fe>
 80189a0:	4641      	mov	r1, r8
 80189a2:	4620      	mov	r0, r4
 80189a4:	f000 fe10 	bl	80195c8 <__any_on>
 80189a8:	4683      	mov	fp, r0
 80189aa:	ea4f 1268 	mov.w	r2, r8, asr #5
 80189ae:	2301      	movs	r3, #1
 80189b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80189b4:	f008 081f 	and.w	r8, r8, #31
 80189b8:	fa03 f308 	lsl.w	r3, r3, r8
 80189bc:	4213      	tst	r3, r2
 80189be:	4631      	mov	r1, r6
 80189c0:	4620      	mov	r0, r4
 80189c2:	bf18      	it	ne
 80189c4:	f04b 0b02 	orrne.w	fp, fp, #2
 80189c8:	1bad      	subs	r5, r5, r6
 80189ca:	f7ff fe07 	bl	80185dc <rshift>
 80189ce:	687e      	ldr	r6, [r7, #4]
 80189d0:	f04f 0802 	mov.w	r8, #2
 80189d4:	f1bb 0f00 	cmp.w	fp, #0
 80189d8:	d04a      	beq.n	8018a70 <__gethex+0x3c4>
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	2b02      	cmp	r3, #2
 80189de:	d016      	beq.n	8018a0e <__gethex+0x362>
 80189e0:	2b03      	cmp	r3, #3
 80189e2:	d018      	beq.n	8018a16 <__gethex+0x36a>
 80189e4:	2b01      	cmp	r3, #1
 80189e6:	d109      	bne.n	80189fc <__gethex+0x350>
 80189e8:	f01b 0f02 	tst.w	fp, #2
 80189ec:	d006      	beq.n	80189fc <__gethex+0x350>
 80189ee:	f8da 3000 	ldr.w	r3, [sl]
 80189f2:	ea4b 0b03 	orr.w	fp, fp, r3
 80189f6:	f01b 0f01 	tst.w	fp, #1
 80189fa:	d10f      	bne.n	8018a1c <__gethex+0x370>
 80189fc:	f048 0810 	orr.w	r8, r8, #16
 8018a00:	e036      	b.n	8018a70 <__gethex+0x3c4>
 8018a02:	f04f 0b01 	mov.w	fp, #1
 8018a06:	e7d0      	b.n	80189aa <__gethex+0x2fe>
 8018a08:	f04f 0801 	mov.w	r8, #1
 8018a0c:	e7e2      	b.n	80189d4 <__gethex+0x328>
 8018a0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018a10:	f1c3 0301 	rsb	r3, r3, #1
 8018a14:	930f      	str	r3, [sp, #60]	; 0x3c
 8018a16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d0ef      	beq.n	80189fc <__gethex+0x350>
 8018a1c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018a20:	f104 0214 	add.w	r2, r4, #20
 8018a24:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8018a28:	9301      	str	r3, [sp, #4]
 8018a2a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8018a2e:	2300      	movs	r3, #0
 8018a30:	4694      	mov	ip, r2
 8018a32:	f852 1b04 	ldr.w	r1, [r2], #4
 8018a36:	f1b1 3fff 	cmp.w	r1, #4294967295
 8018a3a:	d01e      	beq.n	8018a7a <__gethex+0x3ce>
 8018a3c:	3101      	adds	r1, #1
 8018a3e:	f8cc 1000 	str.w	r1, [ip]
 8018a42:	f1b8 0f02 	cmp.w	r8, #2
 8018a46:	f104 0214 	add.w	r2, r4, #20
 8018a4a:	d13d      	bne.n	8018ac8 <__gethex+0x41c>
 8018a4c:	683b      	ldr	r3, [r7, #0]
 8018a4e:	3b01      	subs	r3, #1
 8018a50:	42ab      	cmp	r3, r5
 8018a52:	d10b      	bne.n	8018a6c <__gethex+0x3c0>
 8018a54:	1169      	asrs	r1, r5, #5
 8018a56:	2301      	movs	r3, #1
 8018a58:	f005 051f 	and.w	r5, r5, #31
 8018a5c:	fa03 f505 	lsl.w	r5, r3, r5
 8018a60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018a64:	421d      	tst	r5, r3
 8018a66:	bf18      	it	ne
 8018a68:	f04f 0801 	movne.w	r8, #1
 8018a6c:	f048 0820 	orr.w	r8, r8, #32
 8018a70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018a72:	601c      	str	r4, [r3, #0]
 8018a74:	9b02      	ldr	r3, [sp, #8]
 8018a76:	601e      	str	r6, [r3, #0]
 8018a78:	e6a2      	b.n	80187c0 <__gethex+0x114>
 8018a7a:	4290      	cmp	r0, r2
 8018a7c:	f842 3c04 	str.w	r3, [r2, #-4]
 8018a80:	d8d6      	bhi.n	8018a30 <__gethex+0x384>
 8018a82:	68a2      	ldr	r2, [r4, #8]
 8018a84:	4593      	cmp	fp, r2
 8018a86:	db17      	blt.n	8018ab8 <__gethex+0x40c>
 8018a88:	6861      	ldr	r1, [r4, #4]
 8018a8a:	4648      	mov	r0, r9
 8018a8c:	3101      	adds	r1, #1
 8018a8e:	f000 f90f 	bl	8018cb0 <_Balloc>
 8018a92:	4682      	mov	sl, r0
 8018a94:	b918      	cbnz	r0, 8018a9e <__gethex+0x3f2>
 8018a96:	4b1b      	ldr	r3, [pc, #108]	; (8018b04 <__gethex+0x458>)
 8018a98:	4602      	mov	r2, r0
 8018a9a:	2184      	movs	r1, #132	; 0x84
 8018a9c:	e6b3      	b.n	8018806 <__gethex+0x15a>
 8018a9e:	6922      	ldr	r2, [r4, #16]
 8018aa0:	3202      	adds	r2, #2
 8018aa2:	f104 010c 	add.w	r1, r4, #12
 8018aa6:	0092      	lsls	r2, r2, #2
 8018aa8:	300c      	adds	r0, #12
 8018aaa:	f7ff fd2e 	bl	801850a <memcpy>
 8018aae:	4621      	mov	r1, r4
 8018ab0:	4648      	mov	r0, r9
 8018ab2:	f000 f93d 	bl	8018d30 <_Bfree>
 8018ab6:	4654      	mov	r4, sl
 8018ab8:	6922      	ldr	r2, [r4, #16]
 8018aba:	1c51      	adds	r1, r2, #1
 8018abc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018ac0:	6121      	str	r1, [r4, #16]
 8018ac2:	2101      	movs	r1, #1
 8018ac4:	6151      	str	r1, [r2, #20]
 8018ac6:	e7bc      	b.n	8018a42 <__gethex+0x396>
 8018ac8:	6921      	ldr	r1, [r4, #16]
 8018aca:	4559      	cmp	r1, fp
 8018acc:	dd0b      	ble.n	8018ae6 <__gethex+0x43a>
 8018ace:	2101      	movs	r1, #1
 8018ad0:	4620      	mov	r0, r4
 8018ad2:	f7ff fd83 	bl	80185dc <rshift>
 8018ad6:	68bb      	ldr	r3, [r7, #8]
 8018ad8:	3601      	adds	r6, #1
 8018ada:	42b3      	cmp	r3, r6
 8018adc:	f6ff aedb 	blt.w	8018896 <__gethex+0x1ea>
 8018ae0:	f04f 0801 	mov.w	r8, #1
 8018ae4:	e7c2      	b.n	8018a6c <__gethex+0x3c0>
 8018ae6:	f015 051f 	ands.w	r5, r5, #31
 8018aea:	d0f9      	beq.n	8018ae0 <__gethex+0x434>
 8018aec:	9b01      	ldr	r3, [sp, #4]
 8018aee:	441a      	add	r2, r3
 8018af0:	f1c5 0520 	rsb	r5, r5, #32
 8018af4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8018af8:	f000 f9cc 	bl	8018e94 <__hi0bits>
 8018afc:	42a8      	cmp	r0, r5
 8018afe:	dbe6      	blt.n	8018ace <__gethex+0x422>
 8018b00:	e7ee      	b.n	8018ae0 <__gethex+0x434>
 8018b02:	bf00      	nop
 8018b04:	080271d1 	.word	0x080271d1

08018b08 <L_shift>:
 8018b08:	f1c2 0208 	rsb	r2, r2, #8
 8018b0c:	0092      	lsls	r2, r2, #2
 8018b0e:	b570      	push	{r4, r5, r6, lr}
 8018b10:	f1c2 0620 	rsb	r6, r2, #32
 8018b14:	6843      	ldr	r3, [r0, #4]
 8018b16:	6804      	ldr	r4, [r0, #0]
 8018b18:	fa03 f506 	lsl.w	r5, r3, r6
 8018b1c:	432c      	orrs	r4, r5
 8018b1e:	40d3      	lsrs	r3, r2
 8018b20:	6004      	str	r4, [r0, #0]
 8018b22:	f840 3f04 	str.w	r3, [r0, #4]!
 8018b26:	4288      	cmp	r0, r1
 8018b28:	d3f4      	bcc.n	8018b14 <L_shift+0xc>
 8018b2a:	bd70      	pop	{r4, r5, r6, pc}

08018b2c <__match>:
 8018b2c:	b530      	push	{r4, r5, lr}
 8018b2e:	6803      	ldr	r3, [r0, #0]
 8018b30:	3301      	adds	r3, #1
 8018b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018b36:	b914      	cbnz	r4, 8018b3e <__match+0x12>
 8018b38:	6003      	str	r3, [r0, #0]
 8018b3a:	2001      	movs	r0, #1
 8018b3c:	bd30      	pop	{r4, r5, pc}
 8018b3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b42:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018b46:	2d19      	cmp	r5, #25
 8018b48:	bf98      	it	ls
 8018b4a:	3220      	addls	r2, #32
 8018b4c:	42a2      	cmp	r2, r4
 8018b4e:	d0f0      	beq.n	8018b32 <__match+0x6>
 8018b50:	2000      	movs	r0, #0
 8018b52:	e7f3      	b.n	8018b3c <__match+0x10>

08018b54 <__hexnan>:
 8018b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b58:	680b      	ldr	r3, [r1, #0]
 8018b5a:	6801      	ldr	r1, [r0, #0]
 8018b5c:	115e      	asrs	r6, r3, #5
 8018b5e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018b62:	f013 031f 	ands.w	r3, r3, #31
 8018b66:	b087      	sub	sp, #28
 8018b68:	bf18      	it	ne
 8018b6a:	3604      	addne	r6, #4
 8018b6c:	2500      	movs	r5, #0
 8018b6e:	1f37      	subs	r7, r6, #4
 8018b70:	4682      	mov	sl, r0
 8018b72:	4690      	mov	r8, r2
 8018b74:	9301      	str	r3, [sp, #4]
 8018b76:	f846 5c04 	str.w	r5, [r6, #-4]
 8018b7a:	46b9      	mov	r9, r7
 8018b7c:	463c      	mov	r4, r7
 8018b7e:	9502      	str	r5, [sp, #8]
 8018b80:	46ab      	mov	fp, r5
 8018b82:	784a      	ldrb	r2, [r1, #1]
 8018b84:	1c4b      	adds	r3, r1, #1
 8018b86:	9303      	str	r3, [sp, #12]
 8018b88:	b342      	cbz	r2, 8018bdc <__hexnan+0x88>
 8018b8a:	4610      	mov	r0, r2
 8018b8c:	9105      	str	r1, [sp, #20]
 8018b8e:	9204      	str	r2, [sp, #16]
 8018b90:	f7ff fd76 	bl	8018680 <__hexdig_fun>
 8018b94:	2800      	cmp	r0, #0
 8018b96:	d14f      	bne.n	8018c38 <__hexnan+0xe4>
 8018b98:	9a04      	ldr	r2, [sp, #16]
 8018b9a:	9905      	ldr	r1, [sp, #20]
 8018b9c:	2a20      	cmp	r2, #32
 8018b9e:	d818      	bhi.n	8018bd2 <__hexnan+0x7e>
 8018ba0:	9b02      	ldr	r3, [sp, #8]
 8018ba2:	459b      	cmp	fp, r3
 8018ba4:	dd13      	ble.n	8018bce <__hexnan+0x7a>
 8018ba6:	454c      	cmp	r4, r9
 8018ba8:	d206      	bcs.n	8018bb8 <__hexnan+0x64>
 8018baa:	2d07      	cmp	r5, #7
 8018bac:	dc04      	bgt.n	8018bb8 <__hexnan+0x64>
 8018bae:	462a      	mov	r2, r5
 8018bb0:	4649      	mov	r1, r9
 8018bb2:	4620      	mov	r0, r4
 8018bb4:	f7ff ffa8 	bl	8018b08 <L_shift>
 8018bb8:	4544      	cmp	r4, r8
 8018bba:	d950      	bls.n	8018c5e <__hexnan+0x10a>
 8018bbc:	2300      	movs	r3, #0
 8018bbe:	f1a4 0904 	sub.w	r9, r4, #4
 8018bc2:	f844 3c04 	str.w	r3, [r4, #-4]
 8018bc6:	f8cd b008 	str.w	fp, [sp, #8]
 8018bca:	464c      	mov	r4, r9
 8018bcc:	461d      	mov	r5, r3
 8018bce:	9903      	ldr	r1, [sp, #12]
 8018bd0:	e7d7      	b.n	8018b82 <__hexnan+0x2e>
 8018bd2:	2a29      	cmp	r2, #41	; 0x29
 8018bd4:	d155      	bne.n	8018c82 <__hexnan+0x12e>
 8018bd6:	3102      	adds	r1, #2
 8018bd8:	f8ca 1000 	str.w	r1, [sl]
 8018bdc:	f1bb 0f00 	cmp.w	fp, #0
 8018be0:	d04f      	beq.n	8018c82 <__hexnan+0x12e>
 8018be2:	454c      	cmp	r4, r9
 8018be4:	d206      	bcs.n	8018bf4 <__hexnan+0xa0>
 8018be6:	2d07      	cmp	r5, #7
 8018be8:	dc04      	bgt.n	8018bf4 <__hexnan+0xa0>
 8018bea:	462a      	mov	r2, r5
 8018bec:	4649      	mov	r1, r9
 8018bee:	4620      	mov	r0, r4
 8018bf0:	f7ff ff8a 	bl	8018b08 <L_shift>
 8018bf4:	4544      	cmp	r4, r8
 8018bf6:	d934      	bls.n	8018c62 <__hexnan+0x10e>
 8018bf8:	f1a8 0204 	sub.w	r2, r8, #4
 8018bfc:	4623      	mov	r3, r4
 8018bfe:	f853 1b04 	ldr.w	r1, [r3], #4
 8018c02:	f842 1f04 	str.w	r1, [r2, #4]!
 8018c06:	429f      	cmp	r7, r3
 8018c08:	d2f9      	bcs.n	8018bfe <__hexnan+0xaa>
 8018c0a:	1b3b      	subs	r3, r7, r4
 8018c0c:	f023 0303 	bic.w	r3, r3, #3
 8018c10:	3304      	adds	r3, #4
 8018c12:	3e03      	subs	r6, #3
 8018c14:	3401      	adds	r4, #1
 8018c16:	42a6      	cmp	r6, r4
 8018c18:	bf38      	it	cc
 8018c1a:	2304      	movcc	r3, #4
 8018c1c:	4443      	add	r3, r8
 8018c1e:	2200      	movs	r2, #0
 8018c20:	f843 2b04 	str.w	r2, [r3], #4
 8018c24:	429f      	cmp	r7, r3
 8018c26:	d2fb      	bcs.n	8018c20 <__hexnan+0xcc>
 8018c28:	683b      	ldr	r3, [r7, #0]
 8018c2a:	b91b      	cbnz	r3, 8018c34 <__hexnan+0xe0>
 8018c2c:	4547      	cmp	r7, r8
 8018c2e:	d126      	bne.n	8018c7e <__hexnan+0x12a>
 8018c30:	2301      	movs	r3, #1
 8018c32:	603b      	str	r3, [r7, #0]
 8018c34:	2005      	movs	r0, #5
 8018c36:	e025      	b.n	8018c84 <__hexnan+0x130>
 8018c38:	3501      	adds	r5, #1
 8018c3a:	2d08      	cmp	r5, #8
 8018c3c:	f10b 0b01 	add.w	fp, fp, #1
 8018c40:	dd06      	ble.n	8018c50 <__hexnan+0xfc>
 8018c42:	4544      	cmp	r4, r8
 8018c44:	d9c3      	bls.n	8018bce <__hexnan+0x7a>
 8018c46:	2300      	movs	r3, #0
 8018c48:	f844 3c04 	str.w	r3, [r4, #-4]
 8018c4c:	2501      	movs	r5, #1
 8018c4e:	3c04      	subs	r4, #4
 8018c50:	6822      	ldr	r2, [r4, #0]
 8018c52:	f000 000f 	and.w	r0, r0, #15
 8018c56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018c5a:	6020      	str	r0, [r4, #0]
 8018c5c:	e7b7      	b.n	8018bce <__hexnan+0x7a>
 8018c5e:	2508      	movs	r5, #8
 8018c60:	e7b5      	b.n	8018bce <__hexnan+0x7a>
 8018c62:	9b01      	ldr	r3, [sp, #4]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d0df      	beq.n	8018c28 <__hexnan+0xd4>
 8018c68:	f1c3 0320 	rsb	r3, r3, #32
 8018c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8018c70:	40da      	lsrs	r2, r3
 8018c72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8018c76:	4013      	ands	r3, r2
 8018c78:	f846 3c04 	str.w	r3, [r6, #-4]
 8018c7c:	e7d4      	b.n	8018c28 <__hexnan+0xd4>
 8018c7e:	3f04      	subs	r7, #4
 8018c80:	e7d2      	b.n	8018c28 <__hexnan+0xd4>
 8018c82:	2004      	movs	r0, #4
 8018c84:	b007      	add	sp, #28
 8018c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c8a <__ascii_mbtowc>:
 8018c8a:	b082      	sub	sp, #8
 8018c8c:	b901      	cbnz	r1, 8018c90 <__ascii_mbtowc+0x6>
 8018c8e:	a901      	add	r1, sp, #4
 8018c90:	b142      	cbz	r2, 8018ca4 <__ascii_mbtowc+0x1a>
 8018c92:	b14b      	cbz	r3, 8018ca8 <__ascii_mbtowc+0x1e>
 8018c94:	7813      	ldrb	r3, [r2, #0]
 8018c96:	600b      	str	r3, [r1, #0]
 8018c98:	7812      	ldrb	r2, [r2, #0]
 8018c9a:	1e10      	subs	r0, r2, #0
 8018c9c:	bf18      	it	ne
 8018c9e:	2001      	movne	r0, #1
 8018ca0:	b002      	add	sp, #8
 8018ca2:	4770      	bx	lr
 8018ca4:	4610      	mov	r0, r2
 8018ca6:	e7fb      	b.n	8018ca0 <__ascii_mbtowc+0x16>
 8018ca8:	f06f 0001 	mvn.w	r0, #1
 8018cac:	e7f8      	b.n	8018ca0 <__ascii_mbtowc+0x16>
	...

08018cb0 <_Balloc>:
 8018cb0:	b570      	push	{r4, r5, r6, lr}
 8018cb2:	69c6      	ldr	r6, [r0, #28]
 8018cb4:	4604      	mov	r4, r0
 8018cb6:	460d      	mov	r5, r1
 8018cb8:	b976      	cbnz	r6, 8018cd8 <_Balloc+0x28>
 8018cba:	2010      	movs	r0, #16
 8018cbc:	f7fe fa6c 	bl	8017198 <malloc>
 8018cc0:	4602      	mov	r2, r0
 8018cc2:	61e0      	str	r0, [r4, #28]
 8018cc4:	b920      	cbnz	r0, 8018cd0 <_Balloc+0x20>
 8018cc6:	4b18      	ldr	r3, [pc, #96]	; (8018d28 <_Balloc+0x78>)
 8018cc8:	4818      	ldr	r0, [pc, #96]	; (8018d2c <_Balloc+0x7c>)
 8018cca:	216b      	movs	r1, #107	; 0x6b
 8018ccc:	f001 f85a 	bl	8019d84 <__assert_func>
 8018cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018cd4:	6006      	str	r6, [r0, #0]
 8018cd6:	60c6      	str	r6, [r0, #12]
 8018cd8:	69e6      	ldr	r6, [r4, #28]
 8018cda:	68f3      	ldr	r3, [r6, #12]
 8018cdc:	b183      	cbz	r3, 8018d00 <_Balloc+0x50>
 8018cde:	69e3      	ldr	r3, [r4, #28]
 8018ce0:	68db      	ldr	r3, [r3, #12]
 8018ce2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018ce6:	b9b8      	cbnz	r0, 8018d18 <_Balloc+0x68>
 8018ce8:	2101      	movs	r1, #1
 8018cea:	fa01 f605 	lsl.w	r6, r1, r5
 8018cee:	1d72      	adds	r2, r6, #5
 8018cf0:	0092      	lsls	r2, r2, #2
 8018cf2:	4620      	mov	r0, r4
 8018cf4:	f001 f864 	bl	8019dc0 <_calloc_r>
 8018cf8:	b160      	cbz	r0, 8018d14 <_Balloc+0x64>
 8018cfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018cfe:	e00e      	b.n	8018d1e <_Balloc+0x6e>
 8018d00:	2221      	movs	r2, #33	; 0x21
 8018d02:	2104      	movs	r1, #4
 8018d04:	4620      	mov	r0, r4
 8018d06:	f001 f85b 	bl	8019dc0 <_calloc_r>
 8018d0a:	69e3      	ldr	r3, [r4, #28]
 8018d0c:	60f0      	str	r0, [r6, #12]
 8018d0e:	68db      	ldr	r3, [r3, #12]
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d1e4      	bne.n	8018cde <_Balloc+0x2e>
 8018d14:	2000      	movs	r0, #0
 8018d16:	bd70      	pop	{r4, r5, r6, pc}
 8018d18:	6802      	ldr	r2, [r0, #0]
 8018d1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018d1e:	2300      	movs	r3, #0
 8018d20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018d24:	e7f7      	b.n	8018d16 <_Balloc+0x66>
 8018d26:	bf00      	nop
 8018d28:	08027242 	.word	0x08027242
 8018d2c:	08027259 	.word	0x08027259

08018d30 <_Bfree>:
 8018d30:	b570      	push	{r4, r5, r6, lr}
 8018d32:	69c6      	ldr	r6, [r0, #28]
 8018d34:	4605      	mov	r5, r0
 8018d36:	460c      	mov	r4, r1
 8018d38:	b976      	cbnz	r6, 8018d58 <_Bfree+0x28>
 8018d3a:	2010      	movs	r0, #16
 8018d3c:	f7fe fa2c 	bl	8017198 <malloc>
 8018d40:	4602      	mov	r2, r0
 8018d42:	61e8      	str	r0, [r5, #28]
 8018d44:	b920      	cbnz	r0, 8018d50 <_Bfree+0x20>
 8018d46:	4b09      	ldr	r3, [pc, #36]	; (8018d6c <_Bfree+0x3c>)
 8018d48:	4809      	ldr	r0, [pc, #36]	; (8018d70 <_Bfree+0x40>)
 8018d4a:	218f      	movs	r1, #143	; 0x8f
 8018d4c:	f001 f81a 	bl	8019d84 <__assert_func>
 8018d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018d54:	6006      	str	r6, [r0, #0]
 8018d56:	60c6      	str	r6, [r0, #12]
 8018d58:	b13c      	cbz	r4, 8018d6a <_Bfree+0x3a>
 8018d5a:	69eb      	ldr	r3, [r5, #28]
 8018d5c:	6862      	ldr	r2, [r4, #4]
 8018d5e:	68db      	ldr	r3, [r3, #12]
 8018d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018d64:	6021      	str	r1, [r4, #0]
 8018d66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018d6a:	bd70      	pop	{r4, r5, r6, pc}
 8018d6c:	08027242 	.word	0x08027242
 8018d70:	08027259 	.word	0x08027259

08018d74 <__multadd>:
 8018d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d78:	690d      	ldr	r5, [r1, #16]
 8018d7a:	4607      	mov	r7, r0
 8018d7c:	460c      	mov	r4, r1
 8018d7e:	461e      	mov	r6, r3
 8018d80:	f101 0c14 	add.w	ip, r1, #20
 8018d84:	2000      	movs	r0, #0
 8018d86:	f8dc 3000 	ldr.w	r3, [ip]
 8018d8a:	b299      	uxth	r1, r3
 8018d8c:	fb02 6101 	mla	r1, r2, r1, r6
 8018d90:	0c1e      	lsrs	r6, r3, #16
 8018d92:	0c0b      	lsrs	r3, r1, #16
 8018d94:	fb02 3306 	mla	r3, r2, r6, r3
 8018d98:	b289      	uxth	r1, r1
 8018d9a:	3001      	adds	r0, #1
 8018d9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018da0:	4285      	cmp	r5, r0
 8018da2:	f84c 1b04 	str.w	r1, [ip], #4
 8018da6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018daa:	dcec      	bgt.n	8018d86 <__multadd+0x12>
 8018dac:	b30e      	cbz	r6, 8018df2 <__multadd+0x7e>
 8018dae:	68a3      	ldr	r3, [r4, #8]
 8018db0:	42ab      	cmp	r3, r5
 8018db2:	dc19      	bgt.n	8018de8 <__multadd+0x74>
 8018db4:	6861      	ldr	r1, [r4, #4]
 8018db6:	4638      	mov	r0, r7
 8018db8:	3101      	adds	r1, #1
 8018dba:	f7ff ff79 	bl	8018cb0 <_Balloc>
 8018dbe:	4680      	mov	r8, r0
 8018dc0:	b928      	cbnz	r0, 8018dce <__multadd+0x5a>
 8018dc2:	4602      	mov	r2, r0
 8018dc4:	4b0c      	ldr	r3, [pc, #48]	; (8018df8 <__multadd+0x84>)
 8018dc6:	480d      	ldr	r0, [pc, #52]	; (8018dfc <__multadd+0x88>)
 8018dc8:	21ba      	movs	r1, #186	; 0xba
 8018dca:	f000 ffdb 	bl	8019d84 <__assert_func>
 8018dce:	6922      	ldr	r2, [r4, #16]
 8018dd0:	3202      	adds	r2, #2
 8018dd2:	f104 010c 	add.w	r1, r4, #12
 8018dd6:	0092      	lsls	r2, r2, #2
 8018dd8:	300c      	adds	r0, #12
 8018dda:	f7ff fb96 	bl	801850a <memcpy>
 8018dde:	4621      	mov	r1, r4
 8018de0:	4638      	mov	r0, r7
 8018de2:	f7ff ffa5 	bl	8018d30 <_Bfree>
 8018de6:	4644      	mov	r4, r8
 8018de8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018dec:	3501      	adds	r5, #1
 8018dee:	615e      	str	r6, [r3, #20]
 8018df0:	6125      	str	r5, [r4, #16]
 8018df2:	4620      	mov	r0, r4
 8018df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018df8:	080271d1 	.word	0x080271d1
 8018dfc:	08027259 	.word	0x08027259

08018e00 <__s2b>:
 8018e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e04:	460c      	mov	r4, r1
 8018e06:	4615      	mov	r5, r2
 8018e08:	461f      	mov	r7, r3
 8018e0a:	2209      	movs	r2, #9
 8018e0c:	3308      	adds	r3, #8
 8018e0e:	4606      	mov	r6, r0
 8018e10:	fb93 f3f2 	sdiv	r3, r3, r2
 8018e14:	2100      	movs	r1, #0
 8018e16:	2201      	movs	r2, #1
 8018e18:	429a      	cmp	r2, r3
 8018e1a:	db09      	blt.n	8018e30 <__s2b+0x30>
 8018e1c:	4630      	mov	r0, r6
 8018e1e:	f7ff ff47 	bl	8018cb0 <_Balloc>
 8018e22:	b940      	cbnz	r0, 8018e36 <__s2b+0x36>
 8018e24:	4602      	mov	r2, r0
 8018e26:	4b19      	ldr	r3, [pc, #100]	; (8018e8c <__s2b+0x8c>)
 8018e28:	4819      	ldr	r0, [pc, #100]	; (8018e90 <__s2b+0x90>)
 8018e2a:	21d3      	movs	r1, #211	; 0xd3
 8018e2c:	f000 ffaa 	bl	8019d84 <__assert_func>
 8018e30:	0052      	lsls	r2, r2, #1
 8018e32:	3101      	adds	r1, #1
 8018e34:	e7f0      	b.n	8018e18 <__s2b+0x18>
 8018e36:	9b08      	ldr	r3, [sp, #32]
 8018e38:	6143      	str	r3, [r0, #20]
 8018e3a:	2d09      	cmp	r5, #9
 8018e3c:	f04f 0301 	mov.w	r3, #1
 8018e40:	6103      	str	r3, [r0, #16]
 8018e42:	dd16      	ble.n	8018e72 <__s2b+0x72>
 8018e44:	f104 0909 	add.w	r9, r4, #9
 8018e48:	46c8      	mov	r8, r9
 8018e4a:	442c      	add	r4, r5
 8018e4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018e50:	4601      	mov	r1, r0
 8018e52:	3b30      	subs	r3, #48	; 0x30
 8018e54:	220a      	movs	r2, #10
 8018e56:	4630      	mov	r0, r6
 8018e58:	f7ff ff8c 	bl	8018d74 <__multadd>
 8018e5c:	45a0      	cmp	r8, r4
 8018e5e:	d1f5      	bne.n	8018e4c <__s2b+0x4c>
 8018e60:	f1a5 0408 	sub.w	r4, r5, #8
 8018e64:	444c      	add	r4, r9
 8018e66:	1b2d      	subs	r5, r5, r4
 8018e68:	1963      	adds	r3, r4, r5
 8018e6a:	42bb      	cmp	r3, r7
 8018e6c:	db04      	blt.n	8018e78 <__s2b+0x78>
 8018e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e72:	340a      	adds	r4, #10
 8018e74:	2509      	movs	r5, #9
 8018e76:	e7f6      	b.n	8018e66 <__s2b+0x66>
 8018e78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018e7c:	4601      	mov	r1, r0
 8018e7e:	3b30      	subs	r3, #48	; 0x30
 8018e80:	220a      	movs	r2, #10
 8018e82:	4630      	mov	r0, r6
 8018e84:	f7ff ff76 	bl	8018d74 <__multadd>
 8018e88:	e7ee      	b.n	8018e68 <__s2b+0x68>
 8018e8a:	bf00      	nop
 8018e8c:	080271d1 	.word	0x080271d1
 8018e90:	08027259 	.word	0x08027259

08018e94 <__hi0bits>:
 8018e94:	0c03      	lsrs	r3, r0, #16
 8018e96:	041b      	lsls	r3, r3, #16
 8018e98:	b9d3      	cbnz	r3, 8018ed0 <__hi0bits+0x3c>
 8018e9a:	0400      	lsls	r0, r0, #16
 8018e9c:	2310      	movs	r3, #16
 8018e9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018ea2:	bf04      	itt	eq
 8018ea4:	0200      	lsleq	r0, r0, #8
 8018ea6:	3308      	addeq	r3, #8
 8018ea8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018eac:	bf04      	itt	eq
 8018eae:	0100      	lsleq	r0, r0, #4
 8018eb0:	3304      	addeq	r3, #4
 8018eb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018eb6:	bf04      	itt	eq
 8018eb8:	0080      	lsleq	r0, r0, #2
 8018eba:	3302      	addeq	r3, #2
 8018ebc:	2800      	cmp	r0, #0
 8018ebe:	db05      	blt.n	8018ecc <__hi0bits+0x38>
 8018ec0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018ec4:	f103 0301 	add.w	r3, r3, #1
 8018ec8:	bf08      	it	eq
 8018eca:	2320      	moveq	r3, #32
 8018ecc:	4618      	mov	r0, r3
 8018ece:	4770      	bx	lr
 8018ed0:	2300      	movs	r3, #0
 8018ed2:	e7e4      	b.n	8018e9e <__hi0bits+0xa>

08018ed4 <__lo0bits>:
 8018ed4:	6803      	ldr	r3, [r0, #0]
 8018ed6:	f013 0207 	ands.w	r2, r3, #7
 8018eda:	d00c      	beq.n	8018ef6 <__lo0bits+0x22>
 8018edc:	07d9      	lsls	r1, r3, #31
 8018ede:	d422      	bmi.n	8018f26 <__lo0bits+0x52>
 8018ee0:	079a      	lsls	r2, r3, #30
 8018ee2:	bf49      	itett	mi
 8018ee4:	085b      	lsrmi	r3, r3, #1
 8018ee6:	089b      	lsrpl	r3, r3, #2
 8018ee8:	6003      	strmi	r3, [r0, #0]
 8018eea:	2201      	movmi	r2, #1
 8018eec:	bf5c      	itt	pl
 8018eee:	6003      	strpl	r3, [r0, #0]
 8018ef0:	2202      	movpl	r2, #2
 8018ef2:	4610      	mov	r0, r2
 8018ef4:	4770      	bx	lr
 8018ef6:	b299      	uxth	r1, r3
 8018ef8:	b909      	cbnz	r1, 8018efe <__lo0bits+0x2a>
 8018efa:	0c1b      	lsrs	r3, r3, #16
 8018efc:	2210      	movs	r2, #16
 8018efe:	b2d9      	uxtb	r1, r3
 8018f00:	b909      	cbnz	r1, 8018f06 <__lo0bits+0x32>
 8018f02:	3208      	adds	r2, #8
 8018f04:	0a1b      	lsrs	r3, r3, #8
 8018f06:	0719      	lsls	r1, r3, #28
 8018f08:	bf04      	itt	eq
 8018f0a:	091b      	lsreq	r3, r3, #4
 8018f0c:	3204      	addeq	r2, #4
 8018f0e:	0799      	lsls	r1, r3, #30
 8018f10:	bf04      	itt	eq
 8018f12:	089b      	lsreq	r3, r3, #2
 8018f14:	3202      	addeq	r2, #2
 8018f16:	07d9      	lsls	r1, r3, #31
 8018f18:	d403      	bmi.n	8018f22 <__lo0bits+0x4e>
 8018f1a:	085b      	lsrs	r3, r3, #1
 8018f1c:	f102 0201 	add.w	r2, r2, #1
 8018f20:	d003      	beq.n	8018f2a <__lo0bits+0x56>
 8018f22:	6003      	str	r3, [r0, #0]
 8018f24:	e7e5      	b.n	8018ef2 <__lo0bits+0x1e>
 8018f26:	2200      	movs	r2, #0
 8018f28:	e7e3      	b.n	8018ef2 <__lo0bits+0x1e>
 8018f2a:	2220      	movs	r2, #32
 8018f2c:	e7e1      	b.n	8018ef2 <__lo0bits+0x1e>
	...

08018f30 <__i2b>:
 8018f30:	b510      	push	{r4, lr}
 8018f32:	460c      	mov	r4, r1
 8018f34:	2101      	movs	r1, #1
 8018f36:	f7ff febb 	bl	8018cb0 <_Balloc>
 8018f3a:	4602      	mov	r2, r0
 8018f3c:	b928      	cbnz	r0, 8018f4a <__i2b+0x1a>
 8018f3e:	4b05      	ldr	r3, [pc, #20]	; (8018f54 <__i2b+0x24>)
 8018f40:	4805      	ldr	r0, [pc, #20]	; (8018f58 <__i2b+0x28>)
 8018f42:	f240 1145 	movw	r1, #325	; 0x145
 8018f46:	f000 ff1d 	bl	8019d84 <__assert_func>
 8018f4a:	2301      	movs	r3, #1
 8018f4c:	6144      	str	r4, [r0, #20]
 8018f4e:	6103      	str	r3, [r0, #16]
 8018f50:	bd10      	pop	{r4, pc}
 8018f52:	bf00      	nop
 8018f54:	080271d1 	.word	0x080271d1
 8018f58:	08027259 	.word	0x08027259

08018f5c <__multiply>:
 8018f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f60:	4691      	mov	r9, r2
 8018f62:	690a      	ldr	r2, [r1, #16]
 8018f64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018f68:	429a      	cmp	r2, r3
 8018f6a:	bfb8      	it	lt
 8018f6c:	460b      	movlt	r3, r1
 8018f6e:	460c      	mov	r4, r1
 8018f70:	bfbc      	itt	lt
 8018f72:	464c      	movlt	r4, r9
 8018f74:	4699      	movlt	r9, r3
 8018f76:	6927      	ldr	r7, [r4, #16]
 8018f78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018f7c:	68a3      	ldr	r3, [r4, #8]
 8018f7e:	6861      	ldr	r1, [r4, #4]
 8018f80:	eb07 060a 	add.w	r6, r7, sl
 8018f84:	42b3      	cmp	r3, r6
 8018f86:	b085      	sub	sp, #20
 8018f88:	bfb8      	it	lt
 8018f8a:	3101      	addlt	r1, #1
 8018f8c:	f7ff fe90 	bl	8018cb0 <_Balloc>
 8018f90:	b930      	cbnz	r0, 8018fa0 <__multiply+0x44>
 8018f92:	4602      	mov	r2, r0
 8018f94:	4b44      	ldr	r3, [pc, #272]	; (80190a8 <__multiply+0x14c>)
 8018f96:	4845      	ldr	r0, [pc, #276]	; (80190ac <__multiply+0x150>)
 8018f98:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8018f9c:	f000 fef2 	bl	8019d84 <__assert_func>
 8018fa0:	f100 0514 	add.w	r5, r0, #20
 8018fa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018fa8:	462b      	mov	r3, r5
 8018faa:	2200      	movs	r2, #0
 8018fac:	4543      	cmp	r3, r8
 8018fae:	d321      	bcc.n	8018ff4 <__multiply+0x98>
 8018fb0:	f104 0314 	add.w	r3, r4, #20
 8018fb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018fb8:	f109 0314 	add.w	r3, r9, #20
 8018fbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018fc0:	9202      	str	r2, [sp, #8]
 8018fc2:	1b3a      	subs	r2, r7, r4
 8018fc4:	3a15      	subs	r2, #21
 8018fc6:	f022 0203 	bic.w	r2, r2, #3
 8018fca:	3204      	adds	r2, #4
 8018fcc:	f104 0115 	add.w	r1, r4, #21
 8018fd0:	428f      	cmp	r7, r1
 8018fd2:	bf38      	it	cc
 8018fd4:	2204      	movcc	r2, #4
 8018fd6:	9201      	str	r2, [sp, #4]
 8018fd8:	9a02      	ldr	r2, [sp, #8]
 8018fda:	9303      	str	r3, [sp, #12]
 8018fdc:	429a      	cmp	r2, r3
 8018fde:	d80c      	bhi.n	8018ffa <__multiply+0x9e>
 8018fe0:	2e00      	cmp	r6, #0
 8018fe2:	dd03      	ble.n	8018fec <__multiply+0x90>
 8018fe4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d05b      	beq.n	80190a4 <__multiply+0x148>
 8018fec:	6106      	str	r6, [r0, #16]
 8018fee:	b005      	add	sp, #20
 8018ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ff4:	f843 2b04 	str.w	r2, [r3], #4
 8018ff8:	e7d8      	b.n	8018fac <__multiply+0x50>
 8018ffa:	f8b3 a000 	ldrh.w	sl, [r3]
 8018ffe:	f1ba 0f00 	cmp.w	sl, #0
 8019002:	d024      	beq.n	801904e <__multiply+0xf2>
 8019004:	f104 0e14 	add.w	lr, r4, #20
 8019008:	46a9      	mov	r9, r5
 801900a:	f04f 0c00 	mov.w	ip, #0
 801900e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019012:	f8d9 1000 	ldr.w	r1, [r9]
 8019016:	fa1f fb82 	uxth.w	fp, r2
 801901a:	b289      	uxth	r1, r1
 801901c:	fb0a 110b 	mla	r1, sl, fp, r1
 8019020:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019024:	f8d9 2000 	ldr.w	r2, [r9]
 8019028:	4461      	add	r1, ip
 801902a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801902e:	fb0a c20b 	mla	r2, sl, fp, ip
 8019032:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019036:	b289      	uxth	r1, r1
 8019038:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801903c:	4577      	cmp	r7, lr
 801903e:	f849 1b04 	str.w	r1, [r9], #4
 8019042:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019046:	d8e2      	bhi.n	801900e <__multiply+0xb2>
 8019048:	9a01      	ldr	r2, [sp, #4]
 801904a:	f845 c002 	str.w	ip, [r5, r2]
 801904e:	9a03      	ldr	r2, [sp, #12]
 8019050:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019054:	3304      	adds	r3, #4
 8019056:	f1b9 0f00 	cmp.w	r9, #0
 801905a:	d021      	beq.n	80190a0 <__multiply+0x144>
 801905c:	6829      	ldr	r1, [r5, #0]
 801905e:	f104 0c14 	add.w	ip, r4, #20
 8019062:	46ae      	mov	lr, r5
 8019064:	f04f 0a00 	mov.w	sl, #0
 8019068:	f8bc b000 	ldrh.w	fp, [ip]
 801906c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019070:	fb09 220b 	mla	r2, r9, fp, r2
 8019074:	4452      	add	r2, sl
 8019076:	b289      	uxth	r1, r1
 8019078:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801907c:	f84e 1b04 	str.w	r1, [lr], #4
 8019080:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019084:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019088:	f8be 1000 	ldrh.w	r1, [lr]
 801908c:	fb09 110a 	mla	r1, r9, sl, r1
 8019090:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8019094:	4567      	cmp	r7, ip
 8019096:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801909a:	d8e5      	bhi.n	8019068 <__multiply+0x10c>
 801909c:	9a01      	ldr	r2, [sp, #4]
 801909e:	50a9      	str	r1, [r5, r2]
 80190a0:	3504      	adds	r5, #4
 80190a2:	e799      	b.n	8018fd8 <__multiply+0x7c>
 80190a4:	3e01      	subs	r6, #1
 80190a6:	e79b      	b.n	8018fe0 <__multiply+0x84>
 80190a8:	080271d1 	.word	0x080271d1
 80190ac:	08027259 	.word	0x08027259

080190b0 <__pow5mult>:
 80190b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80190b4:	4615      	mov	r5, r2
 80190b6:	f012 0203 	ands.w	r2, r2, #3
 80190ba:	4606      	mov	r6, r0
 80190bc:	460f      	mov	r7, r1
 80190be:	d007      	beq.n	80190d0 <__pow5mult+0x20>
 80190c0:	4c25      	ldr	r4, [pc, #148]	; (8019158 <__pow5mult+0xa8>)
 80190c2:	3a01      	subs	r2, #1
 80190c4:	2300      	movs	r3, #0
 80190c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80190ca:	f7ff fe53 	bl	8018d74 <__multadd>
 80190ce:	4607      	mov	r7, r0
 80190d0:	10ad      	asrs	r5, r5, #2
 80190d2:	d03d      	beq.n	8019150 <__pow5mult+0xa0>
 80190d4:	69f4      	ldr	r4, [r6, #28]
 80190d6:	b97c      	cbnz	r4, 80190f8 <__pow5mult+0x48>
 80190d8:	2010      	movs	r0, #16
 80190da:	f7fe f85d 	bl	8017198 <malloc>
 80190de:	4602      	mov	r2, r0
 80190e0:	61f0      	str	r0, [r6, #28]
 80190e2:	b928      	cbnz	r0, 80190f0 <__pow5mult+0x40>
 80190e4:	4b1d      	ldr	r3, [pc, #116]	; (801915c <__pow5mult+0xac>)
 80190e6:	481e      	ldr	r0, [pc, #120]	; (8019160 <__pow5mult+0xb0>)
 80190e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80190ec:	f000 fe4a 	bl	8019d84 <__assert_func>
 80190f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80190f4:	6004      	str	r4, [r0, #0]
 80190f6:	60c4      	str	r4, [r0, #12]
 80190f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80190fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019100:	b94c      	cbnz	r4, 8019116 <__pow5mult+0x66>
 8019102:	f240 2171 	movw	r1, #625	; 0x271
 8019106:	4630      	mov	r0, r6
 8019108:	f7ff ff12 	bl	8018f30 <__i2b>
 801910c:	2300      	movs	r3, #0
 801910e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019112:	4604      	mov	r4, r0
 8019114:	6003      	str	r3, [r0, #0]
 8019116:	f04f 0900 	mov.w	r9, #0
 801911a:	07eb      	lsls	r3, r5, #31
 801911c:	d50a      	bpl.n	8019134 <__pow5mult+0x84>
 801911e:	4639      	mov	r1, r7
 8019120:	4622      	mov	r2, r4
 8019122:	4630      	mov	r0, r6
 8019124:	f7ff ff1a 	bl	8018f5c <__multiply>
 8019128:	4639      	mov	r1, r7
 801912a:	4680      	mov	r8, r0
 801912c:	4630      	mov	r0, r6
 801912e:	f7ff fdff 	bl	8018d30 <_Bfree>
 8019132:	4647      	mov	r7, r8
 8019134:	106d      	asrs	r5, r5, #1
 8019136:	d00b      	beq.n	8019150 <__pow5mult+0xa0>
 8019138:	6820      	ldr	r0, [r4, #0]
 801913a:	b938      	cbnz	r0, 801914c <__pow5mult+0x9c>
 801913c:	4622      	mov	r2, r4
 801913e:	4621      	mov	r1, r4
 8019140:	4630      	mov	r0, r6
 8019142:	f7ff ff0b 	bl	8018f5c <__multiply>
 8019146:	6020      	str	r0, [r4, #0]
 8019148:	f8c0 9000 	str.w	r9, [r0]
 801914c:	4604      	mov	r4, r0
 801914e:	e7e4      	b.n	801911a <__pow5mult+0x6a>
 8019150:	4638      	mov	r0, r7
 8019152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019156:	bf00      	nop
 8019158:	080273a8 	.word	0x080273a8
 801915c:	08027242 	.word	0x08027242
 8019160:	08027259 	.word	0x08027259

08019164 <__lshift>:
 8019164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019168:	460c      	mov	r4, r1
 801916a:	6849      	ldr	r1, [r1, #4]
 801916c:	6923      	ldr	r3, [r4, #16]
 801916e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019172:	68a3      	ldr	r3, [r4, #8]
 8019174:	4607      	mov	r7, r0
 8019176:	4691      	mov	r9, r2
 8019178:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801917c:	f108 0601 	add.w	r6, r8, #1
 8019180:	42b3      	cmp	r3, r6
 8019182:	db0b      	blt.n	801919c <__lshift+0x38>
 8019184:	4638      	mov	r0, r7
 8019186:	f7ff fd93 	bl	8018cb0 <_Balloc>
 801918a:	4605      	mov	r5, r0
 801918c:	b948      	cbnz	r0, 80191a2 <__lshift+0x3e>
 801918e:	4602      	mov	r2, r0
 8019190:	4b28      	ldr	r3, [pc, #160]	; (8019234 <__lshift+0xd0>)
 8019192:	4829      	ldr	r0, [pc, #164]	; (8019238 <__lshift+0xd4>)
 8019194:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8019198:	f000 fdf4 	bl	8019d84 <__assert_func>
 801919c:	3101      	adds	r1, #1
 801919e:	005b      	lsls	r3, r3, #1
 80191a0:	e7ee      	b.n	8019180 <__lshift+0x1c>
 80191a2:	2300      	movs	r3, #0
 80191a4:	f100 0114 	add.w	r1, r0, #20
 80191a8:	f100 0210 	add.w	r2, r0, #16
 80191ac:	4618      	mov	r0, r3
 80191ae:	4553      	cmp	r3, sl
 80191b0:	db33      	blt.n	801921a <__lshift+0xb6>
 80191b2:	6920      	ldr	r0, [r4, #16]
 80191b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80191b8:	f104 0314 	add.w	r3, r4, #20
 80191bc:	f019 091f 	ands.w	r9, r9, #31
 80191c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80191c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80191c8:	d02b      	beq.n	8019222 <__lshift+0xbe>
 80191ca:	f1c9 0e20 	rsb	lr, r9, #32
 80191ce:	468a      	mov	sl, r1
 80191d0:	2200      	movs	r2, #0
 80191d2:	6818      	ldr	r0, [r3, #0]
 80191d4:	fa00 f009 	lsl.w	r0, r0, r9
 80191d8:	4310      	orrs	r0, r2
 80191da:	f84a 0b04 	str.w	r0, [sl], #4
 80191de:	f853 2b04 	ldr.w	r2, [r3], #4
 80191e2:	459c      	cmp	ip, r3
 80191e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80191e8:	d8f3      	bhi.n	80191d2 <__lshift+0x6e>
 80191ea:	ebac 0304 	sub.w	r3, ip, r4
 80191ee:	3b15      	subs	r3, #21
 80191f0:	f023 0303 	bic.w	r3, r3, #3
 80191f4:	3304      	adds	r3, #4
 80191f6:	f104 0015 	add.w	r0, r4, #21
 80191fa:	4584      	cmp	ip, r0
 80191fc:	bf38      	it	cc
 80191fe:	2304      	movcc	r3, #4
 8019200:	50ca      	str	r2, [r1, r3]
 8019202:	b10a      	cbz	r2, 8019208 <__lshift+0xa4>
 8019204:	f108 0602 	add.w	r6, r8, #2
 8019208:	3e01      	subs	r6, #1
 801920a:	4638      	mov	r0, r7
 801920c:	612e      	str	r6, [r5, #16]
 801920e:	4621      	mov	r1, r4
 8019210:	f7ff fd8e 	bl	8018d30 <_Bfree>
 8019214:	4628      	mov	r0, r5
 8019216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801921a:	f842 0f04 	str.w	r0, [r2, #4]!
 801921e:	3301      	adds	r3, #1
 8019220:	e7c5      	b.n	80191ae <__lshift+0x4a>
 8019222:	3904      	subs	r1, #4
 8019224:	f853 2b04 	ldr.w	r2, [r3], #4
 8019228:	f841 2f04 	str.w	r2, [r1, #4]!
 801922c:	459c      	cmp	ip, r3
 801922e:	d8f9      	bhi.n	8019224 <__lshift+0xc0>
 8019230:	e7ea      	b.n	8019208 <__lshift+0xa4>
 8019232:	bf00      	nop
 8019234:	080271d1 	.word	0x080271d1
 8019238:	08027259 	.word	0x08027259

0801923c <__mcmp>:
 801923c:	b530      	push	{r4, r5, lr}
 801923e:	6902      	ldr	r2, [r0, #16]
 8019240:	690c      	ldr	r4, [r1, #16]
 8019242:	1b12      	subs	r2, r2, r4
 8019244:	d10e      	bne.n	8019264 <__mcmp+0x28>
 8019246:	f100 0314 	add.w	r3, r0, #20
 801924a:	3114      	adds	r1, #20
 801924c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019250:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019254:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019258:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801925c:	42a5      	cmp	r5, r4
 801925e:	d003      	beq.n	8019268 <__mcmp+0x2c>
 8019260:	d305      	bcc.n	801926e <__mcmp+0x32>
 8019262:	2201      	movs	r2, #1
 8019264:	4610      	mov	r0, r2
 8019266:	bd30      	pop	{r4, r5, pc}
 8019268:	4283      	cmp	r3, r0
 801926a:	d3f3      	bcc.n	8019254 <__mcmp+0x18>
 801926c:	e7fa      	b.n	8019264 <__mcmp+0x28>
 801926e:	f04f 32ff 	mov.w	r2, #4294967295
 8019272:	e7f7      	b.n	8019264 <__mcmp+0x28>

08019274 <__mdiff>:
 8019274:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019278:	460c      	mov	r4, r1
 801927a:	4606      	mov	r6, r0
 801927c:	4611      	mov	r1, r2
 801927e:	4620      	mov	r0, r4
 8019280:	4690      	mov	r8, r2
 8019282:	f7ff ffdb 	bl	801923c <__mcmp>
 8019286:	1e05      	subs	r5, r0, #0
 8019288:	d110      	bne.n	80192ac <__mdiff+0x38>
 801928a:	4629      	mov	r1, r5
 801928c:	4630      	mov	r0, r6
 801928e:	f7ff fd0f 	bl	8018cb0 <_Balloc>
 8019292:	b930      	cbnz	r0, 80192a2 <__mdiff+0x2e>
 8019294:	4b3a      	ldr	r3, [pc, #232]	; (8019380 <__mdiff+0x10c>)
 8019296:	4602      	mov	r2, r0
 8019298:	f240 2137 	movw	r1, #567	; 0x237
 801929c:	4839      	ldr	r0, [pc, #228]	; (8019384 <__mdiff+0x110>)
 801929e:	f000 fd71 	bl	8019d84 <__assert_func>
 80192a2:	2301      	movs	r3, #1
 80192a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80192a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192ac:	bfa4      	itt	ge
 80192ae:	4643      	movge	r3, r8
 80192b0:	46a0      	movge	r8, r4
 80192b2:	4630      	mov	r0, r6
 80192b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80192b8:	bfa6      	itte	ge
 80192ba:	461c      	movge	r4, r3
 80192bc:	2500      	movge	r5, #0
 80192be:	2501      	movlt	r5, #1
 80192c0:	f7ff fcf6 	bl	8018cb0 <_Balloc>
 80192c4:	b920      	cbnz	r0, 80192d0 <__mdiff+0x5c>
 80192c6:	4b2e      	ldr	r3, [pc, #184]	; (8019380 <__mdiff+0x10c>)
 80192c8:	4602      	mov	r2, r0
 80192ca:	f240 2145 	movw	r1, #581	; 0x245
 80192ce:	e7e5      	b.n	801929c <__mdiff+0x28>
 80192d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80192d4:	6926      	ldr	r6, [r4, #16]
 80192d6:	60c5      	str	r5, [r0, #12]
 80192d8:	f104 0914 	add.w	r9, r4, #20
 80192dc:	f108 0514 	add.w	r5, r8, #20
 80192e0:	f100 0e14 	add.w	lr, r0, #20
 80192e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80192e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80192ec:	f108 0210 	add.w	r2, r8, #16
 80192f0:	46f2      	mov	sl, lr
 80192f2:	2100      	movs	r1, #0
 80192f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80192f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80192fc:	fa11 f88b 	uxtah	r8, r1, fp
 8019300:	b299      	uxth	r1, r3
 8019302:	0c1b      	lsrs	r3, r3, #16
 8019304:	eba8 0801 	sub.w	r8, r8, r1
 8019308:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801930c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019310:	fa1f f888 	uxth.w	r8, r8
 8019314:	1419      	asrs	r1, r3, #16
 8019316:	454e      	cmp	r6, r9
 8019318:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801931c:	f84a 3b04 	str.w	r3, [sl], #4
 8019320:	d8e8      	bhi.n	80192f4 <__mdiff+0x80>
 8019322:	1b33      	subs	r3, r6, r4
 8019324:	3b15      	subs	r3, #21
 8019326:	f023 0303 	bic.w	r3, r3, #3
 801932a:	3304      	adds	r3, #4
 801932c:	3415      	adds	r4, #21
 801932e:	42a6      	cmp	r6, r4
 8019330:	bf38      	it	cc
 8019332:	2304      	movcc	r3, #4
 8019334:	441d      	add	r5, r3
 8019336:	4473      	add	r3, lr
 8019338:	469e      	mov	lr, r3
 801933a:	462e      	mov	r6, r5
 801933c:	4566      	cmp	r6, ip
 801933e:	d30e      	bcc.n	801935e <__mdiff+0xea>
 8019340:	f10c 0203 	add.w	r2, ip, #3
 8019344:	1b52      	subs	r2, r2, r5
 8019346:	f022 0203 	bic.w	r2, r2, #3
 801934a:	3d03      	subs	r5, #3
 801934c:	45ac      	cmp	ip, r5
 801934e:	bf38      	it	cc
 8019350:	2200      	movcc	r2, #0
 8019352:	4413      	add	r3, r2
 8019354:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019358:	b17a      	cbz	r2, 801937a <__mdiff+0x106>
 801935a:	6107      	str	r7, [r0, #16]
 801935c:	e7a4      	b.n	80192a8 <__mdiff+0x34>
 801935e:	f856 8b04 	ldr.w	r8, [r6], #4
 8019362:	fa11 f288 	uxtah	r2, r1, r8
 8019366:	1414      	asrs	r4, r2, #16
 8019368:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801936c:	b292      	uxth	r2, r2
 801936e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019372:	f84e 2b04 	str.w	r2, [lr], #4
 8019376:	1421      	asrs	r1, r4, #16
 8019378:	e7e0      	b.n	801933c <__mdiff+0xc8>
 801937a:	3f01      	subs	r7, #1
 801937c:	e7ea      	b.n	8019354 <__mdiff+0xe0>
 801937e:	bf00      	nop
 8019380:	080271d1 	.word	0x080271d1
 8019384:	08027259 	.word	0x08027259

08019388 <__ulp>:
 8019388:	b082      	sub	sp, #8
 801938a:	ed8d 0b00 	vstr	d0, [sp]
 801938e:	9a01      	ldr	r2, [sp, #4]
 8019390:	4b0f      	ldr	r3, [pc, #60]	; (80193d0 <__ulp+0x48>)
 8019392:	4013      	ands	r3, r2
 8019394:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8019398:	2b00      	cmp	r3, #0
 801939a:	dc08      	bgt.n	80193ae <__ulp+0x26>
 801939c:	425b      	negs	r3, r3
 801939e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80193a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80193a6:	da04      	bge.n	80193b2 <__ulp+0x2a>
 80193a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80193ac:	4113      	asrs	r3, r2
 80193ae:	2200      	movs	r2, #0
 80193b0:	e008      	b.n	80193c4 <__ulp+0x3c>
 80193b2:	f1a2 0314 	sub.w	r3, r2, #20
 80193b6:	2b1e      	cmp	r3, #30
 80193b8:	bfda      	itte	le
 80193ba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80193be:	40da      	lsrle	r2, r3
 80193c0:	2201      	movgt	r2, #1
 80193c2:	2300      	movs	r3, #0
 80193c4:	4619      	mov	r1, r3
 80193c6:	4610      	mov	r0, r2
 80193c8:	ec41 0b10 	vmov	d0, r0, r1
 80193cc:	b002      	add	sp, #8
 80193ce:	4770      	bx	lr
 80193d0:	7ff00000 	.word	0x7ff00000

080193d4 <__b2d>:
 80193d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193d8:	6906      	ldr	r6, [r0, #16]
 80193da:	f100 0814 	add.w	r8, r0, #20
 80193de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80193e2:	1f37      	subs	r7, r6, #4
 80193e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80193e8:	4610      	mov	r0, r2
 80193ea:	f7ff fd53 	bl	8018e94 <__hi0bits>
 80193ee:	f1c0 0320 	rsb	r3, r0, #32
 80193f2:	280a      	cmp	r0, #10
 80193f4:	600b      	str	r3, [r1, #0]
 80193f6:	491b      	ldr	r1, [pc, #108]	; (8019464 <__b2d+0x90>)
 80193f8:	dc15      	bgt.n	8019426 <__b2d+0x52>
 80193fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80193fe:	fa22 f30c 	lsr.w	r3, r2, ip
 8019402:	45b8      	cmp	r8, r7
 8019404:	ea43 0501 	orr.w	r5, r3, r1
 8019408:	bf34      	ite	cc
 801940a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801940e:	2300      	movcs	r3, #0
 8019410:	3015      	adds	r0, #21
 8019412:	fa02 f000 	lsl.w	r0, r2, r0
 8019416:	fa23 f30c 	lsr.w	r3, r3, ip
 801941a:	4303      	orrs	r3, r0
 801941c:	461c      	mov	r4, r3
 801941e:	ec45 4b10 	vmov	d0, r4, r5
 8019422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019426:	45b8      	cmp	r8, r7
 8019428:	bf3a      	itte	cc
 801942a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801942e:	f1a6 0708 	subcc.w	r7, r6, #8
 8019432:	2300      	movcs	r3, #0
 8019434:	380b      	subs	r0, #11
 8019436:	d012      	beq.n	801945e <__b2d+0x8a>
 8019438:	f1c0 0120 	rsb	r1, r0, #32
 801943c:	fa23 f401 	lsr.w	r4, r3, r1
 8019440:	4082      	lsls	r2, r0
 8019442:	4322      	orrs	r2, r4
 8019444:	4547      	cmp	r7, r8
 8019446:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801944a:	bf8c      	ite	hi
 801944c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8019450:	2200      	movls	r2, #0
 8019452:	4083      	lsls	r3, r0
 8019454:	40ca      	lsrs	r2, r1
 8019456:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801945a:	4313      	orrs	r3, r2
 801945c:	e7de      	b.n	801941c <__b2d+0x48>
 801945e:	ea42 0501 	orr.w	r5, r2, r1
 8019462:	e7db      	b.n	801941c <__b2d+0x48>
 8019464:	3ff00000 	.word	0x3ff00000

08019468 <__d2b>:
 8019468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801946c:	460f      	mov	r7, r1
 801946e:	2101      	movs	r1, #1
 8019470:	ec59 8b10 	vmov	r8, r9, d0
 8019474:	4616      	mov	r6, r2
 8019476:	f7ff fc1b 	bl	8018cb0 <_Balloc>
 801947a:	4604      	mov	r4, r0
 801947c:	b930      	cbnz	r0, 801948c <__d2b+0x24>
 801947e:	4602      	mov	r2, r0
 8019480:	4b24      	ldr	r3, [pc, #144]	; (8019514 <__d2b+0xac>)
 8019482:	4825      	ldr	r0, [pc, #148]	; (8019518 <__d2b+0xb0>)
 8019484:	f240 310f 	movw	r1, #783	; 0x30f
 8019488:	f000 fc7c 	bl	8019d84 <__assert_func>
 801948c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019490:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019494:	bb2d      	cbnz	r5, 80194e2 <__d2b+0x7a>
 8019496:	9301      	str	r3, [sp, #4]
 8019498:	f1b8 0300 	subs.w	r3, r8, #0
 801949c:	d026      	beq.n	80194ec <__d2b+0x84>
 801949e:	4668      	mov	r0, sp
 80194a0:	9300      	str	r3, [sp, #0]
 80194a2:	f7ff fd17 	bl	8018ed4 <__lo0bits>
 80194a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80194aa:	b1e8      	cbz	r0, 80194e8 <__d2b+0x80>
 80194ac:	f1c0 0320 	rsb	r3, r0, #32
 80194b0:	fa02 f303 	lsl.w	r3, r2, r3
 80194b4:	430b      	orrs	r3, r1
 80194b6:	40c2      	lsrs	r2, r0
 80194b8:	6163      	str	r3, [r4, #20]
 80194ba:	9201      	str	r2, [sp, #4]
 80194bc:	9b01      	ldr	r3, [sp, #4]
 80194be:	61a3      	str	r3, [r4, #24]
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	bf14      	ite	ne
 80194c4:	2202      	movne	r2, #2
 80194c6:	2201      	moveq	r2, #1
 80194c8:	6122      	str	r2, [r4, #16]
 80194ca:	b1bd      	cbz	r5, 80194fc <__d2b+0x94>
 80194cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80194d0:	4405      	add	r5, r0
 80194d2:	603d      	str	r5, [r7, #0]
 80194d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80194d8:	6030      	str	r0, [r6, #0]
 80194da:	4620      	mov	r0, r4
 80194dc:	b003      	add	sp, #12
 80194de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80194e6:	e7d6      	b.n	8019496 <__d2b+0x2e>
 80194e8:	6161      	str	r1, [r4, #20]
 80194ea:	e7e7      	b.n	80194bc <__d2b+0x54>
 80194ec:	a801      	add	r0, sp, #4
 80194ee:	f7ff fcf1 	bl	8018ed4 <__lo0bits>
 80194f2:	9b01      	ldr	r3, [sp, #4]
 80194f4:	6163      	str	r3, [r4, #20]
 80194f6:	3020      	adds	r0, #32
 80194f8:	2201      	movs	r2, #1
 80194fa:	e7e5      	b.n	80194c8 <__d2b+0x60>
 80194fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019500:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019504:	6038      	str	r0, [r7, #0]
 8019506:	6918      	ldr	r0, [r3, #16]
 8019508:	f7ff fcc4 	bl	8018e94 <__hi0bits>
 801950c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019510:	e7e2      	b.n	80194d8 <__d2b+0x70>
 8019512:	bf00      	nop
 8019514:	080271d1 	.word	0x080271d1
 8019518:	08027259 	.word	0x08027259

0801951c <__ratio>:
 801951c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019520:	4688      	mov	r8, r1
 8019522:	4669      	mov	r1, sp
 8019524:	4681      	mov	r9, r0
 8019526:	f7ff ff55 	bl	80193d4 <__b2d>
 801952a:	a901      	add	r1, sp, #4
 801952c:	4640      	mov	r0, r8
 801952e:	ec55 4b10 	vmov	r4, r5, d0
 8019532:	f7ff ff4f 	bl	80193d4 <__b2d>
 8019536:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801953a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801953e:	eba3 0c02 	sub.w	ip, r3, r2
 8019542:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019546:	1a9b      	subs	r3, r3, r2
 8019548:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801954c:	ec51 0b10 	vmov	r0, r1, d0
 8019550:	2b00      	cmp	r3, #0
 8019552:	bfd6      	itet	le
 8019554:	460a      	movle	r2, r1
 8019556:	462a      	movgt	r2, r5
 8019558:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801955c:	468b      	mov	fp, r1
 801955e:	462f      	mov	r7, r5
 8019560:	bfd4      	ite	le
 8019562:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019566:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801956a:	4620      	mov	r0, r4
 801956c:	ee10 2a10 	vmov	r2, s0
 8019570:	465b      	mov	r3, fp
 8019572:	4639      	mov	r1, r7
 8019574:	f7e7 f97a 	bl	800086c <__aeabi_ddiv>
 8019578:	ec41 0b10 	vmov	d0, r0, r1
 801957c:	b003      	add	sp, #12
 801957e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019582 <__copybits>:
 8019582:	3901      	subs	r1, #1
 8019584:	b570      	push	{r4, r5, r6, lr}
 8019586:	1149      	asrs	r1, r1, #5
 8019588:	6914      	ldr	r4, [r2, #16]
 801958a:	3101      	adds	r1, #1
 801958c:	f102 0314 	add.w	r3, r2, #20
 8019590:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019594:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019598:	1f05      	subs	r5, r0, #4
 801959a:	42a3      	cmp	r3, r4
 801959c:	d30c      	bcc.n	80195b8 <__copybits+0x36>
 801959e:	1aa3      	subs	r3, r4, r2
 80195a0:	3b11      	subs	r3, #17
 80195a2:	f023 0303 	bic.w	r3, r3, #3
 80195a6:	3211      	adds	r2, #17
 80195a8:	42a2      	cmp	r2, r4
 80195aa:	bf88      	it	hi
 80195ac:	2300      	movhi	r3, #0
 80195ae:	4418      	add	r0, r3
 80195b0:	2300      	movs	r3, #0
 80195b2:	4288      	cmp	r0, r1
 80195b4:	d305      	bcc.n	80195c2 <__copybits+0x40>
 80195b6:	bd70      	pop	{r4, r5, r6, pc}
 80195b8:	f853 6b04 	ldr.w	r6, [r3], #4
 80195bc:	f845 6f04 	str.w	r6, [r5, #4]!
 80195c0:	e7eb      	b.n	801959a <__copybits+0x18>
 80195c2:	f840 3b04 	str.w	r3, [r0], #4
 80195c6:	e7f4      	b.n	80195b2 <__copybits+0x30>

080195c8 <__any_on>:
 80195c8:	f100 0214 	add.w	r2, r0, #20
 80195cc:	6900      	ldr	r0, [r0, #16]
 80195ce:	114b      	asrs	r3, r1, #5
 80195d0:	4298      	cmp	r0, r3
 80195d2:	b510      	push	{r4, lr}
 80195d4:	db11      	blt.n	80195fa <__any_on+0x32>
 80195d6:	dd0a      	ble.n	80195ee <__any_on+0x26>
 80195d8:	f011 011f 	ands.w	r1, r1, #31
 80195dc:	d007      	beq.n	80195ee <__any_on+0x26>
 80195de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80195e2:	fa24 f001 	lsr.w	r0, r4, r1
 80195e6:	fa00 f101 	lsl.w	r1, r0, r1
 80195ea:	428c      	cmp	r4, r1
 80195ec:	d10b      	bne.n	8019606 <__any_on+0x3e>
 80195ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80195f2:	4293      	cmp	r3, r2
 80195f4:	d803      	bhi.n	80195fe <__any_on+0x36>
 80195f6:	2000      	movs	r0, #0
 80195f8:	bd10      	pop	{r4, pc}
 80195fa:	4603      	mov	r3, r0
 80195fc:	e7f7      	b.n	80195ee <__any_on+0x26>
 80195fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019602:	2900      	cmp	r1, #0
 8019604:	d0f5      	beq.n	80195f2 <__any_on+0x2a>
 8019606:	2001      	movs	r0, #1
 8019608:	e7f6      	b.n	80195f8 <__any_on+0x30>

0801960a <__ascii_wctomb>:
 801960a:	b149      	cbz	r1, 8019620 <__ascii_wctomb+0x16>
 801960c:	2aff      	cmp	r2, #255	; 0xff
 801960e:	bf85      	ittet	hi
 8019610:	238a      	movhi	r3, #138	; 0x8a
 8019612:	6003      	strhi	r3, [r0, #0]
 8019614:	700a      	strbls	r2, [r1, #0]
 8019616:	f04f 30ff 	movhi.w	r0, #4294967295
 801961a:	bf98      	it	ls
 801961c:	2001      	movls	r0, #1
 801961e:	4770      	bx	lr
 8019620:	4608      	mov	r0, r1
 8019622:	4770      	bx	lr

08019624 <__ssputs_r>:
 8019624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019628:	688e      	ldr	r6, [r1, #8]
 801962a:	461f      	mov	r7, r3
 801962c:	42be      	cmp	r6, r7
 801962e:	680b      	ldr	r3, [r1, #0]
 8019630:	4682      	mov	sl, r0
 8019632:	460c      	mov	r4, r1
 8019634:	4690      	mov	r8, r2
 8019636:	d82c      	bhi.n	8019692 <__ssputs_r+0x6e>
 8019638:	898a      	ldrh	r2, [r1, #12]
 801963a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801963e:	d026      	beq.n	801968e <__ssputs_r+0x6a>
 8019640:	6965      	ldr	r5, [r4, #20]
 8019642:	6909      	ldr	r1, [r1, #16]
 8019644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019648:	eba3 0901 	sub.w	r9, r3, r1
 801964c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019650:	1c7b      	adds	r3, r7, #1
 8019652:	444b      	add	r3, r9
 8019654:	106d      	asrs	r5, r5, #1
 8019656:	429d      	cmp	r5, r3
 8019658:	bf38      	it	cc
 801965a:	461d      	movcc	r5, r3
 801965c:	0553      	lsls	r3, r2, #21
 801965e:	d527      	bpl.n	80196b0 <__ssputs_r+0x8c>
 8019660:	4629      	mov	r1, r5
 8019662:	f7fd fdc9 	bl	80171f8 <_malloc_r>
 8019666:	4606      	mov	r6, r0
 8019668:	b360      	cbz	r0, 80196c4 <__ssputs_r+0xa0>
 801966a:	6921      	ldr	r1, [r4, #16]
 801966c:	464a      	mov	r2, r9
 801966e:	f7fe ff4c 	bl	801850a <memcpy>
 8019672:	89a3      	ldrh	r3, [r4, #12]
 8019674:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801967c:	81a3      	strh	r3, [r4, #12]
 801967e:	6126      	str	r6, [r4, #16]
 8019680:	6165      	str	r5, [r4, #20]
 8019682:	444e      	add	r6, r9
 8019684:	eba5 0509 	sub.w	r5, r5, r9
 8019688:	6026      	str	r6, [r4, #0]
 801968a:	60a5      	str	r5, [r4, #8]
 801968c:	463e      	mov	r6, r7
 801968e:	42be      	cmp	r6, r7
 8019690:	d900      	bls.n	8019694 <__ssputs_r+0x70>
 8019692:	463e      	mov	r6, r7
 8019694:	6820      	ldr	r0, [r4, #0]
 8019696:	4632      	mov	r2, r6
 8019698:	4641      	mov	r1, r8
 801969a:	f000 fb59 	bl	8019d50 <memmove>
 801969e:	68a3      	ldr	r3, [r4, #8]
 80196a0:	1b9b      	subs	r3, r3, r6
 80196a2:	60a3      	str	r3, [r4, #8]
 80196a4:	6823      	ldr	r3, [r4, #0]
 80196a6:	4433      	add	r3, r6
 80196a8:	6023      	str	r3, [r4, #0]
 80196aa:	2000      	movs	r0, #0
 80196ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196b0:	462a      	mov	r2, r5
 80196b2:	f000 fb9b 	bl	8019dec <_realloc_r>
 80196b6:	4606      	mov	r6, r0
 80196b8:	2800      	cmp	r0, #0
 80196ba:	d1e0      	bne.n	801967e <__ssputs_r+0x5a>
 80196bc:	6921      	ldr	r1, [r4, #16]
 80196be:	4650      	mov	r0, sl
 80196c0:	f7fe ff40 	bl	8018544 <_free_r>
 80196c4:	230c      	movs	r3, #12
 80196c6:	f8ca 3000 	str.w	r3, [sl]
 80196ca:	89a3      	ldrh	r3, [r4, #12]
 80196cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80196d0:	81a3      	strh	r3, [r4, #12]
 80196d2:	f04f 30ff 	mov.w	r0, #4294967295
 80196d6:	e7e9      	b.n	80196ac <__ssputs_r+0x88>

080196d8 <_svfiprintf_r>:
 80196d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196dc:	4698      	mov	r8, r3
 80196de:	898b      	ldrh	r3, [r1, #12]
 80196e0:	061b      	lsls	r3, r3, #24
 80196e2:	b09d      	sub	sp, #116	; 0x74
 80196e4:	4607      	mov	r7, r0
 80196e6:	460d      	mov	r5, r1
 80196e8:	4614      	mov	r4, r2
 80196ea:	d50e      	bpl.n	801970a <_svfiprintf_r+0x32>
 80196ec:	690b      	ldr	r3, [r1, #16]
 80196ee:	b963      	cbnz	r3, 801970a <_svfiprintf_r+0x32>
 80196f0:	2140      	movs	r1, #64	; 0x40
 80196f2:	f7fd fd81 	bl	80171f8 <_malloc_r>
 80196f6:	6028      	str	r0, [r5, #0]
 80196f8:	6128      	str	r0, [r5, #16]
 80196fa:	b920      	cbnz	r0, 8019706 <_svfiprintf_r+0x2e>
 80196fc:	230c      	movs	r3, #12
 80196fe:	603b      	str	r3, [r7, #0]
 8019700:	f04f 30ff 	mov.w	r0, #4294967295
 8019704:	e0d0      	b.n	80198a8 <_svfiprintf_r+0x1d0>
 8019706:	2340      	movs	r3, #64	; 0x40
 8019708:	616b      	str	r3, [r5, #20]
 801970a:	2300      	movs	r3, #0
 801970c:	9309      	str	r3, [sp, #36]	; 0x24
 801970e:	2320      	movs	r3, #32
 8019710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019714:	f8cd 800c 	str.w	r8, [sp, #12]
 8019718:	2330      	movs	r3, #48	; 0x30
 801971a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80198c0 <_svfiprintf_r+0x1e8>
 801971e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019722:	f04f 0901 	mov.w	r9, #1
 8019726:	4623      	mov	r3, r4
 8019728:	469a      	mov	sl, r3
 801972a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801972e:	b10a      	cbz	r2, 8019734 <_svfiprintf_r+0x5c>
 8019730:	2a25      	cmp	r2, #37	; 0x25
 8019732:	d1f9      	bne.n	8019728 <_svfiprintf_r+0x50>
 8019734:	ebba 0b04 	subs.w	fp, sl, r4
 8019738:	d00b      	beq.n	8019752 <_svfiprintf_r+0x7a>
 801973a:	465b      	mov	r3, fp
 801973c:	4622      	mov	r2, r4
 801973e:	4629      	mov	r1, r5
 8019740:	4638      	mov	r0, r7
 8019742:	f7ff ff6f 	bl	8019624 <__ssputs_r>
 8019746:	3001      	adds	r0, #1
 8019748:	f000 80a9 	beq.w	801989e <_svfiprintf_r+0x1c6>
 801974c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801974e:	445a      	add	r2, fp
 8019750:	9209      	str	r2, [sp, #36]	; 0x24
 8019752:	f89a 3000 	ldrb.w	r3, [sl]
 8019756:	2b00      	cmp	r3, #0
 8019758:	f000 80a1 	beq.w	801989e <_svfiprintf_r+0x1c6>
 801975c:	2300      	movs	r3, #0
 801975e:	f04f 32ff 	mov.w	r2, #4294967295
 8019762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019766:	f10a 0a01 	add.w	sl, sl, #1
 801976a:	9304      	str	r3, [sp, #16]
 801976c:	9307      	str	r3, [sp, #28]
 801976e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019772:	931a      	str	r3, [sp, #104]	; 0x68
 8019774:	4654      	mov	r4, sl
 8019776:	2205      	movs	r2, #5
 8019778:	f814 1b01 	ldrb.w	r1, [r4], #1
 801977c:	4850      	ldr	r0, [pc, #320]	; (80198c0 <_svfiprintf_r+0x1e8>)
 801977e:	f7e6 fd3f 	bl	8000200 <memchr>
 8019782:	9a04      	ldr	r2, [sp, #16]
 8019784:	b9d8      	cbnz	r0, 80197be <_svfiprintf_r+0xe6>
 8019786:	06d0      	lsls	r0, r2, #27
 8019788:	bf44      	itt	mi
 801978a:	2320      	movmi	r3, #32
 801978c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019790:	0711      	lsls	r1, r2, #28
 8019792:	bf44      	itt	mi
 8019794:	232b      	movmi	r3, #43	; 0x2b
 8019796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801979a:	f89a 3000 	ldrb.w	r3, [sl]
 801979e:	2b2a      	cmp	r3, #42	; 0x2a
 80197a0:	d015      	beq.n	80197ce <_svfiprintf_r+0xf6>
 80197a2:	9a07      	ldr	r2, [sp, #28]
 80197a4:	4654      	mov	r4, sl
 80197a6:	2000      	movs	r0, #0
 80197a8:	f04f 0c0a 	mov.w	ip, #10
 80197ac:	4621      	mov	r1, r4
 80197ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80197b2:	3b30      	subs	r3, #48	; 0x30
 80197b4:	2b09      	cmp	r3, #9
 80197b6:	d94d      	bls.n	8019854 <_svfiprintf_r+0x17c>
 80197b8:	b1b0      	cbz	r0, 80197e8 <_svfiprintf_r+0x110>
 80197ba:	9207      	str	r2, [sp, #28]
 80197bc:	e014      	b.n	80197e8 <_svfiprintf_r+0x110>
 80197be:	eba0 0308 	sub.w	r3, r0, r8
 80197c2:	fa09 f303 	lsl.w	r3, r9, r3
 80197c6:	4313      	orrs	r3, r2
 80197c8:	9304      	str	r3, [sp, #16]
 80197ca:	46a2      	mov	sl, r4
 80197cc:	e7d2      	b.n	8019774 <_svfiprintf_r+0x9c>
 80197ce:	9b03      	ldr	r3, [sp, #12]
 80197d0:	1d19      	adds	r1, r3, #4
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	9103      	str	r1, [sp, #12]
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	bfbb      	ittet	lt
 80197da:	425b      	neglt	r3, r3
 80197dc:	f042 0202 	orrlt.w	r2, r2, #2
 80197e0:	9307      	strge	r3, [sp, #28]
 80197e2:	9307      	strlt	r3, [sp, #28]
 80197e4:	bfb8      	it	lt
 80197e6:	9204      	strlt	r2, [sp, #16]
 80197e8:	7823      	ldrb	r3, [r4, #0]
 80197ea:	2b2e      	cmp	r3, #46	; 0x2e
 80197ec:	d10c      	bne.n	8019808 <_svfiprintf_r+0x130>
 80197ee:	7863      	ldrb	r3, [r4, #1]
 80197f0:	2b2a      	cmp	r3, #42	; 0x2a
 80197f2:	d134      	bne.n	801985e <_svfiprintf_r+0x186>
 80197f4:	9b03      	ldr	r3, [sp, #12]
 80197f6:	1d1a      	adds	r2, r3, #4
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	9203      	str	r2, [sp, #12]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	bfb8      	it	lt
 8019800:	f04f 33ff 	movlt.w	r3, #4294967295
 8019804:	3402      	adds	r4, #2
 8019806:	9305      	str	r3, [sp, #20]
 8019808:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80198d0 <_svfiprintf_r+0x1f8>
 801980c:	7821      	ldrb	r1, [r4, #0]
 801980e:	2203      	movs	r2, #3
 8019810:	4650      	mov	r0, sl
 8019812:	f7e6 fcf5 	bl	8000200 <memchr>
 8019816:	b138      	cbz	r0, 8019828 <_svfiprintf_r+0x150>
 8019818:	9b04      	ldr	r3, [sp, #16]
 801981a:	eba0 000a 	sub.w	r0, r0, sl
 801981e:	2240      	movs	r2, #64	; 0x40
 8019820:	4082      	lsls	r2, r0
 8019822:	4313      	orrs	r3, r2
 8019824:	3401      	adds	r4, #1
 8019826:	9304      	str	r3, [sp, #16]
 8019828:	f814 1b01 	ldrb.w	r1, [r4], #1
 801982c:	4825      	ldr	r0, [pc, #148]	; (80198c4 <_svfiprintf_r+0x1ec>)
 801982e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019832:	2206      	movs	r2, #6
 8019834:	f7e6 fce4 	bl	8000200 <memchr>
 8019838:	2800      	cmp	r0, #0
 801983a:	d038      	beq.n	80198ae <_svfiprintf_r+0x1d6>
 801983c:	4b22      	ldr	r3, [pc, #136]	; (80198c8 <_svfiprintf_r+0x1f0>)
 801983e:	bb1b      	cbnz	r3, 8019888 <_svfiprintf_r+0x1b0>
 8019840:	9b03      	ldr	r3, [sp, #12]
 8019842:	3307      	adds	r3, #7
 8019844:	f023 0307 	bic.w	r3, r3, #7
 8019848:	3308      	adds	r3, #8
 801984a:	9303      	str	r3, [sp, #12]
 801984c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801984e:	4433      	add	r3, r6
 8019850:	9309      	str	r3, [sp, #36]	; 0x24
 8019852:	e768      	b.n	8019726 <_svfiprintf_r+0x4e>
 8019854:	fb0c 3202 	mla	r2, ip, r2, r3
 8019858:	460c      	mov	r4, r1
 801985a:	2001      	movs	r0, #1
 801985c:	e7a6      	b.n	80197ac <_svfiprintf_r+0xd4>
 801985e:	2300      	movs	r3, #0
 8019860:	3401      	adds	r4, #1
 8019862:	9305      	str	r3, [sp, #20]
 8019864:	4619      	mov	r1, r3
 8019866:	f04f 0c0a 	mov.w	ip, #10
 801986a:	4620      	mov	r0, r4
 801986c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019870:	3a30      	subs	r2, #48	; 0x30
 8019872:	2a09      	cmp	r2, #9
 8019874:	d903      	bls.n	801987e <_svfiprintf_r+0x1a6>
 8019876:	2b00      	cmp	r3, #0
 8019878:	d0c6      	beq.n	8019808 <_svfiprintf_r+0x130>
 801987a:	9105      	str	r1, [sp, #20]
 801987c:	e7c4      	b.n	8019808 <_svfiprintf_r+0x130>
 801987e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019882:	4604      	mov	r4, r0
 8019884:	2301      	movs	r3, #1
 8019886:	e7f0      	b.n	801986a <_svfiprintf_r+0x192>
 8019888:	ab03      	add	r3, sp, #12
 801988a:	9300      	str	r3, [sp, #0]
 801988c:	462a      	mov	r2, r5
 801988e:	4b0f      	ldr	r3, [pc, #60]	; (80198cc <_svfiprintf_r+0x1f4>)
 8019890:	a904      	add	r1, sp, #16
 8019892:	4638      	mov	r0, r7
 8019894:	f3af 8000 	nop.w
 8019898:	1c42      	adds	r2, r0, #1
 801989a:	4606      	mov	r6, r0
 801989c:	d1d6      	bne.n	801984c <_svfiprintf_r+0x174>
 801989e:	89ab      	ldrh	r3, [r5, #12]
 80198a0:	065b      	lsls	r3, r3, #25
 80198a2:	f53f af2d 	bmi.w	8019700 <_svfiprintf_r+0x28>
 80198a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80198a8:	b01d      	add	sp, #116	; 0x74
 80198aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198ae:	ab03      	add	r3, sp, #12
 80198b0:	9300      	str	r3, [sp, #0]
 80198b2:	462a      	mov	r2, r5
 80198b4:	4b05      	ldr	r3, [pc, #20]	; (80198cc <_svfiprintf_r+0x1f4>)
 80198b6:	a904      	add	r1, sp, #16
 80198b8:	4638      	mov	r0, r7
 80198ba:	f000 f879 	bl	80199b0 <_printf_i>
 80198be:	e7eb      	b.n	8019898 <_svfiprintf_r+0x1c0>
 80198c0:	080273b4 	.word	0x080273b4
 80198c4:	080273be 	.word	0x080273be
 80198c8:	00000000 	.word	0x00000000
 80198cc:	08019625 	.word	0x08019625
 80198d0:	080273ba 	.word	0x080273ba

080198d4 <_printf_common>:
 80198d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198d8:	4616      	mov	r6, r2
 80198da:	4699      	mov	r9, r3
 80198dc:	688a      	ldr	r2, [r1, #8]
 80198de:	690b      	ldr	r3, [r1, #16]
 80198e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80198e4:	4293      	cmp	r3, r2
 80198e6:	bfb8      	it	lt
 80198e8:	4613      	movlt	r3, r2
 80198ea:	6033      	str	r3, [r6, #0]
 80198ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80198f0:	4607      	mov	r7, r0
 80198f2:	460c      	mov	r4, r1
 80198f4:	b10a      	cbz	r2, 80198fa <_printf_common+0x26>
 80198f6:	3301      	adds	r3, #1
 80198f8:	6033      	str	r3, [r6, #0]
 80198fa:	6823      	ldr	r3, [r4, #0]
 80198fc:	0699      	lsls	r1, r3, #26
 80198fe:	bf42      	ittt	mi
 8019900:	6833      	ldrmi	r3, [r6, #0]
 8019902:	3302      	addmi	r3, #2
 8019904:	6033      	strmi	r3, [r6, #0]
 8019906:	6825      	ldr	r5, [r4, #0]
 8019908:	f015 0506 	ands.w	r5, r5, #6
 801990c:	d106      	bne.n	801991c <_printf_common+0x48>
 801990e:	f104 0a19 	add.w	sl, r4, #25
 8019912:	68e3      	ldr	r3, [r4, #12]
 8019914:	6832      	ldr	r2, [r6, #0]
 8019916:	1a9b      	subs	r3, r3, r2
 8019918:	42ab      	cmp	r3, r5
 801991a:	dc26      	bgt.n	801996a <_printf_common+0x96>
 801991c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019920:	1e13      	subs	r3, r2, #0
 8019922:	6822      	ldr	r2, [r4, #0]
 8019924:	bf18      	it	ne
 8019926:	2301      	movne	r3, #1
 8019928:	0692      	lsls	r2, r2, #26
 801992a:	d42b      	bmi.n	8019984 <_printf_common+0xb0>
 801992c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019930:	4649      	mov	r1, r9
 8019932:	4638      	mov	r0, r7
 8019934:	47c0      	blx	r8
 8019936:	3001      	adds	r0, #1
 8019938:	d01e      	beq.n	8019978 <_printf_common+0xa4>
 801993a:	6823      	ldr	r3, [r4, #0]
 801993c:	6922      	ldr	r2, [r4, #16]
 801993e:	f003 0306 	and.w	r3, r3, #6
 8019942:	2b04      	cmp	r3, #4
 8019944:	bf02      	ittt	eq
 8019946:	68e5      	ldreq	r5, [r4, #12]
 8019948:	6833      	ldreq	r3, [r6, #0]
 801994a:	1aed      	subeq	r5, r5, r3
 801994c:	68a3      	ldr	r3, [r4, #8]
 801994e:	bf0c      	ite	eq
 8019950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019954:	2500      	movne	r5, #0
 8019956:	4293      	cmp	r3, r2
 8019958:	bfc4      	itt	gt
 801995a:	1a9b      	subgt	r3, r3, r2
 801995c:	18ed      	addgt	r5, r5, r3
 801995e:	2600      	movs	r6, #0
 8019960:	341a      	adds	r4, #26
 8019962:	42b5      	cmp	r5, r6
 8019964:	d11a      	bne.n	801999c <_printf_common+0xc8>
 8019966:	2000      	movs	r0, #0
 8019968:	e008      	b.n	801997c <_printf_common+0xa8>
 801996a:	2301      	movs	r3, #1
 801996c:	4652      	mov	r2, sl
 801996e:	4649      	mov	r1, r9
 8019970:	4638      	mov	r0, r7
 8019972:	47c0      	blx	r8
 8019974:	3001      	adds	r0, #1
 8019976:	d103      	bne.n	8019980 <_printf_common+0xac>
 8019978:	f04f 30ff 	mov.w	r0, #4294967295
 801997c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019980:	3501      	adds	r5, #1
 8019982:	e7c6      	b.n	8019912 <_printf_common+0x3e>
 8019984:	18e1      	adds	r1, r4, r3
 8019986:	1c5a      	adds	r2, r3, #1
 8019988:	2030      	movs	r0, #48	; 0x30
 801998a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801998e:	4422      	add	r2, r4
 8019990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019998:	3302      	adds	r3, #2
 801999a:	e7c7      	b.n	801992c <_printf_common+0x58>
 801999c:	2301      	movs	r3, #1
 801999e:	4622      	mov	r2, r4
 80199a0:	4649      	mov	r1, r9
 80199a2:	4638      	mov	r0, r7
 80199a4:	47c0      	blx	r8
 80199a6:	3001      	adds	r0, #1
 80199a8:	d0e6      	beq.n	8019978 <_printf_common+0xa4>
 80199aa:	3601      	adds	r6, #1
 80199ac:	e7d9      	b.n	8019962 <_printf_common+0x8e>
	...

080199b0 <_printf_i>:
 80199b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80199b4:	7e0f      	ldrb	r7, [r1, #24]
 80199b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80199b8:	2f78      	cmp	r7, #120	; 0x78
 80199ba:	4691      	mov	r9, r2
 80199bc:	4680      	mov	r8, r0
 80199be:	460c      	mov	r4, r1
 80199c0:	469a      	mov	sl, r3
 80199c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80199c6:	d807      	bhi.n	80199d8 <_printf_i+0x28>
 80199c8:	2f62      	cmp	r7, #98	; 0x62
 80199ca:	d80a      	bhi.n	80199e2 <_printf_i+0x32>
 80199cc:	2f00      	cmp	r7, #0
 80199ce:	f000 80d4 	beq.w	8019b7a <_printf_i+0x1ca>
 80199d2:	2f58      	cmp	r7, #88	; 0x58
 80199d4:	f000 80c0 	beq.w	8019b58 <_printf_i+0x1a8>
 80199d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80199dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80199e0:	e03a      	b.n	8019a58 <_printf_i+0xa8>
 80199e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80199e6:	2b15      	cmp	r3, #21
 80199e8:	d8f6      	bhi.n	80199d8 <_printf_i+0x28>
 80199ea:	a101      	add	r1, pc, #4	; (adr r1, 80199f0 <_printf_i+0x40>)
 80199ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80199f0:	08019a49 	.word	0x08019a49
 80199f4:	08019a5d 	.word	0x08019a5d
 80199f8:	080199d9 	.word	0x080199d9
 80199fc:	080199d9 	.word	0x080199d9
 8019a00:	080199d9 	.word	0x080199d9
 8019a04:	080199d9 	.word	0x080199d9
 8019a08:	08019a5d 	.word	0x08019a5d
 8019a0c:	080199d9 	.word	0x080199d9
 8019a10:	080199d9 	.word	0x080199d9
 8019a14:	080199d9 	.word	0x080199d9
 8019a18:	080199d9 	.word	0x080199d9
 8019a1c:	08019b61 	.word	0x08019b61
 8019a20:	08019a89 	.word	0x08019a89
 8019a24:	08019b1b 	.word	0x08019b1b
 8019a28:	080199d9 	.word	0x080199d9
 8019a2c:	080199d9 	.word	0x080199d9
 8019a30:	08019b83 	.word	0x08019b83
 8019a34:	080199d9 	.word	0x080199d9
 8019a38:	08019a89 	.word	0x08019a89
 8019a3c:	080199d9 	.word	0x080199d9
 8019a40:	080199d9 	.word	0x080199d9
 8019a44:	08019b23 	.word	0x08019b23
 8019a48:	682b      	ldr	r3, [r5, #0]
 8019a4a:	1d1a      	adds	r2, r3, #4
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	602a      	str	r2, [r5, #0]
 8019a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019a58:	2301      	movs	r3, #1
 8019a5a:	e09f      	b.n	8019b9c <_printf_i+0x1ec>
 8019a5c:	6820      	ldr	r0, [r4, #0]
 8019a5e:	682b      	ldr	r3, [r5, #0]
 8019a60:	0607      	lsls	r7, r0, #24
 8019a62:	f103 0104 	add.w	r1, r3, #4
 8019a66:	6029      	str	r1, [r5, #0]
 8019a68:	d501      	bpl.n	8019a6e <_printf_i+0xbe>
 8019a6a:	681e      	ldr	r6, [r3, #0]
 8019a6c:	e003      	b.n	8019a76 <_printf_i+0xc6>
 8019a6e:	0646      	lsls	r6, r0, #25
 8019a70:	d5fb      	bpl.n	8019a6a <_printf_i+0xba>
 8019a72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019a76:	2e00      	cmp	r6, #0
 8019a78:	da03      	bge.n	8019a82 <_printf_i+0xd2>
 8019a7a:	232d      	movs	r3, #45	; 0x2d
 8019a7c:	4276      	negs	r6, r6
 8019a7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a82:	485a      	ldr	r0, [pc, #360]	; (8019bec <_printf_i+0x23c>)
 8019a84:	230a      	movs	r3, #10
 8019a86:	e012      	b.n	8019aae <_printf_i+0xfe>
 8019a88:	682b      	ldr	r3, [r5, #0]
 8019a8a:	6820      	ldr	r0, [r4, #0]
 8019a8c:	1d19      	adds	r1, r3, #4
 8019a8e:	6029      	str	r1, [r5, #0]
 8019a90:	0605      	lsls	r5, r0, #24
 8019a92:	d501      	bpl.n	8019a98 <_printf_i+0xe8>
 8019a94:	681e      	ldr	r6, [r3, #0]
 8019a96:	e002      	b.n	8019a9e <_printf_i+0xee>
 8019a98:	0641      	lsls	r1, r0, #25
 8019a9a:	d5fb      	bpl.n	8019a94 <_printf_i+0xe4>
 8019a9c:	881e      	ldrh	r6, [r3, #0]
 8019a9e:	4853      	ldr	r0, [pc, #332]	; (8019bec <_printf_i+0x23c>)
 8019aa0:	2f6f      	cmp	r7, #111	; 0x6f
 8019aa2:	bf0c      	ite	eq
 8019aa4:	2308      	moveq	r3, #8
 8019aa6:	230a      	movne	r3, #10
 8019aa8:	2100      	movs	r1, #0
 8019aaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019aae:	6865      	ldr	r5, [r4, #4]
 8019ab0:	60a5      	str	r5, [r4, #8]
 8019ab2:	2d00      	cmp	r5, #0
 8019ab4:	bfa2      	ittt	ge
 8019ab6:	6821      	ldrge	r1, [r4, #0]
 8019ab8:	f021 0104 	bicge.w	r1, r1, #4
 8019abc:	6021      	strge	r1, [r4, #0]
 8019abe:	b90e      	cbnz	r6, 8019ac4 <_printf_i+0x114>
 8019ac0:	2d00      	cmp	r5, #0
 8019ac2:	d04b      	beq.n	8019b5c <_printf_i+0x1ac>
 8019ac4:	4615      	mov	r5, r2
 8019ac6:	fbb6 f1f3 	udiv	r1, r6, r3
 8019aca:	fb03 6711 	mls	r7, r3, r1, r6
 8019ace:	5dc7      	ldrb	r7, [r0, r7]
 8019ad0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019ad4:	4637      	mov	r7, r6
 8019ad6:	42bb      	cmp	r3, r7
 8019ad8:	460e      	mov	r6, r1
 8019ada:	d9f4      	bls.n	8019ac6 <_printf_i+0x116>
 8019adc:	2b08      	cmp	r3, #8
 8019ade:	d10b      	bne.n	8019af8 <_printf_i+0x148>
 8019ae0:	6823      	ldr	r3, [r4, #0]
 8019ae2:	07de      	lsls	r6, r3, #31
 8019ae4:	d508      	bpl.n	8019af8 <_printf_i+0x148>
 8019ae6:	6923      	ldr	r3, [r4, #16]
 8019ae8:	6861      	ldr	r1, [r4, #4]
 8019aea:	4299      	cmp	r1, r3
 8019aec:	bfde      	ittt	le
 8019aee:	2330      	movle	r3, #48	; 0x30
 8019af0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019af4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019af8:	1b52      	subs	r2, r2, r5
 8019afa:	6122      	str	r2, [r4, #16]
 8019afc:	f8cd a000 	str.w	sl, [sp]
 8019b00:	464b      	mov	r3, r9
 8019b02:	aa03      	add	r2, sp, #12
 8019b04:	4621      	mov	r1, r4
 8019b06:	4640      	mov	r0, r8
 8019b08:	f7ff fee4 	bl	80198d4 <_printf_common>
 8019b0c:	3001      	adds	r0, #1
 8019b0e:	d14a      	bne.n	8019ba6 <_printf_i+0x1f6>
 8019b10:	f04f 30ff 	mov.w	r0, #4294967295
 8019b14:	b004      	add	sp, #16
 8019b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b1a:	6823      	ldr	r3, [r4, #0]
 8019b1c:	f043 0320 	orr.w	r3, r3, #32
 8019b20:	6023      	str	r3, [r4, #0]
 8019b22:	4833      	ldr	r0, [pc, #204]	; (8019bf0 <_printf_i+0x240>)
 8019b24:	2778      	movs	r7, #120	; 0x78
 8019b26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019b2a:	6823      	ldr	r3, [r4, #0]
 8019b2c:	6829      	ldr	r1, [r5, #0]
 8019b2e:	061f      	lsls	r7, r3, #24
 8019b30:	f851 6b04 	ldr.w	r6, [r1], #4
 8019b34:	d402      	bmi.n	8019b3c <_printf_i+0x18c>
 8019b36:	065f      	lsls	r7, r3, #25
 8019b38:	bf48      	it	mi
 8019b3a:	b2b6      	uxthmi	r6, r6
 8019b3c:	07df      	lsls	r7, r3, #31
 8019b3e:	bf48      	it	mi
 8019b40:	f043 0320 	orrmi.w	r3, r3, #32
 8019b44:	6029      	str	r1, [r5, #0]
 8019b46:	bf48      	it	mi
 8019b48:	6023      	strmi	r3, [r4, #0]
 8019b4a:	b91e      	cbnz	r6, 8019b54 <_printf_i+0x1a4>
 8019b4c:	6823      	ldr	r3, [r4, #0]
 8019b4e:	f023 0320 	bic.w	r3, r3, #32
 8019b52:	6023      	str	r3, [r4, #0]
 8019b54:	2310      	movs	r3, #16
 8019b56:	e7a7      	b.n	8019aa8 <_printf_i+0xf8>
 8019b58:	4824      	ldr	r0, [pc, #144]	; (8019bec <_printf_i+0x23c>)
 8019b5a:	e7e4      	b.n	8019b26 <_printf_i+0x176>
 8019b5c:	4615      	mov	r5, r2
 8019b5e:	e7bd      	b.n	8019adc <_printf_i+0x12c>
 8019b60:	682b      	ldr	r3, [r5, #0]
 8019b62:	6826      	ldr	r6, [r4, #0]
 8019b64:	6961      	ldr	r1, [r4, #20]
 8019b66:	1d18      	adds	r0, r3, #4
 8019b68:	6028      	str	r0, [r5, #0]
 8019b6a:	0635      	lsls	r5, r6, #24
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	d501      	bpl.n	8019b74 <_printf_i+0x1c4>
 8019b70:	6019      	str	r1, [r3, #0]
 8019b72:	e002      	b.n	8019b7a <_printf_i+0x1ca>
 8019b74:	0670      	lsls	r0, r6, #25
 8019b76:	d5fb      	bpl.n	8019b70 <_printf_i+0x1c0>
 8019b78:	8019      	strh	r1, [r3, #0]
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	6123      	str	r3, [r4, #16]
 8019b7e:	4615      	mov	r5, r2
 8019b80:	e7bc      	b.n	8019afc <_printf_i+0x14c>
 8019b82:	682b      	ldr	r3, [r5, #0]
 8019b84:	1d1a      	adds	r2, r3, #4
 8019b86:	602a      	str	r2, [r5, #0]
 8019b88:	681d      	ldr	r5, [r3, #0]
 8019b8a:	6862      	ldr	r2, [r4, #4]
 8019b8c:	2100      	movs	r1, #0
 8019b8e:	4628      	mov	r0, r5
 8019b90:	f7e6 fb36 	bl	8000200 <memchr>
 8019b94:	b108      	cbz	r0, 8019b9a <_printf_i+0x1ea>
 8019b96:	1b40      	subs	r0, r0, r5
 8019b98:	6060      	str	r0, [r4, #4]
 8019b9a:	6863      	ldr	r3, [r4, #4]
 8019b9c:	6123      	str	r3, [r4, #16]
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019ba4:	e7aa      	b.n	8019afc <_printf_i+0x14c>
 8019ba6:	6923      	ldr	r3, [r4, #16]
 8019ba8:	462a      	mov	r2, r5
 8019baa:	4649      	mov	r1, r9
 8019bac:	4640      	mov	r0, r8
 8019bae:	47d0      	blx	sl
 8019bb0:	3001      	adds	r0, #1
 8019bb2:	d0ad      	beq.n	8019b10 <_printf_i+0x160>
 8019bb4:	6823      	ldr	r3, [r4, #0]
 8019bb6:	079b      	lsls	r3, r3, #30
 8019bb8:	d413      	bmi.n	8019be2 <_printf_i+0x232>
 8019bba:	68e0      	ldr	r0, [r4, #12]
 8019bbc:	9b03      	ldr	r3, [sp, #12]
 8019bbe:	4298      	cmp	r0, r3
 8019bc0:	bfb8      	it	lt
 8019bc2:	4618      	movlt	r0, r3
 8019bc4:	e7a6      	b.n	8019b14 <_printf_i+0x164>
 8019bc6:	2301      	movs	r3, #1
 8019bc8:	4632      	mov	r2, r6
 8019bca:	4649      	mov	r1, r9
 8019bcc:	4640      	mov	r0, r8
 8019bce:	47d0      	blx	sl
 8019bd0:	3001      	adds	r0, #1
 8019bd2:	d09d      	beq.n	8019b10 <_printf_i+0x160>
 8019bd4:	3501      	adds	r5, #1
 8019bd6:	68e3      	ldr	r3, [r4, #12]
 8019bd8:	9903      	ldr	r1, [sp, #12]
 8019bda:	1a5b      	subs	r3, r3, r1
 8019bdc:	42ab      	cmp	r3, r5
 8019bde:	dcf2      	bgt.n	8019bc6 <_printf_i+0x216>
 8019be0:	e7eb      	b.n	8019bba <_printf_i+0x20a>
 8019be2:	2500      	movs	r5, #0
 8019be4:	f104 0619 	add.w	r6, r4, #25
 8019be8:	e7f5      	b.n	8019bd6 <_printf_i+0x226>
 8019bea:	bf00      	nop
 8019bec:	080273c5 	.word	0x080273c5
 8019bf0:	080273d6 	.word	0x080273d6

08019bf4 <__sflush_r>:
 8019bf4:	898a      	ldrh	r2, [r1, #12]
 8019bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bfa:	4605      	mov	r5, r0
 8019bfc:	0710      	lsls	r0, r2, #28
 8019bfe:	460c      	mov	r4, r1
 8019c00:	d458      	bmi.n	8019cb4 <__sflush_r+0xc0>
 8019c02:	684b      	ldr	r3, [r1, #4]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	dc05      	bgt.n	8019c14 <__sflush_r+0x20>
 8019c08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	dc02      	bgt.n	8019c14 <__sflush_r+0x20>
 8019c0e:	2000      	movs	r0, #0
 8019c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019c16:	2e00      	cmp	r6, #0
 8019c18:	d0f9      	beq.n	8019c0e <__sflush_r+0x1a>
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019c20:	682f      	ldr	r7, [r5, #0]
 8019c22:	6a21      	ldr	r1, [r4, #32]
 8019c24:	602b      	str	r3, [r5, #0]
 8019c26:	d032      	beq.n	8019c8e <__sflush_r+0x9a>
 8019c28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019c2a:	89a3      	ldrh	r3, [r4, #12]
 8019c2c:	075a      	lsls	r2, r3, #29
 8019c2e:	d505      	bpl.n	8019c3c <__sflush_r+0x48>
 8019c30:	6863      	ldr	r3, [r4, #4]
 8019c32:	1ac0      	subs	r0, r0, r3
 8019c34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019c36:	b10b      	cbz	r3, 8019c3c <__sflush_r+0x48>
 8019c38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019c3a:	1ac0      	subs	r0, r0, r3
 8019c3c:	2300      	movs	r3, #0
 8019c3e:	4602      	mov	r2, r0
 8019c40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019c42:	6a21      	ldr	r1, [r4, #32]
 8019c44:	4628      	mov	r0, r5
 8019c46:	47b0      	blx	r6
 8019c48:	1c43      	adds	r3, r0, #1
 8019c4a:	89a3      	ldrh	r3, [r4, #12]
 8019c4c:	d106      	bne.n	8019c5c <__sflush_r+0x68>
 8019c4e:	6829      	ldr	r1, [r5, #0]
 8019c50:	291d      	cmp	r1, #29
 8019c52:	d82b      	bhi.n	8019cac <__sflush_r+0xb8>
 8019c54:	4a29      	ldr	r2, [pc, #164]	; (8019cfc <__sflush_r+0x108>)
 8019c56:	410a      	asrs	r2, r1
 8019c58:	07d6      	lsls	r6, r2, #31
 8019c5a:	d427      	bmi.n	8019cac <__sflush_r+0xb8>
 8019c5c:	2200      	movs	r2, #0
 8019c5e:	6062      	str	r2, [r4, #4]
 8019c60:	04d9      	lsls	r1, r3, #19
 8019c62:	6922      	ldr	r2, [r4, #16]
 8019c64:	6022      	str	r2, [r4, #0]
 8019c66:	d504      	bpl.n	8019c72 <__sflush_r+0x7e>
 8019c68:	1c42      	adds	r2, r0, #1
 8019c6a:	d101      	bne.n	8019c70 <__sflush_r+0x7c>
 8019c6c:	682b      	ldr	r3, [r5, #0]
 8019c6e:	b903      	cbnz	r3, 8019c72 <__sflush_r+0x7e>
 8019c70:	6560      	str	r0, [r4, #84]	; 0x54
 8019c72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019c74:	602f      	str	r7, [r5, #0]
 8019c76:	2900      	cmp	r1, #0
 8019c78:	d0c9      	beq.n	8019c0e <__sflush_r+0x1a>
 8019c7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c7e:	4299      	cmp	r1, r3
 8019c80:	d002      	beq.n	8019c88 <__sflush_r+0x94>
 8019c82:	4628      	mov	r0, r5
 8019c84:	f7fe fc5e 	bl	8018544 <_free_r>
 8019c88:	2000      	movs	r0, #0
 8019c8a:	6360      	str	r0, [r4, #52]	; 0x34
 8019c8c:	e7c0      	b.n	8019c10 <__sflush_r+0x1c>
 8019c8e:	2301      	movs	r3, #1
 8019c90:	4628      	mov	r0, r5
 8019c92:	47b0      	blx	r6
 8019c94:	1c41      	adds	r1, r0, #1
 8019c96:	d1c8      	bne.n	8019c2a <__sflush_r+0x36>
 8019c98:	682b      	ldr	r3, [r5, #0]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d0c5      	beq.n	8019c2a <__sflush_r+0x36>
 8019c9e:	2b1d      	cmp	r3, #29
 8019ca0:	d001      	beq.n	8019ca6 <__sflush_r+0xb2>
 8019ca2:	2b16      	cmp	r3, #22
 8019ca4:	d101      	bne.n	8019caa <__sflush_r+0xb6>
 8019ca6:	602f      	str	r7, [r5, #0]
 8019ca8:	e7b1      	b.n	8019c0e <__sflush_r+0x1a>
 8019caa:	89a3      	ldrh	r3, [r4, #12]
 8019cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019cb0:	81a3      	strh	r3, [r4, #12]
 8019cb2:	e7ad      	b.n	8019c10 <__sflush_r+0x1c>
 8019cb4:	690f      	ldr	r7, [r1, #16]
 8019cb6:	2f00      	cmp	r7, #0
 8019cb8:	d0a9      	beq.n	8019c0e <__sflush_r+0x1a>
 8019cba:	0793      	lsls	r3, r2, #30
 8019cbc:	680e      	ldr	r6, [r1, #0]
 8019cbe:	bf08      	it	eq
 8019cc0:	694b      	ldreq	r3, [r1, #20]
 8019cc2:	600f      	str	r7, [r1, #0]
 8019cc4:	bf18      	it	ne
 8019cc6:	2300      	movne	r3, #0
 8019cc8:	eba6 0807 	sub.w	r8, r6, r7
 8019ccc:	608b      	str	r3, [r1, #8]
 8019cce:	f1b8 0f00 	cmp.w	r8, #0
 8019cd2:	dd9c      	ble.n	8019c0e <__sflush_r+0x1a>
 8019cd4:	6a21      	ldr	r1, [r4, #32]
 8019cd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019cd8:	4643      	mov	r3, r8
 8019cda:	463a      	mov	r2, r7
 8019cdc:	4628      	mov	r0, r5
 8019cde:	47b0      	blx	r6
 8019ce0:	2800      	cmp	r0, #0
 8019ce2:	dc06      	bgt.n	8019cf2 <__sflush_r+0xfe>
 8019ce4:	89a3      	ldrh	r3, [r4, #12]
 8019ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019cea:	81a3      	strh	r3, [r4, #12]
 8019cec:	f04f 30ff 	mov.w	r0, #4294967295
 8019cf0:	e78e      	b.n	8019c10 <__sflush_r+0x1c>
 8019cf2:	4407      	add	r7, r0
 8019cf4:	eba8 0800 	sub.w	r8, r8, r0
 8019cf8:	e7e9      	b.n	8019cce <__sflush_r+0xda>
 8019cfa:	bf00      	nop
 8019cfc:	dfbffffe 	.word	0xdfbffffe

08019d00 <_fflush_r>:
 8019d00:	b538      	push	{r3, r4, r5, lr}
 8019d02:	690b      	ldr	r3, [r1, #16]
 8019d04:	4605      	mov	r5, r0
 8019d06:	460c      	mov	r4, r1
 8019d08:	b913      	cbnz	r3, 8019d10 <_fflush_r+0x10>
 8019d0a:	2500      	movs	r5, #0
 8019d0c:	4628      	mov	r0, r5
 8019d0e:	bd38      	pop	{r3, r4, r5, pc}
 8019d10:	b118      	cbz	r0, 8019d1a <_fflush_r+0x1a>
 8019d12:	6a03      	ldr	r3, [r0, #32]
 8019d14:	b90b      	cbnz	r3, 8019d1a <_fflush_r+0x1a>
 8019d16:	f7fe fa75 	bl	8018204 <__sinit>
 8019d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d0f3      	beq.n	8019d0a <_fflush_r+0xa>
 8019d22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019d24:	07d0      	lsls	r0, r2, #31
 8019d26:	d404      	bmi.n	8019d32 <_fflush_r+0x32>
 8019d28:	0599      	lsls	r1, r3, #22
 8019d2a:	d402      	bmi.n	8019d32 <_fflush_r+0x32>
 8019d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d2e:	f7fe fbe2 	bl	80184f6 <__retarget_lock_acquire_recursive>
 8019d32:	4628      	mov	r0, r5
 8019d34:	4621      	mov	r1, r4
 8019d36:	f7ff ff5d 	bl	8019bf4 <__sflush_r>
 8019d3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d3c:	07da      	lsls	r2, r3, #31
 8019d3e:	4605      	mov	r5, r0
 8019d40:	d4e4      	bmi.n	8019d0c <_fflush_r+0xc>
 8019d42:	89a3      	ldrh	r3, [r4, #12]
 8019d44:	059b      	lsls	r3, r3, #22
 8019d46:	d4e1      	bmi.n	8019d0c <_fflush_r+0xc>
 8019d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d4a:	f7fe fbd5 	bl	80184f8 <__retarget_lock_release_recursive>
 8019d4e:	e7dd      	b.n	8019d0c <_fflush_r+0xc>

08019d50 <memmove>:
 8019d50:	4288      	cmp	r0, r1
 8019d52:	b510      	push	{r4, lr}
 8019d54:	eb01 0402 	add.w	r4, r1, r2
 8019d58:	d902      	bls.n	8019d60 <memmove+0x10>
 8019d5a:	4284      	cmp	r4, r0
 8019d5c:	4623      	mov	r3, r4
 8019d5e:	d807      	bhi.n	8019d70 <memmove+0x20>
 8019d60:	1e43      	subs	r3, r0, #1
 8019d62:	42a1      	cmp	r1, r4
 8019d64:	d008      	beq.n	8019d78 <memmove+0x28>
 8019d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019d6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019d6e:	e7f8      	b.n	8019d62 <memmove+0x12>
 8019d70:	4402      	add	r2, r0
 8019d72:	4601      	mov	r1, r0
 8019d74:	428a      	cmp	r2, r1
 8019d76:	d100      	bne.n	8019d7a <memmove+0x2a>
 8019d78:	bd10      	pop	{r4, pc}
 8019d7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019d7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019d82:	e7f7      	b.n	8019d74 <memmove+0x24>

08019d84 <__assert_func>:
 8019d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019d86:	4614      	mov	r4, r2
 8019d88:	461a      	mov	r2, r3
 8019d8a:	4b09      	ldr	r3, [pc, #36]	; (8019db0 <__assert_func+0x2c>)
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	4605      	mov	r5, r0
 8019d90:	68d8      	ldr	r0, [r3, #12]
 8019d92:	b14c      	cbz	r4, 8019da8 <__assert_func+0x24>
 8019d94:	4b07      	ldr	r3, [pc, #28]	; (8019db4 <__assert_func+0x30>)
 8019d96:	9100      	str	r1, [sp, #0]
 8019d98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019d9c:	4906      	ldr	r1, [pc, #24]	; (8019db8 <__assert_func+0x34>)
 8019d9e:	462b      	mov	r3, r5
 8019da0:	f000 f854 	bl	8019e4c <fiprintf>
 8019da4:	f000 f864 	bl	8019e70 <abort>
 8019da8:	4b04      	ldr	r3, [pc, #16]	; (8019dbc <__assert_func+0x38>)
 8019daa:	461c      	mov	r4, r3
 8019dac:	e7f3      	b.n	8019d96 <__assert_func+0x12>
 8019dae:	bf00      	nop
 8019db0:	20000360 	.word	0x20000360
 8019db4:	080273e7 	.word	0x080273e7
 8019db8:	080273f4 	.word	0x080273f4
 8019dbc:	08027422 	.word	0x08027422

08019dc0 <_calloc_r>:
 8019dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019dc2:	fba1 2402 	umull	r2, r4, r1, r2
 8019dc6:	b94c      	cbnz	r4, 8019ddc <_calloc_r+0x1c>
 8019dc8:	4611      	mov	r1, r2
 8019dca:	9201      	str	r2, [sp, #4]
 8019dcc:	f7fd fa14 	bl	80171f8 <_malloc_r>
 8019dd0:	9a01      	ldr	r2, [sp, #4]
 8019dd2:	4605      	mov	r5, r0
 8019dd4:	b930      	cbnz	r0, 8019de4 <_calloc_r+0x24>
 8019dd6:	4628      	mov	r0, r5
 8019dd8:	b003      	add	sp, #12
 8019dda:	bd30      	pop	{r4, r5, pc}
 8019ddc:	220c      	movs	r2, #12
 8019dde:	6002      	str	r2, [r0, #0]
 8019de0:	2500      	movs	r5, #0
 8019de2:	e7f8      	b.n	8019dd6 <_calloc_r+0x16>
 8019de4:	4621      	mov	r1, r4
 8019de6:	f7fe fabf 	bl	8018368 <memset>
 8019dea:	e7f4      	b.n	8019dd6 <_calloc_r+0x16>

08019dec <_realloc_r>:
 8019dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019df0:	4680      	mov	r8, r0
 8019df2:	4614      	mov	r4, r2
 8019df4:	460e      	mov	r6, r1
 8019df6:	b921      	cbnz	r1, 8019e02 <_realloc_r+0x16>
 8019df8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019dfc:	4611      	mov	r1, r2
 8019dfe:	f7fd b9fb 	b.w	80171f8 <_malloc_r>
 8019e02:	b92a      	cbnz	r2, 8019e10 <_realloc_r+0x24>
 8019e04:	f7fe fb9e 	bl	8018544 <_free_r>
 8019e08:	4625      	mov	r5, r4
 8019e0a:	4628      	mov	r0, r5
 8019e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e10:	f000 f835 	bl	8019e7e <_malloc_usable_size_r>
 8019e14:	4284      	cmp	r4, r0
 8019e16:	4607      	mov	r7, r0
 8019e18:	d802      	bhi.n	8019e20 <_realloc_r+0x34>
 8019e1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019e1e:	d812      	bhi.n	8019e46 <_realloc_r+0x5a>
 8019e20:	4621      	mov	r1, r4
 8019e22:	4640      	mov	r0, r8
 8019e24:	f7fd f9e8 	bl	80171f8 <_malloc_r>
 8019e28:	4605      	mov	r5, r0
 8019e2a:	2800      	cmp	r0, #0
 8019e2c:	d0ed      	beq.n	8019e0a <_realloc_r+0x1e>
 8019e2e:	42bc      	cmp	r4, r7
 8019e30:	4622      	mov	r2, r4
 8019e32:	4631      	mov	r1, r6
 8019e34:	bf28      	it	cs
 8019e36:	463a      	movcs	r2, r7
 8019e38:	f7fe fb67 	bl	801850a <memcpy>
 8019e3c:	4631      	mov	r1, r6
 8019e3e:	4640      	mov	r0, r8
 8019e40:	f7fe fb80 	bl	8018544 <_free_r>
 8019e44:	e7e1      	b.n	8019e0a <_realloc_r+0x1e>
 8019e46:	4635      	mov	r5, r6
 8019e48:	e7df      	b.n	8019e0a <_realloc_r+0x1e>
	...

08019e4c <fiprintf>:
 8019e4c:	b40e      	push	{r1, r2, r3}
 8019e4e:	b503      	push	{r0, r1, lr}
 8019e50:	4601      	mov	r1, r0
 8019e52:	ab03      	add	r3, sp, #12
 8019e54:	4805      	ldr	r0, [pc, #20]	; (8019e6c <fiprintf+0x20>)
 8019e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e5a:	6800      	ldr	r0, [r0, #0]
 8019e5c:	9301      	str	r3, [sp, #4]
 8019e5e:	f000 f83f 	bl	8019ee0 <_vfiprintf_r>
 8019e62:	b002      	add	sp, #8
 8019e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8019e68:	b003      	add	sp, #12
 8019e6a:	4770      	bx	lr
 8019e6c:	20000360 	.word	0x20000360

08019e70 <abort>:
 8019e70:	b508      	push	{r3, lr}
 8019e72:	2006      	movs	r0, #6
 8019e74:	f000 fa0c 	bl	801a290 <raise>
 8019e78:	2001      	movs	r0, #1
 8019e7a:	f7e7 fca3 	bl	80017c4 <_exit>

08019e7e <_malloc_usable_size_r>:
 8019e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e82:	1f18      	subs	r0, r3, #4
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	bfbc      	itt	lt
 8019e88:	580b      	ldrlt	r3, [r1, r0]
 8019e8a:	18c0      	addlt	r0, r0, r3
 8019e8c:	4770      	bx	lr

08019e8e <__sfputc_r>:
 8019e8e:	6893      	ldr	r3, [r2, #8]
 8019e90:	3b01      	subs	r3, #1
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	b410      	push	{r4}
 8019e96:	6093      	str	r3, [r2, #8]
 8019e98:	da08      	bge.n	8019eac <__sfputc_r+0x1e>
 8019e9a:	6994      	ldr	r4, [r2, #24]
 8019e9c:	42a3      	cmp	r3, r4
 8019e9e:	db01      	blt.n	8019ea4 <__sfputc_r+0x16>
 8019ea0:	290a      	cmp	r1, #10
 8019ea2:	d103      	bne.n	8019eac <__sfputc_r+0x1e>
 8019ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ea8:	f000 b934 	b.w	801a114 <__swbuf_r>
 8019eac:	6813      	ldr	r3, [r2, #0]
 8019eae:	1c58      	adds	r0, r3, #1
 8019eb0:	6010      	str	r0, [r2, #0]
 8019eb2:	7019      	strb	r1, [r3, #0]
 8019eb4:	4608      	mov	r0, r1
 8019eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019eba:	4770      	bx	lr

08019ebc <__sfputs_r>:
 8019ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ebe:	4606      	mov	r6, r0
 8019ec0:	460f      	mov	r7, r1
 8019ec2:	4614      	mov	r4, r2
 8019ec4:	18d5      	adds	r5, r2, r3
 8019ec6:	42ac      	cmp	r4, r5
 8019ec8:	d101      	bne.n	8019ece <__sfputs_r+0x12>
 8019eca:	2000      	movs	r0, #0
 8019ecc:	e007      	b.n	8019ede <__sfputs_r+0x22>
 8019ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ed2:	463a      	mov	r2, r7
 8019ed4:	4630      	mov	r0, r6
 8019ed6:	f7ff ffda 	bl	8019e8e <__sfputc_r>
 8019eda:	1c43      	adds	r3, r0, #1
 8019edc:	d1f3      	bne.n	8019ec6 <__sfputs_r+0xa>
 8019ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019ee0 <_vfiprintf_r>:
 8019ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ee4:	460d      	mov	r5, r1
 8019ee6:	b09d      	sub	sp, #116	; 0x74
 8019ee8:	4614      	mov	r4, r2
 8019eea:	4698      	mov	r8, r3
 8019eec:	4606      	mov	r6, r0
 8019eee:	b118      	cbz	r0, 8019ef8 <_vfiprintf_r+0x18>
 8019ef0:	6a03      	ldr	r3, [r0, #32]
 8019ef2:	b90b      	cbnz	r3, 8019ef8 <_vfiprintf_r+0x18>
 8019ef4:	f7fe f986 	bl	8018204 <__sinit>
 8019ef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019efa:	07d9      	lsls	r1, r3, #31
 8019efc:	d405      	bmi.n	8019f0a <_vfiprintf_r+0x2a>
 8019efe:	89ab      	ldrh	r3, [r5, #12]
 8019f00:	059a      	lsls	r2, r3, #22
 8019f02:	d402      	bmi.n	8019f0a <_vfiprintf_r+0x2a>
 8019f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019f06:	f7fe faf6 	bl	80184f6 <__retarget_lock_acquire_recursive>
 8019f0a:	89ab      	ldrh	r3, [r5, #12]
 8019f0c:	071b      	lsls	r3, r3, #28
 8019f0e:	d501      	bpl.n	8019f14 <_vfiprintf_r+0x34>
 8019f10:	692b      	ldr	r3, [r5, #16]
 8019f12:	b99b      	cbnz	r3, 8019f3c <_vfiprintf_r+0x5c>
 8019f14:	4629      	mov	r1, r5
 8019f16:	4630      	mov	r0, r6
 8019f18:	f000 f93a 	bl	801a190 <__swsetup_r>
 8019f1c:	b170      	cbz	r0, 8019f3c <_vfiprintf_r+0x5c>
 8019f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019f20:	07dc      	lsls	r4, r3, #31
 8019f22:	d504      	bpl.n	8019f2e <_vfiprintf_r+0x4e>
 8019f24:	f04f 30ff 	mov.w	r0, #4294967295
 8019f28:	b01d      	add	sp, #116	; 0x74
 8019f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f2e:	89ab      	ldrh	r3, [r5, #12]
 8019f30:	0598      	lsls	r0, r3, #22
 8019f32:	d4f7      	bmi.n	8019f24 <_vfiprintf_r+0x44>
 8019f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019f36:	f7fe fadf 	bl	80184f8 <__retarget_lock_release_recursive>
 8019f3a:	e7f3      	b.n	8019f24 <_vfiprintf_r+0x44>
 8019f3c:	2300      	movs	r3, #0
 8019f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8019f40:	2320      	movs	r3, #32
 8019f42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8019f4a:	2330      	movs	r3, #48	; 0x30
 8019f4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a100 <_vfiprintf_r+0x220>
 8019f50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019f54:	f04f 0901 	mov.w	r9, #1
 8019f58:	4623      	mov	r3, r4
 8019f5a:	469a      	mov	sl, r3
 8019f5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019f60:	b10a      	cbz	r2, 8019f66 <_vfiprintf_r+0x86>
 8019f62:	2a25      	cmp	r2, #37	; 0x25
 8019f64:	d1f9      	bne.n	8019f5a <_vfiprintf_r+0x7a>
 8019f66:	ebba 0b04 	subs.w	fp, sl, r4
 8019f6a:	d00b      	beq.n	8019f84 <_vfiprintf_r+0xa4>
 8019f6c:	465b      	mov	r3, fp
 8019f6e:	4622      	mov	r2, r4
 8019f70:	4629      	mov	r1, r5
 8019f72:	4630      	mov	r0, r6
 8019f74:	f7ff ffa2 	bl	8019ebc <__sfputs_r>
 8019f78:	3001      	adds	r0, #1
 8019f7a:	f000 80a9 	beq.w	801a0d0 <_vfiprintf_r+0x1f0>
 8019f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f80:	445a      	add	r2, fp
 8019f82:	9209      	str	r2, [sp, #36]	; 0x24
 8019f84:	f89a 3000 	ldrb.w	r3, [sl]
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	f000 80a1 	beq.w	801a0d0 <_vfiprintf_r+0x1f0>
 8019f8e:	2300      	movs	r3, #0
 8019f90:	f04f 32ff 	mov.w	r2, #4294967295
 8019f94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019f98:	f10a 0a01 	add.w	sl, sl, #1
 8019f9c:	9304      	str	r3, [sp, #16]
 8019f9e:	9307      	str	r3, [sp, #28]
 8019fa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8019fa6:	4654      	mov	r4, sl
 8019fa8:	2205      	movs	r2, #5
 8019faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fae:	4854      	ldr	r0, [pc, #336]	; (801a100 <_vfiprintf_r+0x220>)
 8019fb0:	f7e6 f926 	bl	8000200 <memchr>
 8019fb4:	9a04      	ldr	r2, [sp, #16]
 8019fb6:	b9d8      	cbnz	r0, 8019ff0 <_vfiprintf_r+0x110>
 8019fb8:	06d1      	lsls	r1, r2, #27
 8019fba:	bf44      	itt	mi
 8019fbc:	2320      	movmi	r3, #32
 8019fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019fc2:	0713      	lsls	r3, r2, #28
 8019fc4:	bf44      	itt	mi
 8019fc6:	232b      	movmi	r3, #43	; 0x2b
 8019fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8019fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8019fd2:	d015      	beq.n	801a000 <_vfiprintf_r+0x120>
 8019fd4:	9a07      	ldr	r2, [sp, #28]
 8019fd6:	4654      	mov	r4, sl
 8019fd8:	2000      	movs	r0, #0
 8019fda:	f04f 0c0a 	mov.w	ip, #10
 8019fde:	4621      	mov	r1, r4
 8019fe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019fe4:	3b30      	subs	r3, #48	; 0x30
 8019fe6:	2b09      	cmp	r3, #9
 8019fe8:	d94d      	bls.n	801a086 <_vfiprintf_r+0x1a6>
 8019fea:	b1b0      	cbz	r0, 801a01a <_vfiprintf_r+0x13a>
 8019fec:	9207      	str	r2, [sp, #28]
 8019fee:	e014      	b.n	801a01a <_vfiprintf_r+0x13a>
 8019ff0:	eba0 0308 	sub.w	r3, r0, r8
 8019ff4:	fa09 f303 	lsl.w	r3, r9, r3
 8019ff8:	4313      	orrs	r3, r2
 8019ffa:	9304      	str	r3, [sp, #16]
 8019ffc:	46a2      	mov	sl, r4
 8019ffe:	e7d2      	b.n	8019fa6 <_vfiprintf_r+0xc6>
 801a000:	9b03      	ldr	r3, [sp, #12]
 801a002:	1d19      	adds	r1, r3, #4
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	9103      	str	r1, [sp, #12]
 801a008:	2b00      	cmp	r3, #0
 801a00a:	bfbb      	ittet	lt
 801a00c:	425b      	neglt	r3, r3
 801a00e:	f042 0202 	orrlt.w	r2, r2, #2
 801a012:	9307      	strge	r3, [sp, #28]
 801a014:	9307      	strlt	r3, [sp, #28]
 801a016:	bfb8      	it	lt
 801a018:	9204      	strlt	r2, [sp, #16]
 801a01a:	7823      	ldrb	r3, [r4, #0]
 801a01c:	2b2e      	cmp	r3, #46	; 0x2e
 801a01e:	d10c      	bne.n	801a03a <_vfiprintf_r+0x15a>
 801a020:	7863      	ldrb	r3, [r4, #1]
 801a022:	2b2a      	cmp	r3, #42	; 0x2a
 801a024:	d134      	bne.n	801a090 <_vfiprintf_r+0x1b0>
 801a026:	9b03      	ldr	r3, [sp, #12]
 801a028:	1d1a      	adds	r2, r3, #4
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	9203      	str	r2, [sp, #12]
 801a02e:	2b00      	cmp	r3, #0
 801a030:	bfb8      	it	lt
 801a032:	f04f 33ff 	movlt.w	r3, #4294967295
 801a036:	3402      	adds	r4, #2
 801a038:	9305      	str	r3, [sp, #20]
 801a03a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a110 <_vfiprintf_r+0x230>
 801a03e:	7821      	ldrb	r1, [r4, #0]
 801a040:	2203      	movs	r2, #3
 801a042:	4650      	mov	r0, sl
 801a044:	f7e6 f8dc 	bl	8000200 <memchr>
 801a048:	b138      	cbz	r0, 801a05a <_vfiprintf_r+0x17a>
 801a04a:	9b04      	ldr	r3, [sp, #16]
 801a04c:	eba0 000a 	sub.w	r0, r0, sl
 801a050:	2240      	movs	r2, #64	; 0x40
 801a052:	4082      	lsls	r2, r0
 801a054:	4313      	orrs	r3, r2
 801a056:	3401      	adds	r4, #1
 801a058:	9304      	str	r3, [sp, #16]
 801a05a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a05e:	4829      	ldr	r0, [pc, #164]	; (801a104 <_vfiprintf_r+0x224>)
 801a060:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a064:	2206      	movs	r2, #6
 801a066:	f7e6 f8cb 	bl	8000200 <memchr>
 801a06a:	2800      	cmp	r0, #0
 801a06c:	d03f      	beq.n	801a0ee <_vfiprintf_r+0x20e>
 801a06e:	4b26      	ldr	r3, [pc, #152]	; (801a108 <_vfiprintf_r+0x228>)
 801a070:	bb1b      	cbnz	r3, 801a0ba <_vfiprintf_r+0x1da>
 801a072:	9b03      	ldr	r3, [sp, #12]
 801a074:	3307      	adds	r3, #7
 801a076:	f023 0307 	bic.w	r3, r3, #7
 801a07a:	3308      	adds	r3, #8
 801a07c:	9303      	str	r3, [sp, #12]
 801a07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a080:	443b      	add	r3, r7
 801a082:	9309      	str	r3, [sp, #36]	; 0x24
 801a084:	e768      	b.n	8019f58 <_vfiprintf_r+0x78>
 801a086:	fb0c 3202 	mla	r2, ip, r2, r3
 801a08a:	460c      	mov	r4, r1
 801a08c:	2001      	movs	r0, #1
 801a08e:	e7a6      	b.n	8019fde <_vfiprintf_r+0xfe>
 801a090:	2300      	movs	r3, #0
 801a092:	3401      	adds	r4, #1
 801a094:	9305      	str	r3, [sp, #20]
 801a096:	4619      	mov	r1, r3
 801a098:	f04f 0c0a 	mov.w	ip, #10
 801a09c:	4620      	mov	r0, r4
 801a09e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a0a2:	3a30      	subs	r2, #48	; 0x30
 801a0a4:	2a09      	cmp	r2, #9
 801a0a6:	d903      	bls.n	801a0b0 <_vfiprintf_r+0x1d0>
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d0c6      	beq.n	801a03a <_vfiprintf_r+0x15a>
 801a0ac:	9105      	str	r1, [sp, #20]
 801a0ae:	e7c4      	b.n	801a03a <_vfiprintf_r+0x15a>
 801a0b0:	fb0c 2101 	mla	r1, ip, r1, r2
 801a0b4:	4604      	mov	r4, r0
 801a0b6:	2301      	movs	r3, #1
 801a0b8:	e7f0      	b.n	801a09c <_vfiprintf_r+0x1bc>
 801a0ba:	ab03      	add	r3, sp, #12
 801a0bc:	9300      	str	r3, [sp, #0]
 801a0be:	462a      	mov	r2, r5
 801a0c0:	4b12      	ldr	r3, [pc, #72]	; (801a10c <_vfiprintf_r+0x22c>)
 801a0c2:	a904      	add	r1, sp, #16
 801a0c4:	4630      	mov	r0, r6
 801a0c6:	f3af 8000 	nop.w
 801a0ca:	4607      	mov	r7, r0
 801a0cc:	1c78      	adds	r0, r7, #1
 801a0ce:	d1d6      	bne.n	801a07e <_vfiprintf_r+0x19e>
 801a0d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a0d2:	07d9      	lsls	r1, r3, #31
 801a0d4:	d405      	bmi.n	801a0e2 <_vfiprintf_r+0x202>
 801a0d6:	89ab      	ldrh	r3, [r5, #12]
 801a0d8:	059a      	lsls	r2, r3, #22
 801a0da:	d402      	bmi.n	801a0e2 <_vfiprintf_r+0x202>
 801a0dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a0de:	f7fe fa0b 	bl	80184f8 <__retarget_lock_release_recursive>
 801a0e2:	89ab      	ldrh	r3, [r5, #12]
 801a0e4:	065b      	lsls	r3, r3, #25
 801a0e6:	f53f af1d 	bmi.w	8019f24 <_vfiprintf_r+0x44>
 801a0ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a0ec:	e71c      	b.n	8019f28 <_vfiprintf_r+0x48>
 801a0ee:	ab03      	add	r3, sp, #12
 801a0f0:	9300      	str	r3, [sp, #0]
 801a0f2:	462a      	mov	r2, r5
 801a0f4:	4b05      	ldr	r3, [pc, #20]	; (801a10c <_vfiprintf_r+0x22c>)
 801a0f6:	a904      	add	r1, sp, #16
 801a0f8:	4630      	mov	r0, r6
 801a0fa:	f7ff fc59 	bl	80199b0 <_printf_i>
 801a0fe:	e7e4      	b.n	801a0ca <_vfiprintf_r+0x1ea>
 801a100:	080273b4 	.word	0x080273b4
 801a104:	080273be 	.word	0x080273be
 801a108:	00000000 	.word	0x00000000
 801a10c:	08019ebd 	.word	0x08019ebd
 801a110:	080273ba 	.word	0x080273ba

0801a114 <__swbuf_r>:
 801a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a116:	460e      	mov	r6, r1
 801a118:	4614      	mov	r4, r2
 801a11a:	4605      	mov	r5, r0
 801a11c:	b118      	cbz	r0, 801a126 <__swbuf_r+0x12>
 801a11e:	6a03      	ldr	r3, [r0, #32]
 801a120:	b90b      	cbnz	r3, 801a126 <__swbuf_r+0x12>
 801a122:	f7fe f86f 	bl	8018204 <__sinit>
 801a126:	69a3      	ldr	r3, [r4, #24]
 801a128:	60a3      	str	r3, [r4, #8]
 801a12a:	89a3      	ldrh	r3, [r4, #12]
 801a12c:	071a      	lsls	r2, r3, #28
 801a12e:	d525      	bpl.n	801a17c <__swbuf_r+0x68>
 801a130:	6923      	ldr	r3, [r4, #16]
 801a132:	b31b      	cbz	r3, 801a17c <__swbuf_r+0x68>
 801a134:	6823      	ldr	r3, [r4, #0]
 801a136:	6922      	ldr	r2, [r4, #16]
 801a138:	1a98      	subs	r0, r3, r2
 801a13a:	6963      	ldr	r3, [r4, #20]
 801a13c:	b2f6      	uxtb	r6, r6
 801a13e:	4283      	cmp	r3, r0
 801a140:	4637      	mov	r7, r6
 801a142:	dc04      	bgt.n	801a14e <__swbuf_r+0x3a>
 801a144:	4621      	mov	r1, r4
 801a146:	4628      	mov	r0, r5
 801a148:	f7ff fdda 	bl	8019d00 <_fflush_r>
 801a14c:	b9e0      	cbnz	r0, 801a188 <__swbuf_r+0x74>
 801a14e:	68a3      	ldr	r3, [r4, #8]
 801a150:	3b01      	subs	r3, #1
 801a152:	60a3      	str	r3, [r4, #8]
 801a154:	6823      	ldr	r3, [r4, #0]
 801a156:	1c5a      	adds	r2, r3, #1
 801a158:	6022      	str	r2, [r4, #0]
 801a15a:	701e      	strb	r6, [r3, #0]
 801a15c:	6962      	ldr	r2, [r4, #20]
 801a15e:	1c43      	adds	r3, r0, #1
 801a160:	429a      	cmp	r2, r3
 801a162:	d004      	beq.n	801a16e <__swbuf_r+0x5a>
 801a164:	89a3      	ldrh	r3, [r4, #12]
 801a166:	07db      	lsls	r3, r3, #31
 801a168:	d506      	bpl.n	801a178 <__swbuf_r+0x64>
 801a16a:	2e0a      	cmp	r6, #10
 801a16c:	d104      	bne.n	801a178 <__swbuf_r+0x64>
 801a16e:	4621      	mov	r1, r4
 801a170:	4628      	mov	r0, r5
 801a172:	f7ff fdc5 	bl	8019d00 <_fflush_r>
 801a176:	b938      	cbnz	r0, 801a188 <__swbuf_r+0x74>
 801a178:	4638      	mov	r0, r7
 801a17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a17c:	4621      	mov	r1, r4
 801a17e:	4628      	mov	r0, r5
 801a180:	f000 f806 	bl	801a190 <__swsetup_r>
 801a184:	2800      	cmp	r0, #0
 801a186:	d0d5      	beq.n	801a134 <__swbuf_r+0x20>
 801a188:	f04f 37ff 	mov.w	r7, #4294967295
 801a18c:	e7f4      	b.n	801a178 <__swbuf_r+0x64>
	...

0801a190 <__swsetup_r>:
 801a190:	b538      	push	{r3, r4, r5, lr}
 801a192:	4b2a      	ldr	r3, [pc, #168]	; (801a23c <__swsetup_r+0xac>)
 801a194:	4605      	mov	r5, r0
 801a196:	6818      	ldr	r0, [r3, #0]
 801a198:	460c      	mov	r4, r1
 801a19a:	b118      	cbz	r0, 801a1a4 <__swsetup_r+0x14>
 801a19c:	6a03      	ldr	r3, [r0, #32]
 801a19e:	b90b      	cbnz	r3, 801a1a4 <__swsetup_r+0x14>
 801a1a0:	f7fe f830 	bl	8018204 <__sinit>
 801a1a4:	89a3      	ldrh	r3, [r4, #12]
 801a1a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a1aa:	0718      	lsls	r0, r3, #28
 801a1ac:	d422      	bmi.n	801a1f4 <__swsetup_r+0x64>
 801a1ae:	06d9      	lsls	r1, r3, #27
 801a1b0:	d407      	bmi.n	801a1c2 <__swsetup_r+0x32>
 801a1b2:	2309      	movs	r3, #9
 801a1b4:	602b      	str	r3, [r5, #0]
 801a1b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a1ba:	81a3      	strh	r3, [r4, #12]
 801a1bc:	f04f 30ff 	mov.w	r0, #4294967295
 801a1c0:	e034      	b.n	801a22c <__swsetup_r+0x9c>
 801a1c2:	0758      	lsls	r0, r3, #29
 801a1c4:	d512      	bpl.n	801a1ec <__swsetup_r+0x5c>
 801a1c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a1c8:	b141      	cbz	r1, 801a1dc <__swsetup_r+0x4c>
 801a1ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a1ce:	4299      	cmp	r1, r3
 801a1d0:	d002      	beq.n	801a1d8 <__swsetup_r+0x48>
 801a1d2:	4628      	mov	r0, r5
 801a1d4:	f7fe f9b6 	bl	8018544 <_free_r>
 801a1d8:	2300      	movs	r3, #0
 801a1da:	6363      	str	r3, [r4, #52]	; 0x34
 801a1dc:	89a3      	ldrh	r3, [r4, #12]
 801a1de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a1e2:	81a3      	strh	r3, [r4, #12]
 801a1e4:	2300      	movs	r3, #0
 801a1e6:	6063      	str	r3, [r4, #4]
 801a1e8:	6923      	ldr	r3, [r4, #16]
 801a1ea:	6023      	str	r3, [r4, #0]
 801a1ec:	89a3      	ldrh	r3, [r4, #12]
 801a1ee:	f043 0308 	orr.w	r3, r3, #8
 801a1f2:	81a3      	strh	r3, [r4, #12]
 801a1f4:	6923      	ldr	r3, [r4, #16]
 801a1f6:	b94b      	cbnz	r3, 801a20c <__swsetup_r+0x7c>
 801a1f8:	89a3      	ldrh	r3, [r4, #12]
 801a1fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a1fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a202:	d003      	beq.n	801a20c <__swsetup_r+0x7c>
 801a204:	4621      	mov	r1, r4
 801a206:	4628      	mov	r0, r5
 801a208:	f000 f884 	bl	801a314 <__smakebuf_r>
 801a20c:	89a0      	ldrh	r0, [r4, #12]
 801a20e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a212:	f010 0301 	ands.w	r3, r0, #1
 801a216:	d00a      	beq.n	801a22e <__swsetup_r+0x9e>
 801a218:	2300      	movs	r3, #0
 801a21a:	60a3      	str	r3, [r4, #8]
 801a21c:	6963      	ldr	r3, [r4, #20]
 801a21e:	425b      	negs	r3, r3
 801a220:	61a3      	str	r3, [r4, #24]
 801a222:	6923      	ldr	r3, [r4, #16]
 801a224:	b943      	cbnz	r3, 801a238 <__swsetup_r+0xa8>
 801a226:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a22a:	d1c4      	bne.n	801a1b6 <__swsetup_r+0x26>
 801a22c:	bd38      	pop	{r3, r4, r5, pc}
 801a22e:	0781      	lsls	r1, r0, #30
 801a230:	bf58      	it	pl
 801a232:	6963      	ldrpl	r3, [r4, #20]
 801a234:	60a3      	str	r3, [r4, #8]
 801a236:	e7f4      	b.n	801a222 <__swsetup_r+0x92>
 801a238:	2000      	movs	r0, #0
 801a23a:	e7f7      	b.n	801a22c <__swsetup_r+0x9c>
 801a23c:	20000360 	.word	0x20000360

0801a240 <_raise_r>:
 801a240:	291f      	cmp	r1, #31
 801a242:	b538      	push	{r3, r4, r5, lr}
 801a244:	4604      	mov	r4, r0
 801a246:	460d      	mov	r5, r1
 801a248:	d904      	bls.n	801a254 <_raise_r+0x14>
 801a24a:	2316      	movs	r3, #22
 801a24c:	6003      	str	r3, [r0, #0]
 801a24e:	f04f 30ff 	mov.w	r0, #4294967295
 801a252:	bd38      	pop	{r3, r4, r5, pc}
 801a254:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a256:	b112      	cbz	r2, 801a25e <_raise_r+0x1e>
 801a258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a25c:	b94b      	cbnz	r3, 801a272 <_raise_r+0x32>
 801a25e:	4620      	mov	r0, r4
 801a260:	f000 f830 	bl	801a2c4 <_getpid_r>
 801a264:	462a      	mov	r2, r5
 801a266:	4601      	mov	r1, r0
 801a268:	4620      	mov	r0, r4
 801a26a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a26e:	f000 b817 	b.w	801a2a0 <_kill_r>
 801a272:	2b01      	cmp	r3, #1
 801a274:	d00a      	beq.n	801a28c <_raise_r+0x4c>
 801a276:	1c59      	adds	r1, r3, #1
 801a278:	d103      	bne.n	801a282 <_raise_r+0x42>
 801a27a:	2316      	movs	r3, #22
 801a27c:	6003      	str	r3, [r0, #0]
 801a27e:	2001      	movs	r0, #1
 801a280:	e7e7      	b.n	801a252 <_raise_r+0x12>
 801a282:	2400      	movs	r4, #0
 801a284:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a288:	4628      	mov	r0, r5
 801a28a:	4798      	blx	r3
 801a28c:	2000      	movs	r0, #0
 801a28e:	e7e0      	b.n	801a252 <_raise_r+0x12>

0801a290 <raise>:
 801a290:	4b02      	ldr	r3, [pc, #8]	; (801a29c <raise+0xc>)
 801a292:	4601      	mov	r1, r0
 801a294:	6818      	ldr	r0, [r3, #0]
 801a296:	f7ff bfd3 	b.w	801a240 <_raise_r>
 801a29a:	bf00      	nop
 801a29c:	20000360 	.word	0x20000360

0801a2a0 <_kill_r>:
 801a2a0:	b538      	push	{r3, r4, r5, lr}
 801a2a2:	4d07      	ldr	r5, [pc, #28]	; (801a2c0 <_kill_r+0x20>)
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	4604      	mov	r4, r0
 801a2a8:	4608      	mov	r0, r1
 801a2aa:	4611      	mov	r1, r2
 801a2ac:	602b      	str	r3, [r5, #0]
 801a2ae:	f7e7 fa79 	bl	80017a4 <_kill>
 801a2b2:	1c43      	adds	r3, r0, #1
 801a2b4:	d102      	bne.n	801a2bc <_kill_r+0x1c>
 801a2b6:	682b      	ldr	r3, [r5, #0]
 801a2b8:	b103      	cbz	r3, 801a2bc <_kill_r+0x1c>
 801a2ba:	6023      	str	r3, [r4, #0]
 801a2bc:	bd38      	pop	{r3, r4, r5, pc}
 801a2be:	bf00      	nop
 801a2c0:	20009134 	.word	0x20009134

0801a2c4 <_getpid_r>:
 801a2c4:	f7e7 ba66 	b.w	8001794 <_getpid>

0801a2c8 <__swhatbuf_r>:
 801a2c8:	b570      	push	{r4, r5, r6, lr}
 801a2ca:	460c      	mov	r4, r1
 801a2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2d0:	2900      	cmp	r1, #0
 801a2d2:	b096      	sub	sp, #88	; 0x58
 801a2d4:	4615      	mov	r5, r2
 801a2d6:	461e      	mov	r6, r3
 801a2d8:	da0d      	bge.n	801a2f6 <__swhatbuf_r+0x2e>
 801a2da:	89a3      	ldrh	r3, [r4, #12]
 801a2dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a2e0:	f04f 0100 	mov.w	r1, #0
 801a2e4:	bf0c      	ite	eq
 801a2e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a2ea:	2340      	movne	r3, #64	; 0x40
 801a2ec:	2000      	movs	r0, #0
 801a2ee:	6031      	str	r1, [r6, #0]
 801a2f0:	602b      	str	r3, [r5, #0]
 801a2f2:	b016      	add	sp, #88	; 0x58
 801a2f4:	bd70      	pop	{r4, r5, r6, pc}
 801a2f6:	466a      	mov	r2, sp
 801a2f8:	f000 f848 	bl	801a38c <_fstat_r>
 801a2fc:	2800      	cmp	r0, #0
 801a2fe:	dbec      	blt.n	801a2da <__swhatbuf_r+0x12>
 801a300:	9901      	ldr	r1, [sp, #4]
 801a302:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a306:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a30a:	4259      	negs	r1, r3
 801a30c:	4159      	adcs	r1, r3
 801a30e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a312:	e7eb      	b.n	801a2ec <__swhatbuf_r+0x24>

0801a314 <__smakebuf_r>:
 801a314:	898b      	ldrh	r3, [r1, #12]
 801a316:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a318:	079d      	lsls	r5, r3, #30
 801a31a:	4606      	mov	r6, r0
 801a31c:	460c      	mov	r4, r1
 801a31e:	d507      	bpl.n	801a330 <__smakebuf_r+0x1c>
 801a320:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a324:	6023      	str	r3, [r4, #0]
 801a326:	6123      	str	r3, [r4, #16]
 801a328:	2301      	movs	r3, #1
 801a32a:	6163      	str	r3, [r4, #20]
 801a32c:	b002      	add	sp, #8
 801a32e:	bd70      	pop	{r4, r5, r6, pc}
 801a330:	ab01      	add	r3, sp, #4
 801a332:	466a      	mov	r2, sp
 801a334:	f7ff ffc8 	bl	801a2c8 <__swhatbuf_r>
 801a338:	9900      	ldr	r1, [sp, #0]
 801a33a:	4605      	mov	r5, r0
 801a33c:	4630      	mov	r0, r6
 801a33e:	f7fc ff5b 	bl	80171f8 <_malloc_r>
 801a342:	b948      	cbnz	r0, 801a358 <__smakebuf_r+0x44>
 801a344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a348:	059a      	lsls	r2, r3, #22
 801a34a:	d4ef      	bmi.n	801a32c <__smakebuf_r+0x18>
 801a34c:	f023 0303 	bic.w	r3, r3, #3
 801a350:	f043 0302 	orr.w	r3, r3, #2
 801a354:	81a3      	strh	r3, [r4, #12]
 801a356:	e7e3      	b.n	801a320 <__smakebuf_r+0xc>
 801a358:	89a3      	ldrh	r3, [r4, #12]
 801a35a:	6020      	str	r0, [r4, #0]
 801a35c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a360:	81a3      	strh	r3, [r4, #12]
 801a362:	9b00      	ldr	r3, [sp, #0]
 801a364:	6163      	str	r3, [r4, #20]
 801a366:	9b01      	ldr	r3, [sp, #4]
 801a368:	6120      	str	r0, [r4, #16]
 801a36a:	b15b      	cbz	r3, 801a384 <__smakebuf_r+0x70>
 801a36c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a370:	4630      	mov	r0, r6
 801a372:	f000 f81d 	bl	801a3b0 <_isatty_r>
 801a376:	b128      	cbz	r0, 801a384 <__smakebuf_r+0x70>
 801a378:	89a3      	ldrh	r3, [r4, #12]
 801a37a:	f023 0303 	bic.w	r3, r3, #3
 801a37e:	f043 0301 	orr.w	r3, r3, #1
 801a382:	81a3      	strh	r3, [r4, #12]
 801a384:	89a3      	ldrh	r3, [r4, #12]
 801a386:	431d      	orrs	r5, r3
 801a388:	81a5      	strh	r5, [r4, #12]
 801a38a:	e7cf      	b.n	801a32c <__smakebuf_r+0x18>

0801a38c <_fstat_r>:
 801a38c:	b538      	push	{r3, r4, r5, lr}
 801a38e:	4d07      	ldr	r5, [pc, #28]	; (801a3ac <_fstat_r+0x20>)
 801a390:	2300      	movs	r3, #0
 801a392:	4604      	mov	r4, r0
 801a394:	4608      	mov	r0, r1
 801a396:	4611      	mov	r1, r2
 801a398:	602b      	str	r3, [r5, #0]
 801a39a:	f7e7 fa62 	bl	8001862 <_fstat>
 801a39e:	1c43      	adds	r3, r0, #1
 801a3a0:	d102      	bne.n	801a3a8 <_fstat_r+0x1c>
 801a3a2:	682b      	ldr	r3, [r5, #0]
 801a3a4:	b103      	cbz	r3, 801a3a8 <_fstat_r+0x1c>
 801a3a6:	6023      	str	r3, [r4, #0]
 801a3a8:	bd38      	pop	{r3, r4, r5, pc}
 801a3aa:	bf00      	nop
 801a3ac:	20009134 	.word	0x20009134

0801a3b0 <_isatty_r>:
 801a3b0:	b538      	push	{r3, r4, r5, lr}
 801a3b2:	4d06      	ldr	r5, [pc, #24]	; (801a3cc <_isatty_r+0x1c>)
 801a3b4:	2300      	movs	r3, #0
 801a3b6:	4604      	mov	r4, r0
 801a3b8:	4608      	mov	r0, r1
 801a3ba:	602b      	str	r3, [r5, #0]
 801a3bc:	f7e7 fa61 	bl	8001882 <_isatty>
 801a3c0:	1c43      	adds	r3, r0, #1
 801a3c2:	d102      	bne.n	801a3ca <_isatty_r+0x1a>
 801a3c4:	682b      	ldr	r3, [r5, #0]
 801a3c6:	b103      	cbz	r3, 801a3ca <_isatty_r+0x1a>
 801a3c8:	6023      	str	r3, [r4, #0]
 801a3ca:	bd38      	pop	{r3, r4, r5, pc}
 801a3cc:	20009134 	.word	0x20009134

0801a3d0 <_init>:
 801a3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3d2:	bf00      	nop
 801a3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3d6:	bc08      	pop	{r3}
 801a3d8:	469e      	mov	lr, r3
 801a3da:	4770      	bx	lr

0801a3dc <_fini>:
 801a3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3de:	bf00      	nop
 801a3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3e2:	bc08      	pop	{r3}
 801a3e4:	469e      	mov	lr, r3
 801a3e6:	4770      	bx	lr
