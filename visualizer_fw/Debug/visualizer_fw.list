
visualizer_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013630  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d8c  080137d0  080137d0  000237d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801455c  0801455c  000302dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801455c  0801455c  0002455c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014564  08014564  000302dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014564  08014564  00024564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014568  08014568  00024568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  0801456c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027a4  200002dc  08014848  000302dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a80  08014848  00032a80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003030c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019729  00000000  00000000  0003034f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050af  00000000  00000000  00049a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  0004eb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000106e  00000000  00000000  00050150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ca2d  00000000  00000000  000511be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000221ff  00000000  00000000  0006dbeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009114d  00000000  00000000  0008fdea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b38  00000000  00000000  00120f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00127a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002dc 	.word	0x200002dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080137b8 	.word	0x080137b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e0 	.word	0x200002e0
 80001dc:	080137b8 	.word	0x080137b8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b9a6 	b.w	8000fbc <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f83c 	bl	8000cf4 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff33 	bl	8000afc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fca9 	bl	8000618 <__aeabi_dmul>
 8000cc6:	f7ff ff57 	bl	8000b78 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc2a 	bl	8000524 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fca0 	bl	8000618 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fae2 	bl	80002a8 <__aeabi_dsub>
 8000ce4:	f7ff ff48 	bl	8000b78 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9e08      	ldr	r6, [sp, #32]
 8000cfa:	460d      	mov	r5, r1
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	460f      	mov	r7, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14a      	bne.n	8000d9a <__udivmoddi4+0xa6>
 8000d04:	428a      	cmp	r2, r1
 8000d06:	4694      	mov	ip, r2
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0xe2>
 8000d0a:	fab2 f382 	clz	r3, r2
 8000d0e:	b143      	cbz	r3, 8000d22 <__udivmoddi4+0x2e>
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	f1c3 0220 	rsb	r2, r3, #32
 8000d18:	409f      	lsls	r7, r3
 8000d1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	409c      	lsls	r4, r3
 8000d22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d26:	fa1f f58c 	uxth.w	r5, ip
 8000d2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d2e:	0c22      	lsrs	r2, r4, #16
 8000d30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d38:	fb01 f005 	mul.w	r0, r1, r5
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	d90a      	bls.n	8000d56 <__udivmoddi4+0x62>
 8000d40:	eb1c 0202 	adds.w	r2, ip, r2
 8000d44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d48:	f080 811c 	bcs.w	8000f84 <__udivmoddi4+0x290>
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	f240 8119 	bls.w	8000f84 <__udivmoddi4+0x290>
 8000d52:	3902      	subs	r1, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	1a12      	subs	r2, r2, r0
 8000d58:	b2a4      	uxth	r4, r4
 8000d5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d66:	fb00 f505 	mul.w	r5, r0, r5
 8000d6a:	42a5      	cmp	r5, r4
 8000d6c:	d90a      	bls.n	8000d84 <__udivmoddi4+0x90>
 8000d6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x294>
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x294>
 8000d80:	4464      	add	r4, ip
 8000d82:	3802      	subs	r0, #2
 8000d84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	b11e      	cbz	r6, 8000d96 <__udivmoddi4+0xa2>
 8000d8e:	40dc      	lsrs	r4, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	e9c6 4300 	strd	r4, r3, [r6]
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0xbc>
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f000 80ed 	beq.w	8000f7e <__udivmoddi4+0x28a>
 8000da4:	2100      	movs	r1, #0
 8000da6:	e9c6 0500 	strd	r0, r5, [r6]
 8000daa:	4608      	mov	r0, r1
 8000dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db0:	fab3 f183 	clz	r1, r3
 8000db4:	2900      	cmp	r1, #0
 8000db6:	d149      	bne.n	8000e4c <__udivmoddi4+0x158>
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	d302      	bcc.n	8000dc2 <__udivmoddi4+0xce>
 8000dbc:	4282      	cmp	r2, r0
 8000dbe:	f200 80f8 	bhi.w	8000fb2 <__udivmoddi4+0x2be>
 8000dc2:	1a84      	subs	r4, r0, r2
 8000dc4:	eb65 0203 	sbc.w	r2, r5, r3
 8000dc8:	2001      	movs	r0, #1
 8000dca:	4617      	mov	r7, r2
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d0e2      	beq.n	8000d96 <__udivmoddi4+0xa2>
 8000dd0:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd4:	e7df      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000dd6:	b902      	cbnz	r2, 8000dda <__udivmoddi4+0xe6>
 8000dd8:	deff      	udf	#255	; 0xff
 8000dda:	fab2 f382 	clz	r3, r2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8090 	bne.w	8000f04 <__udivmoddi4+0x210>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	2101      	movs	r1, #1
 8000df0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df4:	fb07 2015 	mls	r0, r7, r5, r2
 8000df8:	0c22      	lsrs	r2, r4, #16
 8000dfa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dfe:	fb0e f005 	mul.w	r0, lr, r5
 8000e02:	4290      	cmp	r0, r2
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x124>
 8000e06:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x122>
 8000e10:	4290      	cmp	r0, r2
 8000e12:	f200 80cb 	bhi.w	8000fac <__udivmoddi4+0x2b8>
 8000e16:	4645      	mov	r5, r8
 8000e18:	1a12      	subs	r2, r2, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e20:	fb07 2210 	mls	r2, r7, r0, r2
 8000e24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e28:	fb0e fe00 	mul.w	lr, lr, r0
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x14e>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x14c>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f200 80bb 	bhi.w	8000fb6 <__udivmoddi4+0x2c2>
 8000e40:	4610      	mov	r0, r2
 8000e42:	eba4 040e 	sub.w	r4, r4, lr
 8000e46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4a:	e79f      	b.n	8000d8c <__udivmoddi4+0x98>
 8000e4c:	f1c1 0720 	rsb	r7, r1, #32
 8000e50:	408b      	lsls	r3, r1
 8000e52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e62:	40fd      	lsrs	r5, r7
 8000e64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e68:	4323      	orrs	r3, r4
 8000e6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	fb09 5518 	mls	r5, r9, r8, r5
 8000e76:	0c1c      	lsrs	r4, r3, #16
 8000e78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e80:	42a5      	cmp	r5, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8a:	d90b      	bls.n	8000ea4 <__udivmoddi4+0x1b0>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e94:	f080 8088 	bcs.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e98:	42a5      	cmp	r5, r4
 8000e9a:	f240 8085 	bls.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea2:	4464      	add	r4, ip
 8000ea4:	1b64      	subs	r4, r4, r5
 8000ea6:	b29d      	uxth	r5, r3
 8000ea8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eac:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x1da>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec4:	d26c      	bcs.n	8000fa0 <__udivmoddi4+0x2ac>
 8000ec6:	45a6      	cmp	lr, r4
 8000ec8:	d96a      	bls.n	8000fa0 <__udivmoddi4+0x2ac>
 8000eca:	3b02      	subs	r3, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ed6:	eba4 040e 	sub.w	r4, r4, lr
 8000eda:	42ac      	cmp	r4, r5
 8000edc:	46c8      	mov	r8, r9
 8000ede:	46ae      	mov	lr, r5
 8000ee0:	d356      	bcc.n	8000f90 <__udivmoddi4+0x29c>
 8000ee2:	d053      	beq.n	8000f8c <__udivmoddi4+0x298>
 8000ee4:	b156      	cbz	r6, 8000efc <__udivmoddi4+0x208>
 8000ee6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eea:	eb64 040e 	sbc.w	r4, r4, lr
 8000eee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef2:	40ca      	lsrs	r2, r1
 8000ef4:	40cc      	lsrs	r4, r1
 8000ef6:	4317      	orrs	r7, r2
 8000ef8:	e9c6 7400 	strd	r7, r4, [r6]
 8000efc:	4618      	mov	r0, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f04:	f1c3 0120 	rsb	r1, r3, #32
 8000f08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f10:	fa25 f101 	lsr.w	r1, r5, r1
 8000f14:	409d      	lsls	r5, r3
 8000f16:	432a      	orrs	r2, r5
 8000f18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f24:	fb07 1510 	mls	r5, r7, r0, r1
 8000f28:	0c11      	lsrs	r1, r2, #16
 8000f2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f32:	428d      	cmp	r5, r1
 8000f34:	fa04 f403 	lsl.w	r4, r4, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x258>
 8000f3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f42:	d22f      	bcs.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f44:	428d      	cmp	r5, r1
 8000f46:	d92d      	bls.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1b49      	subs	r1, r1, r5
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f54:	fb07 1115 	mls	r1, r7, r5, r1
 8000f58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f60:	4291      	cmp	r1, r2
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x282>
 8000f64:	eb1c 0202 	adds.w	r2, ip, r2
 8000f68:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f6c:	d216      	bcs.n	8000f9c <__udivmoddi4+0x2a8>
 8000f6e:	4291      	cmp	r1, r2
 8000f70:	d914      	bls.n	8000f9c <__udivmoddi4+0x2a8>
 8000f72:	3d02      	subs	r5, #2
 8000f74:	4462      	add	r2, ip
 8000f76:	1a52      	subs	r2, r2, r1
 8000f78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f7c:	e738      	b.n	8000df0 <__udivmoddi4+0xfc>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000f84:	4639      	mov	r1, r7
 8000f86:	e6e6      	b.n	8000d56 <__udivmoddi4+0x62>
 8000f88:	4610      	mov	r0, r2
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x90>
 8000f8c:	4548      	cmp	r0, r9
 8000f8e:	d2a9      	bcs.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f90:	ebb9 0802 	subs.w	r8, r9, r2
 8000f94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	e7a3      	b.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f9c:	4645      	mov	r5, r8
 8000f9e:	e7ea      	b.n	8000f76 <__udivmoddi4+0x282>
 8000fa0:	462b      	mov	r3, r5
 8000fa2:	e794      	b.n	8000ece <__udivmoddi4+0x1da>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	e7d1      	b.n	8000f4c <__udivmoddi4+0x258>
 8000fa8:	46d0      	mov	r8, sl
 8000faa:	e77b      	b.n	8000ea4 <__udivmoddi4+0x1b0>
 8000fac:	3d02      	subs	r5, #2
 8000fae:	4462      	add	r2, ip
 8000fb0:	e732      	b.n	8000e18 <__udivmoddi4+0x124>
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	e70a      	b.n	8000dcc <__udivmoddi4+0xd8>
 8000fb6:	4464      	add	r4, ip
 8000fb8:	3802      	subs	r0, #2
 8000fba:	e742      	b.n	8000e42 <__udivmoddi4+0x14e>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_DMA_Init+0x4c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <MX_DMA_Init+0x4c>)
 8000fd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <MX_DMA_Init+0x4c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	203b      	movs	r0, #59	; 0x3b
 8000fe8:	f002 fd69 	bl	8003abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000fec:	203b      	movs	r0, #59	; 0x3b
 8000fee:	f002 fd82 	bl	8003af6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	2045      	movs	r0, #69	; 0x45
 8000ff8:	f002 fd61 	bl	8003abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000ffc:	2045      	movs	r0, #69	; 0x45
 8000ffe:	f002 fd7a 	bl	8003af6 <HAL_NVIC_EnableIRQ>

}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800

08001010 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <MX_GPIO_Init+0xd4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a2d      	ldr	r2, [pc, #180]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a26      	ldr	r2, [pc, #152]	; (80010e4 <MX_GPIO_Init+0xd4>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_GPIO_Init+0xd4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109c:	4812      	ldr	r0, [pc, #72]	; (80010e8 <MX_GPIO_Init+0xd8>)
 800109e:	f003 fa7f 	bl	80045a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <MX_GPIO_Init+0xd8>)
 80010bc:	f003 f8d4 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_GPIO_Init+0xdc>)
 80010d6:	f003 f8c7 	bl	8004268 <HAL_GPIO_Init>

}
 80010da:	bf00      	nop
 80010dc:	3728      	adds	r7, #40	; 0x28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020800 	.word	0x40020800
 80010ec:	40020400 	.word	0x40020400

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f002 fb72 	bl	80037dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f81a 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fc:	f7ff ff88 	bl	8001010 <MX_GPIO_Init>
  MX_DMA_Init();
 8001100:	f7ff ff5e 	bl	8000fc0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001104:	f00e fcbc 	bl	800fa80 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 8001108:	f000 f880 	bl	800120c <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */
  cliInit();
 800110c:	f000 fcb4 	bl	8001a78 <cliInit>
  ledInit();
 8001110:	f001 ff4c 	bl	8002fac <ledInit>
  gpioInit();
 8001114:	f001 fdfc 	bl	8002d10 <gpioInit>
  sdInit();
 8001118:	f001 fff2 	bl	8003100 <sdInit>
  fatfsInit();
 800111c:	f001 fbfa 	bl	8002914 <fatfsInit>


  cliOpen(_DEF_UART1, 115200);
 8001120:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001124:	2000      	movs	r0, #0
 8001126:	f000 fcf3 	bl	8001b10 <cliOpen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	cliMain();
 800112a:	f000 fda9 	bl	8001c80 <cliMain>
 800112e:	e7fc      	b.n	800112a <main+0x3a>

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	; 0x50
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2230      	movs	r2, #48	; 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f010 fb06 	bl	8011750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <SystemClock_Config+0xc8>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a26      	ldr	r2, [pc, #152]	; (80011f8 <SystemClock_Config+0xc8>)
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <SystemClock_Config+0xc8>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <SystemClock_Config+0xcc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a20      	ldr	r2, [pc, #128]	; (80011fc <SystemClock_Config+0xcc>)
 800117a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <SystemClock_Config+0xcc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800118c:	2301      	movs	r3, #1
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001196:	2302      	movs	r3, #2
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011a0:	2319      	movs	r3, #25
 80011a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80011a4:	23c0      	movs	r3, #192	; 0xc0
 80011a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011ac:	2304      	movs	r3, #4
 80011ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b0:	f107 0320 	add.w	r3, r7, #32
 80011b4:	4618      	mov	r0, r3
 80011b6:	f004 fc77 	bl	8005aa8 <HAL_RCC_OscConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011c0:	f000 f81e 	bl	8001200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c4:	230f      	movs	r3, #15
 80011c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c8:	2302      	movs	r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	2103      	movs	r1, #3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 fed9 	bl	8005f98 <HAL_RCC_ClockConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011ec:	f000 f808 	bl	8001200 <Error_Handler>
  }
}
 80011f0:	bf00      	nop
 80011f2:	3750      	adds	r7, #80	; 0x50
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40007000 	.word	0x40007000

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001208:	e7fe      	b.n	8001208 <Error_Handler+0x8>
	...

0800120c <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_SDIO_SD_Init+0x58>)
 8001212:	4a15      	ldr	r2, [pc, #84]	; (8001268 <MX_SDIO_SD_Init+0x5c>)
 8001214:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_SDIO_SD_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_SDIO_SD_Init+0x58>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <MX_SDIO_SD_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_SDIO_SD_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <MX_SDIO_SD_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <MX_SDIO_SD_Init+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800123a:	480a      	ldr	r0, [pc, #40]	; (8001264 <MX_SDIO_SD_Init+0x58>)
 800123c:	f005 f864 	bl	8006308 <HAL_SD_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8001246:	f7ff ffdb 	bl	8001200 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800124a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_SDIO_SD_Init+0x58>)
 8001250:	f005 fe3c 	bl	8006ecc <HAL_SD_ConfigWideBusOperation>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800125a:	f7ff ffd1 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200002f8 	.word	0x200002f8
 8001268:	40012c00 	.word	0x40012c00

0800126c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a68      	ldr	r2, [pc, #416]	; (800142c <HAL_SD_MspInit+0x1c0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	f040 80ca 	bne.w	8001424 <HAL_SD_MspInit+0x1b8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	4b66      	ldr	r3, [pc, #408]	; (8001430 <HAL_SD_MspInit+0x1c4>)
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001298:	4a65      	ldr	r2, [pc, #404]	; (8001430 <HAL_SD_MspInit+0x1c4>)
 800129a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800129e:	6453      	str	r3, [r2, #68]	; 0x44
 80012a0:	4b63      	ldr	r3, [pc, #396]	; (8001430 <HAL_SD_MspInit+0x1c4>)
 80012a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	4b5f      	ldr	r3, [pc, #380]	; (8001430 <HAL_SD_MspInit+0x1c4>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	4a5e      	ldr	r2, [pc, #376]	; (8001430 <HAL_SD_MspInit+0x1c4>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6313      	str	r3, [r2, #48]	; 0x30
 80012bc:	4b5c      	ldr	r3, [pc, #368]	; (8001430 <HAL_SD_MspInit+0x1c4>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	4b58      	ldr	r3, [pc, #352]	; (8001430 <HAL_SD_MspInit+0x1c4>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	4a57      	ldr	r2, [pc, #348]	; (8001430 <HAL_SD_MspInit+0x1c4>)
 80012d2:	f043 0302 	orr.w	r3, r3, #2
 80012d6:	6313      	str	r3, [r2, #48]	; 0x30
 80012d8:	4b55      	ldr	r3, [pc, #340]	; (8001430 <HAL_SD_MspInit+0x1c4>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80012e4:	f44f 7350 	mov.w	r3, #832	; 0x340
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80012f6:	230c      	movs	r3, #12
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	484c      	ldr	r0, [pc, #304]	; (8001434 <HAL_SD_MspInit+0x1c8>)
 8001302:	f002 ffb1 	bl	8004268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8001306:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001310:	2301      	movs	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001318:	230c      	movs	r3, #12
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4845      	ldr	r0, [pc, #276]	; (8001438 <HAL_SD_MspInit+0x1cc>)
 8001324:	f002 ffa0 	bl	8004268 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001328:	4b44      	ldr	r3, [pc, #272]	; (800143c <HAL_SD_MspInit+0x1d0>)
 800132a:	4a45      	ldr	r2, [pc, #276]	; (8001440 <HAL_SD_MspInit+0x1d4>)
 800132c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800132e:	4b43      	ldr	r3, [pc, #268]	; (800143c <HAL_SD_MspInit+0x1d0>)
 8001330:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001334:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001336:	4b41      	ldr	r3, [pc, #260]	; (800143c <HAL_SD_MspInit+0x1d0>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800133c:	4b3f      	ldr	r3, [pc, #252]	; (800143c <HAL_SD_MspInit+0x1d0>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001342:	4b3e      	ldr	r3, [pc, #248]	; (800143c <HAL_SD_MspInit+0x1d0>)
 8001344:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001348:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800134a:	4b3c      	ldr	r3, [pc, #240]	; (800143c <HAL_SD_MspInit+0x1d0>)
 800134c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001350:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001352:	4b3a      	ldr	r3, [pc, #232]	; (800143c <HAL_SD_MspInit+0x1d0>)
 8001354:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001358:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800135a:	4b38      	ldr	r3, [pc, #224]	; (800143c <HAL_SD_MspInit+0x1d0>)
 800135c:	2220      	movs	r2, #32
 800135e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001360:	4b36      	ldr	r3, [pc, #216]	; (800143c <HAL_SD_MspInit+0x1d0>)
 8001362:	2200      	movs	r2, #0
 8001364:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001366:	4b35      	ldr	r3, [pc, #212]	; (800143c <HAL_SD_MspInit+0x1d0>)
 8001368:	2204      	movs	r2, #4
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800136c:	4b33      	ldr	r3, [pc, #204]	; (800143c <HAL_SD_MspInit+0x1d0>)
 800136e:	2203      	movs	r2, #3
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001372:	4b32      	ldr	r3, [pc, #200]	; (800143c <HAL_SD_MspInit+0x1d0>)
 8001374:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001378:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800137a:	4b30      	ldr	r3, [pc, #192]	; (800143c <HAL_SD_MspInit+0x1d0>)
 800137c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001382:	482e      	ldr	r0, [pc, #184]	; (800143c <HAL_SD_MspInit+0x1d0>)
 8001384:	f002 fbd2 	bl	8003b2c <HAL_DMA_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800138e:	f7ff ff37 	bl	8001200 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a29      	ldr	r2, [pc, #164]	; (800143c <HAL_SD_MspInit+0x1d0>)
 8001396:	641a      	str	r2, [r3, #64]	; 0x40
 8001398:	4a28      	ldr	r2, [pc, #160]	; (800143c <HAL_SD_MspInit+0x1d0>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800139e:	4b29      	ldr	r3, [pc, #164]	; (8001444 <HAL_SD_MspInit+0x1d8>)
 80013a0:	4a29      	ldr	r2, [pc, #164]	; (8001448 <HAL_SD_MspInit+0x1dc>)
 80013a2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <HAL_SD_MspInit+0x1d8>)
 80013a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013aa:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ac:	4b25      	ldr	r3, [pc, #148]	; (8001444 <HAL_SD_MspInit+0x1d8>)
 80013ae:	2240      	movs	r2, #64	; 0x40
 80013b0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b2:	4b24      	ldr	r3, [pc, #144]	; (8001444 <HAL_SD_MspInit+0x1d8>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <HAL_SD_MspInit+0x1d8>)
 80013ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013be:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013c0:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_SD_MspInit+0x1d8>)
 80013c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013c6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <HAL_SD_MspInit+0x1d8>)
 80013ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ce:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <HAL_SD_MspInit+0x1d8>)
 80013d2:	2220      	movs	r2, #32
 80013d4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_SD_MspInit+0x1d8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_SD_MspInit+0x1d8>)
 80013de:	2204      	movs	r2, #4
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <HAL_SD_MspInit+0x1d8>)
 80013e4:	2203      	movs	r2, #3
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <HAL_SD_MspInit+0x1d8>)
 80013ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_SD_MspInit+0x1d8>)
 80013f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013f6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80013f8:	4812      	ldr	r0, [pc, #72]	; (8001444 <HAL_SD_MspInit+0x1d8>)
 80013fa:	f002 fb97 	bl	8003b2c <HAL_DMA_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 8001404:	f7ff fefc 	bl	8001200 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <HAL_SD_MspInit+0x1d8>)
 800140c:	63da      	str	r2, [r3, #60]	; 0x3c
 800140e:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <HAL_SD_MspInit+0x1d8>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2105      	movs	r1, #5
 8001418:	2031      	movs	r0, #49	; 0x31
 800141a:	f002 fb50 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800141e:	2031      	movs	r0, #49	; 0x31
 8001420:	f002 fb69 	bl	8003af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40012c00 	.word	0x40012c00
 8001430:	40023800 	.word	0x40023800
 8001434:	40020000 	.word	0x40020000
 8001438:	40020400 	.word	0x40020400
 800143c:	2000037c 	.word	0x2000037c
 8001440:	40026458 	.word	0x40026458
 8001444:	200003dc 	.word	0x200003dc
 8001448:	400264a0 	.word	0x400264a0

0800144c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_MspInit+0x4c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <HAL_MspInit+0x4c>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_MspInit+0x4c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_MspInit+0x4c>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_MspInit+0x4c>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x4>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e8:	f002 f9ca 	bl	8003880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <SDIO_IRQHandler+0x10>)
 80014f6:	f005 f97f 	bl	80067f8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200002f8 	.word	0x200002f8

08001504 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <DMA2_Stream3_IRQHandler+0x10>)
 800150a:	f002 fc37 	bl	8003d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000037c 	.word	0x2000037c

08001518 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <OTG_FS_IRQHandler+0x10>)
 800151e:	f003 f9b6 	bl	800488e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20002230 	.word	0x20002230

0800152c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <DMA2_Stream6_IRQHandler+0x10>)
 8001532:	f002 fc23 	bl	8003d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200003dc 	.word	0x200003dc

08001540 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return 1;
 8001544:	2301      	movs	r3, #1
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <_kill>:

int _kill(int pid, int sig)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800155a:	f010 f995 	bl	8011888 <__errno>
 800155e:	4603      	mov	r3, r0
 8001560:	2216      	movs	r2, #22
 8001562:	601a      	str	r2, [r3, #0]
  return -1;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <_exit>:

void _exit (int status)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ffe7 	bl	8001550 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001582:	e7fe      	b.n	8001582 <_exit+0x12>

08001584 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e00a      	b.n	80015ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001596:	f3af 8000 	nop.w
 800159a:	4601      	mov	r1, r0
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	60ba      	str	r2, [r7, #8]
 80015a2:	b2ca      	uxtb	r2, r1
 80015a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbf0      	blt.n	8001596 <_read+0x12>
  }

  return len;
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	e009      	b.n	80015e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	60ba      	str	r2, [r7, #8]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbf1      	blt.n	80015d0 <_write+0x12>
  }
  return len;
 80015ec:	687b      	ldr	r3, [r7, #4]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_close>:

int _close(int file)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161e:	605a      	str	r2, [r3, #4]
  return 0;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_isatty>:

int _isatty(int file)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <_sbrk+0x5c>)
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <_sbrk+0x60>)
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <_sbrk+0x64>)
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <_sbrk+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	429a      	cmp	r2, r3
 800168e:	d207      	bcs.n	80016a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001690:	f010 f8fa 	bl	8011888 <__errno>
 8001694:	4603      	mov	r3, r0
 8001696:	220c      	movs	r2, #12
 8001698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	e009      	b.n	80016b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <_sbrk+0x64>)
 80016b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20020000 	.word	0x20020000
 80016c0:	00000400 	.word	0x00000400
 80016c4:	2000043c 	.word	0x2000043c
 80016c8:	20002a80 	.word	0x20002a80

080016cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <SystemInit+0x20>)
 80016d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <SystemInit+0x20>)
 80016d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001728 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016f4:	f7ff ffea 	bl	80016cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016fa:	490d      	ldr	r1, [pc, #52]	; (8001730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001710:	4c0a      	ldr	r4, [pc, #40]	; (800173c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171e:	f010 f8b9 	bl	8011894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001722:	f7ff fce5 	bl	80010f0 <main>
  bx  lr    
 8001726:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001730:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8001734:	0801456c 	.word	0x0801456c
  ldr r2, =_sbss
 8001738:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 800173c:	20002a80 	.word	0x20002a80

08001740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC_IRQHandler>

08001742 <delay>:
#include "common.h"



void delay(uint32_t ms)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f002 f8b8 	bl	80038c0 <HAL_Delay>
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <millis>:


uint32_t millis(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800175c:	f002 f8a4 	bl	80038a8 <HAL_GetTick>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <SD_CheckStatus+0x80>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 8001778:	f001 fd00 	bl	800317c <sdIsInit>
 800177c:	4603      	mov	r3, r0
 800177e:	f083 0301 	eor.w	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d007      	beq.n	8001798 <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <SD_CheckStatus+0x80>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	b2da      	uxtb	r2, r3
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <SD_CheckStatus+0x80>)
 8001796:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 8001798:	f001 fcfc 	bl	8003194 <sdIsDetected>
 800179c:	4603      	mov	r3, r0
 800179e:	f083 0301 	eor.w	r3, r3, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <SD_CheckStatus+0x80>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f043 0302 	orr.w	r3, r3, #2
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <SD_CheckStatus+0x80>)
 80017b6:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 80017b8:	200a      	movs	r0, #10
 80017ba:	f001 fd6f 	bl	800329c <sdIsReady>
 80017be:	4603      	mov	r3, r0
 80017c0:	f083 0301 	eor.w	r3, r3, #1
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <SD_CheckStatus+0x80>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <SD_CheckStatus+0x80>)
 80017d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80017da:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <SD_CheckStatus+0x80>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b2db      	uxtb	r3, r3
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000004 	.word	0x20000004

080017ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <SD_initialize+0x40>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]

  if (sdIsInit() != true)
 80017fc:	f001 fcbe 	bl	800317c <sdIsInit>
 8001800:	4603      	mov	r3, r0
 8001802:	f083 0301 	eor.w	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <SD_initialize+0x30>
  {
    Stat |= STA_NOINIT;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <SD_initialize+0x40>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	b2da      	uxtb	r2, r3
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <SD_initialize+0x40>)
 800181a:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <SD_initialize+0x40>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000004 	.word	0x20000004

08001830 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff93 	bl	8001768 <SD_CheckStatus>
 8001842:	4603      	mov	r3, r0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	4603      	mov	r3, r0
 800185a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	75fb      	strb	r3, [r7, #23]


  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 8001860:	f242 7310 	movw	r3, #10000	; 0x2710
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f001 fd37 	bl	80032dc <sdReadBlocks>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <SD_read+0x2c>
  {
    res = RES_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8001878:	7dfb      	ldrb	r3, [r7, #23]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4603      	mov	r3, r0
 8001890:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	75fb      	strb	r3, [r7, #23]

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 8001896:	f242 7310 	movw	r3, #10000	; 0x2710
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f001 fd66 	bl	8003370 <sdWriteBlocks>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <SD_write+0x2c>
  {
    res = RES_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	; 0x30
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	603a      	str	r2, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	460b      	mov	r3, r1
 80018c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80018ce:	4b25      	ldr	r3, [pc, #148]	; (8001964 <SD_ioctl+0xac>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <SD_ioctl+0x28>
 80018dc:	2303      	movs	r3, #3
 80018de:	e03c      	b.n	800195a <SD_ioctl+0xa2>

  switch (cmd)
 80018e0:	79bb      	ldrb	r3, [r7, #6]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d834      	bhi.n	8001950 <SD_ioctl+0x98>
 80018e6:	a201      	add	r2, pc, #4	; (adr r2, 80018ec <SD_ioctl+0x34>)
 80018e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ec:	080018fd 	.word	0x080018fd
 80018f0:	08001905 	.word	0x08001905
 80018f4:	0800191d 	.word	0x0800191d
 80018f8:	08001937 	.word	0x08001937
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001902:	e028      	b.n	8001956 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    sdGetInfo(&sd_info);
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4618      	mov	r0, r3
 800190a:	f001 fc59 	bl	80031c0 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 800190e:	6a3a      	ldr	r2, [r7, #32]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800191a:	e01c      	b.n	8001956 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    sdGetInfo(&sd_info);
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	4618      	mov	r0, r3
 8001922:	f001 fc4d 	bl	80031c0 <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	b29a      	uxth	r2, r3
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001934:	e00f      	b.n	8001956 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    sdGetInfo(&sd_info);
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	4618      	mov	r0, r3
 800193c:	f001 fc40 	bl	80031c0 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	0a5a      	lsrs	r2, r3, #9
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800194e:	e002      	b.n	8001956 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8001950:	2304      	movs	r3, #4
 8001952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8001956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800195a:	4618      	mov	r0, r3
 800195c:	3730      	adds	r7, #48	; 0x30
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000004 	.word	0x20000004

08001968 <cdcAvailable>:
bool rx_full=false;



uint32_t cdcAvailable(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % BUF_SIZE;
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <cdcAvailable+0x24>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <cdcAvailable+0x28>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800197c:	607b      	str	r3, [r7, #4]

	return ret;
 800197e:	687b      	ldr	r3, [r7, #4]
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	20000640 	.word	0x20000640
 8001990:	20000644 	.word	0x20000644

08001994 <cdcRead>:

uint8_t cdcRead(void)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	71fb      	strb	r3, [r7, #7]

	ret = rx_buf[rx_out];
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <cdcRead+0x3c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a0c      	ldr	r2, [pc, #48]	; (80019d4 <cdcRead+0x40>)
 80019a4:	5cd3      	ldrb	r3, [r2, r3]
 80019a6:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <cdcRead+0x3c>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <cdcRead+0x44>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d006      	beq.n	80019c2 <cdcRead+0x2e>
	{
		rx_out = (rx_out + 1) % BUF_SIZE;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <cdcRead+0x3c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <cdcRead+0x3c>)
 80019c0:	6013      	str	r3, [r2, #0]
	}

	return ret;
 80019c2:	79fb      	ldrb	r3, [r7, #7]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	20000644 	.word	0x20000644
 80019d4:	20000440 	.word	0x20000440
 80019d8:	20000640 	.word	0x20000640

080019dc <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
	rx_buf[rx_in] = rx_data;
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <cdcDataIn+0x3c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	490c      	ldr	r1, [pc, #48]	; (8001a1c <cdcDataIn+0x40>)
 80019ec:	79fa      	ldrb	r2, [r7, #7]
 80019ee:	54ca      	strb	r2, [r1, r3]

	uint8_t next_rx_in = (rx_in + 1) % BUF_SIZE;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <cdcDataIn+0x3c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	3301      	adds	r3, #1
 80019f8:	73fb      	strb	r3, [r7, #15]

	if(next_rx_in != rx_out)
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <cdcDataIn+0x44>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d002      	beq.n	8001a0a <cdcDataIn+0x2e>
	{
		rx_in = next_rx_in;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <cdcDataIn+0x3c>)
 8001a08:	6013      	str	r3, [r2, #0]
	}
}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000640 	.word	0x20000640
 8001a1c:	20000440 	.word	0x20000440
 8001a20:	20000644 	.word	0x20000644

08001a24 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t len)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
	uint32_t pre_time = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
	uint8_t ret;

	pre_time = millis();
 8001a32:	f7ff fe91 	bl	8001758 <millis>
 8001a36:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(p_data, len);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f00e f94a 	bl	800fcd8 <CDC_Transmit_FS>
 8001a44:	4603      	mov	r3, r0
 8001a46:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 8001a48:	7afb      	ldrb	r3, [r7, #11]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <cdcWrite+0x2e>
			{
				return len;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	e00e      	b.n	8001a70 <cdcWrite+0x4c>
			}
			else if(ret == USBD_FAIL)
 8001a52:	7afb      	ldrb	r3, [r7, #11]
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d101      	bne.n	8001a5c <cdcWrite+0x38>
			{
				return 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e009      	b.n	8001a70 <cdcWrite+0x4c>
			}

			if(millis() - pre_time >= 100)
 8001a5c:	f7ff fe7c 	bl	8001758 <millis>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b63      	cmp	r3, #99	; 0x63
 8001a68:	d800      	bhi.n	8001a6c <cdcWrite+0x48>
		ret = CDC_Transmit_FS(p_data, len);
 8001a6a:	e7e5      	b.n	8001a38 <cdcWrite+0x14>
			{
				break;
 8001a6c:	bf00      	nop
			}
	}

	return 0;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <cliInit+0x74>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <cliInit+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <cliInit+0x74>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <cliInit+0x74>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <cliInit+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <cliInit+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <cliInit+0x74>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8001aae:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <cliInit+0x74>)
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <cliInit+0x78>)
 8001ab2:	f8c3 2474 	str.w	r2, [r3, #1140]	; 0x474
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <cliInit+0x74>)
 8001ab8:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <cliInit+0x7c>)
 8001aba:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <cliInit+0x74>)
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <cliInit+0x80>)
 8001ac2:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <cliInit+0x74>)
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <cliInit+0x84>)
 8001aca:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

  cliLineClean(&cli_node);
 8001ace:	4807      	ldr	r0, [pc, #28]	; (8001aec <cliInit+0x74>)
 8001ad0:	f000 fb5c 	bl	800218c <cliLineClean>


  cliAdd("help", cliShowList);
 8001ad4:	490a      	ldr	r1, [pc, #40]	; (8001b00 <cliInit+0x88>)
 8001ad6:	480b      	ldr	r0, [pc, #44]	; (8001b04 <cliInit+0x8c>)
 8001ad8:	f000 fdf8 	bl	80026cc <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001adc:	490a      	ldr	r1, [pc, #40]	; (8001b08 <cliInit+0x90>)
 8001ade:	480b      	ldr	r0, [pc, #44]	; (8001b0c <cliInit+0x94>)
 8001ae0:	f000 fdf4 	bl	80026cc <cliAdd>

  return true;
 8001ae4:	2301      	movs	r3, #1
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000648 	.word	0x20000648
 8001af0:	0800255d 	.word	0x0800255d
 8001af4:	080025ad 	.word	0x080025ad
 8001af8:	08002605 	.word	0x08002605
 8001afc:	0800264d 	.word	0x0800264d
 8001b00:	08002761 	.word	0x08002761
 8001b04:	080137d0 	.word	0x080137d0
 8001b08:	080027d1 	.word	0x080027d1
 8001b0c:	080137d8 	.word	0x080137d8

08001b10 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	6039      	str	r1, [r7, #0]
 8001b1a:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <cliOpen+0x38>)
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8001b22:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <cliOpen+0x38>)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	6839      	ldr	r1, [r7, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f001 fdc3 	bl	80036b8 <uartOpen>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <cliOpen+0x38>)
 8001b38:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8001b3a:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <cliOpen+0x38>)
 8001b3c:	7a1b      	ldrb	r3, [r3, #8]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000648 	.word	0x20000648

08001b4c <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8001b54:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <cliShowLog+0xdc>)
 8001b56:	7a5b      	ldrb	r3, [r3, #9]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d061      	beq.n	8001c20 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7a98      	ldrb	r0, [r3, #10]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8001b66:	461a      	mov	r2, r3
 8001b68:	4930      	ldr	r1, [pc, #192]	; (8001c2c <cliShowLog+0xe0>)
 8001b6a:	f001 fdff 	bl	800376c <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	7a98      	ldrb	r0, [r3, #10]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8001b78:	461a      	mov	r2, r3
 8001b7a:	492d      	ldr	r1, [pc, #180]	; (8001c30 <cliShowLog+0xe4>)
 8001b7c:	f001 fdf6 	bl	800376c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7a98      	ldrb	r0, [r3, #10]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4929      	ldr	r1, [pc, #164]	; (8001c34 <cliShowLog+0xe8>)
 8001b8e:	f001 fded 	bl	800376c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7a98      	ldrb	r0, [r3, #10]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4926      	ldr	r1, [pc, #152]	; (8001c38 <cliShowLog+0xec>)
 8001ba0:	f001 fde4 	bl	800376c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7a98      	ldrb	r0, [r3, #10]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4922      	ldr	r1, [pc, #136]	; (8001c3c <cliShowLog+0xf0>)
 8001bb2:	f001 fddb 	bl	800376c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7a98      	ldrb	r0, [r3, #10]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	491f      	ldr	r1, [pc, #124]	; (8001c40 <cliShowLog+0xf4>)
 8001bc4:	f001 fdd2 	bl	800376c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7a98      	ldrb	r0, [r3, #10]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	491b      	ldr	r1, [pc, #108]	; (8001c44 <cliShowLog+0xf8>)
 8001bd6:	f001 fdc9 	bl	800376c <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	e012      	b.n	8001c06 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7a98      	ldrb	r0, [r3, #10]
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4613      	mov	r3, r2
 8001be8:	015b      	lsls	r3, r3, #5
 8001bea:	4413      	add	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4913      	ldr	r1, [pc, #76]	; (8001c48 <cliShowLog+0xfc>)
 8001bfc:	f001 fdb6 	bl	800376c <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3301      	adds	r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4293      	cmp	r3, r2
 8001c12:	dbe5      	blt.n	8001be0 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	7a9b      	ldrb	r3, [r3, #10]
 8001c18:	490c      	ldr	r1, [pc, #48]	; (8001c4c <cliShowLog+0x100>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f001 fda6 	bl	800376c <uartPrintf>
  }
}
 8001c20:	bf00      	nop
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000648 	.word	0x20000648
 8001c2c:	080137dc 	.word	0x080137dc
 8001c30:	080137ec 	.word	0x080137ec
 8001c34:	080137fc 	.word	0x080137fc
 8001c38:	0801380c 	.word	0x0801380c
 8001c3c:	0801381c 	.word	0x0801381c
 8001c40:	0801382c 	.word	0x0801382c
 8001c44:	0801383c 	.word	0x0801383c
 8001c48:	0801384c 	.word	0x0801384c
 8001c4c:	0801385c 	.word	0x0801385c

08001c50 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	4906      	ldr	r1, [pc, #24]	; (8001c78 <cliShowPrompt+0x28>)
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 fd84 	bl	800376c <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4904      	ldr	r1, [pc, #16]	; (8001c7c <cliShowPrompt+0x2c>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f001 fd7e 	bl	800376c <uartPrintf>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	08013860 	.word	0x08013860
 8001c7c:	08013864 	.word	0x08013864

08001c80 <cliMain>:

bool cliMain(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <cliMain+0x40>)
 8001c86:	7a1b      	ldrb	r3, [r3, #8]
 8001c88:	f083 0301 	eor.w	r3, r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <cliMain+0x16>
  {
    return false;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e012      	b.n	8001cbc <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <cliMain+0x40>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 fd28 	bl	80036f0 <uartAvailable>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d009      	beq.n	8001cba <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <cliMain+0x40>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f001 fd33 	bl	8003716 <uartRead>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <cliMain+0x40>)
 8001cb6:	f000 f805 	bl	8001cc4 <cliUpdate>
  }

  return true;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000648 	.word	0x20000648

08001cc4 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08c      	sub	sp, #48	; 0x30
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8001cdc:	61fb      	str	r3, [r7, #28]

  if (p_cli->state == CLI_RX_IDLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7c1b      	ldrb	r3, [r3, #16]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 816d 	bne.w	8001fc2 <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	2b7f      	cmp	r3, #127	; 0x7f
 8001cec:	d02a      	beq.n	8001d44 <cliUpdate+0x80>
 8001cee:	2b7f      	cmp	r3, #127	; 0x7f
 8001cf0:	f300 80da 	bgt.w	8001ea8 <cliUpdate+0x1e4>
 8001cf4:	2b1b      	cmp	r3, #27
 8001cf6:	d021      	beq.n	8001d3c <cliUpdate+0x78>
 8001cf8:	2b1b      	cmp	r3, #27
 8001cfa:	f300 80d5 	bgt.w	8001ea8 <cliUpdate+0x1e4>
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d062      	beq.n	8001dc8 <cliUpdate+0x104>
 8001d02:	2b0d      	cmp	r3, #13
 8001d04:	f040 80d0 	bne.w	8001ea8 <cliUpdate+0x1e4>
    {
      // 엔터
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 fa54 	bl	80021c0 <cliLineAdd>
          cliRunCmd(p_cli);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fb25 	bl	8002368 <cliRunCmd>
        }

        line->count = 0;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff8b 	bl	8001c50 <cliShowPrompt>
        break;
 8001d3a:	e142      	b.n	8001fc2 <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	741a      	strb	r2, [r3, #16]
        break;
 8001d42:	e13e      	b.n	8001fc2 <cliUpdate+0x2fe>

      // DEL
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f080 8131 	bcs.w	8001fb8 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001d66:	2301      	movs	r3, #1
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d6a:	e013      	b.n	8001d94 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d72:	461a      	mov	r2, r3
 8001d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d76:	441a      	add	r2, r3
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d82:	440b      	add	r3, r1
 8001d84:	3b01      	subs	r3, #1
 8001d86:	69f9      	ldr	r1, [r7, #28]
 8001d88:	5c89      	ldrb	r1, [r1, r2]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d90:	3301      	adds	r3, #1
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d94:	7efb      	ldrb	r3, [r7, #27]
 8001d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dbe7      	blt.n	8001d6c <cliUpdate+0xa8>
          }

          line->count--;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001db2:	461a      	mov	r2, r3
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	2100      	movs	r1, #0
 8001db8:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	498d      	ldr	r1, [pc, #564]	; (8001ff4 <cliUpdate+0x330>)
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f001 fcd3 	bl	800376c <uartPrintf>
        }
        break;
 8001dc6:	e0f7      	b.n	8001fb8 <cliUpdate+0x2f4>

      // 백스페이스
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d055      	beq.n	8001e7e <cliUpdate+0x1ba>
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d050      	beq.n	8001e7e <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d10e      	bne.n	8001e0a <cliUpdate+0x146>
          {
            line->count--;
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e02:	461a      	mov	r2, r3
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	2100      	movs	r1, #0
 8001e08:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d231      	bcs.n	8001e7e <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e2e:	e013      	b.n	8001e58 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e36:	461a      	mov	r2, r3
 8001e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3a:	441a      	add	r2, r3
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e42:	4619      	mov	r1, r3
 8001e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e46:	440b      	add	r3, r1
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	69f9      	ldr	r1, [r7, #28]
 8001e4c:	5c89      	ldrb	r1, [r1, r2]
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e54:	3301      	adds	r3, #1
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e58:	7ebb      	ldrb	r3, [r7, #26]
 8001e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dbe7      	blt.n	8001e30 <cliUpdate+0x16c>
            }

            line->count--;
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e76:	461a      	mov	r2, r3
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 8099 	beq.w	8001fbc <cliUpdate+0x2f8>
        {
          line->cursor--;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4956      	ldr	r1, [pc, #344]	; (8001ff8 <cliUpdate+0x334>)
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f001 fc63 	bl	800376c <uartPrintf>
        }
        break;
 8001ea6:	e089      	b.n	8001fbc <cliUpdate+0x2f8>

      default:
        if ((line->count + 1) < line->buf_len)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001eae:	3301      	adds	r3, #1
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	f280 8082 	bge.w	8001fc0 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d124      	bne.n	8001f16 <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	1cf9      	adds	r1, r7, #3
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 fc32 	bl	800373e <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	78f9      	ldrb	r1, [r7, #3]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001eee:	3301      	adds	r3, #1
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001efe:	3301      	adds	r3, #1
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f0e:	461a      	mov	r2, r3
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2100      	movs	r1, #0
 8001f14:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d24c      	bcs.n	8001fc0 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3a:	e013      	b.n	8001f64 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f42:	461a      	mov	r2, r3
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f50:	4619      	mov	r1, r3
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	1acb      	subs	r3, r1, r3
 8001f56:	69f9      	ldr	r1, [r7, #28]
 8001f58:	5c89      	ldrb	r1, [r1, r2]
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	3301      	adds	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
 8001f64:	7e7b      	ldrb	r3, [r7, #25]
 8001f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	dbe7      	blt.n	8001f3c <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f72:	461a      	mov	r2, r3
 8001f74:	78f9      	ldrb	r1, [r7, #3]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f80:	3301      	adds	r3, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f90:	3301      	adds	r3, #1
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	4913      	ldr	r1, [pc, #76]	; (8001ffc <cliUpdate+0x338>)
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 fbdb 	bl	800376c <uartPrintf>
          }
        }
        break;
 8001fb6:	e003      	b.n	8001fc0 <cliUpdate+0x2fc>
        break;
 8001fb8:	bf00      	nop
 8001fba:	e002      	b.n	8001fc2 <cliUpdate+0x2fe>
        break;
 8001fbc:	bf00      	nop
 8001fbe:	e000      	b.n	8001fc2 <cliUpdate+0x2fe>
        break;
 8001fc0:	bf00      	nop
    }
  }

  switch(p_cli->state)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7c1b      	ldrb	r3, [r3, #16]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	f200 80d2 	bhi.w	8002172 <cliUpdate+0x4ae>
 8001fce:	a201      	add	r2, pc, #4	; (adr r2, 8001fd4 <cliUpdate+0x310>)
 8001fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd4:	08001fe5 	.word	0x08001fe5
 8001fd8:	08001fed 	.word	0x08001fed
 8001fdc:	08002001 	.word	0x08002001
 8001fe0:	08002169 	.word	0x08002169
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	741a      	strb	r2, [r3, #16]
      break;
 8001fea:	e0c2      	b.n	8002172 <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	741a      	strb	r2, [r3, #16]
      break;
 8001ff2:	e0be      	b.n	8002172 <cliUpdate+0x4ae>
 8001ff4:	0801386c 	.word	0x0801386c
 8001ff8:	08013874 	.word	0x08013874
 8001ffc:	0801387c 	.word	0x0801387c

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	2b44      	cmp	r3, #68	; 0x44
 800200a:	d11a      	bne.n	8002042 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002012:	2b00      	cmp	r3, #0
 8002014:	d015      	beq.n	8002042 <cliUpdate+0x37e>
        {
          line->cursor--;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800201c:	3b01      	subs	r3, #1
 800201e:	b2da      	uxtb	r2, r3
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8002026:	231b      	movs	r3, #27
 8002028:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800202a:	235b      	movs	r3, #91	; 0x5b
 800202c:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	f107 010c 	add.w	r1, r7, #12
 800203a:	2203      	movs	r2, #3
 800203c:	4618      	mov	r0, r3
 800203e:	f001 fb7e 	bl	800373e <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	2b43      	cmp	r3, #67	; 0x43
 8002046:	d11d      	bne.n	8002084 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002054:	429a      	cmp	r2, r3
 8002056:	d215      	bcs.n	8002084 <cliUpdate+0x3c0>
        {
          line->cursor++;
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800205e:	3301      	adds	r3, #1
 8002060:	b2da      	uxtb	r2, r3
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 8002068:	231b      	movs	r3, #27
 800206a:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800206c:	235b      	movs	r3, #91	; 0x5b
 800206e:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	f107 010c 	add.w	r1, r7, #12
 800207c:	2203      	movs	r2, #3
 800207e:	4618      	mov	r0, r3
 8002080:	f001 fb5d 	bl	800373e <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	2b41      	cmp	r3, #65	; 0x41
 8002088:	d10c      	bne.n	80020a4 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 800208a:	2101      	movs	r1, #1
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f8e1 	bl	8002254 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 800209c:	4619      	mov	r1, r3
 800209e:	4610      	mov	r0, r2
 80020a0:	f001 fb64 	bl	800376c <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	2b42      	cmp	r3, #66	; 0x42
 80020a8:	d10c      	bne.n	80020c4 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 80020aa:	2100      	movs	r1, #0
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f8d1 	bl	8002254 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	781a      	ldrb	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 80020bc:	4619      	mov	r1, r3
 80020be:	4610      	mov	r0, r2
 80020c0:	f001 fb54 	bl	800376c <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	2b31      	cmp	r3, #49	; 0x31
 80020c8:	d10f      	bne.n	80020ea <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	7818      	ldrb	r0, [r3, #0]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d4:	461a      	mov	r2, r3
 80020d6:	492b      	ldr	r1, [pc, #172]	; (8002184 <cliUpdate+0x4c0>)
 80020d8:	f001 fb48 	bl	800376c <uartPrintf>
        line->cursor = 0;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2204      	movs	r2, #4
 80020e8:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	2b34      	cmp	r3, #52	; 0x34
 80020ee:	d13f      	bne.n	8002170 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d210      	bcs.n	8002122 <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002106:	b29a      	uxth	r2, r3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800210e:	b29b      	uxth	r3, r3
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	8afa      	ldrh	r2, [r7, #22]
 800211a:	491b      	ldr	r1, [pc, #108]	; (8002188 <cliUpdate+0x4c4>)
 800211c:	4618      	mov	r0, r3
 800211e:	f001 fb25 	bl	800376c <uartPrintf>
        }
        if (line->cursor > line->count)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800212e:	429a      	cmp	r2, r3
 8002130:	d910      	bls.n	8002154 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002138:	b29a      	uxth	r2, r3
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002140:	b29b      	uxth	r3, r3
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	8afa      	ldrh	r2, [r7, #22]
 800214c:	490d      	ldr	r1, [pc, #52]	; (8002184 <cliUpdate+0x4c0>)
 800214e:	4618      	mov	r0, r3
 8002150:	f001 fb0c 	bl	800376c <uartPrintf>
        }
        line->cursor = line->count;
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2204      	movs	r2, #4
 8002164:	741a      	strb	r2, [r3, #16]
      }
      break;
 8002166:	e003      	b.n	8002170 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	741a      	strb	r2, [r3, #16]
      break;
 800216e:	e000      	b.n	8002172 <cliUpdate+0x4ae>
      break;
 8002170:	bf00      	nop
  }

  cliShowLog(p_cli);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fcea 	bl	8001b4c <cliShowLog>

  return ret;
 8002178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800217c:	4618      	mov	r0, r3
 800217e:	3730      	adds	r7, #48	; 0x30
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	08013888 	.word	0x08013888
 8002188:	08013890 	.word	0x08013890

0800218c <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
  p_cli->line.cursor  = 0;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	223f      	movs	r2, #63	; 0x3f
 80021a8:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
  p_cli->line.buf[0]  = 0;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80021ce:	461a      	mov	r2, r3
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	015b      	lsls	r3, r3, #5
 80021d6:	4413      	add	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4413      	add	r3, r2
 80021dc:	440b      	add	r3, r1
 80021de:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4610      	mov	r0, r2
 80021e6:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 80021ea:	2243      	movs	r2, #67	; 0x43
 80021ec:	4619      	mov	r1, r3
 80021ee:	f00f fb80 	bl	80118f2 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d807      	bhi.n	800220c <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002202:	3301      	adds	r3, #1
 8002204:	b2da      	uxtb	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002212:	b25a      	sxtb	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <cliLineAdd+0x90>)
 8002224:	fb83 1302 	smull	r1, r3, r3, r2
 8002228:	1059      	asrs	r1, r3, #1
 800222a:	17d3      	asrs	r3, r2, #31
 800222c:	1ac9      	subs	r1, r1, r3
 800222e:	460b      	mov	r3, r1
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	1ad1      	subs	r1, r2, r3
 8002236:	b2ca      	uxtb	r2, r1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	66666667 	.word	0x66666667

08002254 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002266:	2b00      	cmp	r3, #0
 8002268:	d076      	beq.n	8002358 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7818      	ldrb	r0, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 800227e:	461a      	mov	r2, r3
 8002280:	4937      	ldr	r1, [pc, #220]	; (8002360 <cliLineChange+0x10c>)
 8002282:	f001 fa73 	bl	800376c <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7818      	ldrb	r0, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 800229a:	461a      	mov	r2, r3
 800229c:	4931      	ldr	r1, [pc, #196]	; (8002364 <cliLineChange+0x110>)
 800229e:	f001 fa65 	bl	800376c <uartPrintf>
  }


  if (key_up == true)
 80022a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d125      	bne.n	80022f6 <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80022ba:	b25a      	sxtb	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80022c8:	461a      	mov	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80022d0:	4413      	add	r3, r2
 80022d2:	3b01      	subs	r3, #1
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 80022da:	fb93 f1f2 	sdiv	r1, r3, r2
 80022de:	fb01 f202 	mul.w	r2, r1, r2
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	b25a      	sxtb	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	e013      	b.n	800231e <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80022fc:	3301      	adds	r3, #1
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8002304:	fb93 f1f2 	sdiv	r1, r3, r2
 8002308:	fb01 f202 	mul.w	r2, r1, r2
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	b25a      	sxtb	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800231c:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	015b      	lsls	r3, r3, #5
 8002328:	4413      	add	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	4403      	add	r3, r0
 8002330:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8002334:	f201 23e7 	addw	r3, r1, #743	; 0x2e7
 8002338:	4611      	mov	r1, r2
 800233a:	2243      	movs	r2, #67	; 0x43
 800233c:	4618      	mov	r0, r3
 800233e:	f00f fad8 	bl	80118f2 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

  p_cli->hist_line_new = false;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8002356:	e000      	b.n	800235a <cliLineChange+0x106>
    return;
 8002358:	bf00      	nop
}
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	08013888 	.word	0x08013888
 8002364:	08013898 	.word	0x08013898

08002368 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002370:	2300      	movs	r3, #0
 8002372:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f851 	bl	800241c <cliParseArgs>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d046      	beq.n	800240e <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8002380:	4825      	ldr	r0, [pc, #148]	; (8002418 <cliRunCmd+0xb0>)
 8002382:	f000 f893 	bl	80024ac <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f8b1 	bl	80024f4 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	e033      	b.n	8002400 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4413      	add	r3, r2
 80023b0:	3304      	adds	r3, #4
 80023b2:	4619      	mov	r1, r3
 80023b4:	f7fd ff14 	bl	80001e0 <strcmp>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d11d      	bne.n	80023fa <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f503 728c 	add.w	r2, r3, #280	; 0x118
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	f202 426c 	addw	r2, r2, #1132	; 0x46c
 80023f4:	4610      	mov	r0, r2
 80023f6:	4798      	blx	r3
        break;
 80023f8:	e009      	b.n	800240e <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	3301      	adds	r3, #1
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4293      	cmp	r3, r2
 800240c:	dbc4      	blt.n	8002398 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 800240e:	7afb      	ldrb	r3, [r7, #11]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	080138a0 	.word	0x080138a0

0800241c <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002424:	2300      	movs	r3, #0
 8002426:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 800243a:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8002442:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8002444:	8afb      	ldrh	r3, [r7, #22]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <cliParseArgs+0x8c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f107 0208 	add.w	r2, r7, #8
 8002458:	4619      	mov	r1, r3
 800245a:	6938      	ldr	r0, [r7, #16]
 800245c:	f00f f9ba 	bl	80117d4 <strtok_r>
 8002460:	61b8      	str	r0, [r7, #24]
 8002462:	e010      	b.n	8002486 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8002464:	8afb      	ldrh	r3, [r7, #22]
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	82fa      	strh	r2, [r7, #22]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <cliParseArgs+0x8c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f107 0208 	add.w	r2, r7, #8
 800247c:	4619      	mov	r1, r3
 800247e:	2000      	movs	r0, #0
 8002480:	f00f f9a8 	bl	80117d4 <strtok_r>
 8002484:	61b8      	str	r0, [r7, #24]
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1eb      	bne.n	8002464 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	8afa      	ldrh	r2, [r7, #22]
 8002490:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 8002494:	8afb      	ldrh	r3, [r7, #22]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <cliParseArgs+0x82>
  {
    ret = true;
 800249a:	2301      	movs	r3, #1
 800249c:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 800249e:	7ffb      	ldrb	r3, [r7, #31]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3720      	adds	r7, #32
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000008 	.word	0x20000008

080024ac <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 80024ac:	b40f      	push	{r0, r1, r2, r3}
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 80024b4:	f107 031c 	add.w	r3, r7, #28
 80024b8:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <cliPrintf+0x44>)
 80024bc:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f103 0011 	add.w	r0, r3, #17
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024cc:	f00f f932 	bl	8011734 <vsniprintf>
 80024d0:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	7818      	ldrb	r0, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3311      	adds	r3, #17
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	4619      	mov	r1, r3
 80024de:	f001 f92e 	bl	800373e <uartWrite>
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024ec:	b004      	add	sp, #16
 80024ee:	4770      	bx	lr
 80024f0:	20000648 	.word	0x20000648

080024f4 <cliToUpper>:

void cliToUpper(char *str)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	81fb      	strh	r3, [r7, #14]
 8002500:	e018      	b.n	8002534 <cliToUpper+0x40>
  {
    str_ch = str[i];
 8002502:	89fb      	ldrh	r3, [r7, #14]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	4413      	add	r3, r2
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 800250c:	7b7b      	ldrb	r3, [r7, #13]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d014      	beq.n	800253c <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8002512:	7b7b      	ldrb	r3, [r7, #13]
 8002514:	2b60      	cmp	r3, #96	; 0x60
 8002516:	d905      	bls.n	8002524 <cliToUpper+0x30>
 8002518:	7b7b      	ldrb	r3, [r7, #13]
 800251a:	2b7a      	cmp	r3, #122	; 0x7a
 800251c:	d802      	bhi.n	8002524 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800251e:	7b7b      	ldrb	r3, [r7, #13]
 8002520:	3b20      	subs	r3, #32
 8002522:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8002524:	89fb      	ldrh	r3, [r7, #14]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	7b7a      	ldrb	r2, [r7, #13]
 800252c:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800252e:	89fb      	ldrh	r3, [r7, #14]
 8002530:	3301      	adds	r3, #1
 8002532:	81fb      	strh	r3, [r7, #14]
 8002534:	89fb      	ldrh	r3, [r7, #14]
 8002536:	2b0f      	cmp	r3, #15
 8002538:	d9e3      	bls.n	8002502 <cliToUpper+0xe>
 800253a:	e000      	b.n	800253e <cliToUpper+0x4a>
      break;
 800253c:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800253e:	89fb      	ldrh	r3, [r7, #14]
 8002540:	2b10      	cmp	r3, #16
 8002542:	d105      	bne.n	8002550 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8002544:	89fb      	ldrh	r3, [r7, #14]
 8002546:	3b01      	subs	r3, #1
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	4413      	add	r3, r2
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
  }
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800256a:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <cliArgsGetData+0x4c>)
 800256c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	b29a      	uxth	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 8002578:	429a      	cmp	r2, r3
 800257a:	d301      	bcc.n	8002580 <cliArgsGetData+0x24>
  {
    return 0;
 800257c:	2300      	movs	r3, #0
 800257e:	e00e      	b.n	800259e <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f00e ff94 	bl	80114c0 <strtoul>
 8002598:	4603      	mov	r3, r0
 800259a:	60fb      	str	r3, [r7, #12]

  return ret;
 800259c:	68fb      	ldr	r3, [r7, #12]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000648 	.word	0x20000648

080025ac <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80025bc:	4b10      	ldr	r3, [pc, #64]	; (8002600 <cliArgsGetFloat+0x54>)
 80025be:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d302      	bcc.n	80025d4 <cliArgsGetFloat+0x28>
  {
    return 0;
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	e00d      	b.n	80025f0 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f00e fe93 	bl	8011310 <strtof>
 80025ea:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	ee07 3a90 	vmov	s15, r3
 80025f4:	eeb0 0a67 	vmov.f32	s0, s15
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000648 	.word	0x20000648

08002604 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002612:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <cliArgsGetStr+0x44>)
 8002614:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	b29a      	uxth	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 8002620:	429a      	cmp	r2, r3
 8002622:	d301      	bcc.n	8002628 <cliArgsGetStr+0x24>
  {
    return 0;
 8002624:	2300      	movs	r3, #0
 8002626:	e008      	b.n	800263a <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]

  return ret;
 8002638:	68fb      	ldr	r3, [r7, #12]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000648 	.word	0x20000648

0800264c <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	6039      	str	r1, [r7, #0]
 8002656:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002658:	2300      	movs	r3, #0
 800265a:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <cliArgsIsStr+0x50>)
 800265e:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	b29a      	uxth	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 800266a:	429a      	cmp	r2, r3
 800266c:	d301      	bcc.n	8002672 <cliArgsIsStr+0x26>
  {
    return 0;
 800266e:	2300      	movs	r3, #0
 8002670:	e010      	b.n	8002694 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4619      	mov	r1, r3
 8002682:	6838      	ldr	r0, [r7, #0]
 8002684:	f7fd fdac 	bl	80001e0 <strcmp>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <cliArgsIsStr+0x46>
  {
    ret = true;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000648 	.word	0x20000648

080026a0 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <cliKeepLoop+0x28>)
 80026a8:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f001 f81e 	bl	80036f0 <uartAvailable>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <cliKeepLoop+0x1e>
  {
    return true;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 80026be:	2300      	movs	r3, #0
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000648 	.word	0x20000648

080026cc <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <cliAdd+0x90>)
 80026dc:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80026e4:	2b0f      	cmp	r3, #15
 80026e6:	d901      	bls.n	80026ec <cliAdd+0x20>
  {
    return false;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e032      	b.n	8002752 <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80026f2:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80026f4:	89fa      	ldrh	r2, [r7, #14]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4413      	add	r3, r2
 8002706:	3304      	adds	r3, #4
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4618      	mov	r0, r3
 800270c:	f00f f8e9 	bl	80118e2 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8002710:	89fa      	ldrh	r2, [r7, #14]
 8002712:	6939      	ldr	r1, [r7, #16]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8002726:	89fa      	ldrh	r2, [r7, #14]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4413      	add	r3, r2
 8002738:	3304      	adds	r3, #4
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff feda 	bl	80024f4 <cliToUpper>

  p_cli->cmd_count++;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8002746:	3301      	adds	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f8a3 232a 	strh.w	r2, [r3, #810]	; 0x32a

  return ret;
 8002750:	7dfb      	ldrb	r3, [r7, #23]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000648 	.word	0x20000648

08002760 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002768:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <cliShowList+0x60>)
 800276a:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 800276c:	4815      	ldr	r0, [pc, #84]	; (80027c4 <cliShowList+0x64>)
 800276e:	f7ff fe9d 	bl	80024ac <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8002772:	4815      	ldr	r0, [pc, #84]	; (80027c8 <cliShowList+0x68>)
 8002774:	f7ff fe9a 	bl	80024ac <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	e012      	b.n	80027a4 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	4413      	add	r3, r2
 8002790:	3304      	adds	r3, #4
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fe8a 	bl	80024ac <cliPrintf>
    cliPrintf("\r\n");
 8002798:	480a      	ldr	r0, [pc, #40]	; (80027c4 <cliShowList+0x64>)
 800279a:	f7ff fe87 	bl	80024ac <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3301      	adds	r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80027aa:	461a      	mov	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4293      	cmp	r3, r2
 80027b0:	dbe5      	blt.n	800277e <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 80027b2:	4806      	ldr	r0, [pc, #24]	; (80027cc <cliShowList+0x6c>)
 80027b4:	f7ff fe7a 	bl	80024ac <cliPrintf>
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000648 	.word	0x20000648
 80027c4:	080138a0 	.word	0x080138a0
 80027c8:	080138a4 	.word	0x080138a4
 80027cc:	080138c4 	.word	0x080138c4

080027d0 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 80027d8:	2310      	movs	r3, #16
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d103      	bne.n	80027f8 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 80027f0:	4840      	ldr	r0, [pc, #256]	; (80028f4 <cliMemoryDump+0x124>)
 80027f2:	f7ff fe5b 	bl	80024ac <cliPrintf>
 80027f6:	e07a      	b.n	80028ee <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	dd09      	ble.n	8002812 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	3304      	adds	r3, #4
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2200      	movs	r2, #0
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f00e fe59 	bl	80114c0 <strtoul>
 800280e:	4603      	mov	r3, r0
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2200      	movs	r2, #0
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f00e fe50 	bl	80114c0 <strtoul>
 8002820:	4603      	mov	r3, r0
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002828:	4833      	ldr	r0, [pc, #204]	; (80028f8 <cliMemoryDump+0x128>)
 800282a:	f7ff fe3f 	bl	80024ac <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800282e:	2300      	movs	r3, #0
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002832:	e058      	b.n	80028e6 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d104      	bne.n	8002848 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	4619      	mov	r1, r3
 8002842:	482e      	ldr	r0, [pc, #184]	; (80028fc <cliMemoryDump+0x12c>)
 8002844:	f7ff fe32 	bl	80024ac <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	482c      	ldr	r0, [pc, #176]	; (8002900 <cliMemoryDump+0x130>)
 8002850:	f7ff fe2c 	bl	80024ac <cliPrintf>

    if ((idx%4) == 3)
 8002854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002856:	425a      	negs	r2, r3
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	f002 0203 	and.w	r2, r2, #3
 8002860:	bf58      	it	pl
 8002862:	4253      	negpl	r3, r2
 8002864:	2b03      	cmp	r3, #3
 8002866:	d138      	bne.n	80028da <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8002868:	4826      	ldr	r0, [pc, #152]	; (8002904 <cliMemoryDump+0x134>)
 800286a:	f7ff fe1f 	bl	80024ac <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 800286e:	2300      	movs	r3, #0
 8002870:	623b      	str	r3, [r7, #32]
 8002872:	e02c      	b.n	80028ce <cliMemoryDump+0xfe>
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002878:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	e01d      	b.n	80028bc <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8002880:	f107 020c 	add.w	r2, r7, #12
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	4413      	add	r3, r2
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b1f      	cmp	r3, #31
 800288c:	d910      	bls.n	80028b0 <cliMemoryDump+0xe0>
 800288e:	f107 020c 	add.w	r2, r7, #12
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	4413      	add	r3, r2
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b7e      	cmp	r3, #126	; 0x7e
 800289a:	d809      	bhi.n	80028b0 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 800289c:	f107 020c 	add.w	r2, r7, #12
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	4413      	add	r3, r2
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	4619      	mov	r1, r3
 80028a8:	4817      	ldr	r0, [pc, #92]	; (8002908 <cliMemoryDump+0x138>)
 80028aa:	f7ff fdff 	bl	80024ac <cliPrintf>
 80028ae:	e002      	b.n	80028b6 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 80028b0:	4816      	ldr	r0, [pc, #88]	; (800290c <cliMemoryDump+0x13c>)
 80028b2:	f7ff fdfb 	bl	80024ac <cliPrintf>
        for (i=0;i<4;i++)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3301      	adds	r3, #1
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	ddde      	ble.n	8002880 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	3304      	adds	r3, #4
 80028c6:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	3301      	adds	r3, #1
 80028cc:	623b      	str	r3, [r7, #32]
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	ddcf      	ble.n	8002874 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 80028d4:	480e      	ldr	r0, [pc, #56]	; (8002910 <cliMemoryDump+0x140>)
 80028d6:	f7ff fde9 	bl	80024ac <cliPrintf>
    }
    addr++;
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	3304      	adds	r3, #4
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e2:	3301      	adds	r3, #1
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	429a      	cmp	r2, r3
 80028ec:	dba2      	blt.n	8002834 <cliMemoryDump+0x64>
  }
}
 80028ee:	3730      	adds	r7, #48	; 0x30
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	080138e4 	.word	0x080138e4
 80028f8:	080138f8 	.word	0x080138f8
 80028fc:	08013900 	.word	0x08013900
 8002900:	0801390c 	.word	0x0801390c
 8002904:	08013914 	.word	0x08013914
 8002908:	08013918 	.word	0x08013918
 800290c:	0801391c 	.word	0x0801391c
 8002910:	08013920 	.word	0x08013920

08002914 <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
	bool ret = false;
 800291a:	2300      	movs	r3, #0
 800291c:	71fb      	strb	r3, [r7, #7]

	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800291e:	490d      	ldr	r1, [pc, #52]	; (8002954 <fatfsInit+0x40>)
 8002920:	480d      	ldr	r0, [pc, #52]	; (8002958 <fatfsInit+0x44>)
 8002922:	f00a fff9 	bl	800d918 <FATFS_LinkDriver>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <fatfsInit+0x2e>
	{
		if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 800292c:	2200      	movs	r2, #0
 800292e:	4909      	ldr	r1, [pc, #36]	; (8002954 <fatfsInit+0x40>)
 8002930:	480a      	ldr	r0, [pc, #40]	; (800295c <fatfsInit+0x48>)
 8002932:	f009 fbeb 	bl	800c10c <f_mount>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <fatfsInit+0x2e>
		{
			is_init = true;
 800293c:	4b08      	ldr	r3, [pc, #32]	; (8002960 <fatfsInit+0x4c>)
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
		}
	}

	#ifdef _USE_HW_CLI
		cliAdd("fatfs", cliFatfs);
 8002942:	4908      	ldr	r1, [pc, #32]	; (8002964 <fatfsInit+0x50>)
 8002944:	4808      	ldr	r0, [pc, #32]	; (8002968 <fatfsInit+0x54>)
 8002946:	f7ff fec1 	bl	80026cc <cliAdd>
	#endif

	return ret;
 800294a:	79fb      	ldrb	r3, [r7, #7]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000d04 	.word	0x20000d04
 8002958:	08013d38 	.word	0x08013d38
 800295c:	20000ad0 	.word	0x20000ad0
 8002960:	20000acc 	.word	0x20000acc
 8002964:	08002a41 	.word	0x08002a41
 8002968:	08013930 	.word	0x08013930

0800296c <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char *path)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b0d6      	sub	sp, #344	; 0x158
 8002970:	af00      	add	r7, sp, #0
 8002972:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002976:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800297a:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dir;
	FILINFO fno;

	res = f_opendir(&dir, path);
 800297c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002980:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002984:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8002988:	6819      	ldr	r1, [r3, #0]
 800298a:	4610      	mov	r0, r2
 800298c:	f00a fb37 	bl	800cffe <f_opendir>
 8002990:	4603      	mov	r3, r0
 8002992:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	if(res == FR_OK)
 8002996:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800299a:	2b00      	cmp	r3, #0
 800299c:	d144      	bne.n	8002a28 <fatfsDir+0xbc>
	{
		for(;;)
		{
			res = f_readdir(&dir, &fno);
 800299e:	f107 0208 	add.w	r2, r7, #8
 80029a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f00a fbd1 	bl	800d150 <f_readdir>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			if(res != FR_OK || fno.fname[0] == 0)
 80029b4:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d130      	bne.n	8002a1e <fatfsDir+0xb2>
 80029bc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80029c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029c4:	7d9b      	ldrb	r3, [r3, #22]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d029      	beq.n	8002a1e <fatfsDir+0xb2>
				break;

			if(fno.fattrib & AM_DIR)
 80029ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80029ce:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029d2:	7a1b      	ldrb	r3, [r3, #8]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00c      	beq.n	80029f6 <fatfsDir+0x8a>
			{
				cliPrintf(" %s/%s \n", path, fno.fname);
 80029dc:	f107 0308 	add.w	r3, r7, #8
 80029e0:	f103 0216 	add.w	r2, r3, #22
 80029e4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80029e8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80029ec:	6819      	ldr	r1, [r3, #0]
 80029ee:	4812      	ldr	r0, [pc, #72]	; (8002a38 <fatfsDir+0xcc>)
 80029f0:	f7ff fd5c 	bl	80024ac <cliPrintf>
 80029f4:	e7d3      	b.n	800299e <fatfsDir+0x32>
			}
			else
			{
				cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 80029f6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80029fa:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f107 0308 	add.w	r3, r7, #8
 8002a06:	f103 0216 	add.w	r2, r3, #22
 8002a0a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002a0e:	f5a3 71aa 	sub.w	r1, r3, #340	; 0x154
 8002a12:	4603      	mov	r3, r0
 8002a14:	6809      	ldr	r1, [r1, #0]
 8002a16:	4809      	ldr	r0, [pc, #36]	; (8002a3c <fatfsDir+0xd0>)
 8002a18:	f7ff fd48 	bl	80024ac <cliPrintf>
			res = f_readdir(&dir, &fno);
 8002a1c:	e7bf      	b.n	800299e <fatfsDir+0x32>
			}
		}

		f_closedir(&dir);
 8002a1e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002a22:	4618      	mov	r0, r3
 8002a24:	f00a fb6e 	bl	800d104 <f_closedir>
	}

	return res;
 8002a28:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	08013938 	.word	0x08013938
 8002a3c:	08013944 	.word	0x08013944

08002a40 <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002a4c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002a50:	6018      	str	r0, [r3, #0]
	bool ret = false;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267

	if(args->argc == 1 && args->isStr(0, "info") == true)
 8002a58:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002a5c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d14d      	bne.n	8002b04 <cliFatfs+0xc4>
 8002a68:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002a6c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	4990      	ldr	r1, [pc, #576]	; (8002cb8 <cliFatfs+0x278>)
 8002a76:	2000      	movs	r0, #0
 8002a78:	4798      	blx	r3
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d041      	beq.n	8002b04 <cliFatfs+0xc4>
	{
		cliPrintf("fatfs init \t: %d\n", is_init);
 8002a80:	4b8e      	ldr	r3, [pc, #568]	; (8002cbc <cliFatfs+0x27c>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	488e      	ldr	r0, [pc, #568]	; (8002cc0 <cliFatfs+0x280>)
 8002a88:	f7ff fd10 	bl	80024ac <cliPrintf>

		if(is_init == true)
 8002a8c:	4b8b      	ldr	r3, [pc, #556]	; (8002cbc <cliFatfs+0x27c>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d034      	beq.n	8002afe <cliFatfs+0xbe>
			FATFS *fs;
			DWORD fre_clust, fre_sect, tot_sect;
			FRESULT res;

			/* Get volume information and free clusters of drive 1 */
			res = f_getfree("", &fre_clust, &fs);
 8002a94:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8002a98:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4889      	ldr	r0, [pc, #548]	; (8002cc4 <cliFatfs+0x284>)
 8002aa0:	f00a fba3 	bl	800d1ea <f_getfree>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if(res == FR_OK)
 8002aaa:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d11f      	bne.n	8002af2 <cliFatfs+0xb2>
			{
				/* Get total sectors and free sectors */
				tot_sect = (fs->n_fatent - 2) * fs->csize;
 8002ab2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	3b02      	subs	r3, #2
 8002aba:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8002abe:	8952      	ldrh	r2, [r2, #10]
 8002ac0:	fb02 f303 	mul.w	r3, r2, r3
 8002ac4:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
				fre_sect = fre_clust * fs->csize;
 8002ac8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002acc:	895b      	ldrh	r3, [r3, #10]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002ad4:	fb02 f303 	mul.w	r3, r2, r3
 8002ad8:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

				/* Print the free space (assuming 512 bytes/sector) */
				cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect/2, fre_sect/2);
 8002adc:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8002ae0:	0859      	lsrs	r1, r3, #1
 8002ae2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4877      	ldr	r0, [pc, #476]	; (8002cc8 <cliFatfs+0x288>)
 8002aec:	f7ff fcde 	bl	80024ac <cliPrintf>
 8002af0:	e005      	b.n	8002afe <cliFatfs+0xbe>
			}
			else
			{
				cliPrintf(" err : %d\n", res);
 8002af2:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8002af6:	4619      	mov	r1, r3
 8002af8:	4874      	ldr	r0, [pc, #464]	; (8002ccc <cliFatfs+0x28c>)
 8002afa:	f7ff fcd7 	bl	80024ac <cliPrintf>
			}
		}

		ret = true;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(args->argc == 1 && args->isStr(0, "dir") == true)
 8002b04:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002b08:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d11e      	bne.n	8002b52 <cliFatfs+0x112>
 8002b14:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002b18:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	496b      	ldr	r1, [pc, #428]	; (8002cd0 <cliFatfs+0x290>)
 8002b22:	2000      	movs	r0, #0
 8002b24:	4798      	blx	r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d012      	beq.n	8002b52 <cliFatfs+0x112>
	{
		FRESULT res;

		res = fatfsDir("/");
 8002b2c:	4869      	ldr	r0, [pc, #420]	; (8002cd4 <cliFatfs+0x294>)
 8002b2e:	f7ff ff1d 	bl	800296c <fatfsDir>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
		if(res != FR_OK)
 8002b38:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <cliFatfs+0x10c>
		{
			cliPrintf(" err : %d\n", res);
 8002b40:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8002b44:	4619      	mov	r1, r3
 8002b46:	4861      	ldr	r0, [pc, #388]	; (8002ccc <cliFatfs+0x28c>)
 8002b48:	f7ff fcb0 	bl	80024ac <cliPrintf>
		}

		ret = true;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(args->argc == 1 && args->isStr(0, "test") == true)
 8002b52:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002b56:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	f040 8095 	bne.w	8002c8e <cliFatfs+0x24e>
 8002b64:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002b68:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	4959      	ldr	r1, [pc, #356]	; (8002cd8 <cliFatfs+0x298>)
 8002b72:	2000      	movs	r0, #0
 8002b74:	4798      	blx	r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 8088 	beq.w	8002c8e <cliFatfs+0x24e>
	{
		FRESULT fp_ret;
		FIL log_file;
		uint32_t pre_time;

		pre_time = millis();
 8002b7e:	f7fe fdeb 	bl	8001758 <millis>
 8002b82:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8002b86:	f107 0308 	add.w	r3, r7, #8
 8002b8a:	220b      	movs	r2, #11
 8002b8c:	4953      	ldr	r1, [pc, #332]	; (8002cdc <cliFatfs+0x29c>)
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f009 fb02 	bl	800c198 <f_open>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
		if(fp_ret == FR_OK)
 8002b9a:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d165      	bne.n	8002c6e <cliFatfs+0x22e>
		{
			f_printf(&log_file, "test1, ");
 8002ba2:	f107 0308 	add.w	r3, r7, #8
 8002ba6:	494e      	ldr	r1, [pc, #312]	; (8002ce0 <cliFatfs+0x2a0>)
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f00a fc4b 	bl	800d444 <f_printf>
			f_printf(&log_file, "test2, ");
 8002bae:	f107 0308 	add.w	r3, r7, #8
 8002bb2:	494c      	ldr	r1, [pc, #304]	; (8002ce4 <cliFatfs+0x2a4>)
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f00a fc45 	bl	800d444 <f_printf>
			f_printf(&log_file, "test3, ");
 8002bba:	f107 0308 	add.w	r3, r7, #8
 8002bbe:	494a      	ldr	r1, [pc, #296]	; (8002ce8 <cliFatfs+0x2a8>)
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f00a fc3f 	bl	800d444 <f_printf>
			f_printf(&log_file, ", ");
 8002bc6:	f107 0308 	add.w	r3, r7, #8
 8002bca:	4948      	ldr	r1, [pc, #288]	; (8002cec <cliFatfs+0x2ac>)
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f00a fc39 	bl	800d444 <f_printf>
			f_printf(&log_file, "\n");
 8002bd2:	f107 0308 	add.w	r3, r7, #8
 8002bd6:	4946      	ldr	r1, [pc, #280]	; (8002cf0 <cliFatfs+0x2b0>)
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f00a fc33 	bl	800d444 <f_printf>

			for(int i=0; i<8; i++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8002be4:	e00c      	b.n	8002c00 <cliFatfs+0x1c0>
			{
				f_printf(&log_file, "%d \n", i);
 8002be6:	f107 0308 	add.w	r3, r7, #8
 8002bea:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8002bee:	4941      	ldr	r1, [pc, #260]	; (8002cf4 <cliFatfs+0x2b4>)
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f00a fc27 	bl	800d444 <f_printf>
			for(int i=0; i<8; i++)
 8002bf6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8002c00:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8002c04:	2b07      	cmp	r3, #7
 8002c06:	ddee      	ble.n	8002be6 <cliFatfs+0x1a6>
			}

			f_rewind(&log_file);
 8002c08:	f107 0308 	add.w	r3, r7, #8
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f009 ffec 	bl	800cbec <f_lseek>


			UINT len;
			uint8_t data;

			while(cliKeepLoop())
 8002c14:	e01c      	b.n	8002c50 <cliFatfs+0x210>
			{
				len = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
				fp_ret = f_read(&log_file, &data, 1, &len);
 8002c1c:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8002c20:	f207 213b 	addw	r1, r7, #571	; 0x23b
 8002c24:	f107 0008 	add.w	r0, r7, #8
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f009 fc83 	bl	800c534 <f_read>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

				if(fp_ret != FR_OK)
 8002c34:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10f      	bne.n	8002c5c <cliFatfs+0x21c>
				{
					break;
				}

				if(len == 0)
 8002c3c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00d      	beq.n	8002c60 <cliFatfs+0x220>
				{
					break;
				}

				cliPrintf("%c", data);
 8002c44:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8002c48:	4619      	mov	r1, r3
 8002c4a:	482b      	ldr	r0, [pc, #172]	; (8002cf8 <cliFatfs+0x2b8>)
 8002c4c:	f7ff fc2e 	bl	80024ac <cliPrintf>
			while(cliKeepLoop())
 8002c50:	f7ff fd26 	bl	80026a0 <cliKeepLoop>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1dd      	bne.n	8002c16 <cliFatfs+0x1d6>
 8002c5a:	e002      	b.n	8002c62 <cliFatfs+0x222>
					break;
 8002c5c:	bf00      	nop
 8002c5e:	e000      	b.n	8002c62 <cliFatfs+0x222>
					break;
 8002c60:	bf00      	nop
			}

			f_close(&log_file);
 8002c62:	f107 0308 	add.w	r3, r7, #8
 8002c66:	4618      	mov	r0, r3
 8002c68:	f009 ff96 	bl	800cb98 <f_close>
 8002c6c:	e002      	b.n	8002c74 <cliFatfs+0x234>
		}
		else
		{
			cliPrintf("f_open fail\r\n");
 8002c6e:	4823      	ldr	r0, [pc, #140]	; (8002cfc <cliFatfs+0x2bc>)
 8002c70:	f7ff fc1c 	bl	80024ac <cliPrintf>
		}

		cliPrintf("%d ms\r\n", millis() - pre_time);
 8002c74:	f7fe fd70 	bl	8001758 <millis>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	4619      	mov	r1, r3
 8002c82:	481f      	ldr	r0, [pc, #124]	; (8002d00 <cliFatfs+0x2c0>)
 8002c84:	f7ff fc12 	bl	80024ac <cliPrintf>

		ret = true;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(ret != true)
 8002c8e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8002c92:	f083 0301 	eor.w	r3, r3, #1
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <cliFatfs+0x26e>
	{
		cliPrintf("fatfs info\n");
 8002c9c:	4819      	ldr	r0, [pc, #100]	; (8002d04 <cliFatfs+0x2c4>)
 8002c9e:	f7ff fc05 	bl	80024ac <cliPrintf>
		cliPrintf("fatfs dir\n");
 8002ca2:	4819      	ldr	r0, [pc, #100]	; (8002d08 <cliFatfs+0x2c8>)
 8002ca4:	f7ff fc02 	bl	80024ac <cliPrintf>
		cliPrintf("fatfs test\n");
 8002ca8:	4818      	ldr	r0, [pc, #96]	; (8002d0c <cliFatfs+0x2cc>)
 8002caa:	f7ff fbff 	bl	80024ac <cliPrintf>
	}
}
 8002cae:	bf00      	nop
 8002cb0:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	08013958 	.word	0x08013958
 8002cbc:	20000acc 	.word	0x20000acc
 8002cc0:	08013960 	.word	0x08013960
 8002cc4:	08013974 	.word	0x08013974
 8002cc8:	08013978 	.word	0x08013978
 8002ccc:	080139ac 	.word	0x080139ac
 8002cd0:	080139b8 	.word	0x080139b8
 8002cd4:	080139bc 	.word	0x080139bc
 8002cd8:	080139c0 	.word	0x080139c0
 8002cdc:	080139c8 	.word	0x080139c8
 8002ce0:	080139d0 	.word	0x080139d0
 8002ce4:	080139d8 	.word	0x080139d8
 8002ce8:	080139e0 	.word	0x080139e0
 8002cec:	080139e8 	.word	0x080139e8
 8002cf0:	080139ec 	.word	0x080139ec
 8002cf4:	080139f0 	.word	0x080139f0
 8002cf8:	080139f8 	.word	0x080139f8
 8002cfc:	080139fc 	.word	0x080139fc
 8002d00:	08013a0c 	.word	0x08013a0c
 8002d04:	08013a14 	.word	0x08013a14
 8002d08:	08013a20 	.word	0x08013a20
 8002d0c:	08013a2c 	.word	0x08013a2c

08002d10 <gpioInit>:
static void cliGpio(cli_args_t *args);
#endif


bool gpioInit(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
	bool ret = true;
 8002d16:	2301      	movs	r3, #1
 8002d18:	71fb      	strb	r3, [r7, #7]

#ifdef _USE_HW_CLI
	cliAdd("gpio", cliGpio);
 8002d1a:	4904      	ldr	r1, [pc, #16]	; (8002d2c <gpioInit+0x1c>)
 8002d1c:	4804      	ldr	r0, [pc, #16]	; (8002d30 <gpioInit+0x20>)
 8002d1e:	f7ff fcd5 	bl	80026cc <cliAdd>
#endif

	return ret;
 8002d22:	79fb      	ldrb	r3, [r7, #7]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	08002e49 	.word	0x08002e49
 8002d30:	08013a38 	.word	0x08013a38

08002d34 <gpioPinWrite>:

	return ret;
}

void gpioPinWrite(uint8_t ch, bool value)
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	460a      	mov	r2, r1
 8002d3e:	71fb      	strb	r3, [r7, #7]
 8002d40:	4613      	mov	r3, r2
 8002d42:	71bb      	strb	r3, [r7, #6]
	if(ch >= GPIO_MAX_CH)
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d140      	bne.n	8002dcc <gpioPinWrite+0x98>
	{
		return;
	}

	if(value)
 8002d4a:	79bb      	ldrb	r3, [r7, #6]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01e      	beq.n	8002d8e <gpioPinWrite+0x5a>
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8002d50:	79fa      	ldrb	r2, [r7, #7]
 8002d52:	4920      	ldr	r1, [pc, #128]	; (8002dd4 <gpioPinWrite+0xa0>)
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	79fa      	ldrb	r2, [r7, #7]
 8002d62:	491c      	ldr	r1, [pc, #112]	; (8002dd4 <gpioPinWrite+0xa0>)
 8002d64:	4613      	mov	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	3304      	adds	r3, #4
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	b299      	uxth	r1, r3
 8002d74:	79fa      	ldrb	r2, [r7, #7]
 8002d76:	4c17      	ldr	r4, [pc, #92]	; (8002dd4 <gpioPinWrite+0xa0>)
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4423      	add	r3, r4
 8002d82:	3309      	adds	r3, #9
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	f001 fc0a 	bl	80045a0 <HAL_GPIO_WritePin>
 8002d8c:	e01f      	b.n	8002dce <gpioPinWrite+0x9a>
	}
	else
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8002d8e:	79fa      	ldrb	r2, [r7, #7]
 8002d90:	4910      	ldr	r1, [pc, #64]	; (8002dd4 <gpioPinWrite+0xa0>)
 8002d92:	4613      	mov	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	79fa      	ldrb	r2, [r7, #7]
 8002da0:	490c      	ldr	r1, [pc, #48]	; (8002dd4 <gpioPinWrite+0xa0>)
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	3304      	adds	r3, #4
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	b299      	uxth	r1, r3
 8002db2:	79fa      	ldrb	r2, [r7, #7]
 8002db4:	4c07      	ldr	r4, [pc, #28]	; (8002dd4 <gpioPinWrite+0xa0>)
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4423      	add	r3, r4
 8002dc0:	330a      	adds	r3, #10
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f001 fbeb 	bl	80045a0 <HAL_GPIO_WritePin>
 8002dca:	e000      	b.n	8002dce <gpioPinWrite+0x9a>
		return;
 8002dcc:	bf00      	nop
	}
}
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd90      	pop	{r4, r7, pc}
 8002dd4:	08013d4c 	.word	0x08013d4c

08002dd8 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8002de2:	2300      	movs	r3, #0
 8002de4:	73fb      	strb	r3, [r7, #15]

	if(ch >= GPIO_MAX_CH)
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <gpioPinRead+0x18>
	{
		return false;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e024      	b.n	8002e3a <gpioPinRead+0x62>
	}

	if(HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8002df0:	79fa      	ldrb	r2, [r7, #7]
 8002df2:	4914      	ldr	r1, [pc, #80]	; (8002e44 <gpioPinRead+0x6c>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	79fa      	ldrb	r2, [r7, #7]
 8002e02:	4910      	ldr	r1, [pc, #64]	; (8002e44 <gpioPinRead+0x6c>)
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3304      	adds	r3, #4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4619      	mov	r1, r3
 8002e16:	f001 fbab 	bl	8004570 <HAL_GPIO_ReadPin>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	79fa      	ldrb	r2, [r7, #7]
 8002e20:	4908      	ldr	r1, [pc, #32]	; (8002e44 <gpioPinRead+0x6c>)
 8002e22:	4613      	mov	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3309      	adds	r3, #9
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	4298      	cmp	r0, r3
 8002e32:	d101      	bne.n	8002e38 <gpioPinRead+0x60>
	{
		ret = true;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	08013d4c 	.word	0x08013d4c

08002e48 <cliGpio>:


#ifdef _USE_HW_CLI

void cliGpio(cli_args_t *args)
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002e50:	2300      	movs	r3, #0
 8002e52:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 1 && args->isStr(0, "show") == true)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d129      	bne.n	8002eb0 <cliGpio+0x68>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	4948      	ldr	r1, [pc, #288]	; (8002f84 <cliGpio+0x13c>)
 8002e62:	2000      	movs	r0, #0
 8002e64:	4798      	blx	r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d021      	beq.n	8002eb0 <cliGpio+0x68>
	{
		while(cliKeepLoop())
 8002e6c:	e019      	b.n	8002ea2 <cliGpio+0x5a>
		{
			for(int i=0; i<GPIO_MAX_CH; i++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	e00c      	b.n	8002e8e <cliGpio+0x46>
			{
				cliPrintf("%d", gpioPinRead(i));
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ffad 	bl	8002dd8 <gpioPinRead>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4619      	mov	r1, r3
 8002e82:	4841      	ldr	r0, [pc, #260]	; (8002f88 <cliGpio+0x140>)
 8002e84:	f7ff fb12 	bl	80024ac <cliPrintf>
			for(int i=0; i<GPIO_MAX_CH; i++)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	ddef      	ble.n	8002e74 <cliGpio+0x2c>
			}
			cliPrintf("\n");
 8002e94:	483d      	ldr	r0, [pc, #244]	; (8002f8c <cliGpio+0x144>)
 8002e96:	f7ff fb09 	bl	80024ac <cliPrintf>
			delay(300);
 8002e9a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e9e:	f7fe fc50 	bl	8001742 <delay>
		while(cliKeepLoop())
 8002ea2:	f7ff fbfd 	bl	80026a0 <cliKeepLoop>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e0      	bne.n	8002e6e <cliGpio+0x26>
		}

		ret = true;
 8002eac:	2301      	movs	r3, #1
 8002eae:	75fb      	strb	r3, [r7, #23]
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d124      	bne.n	8002f02 <cliGpio+0xba>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	4934      	ldr	r1, [pc, #208]	; (8002f90 <cliGpio+0x148>)
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	4798      	blx	r3
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01c      	beq.n	8002f02 <cliGpio+0xba>
	{
		uint8_t ch;

		ch = (uint8_t)args->getData(1);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2001      	movs	r0, #1
 8002ece:	4798      	blx	r3
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	73fb      	strb	r3, [r7, #15]

		while(cliKeepLoop())
 8002ed4:	e00e      	b.n	8002ef4 <cliGpio+0xac>
		{
			cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8002ed6:	7bfc      	ldrb	r4, [r7, #15]
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff ff7c 	bl	8002dd8 <gpioPinRead>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	482b      	ldr	r0, [pc, #172]	; (8002f94 <cliGpio+0x14c>)
 8002ee8:	f7ff fae0 	bl	80024ac <cliPrintf>
			delay(300);
 8002eec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ef0:	f7fe fc27 	bl	8001742 <delay>
		while(cliKeepLoop())
 8002ef4:	f7ff fbd4 	bl	80026a0 <cliKeepLoop>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1eb      	bne.n	8002ed6 <cliGpio+0x8e>
		}

		ret = true;
 8002efe:	2301      	movs	r3, #1
 8002f00:	75fb      	strb	r3, [r7, #23]
	}

	if(args->argc == 3 && args->isStr(0, "write") == true)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d126      	bne.n	8002f58 <cliGpio+0x110>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	4922      	ldr	r1, [pc, #136]	; (8002f98 <cliGpio+0x150>)
 8002f10:	2000      	movs	r0, #0
 8002f12:	4798      	blx	r3
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01e      	beq.n	8002f58 <cliGpio+0x110>
	{
		uint8_t ch;
		uint8_t data;

		ch = (uint8_t)args->getData(1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2001      	movs	r0, #1
 8002f20:	4798      	blx	r3
 8002f22:	4603      	mov	r3, r0
 8002f24:	73bb      	strb	r3, [r7, #14]
		data = (uint8_t)args->getData(2);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2002      	movs	r0, #2
 8002f2c:	4798      	blx	r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	737b      	strb	r3, [r7, #13]

		gpioPinWrite(ch, data);
 8002f32:	7b7b      	ldrb	r3, [r7, #13]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	7bbb      	ldrb	r3, [r7, #14]
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fef6 	bl	8002d34 <gpioPinWrite>

		cliPrintf("gpio write %d : %d\n", ch, data);
 8002f48:	7bbb      	ldrb	r3, [r7, #14]
 8002f4a:	7b7a      	ldrb	r2, [r7, #13]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4813      	ldr	r0, [pc, #76]	; (8002f9c <cliGpio+0x154>)
 8002f50:	f7ff faac 	bl	80024ac <cliPrintf>

		ret = true;
 8002f54:	2301      	movs	r3, #1
 8002f56:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	f083 0301 	eor.w	r3, r3, #1
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <cliGpio+0x132>
	{
		cliPrintf("gpio show\n");
 8002f64:	480e      	ldr	r0, [pc, #56]	; (8002fa0 <cliGpio+0x158>)
 8002f66:	f7ff faa1 	bl	80024ac <cliPrintf>
		cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	480d      	ldr	r0, [pc, #52]	; (8002fa4 <cliGpio+0x15c>)
 8002f6e:	f7ff fa9d 	bl	80024ac <cliPrintf>
		cliPrintf("gpio write ch[0~%d]\n", GPIO_MAX_CH-1);
 8002f72:	2100      	movs	r1, #0
 8002f74:	480c      	ldr	r0, [pc, #48]	; (8002fa8 <cliGpio+0x160>)
 8002f76:	f7ff fa99 	bl	80024ac <cliPrintf>
	}
}
 8002f7a:	bf00      	nop
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd90      	pop	{r4, r7, pc}
 8002f82:	bf00      	nop
 8002f84:	08013a40 	.word	0x08013a40
 8002f88:	08013a48 	.word	0x08013a48
 8002f8c:	08013a4c 	.word	0x08013a4c
 8002f90:	08013a50 	.word	0x08013a50
 8002f94:	08013a58 	.word	0x08013a58
 8002f98:	08013a6c 	.word	0x08013a6c
 8002f9c:	08013a74 	.word	0x08013a74
 8002fa0:	08013a88 	.word	0x08013a88
 8002fa4:	08013a94 	.word	0x08013a94
 8002fa8:	08013aa8 	.word	0x08013aa8

08002fac <ledInit>:
				{GPIOC, GPIO_PIN_13, GPIO_PIN_RESET, GPIO_PIN_SET},
		};


bool ledInit(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
	for(int i=0; i<LED_MAX_CH; i++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	e007      	b.n	8002fc8 <ledInit+0x1c>
	{
		ledOff(i);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 f813 	bl	8002fe8 <ledOff>
	for(int i=0; i<LED_MAX_CH; i++)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	ddf4      	ble.n	8002fb8 <ledInit+0xc>
	}

#ifdef _USE_HW_CLI
	cliAdd("led", cliLed);
 8002fce:	4904      	ldr	r1, [pc, #16]	; (8002fe0 <ledInit+0x34>)
 8002fd0:	4804      	ldr	r0, [pc, #16]	; (8002fe4 <ledInit+0x38>)
 8002fd2:	f7ff fb7b 	bl	80026cc <cliAdd>
#endif

	return true;
 8002fd6:	2301      	movs	r3, #1
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	08003061 	.word	0x08003061
 8002fe4:	08013ac0 	.word	0x08013ac0

08002fe8 <ledOff>:

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d111      	bne.n	800301c <ledOff+0x34>

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <ledOff+0x3c>)
 8002ffc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	4a08      	ldr	r2, [pc, #32]	; (8003024 <ledOff+0x3c>)
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4413      	add	r3, r2
 8003008:	8899      	ldrh	r1, [r3, #4]
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	4a05      	ldr	r2, [pc, #20]	; (8003024 <ledOff+0x3c>)
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	79db      	ldrb	r3, [r3, #7]
 8003014:	461a      	mov	r2, r3
 8003016:	f001 fac3 	bl	80045a0 <HAL_GPIO_WritePin>
 800301a:	e000      	b.n	800301e <ledOff+0x36>
	if(ch >= LED_MAX_CH) return;
 800301c:	bf00      	nop
}
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	2000000c 	.word	0x2000000c

08003028 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10d      	bne.n	8003054 <ledToggle+0x2c>

	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	4a08      	ldr	r2, [pc, #32]	; (800305c <ledToggle+0x34>)
 800303c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	4906      	ldr	r1, [pc, #24]	; (800305c <ledToggle+0x34>)
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	440b      	add	r3, r1
 8003048:	889b      	ldrh	r3, [r3, #4]
 800304a:	4619      	mov	r1, r3
 800304c:	4610      	mov	r0, r2
 800304e:	f001 fac0 	bl	80045d2 <HAL_GPIO_TogglePin>
 8003052:	e000      	b.n	8003056 <ledToggle+0x2e>
	if(ch >= LED_MAX_CH) return;
 8003054:	bf00      	nop
}
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	2000000c 	.word	0x2000000c

08003060 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003068:	2300      	movs	r3, #0
 800306a:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 3 && args->isStr(0, "toggle") == true)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	2b03      	cmp	r3, #3
 8003072:	d133      	bne.n	80030dc <cliLed+0x7c>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	491f      	ldr	r1, [pc, #124]	; (80030f8 <cliLed+0x98>)
 800307a:	2000      	movs	r0, #0
 800307c:	4798      	blx	r3
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d02b      	beq.n	80030dc <cliLed+0x7c>
	{
		uint8_t led_ch;
		uint32_t toggle_time;
		uint32_t pre_time;

		led_ch = (uint8_t)args->getData(1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2001      	movs	r0, #1
 800308a:	4798      	blx	r3
 800308c:	4603      	mov	r3, r0
 800308e:	75bb      	strb	r3, [r7, #22]
		toggle_time = (uint32_t)args->getData(2);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2002      	movs	r0, #2
 8003096:	4798      	blx	r3
 8003098:	4603      	mov	r3, r0
 800309a:	60fb      	str	r3, [r7, #12]

		if(led_ch > 0)
 800309c:	7dbb      	ldrb	r3, [r7, #22]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <cliLed+0x48>
		{
			led_ch--;
 80030a2:	7dbb      	ldrb	r3, [r7, #22]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	75bb      	strb	r3, [r7, #22]
		}

		pre_time = millis();
 80030a8:	f7fe fb56 	bl	8001758 <millis>
 80030ac:	6138      	str	r0, [r7, #16]
		while(cliKeepLoop())
 80030ae:	e00e      	b.n	80030ce <cliLed+0x6e>
		{
			if(millis() - pre_time >= toggle_time)
 80030b0:	f7fe fb52 	bl	8001758 <millis>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d806      	bhi.n	80030ce <cliLed+0x6e>
			{
				pre_time = millis();
 80030c0:	f7fe fb4a 	bl	8001758 <millis>
 80030c4:	6138      	str	r0, [r7, #16]
				ledToggle(led_ch);
 80030c6:	7dbb      	ldrb	r3, [r7, #22]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ffad 	bl	8003028 <ledToggle>
		while(cliKeepLoop())
 80030ce:	f7ff fae7 	bl	80026a0 <cliKeepLoop>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1eb      	bne.n	80030b0 <cliLed+0x50>
			}
		}

		ret = true;
 80030d8:	2301      	movs	r3, #1
 80030da:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 80030dc:	7dfb      	ldrb	r3, [r7, #23]
 80030de:	f083 0301 	eor.w	r3, r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <cliLed+0x90>
	{
		cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 80030e8:	2101      	movs	r1, #1
 80030ea:	4804      	ldr	r0, [pc, #16]	; (80030fc <cliLed+0x9c>)
 80030ec:	f7ff f9de 	bl	80024ac <cliPrintf>
	}
}
 80030f0:	bf00      	nop
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	08013ac4 	.word	0x08013ac4
 80030fc:	08013acc 	.word	0x08013acc

08003100 <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
	bool ret = false;
 8003106:	2300      	movs	r3, #0
 8003108:	71fb      	strb	r3, [r7, #7]

  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <sdInit+0x68>)
 800310c:	2200      	movs	r2, #0
 800310e:	611a      	str	r2, [r3, #16]

	is_detected = false;
 8003110:	4b16      	ldr	r3, [pc, #88]	; (800316c <sdInit+0x6c>)
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
	if(gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8003116:	2000      	movs	r0, #0
 8003118:	f7ff fe5e 	bl	8002dd8 <gpioPinRead>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <sdInit+0x28>
	{
		is_detected = true;
 8003122:	4b12      	ldr	r3, [pc, #72]	; (800316c <sdInit+0x6c>)
 8003124:	2201      	movs	r2, #1
 8003126:	701a      	strb	r2, [r3, #0]
	}

	if(is_detected == true)
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <sdInit+0x6c>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00f      	beq.n	8003150 <sdInit+0x50>
	{
		if(HAL_SD_Init(&hsd) == HAL_OK)
 8003130:	480d      	ldr	r0, [pc, #52]	; (8003168 <sdInit+0x68>)
 8003132:	f003 f8e9 	bl	8006308 <HAL_SD_Init>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d109      	bne.n	8003150 <sdInit+0x50>
		{
			if(HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 800313c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003140:	4809      	ldr	r0, [pc, #36]	; (8003168 <sdInit+0x68>)
 8003142:	f003 fec3 	bl	8006ecc <HAL_SD_ConfigWideBusOperation>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <sdInit+0x50>
			{
				ret = true;
 800314c:	2301      	movs	r3, #1
 800314e:	71fb      	strb	r3, [r7, #7]
			}
		}
	}

	is_init = ret;
 8003150:	4a07      	ldr	r2, [pc, #28]	; (8003170 <sdInit+0x70>)
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	7013      	strb	r3, [r2, #0]

	#ifdef _USE_HW_CLI
		cliAdd("sd", cliSd);
 8003156:	4907      	ldr	r1, [pc, #28]	; (8003174 <sdInit+0x74>)
 8003158:	4807      	ldr	r0, [pc, #28]	; (8003178 <sdInit+0x78>)
 800315a:	f7ff fab7 	bl	80026cc <cliAdd>
	#endif

	return ret;
 800315e:	79fb      	ldrb	r3, [r7, #7]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	200002f8 	.word	0x200002f8
 800316c:	20000d09 	.word	0x20000d09
 8003170:	20000d08 	.word	0x20000d08
 8003174:	08003449 	.word	0x08003449
 8003178:	08013aec 	.word	0x08013aec

0800317c <sdIsInit>:

	return ret;
}

bool sdIsInit(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
	return is_init;
 8003180:	4b03      	ldr	r3, [pc, #12]	; (8003190 <sdIsInit+0x14>)
 8003182:	781b      	ldrb	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000d08 	.word	0x20000d08

08003194 <sdIsDetected>:

bool sdIsDetected(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
	if(gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8003198:	2000      	movs	r0, #0
 800319a:	f7ff fe1d 	bl	8002dd8 <gpioPinRead>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <sdIsDetected+0x18>
	{
		is_detected = true;
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <sdIsDetected+0x28>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
 80031aa:	e002      	b.n	80031b2 <sdIsDetected+0x1e>
	}
	else
	{
		is_detected = false;
 80031ac:	4b03      	ldr	r3, [pc, #12]	; (80031bc <sdIsDetected+0x28>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]
	}

	return is_detected;
 80031b2:	4b02      	ldr	r3, [pc, #8]	; (80031bc <sdIsDetected+0x28>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000d09 	.word	0x20000d09

080031c0 <sdGetInfo>:

bool sdGetInfo(sd_info_t *p_info)
{
 80031c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c4:	b08c      	sub	sp, #48	; 0x30
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	sd_info_t *p_sd_info = (sd_info_t *)p_info;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_SD_CardInfoTypeDef card_info;

	if(is_init == true)
 80031d4:	4b24      	ldr	r3, [pc, #144]	; (8003268 <sdGetInfo+0xa8>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d03d      	beq.n	8003258 <sdGetInfo+0x98>
	{
		HAL_SD_GetCardInfo(&hsd, &card_info);
 80031dc:	f107 0308 	add.w	r3, r7, #8
 80031e0:	4619      	mov	r1, r3
 80031e2:	4822      	ldr	r0, [pc, #136]	; (800326c <sdGetInfo+0xac>)
 80031e4:	f003 fe46 	bl	8006e74 <HAL_SD_GetCardInfo>

		p_sd_info->card_type 					= card_info.CardType;
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fe:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 800320c:	6a3a      	ldr	r2, [r7, #32]
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 8003212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t) p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	2200      	movs	r2, #0
 800321e:	469a      	mov	sl, r3
 8003220:	4693      	mov	fp, r2
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	2200      	movs	r2, #0
 8003228:	4698      	mov	r8, r3
 800322a:	4691      	mov	r9, r2
 800322c:	fb08 f20b 	mul.w	r2, r8, fp
 8003230:	fb0a f309 	mul.w	r3, sl, r9
 8003234:	4413      	add	r3, r2
 8003236:	fbaa 4508 	umull	r4, r5, sl, r8
 800323a:	442b      	add	r3, r5
 800323c:	461d      	mov	r5, r3
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	0d22      	lsrs	r2, r4, #20
 8003248:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 800324c:	0d2b      	lsrs	r3, r5, #20
 800324e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003250:	621a      	str	r2, [r3, #32]

    ret = true;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	return ret;
 8003258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800325c:	4618      	mov	r0, r3
 800325e:	3730      	adds	r7, #48	; 0x30
 8003260:	46bd      	mov	sp, r7
 8003262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003266:	bf00      	nop
 8003268:	20000d08 	.word	0x20000d08
 800326c:	200002f8 	.word	0x200002f8

08003270 <sdIsBusy>:

bool sdIsBusy(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
	bool is_busy;

	if(HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER)
 8003276:	4808      	ldr	r0, [pc, #32]	; (8003298 <sdIsBusy+0x28>)
 8003278:	f003 fec2 	bl	8007000 <HAL_SD_GetCardState>
 800327c:	4603      	mov	r3, r0
 800327e:	2b04      	cmp	r3, #4
 8003280:	d102      	bne.n	8003288 <sdIsBusy+0x18>
	{
		is_busy = false;
 8003282:	2300      	movs	r3, #0
 8003284:	71fb      	strb	r3, [r7, #7]
 8003286:	e001      	b.n	800328c <sdIsBusy+0x1c>
	}
	else
	{
		is_busy = true;
 8003288:	2301      	movs	r3, #1
 800328a:	71fb      	strb	r3, [r7, #7]
	}

	return is_busy;
 800328c:	79fb      	ldrb	r3, [r7, #7]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	200002f8 	.word	0x200002f8

0800329c <sdIsReady>:

bool sdIsReady(uint32_t timeout)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
	uint32_t pre_time;

	pre_time = millis();
 80032a4:	f7fe fa58 	bl	8001758 <millis>
 80032a8:	60f8      	str	r0, [r7, #12]
	while(millis() - pre_time < timeout)
 80032aa:	e009      	b.n	80032c0 <sdIsReady+0x24>
	{
		if(sdIsBusy() == false)
 80032ac:	f7ff ffe0 	bl	8003270 <sdIsBusy>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f083 0301 	eor.w	r3, r3, #1
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <sdIsReady+0x24>
		{
			return true;
 80032bc:	2301      	movs	r3, #1
 80032be:	e008      	b.n	80032d2 <sdIsReady+0x36>
	while(millis() - pre_time < timeout)
 80032c0:	f7fe fa4a 	bl	8001758 <millis>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d8ed      	bhi.n	80032ac <sdIsReady+0x10>
		}
	}

	return false;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <sdReadBlocks>:

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
	bool ret = false;
 80032ea:	2300      	movs	r3, #0
 80032ec:	75fb      	strb	r3, [r7, #23]
	uint32_t pre_time;

	is_rx_done = false;
 80032ee:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <sdReadBlocks+0x8c>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
	if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	481c      	ldr	r0, [pc, #112]	; (800336c <sdReadBlocks+0x90>)
 80032fc:	f003 f8b4 	bl	8006468 <HAL_SD_ReadBlocks_DMA>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d12a      	bne.n	800335c <sdReadBlocks+0x80>
	{
		pre_time = millis();
 8003306:	f7fe fa27 	bl	8001758 <millis>
 800330a:	6138      	str	r0, [r7, #16]
		while(is_rx_done == false)
 800330c:	e007      	b.n	800331e <sdReadBlocks+0x42>
		{
			if(millis() - pre_time >= timeout_ms)
 800330e:	f7fe fa23 	bl	8001758 <millis>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d908      	bls.n	8003330 <sdReadBlocks+0x54>
		while(is_rx_done == false)
 800331e:	4b12      	ldr	r3, [pc, #72]	; (8003368 <sdReadBlocks+0x8c>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f083 0301 	eor.w	r3, r3, #1
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1ef      	bne.n	800330e <sdReadBlocks+0x32>
 800332e:	e00d      	b.n	800334c <sdReadBlocks+0x70>
			{
				break;
 8003330:	bf00      	nop
			}
		}

		while(sdIsBusy() == true)
 8003332:	e00b      	b.n	800334c <sdReadBlocks+0x70>
			{
				if(millis() - pre_time >= timeout_ms)
 8003334:	f7fe fa10 	bl	8001758 <millis>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d803      	bhi.n	800334c <sdReadBlocks+0x70>
				{
					is_rx_done = false;
 8003344:	4b08      	ldr	r3, [pc, #32]	; (8003368 <sdReadBlocks+0x8c>)
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
					break;
 800334a:	e004      	b.n	8003356 <sdReadBlocks+0x7a>
		while(sdIsBusy() == true)
 800334c:	f7ff ff90 	bl	8003270 <sdIsBusy>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1ee      	bne.n	8003334 <sdReadBlocks+0x58>
				}
			}

			ret = is_rx_done;
 8003356:	4b04      	ldr	r3, [pc, #16]	; (8003368 <sdReadBlocks+0x8c>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 800335c:	7dfb      	ldrb	r3, [r7, #23]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000d0a 	.word	0x20000d0a
 800336c:	200002f8 	.word	0x200002f8

08003370 <sdWriteBlocks>:

bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
	bool ret = false;
 800337e:	2300      	movs	r3, #0
 8003380:	75fb      	strb	r3, [r7, #23]
	uint32_t pre_time;

	is_tx_done = false;
 8003382:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <sdWriteBlocks+0x90>)
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
	if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	481d      	ldr	r0, [pc, #116]	; (8003404 <sdWriteBlocks+0x94>)
 8003390:	f003 f94c 	bl	800662c <HAL_SD_WriteBlocks_DMA>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d12d      	bne.n	80033f6 <sdWriteBlocks+0x86>
	{
		pre_time = millis();
 800339a:	f7fe f9dd 	bl	8001758 <millis>
 800339e:	6138      	str	r0, [r7, #16]
		while(is_tx_done == false)
 80033a0:	e007      	b.n	80033b2 <sdWriteBlocks+0x42>
		{
			if(millis() - pre_time >= timeout_ms)
 80033a2:	f7fe f9d9 	bl	8001758 <millis>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d908      	bls.n	80033c4 <sdWriteBlocks+0x54>
		while(is_tx_done == false)
 80033b2:	4b13      	ldr	r3, [pc, #76]	; (8003400 <sdWriteBlocks+0x90>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f083 0301 	eor.w	r3, r3, #1
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ef      	bne.n	80033a2 <sdWriteBlocks+0x32>
 80033c2:	e000      	b.n	80033c6 <sdWriteBlocks+0x56>
			{
				break;
 80033c4:	bf00      	nop
			}
		}

		pre_time = millis();
 80033c6:	f7fe f9c7 	bl	8001758 <millis>
 80033ca:	6138      	str	r0, [r7, #16]
		while(sdIsBusy() == true)
 80033cc:	e00b      	b.n	80033e6 <sdWriteBlocks+0x76>
		{
			if(millis() - pre_time >= timeout_ms)
 80033ce:	f7fe f9c3 	bl	8001758 <millis>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d803      	bhi.n	80033e6 <sdWriteBlocks+0x76>
			{
				is_tx_done = false;
 80033de:	4b08      	ldr	r3, [pc, #32]	; (8003400 <sdWriteBlocks+0x90>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
				break;
 80033e4:	e004      	b.n	80033f0 <sdWriteBlocks+0x80>
		while(sdIsBusy() == true)
 80033e6:	f7ff ff43 	bl	8003270 <sdIsBusy>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ee      	bne.n	80033ce <sdWriteBlocks+0x5e>
			}
		}

		ret = is_tx_done;
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <sdWriteBlocks+0x90>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80033f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000d0b 	.word	0x20000d0b
 8003404:	200002f8 	.word	0x200002f8

08003408 <HAL_SD_TxCpltCallback>:
	return ret;
}


__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
	is_tx_done = true;
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <HAL_SD_TxCpltCallback+0x1c>)
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000d0b 	.word	0x20000d0b

08003428 <HAL_SD_RxCpltCallback>:

__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	is_rx_done = true;
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <HAL_SD_RxCpltCallback+0x1c>)
 8003432:	2201      	movs	r2, #1
 8003434:	701a      	strb	r2, [r3, #0]
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20000d0a 	.word	0x20000d0a

08003448 <cliSd>:

#ifdef _USE_HW_CLI

void cliSd(cli_args_t *args)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800344e:	af00      	add	r7, sp, #0
 8003450:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003454:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003458:	6018      	str	r0, [r3, #0]
	bool ret = false;
 800345a:	2300      	movs	r3, #0
 800345c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

	if(args->argc == 1 && args->isStr(0, "info") == true)
 8003460:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003464:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	f040 8094 	bne.w	800359a <cliSd+0x152>
 8003472:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003476:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	497a      	ldr	r1, [pc, #488]	; (8003668 <cliSd+0x220>)
 8003480:	2000      	movs	r0, #0
 8003482:	4798      	blx	r3
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 8087 	beq.w	800359a <cliSd+0x152>
	{
		sd_info_t sd_info;

		cliPrintf("sd init : %d\n", is_init);
 800348c:	4b77      	ldr	r3, [pc, #476]	; (800366c <cliSd+0x224>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	4619      	mov	r1, r3
 8003492:	4877      	ldr	r0, [pc, #476]	; (8003670 <cliSd+0x228>)
 8003494:	f7ff f80a 	bl	80024ac <cliPrintf>
		cliPrintf("sd connected : %d\n", is_detected);
 8003498:	4b76      	ldr	r3, [pc, #472]	; (8003674 <cliSd+0x22c>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	4619      	mov	r1, r3
 800349e:	4876      	ldr	r0, [pc, #472]	; (8003678 <cliSd+0x230>)
 80034a0:	f7ff f804 	bl	80024ac <cliPrintf>

		if(is_init == true)
 80034a4:	4b71      	ldr	r3, [pc, #452]	; (800366c <cliSd+0x224>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d073      	beq.n	8003594 <cliSd+0x14c>
		{
			if(sdGetInfo(&sd_info) == true)
 80034ac:	f107 030c 	add.w	r3, r7, #12
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fe85 	bl	80031c0 <sdGetInfo>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d06b      	beq.n	8003594 <cliSd+0x14c>
			{
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 80034bc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80034c0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4619      	mov	r1, r3
 80034c8:	486c      	ldr	r0, [pc, #432]	; (800367c <cliSd+0x234>)
 80034ca:	f7fe ffef 	bl	80024ac <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 80034ce:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80034d2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	4619      	mov	r1, r3
 80034da:	4869      	ldr	r0, [pc, #420]	; (8003680 <cliSd+0x238>)
 80034dc:	f7fe ffe6 	bl	80024ac <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 80034e0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80034e4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4619      	mov	r1, r3
 80034ec:	4865      	ldr	r0, [pc, #404]	; (8003684 <cliSd+0x23c>)
 80034ee:	f7fe ffdd 	bl	80024ac <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 80034f2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80034f6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4619      	mov	r1, r3
 80034fe:	4862      	ldr	r0, [pc, #392]	; (8003688 <cliSd+0x240>)
 8003500:	f7fe ffd4 	bl	80024ac <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 8003504:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003508:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	4619      	mov	r1, r3
 8003510:	485e      	ldr	r0, [pc, #376]	; (800368c <cliSd+0x244>)
 8003512:	f7fe ffcb 	bl	80024ac <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 8003516:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800351a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	4619      	mov	r1, r3
 8003522:	485b      	ldr	r0, [pc, #364]	; (8003690 <cliSd+0x248>)
 8003524:	f7fe ffc2 	bl	80024ac <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 8003528:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800352c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	4619      	mov	r1, r3
 8003534:	4857      	ldr	r0, [pc, #348]	; (8003694 <cliSd+0x24c>)
 8003536:	f7fe ffb9 	bl	80024ac <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 800353a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800353e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	4619      	mov	r1, r3
 8003546:	4854      	ldr	r0, [pc, #336]	; (8003698 <cliSd+0x250>)
 8003548:	f7fe ffb0 	bl	80024ac <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 800354c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003550:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003554:	6a18      	ldr	r0, [r3, #32]
 8003556:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800355a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	0a9c      	lsrs	r4, r3, #10
 8003562:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003566:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800356a:	6a1a      	ldr	r2, [r3, #32]
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	0a99      	lsrs	r1, r3, #10
 8003576:	4b49      	ldr	r3, [pc, #292]	; (800369c <cliSd+0x254>)
 8003578:	fba3 2301 	umull	r2, r3, r3, r1
 800357c:	08da      	lsrs	r2, r3, #3
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	1aca      	subs	r2, r1, r3
 8003588:	4613      	mov	r3, r2
 800358a:	4622      	mov	r2, r4
 800358c:	4601      	mov	r1, r0
 800358e:	4844      	ldr	r0, [pc, #272]	; (80036a0 <cliSd+0x258>)
 8003590:	f7fe ff8c 	bl	80024ac <cliPrintf>
			}
		}

		ret = true;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 800359a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800359e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d147      	bne.n	800363a <cliSd+0x1f2>
 80035aa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80035ae:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	493b      	ldr	r1, [pc, #236]	; (80036a4 <cliSd+0x25c>)
 80035b8:	2000      	movs	r0, #0
 80035ba:	4798      	blx	r3
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d03b      	beq.n	800363a <cliSd+0x1f2>
	{
		uint32_t number;
		uint32_t buf[512/4];

		number = args->getData(1);
 80035c2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80035c6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2001      	movs	r0, #1
 80035d0:	4798      	blx	r3
 80035d2:	4603      	mov	r3, r0
 80035d4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

		if(sdReadBlocks(number, (uint8_t *)buf, 1, 1000) == true)
 80035d8:	f107 010c 	add.w	r1, r7, #12
 80035dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035e0:	2201      	movs	r2, #1
 80035e2:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80035e6:	f7ff fe79 	bl	80032dc <sdReadBlocks>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01e      	beq.n	800362e <cliSd+0x1e6>
		{
			for(int i=0; i<512/4; i++)
 80035f0:	2300      	movs	r3, #0
 80035f2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80035f6:	e015      	b.n	8003624 <cliSd+0x1dc>
			{
				cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 80035f8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80035fc:	0099      	lsls	r1, r3, #2
 80035fe:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003602:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003606:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800360a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800360e:	460a      	mov	r2, r1
 8003610:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8003614:	4824      	ldr	r0, [pc, #144]	; (80036a8 <cliSd+0x260>)
 8003616:	f7fe ff49 	bl	80024ac <cliPrintf>
			for(int i=0; i<512/4; i++)
 800361a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800361e:	3301      	adds	r3, #1
 8003620:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003624:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003628:	2b7f      	cmp	r3, #127	; 0x7f
 800362a:	dde5      	ble.n	80035f8 <cliSd+0x1b0>
 800362c:	e002      	b.n	8003634 <cliSd+0x1ec>
			}
		}
		else
		{
			cliPrintf("sdRead Fail\n");
 800362e:	481f      	ldr	r0, [pc, #124]	; (80036ac <cliSd+0x264>)
 8003630:	f7fe ff3c 	bl	80024ac <cliPrintf>
		}

		ret = true;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}

	if(ret != true)
 800363a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800363e:	f083 0301 	eor.w	r3, r3, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d009      	beq.n	800365c <cliSd+0x214>
	{
		cliPrintf("sd info\n");
 8003648:	4819      	ldr	r0, [pc, #100]	; (80036b0 <cliSd+0x268>)
 800364a:	f7fe ff2f 	bl	80024ac <cliPrintf>

		if(is_init == true)
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <cliSd+0x224>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <cliSd+0x214>
		{
			cliPrintf("sd read block_number\n");
 8003656:	4817      	ldr	r0, [pc, #92]	; (80036b4 <cliSd+0x26c>)
 8003658:	f7fe ff28 	bl	80024ac <cliPrintf>
		}
	}
}
 800365c:	bf00      	nop
 800365e:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8003662:	46bd      	mov	sp, r7
 8003664:	bd90      	pop	{r4, r7, pc}
 8003666:	bf00      	nop
 8003668:	08013af0 	.word	0x08013af0
 800366c:	20000d08 	.word	0x20000d08
 8003670:	08013af8 	.word	0x08013af8
 8003674:	20000d09 	.word	0x20000d09
 8003678:	08013b08 	.word	0x08013b08
 800367c:	08013b1c 	.word	0x08013b1c
 8003680:	08013b3c 	.word	0x08013b3c
 8003684:	08013b5c 	.word	0x08013b5c
 8003688:	08013b7c 	.word	0x08013b7c
 800368c:	08013b9c 	.word	0x08013b9c
 8003690:	08013bbc 	.word	0x08013bbc
 8003694:	08013bdc 	.word	0x08013bdc
 8003698:	08013bfc 	.word	0x08013bfc
 800369c:	cccccccd 	.word	0xcccccccd
 80036a0:	08013c1c 	.word	0x08013c1c
 80036a4:	08013c48 	.word	0x08013c48
 80036a8:	08013c50 	.word	0x08013c50
 80036ac:	08013c64 	.word	0x08013c64
 80036b0:	08013c74 	.word	0x08013c74
 80036b4:	08013c80 	.word	0x08013c80

080036b8 <uartOpen>:
{
	return true;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	6039      	str	r1, [r7, #0]
 80036c2:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 80036c4:	2300      	movs	r3, #0
 80036c6:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <uartOpen+0x24>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	4a06      	ldr	r2, [pc, #24]	; (80036ec <uartOpen+0x34>)
 80036d2:	2101      	movs	r1, #1
 80036d4:	54d1      	strb	r1, [r2, r3]
			ret = true;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
			break;
 80036da:	bf00      	nop
			qbuffer[ch].out = qbuffer[ch].in;
			break;
			#endif
	}

	return ret;
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000d0c 	.word	0x20000d0c

080036f0 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
	uint32_t ret;

	switch(ch)
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <uartAvailable+0x14>
 8003700:	2b01      	cmp	r3, #1
		case _DEF_UART2:
			#ifdef _USE_UART2
			qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
			ret = qbufferAvailable(&qbuffer[ch]);
			#endif
			break;
 8003702:	e003      	b.n	800370c <uartAvailable+0x1c>
			ret = cdcAvailable();
 8003704:	f7fe f930 	bl	8001968 <cdcAvailable>
 8003708:	60f8      	str	r0, [r7, #12]
			break;
 800370a:	bf00      	nop
	}

	return ret;
 800370c:	68fb      	ldr	r3, [r7, #12]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <uartRead+0x14>
 8003726:	2b01      	cmp	r3, #1

		case _DEF_UART2:
			#ifdef _USE_UART2
			qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
			#endif
			break;
 8003728:	e004      	b.n	8003734 <uartRead+0x1e>
			ret = cdcRead();
 800372a:	f7fe f933 	bl	8001994 <cdcRead>
 800372e:	4603      	mov	r3, r0
 8003730:	73fb      	strb	r3, [r7, #15]
			break;
 8003732:	bf00      	nop
	}

	return ret;
 8003734:	7bfb      	ldrb	r3, [r7, #15]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b086      	sub	sp, #24
 8003742:	af00      	add	r7, sp, #0
 8003744:	4603      	mov	r3, r0
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	73fb      	strb	r3, [r7, #15]

	#ifdef _USE_UART2
	HAL_StatusTypeDef status;
	#endif

	switch(ch)
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <uartWrite+0x18>
 8003752:	2b01      	cmp	r3, #1
			if(status == HAL_OK)
			{
				ret = length;
			}
			#endif
			break;
 8003754:	e005      	b.n	8003762 <uartWrite+0x24>
			ret = cdcWrite(p_data, length);
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	68b8      	ldr	r0, [r7, #8]
 800375a:	f7fe f963 	bl	8001a24 <cdcWrite>
 800375e:	6178      	str	r0, [r7, #20]
			break;
 8003760:	bf00      	nop
	}

	return ret;
 8003762:	697b      	ldr	r3, [r7, #20]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800376c:	b40e      	push	{r1, r2, r3}
 800376e:	b580      	push	{r7, lr}
 8003770:	b0c7      	sub	sp, #284	; 0x11c
 8003772:	af00      	add	r7, sp, #0
 8003774:	4602      	mov	r2, r0
 8003776:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800377a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800377e:	701a      	strb	r2, [r3, #0]
	char buf[256];
	va_list args;
	int len;
	uint32_t ret;

	va_start(args, fmt);
 8003780:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003784:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003788:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800378c:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf, 256, fmt, args);
 800378e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003792:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003796:	f107 0010 	add.w	r0, r7, #16
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80037a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037a4:	f00d ffc6 	bl	8011734 <vsniprintf>
 80037a8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	ret = uartWrite(ch, (uint8_t *)buf, len);
 80037ac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80037b0:	f107 0110 	add.w	r1, r7, #16
 80037b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80037b8:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff ffbd 	bl	800373e <uartWrite>
 80037c4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	va_end(args);

	return ret;
 80037c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80037d2:	46bd      	mov	sp, r7
 80037d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037d8:	b003      	add	sp, #12
 80037da:	4770      	bx	lr

080037dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <HAL_Init+0x40>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a0d      	ldr	r2, [pc, #52]	; (800381c <HAL_Init+0x40>)
 80037e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_Init+0x40>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a0a      	ldr	r2, [pc, #40]	; (800381c <HAL_Init+0x40>)
 80037f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <HAL_Init+0x40>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a07      	ldr	r2, [pc, #28]	; (800381c <HAL_Init+0x40>)
 80037fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003804:	2003      	movs	r0, #3
 8003806:	f000 f94f 	bl	8003aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800380a:	200f      	movs	r0, #15
 800380c:	f000 f808 	bl	8003820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003810:	f7fd fe1c 	bl	800144c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40023c00 	.word	0x40023c00

08003820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003828:	4b12      	ldr	r3, [pc, #72]	; (8003874 <HAL_InitTick+0x54>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4b12      	ldr	r3, [pc, #72]	; (8003878 <HAL_InitTick+0x58>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	4619      	mov	r1, r3
 8003832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003836:	fbb3 f3f1 	udiv	r3, r3, r1
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f967 	bl	8003b12 <HAL_SYSTICK_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e00e      	b.n	800386c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b0f      	cmp	r3, #15
 8003852:	d80a      	bhi.n	800386a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003854:	2200      	movs	r2, #0
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	f04f 30ff 	mov.w	r0, #4294967295
 800385c:	f000 f92f 	bl	8003abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003860:	4a06      	ldr	r2, [pc, #24]	; (800387c <HAL_InitTick+0x5c>)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000000 	.word	0x20000000
 8003878:	20000018 	.word	0x20000018
 800387c:	20000014 	.word	0x20000014

08003880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <HAL_IncTick+0x20>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_IncTick+0x24>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4413      	add	r3, r2
 8003890:	4a04      	ldr	r2, [pc, #16]	; (80038a4 <HAL_IncTick+0x24>)
 8003892:	6013      	str	r3, [r2, #0]
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000018 	.word	0x20000018
 80038a4:	20000d10 	.word	0x20000d10

080038a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return uwTick;
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <HAL_GetTick+0x14>)
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20000d10 	.word	0x20000d10

080038c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038c8:	f7ff ffee 	bl	80038a8 <HAL_GetTick>
 80038cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d005      	beq.n	80038e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <HAL_Delay+0x44>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038e6:	bf00      	nop
 80038e8:	f7ff ffde 	bl	80038a8 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d8f7      	bhi.n	80038e8 <HAL_Delay+0x28>
  {
  }
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000018 	.word	0x20000018

08003908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <__NVIC_SetPriorityGrouping+0x44>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003924:	4013      	ands	r3, r2
 8003926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800393a:	4a04      	ldr	r2, [pc, #16]	; (800394c <__NVIC_SetPriorityGrouping+0x44>)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	60d3      	str	r3, [r2, #12]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	e000ed00 	.word	0xe000ed00

08003950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <__NVIC_GetPriorityGrouping+0x18>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	f003 0307 	and.w	r3, r3, #7
}
 800395e:	4618      	mov	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	2b00      	cmp	r3, #0
 800397c:	db0b      	blt.n	8003996 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	f003 021f 	and.w	r2, r3, #31
 8003984:	4907      	ldr	r1, [pc, #28]	; (80039a4 <__NVIC_EnableIRQ+0x38>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2001      	movs	r0, #1
 800398e:	fa00 f202 	lsl.w	r2, r0, r2
 8003992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	e000e100 	.word	0xe000e100

080039a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	db0a      	blt.n	80039d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	490c      	ldr	r1, [pc, #48]	; (80039f4 <__NVIC_SetPriority+0x4c>)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	0112      	lsls	r2, r2, #4
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	440b      	add	r3, r1
 80039cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d0:	e00a      	b.n	80039e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	4908      	ldr	r1, [pc, #32]	; (80039f8 <__NVIC_SetPriority+0x50>)
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	3b04      	subs	r3, #4
 80039e0:	0112      	lsls	r2, r2, #4
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	440b      	add	r3, r1
 80039e6:	761a      	strb	r2, [r3, #24]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000e100 	.word	0xe000e100
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b089      	sub	sp, #36	; 0x24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f1c3 0307 	rsb	r3, r3, #7
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	bf28      	it	cs
 8003a1a:	2304      	movcs	r3, #4
 8003a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3304      	adds	r3, #4
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d902      	bls.n	8003a2c <NVIC_EncodePriority+0x30>
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3b03      	subs	r3, #3
 8003a2a:	e000      	b.n	8003a2e <NVIC_EncodePriority+0x32>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	f04f 32ff 	mov.w	r2, #4294967295
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	401a      	ands	r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a44:	f04f 31ff 	mov.w	r1, #4294967295
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	43d9      	mvns	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a54:	4313      	orrs	r3, r2
         );
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3724      	adds	r7, #36	; 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a74:	d301      	bcc.n	8003a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a76:	2301      	movs	r3, #1
 8003a78:	e00f      	b.n	8003a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <SysTick_Config+0x40>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a82:	210f      	movs	r1, #15
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295
 8003a88:	f7ff ff8e 	bl	80039a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <SysTick_Config+0x40>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a92:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <SysTick_Config+0x40>)
 8003a94:	2207      	movs	r2, #7
 8003a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	e000e010 	.word	0xe000e010

08003aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ff29 	bl	8003908 <__NVIC_SetPriorityGrouping>
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
 8003aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad0:	f7ff ff3e 	bl	8003950 <__NVIC_GetPriorityGrouping>
 8003ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	6978      	ldr	r0, [r7, #20]
 8003adc:	f7ff ff8e 	bl	80039fc <NVIC_EncodePriority>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff5d 	bl	80039a8 <__NVIC_SetPriority>
}
 8003aee:	bf00      	nop
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	4603      	mov	r3, r0
 8003afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ff31 	bl	800396c <__NVIC_EnableIRQ>
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff ffa2 	bl	8003a64 <SysTick_Config>
 8003b20:	4603      	mov	r3, r0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b38:	f7ff feb6 	bl	80038a8 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e099      	b.n	8003c7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0201 	bic.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b68:	e00f      	b.n	8003b8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b6a:	f7ff fe9d 	bl	80038a8 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b05      	cmp	r3, #5
 8003b76:	d908      	bls.n	8003b8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2203      	movs	r2, #3
 8003b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e078      	b.n	8003c7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e8      	bne.n	8003b6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4b38      	ldr	r3, [pc, #224]	; (8003c84 <HAL_DMA_Init+0x158>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d107      	bne.n	8003bf4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	4313      	orrs	r3, r2
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0307 	bic.w	r3, r3, #7
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d117      	bne.n	8003c4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00e      	beq.n	8003c4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fa9d 	bl	8004170 <DMA_CheckFifoParam>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2240      	movs	r2, #64	; 0x40
 8003c40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e016      	b.n	8003c7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa54 	bl	8004104 <DMA_CalcBaseAndBitshift>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c64:	223f      	movs	r2, #63	; 0x3f
 8003c66:	409a      	lsls	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	f010803f 	.word	0xf010803f

08003c88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_DMA_Start_IT+0x26>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e040      	b.n	8003d30 <HAL_DMA_Start_IT+0xa8>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d12f      	bne.n	8003d22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f9e6 	bl	80040a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce0:	223f      	movs	r2, #63	; 0x3f
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0216 	orr.w	r2, r2, #22
 8003cf6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0208 	orr.w	r2, r2, #8
 8003d0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e005      	b.n	8003d2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d004      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2280      	movs	r2, #128	; 0x80
 8003d50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e00c      	b.n	8003d70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2205      	movs	r2, #5
 8003d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d88:	4b8e      	ldr	r3, [pc, #568]	; (8003fc4 <HAL_DMA_IRQHandler+0x248>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a8e      	ldr	r2, [pc, #568]	; (8003fc8 <HAL_DMA_IRQHandler+0x24c>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	0a9b      	lsrs	r3, r3, #10
 8003d94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da6:	2208      	movs	r2, #8
 8003da8:	409a      	lsls	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01a      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d013      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0204 	bic.w	r2, r2, #4
 8003dce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f043 0201 	orr.w	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dec:	2201      	movs	r2, #1
 8003dee:	409a      	lsls	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d012      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	f043 0202 	orr.w	r2, r3, #2
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e22:	2204      	movs	r2, #4
 8003e24:	409a      	lsls	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d012      	beq.n	8003e54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00b      	beq.n	8003e54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e40:	2204      	movs	r2, #4
 8003e42:	409a      	lsls	r2, r3
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4c:	f043 0204 	orr.w	r2, r3, #4
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e58:	2210      	movs	r2, #16
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d043      	beq.n	8003eec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d03c      	beq.n	8003eec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e76:	2210      	movs	r2, #16
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d018      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d108      	bne.n	8003eac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d024      	beq.n	8003eec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	4798      	blx	r3
 8003eaa:	e01f      	b.n	8003eec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01b      	beq.n	8003eec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
 8003ebc:	e016      	b.n	8003eec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d107      	bne.n	8003edc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0208 	bic.w	r2, r2, #8
 8003eda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 808f 	beq.w	800401c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8087 	beq.w	800401c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f12:	2220      	movs	r2, #32
 8003f14:	409a      	lsls	r2, r3
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b05      	cmp	r3, #5
 8003f24:	d136      	bne.n	8003f94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0216 	bic.w	r2, r2, #22
 8003f34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695a      	ldr	r2, [r3, #20]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d103      	bne.n	8003f56 <HAL_DMA_IRQHandler+0x1da>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0208 	bic.w	r2, r2, #8
 8003f64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6a:	223f      	movs	r2, #63	; 0x3f
 8003f6c:	409a      	lsls	r2, r3
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d07e      	beq.n	8004088 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	4798      	blx	r3
        }
        return;
 8003f92:	e079      	b.n	8004088 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d01d      	beq.n	8003fde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10d      	bne.n	8003fcc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d031      	beq.n	800401c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	4798      	blx	r3
 8003fc0:	e02c      	b.n	800401c <HAL_DMA_IRQHandler+0x2a0>
 8003fc2:	bf00      	nop
 8003fc4:	20000000 	.word	0x20000000
 8003fc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d023      	beq.n	800401c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	4798      	blx	r3
 8003fdc:	e01e      	b.n	800401c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10f      	bne.n	800400c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0210 	bic.w	r2, r2, #16
 8003ffa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004020:	2b00      	cmp	r3, #0
 8004022:	d032      	beq.n	800408a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d022      	beq.n	8004076 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2205      	movs	r2, #5
 8004034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0201 	bic.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	3301      	adds	r3, #1
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	429a      	cmp	r2, r3
 8004052:	d307      	bcc.n	8004064 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f2      	bne.n	8004048 <HAL_DMA_IRQHandler+0x2cc>
 8004062:	e000      	b.n	8004066 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004064:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	4798      	blx	r3
 8004086:	e000      	b.n	800408a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004088:	bf00      	nop
    }
  }
}
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800409c:	4618      	mov	r0, r3
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d108      	bne.n	80040e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040e6:	e007      	b.n	80040f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	60da      	str	r2, [r3, #12]
}
 80040f8:	bf00      	nop
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	3b10      	subs	r3, #16
 8004114:	4a14      	ldr	r2, [pc, #80]	; (8004168 <DMA_CalcBaseAndBitshift+0x64>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	091b      	lsrs	r3, r3, #4
 800411c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800411e:	4a13      	ldr	r2, [pc, #76]	; (800416c <DMA_CalcBaseAndBitshift+0x68>)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d909      	bls.n	8004146 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800413a:	f023 0303 	bic.w	r3, r3, #3
 800413e:	1d1a      	adds	r2, r3, #4
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	659a      	str	r2, [r3, #88]	; 0x58
 8004144:	e007      	b.n	8004156 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800414e:	f023 0303 	bic.w	r3, r3, #3
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	aaaaaaab 	.word	0xaaaaaaab
 800416c:	08013d58 	.word	0x08013d58

08004170 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11f      	bne.n	80041ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d856      	bhi.n	800423e <DMA_CheckFifoParam+0xce>
 8004190:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <DMA_CheckFifoParam+0x28>)
 8004192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004196:	bf00      	nop
 8004198:	080041a9 	.word	0x080041a9
 800419c:	080041bb 	.word	0x080041bb
 80041a0:	080041a9 	.word	0x080041a9
 80041a4:	0800423f 	.word	0x0800423f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d046      	beq.n	8004242 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b8:	e043      	b.n	8004242 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041c2:	d140      	bne.n	8004246 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c8:	e03d      	b.n	8004246 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d2:	d121      	bne.n	8004218 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d837      	bhi.n	800424a <DMA_CheckFifoParam+0xda>
 80041da:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <DMA_CheckFifoParam+0x70>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	080041f1 	.word	0x080041f1
 80041e4:	080041f7 	.word	0x080041f7
 80041e8:	080041f1 	.word	0x080041f1
 80041ec:	08004209 	.word	0x08004209
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      break;
 80041f4:	e030      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d025      	beq.n	800424e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004206:	e022      	b.n	800424e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004210:	d11f      	bne.n	8004252 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004216:	e01c      	b.n	8004252 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d903      	bls.n	8004226 <DMA_CheckFifoParam+0xb6>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d003      	beq.n	800422c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004224:	e018      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
      break;
 800422a:	e015      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00e      	beq.n	8004256 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      break;
 800423c:	e00b      	b.n	8004256 <DMA_CheckFifoParam+0xe6>
      break;
 800423e:	bf00      	nop
 8004240:	e00a      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;
 8004242:	bf00      	nop
 8004244:	e008      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;
 8004246:	bf00      	nop
 8004248:	e006      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;
 800424a:	bf00      	nop
 800424c:	e004      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;
 800424e:	bf00      	nop
 8004250:	e002      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;   
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;
 8004256:	bf00      	nop
    }
  } 
  
  return status; 
 8004258:	7bfb      	ldrb	r3, [r7, #15]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop

08004268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004268:	b480      	push	{r7}
 800426a:	b089      	sub	sp, #36	; 0x24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e159      	b.n	8004538 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004284:	2201      	movs	r2, #1
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4013      	ands	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	429a      	cmp	r2, r3
 800429e:	f040 8148 	bne.w	8004532 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d005      	beq.n	80042ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d130      	bne.n	800431c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	2203      	movs	r2, #3
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4013      	ands	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042f0:	2201      	movs	r2, #1
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 0201 	and.w	r2, r3, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b03      	cmp	r3, #3
 8004326:	d017      	beq.n	8004358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	2203      	movs	r2, #3
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d123      	bne.n	80043ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	08da      	lsrs	r2, r3, #3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3208      	adds	r2, #8
 800436c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	220f      	movs	r2, #15
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	08da      	lsrs	r2, r3, #3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3208      	adds	r2, #8
 80043a6:	69b9      	ldr	r1, [r7, #24]
 80043a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	2203      	movs	r2, #3
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43db      	mvns	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 0203 	and.w	r2, r3, #3
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80a2 	beq.w	8004532 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	4b57      	ldr	r3, [pc, #348]	; (8004550 <HAL_GPIO_Init+0x2e8>)
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	4a56      	ldr	r2, [pc, #344]	; (8004550 <HAL_GPIO_Init+0x2e8>)
 80043f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043fc:	6453      	str	r3, [r2, #68]	; 0x44
 80043fe:	4b54      	ldr	r3, [pc, #336]	; (8004550 <HAL_GPIO_Init+0x2e8>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800440a:	4a52      	ldr	r2, [pc, #328]	; (8004554 <HAL_GPIO_Init+0x2ec>)
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	089b      	lsrs	r3, r3, #2
 8004410:	3302      	adds	r3, #2
 8004412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	220f      	movs	r2, #15
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a49      	ldr	r2, [pc, #292]	; (8004558 <HAL_GPIO_Init+0x2f0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d019      	beq.n	800446a <HAL_GPIO_Init+0x202>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a48      	ldr	r2, [pc, #288]	; (800455c <HAL_GPIO_Init+0x2f4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <HAL_GPIO_Init+0x1fe>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a47      	ldr	r2, [pc, #284]	; (8004560 <HAL_GPIO_Init+0x2f8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00d      	beq.n	8004462 <HAL_GPIO_Init+0x1fa>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a46      	ldr	r2, [pc, #280]	; (8004564 <HAL_GPIO_Init+0x2fc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d007      	beq.n	800445e <HAL_GPIO_Init+0x1f6>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a45      	ldr	r2, [pc, #276]	; (8004568 <HAL_GPIO_Init+0x300>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <HAL_GPIO_Init+0x1f2>
 8004456:	2304      	movs	r3, #4
 8004458:	e008      	b.n	800446c <HAL_GPIO_Init+0x204>
 800445a:	2307      	movs	r3, #7
 800445c:	e006      	b.n	800446c <HAL_GPIO_Init+0x204>
 800445e:	2303      	movs	r3, #3
 8004460:	e004      	b.n	800446c <HAL_GPIO_Init+0x204>
 8004462:	2302      	movs	r3, #2
 8004464:	e002      	b.n	800446c <HAL_GPIO_Init+0x204>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <HAL_GPIO_Init+0x204>
 800446a:	2300      	movs	r3, #0
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	f002 0203 	and.w	r2, r2, #3
 8004472:	0092      	lsls	r2, r2, #2
 8004474:	4093      	lsls	r3, r2
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800447c:	4935      	ldr	r1, [pc, #212]	; (8004554 <HAL_GPIO_Init+0x2ec>)
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	3302      	adds	r3, #2
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800448a:	4b38      	ldr	r3, [pc, #224]	; (800456c <HAL_GPIO_Init+0x304>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ae:	4a2f      	ldr	r2, [pc, #188]	; (800456c <HAL_GPIO_Init+0x304>)
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044b4:	4b2d      	ldr	r3, [pc, #180]	; (800456c <HAL_GPIO_Init+0x304>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044d8:	4a24      	ldr	r2, [pc, #144]	; (800456c <HAL_GPIO_Init+0x304>)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044de:	4b23      	ldr	r3, [pc, #140]	; (800456c <HAL_GPIO_Init+0x304>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	43db      	mvns	r3, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4013      	ands	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004502:	4a1a      	ldr	r2, [pc, #104]	; (800456c <HAL_GPIO_Init+0x304>)
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004508:	4b18      	ldr	r3, [pc, #96]	; (800456c <HAL_GPIO_Init+0x304>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	43db      	mvns	r3, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4013      	ands	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800452c:	4a0f      	ldr	r2, [pc, #60]	; (800456c <HAL_GPIO_Init+0x304>)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3301      	adds	r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b0f      	cmp	r3, #15
 800453c:	f67f aea2 	bls.w	8004284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3724      	adds	r7, #36	; 0x24
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800
 8004554:	40013800 	.word	0x40013800
 8004558:	40020000 	.word	0x40020000
 800455c:	40020400 	.word	0x40020400
 8004560:	40020800 	.word	0x40020800
 8004564:	40020c00 	.word	0x40020c00
 8004568:	40021000 	.word	0x40021000
 800456c:	40013c00 	.word	0x40013c00

08004570 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	887b      	ldrh	r3, [r7, #2]
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004588:	2301      	movs	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
 800458c:	e001      	b.n	8004592 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004592:	7bfb      	ldrb	r3, [r7, #15]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	807b      	strh	r3, [r7, #2]
 80045ac:	4613      	mov	r3, r2
 80045ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045b0:	787b      	ldrb	r3, [r7, #1]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045b6:	887a      	ldrh	r2, [r7, #2]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045bc:	e003      	b.n	80045c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045be:	887b      	ldrh	r3, [r7, #2]
 80045c0:	041a      	lsls	r2, r3, #16
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	619a      	str	r2, [r3, #24]
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	460b      	mov	r3, r1
 80045dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045e4:	887a      	ldrh	r2, [r7, #2]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4013      	ands	r3, r2
 80045ea:	041a      	lsls	r2, r3, #16
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	43d9      	mvns	r1, r3
 80045f0:	887b      	ldrh	r3, [r7, #2]
 80045f2:	400b      	ands	r3, r1
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	619a      	str	r2, [r3, #24]
}
 80045fa:	bf00      	nop
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b086      	sub	sp, #24
 800460a:	af02      	add	r7, sp, #8
 800460c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e101      	b.n	800481c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f00b fc98 	bl	800ff68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2203      	movs	r2, #3
 800463c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004646:	d102      	bne.n	800464e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f004 f827 	bl	80086a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	7c1a      	ldrb	r2, [r3, #16]
 8004660:	f88d 2000 	strb.w	r2, [sp]
 8004664:	3304      	adds	r3, #4
 8004666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004668:	f003 ff06 	bl	8008478 <USB_CoreInit>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e0ce      	b.n	800481c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2100      	movs	r1, #0
 8004684:	4618      	mov	r0, r3
 8004686:	f004 f81f 	bl	80086c8 <USB_SetCurrentMode>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0bf      	b.n	800481c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800469c:	2300      	movs	r3, #0
 800469e:	73fb      	strb	r3, [r7, #15]
 80046a0:	e04a      	b.n	8004738 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046a2:	7bfa      	ldrb	r2, [r7, #15]
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	3315      	adds	r3, #21
 80046b2:	2201      	movs	r2, #1
 80046b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046b6:	7bfa      	ldrb	r2, [r7, #15]
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	3314      	adds	r3, #20
 80046c6:	7bfa      	ldrb	r2, [r7, #15]
 80046c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046ca:	7bfa      	ldrb	r2, [r7, #15]
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	b298      	uxth	r0, r3
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	332e      	adds	r3, #46	; 0x2e
 80046de:	4602      	mov	r2, r0
 80046e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046e2:	7bfa      	ldrb	r2, [r7, #15]
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	3318      	adds	r3, #24
 80046f2:	2200      	movs	r2, #0
 80046f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046f6:	7bfa      	ldrb	r2, [r7, #15]
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	331c      	adds	r3, #28
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800470a:	7bfa      	ldrb	r2, [r7, #15]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	3320      	adds	r3, #32
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800471e:	7bfa      	ldrb	r2, [r7, #15]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	3324      	adds	r3, #36	; 0x24
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	3301      	adds	r3, #1
 8004736:	73fb      	strb	r3, [r7, #15]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	791b      	ldrb	r3, [r3, #4]
 800473c:	7bfa      	ldrb	r2, [r7, #15]
 800473e:	429a      	cmp	r2, r3
 8004740:	d3af      	bcc.n	80046a2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004742:	2300      	movs	r3, #0
 8004744:	73fb      	strb	r3, [r7, #15]
 8004746:	e044      	b.n	80047d2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004748:	7bfa      	ldrb	r2, [r7, #15]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	f203 2355 	addw	r3, r3, #597	; 0x255
 800475a:	2200      	movs	r2, #0
 800475c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800475e:	7bfa      	ldrb	r2, [r7, #15]
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8004770:	7bfa      	ldrb	r2, [r7, #15]
 8004772:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004774:	7bfa      	ldrb	r2, [r7, #15]
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004786:	2200      	movs	r2, #0
 8004788:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800478a:	7bfa      	ldrb	r2, [r7, #15]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047a0:	7bfa      	ldrb	r2, [r7, #15]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047b6:	7bfa      	ldrb	r2, [r7, #15]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	3301      	adds	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	791b      	ldrb	r3, [r3, #4]
 80047d6:	7bfa      	ldrb	r2, [r7, #15]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d3b5      	bcc.n	8004748 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	7c1a      	ldrb	r2, [r3, #16]
 80047e4:	f88d 2000 	strb.w	r2, [sp]
 80047e8:	3304      	adds	r3, #4
 80047ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047ec:	f003 ffb8 	bl	8008760 <USB_DevInit>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d005      	beq.n	8004802 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e00c      	b.n	800481c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f004 fffc 	bl	8009812 <USB_DevDisconnect>

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_PCD_Start+0x1c>
 800483c:	2302      	movs	r3, #2
 800483e:	e022      	b.n	8004886 <HAL_PCD_Start+0x62>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004850:	2b00      	cmp	r3, #0
 8004852:	d009      	beq.n	8004868 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004858:	2b01      	cmp	r3, #1
 800485a:	d105      	bne.n	8004868 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f003 ff09 	bl	8008684 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f004 ffaa 	bl	80097d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800488e:	b590      	push	{r4, r7, lr}
 8004890:	b08d      	sub	sp, #52	; 0x34
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f005 f868 	bl	800997a <USB_GetMode>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f040 848c 	bne.w	80051ca <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f004 ffcc 	bl	8009854 <USB_ReadInterrupts>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8482 	beq.w	80051c8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	0a1b      	lsrs	r3, r3, #8
 80048ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f004 ffb9 	bl	8009854 <USB_ReadInterrupts>
 80048e2:	4603      	mov	r3, r0
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d107      	bne.n	80048fc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f002 0202 	and.w	r2, r2, #2
 80048fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f004 ffa7 	bl	8009854 <USB_ReadInterrupts>
 8004906:	4603      	mov	r3, r0
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b10      	cmp	r3, #16
 800490e:	d161      	bne.n	80049d4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0210 	bic.w	r2, r2, #16
 800491e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	f003 020f 	and.w	r2, r3, #15
 800492c:	4613      	mov	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	4413      	add	r3, r2
 800493c:	3304      	adds	r3, #4
 800493e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	0c5b      	lsrs	r3, r3, #17
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	2b02      	cmp	r3, #2
 800494a:	d124      	bne.n	8004996 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d035      	beq.n	80049c4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	091b      	lsrs	r3, r3, #4
 8004960:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004966:	b29b      	uxth	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	6a38      	ldr	r0, [r7, #32]
 800496c:	f004 fdde 	bl	800952c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	091b      	lsrs	r3, r3, #4
 8004978:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800497c:	441a      	add	r2, r3
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	695a      	ldr	r2, [r3, #20]
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800498e:	441a      	add	r2, r3
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	615a      	str	r2, [r3, #20]
 8004994:	e016      	b.n	80049c4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	0c5b      	lsrs	r3, r3, #17
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	2b06      	cmp	r3, #6
 80049a0:	d110      	bne.n	80049c4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80049a8:	2208      	movs	r2, #8
 80049aa:	4619      	mov	r1, r3
 80049ac:	6a38      	ldr	r0, [r7, #32]
 80049ae:	f004 fdbd 	bl	800952c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	091b      	lsrs	r3, r3, #4
 80049ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049be:	441a      	add	r2, r3
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0210 	orr.w	r2, r2, #16
 80049d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f004 ff3b 	bl	8009854 <USB_ReadInterrupts>
 80049de:	4603      	mov	r3, r0
 80049e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049e8:	f040 80a7 	bne.w	8004b3a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f004 ff40 	bl	800987a <USB_ReadDevAllOutEpInterrupt>
 80049fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80049fc:	e099      	b.n	8004b32 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 808e 	beq.w	8004b26 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	4611      	mov	r1, r2
 8004a14:	4618      	mov	r0, r3
 8004a16:	f004 ff64 	bl	80098e2 <USB_ReadDevOutEPInterrupt>
 8004a1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00c      	beq.n	8004a40 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a32:	461a      	mov	r2, r3
 8004a34:	2301      	movs	r3, #1
 8004a36:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fea2 	bl	8005784 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00c      	beq.n	8004a64 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a56:	461a      	mov	r2, r3
 8004a58:	2308      	movs	r3, #8
 8004a5a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 ff78 	bl	8005954 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f003 0310 	and.w	r3, r3, #16
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d030      	beq.n	8004aec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a92:	2b80      	cmp	r3, #128	; 0x80
 8004a94:	d109      	bne.n	8004aaa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aa8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aac:	4613      	mov	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	4413      	add	r3, r2
 8004abc:	3304      	adds	r3, #4
 8004abe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	78db      	ldrb	r3, [r3, #3]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d108      	bne.n	8004ada <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2200      	movs	r2, #0
 8004acc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f00b fb43 	bl	8010160 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	2302      	movs	r3, #2
 8004aea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b02:	461a      	mov	r2, r3
 8004b04:	2320      	movs	r3, #32
 8004b06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b24:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	3301      	adds	r3, #1
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f47f af62 	bne.w	80049fe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f004 fe88 	bl	8009854 <USB_ReadInterrupts>
 8004b44:	4603      	mov	r3, r0
 8004b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b4e:	f040 80db 	bne.w	8004d08 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f004 fea9 	bl	80098ae <USB_ReadDevAllInEpInterrupt>
 8004b5c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004b62:	e0cd      	b.n	8004d00 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 80c2 	beq.w	8004cf4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f004 fecf 	bl	800991e <USB_ReadDevInEPInterrupt>
 8004b80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d057      	beq.n	8004c3c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	2201      	movs	r2, #1
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	69f9      	ldr	r1, [r7, #28]
 8004ba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bac:	4013      	ands	r3, r2
 8004bae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	799b      	ldrb	r3, [r3, #6]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d132      	bne.n	8004c30 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bce:	4613      	mov	r3, r2
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	440b      	add	r3, r1
 8004bd8:	3320      	adds	r3, #32
 8004bda:	6819      	ldr	r1, [r3, #0]
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be0:	4613      	mov	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4403      	add	r3, r0
 8004bea:	331c      	adds	r3, #28
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4419      	add	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4403      	add	r3, r0
 8004bfe:	3320      	adds	r3, #32
 8004c00:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d113      	bne.n	8004c30 <HAL_PCD_IRQHandler+0x3a2>
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	3324      	adds	r3, #36	; 0x24
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d108      	bne.n	8004c30 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004c28:	461a      	mov	r2, r3
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	f004 fed6 	bl	80099dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	4619      	mov	r1, r3
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f00b fa17 	bl	801006a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d008      	beq.n	8004c58 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c52:	461a      	mov	r2, r3
 8004c54:	2308      	movs	r3, #8
 8004c56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f003 0310 	and.w	r3, r3, #16
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d008      	beq.n	8004c74 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6e:	461a      	mov	r2, r3
 8004c70:	2310      	movs	r3, #16
 8004c72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d008      	beq.n	8004c90 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	2340      	movs	r3, #64	; 0x40
 8004c8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d023      	beq.n	8004ce2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c9c:	6a38      	ldr	r0, [r7, #32]
 8004c9e:	f003 fec3 	bl	8008a28 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	3310      	adds	r3, #16
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	78db      	ldrb	r3, [r3, #3]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d108      	bne.n	8004cd0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	4619      	mov	r1, r3
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f00b fa5a 	bl	8010184 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cdc:	461a      	mov	r2, r3
 8004cde:	2302      	movs	r3, #2
 8004ce0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004cec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fcbb 	bl	800566a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f47f af2e 	bne.w	8004b64 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f004 fda1 	bl	8009854 <USB_ReadInterrupts>
 8004d12:	4603      	mov	r3, r0
 8004d14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d1c:	d122      	bne.n	8004d64 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d2c:	f023 0301 	bic.w	r3, r3, #1
 8004d30:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d108      	bne.n	8004d4e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004d44:	2100      	movs	r1, #0
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fea2 	bl	8005a90 <HAL_PCDEx_LPM_Callback>
 8004d4c:	e002      	b.n	8004d54 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f00b f9f8 	bl	8010144 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695a      	ldr	r2, [r3, #20]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f004 fd73 	bl	8009854 <USB_ReadInterrupts>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d78:	d112      	bne.n	8004da0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d102      	bne.n	8004d90 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f00b f9b4 	bl	80100f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695a      	ldr	r2, [r3, #20]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004d9e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f004 fd55 	bl	8009854 <USB_ReadInterrupts>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db4:	f040 80b7 	bne.w	8004f26 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	69fa      	ldr	r2, [r7, #28]
 8004dc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2110      	movs	r1, #16
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f003 fe28 	bl	8008a28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dd8:	2300      	movs	r3, #0
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ddc:	e046      	b.n	8004e6c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dea:	461a      	mov	r2, r3
 8004dec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004df0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e02:	0151      	lsls	r1, r2, #5
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	440a      	add	r2, r1
 8004e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e24:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e36:	0151      	lsls	r1, r2, #5
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	440a      	add	r2, r1
 8004e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e56:	0151      	lsls	r1, r2, #5
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	440a      	add	r2, r1
 8004e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e64:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e68:	3301      	adds	r3, #1
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	791b      	ldrb	r3, [r3, #4]
 8004e70:	461a      	mov	r2, r3
 8004e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d3b2      	bcc.n	8004dde <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e86:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004e8a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	7bdb      	ldrb	r3, [r3, #15]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d016      	beq.n	8004ec2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ea4:	f043 030b 	orr.w	r3, r3, #11
 8004ea8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eba:	f043 030b 	orr.w	r3, r3, #11
 8004ebe:	6453      	str	r3, [r2, #68]	; 0x44
 8004ec0:	e015      	b.n	8004eee <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ed0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ed4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004ed8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee8:	f043 030b 	orr.w	r3, r3, #11
 8004eec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004efc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f00:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f10:	461a      	mov	r2, r3
 8004f12:	f004 fd63 	bl	80099dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695a      	ldr	r2, [r3, #20]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f004 fc92 	bl	8009854 <USB_ReadInterrupts>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3a:	d123      	bne.n	8004f84 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f004 fd28 	bl	8009996 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f003 fde5 	bl	8008b1a <USB_GetDevSpeed>
 8004f50:	4603      	mov	r3, r0
 8004f52:	461a      	mov	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681c      	ldr	r4, [r3, #0]
 8004f5c:	f001 f9c8 	bl	80062f0 <HAL_RCC_GetHCLKFreq>
 8004f60:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f66:	461a      	mov	r2, r3
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f003 fae9 	bl	8008540 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f00b f8a3 	bl	80100ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004f82:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f004 fc63 	bl	8009854 <USB_ReadInterrupts>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d10a      	bne.n	8004fae <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f00b f880 	bl	801009e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f002 0208 	and.w	r2, r2, #8
 8004fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f004 fc4e 	bl	8009854 <USB_ReadInterrupts>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbe:	2b80      	cmp	r3, #128	; 0x80
 8004fc0:	d123      	bne.n	800500a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fce:	2301      	movs	r3, #1
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd2:	e014      	b.n	8004ffe <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd8:	4613      	mov	r3, r2
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d105      	bne.n	8004ff8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fb08 	bl	8005608 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	791b      	ldrb	r3, [r3, #4]
 8005002:	461a      	mov	r2, r3
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	4293      	cmp	r3, r2
 8005008:	d3e4      	bcc.n	8004fd4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f004 fc20 	bl	8009854 <USB_ReadInterrupts>
 8005014:	4603      	mov	r3, r0
 8005016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800501a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800501e:	d13c      	bne.n	800509a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005020:	2301      	movs	r3, #1
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
 8005024:	e02b      	b.n	800507e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503a:	4613      	mov	r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	3318      	adds	r3, #24
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d115      	bne.n	8005078 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800504c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800504e:	2b00      	cmp	r3, #0
 8005050:	da12      	bge.n	8005078 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005056:	4613      	mov	r3, r2
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	3317      	adds	r3, #23
 8005062:	2201      	movs	r2, #1
 8005064:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	b2db      	uxtb	r3, r3
 800506a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800506e:	b2db      	uxtb	r3, r3
 8005070:	4619      	mov	r1, r3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fac8 	bl	8005608 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	3301      	adds	r3, #1
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	791b      	ldrb	r3, [r3, #4]
 8005082:	461a      	mov	r2, r3
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	4293      	cmp	r3, r2
 8005088:	d3cd      	bcc.n	8005026 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695a      	ldr	r2, [r3, #20]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005098:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f004 fbd8 	bl	8009854 <USB_ReadInterrupts>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050ae:	d156      	bne.n	800515e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050b0:	2301      	movs	r3, #1
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
 80050b4:	e045      	b.n	8005142 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ca:	4613      	mov	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d12e      	bne.n	800513c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80050de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	da2b      	bge.n	800513c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80050f0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d121      	bne.n	800513c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fc:	4613      	mov	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	f203 2357 	addw	r3, r3, #599	; 0x257
 800510a:	2201      	movs	r2, #1
 800510c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10a      	bne.n	800513c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005134:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005138:	6053      	str	r3, [r2, #4]
            break;
 800513a:	e008      	b.n	800514e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	3301      	adds	r3, #1
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	791b      	ldrb	r3, [r3, #4]
 8005146:	461a      	mov	r2, r3
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	4293      	cmp	r3, r2
 800514c:	d3b3      	bcc.n	80050b6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800515c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f004 fb76 	bl	8009854 <USB_ReadInterrupts>
 8005168:	4603      	mov	r3, r0
 800516a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005172:	d10a      	bne.n	800518a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f00b f817 	bl	80101a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695a      	ldr	r2, [r3, #20]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005188:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f004 fb60 	bl	8009854 <USB_ReadInterrupts>
 8005194:	4603      	mov	r3, r0
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b04      	cmp	r3, #4
 800519c:	d115      	bne.n	80051ca <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f00b f807 	bl	80101c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6859      	ldr	r1, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
 80051c6:	e000      	b.n	80051ca <HAL_PCD_IRQHandler+0x93c>
      return;
 80051c8:	bf00      	nop
    }
  }
}
 80051ca:	3734      	adds	r7, #52	; 0x34
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd90      	pop	{r4, r7, pc}

080051d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_PCD_SetAddress+0x1a>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e012      	b.n	8005210 <HAL_PCD_SetAddress+0x40>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	78fa      	ldrb	r2, [r7, #3]
 80051f6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	78fa      	ldrb	r2, [r7, #3]
 80051fe:	4611      	mov	r1, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f004 fabf 	bl	8009784 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	4608      	mov	r0, r1
 8005222:	4611      	mov	r1, r2
 8005224:	461a      	mov	r2, r3
 8005226:	4603      	mov	r3, r0
 8005228:	70fb      	strb	r3, [r7, #3]
 800522a:	460b      	mov	r3, r1
 800522c:	803b      	strh	r3, [r7, #0]
 800522e:	4613      	mov	r3, r2
 8005230:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800523a:	2b00      	cmp	r3, #0
 800523c:	da0f      	bge.n	800525e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800523e:	78fb      	ldrb	r3, [r7, #3]
 8005240:	f003 020f 	and.w	r2, r3, #15
 8005244:	4613      	mov	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	3310      	adds	r3, #16
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	4413      	add	r3, r2
 8005252:	3304      	adds	r3, #4
 8005254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2201      	movs	r2, #1
 800525a:	705a      	strb	r2, [r3, #1]
 800525c:	e00f      	b.n	800527e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	f003 020f 	and.w	r2, r3, #15
 8005264:	4613      	mov	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	4413      	add	r3, r2
 8005274:	3304      	adds	r3, #4
 8005276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800527e:	78fb      	ldrb	r3, [r7, #3]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	b2da      	uxtb	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800528a:	883a      	ldrh	r2, [r7, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	78ba      	ldrb	r2, [r7, #2]
 8005294:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	785b      	ldrb	r3, [r3, #1]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d004      	beq.n	80052a8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80052a8:	78bb      	ldrb	r3, [r7, #2]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d102      	bne.n	80052b4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_PCD_EP_Open+0xaa>
 80052be:	2302      	movs	r3, #2
 80052c0:	e00e      	b.n	80052e0 <HAL_PCD_EP_Open+0xc8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68f9      	ldr	r1, [r7, #12]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f003 fc47 	bl	8008b64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80052de:	7afb      	ldrb	r3, [r7, #11]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80052f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	da0f      	bge.n	800531c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	f003 020f 	and.w	r2, r3, #15
 8005302:	4613      	mov	r3, r2
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	3310      	adds	r3, #16
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	4413      	add	r3, r2
 8005310:	3304      	adds	r3, #4
 8005312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	705a      	strb	r2, [r3, #1]
 800531a:	e00f      	b.n	800533c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	f003 020f 	and.w	r2, r3, #15
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	4413      	add	r3, r2
 8005332:	3304      	adds	r3, #4
 8005334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	b2da      	uxtb	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <HAL_PCD_EP_Close+0x6e>
 8005352:	2302      	movs	r3, #2
 8005354:	e00e      	b.n	8005374 <HAL_PCD_EP_Close+0x8c>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68f9      	ldr	r1, [r7, #12]
 8005364:	4618      	mov	r0, r3
 8005366:	f003 fc85 	bl	8008c74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	607a      	str	r2, [r7, #4]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	460b      	mov	r3, r1
 800538a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800538c:	7afb      	ldrb	r3, [r7, #11]
 800538e:	f003 020f 	and.w	r2, r3, #15
 8005392:	4613      	mov	r3, r2
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4413      	add	r3, r2
 80053a2:	3304      	adds	r3, #4
 80053a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2200      	movs	r2, #0
 80053b6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2200      	movs	r2, #0
 80053bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053be:	7afb      	ldrb	r3, [r7, #11]
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	799b      	ldrb	r3, [r3, #6]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d102      	bne.n	80053d8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	799b      	ldrb	r3, [r3, #6]
 80053e0:	461a      	mov	r2, r3
 80053e2:	6979      	ldr	r1, [r7, #20]
 80053e4:	f003 fd22 	bl	8008e2c <USB_EPStartXfer>

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	460b      	mov	r3, r1
 80053fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80053fe:	78fb      	ldrb	r3, [r7, #3]
 8005400:	f003 020f 	and.w	r2, r3, #15
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8005414:	681b      	ldr	r3, [r3, #0]
}
 8005416:	4618      	mov	r0, r3
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b086      	sub	sp, #24
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	460b      	mov	r3, r1
 8005430:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005432:	7afb      	ldrb	r3, [r7, #11]
 8005434:	f003 020f 	and.w	r2, r3, #15
 8005438:	4613      	mov	r3, r2
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	3310      	adds	r3, #16
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4413      	add	r3, r2
 8005446:	3304      	adds	r3, #4
 8005448:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2200      	movs	r2, #0
 800545a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2201      	movs	r2, #1
 8005460:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005462:	7afb      	ldrb	r3, [r7, #11]
 8005464:	f003 030f 	and.w	r3, r3, #15
 8005468:	b2da      	uxtb	r2, r3
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	799b      	ldrb	r3, [r3, #6]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d102      	bne.n	800547c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	799b      	ldrb	r3, [r3, #6]
 8005484:	461a      	mov	r2, r3
 8005486:	6979      	ldr	r1, [r7, #20]
 8005488:	f003 fcd0 	bl	8008e2c <USB_EPStartXfer>

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	460b      	mov	r3, r1
 80054a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80054a2:	78fb      	ldrb	r3, [r7, #3]
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	7912      	ldrb	r2, [r2, #4]
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d901      	bls.n	80054b4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e04f      	b.n	8005554 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	da0f      	bge.n	80054dc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	f003 020f 	and.w	r2, r3, #15
 80054c2:	4613      	mov	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	3310      	adds	r3, #16
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	4413      	add	r3, r2
 80054d0:	3304      	adds	r3, #4
 80054d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	705a      	strb	r2, [r3, #1]
 80054da:	e00d      	b.n	80054f8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	4613      	mov	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	4413      	add	r3, r2
 80054ee:	3304      	adds	r3, #4
 80054f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	f003 030f 	and.w	r3, r3, #15
 8005504:	b2da      	uxtb	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_PCD_EP_SetStall+0x82>
 8005514:	2302      	movs	r3, #2
 8005516:	e01d      	b.n	8005554 <HAL_PCD_EP_SetStall+0xbe>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68f9      	ldr	r1, [r7, #12]
 8005526:	4618      	mov	r0, r3
 8005528:	f004 f858 	bl	80095dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	7999      	ldrb	r1, [r3, #6]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005544:	461a      	mov	r2, r3
 8005546:	f004 fa49 	bl	80099dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	7912      	ldrb	r2, [r2, #4]
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e042      	b.n	8005600 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800557a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800557e:	2b00      	cmp	r3, #0
 8005580:	da0f      	bge.n	80055a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	f003 020f 	and.w	r2, r3, #15
 8005588:	4613      	mov	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	3310      	adds	r3, #16
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	4413      	add	r3, r2
 8005596:	3304      	adds	r3, #4
 8005598:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	705a      	strb	r2, [r3, #1]
 80055a0:	e00f      	b.n	80055c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055a2:	78fb      	ldrb	r3, [r7, #3]
 80055a4:	f003 020f 	and.w	r2, r3, #15
 80055a8:	4613      	mov	r3, r2
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	4413      	add	r3, r2
 80055b8:	3304      	adds	r3, #4
 80055ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_PCD_EP_ClrStall+0x86>
 80055de:	2302      	movs	r3, #2
 80055e0:	e00e      	b.n	8005600 <HAL_PCD_EP_ClrStall+0xa4>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68f9      	ldr	r1, [r7, #12]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f004 f861 	bl	80096b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005618:	2b00      	cmp	r3, #0
 800561a:	da0c      	bge.n	8005636 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	f003 020f 	and.w	r2, r3, #15
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	3310      	adds	r3, #16
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	4413      	add	r3, r2
 8005630:	3304      	adds	r3, #4
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	e00c      	b.n	8005650 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	f003 020f 	and.w	r2, r3, #15
 800563c:	4613      	mov	r3, r2
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	4413      	add	r3, r2
 800564c:	3304      	adds	r3, #4
 800564e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68f9      	ldr	r1, [r7, #12]
 8005656:	4618      	mov	r0, r3
 8005658:	f003 fe80 	bl	800935c <USB_EPStopXfer>
 800565c:	4603      	mov	r3, r0
 800565e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005660:	7afb      	ldrb	r3, [r7, #11]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b08a      	sub	sp, #40	; 0x28
 800566e:	af02      	add	r7, sp, #8
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	3310      	adds	r3, #16
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	4413      	add	r3, r2
 800568e:	3304      	adds	r3, #4
 8005690:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	695a      	ldr	r2, [r3, #20]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	429a      	cmp	r2, r3
 800569c:	d901      	bls.n	80056a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e06b      	b.n	800577a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d902      	bls.n	80056be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	3303      	adds	r3, #3
 80056c2:	089b      	lsrs	r3, r3, #2
 80056c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056c6:	e02a      	b.n	800571e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	691a      	ldr	r2, [r3, #16]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d902      	bls.n	80056e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	3303      	adds	r3, #3
 80056e8:	089b      	lsrs	r3, r3, #2
 80056ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	68d9      	ldr	r1, [r3, #12]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	4603      	mov	r3, r0
 8005700:	6978      	ldr	r0, [r7, #20]
 8005702:	f003 fed5 	bl	80094b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	441a      	add	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	695a      	ldr	r2, [r3, #20]
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	441a      	add	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	429a      	cmp	r2, r3
 8005732:	d809      	bhi.n	8005748 <PCD_WriteEmptyTxFifo+0xde>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	695a      	ldr	r2, [r3, #20]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800573c:	429a      	cmp	r2, r3
 800573e:	d203      	bcs.n	8005748 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1bf      	bne.n	80056c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	429a      	cmp	r2, r3
 8005752:	d811      	bhi.n	8005778 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	2201      	movs	r2, #1
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	43db      	mvns	r3, r3
 800576e:	6939      	ldr	r1, [r7, #16]
 8005770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005774:	4013      	ands	r3, r2
 8005776:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3720      	adds	r7, #32
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	333c      	adds	r3, #60	; 0x3c
 800579c:	3304      	adds	r3, #4
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	799b      	ldrb	r3, [r3, #6]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d17b      	bne.n	80058b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d015      	beq.n	80057f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	4a61      	ldr	r2, [pc, #388]	; (800594c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	f240 80b9 	bls.w	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80b3 	beq.w	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e6:	461a      	mov	r2, r3
 80057e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ec:	6093      	str	r3, [r2, #8]
 80057ee:	e0a7      	b.n	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d009      	beq.n	800580e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005806:	461a      	mov	r2, r3
 8005808:	2320      	movs	r3, #32
 800580a:	6093      	str	r3, [r2, #8]
 800580c:	e098      	b.n	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005814:	2b00      	cmp	r3, #0
 8005816:	f040 8093 	bne.w	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	4a4b      	ldr	r2, [pc, #300]	; (800594c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d90f      	bls.n	8005842 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005838:	461a      	mov	r2, r3
 800583a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583e:	6093      	str	r3, [r2, #8]
 8005840:	e07e      	b.n	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	4613      	mov	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	4413      	add	r3, r2
 8005854:	3304      	adds	r3, #4
 8005856:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	0159      	lsls	r1, r3, #5
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	440b      	add	r3, r1
 8005864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800586e:	1ad2      	subs	r2, r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d114      	bne.n	80058a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d109      	bne.n	8005896 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800588c:	461a      	mov	r2, r3
 800588e:	2101      	movs	r1, #1
 8005890:	f004 f8a4 	bl	80099dc <USB_EP0_OutStart>
 8005894:	e006      	b.n	80058a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	441a      	add	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	4619      	mov	r1, r3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f00a fbc2 	bl	8010034 <HAL_PCD_DataOutStageCallback>
 80058b0:	e046      	b.n	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	4a26      	ldr	r2, [pc, #152]	; (8005950 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d124      	bne.n	8005904 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d0:	461a      	mov	r2, r3
 80058d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058d6:	6093      	str	r3, [r2, #8]
 80058d8:	e032      	b.n	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f003 0320 	and.w	r3, r3, #32
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f0:	461a      	mov	r2, r3
 80058f2:	2320      	movs	r3, #32
 80058f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f00a fb99 	bl	8010034 <HAL_PCD_DataOutStageCallback>
 8005902:	e01d      	b.n	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d114      	bne.n	8005934 <PCD_EP_OutXfrComplete_int+0x1b0>
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	4613      	mov	r3, r2
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d108      	bne.n	8005934 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800592c:	461a      	mov	r2, r3
 800592e:	2100      	movs	r1, #0
 8005930:	f004 f854 	bl	80099dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f00a fb7a 	bl	8010034 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3720      	adds	r7, #32
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	4f54300a 	.word	0x4f54300a
 8005950:	4f54310a 	.word	0x4f54310a

08005954 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	333c      	adds	r3, #60	; 0x3c
 800596c:	3304      	adds	r3, #4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4a15      	ldr	r2, [pc, #84]	; (80059dc <PCD_EP_OutSetupPacket_int+0x88>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d90e      	bls.n	80059a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005990:	2b00      	cmp	r3, #0
 8005992:	d009      	beq.n	80059a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a0:	461a      	mov	r2, r3
 80059a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f00a fb31 	bl	8010010 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4a0a      	ldr	r2, [pc, #40]	; (80059dc <PCD_EP_OutSetupPacket_int+0x88>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d90c      	bls.n	80059d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	799b      	ldrb	r3, [r3, #6]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d108      	bne.n	80059d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80059c8:	461a      	mov	r2, r3
 80059ca:	2101      	movs	r1, #1
 80059cc:	f004 f806 	bl	80099dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	4f54300a 	.word	0x4f54300a

080059e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
 80059ec:	4613      	mov	r3, r2
 80059ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d107      	bne.n	8005a0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80059fe:	883b      	ldrh	r3, [r7, #0]
 8005a00:	0419      	lsls	r1, r3, #16
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a0c:	e028      	b.n	8005a60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	4413      	add	r3, r2
 8005a1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73fb      	strb	r3, [r7, #15]
 8005a20:	e00d      	b.n	8005a3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
 8005a28:	3340      	adds	r3, #64	; 0x40
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	0c1b      	lsrs	r3, r3, #16
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	4413      	add	r3, r2
 8005a36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	73fb      	strb	r3, [r7, #15]
 8005a3e:	7bfa      	ldrb	r2, [r7, #15]
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d3ec      	bcc.n	8005a22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005a48:	883b      	ldrh	r3, [r7, #0]
 8005a4a:	0418      	lsls	r0, r3, #16
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6819      	ldr	r1, [r3, #0]
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	4302      	orrs	r2, r0
 8005a58:	3340      	adds	r3, #64	; 0x40
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	440b      	add	r3, r1
 8005a5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	460b      	mov	r3, r1
 8005a78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	887a      	ldrh	r2, [r7, #2]
 8005a80:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e267      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d075      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ac6:	4b88      	ldr	r3, [pc, #544]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 030c 	and.w	r3, r3, #12
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d00c      	beq.n	8005aec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ad2:	4b85      	ldr	r3, [pc, #532]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	d112      	bne.n	8005b04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ade:	4b82      	ldr	r3, [pc, #520]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aea:	d10b      	bne.n	8005b04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aec:	4b7e      	ldr	r3, [pc, #504]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d05b      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x108>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d157      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e242      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b0c:	d106      	bne.n	8005b1c <HAL_RCC_OscConfig+0x74>
 8005b0e:	4b76      	ldr	r3, [pc, #472]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a75      	ldr	r2, [pc, #468]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	e01d      	b.n	8005b58 <HAL_RCC_OscConfig+0xb0>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b24:	d10c      	bne.n	8005b40 <HAL_RCC_OscConfig+0x98>
 8005b26:	4b70      	ldr	r3, [pc, #448]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a6f      	ldr	r2, [pc, #444]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b30:	6013      	str	r3, [r2, #0]
 8005b32:	4b6d      	ldr	r3, [pc, #436]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a6c      	ldr	r2, [pc, #432]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	e00b      	b.n	8005b58 <HAL_RCC_OscConfig+0xb0>
 8005b40:	4b69      	ldr	r3, [pc, #420]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a68      	ldr	r2, [pc, #416]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	4b66      	ldr	r3, [pc, #408]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a65      	ldr	r2, [pc, #404]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d013      	beq.n	8005b88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b60:	f7fd fea2 	bl	80038a8 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b68:	f7fd fe9e 	bl	80038a8 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b64      	cmp	r3, #100	; 0x64
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e207      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7a:	4b5b      	ldr	r3, [pc, #364]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0xc0>
 8005b86:	e014      	b.n	8005bb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b88:	f7fd fe8e 	bl	80038a8 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b90:	f7fd fe8a 	bl	80038a8 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b64      	cmp	r3, #100	; 0x64
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e1f3      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ba2:	4b51      	ldr	r3, [pc, #324]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0xe8>
 8005bae:	e000      	b.n	8005bb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d063      	beq.n	8005c86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bbe:	4b4a      	ldr	r3, [pc, #296]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 030c 	and.w	r3, r3, #12
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00b      	beq.n	8005be2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bca:	4b47      	ldr	r3, [pc, #284]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d11c      	bne.n	8005c10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bd6:	4b44      	ldr	r3, [pc, #272]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d116      	bne.n	8005c10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005be2:	4b41      	ldr	r3, [pc, #260]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d005      	beq.n	8005bfa <HAL_RCC_OscConfig+0x152>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d001      	beq.n	8005bfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e1c7      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bfa:	4b3b      	ldr	r3, [pc, #236]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	4937      	ldr	r1, [pc, #220]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c0e:	e03a      	b.n	8005c86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d020      	beq.n	8005c5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c18:	4b34      	ldr	r3, [pc, #208]	; (8005cec <HAL_RCC_OscConfig+0x244>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fd fe43 	bl	80038a8 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c26:	f7fd fe3f 	bl	80038a8 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e1a8      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c38:	4b2b      	ldr	r3, [pc, #172]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0f0      	beq.n	8005c26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c44:	4b28      	ldr	r3, [pc, #160]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	4925      	ldr	r1, [pc, #148]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	600b      	str	r3, [r1, #0]
 8005c58:	e015      	b.n	8005c86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c5a:	4b24      	ldr	r3, [pc, #144]	; (8005cec <HAL_RCC_OscConfig+0x244>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c60:	f7fd fe22 	bl	80038a8 <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c68:	f7fd fe1e 	bl	80038a8 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e187      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c7a:	4b1b      	ldr	r3, [pc, #108]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1f0      	bne.n	8005c68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d036      	beq.n	8005d00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d016      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c9a:	4b15      	ldr	r3, [pc, #84]	; (8005cf0 <HAL_RCC_OscConfig+0x248>)
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca0:	f7fd fe02 	bl	80038a8 <HAL_GetTick>
 8005ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ca8:	f7fd fdfe 	bl	80038a8 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e167      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cba:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f0      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x200>
 8005cc6:	e01b      	b.n	8005d00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cc8:	4b09      	ldr	r3, [pc, #36]	; (8005cf0 <HAL_RCC_OscConfig+0x248>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cce:	f7fd fdeb 	bl	80038a8 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd4:	e00e      	b.n	8005cf4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cd6:	f7fd fde7 	bl	80038a8 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d907      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e150      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	42470000 	.word	0x42470000
 8005cf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf4:	4b88      	ldr	r3, [pc, #544]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1ea      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8097 	beq.w	8005e3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d12:	4b81      	ldr	r3, [pc, #516]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10f      	bne.n	8005d3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60bb      	str	r3, [r7, #8]
 8005d22:	4b7d      	ldr	r3, [pc, #500]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	4a7c      	ldr	r2, [pc, #496]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d2e:	4b7a      	ldr	r3, [pc, #488]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d36:	60bb      	str	r3, [r7, #8]
 8005d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3e:	4b77      	ldr	r3, [pc, #476]	; (8005f1c <HAL_RCC_OscConfig+0x474>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d118      	bne.n	8005d7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d4a:	4b74      	ldr	r3, [pc, #464]	; (8005f1c <HAL_RCC_OscConfig+0x474>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a73      	ldr	r2, [pc, #460]	; (8005f1c <HAL_RCC_OscConfig+0x474>)
 8005d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d56:	f7fd fda7 	bl	80038a8 <HAL_GetTick>
 8005d5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d5c:	e008      	b.n	8005d70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d5e:	f7fd fda3 	bl	80038a8 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e10c      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d70:	4b6a      	ldr	r3, [pc, #424]	; (8005f1c <HAL_RCC_OscConfig+0x474>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0f0      	beq.n	8005d5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d106      	bne.n	8005d92 <HAL_RCC_OscConfig+0x2ea>
 8005d84:	4b64      	ldr	r3, [pc, #400]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d88:	4a63      	ldr	r2, [pc, #396]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d90:	e01c      	b.n	8005dcc <HAL_RCC_OscConfig+0x324>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2b05      	cmp	r3, #5
 8005d98:	d10c      	bne.n	8005db4 <HAL_RCC_OscConfig+0x30c>
 8005d9a:	4b5f      	ldr	r3, [pc, #380]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9e:	4a5e      	ldr	r2, [pc, #376]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005da0:	f043 0304 	orr.w	r3, r3, #4
 8005da4:	6713      	str	r3, [r2, #112]	; 0x70
 8005da6:	4b5c      	ldr	r3, [pc, #368]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005daa:	4a5b      	ldr	r2, [pc, #364]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005dac:	f043 0301 	orr.w	r3, r3, #1
 8005db0:	6713      	str	r3, [r2, #112]	; 0x70
 8005db2:	e00b      	b.n	8005dcc <HAL_RCC_OscConfig+0x324>
 8005db4:	4b58      	ldr	r3, [pc, #352]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db8:	4a57      	ldr	r2, [pc, #348]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005dba:	f023 0301 	bic.w	r3, r3, #1
 8005dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005dc0:	4b55      	ldr	r3, [pc, #340]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc4:	4a54      	ldr	r2, [pc, #336]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005dc6:	f023 0304 	bic.w	r3, r3, #4
 8005dca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d015      	beq.n	8005e00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd4:	f7fd fd68 	bl	80038a8 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dda:	e00a      	b.n	8005df2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ddc:	f7fd fd64 	bl	80038a8 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e0cb      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df2:	4b49      	ldr	r3, [pc, #292]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0ee      	beq.n	8005ddc <HAL_RCC_OscConfig+0x334>
 8005dfe:	e014      	b.n	8005e2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e00:	f7fd fd52 	bl	80038a8 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e06:	e00a      	b.n	8005e1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e08:	f7fd fd4e 	bl	80038a8 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e0b5      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e1e:	4b3e      	ldr	r3, [pc, #248]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1ee      	bne.n	8005e08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d105      	bne.n	8005e3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e30:	4b39      	ldr	r3, [pc, #228]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	4a38      	ldr	r2, [pc, #224]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 80a1 	beq.w	8005f88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e46:	4b34      	ldr	r3, [pc, #208]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d05c      	beq.n	8005f0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d141      	bne.n	8005ede <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e5a:	4b31      	ldr	r3, [pc, #196]	; (8005f20 <HAL_RCC_OscConfig+0x478>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e60:	f7fd fd22 	bl	80038a8 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e68:	f7fd fd1e 	bl	80038a8 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e087      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7a:	4b27      	ldr	r3, [pc, #156]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1f0      	bne.n	8005e68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69da      	ldr	r2, [r3, #28]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	019b      	lsls	r3, r3, #6
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9c:	085b      	lsrs	r3, r3, #1
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	041b      	lsls	r3, r3, #16
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	061b      	lsls	r3, r3, #24
 8005eaa:	491b      	ldr	r1, [pc, #108]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eb0:	4b1b      	ldr	r3, [pc, #108]	; (8005f20 <HAL_RCC_OscConfig+0x478>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb6:	f7fd fcf7 	bl	80038a8 <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ebe:	f7fd fcf3 	bl	80038a8 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e05c      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ed0:	4b11      	ldr	r3, [pc, #68]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0f0      	beq.n	8005ebe <HAL_RCC_OscConfig+0x416>
 8005edc:	e054      	b.n	8005f88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ede:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <HAL_RCC_OscConfig+0x478>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee4:	f7fd fce0 	bl	80038a8 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eec:	f7fd fcdc 	bl	80038a8 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e045      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005efe:	4b06      	ldr	r3, [pc, #24]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f0      	bne.n	8005eec <HAL_RCC_OscConfig+0x444>
 8005f0a:	e03d      	b.n	8005f88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d107      	bne.n	8005f24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e038      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	40007000 	.word	0x40007000
 8005f20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f24:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <HAL_RCC_OscConfig+0x4ec>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d028      	beq.n	8005f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d121      	bne.n	8005f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d11a      	bne.n	8005f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f54:	4013      	ands	r3, r2
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d111      	bne.n	8005f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	085b      	lsrs	r3, r3, #1
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d107      	bne.n	8005f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d001      	beq.n	8005f88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	40023800 	.word	0x40023800

08005f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0cc      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fac:	4b68      	ldr	r3, [pc, #416]	; (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d90c      	bls.n	8005fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fba:	4b65      	ldr	r3, [pc, #404]	; (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc2:	4b63      	ldr	r3, [pc, #396]	; (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d001      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0b8      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d020      	beq.n	8006022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fec:	4b59      	ldr	r3, [pc, #356]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	4a58      	ldr	r2, [pc, #352]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ff6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006004:	4b53      	ldr	r3, [pc, #332]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	4a52      	ldr	r2, [pc, #328]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 800600a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800600e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006010:	4b50      	ldr	r3, [pc, #320]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	494d      	ldr	r1, [pc, #308]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	4313      	orrs	r3, r2
 8006020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d044      	beq.n	80060b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d107      	bne.n	8006046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006036:	4b47      	ldr	r3, [pc, #284]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d119      	bne.n	8006076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e07f      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d003      	beq.n	8006056 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006052:	2b03      	cmp	r3, #3
 8006054:	d107      	bne.n	8006066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006056:	4b3f      	ldr	r3, [pc, #252]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d109      	bne.n	8006076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e06f      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006066:	4b3b      	ldr	r3, [pc, #236]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e067      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006076:	4b37      	ldr	r3, [pc, #220]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f023 0203 	bic.w	r2, r3, #3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	4934      	ldr	r1, [pc, #208]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006084:	4313      	orrs	r3, r2
 8006086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006088:	f7fd fc0e 	bl	80038a8 <HAL_GetTick>
 800608c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800608e:	e00a      	b.n	80060a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006090:	f7fd fc0a 	bl	80038a8 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	f241 3288 	movw	r2, #5000	; 0x1388
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e04f      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a6:	4b2b      	ldr	r3, [pc, #172]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 020c 	and.w	r2, r3, #12
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d1eb      	bne.n	8006090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060b8:	4b25      	ldr	r3, [pc, #148]	; (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d20c      	bcs.n	80060e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c6:	4b22      	ldr	r3, [pc, #136]	; (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ce:	4b20      	ldr	r3, [pc, #128]	; (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d001      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e032      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ec:	4b19      	ldr	r3, [pc, #100]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4916      	ldr	r1, [pc, #88]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	490e      	ldr	r1, [pc, #56]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 800611a:	4313      	orrs	r3, r2
 800611c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800611e:	f000 f821 	bl	8006164 <HAL_RCC_GetSysClockFreq>
 8006122:	4602      	mov	r2, r0
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	490a      	ldr	r1, [pc, #40]	; (8006158 <HAL_RCC_ClockConfig+0x1c0>)
 8006130:	5ccb      	ldrb	r3, [r1, r3]
 8006132:	fa22 f303 	lsr.w	r3, r2, r3
 8006136:	4a09      	ldr	r2, [pc, #36]	; (800615c <HAL_RCC_ClockConfig+0x1c4>)
 8006138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4618      	mov	r0, r3
 8006140:	f7fd fb6e 	bl	8003820 <HAL_InitTick>

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40023c00 	.word	0x40023c00
 8006154:	40023800 	.word	0x40023800
 8006158:	08013d28 	.word	0x08013d28
 800615c:	20000000 	.word	0x20000000
 8006160:	20000014 	.word	0x20000014

08006164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006168:	b090      	sub	sp, #64	; 0x40
 800616a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	637b      	str	r3, [r7, #52]	; 0x34
 8006170:	2300      	movs	r3, #0
 8006172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006174:	2300      	movs	r3, #0
 8006176:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800617c:	4b59      	ldr	r3, [pc, #356]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f003 030c 	and.w	r3, r3, #12
 8006184:	2b08      	cmp	r3, #8
 8006186:	d00d      	beq.n	80061a4 <HAL_RCC_GetSysClockFreq+0x40>
 8006188:	2b08      	cmp	r3, #8
 800618a:	f200 80a1 	bhi.w	80062d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <HAL_RCC_GetSysClockFreq+0x34>
 8006192:	2b04      	cmp	r3, #4
 8006194:	d003      	beq.n	800619e <HAL_RCC_GetSysClockFreq+0x3a>
 8006196:	e09b      	b.n	80062d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006198:	4b53      	ldr	r3, [pc, #332]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800619a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800619c:	e09b      	b.n	80062d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800619e:	4b53      	ldr	r3, [pc, #332]	; (80062ec <HAL_RCC_GetSysClockFreq+0x188>)
 80061a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061a2:	e098      	b.n	80062d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061a4:	4b4f      	ldr	r3, [pc, #316]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061ae:	4b4d      	ldr	r3, [pc, #308]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d028      	beq.n	800620c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061ba:	4b4a      	ldr	r3, [pc, #296]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	099b      	lsrs	r3, r3, #6
 80061c0:	2200      	movs	r2, #0
 80061c2:	623b      	str	r3, [r7, #32]
 80061c4:	627a      	str	r2, [r7, #36]	; 0x24
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80061cc:	2100      	movs	r1, #0
 80061ce:	4b47      	ldr	r3, [pc, #284]	; (80062ec <HAL_RCC_GetSysClockFreq+0x188>)
 80061d0:	fb03 f201 	mul.w	r2, r3, r1
 80061d4:	2300      	movs	r3, #0
 80061d6:	fb00 f303 	mul.w	r3, r0, r3
 80061da:	4413      	add	r3, r2
 80061dc:	4a43      	ldr	r2, [pc, #268]	; (80062ec <HAL_RCC_GetSysClockFreq+0x188>)
 80061de:	fba0 1202 	umull	r1, r2, r0, r2
 80061e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061e4:	460a      	mov	r2, r1
 80061e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80061e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061ea:	4413      	add	r3, r2
 80061ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f0:	2200      	movs	r2, #0
 80061f2:	61bb      	str	r3, [r7, #24]
 80061f4:	61fa      	str	r2, [r7, #28]
 80061f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80061fe:	f7fa fd2b 	bl	8000c58 <__aeabi_uldivmod>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4613      	mov	r3, r2
 8006208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800620a:	e053      	b.n	80062b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800620c:	4b35      	ldr	r3, [pc, #212]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	099b      	lsrs	r3, r3, #6
 8006212:	2200      	movs	r2, #0
 8006214:	613b      	str	r3, [r7, #16]
 8006216:	617a      	str	r2, [r7, #20]
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800621e:	f04f 0b00 	mov.w	fp, #0
 8006222:	4652      	mov	r2, sl
 8006224:	465b      	mov	r3, fp
 8006226:	f04f 0000 	mov.w	r0, #0
 800622a:	f04f 0100 	mov.w	r1, #0
 800622e:	0159      	lsls	r1, r3, #5
 8006230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006234:	0150      	lsls	r0, r2, #5
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	ebb2 080a 	subs.w	r8, r2, sl
 800623e:	eb63 090b 	sbc.w	r9, r3, fp
 8006242:	f04f 0200 	mov.w	r2, #0
 8006246:	f04f 0300 	mov.w	r3, #0
 800624a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800624e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006252:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006256:	ebb2 0408 	subs.w	r4, r2, r8
 800625a:	eb63 0509 	sbc.w	r5, r3, r9
 800625e:	f04f 0200 	mov.w	r2, #0
 8006262:	f04f 0300 	mov.w	r3, #0
 8006266:	00eb      	lsls	r3, r5, #3
 8006268:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800626c:	00e2      	lsls	r2, r4, #3
 800626e:	4614      	mov	r4, r2
 8006270:	461d      	mov	r5, r3
 8006272:	eb14 030a 	adds.w	r3, r4, sl
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	eb45 030b 	adc.w	r3, r5, fp
 800627c:	607b      	str	r3, [r7, #4]
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800628a:	4629      	mov	r1, r5
 800628c:	028b      	lsls	r3, r1, #10
 800628e:	4621      	mov	r1, r4
 8006290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006294:	4621      	mov	r1, r4
 8006296:	028a      	lsls	r2, r1, #10
 8006298:	4610      	mov	r0, r2
 800629a:	4619      	mov	r1, r3
 800629c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629e:	2200      	movs	r2, #0
 80062a0:	60bb      	str	r3, [r7, #8]
 80062a2:	60fa      	str	r2, [r7, #12]
 80062a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062a8:	f7fa fcd6 	bl	8000c58 <__aeabi_uldivmod>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4613      	mov	r3, r2
 80062b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062b4:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	0c1b      	lsrs	r3, r3, #16
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	3301      	adds	r3, #1
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80062c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80062ce:	e002      	b.n	80062d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062d0:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80062d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80062d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3740      	adds	r7, #64	; 0x40
 80062dc:	46bd      	mov	sp, r7
 80062de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062e2:	bf00      	nop
 80062e4:	40023800 	.word	0x40023800
 80062e8:	00f42400 	.word	0x00f42400
 80062ec:	017d7840 	.word	0x017d7840

080062f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062f4:	4b03      	ldr	r3, [pc, #12]	; (8006304 <HAL_RCC_GetHCLKFreq+0x14>)
 80062f6:	681b      	ldr	r3, [r3, #0]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000000 	.word	0x20000000

08006308 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e022      	b.n	8006360 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d105      	bne.n	8006332 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7fa ff9d 	bl	800126c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2203      	movs	r2, #3
 8006336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f814 	bl	8006368 <HAL_SD_InitCard>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e00a      	b.n	8006360 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006368:	b5b0      	push	{r4, r5, r7, lr}
 800636a:	b08e      	sub	sp, #56	; 0x38
 800636c:	af04      	add	r7, sp, #16
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006370:	2300      	movs	r3, #0
 8006372:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006374:	2300      	movs	r3, #0
 8006376:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006378:	2300      	movs	r3, #0
 800637a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800637c:	2300      	movs	r3, #0
 800637e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006380:	2300      	movs	r3, #0
 8006382:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006384:	2376      	movs	r3, #118	; 0x76
 8006386:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681d      	ldr	r5, [r3, #0]
 800638c:	466c      	mov	r4, sp
 800638e:	f107 0314 	add.w	r3, r7, #20
 8006392:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006396:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800639a:	f107 0308 	add.w	r3, r7, #8
 800639e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063a0:	4628      	mov	r0, r5
 80063a2:	f001 faf5 	bl	8007990 <SDIO_Init>
 80063a6:	4603      	mov	r3, r0
 80063a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80063ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e04f      	b.n	8006458 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80063b8:	4b29      	ldr	r3, [pc, #164]	; (8006460 <HAL_SD_InitCard+0xf8>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f001 fb2d 	bl	8007a22 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80063c8:	4b25      	ldr	r3, [pc, #148]	; (8006460 <HAL_SD_InitCard+0xf8>)
 80063ca:	2201      	movs	r2, #1
 80063cc:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80063ce:	2002      	movs	r0, #2
 80063d0:	f7fd fa76 	bl	80038c0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 f80f 	bl	80073f8 <SD_PowerON>
 80063da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00b      	beq.n	80063fa <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e02e      	b.n	8006458 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 ff2e 	bl	800725c <SD_InitCard>
 8006400:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00b      	beq.n	8006420 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e01b      	b.n	8006458 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006428:	4618      	mov	r0, r3
 800642a:	f001 fb8c 	bl	8007b46 <SDMMC_CmdBlockLength>
 800642e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00f      	beq.n	8006456 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a0a      	ldr	r2, [pc, #40]	; (8006464 <HAL_SD_InitCard+0xfc>)
 800643c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	431a      	orrs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3728      	adds	r7, #40	; 0x28
 800645c:	46bd      	mov	sp, r7
 800645e:	bdb0      	pop	{r4, r5, r7, pc}
 8006460:	422580a0 	.word	0x422580a0
 8006464:	004005ff 	.word	0x004005ff

08006468 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08c      	sub	sp, #48	; 0x30
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d107      	bne.n	8006490 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006484:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e0c0      	b.n	8006612 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b01      	cmp	r3, #1
 800649a:	f040 80b9 	bne.w	8006610 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80064a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	441a      	add	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d907      	bls.n	80064c2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e0a7      	b.n	8006612 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2203      	movs	r2, #3
 80064c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2200      	movs	r2, #0
 80064d0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	6812      	ldr	r2, [r2, #0]
 80064dc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80064e0:	f043 0302 	orr.w	r3, r3, #2
 80064e4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	4a4c      	ldr	r2, [pc, #304]	; (800661c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80064ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	4a4b      	ldr	r2, [pc, #300]	; (8006620 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80064f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	2200      	movs	r2, #0
 80064fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	2200      	movs	r2, #0
 8006504:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3380      	adds	r3, #128	; 0x80
 800652c:	4619      	mov	r1, r3
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	025b      	lsls	r3, r3, #9
 8006534:	089b      	lsrs	r3, r3, #2
 8006536:	f7fd fba7 	bl	8003c88 <HAL_DMA_Start_IT>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d017      	beq.n	8006570 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800654e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a33      	ldr	r2, [pc, #204]	; (8006624 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006556:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e050      	b.n	8006612 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006570:	4b2d      	ldr	r3, [pc, #180]	; (8006628 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657a:	2b01      	cmp	r3, #1
 800657c:	d002      	beq.n	8006584 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	025b      	lsls	r3, r3, #9
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006584:	f04f 33ff 	mov.w	r3, #4294967295
 8006588:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	025b      	lsls	r3, r3, #9
 800658e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006590:	2390      	movs	r3, #144	; 0x90
 8006592:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006594:	2302      	movs	r3, #2
 8006596:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006598:	2300      	movs	r3, #0
 800659a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800659c:	2301      	movs	r3, #1
 800659e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f107 0210 	add.w	r2, r7, #16
 80065a8:	4611      	mov	r1, r2
 80065aa:	4618      	mov	r0, r3
 80065ac:	f001 fa9f 	bl	8007aee <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d90a      	bls.n	80065cc <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2282      	movs	r2, #130	; 0x82
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 fb03 	bl	8007bce <SDMMC_CmdReadMultiBlock>
 80065c8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80065ca:	e009      	b.n	80065e0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2281      	movs	r2, #129	; 0x81
 80065d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065d8:	4618      	mov	r0, r3
 80065da:	f001 fad6 	bl	8007b8a <SDMMC_CmdReadSingleBlock>
 80065de:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d012      	beq.n	800660c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a0e      	ldr	r2, [pc, #56]	; (8006624 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80065ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f4:	431a      	orrs	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e002      	b.n	8006612 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	e000      	b.n	8006612 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006610:	2302      	movs	r3, #2
  }
}
 8006612:	4618      	mov	r0, r3
 8006614:	3730      	adds	r7, #48	; 0x30
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	0800706b 	.word	0x0800706b
 8006620:	080070dd 	.word	0x080070dd
 8006624:	004005ff 	.word	0x004005ff
 8006628:	4225858c 	.word	0x4225858c

0800662c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08c      	sub	sp, #48	; 0x30
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d107      	bne.n	8006654 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e0c5      	b.n	80067e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	f040 80be 	bne.w	80067de <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	441a      	add	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006672:	429a      	cmp	r2, r3
 8006674:	d907      	bls.n	8006686 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e0ac      	b.n	80067e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2203      	movs	r2, #3
 800668a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2200      	movs	r2, #0
 8006694:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	6812      	ldr	r2, [r2, #0]
 80066a0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80066a4:	f043 0302 	orr.w	r3, r3, #2
 80066a8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ae:	4a4e      	ldr	r2, [pc, #312]	; (80067e8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80066b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b6:	4a4d      	ldr	r2, [pc, #308]	; (80067ec <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80066b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066be:	2200      	movs	r2, #0
 80066c0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d002      	beq.n	80066d0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	025b      	lsls	r3, r3, #9
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d90a      	bls.n	80066ec <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	22a0      	movs	r2, #160	; 0xa0
 80066da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066e2:	4618      	mov	r0, r3
 80066e4:	f001 fab7 	bl	8007c56 <SDMMC_CmdWriteMultiBlock>
 80066e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80066ea:	e009      	b.n	8006700 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2290      	movs	r2, #144	; 0x90
 80066f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 fa8a 	bl	8007c12 <SDMMC_CmdWriteSingleBlock>
 80066fe:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d012      	beq.n	800672c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a39      	ldr	r2, [pc, #228]	; (80067f0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800670c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	431a      	orrs	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e059      	b.n	80067e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800672c:	4b31      	ldr	r3, [pc, #196]	; (80067f4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800672e:	2201      	movs	r2, #1
 8006730:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006736:	2240      	movs	r2, #64	; 0x40
 8006738:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3380      	adds	r3, #128	; 0x80
 8006762:	461a      	mov	r2, r3
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	025b      	lsls	r3, r3, #9
 8006768:	089b      	lsrs	r3, r3, #2
 800676a:	f7fd fa8d 	bl	8003c88 <HAL_DMA_Start_IT>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01c      	beq.n	80067ae <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	6812      	ldr	r2, [r2, #0]
 800677e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8006782:	f023 0302 	bic.w	r3, r3, #2
 8006786:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a18      	ldr	r2, [pc, #96]	; (80067f0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800678e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e018      	b.n	80067e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067ae:	f04f 33ff 	mov.w	r3, #4294967295
 80067b2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	025b      	lsls	r3, r3, #9
 80067b8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80067ba:	2390      	movs	r3, #144	; 0x90
 80067bc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80067be:	2300      	movs	r3, #0
 80067c0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80067c6:	2301      	movs	r3, #1
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f107 0210 	add.w	r2, r7, #16
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 f98a 	bl	8007aee <SDIO_ConfigData>

      return HAL_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	e000      	b.n	80067e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80067de:	2302      	movs	r3, #2
  }
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3730      	adds	r7, #48	; 0x30
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	08007041 	.word	0x08007041
 80067ec:	080070dd 	.word	0x080070dd
 80067f0:	004005ff 	.word	0x004005ff
 80067f4:	4225858c 	.word	0x4225858c

080067f8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006804:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d008      	beq.n	8006826 <HAL_SD_IRQHandler+0x2e>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f003 0308 	and.w	r3, r3, #8
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f001 f810 	bl	8007844 <SD_Read_IT>
 8006824:	e165      	b.n	8006af2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 808f 	beq.w	8006954 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800683e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	6812      	ldr	r2, [r2, #0]
 800684a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800684e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006852:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0201 	bic.w	r2, r2, #1
 8006862:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d039      	beq.n	80068e2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d104      	bne.n	8006882 <HAL_SD_IRQHandler+0x8a>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f003 0320 	and.w	r3, r3, #32
 800687e:	2b00      	cmp	r3, #0
 8006880:	d011      	beq.n	80068a6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4618      	mov	r0, r3
 8006888:	f001 fa08 	bl	8007c9c <SDMMC_CmdStopTransfer>
 800688c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d008      	beq.n	80068a6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f92f 	bl	8006b04 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80068ae:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <HAL_SD_IRQHandler+0xda>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7fc fda8 	bl	8003428 <HAL_SD_RxCpltCallback>
 80068d8:	e10b      	b.n	8006af2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fc fd94 	bl	8003408 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80068e0:	e107      	b.n	8006af2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 8102 	beq.w	8006af2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d011      	beq.n	800691c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f001 f9cd 	bl	8007c9c <SDMMC_CmdStopTransfer>
 8006902:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d008      	beq.n	800691c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f8f4 	bl	8006b04 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	f040 80e5 	bne.w	8006af2 <HAL_SD_IRQHandler+0x2fa>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	f040 80df 	bne.w	8006af2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0208 	bic.w	r2, r2, #8
 8006942:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7fc fd5b 	bl	8003408 <HAL_SD_TxCpltCallback>
}
 8006952:	e0ce      	b.n	8006af2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d008      	beq.n	8006974 <HAL_SD_IRQHandler+0x17c>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f003 0308 	and.w	r3, r3, #8
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 ffba 	bl	80078e6 <SD_Write_IT>
 8006972:	e0be      	b.n	8006af2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800697a:	f240 233a 	movw	r3, #570	; 0x23a
 800697e:	4013      	ands	r3, r2
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 80b6 	beq.w	8006af2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006998:	f043 0202 	orr.w	r2, r3, #2
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d005      	beq.n	80069ba <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	f043 0208 	orr.w	r2, r3, #8
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d005      	beq.n	80069d4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	f043 0220 	orr.w	r2, r3, #32
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069da:	f003 0310 	and.w	r3, r3, #16
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	f043 0210 	orr.w	r2, r3, #16
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d005      	beq.n	8006a08 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a00:	f043 0208 	orr.w	r2, r3, #8
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f240 723a 	movw	r2, #1850	; 0x73a
 8006a10:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6812      	ldr	r2, [r2, #0]
 8006a1c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006a20:	f023 0302 	bic.w	r3, r3, #2
 8006a24:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f001 f936 	bl	8007c9c <SDMMC_CmdStopTransfer>
 8006a30:	4602      	mov	r2, r0
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	431a      	orrs	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f003 0308 	and.w	r3, r3, #8
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f855 	bl	8006b04 <HAL_SD_ErrorCallback>
}
 8006a5a:	e04a      	b.n	8006af2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d045      	beq.n	8006af2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f003 0310 	and.w	r3, r3, #16
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d104      	bne.n	8006a7a <HAL_SD_IRQHandler+0x282>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d011      	beq.n	8006a9e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7e:	4a1f      	ldr	r2, [pc, #124]	; (8006afc <HAL_SD_IRQHandler+0x304>)
 8006a80:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fd f956 	bl	8003d38 <HAL_DMA_Abort_IT>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d02f      	beq.n	8006af2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fb72 	bl	8007180 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006a9c:	e029      	b.n	8006af2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d104      	bne.n	8006ab2 <HAL_SD_IRQHandler+0x2ba>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d011      	beq.n	8006ad6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	4a12      	ldr	r2, [pc, #72]	; (8006b00 <HAL_SD_IRQHandler+0x308>)
 8006ab8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fd f93a 	bl	8003d38 <HAL_DMA_Abort_IT>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d013      	beq.n	8006af2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fb8d 	bl	80071ee <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006ad4:	e00d      	b.n	8006af2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f814 	bl	8006b18 <HAL_SD_AbortCallback>
}
 8006af0:	e7ff      	b.n	8006af2 <HAL_SD_IRQHandler+0x2fa>
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	08007181 	.word	0x08007181
 8006b00:	080071ef 	.word	0x080071ef

08006b04 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b3a:	0f9b      	lsrs	r3, r3, #30
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b46:	0e9b      	lsrs	r3, r3, #26
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b58:	0e1b      	lsrs	r3, r3, #24
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	f003 0303 	and.w	r3, r3, #3
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b6a:	0c1b      	lsrs	r3, r3, #16
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b76:	0a1b      	lsrs	r3, r3, #8
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b8c:	0d1b      	lsrs	r3, r3, #20
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b98:	0c1b      	lsrs	r3, r3, #16
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	f003 030f 	and.w	r3, r3, #15
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006baa:	0bdb      	lsrs	r3, r3, #15
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bbc:	0b9b      	lsrs	r3, r3, #14
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bce:	0b5b      	lsrs	r3, r3, #13
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006be0:	0b1b      	lsrs	r3, r3, #12
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d163      	bne.n	8006cc4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c00:	009a      	lsls	r2, r3, #2
 8006c02:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006c06:	4013      	ands	r3, r2
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006c0c:	0f92      	lsrs	r2, r2, #30
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c18:	0edb      	lsrs	r3, r3, #27
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	f003 0307 	and.w	r3, r3, #7
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c2a:	0e1b      	lsrs	r3, r3, #24
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	f003 0307 	and.w	r3, r3, #7
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c3c:	0d5b      	lsrs	r3, r3, #21
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	f003 0307 	and.w	r3, r3, #7
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c4e:	0c9b      	lsrs	r3, r3, #18
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c60:	0bdb      	lsrs	r3, r3, #15
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	7e1b      	ldrb	r3, [r3, #24]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	3302      	adds	r3, #2
 8006c84:	2201      	movs	r2, #1
 8006c86:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006c8e:	fb03 f202 	mul.w	r2, r3, r2
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	7a1b      	ldrb	r3, [r3, #8]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f003 030f 	and.w	r3, r3, #15
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	409a      	lsls	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006cb0:	0a52      	lsrs	r2, r2, #9
 8006cb2:	fb03 f202 	mul.w	r2, r3, r2
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cc0:	661a      	str	r2, [r3, #96]	; 0x60
 8006cc2:	e031      	b.n	8006d28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d11d      	bne.n	8006d08 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cd0:	041b      	lsls	r3, r3, #16
 8006cd2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cda:	0c1b      	lsrs	r3, r3, #16
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	029a      	lsls	r2, r3, #10
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cfc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	661a      	str	r2, [r3, #96]	; 0x60
 8006d06:	e00f      	b.n	8006d28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a58      	ldr	r2, [pc, #352]	; (8006e70 <HAL_SD_GetCardCSD+0x344>)
 8006d0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e09d      	b.n	8006e64 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d2c:	0b9b      	lsrs	r3, r3, #14
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d3e:	09db      	lsrs	r3, r3, #7
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d60:	0fdb      	lsrs	r3, r3, #31
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6c:	0f5b      	lsrs	r3, r3, #29
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	f003 0303 	and.w	r3, r3, #3
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7e:	0e9b      	lsrs	r3, r3, #26
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	f003 0307 	and.w	r3, r3, #7
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d90:	0d9b      	lsrs	r3, r3, #22
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	f003 030f 	and.w	r3, r3, #15
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da2:	0d5b      	lsrs	r3, r3, #21
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dbe:	0c1b      	lsrs	r3, r3, #16
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd2:	0bdb      	lsrs	r3, r3, #15
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de6:	0b9b      	lsrs	r3, r3, #14
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfa:	0b5b      	lsrs	r3, r3, #13
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0e:	0b1b      	lsrs	r3, r3, #12
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e22:	0a9b      	lsrs	r3, r3, #10
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	f003 0303 	and.w	r3, r3, #3
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e36:	0a1b      	lsrs	r3, r3, #8
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	f003 0303 	and.w	r3, r3, #3
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	004005ff 	.word	0x004005ff

08006e74 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006ecc:	b5b0      	push	{r4, r5, r7, lr}
 8006ece:	b08e      	sub	sp, #56	; 0x38
 8006ed0:	af04      	add	r7, sp, #16
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2203      	movs	r2, #3
 8006ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d02e      	beq.n	8006f4a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef2:	d106      	bne.n	8006f02 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	639a      	str	r2, [r3, #56]	; 0x38
 8006f00:	e029      	b.n	8006f56 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f08:	d10a      	bne.n	8006f20 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fb2a 	bl	8007564 <SD_WideBus_Enable>
 8006f10:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	639a      	str	r2, [r3, #56]	; 0x38
 8006f1e:	e01a      	b.n	8006f56 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fb67 	bl	80075fa <SD_WideBus_Disable>
 8006f2c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	639a      	str	r2, [r3, #56]	; 0x38
 8006f3a:	e00c      	b.n	8006f56 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f40:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	639a      	str	r2, [r3, #56]	; 0x38
 8006f48:	e005      	b.n	8006f56 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a26      	ldr	r2, [pc, #152]	; (8006ffc <HAL_SD_ConfigWideBusOperation+0x130>)
 8006f64:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f74:	e01f      	b.n	8006fb6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681d      	ldr	r5, [r3, #0]
 8006f9c:	466c      	mov	r4, sp
 8006f9e:	f107 0314 	add.w	r3, r7, #20
 8006fa2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006fa6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006faa:	f107 0308 	add.w	r3, r7, #8
 8006fae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	f000 fced 	bl	8007990 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 fdc1 	bl	8007b46 <SDMMC_CmdBlockLength>
 8006fc4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00c      	beq.n	8006fe6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a0a      	ldr	r2, [pc, #40]	; (8006ffc <HAL_SD_ConfigWideBusOperation+0x130>)
 8006fd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3728      	adds	r7, #40	; 0x28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	004005ff 	.word	0x004005ff

08007000 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800700c:	f107 030c 	add.w	r3, r7, #12
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa7e 	bl	8007514 <SD_SendStatus>
 8007018:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d005      	beq.n	800702c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	431a      	orrs	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	0a5b      	lsrs	r3, r3, #9
 8007030:	f003 030f 	and.w	r3, r3, #15
 8007034:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007036:	693b      	ldr	r3, [r7, #16]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800705c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800705e:	bf00      	nop
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707c:	2b82      	cmp	r3, #130	; 0x82
 800707e:	d111      	bne.n	80070a4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fe09 	bl	8007c9c <SDMMC_CmdStopTransfer>
 800708a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d008      	beq.n	80070a4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	431a      	orrs	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7ff fd30 	bl	8006b04 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0208 	bic.w	r2, r2, #8
 80070b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f240 523a 	movw	r2, #1338	; 0x53a
 80070bc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7fc f9ab 	bl	8003428 <HAL_SD_RxCpltCallback>
#endif
}
 80070d2:	bf00      	nop
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fc ffd0 	bl	8004090 <HAL_DMA_GetError>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d03e      	beq.n	8007174 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007104:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d002      	beq.n	8007112 <SD_DMAError+0x36>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d12d      	bne.n	800716e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a19      	ldr	r2, [pc, #100]	; (800717c <SD_DMAError+0xa0>)
 8007118:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007128:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007136:	6978      	ldr	r0, [r7, #20]
 8007138:	f7ff ff62 	bl	8007000 <HAL_SD_GetCardState>
 800713c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b06      	cmp	r3, #6
 8007142:	d002      	beq.n	800714a <SD_DMAError+0x6e>
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2b05      	cmp	r3, #5
 8007148:	d10a      	bne.n	8007160 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4618      	mov	r0, r3
 8007150:	f000 fda4 	bl	8007c9c <SDMMC_CmdStopTransfer>
 8007154:	4602      	mov	r2, r0
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715a:	431a      	orrs	r2, r3
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2200      	movs	r2, #0
 800716c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800716e:	6978      	ldr	r0, [r7, #20]
 8007170:	f7ff fcc8 	bl	8006b04 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007174:	bf00      	nop
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	004005ff 	.word	0x004005ff

08007180 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f240 523a 	movw	r2, #1338	; 0x53a
 8007196:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f7ff ff31 	bl	8007000 <HAL_SD_GetCardState>
 800719e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2b06      	cmp	r3, #6
 80071b2:	d002      	beq.n	80071ba <SD_DMATxAbort+0x3a>
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2b05      	cmp	r3, #5
 80071b8:	d10a      	bne.n	80071d0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 fd6c 	bl	8007c9c <SDMMC_CmdStopTransfer>
 80071c4:	4602      	mov	r2, r0
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	431a      	orrs	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d103      	bne.n	80071e0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f7ff fc9d 	bl	8006b18 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80071de:	e002      	b.n	80071e6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f7ff fc8f 	bl	8006b04 <HAL_SD_ErrorCallback>
}
 80071e6:	bf00      	nop
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f240 523a 	movw	r2, #1338	; 0x53a
 8007204:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f7ff fefa 	bl	8007000 <HAL_SD_GetCardState>
 800720c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b06      	cmp	r3, #6
 8007220:	d002      	beq.n	8007228 <SD_DMARxAbort+0x3a>
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b05      	cmp	r3, #5
 8007226:	d10a      	bne.n	800723e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fd35 	bl	8007c9c <SDMMC_CmdStopTransfer>
 8007232:	4602      	mov	r2, r0
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007238:	431a      	orrs	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007242:	2b00      	cmp	r3, #0
 8007244:	d103      	bne.n	800724e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f7ff fc66 	bl	8006b18 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800724c:	e002      	b.n	8007254 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f7ff fc58 	bl	8006b04 <HAL_SD_ErrorCallback>
}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800725c:	b5b0      	push	{r4, r5, r7, lr}
 800725e:	b094      	sub	sp, #80	; 0x50
 8007260:	af04      	add	r7, sp, #16
 8007262:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007264:	2301      	movs	r3, #1
 8007266:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4618      	mov	r0, r3
 800726e:	f000 fbe6 	bl	8007a3e <SDIO_GetPowerState>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d102      	bne.n	800727e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007278:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800727c:	e0b8      	b.n	80073f0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007282:	2b03      	cmp	r3, #3
 8007284:	d02f      	beq.n	80072e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fe10 	bl	8007eb0 <SDMMC_CmdSendCID>
 8007290:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <SD_InitCard+0x40>
    {
      return errorstate;
 8007298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729a:	e0a9      	b.n	80073f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2100      	movs	r1, #0
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 fc10 	bl	8007ac8 <SDIO_GetResponse>
 80072a8:	4602      	mov	r2, r0
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2104      	movs	r1, #4
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fc07 	bl	8007ac8 <SDIO_GetResponse>
 80072ba:	4602      	mov	r2, r0
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2108      	movs	r1, #8
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 fbfe 	bl	8007ac8 <SDIO_GetResponse>
 80072cc:	4602      	mov	r2, r0
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	210c      	movs	r1, #12
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 fbf5 	bl	8007ac8 <SDIO_GetResponse>
 80072de:	4602      	mov	r2, r0
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d00d      	beq.n	800730a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f107 020e 	add.w	r2, r7, #14
 80072f6:	4611      	mov	r1, r2
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 fe16 	bl	8007f2a <SDMMC_CmdSetRelAdd>
 80072fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <SD_InitCard+0xae>
    {
      return errorstate;
 8007306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007308:	e072      	b.n	80073f0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730e:	2b03      	cmp	r3, #3
 8007310:	d036      	beq.n	8007380 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007312:	89fb      	ldrh	r3, [r7, #14]
 8007314:	461a      	mov	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007322:	041b      	lsls	r3, r3, #16
 8007324:	4619      	mov	r1, r3
 8007326:	4610      	mov	r0, r2
 8007328:	f000 fde0 	bl	8007eec <SDMMC_CmdSendCSD>
 800732c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800732e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007336:	e05b      	b.n	80073f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2100      	movs	r1, #0
 800733e:	4618      	mov	r0, r3
 8007340:	f000 fbc2 	bl	8007ac8 <SDIO_GetResponse>
 8007344:	4602      	mov	r2, r0
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2104      	movs	r1, #4
 8007350:	4618      	mov	r0, r3
 8007352:	f000 fbb9 	bl	8007ac8 <SDIO_GetResponse>
 8007356:	4602      	mov	r2, r0
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2108      	movs	r1, #8
 8007362:	4618      	mov	r0, r3
 8007364:	f000 fbb0 	bl	8007ac8 <SDIO_GetResponse>
 8007368:	4602      	mov	r2, r0
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	210c      	movs	r1, #12
 8007374:	4618      	mov	r0, r3
 8007376:	f000 fba7 	bl	8007ac8 <SDIO_GetResponse>
 800737a:	4602      	mov	r2, r0
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2104      	movs	r1, #4
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fb9e 	bl	8007ac8 <SDIO_GetResponse>
 800738c:	4603      	mov	r3, r0
 800738e:	0d1a      	lsrs	r2, r3, #20
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007394:	f107 0310 	add.w	r3, r7, #16
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff fbc6 	bl	8006b2c <HAL_SD_GetCardCSD>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d002      	beq.n	80073ac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80073aa:	e021      	b.n	80073f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6819      	ldr	r1, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b4:	041b      	lsls	r3, r3, #16
 80073b6:	2200      	movs	r2, #0
 80073b8:	461c      	mov	r4, r3
 80073ba:	4615      	mov	r5, r2
 80073bc:	4622      	mov	r2, r4
 80073be:	462b      	mov	r3, r5
 80073c0:	4608      	mov	r0, r1
 80073c2:	f000 fc8d 	bl	8007ce0 <SDMMC_CmdSelDesel>
 80073c6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80073c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <SD_InitCard+0x176>
  {
    return errorstate;
 80073ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d0:	e00e      	b.n	80073f0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681d      	ldr	r5, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	466c      	mov	r4, sp
 80073da:	f103 0210 	add.w	r2, r3, #16
 80073de:	ca07      	ldmia	r2, {r0, r1, r2}
 80073e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80073e4:	3304      	adds	r3, #4
 80073e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073e8:	4628      	mov	r0, r5
 80073ea:	f000 fad1 	bl	8007990 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3740      	adds	r7, #64	; 0x40
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bdb0      	pop	{r4, r5, r7, pc}

080073f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]
 8007408:	2300      	movs	r3, #0
 800740a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4618      	mov	r0, r3
 8007412:	f000 fc88 	bl	8007d26 <SDMMC_CmdGoIdleState>
 8007416:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <SD_PowerON+0x2a>
  {
    return errorstate;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	e072      	b.n	8007508 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4618      	mov	r0, r3
 8007428:	f000 fc9b 	bl	8007d62 <SDMMC_CmdOperCond>
 800742c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00d      	beq.n	8007450 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fc71 	bl	8007d26 <SDMMC_CmdGoIdleState>
 8007444:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d004      	beq.n	8007456 <SD_PowerON+0x5e>
    {
      return errorstate;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	e05b      	b.n	8007508 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800745a:	2b01      	cmp	r3, #1
 800745c:	d137      	bne.n	80074ce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2100      	movs	r1, #0
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fc9b 	bl	8007da0 <SDMMC_CmdAppCommand>
 800746a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d02d      	beq.n	80074ce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007472:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007476:	e047      	b.n	8007508 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2100      	movs	r1, #0
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fc8e 	bl	8007da0 <SDMMC_CmdAppCommand>
 8007484:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <SD_PowerON+0x98>
    {
      return errorstate;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	e03b      	b.n	8007508 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	491e      	ldr	r1, [pc, #120]	; (8007510 <SD_PowerON+0x118>)
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fca4 	bl	8007de4 <SDMMC_CmdAppOperCommand>
 800749c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80074a8:	e02e      	b.n	8007508 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2100      	movs	r1, #0
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 fb09 	bl	8007ac8 <SDIO_GetResponse>
 80074b6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	0fdb      	lsrs	r3, r3, #31
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d101      	bne.n	80074c4 <SD_PowerON+0xcc>
 80074c0:	2301      	movs	r3, #1
 80074c2:	e000      	b.n	80074c6 <SD_PowerON+0xce>
 80074c4:	2300      	movs	r3, #0
 80074c6:	613b      	str	r3, [r7, #16]

    count++;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	3301      	adds	r3, #1
 80074cc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d802      	bhi.n	80074de <SD_PowerON+0xe6>
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0cc      	beq.n	8007478 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d902      	bls.n	80074ee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80074e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074ec:	e00c      	b.n	8007508 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d003      	beq.n	8007500 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	645a      	str	r2, [r3, #68]	; 0x44
 80074fe:	e002      	b.n	8007506 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	c1100000 	.word	0xc1100000

08007514 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d102      	bne.n	800752a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007524:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007528:	e018      	b.n	800755c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007532:	041b      	lsls	r3, r3, #16
 8007534:	4619      	mov	r1, r3
 8007536:	4610      	mov	r0, r2
 8007538:	f000 fd18 	bl	8007f6c <SDMMC_CmdSendStatus>
 800753c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	e009      	b.n	800755c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2100      	movs	r1, #0
 800754e:	4618      	mov	r0, r3
 8007550:	f000 faba 	bl	8007ac8 <SDIO_GetResponse>
 8007554:	4602      	mov	r2, r0
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800756c:	2300      	movs	r3, #0
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	2300      	movs	r3, #0
 8007572:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2100      	movs	r1, #0
 800757a:	4618      	mov	r0, r3
 800757c:	f000 faa4 	bl	8007ac8 <SDIO_GetResponse>
 8007580:	4603      	mov	r3, r0
 8007582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007586:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800758a:	d102      	bne.n	8007592 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800758c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007590:	e02f      	b.n	80075f2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007592:	f107 030c 	add.w	r3, r7, #12
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f879 	bl	8007690 <SD_FindSCR>
 800759e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	e023      	b.n	80075f2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01c      	beq.n	80075ee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075bc:	041b      	lsls	r3, r3, #16
 80075be:	4619      	mov	r1, r3
 80075c0:	4610      	mov	r0, r2
 80075c2:	f000 fbed 	bl	8007da0 <SDMMC_CmdAppCommand>
 80075c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	e00f      	b.n	80075f2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2102      	movs	r1, #2
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fc26 	bl	8007e2a <SDMMC_CmdBusWidth>
 80075de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	e003      	b.n	80075f2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80075ea:	2300      	movs	r3, #0
 80075ec:	e001      	b.n	80075f2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80075ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b086      	sub	sp, #24
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
 8007606:	2300      	movs	r3, #0
 8007608:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2100      	movs	r1, #0
 8007610:	4618      	mov	r0, r3
 8007612:	f000 fa59 	bl	8007ac8 <SDIO_GetResponse>
 8007616:	4603      	mov	r3, r0
 8007618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800761c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007620:	d102      	bne.n	8007628 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007622:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007626:	e02f      	b.n	8007688 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007628:	f107 030c 	add.w	r3, r7, #12
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f82e 	bl	8007690 <SD_FindSCR>
 8007634:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	e023      	b.n	8007688 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d01c      	beq.n	8007684 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007652:	041b      	lsls	r3, r3, #16
 8007654:	4619      	mov	r1, r3
 8007656:	4610      	mov	r0, r2
 8007658:	f000 fba2 	bl	8007da0 <SDMMC_CmdAppCommand>
 800765c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	e00f      	b.n	8007688 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2100      	movs	r1, #0
 800766e:	4618      	mov	r0, r3
 8007670:	f000 fbdb 	bl	8007e2a <SDMMC_CmdBusWidth>
 8007674:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	e003      	b.n	8007688 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007680:	2300      	movs	r3, #0
 8007682:	e001      	b.n	8007688 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007684:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007688:	4618      	mov	r0, r3
 800768a:	3718      	adds	r7, #24
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007690:	b590      	push	{r4, r7, lr}
 8007692:	b08f      	sub	sp, #60	; 0x3c
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800769a:	f7fc f905 	bl	80038a8 <HAL_GetTick>
 800769e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80076a4:	2300      	movs	r3, #0
 80076a6:	60bb      	str	r3, [r7, #8]
 80076a8:	2300      	movs	r3, #0
 80076aa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2108      	movs	r1, #8
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fa45 	bl	8007b46 <SDMMC_CmdBlockLength>
 80076bc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	e0b9      	b.n	800783c <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d0:	041b      	lsls	r3, r3, #16
 80076d2:	4619      	mov	r1, r3
 80076d4:	4610      	mov	r0, r2
 80076d6:	f000 fb63 	bl	8007da0 <SDMMC_CmdAppCommand>
 80076da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80076dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	e0aa      	b.n	800783c <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076e6:	f04f 33ff 	mov.w	r3, #4294967295
 80076ea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80076ec:	2308      	movs	r3, #8
 80076ee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80076f0:	2330      	movs	r3, #48	; 0x30
 80076f2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80076f4:	2302      	movs	r3, #2
 80076f6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80076fc:	2301      	movs	r3, #1
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f107 0210 	add.w	r2, r7, #16
 8007708:	4611      	mov	r1, r2
 800770a:	4618      	mov	r0, r3
 800770c:	f000 f9ef 	bl	8007aee <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fbaa 	bl	8007e6e <SDMMC_CmdSendSCR>
 800771a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771e:	2b00      	cmp	r3, #0
 8007720:	d02a      	beq.n	8007778 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	e08a      	b.n	800783c <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800772c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00f      	beq.n	8007754 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6819      	ldr	r1, [r3, #0]
 8007738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	f107 0208 	add.w	r2, r7, #8
 8007740:	18d4      	adds	r4, r2, r3
 8007742:	4608      	mov	r0, r1
 8007744:	f000 f94f 	bl	80079e6 <SDIO_ReadFIFO>
 8007748:	4603      	mov	r3, r0
 800774a:	6023      	str	r3, [r4, #0]
      index++;
 800774c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774e:	3301      	adds	r3, #1
 8007750:	637b      	str	r3, [r7, #52]	; 0x34
 8007752:	e006      	b.n	8007762 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d012      	beq.n	8007788 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007762:	f7fc f8a1 	bl	80038a8 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007770:	d102      	bne.n	8007778 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007772:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007776:	e061      	b.n	800783c <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800777e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0cf      	beq.n	8007726 <SD_FindSCR+0x96>
 8007786:	e000      	b.n	800778a <SD_FindSCR+0xfa>
      break;
 8007788:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007790:	f003 0308 	and.w	r3, r3, #8
 8007794:	2b00      	cmp	r3, #0
 8007796:	d106      	bne.n	80077a6 <SD_FindSCR+0x116>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d005      	beq.n	80077b2 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2208      	movs	r2, #8
 80077ac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80077ae:	2308      	movs	r3, #8
 80077b0:	e044      	b.n	800783c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d005      	beq.n	80077cc <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2202      	movs	r2, #2
 80077c6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80077c8:	2302      	movs	r3, #2
 80077ca:	e037      	b.n	800783c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d005      	beq.n	80077e6 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2220      	movs	r2, #32
 80077e0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80077e2:	2320      	movs	r3, #32
 80077e4:	e02a      	b.n	800783c <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f240 523a 	movw	r2, #1338	; 0x53a
 80077ee:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	061a      	lsls	r2, r3, #24
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	021b      	lsls	r3, r3, #8
 80077f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80077fc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	0a1b      	lsrs	r3, r3, #8
 8007802:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007806:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	0e1b      	lsrs	r3, r3, #24
 800780c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800780e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007810:	601a      	str	r2, [r3, #0]
    scr++;
 8007812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007814:	3304      	adds	r3, #4
 8007816:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	061a      	lsls	r2, r3, #24
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	021b      	lsls	r3, r3, #8
 8007820:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007824:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	0a1b      	lsrs	r3, r3, #8
 800782a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800782e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	0e1b      	lsrs	r3, r3, #24
 8007834:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007838:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	373c      	adds	r7, #60	; 0x3c
 8007840:	46bd      	mov	sp, r7
 8007842:	bd90      	pop	{r4, r7, pc}

08007844 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007850:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007856:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d03f      	beq.n	80078de <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800785e:	2300      	movs	r3, #0
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	e033      	b.n	80078cc <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4618      	mov	r0, r3
 800786a:	f000 f8bc 	bl	80079e6 <SDIO_ReadFIFO>
 800786e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	b2da      	uxtb	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	3301      	adds	r3, #1
 800787c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	3b01      	subs	r3, #1
 8007882:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	0a1b      	lsrs	r3, r3, #8
 8007888:	b2da      	uxtb	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3301      	adds	r3, #1
 8007892:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	3b01      	subs	r3, #1
 8007898:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	0c1b      	lsrs	r3, r3, #16
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	3301      	adds	r3, #1
 80078a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	3b01      	subs	r3, #1
 80078ae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	0e1b      	lsrs	r3, r3, #24
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3301      	adds	r3, #1
 80078be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	3301      	adds	r3, #1
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2b07      	cmp	r3, #7
 80078d0:	d9c8      	bls.n	8007864 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80078de:	bf00      	nop
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b086      	sub	sp, #24
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d043      	beq.n	8007988 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007900:	2300      	movs	r3, #0
 8007902:	617b      	str	r3, [r7, #20]
 8007904:	e037      	b.n	8007976 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3301      	adds	r3, #1
 8007910:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	3b01      	subs	r3, #1
 8007916:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	021a      	lsls	r2, r3, #8
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	4313      	orrs	r3, r2
 8007922:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3301      	adds	r3, #1
 8007928:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	3b01      	subs	r3, #1
 800792e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	041a      	lsls	r2, r3, #16
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	4313      	orrs	r3, r2
 800793a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3301      	adds	r3, #1
 8007940:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	3b01      	subs	r3, #1
 8007946:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	061a      	lsls	r2, r3, #24
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	4313      	orrs	r3, r2
 8007952:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	3301      	adds	r3, #1
 8007958:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	3b01      	subs	r3, #1
 800795e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f107 0208 	add.w	r2, r7, #8
 8007968:	4611      	mov	r1, r2
 800796a:	4618      	mov	r0, r3
 800796c:	f000 f848 	bl	8007a00 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	3301      	adds	r3, #1
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2b07      	cmp	r3, #7
 800797a:	d9c4      	bls.n	8007906 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007988:	bf00      	nop
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007990:	b084      	sub	sp, #16
 8007992:	b480      	push	{r7}
 8007994:	b085      	sub	sp, #20
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	f107 001c 	add.w	r0, r7, #28
 800799e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80079a6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80079a8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80079aa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80079ae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80079b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80079b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80079b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80079b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80079ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80079ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	431a      	orrs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	b004      	add	sp, #16
 80079e4:	4770      	bx	lr

080079e6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2203      	movs	r2, #3
 8007a2e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b083      	sub	sp, #12
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0303 	and.w	r3, r3, #3
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b085      	sub	sp, #20
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007a78:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007a7e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007a84:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007a94:	f023 030f 	bic.w	r3, r3, #15
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	b2db      	uxtb	r3, r3
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	3314      	adds	r3, #20
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	4413      	add	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
}  
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b085      	sub	sp, #20
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007af8:	2300      	movs	r3, #0
 8007afa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b14:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007b1a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007b20:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	431a      	orrs	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0

}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b088      	sub	sp, #32
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007b54:	2310      	movs	r3, #16
 8007b56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b58:	2340      	movs	r3, #64	; 0x40
 8007b5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b66:	f107 0308 	add.w	r3, r7, #8
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7ff ff74 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b76:	2110      	movs	r1, #16
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fa19 	bl	8007fb0 <SDMMC_GetCmdResp1>
 8007b7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b80:	69fb      	ldr	r3, [r7, #28]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3720      	adds	r7, #32
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b088      	sub	sp, #32
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007b98:	2311      	movs	r3, #17
 8007b9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b9c:	2340      	movs	r3, #64	; 0x40
 8007b9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ba8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007baa:	f107 0308 	add.w	r3, r7, #8
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7ff ff52 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bba:	2111      	movs	r1, #17
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f9f7 	bl	8007fb0 <SDMMC_GetCmdResp1>
 8007bc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3720      	adds	r7, #32
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b088      	sub	sp, #32
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007bdc:	2312      	movs	r3, #18
 8007bde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007be0:	2340      	movs	r3, #64	; 0x40
 8007be2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bee:	f107 0308 	add.w	r3, r7, #8
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7ff ff30 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bfe:	2112      	movs	r1, #18
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f9d5 	bl	8007fb0 <SDMMC_GetCmdResp1>
 8007c06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c08:	69fb      	ldr	r3, [r7, #28]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3720      	adds	r7, #32
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b088      	sub	sp, #32
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007c20:	2318      	movs	r3, #24
 8007c22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c24:	2340      	movs	r3, #64	; 0x40
 8007c26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c32:	f107 0308 	add.w	r3, r7, #8
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7ff ff0e 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c42:	2118      	movs	r1, #24
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f9b3 	bl	8007fb0 <SDMMC_GetCmdResp1>
 8007c4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3720      	adds	r7, #32
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b088      	sub	sp, #32
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007c64:	2319      	movs	r3, #25
 8007c66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c68:	2340      	movs	r3, #64	; 0x40
 8007c6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c76:	f107 0308 	add.w	r3, r7, #8
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff feec 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c86:	2119      	movs	r1, #25
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f991 	bl	8007fb0 <SDMMC_GetCmdResp1>
 8007c8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c90:	69fb      	ldr	r3, [r7, #28]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3720      	adds	r7, #32
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007ca8:	230c      	movs	r3, #12
 8007caa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007cac:	2340      	movs	r3, #64	; 0x40
 8007cae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cba:	f107 0308 	add.w	r3, r7, #8
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff feca 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007cc6:	4a05      	ldr	r2, [pc, #20]	; (8007cdc <SDMMC_CmdStopTransfer+0x40>)
 8007cc8:	210c      	movs	r1, #12
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f970 	bl	8007fb0 <SDMMC_GetCmdResp1>
 8007cd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cd2:	69fb      	ldr	r3, [r7, #28]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3720      	adds	r7, #32
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	05f5e100 	.word	0x05f5e100

08007ce0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08a      	sub	sp, #40	; 0x28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007cf0:	2307      	movs	r3, #7
 8007cf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007cf4:	2340      	movs	r3, #64	; 0x40
 8007cf6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d00:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d02:	f107 0310 	add.w	r3, r7, #16
 8007d06:	4619      	mov	r1, r3
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f7ff fea6 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d12:	2107      	movs	r1, #7
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f94b 	bl	8007fb0 <SDMMC_GetCmdResp1>
 8007d1a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3728      	adds	r7, #40	; 0x28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b088      	sub	sp, #32
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007d36:	2300      	movs	r3, #0
 8007d38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d44:	f107 0308 	add.w	r3, r7, #8
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff fe85 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fb65 	bl	8008420 <SDMMC_GetCmdError>
 8007d56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d58:	69fb      	ldr	r3, [r7, #28]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3720      	adds	r7, #32
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b088      	sub	sp, #32
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007d6a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007d6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007d70:	2308      	movs	r3, #8
 8007d72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d74:	2340      	movs	r3, #64	; 0x40
 8007d76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d82:	f107 0308 	add.w	r3, r7, #8
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff fe66 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 faf8 	bl	8008384 <SDMMC_GetCmdResp7>
 8007d94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d96:	69fb      	ldr	r3, [r7, #28]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3720      	adds	r7, #32
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007dae:	2337      	movs	r3, #55	; 0x37
 8007db0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007db2:	2340      	movs	r3, #64	; 0x40
 8007db4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007db6:	2300      	movs	r3, #0
 8007db8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007dc0:	f107 0308 	add.w	r3, r7, #8
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7ff fe47 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dd0:	2137      	movs	r1, #55	; 0x37
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f8ec 	bl	8007fb0 <SDMMC_GetCmdResp1>
 8007dd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dda:	69fb      	ldr	r3, [r7, #28]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3720      	adds	r7, #32
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b088      	sub	sp, #32
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007df4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007df8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007dfa:	2329      	movs	r3, #41	; 0x29
 8007dfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007dfe:	2340      	movs	r3, #64	; 0x40
 8007e00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e02:	2300      	movs	r3, #0
 8007e04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e0c:	f107 0308 	add.w	r3, r7, #8
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7ff fe21 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f9ff 	bl	800821c <SDMMC_GetCmdResp3>
 8007e1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e20:	69fb      	ldr	r3, [r7, #28]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3720      	adds	r7, #32
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b088      	sub	sp, #32
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007e38:	2306      	movs	r3, #6
 8007e3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e3c:	2340      	movs	r3, #64	; 0x40
 8007e3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e40:	2300      	movs	r3, #0
 8007e42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e4a:	f107 0308 	add.w	r3, r7, #8
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f7ff fe02 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e5a:	2106      	movs	r1, #6
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f8a7 	bl	8007fb0 <SDMMC_GetCmdResp1>
 8007e62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e64:	69fb      	ldr	r3, [r7, #28]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3720      	adds	r7, #32
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b088      	sub	sp, #32
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007e7a:	2333      	movs	r3, #51	; 0x33
 8007e7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e7e:	2340      	movs	r3, #64	; 0x40
 8007e80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e82:	2300      	movs	r3, #0
 8007e84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e8c:	f107 0308 	add.w	r3, r7, #8
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7ff fde1 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e9c:	2133      	movs	r1, #51	; 0x33
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f886 	bl	8007fb0 <SDMMC_GetCmdResp1>
 8007ea4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ea6:	69fb      	ldr	r3, [r7, #28]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3720      	adds	r7, #32
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b088      	sub	sp, #32
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007ec0:	23c0      	movs	r3, #192	; 0xc0
 8007ec2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ecc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ece:	f107 0308 	add.w	r3, r7, #8
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7ff fdc0 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f956 	bl	800818c <SDMMC_GetCmdResp2>
 8007ee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ee2:	69fb      	ldr	r3, [r7, #28]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3720      	adds	r7, #32
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b088      	sub	sp, #32
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007efa:	2309      	movs	r3, #9
 8007efc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007efe:	23c0      	movs	r3, #192	; 0xc0
 8007f00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f02:	2300      	movs	r3, #0
 8007f04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f0c:	f107 0308 	add.w	r3, r7, #8
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7ff fda1 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f937 	bl	800818c <SDMMC_GetCmdResp2>
 8007f1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f20:	69fb      	ldr	r3, [r7, #28]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3720      	adds	r7, #32
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b088      	sub	sp, #32
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f3c:	2340      	movs	r3, #64	; 0x40
 8007f3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f40:	2300      	movs	r3, #0
 8007f42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f4a:	f107 0308 	add.w	r3, r7, #8
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7ff fd82 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	2103      	movs	r1, #3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f99c 	bl	8008298 <SDMMC_GetCmdResp6>
 8007f60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f62:	69fb      	ldr	r3, [r7, #28]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3720      	adds	r7, #32
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b088      	sub	sp, #32
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007f7a:	230d      	movs	r3, #13
 8007f7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f7e:	2340      	movs	r3, #64	; 0x40
 8007f80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f8c:	f107 0308 	add.w	r3, r7, #8
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7ff fd61 	bl	8007a5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f9c:	210d      	movs	r1, #13
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f806 	bl	8007fb0 <SDMMC_GetCmdResp1>
 8007fa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fa6:	69fb      	ldr	r3, [r7, #28]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3720      	adds	r7, #32
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b088      	sub	sp, #32
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	607a      	str	r2, [r7, #4]
 8007fbc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007fbe:	4b70      	ldr	r3, [pc, #448]	; (8008180 <SDMMC_GetCmdResp1+0x1d0>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a70      	ldr	r2, [pc, #448]	; (8008184 <SDMMC_GetCmdResp1+0x1d4>)
 8007fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc8:	0a5a      	lsrs	r2, r3, #9
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	fb02 f303 	mul.w	r3, r2, r3
 8007fd0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	1e5a      	subs	r2, r3, #1
 8007fd6:	61fa      	str	r2, [r7, #28]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d102      	bne.n	8007fe2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007fdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fe0:	e0c9      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0ef      	beq.n	8007fd2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1ea      	bne.n	8007fd2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008000:	f003 0304 	and.w	r3, r3, #4
 8008004:	2b00      	cmp	r3, #0
 8008006:	d004      	beq.n	8008012 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2204      	movs	r2, #4
 800800c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800800e:	2304      	movs	r3, #4
 8008010:	e0b1      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d004      	beq.n	8008028 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2201      	movs	r2, #1
 8008022:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008024:	2301      	movs	r3, #1
 8008026:	e0a6      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	22c5      	movs	r2, #197	; 0xc5
 800802c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f7ff fd3d 	bl	8007aae <SDIO_GetCommandResponse>
 8008034:	4603      	mov	r3, r0
 8008036:	461a      	mov	r2, r3
 8008038:	7afb      	ldrb	r3, [r7, #11]
 800803a:	4293      	cmp	r3, r2
 800803c:	d001      	beq.n	8008042 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800803e:	2301      	movs	r3, #1
 8008040:	e099      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008042:	2100      	movs	r1, #0
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f7ff fd3f 	bl	8007ac8 <SDIO_GetResponse>
 800804a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	4b4e      	ldr	r3, [pc, #312]	; (8008188 <SDMMC_GetCmdResp1+0x1d8>)
 8008050:	4013      	ands	r3, r2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008056:	2300      	movs	r3, #0
 8008058:	e08d      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2b00      	cmp	r3, #0
 800805e:	da02      	bge.n	8008066 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008060:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008064:	e087      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008070:	2340      	movs	r3, #64	; 0x40
 8008072:	e080      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800807e:	2380      	movs	r3, #128	; 0x80
 8008080:	e079      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800808c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008090:	e071      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800809c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080a0:	e069      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80080ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080b0:	e061      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80080bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080c0:	e059      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80080cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080d0:	e051      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80080dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080e0:	e049      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80080ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80080f0:	e041      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80080fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008100:	e039      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800810c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008110:	e031      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800811c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008120:	e029      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800812c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008130:	e021      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800813c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008140:	e019      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800814c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008150:	e011      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800815c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008160:	e009      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f003 0308 	and.w	r3, r3, #8
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800816c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008170:	e001      	b.n	8008176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008176:	4618      	mov	r0, r3
 8008178:	3720      	adds	r7, #32
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20000000 	.word	0x20000000
 8008184:	10624dd3 	.word	0x10624dd3
 8008188:	fdffe008 	.word	0xfdffe008

0800818c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008194:	4b1f      	ldr	r3, [pc, #124]	; (8008214 <SDMMC_GetCmdResp2+0x88>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a1f      	ldr	r2, [pc, #124]	; (8008218 <SDMMC_GetCmdResp2+0x8c>)
 800819a:	fba2 2303 	umull	r2, r3, r2, r3
 800819e:	0a5b      	lsrs	r3, r3, #9
 80081a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80081a4:	fb02 f303 	mul.w	r3, r2, r3
 80081a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	1e5a      	subs	r2, r3, #1
 80081ae:	60fa      	str	r2, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d102      	bne.n	80081ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081b8:	e026      	b.n	8008208 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0ef      	beq.n	80081aa <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1ea      	bne.n	80081aa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d004      	beq.n	80081ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2204      	movs	r2, #4
 80081e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80081e6:	2304      	movs	r3, #4
 80081e8:	e00e      	b.n	8008208 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d004      	beq.n	8008200 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e003      	b.n	8008208 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	22c5      	movs	r2, #197	; 0xc5
 8008204:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3714      	adds	r7, #20
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	20000000 	.word	0x20000000
 8008218:	10624dd3 	.word	0x10624dd3

0800821c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008224:	4b1a      	ldr	r3, [pc, #104]	; (8008290 <SDMMC_GetCmdResp3+0x74>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a1a      	ldr	r2, [pc, #104]	; (8008294 <SDMMC_GetCmdResp3+0x78>)
 800822a:	fba2 2303 	umull	r2, r3, r2, r3
 800822e:	0a5b      	lsrs	r3, r3, #9
 8008230:	f241 3288 	movw	r2, #5000	; 0x1388
 8008234:	fb02 f303 	mul.w	r3, r2, r3
 8008238:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	1e5a      	subs	r2, r3, #1
 800823e:	60fa      	str	r2, [r7, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d102      	bne.n	800824a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008244:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008248:	e01b      	b.n	8008282 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0ef      	beq.n	800823a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1ea      	bne.n	800823a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008268:	f003 0304 	and.w	r3, r3, #4
 800826c:	2b00      	cmp	r3, #0
 800826e:	d004      	beq.n	800827a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2204      	movs	r2, #4
 8008274:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008276:	2304      	movs	r3, #4
 8008278:	e003      	b.n	8008282 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	22c5      	movs	r2, #197	; 0xc5
 800827e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	20000000 	.word	0x20000000
 8008294:	10624dd3 	.word	0x10624dd3

08008298 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	460b      	mov	r3, r1
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80082a6:	4b35      	ldr	r3, [pc, #212]	; (800837c <SDMMC_GetCmdResp6+0xe4>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a35      	ldr	r2, [pc, #212]	; (8008380 <SDMMC_GetCmdResp6+0xe8>)
 80082ac:	fba2 2303 	umull	r2, r3, r2, r3
 80082b0:	0a5b      	lsrs	r3, r3, #9
 80082b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b6:	fb02 f303 	mul.w	r3, r2, r3
 80082ba:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	1e5a      	subs	r2, r3, #1
 80082c0:	61fa      	str	r2, [r7, #28]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d102      	bne.n	80082cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80082c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082ca:	e052      	b.n	8008372 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d0ef      	beq.n	80082bc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1ea      	bne.n	80082bc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ea:	f003 0304 	and.w	r3, r3, #4
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d004      	beq.n	80082fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2204      	movs	r2, #4
 80082f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80082f8:	2304      	movs	r3, #4
 80082fa:	e03a      	b.n	8008372 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	2b00      	cmp	r3, #0
 8008306:	d004      	beq.n	8008312 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2201      	movs	r2, #1
 800830c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800830e:	2301      	movs	r3, #1
 8008310:	e02f      	b.n	8008372 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f7ff fbcb 	bl	8007aae <SDIO_GetCommandResponse>
 8008318:	4603      	mov	r3, r0
 800831a:	461a      	mov	r2, r3
 800831c:	7afb      	ldrb	r3, [r7, #11]
 800831e:	4293      	cmp	r3, r2
 8008320:	d001      	beq.n	8008326 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008322:	2301      	movs	r3, #1
 8008324:	e025      	b.n	8008372 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	22c5      	movs	r2, #197	; 0xc5
 800832a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800832c:	2100      	movs	r1, #0
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff fbca 	bl	8007ac8 <SDIO_GetResponse>
 8008334:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d106      	bne.n	800834e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	0c1b      	lsrs	r3, r3, #16
 8008344:	b29a      	uxth	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800834a:	2300      	movs	r3, #0
 800834c:	e011      	b.n	8008372 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800835c:	e009      	b.n	8008372 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800836c:	e001      	b.n	8008372 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800836e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008372:	4618      	mov	r0, r3
 8008374:	3720      	adds	r7, #32
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20000000 	.word	0x20000000
 8008380:	10624dd3 	.word	0x10624dd3

08008384 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800838c:	4b22      	ldr	r3, [pc, #136]	; (8008418 <SDMMC_GetCmdResp7+0x94>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a22      	ldr	r2, [pc, #136]	; (800841c <SDMMC_GetCmdResp7+0x98>)
 8008392:	fba2 2303 	umull	r2, r3, r2, r3
 8008396:	0a5b      	lsrs	r3, r3, #9
 8008398:	f241 3288 	movw	r2, #5000	; 0x1388
 800839c:	fb02 f303 	mul.w	r3, r2, r3
 80083a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	1e5a      	subs	r2, r3, #1
 80083a6:	60fa      	str	r2, [r7, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d102      	bne.n	80083b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083b0:	e02c      	b.n	800840c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0ef      	beq.n	80083a2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1ea      	bne.n	80083a2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d0:	f003 0304 	and.w	r3, r3, #4
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d004      	beq.n	80083e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2204      	movs	r2, #4
 80083dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083de:	2304      	movs	r3, #4
 80083e0:	e014      	b.n	800840c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d004      	beq.n	80083f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e009      	b.n	800840c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2240      	movs	r2, #64	; 0x40
 8008408:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800840a:	2300      	movs	r3, #0
  
}
 800840c:	4618      	mov	r0, r3
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	20000000 	.word	0x20000000
 800841c:	10624dd3 	.word	0x10624dd3

08008420 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008428:	4b11      	ldr	r3, [pc, #68]	; (8008470 <SDMMC_GetCmdError+0x50>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a11      	ldr	r2, [pc, #68]	; (8008474 <SDMMC_GetCmdError+0x54>)
 800842e:	fba2 2303 	umull	r2, r3, r2, r3
 8008432:	0a5b      	lsrs	r3, r3, #9
 8008434:	f241 3288 	movw	r2, #5000	; 0x1388
 8008438:	fb02 f303 	mul.w	r3, r2, r3
 800843c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	1e5a      	subs	r2, r3, #1
 8008442:	60fa      	str	r2, [r7, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d102      	bne.n	800844e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008448:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800844c:	e009      	b.n	8008462 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0f1      	beq.n	800843e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	22c5      	movs	r2, #197	; 0xc5
 800845e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	20000000 	.word	0x20000000
 8008474:	10624dd3 	.word	0x10624dd3

08008478 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008478:	b084      	sub	sp, #16
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	f107 001c 	add.w	r0, r7, #28
 8008486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800848a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800848e:	2b01      	cmp	r3, #1
 8008490:	d123      	bne.n	80084da <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008496:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80084a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80084ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d105      	bne.n	80084ce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f001 fae2 	bl	8009a98 <USB_CoreReset>
 80084d4:	4603      	mov	r3, r0
 80084d6:	73fb      	strb	r3, [r7, #15]
 80084d8:	e01b      	b.n	8008512 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f001 fad6 	bl	8009a98 <USB_CoreReset>
 80084ec:	4603      	mov	r3, r0
 80084ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80084f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d106      	bne.n	8008506 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	639a      	str	r2, [r3, #56]	; 0x38
 8008504:	e005      	b.n	8008512 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008512:	7fbb      	ldrb	r3, [r7, #30]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d10b      	bne.n	8008530 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f043 0206 	orr.w	r2, r3, #6
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f043 0220 	orr.w	r2, r3, #32
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008530:	7bfb      	ldrb	r3, [r7, #15]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800853c:	b004      	add	sp, #16
 800853e:	4770      	bx	lr

08008540 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	4613      	mov	r3, r2
 800854c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	2b02      	cmp	r3, #2
 8008552:	d165      	bne.n	8008620 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	4a41      	ldr	r2, [pc, #260]	; (800865c <USB_SetTurnaroundTime+0x11c>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d906      	bls.n	800856a <USB_SetTurnaroundTime+0x2a>
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	4a40      	ldr	r2, [pc, #256]	; (8008660 <USB_SetTurnaroundTime+0x120>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d202      	bcs.n	800856a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008564:	230f      	movs	r3, #15
 8008566:	617b      	str	r3, [r7, #20]
 8008568:	e062      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4a3c      	ldr	r2, [pc, #240]	; (8008660 <USB_SetTurnaroundTime+0x120>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d306      	bcc.n	8008580 <USB_SetTurnaroundTime+0x40>
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	4a3b      	ldr	r2, [pc, #236]	; (8008664 <USB_SetTurnaroundTime+0x124>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d202      	bcs.n	8008580 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800857a:	230e      	movs	r3, #14
 800857c:	617b      	str	r3, [r7, #20]
 800857e:	e057      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4a38      	ldr	r2, [pc, #224]	; (8008664 <USB_SetTurnaroundTime+0x124>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d306      	bcc.n	8008596 <USB_SetTurnaroundTime+0x56>
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	4a37      	ldr	r2, [pc, #220]	; (8008668 <USB_SetTurnaroundTime+0x128>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d202      	bcs.n	8008596 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008590:	230d      	movs	r3, #13
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	e04c      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	4a33      	ldr	r2, [pc, #204]	; (8008668 <USB_SetTurnaroundTime+0x128>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d306      	bcc.n	80085ac <USB_SetTurnaroundTime+0x6c>
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	4a32      	ldr	r2, [pc, #200]	; (800866c <USB_SetTurnaroundTime+0x12c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d802      	bhi.n	80085ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80085a6:	230c      	movs	r3, #12
 80085a8:	617b      	str	r3, [r7, #20]
 80085aa:	e041      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4a2f      	ldr	r2, [pc, #188]	; (800866c <USB_SetTurnaroundTime+0x12c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d906      	bls.n	80085c2 <USB_SetTurnaroundTime+0x82>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	4a2e      	ldr	r2, [pc, #184]	; (8008670 <USB_SetTurnaroundTime+0x130>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d802      	bhi.n	80085c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80085bc:	230b      	movs	r3, #11
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	e036      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4a2a      	ldr	r2, [pc, #168]	; (8008670 <USB_SetTurnaroundTime+0x130>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d906      	bls.n	80085d8 <USB_SetTurnaroundTime+0x98>
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	4a29      	ldr	r2, [pc, #164]	; (8008674 <USB_SetTurnaroundTime+0x134>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d802      	bhi.n	80085d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80085d2:	230a      	movs	r3, #10
 80085d4:	617b      	str	r3, [r7, #20]
 80085d6:	e02b      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	4a26      	ldr	r2, [pc, #152]	; (8008674 <USB_SetTurnaroundTime+0x134>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d906      	bls.n	80085ee <USB_SetTurnaroundTime+0xae>
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	4a25      	ldr	r2, [pc, #148]	; (8008678 <USB_SetTurnaroundTime+0x138>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d202      	bcs.n	80085ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80085e8:	2309      	movs	r3, #9
 80085ea:	617b      	str	r3, [r7, #20]
 80085ec:	e020      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	4a21      	ldr	r2, [pc, #132]	; (8008678 <USB_SetTurnaroundTime+0x138>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d306      	bcc.n	8008604 <USB_SetTurnaroundTime+0xc4>
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	4a20      	ldr	r2, [pc, #128]	; (800867c <USB_SetTurnaroundTime+0x13c>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d802      	bhi.n	8008604 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80085fe:	2308      	movs	r3, #8
 8008600:	617b      	str	r3, [r7, #20]
 8008602:	e015      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	4a1d      	ldr	r2, [pc, #116]	; (800867c <USB_SetTurnaroundTime+0x13c>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d906      	bls.n	800861a <USB_SetTurnaroundTime+0xda>
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	4a1c      	ldr	r2, [pc, #112]	; (8008680 <USB_SetTurnaroundTime+0x140>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d202      	bcs.n	800861a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008614:	2307      	movs	r3, #7
 8008616:	617b      	str	r3, [r7, #20]
 8008618:	e00a      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800861a:	2306      	movs	r3, #6
 800861c:	617b      	str	r3, [r7, #20]
 800861e:	e007      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008620:	79fb      	ldrb	r3, [r7, #7]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d102      	bne.n	800862c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008626:	2309      	movs	r3, #9
 8008628:	617b      	str	r3, [r7, #20]
 800862a:	e001      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800862c:	2309      	movs	r3, #9
 800862e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	029b      	lsls	r3, r3, #10
 8008644:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008648:	431a      	orrs	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	371c      	adds	r7, #28
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	00d8acbf 	.word	0x00d8acbf
 8008660:	00e4e1c0 	.word	0x00e4e1c0
 8008664:	00f42400 	.word	0x00f42400
 8008668:	01067380 	.word	0x01067380
 800866c:	011a499f 	.word	0x011a499f
 8008670:	01312cff 	.word	0x01312cff
 8008674:	014ca43f 	.word	0x014ca43f
 8008678:	016e3600 	.word	0x016e3600
 800867c:	01a6ab1f 	.word	0x01a6ab1f
 8008680:	01e84800 	.word	0x01e84800

08008684 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f043 0201 	orr.w	r2, r3, #1
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f023 0201 	bic.w	r2, r3, #1
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086e4:	78fb      	ldrb	r3, [r7, #3]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d115      	bne.n	8008716 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80086f6:	200a      	movs	r0, #10
 80086f8:	f7fb f8e2 	bl	80038c0 <HAL_Delay>
      ms += 10U;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	330a      	adds	r3, #10
 8008700:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f001 f939 	bl	800997a <USB_GetMode>
 8008708:	4603      	mov	r3, r0
 800870a:	2b01      	cmp	r3, #1
 800870c:	d01e      	beq.n	800874c <USB_SetCurrentMode+0x84>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2bc7      	cmp	r3, #199	; 0xc7
 8008712:	d9f0      	bls.n	80086f6 <USB_SetCurrentMode+0x2e>
 8008714:	e01a      	b.n	800874c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008716:	78fb      	ldrb	r3, [r7, #3]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d115      	bne.n	8008748 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008728:	200a      	movs	r0, #10
 800872a:	f7fb f8c9 	bl	80038c0 <HAL_Delay>
      ms += 10U;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	330a      	adds	r3, #10
 8008732:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 f920 	bl	800997a <USB_GetMode>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d005      	beq.n	800874c <USB_SetCurrentMode+0x84>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2bc7      	cmp	r3, #199	; 0xc7
 8008744:	d9f0      	bls.n	8008728 <USB_SetCurrentMode+0x60>
 8008746:	e001      	b.n	800874c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e005      	b.n	8008758 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2bc8      	cmp	r3, #200	; 0xc8
 8008750:	d101      	bne.n	8008756 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e000      	b.n	8008758 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008760:	b084      	sub	sp, #16
 8008762:	b580      	push	{r7, lr}
 8008764:	b086      	sub	sp, #24
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800876e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800877a:	2300      	movs	r3, #0
 800877c:	613b      	str	r3, [r7, #16]
 800877e:	e009      	b.n	8008794 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	3340      	adds	r3, #64	; 0x40
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	2200      	movs	r2, #0
 800878c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	3301      	adds	r3, #1
 8008792:	613b      	str	r3, [r7, #16]
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	2b0e      	cmp	r3, #14
 8008798:	d9f2      	bls.n	8008780 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800879a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d11c      	bne.n	80087dc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087b0:	f043 0302 	orr.w	r3, r3, #2
 80087b4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	639a      	str	r2, [r3, #56]	; 0x38
 80087da:	e00b      	b.n	80087f4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087fa:	461a      	mov	r2, r3
 80087fc:	2300      	movs	r3, #0
 80087fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008800:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008804:	2b01      	cmp	r3, #1
 8008806:	d10d      	bne.n	8008824 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800880c:	2b00      	cmp	r3, #0
 800880e:	d104      	bne.n	800881a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008810:	2100      	movs	r1, #0
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f968 	bl	8008ae8 <USB_SetDevSpeed>
 8008818:	e008      	b.n	800882c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800881a:	2101      	movs	r1, #1
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f963 	bl	8008ae8 <USB_SetDevSpeed>
 8008822:	e003      	b.n	800882c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008824:	2103      	movs	r1, #3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f95e 	bl	8008ae8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800882c:	2110      	movs	r1, #16
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f8fa 	bl	8008a28 <USB_FlushTxFifo>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f924 	bl	8008a8c <USB_FlushRxFifo>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008854:	461a      	mov	r2, r3
 8008856:	2300      	movs	r3, #0
 8008858:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008860:	461a      	mov	r2, r3
 8008862:	2300      	movs	r3, #0
 8008864:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800886c:	461a      	mov	r2, r3
 800886e:	2300      	movs	r3, #0
 8008870:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008872:	2300      	movs	r3, #0
 8008874:	613b      	str	r3, [r7, #16]
 8008876:	e043      	b.n	8008900 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4413      	add	r3, r2
 8008880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800888a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800888e:	d118      	bne.n	80088c2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10a      	bne.n	80088ac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	4413      	add	r3, r2
 800889e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a2:	461a      	mov	r2, r3
 80088a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088a8:	6013      	str	r3, [r2, #0]
 80088aa:	e013      	b.n	80088d4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b8:	461a      	mov	r2, r3
 80088ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088be:	6013      	str	r3, [r2, #0]
 80088c0:	e008      	b.n	80088d4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	015a      	lsls	r2, r3, #5
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	4413      	add	r3, r2
 80088ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ce:	461a      	mov	r2, r3
 80088d0:	2300      	movs	r3, #0
 80088d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e0:	461a      	mov	r2, r3
 80088e2:	2300      	movs	r3, #0
 80088e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f2:	461a      	mov	r2, r3
 80088f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	3301      	adds	r3, #1
 80088fe:	613b      	str	r3, [r7, #16]
 8008900:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008904:	461a      	mov	r2, r3
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	4293      	cmp	r3, r2
 800890a:	d3b5      	bcc.n	8008878 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800890c:	2300      	movs	r3, #0
 800890e:	613b      	str	r3, [r7, #16]
 8008910:	e043      	b.n	800899a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	4413      	add	r3, r2
 800891a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008928:	d118      	bne.n	800895c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10a      	bne.n	8008946 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893c:	461a      	mov	r2, r3
 800893e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008942:	6013      	str	r3, [r2, #0]
 8008944:	e013      	b.n	800896e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	4413      	add	r3, r2
 800894e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008952:	461a      	mov	r2, r3
 8008954:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	e008      	b.n	800896e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008968:	461a      	mov	r2, r3
 800896a:	2300      	movs	r3, #0
 800896c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	4413      	add	r3, r2
 8008976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897a:	461a      	mov	r2, r3
 800897c:	2300      	movs	r3, #0
 800897e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800898c:	461a      	mov	r2, r3
 800898e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008992:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	3301      	adds	r3, #1
 8008998:	613b      	str	r3, [r7, #16]
 800899a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800899e:	461a      	mov	r2, r3
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d3b5      	bcc.n	8008912 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80089c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80089c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d105      	bne.n	80089dc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	f043 0210 	orr.w	r2, r3, #16
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	699a      	ldr	r2, [r3, #24]
 80089e0:	4b10      	ldr	r3, [pc, #64]	; (8008a24 <USB_DevInit+0x2c4>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80089e8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d005      	beq.n	80089fc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	f043 0208 	orr.w	r2, r3, #8
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80089fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d107      	bne.n	8008a14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a0c:	f043 0304 	orr.w	r3, r3, #4
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3718      	adds	r7, #24
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a20:	b004      	add	sp, #16
 8008a22:	4770      	bx	lr
 8008a24:	803c3800 	.word	0x803c3800

08008a28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008a42:	d901      	bls.n	8008a48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e01b      	b.n	8008a80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	daf2      	bge.n	8008a36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	019b      	lsls	r3, r3, #6
 8008a58:	f043 0220 	orr.w	r2, r3, #32
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	3301      	adds	r3, #1
 8008a64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008a6c:	d901      	bls.n	8008a72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e006      	b.n	8008a80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	f003 0320 	and.w	r3, r3, #32
 8008a7a:	2b20      	cmp	r3, #32
 8008a7c:	d0f0      	beq.n	8008a60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008aa4:	d901      	bls.n	8008aaa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e018      	b.n	8008adc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	daf2      	bge.n	8008a98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2210      	movs	r2, #16
 8008aba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008ac8:	d901      	bls.n	8008ace <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e006      	b.n	8008adc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	f003 0310 	and.w	r3, r3, #16
 8008ad6:	2b10      	cmp	r3, #16
 8008ad8:	d0f0      	beq.n	8008abc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b087      	sub	sp, #28
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	f003 0306 	and.w	r3, r3, #6
 8008b32:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d102      	bne.n	8008b40 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	75fb      	strb	r3, [r7, #23]
 8008b3e:	e00a      	b.n	8008b56 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d002      	beq.n	8008b4c <USB_GetDevSpeed+0x32>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2b06      	cmp	r3, #6
 8008b4a:	d102      	bne.n	8008b52 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	75fb      	strb	r3, [r7, #23]
 8008b50:	e001      	b.n	8008b56 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008b52:	230f      	movs	r3, #15
 8008b54:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	371c      	adds	r7, #28
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	785b      	ldrb	r3, [r3, #1]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d13a      	bne.n	8008bf6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b86:	69da      	ldr	r2, [r3, #28]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	f003 030f 	and.w	r3, r3, #15
 8008b90:	2101      	movs	r1, #1
 8008b92:	fa01 f303 	lsl.w	r3, r1, r3
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	68f9      	ldr	r1, [r7, #12]
 8008b9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d155      	bne.n	8008c64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	791b      	ldrb	r3, [r3, #4]
 8008bd2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bd4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	059b      	lsls	r3, r3, #22
 8008bda:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	0151      	lsls	r1, r2, #5
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	440a      	add	r2, r1
 8008be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bf2:	6013      	str	r3, [r2, #0]
 8008bf4:	e036      	b.n	8008c64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bfc:	69da      	ldr	r2, [r3, #28]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	f003 030f 	and.w	r3, r3, #15
 8008c06:	2101      	movs	r1, #1
 8008c08:	fa01 f303 	lsl.w	r3, r1, r3
 8008c0c:	041b      	lsls	r3, r3, #16
 8008c0e:	68f9      	ldr	r1, [r7, #12]
 8008c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c14:	4313      	orrs	r3, r2
 8008c16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d11a      	bne.n	8008c64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	791b      	ldrb	r3, [r3, #4]
 8008c48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c4a:	430b      	orrs	r3, r1
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	0151      	lsls	r1, r2, #5
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	440a      	add	r2, r1
 8008c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
	...

08008c74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	785b      	ldrb	r3, [r3, #1]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d161      	bne.n	8008d54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ca6:	d11f      	bne.n	8008ce8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	0151      	lsls	r1, r2, #5
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	440a      	add	r2, r1
 8008cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cc6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	0151      	lsls	r1, r2, #5
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	440a      	add	r2, r1
 8008cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ce2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ce6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	f003 030f 	and.w	r3, r3, #15
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	43db      	mvns	r3, r3
 8008d02:	68f9      	ldr	r1, [r7, #12]
 8008d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d08:	4013      	ands	r3, r2
 8008d0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d12:	69da      	ldr	r2, [r3, #28]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	f003 030f 	and.w	r3, r3, #15
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	43db      	mvns	r3, r3
 8008d26:	68f9      	ldr	r1, [r7, #12]
 8008d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	0159      	lsls	r1, r3, #5
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	440b      	add	r3, r1
 8008d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	4b35      	ldr	r3, [pc, #212]	; (8008e24 <USB_DeactivateEndpoint+0x1b0>)
 8008d4e:	4013      	ands	r3, r2
 8008d50:	600b      	str	r3, [r1, #0]
 8008d52:	e060      	b.n	8008e16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d6a:	d11f      	bne.n	8008dac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	0151      	lsls	r1, r2, #5
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	440a      	add	r2, r1
 8008d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	0151      	lsls	r1, r2, #5
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	440a      	add	r2, r1
 8008da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008da6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008daa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	f003 030f 	and.w	r3, r3, #15
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc2:	041b      	lsls	r3, r3, #16
 8008dc4:	43db      	mvns	r3, r3
 8008dc6:	68f9      	ldr	r1, [r7, #12]
 8008dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dcc:	4013      	ands	r3, r2
 8008dce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd6:	69da      	ldr	r2, [r3, #28]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	f003 030f 	and.w	r3, r3, #15
 8008de0:	2101      	movs	r1, #1
 8008de2:	fa01 f303 	lsl.w	r3, r1, r3
 8008de6:	041b      	lsls	r3, r3, #16
 8008de8:	43db      	mvns	r3, r3
 8008dea:	68f9      	ldr	r1, [r7, #12]
 8008dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008df0:	4013      	ands	r3, r2
 8008df2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	015a      	lsls	r2, r3, #5
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	0159      	lsls	r1, r3, #5
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	440b      	add	r3, r1
 8008e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0e:	4619      	mov	r1, r3
 8008e10:	4b05      	ldr	r3, [pc, #20]	; (8008e28 <USB_DeactivateEndpoint+0x1b4>)
 8008e12:	4013      	ands	r3, r2
 8008e14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	ec337800 	.word	0xec337800
 8008e28:	eff37800 	.word	0xeff37800

08008e2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b08a      	sub	sp, #40	; 0x28
 8008e30:	af02      	add	r7, sp, #8
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	4613      	mov	r3, r2
 8008e38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	785b      	ldrb	r3, [r3, #1]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	f040 817a 	bne.w	8009142 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d132      	bne.n	8008ebc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	69ba      	ldr	r2, [r7, #24]
 8008e66:	0151      	lsls	r1, r2, #5
 8008e68:	69fa      	ldr	r2, [r7, #28]
 8008e6a:	440a      	add	r2, r1
 8008e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	69ba      	ldr	r2, [r7, #24]
 8008e8a:	0151      	lsls	r1, r2, #5
 8008e8c:	69fa      	ldr	r2, [r7, #28]
 8008e8e:	440a      	add	r2, r1
 8008e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	015a      	lsls	r2, r3, #5
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	0151      	lsls	r1, r2, #5
 8008eac:	69fa      	ldr	r2, [r7, #28]
 8008eae:	440a      	add	r2, r1
 8008eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eb4:	0cdb      	lsrs	r3, r3, #19
 8008eb6:	04db      	lsls	r3, r3, #19
 8008eb8:	6113      	str	r3, [r2, #16]
 8008eba:	e092      	b.n	8008fe2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	0151      	lsls	r1, r2, #5
 8008ece:	69fa      	ldr	r2, [r7, #28]
 8008ed0:	440a      	add	r2, r1
 8008ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ed6:	0cdb      	lsrs	r3, r3, #19
 8008ed8:	04db      	lsls	r3, r3, #19
 8008eda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	69ba      	ldr	r2, [r7, #24]
 8008eec:	0151      	lsls	r1, r2, #5
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	440a      	add	r2, r1
 8008ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008efa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008efe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d11a      	bne.n	8008f3c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	691a      	ldr	r2, [r3, #16]
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d903      	bls.n	8008f1a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	689a      	ldr	r2, [r3, #8]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	69ba      	ldr	r2, [r7, #24]
 8008f2a:	0151      	lsls	r1, r2, #5
 8008f2c:	69fa      	ldr	r2, [r7, #28]
 8008f2e:	440a      	add	r2, r1
 8008f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f38:	6113      	str	r3, [r2, #16]
 8008f3a:	e01b      	b.n	8008f74 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	015a      	lsls	r2, r3, #5
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f48:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	6919      	ldr	r1, [r3, #16]
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	440b      	add	r3, r1
 8008f54:	1e59      	subs	r1, r3, #1
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f5e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008f60:	4ba2      	ldr	r3, [pc, #648]	; (80091ec <USB_EPStartXfer+0x3c0>)
 8008f62:	400b      	ands	r3, r1
 8008f64:	69b9      	ldr	r1, [r7, #24]
 8008f66:	0148      	lsls	r0, r1, #5
 8008f68:	69f9      	ldr	r1, [r7, #28]
 8008f6a:	4401      	add	r1, r0
 8008f6c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f70:	4313      	orrs	r3, r2
 8008f72:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	015a      	lsls	r2, r3, #5
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f80:	691a      	ldr	r2, [r3, #16]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f8a:	69b9      	ldr	r1, [r7, #24]
 8008f8c:	0148      	lsls	r0, r1, #5
 8008f8e:	69f9      	ldr	r1, [r7, #28]
 8008f90:	4401      	add	r1, r0
 8008f92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f96:	4313      	orrs	r3, r2
 8008f98:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	791b      	ldrb	r3, [r3, #4]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d11f      	bne.n	8008fe2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	015a      	lsls	r2, r3, #5
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	4413      	add	r3, r2
 8008faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	69ba      	ldr	r2, [r7, #24]
 8008fb2:	0151      	lsls	r1, r2, #5
 8008fb4:	69fa      	ldr	r2, [r7, #28]
 8008fb6:	440a      	add	r2, r1
 8008fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fbc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008fc0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	69ba      	ldr	r2, [r7, #24]
 8008fd2:	0151      	lsls	r1, r2, #5
 8008fd4:	69fa      	ldr	r2, [r7, #28]
 8008fd6:	440a      	add	r2, r1
 8008fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fe0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008fe2:	79fb      	ldrb	r3, [r7, #7]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d14b      	bne.n	8009080 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d009      	beq.n	8009004 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	791b      	ldrb	r3, [r3, #4]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d128      	bne.n	800905e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009018:	2b00      	cmp	r3, #0
 800901a:	d110      	bne.n	800903e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	69ba      	ldr	r2, [r7, #24]
 800902c:	0151      	lsls	r1, r2, #5
 800902e:	69fa      	ldr	r2, [r7, #28]
 8009030:	440a      	add	r2, r1
 8009032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009036:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800903a:	6013      	str	r3, [r2, #0]
 800903c:	e00f      	b.n	800905e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	015a      	lsls	r2, r3, #5
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	4413      	add	r3, r2
 8009046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	69ba      	ldr	r2, [r7, #24]
 800904e:	0151      	lsls	r1, r2, #5
 8009050:	69fa      	ldr	r2, [r7, #28]
 8009052:	440a      	add	r2, r1
 8009054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800905c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	015a      	lsls	r2, r3, #5
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	4413      	add	r3, r2
 8009066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	69ba      	ldr	r2, [r7, #24]
 800906e:	0151      	lsls	r1, r2, #5
 8009070:	69fa      	ldr	r2, [r7, #28]
 8009072:	440a      	add	r2, r1
 8009074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009078:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	e165      	b.n	800934c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	015a      	lsls	r2, r3, #5
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	4413      	add	r3, r2
 8009088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	69ba      	ldr	r2, [r7, #24]
 8009090:	0151      	lsls	r1, r2, #5
 8009092:	69fa      	ldr	r2, [r7, #28]
 8009094:	440a      	add	r2, r1
 8009096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800909a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800909e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	791b      	ldrb	r3, [r3, #4]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d015      	beq.n	80090d4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 814d 	beq.w	800934c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	f003 030f 	and.w	r3, r3, #15
 80090c2:	2101      	movs	r1, #1
 80090c4:	fa01 f303 	lsl.w	r3, r1, r3
 80090c8:	69f9      	ldr	r1, [r7, #28]
 80090ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090ce:	4313      	orrs	r3, r2
 80090d0:	634b      	str	r3, [r1, #52]	; 0x34
 80090d2:	e13b      	b.n	800934c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d110      	bne.n	8009106 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	0151      	lsls	r1, r2, #5
 80090f6:	69fa      	ldr	r2, [r7, #28]
 80090f8:	440a      	add	r2, r1
 80090fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009102:	6013      	str	r3, [r2, #0]
 8009104:	e00f      	b.n	8009126 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	015a      	lsls	r2, r3, #5
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	4413      	add	r3, r2
 800910e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	69ba      	ldr	r2, [r7, #24]
 8009116:	0151      	lsls	r1, r2, #5
 8009118:	69fa      	ldr	r2, [r7, #28]
 800911a:	440a      	add	r2, r1
 800911c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009124:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	68d9      	ldr	r1, [r3, #12]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	781a      	ldrb	r2, [r3, #0]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	b298      	uxth	r0, r3
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	4603      	mov	r3, r0
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f000 f9b8 	bl	80094b0 <USB_WritePacket>
 8009140:	e104      	b.n	800934c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	4413      	add	r3, r2
 800914a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	69ba      	ldr	r2, [r7, #24]
 8009152:	0151      	lsls	r1, r2, #5
 8009154:	69fa      	ldr	r2, [r7, #28]
 8009156:	440a      	add	r2, r1
 8009158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800915c:	0cdb      	lsrs	r3, r3, #19
 800915e:	04db      	lsls	r3, r3, #19
 8009160:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	015a      	lsls	r2, r3, #5
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	4413      	add	r3, r2
 800916a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	69ba      	ldr	r2, [r7, #24]
 8009172:	0151      	lsls	r1, r2, #5
 8009174:	69fa      	ldr	r2, [r7, #28]
 8009176:	440a      	add	r2, r1
 8009178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800917c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009180:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009184:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d131      	bne.n	80091f0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d003      	beq.n	800919c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	689a      	ldr	r2, [r3, #8]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	689a      	ldr	r2, [r3, #8]
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b0:	691a      	ldr	r2, [r3, #16]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091ba:	69b9      	ldr	r1, [r7, #24]
 80091bc:	0148      	lsls	r0, r1, #5
 80091be:	69f9      	ldr	r1, [r7, #28]
 80091c0:	4401      	add	r1, r0
 80091c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80091c6:	4313      	orrs	r3, r2
 80091c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	69ba      	ldr	r2, [r7, #24]
 80091da:	0151      	lsls	r1, r2, #5
 80091dc:	69fa      	ldr	r2, [r7, #28]
 80091de:	440a      	add	r2, r1
 80091e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091e8:	6113      	str	r3, [r2, #16]
 80091ea:	e061      	b.n	80092b0 <USB_EPStartXfer+0x484>
 80091ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d123      	bne.n	8009240 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009204:	691a      	ldr	r2, [r3, #16]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800920e:	69b9      	ldr	r1, [r7, #24]
 8009210:	0148      	lsls	r0, r1, #5
 8009212:	69f9      	ldr	r1, [r7, #28]
 8009214:	4401      	add	r1, r0
 8009216:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800921a:	4313      	orrs	r3, r2
 800921c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	0151      	lsls	r1, r2, #5
 8009230:	69fa      	ldr	r2, [r7, #28]
 8009232:	440a      	add	r2, r1
 8009234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009238:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800923c:	6113      	str	r3, [r2, #16]
 800923e:	e037      	b.n	80092b0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	691a      	ldr	r2, [r3, #16]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	4413      	add	r3, r2
 800924a:	1e5a      	subs	r2, r3, #1
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	fbb2 f3f3 	udiv	r3, r2, r3
 8009254:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	8afa      	ldrh	r2, [r7, #22]
 800925c:	fb03 f202 	mul.w	r2, r3, r2
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	4413      	add	r3, r2
 800926c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009270:	691a      	ldr	r2, [r3, #16]
 8009272:	8afb      	ldrh	r3, [r7, #22]
 8009274:	04d9      	lsls	r1, r3, #19
 8009276:	4b38      	ldr	r3, [pc, #224]	; (8009358 <USB_EPStartXfer+0x52c>)
 8009278:	400b      	ands	r3, r1
 800927a:	69b9      	ldr	r1, [r7, #24]
 800927c:	0148      	lsls	r0, r1, #5
 800927e:	69f9      	ldr	r1, [r7, #28]
 8009280:	4401      	add	r1, r0
 8009282:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009286:	4313      	orrs	r3, r2
 8009288:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	015a      	lsls	r2, r3, #5
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	4413      	add	r3, r2
 8009292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009296:	691a      	ldr	r2, [r3, #16]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	6a1b      	ldr	r3, [r3, #32]
 800929c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092a0:	69b9      	ldr	r1, [r7, #24]
 80092a2:	0148      	lsls	r0, r1, #5
 80092a4:	69f9      	ldr	r1, [r7, #28]
 80092a6:	4401      	add	r1, r0
 80092a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80092ac:	4313      	orrs	r3, r2
 80092ae:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d10d      	bne.n	80092d2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d009      	beq.n	80092d2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	68d9      	ldr	r1, [r3, #12]
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ce:	460a      	mov	r2, r1
 80092d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	791b      	ldrb	r3, [r3, #4]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d128      	bne.n	800932c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d110      	bne.n	800930c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	69ba      	ldr	r2, [r7, #24]
 80092fa:	0151      	lsls	r1, r2, #5
 80092fc:	69fa      	ldr	r2, [r7, #28]
 80092fe:	440a      	add	r2, r1
 8009300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009304:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	e00f      	b.n	800932c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	69ba      	ldr	r2, [r7, #24]
 800931c:	0151      	lsls	r1, r2, #5
 800931e:	69fa      	ldr	r2, [r7, #28]
 8009320:	440a      	add	r2, r1
 8009322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800932a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	69ba      	ldr	r2, [r7, #24]
 800933c:	0151      	lsls	r1, r2, #5
 800933e:	69fa      	ldr	r2, [r7, #28]
 8009340:	440a      	add	r2, r1
 8009342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009346:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800934a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3720      	adds	r7, #32
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	1ff80000 	.word	0x1ff80000

0800935c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800935c:	b480      	push	{r7}
 800935e:	b087      	sub	sp, #28
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009366:	2300      	movs	r3, #0
 8009368:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	785b      	ldrb	r3, [r3, #1]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d14a      	bne.n	8009410 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	015a      	lsls	r2, r3, #5
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	4413      	add	r3, r2
 8009384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800938e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009392:	f040 8086 	bne.w	80094a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	7812      	ldrb	r2, [r2, #0]
 80093aa:	0151      	lsls	r1, r2, #5
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	440a      	add	r2, r1
 80093b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	7812      	ldrb	r2, [r2, #0]
 80093ce:	0151      	lsls	r1, r2, #5
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	440a      	add	r2, r1
 80093d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3301      	adds	r3, #1
 80093e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d902      	bls.n	80093f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	75fb      	strb	r3, [r7, #23]
          break;
 80093f2:	e056      	b.n	80094a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800940c:	d0e7      	beq.n	80093de <USB_EPStopXfer+0x82>
 800940e:	e048      	b.n	80094a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	015a      	lsls	r2, r3, #5
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	4413      	add	r3, r2
 800941a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009424:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009428:	d13b      	bne.n	80094a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	7812      	ldrb	r2, [r2, #0]
 800943e:	0151      	lsls	r1, r2, #5
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	440a      	add	r2, r1
 8009444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009448:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800944c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	4413      	add	r3, r2
 8009458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	7812      	ldrb	r2, [r2, #0]
 8009462:	0151      	lsls	r1, r2, #5
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	440a      	add	r2, r1
 8009468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800946c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009470:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	3301      	adds	r3, #1
 8009476:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f242 7210 	movw	r2, #10000	; 0x2710
 800947e:	4293      	cmp	r3, r2
 8009480:	d902      	bls.n	8009488 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	75fb      	strb	r3, [r7, #23]
          break;
 8009486:	e00c      	b.n	80094a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	015a      	lsls	r2, r3, #5
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	4413      	add	r3, r2
 8009492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800949c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094a0:	d0e7      	beq.n	8009472 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	371c      	adds	r7, #28
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b089      	sub	sp, #36	; 0x24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	4611      	mov	r1, r2
 80094bc:	461a      	mov	r2, r3
 80094be:	460b      	mov	r3, r1
 80094c0:	71fb      	strb	r3, [r7, #7]
 80094c2:	4613      	mov	r3, r2
 80094c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80094ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d123      	bne.n	800951e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80094d6:	88bb      	ldrh	r3, [r7, #4]
 80094d8:	3303      	adds	r3, #3
 80094da:	089b      	lsrs	r3, r3, #2
 80094dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80094de:	2300      	movs	r3, #0
 80094e0:	61bb      	str	r3, [r7, #24]
 80094e2:	e018      	b.n	8009516 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80094e4:	79fb      	ldrb	r3, [r7, #7]
 80094e6:	031a      	lsls	r2, r3, #12
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f0:	461a      	mov	r2, r3
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	3301      	adds	r3, #1
 80094fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	3301      	adds	r3, #1
 8009502:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	3301      	adds	r3, #1
 8009508:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	3301      	adds	r3, #1
 800950e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	3301      	adds	r3, #1
 8009514:	61bb      	str	r3, [r7, #24]
 8009516:	69ba      	ldr	r2, [r7, #24]
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	429a      	cmp	r2, r3
 800951c:	d3e2      	bcc.n	80094e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3724      	adds	r7, #36	; 0x24
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800952c:	b480      	push	{r7}
 800952e:	b08b      	sub	sp, #44	; 0x2c
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	4613      	mov	r3, r2
 8009538:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009542:	88fb      	ldrh	r3, [r7, #6]
 8009544:	089b      	lsrs	r3, r3, #2
 8009546:	b29b      	uxth	r3, r3
 8009548:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800954a:	88fb      	ldrh	r3, [r7, #6]
 800954c:	f003 0303 	and.w	r3, r3, #3
 8009550:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009552:	2300      	movs	r3, #0
 8009554:	623b      	str	r3, [r7, #32]
 8009556:	e014      	b.n	8009582 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	601a      	str	r2, [r3, #0]
    pDest++;
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	3301      	adds	r3, #1
 8009568:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	3301      	adds	r3, #1
 800956e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009572:	3301      	adds	r3, #1
 8009574:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009578:	3301      	adds	r3, #1
 800957a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	3301      	adds	r3, #1
 8009580:	623b      	str	r3, [r7, #32]
 8009582:	6a3a      	ldr	r2, [r7, #32]
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	429a      	cmp	r2, r3
 8009588:	d3e6      	bcc.n	8009558 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800958a:	8bfb      	ldrh	r3, [r7, #30]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d01e      	beq.n	80095ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009590:	2300      	movs	r3, #0
 8009592:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800959a:	461a      	mov	r2, r3
 800959c:	f107 0310 	add.w	r3, r7, #16
 80095a0:	6812      	ldr	r2, [r2, #0]
 80095a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	6a3b      	ldr	r3, [r7, #32]
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	00db      	lsls	r3, r3, #3
 80095ac:	fa22 f303 	lsr.w	r3, r2, r3
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	701a      	strb	r2, [r3, #0]
      i++;
 80095b6:	6a3b      	ldr	r3, [r7, #32]
 80095b8:	3301      	adds	r3, #1
 80095ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	3301      	adds	r3, #1
 80095c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80095c2:	8bfb      	ldrh	r3, [r7, #30]
 80095c4:	3b01      	subs	r3, #1
 80095c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80095c8:	8bfb      	ldrh	r3, [r7, #30]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1ea      	bne.n	80095a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	372c      	adds	r7, #44	; 0x2c
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	785b      	ldrb	r3, [r3, #1]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d12c      	bne.n	8009652 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	015a      	lsls	r2, r3, #5
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	4413      	add	r3, r2
 8009600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	db12      	blt.n	8009630 <USB_EPSetStall+0x54>
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00f      	beq.n	8009630 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	0151      	lsls	r1, r2, #5
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	440a      	add	r2, r1
 8009626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800962a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800962e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	4413      	add	r3, r2
 8009638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	0151      	lsls	r1, r2, #5
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	440a      	add	r2, r1
 8009646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800964a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800964e:	6013      	str	r3, [r2, #0]
 8009650:	e02b      	b.n	80096aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	015a      	lsls	r2, r3, #5
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4413      	add	r3, r2
 800965a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	db12      	blt.n	800968a <USB_EPSetStall+0xae>
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00f      	beq.n	800968a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	015a      	lsls	r2, r3, #5
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	4413      	add	r3, r2
 8009672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	0151      	lsls	r1, r2, #5
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	440a      	add	r2, r1
 8009680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009684:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009688:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	015a      	lsls	r2, r3, #5
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	4413      	add	r3, r2
 8009692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	0151      	lsls	r1, r2, #5
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	440a      	add	r2, r1
 80096a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3714      	adds	r7, #20
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	785b      	ldrb	r3, [r3, #1]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d128      	bne.n	8009726 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	0151      	lsls	r1, r2, #5
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	440a      	add	r2, r1
 80096ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80096f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	791b      	ldrb	r3, [r3, #4]
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	d003      	beq.n	8009704 <USB_EPClearStall+0x4c>
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	791b      	ldrb	r3, [r3, #4]
 8009700:	2b02      	cmp	r3, #2
 8009702:	d138      	bne.n	8009776 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	015a      	lsls	r2, r3, #5
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4413      	add	r3, r2
 800970c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	0151      	lsls	r1, r2, #5
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	440a      	add	r2, r1
 800971a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800971e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009722:	6013      	str	r3, [r2, #0]
 8009724:	e027      	b.n	8009776 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	015a      	lsls	r2, r3, #5
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	4413      	add	r3, r2
 800972e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	0151      	lsls	r1, r2, #5
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	440a      	add	r2, r1
 800973c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009740:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009744:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	791b      	ldrb	r3, [r3, #4]
 800974a:	2b03      	cmp	r3, #3
 800974c:	d003      	beq.n	8009756 <USB_EPClearStall+0x9e>
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	791b      	ldrb	r3, [r3, #4]
 8009752:	2b02      	cmp	r3, #2
 8009754:	d10f      	bne.n	8009776 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	015a      	lsls	r2, r3, #5
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	4413      	add	r3, r2
 800975e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	0151      	lsls	r1, r2, #5
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	440a      	add	r2, r1
 800976c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009774:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3714      	adds	r7, #20
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80097a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	011b      	lsls	r3, r3, #4
 80097b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80097b8:	68f9      	ldr	r1, [r7, #12]
 80097ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097be:	4313      	orrs	r3, r2
 80097c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3714      	adds	r7, #20
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80097ea:	f023 0303 	bic.w	r3, r3, #3
 80097ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097fe:	f023 0302 	bic.w	r3, r3, #2
 8009802:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009812:	b480      	push	{r7}
 8009814:	b085      	sub	sp, #20
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800982c:	f023 0303 	bic.w	r3, r3, #3
 8009830:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009840:	f043 0302 	orr.w	r3, r3, #2
 8009844:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	4013      	ands	r3, r2
 800986a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800986c:	68fb      	ldr	r3, [r7, #12]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800987a:	b480      	push	{r7}
 800987c:	b085      	sub	sp, #20
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009896:	69db      	ldr	r3, [r3, #28]
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	4013      	ands	r3, r2
 800989c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	0c1b      	lsrs	r3, r3, #16
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b085      	sub	sp, #20
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ca:	69db      	ldr	r3, [r3, #28]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	4013      	ands	r3, r2
 80098d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	b29b      	uxth	r3, r3
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b085      	sub	sp, #20
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	460b      	mov	r3, r1
 80098ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	4013      	ands	r3, r2
 800990e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009910:	68bb      	ldr	r3, [r7, #8]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800991e:	b480      	push	{r7}
 8009920:	b087      	sub	sp, #28
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	460b      	mov	r3, r1
 8009928:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009940:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009942:	78fb      	ldrb	r3, [r7, #3]
 8009944:	f003 030f 	and.w	r3, r3, #15
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	fa22 f303 	lsr.w	r3, r2, r3
 800994e:	01db      	lsls	r3, r3, #7
 8009950:	b2db      	uxtb	r3, r3
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	4313      	orrs	r3, r2
 8009956:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009958:	78fb      	ldrb	r3, [r7, #3]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	4013      	ands	r3, r2
 800996a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800996c:	68bb      	ldr	r3, [r7, #8]
}
 800996e:	4618      	mov	r0, r3
 8009970:	371c      	adds	r7, #28
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800997a:	b480      	push	{r7}
 800997c:	b083      	sub	sp, #12
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	f003 0301 	and.w	r3, r3, #1
}
 800998a:	4618      	mov	r0, r3
 800998c:	370c      	adds	r7, #12
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009996:	b480      	push	{r7}
 8009998:	b085      	sub	sp, #20
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80099b4:	f023 0307 	bic.w	r3, r3, #7
 80099b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80099dc:	b480      	push	{r7}
 80099de:	b087      	sub	sp, #28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	460b      	mov	r3, r1
 80099e6:	607a      	str	r2, [r7, #4]
 80099e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	333c      	adds	r3, #60	; 0x3c
 80099f2:	3304      	adds	r3, #4
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	4a26      	ldr	r2, [pc, #152]	; (8009a94 <USB_EP0_OutStart+0xb8>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d90a      	bls.n	8009a16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a10:	d101      	bne.n	8009a16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	e037      	b.n	8009a86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	2300      	movs	r3, #0
 8009a20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a44:	f043 0318 	orr.w	r3, r3, #24
 8009a48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009a5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009a5e:	7afb      	ldrb	r3, [r7, #11]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d10f      	bne.n	8009a84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	697a      	ldr	r2, [r7, #20]
 8009a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009a82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	371c      	adds	r7, #28
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	4f54300a 	.word	0x4f54300a

08009a98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009ab0:	d901      	bls.n	8009ab6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e01b      	b.n	8009aee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	daf2      	bge.n	8009aa4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	f043 0201 	orr.w	r2, r3, #1
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009ada:	d901      	bls.n	8009ae0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009adc:	2303      	movs	r3, #3
 8009ade:	e006      	b.n	8009aee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	f003 0301 	and.w	r3, r3, #1
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d0f0      	beq.n	8009ace <USB_CoreReset+0x36>

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
	...

08009afc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	4603      	mov	r3, r0
 8009b04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009b06:	79fb      	ldrb	r3, [r7, #7]
 8009b08:	4a08      	ldr	r2, [pc, #32]	; (8009b2c <disk_status+0x30>)
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4413      	add	r3, r2
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	79fa      	ldrb	r2, [r7, #7]
 8009b14:	4905      	ldr	r1, [pc, #20]	; (8009b2c <disk_status+0x30>)
 8009b16:	440a      	add	r2, r1
 8009b18:	7b12      	ldrb	r2, [r2, #12]
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	4798      	blx	r3
 8009b1e:	4603      	mov	r3, r0
 8009b20:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	20000d40 	.word	0x20000d40

08009b30 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	4603      	mov	r3, r0
 8009b38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009b3e:	79fb      	ldrb	r3, [r7, #7]
 8009b40:	4a0d      	ldr	r2, [pc, #52]	; (8009b78 <disk_initialize+0x48>)
 8009b42:	5cd3      	ldrb	r3, [r2, r3]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d111      	bne.n	8009b6c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009b48:	79fb      	ldrb	r3, [r7, #7]
 8009b4a:	4a0b      	ldr	r2, [pc, #44]	; (8009b78 <disk_initialize+0x48>)
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009b50:	79fb      	ldrb	r3, [r7, #7]
 8009b52:	4a09      	ldr	r2, [pc, #36]	; (8009b78 <disk_initialize+0x48>)
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	79fa      	ldrb	r2, [r7, #7]
 8009b5e:	4906      	ldr	r1, [pc, #24]	; (8009b78 <disk_initialize+0x48>)
 8009b60:	440a      	add	r2, r1
 8009b62:	7b12      	ldrb	r2, [r2, #12]
 8009b64:	4610      	mov	r0, r2
 8009b66:	4798      	blx	r3
 8009b68:	4603      	mov	r3, r0
 8009b6a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20000d40 	.word	0x20000d40

08009b7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009b7c:	b590      	push	{r4, r7, lr}
 8009b7e:	b087      	sub	sp, #28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60b9      	str	r1, [r7, #8]
 8009b84:	607a      	str	r2, [r7, #4]
 8009b86:	603b      	str	r3, [r7, #0]
 8009b88:	4603      	mov	r3, r0
 8009b8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	4a0a      	ldr	r2, [pc, #40]	; (8009bb8 <disk_read+0x3c>)
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4413      	add	r3, r2
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	689c      	ldr	r4, [r3, #8]
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	4a07      	ldr	r2, [pc, #28]	; (8009bb8 <disk_read+0x3c>)
 8009b9c:	4413      	add	r3, r2
 8009b9e:	7b18      	ldrb	r0, [r3, #12]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	68b9      	ldr	r1, [r7, #8]
 8009ba6:	47a0      	blx	r4
 8009ba8:	4603      	mov	r3, r0
 8009baa:	75fb      	strb	r3, [r7, #23]
  return res;
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	371c      	adds	r7, #28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd90      	pop	{r4, r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	20000d40 	.word	0x20000d40

08009bbc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009bbc:	b590      	push	{r4, r7, lr}
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60b9      	str	r1, [r7, #8]
 8009bc4:	607a      	str	r2, [r7, #4]
 8009bc6:	603b      	str	r3, [r7, #0]
 8009bc8:	4603      	mov	r3, r0
 8009bca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	4a0a      	ldr	r2, [pc, #40]	; (8009bf8 <disk_write+0x3c>)
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	68dc      	ldr	r4, [r3, #12]
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	4a07      	ldr	r2, [pc, #28]	; (8009bf8 <disk_write+0x3c>)
 8009bdc:	4413      	add	r3, r2
 8009bde:	7b18      	ldrb	r0, [r3, #12]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	68b9      	ldr	r1, [r7, #8]
 8009be6:	47a0      	blx	r4
 8009be8:	4603      	mov	r3, r0
 8009bea:	75fb      	strb	r3, [r7, #23]
  return res;
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	371c      	adds	r7, #28
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd90      	pop	{r4, r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20000d40 	.word	0x20000d40

08009bfc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	4603      	mov	r3, r0
 8009c04:	603a      	str	r2, [r7, #0]
 8009c06:	71fb      	strb	r3, [r7, #7]
 8009c08:	460b      	mov	r3, r1
 8009c0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009c0c:	79fb      	ldrb	r3, [r7, #7]
 8009c0e:	4a09      	ldr	r2, [pc, #36]	; (8009c34 <disk_ioctl+0x38>)
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	79fa      	ldrb	r2, [r7, #7]
 8009c1a:	4906      	ldr	r1, [pc, #24]	; (8009c34 <disk_ioctl+0x38>)
 8009c1c:	440a      	add	r2, r1
 8009c1e:	7b10      	ldrb	r0, [r2, #12]
 8009c20:	79b9      	ldrb	r1, [r7, #6]
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	4798      	blx	r3
 8009c26:	4603      	mov	r3, r0
 8009c28:	73fb      	strb	r3, [r7, #15]
  return res;
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20000d40 	.word	0x20000d40

08009c38 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	af00      	add	r7, sp, #0
  return 0;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	3301      	adds	r3, #1
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009c58:	89fb      	ldrh	r3, [r7, #14]
 8009c5a:	021b      	lsls	r3, r3, #8
 8009c5c:	b21a      	sxth	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	b21b      	sxth	r3, r3
 8009c64:	4313      	orrs	r3, r2
 8009c66:	b21b      	sxth	r3, r3
 8009c68:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009c6a:	89fb      	ldrh	r3, [r7, #14]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3714      	adds	r7, #20
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	3303      	adds	r3, #3
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	021b      	lsls	r3, r3, #8
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	3202      	adds	r2, #2
 8009c90:	7812      	ldrb	r2, [r2, #0]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	021b      	lsls	r3, r3, #8
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	3201      	adds	r2, #1
 8009c9e:	7812      	ldrb	r2, [r2, #0]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	021b      	lsls	r3, r3, #8
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	7812      	ldrb	r2, [r2, #0]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]
	return rv;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b083      	sub	sp, #12
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	1c5a      	adds	r2, r3, #1
 8009cce:	607a      	str	r2, [r7, #4]
 8009cd0:	887a      	ldrh	r2, [r7, #2]
 8009cd2:	b2d2      	uxtb	r2, r2
 8009cd4:	701a      	strb	r2, [r3, #0]
 8009cd6:	887b      	ldrh	r3, [r7, #2]
 8009cd8:	0a1b      	lsrs	r3, r3, #8
 8009cda:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	1c5a      	adds	r2, r3, #1
 8009ce0:	607a      	str	r2, [r7, #4]
 8009ce2:	887a      	ldrh	r2, [r7, #2]
 8009ce4:	b2d2      	uxtb	r2, r2
 8009ce6:	701a      	strb	r2, [r3, #0]
}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	1c5a      	adds	r2, r3, #1
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	683a      	ldr	r2, [r7, #0]
 8009d06:	b2d2      	uxtb	r2, r2
 8009d08:	701a      	strb	r2, [r3, #0]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	0a1b      	lsrs	r3, r3, #8
 8009d0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	1c5a      	adds	r2, r3, #1
 8009d14:	607a      	str	r2, [r7, #4]
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	b2d2      	uxtb	r2, r2
 8009d1a:	701a      	strb	r2, [r3, #0]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	0a1b      	lsrs	r3, r3, #8
 8009d20:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	607a      	str	r2, [r7, #4]
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	b2d2      	uxtb	r2, r2
 8009d2c:	701a      	strb	r2, [r3, #0]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	0a1b      	lsrs	r3, r3, #8
 8009d32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	607a      	str	r2, [r7, #4]
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	b2d2      	uxtb	r2, r2
 8009d3e:	701a      	strb	r2, [r3, #0]
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009d4c:	b480      	push	{r7}
 8009d4e:	b087      	sub	sp, #28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00d      	beq.n	8009d82 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	1c53      	adds	r3, r2, #1
 8009d6a:	613b      	str	r3, [r7, #16]
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	1c59      	adds	r1, r3, #1
 8009d70:	6179      	str	r1, [r7, #20]
 8009d72:	7812      	ldrb	r2, [r2, #0]
 8009d74:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	607b      	str	r3, [r7, #4]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1f1      	bne.n	8009d66 <mem_cpy+0x1a>
	}
}
 8009d82:	bf00      	nop
 8009d84:	371c      	adds	r7, #28
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009d8e:	b480      	push	{r7}
 8009d90:	b087      	sub	sp, #28
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	60f8      	str	r0, [r7, #12]
 8009d96:	60b9      	str	r1, [r7, #8]
 8009d98:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	1c5a      	adds	r2, r3, #1
 8009da2:	617a      	str	r2, [r7, #20]
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	b2d2      	uxtb	r2, r2
 8009da8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	3b01      	subs	r3, #1
 8009dae:	607b      	str	r3, [r7, #4]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1f3      	bne.n	8009d9e <mem_set+0x10>
}
 8009db6:	bf00      	nop
 8009db8:	bf00      	nop
 8009dba:	371c      	adds	r7, #28
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009dc4:	b480      	push	{r7}
 8009dc6:	b089      	sub	sp, #36	; 0x24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	61fb      	str	r3, [r7, #28]
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	1c5a      	adds	r2, r3, #1
 8009de0:	61fa      	str	r2, [r7, #28]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	4619      	mov	r1, r3
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	1c5a      	adds	r2, r3, #1
 8009dea:	61ba      	str	r2, [r7, #24]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	1acb      	subs	r3, r1, r3
 8009df0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	607b      	str	r3, [r7, #4]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <mem_cmp+0x40>
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d0eb      	beq.n	8009ddc <mem_cmp+0x18>

	return r;
 8009e04:	697b      	ldr	r3, [r7, #20]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3724      	adds	r7, #36	; 0x24
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009e1c:	e002      	b.n	8009e24 <chk_chr+0x12>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	3301      	adds	r3, #1
 8009e22:	607b      	str	r3, [r7, #4]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d005      	beq.n	8009e38 <chk_chr+0x26>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	461a      	mov	r2, r3
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d1f2      	bne.n	8009e1e <chk_chr+0xc>
	return *str;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e52:	2300      	movs	r3, #0
 8009e54:	60bb      	str	r3, [r7, #8]
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	60fb      	str	r3, [r7, #12]
 8009e5a:	e029      	b.n	8009eb0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009e5c:	4a27      	ldr	r2, [pc, #156]	; (8009efc <chk_lock+0xb4>)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	011b      	lsls	r3, r3, #4
 8009e62:	4413      	add	r3, r2
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d01d      	beq.n	8009ea6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e6a:	4a24      	ldr	r2, [pc, #144]	; (8009efc <chk_lock+0xb4>)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	011b      	lsls	r3, r3, #4
 8009e70:	4413      	add	r3, r2
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d116      	bne.n	8009eaa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009e7c:	4a1f      	ldr	r2, [pc, #124]	; (8009efc <chk_lock+0xb4>)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	011b      	lsls	r3, r3, #4
 8009e82:	4413      	add	r3, r2
 8009e84:	3304      	adds	r3, #4
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d10c      	bne.n	8009eaa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009e90:	4a1a      	ldr	r2, [pc, #104]	; (8009efc <chk_lock+0xb4>)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	011b      	lsls	r3, r3, #4
 8009e96:	4413      	add	r3, r2
 8009e98:	3308      	adds	r3, #8
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d102      	bne.n	8009eaa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ea4:	e007      	b.n	8009eb6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3301      	adds	r3, #1
 8009eae:	60fb      	str	r3, [r7, #12]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d9d2      	bls.n	8009e5c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d109      	bne.n	8009ed0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d102      	bne.n	8009ec8 <chk_lock+0x80>
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d101      	bne.n	8009ecc <chk_lock+0x84>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	e010      	b.n	8009eee <chk_lock+0xa6>
 8009ecc:	2312      	movs	r3, #18
 8009ece:	e00e      	b.n	8009eee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d108      	bne.n	8009ee8 <chk_lock+0xa0>
 8009ed6:	4a09      	ldr	r2, [pc, #36]	; (8009efc <chk_lock+0xb4>)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	011b      	lsls	r3, r3, #4
 8009edc:	4413      	add	r3, r2
 8009ede:	330c      	adds	r3, #12
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ee6:	d101      	bne.n	8009eec <chk_lock+0xa4>
 8009ee8:	2310      	movs	r3, #16
 8009eea:	e000      	b.n	8009eee <chk_lock+0xa6>
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	20000d20 	.word	0x20000d20

08009f00 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009f06:	2300      	movs	r3, #0
 8009f08:	607b      	str	r3, [r7, #4]
 8009f0a:	e002      	b.n	8009f12 <enq_lock+0x12>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	607b      	str	r3, [r7, #4]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d806      	bhi.n	8009f26 <enq_lock+0x26>
 8009f18:	4a09      	ldr	r2, [pc, #36]	; (8009f40 <enq_lock+0x40>)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	011b      	lsls	r3, r3, #4
 8009f1e:	4413      	add	r3, r2
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1f2      	bne.n	8009f0c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	bf14      	ite	ne
 8009f2c:	2301      	movne	r3, #1
 8009f2e:	2300      	moveq	r3, #0
 8009f30:	b2db      	uxtb	r3, r3
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	20000d20 	.word	0x20000d20

08009f44 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f4e:	2300      	movs	r3, #0
 8009f50:	60fb      	str	r3, [r7, #12]
 8009f52:	e01f      	b.n	8009f94 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009f54:	4a41      	ldr	r2, [pc, #260]	; (800a05c <inc_lock+0x118>)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	011b      	lsls	r3, r3, #4
 8009f5a:	4413      	add	r3, r2
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d113      	bne.n	8009f8e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009f66:	4a3d      	ldr	r2, [pc, #244]	; (800a05c <inc_lock+0x118>)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	011b      	lsls	r3, r3, #4
 8009f6c:	4413      	add	r3, r2
 8009f6e:	3304      	adds	r3, #4
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d109      	bne.n	8009f8e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009f7a:	4a38      	ldr	r2, [pc, #224]	; (800a05c <inc_lock+0x118>)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	011b      	lsls	r3, r3, #4
 8009f80:	4413      	add	r3, r2
 8009f82:	3308      	adds	r3, #8
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d006      	beq.n	8009f9c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3301      	adds	r3, #1
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d9dc      	bls.n	8009f54 <inc_lock+0x10>
 8009f9a:	e000      	b.n	8009f9e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009f9c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d132      	bne.n	800a00a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	60fb      	str	r3, [r7, #12]
 8009fa8:	e002      	b.n	8009fb0 <inc_lock+0x6c>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3301      	adds	r3, #1
 8009fae:	60fb      	str	r3, [r7, #12]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d806      	bhi.n	8009fc4 <inc_lock+0x80>
 8009fb6:	4a29      	ldr	r2, [pc, #164]	; (800a05c <inc_lock+0x118>)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	011b      	lsls	r3, r3, #4
 8009fbc:	4413      	add	r3, r2
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1f2      	bne.n	8009faa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d101      	bne.n	8009fce <inc_lock+0x8a>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	e040      	b.n	800a050 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	4922      	ldr	r1, [pc, #136]	; (800a05c <inc_lock+0x118>)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	011b      	lsls	r3, r3, #4
 8009fd8:	440b      	add	r3, r1
 8009fda:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	689a      	ldr	r2, [r3, #8]
 8009fe0:	491e      	ldr	r1, [pc, #120]	; (800a05c <inc_lock+0x118>)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	011b      	lsls	r3, r3, #4
 8009fe6:	440b      	add	r3, r1
 8009fe8:	3304      	adds	r3, #4
 8009fea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	695a      	ldr	r2, [r3, #20]
 8009ff0:	491a      	ldr	r1, [pc, #104]	; (800a05c <inc_lock+0x118>)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	011b      	lsls	r3, r3, #4
 8009ff6:	440b      	add	r3, r1
 8009ff8:	3308      	adds	r3, #8
 8009ffa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009ffc:	4a17      	ldr	r2, [pc, #92]	; (800a05c <inc_lock+0x118>)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	011b      	lsls	r3, r3, #4
 800a002:	4413      	add	r3, r2
 800a004:	330c      	adds	r3, #12
 800a006:	2200      	movs	r2, #0
 800a008:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d009      	beq.n	800a024 <inc_lock+0xe0>
 800a010:	4a12      	ldr	r2, [pc, #72]	; (800a05c <inc_lock+0x118>)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	011b      	lsls	r3, r3, #4
 800a016:	4413      	add	r3, r2
 800a018:	330c      	adds	r3, #12
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <inc_lock+0xe0>
 800a020:	2300      	movs	r3, #0
 800a022:	e015      	b.n	800a050 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d108      	bne.n	800a03c <inc_lock+0xf8>
 800a02a:	4a0c      	ldr	r2, [pc, #48]	; (800a05c <inc_lock+0x118>)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	011b      	lsls	r3, r3, #4
 800a030:	4413      	add	r3, r2
 800a032:	330c      	adds	r3, #12
 800a034:	881b      	ldrh	r3, [r3, #0]
 800a036:	3301      	adds	r3, #1
 800a038:	b29a      	uxth	r2, r3
 800a03a:	e001      	b.n	800a040 <inc_lock+0xfc>
 800a03c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a040:	4906      	ldr	r1, [pc, #24]	; (800a05c <inc_lock+0x118>)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	011b      	lsls	r3, r3, #4
 800a046:	440b      	add	r3, r1
 800a048:	330c      	adds	r3, #12
 800a04a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	3301      	adds	r3, #1
}
 800a050:	4618      	mov	r0, r3
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	20000d20 	.word	0x20000d20

0800a060 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3b01      	subs	r3, #1
 800a06c:	607b      	str	r3, [r7, #4]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d825      	bhi.n	800a0c0 <dec_lock+0x60>
		n = Files[i].ctr;
 800a074:	4a17      	ldr	r2, [pc, #92]	; (800a0d4 <dec_lock+0x74>)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	011b      	lsls	r3, r3, #4
 800a07a:	4413      	add	r3, r2
 800a07c:	330c      	adds	r3, #12
 800a07e:	881b      	ldrh	r3, [r3, #0]
 800a080:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a082:	89fb      	ldrh	r3, [r7, #14]
 800a084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a088:	d101      	bne.n	800a08e <dec_lock+0x2e>
 800a08a:	2300      	movs	r3, #0
 800a08c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a08e:	89fb      	ldrh	r3, [r7, #14]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <dec_lock+0x3a>
 800a094:	89fb      	ldrh	r3, [r7, #14]
 800a096:	3b01      	subs	r3, #1
 800a098:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a09a:	4a0e      	ldr	r2, [pc, #56]	; (800a0d4 <dec_lock+0x74>)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	011b      	lsls	r3, r3, #4
 800a0a0:	4413      	add	r3, r2
 800a0a2:	330c      	adds	r3, #12
 800a0a4:	89fa      	ldrh	r2, [r7, #14]
 800a0a6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a0a8:	89fb      	ldrh	r3, [r7, #14]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d105      	bne.n	800a0ba <dec_lock+0x5a>
 800a0ae:	4a09      	ldr	r2, [pc, #36]	; (800a0d4 <dec_lock+0x74>)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	011b      	lsls	r3, r3, #4
 800a0b4:	4413      	add	r3, r2
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	737b      	strb	r3, [r7, #13]
 800a0be:	e001      	b.n	800a0c4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a0c4:	7b7b      	ldrb	r3, [r7, #13]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	20000d20 	.word	0x20000d20

0800a0d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	60fb      	str	r3, [r7, #12]
 800a0e4:	e010      	b.n	800a108 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a0e6:	4a0d      	ldr	r2, [pc, #52]	; (800a11c <clear_lock+0x44>)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	011b      	lsls	r3, r3, #4
 800a0ec:	4413      	add	r3, r2
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d105      	bne.n	800a102 <clear_lock+0x2a>
 800a0f6:	4a09      	ldr	r2, [pc, #36]	; (800a11c <clear_lock+0x44>)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	011b      	lsls	r3, r3, #4
 800a0fc:	4413      	add	r3, r2
 800a0fe:	2200      	movs	r2, #0
 800a100:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	3301      	adds	r3, #1
 800a106:	60fb      	str	r3, [r7, #12]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d9eb      	bls.n	800a0e6 <clear_lock+0xe>
	}
}
 800a10e:	bf00      	nop
 800a110:	bf00      	nop
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	20000d20 	.word	0x20000d20

0800a120 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	78db      	ldrb	r3, [r3, #3]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d034      	beq.n	800a19e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a138:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	7858      	ldrb	r0, [r3, #1]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a144:	2301      	movs	r3, #1
 800a146:	697a      	ldr	r2, [r7, #20]
 800a148:	f7ff fd38 	bl	8009bbc <disk_write>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d002      	beq.n	800a158 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a152:	2301      	movs	r3, #1
 800a154:	73fb      	strb	r3, [r7, #15]
 800a156:	e022      	b.n	800a19e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	1ad2      	subs	r2, r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	69db      	ldr	r3, [r3, #28]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d217      	bcs.n	800a19e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	789b      	ldrb	r3, [r3, #2]
 800a172:	613b      	str	r3, [r7, #16]
 800a174:	e010      	b.n	800a198 <sync_window+0x78>
					wsect += fs->fsize;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	69db      	ldr	r3, [r3, #28]
 800a17a:	697a      	ldr	r2, [r7, #20]
 800a17c:	4413      	add	r3, r2
 800a17e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	7858      	ldrb	r0, [r3, #1]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a18a:	2301      	movs	r3, #1
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	f7ff fd15 	bl	8009bbc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	3b01      	subs	r3, #1
 800a196:	613b      	str	r3, [r7, #16]
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d8eb      	bhi.n	800a176 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3718      	adds	r7, #24
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d01b      	beq.n	800a1f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7ff ffad 	bl	800a120 <sync_window>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d113      	bne.n	800a1f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	7858      	ldrb	r0, [r3, #1]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a1da:	2301      	movs	r3, #1
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	f7ff fccd 	bl	8009b7c <disk_read>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d004      	beq.n	800a1f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	683a      	ldr	r2, [r7, #0]
 800a1f6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
	...

0800a204 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f7ff ff87 	bl	800a120 <sync_window>
 800a212:	4603      	mov	r3, r0
 800a214:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a216:	7bfb      	ldrb	r3, [r7, #15]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d158      	bne.n	800a2ce <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	2b03      	cmp	r3, #3
 800a222:	d148      	bne.n	800a2b6 <sync_fs+0xb2>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	791b      	ldrb	r3, [r3, #4]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d144      	bne.n	800a2b6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	3334      	adds	r3, #52	; 0x34
 800a230:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a234:	2100      	movs	r1, #0
 800a236:	4618      	mov	r0, r3
 800a238:	f7ff fda9 	bl	8009d8e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	3334      	adds	r3, #52	; 0x34
 800a240:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a244:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a248:	4618      	mov	r0, r3
 800a24a:	f7ff fd38 	bl	8009cbe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	3334      	adds	r3, #52	; 0x34
 800a252:	4921      	ldr	r1, [pc, #132]	; (800a2d8 <sync_fs+0xd4>)
 800a254:	4618      	mov	r0, r3
 800a256:	f7ff fd4d 	bl	8009cf4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3334      	adds	r3, #52	; 0x34
 800a25e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a262:	491e      	ldr	r1, [pc, #120]	; (800a2dc <sync_fs+0xd8>)
 800a264:	4618      	mov	r0, r3
 800a266:	f7ff fd45 	bl	8009cf4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	3334      	adds	r3, #52	; 0x34
 800a26e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	695b      	ldr	r3, [r3, #20]
 800a276:	4619      	mov	r1, r3
 800a278:	4610      	mov	r0, r2
 800a27a:	f7ff fd3b 	bl	8009cf4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	3334      	adds	r3, #52	; 0x34
 800a282:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	4619      	mov	r1, r3
 800a28c:	4610      	mov	r0, r2
 800a28e:	f7ff fd31 	bl	8009cf4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	1c5a      	adds	r2, r3, #1
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	7858      	ldrb	r0, [r3, #1]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	f7ff fc86 	bl	8009bbc <disk_write>
			fs->fsi_flag = 0;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	785b      	ldrb	r3, [r3, #1]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	2100      	movs	r1, #0
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7ff fc9c 	bl	8009bfc <disk_ioctl>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <sync_fs+0xca>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	41615252 	.word	0x41615252
 800a2dc:	61417272 	.word	0x61417272

0800a2e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	3b02      	subs	r3, #2
 800a2ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	3b02      	subs	r3, #2
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d301      	bcc.n	800a300 <clust2sect+0x20>
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	e008      	b.n	800a312 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	895b      	ldrh	r3, [r3, #10]
 800a304:	461a      	mov	r2, r3
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	fb03 f202 	mul.w	r2, r3, r2
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a310:	4413      	add	r3, r2
}
 800a312:	4618      	mov	r0, r3
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b086      	sub	sp, #24
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d904      	bls.n	800a33e <get_fat+0x20>
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	683a      	ldr	r2, [r7, #0]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d302      	bcc.n	800a344 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a33e:	2301      	movs	r3, #1
 800a340:	617b      	str	r3, [r7, #20]
 800a342:	e08f      	b.n	800a464 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a344:	f04f 33ff 	mov.w	r3, #4294967295
 800a348:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	2b03      	cmp	r3, #3
 800a350:	d062      	beq.n	800a418 <get_fat+0xfa>
 800a352:	2b03      	cmp	r3, #3
 800a354:	dc7c      	bgt.n	800a450 <get_fat+0x132>
 800a356:	2b01      	cmp	r3, #1
 800a358:	d002      	beq.n	800a360 <get_fat+0x42>
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d042      	beq.n	800a3e4 <get_fat+0xc6>
 800a35e:	e077      	b.n	800a450 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	60fb      	str	r3, [r7, #12]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	085b      	lsrs	r3, r3, #1
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	4413      	add	r3, r2
 800a36c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	0a5b      	lsrs	r3, r3, #9
 800a376:	4413      	add	r3, r2
 800a378:	4619      	mov	r1, r3
 800a37a:	6938      	ldr	r0, [r7, #16]
 800a37c:	f7ff ff14 	bl	800a1a8 <move_window>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d167      	bne.n	800a456 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	1c5a      	adds	r2, r3, #1
 800a38a:	60fa      	str	r2, [r7, #12]
 800a38c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	4413      	add	r3, r2
 800a394:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a398:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	0a5b      	lsrs	r3, r3, #9
 800a3a2:	4413      	add	r3, r2
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	6938      	ldr	r0, [r7, #16]
 800a3a8:	f7ff fefe 	bl	800a1a8 <move_window>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d153      	bne.n	800a45a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a3c0:	021b      	lsls	r3, r3, #8
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	f003 0301 	and.w	r3, r3, #1
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d002      	beq.n	800a3da <get_fat+0xbc>
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	091b      	lsrs	r3, r3, #4
 800a3d8:	e002      	b.n	800a3e0 <get_fat+0xc2>
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3e0:	617b      	str	r3, [r7, #20]
			break;
 800a3e2:	e03f      	b.n	800a464 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	0a1b      	lsrs	r3, r3, #8
 800a3ec:	4413      	add	r3, r2
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6938      	ldr	r0, [r7, #16]
 800a3f2:	f7ff fed9 	bl	800a1a8 <move_window>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d130      	bne.n	800a45e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	005b      	lsls	r3, r3, #1
 800a406:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a40a:	4413      	add	r3, r2
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7ff fc1b 	bl	8009c48 <ld_word>
 800a412:	4603      	mov	r3, r0
 800a414:	617b      	str	r3, [r7, #20]
			break;
 800a416:	e025      	b.n	800a464 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	09db      	lsrs	r3, r3, #7
 800a420:	4413      	add	r3, r2
 800a422:	4619      	mov	r1, r3
 800a424:	6938      	ldr	r0, [r7, #16]
 800a426:	f7ff febf 	bl	800a1a8 <move_window>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d118      	bne.n	800a462 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a43e:	4413      	add	r3, r2
 800a440:	4618      	mov	r0, r3
 800a442:	f7ff fc19 	bl	8009c78 <ld_dword>
 800a446:	4603      	mov	r3, r0
 800a448:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a44c:	617b      	str	r3, [r7, #20]
			break;
 800a44e:	e009      	b.n	800a464 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a450:	2301      	movs	r3, #1
 800a452:	617b      	str	r3, [r7, #20]
 800a454:	e006      	b.n	800a464 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a456:	bf00      	nop
 800a458:	e004      	b.n	800a464 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a45a:	bf00      	nop
 800a45c:	e002      	b.n	800a464 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a45e:	bf00      	nop
 800a460:	e000      	b.n	800a464 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a462:	bf00      	nop
		}
	}

	return val;
 800a464:	697b      	ldr	r3, [r7, #20]
}
 800a466:	4618      	mov	r0, r3
 800a468:	3718      	adds	r7, #24
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a46e:	b590      	push	{r4, r7, lr}
 800a470:	b089      	sub	sp, #36	; 0x24
 800a472:	af00      	add	r7, sp, #0
 800a474:	60f8      	str	r0, [r7, #12]
 800a476:	60b9      	str	r1, [r7, #8]
 800a478:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a47a:	2302      	movs	r3, #2
 800a47c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2b01      	cmp	r3, #1
 800a482:	f240 80d9 	bls.w	800a638 <put_fat+0x1ca>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	699b      	ldr	r3, [r3, #24]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	f080 80d3 	bcs.w	800a638 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	2b03      	cmp	r3, #3
 800a498:	f000 8096 	beq.w	800a5c8 <put_fat+0x15a>
 800a49c:	2b03      	cmp	r3, #3
 800a49e:	f300 80cb 	bgt.w	800a638 <put_fat+0x1ca>
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d002      	beq.n	800a4ac <put_fat+0x3e>
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d06e      	beq.n	800a588 <put_fat+0x11a>
 800a4aa:	e0c5      	b.n	800a638 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	61bb      	str	r3, [r7, #24]
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	085b      	lsrs	r3, r3, #1
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	0a5b      	lsrs	r3, r3, #9
 800a4c2:	4413      	add	r3, r2
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f7ff fe6e 	bl	800a1a8 <move_window>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4d0:	7ffb      	ldrb	r3, [r7, #31]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f040 80a9 	bne.w	800a62a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	1c59      	adds	r1, r3, #1
 800a4e2:	61b9      	str	r1, [r7, #24]
 800a4e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4e8:	4413      	add	r3, r2
 800a4ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00d      	beq.n	800a512 <put_fat+0xa4>
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	b25b      	sxtb	r3, r3
 800a4fc:	f003 030f 	and.w	r3, r3, #15
 800a500:	b25a      	sxtb	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	b2db      	uxtb	r3, r3
 800a506:	011b      	lsls	r3, r3, #4
 800a508:	b25b      	sxtb	r3, r3
 800a50a:	4313      	orrs	r3, r2
 800a50c:	b25b      	sxtb	r3, r3
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	e001      	b.n	800a516 <put_fat+0xa8>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	b2db      	uxtb	r3, r3
 800a516:	697a      	ldr	r2, [r7, #20]
 800a518:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2201      	movs	r2, #1
 800a51e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	0a5b      	lsrs	r3, r3, #9
 800a528:	4413      	add	r3, r2
 800a52a:	4619      	mov	r1, r3
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f7ff fe3b 	bl	800a1a8 <move_window>
 800a532:	4603      	mov	r3, r0
 800a534:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a536:	7ffb      	ldrb	r3, [r7, #31]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d178      	bne.n	800a62e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a548:	4413      	add	r3, r2
 800a54a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	f003 0301 	and.w	r3, r3, #1
 800a552:	2b00      	cmp	r3, #0
 800a554:	d003      	beq.n	800a55e <put_fat+0xf0>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	091b      	lsrs	r3, r3, #4
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	e00e      	b.n	800a57c <put_fat+0x10e>
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	b25b      	sxtb	r3, r3
 800a564:	f023 030f 	bic.w	r3, r3, #15
 800a568:	b25a      	sxtb	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	0a1b      	lsrs	r3, r3, #8
 800a56e:	b25b      	sxtb	r3, r3
 800a570:	f003 030f 	and.w	r3, r3, #15
 800a574:	b25b      	sxtb	r3, r3
 800a576:	4313      	orrs	r3, r2
 800a578:	b25b      	sxtb	r3, r3
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2201      	movs	r2, #1
 800a584:	70da      	strb	r2, [r3, #3]
			break;
 800a586:	e057      	b.n	800a638 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	0a1b      	lsrs	r3, r3, #8
 800a590:	4413      	add	r3, r2
 800a592:	4619      	mov	r1, r3
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f7ff fe07 	bl	800a1a8 <move_window>
 800a59a:	4603      	mov	r3, r0
 800a59c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a59e:	7ffb      	ldrb	r3, [r7, #31]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d146      	bne.n	800a632 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	005b      	lsls	r3, r3, #1
 800a5ae:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a5b2:	4413      	add	r3, r2
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	b292      	uxth	r2, r2
 800a5b8:	4611      	mov	r1, r2
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7ff fb7f 	bl	8009cbe <st_word>
			fs->wflag = 1;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	70da      	strb	r2, [r3, #3]
			break;
 800a5c6:	e037      	b.n	800a638 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	09db      	lsrs	r3, r3, #7
 800a5d0:	4413      	add	r3, r2
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f7ff fde7 	bl	800a1a8 <move_window>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5de:	7ffb      	ldrb	r3, [r7, #31]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d128      	bne.n	800a636 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a5f8:	4413      	add	r3, r2
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7ff fb3c 	bl	8009c78 <ld_dword>
 800a600:	4603      	mov	r3, r0
 800a602:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a606:	4323      	orrs	r3, r4
 800a608:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a618:	4413      	add	r3, r2
 800a61a:	6879      	ldr	r1, [r7, #4]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7ff fb69 	bl	8009cf4 <st_dword>
			fs->wflag = 1;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2201      	movs	r2, #1
 800a626:	70da      	strb	r2, [r3, #3]
			break;
 800a628:	e006      	b.n	800a638 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a62a:	bf00      	nop
 800a62c:	e004      	b.n	800a638 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a62e:	bf00      	nop
 800a630:	e002      	b.n	800a638 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a632:	bf00      	nop
 800a634:	e000      	b.n	800a638 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a636:	bf00      	nop
		}
	}
	return res;
 800a638:	7ffb      	ldrb	r3, [r7, #31]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3724      	adds	r7, #36	; 0x24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd90      	pop	{r4, r7, pc}

0800a642 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b088      	sub	sp, #32
 800a646:	af00      	add	r7, sp, #0
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	60b9      	str	r1, [r7, #8]
 800a64c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a64e:	2300      	movs	r3, #0
 800a650:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d904      	bls.n	800a668 <remove_chain+0x26>
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	429a      	cmp	r2, r3
 800a666:	d301      	bcc.n	800a66c <remove_chain+0x2a>
 800a668:	2302      	movs	r3, #2
 800a66a:	e04b      	b.n	800a704 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00c      	beq.n	800a68c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a672:	f04f 32ff 	mov.w	r2, #4294967295
 800a676:	6879      	ldr	r1, [r7, #4]
 800a678:	69b8      	ldr	r0, [r7, #24]
 800a67a:	f7ff fef8 	bl	800a46e <put_fat>
 800a67e:	4603      	mov	r3, r0
 800a680:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a682:	7ffb      	ldrb	r3, [r7, #31]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <remove_chain+0x4a>
 800a688:	7ffb      	ldrb	r3, [r7, #31]
 800a68a:	e03b      	b.n	800a704 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a68c:	68b9      	ldr	r1, [r7, #8]
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f7ff fe45 	bl	800a31e <get_fat>
 800a694:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d031      	beq.n	800a700 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d101      	bne.n	800a6a6 <remove_chain+0x64>
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	e02e      	b.n	800a704 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ac:	d101      	bne.n	800a6b2 <remove_chain+0x70>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e028      	b.n	800a704 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	68b9      	ldr	r1, [r7, #8]
 800a6b6:	69b8      	ldr	r0, [r7, #24]
 800a6b8:	f7ff fed9 	bl	800a46e <put_fat>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a6c0:	7ffb      	ldrb	r3, [r7, #31]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <remove_chain+0x88>
 800a6c6:	7ffb      	ldrb	r3, [r7, #31]
 800a6c8:	e01c      	b.n	800a704 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	695a      	ldr	r2, [r3, #20]
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	3b02      	subs	r3, #2
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d20b      	bcs.n	800a6f0 <remove_chain+0xae>
			fs->free_clst++;
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	1c5a      	adds	r2, r3, #1
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	791b      	ldrb	r3, [r3, #4]
 800a6e6:	f043 0301 	orr.w	r3, r3, #1
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d3c6      	bcc.n	800a68c <remove_chain+0x4a>
 800a6fe:	e000      	b.n	800a702 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a700:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3720      	adds	r7, #32
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d10d      	bne.n	800a73e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d004      	beq.n	800a738 <create_chain+0x2c>
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	69ba      	ldr	r2, [r7, #24]
 800a734:	429a      	cmp	r2, r3
 800a736:	d31b      	bcc.n	800a770 <create_chain+0x64>
 800a738:	2301      	movs	r3, #1
 800a73a:	61bb      	str	r3, [r7, #24]
 800a73c:	e018      	b.n	800a770 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff fdec 	bl	800a31e <get_fat>
 800a746:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d801      	bhi.n	800a752 <create_chain+0x46>
 800a74e:	2301      	movs	r3, #1
 800a750:	e070      	b.n	800a834 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a758:	d101      	bne.n	800a75e <create_chain+0x52>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	e06a      	b.n	800a834 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	429a      	cmp	r2, r3
 800a766:	d201      	bcs.n	800a76c <create_chain+0x60>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	e063      	b.n	800a834 <create_chain+0x128>
		scl = clst;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	3301      	adds	r3, #1
 800a778:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	699b      	ldr	r3, [r3, #24]
 800a77e:	69fa      	ldr	r2, [r7, #28]
 800a780:	429a      	cmp	r2, r3
 800a782:	d307      	bcc.n	800a794 <create_chain+0x88>
				ncl = 2;
 800a784:	2302      	movs	r3, #2
 800a786:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a788:	69fa      	ldr	r2, [r7, #28]
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d901      	bls.n	800a794 <create_chain+0x88>
 800a790:	2300      	movs	r3, #0
 800a792:	e04f      	b.n	800a834 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a794:	69f9      	ldr	r1, [r7, #28]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f7ff fdc1 	bl	800a31e <get_fat>
 800a79c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00e      	beq.n	800a7c2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d003      	beq.n	800a7b2 <create_chain+0xa6>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b0:	d101      	bne.n	800a7b6 <create_chain+0xaa>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	e03e      	b.n	800a834 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a7b6:	69fa      	ldr	r2, [r7, #28]
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d1da      	bne.n	800a774 <create_chain+0x68>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	e038      	b.n	800a834 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a7c2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a7c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c8:	69f9      	ldr	r1, [r7, #28]
 800a7ca:	6938      	ldr	r0, [r7, #16]
 800a7cc:	f7ff fe4f 	bl	800a46e <put_fat>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a7d4:	7dfb      	ldrb	r3, [r7, #23]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d109      	bne.n	800a7ee <create_chain+0xe2>
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d006      	beq.n	800a7ee <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a7e0:	69fa      	ldr	r2, [r7, #28]
 800a7e2:	6839      	ldr	r1, [r7, #0]
 800a7e4:	6938      	ldr	r0, [r7, #16]
 800a7e6:	f7ff fe42 	bl	800a46e <put_fat>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d116      	bne.n	800a822 <create_chain+0x116>
		fs->last_clst = ncl;
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	69fa      	ldr	r2, [r7, #28]
 800a7f8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	695a      	ldr	r2, [r3, #20]
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	699b      	ldr	r3, [r3, #24]
 800a802:	3b02      	subs	r3, #2
 800a804:	429a      	cmp	r2, r3
 800a806:	d804      	bhi.n	800a812 <create_chain+0x106>
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	695b      	ldr	r3, [r3, #20]
 800a80c:	1e5a      	subs	r2, r3, #1
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	791b      	ldrb	r3, [r3, #4]
 800a816:	f043 0301 	orr.w	r3, r3, #1
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	711a      	strb	r2, [r3, #4]
 800a820:	e007      	b.n	800a832 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a822:	7dfb      	ldrb	r3, [r7, #23]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d102      	bne.n	800a82e <create_chain+0x122>
 800a828:	f04f 33ff 	mov.w	r3, #4294967295
 800a82c:	e000      	b.n	800a830 <create_chain+0x124>
 800a82e:	2301      	movs	r3, #1
 800a830:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a832:	69fb      	ldr	r3, [r7, #28]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3720      	adds	r7, #32
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a850:	3304      	adds	r3, #4
 800a852:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	0a5b      	lsrs	r3, r3, #9
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	8952      	ldrh	r2, [r2, #10]
 800a85c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a860:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	1d1a      	adds	r2, r3, #4
 800a866:	613a      	str	r2, [r7, #16]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d101      	bne.n	800a876 <clmt_clust+0x3a>
 800a872:	2300      	movs	r3, #0
 800a874:	e010      	b.n	800a898 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d307      	bcc.n	800a88e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a87e:	697a      	ldr	r2, [r7, #20]
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	617b      	str	r3, [r7, #20]
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	3304      	adds	r3, #4
 800a88a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a88c:	e7e9      	b.n	800a862 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a88e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	4413      	add	r3, r2
}
 800a898:	4618      	mov	r0, r3
 800a89a:	371c      	adds	r7, #28
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8ba:	d204      	bcs.n	800a8c6 <dir_sdi+0x22>
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	f003 031f 	and.w	r3, r3, #31
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <dir_sdi+0x26>
		return FR_INT_ERR;
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	e063      	b.n	800a992 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	683a      	ldr	r2, [r7, #0]
 800a8ce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d106      	bne.n	800a8ea <dir_sdi+0x46>
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	d902      	bls.n	800a8ea <dir_sdi+0x46>
		clst = fs->dirbase;
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10c      	bne.n	800a90a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	095b      	lsrs	r3, r3, #5
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	8912      	ldrh	r2, [r2, #8]
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d301      	bcc.n	800a900 <dir_sdi+0x5c>
 800a8fc:	2302      	movs	r3, #2
 800a8fe:	e048      	b.n	800a992 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	61da      	str	r2, [r3, #28]
 800a908:	e029      	b.n	800a95e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	895b      	ldrh	r3, [r3, #10]
 800a90e:	025b      	lsls	r3, r3, #9
 800a910:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a912:	e019      	b.n	800a948 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6979      	ldr	r1, [r7, #20]
 800a918:	4618      	mov	r0, r3
 800a91a:	f7ff fd00 	bl	800a31e <get_fat>
 800a91e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a926:	d101      	bne.n	800a92c <dir_sdi+0x88>
 800a928:	2301      	movs	r3, #1
 800a92a:	e032      	b.n	800a992 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d904      	bls.n	800a93c <dir_sdi+0x98>
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	697a      	ldr	r2, [r7, #20]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d301      	bcc.n	800a940 <dir_sdi+0x9c>
 800a93c:	2302      	movs	r3, #2
 800a93e:	e028      	b.n	800a992 <dir_sdi+0xee>
			ofs -= csz;
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a948:	683a      	ldr	r2, [r7, #0]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d2e1      	bcs.n	800a914 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a950:	6979      	ldr	r1, [r7, #20]
 800a952:	6938      	ldr	r0, [r7, #16]
 800a954:	f7ff fcc4 	bl	800a2e0 <clust2sect>
 800a958:	4602      	mov	r2, r0
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	69db      	ldr	r3, [r3, #28]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d101      	bne.n	800a970 <dir_sdi+0xcc>
 800a96c:	2302      	movs	r3, #2
 800a96e:	e010      	b.n	800a992 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	69da      	ldr	r2, [r3, #28]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	0a5b      	lsrs	r3, r3, #9
 800a978:	441a      	add	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a98a:	441a      	add	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3718      	adds	r7, #24
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b086      	sub	sp, #24
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	3320      	adds	r3, #32
 800a9b0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <dir_next+0x28>
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9c0:	d301      	bcc.n	800a9c6 <dir_next+0x2c>
 800a9c2:	2304      	movs	r3, #4
 800a9c4:	e0aa      	b.n	800ab1c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f040 8098 	bne.w	800ab02 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	69db      	ldr	r3, [r3, #28]
 800a9d6:	1c5a      	adds	r2, r3, #1
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d10b      	bne.n	800a9fc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	095b      	lsrs	r3, r3, #5
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	8912      	ldrh	r2, [r2, #8]
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	f0c0 8088 	bcc.w	800ab02 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	61da      	str	r2, [r3, #28]
 800a9f8:	2304      	movs	r3, #4
 800a9fa:	e08f      	b.n	800ab1c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	0a5b      	lsrs	r3, r3, #9
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	8952      	ldrh	r2, [r2, #10]
 800aa04:	3a01      	subs	r2, #1
 800aa06:	4013      	ands	r3, r2
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d17a      	bne.n	800ab02 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	4619      	mov	r1, r3
 800aa14:	4610      	mov	r0, r2
 800aa16:	f7ff fc82 	bl	800a31e <get_fat>
 800aa1a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d801      	bhi.n	800aa26 <dir_next+0x8c>
 800aa22:	2302      	movs	r3, #2
 800aa24:	e07a      	b.n	800ab1c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2c:	d101      	bne.n	800aa32 <dir_next+0x98>
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e074      	b.n	800ab1c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d358      	bcc.n	800aaee <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d104      	bne.n	800aa4c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	61da      	str	r2, [r3, #28]
 800aa48:	2304      	movs	r3, #4
 800aa4a:	e067      	b.n	800ab1c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	4619      	mov	r1, r3
 800aa54:	4610      	mov	r0, r2
 800aa56:	f7ff fe59 	bl	800a70c <create_chain>
 800aa5a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d101      	bne.n	800aa66 <dir_next+0xcc>
 800aa62:	2307      	movs	r3, #7
 800aa64:	e05a      	b.n	800ab1c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d101      	bne.n	800aa70 <dir_next+0xd6>
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	e055      	b.n	800ab1c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa76:	d101      	bne.n	800aa7c <dir_next+0xe2>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e04f      	b.n	800ab1c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f7ff fb4f 	bl	800a120 <sync_window>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d001      	beq.n	800aa8c <dir_next+0xf2>
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e047      	b.n	800ab1c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	3334      	adds	r3, #52	; 0x34
 800aa90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa94:	2100      	movs	r1, #0
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7ff f979 	bl	8009d8e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	613b      	str	r3, [r7, #16]
 800aaa0:	6979      	ldr	r1, [r7, #20]
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f7ff fc1c 	bl	800a2e0 <clust2sect>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	631a      	str	r2, [r3, #48]	; 0x30
 800aaae:	e012      	b.n	800aad6 <dir_next+0x13c>
						fs->wflag = 1;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2201      	movs	r2, #1
 800aab4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f7ff fb32 	bl	800a120 <sync_window>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <dir_next+0x12c>
 800aac2:	2301      	movs	r3, #1
 800aac4:	e02a      	b.n	800ab1c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	3301      	adds	r3, #1
 800aaca:	613b      	str	r3, [r7, #16]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	631a      	str	r2, [r3, #48]	; 0x30
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	895b      	ldrh	r3, [r3, #10]
 800aada:	461a      	mov	r2, r3
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	4293      	cmp	r3, r2
 800aae0:	d3e6      	bcc.n	800aab0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	1ad2      	subs	r2, r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	697a      	ldr	r2, [r7, #20]
 800aaf2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aaf4:	6979      	ldr	r1, [r7, #20]
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f7ff fbf2 	bl	800a2e0 <clust2sect>
 800aafc:	4602      	mov	r2, r0
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab14:	441a      	add	r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3718      	adds	r7, #24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b086      	sub	sp, #24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ab34:	2100      	movs	r1, #0
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7ff feb4 	bl	800a8a4 <dir_sdi>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab40:	7dfb      	ldrb	r3, [r7, #23]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d12b      	bne.n	800ab9e <dir_alloc+0x7a>
		n = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	69db      	ldr	r3, [r3, #28]
 800ab4e:	4619      	mov	r1, r3
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f7ff fb29 	bl	800a1a8 <move_window>
 800ab56:	4603      	mov	r3, r0
 800ab58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ab5a:	7dfb      	ldrb	r3, [r7, #23]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d11d      	bne.n	800ab9c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a1b      	ldr	r3, [r3, #32]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	2be5      	cmp	r3, #229	; 0xe5
 800ab68:	d004      	beq.n	800ab74 <dir_alloc+0x50>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d107      	bne.n	800ab84 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	3301      	adds	r3, #1
 800ab78:	613b      	str	r3, [r7, #16]
 800ab7a:	693a      	ldr	r2, [r7, #16]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d102      	bne.n	800ab88 <dir_alloc+0x64>
 800ab82:	e00c      	b.n	800ab9e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ab84:	2300      	movs	r3, #0
 800ab86:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ab88:	2101      	movs	r1, #1
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7ff ff05 	bl	800a99a <dir_next>
 800ab90:	4603      	mov	r3, r0
 800ab92:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ab94:	7dfb      	ldrb	r3, [r7, #23]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d0d7      	beq.n	800ab4a <dir_alloc+0x26>
 800ab9a:	e000      	b.n	800ab9e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ab9c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ab9e:	7dfb      	ldrb	r3, [r7, #23]
 800aba0:	2b04      	cmp	r3, #4
 800aba2:	d101      	bne.n	800aba8 <dir_alloc+0x84>
 800aba4:	2307      	movs	r3, #7
 800aba6:	75fb      	strb	r3, [r7, #23]
	return res;
 800aba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3718      	adds	r7, #24
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	331a      	adds	r3, #26
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff f841 	bl	8009c48 <ld_word>
 800abc6:	4603      	mov	r3, r0
 800abc8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	2b03      	cmp	r3, #3
 800abd0:	d109      	bne.n	800abe6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	3314      	adds	r3, #20
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff f836 	bl	8009c48 <ld_word>
 800abdc:	4603      	mov	r3, r0
 800abde:	041b      	lsls	r3, r3, #16
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800abe6:	68fb      	ldr	r3, [r7, #12]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	331a      	adds	r3, #26
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	b292      	uxth	r2, r2
 800ac04:	4611      	mov	r1, r2
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7ff f859 	bl	8009cbe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	2b03      	cmp	r3, #3
 800ac12:	d109      	bne.n	800ac28 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	f103 0214 	add.w	r2, r3, #20
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	0c1b      	lsrs	r3, r3, #16
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	4619      	mov	r1, r3
 800ac22:	4610      	mov	r0, r2
 800ac24:	f7ff f84b 	bl	8009cbe <st_word>
	}
}
 800ac28:	bf00      	nop
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ac30:	b590      	push	{r4, r7, lr}
 800ac32:	b087      	sub	sp, #28
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	331a      	adds	r3, #26
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7ff f802 	bl	8009c48 <ld_word>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d001      	beq.n	800ac4e <cmp_lfn+0x1e>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	e059      	b.n	800ad02 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac56:	1e5a      	subs	r2, r3, #1
 800ac58:	4613      	mov	r3, r2
 800ac5a:	005b      	lsls	r3, r3, #1
 800ac5c:	4413      	add	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ac64:	2301      	movs	r3, #1
 800ac66:	81fb      	strh	r3, [r7, #14]
 800ac68:	2300      	movs	r3, #0
 800ac6a:	613b      	str	r3, [r7, #16]
 800ac6c:	e033      	b.n	800acd6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ac6e:	4a27      	ldr	r2, [pc, #156]	; (800ad0c <cmp_lfn+0xdc>)
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	4413      	add	r3, r2
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	461a      	mov	r2, r3
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fe ffe3 	bl	8009c48 <ld_word>
 800ac82:	4603      	mov	r3, r0
 800ac84:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ac86:	89fb      	ldrh	r3, [r7, #14]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d01a      	beq.n	800acc2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	2bfe      	cmp	r3, #254	; 0xfe
 800ac90:	d812      	bhi.n	800acb8 <cmp_lfn+0x88>
 800ac92:	89bb      	ldrh	r3, [r7, #12]
 800ac94:	4618      	mov	r0, r3
 800ac96:	f002 fea1 	bl	800d9dc <ff_wtoupper>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	461c      	mov	r4, r3
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	1c5a      	adds	r2, r3, #1
 800aca2:	617a      	str	r2, [r7, #20]
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	4413      	add	r3, r2
 800acaa:	881b      	ldrh	r3, [r3, #0]
 800acac:	4618      	mov	r0, r3
 800acae:	f002 fe95 	bl	800d9dc <ff_wtoupper>
 800acb2:	4603      	mov	r3, r0
 800acb4:	429c      	cmp	r4, r3
 800acb6:	d001      	beq.n	800acbc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800acb8:	2300      	movs	r3, #0
 800acba:	e022      	b.n	800ad02 <cmp_lfn+0xd2>
			}
			wc = uc;
 800acbc:	89bb      	ldrh	r3, [r7, #12]
 800acbe:	81fb      	strh	r3, [r7, #14]
 800acc0:	e006      	b.n	800acd0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800acc2:	89bb      	ldrh	r3, [r7, #12]
 800acc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acc8:	4293      	cmp	r3, r2
 800acca:	d001      	beq.n	800acd0 <cmp_lfn+0xa0>
 800accc:	2300      	movs	r3, #0
 800acce:	e018      	b.n	800ad02 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	3301      	adds	r3, #1
 800acd4:	613b      	str	r3, [r7, #16]
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	2b0c      	cmp	r3, #12
 800acda:	d9c8      	bls.n	800ac6e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00b      	beq.n	800ad00 <cmp_lfn+0xd0>
 800ace8:	89fb      	ldrh	r3, [r7, #14]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d008      	beq.n	800ad00 <cmp_lfn+0xd0>
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	005b      	lsls	r3, r3, #1
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	4413      	add	r3, r2
 800acf6:	881b      	ldrh	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d001      	beq.n	800ad00 <cmp_lfn+0xd0>
 800acfc:	2300      	movs	r3, #0
 800acfe:	e000      	b.n	800ad02 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ad00:	2301      	movs	r3, #1
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	371c      	adds	r7, #28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd90      	pop	{r4, r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	08013de0 	.word	0x08013de0

0800ad10 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	331a      	adds	r3, #26
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fe ff92 	bl	8009c48 <ld_word>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d001      	beq.n	800ad2e <pick_lfn+0x1e>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e04d      	b.n	800adca <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad36:	1e5a      	subs	r2, r3, #1
 800ad38:	4613      	mov	r3, r2
 800ad3a:	005b      	lsls	r3, r3, #1
 800ad3c:	4413      	add	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4413      	add	r3, r2
 800ad42:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ad44:	2301      	movs	r3, #1
 800ad46:	81fb      	strh	r3, [r7, #14]
 800ad48:	2300      	movs	r3, #0
 800ad4a:	613b      	str	r3, [r7, #16]
 800ad4c:	e028      	b.n	800ada0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ad4e:	4a21      	ldr	r2, [pc, #132]	; (800add4 <pick_lfn+0xc4>)
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	4413      	add	r3, r2
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	461a      	mov	r2, r3
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7fe ff73 	bl	8009c48 <ld_word>
 800ad62:	4603      	mov	r3, r0
 800ad64:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ad66:	89fb      	ldrh	r3, [r7, #14]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00f      	beq.n	800ad8c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	2bfe      	cmp	r3, #254	; 0xfe
 800ad70:	d901      	bls.n	800ad76 <pick_lfn+0x66>
 800ad72:	2300      	movs	r3, #0
 800ad74:	e029      	b.n	800adca <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ad76:	89bb      	ldrh	r3, [r7, #12]
 800ad78:	81fb      	strh	r3, [r7, #14]
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	1c5a      	adds	r2, r3, #1
 800ad7e:	617a      	str	r2, [r7, #20]
 800ad80:	005b      	lsls	r3, r3, #1
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	4413      	add	r3, r2
 800ad86:	89fa      	ldrh	r2, [r7, #14]
 800ad88:	801a      	strh	r2, [r3, #0]
 800ad8a:	e006      	b.n	800ad9a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ad8c:	89bb      	ldrh	r3, [r7, #12]
 800ad8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d001      	beq.n	800ad9a <pick_lfn+0x8a>
 800ad96:	2300      	movs	r3, #0
 800ad98:	e017      	b.n	800adca <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	613b      	str	r3, [r7, #16]
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	2b0c      	cmp	r3, #12
 800ada4:	d9d3      	bls.n	800ad4e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00a      	beq.n	800adc8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2bfe      	cmp	r3, #254	; 0xfe
 800adb6:	d901      	bls.n	800adbc <pick_lfn+0xac>
 800adb8:	2300      	movs	r3, #0
 800adba:	e006      	b.n	800adca <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	005b      	lsls	r3, r3, #1
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	4413      	add	r3, r2
 800adc4:	2200      	movs	r2, #0
 800adc6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800adc8:	2301      	movs	r3, #1
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	08013de0 	.word	0x08013de0

0800add8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b088      	sub	sp, #32
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	4611      	mov	r1, r2
 800ade4:	461a      	mov	r2, r3
 800ade6:	460b      	mov	r3, r1
 800ade8:	71fb      	strb	r3, [r7, #7]
 800adea:	4613      	mov	r3, r2
 800adec:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	330d      	adds	r3, #13
 800adf2:	79ba      	ldrb	r2, [r7, #6]
 800adf4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	330b      	adds	r3, #11
 800adfa:	220f      	movs	r2, #15
 800adfc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	330c      	adds	r3, #12
 800ae02:	2200      	movs	r2, #0
 800ae04:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	331a      	adds	r3, #26
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7fe ff56 	bl	8009cbe <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ae12:	79fb      	ldrb	r3, [r7, #7]
 800ae14:	1e5a      	subs	r2, r3, #1
 800ae16:	4613      	mov	r3, r2
 800ae18:	005b      	lsls	r3, r3, #1
 800ae1a:	4413      	add	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	4413      	add	r3, r2
 800ae20:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ae22:	2300      	movs	r3, #0
 800ae24:	82fb      	strh	r3, [r7, #22]
 800ae26:	2300      	movs	r3, #0
 800ae28:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ae2a:	8afb      	ldrh	r3, [r7, #22]
 800ae2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d007      	beq.n	800ae44 <put_lfn+0x6c>
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	1c5a      	adds	r2, r3, #1
 800ae38:	61fa      	str	r2, [r7, #28]
 800ae3a:	005b      	lsls	r3, r3, #1
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	4413      	add	r3, r2
 800ae40:	881b      	ldrh	r3, [r3, #0]
 800ae42:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ae44:	4a17      	ldr	r2, [pc, #92]	; (800aea4 <put_lfn+0xcc>)
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	4413      	add	r3, r2
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	4413      	add	r3, r2
 800ae52:	8afa      	ldrh	r2, [r7, #22]
 800ae54:	4611      	mov	r1, r2
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7fe ff31 	bl	8009cbe <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ae5c:	8afb      	ldrh	r3, [r7, #22]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d102      	bne.n	800ae68 <put_lfn+0x90>
 800ae62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae66:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	61bb      	str	r3, [r7, #24]
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	2b0c      	cmp	r3, #12
 800ae72:	d9da      	bls.n	800ae2a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ae74:	8afb      	ldrh	r3, [r7, #22]
 800ae76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d006      	beq.n	800ae8c <put_lfn+0xb4>
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	005b      	lsls	r3, r3, #1
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	4413      	add	r3, r2
 800ae86:	881b      	ldrh	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d103      	bne.n	800ae94 <put_lfn+0xbc>
 800ae8c:	79fb      	ldrb	r3, [r7, #7]
 800ae8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae92:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	79fa      	ldrb	r2, [r7, #7]
 800ae98:	701a      	strb	r2, [r3, #0]
}
 800ae9a:	bf00      	nop
 800ae9c:	3720      	adds	r7, #32
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	08013de0 	.word	0x08013de0

0800aea8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b08c      	sub	sp, #48	; 0x30
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
 800aeb4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800aeb6:	220b      	movs	r2, #11
 800aeb8:	68b9      	ldr	r1, [r7, #8]
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	f7fe ff46 	bl	8009d4c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	2b05      	cmp	r3, #5
 800aec4:	d92b      	bls.n	800af1e <gen_numname+0x76>
		sr = seq;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800aeca:	e022      	b.n	800af12 <gen_numname+0x6a>
			wc = *lfn++;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	1c9a      	adds	r2, r3, #2
 800aed0:	607a      	str	r2, [r7, #4]
 800aed2:	881b      	ldrh	r3, [r3, #0]
 800aed4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800aed6:	2300      	movs	r3, #0
 800aed8:	62bb      	str	r3, [r7, #40]	; 0x28
 800aeda:	e017      	b.n	800af0c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	005a      	lsls	r2, r3, #1
 800aee0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	4413      	add	r3, r2
 800aee8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800aeea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aeec:	085b      	lsrs	r3, r3, #1
 800aeee:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d005      	beq.n	800af06 <gen_numname+0x5e>
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800af00:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800af04:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800af06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af08:	3301      	adds	r3, #1
 800af0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800af0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0e:	2b0f      	cmp	r3, #15
 800af10:	d9e4      	bls.n	800aedc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1d8      	bne.n	800aecc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800af1e:	2307      	movs	r3, #7
 800af20:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	b2db      	uxtb	r3, r3
 800af26:	f003 030f 	and.w	r3, r3, #15
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	3330      	adds	r3, #48	; 0x30
 800af2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800af32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af36:	2b39      	cmp	r3, #57	; 0x39
 800af38:	d904      	bls.n	800af44 <gen_numname+0x9c>
 800af3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af3e:	3307      	adds	r3, #7
 800af40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800af44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af46:	1e5a      	subs	r2, r3, #1
 800af48:	62ba      	str	r2, [r7, #40]	; 0x28
 800af4a:	3330      	adds	r3, #48	; 0x30
 800af4c:	443b      	add	r3, r7
 800af4e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800af52:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	091b      	lsrs	r3, r3, #4
 800af5a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1df      	bne.n	800af22 <gen_numname+0x7a>
	ns[i] = '~';
 800af62:	f107 0214 	add.w	r2, r7, #20
 800af66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af68:	4413      	add	r3, r2
 800af6a:	227e      	movs	r2, #126	; 0x7e
 800af6c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800af6e:	2300      	movs	r3, #0
 800af70:	627b      	str	r3, [r7, #36]	; 0x24
 800af72:	e002      	b.n	800af7a <gen_numname+0xd2>
 800af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af76:	3301      	adds	r3, #1
 800af78:	627b      	str	r3, [r7, #36]	; 0x24
 800af7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7e:	429a      	cmp	r2, r3
 800af80:	d205      	bcs.n	800af8e <gen_numname+0xe6>
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af86:	4413      	add	r3, r2
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	2b20      	cmp	r3, #32
 800af8c:	d1f2      	bne.n	800af74 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af90:	2b07      	cmp	r3, #7
 800af92:	d807      	bhi.n	800afa4 <gen_numname+0xfc>
 800af94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af96:	1c5a      	adds	r2, r3, #1
 800af98:	62ba      	str	r2, [r7, #40]	; 0x28
 800af9a:	3330      	adds	r3, #48	; 0x30
 800af9c:	443b      	add	r3, r7
 800af9e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800afa2:	e000      	b.n	800afa6 <gen_numname+0xfe>
 800afa4:	2120      	movs	r1, #32
 800afa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	627a      	str	r2, [r7, #36]	; 0x24
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	4413      	add	r3, r2
 800afb0:	460a      	mov	r2, r1
 800afb2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800afb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb6:	2b07      	cmp	r3, #7
 800afb8:	d9e9      	bls.n	800af8e <gen_numname+0xe6>
}
 800afba:	bf00      	nop
 800afbc:	bf00      	nop
 800afbe:	3730      	adds	r7, #48	; 0x30
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800afcc:	2300      	movs	r3, #0
 800afce:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800afd0:	230b      	movs	r3, #11
 800afd2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800afd4:	7bfb      	ldrb	r3, [r7, #15]
 800afd6:	b2da      	uxtb	r2, r3
 800afd8:	0852      	lsrs	r2, r2, #1
 800afda:	01db      	lsls	r3, r3, #7
 800afdc:	4313      	orrs	r3, r2
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	1c59      	adds	r1, r3, #1
 800afe4:	6079      	str	r1, [r7, #4]
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	4413      	add	r3, r2
 800afea:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	3b01      	subs	r3, #1
 800aff0:	60bb      	str	r3, [r7, #8]
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1ed      	bne.n	800afd4 <sum_sfn+0x10>
	return sum;
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b086      	sub	sp, #24
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b010:	2304      	movs	r3, #4
 800b012:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800b01a:	23ff      	movs	r3, #255	; 0xff
 800b01c:	757b      	strb	r3, [r7, #21]
 800b01e:	23ff      	movs	r3, #255	; 0xff
 800b020:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800b022:	e081      	b.n	800b128 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	69db      	ldr	r3, [r3, #28]
 800b028:	4619      	mov	r1, r3
 800b02a:	6938      	ldr	r0, [r7, #16]
 800b02c:	f7ff f8bc 	bl	800a1a8 <move_window>
 800b030:	4603      	mov	r3, r0
 800b032:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b034:	7dfb      	ldrb	r3, [r7, #23]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d17c      	bne.n	800b134 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a1b      	ldr	r3, [r3, #32]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b042:	7dbb      	ldrb	r3, [r7, #22]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d102      	bne.n	800b04e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b048:	2304      	movs	r3, #4
 800b04a:	75fb      	strb	r3, [r7, #23]
 800b04c:	e077      	b.n	800b13e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	330b      	adds	r3, #11
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b05a:	73fb      	strb	r3, [r7, #15]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	7bfa      	ldrb	r2, [r7, #15]
 800b060:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b062:	7dbb      	ldrb	r3, [r7, #22]
 800b064:	2be5      	cmp	r3, #229	; 0xe5
 800b066:	d00e      	beq.n	800b086 <dir_read+0x80>
 800b068:	7dbb      	ldrb	r3, [r7, #22]
 800b06a:	2b2e      	cmp	r3, #46	; 0x2e
 800b06c:	d00b      	beq.n	800b086 <dir_read+0x80>
 800b06e:	7bfb      	ldrb	r3, [r7, #15]
 800b070:	f023 0320 	bic.w	r3, r3, #32
 800b074:	2b08      	cmp	r3, #8
 800b076:	bf0c      	ite	eq
 800b078:	2301      	moveq	r3, #1
 800b07a:	2300      	movne	r3, #0
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	461a      	mov	r2, r3
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	4293      	cmp	r3, r2
 800b084:	d002      	beq.n	800b08c <dir_read+0x86>
				ord = 0xFF;
 800b086:	23ff      	movs	r3, #255	; 0xff
 800b088:	757b      	strb	r3, [r7, #21]
 800b08a:	e044      	b.n	800b116 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
 800b08e:	2b0f      	cmp	r3, #15
 800b090:	d12f      	bne.n	800b0f2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b092:	7dbb      	ldrb	r3, [r7, #22]
 800b094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00d      	beq.n	800b0b8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a1b      	ldr	r3, [r3, #32]
 800b0a0:	7b5b      	ldrb	r3, [r3, #13]
 800b0a2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800b0a4:	7dbb      	ldrb	r3, [r7, #22]
 800b0a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0aa:	75bb      	strb	r3, [r7, #22]
 800b0ac:	7dbb      	ldrb	r3, [r7, #22]
 800b0ae:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	695a      	ldr	r2, [r3, #20]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b0b8:	7dba      	ldrb	r2, [r7, #22]
 800b0ba:	7d7b      	ldrb	r3, [r7, #21]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d115      	bne.n	800b0ec <dir_read+0xe6>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a1b      	ldr	r3, [r3, #32]
 800b0c4:	330d      	adds	r3, #13
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	7d3a      	ldrb	r2, [r7, #20]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d10e      	bne.n	800b0ec <dir_read+0xe6>
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	68da      	ldr	r2, [r3, #12]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	4610      	mov	r0, r2
 800b0da:	f7ff fe19 	bl	800ad10 <pick_lfn>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d003      	beq.n	800b0ec <dir_read+0xe6>
 800b0e4:	7d7b      	ldrb	r3, [r7, #21]
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	e000      	b.n	800b0ee <dir_read+0xe8>
 800b0ec:	23ff      	movs	r3, #255	; 0xff
 800b0ee:	757b      	strb	r3, [r7, #21]
 800b0f0:	e011      	b.n	800b116 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b0f2:	7d7b      	ldrb	r3, [r7, #21]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d109      	bne.n	800b10c <dir_read+0x106>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a1b      	ldr	r3, [r3, #32]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7ff ff61 	bl	800afc4 <sum_sfn>
 800b102:	4603      	mov	r3, r0
 800b104:	461a      	mov	r2, r3
 800b106:	7d3b      	ldrb	r3, [r7, #20]
 800b108:	4293      	cmp	r3, r2
 800b10a:	d015      	beq.n	800b138 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f04f 32ff 	mov.w	r2, #4294967295
 800b112:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800b114:	e010      	b.n	800b138 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b116:	2100      	movs	r1, #0
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7ff fc3e 	bl	800a99a <dir_next>
 800b11e:	4603      	mov	r3, r0
 800b120:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b122:	7dfb      	ldrb	r3, [r7, #23]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d109      	bne.n	800b13c <dir_read+0x136>
	while (dp->sect) {
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	69db      	ldr	r3, [r3, #28]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f47f af79 	bne.w	800b024 <dir_read+0x1e>
 800b132:	e004      	b.n	800b13e <dir_read+0x138>
		if (res != FR_OK) break;
 800b134:	bf00      	nop
 800b136:	e002      	b.n	800b13e <dir_read+0x138>
					break;
 800b138:	bf00      	nop
 800b13a:	e000      	b.n	800b13e <dir_read+0x138>
		if (res != FR_OK) break;
 800b13c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b13e:	7dfb      	ldrb	r3, [r7, #23]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d002      	beq.n	800b14a <dir_read+0x144>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	61da      	str	r2, [r3, #28]
	return res;
 800b14a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3718      	adds	r7, #24
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b162:	2100      	movs	r1, #0
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7ff fb9d 	bl	800a8a4 <dir_sdi>
 800b16a:	4603      	mov	r3, r0
 800b16c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b16e:	7dfb      	ldrb	r3, [r7, #23]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <dir_find+0x24>
 800b174:	7dfb      	ldrb	r3, [r7, #23]
 800b176:	e0a9      	b.n	800b2cc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b178:	23ff      	movs	r3, #255	; 0xff
 800b17a:	753b      	strb	r3, [r7, #20]
 800b17c:	7d3b      	ldrb	r3, [r7, #20]
 800b17e:	757b      	strb	r3, [r7, #21]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f04f 32ff 	mov.w	r2, #4294967295
 800b186:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	69db      	ldr	r3, [r3, #28]
 800b18c:	4619      	mov	r1, r3
 800b18e:	6938      	ldr	r0, [r7, #16]
 800b190:	f7ff f80a 	bl	800a1a8 <move_window>
 800b194:	4603      	mov	r3, r0
 800b196:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b198:	7dfb      	ldrb	r3, [r7, #23]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f040 8090 	bne.w	800b2c0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6a1b      	ldr	r3, [r3, #32]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b1a8:	7dbb      	ldrb	r3, [r7, #22]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d102      	bne.n	800b1b4 <dir_find+0x60>
 800b1ae:	2304      	movs	r3, #4
 800b1b0:	75fb      	strb	r3, [r7, #23]
 800b1b2:	e08a      	b.n	800b2ca <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a1b      	ldr	r3, [r3, #32]
 800b1b8:	330b      	adds	r3, #11
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1c0:	73fb      	strb	r3, [r7, #15]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	7bfa      	ldrb	r2, [r7, #15]
 800b1c6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b1c8:	7dbb      	ldrb	r3, [r7, #22]
 800b1ca:	2be5      	cmp	r3, #229	; 0xe5
 800b1cc:	d007      	beq.n	800b1de <dir_find+0x8a>
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
 800b1d0:	f003 0308 	and.w	r3, r3, #8
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d009      	beq.n	800b1ec <dir_find+0x98>
 800b1d8:	7bfb      	ldrb	r3, [r7, #15]
 800b1da:	2b0f      	cmp	r3, #15
 800b1dc:	d006      	beq.n	800b1ec <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b1de:	23ff      	movs	r3, #255	; 0xff
 800b1e0:	757b      	strb	r3, [r7, #21]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e8:	631a      	str	r2, [r3, #48]	; 0x30
 800b1ea:	e05e      	b.n	800b2aa <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
 800b1ee:	2b0f      	cmp	r3, #15
 800b1f0:	d136      	bne.n	800b260 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d154      	bne.n	800b2aa <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b200:	7dbb      	ldrb	r3, [r7, #22]
 800b202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00d      	beq.n	800b226 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	7b5b      	ldrb	r3, [r3, #13]
 800b210:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b212:	7dbb      	ldrb	r3, [r7, #22]
 800b214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b218:	75bb      	strb	r3, [r7, #22]
 800b21a:	7dbb      	ldrb	r3, [r7, #22]
 800b21c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	695a      	ldr	r2, [r3, #20]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b226:	7dba      	ldrb	r2, [r7, #22]
 800b228:	7d7b      	ldrb	r3, [r7, #21]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d115      	bne.n	800b25a <dir_find+0x106>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a1b      	ldr	r3, [r3, #32]
 800b232:	330d      	adds	r3, #13
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	7d3a      	ldrb	r2, [r7, #20]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d10e      	bne.n	800b25a <dir_find+0x106>
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	68da      	ldr	r2, [r3, #12]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6a1b      	ldr	r3, [r3, #32]
 800b244:	4619      	mov	r1, r3
 800b246:	4610      	mov	r0, r2
 800b248:	f7ff fcf2 	bl	800ac30 <cmp_lfn>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d003      	beq.n	800b25a <dir_find+0x106>
 800b252:	7d7b      	ldrb	r3, [r7, #21]
 800b254:	3b01      	subs	r3, #1
 800b256:	b2db      	uxtb	r3, r3
 800b258:	e000      	b.n	800b25c <dir_find+0x108>
 800b25a:	23ff      	movs	r3, #255	; 0xff
 800b25c:	757b      	strb	r3, [r7, #21]
 800b25e:	e024      	b.n	800b2aa <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b260:	7d7b      	ldrb	r3, [r7, #21]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d109      	bne.n	800b27a <dir_find+0x126>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a1b      	ldr	r3, [r3, #32]
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7ff feaa 	bl	800afc4 <sum_sfn>
 800b270:	4603      	mov	r3, r0
 800b272:	461a      	mov	r2, r3
 800b274:	7d3b      	ldrb	r3, [r7, #20]
 800b276:	4293      	cmp	r3, r2
 800b278:	d024      	beq.n	800b2c4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b280:	f003 0301 	and.w	r3, r3, #1
 800b284:	2b00      	cmp	r3, #0
 800b286:	d10a      	bne.n	800b29e <dir_find+0x14a>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6a18      	ldr	r0, [r3, #32]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	3324      	adds	r3, #36	; 0x24
 800b290:	220b      	movs	r2, #11
 800b292:	4619      	mov	r1, r3
 800b294:	f7fe fd96 	bl	8009dc4 <mem_cmp>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d014      	beq.n	800b2c8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b29e:	23ff      	movs	r3, #255	; 0xff
 800b2a0:	757b      	strb	r3, [r7, #21]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f7ff fb74 	bl	800a99a <dir_next>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f43f af65 	beq.w	800b188 <dir_find+0x34>
 800b2be:	e004      	b.n	800b2ca <dir_find+0x176>
		if (res != FR_OK) break;
 800b2c0:	bf00      	nop
 800b2c2:	e002      	b.n	800b2ca <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b2c4:	bf00      	nop
 800b2c6:	e000      	b.n	800b2ca <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b2c8:	bf00      	nop

	return res;
 800b2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3718      	adds	r7, #24
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b08c      	sub	sp, #48	; 0x30
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b2e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d001      	beq.n	800b2f4 <dir_register+0x20>
 800b2f0:	2306      	movs	r3, #6
 800b2f2:	e0e0      	b.n	800b4b6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	627b      	str	r3, [r7, #36]	; 0x24
 800b2f8:	e002      	b.n	800b300 <dir_register+0x2c>
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	627b      	str	r3, [r7, #36]	; 0x24
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	68da      	ldr	r2, [r3, #12]
 800b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b306:	005b      	lsls	r3, r3, #1
 800b308:	4413      	add	r3, r2
 800b30a:	881b      	ldrh	r3, [r3, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1f4      	bne.n	800b2fa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b316:	f107 030c 	add.w	r3, r7, #12
 800b31a:	220c      	movs	r2, #12
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fe fd15 	bl	8009d4c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b322:	7dfb      	ldrb	r3, [r7, #23]
 800b324:	f003 0301 	and.w	r3, r3, #1
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d032      	beq.n	800b392 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2240      	movs	r2, #64	; 0x40
 800b330:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b334:	2301      	movs	r3, #1
 800b336:	62bb      	str	r3, [r7, #40]	; 0x28
 800b338:	e016      	b.n	800b368 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	68da      	ldr	r2, [r3, #12]
 800b344:	f107 010c 	add.w	r1, r7, #12
 800b348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34a:	f7ff fdad 	bl	800aea8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7ff ff00 	bl	800b154 <dir_find>
 800b354:	4603      	mov	r3, r0
 800b356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b35a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d106      	bne.n	800b370 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b364:	3301      	adds	r3, #1
 800b366:	62bb      	str	r3, [r7, #40]	; 0x28
 800b368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36a:	2b63      	cmp	r3, #99	; 0x63
 800b36c:	d9e5      	bls.n	800b33a <dir_register+0x66>
 800b36e:	e000      	b.n	800b372 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b370:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b374:	2b64      	cmp	r3, #100	; 0x64
 800b376:	d101      	bne.n	800b37c <dir_register+0xa8>
 800b378:	2307      	movs	r3, #7
 800b37a:	e09c      	b.n	800b4b6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b37c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b380:	2b04      	cmp	r3, #4
 800b382:	d002      	beq.n	800b38a <dir_register+0xb6>
 800b384:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b388:	e095      	b.n	800b4b6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b38a:	7dfa      	ldrb	r2, [r7, #23]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b392:	7dfb      	ldrb	r3, [r7, #23]
 800b394:	f003 0302 	and.w	r3, r3, #2
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d007      	beq.n	800b3ac <dir_register+0xd8>
 800b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39e:	330c      	adds	r3, #12
 800b3a0:	4a47      	ldr	r2, [pc, #284]	; (800b4c0 <dir_register+0x1ec>)
 800b3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3a6:	089b      	lsrs	r3, r3, #2
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	e000      	b.n	800b3ae <dir_register+0xda>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b3b0:	6a39      	ldr	r1, [r7, #32]
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7ff fbb6 	bl	800ab24 <dir_alloc>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b3be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d148      	bne.n	800b458 <dir_register+0x184>
 800b3c6:	6a3b      	ldr	r3, [r7, #32]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	623b      	str	r3, [r7, #32]
 800b3cc:	6a3b      	ldr	r3, [r7, #32]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d042      	beq.n	800b458 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	695a      	ldr	r2, [r3, #20]
 800b3d6:	6a3b      	ldr	r3, [r7, #32]
 800b3d8:	015b      	lsls	r3, r3, #5
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f7ff fa60 	bl	800a8a4 <dir_sdi>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b3ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d132      	bne.n	800b458 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	3324      	adds	r3, #36	; 0x24
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7ff fde4 	bl	800afc4 <sum_sfn>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	69db      	ldr	r3, [r3, #28]
 800b404:	4619      	mov	r1, r3
 800b406:	69f8      	ldr	r0, [r7, #28]
 800b408:	f7fe fece 	bl	800a1a8 <move_window>
 800b40c:	4603      	mov	r3, r0
 800b40e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b412:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b416:	2b00      	cmp	r3, #0
 800b418:	d11d      	bne.n	800b456 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	68d8      	ldr	r0, [r3, #12]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a19      	ldr	r1, [r3, #32]
 800b422:	6a3b      	ldr	r3, [r7, #32]
 800b424:	b2da      	uxtb	r2, r3
 800b426:	7efb      	ldrb	r3, [r7, #27]
 800b428:	f7ff fcd6 	bl	800add8 <put_lfn>
				fs->wflag = 1;
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	2201      	movs	r2, #1
 800b430:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b432:	2100      	movs	r1, #0
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7ff fab0 	bl	800a99a <dir_next>
 800b43a:	4603      	mov	r3, r0
 800b43c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b444:	2b00      	cmp	r3, #0
 800b446:	d107      	bne.n	800b458 <dir_register+0x184>
 800b448:	6a3b      	ldr	r3, [r7, #32]
 800b44a:	3b01      	subs	r3, #1
 800b44c:	623b      	str	r3, [r7, #32]
 800b44e:	6a3b      	ldr	r3, [r7, #32]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1d5      	bne.n	800b400 <dir_register+0x12c>
 800b454:	e000      	b.n	800b458 <dir_register+0x184>
				if (res != FR_OK) break;
 800b456:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b458:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d128      	bne.n	800b4b2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	69db      	ldr	r3, [r3, #28]
 800b464:	4619      	mov	r1, r3
 800b466:	69f8      	ldr	r0, [r7, #28]
 800b468:	f7fe fe9e 	bl	800a1a8 <move_window>
 800b46c:	4603      	mov	r3, r0
 800b46e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b476:	2b00      	cmp	r3, #0
 800b478:	d11b      	bne.n	800b4b2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a1b      	ldr	r3, [r3, #32]
 800b47e:	2220      	movs	r2, #32
 800b480:	2100      	movs	r1, #0
 800b482:	4618      	mov	r0, r3
 800b484:	f7fe fc83 	bl	8009d8e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6a18      	ldr	r0, [r3, #32]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	3324      	adds	r3, #36	; 0x24
 800b490:	220b      	movs	r2, #11
 800b492:	4619      	mov	r1, r3
 800b494:	f7fe fc5a 	bl	8009d4c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	330c      	adds	r3, #12
 800b4a4:	f002 0218 	and.w	r2, r2, #24
 800b4a8:	b2d2      	uxtb	r2, r2
 800b4aa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b4b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3730      	adds	r7, #48	; 0x30
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	4ec4ec4f 	.word	0x4ec4ec4f

0800b4c4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b088      	sub	sp, #32
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	69db      	ldr	r3, [r3, #28]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f000 80c9 	beq.w	800b676 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ec:	d032      	beq.n	800b554 <get_fileinfo+0x90>
			i = j = 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	61bb      	str	r3, [r7, #24]
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b4f6:	e01b      	b.n	800b530 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b4f8:	89fb      	ldrh	r3, [r7, #14]
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f002 fa31 	bl	800d964 <ff_convert>
 800b502:	4603      	mov	r3, r0
 800b504:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b506:	89fb      	ldrh	r3, [r7, #14]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d102      	bne.n	800b512 <get_fileinfo+0x4e>
 800b50c:	2300      	movs	r3, #0
 800b50e:	61fb      	str	r3, [r7, #28]
 800b510:	e01a      	b.n	800b548 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	2bfe      	cmp	r3, #254	; 0xfe
 800b516:	d902      	bls.n	800b51e <get_fileinfo+0x5a>
 800b518:	2300      	movs	r3, #0
 800b51a:	61fb      	str	r3, [r7, #28]
 800b51c:	e014      	b.n	800b548 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800b51e:	69fb      	ldr	r3, [r7, #28]
 800b520:	1c5a      	adds	r2, r3, #1
 800b522:	61fa      	str	r2, [r7, #28]
 800b524:	89fa      	ldrh	r2, [r7, #14]
 800b526:	b2d1      	uxtb	r1, r2
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	4413      	add	r3, r2
 800b52c:	460a      	mov	r2, r1
 800b52e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	68da      	ldr	r2, [r3, #12]
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	1c59      	adds	r1, r3, #1
 800b538:	61b9      	str	r1, [r7, #24]
 800b53a:	005b      	lsls	r3, r3, #1
 800b53c:	4413      	add	r3, r2
 800b53e:	881b      	ldrh	r3, [r3, #0]
 800b540:	81fb      	strh	r3, [r7, #14]
 800b542:	89fb      	ldrh	r3, [r7, #14]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1d7      	bne.n	800b4f8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b548:	683a      	ldr	r2, [r7, #0]
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	4413      	add	r3, r2
 800b54e:	3316      	adds	r3, #22
 800b550:	2200      	movs	r2, #0
 800b552:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b554:	2300      	movs	r3, #0
 800b556:	61bb      	str	r3, [r7, #24]
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b55c:	683a      	ldr	r2, [r7, #0]
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	4413      	add	r3, r2
 800b562:	3316      	adds	r3, #22
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b568:	e04c      	b.n	800b604 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a1a      	ldr	r2, [r3, #32]
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	1c59      	adds	r1, r3, #1
 800b572:	61f9      	str	r1, [r7, #28]
 800b574:	4413      	add	r3, r2
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
 800b57c:	2b20      	cmp	r3, #32
 800b57e:	d100      	bne.n	800b582 <get_fileinfo+0xbe>
 800b580:	e040      	b.n	800b604 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b582:	7dfb      	ldrb	r3, [r7, #23]
 800b584:	2b05      	cmp	r3, #5
 800b586:	d101      	bne.n	800b58c <get_fileinfo+0xc8>
 800b588:	23e5      	movs	r3, #229	; 0xe5
 800b58a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	2b09      	cmp	r3, #9
 800b590:	d10f      	bne.n	800b5b2 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800b592:	89bb      	ldrh	r3, [r7, #12]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d105      	bne.n	800b5a4 <get_fileinfo+0xe0>
 800b598:	683a      	ldr	r2, [r7, #0]
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	4413      	add	r3, r2
 800b59e:	3316      	adds	r3, #22
 800b5a0:	222e      	movs	r2, #46	; 0x2e
 800b5a2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	1c5a      	adds	r2, r3, #1
 800b5a8:	61ba      	str	r2, [r7, #24]
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	222e      	movs	r2, #46	; 0x2e
 800b5b0:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	3309      	adds	r3, #9
 800b5ba:	7dfa      	ldrb	r2, [r7, #23]
 800b5bc:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b5be:	89bb      	ldrh	r3, [r7, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d11c      	bne.n	800b5fe <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b5c4:	7dfb      	ldrb	r3, [r7, #23]
 800b5c6:	2b40      	cmp	r3, #64	; 0x40
 800b5c8:	d913      	bls.n	800b5f2 <get_fileinfo+0x12e>
 800b5ca:	7dfb      	ldrb	r3, [r7, #23]
 800b5cc:	2b5a      	cmp	r3, #90	; 0x5a
 800b5ce:	d810      	bhi.n	800b5f2 <get_fileinfo+0x12e>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6a1b      	ldr	r3, [r3, #32]
 800b5d4:	330c      	adds	r3, #12
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	2b08      	cmp	r3, #8
 800b5de:	d901      	bls.n	800b5e4 <get_fileinfo+0x120>
 800b5e0:	2310      	movs	r3, #16
 800b5e2:	e000      	b.n	800b5e6 <get_fileinfo+0x122>
 800b5e4:	2308      	movs	r3, #8
 800b5e6:	4013      	ands	r3, r2
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800b5ec:	7dfb      	ldrb	r3, [r7, #23]
 800b5ee:	3320      	adds	r3, #32
 800b5f0:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b5f2:	683a      	ldr	r2, [r7, #0]
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	3316      	adds	r3, #22
 800b5fa:	7dfa      	ldrb	r2, [r7, #23]
 800b5fc:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	3301      	adds	r3, #1
 800b602:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	2b0a      	cmp	r3, #10
 800b608:	d9af      	bls.n	800b56a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800b60a:	89bb      	ldrh	r3, [r7, #12]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10d      	bne.n	800b62c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800b610:	683a      	ldr	r2, [r7, #0]
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	4413      	add	r3, r2
 800b616:	3316      	adds	r3, #22
 800b618:	2200      	movs	r2, #0
 800b61a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6a1b      	ldr	r3, [r3, #32]
 800b620:	330c      	adds	r3, #12
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d101      	bne.n	800b62c <get_fileinfo+0x168>
 800b628:	2300      	movs	r3, #0
 800b62a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b62c:	683a      	ldr	r2, [r7, #0]
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	4413      	add	r3, r2
 800b632:	3309      	adds	r3, #9
 800b634:	2200      	movs	r2, #0
 800b636:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a1b      	ldr	r3, [r3, #32]
 800b63c:	7ada      	ldrb	r2, [r3, #11]
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	331c      	adds	r3, #28
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fe fb15 	bl	8009c78 <ld_dword>
 800b64e:	4602      	mov	r2, r0
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6a1b      	ldr	r3, [r3, #32]
 800b658:	3316      	adds	r3, #22
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fe fb0c 	bl	8009c78 <ld_dword>
 800b660:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	b29a      	uxth	r2, r3
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	80da      	strh	r2, [r3, #6]
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	0c1b      	lsrs	r3, r3, #16
 800b66e:	b29a      	uxth	r2, r3
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	809a      	strh	r2, [r3, #4]
 800b674:	e000      	b.n	800b678 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b676:	bf00      	nop
}
 800b678:	3720      	adds	r7, #32
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
	...

0800b680 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b08a      	sub	sp, #40	; 0x28
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	613b      	str	r3, [r7, #16]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	60fb      	str	r3, [r7, #12]
 800b698:	2300      	movs	r3, #0
 800b69a:	617b      	str	r3, [r7, #20]
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	1c5a      	adds	r2, r3, #1
 800b6a4:	61ba      	str	r2, [r7, #24]
 800b6a6:	693a      	ldr	r2, [r7, #16]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b6ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6b0:	2b1f      	cmp	r3, #31
 800b6b2:	d940      	bls.n	800b736 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b6b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6b6:	2b2f      	cmp	r3, #47	; 0x2f
 800b6b8:	d006      	beq.n	800b6c8 <create_name+0x48>
 800b6ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6bc:	2b5c      	cmp	r3, #92	; 0x5c
 800b6be:	d110      	bne.n	800b6e2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b6c0:	e002      	b.n	800b6c8 <create_name+0x48>
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	61bb      	str	r3, [r7, #24]
 800b6c8:	693a      	ldr	r2, [r7, #16]
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	2b2f      	cmp	r3, #47	; 0x2f
 800b6d2:	d0f6      	beq.n	800b6c2 <create_name+0x42>
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	4413      	add	r3, r2
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	2b5c      	cmp	r3, #92	; 0x5c
 800b6de:	d0f0      	beq.n	800b6c2 <create_name+0x42>
			break;
 800b6e0:	e02a      	b.n	800b738 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	2bfe      	cmp	r3, #254	; 0xfe
 800b6e6:	d901      	bls.n	800b6ec <create_name+0x6c>
 800b6e8:	2306      	movs	r3, #6
 800b6ea:	e17d      	b.n	800b9e8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b6ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b6f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6f4:	2101      	movs	r1, #1
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f002 f934 	bl	800d964 <ff_convert>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b702:	2b00      	cmp	r3, #0
 800b704:	d101      	bne.n	800b70a <create_name+0x8a>
 800b706:	2306      	movs	r3, #6
 800b708:	e16e      	b.n	800b9e8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b70a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b70c:	2b7f      	cmp	r3, #127	; 0x7f
 800b70e:	d809      	bhi.n	800b724 <create_name+0xa4>
 800b710:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b712:	4619      	mov	r1, r3
 800b714:	488d      	ldr	r0, [pc, #564]	; (800b94c <create_name+0x2cc>)
 800b716:	f7fe fb7c 	bl	8009e12 <chk_chr>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d001      	beq.n	800b724 <create_name+0xa4>
 800b720:	2306      	movs	r3, #6
 800b722:	e161      	b.n	800b9e8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	1c5a      	adds	r2, r3, #1
 800b728:	617a      	str	r2, [r7, #20]
 800b72a:	005b      	lsls	r3, r3, #1
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	4413      	add	r3, r2
 800b730:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b732:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b734:	e7b4      	b.n	800b6a0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b736:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	441a      	add	r2, r3
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b742:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b744:	2b1f      	cmp	r3, #31
 800b746:	d801      	bhi.n	800b74c <create_name+0xcc>
 800b748:	2304      	movs	r3, #4
 800b74a:	e000      	b.n	800b74e <create_name+0xce>
 800b74c:	2300      	movs	r3, #0
 800b74e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b752:	e011      	b.n	800b778 <create_name+0xf8>
		w = lfn[di - 1];
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b75a:	3b01      	subs	r3, #1
 800b75c:	005b      	lsls	r3, r3, #1
 800b75e:	68fa      	ldr	r2, [r7, #12]
 800b760:	4413      	add	r3, r2
 800b762:	881b      	ldrh	r3, [r3, #0]
 800b764:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b766:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b768:	2b20      	cmp	r3, #32
 800b76a:	d002      	beq.n	800b772 <create_name+0xf2>
 800b76c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b76e:	2b2e      	cmp	r3, #46	; 0x2e
 800b770:	d106      	bne.n	800b780 <create_name+0x100>
		di--;
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	3b01      	subs	r3, #1
 800b776:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1ea      	bne.n	800b754 <create_name+0xd4>
 800b77e:	e000      	b.n	800b782 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b780:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	005b      	lsls	r3, r3, #1
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	4413      	add	r3, r2
 800b78a:	2200      	movs	r2, #0
 800b78c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <create_name+0x118>
 800b794:	2306      	movs	r3, #6
 800b796:	e127      	b.n	800b9e8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	3324      	adds	r3, #36	; 0x24
 800b79c:	220b      	movs	r2, #11
 800b79e:	2120      	movs	r1, #32
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7fe faf4 	bl	8009d8e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	61bb      	str	r3, [r7, #24]
 800b7aa:	e002      	b.n	800b7b2 <create_name+0x132>
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	61bb      	str	r3, [r7, #24]
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	005b      	lsls	r3, r3, #1
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	881b      	ldrh	r3, [r3, #0]
 800b7bc:	2b20      	cmp	r3, #32
 800b7be:	d0f5      	beq.n	800b7ac <create_name+0x12c>
 800b7c0:	69bb      	ldr	r3, [r7, #24]
 800b7c2:	005b      	lsls	r3, r3, #1
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	881b      	ldrh	r3, [r3, #0]
 800b7ca:	2b2e      	cmp	r3, #46	; 0x2e
 800b7cc:	d0ee      	beq.n	800b7ac <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d009      	beq.n	800b7e8 <create_name+0x168>
 800b7d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7d8:	f043 0303 	orr.w	r3, r3, #3
 800b7dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b7e0:	e002      	b.n	800b7e8 <create_name+0x168>
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	617b      	str	r3, [r7, #20]
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d009      	beq.n	800b802 <create_name+0x182>
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	005b      	lsls	r3, r3, #1
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	881b      	ldrh	r3, [r3, #0]
 800b7fe:	2b2e      	cmp	r3, #46	; 0x2e
 800b800:	d1ef      	bne.n	800b7e2 <create_name+0x162>

	i = b = 0; ni = 8;
 800b802:	2300      	movs	r3, #0
 800b804:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b808:	2300      	movs	r3, #0
 800b80a:	623b      	str	r3, [r7, #32]
 800b80c:	2308      	movs	r3, #8
 800b80e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	1c5a      	adds	r2, r3, #1
 800b814:	61ba      	str	r2, [r7, #24]
 800b816:	005b      	lsls	r3, r3, #1
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	4413      	add	r3, r2
 800b81c:	881b      	ldrh	r3, [r3, #0]
 800b81e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b820:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b822:	2b00      	cmp	r3, #0
 800b824:	f000 8090 	beq.w	800b948 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b82a:	2b20      	cmp	r3, #32
 800b82c:	d006      	beq.n	800b83c <create_name+0x1bc>
 800b82e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b830:	2b2e      	cmp	r3, #46	; 0x2e
 800b832:	d10a      	bne.n	800b84a <create_name+0x1ca>
 800b834:	69ba      	ldr	r2, [r7, #24]
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d006      	beq.n	800b84a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b83c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b840:	f043 0303 	orr.w	r3, r3, #3
 800b844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b848:	e07d      	b.n	800b946 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b84a:	6a3a      	ldr	r2, [r7, #32]
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d203      	bcs.n	800b85a <create_name+0x1da>
 800b852:	69ba      	ldr	r2, [r7, #24]
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	429a      	cmp	r2, r3
 800b858:	d123      	bne.n	800b8a2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	2b0b      	cmp	r3, #11
 800b85e:	d106      	bne.n	800b86e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b864:	f043 0303 	orr.w	r3, r3, #3
 800b868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b86c:	e075      	b.n	800b95a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b86e:	69ba      	ldr	r2, [r7, #24]
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	429a      	cmp	r2, r3
 800b874:	d005      	beq.n	800b882 <create_name+0x202>
 800b876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b87a:	f043 0303 	orr.w	r3, r3, #3
 800b87e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b882:	69ba      	ldr	r2, [r7, #24]
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	429a      	cmp	r2, r3
 800b888:	d866      	bhi.n	800b958 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	61bb      	str	r3, [r7, #24]
 800b88e:	2308      	movs	r3, #8
 800b890:	623b      	str	r3, [r7, #32]
 800b892:	230b      	movs	r3, #11
 800b894:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b896:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b8a0:	e051      	b.n	800b946 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b8a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8a4:	2b7f      	cmp	r3, #127	; 0x7f
 800b8a6:	d914      	bls.n	800b8d2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b8a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f002 f859 	bl	800d964 <ff_convert>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b8b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d004      	beq.n	800b8c6 <create_name+0x246>
 800b8bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8be:	3b80      	subs	r3, #128	; 0x80
 800b8c0:	4a23      	ldr	r2, [pc, #140]	; (800b950 <create_name+0x2d0>)
 800b8c2:	5cd3      	ldrb	r3, [r2, r3]
 800b8c4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b8c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8ca:	f043 0302 	orr.w	r3, r3, #2
 800b8ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b8d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d007      	beq.n	800b8e8 <create_name+0x268>
 800b8d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8da:	4619      	mov	r1, r3
 800b8dc:	481d      	ldr	r0, [pc, #116]	; (800b954 <create_name+0x2d4>)
 800b8de:	f7fe fa98 	bl	8009e12 <chk_chr>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d008      	beq.n	800b8fa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b8e8:	235f      	movs	r3, #95	; 0x5f
 800b8ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8f0:	f043 0303 	orr.w	r3, r3, #3
 800b8f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8f8:	e01b      	b.n	800b932 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b8fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8fc:	2b40      	cmp	r3, #64	; 0x40
 800b8fe:	d909      	bls.n	800b914 <create_name+0x294>
 800b900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b902:	2b5a      	cmp	r3, #90	; 0x5a
 800b904:	d806      	bhi.n	800b914 <create_name+0x294>
					b |= 2;
 800b906:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b90a:	f043 0302 	orr.w	r3, r3, #2
 800b90e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b912:	e00e      	b.n	800b932 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b914:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b916:	2b60      	cmp	r3, #96	; 0x60
 800b918:	d90b      	bls.n	800b932 <create_name+0x2b2>
 800b91a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b91c:	2b7a      	cmp	r3, #122	; 0x7a
 800b91e:	d808      	bhi.n	800b932 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b920:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b924:	f043 0301 	orr.w	r3, r3, #1
 800b928:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b92c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b92e:	3b20      	subs	r3, #32
 800b930:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	1c5a      	adds	r2, r3, #1
 800b936:	623a      	str	r2, [r7, #32]
 800b938:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b93a:	b2d1      	uxtb	r1, r2
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	4413      	add	r3, r2
 800b940:	460a      	mov	r2, r1
 800b942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b946:	e763      	b.n	800b810 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b948:	bf00      	nop
 800b94a:	e006      	b.n	800b95a <create_name+0x2da>
 800b94c:	08013c98 	.word	0x08013c98
 800b950:	08013d60 	.word	0x08013d60
 800b954:	08013ca4 	.word	0x08013ca4
			if (si > di) break;			/* No extension */
 800b958:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b960:	2be5      	cmp	r3, #229	; 0xe5
 800b962:	d103      	bne.n	800b96c <create_name+0x2ec>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2205      	movs	r2, #5
 800b968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	2b08      	cmp	r3, #8
 800b970:	d104      	bne.n	800b97c <create_name+0x2fc>
 800b972:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b97c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b980:	f003 030c 	and.w	r3, r3, #12
 800b984:	2b0c      	cmp	r3, #12
 800b986:	d005      	beq.n	800b994 <create_name+0x314>
 800b988:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b98c:	f003 0303 	and.w	r3, r3, #3
 800b990:	2b03      	cmp	r3, #3
 800b992:	d105      	bne.n	800b9a0 <create_name+0x320>
 800b994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b998:	f043 0302 	orr.w	r3, r3, #2
 800b99c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b9a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9a4:	f003 0302 	and.w	r3, r3, #2
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d117      	bne.n	800b9dc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b9ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b9b0:	f003 0303 	and.w	r3, r3, #3
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d105      	bne.n	800b9c4 <create_name+0x344>
 800b9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9bc:	f043 0310 	orr.w	r3, r3, #16
 800b9c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b9c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b9c8:	f003 030c 	and.w	r3, r3, #12
 800b9cc:	2b04      	cmp	r3, #4
 800b9ce:	d105      	bne.n	800b9dc <create_name+0x35c>
 800b9d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9d4:	f043 0308 	orr.w	r3, r3, #8
 800b9d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b9e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b9e6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3728      	adds	r7, #40	; 0x28
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ba04:	e002      	b.n	800ba0c <follow_path+0x1c>
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	603b      	str	r3, [r7, #0]
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	2b2f      	cmp	r3, #47	; 0x2f
 800ba12:	d0f8      	beq.n	800ba06 <follow_path+0x16>
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	2b5c      	cmp	r3, #92	; 0x5c
 800ba1a:	d0f4      	beq.n	800ba06 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	2b1f      	cmp	r3, #31
 800ba28:	d80a      	bhi.n	800ba40 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2280      	movs	r2, #128	; 0x80
 800ba2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ba32:	2100      	movs	r1, #0
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f7fe ff35 	bl	800a8a4 <dir_sdi>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	75fb      	strb	r3, [r7, #23]
 800ba3e:	e043      	b.n	800bac8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ba40:	463b      	mov	r3, r7
 800ba42:	4619      	mov	r1, r3
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7ff fe1b 	bl	800b680 <create_name>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ba4e:	7dfb      	ldrb	r3, [r7, #23]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d134      	bne.n	800babe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f7ff fb7d 	bl	800b154 <dir_find>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba64:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ba66:	7dfb      	ldrb	r3, [r7, #23]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00a      	beq.n	800ba82 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ba6c:	7dfb      	ldrb	r3, [r7, #23]
 800ba6e:	2b04      	cmp	r3, #4
 800ba70:	d127      	bne.n	800bac2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ba72:	7afb      	ldrb	r3, [r7, #11]
 800ba74:	f003 0304 	and.w	r3, r3, #4
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d122      	bne.n	800bac2 <follow_path+0xd2>
 800ba7c:	2305      	movs	r3, #5
 800ba7e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ba80:	e01f      	b.n	800bac2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ba82:	7afb      	ldrb	r3, [r7, #11]
 800ba84:	f003 0304 	and.w	r3, r3, #4
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d11c      	bne.n	800bac6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	799b      	ldrb	r3, [r3, #6]
 800ba90:	f003 0310 	and.w	r3, r3, #16
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d102      	bne.n	800ba9e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ba98:	2305      	movs	r3, #5
 800ba9a:	75fb      	strb	r3, [r7, #23]
 800ba9c:	e014      	b.n	800bac8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	695b      	ldr	r3, [r3, #20]
 800baa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baac:	4413      	add	r3, r2
 800baae:	4619      	mov	r1, r3
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f7ff f87e 	bl	800abb2 <ld_clust>
 800bab6:	4602      	mov	r2, r0
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800babc:	e7c0      	b.n	800ba40 <follow_path+0x50>
			if (res != FR_OK) break;
 800babe:	bf00      	nop
 800bac0:	e002      	b.n	800bac8 <follow_path+0xd8>
				break;
 800bac2:	bf00      	nop
 800bac4:	e000      	b.n	800bac8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bac6:	bf00      	nop
			}
		}
	}

	return res;
 800bac8:	7dfb      	ldrb	r3, [r7, #23]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bad2:	b480      	push	{r7}
 800bad4:	b087      	sub	sp, #28
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bada:	f04f 33ff 	mov.w	r3, #4294967295
 800bade:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d031      	beq.n	800bb4c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	617b      	str	r3, [r7, #20]
 800baee:	e002      	b.n	800baf6 <get_ldnumber+0x24>
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	3301      	adds	r3, #1
 800baf4:	617b      	str	r3, [r7, #20]
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	2b1f      	cmp	r3, #31
 800bafc:	d903      	bls.n	800bb06 <get_ldnumber+0x34>
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	2b3a      	cmp	r3, #58	; 0x3a
 800bb04:	d1f4      	bne.n	800baf0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	2b3a      	cmp	r3, #58	; 0x3a
 800bb0c:	d11c      	bne.n	800bb48 <get_ldnumber+0x76>
			tp = *path;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	1c5a      	adds	r2, r3, #1
 800bb18:	60fa      	str	r2, [r7, #12]
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	3b30      	subs	r3, #48	; 0x30
 800bb1e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	2b09      	cmp	r3, #9
 800bb24:	d80e      	bhi.n	800bb44 <get_ldnumber+0x72>
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d10a      	bne.n	800bb44 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d807      	bhi.n	800bb44 <get_ldnumber+0x72>
					vol = (int)i;
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	617b      	str	r3, [r7, #20]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	697a      	ldr	r2, [r7, #20]
 800bb42:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	e002      	b.n	800bb4e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bb48:	2300      	movs	r3, #0
 800bb4a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bb4c:	693b      	ldr	r3, [r7, #16]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	371c      	adds	r7, #28
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
	...

0800bb5c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	70da      	strb	r2, [r3, #3]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb72:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7fe fb16 	bl	800a1a8 <move_window>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d001      	beq.n	800bb86 <check_fs+0x2a>
 800bb82:	2304      	movs	r3, #4
 800bb84:	e038      	b.n	800bbf8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	3334      	adds	r3, #52	; 0x34
 800bb8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7fe f85a 	bl	8009c48 <ld_word>
 800bb94:	4603      	mov	r3, r0
 800bb96:	461a      	mov	r2, r3
 800bb98:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d001      	beq.n	800bba4 <check_fs+0x48>
 800bba0:	2303      	movs	r3, #3
 800bba2:	e029      	b.n	800bbf8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bbaa:	2be9      	cmp	r3, #233	; 0xe9
 800bbac:	d009      	beq.n	800bbc2 <check_fs+0x66>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bbb4:	2beb      	cmp	r3, #235	; 0xeb
 800bbb6:	d11e      	bne.n	800bbf6 <check_fs+0x9a>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bbbe:	2b90      	cmp	r3, #144	; 0x90
 800bbc0:	d119      	bne.n	800bbf6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	3334      	adds	r3, #52	; 0x34
 800bbc6:	3336      	adds	r3, #54	; 0x36
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7fe f855 	bl	8009c78 <ld_dword>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bbd4:	4a0a      	ldr	r2, [pc, #40]	; (800bc00 <check_fs+0xa4>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d101      	bne.n	800bbde <check_fs+0x82>
 800bbda:	2300      	movs	r3, #0
 800bbdc:	e00c      	b.n	800bbf8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	3334      	adds	r3, #52	; 0x34
 800bbe2:	3352      	adds	r3, #82	; 0x52
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fe f847 	bl	8009c78 <ld_dword>
 800bbea:	4603      	mov	r3, r0
 800bbec:	4a05      	ldr	r2, [pc, #20]	; (800bc04 <check_fs+0xa8>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d101      	bne.n	800bbf6 <check_fs+0x9a>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	e000      	b.n	800bbf8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bbf6:	2302      	movs	r3, #2
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	00544146 	.word	0x00544146
 800bc04:	33544146 	.word	0x33544146

0800bc08 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b096      	sub	sp, #88	; 0x58
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	4613      	mov	r3, r2
 800bc14:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	f7ff ff58 	bl	800bad2 <get_ldnumber>
 800bc22:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bc24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	da01      	bge.n	800bc2e <find_volume+0x26>
 800bc2a:	230b      	movs	r3, #11
 800bc2c:	e22d      	b.n	800c08a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bc2e:	4aa1      	ldr	r2, [pc, #644]	; (800beb4 <find_volume+0x2ac>)
 800bc30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc36:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d101      	bne.n	800bc42 <find_volume+0x3a>
 800bc3e:	230c      	movs	r3, #12
 800bc40:	e223      	b.n	800c08a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc46:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bc48:	79fb      	ldrb	r3, [r7, #7]
 800bc4a:	f023 0301 	bic.w	r3, r3, #1
 800bc4e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d01a      	beq.n	800bc8e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5a:	785b      	ldrb	r3, [r3, #1]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fd ff4d 	bl	8009afc <disk_status>
 800bc62:	4603      	mov	r3, r0
 800bc64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bc68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc6c:	f003 0301 	and.w	r3, r3, #1
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10c      	bne.n	800bc8e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bc74:	79fb      	ldrb	r3, [r7, #7]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d007      	beq.n	800bc8a <find_volume+0x82>
 800bc7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc7e:	f003 0304 	and.w	r3, r3, #4
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d001      	beq.n	800bc8a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bc86:	230a      	movs	r3, #10
 800bc88:	e1ff      	b.n	800c08a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	e1fd      	b.n	800c08a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc90:	2200      	movs	r2, #0
 800bc92:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bc94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9e:	785b      	ldrb	r3, [r3, #1]
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7fd ff45 	bl	8009b30 <disk_initialize>
 800bca6:	4603      	mov	r3, r0
 800bca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bcac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bcb0:	f003 0301 	and.w	r3, r3, #1
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d001      	beq.n	800bcbc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bcb8:	2303      	movs	r3, #3
 800bcba:	e1e6      	b.n	800c08a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bcbc:	79fb      	ldrb	r3, [r7, #7]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d007      	beq.n	800bcd2 <find_volume+0xca>
 800bcc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bcc6:	f003 0304 	and.w	r3, r3, #4
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d001      	beq.n	800bcd2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bcce:	230a      	movs	r3, #10
 800bcd0:	e1db      	b.n	800c08a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bcd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bcd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcda:	f7ff ff3f 	bl	800bb5c <check_fs>
 800bcde:	4603      	mov	r3, r0
 800bce0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bce4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bce8:	2b02      	cmp	r3, #2
 800bcea:	d149      	bne.n	800bd80 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bcec:	2300      	movs	r3, #0
 800bcee:	643b      	str	r3, [r7, #64]	; 0x40
 800bcf0:	e01e      	b.n	800bd30 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bcf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcfa:	011b      	lsls	r3, r3, #4
 800bcfc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bd00:	4413      	add	r3, r2
 800bd02:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd06:	3304      	adds	r3, #4
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d006      	beq.n	800bd1c <find_volume+0x114>
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd10:	3308      	adds	r3, #8
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fd ffb0 	bl	8009c78 <ld_dword>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	e000      	b.n	800bd1e <find_volume+0x116>
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	3358      	adds	r3, #88	; 0x58
 800bd24:	443b      	add	r3, r7
 800bd26:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bd2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	643b      	str	r3, [r7, #64]	; 0x40
 800bd30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd32:	2b03      	cmp	r3, #3
 800bd34:	d9dd      	bls.n	800bcf2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bd36:	2300      	movs	r3, #0
 800bd38:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bd3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <find_volume+0x13e>
 800bd40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd42:	3b01      	subs	r3, #1
 800bd44:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bd46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	3358      	adds	r3, #88	; 0x58
 800bd4c:	443b      	add	r3, r7
 800bd4e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bd52:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bd54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d005      	beq.n	800bd66 <find_volume+0x15e>
 800bd5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bd5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd5e:	f7ff fefd 	bl	800bb5c <check_fs>
 800bd62:	4603      	mov	r3, r0
 800bd64:	e000      	b.n	800bd68 <find_volume+0x160>
 800bd66:	2303      	movs	r3, #3
 800bd68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bd6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d905      	bls.n	800bd80 <find_volume+0x178>
 800bd74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd76:	3301      	adds	r3, #1
 800bd78:	643b      	str	r3, [r7, #64]	; 0x40
 800bd7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd7c:	2b03      	cmp	r3, #3
 800bd7e:	d9e2      	bls.n	800bd46 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bd80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd84:	2b04      	cmp	r3, #4
 800bd86:	d101      	bne.n	800bd8c <find_volume+0x184>
 800bd88:	2301      	movs	r3, #1
 800bd8a:	e17e      	b.n	800c08a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bd8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d901      	bls.n	800bd98 <find_volume+0x190>
 800bd94:	230d      	movs	r3, #13
 800bd96:	e178      	b.n	800c08a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9a:	3334      	adds	r3, #52	; 0x34
 800bd9c:	330b      	adds	r3, #11
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fd ff52 	bl	8009c48 <ld_word>
 800bda4:	4603      	mov	r3, r0
 800bda6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdaa:	d001      	beq.n	800bdb0 <find_volume+0x1a8>
 800bdac:	230d      	movs	r3, #13
 800bdae:	e16c      	b.n	800c08a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb2:	3334      	adds	r3, #52	; 0x34
 800bdb4:	3316      	adds	r3, #22
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fd ff46 	bl	8009c48 <ld_word>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bdc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d106      	bne.n	800bdd4 <find_volume+0x1cc>
 800bdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc8:	3334      	adds	r3, #52	; 0x34
 800bdca:	3324      	adds	r3, #36	; 0x24
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7fd ff53 	bl	8009c78 <ld_dword>
 800bdd2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bdd8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bddc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800bde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde6:	789b      	ldrb	r3, [r3, #2]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d005      	beq.n	800bdf8 <find_volume+0x1f0>
 800bdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdee:	789b      	ldrb	r3, [r3, #2]
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	d001      	beq.n	800bdf8 <find_volume+0x1f0>
 800bdf4:	230d      	movs	r3, #13
 800bdf6:	e148      	b.n	800c08a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfa:	789b      	ldrb	r3, [r3, #2]
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be00:	fb02 f303 	mul.w	r3, r2, r3
 800be04:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800be06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be0c:	b29a      	uxth	r2, r3
 800be0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be10:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800be12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be14:	895b      	ldrh	r3, [r3, #10]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d008      	beq.n	800be2c <find_volume+0x224>
 800be1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1c:	895b      	ldrh	r3, [r3, #10]
 800be1e:	461a      	mov	r2, r3
 800be20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be22:	895b      	ldrh	r3, [r3, #10]
 800be24:	3b01      	subs	r3, #1
 800be26:	4013      	ands	r3, r2
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d001      	beq.n	800be30 <find_volume+0x228>
 800be2c:	230d      	movs	r3, #13
 800be2e:	e12c      	b.n	800c08a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800be30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be32:	3334      	adds	r3, #52	; 0x34
 800be34:	3311      	adds	r3, #17
 800be36:	4618      	mov	r0, r3
 800be38:	f7fd ff06 	bl	8009c48 <ld_word>
 800be3c:	4603      	mov	r3, r0
 800be3e:	461a      	mov	r2, r3
 800be40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be42:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800be44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be46:	891b      	ldrh	r3, [r3, #8]
 800be48:	f003 030f 	and.w	r3, r3, #15
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d001      	beq.n	800be56 <find_volume+0x24e>
 800be52:	230d      	movs	r3, #13
 800be54:	e119      	b.n	800c08a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800be56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be58:	3334      	adds	r3, #52	; 0x34
 800be5a:	3313      	adds	r3, #19
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7fd fef3 	bl	8009c48 <ld_word>
 800be62:	4603      	mov	r3, r0
 800be64:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800be66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d106      	bne.n	800be7a <find_volume+0x272>
 800be6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6e:	3334      	adds	r3, #52	; 0x34
 800be70:	3320      	adds	r3, #32
 800be72:	4618      	mov	r0, r3
 800be74:	f7fd ff00 	bl	8009c78 <ld_dword>
 800be78:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800be7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7c:	3334      	adds	r3, #52	; 0x34
 800be7e:	330e      	adds	r3, #14
 800be80:	4618      	mov	r0, r3
 800be82:	f7fd fee1 	bl	8009c48 <ld_word>
 800be86:	4603      	mov	r3, r0
 800be88:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800be8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d101      	bne.n	800be94 <find_volume+0x28c>
 800be90:	230d      	movs	r3, #13
 800be92:	e0fa      	b.n	800c08a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800be94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800be96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be98:	4413      	add	r3, r2
 800be9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be9c:	8912      	ldrh	r2, [r2, #8]
 800be9e:	0912      	lsrs	r2, r2, #4
 800bea0:	b292      	uxth	r2, r2
 800bea2:	4413      	add	r3, r2
 800bea4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beaa:	429a      	cmp	r2, r3
 800beac:	d204      	bcs.n	800beb8 <find_volume+0x2b0>
 800beae:	230d      	movs	r3, #13
 800beb0:	e0eb      	b.n	800c08a <find_volume+0x482>
 800beb2:	bf00      	nop
 800beb4:	20000d14 	.word	0x20000d14
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800beb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800beba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bec0:	8952      	ldrh	r2, [r2, #10]
 800bec2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bec6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beca:	2b00      	cmp	r3, #0
 800becc:	d101      	bne.n	800bed2 <find_volume+0x2ca>
 800bece:	230d      	movs	r3, #13
 800bed0:	e0db      	b.n	800c08a <find_volume+0x482>
		fmt = FS_FAT32;
 800bed2:	2303      	movs	r3, #3
 800bed4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beda:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bede:	4293      	cmp	r3, r2
 800bee0:	d802      	bhi.n	800bee8 <find_volume+0x2e0>
 800bee2:	2302      	movs	r3, #2
 800bee4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beea:	f640 72f5 	movw	r2, #4085	; 0xff5
 800beee:	4293      	cmp	r3, r2
 800bef0:	d802      	bhi.n	800bef8 <find_volume+0x2f0>
 800bef2:	2301      	movs	r3, #1
 800bef4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befa:	1c9a      	adds	r2, r3, #2
 800befc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befe:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800bf00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf04:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bf06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bf08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf0a:	441a      	add	r2, r3
 800bf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800bf10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf14:	441a      	add	r2, r3
 800bf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf18:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800bf1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf1e:	2b03      	cmp	r3, #3
 800bf20:	d11e      	bne.n	800bf60 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf24:	3334      	adds	r3, #52	; 0x34
 800bf26:	332a      	adds	r3, #42	; 0x2a
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7fd fe8d 	bl	8009c48 <ld_word>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <find_volume+0x330>
 800bf34:	230d      	movs	r3, #13
 800bf36:	e0a8      	b.n	800c08a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3a:	891b      	ldrh	r3, [r3, #8]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d001      	beq.n	800bf44 <find_volume+0x33c>
 800bf40:	230d      	movs	r3, #13
 800bf42:	e0a2      	b.n	800c08a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bf44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf46:	3334      	adds	r3, #52	; 0x34
 800bf48:	332c      	adds	r3, #44	; 0x2c
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fd fe94 	bl	8009c78 <ld_dword>
 800bf50:	4602      	mov	r2, r0
 800bf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf54:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf58:	699b      	ldr	r3, [r3, #24]
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	647b      	str	r3, [r7, #68]	; 0x44
 800bf5e:	e01f      	b.n	800bfa0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf62:	891b      	ldrh	r3, [r3, #8]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d101      	bne.n	800bf6c <find_volume+0x364>
 800bf68:	230d      	movs	r3, #13
 800bf6a:	e08e      	b.n	800c08a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf72:	441a      	add	r2, r3
 800bf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf76:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bf78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf7c:	2b02      	cmp	r3, #2
 800bf7e:	d103      	bne.n	800bf88 <find_volume+0x380>
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	699b      	ldr	r3, [r3, #24]
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	e00a      	b.n	800bf9e <find_volume+0x396>
 800bf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8a:	699a      	ldr	r2, [r3, #24]
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	005b      	lsls	r3, r3, #1
 800bf90:	4413      	add	r3, r2
 800bf92:	085a      	lsrs	r2, r3, #1
 800bf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf96:	699b      	ldr	r3, [r3, #24]
 800bf98:	f003 0301 	and.w	r3, r3, #1
 800bf9c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bf9e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa2:	69da      	ldr	r2, [r3, #28]
 800bfa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfa6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bfaa:	0a5b      	lsrs	r3, r3, #9
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d201      	bcs.n	800bfb4 <find_volume+0x3ac>
 800bfb0:	230d      	movs	r3, #13
 800bfb2:	e06a      	b.n	800c08a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfba:	615a      	str	r2, [r3, #20]
 800bfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbe:	695a      	ldr	r2, [r3, #20]
 800bfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800bfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc6:	2280      	movs	r2, #128	; 0x80
 800bfc8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bfca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bfce:	2b03      	cmp	r3, #3
 800bfd0:	d149      	bne.n	800c066 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd4:	3334      	adds	r3, #52	; 0x34
 800bfd6:	3330      	adds	r3, #48	; 0x30
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fd fe35 	bl	8009c48 <ld_word>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d140      	bne.n	800c066 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bfe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	4619      	mov	r1, r3
 800bfea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfec:	f7fe f8dc 	bl	800a1a8 <move_window>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d137      	bne.n	800c066 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800bff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff8:	2200      	movs	r2, #0
 800bffa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffe:	3334      	adds	r3, #52	; 0x34
 800c000:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c004:	4618      	mov	r0, r3
 800c006:	f7fd fe1f 	bl	8009c48 <ld_word>
 800c00a:	4603      	mov	r3, r0
 800c00c:	461a      	mov	r2, r3
 800c00e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c012:	429a      	cmp	r2, r3
 800c014:	d127      	bne.n	800c066 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c018:	3334      	adds	r3, #52	; 0x34
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fd fe2c 	bl	8009c78 <ld_dword>
 800c020:	4603      	mov	r3, r0
 800c022:	4a1c      	ldr	r2, [pc, #112]	; (800c094 <find_volume+0x48c>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d11e      	bne.n	800c066 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02a:	3334      	adds	r3, #52	; 0x34
 800c02c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c030:	4618      	mov	r0, r3
 800c032:	f7fd fe21 	bl	8009c78 <ld_dword>
 800c036:	4603      	mov	r3, r0
 800c038:	4a17      	ldr	r2, [pc, #92]	; (800c098 <find_volume+0x490>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d113      	bne.n	800c066 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c040:	3334      	adds	r3, #52	; 0x34
 800c042:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c046:	4618      	mov	r0, r3
 800c048:	f7fd fe16 	bl	8009c78 <ld_dword>
 800c04c:	4602      	mov	r2, r0
 800c04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c050:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c054:	3334      	adds	r3, #52	; 0x34
 800c056:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fd fe0c 	bl	8009c78 <ld_dword>
 800c060:	4602      	mov	r2, r0
 800c062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c064:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c068:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c06c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c06e:	4b0b      	ldr	r3, [pc, #44]	; (800c09c <find_volume+0x494>)
 800c070:	881b      	ldrh	r3, [r3, #0]
 800c072:	3301      	adds	r3, #1
 800c074:	b29a      	uxth	r2, r3
 800c076:	4b09      	ldr	r3, [pc, #36]	; (800c09c <find_volume+0x494>)
 800c078:	801a      	strh	r2, [r3, #0]
 800c07a:	4b08      	ldr	r3, [pc, #32]	; (800c09c <find_volume+0x494>)
 800c07c:	881a      	ldrh	r2, [r3, #0]
 800c07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c080:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c082:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c084:	f7fe f828 	bl	800a0d8 <clear_lock>
#endif
	return FR_OK;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3758      	adds	r7, #88	; 0x58
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	41615252 	.word	0x41615252
 800c098:	61417272 	.word	0x61417272
 800c09c:	20000d1c 	.word	0x20000d1c

0800c0a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c0aa:	2309      	movs	r3, #9
 800c0ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d01c      	beq.n	800c0ee <validate+0x4e>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d018      	beq.n	800c0ee <validate+0x4e>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d013      	beq.n	800c0ee <validate+0x4e>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	889a      	ldrh	r2, [r3, #4]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	88db      	ldrh	r3, [r3, #6]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d10c      	bne.n	800c0ee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	785b      	ldrb	r3, [r3, #1]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fd fd0e 	bl	8009afc <disk_status>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	f003 0301 	and.w	r3, r3, #1
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d101      	bne.n	800c0ee <validate+0x4e>
			res = FR_OK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c0ee:	7bfb      	ldrb	r3, [r7, #15]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d102      	bne.n	800c0fa <validate+0x5a>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	e000      	b.n	800c0fc <validate+0x5c>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	683a      	ldr	r2, [r7, #0]
 800c0fe:	6013      	str	r3, [r2, #0]
	return res;
 800c100:	7bfb      	ldrb	r3, [r7, #15]
}
 800c102:	4618      	mov	r0, r3
 800c104:	3710      	adds	r7, #16
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
	...

0800c10c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b088      	sub	sp, #32
 800c110:	af00      	add	r7, sp, #0
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	4613      	mov	r3, r2
 800c118:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c11e:	f107 0310 	add.w	r3, r7, #16
 800c122:	4618      	mov	r0, r3
 800c124:	f7ff fcd5 	bl	800bad2 <get_ldnumber>
 800c128:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	da01      	bge.n	800c134 <f_mount+0x28>
 800c130:	230b      	movs	r3, #11
 800c132:	e02b      	b.n	800c18c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c134:	4a17      	ldr	r2, [pc, #92]	; (800c194 <f_mount+0x88>)
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c13c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d005      	beq.n	800c150 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c144:	69b8      	ldr	r0, [r7, #24]
 800c146:	f7fd ffc7 	bl	800a0d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	2200      	movs	r2, #0
 800c14e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d002      	beq.n	800c15c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	490d      	ldr	r1, [pc, #52]	; (800c194 <f_mount+0x88>)
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d002      	beq.n	800c172 <f_mount+0x66>
 800c16c:	79fb      	ldrb	r3, [r7, #7]
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d001      	beq.n	800c176 <f_mount+0x6a>
 800c172:	2300      	movs	r3, #0
 800c174:	e00a      	b.n	800c18c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c176:	f107 010c 	add.w	r1, r7, #12
 800c17a:	f107 0308 	add.w	r3, r7, #8
 800c17e:	2200      	movs	r2, #0
 800c180:	4618      	mov	r0, r3
 800c182:	f7ff fd41 	bl	800bc08 <find_volume>
 800c186:	4603      	mov	r3, r0
 800c188:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c18a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3720      	adds	r7, #32
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	20000d14 	.word	0x20000d14

0800c198 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b09a      	sub	sp, #104	; 0x68
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d101      	bne.n	800c1b0 <f_open+0x18>
 800c1ac:	2309      	movs	r3, #9
 800c1ae:	e1bd      	b.n	800c52c <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c1b0:	79fb      	ldrb	r3, [r7, #7]
 800c1b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c1b8:	79fa      	ldrb	r2, [r7, #7]
 800c1ba:	f107 0110 	add.w	r1, r7, #16
 800c1be:	f107 0308 	add.w	r3, r7, #8
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7ff fd20 	bl	800bc08 <find_volume>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c1ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f040 81a1 	bne.w	800c51a <f_open+0x382>
		dj.obj.fs = fs;
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800c1dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c1e0:	f001 fba9 	bl	800d936 <ff_memalloc>
 800c1e4:	65b8      	str	r0, [r7, #88]	; 0x58
 800c1e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d101      	bne.n	800c1f0 <f_open+0x58>
 800c1ec:	2311      	movs	r3, #17
 800c1ee:	e19d      	b.n	800c52c <f_open+0x394>
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1f4:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c1f6:	68ba      	ldr	r2, [r7, #8]
 800c1f8:	f107 0314 	add.w	r3, r7, #20
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7ff fbf6 	bl	800b9f0 <follow_path>
 800c204:	4603      	mov	r3, r0
 800c206:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c20a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d11a      	bne.n	800c248 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c212:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c216:	b25b      	sxtb	r3, r3
 800c218:	2b00      	cmp	r3, #0
 800c21a:	da03      	bge.n	800c224 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800c21c:	2306      	movs	r3, #6
 800c21e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c222:	e011      	b.n	800c248 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c224:	79fb      	ldrb	r3, [r7, #7]
 800c226:	f023 0301 	bic.w	r3, r3, #1
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	bf14      	ite	ne
 800c22e:	2301      	movne	r3, #1
 800c230:	2300      	moveq	r3, #0
 800c232:	b2db      	uxtb	r3, r3
 800c234:	461a      	mov	r2, r3
 800c236:	f107 0314 	add.w	r3, r7, #20
 800c23a:	4611      	mov	r1, r2
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fd fe03 	bl	8009e48 <chk_lock>
 800c242:	4603      	mov	r3, r0
 800c244:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c248:	79fb      	ldrb	r3, [r7, #7]
 800c24a:	f003 031c 	and.w	r3, r3, #28
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d07f      	beq.n	800c352 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 800c252:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c256:	2b00      	cmp	r3, #0
 800c258:	d017      	beq.n	800c28a <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c25a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c25e:	2b04      	cmp	r3, #4
 800c260:	d10e      	bne.n	800c280 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c262:	f7fd fe4d 	bl	8009f00 <enq_lock>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d006      	beq.n	800c27a <f_open+0xe2>
 800c26c:	f107 0314 	add.w	r3, r7, #20
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff f82f 	bl	800b2d4 <dir_register>
 800c276:	4603      	mov	r3, r0
 800c278:	e000      	b.n	800c27c <f_open+0xe4>
 800c27a:	2312      	movs	r3, #18
 800c27c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c280:	79fb      	ldrb	r3, [r7, #7]
 800c282:	f043 0308 	orr.w	r3, r3, #8
 800c286:	71fb      	strb	r3, [r7, #7]
 800c288:	e010      	b.n	800c2ac <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c28a:	7ebb      	ldrb	r3, [r7, #26]
 800c28c:	f003 0311 	and.w	r3, r3, #17
 800c290:	2b00      	cmp	r3, #0
 800c292:	d003      	beq.n	800c29c <f_open+0x104>
					res = FR_DENIED;
 800c294:	2307      	movs	r3, #7
 800c296:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c29a:	e007      	b.n	800c2ac <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c29c:	79fb      	ldrb	r3, [r7, #7]
 800c29e:	f003 0304 	and.w	r3, r3, #4
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <f_open+0x114>
 800c2a6:	2308      	movs	r3, #8
 800c2a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c2ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d168      	bne.n	800c386 <f_open+0x1ee>
 800c2b4:	79fb      	ldrb	r3, [r7, #7]
 800c2b6:	f003 0308 	and.w	r3, r3, #8
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d063      	beq.n	800c386 <f_open+0x1ee>
				dw = GET_FATTIME();
 800c2be:	f7fd fcbb 	bl	8009c38 <get_fattime>
 800c2c2:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c6:	330e      	adds	r3, #14
 800c2c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fd fd12 	bl	8009cf4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d2:	3316      	adds	r3, #22
 800c2d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fd fd0c 	bl	8009cf4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2de:	330b      	adds	r3, #11
 800c2e0:	2220      	movs	r2, #32
 800c2e2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2e8:	4611      	mov	r1, r2
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fe fc61 	bl	800abb2 <ld_clust>
 800c2f0:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7fe fc79 	bl	800abf0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c300:	331c      	adds	r3, #28
 800c302:	2100      	movs	r1, #0
 800c304:	4618      	mov	r0, r3
 800c306:	f7fd fcf5 	bl	8009cf4 <st_dword>
					fs->wflag = 1;
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	2201      	movs	r2, #1
 800c30e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c312:	2b00      	cmp	r3, #0
 800c314:	d037      	beq.n	800c386 <f_open+0x1ee>
						dw = fs->winsect;
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c31a:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800c31c:	f107 0314 	add.w	r3, r7, #20
 800c320:	2200      	movs	r2, #0
 800c322:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c324:	4618      	mov	r0, r3
 800c326:	f7fe f98c 	bl	800a642 <remove_chain>
 800c32a:	4603      	mov	r3, r0
 800c32c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c330:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c334:	2b00      	cmp	r3, #0
 800c336:	d126      	bne.n	800c386 <f_open+0x1ee>
							res = move_window(fs, dw);
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7fd ff33 	bl	800a1a8 <move_window>
 800c342:	4603      	mov	r3, r0
 800c344:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c34c:	3a01      	subs	r2, #1
 800c34e:	611a      	str	r2, [r3, #16]
 800c350:	e019      	b.n	800c386 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c352:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c356:	2b00      	cmp	r3, #0
 800c358:	d115      	bne.n	800c386 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c35a:	7ebb      	ldrb	r3, [r7, #26]
 800c35c:	f003 0310 	and.w	r3, r3, #16
 800c360:	2b00      	cmp	r3, #0
 800c362:	d003      	beq.n	800c36c <f_open+0x1d4>
					res = FR_NO_FILE;
 800c364:	2304      	movs	r3, #4
 800c366:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c36a:	e00c      	b.n	800c386 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c36c:	79fb      	ldrb	r3, [r7, #7]
 800c36e:	f003 0302 	and.w	r3, r3, #2
 800c372:	2b00      	cmp	r3, #0
 800c374:	d007      	beq.n	800c386 <f_open+0x1ee>
 800c376:	7ebb      	ldrb	r3, [r7, #26]
 800c378:	f003 0301 	and.w	r3, r3, #1
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d002      	beq.n	800c386 <f_open+0x1ee>
						res = FR_DENIED;
 800c380:	2307      	movs	r3, #7
 800c382:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c386:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d128      	bne.n	800c3e0 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c38e:	79fb      	ldrb	r3, [r7, #7]
 800c390:	f003 0308 	and.w	r3, r3, #8
 800c394:	2b00      	cmp	r3, #0
 800c396:	d003      	beq.n	800c3a0 <f_open+0x208>
				mode |= FA_MODIFIED;
 800c398:	79fb      	ldrb	r3, [r7, #7]
 800c39a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c39e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c3a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c3ae:	79fb      	ldrb	r3, [r7, #7]
 800c3b0:	f023 0301 	bic.w	r3, r3, #1
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	bf14      	ite	ne
 800c3b8:	2301      	movne	r3, #1
 800c3ba:	2300      	moveq	r3, #0
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	461a      	mov	r2, r3
 800c3c0:	f107 0314 	add.w	r3, r7, #20
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7fd fdbc 	bl	8009f44 <inc_lock>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d102      	bne.n	800c3e0 <f_open+0x248>
 800c3da:	2302      	movs	r3, #2
 800c3dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c3e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f040 8095 	bne.w	800c514 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fe fbde 	bl	800abb2 <ld_clust>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3fe:	331c      	adds	r3, #28
 800c400:	4618      	mov	r0, r3
 800c402:	f7fd fc39 	bl	8009c78 <ld_dword>
 800c406:	4602      	mov	r2, r0
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2200      	movs	r2, #0
 800c410:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c412:	693a      	ldr	r2, [r7, #16]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	88da      	ldrh	r2, [r3, #6]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	79fa      	ldrb	r2, [r7, #7]
 800c424:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2200      	movs	r2, #0
 800c42a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2200      	movs	r2, #0
 800c430:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2200      	movs	r2, #0
 800c436:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	3330      	adds	r3, #48	; 0x30
 800c43c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c440:	2100      	movs	r1, #0
 800c442:	4618      	mov	r0, r3
 800c444:	f7fd fca3 	bl	8009d8e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c448:	79fb      	ldrb	r3, [r7, #7]
 800c44a:	f003 0320 	and.w	r3, r3, #32
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d060      	beq.n	800c514 <f_open+0x37c>
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d05c      	beq.n	800c514 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	68da      	ldr	r2, [r3, #12]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	895b      	ldrh	r3, [r3, #10]
 800c466:	025b      	lsls	r3, r3, #9
 800c468:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c476:	e016      	b.n	800c4a6 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7fd ff4e 	bl	800a31e <get_fat>
 800c482:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c486:	2b01      	cmp	r3, #1
 800c488:	d802      	bhi.n	800c490 <f_open+0x2f8>
 800c48a:	2302      	movs	r3, #2
 800c48c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c490:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c496:	d102      	bne.n	800c49e <f_open+0x306>
 800c498:	2301      	movs	r3, #1
 800c49a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c49e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c4a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4a2:	1ad3      	subs	r3, r2, r3
 800c4a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c4a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d103      	bne.n	800c4b6 <f_open+0x31e>
 800c4ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c4b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d8e0      	bhi.n	800c478 <f_open+0x2e0>
				}
				fp->clust = clst;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c4ba:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c4bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d127      	bne.n	800c514 <f_open+0x37c>
 800c4c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d022      	beq.n	800c514 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7fd ff04 	bl	800a2e0 <clust2sect>
 800c4d8:	64b8      	str	r0, [r7, #72]	; 0x48
 800c4da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d103      	bne.n	800c4e8 <f_open+0x350>
						res = FR_INT_ERR;
 800c4e0:	2302      	movs	r3, #2
 800c4e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c4e6:	e015      	b.n	800c514 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c4e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4ea:	0a5a      	lsrs	r2, r3, #9
 800c4ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4ee:	441a      	add	r2, r3
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	7858      	ldrb	r0, [r3, #1]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6a1a      	ldr	r2, [r3, #32]
 800c502:	2301      	movs	r3, #1
 800c504:	f7fd fb3a 	bl	8009b7c <disk_read>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <f_open+0x37c>
 800c50e:	2301      	movs	r3, #1
 800c510:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800c514:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c516:	f001 fa1a 	bl	800d94e <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c51a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d002      	beq.n	800c528 <f_open+0x390>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2200      	movs	r2, #0
 800c526:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c528:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3768      	adds	r7, #104	; 0x68
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b08e      	sub	sp, #56	; 0x38
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
 800c540:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	2200      	movs	r2, #0
 800c54a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f107 0214 	add.w	r2, r7, #20
 800c552:	4611      	mov	r1, r2
 800c554:	4618      	mov	r0, r3
 800c556:	f7ff fda3 	bl	800c0a0 <validate>
 800c55a:	4603      	mov	r3, r0
 800c55c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c560:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c564:	2b00      	cmp	r3, #0
 800c566:	d107      	bne.n	800c578 <f_read+0x44>
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	7d5b      	ldrb	r3, [r3, #21]
 800c56c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c570:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c574:	2b00      	cmp	r3, #0
 800c576:	d002      	beq.n	800c57e <f_read+0x4a>
 800c578:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c57c:	e115      	b.n	800c7aa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	7d1b      	ldrb	r3, [r3, #20]
 800c582:	f003 0301 	and.w	r3, r3, #1
 800c586:	2b00      	cmp	r3, #0
 800c588:	d101      	bne.n	800c58e <f_read+0x5a>
 800c58a:	2307      	movs	r3, #7
 800c58c:	e10d      	b.n	800c7aa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	68da      	ldr	r2, [r3, #12]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	699b      	ldr	r3, [r3, #24]
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	6a3b      	ldr	r3, [r7, #32]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	f240 80fe 	bls.w	800c7a0 <f_read+0x26c>
 800c5a4:	6a3b      	ldr	r3, [r7, #32]
 800c5a6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c5a8:	e0fa      	b.n	800c7a0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	699b      	ldr	r3, [r3, #24]
 800c5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f040 80c6 	bne.w	800c744 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	699b      	ldr	r3, [r3, #24]
 800c5bc:	0a5b      	lsrs	r3, r3, #9
 800c5be:	697a      	ldr	r2, [r7, #20]
 800c5c0:	8952      	ldrh	r2, [r2, #10]
 800c5c2:	3a01      	subs	r2, #1
 800c5c4:	4013      	ands	r3, r2
 800c5c6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d12f      	bne.n	800c62e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	699b      	ldr	r3, [r3, #24]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d103      	bne.n	800c5de <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	633b      	str	r3, [r7, #48]	; 0x30
 800c5dc:	e013      	b.n	800c606 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d007      	beq.n	800c5f6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	699b      	ldr	r3, [r3, #24]
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f7fe f925 	bl	800a83c <clmt_clust>
 800c5f2:	6338      	str	r0, [r7, #48]	; 0x30
 800c5f4:	e007      	b.n	800c606 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	69db      	ldr	r3, [r3, #28]
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	4610      	mov	r0, r2
 800c600:	f7fd fe8d 	bl	800a31e <get_fat>
 800c604:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d804      	bhi.n	800c616 <f_read+0xe2>
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2202      	movs	r2, #2
 800c610:	755a      	strb	r2, [r3, #21]
 800c612:	2302      	movs	r3, #2
 800c614:	e0c9      	b.n	800c7aa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c61c:	d104      	bne.n	800c628 <f_read+0xf4>
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2201      	movs	r2, #1
 800c622:	755a      	strb	r2, [r3, #21]
 800c624:	2301      	movs	r3, #1
 800c626:	e0c0      	b.n	800c7aa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c62c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c62e:	697a      	ldr	r2, [r7, #20]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	69db      	ldr	r3, [r3, #28]
 800c634:	4619      	mov	r1, r3
 800c636:	4610      	mov	r0, r2
 800c638:	f7fd fe52 	bl	800a2e0 <clust2sect>
 800c63c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d104      	bne.n	800c64e <f_read+0x11a>
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2202      	movs	r2, #2
 800c648:	755a      	strb	r2, [r3, #21]
 800c64a:	2302      	movs	r3, #2
 800c64c:	e0ad      	b.n	800c7aa <f_read+0x276>
			sect += csect;
 800c64e:	69ba      	ldr	r2, [r7, #24]
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	4413      	add	r3, r2
 800c654:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	0a5b      	lsrs	r3, r3, #9
 800c65a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d039      	beq.n	800c6d6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c662:	69fa      	ldr	r2, [r7, #28]
 800c664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c666:	4413      	add	r3, r2
 800c668:	697a      	ldr	r2, [r7, #20]
 800c66a:	8952      	ldrh	r2, [r2, #10]
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d905      	bls.n	800c67c <f_read+0x148>
					cc = fs->csize - csect;
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	895b      	ldrh	r3, [r3, #10]
 800c674:	461a      	mov	r2, r3
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	7858      	ldrb	r0, [r3, #1]
 800c680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c682:	69ba      	ldr	r2, [r7, #24]
 800c684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c686:	f7fd fa79 	bl	8009b7c <disk_read>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d004      	beq.n	800c69a <f_read+0x166>
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2201      	movs	r2, #1
 800c694:	755a      	strb	r2, [r3, #21]
 800c696:	2301      	movs	r3, #1
 800c698:	e087      	b.n	800c7aa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	7d1b      	ldrb	r3, [r3, #20]
 800c69e:	b25b      	sxtb	r3, r3
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	da14      	bge.n	800c6ce <f_read+0x19a>
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6a1a      	ldr	r2, [r3, #32]
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d90d      	bls.n	800c6ce <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6a1a      	ldr	r2, [r3, #32]
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	1ad3      	subs	r3, r2, r3
 800c6ba:	025b      	lsls	r3, r3, #9
 800c6bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6be:	18d0      	adds	r0, r2, r3
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	3330      	adds	r3, #48	; 0x30
 800c6c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	f7fd fb3f 	bl	8009d4c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d0:	025b      	lsls	r3, r3, #9
 800c6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c6d4:	e050      	b.n	800c778 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	69ba      	ldr	r2, [r7, #24]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d02e      	beq.n	800c73e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	7d1b      	ldrb	r3, [r3, #20]
 800c6e4:	b25b      	sxtb	r3, r3
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	da18      	bge.n	800c71c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	7858      	ldrb	r0, [r3, #1]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	6a1a      	ldr	r2, [r3, #32]
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	f7fd fa5f 	bl	8009bbc <disk_write>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d004      	beq.n	800c70e <f_read+0x1da>
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2201      	movs	r2, #1
 800c708:	755a      	strb	r2, [r3, #21]
 800c70a:	2301      	movs	r3, #1
 800c70c:	e04d      	b.n	800c7aa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	7d1b      	ldrb	r3, [r3, #20]
 800c712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c716:	b2da      	uxtb	r2, r3
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	7858      	ldrb	r0, [r3, #1]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c726:	2301      	movs	r3, #1
 800c728:	69ba      	ldr	r2, [r7, #24]
 800c72a:	f7fd fa27 	bl	8009b7c <disk_read>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d004      	beq.n	800c73e <f_read+0x20a>
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2201      	movs	r2, #1
 800c738:	755a      	strb	r2, [r3, #21]
 800c73a:	2301      	movs	r3, #1
 800c73c:	e035      	b.n	800c7aa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	69ba      	ldr	r2, [r7, #24]
 800c742:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	699b      	ldr	r3, [r3, #24]
 800c748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c74c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c750:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	429a      	cmp	r2, r3
 800c758:	d901      	bls.n	800c75e <f_read+0x22a>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	699b      	ldr	r3, [r3, #24]
 800c768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c76c:	4413      	add	r3, r2
 800c76e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c770:	4619      	mov	r1, r3
 800c772:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c774:	f7fd faea 	bl	8009d4c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77c:	4413      	add	r3, r2
 800c77e:	627b      	str	r3, [r7, #36]	; 0x24
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	699a      	ldr	r2, [r3, #24]
 800c784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c786:	441a      	add	r2, r3
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	619a      	str	r2, [r3, #24]
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c792:	441a      	add	r2, r3
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	601a      	str	r2, [r3, #0]
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	f47f af01 	bne.w	800c5aa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c7a8:	2300      	movs	r3, #0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3738      	adds	r7, #56	; 0x38
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}

0800c7b2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c7b2:	b580      	push	{r7, lr}
 800c7b4:	b08c      	sub	sp, #48	; 0x30
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	60f8      	str	r0, [r7, #12]
 800c7ba:	60b9      	str	r1, [r7, #8]
 800c7bc:	607a      	str	r2, [r7, #4]
 800c7be:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f107 0210 	add.w	r2, r7, #16
 800c7d0:	4611      	mov	r1, r2
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7ff fc64 	bl	800c0a0 <validate>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c7de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d107      	bne.n	800c7f6 <f_write+0x44>
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	7d5b      	ldrb	r3, [r3, #21]
 800c7ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c7ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d002      	beq.n	800c7fc <f_write+0x4a>
 800c7f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7fa:	e14b      	b.n	800ca94 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	7d1b      	ldrb	r3, [r3, #20]
 800c800:	f003 0302 	and.w	r3, r3, #2
 800c804:	2b00      	cmp	r3, #0
 800c806:	d101      	bne.n	800c80c <f_write+0x5a>
 800c808:	2307      	movs	r3, #7
 800c80a:	e143      	b.n	800ca94 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	699a      	ldr	r2, [r3, #24]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	441a      	add	r2, r3
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	699b      	ldr	r3, [r3, #24]
 800c818:	429a      	cmp	r2, r3
 800c81a:	f080 812d 	bcs.w	800ca78 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	699b      	ldr	r3, [r3, #24]
 800c822:	43db      	mvns	r3, r3
 800c824:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c826:	e127      	b.n	800ca78 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	699b      	ldr	r3, [r3, #24]
 800c82c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c830:	2b00      	cmp	r3, #0
 800c832:	f040 80e3 	bne.w	800c9fc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	699b      	ldr	r3, [r3, #24]
 800c83a:	0a5b      	lsrs	r3, r3, #9
 800c83c:	693a      	ldr	r2, [r7, #16]
 800c83e:	8952      	ldrh	r2, [r2, #10]
 800c840:	3a01      	subs	r2, #1
 800c842:	4013      	ands	r3, r2
 800c844:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d143      	bne.n	800c8d4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	699b      	ldr	r3, [r3, #24]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d10c      	bne.n	800c86e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d11a      	bne.n	800c896 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2100      	movs	r1, #0
 800c864:	4618      	mov	r0, r3
 800c866:	f7fd ff51 	bl	800a70c <create_chain>
 800c86a:	62b8      	str	r0, [r7, #40]	; 0x28
 800c86c:	e013      	b.n	800c896 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c872:	2b00      	cmp	r3, #0
 800c874:	d007      	beq.n	800c886 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	699b      	ldr	r3, [r3, #24]
 800c87a:	4619      	mov	r1, r3
 800c87c:	68f8      	ldr	r0, [r7, #12]
 800c87e:	f7fd ffdd 	bl	800a83c <clmt_clust>
 800c882:	62b8      	str	r0, [r7, #40]	; 0x28
 800c884:	e007      	b.n	800c896 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	69db      	ldr	r3, [r3, #28]
 800c88c:	4619      	mov	r1, r3
 800c88e:	4610      	mov	r0, r2
 800c890:	f7fd ff3c 	bl	800a70c <create_chain>
 800c894:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 80f2 	beq.w	800ca82 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d104      	bne.n	800c8ae <f_write+0xfc>
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	755a      	strb	r2, [r3, #21]
 800c8aa:	2302      	movs	r3, #2
 800c8ac:	e0f2      	b.n	800ca94 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b4:	d104      	bne.n	800c8c0 <f_write+0x10e>
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	755a      	strb	r2, [r3, #21]
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e0e9      	b.n	800ca94 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8c4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	689b      	ldr	r3, [r3, #8]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d102      	bne.n	800c8d4 <f_write+0x122>
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8d2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	7d1b      	ldrb	r3, [r3, #20]
 800c8d8:	b25b      	sxtb	r3, r3
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	da18      	bge.n	800c910 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	7858      	ldrb	r0, [r3, #1]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6a1a      	ldr	r2, [r3, #32]
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	f7fd f965 	bl	8009bbc <disk_write>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d004      	beq.n	800c902 <f_write+0x150>
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	755a      	strb	r2, [r3, #21]
 800c8fe:	2301      	movs	r3, #1
 800c900:	e0c8      	b.n	800ca94 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	7d1b      	ldrb	r3, [r3, #20]
 800c906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c910:	693a      	ldr	r2, [r7, #16]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	69db      	ldr	r3, [r3, #28]
 800c916:	4619      	mov	r1, r3
 800c918:	4610      	mov	r0, r2
 800c91a:	f7fd fce1 	bl	800a2e0 <clust2sect>
 800c91e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d104      	bne.n	800c930 <f_write+0x17e>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2202      	movs	r2, #2
 800c92a:	755a      	strb	r2, [r3, #21]
 800c92c:	2302      	movs	r3, #2
 800c92e:	e0b1      	b.n	800ca94 <f_write+0x2e2>
			sect += csect;
 800c930:	697a      	ldr	r2, [r7, #20]
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	4413      	add	r3, r2
 800c936:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	0a5b      	lsrs	r3, r3, #9
 800c93c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c93e:	6a3b      	ldr	r3, [r7, #32]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d03c      	beq.n	800c9be <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c944:	69ba      	ldr	r2, [r7, #24]
 800c946:	6a3b      	ldr	r3, [r7, #32]
 800c948:	4413      	add	r3, r2
 800c94a:	693a      	ldr	r2, [r7, #16]
 800c94c:	8952      	ldrh	r2, [r2, #10]
 800c94e:	4293      	cmp	r3, r2
 800c950:	d905      	bls.n	800c95e <f_write+0x1ac>
					cc = fs->csize - csect;
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	895b      	ldrh	r3, [r3, #10]
 800c956:	461a      	mov	r2, r3
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	1ad3      	subs	r3, r2, r3
 800c95c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	7858      	ldrb	r0, [r3, #1]
 800c962:	6a3b      	ldr	r3, [r7, #32]
 800c964:	697a      	ldr	r2, [r7, #20]
 800c966:	69f9      	ldr	r1, [r7, #28]
 800c968:	f7fd f928 	bl	8009bbc <disk_write>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d004      	beq.n	800c97c <f_write+0x1ca>
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2201      	movs	r2, #1
 800c976:	755a      	strb	r2, [r3, #21]
 800c978:	2301      	movs	r3, #1
 800c97a:	e08b      	b.n	800ca94 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6a1a      	ldr	r2, [r3, #32]
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	1ad3      	subs	r3, r2, r3
 800c984:	6a3a      	ldr	r2, [r7, #32]
 800c986:	429a      	cmp	r2, r3
 800c988:	d915      	bls.n	800c9b6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6a1a      	ldr	r2, [r3, #32]
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	025b      	lsls	r3, r3, #9
 800c99a:	69fa      	ldr	r2, [r7, #28]
 800c99c:	4413      	add	r3, r2
 800c99e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	f7fd f9d2 	bl	8009d4c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	7d1b      	ldrb	r3, [r3, #20]
 800c9ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c9b6:	6a3b      	ldr	r3, [r7, #32]
 800c9b8:	025b      	lsls	r3, r3, #9
 800c9ba:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c9bc:	e03f      	b.n	800ca3e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	6a1b      	ldr	r3, [r3, #32]
 800c9c2:	697a      	ldr	r2, [r7, #20]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d016      	beq.n	800c9f6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	699a      	ldr	r2, [r3, #24]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d210      	bcs.n	800c9f6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	7858      	ldrb	r0, [r3, #1]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9de:	2301      	movs	r3, #1
 800c9e0:	697a      	ldr	r2, [r7, #20]
 800c9e2:	f7fd f8cb 	bl	8009b7c <disk_read>
 800c9e6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d004      	beq.n	800c9f6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	755a      	strb	r2, [r3, #21]
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	e04e      	b.n	800ca94 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	699b      	ldr	r3, [r3, #24]
 800ca00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca04:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ca08:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ca0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d901      	bls.n	800ca16 <f_write+0x264>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	699b      	ldr	r3, [r3, #24]
 800ca20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca24:	4413      	add	r3, r2
 800ca26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca28:	69f9      	ldr	r1, [r7, #28]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fd f98e 	bl	8009d4c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	7d1b      	ldrb	r3, [r3, #20]
 800ca34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca38:	b2da      	uxtb	r2, r3
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ca3e:	69fa      	ldr	r2, [r7, #28]
 800ca40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca42:	4413      	add	r3, r2
 800ca44:	61fb      	str	r3, [r7, #28]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	699a      	ldr	r2, [r3, #24]
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4c:	441a      	add	r2, r3
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	619a      	str	r2, [r3, #24]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	68da      	ldr	r2, [r3, #12]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	699b      	ldr	r3, [r3, #24]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	bf38      	it	cc
 800ca5e:	461a      	movcc	r2, r3
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	60da      	str	r2, [r3, #12]
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6a:	441a      	add	r2, r3
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	601a      	str	r2, [r3, #0]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca74:	1ad3      	subs	r3, r2, r3
 800ca76:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	f47f aed4 	bne.w	800c828 <f_write+0x76>
 800ca80:	e000      	b.n	800ca84 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ca82:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	7d1b      	ldrb	r3, [r3, #20]
 800ca88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca8c:	b2da      	uxtb	r2, r3
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ca92:	2300      	movs	r3, #0
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3730      	adds	r7, #48	; 0x30
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b086      	sub	sp, #24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f107 0208 	add.w	r2, r7, #8
 800caaa:	4611      	mov	r1, r2
 800caac:	4618      	mov	r0, r3
 800caae:	f7ff faf7 	bl	800c0a0 <validate>
 800cab2:	4603      	mov	r3, r0
 800cab4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cab6:	7dfb      	ldrb	r3, [r7, #23]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d168      	bne.n	800cb8e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	7d1b      	ldrb	r3, [r3, #20]
 800cac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d062      	beq.n	800cb8e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	7d1b      	ldrb	r3, [r3, #20]
 800cacc:	b25b      	sxtb	r3, r3
 800cace:	2b00      	cmp	r3, #0
 800cad0:	da15      	bge.n	800cafe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	7858      	ldrb	r0, [r3, #1]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6a1a      	ldr	r2, [r3, #32]
 800cae0:	2301      	movs	r3, #1
 800cae2:	f7fd f86b 	bl	8009bbc <disk_write>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d001      	beq.n	800caf0 <f_sync+0x54>
 800caec:	2301      	movs	r3, #1
 800caee:	e04f      	b.n	800cb90 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	7d1b      	ldrb	r3, [r3, #20]
 800caf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caf8:	b2da      	uxtb	r2, r3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cafe:	f7fd f89b 	bl	8009c38 <get_fattime>
 800cb02:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cb04:	68ba      	ldr	r2, [r7, #8]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	4610      	mov	r0, r2
 800cb0e:	f7fd fb4b 	bl	800a1a8 <move_window>
 800cb12:	4603      	mov	r3, r0
 800cb14:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cb16:	7dfb      	ldrb	r3, [r7, #23]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d138      	bne.n	800cb8e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb20:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	330b      	adds	r3, #11
 800cb26:	781a      	ldrb	r2, [r3, #0]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	330b      	adds	r3, #11
 800cb2c:	f042 0220 	orr.w	r2, r2, #32
 800cb30:	b2d2      	uxtb	r2, r2
 800cb32:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6818      	ldr	r0, [r3, #0]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	68f9      	ldr	r1, [r7, #12]
 800cb40:	f7fe f856 	bl	800abf0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f103 021c 	add.w	r2, r3, #28
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	4619      	mov	r1, r3
 800cb50:	4610      	mov	r0, r2
 800cb52:	f7fd f8cf 	bl	8009cf4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	3316      	adds	r3, #22
 800cb5a:	6939      	ldr	r1, [r7, #16]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fd f8c9 	bl	8009cf4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	3312      	adds	r3, #18
 800cb66:	2100      	movs	r1, #0
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7fd f8a8 	bl	8009cbe <st_word>
					fs->wflag = 1;
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	2201      	movs	r2, #1
 800cb72:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7fd fb44 	bl	800a204 <sync_fs>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	7d1b      	ldrb	r3, [r3, #20]
 800cb84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb88:	b2da      	uxtb	r2, r3
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cb8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3718      	adds	r7, #24
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f7ff ff7b 	bl	800ca9c <f_sync>
 800cba6:	4603      	mov	r3, r0
 800cba8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cbaa:	7bfb      	ldrb	r3, [r7, #15]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d118      	bne.n	800cbe2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f107 0208 	add.w	r2, r7, #8
 800cbb6:	4611      	mov	r1, r2
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7ff fa71 	bl	800c0a0 <validate>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cbc2:	7bfb      	ldrb	r3, [r7, #15]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d10c      	bne.n	800cbe2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7fd fa47 	bl	800a060 <dec_lock>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cbd6:	7bfb      	ldrb	r3, [r7, #15]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d102      	bne.n	800cbe2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cbe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b090      	sub	sp, #64	; 0x40
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f107 0208 	add.w	r2, r7, #8
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7ff fa4e 	bl	800c0a0 <validate>
 800cc04:	4603      	mov	r3, r0
 800cc06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cc0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d103      	bne.n	800cc1a <f_lseek+0x2e>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	7d5b      	ldrb	r3, [r3, #21]
 800cc16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cc1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d002      	beq.n	800cc28 <f_lseek+0x3c>
 800cc22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc26:	e1e6      	b.n	800cff6 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	f000 80d1 	beq.w	800cdd4 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc38:	d15a      	bne.n	800ccf0 <f_lseek+0x104>
			tbl = fp->cltbl;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc42:	1d1a      	adds	r2, r3, #4
 800cc44:	627a      	str	r2, [r7, #36]	; 0x24
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	617b      	str	r3, [r7, #20]
 800cc4a:	2302      	movs	r3, #2
 800cc4c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800cc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d03a      	beq.n	800ccd0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5c:	613b      	str	r3, [r7, #16]
 800cc5e:	2300      	movs	r3, #0
 800cc60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc64:	3302      	adds	r3, #2
 800cc66:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800cc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6a:	60fb      	str	r3, [r7, #12]
 800cc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6e:	3301      	adds	r3, #1
 800cc70:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7fd fb51 	bl	800a31e <get_fat>
 800cc7c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d804      	bhi.n	800cc8e <f_lseek+0xa2>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2202      	movs	r2, #2
 800cc88:	755a      	strb	r2, [r3, #21]
 800cc8a:	2302      	movs	r3, #2
 800cc8c:	e1b3      	b.n	800cff6 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc94:	d104      	bne.n	800cca0 <f_lseek+0xb4>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	755a      	strb	r2, [r3, #21]
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	e1aa      	b.n	800cff6 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	3301      	adds	r3, #1
 800cca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d0de      	beq.n	800cc68 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ccaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d809      	bhi.n	800ccc6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb4:	1d1a      	adds	r2, r3, #4
 800ccb6:	627a      	str	r2, [r7, #36]	; 0x24
 800ccb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccba:	601a      	str	r2, [r3, #0]
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbe:	1d1a      	adds	r2, r3, #4
 800ccc0:	627a      	str	r2, [r7, #36]	; 0x24
 800ccc2:	693a      	ldr	r2, [r7, #16]
 800ccc4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	699b      	ldr	r3, [r3, #24]
 800ccca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d3c4      	bcc.n	800cc5a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccd6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ccd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d803      	bhi.n	800cce8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce2:	2200      	movs	r2, #0
 800cce4:	601a      	str	r2, [r3, #0]
 800cce6:	e184      	b.n	800cff2 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cce8:	2311      	movs	r3, #17
 800ccea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ccee:	e180      	b.n	800cff2 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	683a      	ldr	r2, [r7, #0]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d902      	bls.n	800cd00 <f_lseek+0x114>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	68db      	ldr	r3, [r3, #12]
 800ccfe:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	683a      	ldr	r2, [r7, #0]
 800cd04:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f000 8172 	beq.w	800cff2 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	3b01      	subs	r3, #1
 800cd12:	4619      	mov	r1, r3
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f7fd fd91 	bl	800a83c <clmt_clust>
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800cd20:	68ba      	ldr	r2, [r7, #8]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	69db      	ldr	r3, [r3, #28]
 800cd26:	4619      	mov	r1, r3
 800cd28:	4610      	mov	r0, r2
 800cd2a:	f7fd fad9 	bl	800a2e0 <clust2sect>
 800cd2e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d104      	bne.n	800cd40 <f_lseek+0x154>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2202      	movs	r2, #2
 800cd3a:	755a      	strb	r2, [r3, #21]
 800cd3c:	2302      	movs	r3, #2
 800cd3e:	e15a      	b.n	800cff6 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	3b01      	subs	r3, #1
 800cd44:	0a5b      	lsrs	r3, r3, #9
 800cd46:	68ba      	ldr	r2, [r7, #8]
 800cd48:	8952      	ldrh	r2, [r2, #10]
 800cd4a:	3a01      	subs	r2, #1
 800cd4c:	4013      	ands	r3, r2
 800cd4e:	69ba      	ldr	r2, [r7, #24]
 800cd50:	4413      	add	r3, r2
 800cd52:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	699b      	ldr	r3, [r3, #24]
 800cd58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f000 8148 	beq.w	800cff2 <f_lseek+0x406>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6a1b      	ldr	r3, [r3, #32]
 800cd66:	69ba      	ldr	r2, [r7, #24]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	f000 8142 	beq.w	800cff2 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	7d1b      	ldrb	r3, [r3, #20]
 800cd72:	b25b      	sxtb	r3, r3
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	da18      	bge.n	800cdaa <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	7858      	ldrb	r0, [r3, #1]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6a1a      	ldr	r2, [r3, #32]
 800cd86:	2301      	movs	r3, #1
 800cd88:	f7fc ff18 	bl	8009bbc <disk_write>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d004      	beq.n	800cd9c <f_lseek+0x1b0>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2201      	movs	r2, #1
 800cd96:	755a      	strb	r2, [r3, #21]
 800cd98:	2301      	movs	r3, #1
 800cd9a:	e12c      	b.n	800cff6 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	7d1b      	ldrb	r3, [r3, #20]
 800cda0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cda4:	b2da      	uxtb	r2, r3
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	7858      	ldrb	r0, [r3, #1]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	69ba      	ldr	r2, [r7, #24]
 800cdb8:	f7fc fee0 	bl	8009b7c <disk_read>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d004      	beq.n	800cdcc <f_lseek+0x1e0>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	755a      	strb	r2, [r3, #21]
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e114      	b.n	800cff6 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	69ba      	ldr	r2, [r7, #24]
 800cdd0:	621a      	str	r2, [r3, #32]
 800cdd2:	e10e      	b.n	800cff2 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	683a      	ldr	r2, [r7, #0]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d908      	bls.n	800cdf0 <f_lseek+0x204>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	7d1b      	ldrb	r3, [r3, #20]
 800cde2:	f003 0302 	and.w	r3, r3, #2
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d102      	bne.n	800cdf0 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	699b      	ldr	r3, [r3, #24]
 800cdf4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	637b      	str	r3, [r7, #52]	; 0x34
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdfe:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	f000 80a7 	beq.w	800cf56 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	895b      	ldrh	r3, [r3, #10]
 800ce0c:	025b      	lsls	r3, r3, #9
 800ce0e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ce10:	6a3b      	ldr	r3, [r7, #32]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d01b      	beq.n	800ce4e <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	1e5a      	subs	r2, r3, #1
 800ce1a:	69fb      	ldr	r3, [r7, #28]
 800ce1c:	fbb2 f2f3 	udiv	r2, r2, r3
 800ce20:	6a3b      	ldr	r3, [r7, #32]
 800ce22:	1e59      	subs	r1, r3, #1
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d30f      	bcc.n	800ce4e <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ce2e:	6a3b      	ldr	r3, [r7, #32]
 800ce30:	1e5a      	subs	r2, r3, #1
 800ce32:	69fb      	ldr	r3, [r7, #28]
 800ce34:	425b      	negs	r3, r3
 800ce36:	401a      	ands	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	699b      	ldr	r3, [r3, #24]
 800ce40:	683a      	ldr	r2, [r7, #0]
 800ce42:	1ad3      	subs	r3, r2, r3
 800ce44:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	69db      	ldr	r3, [r3, #28]
 800ce4a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce4c:	e022      	b.n	800ce94 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	689b      	ldr	r3, [r3, #8]
 800ce52:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ce54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d119      	bne.n	800ce8e <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7fd fc54 	bl	800a70c <create_chain>
 800ce64:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ce66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d104      	bne.n	800ce76 <f_lseek+0x28a>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2202      	movs	r2, #2
 800ce70:	755a      	strb	r2, [r3, #21]
 800ce72:	2302      	movs	r3, #2
 800ce74:	e0bf      	b.n	800cff6 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce7c:	d104      	bne.n	800ce88 <f_lseek+0x29c>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2201      	movs	r2, #1
 800ce82:	755a      	strb	r2, [r3, #21]
 800ce84:	2301      	movs	r3, #1
 800ce86:	e0b6      	b.n	800cff6 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce8c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce92:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ce94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d05d      	beq.n	800cf56 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ce9a:	e03a      	b.n	800cf12 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ce9c:	683a      	ldr	r2, [r7, #0]
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	603b      	str	r3, [r7, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	699a      	ldr	r2, [r3, #24]
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	441a      	add	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	7d1b      	ldrb	r3, [r3, #20]
 800ceb4:	f003 0302 	and.w	r3, r3, #2
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d00b      	beq.n	800ced4 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7fd fc23 	bl	800a70c <create_chain>
 800cec6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800cec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d108      	bne.n	800cee0 <f_lseek+0x2f4>
							ofs = 0; break;
 800cece:	2300      	movs	r3, #0
 800ced0:	603b      	str	r3, [r7, #0]
 800ced2:	e022      	b.n	800cf1a <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7fd fa20 	bl	800a31e <get_fat>
 800cede:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee6:	d104      	bne.n	800cef2 <f_lseek+0x306>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2201      	movs	r2, #1
 800ceec:	755a      	strb	r2, [r3, #21]
 800ceee:	2301      	movs	r3, #1
 800cef0:	e081      	b.n	800cff6 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d904      	bls.n	800cf02 <f_lseek+0x316>
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	699b      	ldr	r3, [r3, #24]
 800cefc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d304      	bcc.n	800cf0c <f_lseek+0x320>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2202      	movs	r2, #2
 800cf06:	755a      	strb	r2, [r3, #21]
 800cf08:	2302      	movs	r3, #2
 800cf0a:	e074      	b.n	800cff6 <f_lseek+0x40a>
					fp->clust = clst;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf10:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cf12:	683a      	ldr	r2, [r7, #0]
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d8c0      	bhi.n	800ce9c <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	699a      	ldr	r2, [r3, #24]
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	441a      	add	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d012      	beq.n	800cf56 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7fd f9d3 	bl	800a2e0 <clust2sect>
 800cf3a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cf3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d104      	bne.n	800cf4c <f_lseek+0x360>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2202      	movs	r2, #2
 800cf46:	755a      	strb	r2, [r3, #21]
 800cf48:	2302      	movs	r3, #2
 800cf4a:	e054      	b.n	800cff6 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	0a5b      	lsrs	r3, r3, #9
 800cf50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf52:	4413      	add	r3, r2
 800cf54:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	699a      	ldr	r2, [r3, #24]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d90a      	bls.n	800cf78 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	699a      	ldr	r2, [r3, #24]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	7d1b      	ldrb	r3, [r3, #20]
 800cf6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf72:	b2da      	uxtb	r2, r3
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	699b      	ldr	r3, [r3, #24]
 800cf7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d036      	beq.n	800cff2 <f_lseek+0x406>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a1b      	ldr	r3, [r3, #32]
 800cf88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d031      	beq.n	800cff2 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	7d1b      	ldrb	r3, [r3, #20]
 800cf92:	b25b      	sxtb	r3, r3
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	da18      	bge.n	800cfca <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	7858      	ldrb	r0, [r3, #1]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6a1a      	ldr	r2, [r3, #32]
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	f7fc fe08 	bl	8009bbc <disk_write>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d004      	beq.n	800cfbc <f_lseek+0x3d0>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	755a      	strb	r2, [r3, #21]
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e01c      	b.n	800cff6 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	7d1b      	ldrb	r3, [r3, #20]
 800cfc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfc4:	b2da      	uxtb	r2, r3
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	7858      	ldrb	r0, [r3, #1]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfd8:	f7fc fdd0 	bl	8009b7c <disk_read>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d004      	beq.n	800cfec <f_lseek+0x400>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	755a      	strb	r2, [r3, #21]
 800cfe8:	2301      	movs	r3, #1
 800cfea:	e004      	b.n	800cff6 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cff0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800cff2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3740      	adds	r7, #64	; 0x40
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800cffe:	b580      	push	{r7, lr}
 800d000:	b086      	sub	sp, #24
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
 800d006:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d101      	bne.n	800d012 <f_opendir+0x14>
 800d00e:	2309      	movs	r3, #9
 800d010:	e074      	b.n	800d0fc <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800d016:	f107 0108 	add.w	r1, r7, #8
 800d01a:	463b      	mov	r3, r7
 800d01c:	2200      	movs	r2, #0
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fe fdf2 	bl	800bc08 <find_volume>
 800d024:	4603      	mov	r3, r0
 800d026:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d028:	7dfb      	ldrb	r3, [r7, #23]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d15f      	bne.n	800d0ee <f_opendir+0xf0>
		obj->fs = fs;
 800d02e:	68ba      	ldr	r2, [r7, #8]
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800d034:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d038:	f000 fc7d 	bl	800d936 <ff_memalloc>
 800d03c:	60f8      	str	r0, [r7, #12]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d101      	bne.n	800d048 <f_opendir+0x4a>
 800d044:	2311      	movs	r3, #17
 800d046:	e059      	b.n	800d0fc <f_opendir+0xfe>
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	68fa      	ldr	r2, [r7, #12]
 800d04c:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	4619      	mov	r1, r3
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f7fe fccc 	bl	800b9f0 <follow_path>
 800d058:	4603      	mov	r3, r0
 800d05a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800d05c:	7dfb      	ldrb	r3, [r7, #23]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d13d      	bne.n	800d0de <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d068:	b25b      	sxtb	r3, r3
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	db12      	blt.n	800d094 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	799b      	ldrb	r3, [r3, #6]
 800d072:	f003 0310 	and.w	r3, r3, #16
 800d076:	2b00      	cmp	r3, #0
 800d078:	d00a      	beq.n	800d090 <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d07a:	68ba      	ldr	r2, [r7, #8]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6a1b      	ldr	r3, [r3, #32]
 800d080:	4619      	mov	r1, r3
 800d082:	4610      	mov	r0, r2
 800d084:	f7fd fd95 	bl	800abb2 <ld_clust>
 800d088:	4602      	mov	r2, r0
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	609a      	str	r2, [r3, #8]
 800d08e:	e001      	b.n	800d094 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d090:	2305      	movs	r3, #5
 800d092:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d094:	7dfb      	ldrb	r3, [r7, #23]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d121      	bne.n	800d0de <f_opendir+0xe0>
				obj->id = fs->id;
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	88da      	ldrh	r2, [r3, #6]
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7fd fbfd 	bl	800a8a4 <dir_sdi>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d0ae:	7dfb      	ldrb	r3, [r7, #23]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d114      	bne.n	800d0de <f_opendir+0xe0>
					if (obj->sclust) {
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	689b      	ldr	r3, [r3, #8]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d00d      	beq.n	800d0d8 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d0bc:	2100      	movs	r1, #0
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f7fc ff40 	bl	8009f44 <inc_lock>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	691b      	ldr	r3, [r3, #16]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d105      	bne.n	800d0de <f_opendir+0xe0>
 800d0d2:	2312      	movs	r3, #18
 800d0d4:	75fb      	strb	r3, [r7, #23]
 800d0d6:	e002      	b.n	800d0de <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800d0de:	68f8      	ldr	r0, [r7, #12]
 800d0e0:	f000 fc35 	bl	800d94e <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d0e4:	7dfb      	ldrb	r3, [r7, #23]
 800d0e6:	2b04      	cmp	r3, #4
 800d0e8:	d101      	bne.n	800d0ee <f_opendir+0xf0>
 800d0ea:	2305      	movs	r3, #5
 800d0ec:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d0ee:	7dfb      	ldrb	r3, [r7, #23]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d002      	beq.n	800d0fa <f_opendir+0xfc>
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d0fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3718      	adds	r7, #24
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f107 0208 	add.w	r2, r7, #8
 800d112:	4611      	mov	r1, r2
 800d114:	4618      	mov	r0, r3
 800d116:	f7fe ffc3 	bl	800c0a0 <validate>
 800d11a:	4603      	mov	r3, r0
 800d11c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d11e:	7bfb      	ldrb	r3, [r7, #15]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d110      	bne.n	800d146 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	691b      	ldr	r3, [r3, #16]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d006      	beq.n	800d13a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	691b      	ldr	r3, [r3, #16]
 800d130:	4618      	mov	r0, r3
 800d132:	f7fc ff95 	bl	800a060 <dec_lock>
 800d136:	4603      	mov	r3, r0
 800d138:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d13a:	7bfb      	ldrb	r3, [r7, #15]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d102      	bne.n	800d146 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2200      	movs	r2, #0
 800d144:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800d146:	7bfb      	ldrb	r3, [r7, #15]
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3710      	adds	r7, #16
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b086      	sub	sp, #24
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f107 020c 	add.w	r2, r7, #12
 800d160:	4611      	mov	r1, r2
 800d162:	4618      	mov	r0, r3
 800d164:	f7fe ff9c 	bl	800c0a0 <validate>
 800d168:	4603      	mov	r3, r0
 800d16a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d16c:	7dfb      	ldrb	r3, [r7, #23]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d136      	bne.n	800d1e0 <f_readdir+0x90>
		if (!fno) {
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d106      	bne.n	800d186 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d178:	2100      	movs	r1, #0
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7fd fb92 	bl	800a8a4 <dir_sdi>
 800d180:	4603      	mov	r3, r0
 800d182:	75fb      	strb	r3, [r7, #23]
 800d184:	e02c      	b.n	800d1e0 <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 800d186:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d18a:	f000 fbd4 	bl	800d936 <ff_memalloc>
 800d18e:	6138      	str	r0, [r7, #16]
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d101      	bne.n	800d19a <f_readdir+0x4a>
 800d196:	2311      	movs	r3, #17
 800d198:	e023      	b.n	800d1e2 <f_readdir+0x92>
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	693a      	ldr	r2, [r7, #16]
 800d19e:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800d1a0:	2100      	movs	r1, #0
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f7fd ff2f 	bl	800b006 <dir_read>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d1ac:	7dfb      	ldrb	r3, [r7, #23]
 800d1ae:	2b04      	cmp	r3, #4
 800d1b0:	d101      	bne.n	800d1b6 <f_readdir+0x66>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800d1b6:	7dfb      	ldrb	r3, [r7, #23]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10e      	bne.n	800d1da <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d1bc:	6839      	ldr	r1, [r7, #0]
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f7fe f980 	bl	800b4c4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f7fd fbe7 	bl	800a99a <dir_next>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d1d0:	7dfb      	ldrb	r3, [r7, #23]
 800d1d2:	2b04      	cmp	r3, #4
 800d1d4:	d101      	bne.n	800d1da <f_readdir+0x8a>
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800d1da:	6938      	ldr	r0, [r7, #16]
 800d1dc:	f000 fbb7 	bl	800d94e <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800d1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3718      	adds	r7, #24
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b092      	sub	sp, #72	; 0x48
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	60f8      	str	r0, [r7, #12]
 800d1f2:	60b9      	str	r1, [r7, #8]
 800d1f4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d1f6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d1fa:	f107 030c 	add.w	r3, r7, #12
 800d1fe:	2200      	movs	r2, #0
 800d200:	4618      	mov	r0, r3
 800d202:	f7fe fd01 	bl	800bc08 <find_volume>
 800d206:	4603      	mov	r3, r0
 800d208:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800d20c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d210:	2b00      	cmp	r3, #0
 800d212:	f040 8099 	bne.w	800d348 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21e:	695a      	ldr	r2, [r3, #20]
 800d220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d222:	699b      	ldr	r3, [r3, #24]
 800d224:	3b02      	subs	r3, #2
 800d226:	429a      	cmp	r2, r3
 800d228:	d804      	bhi.n	800d234 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22c:	695a      	ldr	r2, [r3, #20]
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	601a      	str	r2, [r3, #0]
 800d232:	e089      	b.n	800d348 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d234:	2300      	movs	r3, #0
 800d236:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d128      	bne.n	800d292 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d240:	2302      	movs	r3, #2
 800d242:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d246:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d248:	f107 0314 	add.w	r3, r7, #20
 800d24c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fd f865 	bl	800a31e <get_fat>
 800d254:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d25c:	d103      	bne.n	800d266 <f_getfree+0x7c>
 800d25e:	2301      	movs	r3, #1
 800d260:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d264:	e063      	b.n	800d32e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d103      	bne.n	800d274 <f_getfree+0x8a>
 800d26c:	2302      	movs	r3, #2
 800d26e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d272:	e05c      	b.n	800d32e <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d276:	2b00      	cmp	r3, #0
 800d278:	d102      	bne.n	800d280 <f_getfree+0x96>
 800d27a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d27c:	3301      	adds	r3, #1
 800d27e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800d280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d282:	3301      	adds	r3, #1
 800d284:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d3db      	bcc.n	800d248 <f_getfree+0x5e>
 800d290:	e04d      	b.n	800d32e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d294:	699b      	ldr	r3, [r3, #24]
 800d296:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d29c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	637b      	str	r3, [r7, #52]	; 0x34
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800d2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d113      	bne.n	800d2d4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800d2ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b0:	1c5a      	adds	r2, r3, #1
 800d2b2:	63ba      	str	r2, [r7, #56]	; 0x38
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	f7fc ff77 	bl	800a1a8 <move_window>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800d2c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d131      	bne.n	800d32c <f_getfree+0x142>
							p = fs->win;
 800d2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ca:	3334      	adds	r3, #52	; 0x34
 800d2cc:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800d2ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2d2:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800d2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	2b02      	cmp	r3, #2
 800d2da:	d10f      	bne.n	800d2fc <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800d2dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2de:	f7fc fcb3 	bl	8009c48 <ld_word>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d102      	bne.n	800d2ee <f_getfree+0x104>
 800d2e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800d2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f0:	3302      	adds	r3, #2
 800d2f2:	633b      	str	r3, [r7, #48]	; 0x30
 800d2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f6:	3b02      	subs	r3, #2
 800d2f8:	637b      	str	r3, [r7, #52]	; 0x34
 800d2fa:	e010      	b.n	800d31e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d2fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2fe:	f7fc fcbb 	bl	8009c78 <ld_dword>
 800d302:	4603      	mov	r3, r0
 800d304:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d102      	bne.n	800d312 <f_getfree+0x128>
 800d30c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d30e:	3301      	adds	r3, #1
 800d310:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800d312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d314:	3304      	adds	r3, #4
 800d316:	633b      	str	r3, [r7, #48]	; 0x30
 800d318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d31a:	3b04      	subs	r3, #4
 800d31c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800d31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d320:	3b01      	subs	r3, #1
 800d322:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d326:	2b00      	cmp	r3, #0
 800d328:	d1bd      	bne.n	800d2a6 <f_getfree+0xbc>
 800d32a:	e000      	b.n	800d32e <f_getfree+0x144>
							if (res != FR_OK) break;
 800d32c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d332:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d336:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d338:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33c:	791a      	ldrb	r2, [r3, #4]
 800d33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d340:	f042 0201 	orr.w	r2, r2, #1
 800d344:	b2d2      	uxtb	r2, r2
 800d346:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d348:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3748      	adds	r7, #72	; 0x48
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	460b      	mov	r3, r1
 800d35e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800d360:	78fb      	ldrb	r3, [r7, #3]
 800d362:	2b0a      	cmp	r3, #10
 800d364:	d103      	bne.n	800d36e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800d366:	210d      	movs	r1, #13
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f7ff fff3 	bl	800d354 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2b00      	cmp	r3, #0
 800d378:	db25      	blt.n	800d3c6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	1c5a      	adds	r2, r3, #1
 800d37e:	60fa      	str	r2, [r7, #12]
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	4413      	add	r3, r2
 800d384:	78fa      	ldrb	r2, [r7, #3]
 800d386:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2b3c      	cmp	r3, #60	; 0x3c
 800d38c:	dd12      	ble.n	800d3b4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6818      	ldr	r0, [r3, #0]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f103 010c 	add.w	r1, r3, #12
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	f107 0308 	add.w	r3, r7, #8
 800d39e:	f7ff fa08 	bl	800c7b2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d3a2:	68ba      	ldr	r2, [r7, #8]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d101      	bne.n	800d3ae <putc_bfd+0x5a>
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	e001      	b.n	800d3b2 <putc_bfd+0x5e>
 800d3ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d3b2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	68fa      	ldr	r2, [r7, #12]
 800d3b8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	1c5a      	adds	r2, r3, #1
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	609a      	str	r2, [r3, #8]
 800d3c4:	e000      	b.n	800d3c8 <putc_bfd+0x74>
	if (i < 0) return;
 800d3c6:	bf00      	nop
}
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b084      	sub	sp, #16
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	db16      	blt.n	800d40c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6818      	ldr	r0, [r3, #0]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f103 010c 	add.w	r1, r3, #12
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	f107 030c 	add.w	r3, r7, #12
 800d3f2:	f7ff f9de 	bl	800c7b2 <f_write>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d107      	bne.n	800d40c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	68fa      	ldr	r2, [r7, #12]
 800d402:	4293      	cmp	r3, r2
 800d404:	d102      	bne.n	800d40c <putc_flush+0x3e>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	e001      	b.n	800d410 <putc_flush+0x42>
	return EOF;
 800d40c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d410:	4618      	mov	r0, r3
 800d412:	3710      	adds	r7, #16
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800d418:	b480      	push	{r7}
 800d41a:	b083      	sub	sp, #12
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	683a      	ldr	r2, [r7, #0]
 800d426:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2200      	movs	r2, #0
 800d42c:	605a      	str	r2, [r3, #4]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	685a      	ldr	r2, [r3, #4]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	609a      	str	r2, [r3, #8]
}
 800d436:	bf00      	nop
 800d438:	370c      	adds	r7, #12
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
	...

0800d444 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800d444:	b40e      	push	{r1, r2, r3}
 800d446:	b580      	push	{r7, lr}
 800d448:	b0a7      	sub	sp, #156	; 0x9c
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800d44e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d452:	6879      	ldr	r1, [r7, #4]
 800d454:	4618      	mov	r0, r3
 800d456:	f7ff ffdf 	bl	800d418 <putc_init>

	va_start(arp, fmt);
 800d45a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d45e:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800d460:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d464:	1c5a      	adds	r2, r3, #1
 800d466:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800d470:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d474:	2b00      	cmp	r3, #0
 800d476:	f000 81f2 	beq.w	800d85e <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800d47a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d47e:	2b25      	cmp	r3, #37	; 0x25
 800d480:	d008      	beq.n	800d494 <f_printf+0x50>
			putc_bfd(&pb, c);
 800d482:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800d486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d48a:	4611      	mov	r1, r2
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7ff ff61 	bl	800d354 <putc_bfd>
			continue;
 800d492:	e1e3      	b.n	800d85c <f_printf+0x418>
		}
		w = f = 0;
 800d494:	2300      	movs	r3, #0
 800d496:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d49a:	2300      	movs	r3, #0
 800d49c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800d4a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d4a4:	1c5a      	adds	r2, r3, #1
 800d4a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800d4b0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d4b4:	2b30      	cmp	r3, #48	; 0x30
 800d4b6:	d10b      	bne.n	800d4d0 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d4be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d4c2:	1c5a      	adds	r2, r3, #1
 800d4c4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800d4ce:	e024      	b.n	800d51a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800d4d0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d4d4:	2b2d      	cmp	r3, #45	; 0x2d
 800d4d6:	d120      	bne.n	800d51a <f_printf+0xd6>
				f = 2; c = *fmt++;
 800d4d8:	2302      	movs	r3, #2
 800d4da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d4de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d4e2:	1c5a      	adds	r2, r3, #1
 800d4e4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800d4ee:	e014      	b.n	800d51a <f_printf+0xd6>
			w = w * 10 + c - '0';
 800d4f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	4413      	add	r3, r2
 800d4fa:	005b      	lsls	r3, r3, #1
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d502:	4413      	add	r3, r2
 800d504:	3b30      	subs	r3, #48	; 0x30
 800d506:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800d50a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d50e:	1c5a      	adds	r2, r3, #1
 800d510:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800d51a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d51e:	2b2f      	cmp	r3, #47	; 0x2f
 800d520:	d903      	bls.n	800d52a <f_printf+0xe6>
 800d522:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d526:	2b39      	cmp	r3, #57	; 0x39
 800d528:	d9e2      	bls.n	800d4f0 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800d52a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d52e:	2b6c      	cmp	r3, #108	; 0x6c
 800d530:	d003      	beq.n	800d53a <f_printf+0xf6>
 800d532:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d536:	2b4c      	cmp	r3, #76	; 0x4c
 800d538:	d10d      	bne.n	800d556 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800d53a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d53e:	f043 0304 	orr.w	r3, r3, #4
 800d542:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d546:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d54a:	1c5a      	adds	r2, r3, #1
 800d54c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800d556:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f000 8181 	beq.w	800d862 <f_printf+0x41e>
		d = c;
 800d560:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d564:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800d568:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d56c:	2b60      	cmp	r3, #96	; 0x60
 800d56e:	d908      	bls.n	800d582 <f_printf+0x13e>
 800d570:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d574:	2b7a      	cmp	r3, #122	; 0x7a
 800d576:	d804      	bhi.n	800d582 <f_printf+0x13e>
 800d578:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d57c:	3b20      	subs	r3, #32
 800d57e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800d582:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d586:	3b42      	subs	r3, #66	; 0x42
 800d588:	2b16      	cmp	r3, #22
 800d58a:	f200 8098 	bhi.w	800d6be <f_printf+0x27a>
 800d58e:	a201      	add	r2, pc, #4	; (adr r2, 800d594 <f_printf+0x150>)
 800d590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d594:	0800d69f 	.word	0x0800d69f
 800d598:	0800d687 	.word	0x0800d687
 800d59c:	0800d6af 	.word	0x0800d6af
 800d5a0:	0800d6bf 	.word	0x0800d6bf
 800d5a4:	0800d6bf 	.word	0x0800d6bf
 800d5a8:	0800d6bf 	.word	0x0800d6bf
 800d5ac:	0800d6bf 	.word	0x0800d6bf
 800d5b0:	0800d6bf 	.word	0x0800d6bf
 800d5b4:	0800d6bf 	.word	0x0800d6bf
 800d5b8:	0800d6bf 	.word	0x0800d6bf
 800d5bc:	0800d6bf 	.word	0x0800d6bf
 800d5c0:	0800d6bf 	.word	0x0800d6bf
 800d5c4:	0800d6bf 	.word	0x0800d6bf
 800d5c8:	0800d6a7 	.word	0x0800d6a7
 800d5cc:	0800d6bf 	.word	0x0800d6bf
 800d5d0:	0800d6bf 	.word	0x0800d6bf
 800d5d4:	0800d6bf 	.word	0x0800d6bf
 800d5d8:	0800d5f1 	.word	0x0800d5f1
 800d5dc:	0800d6bf 	.word	0x0800d6bf
 800d5e0:	0800d6af 	.word	0x0800d6af
 800d5e4:	0800d6bf 	.word	0x0800d6bf
 800d5e8:	0800d6bf 	.word	0x0800d6bf
 800d5ec:	0800d6b7 	.word	0x0800d6b7
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800d5f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5f2:	1d1a      	adds	r2, r3, #4
 800d5f4:	67ba      	str	r2, [r7, #120]	; 0x78
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d600:	e004      	b.n	800d60c <f_printf+0x1c8>
 800d602:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d606:	3301      	adds	r3, #1
 800d608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d60c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d60e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d612:	4413      	add	r3, r2
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d1f3      	bne.n	800d602 <f_printf+0x1be>
			if (!(f & 2)) {
 800d61a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d61e:	f003 0302 	and.w	r3, r3, #2
 800d622:	2b00      	cmp	r3, #0
 800d624:	d11a      	bne.n	800d65c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800d626:	e005      	b.n	800d634 <f_printf+0x1f0>
 800d628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d62c:	2120      	movs	r1, #32
 800d62e:	4618      	mov	r0, r3
 800d630:	f7ff fe90 	bl	800d354 <putc_bfd>
 800d634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d638:	1c5a      	adds	r2, r3, #1
 800d63a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d63e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d642:	429a      	cmp	r2, r3
 800d644:	d8f0      	bhi.n	800d628 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800d646:	e009      	b.n	800d65c <f_printf+0x218>
 800d648:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d64a:	1c5a      	adds	r2, r3, #1
 800d64c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d64e:	781a      	ldrb	r2, [r3, #0]
 800d650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d654:	4611      	mov	r1, r2
 800d656:	4618      	mov	r0, r3
 800d658:	f7ff fe7c 	bl	800d354 <putc_bfd>
 800d65c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d1f1      	bne.n	800d648 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800d664:	e005      	b.n	800d672 <f_printf+0x22e>
 800d666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d66a:	2120      	movs	r1, #32
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7ff fe71 	bl	800d354 <putc_bfd>
 800d672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d676:	1c5a      	adds	r2, r3, #1
 800d678:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d67c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d680:	429a      	cmp	r2, r3
 800d682:	d8f0      	bhi.n	800d666 <f_printf+0x222>
			continue;
 800d684:	e0ea      	b.n	800d85c <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800d686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d688:	1d1a      	adds	r2, r3, #4
 800d68a:	67ba      	str	r2, [r7, #120]	; 0x78
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	b2da      	uxtb	r2, r3
 800d690:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d694:	4611      	mov	r1, r2
 800d696:	4618      	mov	r0, r3
 800d698:	f7ff fe5c 	bl	800d354 <putc_bfd>
 800d69c:	e0de      	b.n	800d85c <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800d69e:	2302      	movs	r3, #2
 800d6a0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d6a4:	e014      	b.n	800d6d0 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800d6a6:	2308      	movs	r3, #8
 800d6a8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d6ac:	e010      	b.n	800d6d0 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800d6ae:	230a      	movs	r3, #10
 800d6b0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d6b4:	e00c      	b.n	800d6d0 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800d6b6:	2310      	movs	r3, #16
 800d6b8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d6bc:	e008      	b.n	800d6d0 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800d6be:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800d6c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d6c6:	4611      	mov	r1, r2
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7ff fe43 	bl	800d354 <putc_bfd>
 800d6ce:	e0c5      	b.n	800d85c <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800d6d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d6d4:	f003 0304 	and.w	r3, r3, #4
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d004      	beq.n	800d6e6 <f_printf+0x2a2>
 800d6dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6de:	1d1a      	adds	r2, r3, #4
 800d6e0:	67ba      	str	r2, [r7, #120]	; 0x78
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	e00c      	b.n	800d700 <f_printf+0x2bc>
 800d6e6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d6ea:	2b44      	cmp	r3, #68	; 0x44
 800d6ec:	d104      	bne.n	800d6f8 <f_printf+0x2b4>
 800d6ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6f0:	1d1a      	adds	r2, r3, #4
 800d6f2:	67ba      	str	r2, [r7, #120]	; 0x78
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	e003      	b.n	800d700 <f_printf+0x2bc>
 800d6f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6fa:	1d1a      	adds	r2, r3, #4
 800d6fc:	67ba      	str	r2, [r7, #120]	; 0x78
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800d704:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d708:	2b44      	cmp	r3, #68	; 0x44
 800d70a:	d10e      	bne.n	800d72a <f_printf+0x2e6>
 800d70c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d710:	2b00      	cmp	r3, #0
 800d712:	da0a      	bge.n	800d72a <f_printf+0x2e6>
			v = 0 - v;
 800d714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d718:	425b      	negs	r3, r3
 800d71a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800d71e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d722:	f043 0308 	orr.w	r3, r3, #8
 800d726:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800d72a:	2300      	movs	r3, #0
 800d72c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800d730:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800d734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d738:	fbb3 f1f2 	udiv	r1, r3, r2
 800d73c:	fb01 f202 	mul.w	r2, r1, r2
 800d740:	1a9b      	subs	r3, r3, r2
 800d742:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800d746:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d74a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d74e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d752:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800d756:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d75a:	2b09      	cmp	r3, #9
 800d75c:	d90b      	bls.n	800d776 <f_printf+0x332>
 800d75e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d762:	2b78      	cmp	r3, #120	; 0x78
 800d764:	d101      	bne.n	800d76a <f_printf+0x326>
 800d766:	2227      	movs	r2, #39	; 0x27
 800d768:	e000      	b.n	800d76c <f_printf+0x328>
 800d76a:	2207      	movs	r2, #7
 800d76c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d770:	4413      	add	r3, r2
 800d772:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800d776:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d77a:	1c5a      	adds	r2, r3, #1
 800d77c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d780:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d784:	3230      	adds	r2, #48	; 0x30
 800d786:	b2d2      	uxtb	r2, r2
 800d788:	3398      	adds	r3, #152	; 0x98
 800d78a:	443b      	add	r3, r7
 800d78c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800d790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d794:	2b00      	cmp	r3, #0
 800d796:	d003      	beq.n	800d7a0 <f_printf+0x35c>
 800d798:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d79c:	2b1f      	cmp	r3, #31
 800d79e:	d9c7      	bls.n	800d730 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800d7a0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d7a4:	f003 0308 	and.w	r3, r3, #8
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d009      	beq.n	800d7c0 <f_printf+0x37c>
 800d7ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d7b0:	1c5a      	adds	r2, r3, #1
 800d7b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d7b6:	3398      	adds	r3, #152	; 0x98
 800d7b8:	443b      	add	r3, r7
 800d7ba:	222d      	movs	r2, #45	; 0x2d
 800d7bc:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800d7c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d7c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d7c8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d7cc:	f003 0301 	and.w	r3, r3, #1
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d001      	beq.n	800d7d8 <f_printf+0x394>
 800d7d4:	2330      	movs	r3, #48	; 0x30
 800d7d6:	e000      	b.n	800d7da <f_printf+0x396>
 800d7d8:	2320      	movs	r3, #32
 800d7da:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800d7de:	e007      	b.n	800d7f0 <f_printf+0x3ac>
 800d7e0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d7e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d7e8:	4611      	mov	r1, r2
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7ff fdb2 	bl	800d354 <putc_bfd>
 800d7f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d7f4:	f003 0302 	and.w	r3, r3, #2
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d108      	bne.n	800d80e <f_printf+0x3ca>
 800d7fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d800:	1c5a      	adds	r2, r3, #1
 800d802:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d806:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d8e8      	bhi.n	800d7e0 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800d80e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d812:	3b01      	subs	r3, #1
 800d814:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d818:	f107 020c 	add.w	r2, r7, #12
 800d81c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d820:	4413      	add	r3, r2
 800d822:	781a      	ldrb	r2, [r3, #0]
 800d824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d828:	4611      	mov	r1, r2
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7ff fd92 	bl	800d354 <putc_bfd>
		} while (i);
 800d830:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d834:	2b00      	cmp	r3, #0
 800d836:	d1ea      	bne.n	800d80e <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800d838:	e007      	b.n	800d84a <f_printf+0x406>
 800d83a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d83e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d842:	4611      	mov	r1, r2
 800d844:	4618      	mov	r0, r3
 800d846:	f7ff fd85 	bl	800d354 <putc_bfd>
 800d84a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d84e:	1c5a      	adds	r2, r3, #1
 800d850:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d854:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d858:	429a      	cmp	r2, r3
 800d85a:	d8ee      	bhi.n	800d83a <f_printf+0x3f6>
		c = *fmt++;
 800d85c:	e600      	b.n	800d460 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800d85e:	bf00      	nop
 800d860:	e000      	b.n	800d864 <f_printf+0x420>
		if (!c) break;
 800d862:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800d864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d868:	4618      	mov	r0, r3
 800d86a:	f7ff fdb0 	bl	800d3ce <putc_flush>
 800d86e:	4603      	mov	r3, r0
}
 800d870:	4618      	mov	r0, r3
 800d872:	379c      	adds	r7, #156	; 0x9c
 800d874:	46bd      	mov	sp, r7
 800d876:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d87a:	b003      	add	sp, #12
 800d87c:	4770      	bx	lr
 800d87e:	bf00      	nop

0800d880 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d880:	b480      	push	{r7}
 800d882:	b087      	sub	sp, #28
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	4613      	mov	r3, r2
 800d88c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d88e:	2301      	movs	r3, #1
 800d890:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d892:	2300      	movs	r3, #0
 800d894:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d896:	4b1f      	ldr	r3, [pc, #124]	; (800d914 <FATFS_LinkDriverEx+0x94>)
 800d898:	7b9b      	ldrb	r3, [r3, #14]
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d831      	bhi.n	800d904 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d8a0:	4b1c      	ldr	r3, [pc, #112]	; (800d914 <FATFS_LinkDriverEx+0x94>)
 800d8a2:	7b9b      	ldrb	r3, [r3, #14]
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	4b1a      	ldr	r3, [pc, #104]	; (800d914 <FATFS_LinkDriverEx+0x94>)
 800d8aa:	2100      	movs	r1, #0
 800d8ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d8ae:	4b19      	ldr	r3, [pc, #100]	; (800d914 <FATFS_LinkDriverEx+0x94>)
 800d8b0:	7b9b      	ldrb	r3, [r3, #14]
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	4a17      	ldr	r2, [pc, #92]	; (800d914 <FATFS_LinkDriverEx+0x94>)
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	4413      	add	r3, r2
 800d8ba:	68fa      	ldr	r2, [r7, #12]
 800d8bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d8be:	4b15      	ldr	r3, [pc, #84]	; (800d914 <FATFS_LinkDriverEx+0x94>)
 800d8c0:	7b9b      	ldrb	r3, [r3, #14]
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	4b13      	ldr	r3, [pc, #76]	; (800d914 <FATFS_LinkDriverEx+0x94>)
 800d8c8:	4413      	add	r3, r2
 800d8ca:	79fa      	ldrb	r2, [r7, #7]
 800d8cc:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800d8ce:	4b11      	ldr	r3, [pc, #68]	; (800d914 <FATFS_LinkDriverEx+0x94>)
 800d8d0:	7b9b      	ldrb	r3, [r3, #14]
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	1c5a      	adds	r2, r3, #1
 800d8d6:	b2d1      	uxtb	r1, r2
 800d8d8:	4a0e      	ldr	r2, [pc, #56]	; (800d914 <FATFS_LinkDriverEx+0x94>)
 800d8da:	7391      	strb	r1, [r2, #14]
 800d8dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d8de:	7dbb      	ldrb	r3, [r7, #22]
 800d8e0:	3330      	adds	r3, #48	; 0x30
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	223a      	movs	r2, #58	; 0x3a
 800d8ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	3302      	adds	r3, #2
 800d8f4:	222f      	movs	r2, #47	; 0x2f
 800d8f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	3303      	adds	r3, #3
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d900:	2300      	movs	r3, #0
 800d902:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d904:	7dfb      	ldrb	r3, [r7, #23]
}
 800d906:	4618      	mov	r0, r3
 800d908:	371c      	adds	r7, #28
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr
 800d912:	bf00      	nop
 800d914:	20000d40 	.word	0x20000d40

0800d918 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d922:	2200      	movs	r2, #0
 800d924:	6839      	ldr	r1, [r7, #0]
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f7ff ffaa 	bl	800d880 <FATFS_LinkDriverEx>
 800d92c:	4603      	mov	r3, r0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b082      	sub	sp, #8
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f002 fe1c 	bl	801057c <malloc>
 800d944:	4603      	mov	r3, r0
}
 800d946:	4618      	mov	r0, r3
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b082      	sub	sp, #8
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f002 fe18 	bl	801058c <free>
}
 800d95c:	bf00      	nop
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
 800d96a:	4603      	mov	r3, r0
 800d96c:	6039      	str	r1, [r7, #0]
 800d96e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d970:	88fb      	ldrh	r3, [r7, #6]
 800d972:	2b7f      	cmp	r3, #127	; 0x7f
 800d974:	d802      	bhi.n	800d97c <ff_convert+0x18>
		c = chr;
 800d976:	88fb      	ldrh	r3, [r7, #6]
 800d978:	81fb      	strh	r3, [r7, #14]
 800d97a:	e025      	b.n	800d9c8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d00b      	beq.n	800d99a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d982:	88fb      	ldrh	r3, [r7, #6]
 800d984:	2bff      	cmp	r3, #255	; 0xff
 800d986:	d805      	bhi.n	800d994 <ff_convert+0x30>
 800d988:	88fb      	ldrh	r3, [r7, #6]
 800d98a:	3b80      	subs	r3, #128	; 0x80
 800d98c:	4a12      	ldr	r2, [pc, #72]	; (800d9d8 <ff_convert+0x74>)
 800d98e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d992:	e000      	b.n	800d996 <ff_convert+0x32>
 800d994:	2300      	movs	r3, #0
 800d996:	81fb      	strh	r3, [r7, #14]
 800d998:	e016      	b.n	800d9c8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d99a:	2300      	movs	r3, #0
 800d99c:	81fb      	strh	r3, [r7, #14]
 800d99e:	e009      	b.n	800d9b4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d9a0:	89fb      	ldrh	r3, [r7, #14]
 800d9a2:	4a0d      	ldr	r2, [pc, #52]	; (800d9d8 <ff_convert+0x74>)
 800d9a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9a8:	88fa      	ldrh	r2, [r7, #6]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d006      	beq.n	800d9bc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d9ae:	89fb      	ldrh	r3, [r7, #14]
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	81fb      	strh	r3, [r7, #14]
 800d9b4:	89fb      	ldrh	r3, [r7, #14]
 800d9b6:	2b7f      	cmp	r3, #127	; 0x7f
 800d9b8:	d9f2      	bls.n	800d9a0 <ff_convert+0x3c>
 800d9ba:	e000      	b.n	800d9be <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d9bc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d9be:	89fb      	ldrh	r3, [r7, #14]
 800d9c0:	3380      	adds	r3, #128	; 0x80
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d9c8:	89fb      	ldrh	r3, [r7, #14]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3714      	adds	r7, #20
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr
 800d9d6:	bf00      	nop
 800d9d8:	08013df0 	.word	0x08013df0

0800d9dc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b087      	sub	sp, #28
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d9e6:	88fb      	ldrh	r3, [r7, #6]
 800d9e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9ec:	d201      	bcs.n	800d9f2 <ff_wtoupper+0x16>
 800d9ee:	4b3e      	ldr	r3, [pc, #248]	; (800dae8 <ff_wtoupper+0x10c>)
 800d9f0:	e000      	b.n	800d9f4 <ff_wtoupper+0x18>
 800d9f2:	4b3e      	ldr	r3, [pc, #248]	; (800daec <ff_wtoupper+0x110>)
 800d9f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	1c9a      	adds	r2, r3, #2
 800d9fa:	617a      	str	r2, [r7, #20]
 800d9fc:	881b      	ldrh	r3, [r3, #0]
 800d9fe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800da00:	8a7b      	ldrh	r3, [r7, #18]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d068      	beq.n	800dad8 <ff_wtoupper+0xfc>
 800da06:	88fa      	ldrh	r2, [r7, #6]
 800da08:	8a7b      	ldrh	r3, [r7, #18]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d364      	bcc.n	800dad8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	1c9a      	adds	r2, r3, #2
 800da12:	617a      	str	r2, [r7, #20]
 800da14:	881b      	ldrh	r3, [r3, #0]
 800da16:	823b      	strh	r3, [r7, #16]
 800da18:	8a3b      	ldrh	r3, [r7, #16]
 800da1a:	0a1b      	lsrs	r3, r3, #8
 800da1c:	81fb      	strh	r3, [r7, #14]
 800da1e:	8a3b      	ldrh	r3, [r7, #16]
 800da20:	b2db      	uxtb	r3, r3
 800da22:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800da24:	88fa      	ldrh	r2, [r7, #6]
 800da26:	8a79      	ldrh	r1, [r7, #18]
 800da28:	8a3b      	ldrh	r3, [r7, #16]
 800da2a:	440b      	add	r3, r1
 800da2c:	429a      	cmp	r2, r3
 800da2e:	da49      	bge.n	800dac4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800da30:	89fb      	ldrh	r3, [r7, #14]
 800da32:	2b08      	cmp	r3, #8
 800da34:	d84f      	bhi.n	800dad6 <ff_wtoupper+0xfa>
 800da36:	a201      	add	r2, pc, #4	; (adr r2, 800da3c <ff_wtoupper+0x60>)
 800da38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da3c:	0800da61 	.word	0x0800da61
 800da40:	0800da73 	.word	0x0800da73
 800da44:	0800da89 	.word	0x0800da89
 800da48:	0800da91 	.word	0x0800da91
 800da4c:	0800da99 	.word	0x0800da99
 800da50:	0800daa1 	.word	0x0800daa1
 800da54:	0800daa9 	.word	0x0800daa9
 800da58:	0800dab1 	.word	0x0800dab1
 800da5c:	0800dab9 	.word	0x0800dab9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800da60:	88fa      	ldrh	r2, [r7, #6]
 800da62:	8a7b      	ldrh	r3, [r7, #18]
 800da64:	1ad3      	subs	r3, r2, r3
 800da66:	005b      	lsls	r3, r3, #1
 800da68:	697a      	ldr	r2, [r7, #20]
 800da6a:	4413      	add	r3, r2
 800da6c:	881b      	ldrh	r3, [r3, #0]
 800da6e:	80fb      	strh	r3, [r7, #6]
 800da70:	e027      	b.n	800dac2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800da72:	88fa      	ldrh	r2, [r7, #6]
 800da74:	8a7b      	ldrh	r3, [r7, #18]
 800da76:	1ad3      	subs	r3, r2, r3
 800da78:	b29b      	uxth	r3, r3
 800da7a:	f003 0301 	and.w	r3, r3, #1
 800da7e:	b29b      	uxth	r3, r3
 800da80:	88fa      	ldrh	r2, [r7, #6]
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	80fb      	strh	r3, [r7, #6]
 800da86:	e01c      	b.n	800dac2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800da88:	88fb      	ldrh	r3, [r7, #6]
 800da8a:	3b10      	subs	r3, #16
 800da8c:	80fb      	strh	r3, [r7, #6]
 800da8e:	e018      	b.n	800dac2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800da90:	88fb      	ldrh	r3, [r7, #6]
 800da92:	3b20      	subs	r3, #32
 800da94:	80fb      	strh	r3, [r7, #6]
 800da96:	e014      	b.n	800dac2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800da98:	88fb      	ldrh	r3, [r7, #6]
 800da9a:	3b30      	subs	r3, #48	; 0x30
 800da9c:	80fb      	strh	r3, [r7, #6]
 800da9e:	e010      	b.n	800dac2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800daa0:	88fb      	ldrh	r3, [r7, #6]
 800daa2:	3b1a      	subs	r3, #26
 800daa4:	80fb      	strh	r3, [r7, #6]
 800daa6:	e00c      	b.n	800dac2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800daa8:	88fb      	ldrh	r3, [r7, #6]
 800daaa:	3308      	adds	r3, #8
 800daac:	80fb      	strh	r3, [r7, #6]
 800daae:	e008      	b.n	800dac2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800dab0:	88fb      	ldrh	r3, [r7, #6]
 800dab2:	3b50      	subs	r3, #80	; 0x50
 800dab4:	80fb      	strh	r3, [r7, #6]
 800dab6:	e004      	b.n	800dac2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800dab8:	88fb      	ldrh	r3, [r7, #6]
 800daba:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800dabe:	80fb      	strh	r3, [r7, #6]
 800dac0:	bf00      	nop
			}
			break;
 800dac2:	e008      	b.n	800dad6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800dac4:	89fb      	ldrh	r3, [r7, #14]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d195      	bne.n	800d9f6 <ff_wtoupper+0x1a>
 800daca:	8a3b      	ldrh	r3, [r7, #16]
 800dacc:	005b      	lsls	r3, r3, #1
 800dace:	697a      	ldr	r2, [r7, #20]
 800dad0:	4413      	add	r3, r2
 800dad2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800dad4:	e78f      	b.n	800d9f6 <ff_wtoupper+0x1a>
			break;
 800dad6:	bf00      	nop
	}

	return chr;
 800dad8:	88fb      	ldrh	r3, [r7, #6]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	371c      	adds	r7, #28
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	08013ef0 	.word	0x08013ef0
 800daec:	080140e4 	.word	0x080140e4

0800daf0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	460b      	mov	r3, r1
 800dafa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dafc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800db00:	f002 fcf8 	bl	80104f4 <USBD_static_malloc>
 800db04:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d109      	bne.n	800db20 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	32b0      	adds	r2, #176	; 0xb0
 800db16:	2100      	movs	r1, #0
 800db18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800db1c:	2302      	movs	r3, #2
 800db1e:	e0d4      	b.n	800dcca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800db20:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800db24:	2100      	movs	r1, #0
 800db26:	68f8      	ldr	r0, [r7, #12]
 800db28:	f003 fe12 	bl	8011750 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	32b0      	adds	r2, #176	; 0xb0
 800db36:	68f9      	ldr	r1, [r7, #12]
 800db38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	32b0      	adds	r2, #176	; 0xb0
 800db46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	7c1b      	ldrb	r3, [r3, #16]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d138      	bne.n	800dbca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800db58:	4b5e      	ldr	r3, [pc, #376]	; (800dcd4 <USBD_CDC_Init+0x1e4>)
 800db5a:	7819      	ldrb	r1, [r3, #0]
 800db5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db60:	2202      	movs	r2, #2
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f002 fba3 	bl	80102ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800db68:	4b5a      	ldr	r3, [pc, #360]	; (800dcd4 <USBD_CDC_Init+0x1e4>)
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	f003 020f 	and.w	r2, r3, #15
 800db70:	6879      	ldr	r1, [r7, #4]
 800db72:	4613      	mov	r3, r2
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	4413      	add	r3, r2
 800db78:	009b      	lsls	r3, r3, #2
 800db7a:	440b      	add	r3, r1
 800db7c:	3324      	adds	r3, #36	; 0x24
 800db7e:	2201      	movs	r2, #1
 800db80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800db82:	4b55      	ldr	r3, [pc, #340]	; (800dcd8 <USBD_CDC_Init+0x1e8>)
 800db84:	7819      	ldrb	r1, [r3, #0]
 800db86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db8a:	2202      	movs	r2, #2
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f002 fb8e 	bl	80102ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800db92:	4b51      	ldr	r3, [pc, #324]	; (800dcd8 <USBD_CDC_Init+0x1e8>)
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	f003 020f 	and.w	r2, r3, #15
 800db9a:	6879      	ldr	r1, [r7, #4]
 800db9c:	4613      	mov	r3, r2
 800db9e:	009b      	lsls	r3, r3, #2
 800dba0:	4413      	add	r3, r2
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	440b      	add	r3, r1
 800dba6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dbaa:	2201      	movs	r2, #1
 800dbac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dbae:	4b4b      	ldr	r3, [pc, #300]	; (800dcdc <USBD_CDC_Init+0x1ec>)
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	f003 020f 	and.w	r2, r3, #15
 800dbb6:	6879      	ldr	r1, [r7, #4]
 800dbb8:	4613      	mov	r3, r2
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	4413      	add	r3, r2
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	440b      	add	r3, r1
 800dbc2:	3326      	adds	r3, #38	; 0x26
 800dbc4:	2210      	movs	r2, #16
 800dbc6:	801a      	strh	r2, [r3, #0]
 800dbc8:	e035      	b.n	800dc36 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dbca:	4b42      	ldr	r3, [pc, #264]	; (800dcd4 <USBD_CDC_Init+0x1e4>)
 800dbcc:	7819      	ldrb	r1, [r3, #0]
 800dbce:	2340      	movs	r3, #64	; 0x40
 800dbd0:	2202      	movs	r2, #2
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f002 fb6b 	bl	80102ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dbd8:	4b3e      	ldr	r3, [pc, #248]	; (800dcd4 <USBD_CDC_Init+0x1e4>)
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	f003 020f 	and.w	r2, r3, #15
 800dbe0:	6879      	ldr	r1, [r7, #4]
 800dbe2:	4613      	mov	r3, r2
 800dbe4:	009b      	lsls	r3, r3, #2
 800dbe6:	4413      	add	r3, r2
 800dbe8:	009b      	lsls	r3, r3, #2
 800dbea:	440b      	add	r3, r1
 800dbec:	3324      	adds	r3, #36	; 0x24
 800dbee:	2201      	movs	r2, #1
 800dbf0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dbf2:	4b39      	ldr	r3, [pc, #228]	; (800dcd8 <USBD_CDC_Init+0x1e8>)
 800dbf4:	7819      	ldrb	r1, [r3, #0]
 800dbf6:	2340      	movs	r3, #64	; 0x40
 800dbf8:	2202      	movs	r2, #2
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f002 fb57 	bl	80102ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dc00:	4b35      	ldr	r3, [pc, #212]	; (800dcd8 <USBD_CDC_Init+0x1e8>)
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	f003 020f 	and.w	r2, r3, #15
 800dc08:	6879      	ldr	r1, [r7, #4]
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	4413      	add	r3, r2
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	440b      	add	r3, r1
 800dc14:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dc18:	2201      	movs	r2, #1
 800dc1a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dc1c:	4b2f      	ldr	r3, [pc, #188]	; (800dcdc <USBD_CDC_Init+0x1ec>)
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	f003 020f 	and.w	r2, r3, #15
 800dc24:	6879      	ldr	r1, [r7, #4]
 800dc26:	4613      	mov	r3, r2
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	4413      	add	r3, r2
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	440b      	add	r3, r1
 800dc30:	3326      	adds	r3, #38	; 0x26
 800dc32:	2210      	movs	r2, #16
 800dc34:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dc36:	4b29      	ldr	r3, [pc, #164]	; (800dcdc <USBD_CDC_Init+0x1ec>)
 800dc38:	7819      	ldrb	r1, [r3, #0]
 800dc3a:	2308      	movs	r3, #8
 800dc3c:	2203      	movs	r2, #3
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f002 fb35 	bl	80102ae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dc44:	4b25      	ldr	r3, [pc, #148]	; (800dcdc <USBD_CDC_Init+0x1ec>)
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	f003 020f 	and.w	r2, r3, #15
 800dc4c:	6879      	ldr	r1, [r7, #4]
 800dc4e:	4613      	mov	r3, r2
 800dc50:	009b      	lsls	r3, r3, #2
 800dc52:	4413      	add	r3, r2
 800dc54:	009b      	lsls	r3, r3, #2
 800dc56:	440b      	add	r3, r1
 800dc58:	3324      	adds	r3, #36	; 0x24
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2200      	movs	r2, #0
 800dc62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	33b0      	adds	r3, #176	; 0xb0
 800dc70:	009b      	lsls	r3, r3, #2
 800dc72:	4413      	add	r3, r2
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2200      	movs	r2, #0
 800dc86:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d101      	bne.n	800dc98 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800dc94:	2302      	movs	r3, #2
 800dc96:	e018      	b.n	800dcca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	7c1b      	ldrb	r3, [r3, #16]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10a      	bne.n	800dcb6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dca0:	4b0d      	ldr	r3, [pc, #52]	; (800dcd8 <USBD_CDC_Init+0x1e8>)
 800dca2:	7819      	ldrb	r1, [r3, #0]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dcaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f002 fbec 	bl	801048c <USBD_LL_PrepareReceive>
 800dcb4:	e008      	b.n	800dcc8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dcb6:	4b08      	ldr	r3, [pc, #32]	; (800dcd8 <USBD_CDC_Init+0x1e8>)
 800dcb8:	7819      	ldrb	r1, [r3, #0]
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dcc0:	2340      	movs	r3, #64	; 0x40
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f002 fbe2 	bl	801048c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	200000a3 	.word	0x200000a3
 800dcd8:	200000a4 	.word	0x200000a4
 800dcdc:	200000a5 	.word	0x200000a5

0800dce0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	460b      	mov	r3, r1
 800dcea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800dcec:	4b3a      	ldr	r3, [pc, #232]	; (800ddd8 <USBD_CDC_DeInit+0xf8>)
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f002 fb01 	bl	80102fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800dcf8:	4b37      	ldr	r3, [pc, #220]	; (800ddd8 <USBD_CDC_DeInit+0xf8>)
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	f003 020f 	and.w	r2, r3, #15
 800dd00:	6879      	ldr	r1, [r7, #4]
 800dd02:	4613      	mov	r3, r2
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	4413      	add	r3, r2
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	440b      	add	r3, r1
 800dd0c:	3324      	adds	r3, #36	; 0x24
 800dd0e:	2200      	movs	r2, #0
 800dd10:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800dd12:	4b32      	ldr	r3, [pc, #200]	; (800dddc <USBD_CDC_DeInit+0xfc>)
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	4619      	mov	r1, r3
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f002 faee 	bl	80102fa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800dd1e:	4b2f      	ldr	r3, [pc, #188]	; (800dddc <USBD_CDC_DeInit+0xfc>)
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	f003 020f 	and.w	r2, r3, #15
 800dd26:	6879      	ldr	r1, [r7, #4]
 800dd28:	4613      	mov	r3, r2
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	4413      	add	r3, r2
 800dd2e:	009b      	lsls	r3, r3, #2
 800dd30:	440b      	add	r3, r1
 800dd32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dd36:	2200      	movs	r2, #0
 800dd38:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800dd3a:	4b29      	ldr	r3, [pc, #164]	; (800dde0 <USBD_CDC_DeInit+0x100>)
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	4619      	mov	r1, r3
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f002 fada 	bl	80102fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800dd46:	4b26      	ldr	r3, [pc, #152]	; (800dde0 <USBD_CDC_DeInit+0x100>)
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	f003 020f 	and.w	r2, r3, #15
 800dd4e:	6879      	ldr	r1, [r7, #4]
 800dd50:	4613      	mov	r3, r2
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4413      	add	r3, r2
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	440b      	add	r3, r1
 800dd5a:	3324      	adds	r3, #36	; 0x24
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800dd60:	4b1f      	ldr	r3, [pc, #124]	; (800dde0 <USBD_CDC_DeInit+0x100>)
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	f003 020f 	and.w	r2, r3, #15
 800dd68:	6879      	ldr	r1, [r7, #4]
 800dd6a:	4613      	mov	r3, r2
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	4413      	add	r3, r2
 800dd70:	009b      	lsls	r3, r3, #2
 800dd72:	440b      	add	r3, r1
 800dd74:	3326      	adds	r3, #38	; 0x26
 800dd76:	2200      	movs	r2, #0
 800dd78:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	32b0      	adds	r2, #176	; 0xb0
 800dd84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d01f      	beq.n	800ddcc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	33b0      	adds	r3, #176	; 0xb0
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	4413      	add	r3, r2
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	32b0      	adds	r2, #176	; 0xb0
 800ddaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f002 fbae 	bl	8010510 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	32b0      	adds	r2, #176	; 0xb0
 800ddbe:	2100      	movs	r1, #0
 800ddc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ddcc:	2300      	movs	r3, #0
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3708      	adds	r7, #8
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	200000a3 	.word	0x200000a3
 800dddc:	200000a4 	.word	0x200000a4
 800dde0:	200000a5 	.word	0x200000a5

0800dde4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b086      	sub	sp, #24
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	32b0      	adds	r2, #176	; 0xb0
 800ddf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddfc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ddfe:	2300      	movs	r3, #0
 800de00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800de02:	2300      	movs	r3, #0
 800de04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800de06:	2300      	movs	r3, #0
 800de08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d101      	bne.n	800de14 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800de10:	2303      	movs	r3, #3
 800de12:	e0bf      	b.n	800df94 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d050      	beq.n	800dec2 <USBD_CDC_Setup+0xde>
 800de20:	2b20      	cmp	r3, #32
 800de22:	f040 80af 	bne.w	800df84 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	88db      	ldrh	r3, [r3, #6]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d03a      	beq.n	800dea4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	b25b      	sxtb	r3, r3
 800de34:	2b00      	cmp	r3, #0
 800de36:	da1b      	bge.n	800de70 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	33b0      	adds	r3, #176	; 0xb0
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	4413      	add	r3, r2
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	689b      	ldr	r3, [r3, #8]
 800de4a:	683a      	ldr	r2, [r7, #0]
 800de4c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800de4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800de50:	683a      	ldr	r2, [r7, #0]
 800de52:	88d2      	ldrh	r2, [r2, #6]
 800de54:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	88db      	ldrh	r3, [r3, #6]
 800de5a:	2b07      	cmp	r3, #7
 800de5c:	bf28      	it	cs
 800de5e:	2307      	movcs	r3, #7
 800de60:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	89fa      	ldrh	r2, [r7, #14]
 800de66:	4619      	mov	r1, r3
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f001 fd89 	bl	800f980 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800de6e:	e090      	b.n	800df92 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	785a      	ldrb	r2, [r3, #1]
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	88db      	ldrh	r3, [r3, #6]
 800de7e:	2b3f      	cmp	r3, #63	; 0x3f
 800de80:	d803      	bhi.n	800de8a <USBD_CDC_Setup+0xa6>
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	88db      	ldrh	r3, [r3, #6]
 800de86:	b2da      	uxtb	r2, r3
 800de88:	e000      	b.n	800de8c <USBD_CDC_Setup+0xa8>
 800de8a:	2240      	movs	r2, #64	; 0x40
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800de92:	6939      	ldr	r1, [r7, #16]
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800de9a:	461a      	mov	r2, r3
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f001 fd9b 	bl	800f9d8 <USBD_CtlPrepareRx>
      break;
 800dea2:	e076      	b.n	800df92 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	33b0      	adds	r3, #176	; 0xb0
 800deae:	009b      	lsls	r3, r3, #2
 800deb0:	4413      	add	r3, r2
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	689b      	ldr	r3, [r3, #8]
 800deb6:	683a      	ldr	r2, [r7, #0]
 800deb8:	7850      	ldrb	r0, [r2, #1]
 800deba:	2200      	movs	r2, #0
 800debc:	6839      	ldr	r1, [r7, #0]
 800debe:	4798      	blx	r3
      break;
 800dec0:	e067      	b.n	800df92 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	785b      	ldrb	r3, [r3, #1]
 800dec6:	2b0b      	cmp	r3, #11
 800dec8:	d851      	bhi.n	800df6e <USBD_CDC_Setup+0x18a>
 800deca:	a201      	add	r2, pc, #4	; (adr r2, 800ded0 <USBD_CDC_Setup+0xec>)
 800decc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded0:	0800df01 	.word	0x0800df01
 800ded4:	0800df7d 	.word	0x0800df7d
 800ded8:	0800df6f 	.word	0x0800df6f
 800dedc:	0800df6f 	.word	0x0800df6f
 800dee0:	0800df6f 	.word	0x0800df6f
 800dee4:	0800df6f 	.word	0x0800df6f
 800dee8:	0800df6f 	.word	0x0800df6f
 800deec:	0800df6f 	.word	0x0800df6f
 800def0:	0800df6f 	.word	0x0800df6f
 800def4:	0800df6f 	.word	0x0800df6f
 800def8:	0800df2b 	.word	0x0800df2b
 800defc:	0800df55 	.word	0x0800df55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df06:	b2db      	uxtb	r3, r3
 800df08:	2b03      	cmp	r3, #3
 800df0a:	d107      	bne.n	800df1c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800df0c:	f107 030a 	add.w	r3, r7, #10
 800df10:	2202      	movs	r2, #2
 800df12:	4619      	mov	r1, r3
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f001 fd33 	bl	800f980 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800df1a:	e032      	b.n	800df82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800df1c:	6839      	ldr	r1, [r7, #0]
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f001 fcbd 	bl	800f89e <USBD_CtlError>
            ret = USBD_FAIL;
 800df24:	2303      	movs	r3, #3
 800df26:	75fb      	strb	r3, [r7, #23]
          break;
 800df28:	e02b      	b.n	800df82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df30:	b2db      	uxtb	r3, r3
 800df32:	2b03      	cmp	r3, #3
 800df34:	d107      	bne.n	800df46 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800df36:	f107 030d 	add.w	r3, r7, #13
 800df3a:	2201      	movs	r2, #1
 800df3c:	4619      	mov	r1, r3
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f001 fd1e 	bl	800f980 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800df44:	e01d      	b.n	800df82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800df46:	6839      	ldr	r1, [r7, #0]
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f001 fca8 	bl	800f89e <USBD_CtlError>
            ret = USBD_FAIL;
 800df4e:	2303      	movs	r3, #3
 800df50:	75fb      	strb	r3, [r7, #23]
          break;
 800df52:	e016      	b.n	800df82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	2b03      	cmp	r3, #3
 800df5e:	d00f      	beq.n	800df80 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800df60:	6839      	ldr	r1, [r7, #0]
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f001 fc9b 	bl	800f89e <USBD_CtlError>
            ret = USBD_FAIL;
 800df68:	2303      	movs	r3, #3
 800df6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800df6c:	e008      	b.n	800df80 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800df6e:	6839      	ldr	r1, [r7, #0]
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f001 fc94 	bl	800f89e <USBD_CtlError>
          ret = USBD_FAIL;
 800df76:	2303      	movs	r3, #3
 800df78:	75fb      	strb	r3, [r7, #23]
          break;
 800df7a:	e002      	b.n	800df82 <USBD_CDC_Setup+0x19e>
          break;
 800df7c:	bf00      	nop
 800df7e:	e008      	b.n	800df92 <USBD_CDC_Setup+0x1ae>
          break;
 800df80:	bf00      	nop
      }
      break;
 800df82:	e006      	b.n	800df92 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800df84:	6839      	ldr	r1, [r7, #0]
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f001 fc89 	bl	800f89e <USBD_CtlError>
      ret = USBD_FAIL;
 800df8c:	2303      	movs	r3, #3
 800df8e:	75fb      	strb	r3, [r7, #23]
      break;
 800df90:	bf00      	nop
  }

  return (uint8_t)ret;
 800df92:	7dfb      	ldrb	r3, [r7, #23]
}
 800df94:	4618      	mov	r0, r3
 800df96:	3718      	adds	r7, #24
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dfae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	32b0      	adds	r2, #176	; 0xb0
 800dfba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d101      	bne.n	800dfc6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800dfc2:	2303      	movs	r3, #3
 800dfc4:	e065      	b.n	800e092 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	32b0      	adds	r2, #176	; 0xb0
 800dfd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfd4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dfd6:	78fb      	ldrb	r3, [r7, #3]
 800dfd8:	f003 020f 	and.w	r2, r3, #15
 800dfdc:	6879      	ldr	r1, [r7, #4]
 800dfde:	4613      	mov	r3, r2
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	4413      	add	r3, r2
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	440b      	add	r3, r1
 800dfe8:	3318      	adds	r3, #24
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d02f      	beq.n	800e050 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800dff0:	78fb      	ldrb	r3, [r7, #3]
 800dff2:	f003 020f 	and.w	r2, r3, #15
 800dff6:	6879      	ldr	r1, [r7, #4]
 800dff8:	4613      	mov	r3, r2
 800dffa:	009b      	lsls	r3, r3, #2
 800dffc:	4413      	add	r3, r2
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	440b      	add	r3, r1
 800e002:	3318      	adds	r3, #24
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	78fb      	ldrb	r3, [r7, #3]
 800e008:	f003 010f 	and.w	r1, r3, #15
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	460b      	mov	r3, r1
 800e010:	00db      	lsls	r3, r3, #3
 800e012:	440b      	add	r3, r1
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	4403      	add	r3, r0
 800e018:	331c      	adds	r3, #28
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	fbb2 f1f3 	udiv	r1, r2, r3
 800e020:	fb01 f303 	mul.w	r3, r1, r3
 800e024:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e026:	2b00      	cmp	r3, #0
 800e028:	d112      	bne.n	800e050 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e02a:	78fb      	ldrb	r3, [r7, #3]
 800e02c:	f003 020f 	and.w	r2, r3, #15
 800e030:	6879      	ldr	r1, [r7, #4]
 800e032:	4613      	mov	r3, r2
 800e034:	009b      	lsls	r3, r3, #2
 800e036:	4413      	add	r3, r2
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	440b      	add	r3, r1
 800e03c:	3318      	adds	r3, #24
 800e03e:	2200      	movs	r2, #0
 800e040:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e042:	78f9      	ldrb	r1, [r7, #3]
 800e044:	2300      	movs	r3, #0
 800e046:	2200      	movs	r2, #0
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f002 f9fe 	bl	801044a <USBD_LL_Transmit>
 800e04e:	e01f      	b.n	800e090 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	2200      	movs	r2, #0
 800e054:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	33b0      	adds	r3, #176	; 0xb0
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	4413      	add	r3, r2
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	691b      	ldr	r3, [r3, #16]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d010      	beq.n	800e090 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e074:	687a      	ldr	r2, [r7, #4]
 800e076:	33b0      	adds	r3, #176	; 0xb0
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	4413      	add	r3, r2
 800e07c:	685b      	ldr	r3, [r3, #4]
 800e07e:	691b      	ldr	r3, [r3, #16]
 800e080:	68ba      	ldr	r2, [r7, #8]
 800e082:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e086:	68ba      	ldr	r2, [r7, #8]
 800e088:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e08c:	78fa      	ldrb	r2, [r7, #3]
 800e08e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e090:	2300      	movs	r3, #0
}
 800e092:	4618      	mov	r0, r3
 800e094:	3710      	adds	r7, #16
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b084      	sub	sp, #16
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	32b0      	adds	r2, #176	; 0xb0
 800e0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	32b0      	adds	r2, #176	; 0xb0
 800e0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d101      	bne.n	800e0cc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e0c8:	2303      	movs	r3, #3
 800e0ca:	e01a      	b.n	800e102 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e0cc:	78fb      	ldrb	r3, [r7, #3]
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f002 f9fc 	bl	80104ce <USBD_LL_GetRxDataSize>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	33b0      	adds	r3, #176	; 0xb0
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	4413      	add	r3, r2
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	68fa      	ldr	r2, [r7, #12]
 800e0f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e0f6:	68fa      	ldr	r2, [r7, #12]
 800e0f8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e100:	2300      	movs	r3, #0
}
 800e102:	4618      	mov	r0, r3
 800e104:	3710      	adds	r7, #16
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b084      	sub	sp, #16
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	32b0      	adds	r2, #176	; 0xb0
 800e11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e120:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d101      	bne.n	800e12c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e128:	2303      	movs	r3, #3
 800e12a:	e025      	b.n	800e178 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	33b0      	adds	r3, #176	; 0xb0
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	4413      	add	r3, r2
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d01a      	beq.n	800e176 <USBD_CDC_EP0_RxReady+0x6c>
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e146:	2bff      	cmp	r3, #255	; 0xff
 800e148:	d015      	beq.n	800e176 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e150:	687a      	ldr	r2, [r7, #4]
 800e152:	33b0      	adds	r3, #176	; 0xb0
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	4413      	add	r3, r2
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	68fa      	ldr	r2, [r7, #12]
 800e15e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e162:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e164:	68fa      	ldr	r2, [r7, #12]
 800e166:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e16a:	b292      	uxth	r2, r2
 800e16c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	22ff      	movs	r2, #255	; 0xff
 800e172:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e176:	2300      	movs	r3, #0
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3710      	adds	r7, #16
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b086      	sub	sp, #24
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e188:	2182      	movs	r1, #130	; 0x82
 800e18a:	4818      	ldr	r0, [pc, #96]	; (800e1ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e18c:	f000 fd4f 	bl	800ec2e <USBD_GetEpDesc>
 800e190:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e192:	2101      	movs	r1, #1
 800e194:	4815      	ldr	r0, [pc, #84]	; (800e1ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e196:	f000 fd4a 	bl	800ec2e <USBD_GetEpDesc>
 800e19a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e19c:	2181      	movs	r1, #129	; 0x81
 800e19e:	4813      	ldr	r0, [pc, #76]	; (800e1ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e1a0:	f000 fd45 	bl	800ec2e <USBD_GetEpDesc>
 800e1a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d002      	beq.n	800e1b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	2210      	movs	r2, #16
 800e1b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d006      	beq.n	800e1c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e1c0:	711a      	strb	r2, [r3, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d006      	beq.n	800e1da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e1d4:	711a      	strb	r2, [r3, #4]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2243      	movs	r2, #67	; 0x43
 800e1de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e1e0:	4b02      	ldr	r3, [pc, #8]	; (800e1ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3718      	adds	r7, #24
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	20000060 	.word	0x20000060

0800e1f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b086      	sub	sp, #24
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e1f8:	2182      	movs	r1, #130	; 0x82
 800e1fa:	4818      	ldr	r0, [pc, #96]	; (800e25c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e1fc:	f000 fd17 	bl	800ec2e <USBD_GetEpDesc>
 800e200:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e202:	2101      	movs	r1, #1
 800e204:	4815      	ldr	r0, [pc, #84]	; (800e25c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e206:	f000 fd12 	bl	800ec2e <USBD_GetEpDesc>
 800e20a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e20c:	2181      	movs	r1, #129	; 0x81
 800e20e:	4813      	ldr	r0, [pc, #76]	; (800e25c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e210:	f000 fd0d 	bl	800ec2e <USBD_GetEpDesc>
 800e214:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d002      	beq.n	800e222 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	2210      	movs	r2, #16
 800e220:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d006      	beq.n	800e236 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	2200      	movs	r2, #0
 800e22c:	711a      	strb	r2, [r3, #4]
 800e22e:	2200      	movs	r2, #0
 800e230:	f042 0202 	orr.w	r2, r2, #2
 800e234:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d006      	beq.n	800e24a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2200      	movs	r2, #0
 800e240:	711a      	strb	r2, [r3, #4]
 800e242:	2200      	movs	r2, #0
 800e244:	f042 0202 	orr.w	r2, r2, #2
 800e248:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2243      	movs	r2, #67	; 0x43
 800e24e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e250:	4b02      	ldr	r3, [pc, #8]	; (800e25c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e252:	4618      	mov	r0, r3
 800e254:	3718      	adds	r7, #24
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	20000060 	.word	0x20000060

0800e260 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b086      	sub	sp, #24
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e268:	2182      	movs	r1, #130	; 0x82
 800e26a:	4818      	ldr	r0, [pc, #96]	; (800e2cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e26c:	f000 fcdf 	bl	800ec2e <USBD_GetEpDesc>
 800e270:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e272:	2101      	movs	r1, #1
 800e274:	4815      	ldr	r0, [pc, #84]	; (800e2cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e276:	f000 fcda 	bl	800ec2e <USBD_GetEpDesc>
 800e27a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e27c:	2181      	movs	r1, #129	; 0x81
 800e27e:	4813      	ldr	r0, [pc, #76]	; (800e2cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e280:	f000 fcd5 	bl	800ec2e <USBD_GetEpDesc>
 800e284:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d002      	beq.n	800e292 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	2210      	movs	r2, #16
 800e290:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d006      	beq.n	800e2a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	2200      	movs	r2, #0
 800e29c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2a0:	711a      	strb	r2, [r3, #4]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d006      	beq.n	800e2ba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2b4:	711a      	strb	r2, [r3, #4]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2243      	movs	r2, #67	; 0x43
 800e2be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e2c0:	4b02      	ldr	r3, [pc, #8]	; (800e2cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3718      	adds	r7, #24
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	20000060 	.word	0x20000060

0800e2d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	220a      	movs	r2, #10
 800e2dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e2de:	4b03      	ldr	r3, [pc, #12]	; (800e2ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	370c      	adds	r7, #12
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr
 800e2ec:	2000001c 	.word	0x2000001c

0800e2f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b083      	sub	sp, #12
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d101      	bne.n	800e304 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e300:	2303      	movs	r3, #3
 800e302:	e009      	b.n	800e318 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	33b0      	adds	r3, #176	; 0xb0
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	4413      	add	r3, r2
 800e312:	683a      	ldr	r2, [r7, #0]
 800e314:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e316:	2300      	movs	r3, #0
}
 800e318:	4618      	mov	r0, r3
 800e31a:	370c      	adds	r7, #12
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e324:	b480      	push	{r7}
 800e326:	b087      	sub	sp, #28
 800e328:	af00      	add	r7, sp, #0
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	60b9      	str	r1, [r7, #8]
 800e32e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	32b0      	adds	r2, #176	; 0xb0
 800e33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e33e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d101      	bne.n	800e34a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e346:	2303      	movs	r3, #3
 800e348:	e008      	b.n	800e35c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	68ba      	ldr	r2, [r7, #8]
 800e34e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e35a:	2300      	movs	r3, #0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	371c      	adds	r7, #28
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr

0800e368 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e368:	b480      	push	{r7}
 800e36a:	b085      	sub	sp, #20
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	32b0      	adds	r2, #176	; 0xb0
 800e37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e380:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e388:	2303      	movs	r3, #3
 800e38a:	e004      	b.n	800e396 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	683a      	ldr	r2, [r7, #0]
 800e390:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e394:	2300      	movs	r3, #0
}
 800e396:	4618      	mov	r0, r3
 800e398:	3714      	adds	r7, #20
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr
	...

0800e3a4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	32b0      	adds	r2, #176	; 0xb0
 800e3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3ba:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d101      	bne.n	800e3ca <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e3c6:	2303      	movs	r3, #3
 800e3c8:	e025      	b.n	800e416 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d11f      	bne.n	800e414 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e3dc:	4b10      	ldr	r3, [pc, #64]	; (800e420 <USBD_CDC_TransmitPacket+0x7c>)
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	f003 020f 	and.w	r2, r3, #15
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	4413      	add	r3, r2
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	4403      	add	r3, r0
 800e3f6:	3318      	adds	r3, #24
 800e3f8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e3fa:	4b09      	ldr	r3, [pc, #36]	; (800e420 <USBD_CDC_TransmitPacket+0x7c>)
 800e3fc:	7819      	ldrb	r1, [r3, #0]
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f002 f81d 	bl	801044a <USBD_LL_Transmit>

    ret = USBD_OK;
 800e410:	2300      	movs	r3, #0
 800e412:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e414:	7bfb      	ldrb	r3, [r7, #15]
}
 800e416:	4618      	mov	r0, r3
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	200000a3 	.word	0x200000a3

0800e424 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	32b0      	adds	r2, #176	; 0xb0
 800e436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e43a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	32b0      	adds	r2, #176	; 0xb0
 800e446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d101      	bne.n	800e452 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e44e:	2303      	movs	r3, #3
 800e450:	e018      	b.n	800e484 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	7c1b      	ldrb	r3, [r3, #16]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d10a      	bne.n	800e470 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e45a:	4b0c      	ldr	r3, [pc, #48]	; (800e48c <USBD_CDC_ReceivePacket+0x68>)
 800e45c:	7819      	ldrb	r1, [r3, #0]
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e464:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f002 f80f 	bl	801048c <USBD_LL_PrepareReceive>
 800e46e:	e008      	b.n	800e482 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e470:	4b06      	ldr	r3, [pc, #24]	; (800e48c <USBD_CDC_ReceivePacket+0x68>)
 800e472:	7819      	ldrb	r1, [r3, #0]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e47a:	2340      	movs	r3, #64	; 0x40
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f002 f805 	bl	801048c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e482:	2300      	movs	r3, #0
}
 800e484:	4618      	mov	r0, r3
 800e486:	3710      	adds	r7, #16
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	200000a4 	.word	0x200000a4

0800e490 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b086      	sub	sp, #24
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	4613      	mov	r3, r2
 800e49c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d101      	bne.n	800e4a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e4a4:	2303      	movs	r3, #3
 800e4a6:	e01f      	b.n	800e4e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d003      	beq.n	800e4ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	68ba      	ldr	r2, [r7, #8]
 800e4ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	79fa      	ldrb	r2, [r7, #7]
 800e4da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e4dc:	68f8      	ldr	r0, [r7, #12]
 800e4de:	f001 fe7f 	bl	80101e0 <USBD_LL_Init>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e4e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3718      	adds	r7, #24
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d101      	bne.n	800e508 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e504:	2303      	movs	r3, #3
 800e506:	e025      	b.n	800e554 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	683a      	ldr	r2, [r7, #0]
 800e50c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	32ae      	adds	r2, #174	; 0xae
 800e51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e520:	2b00      	cmp	r3, #0
 800e522:	d00f      	beq.n	800e544 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	32ae      	adds	r2, #174	; 0xae
 800e52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e534:	f107 020e 	add.w	r2, r7, #14
 800e538:	4610      	mov	r0, r2
 800e53a:	4798      	blx	r3
 800e53c:	4602      	mov	r2, r0
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e54a:	1c5a      	adds	r2, r3, #1
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e552:	2300      	movs	r3, #0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3710      	adds	r7, #16
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b082      	sub	sp, #8
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f001 fe87 	bl	8010278 <USBD_LL_Start>
 800e56a:	4603      	mov	r3, r0
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e574:	b480      	push	{r7}
 800e576:	b083      	sub	sp, #12
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e57c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e57e:	4618      	mov	r0, r3
 800e580:	370c      	adds	r7, #12
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr

0800e58a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e58a:	b580      	push	{r7, lr}
 800e58c:	b084      	sub	sp, #16
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
 800e592:	460b      	mov	r3, r1
 800e594:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e596:	2300      	movs	r3, #0
 800e598:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d009      	beq.n	800e5b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	78fa      	ldrb	r2, [r7, #3]
 800e5ae:	4611      	mov	r1, r2
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	4798      	blx	r3
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3710      	adds	r7, #16
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}

0800e5c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e5c2:	b580      	push	{r7, lr}
 800e5c4:	b084      	sub	sp, #16
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
 800e5ca:	460b      	mov	r3, r1
 800e5cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	78fa      	ldrb	r2, [r7, #3]
 800e5dc:	4611      	mov	r1, r2
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	4798      	blx	r3
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d001      	beq.n	800e5ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e5e8:	2303      	movs	r3, #3
 800e5ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3710      	adds	r7, #16
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}

0800e5f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b084      	sub	sp, #16
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e606:	6839      	ldr	r1, [r7, #0]
 800e608:	4618      	mov	r0, r3
 800e60a:	f001 f90e 	bl	800f82a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2201      	movs	r2, #1
 800e612:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e61c:	461a      	mov	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e62a:	f003 031f 	and.w	r3, r3, #31
 800e62e:	2b02      	cmp	r3, #2
 800e630:	d01a      	beq.n	800e668 <USBD_LL_SetupStage+0x72>
 800e632:	2b02      	cmp	r3, #2
 800e634:	d822      	bhi.n	800e67c <USBD_LL_SetupStage+0x86>
 800e636:	2b00      	cmp	r3, #0
 800e638:	d002      	beq.n	800e640 <USBD_LL_SetupStage+0x4a>
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d00a      	beq.n	800e654 <USBD_LL_SetupStage+0x5e>
 800e63e:	e01d      	b.n	800e67c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e646:	4619      	mov	r1, r3
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 fb65 	bl	800ed18 <USBD_StdDevReq>
 800e64e:	4603      	mov	r3, r0
 800e650:	73fb      	strb	r3, [r7, #15]
      break;
 800e652:	e020      	b.n	800e696 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e65a:	4619      	mov	r1, r3
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f000 fbcd 	bl	800edfc <USBD_StdItfReq>
 800e662:	4603      	mov	r3, r0
 800e664:	73fb      	strb	r3, [r7, #15]
      break;
 800e666:	e016      	b.n	800e696 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e66e:	4619      	mov	r1, r3
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f000 fc2f 	bl	800eed4 <USBD_StdEPReq>
 800e676:	4603      	mov	r3, r0
 800e678:	73fb      	strb	r3, [r7, #15]
      break;
 800e67a:	e00c      	b.n	800e696 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e682:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e686:	b2db      	uxtb	r3, r3
 800e688:	4619      	mov	r1, r3
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f001 fe54 	bl	8010338 <USBD_LL_StallEP>
 800e690:	4603      	mov	r3, r0
 800e692:	73fb      	strb	r3, [r7, #15]
      break;
 800e694:	bf00      	nop
  }

  return ret;
 800e696:	7bfb      	ldrb	r3, [r7, #15]
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3710      	adds	r7, #16
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b086      	sub	sp, #24
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	607a      	str	r2, [r7, #4]
 800e6ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e6b2:	7afb      	ldrb	r3, [r7, #11]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d16e      	bne.n	800e796 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e6be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e6c6:	2b03      	cmp	r3, #3
 800e6c8:	f040 8098 	bne.w	800e7fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	689a      	ldr	r2, [r3, #8]
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	68db      	ldr	r3, [r3, #12]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d913      	bls.n	800e700 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	689a      	ldr	r2, [r3, #8]
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	1ad2      	subs	r2, r2, r3
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	68da      	ldr	r2, [r3, #12]
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	689b      	ldr	r3, [r3, #8]
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	bf28      	it	cs
 800e6f2:	4613      	movcs	r3, r2
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	6879      	ldr	r1, [r7, #4]
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f001 f98a 	bl	800fa12 <USBD_CtlContinueRx>
 800e6fe:	e07d      	b.n	800e7fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e706:	f003 031f 	and.w	r3, r3, #31
 800e70a:	2b02      	cmp	r3, #2
 800e70c:	d014      	beq.n	800e738 <USBD_LL_DataOutStage+0x98>
 800e70e:	2b02      	cmp	r3, #2
 800e710:	d81d      	bhi.n	800e74e <USBD_LL_DataOutStage+0xae>
 800e712:	2b00      	cmp	r3, #0
 800e714:	d002      	beq.n	800e71c <USBD_LL_DataOutStage+0x7c>
 800e716:	2b01      	cmp	r3, #1
 800e718:	d003      	beq.n	800e722 <USBD_LL_DataOutStage+0x82>
 800e71a:	e018      	b.n	800e74e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e71c:	2300      	movs	r3, #0
 800e71e:	75bb      	strb	r3, [r7, #22]
            break;
 800e720:	e018      	b.n	800e754 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	4619      	mov	r1, r3
 800e72c:	68f8      	ldr	r0, [r7, #12]
 800e72e:	f000 fa64 	bl	800ebfa <USBD_CoreFindIF>
 800e732:	4603      	mov	r3, r0
 800e734:	75bb      	strb	r3, [r7, #22]
            break;
 800e736:	e00d      	b.n	800e754 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	4619      	mov	r1, r3
 800e742:	68f8      	ldr	r0, [r7, #12]
 800e744:	f000 fa66 	bl	800ec14 <USBD_CoreFindEP>
 800e748:	4603      	mov	r3, r0
 800e74a:	75bb      	strb	r3, [r7, #22]
            break;
 800e74c:	e002      	b.n	800e754 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e74e:	2300      	movs	r3, #0
 800e750:	75bb      	strb	r3, [r7, #22]
            break;
 800e752:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e754:	7dbb      	ldrb	r3, [r7, #22]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d119      	bne.n	800e78e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e760:	b2db      	uxtb	r3, r3
 800e762:	2b03      	cmp	r3, #3
 800e764:	d113      	bne.n	800e78e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e766:	7dba      	ldrb	r2, [r7, #22]
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	32ae      	adds	r2, #174	; 0xae
 800e76c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e770:	691b      	ldr	r3, [r3, #16]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d00b      	beq.n	800e78e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e776:	7dba      	ldrb	r2, [r7, #22]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e77e:	7dba      	ldrb	r2, [r7, #22]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	32ae      	adds	r2, #174	; 0xae
 800e784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e788:	691b      	ldr	r3, [r3, #16]
 800e78a:	68f8      	ldr	r0, [r7, #12]
 800e78c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e78e:	68f8      	ldr	r0, [r7, #12]
 800e790:	f001 f950 	bl	800fa34 <USBD_CtlSendStatus>
 800e794:	e032      	b.n	800e7fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e796:	7afb      	ldrb	r3, [r7, #11]
 800e798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	4619      	mov	r1, r3
 800e7a0:	68f8      	ldr	r0, [r7, #12]
 800e7a2:	f000 fa37 	bl	800ec14 <USBD_CoreFindEP>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e7aa:	7dbb      	ldrb	r3, [r7, #22]
 800e7ac:	2bff      	cmp	r3, #255	; 0xff
 800e7ae:	d025      	beq.n	800e7fc <USBD_LL_DataOutStage+0x15c>
 800e7b0:	7dbb      	ldrb	r3, [r7, #22]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d122      	bne.n	800e7fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	2b03      	cmp	r3, #3
 800e7c0:	d117      	bne.n	800e7f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e7c2:	7dba      	ldrb	r2, [r7, #22]
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	32ae      	adds	r2, #174	; 0xae
 800e7c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7cc:	699b      	ldr	r3, [r3, #24]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d00f      	beq.n	800e7f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e7d2:	7dba      	ldrb	r2, [r7, #22]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e7da:	7dba      	ldrb	r2, [r7, #22]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	32ae      	adds	r2, #174	; 0xae
 800e7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7e4:	699b      	ldr	r3, [r3, #24]
 800e7e6:	7afa      	ldrb	r2, [r7, #11]
 800e7e8:	4611      	mov	r1, r2
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	4798      	blx	r3
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e7f2:	7dfb      	ldrb	r3, [r7, #23]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d001      	beq.n	800e7fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e7f8:	7dfb      	ldrb	r3, [r7, #23]
 800e7fa:	e000      	b.n	800e7fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e7fc:	2300      	movs	r3, #0
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3718      	adds	r7, #24
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}

0800e806 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e806:	b580      	push	{r7, lr}
 800e808:	b086      	sub	sp, #24
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	60f8      	str	r0, [r7, #12]
 800e80e:	460b      	mov	r3, r1
 800e810:	607a      	str	r2, [r7, #4]
 800e812:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e814:	7afb      	ldrb	r3, [r7, #11]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d16f      	bne.n	800e8fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	3314      	adds	r3, #20
 800e81e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e826:	2b02      	cmp	r3, #2
 800e828:	d15a      	bne.n	800e8e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	689a      	ldr	r2, [r3, #8]
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	429a      	cmp	r2, r3
 800e834:	d914      	bls.n	800e860 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	689a      	ldr	r2, [r3, #8]
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	68db      	ldr	r3, [r3, #12]
 800e83e:	1ad2      	subs	r2, r2, r3
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	689b      	ldr	r3, [r3, #8]
 800e848:	461a      	mov	r2, r3
 800e84a:	6879      	ldr	r1, [r7, #4]
 800e84c:	68f8      	ldr	r0, [r7, #12]
 800e84e:	f001 f8b2 	bl	800f9b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e852:	2300      	movs	r3, #0
 800e854:	2200      	movs	r2, #0
 800e856:	2100      	movs	r1, #0
 800e858:	68f8      	ldr	r0, [r7, #12]
 800e85a:	f001 fe17 	bl	801048c <USBD_LL_PrepareReceive>
 800e85e:	e03f      	b.n	800e8e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	68da      	ldr	r2, [r3, #12]
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	429a      	cmp	r2, r3
 800e86a:	d11c      	bne.n	800e8a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	685a      	ldr	r2, [r3, #4]
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e874:	429a      	cmp	r2, r3
 800e876:	d316      	bcc.n	800e8a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	685a      	ldr	r2, [r3, #4]
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e882:	429a      	cmp	r2, r3
 800e884:	d20f      	bcs.n	800e8a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e886:	2200      	movs	r2, #0
 800e888:	2100      	movs	r1, #0
 800e88a:	68f8      	ldr	r0, [r7, #12]
 800e88c:	f001 f893 	bl	800f9b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2200      	movs	r2, #0
 800e894:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e898:	2300      	movs	r3, #0
 800e89a:	2200      	movs	r2, #0
 800e89c:	2100      	movs	r1, #0
 800e89e:	68f8      	ldr	r0, [r7, #12]
 800e8a0:	f001 fdf4 	bl	801048c <USBD_LL_PrepareReceive>
 800e8a4:	e01c      	b.n	800e8e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	2b03      	cmp	r3, #3
 800e8b0:	d10f      	bne.n	800e8d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8b8:	68db      	ldr	r3, [r3, #12]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d009      	beq.n	800e8d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8cc:	68db      	ldr	r3, [r3, #12]
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e8d2:	2180      	movs	r1, #128	; 0x80
 800e8d4:	68f8      	ldr	r0, [r7, #12]
 800e8d6:	f001 fd2f 	bl	8010338 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	f001 f8bd 	bl	800fa5a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d03a      	beq.n	800e960 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	f7ff fe42 	bl	800e574 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e8f8:	e032      	b.n	800e960 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e8fa:	7afb      	ldrb	r3, [r7, #11]
 800e8fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e900:	b2db      	uxtb	r3, r3
 800e902:	4619      	mov	r1, r3
 800e904:	68f8      	ldr	r0, [r7, #12]
 800e906:	f000 f985 	bl	800ec14 <USBD_CoreFindEP>
 800e90a:	4603      	mov	r3, r0
 800e90c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e90e:	7dfb      	ldrb	r3, [r7, #23]
 800e910:	2bff      	cmp	r3, #255	; 0xff
 800e912:	d025      	beq.n	800e960 <USBD_LL_DataInStage+0x15a>
 800e914:	7dfb      	ldrb	r3, [r7, #23]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d122      	bne.n	800e960 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e920:	b2db      	uxtb	r3, r3
 800e922:	2b03      	cmp	r3, #3
 800e924:	d11c      	bne.n	800e960 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e926:	7dfa      	ldrb	r2, [r7, #23]
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	32ae      	adds	r2, #174	; 0xae
 800e92c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e930:	695b      	ldr	r3, [r3, #20]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d014      	beq.n	800e960 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e936:	7dfa      	ldrb	r2, [r7, #23]
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e93e:	7dfa      	ldrb	r2, [r7, #23]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	32ae      	adds	r2, #174	; 0xae
 800e944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e948:	695b      	ldr	r3, [r3, #20]
 800e94a:	7afa      	ldrb	r2, [r7, #11]
 800e94c:	4611      	mov	r1, r2
 800e94e:	68f8      	ldr	r0, [r7, #12]
 800e950:	4798      	blx	r3
 800e952:	4603      	mov	r3, r0
 800e954:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e956:	7dbb      	ldrb	r3, [r7, #22]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d001      	beq.n	800e960 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e95c:	7dbb      	ldrb	r3, [r7, #22]
 800e95e:	e000      	b.n	800e962 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e960:	2300      	movs	r3, #0
}
 800e962:	4618      	mov	r0, r3
 800e964:	3718      	adds	r7, #24
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b084      	sub	sp, #16
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e972:	2300      	movs	r3, #0
 800e974:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2201      	movs	r2, #1
 800e97a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2200      	movs	r2, #0
 800e990:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2200      	movs	r2, #0
 800e998:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d014      	beq.n	800e9d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d00e      	beq.n	800e9d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	6852      	ldr	r2, [r2, #4]
 800e9be:	b2d2      	uxtb	r2, r2
 800e9c0:	4611      	mov	r1, r2
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	4798      	blx	r3
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d001      	beq.n	800e9d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e9cc:	2303      	movs	r3, #3
 800e9ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e9d0:	2340      	movs	r3, #64	; 0x40
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	2100      	movs	r1, #0
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f001 fc69 	bl	80102ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2201      	movs	r2, #1
 800e9e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2240      	movs	r2, #64	; 0x40
 800e9e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e9ec:	2340      	movs	r3, #64	; 0x40
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	2180      	movs	r1, #128	; 0x80
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f001 fc5b 	bl	80102ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2240      	movs	r2, #64	; 0x40
 800ea02:	621a      	str	r2, [r3, #32]

  return ret;
 800ea04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3710      	adds	r7, #16
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ea0e:	b480      	push	{r7}
 800ea10:	b083      	sub	sp, #12
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
 800ea16:	460b      	mov	r3, r1
 800ea18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	78fa      	ldrb	r2, [r7, #3]
 800ea1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	370c      	adds	r7, #12
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr

0800ea2e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ea2e:	b480      	push	{r7}
 800ea30:	b083      	sub	sp, #12
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	2b04      	cmp	r3, #4
 800ea40:	d006      	beq.n	800ea50 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea48:	b2da      	uxtb	r2, r3
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2204      	movs	r2, #4
 800ea54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ea58:	2300      	movs	r3, #0
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	370c      	adds	r7, #12
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr

0800ea66 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ea66:	b480      	push	{r7}
 800ea68:	b083      	sub	sp, #12
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea74:	b2db      	uxtb	r3, r3
 800ea76:	2b04      	cmp	r3, #4
 800ea78:	d106      	bne.n	800ea88 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ea80:	b2da      	uxtb	r2, r3
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ea88:	2300      	movs	r3, #0
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	370c      	adds	r7, #12
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr

0800ea96 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b082      	sub	sp, #8
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaa4:	b2db      	uxtb	r3, r3
 800eaa6:	2b03      	cmp	r3, #3
 800eaa8:	d110      	bne.n	800eacc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d00b      	beq.n	800eacc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaba:	69db      	ldr	r3, [r3, #28]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d005      	beq.n	800eacc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eac6:	69db      	ldr	r3, [r3, #28]
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800eacc:	2300      	movs	r3, #0
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3708      	adds	r7, #8
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}

0800ead6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ead6:	b580      	push	{r7, lr}
 800ead8:	b082      	sub	sp, #8
 800eada:	af00      	add	r7, sp, #0
 800eadc:	6078      	str	r0, [r7, #4]
 800eade:	460b      	mov	r3, r1
 800eae0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	32ae      	adds	r2, #174	; 0xae
 800eaec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d101      	bne.n	800eaf8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800eaf4:	2303      	movs	r3, #3
 800eaf6:	e01c      	b.n	800eb32 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eafe:	b2db      	uxtb	r3, r3
 800eb00:	2b03      	cmp	r3, #3
 800eb02:	d115      	bne.n	800eb30 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	32ae      	adds	r2, #174	; 0xae
 800eb0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb12:	6a1b      	ldr	r3, [r3, #32]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d00b      	beq.n	800eb30 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	32ae      	adds	r2, #174	; 0xae
 800eb22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb26:	6a1b      	ldr	r3, [r3, #32]
 800eb28:	78fa      	ldrb	r2, [r7, #3]
 800eb2a:	4611      	mov	r1, r2
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eb30:	2300      	movs	r3, #0
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3708      	adds	r7, #8
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b082      	sub	sp, #8
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
 800eb42:	460b      	mov	r3, r1
 800eb44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	32ae      	adds	r2, #174	; 0xae
 800eb50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d101      	bne.n	800eb5c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800eb58:	2303      	movs	r3, #3
 800eb5a:	e01c      	b.n	800eb96 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	2b03      	cmp	r3, #3
 800eb66:	d115      	bne.n	800eb94 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	32ae      	adds	r2, #174	; 0xae
 800eb72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d00b      	beq.n	800eb94 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	32ae      	adds	r2, #174	; 0xae
 800eb86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb8c:	78fa      	ldrb	r2, [r7, #3]
 800eb8e:	4611      	mov	r1, r2
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eb94:	2300      	movs	r3, #0
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3708      	adds	r7, #8
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}

0800eb9e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800eb9e:	b480      	push	{r7}
 800eba0:	b083      	sub	sp, #12
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eba6:	2300      	movs	r3, #0
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	370c      	adds	r7, #12
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr

0800ebb4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b084      	sub	sp, #16
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d00e      	beq.n	800ebf0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	687a      	ldr	r2, [r7, #4]
 800ebdc:	6852      	ldr	r2, [r2, #4]
 800ebde:	b2d2      	uxtb	r2, r2
 800ebe0:	4611      	mov	r1, r2
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	4798      	blx	r3
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d001      	beq.n	800ebf0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ebec:	2303      	movs	r3, #3
 800ebee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ebf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ebfa:	b480      	push	{r7}
 800ebfc:	b083      	sub	sp, #12
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
 800ec02:	460b      	mov	r3, r1
 800ec04:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ec06:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	370c      	adds	r7, #12
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr

0800ec14 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ec14:	b480      	push	{r7}
 800ec16:	b083      	sub	sp, #12
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ec20:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	370c      	adds	r7, #12
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr

0800ec2e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b086      	sub	sp, #24
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6078      	str	r0, [r7, #4]
 800ec36:	460b      	mov	r3, r1
 800ec38:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ec42:	2300      	movs	r3, #0
 800ec44:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	885b      	ldrh	r3, [r3, #2]
 800ec4a:	b29a      	uxth	r2, r3
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	b29b      	uxth	r3, r3
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d920      	bls.n	800ec98 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ec5e:	e013      	b.n	800ec88 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ec60:	f107 030a 	add.w	r3, r7, #10
 800ec64:	4619      	mov	r1, r3
 800ec66:	6978      	ldr	r0, [r7, #20]
 800ec68:	f000 f81b 	bl	800eca2 <USBD_GetNextDesc>
 800ec6c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	785b      	ldrb	r3, [r3, #1]
 800ec72:	2b05      	cmp	r3, #5
 800ec74:	d108      	bne.n	800ec88 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	789b      	ldrb	r3, [r3, #2]
 800ec7e:	78fa      	ldrb	r2, [r7, #3]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d008      	beq.n	800ec96 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ec84:	2300      	movs	r3, #0
 800ec86:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	885b      	ldrh	r3, [r3, #2]
 800ec8c:	b29a      	uxth	r2, r3
 800ec8e:	897b      	ldrh	r3, [r7, #10]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d8e5      	bhi.n	800ec60 <USBD_GetEpDesc+0x32>
 800ec94:	e000      	b.n	800ec98 <USBD_GetEpDesc+0x6a>
          break;
 800ec96:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ec98:	693b      	ldr	r3, [r7, #16]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3718      	adds	r7, #24
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}

0800eca2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800eca2:	b480      	push	{r7}
 800eca4:	b085      	sub	sp, #20
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
 800ecaa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	881a      	ldrh	r2, [r3, #0]
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	781b      	ldrb	r3, [r3, #0]
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	4413      	add	r3, r2
 800ecbc:	b29a      	uxth	r2, r3
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	781b      	ldrb	r3, [r3, #0]
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	4413      	add	r3, r2
 800eccc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ecce:	68fb      	ldr	r3, [r7, #12]
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3714      	adds	r7, #20
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b087      	sub	sp, #28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ecfa:	8a3b      	ldrh	r3, [r7, #16]
 800ecfc:	021b      	lsls	r3, r3, #8
 800ecfe:	b21a      	sxth	r2, r3
 800ed00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ed04:	4313      	orrs	r3, r2
 800ed06:	b21b      	sxth	r3, r3
 800ed08:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ed0a:	89fb      	ldrh	r3, [r7, #14]
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	371c      	adds	r7, #28
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed22:	2300      	movs	r3, #0
 800ed24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed2e:	2b40      	cmp	r3, #64	; 0x40
 800ed30:	d005      	beq.n	800ed3e <USBD_StdDevReq+0x26>
 800ed32:	2b40      	cmp	r3, #64	; 0x40
 800ed34:	d857      	bhi.n	800ede6 <USBD_StdDevReq+0xce>
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d00f      	beq.n	800ed5a <USBD_StdDevReq+0x42>
 800ed3a:	2b20      	cmp	r3, #32
 800ed3c:	d153      	bne.n	800ede6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	32ae      	adds	r2, #174	; 0xae
 800ed48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed4c:	689b      	ldr	r3, [r3, #8]
 800ed4e:	6839      	ldr	r1, [r7, #0]
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	4798      	blx	r3
 800ed54:	4603      	mov	r3, r0
 800ed56:	73fb      	strb	r3, [r7, #15]
      break;
 800ed58:	e04a      	b.n	800edf0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	785b      	ldrb	r3, [r3, #1]
 800ed5e:	2b09      	cmp	r3, #9
 800ed60:	d83b      	bhi.n	800edda <USBD_StdDevReq+0xc2>
 800ed62:	a201      	add	r2, pc, #4	; (adr r2, 800ed68 <USBD_StdDevReq+0x50>)
 800ed64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed68:	0800edbd 	.word	0x0800edbd
 800ed6c:	0800edd1 	.word	0x0800edd1
 800ed70:	0800eddb 	.word	0x0800eddb
 800ed74:	0800edc7 	.word	0x0800edc7
 800ed78:	0800eddb 	.word	0x0800eddb
 800ed7c:	0800ed9b 	.word	0x0800ed9b
 800ed80:	0800ed91 	.word	0x0800ed91
 800ed84:	0800eddb 	.word	0x0800eddb
 800ed88:	0800edb3 	.word	0x0800edb3
 800ed8c:	0800eda5 	.word	0x0800eda5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ed90:	6839      	ldr	r1, [r7, #0]
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 fa3c 	bl	800f210 <USBD_GetDescriptor>
          break;
 800ed98:	e024      	b.n	800ede4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ed9a:	6839      	ldr	r1, [r7, #0]
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 fba1 	bl	800f4e4 <USBD_SetAddress>
          break;
 800eda2:	e01f      	b.n	800ede4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800eda4:	6839      	ldr	r1, [r7, #0]
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f000 fbe0 	bl	800f56c <USBD_SetConfig>
 800edac:	4603      	mov	r3, r0
 800edae:	73fb      	strb	r3, [r7, #15]
          break;
 800edb0:	e018      	b.n	800ede4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800edb2:	6839      	ldr	r1, [r7, #0]
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 fc83 	bl	800f6c0 <USBD_GetConfig>
          break;
 800edba:	e013      	b.n	800ede4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800edbc:	6839      	ldr	r1, [r7, #0]
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 fcb4 	bl	800f72c <USBD_GetStatus>
          break;
 800edc4:	e00e      	b.n	800ede4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800edc6:	6839      	ldr	r1, [r7, #0]
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f000 fce3 	bl	800f794 <USBD_SetFeature>
          break;
 800edce:	e009      	b.n	800ede4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800edd0:	6839      	ldr	r1, [r7, #0]
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f000 fd07 	bl	800f7e6 <USBD_ClrFeature>
          break;
 800edd8:	e004      	b.n	800ede4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800edda:	6839      	ldr	r1, [r7, #0]
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 fd5e 	bl	800f89e <USBD_CtlError>
          break;
 800ede2:	bf00      	nop
      }
      break;
 800ede4:	e004      	b.n	800edf0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ede6:	6839      	ldr	r1, [r7, #0]
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f000 fd58 	bl	800f89e <USBD_CtlError>
      break;
 800edee:	bf00      	nop
  }

  return ret;
 800edf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3710      	adds	r7, #16
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop

0800edfc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee06:	2300      	movs	r3, #0
 800ee08:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee12:	2b40      	cmp	r3, #64	; 0x40
 800ee14:	d005      	beq.n	800ee22 <USBD_StdItfReq+0x26>
 800ee16:	2b40      	cmp	r3, #64	; 0x40
 800ee18:	d852      	bhi.n	800eec0 <USBD_StdItfReq+0xc4>
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d001      	beq.n	800ee22 <USBD_StdItfReq+0x26>
 800ee1e:	2b20      	cmp	r3, #32
 800ee20:	d14e      	bne.n	800eec0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	3b01      	subs	r3, #1
 800ee2c:	2b02      	cmp	r3, #2
 800ee2e:	d840      	bhi.n	800eeb2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	889b      	ldrh	r3, [r3, #4]
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	2b01      	cmp	r3, #1
 800ee38:	d836      	bhi.n	800eea8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	889b      	ldrh	r3, [r3, #4]
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	4619      	mov	r1, r3
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f7ff fed9 	bl	800ebfa <USBD_CoreFindIF>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ee4c:	7bbb      	ldrb	r3, [r7, #14]
 800ee4e:	2bff      	cmp	r3, #255	; 0xff
 800ee50:	d01d      	beq.n	800ee8e <USBD_StdItfReq+0x92>
 800ee52:	7bbb      	ldrb	r3, [r7, #14]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d11a      	bne.n	800ee8e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ee58:	7bba      	ldrb	r2, [r7, #14]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	32ae      	adds	r2, #174	; 0xae
 800ee5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d00f      	beq.n	800ee88 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ee68:	7bba      	ldrb	r2, [r7, #14]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ee70:	7bba      	ldrb	r2, [r7, #14]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	32ae      	adds	r2, #174	; 0xae
 800ee76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee7a:	689b      	ldr	r3, [r3, #8]
 800ee7c:	6839      	ldr	r1, [r7, #0]
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	4798      	blx	r3
 800ee82:	4603      	mov	r3, r0
 800ee84:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ee86:	e004      	b.n	800ee92 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ee88:	2303      	movs	r3, #3
 800ee8a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ee8c:	e001      	b.n	800ee92 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ee8e:	2303      	movs	r3, #3
 800ee90:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	88db      	ldrh	r3, [r3, #6]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d110      	bne.n	800eebc <USBD_StdItfReq+0xc0>
 800ee9a:	7bfb      	ldrb	r3, [r7, #15]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d10d      	bne.n	800eebc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f000 fdc7 	bl	800fa34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800eea6:	e009      	b.n	800eebc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800eea8:	6839      	ldr	r1, [r7, #0]
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 fcf7 	bl	800f89e <USBD_CtlError>
          break;
 800eeb0:	e004      	b.n	800eebc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800eeb2:	6839      	ldr	r1, [r7, #0]
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f000 fcf2 	bl	800f89e <USBD_CtlError>
          break;
 800eeba:	e000      	b.n	800eebe <USBD_StdItfReq+0xc2>
          break;
 800eebc:	bf00      	nop
      }
      break;
 800eebe:	e004      	b.n	800eeca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800eec0:	6839      	ldr	r1, [r7, #0]
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f000 fceb 	bl	800f89e <USBD_CtlError>
      break;
 800eec8:	bf00      	nop
  }

  return ret;
 800eeca:	7bfb      	ldrb	r3, [r7, #15]
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3710      	adds	r7, #16
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800eede:	2300      	movs	r3, #0
 800eee0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	889b      	ldrh	r3, [r3, #4]
 800eee6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eef0:	2b40      	cmp	r3, #64	; 0x40
 800eef2:	d007      	beq.n	800ef04 <USBD_StdEPReq+0x30>
 800eef4:	2b40      	cmp	r3, #64	; 0x40
 800eef6:	f200 817f 	bhi.w	800f1f8 <USBD_StdEPReq+0x324>
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d02a      	beq.n	800ef54 <USBD_StdEPReq+0x80>
 800eefe:	2b20      	cmp	r3, #32
 800ef00:	f040 817a 	bne.w	800f1f8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ef04:	7bbb      	ldrb	r3, [r7, #14]
 800ef06:	4619      	mov	r1, r3
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f7ff fe83 	bl	800ec14 <USBD_CoreFindEP>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ef12:	7b7b      	ldrb	r3, [r7, #13]
 800ef14:	2bff      	cmp	r3, #255	; 0xff
 800ef16:	f000 8174 	beq.w	800f202 <USBD_StdEPReq+0x32e>
 800ef1a:	7b7b      	ldrb	r3, [r7, #13]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	f040 8170 	bne.w	800f202 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ef22:	7b7a      	ldrb	r2, [r7, #13]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ef2a:	7b7a      	ldrb	r2, [r7, #13]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	32ae      	adds	r2, #174	; 0xae
 800ef30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef34:	689b      	ldr	r3, [r3, #8]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	f000 8163 	beq.w	800f202 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ef3c:	7b7a      	ldrb	r2, [r7, #13]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	32ae      	adds	r2, #174	; 0xae
 800ef42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef46:	689b      	ldr	r3, [r3, #8]
 800ef48:	6839      	ldr	r1, [r7, #0]
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	4798      	blx	r3
 800ef4e:	4603      	mov	r3, r0
 800ef50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ef52:	e156      	b.n	800f202 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	785b      	ldrb	r3, [r3, #1]
 800ef58:	2b03      	cmp	r3, #3
 800ef5a:	d008      	beq.n	800ef6e <USBD_StdEPReq+0x9a>
 800ef5c:	2b03      	cmp	r3, #3
 800ef5e:	f300 8145 	bgt.w	800f1ec <USBD_StdEPReq+0x318>
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	f000 809b 	beq.w	800f09e <USBD_StdEPReq+0x1ca>
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d03c      	beq.n	800efe6 <USBD_StdEPReq+0x112>
 800ef6c:	e13e      	b.n	800f1ec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	2b02      	cmp	r3, #2
 800ef78:	d002      	beq.n	800ef80 <USBD_StdEPReq+0xac>
 800ef7a:	2b03      	cmp	r3, #3
 800ef7c:	d016      	beq.n	800efac <USBD_StdEPReq+0xd8>
 800ef7e:	e02c      	b.n	800efda <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef80:	7bbb      	ldrb	r3, [r7, #14]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d00d      	beq.n	800efa2 <USBD_StdEPReq+0xce>
 800ef86:	7bbb      	ldrb	r3, [r7, #14]
 800ef88:	2b80      	cmp	r3, #128	; 0x80
 800ef8a:	d00a      	beq.n	800efa2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ef8c:	7bbb      	ldrb	r3, [r7, #14]
 800ef8e:	4619      	mov	r1, r3
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f001 f9d1 	bl	8010338 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef96:	2180      	movs	r1, #128	; 0x80
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f001 f9cd 	bl	8010338 <USBD_LL_StallEP>
 800ef9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800efa0:	e020      	b.n	800efe4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800efa2:	6839      	ldr	r1, [r7, #0]
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f000 fc7a 	bl	800f89e <USBD_CtlError>
              break;
 800efaa:	e01b      	b.n	800efe4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	885b      	ldrh	r3, [r3, #2]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d10e      	bne.n	800efd2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800efb4:	7bbb      	ldrb	r3, [r7, #14]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d00b      	beq.n	800efd2 <USBD_StdEPReq+0xfe>
 800efba:	7bbb      	ldrb	r3, [r7, #14]
 800efbc:	2b80      	cmp	r3, #128	; 0x80
 800efbe:	d008      	beq.n	800efd2 <USBD_StdEPReq+0xfe>
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	88db      	ldrh	r3, [r3, #6]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d104      	bne.n	800efd2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800efc8:	7bbb      	ldrb	r3, [r7, #14]
 800efca:	4619      	mov	r1, r3
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f001 f9b3 	bl	8010338 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f000 fd2e 	bl	800fa34 <USBD_CtlSendStatus>

              break;
 800efd8:	e004      	b.n	800efe4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800efda:	6839      	ldr	r1, [r7, #0]
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f000 fc5e 	bl	800f89e <USBD_CtlError>
              break;
 800efe2:	bf00      	nop
          }
          break;
 800efe4:	e107      	b.n	800f1f6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efec:	b2db      	uxtb	r3, r3
 800efee:	2b02      	cmp	r3, #2
 800eff0:	d002      	beq.n	800eff8 <USBD_StdEPReq+0x124>
 800eff2:	2b03      	cmp	r3, #3
 800eff4:	d016      	beq.n	800f024 <USBD_StdEPReq+0x150>
 800eff6:	e04b      	b.n	800f090 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eff8:	7bbb      	ldrb	r3, [r7, #14]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d00d      	beq.n	800f01a <USBD_StdEPReq+0x146>
 800effe:	7bbb      	ldrb	r3, [r7, #14]
 800f000:	2b80      	cmp	r3, #128	; 0x80
 800f002:	d00a      	beq.n	800f01a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f004:	7bbb      	ldrb	r3, [r7, #14]
 800f006:	4619      	mov	r1, r3
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f001 f995 	bl	8010338 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f00e:	2180      	movs	r1, #128	; 0x80
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f001 f991 	bl	8010338 <USBD_LL_StallEP>
 800f016:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f018:	e040      	b.n	800f09c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f01a:	6839      	ldr	r1, [r7, #0]
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f000 fc3e 	bl	800f89e <USBD_CtlError>
              break;
 800f022:	e03b      	b.n	800f09c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	885b      	ldrh	r3, [r3, #2]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d136      	bne.n	800f09a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f02c:	7bbb      	ldrb	r3, [r7, #14]
 800f02e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f032:	2b00      	cmp	r3, #0
 800f034:	d004      	beq.n	800f040 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f036:	7bbb      	ldrb	r3, [r7, #14]
 800f038:	4619      	mov	r1, r3
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f001 f99b 	bl	8010376 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f000 fcf7 	bl	800fa34 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f046:	7bbb      	ldrb	r3, [r7, #14]
 800f048:	4619      	mov	r1, r3
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f7ff fde2 	bl	800ec14 <USBD_CoreFindEP>
 800f050:	4603      	mov	r3, r0
 800f052:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f054:	7b7b      	ldrb	r3, [r7, #13]
 800f056:	2bff      	cmp	r3, #255	; 0xff
 800f058:	d01f      	beq.n	800f09a <USBD_StdEPReq+0x1c6>
 800f05a:	7b7b      	ldrb	r3, [r7, #13]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d11c      	bne.n	800f09a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f060:	7b7a      	ldrb	r2, [r7, #13]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f068:	7b7a      	ldrb	r2, [r7, #13]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	32ae      	adds	r2, #174	; 0xae
 800f06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f072:	689b      	ldr	r3, [r3, #8]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d010      	beq.n	800f09a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f078:	7b7a      	ldrb	r2, [r7, #13]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	32ae      	adds	r2, #174	; 0xae
 800f07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f082:	689b      	ldr	r3, [r3, #8]
 800f084:	6839      	ldr	r1, [r7, #0]
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	4798      	blx	r3
 800f08a:	4603      	mov	r3, r0
 800f08c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f08e:	e004      	b.n	800f09a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f090:	6839      	ldr	r1, [r7, #0]
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 fc03 	bl	800f89e <USBD_CtlError>
              break;
 800f098:	e000      	b.n	800f09c <USBD_StdEPReq+0x1c8>
              break;
 800f09a:	bf00      	nop
          }
          break;
 800f09c:	e0ab      	b.n	800f1f6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	2b02      	cmp	r3, #2
 800f0a8:	d002      	beq.n	800f0b0 <USBD_StdEPReq+0x1dc>
 800f0aa:	2b03      	cmp	r3, #3
 800f0ac:	d032      	beq.n	800f114 <USBD_StdEPReq+0x240>
 800f0ae:	e097      	b.n	800f1e0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f0b0:	7bbb      	ldrb	r3, [r7, #14]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d007      	beq.n	800f0c6 <USBD_StdEPReq+0x1f2>
 800f0b6:	7bbb      	ldrb	r3, [r7, #14]
 800f0b8:	2b80      	cmp	r3, #128	; 0x80
 800f0ba:	d004      	beq.n	800f0c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f0bc:	6839      	ldr	r1, [r7, #0]
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f000 fbed 	bl	800f89e <USBD_CtlError>
                break;
 800f0c4:	e091      	b.n	800f1ea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f0c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	da0b      	bge.n	800f0e6 <USBD_StdEPReq+0x212>
 800f0ce:	7bbb      	ldrb	r3, [r7, #14]
 800f0d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f0d4:	4613      	mov	r3, r2
 800f0d6:	009b      	lsls	r3, r3, #2
 800f0d8:	4413      	add	r3, r2
 800f0da:	009b      	lsls	r3, r3, #2
 800f0dc:	3310      	adds	r3, #16
 800f0de:	687a      	ldr	r2, [r7, #4]
 800f0e0:	4413      	add	r3, r2
 800f0e2:	3304      	adds	r3, #4
 800f0e4:	e00b      	b.n	800f0fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f0e6:	7bbb      	ldrb	r3, [r7, #14]
 800f0e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f0ec:	4613      	mov	r3, r2
 800f0ee:	009b      	lsls	r3, r3, #2
 800f0f0:	4413      	add	r3, r2
 800f0f2:	009b      	lsls	r3, r3, #2
 800f0f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f0f8:	687a      	ldr	r2, [r7, #4]
 800f0fa:	4413      	add	r3, r2
 800f0fc:	3304      	adds	r3, #4
 800f0fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	2200      	movs	r2, #0
 800f104:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	2202      	movs	r2, #2
 800f10a:	4619      	mov	r1, r3
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f000 fc37 	bl	800f980 <USBD_CtlSendData>
              break;
 800f112:	e06a      	b.n	800f1ea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f114:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	da11      	bge.n	800f140 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f11c:	7bbb      	ldrb	r3, [r7, #14]
 800f11e:	f003 020f 	and.w	r2, r3, #15
 800f122:	6879      	ldr	r1, [r7, #4]
 800f124:	4613      	mov	r3, r2
 800f126:	009b      	lsls	r3, r3, #2
 800f128:	4413      	add	r3, r2
 800f12a:	009b      	lsls	r3, r3, #2
 800f12c:	440b      	add	r3, r1
 800f12e:	3324      	adds	r3, #36	; 0x24
 800f130:	881b      	ldrh	r3, [r3, #0]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d117      	bne.n	800f166 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f136:	6839      	ldr	r1, [r7, #0]
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 fbb0 	bl	800f89e <USBD_CtlError>
                  break;
 800f13e:	e054      	b.n	800f1ea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f140:	7bbb      	ldrb	r3, [r7, #14]
 800f142:	f003 020f 	and.w	r2, r3, #15
 800f146:	6879      	ldr	r1, [r7, #4]
 800f148:	4613      	mov	r3, r2
 800f14a:	009b      	lsls	r3, r3, #2
 800f14c:	4413      	add	r3, r2
 800f14e:	009b      	lsls	r3, r3, #2
 800f150:	440b      	add	r3, r1
 800f152:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f156:	881b      	ldrh	r3, [r3, #0]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d104      	bne.n	800f166 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f15c:	6839      	ldr	r1, [r7, #0]
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 fb9d 	bl	800f89e <USBD_CtlError>
                  break;
 800f164:	e041      	b.n	800f1ea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f166:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	da0b      	bge.n	800f186 <USBD_StdEPReq+0x2b2>
 800f16e:	7bbb      	ldrb	r3, [r7, #14]
 800f170:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f174:	4613      	mov	r3, r2
 800f176:	009b      	lsls	r3, r3, #2
 800f178:	4413      	add	r3, r2
 800f17a:	009b      	lsls	r3, r3, #2
 800f17c:	3310      	adds	r3, #16
 800f17e:	687a      	ldr	r2, [r7, #4]
 800f180:	4413      	add	r3, r2
 800f182:	3304      	adds	r3, #4
 800f184:	e00b      	b.n	800f19e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f186:	7bbb      	ldrb	r3, [r7, #14]
 800f188:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f18c:	4613      	mov	r3, r2
 800f18e:	009b      	lsls	r3, r3, #2
 800f190:	4413      	add	r3, r2
 800f192:	009b      	lsls	r3, r3, #2
 800f194:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f198:	687a      	ldr	r2, [r7, #4]
 800f19a:	4413      	add	r3, r2
 800f19c:	3304      	adds	r3, #4
 800f19e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f1a0:	7bbb      	ldrb	r3, [r7, #14]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d002      	beq.n	800f1ac <USBD_StdEPReq+0x2d8>
 800f1a6:	7bbb      	ldrb	r3, [r7, #14]
 800f1a8:	2b80      	cmp	r3, #128	; 0x80
 800f1aa:	d103      	bne.n	800f1b4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	601a      	str	r2, [r3, #0]
 800f1b2:	e00e      	b.n	800f1d2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f1b4:	7bbb      	ldrb	r3, [r7, #14]
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f001 f8fb 	bl	80103b4 <USBD_LL_IsStallEP>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d003      	beq.n	800f1cc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	601a      	str	r2, [r3, #0]
 800f1ca:	e002      	b.n	800f1d2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	2202      	movs	r2, #2
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f000 fbd1 	bl	800f980 <USBD_CtlSendData>
              break;
 800f1de:	e004      	b.n	800f1ea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f1e0:	6839      	ldr	r1, [r7, #0]
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f000 fb5b 	bl	800f89e <USBD_CtlError>
              break;
 800f1e8:	bf00      	nop
          }
          break;
 800f1ea:	e004      	b.n	800f1f6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f1ec:	6839      	ldr	r1, [r7, #0]
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 fb55 	bl	800f89e <USBD_CtlError>
          break;
 800f1f4:	bf00      	nop
      }
      break;
 800f1f6:	e005      	b.n	800f204 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f1f8:	6839      	ldr	r1, [r7, #0]
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f000 fb4f 	bl	800f89e <USBD_CtlError>
      break;
 800f200:	e000      	b.n	800f204 <USBD_StdEPReq+0x330>
      break;
 800f202:	bf00      	nop
  }

  return ret;
 800f204:	7bfb      	ldrb	r3, [r7, #15]
}
 800f206:	4618      	mov	r0, r3
 800f208:	3710      	adds	r7, #16
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
	...

0800f210 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f21a:	2300      	movs	r3, #0
 800f21c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f21e:	2300      	movs	r3, #0
 800f220:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f222:	2300      	movs	r3, #0
 800f224:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	885b      	ldrh	r3, [r3, #2]
 800f22a:	0a1b      	lsrs	r3, r3, #8
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	3b01      	subs	r3, #1
 800f230:	2b06      	cmp	r3, #6
 800f232:	f200 8128 	bhi.w	800f486 <USBD_GetDescriptor+0x276>
 800f236:	a201      	add	r2, pc, #4	; (adr r2, 800f23c <USBD_GetDescriptor+0x2c>)
 800f238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f23c:	0800f259 	.word	0x0800f259
 800f240:	0800f271 	.word	0x0800f271
 800f244:	0800f2b1 	.word	0x0800f2b1
 800f248:	0800f487 	.word	0x0800f487
 800f24c:	0800f487 	.word	0x0800f487
 800f250:	0800f427 	.word	0x0800f427
 800f254:	0800f453 	.word	0x0800f453
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	687a      	ldr	r2, [r7, #4]
 800f262:	7c12      	ldrb	r2, [r2, #16]
 800f264:	f107 0108 	add.w	r1, r7, #8
 800f268:	4610      	mov	r0, r2
 800f26a:	4798      	blx	r3
 800f26c:	60f8      	str	r0, [r7, #12]
      break;
 800f26e:	e112      	b.n	800f496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	7c1b      	ldrb	r3, [r3, #16]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d10d      	bne.n	800f294 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f280:	f107 0208 	add.w	r2, r7, #8
 800f284:	4610      	mov	r0, r2
 800f286:	4798      	blx	r3
 800f288:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	3301      	adds	r3, #1
 800f28e:	2202      	movs	r2, #2
 800f290:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f292:	e100      	b.n	800f496 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f29c:	f107 0208 	add.w	r2, r7, #8
 800f2a0:	4610      	mov	r0, r2
 800f2a2:	4798      	blx	r3
 800f2a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	3301      	adds	r3, #1
 800f2aa:	2202      	movs	r2, #2
 800f2ac:	701a      	strb	r2, [r3, #0]
      break;
 800f2ae:	e0f2      	b.n	800f496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	885b      	ldrh	r3, [r3, #2]
 800f2b4:	b2db      	uxtb	r3, r3
 800f2b6:	2b05      	cmp	r3, #5
 800f2b8:	f200 80ac 	bhi.w	800f414 <USBD_GetDescriptor+0x204>
 800f2bc:	a201      	add	r2, pc, #4	; (adr r2, 800f2c4 <USBD_GetDescriptor+0xb4>)
 800f2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c2:	bf00      	nop
 800f2c4:	0800f2dd 	.word	0x0800f2dd
 800f2c8:	0800f311 	.word	0x0800f311
 800f2cc:	0800f345 	.word	0x0800f345
 800f2d0:	0800f379 	.word	0x0800f379
 800f2d4:	0800f3ad 	.word	0x0800f3ad
 800f2d8:	0800f3e1 	.word	0x0800f3e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d00b      	beq.n	800f300 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	687a      	ldr	r2, [r7, #4]
 800f2f2:	7c12      	ldrb	r2, [r2, #16]
 800f2f4:	f107 0108 	add.w	r1, r7, #8
 800f2f8:	4610      	mov	r0, r2
 800f2fa:	4798      	blx	r3
 800f2fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f2fe:	e091      	b.n	800f424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f300:	6839      	ldr	r1, [r7, #0]
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f000 facb 	bl	800f89e <USBD_CtlError>
            err++;
 800f308:	7afb      	ldrb	r3, [r7, #11]
 800f30a:	3301      	adds	r3, #1
 800f30c:	72fb      	strb	r3, [r7, #11]
          break;
 800f30e:	e089      	b.n	800f424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f316:	689b      	ldr	r3, [r3, #8]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d00b      	beq.n	800f334 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f322:	689b      	ldr	r3, [r3, #8]
 800f324:	687a      	ldr	r2, [r7, #4]
 800f326:	7c12      	ldrb	r2, [r2, #16]
 800f328:	f107 0108 	add.w	r1, r7, #8
 800f32c:	4610      	mov	r0, r2
 800f32e:	4798      	blx	r3
 800f330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f332:	e077      	b.n	800f424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f334:	6839      	ldr	r1, [r7, #0]
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 fab1 	bl	800f89e <USBD_CtlError>
            err++;
 800f33c:	7afb      	ldrb	r3, [r7, #11]
 800f33e:	3301      	adds	r3, #1
 800f340:	72fb      	strb	r3, [r7, #11]
          break;
 800f342:	e06f      	b.n	800f424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f34a:	68db      	ldr	r3, [r3, #12]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00b      	beq.n	800f368 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f356:	68db      	ldr	r3, [r3, #12]
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	7c12      	ldrb	r2, [r2, #16]
 800f35c:	f107 0108 	add.w	r1, r7, #8
 800f360:	4610      	mov	r0, r2
 800f362:	4798      	blx	r3
 800f364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f366:	e05d      	b.n	800f424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f368:	6839      	ldr	r1, [r7, #0]
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 fa97 	bl	800f89e <USBD_CtlError>
            err++;
 800f370:	7afb      	ldrb	r3, [r7, #11]
 800f372:	3301      	adds	r3, #1
 800f374:	72fb      	strb	r3, [r7, #11]
          break;
 800f376:	e055      	b.n	800f424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f37e:	691b      	ldr	r3, [r3, #16]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d00b      	beq.n	800f39c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f38a:	691b      	ldr	r3, [r3, #16]
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	7c12      	ldrb	r2, [r2, #16]
 800f390:	f107 0108 	add.w	r1, r7, #8
 800f394:	4610      	mov	r0, r2
 800f396:	4798      	blx	r3
 800f398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f39a:	e043      	b.n	800f424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f39c:	6839      	ldr	r1, [r7, #0]
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f000 fa7d 	bl	800f89e <USBD_CtlError>
            err++;
 800f3a4:	7afb      	ldrb	r3, [r7, #11]
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	72fb      	strb	r3, [r7, #11]
          break;
 800f3aa:	e03b      	b.n	800f424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3b2:	695b      	ldr	r3, [r3, #20]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d00b      	beq.n	800f3d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3be:	695b      	ldr	r3, [r3, #20]
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	7c12      	ldrb	r2, [r2, #16]
 800f3c4:	f107 0108 	add.w	r1, r7, #8
 800f3c8:	4610      	mov	r0, r2
 800f3ca:	4798      	blx	r3
 800f3cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f3ce:	e029      	b.n	800f424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f3d0:	6839      	ldr	r1, [r7, #0]
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f000 fa63 	bl	800f89e <USBD_CtlError>
            err++;
 800f3d8:	7afb      	ldrb	r3, [r7, #11]
 800f3da:	3301      	adds	r3, #1
 800f3dc:	72fb      	strb	r3, [r7, #11]
          break;
 800f3de:	e021      	b.n	800f424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3e6:	699b      	ldr	r3, [r3, #24]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d00b      	beq.n	800f404 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3f2:	699b      	ldr	r3, [r3, #24]
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	7c12      	ldrb	r2, [r2, #16]
 800f3f8:	f107 0108 	add.w	r1, r7, #8
 800f3fc:	4610      	mov	r0, r2
 800f3fe:	4798      	blx	r3
 800f400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f402:	e00f      	b.n	800f424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f404:	6839      	ldr	r1, [r7, #0]
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f000 fa49 	bl	800f89e <USBD_CtlError>
            err++;
 800f40c:	7afb      	ldrb	r3, [r7, #11]
 800f40e:	3301      	adds	r3, #1
 800f410:	72fb      	strb	r3, [r7, #11]
          break;
 800f412:	e007      	b.n	800f424 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f414:	6839      	ldr	r1, [r7, #0]
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f000 fa41 	bl	800f89e <USBD_CtlError>
          err++;
 800f41c:	7afb      	ldrb	r3, [r7, #11]
 800f41e:	3301      	adds	r3, #1
 800f420:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f422:	bf00      	nop
      }
      break;
 800f424:	e037      	b.n	800f496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	7c1b      	ldrb	r3, [r3, #16]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d109      	bne.n	800f442 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f436:	f107 0208 	add.w	r2, r7, #8
 800f43a:	4610      	mov	r0, r2
 800f43c:	4798      	blx	r3
 800f43e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f440:	e029      	b.n	800f496 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f442:	6839      	ldr	r1, [r7, #0]
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 fa2a 	bl	800f89e <USBD_CtlError>
        err++;
 800f44a:	7afb      	ldrb	r3, [r7, #11]
 800f44c:	3301      	adds	r3, #1
 800f44e:	72fb      	strb	r3, [r7, #11]
      break;
 800f450:	e021      	b.n	800f496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	7c1b      	ldrb	r3, [r3, #16]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d10d      	bne.n	800f476 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f462:	f107 0208 	add.w	r2, r7, #8
 800f466:	4610      	mov	r0, r2
 800f468:	4798      	blx	r3
 800f46a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	3301      	adds	r3, #1
 800f470:	2207      	movs	r2, #7
 800f472:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f474:	e00f      	b.n	800f496 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f476:	6839      	ldr	r1, [r7, #0]
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f000 fa10 	bl	800f89e <USBD_CtlError>
        err++;
 800f47e:	7afb      	ldrb	r3, [r7, #11]
 800f480:	3301      	adds	r3, #1
 800f482:	72fb      	strb	r3, [r7, #11]
      break;
 800f484:	e007      	b.n	800f496 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f486:	6839      	ldr	r1, [r7, #0]
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f000 fa08 	bl	800f89e <USBD_CtlError>
      err++;
 800f48e:	7afb      	ldrb	r3, [r7, #11]
 800f490:	3301      	adds	r3, #1
 800f492:	72fb      	strb	r3, [r7, #11]
      break;
 800f494:	bf00      	nop
  }

  if (err != 0U)
 800f496:	7afb      	ldrb	r3, [r7, #11]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d11e      	bne.n	800f4da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	88db      	ldrh	r3, [r3, #6]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d016      	beq.n	800f4d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f4a4:	893b      	ldrh	r3, [r7, #8]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d00e      	beq.n	800f4c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	88da      	ldrh	r2, [r3, #6]
 800f4ae:	893b      	ldrh	r3, [r7, #8]
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	bf28      	it	cs
 800f4b4:	4613      	movcs	r3, r2
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f4ba:	893b      	ldrh	r3, [r7, #8]
 800f4bc:	461a      	mov	r2, r3
 800f4be:	68f9      	ldr	r1, [r7, #12]
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 fa5d 	bl	800f980 <USBD_CtlSendData>
 800f4c6:	e009      	b.n	800f4dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f4c8:	6839      	ldr	r1, [r7, #0]
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f000 f9e7 	bl	800f89e <USBD_CtlError>
 800f4d0:	e004      	b.n	800f4dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f000 faae 	bl	800fa34 <USBD_CtlSendStatus>
 800f4d8:	e000      	b.n	800f4dc <USBD_GetDescriptor+0x2cc>
    return;
 800f4da:	bf00      	nop
  }
}
 800f4dc:	3710      	adds	r7, #16
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop

0800f4e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b084      	sub	sp, #16
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	889b      	ldrh	r3, [r3, #4]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d131      	bne.n	800f55a <USBD_SetAddress+0x76>
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	88db      	ldrh	r3, [r3, #6]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d12d      	bne.n	800f55a <USBD_SetAddress+0x76>
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	885b      	ldrh	r3, [r3, #2]
 800f502:	2b7f      	cmp	r3, #127	; 0x7f
 800f504:	d829      	bhi.n	800f55a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	885b      	ldrh	r3, [r3, #2]
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f510:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f518:	b2db      	uxtb	r3, r3
 800f51a:	2b03      	cmp	r3, #3
 800f51c:	d104      	bne.n	800f528 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f51e:	6839      	ldr	r1, [r7, #0]
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f000 f9bc 	bl	800f89e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f526:	e01d      	b.n	800f564 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	7bfa      	ldrb	r2, [r7, #15]
 800f52c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f530:	7bfb      	ldrb	r3, [r7, #15]
 800f532:	4619      	mov	r1, r3
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f000 ff69 	bl	801040c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f000 fa7a 	bl	800fa34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f540:	7bfb      	ldrb	r3, [r7, #15]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d004      	beq.n	800f550 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2202      	movs	r2, #2
 800f54a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f54e:	e009      	b.n	800f564 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2201      	movs	r2, #1
 800f554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f558:	e004      	b.n	800f564 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f55a:	6839      	ldr	r1, [r7, #0]
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f000 f99e 	bl	800f89e <USBD_CtlError>
  }
}
 800f562:	bf00      	nop
 800f564:	bf00      	nop
 800f566:	3710      	adds	r7, #16
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}

0800f56c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b084      	sub	sp, #16
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f576:	2300      	movs	r3, #0
 800f578:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	885b      	ldrh	r3, [r3, #2]
 800f57e:	b2da      	uxtb	r2, r3
 800f580:	4b4e      	ldr	r3, [pc, #312]	; (800f6bc <USBD_SetConfig+0x150>)
 800f582:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f584:	4b4d      	ldr	r3, [pc, #308]	; (800f6bc <USBD_SetConfig+0x150>)
 800f586:	781b      	ldrb	r3, [r3, #0]
 800f588:	2b01      	cmp	r3, #1
 800f58a:	d905      	bls.n	800f598 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f58c:	6839      	ldr	r1, [r7, #0]
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f000 f985 	bl	800f89e <USBD_CtlError>
    return USBD_FAIL;
 800f594:	2303      	movs	r3, #3
 800f596:	e08c      	b.n	800f6b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	2b02      	cmp	r3, #2
 800f5a2:	d002      	beq.n	800f5aa <USBD_SetConfig+0x3e>
 800f5a4:	2b03      	cmp	r3, #3
 800f5a6:	d029      	beq.n	800f5fc <USBD_SetConfig+0x90>
 800f5a8:	e075      	b.n	800f696 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f5aa:	4b44      	ldr	r3, [pc, #272]	; (800f6bc <USBD_SetConfig+0x150>)
 800f5ac:	781b      	ldrb	r3, [r3, #0]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d020      	beq.n	800f5f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f5b2:	4b42      	ldr	r3, [pc, #264]	; (800f6bc <USBD_SetConfig+0x150>)
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f5bc:	4b3f      	ldr	r3, [pc, #252]	; (800f6bc <USBD_SetConfig+0x150>)
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f7fe ffe1 	bl	800e58a <USBD_SetClassConfig>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f5cc:	7bfb      	ldrb	r3, [r7, #15]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d008      	beq.n	800f5e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f5d2:	6839      	ldr	r1, [r7, #0]
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f000 f962 	bl	800f89e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2202      	movs	r2, #2
 800f5de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f5e2:	e065      	b.n	800f6b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f000 fa25 	bl	800fa34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2203      	movs	r2, #3
 800f5ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f5f2:	e05d      	b.n	800f6b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 fa1d 	bl	800fa34 <USBD_CtlSendStatus>
      break;
 800f5fa:	e059      	b.n	800f6b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f5fc:	4b2f      	ldr	r3, [pc, #188]	; (800f6bc <USBD_SetConfig+0x150>)
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d112      	bne.n	800f62a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2202      	movs	r2, #2
 800f608:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f60c:	4b2b      	ldr	r3, [pc, #172]	; (800f6bc <USBD_SetConfig+0x150>)
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	461a      	mov	r2, r3
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f616:	4b29      	ldr	r3, [pc, #164]	; (800f6bc <USBD_SetConfig+0x150>)
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	4619      	mov	r1, r3
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f7fe ffd0 	bl	800e5c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f000 fa06 	bl	800fa34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f628:	e042      	b.n	800f6b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f62a:	4b24      	ldr	r3, [pc, #144]	; (800f6bc <USBD_SetConfig+0x150>)
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	461a      	mov	r2, r3
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	429a      	cmp	r2, r3
 800f636:	d02a      	beq.n	800f68e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	4619      	mov	r1, r3
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f7fe ffbe 	bl	800e5c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f646:	4b1d      	ldr	r3, [pc, #116]	; (800f6bc <USBD_SetConfig+0x150>)
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	461a      	mov	r2, r3
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f650:	4b1a      	ldr	r3, [pc, #104]	; (800f6bc <USBD_SetConfig+0x150>)
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	4619      	mov	r1, r3
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f7fe ff97 	bl	800e58a <USBD_SetClassConfig>
 800f65c:	4603      	mov	r3, r0
 800f65e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f660:	7bfb      	ldrb	r3, [r7, #15]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d00f      	beq.n	800f686 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f666:	6839      	ldr	r1, [r7, #0]
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f000 f918 	bl	800f89e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	b2db      	uxtb	r3, r3
 800f674:	4619      	mov	r1, r3
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f7fe ffa3 	bl	800e5c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2202      	movs	r2, #2
 800f680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f684:	e014      	b.n	800f6b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f000 f9d4 	bl	800fa34 <USBD_CtlSendStatus>
      break;
 800f68c:	e010      	b.n	800f6b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f000 f9d0 	bl	800fa34 <USBD_CtlSendStatus>
      break;
 800f694:	e00c      	b.n	800f6b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f696:	6839      	ldr	r1, [r7, #0]
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f000 f900 	bl	800f89e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f69e:	4b07      	ldr	r3, [pc, #28]	; (800f6bc <USBD_SetConfig+0x150>)
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f7fe ff8c 	bl	800e5c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f6aa:	2303      	movs	r3, #3
 800f6ac:	73fb      	strb	r3, [r7, #15]
      break;
 800f6ae:	bf00      	nop
  }

  return ret;
 800f6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3710      	adds	r7, #16
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	20000d50 	.word	0x20000d50

0800f6c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	88db      	ldrh	r3, [r3, #6]
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d004      	beq.n	800f6dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f6d2:	6839      	ldr	r1, [r7, #0]
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f000 f8e2 	bl	800f89e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f6da:	e023      	b.n	800f724 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6e2:	b2db      	uxtb	r3, r3
 800f6e4:	2b02      	cmp	r3, #2
 800f6e6:	dc02      	bgt.n	800f6ee <USBD_GetConfig+0x2e>
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	dc03      	bgt.n	800f6f4 <USBD_GetConfig+0x34>
 800f6ec:	e015      	b.n	800f71a <USBD_GetConfig+0x5a>
 800f6ee:	2b03      	cmp	r3, #3
 800f6f0:	d00b      	beq.n	800f70a <USBD_GetConfig+0x4a>
 800f6f2:	e012      	b.n	800f71a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	3308      	adds	r3, #8
 800f6fe:	2201      	movs	r2, #1
 800f700:	4619      	mov	r1, r3
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 f93c 	bl	800f980 <USBD_CtlSendData>
        break;
 800f708:	e00c      	b.n	800f724 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	3304      	adds	r3, #4
 800f70e:	2201      	movs	r2, #1
 800f710:	4619      	mov	r1, r3
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 f934 	bl	800f980 <USBD_CtlSendData>
        break;
 800f718:	e004      	b.n	800f724 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f71a:	6839      	ldr	r1, [r7, #0]
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f000 f8be 	bl	800f89e <USBD_CtlError>
        break;
 800f722:	bf00      	nop
}
 800f724:	bf00      	nop
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b082      	sub	sp, #8
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	3b01      	subs	r3, #1
 800f740:	2b02      	cmp	r3, #2
 800f742:	d81e      	bhi.n	800f782 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	88db      	ldrh	r3, [r3, #6]
 800f748:	2b02      	cmp	r3, #2
 800f74a:	d004      	beq.n	800f756 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f74c:	6839      	ldr	r1, [r7, #0]
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 f8a5 	bl	800f89e <USBD_CtlError>
        break;
 800f754:	e01a      	b.n	800f78c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2201      	movs	r2, #1
 800f75a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f762:	2b00      	cmp	r3, #0
 800f764:	d005      	beq.n	800f772 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	f043 0202 	orr.w	r2, r3, #2
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	330c      	adds	r3, #12
 800f776:	2202      	movs	r2, #2
 800f778:	4619      	mov	r1, r3
 800f77a:	6878      	ldr	r0, [r7, #4]
 800f77c:	f000 f900 	bl	800f980 <USBD_CtlSendData>
      break;
 800f780:	e004      	b.n	800f78c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f782:	6839      	ldr	r1, [r7, #0]
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f000 f88a 	bl	800f89e <USBD_CtlError>
      break;
 800f78a:	bf00      	nop
  }
}
 800f78c:	bf00      	nop
 800f78e:	3708      	adds	r7, #8
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	885b      	ldrh	r3, [r3, #2]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d107      	bne.n	800f7b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f000 f940 	bl	800fa34 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f7b4:	e013      	b.n	800f7de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	885b      	ldrh	r3, [r3, #2]
 800f7ba:	2b02      	cmp	r3, #2
 800f7bc:	d10b      	bne.n	800f7d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	889b      	ldrh	r3, [r3, #4]
 800f7c2:	0a1b      	lsrs	r3, r3, #8
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	b2da      	uxtb	r2, r3
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f000 f930 	bl	800fa34 <USBD_CtlSendStatus>
}
 800f7d4:	e003      	b.n	800f7de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f7d6:	6839      	ldr	r1, [r7, #0]
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f000 f860 	bl	800f89e <USBD_CtlError>
}
 800f7de:	bf00      	nop
 800f7e0:	3708      	adds	r7, #8
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b082      	sub	sp, #8
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
 800f7ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	3b01      	subs	r3, #1
 800f7fa:	2b02      	cmp	r3, #2
 800f7fc:	d80b      	bhi.n	800f816 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	885b      	ldrh	r3, [r3, #2]
 800f802:	2b01      	cmp	r3, #1
 800f804:	d10c      	bne.n	800f820 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2200      	movs	r2, #0
 800f80a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f000 f910 	bl	800fa34 <USBD_CtlSendStatus>
      }
      break;
 800f814:	e004      	b.n	800f820 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f816:	6839      	ldr	r1, [r7, #0]
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f000 f840 	bl	800f89e <USBD_CtlError>
      break;
 800f81e:	e000      	b.n	800f822 <USBD_ClrFeature+0x3c>
      break;
 800f820:	bf00      	nop
  }
}
 800f822:	bf00      	nop
 800f824:	3708      	adds	r7, #8
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}

0800f82a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f82a:	b580      	push	{r7, lr}
 800f82c:	b084      	sub	sp, #16
 800f82e:	af00      	add	r7, sp, #0
 800f830:	6078      	str	r0, [r7, #4]
 800f832:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	781a      	ldrb	r2, [r3, #0]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	3301      	adds	r3, #1
 800f844:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	781a      	ldrb	r2, [r3, #0]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	3301      	adds	r3, #1
 800f852:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f854:	68f8      	ldr	r0, [r7, #12]
 800f856:	f7ff fa41 	bl	800ecdc <SWAPBYTE>
 800f85a:	4603      	mov	r3, r0
 800f85c:	461a      	mov	r2, r3
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	3301      	adds	r3, #1
 800f866:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	3301      	adds	r3, #1
 800f86c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f86e:	68f8      	ldr	r0, [r7, #12]
 800f870:	f7ff fa34 	bl	800ecdc <SWAPBYTE>
 800f874:	4603      	mov	r3, r0
 800f876:	461a      	mov	r2, r3
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	3301      	adds	r3, #1
 800f880:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	3301      	adds	r3, #1
 800f886:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f888:	68f8      	ldr	r0, [r7, #12]
 800f88a:	f7ff fa27 	bl	800ecdc <SWAPBYTE>
 800f88e:	4603      	mov	r3, r0
 800f890:	461a      	mov	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	80da      	strh	r2, [r3, #6]
}
 800f896:	bf00      	nop
 800f898:	3710      	adds	r7, #16
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}

0800f89e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f89e:	b580      	push	{r7, lr}
 800f8a0:	b082      	sub	sp, #8
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
 800f8a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f8a8:	2180      	movs	r1, #128	; 0x80
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f000 fd44 	bl	8010338 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f8b0:	2100      	movs	r1, #0
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f000 fd40 	bl	8010338 <USBD_LL_StallEP>
}
 800f8b8:	bf00      	nop
 800f8ba:	3708      	adds	r7, #8
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b086      	sub	sp, #24
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	60b9      	str	r1, [r7, #8]
 800f8ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d036      	beq.n	800f944 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f8da:	6938      	ldr	r0, [r7, #16]
 800f8dc:	f000 f836 	bl	800f94c <USBD_GetLen>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	005b      	lsls	r3, r3, #1
 800f8e8:	b29a      	uxth	r2, r3
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f8ee:	7dfb      	ldrb	r3, [r7, #23]
 800f8f0:	68ba      	ldr	r2, [r7, #8]
 800f8f2:	4413      	add	r3, r2
 800f8f4:	687a      	ldr	r2, [r7, #4]
 800f8f6:	7812      	ldrb	r2, [r2, #0]
 800f8f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800f8fa:	7dfb      	ldrb	r3, [r7, #23]
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f900:	7dfb      	ldrb	r3, [r7, #23]
 800f902:	68ba      	ldr	r2, [r7, #8]
 800f904:	4413      	add	r3, r2
 800f906:	2203      	movs	r2, #3
 800f908:	701a      	strb	r2, [r3, #0]
  idx++;
 800f90a:	7dfb      	ldrb	r3, [r7, #23]
 800f90c:	3301      	adds	r3, #1
 800f90e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f910:	e013      	b.n	800f93a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f912:	7dfb      	ldrb	r3, [r7, #23]
 800f914:	68ba      	ldr	r2, [r7, #8]
 800f916:	4413      	add	r3, r2
 800f918:	693a      	ldr	r2, [r7, #16]
 800f91a:	7812      	ldrb	r2, [r2, #0]
 800f91c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	3301      	adds	r3, #1
 800f922:	613b      	str	r3, [r7, #16]
    idx++;
 800f924:	7dfb      	ldrb	r3, [r7, #23]
 800f926:	3301      	adds	r3, #1
 800f928:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f92a:	7dfb      	ldrb	r3, [r7, #23]
 800f92c:	68ba      	ldr	r2, [r7, #8]
 800f92e:	4413      	add	r3, r2
 800f930:	2200      	movs	r2, #0
 800f932:	701a      	strb	r2, [r3, #0]
    idx++;
 800f934:	7dfb      	ldrb	r3, [r7, #23]
 800f936:	3301      	adds	r3, #1
 800f938:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d1e7      	bne.n	800f912 <USBD_GetString+0x52>
 800f942:	e000      	b.n	800f946 <USBD_GetString+0x86>
    return;
 800f944:	bf00      	nop
  }
}
 800f946:	3718      	adds	r7, #24
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b085      	sub	sp, #20
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f954:	2300      	movs	r3, #0
 800f956:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f95c:	e005      	b.n	800f96a <USBD_GetLen+0x1e>
  {
    len++;
 800f95e:	7bfb      	ldrb	r3, [r7, #15]
 800f960:	3301      	adds	r3, #1
 800f962:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	3301      	adds	r3, #1
 800f968:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	781b      	ldrb	r3, [r3, #0]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d1f5      	bne.n	800f95e <USBD_GetLen+0x12>
  }

  return len;
 800f972:	7bfb      	ldrb	r3, [r7, #15]
}
 800f974:	4618      	mov	r0, r3
 800f976:	3714      	adds	r7, #20
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr

0800f980 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	60f8      	str	r0, [r7, #12]
 800f988:	60b9      	str	r1, [r7, #8]
 800f98a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2202      	movs	r2, #2
 800f990:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	687a      	ldr	r2, [r7, #4]
 800f998:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	68ba      	ldr	r2, [r7, #8]
 800f9a4:	2100      	movs	r1, #0
 800f9a6:	68f8      	ldr	r0, [r7, #12]
 800f9a8:	f000 fd4f 	bl	801044a <USBD_LL_Transmit>

  return USBD_OK;
 800f9ac:	2300      	movs	r3, #0
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3710      	adds	r7, #16
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}

0800f9b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b084      	sub	sp, #16
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	60f8      	str	r0, [r7, #12]
 800f9be:	60b9      	str	r1, [r7, #8]
 800f9c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	68ba      	ldr	r2, [r7, #8]
 800f9c6:	2100      	movs	r1, #0
 800f9c8:	68f8      	ldr	r0, [r7, #12]
 800f9ca:	f000 fd3e 	bl	801044a <USBD_LL_Transmit>

  return USBD_OK;
 800f9ce:	2300      	movs	r3, #0
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3710      	adds	r7, #16
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b084      	sub	sp, #16
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	60b9      	str	r1, [r7, #8]
 800f9e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2203      	movs	r2, #3
 800f9e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	687a      	ldr	r2, [r7, #4]
 800f9f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	687a      	ldr	r2, [r7, #4]
 800f9f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	68ba      	ldr	r2, [r7, #8]
 800fa00:	2100      	movs	r1, #0
 800fa02:	68f8      	ldr	r0, [r7, #12]
 800fa04:	f000 fd42 	bl	801048c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fa08:	2300      	movs	r3, #0
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3710      	adds	r7, #16
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}

0800fa12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fa12:	b580      	push	{r7, lr}
 800fa14:	b084      	sub	sp, #16
 800fa16:	af00      	add	r7, sp, #0
 800fa18:	60f8      	str	r0, [r7, #12]
 800fa1a:	60b9      	str	r1, [r7, #8]
 800fa1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	68ba      	ldr	r2, [r7, #8]
 800fa22:	2100      	movs	r1, #0
 800fa24:	68f8      	ldr	r0, [r7, #12]
 800fa26:	f000 fd31 	bl	801048c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fa2a:	2300      	movs	r3, #0
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3710      	adds	r7, #16
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2204      	movs	r2, #4
 800fa40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fa44:	2300      	movs	r3, #0
 800fa46:	2200      	movs	r2, #0
 800fa48:	2100      	movs	r1, #0
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 fcfd 	bl	801044a <USBD_LL_Transmit>

  return USBD_OK;
 800fa50:	2300      	movs	r3, #0
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3708      	adds	r7, #8
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}

0800fa5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fa5a:	b580      	push	{r7, lr}
 800fa5c:	b082      	sub	sp, #8
 800fa5e:	af00      	add	r7, sp, #0
 800fa60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2205      	movs	r2, #5
 800fa66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	2100      	movs	r1, #0
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f000 fd0b 	bl	801048c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fa76:	2300      	movs	r3, #0
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3708      	adds	r7, #8
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fa84:	2200      	movs	r2, #0
 800fa86:	4912      	ldr	r1, [pc, #72]	; (800fad0 <MX_USB_DEVICE_Init+0x50>)
 800fa88:	4812      	ldr	r0, [pc, #72]	; (800fad4 <MX_USB_DEVICE_Init+0x54>)
 800fa8a:	f7fe fd01 	bl	800e490 <USBD_Init>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d001      	beq.n	800fa98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fa94:	f7f1 fbb4 	bl	8001200 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fa98:	490f      	ldr	r1, [pc, #60]	; (800fad8 <MX_USB_DEVICE_Init+0x58>)
 800fa9a:	480e      	ldr	r0, [pc, #56]	; (800fad4 <MX_USB_DEVICE_Init+0x54>)
 800fa9c:	f7fe fd28 	bl	800e4f0 <USBD_RegisterClass>
 800faa0:	4603      	mov	r3, r0
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d001      	beq.n	800faaa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800faa6:	f7f1 fbab 	bl	8001200 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800faaa:	490c      	ldr	r1, [pc, #48]	; (800fadc <MX_USB_DEVICE_Init+0x5c>)
 800faac:	4809      	ldr	r0, [pc, #36]	; (800fad4 <MX_USB_DEVICE_Init+0x54>)
 800faae:	f7fe fc1f 	bl	800e2f0 <USBD_CDC_RegisterInterface>
 800fab2:	4603      	mov	r3, r0
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d001      	beq.n	800fabc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fab8:	f7f1 fba2 	bl	8001200 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fabc:	4805      	ldr	r0, [pc, #20]	; (800fad4 <MX_USB_DEVICE_Init+0x54>)
 800fabe:	f7fe fd4d 	bl	800e55c <USBD_Start>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d001      	beq.n	800facc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fac8:	f7f1 fb9a 	bl	8001200 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800facc:	bf00      	nop
 800face:	bd80      	pop	{r7, pc}
 800fad0:	200000c4 	.word	0x200000c4
 800fad4:	20000d54 	.word	0x20000d54
 800fad8:	20000028 	.word	0x20000028
 800fadc:	200000b0 	.word	0x200000b0

0800fae0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fae4:	2200      	movs	r2, #0
 800fae6:	4905      	ldr	r1, [pc, #20]	; (800fafc <CDC_Init_FS+0x1c>)
 800fae8:	4805      	ldr	r0, [pc, #20]	; (800fb00 <CDC_Init_FS+0x20>)
 800faea:	f7fe fc1b 	bl	800e324 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800faee:	4905      	ldr	r1, [pc, #20]	; (800fb04 <CDC_Init_FS+0x24>)
 800faf0:	4803      	ldr	r0, [pc, #12]	; (800fb00 <CDC_Init_FS+0x20>)
 800faf2:	f7fe fc39 	bl	800e368 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800faf6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	20001830 	.word	0x20001830
 800fb00:	20000d54 	.word	0x20000d54
 800fb04:	20001030 	.word	0x20001030

0800fb08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fb0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr

0800fb18 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b083      	sub	sp, #12
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	4603      	mov	r3, r0
 800fb20:	6039      	str	r1, [r7, #0]
 800fb22:	71fb      	strb	r3, [r7, #7]
 800fb24:	4613      	mov	r3, r2
 800fb26:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fb28:	79fb      	ldrb	r3, [r7, #7]
 800fb2a:	2b23      	cmp	r3, #35	; 0x23
 800fb2c:	f200 80a3 	bhi.w	800fc76 <CDC_Control_FS+0x15e>
 800fb30:	a201      	add	r2, pc, #4	; (adr r2, 800fb38 <CDC_Control_FS+0x20>)
 800fb32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb36:	bf00      	nop
 800fb38:	0800fc77 	.word	0x0800fc77
 800fb3c:	0800fc77 	.word	0x0800fc77
 800fb40:	0800fc77 	.word	0x0800fc77
 800fb44:	0800fc77 	.word	0x0800fc77
 800fb48:	0800fc77 	.word	0x0800fc77
 800fb4c:	0800fc77 	.word	0x0800fc77
 800fb50:	0800fc77 	.word	0x0800fc77
 800fb54:	0800fc77 	.word	0x0800fc77
 800fb58:	0800fc77 	.word	0x0800fc77
 800fb5c:	0800fc77 	.word	0x0800fc77
 800fb60:	0800fc77 	.word	0x0800fc77
 800fb64:	0800fc77 	.word	0x0800fc77
 800fb68:	0800fc77 	.word	0x0800fc77
 800fb6c:	0800fc77 	.word	0x0800fc77
 800fb70:	0800fc77 	.word	0x0800fc77
 800fb74:	0800fc77 	.word	0x0800fc77
 800fb78:	0800fc77 	.word	0x0800fc77
 800fb7c:	0800fc77 	.word	0x0800fc77
 800fb80:	0800fc77 	.word	0x0800fc77
 800fb84:	0800fc77 	.word	0x0800fc77
 800fb88:	0800fc77 	.word	0x0800fc77
 800fb8c:	0800fc77 	.word	0x0800fc77
 800fb90:	0800fc77 	.word	0x0800fc77
 800fb94:	0800fc77 	.word	0x0800fc77
 800fb98:	0800fc77 	.word	0x0800fc77
 800fb9c:	0800fc77 	.word	0x0800fc77
 800fba0:	0800fc77 	.word	0x0800fc77
 800fba4:	0800fc77 	.word	0x0800fc77
 800fba8:	0800fc77 	.word	0x0800fc77
 800fbac:	0800fc77 	.word	0x0800fc77
 800fbb0:	0800fc77 	.word	0x0800fc77
 800fbb4:	0800fc77 	.word	0x0800fc77
 800fbb8:	0800fbc9 	.word	0x0800fbc9
 800fbbc:	0800fc23 	.word	0x0800fc23
 800fbc0:	0800fc77 	.word	0x0800fc77
 800fbc4:	0800fc77 	.word	0x0800fc77
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	Linecoding.bitrate = (uint32_t)(pbuf[0]);
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	461a      	mov	r2, r3
 800fbce:	4b2e      	ldr	r3, [pc, #184]	; (800fc88 <CDC_Control_FS+0x170>)
 800fbd0:	601a      	str	r2, [r3, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 800fbd2:	4b2d      	ldr	r3, [pc, #180]	; (800fc88 <CDC_Control_FS+0x170>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	683a      	ldr	r2, [r7, #0]
 800fbd8:	3201      	adds	r2, #1
 800fbda:	7812      	ldrb	r2, [r2, #0]
 800fbdc:	0212      	lsls	r2, r2, #8
 800fbde:	4313      	orrs	r3, r2
 800fbe0:	4a29      	ldr	r2, [pc, #164]	; (800fc88 <CDC_Control_FS+0x170>)
 800fbe2:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 800fbe4:	4b28      	ldr	r3, [pc, #160]	; (800fc88 <CDC_Control_FS+0x170>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	683a      	ldr	r2, [r7, #0]
 800fbea:	3202      	adds	r2, #2
 800fbec:	7812      	ldrb	r2, [r2, #0]
 800fbee:	0412      	lsls	r2, r2, #16
 800fbf0:	4313      	orrs	r3, r2
 800fbf2:	4a25      	ldr	r2, [pc, #148]	; (800fc88 <CDC_Control_FS+0x170>)
 800fbf4:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 800fbf6:	4b24      	ldr	r3, [pc, #144]	; (800fc88 <CDC_Control_FS+0x170>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	683a      	ldr	r2, [r7, #0]
 800fbfc:	3203      	adds	r2, #3
 800fbfe:	7812      	ldrb	r2, [r2, #0]
 800fc00:	0612      	lsls	r2, r2, #24
 800fc02:	4313      	orrs	r3, r2
 800fc04:	4a20      	ldr	r2, [pc, #128]	; (800fc88 <CDC_Control_FS+0x170>)
 800fc06:	6013      	str	r3, [r2, #0]
    	Linecoding.format = pbuf[4];
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	791a      	ldrb	r2, [r3, #4]
 800fc0c:	4b1e      	ldr	r3, [pc, #120]	; (800fc88 <CDC_Control_FS+0x170>)
 800fc0e:	711a      	strb	r2, [r3, #4]
    	Linecoding.paritytype = pbuf[5];
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	795a      	ldrb	r2, [r3, #5]
 800fc14:	4b1c      	ldr	r3, [pc, #112]	; (800fc88 <CDC_Control_FS+0x170>)
 800fc16:	715a      	strb	r2, [r3, #5]
    	Linecoding.datatype = pbuf[6];
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	799a      	ldrb	r2, [r3, #6]
 800fc1c:	4b1a      	ldr	r3, [pc, #104]	; (800fc88 <CDC_Control_FS+0x170>)
 800fc1e:	719a      	strb	r2, [r3, #6]
    break;
 800fc20:	e02a      	b.n	800fc78 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(Linecoding.bitrate);
 800fc22:	4b19      	ldr	r3, [pc, #100]	; (800fc88 <CDC_Control_FS+0x170>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	b2da      	uxtb	r2, r3
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(Linecoding.bitrate>>8);
 800fc2c:	4b16      	ldr	r3, [pc, #88]	; (800fc88 <CDC_Control_FS+0x170>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	0a1a      	lsrs	r2, r3, #8
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	3301      	adds	r3, #1
 800fc36:	b2d2      	uxtb	r2, r2
 800fc38:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(Linecoding.bitrate>>16);
 800fc3a:	4b13      	ldr	r3, [pc, #76]	; (800fc88 <CDC_Control_FS+0x170>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	0c1a      	lsrs	r2, r3, #16
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	3302      	adds	r3, #2
 800fc44:	b2d2      	uxtb	r2, r2
 800fc46:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(Linecoding.bitrate>>24);
 800fc48:	4b0f      	ldr	r3, [pc, #60]	; (800fc88 <CDC_Control_FS+0x170>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	0e1a      	lsrs	r2, r3, #24
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	3303      	adds	r3, #3
 800fc52:	b2d2      	uxtb	r2, r2
 800fc54:	701a      	strb	r2, [r3, #0]
      pbuf[4] = Linecoding.format;
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	3304      	adds	r3, #4
 800fc5a:	4a0b      	ldr	r2, [pc, #44]	; (800fc88 <CDC_Control_FS+0x170>)
 800fc5c:	7912      	ldrb	r2, [r2, #4]
 800fc5e:	701a      	strb	r2, [r3, #0]
      pbuf[5] = Linecoding.paritytype;
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	3305      	adds	r3, #5
 800fc64:	4a08      	ldr	r2, [pc, #32]	; (800fc88 <CDC_Control_FS+0x170>)
 800fc66:	7952      	ldrb	r2, [r2, #5]
 800fc68:	701a      	strb	r2, [r3, #0]
      pbuf[6] = Linecoding.datatype;
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	3306      	adds	r3, #6
 800fc6e:	4a06      	ldr	r2, [pc, #24]	; (800fc88 <CDC_Control_FS+0x170>)
 800fc70:	7992      	ldrb	r2, [r2, #6]
 800fc72:	701a      	strb	r2, [r3, #0]
    break;
 800fc74:	e000      	b.n	800fc78 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fc76:	bf00      	nop
  }

  return (USBD_OK);
 800fc78:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	370c      	adds	r7, #12
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc84:	4770      	bx	lr
 800fc86:	bf00      	nop
 800fc88:	200000a8 	.word	0x200000a8

0800fc8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b084      	sub	sp, #16
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fc96:	6879      	ldr	r1, [r7, #4]
 800fc98:	480e      	ldr	r0, [pc, #56]	; (800fcd4 <CDC_Receive_FS+0x48>)
 800fc9a:	f7fe fb65 	bl	800e368 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fc9e:	480d      	ldr	r0, [pc, #52]	; (800fcd4 <CDC_Receive_FS+0x48>)
 800fca0:	f7fe fbc0 	bl	800e424 <USBD_CDC_ReceivePacket>

  for(int i=0; i<*Len; i++)
 800fca4:	2300      	movs	r3, #0
 800fca6:	60fb      	str	r3, [r7, #12]
 800fca8:	e009      	b.n	800fcbe <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	687a      	ldr	r2, [r7, #4]
 800fcae:	4413      	add	r3, r2
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7f1 fe92 	bl	80019dc <cdcDataIn>
  for(int i=0; i<*Len; i++)
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	3301      	adds	r3, #1
 800fcbc:	60fb      	str	r3, [r7, #12]
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d8f0      	bhi.n	800fcaa <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 800fcc8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3710      	adds	r7, #16
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
 800fcd2:	bf00      	nop
 800fcd4:	20000d54 	.word	0x20000d54

0800fcd8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	460b      	mov	r3, r1
 800fce2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fce4:	2300      	movs	r3, #0
 800fce6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fce8:	4b0d      	ldr	r3, [pc, #52]	; (800fd20 <CDC_Transmit_FS+0x48>)
 800fcea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fcee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d001      	beq.n	800fcfe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	e00b      	b.n	800fd16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fcfe:	887b      	ldrh	r3, [r7, #2]
 800fd00:	461a      	mov	r2, r3
 800fd02:	6879      	ldr	r1, [r7, #4]
 800fd04:	4806      	ldr	r0, [pc, #24]	; (800fd20 <CDC_Transmit_FS+0x48>)
 800fd06:	f7fe fb0d 	bl	800e324 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fd0a:	4805      	ldr	r0, [pc, #20]	; (800fd20 <CDC_Transmit_FS+0x48>)
 800fd0c:	f7fe fb4a 	bl	800e3a4 <USBD_CDC_TransmitPacket>
 800fd10:	4603      	mov	r3, r0
 800fd12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fd14:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3710      	adds	r7, #16
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}
 800fd1e:	bf00      	nop
 800fd20:	20000d54 	.word	0x20000d54

0800fd24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b087      	sub	sp, #28
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	4613      	mov	r3, r2
 800fd30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fd32:	2300      	movs	r3, #0
 800fd34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fd36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	371c      	adds	r7, #28
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd44:	4770      	bx	lr
	...

0800fd48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b083      	sub	sp, #12
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	4603      	mov	r3, r0
 800fd50:	6039      	str	r1, [r7, #0]
 800fd52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	2212      	movs	r2, #18
 800fd58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fd5a:	4b03      	ldr	r3, [pc, #12]	; (800fd68 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	370c      	adds	r7, #12
 800fd60:	46bd      	mov	sp, r7
 800fd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd66:	4770      	bx	lr
 800fd68:	200000e0 	.word	0x200000e0

0800fd6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	4603      	mov	r3, r0
 800fd74:	6039      	str	r1, [r7, #0]
 800fd76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	2204      	movs	r2, #4
 800fd7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fd7e:	4b03      	ldr	r3, [pc, #12]	; (800fd8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	370c      	adds	r7, #12
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	4770      	bx	lr
 800fd8c:	200000f4 	.word	0x200000f4

0800fd90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b082      	sub	sp, #8
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	4603      	mov	r3, r0
 800fd98:	6039      	str	r1, [r7, #0]
 800fd9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fd9c:	79fb      	ldrb	r3, [r7, #7]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d105      	bne.n	800fdae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fda2:	683a      	ldr	r2, [r7, #0]
 800fda4:	4907      	ldr	r1, [pc, #28]	; (800fdc4 <USBD_FS_ProductStrDescriptor+0x34>)
 800fda6:	4808      	ldr	r0, [pc, #32]	; (800fdc8 <USBD_FS_ProductStrDescriptor+0x38>)
 800fda8:	f7ff fd8a 	bl	800f8c0 <USBD_GetString>
 800fdac:	e004      	b.n	800fdb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fdae:	683a      	ldr	r2, [r7, #0]
 800fdb0:	4904      	ldr	r1, [pc, #16]	; (800fdc4 <USBD_FS_ProductStrDescriptor+0x34>)
 800fdb2:	4805      	ldr	r0, [pc, #20]	; (800fdc8 <USBD_FS_ProductStrDescriptor+0x38>)
 800fdb4:	f7ff fd84 	bl	800f8c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fdb8:	4b02      	ldr	r3, [pc, #8]	; (800fdc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3708      	adds	r7, #8
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
 800fdc2:	bf00      	nop
 800fdc4:	20002030 	.word	0x20002030
 800fdc8:	08013ce0 	.word	0x08013ce0

0800fdcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	6039      	str	r1, [r7, #0]
 800fdd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fdd8:	683a      	ldr	r2, [r7, #0]
 800fdda:	4904      	ldr	r1, [pc, #16]	; (800fdec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fddc:	4804      	ldr	r0, [pc, #16]	; (800fdf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fdde:	f7ff fd6f 	bl	800f8c0 <USBD_GetString>
  return USBD_StrDesc;
 800fde2:	4b02      	ldr	r3, [pc, #8]	; (800fdec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fde4:	4618      	mov	r0, r3
 800fde6:	3708      	adds	r7, #8
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}
 800fdec:	20002030 	.word	0x20002030
 800fdf0:	08013cf8 	.word	0x08013cf8

0800fdf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	6039      	str	r1, [r7, #0]
 800fdfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	221a      	movs	r2, #26
 800fe04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fe06:	f000 f843 	bl	800fe90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fe0a:	4b02      	ldr	r3, [pc, #8]	; (800fe14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3708      	adds	r7, #8
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	200000f8 	.word	0x200000f8

0800fe18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	4603      	mov	r3, r0
 800fe20:	6039      	str	r1, [r7, #0]
 800fe22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fe24:	79fb      	ldrb	r3, [r7, #7]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d105      	bne.n	800fe36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fe2a:	683a      	ldr	r2, [r7, #0]
 800fe2c:	4907      	ldr	r1, [pc, #28]	; (800fe4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800fe2e:	4808      	ldr	r0, [pc, #32]	; (800fe50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fe30:	f7ff fd46 	bl	800f8c0 <USBD_GetString>
 800fe34:	e004      	b.n	800fe40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fe36:	683a      	ldr	r2, [r7, #0]
 800fe38:	4904      	ldr	r1, [pc, #16]	; (800fe4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800fe3a:	4805      	ldr	r0, [pc, #20]	; (800fe50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fe3c:	f7ff fd40 	bl	800f8c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe40:	4b02      	ldr	r3, [pc, #8]	; (800fe4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3708      	adds	r7, #8
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}
 800fe4a:	bf00      	nop
 800fe4c:	20002030 	.word	0x20002030
 800fe50:	08013d0c 	.word	0x08013d0c

0800fe54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b082      	sub	sp, #8
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	6039      	str	r1, [r7, #0]
 800fe5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fe60:	79fb      	ldrb	r3, [r7, #7]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d105      	bne.n	800fe72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fe66:	683a      	ldr	r2, [r7, #0]
 800fe68:	4907      	ldr	r1, [pc, #28]	; (800fe88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fe6a:	4808      	ldr	r0, [pc, #32]	; (800fe8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fe6c:	f7ff fd28 	bl	800f8c0 <USBD_GetString>
 800fe70:	e004      	b.n	800fe7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fe72:	683a      	ldr	r2, [r7, #0]
 800fe74:	4904      	ldr	r1, [pc, #16]	; (800fe88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fe76:	4805      	ldr	r0, [pc, #20]	; (800fe8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fe78:	f7ff fd22 	bl	800f8c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe7c:	4b02      	ldr	r3, [pc, #8]	; (800fe88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3708      	adds	r7, #8
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	20002030 	.word	0x20002030
 800fe8c:	08013d18 	.word	0x08013d18

0800fe90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fe96:	4b0f      	ldr	r3, [pc, #60]	; (800fed4 <Get_SerialNum+0x44>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fe9c:	4b0e      	ldr	r3, [pc, #56]	; (800fed8 <Get_SerialNum+0x48>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fea2:	4b0e      	ldr	r3, [pc, #56]	; (800fedc <Get_SerialNum+0x4c>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fea8:	68fa      	ldr	r2, [r7, #12]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	4413      	add	r3, r2
 800feae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d009      	beq.n	800feca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800feb6:	2208      	movs	r2, #8
 800feb8:	4909      	ldr	r1, [pc, #36]	; (800fee0 <Get_SerialNum+0x50>)
 800feba:	68f8      	ldr	r0, [r7, #12]
 800febc:	f000 f814 	bl	800fee8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fec0:	2204      	movs	r2, #4
 800fec2:	4908      	ldr	r1, [pc, #32]	; (800fee4 <Get_SerialNum+0x54>)
 800fec4:	68b8      	ldr	r0, [r7, #8]
 800fec6:	f000 f80f 	bl	800fee8 <IntToUnicode>
  }
}
 800feca:	bf00      	nop
 800fecc:	3710      	adds	r7, #16
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	1fff7a10 	.word	0x1fff7a10
 800fed8:	1fff7a14 	.word	0x1fff7a14
 800fedc:	1fff7a18 	.word	0x1fff7a18
 800fee0:	200000fa 	.word	0x200000fa
 800fee4:	2000010a 	.word	0x2000010a

0800fee8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fee8:	b480      	push	{r7}
 800feea:	b087      	sub	sp, #28
 800feec:	af00      	add	r7, sp, #0
 800feee:	60f8      	str	r0, [r7, #12]
 800fef0:	60b9      	str	r1, [r7, #8]
 800fef2:	4613      	mov	r3, r2
 800fef4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fef6:	2300      	movs	r3, #0
 800fef8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fefa:	2300      	movs	r3, #0
 800fefc:	75fb      	strb	r3, [r7, #23]
 800fefe:	e027      	b.n	800ff50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	0f1b      	lsrs	r3, r3, #28
 800ff04:	2b09      	cmp	r3, #9
 800ff06:	d80b      	bhi.n	800ff20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	0f1b      	lsrs	r3, r3, #28
 800ff0c:	b2da      	uxtb	r2, r3
 800ff0e:	7dfb      	ldrb	r3, [r7, #23]
 800ff10:	005b      	lsls	r3, r3, #1
 800ff12:	4619      	mov	r1, r3
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	440b      	add	r3, r1
 800ff18:	3230      	adds	r2, #48	; 0x30
 800ff1a:	b2d2      	uxtb	r2, r2
 800ff1c:	701a      	strb	r2, [r3, #0]
 800ff1e:	e00a      	b.n	800ff36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	0f1b      	lsrs	r3, r3, #28
 800ff24:	b2da      	uxtb	r2, r3
 800ff26:	7dfb      	ldrb	r3, [r7, #23]
 800ff28:	005b      	lsls	r3, r3, #1
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	440b      	add	r3, r1
 800ff30:	3237      	adds	r2, #55	; 0x37
 800ff32:	b2d2      	uxtb	r2, r2
 800ff34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	011b      	lsls	r3, r3, #4
 800ff3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ff3c:	7dfb      	ldrb	r3, [r7, #23]
 800ff3e:	005b      	lsls	r3, r3, #1
 800ff40:	3301      	adds	r3, #1
 800ff42:	68ba      	ldr	r2, [r7, #8]
 800ff44:	4413      	add	r3, r2
 800ff46:	2200      	movs	r2, #0
 800ff48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ff4a:	7dfb      	ldrb	r3, [r7, #23]
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	75fb      	strb	r3, [r7, #23]
 800ff50:	7dfa      	ldrb	r2, [r7, #23]
 800ff52:	79fb      	ldrb	r3, [r7, #7]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d3d3      	bcc.n	800ff00 <IntToUnicode+0x18>
  }
}
 800ff58:	bf00      	nop
 800ff5a:	bf00      	nop
 800ff5c:	371c      	adds	r7, #28
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff64:	4770      	bx	lr
	...

0800ff68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b08a      	sub	sp, #40	; 0x28
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ff70:	f107 0314 	add.w	r3, r7, #20
 800ff74:	2200      	movs	r2, #0
 800ff76:	601a      	str	r2, [r3, #0]
 800ff78:	605a      	str	r2, [r3, #4]
 800ff7a:	609a      	str	r2, [r3, #8]
 800ff7c:	60da      	str	r2, [r3, #12]
 800ff7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ff88:	d13a      	bne.n	8010000 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	613b      	str	r3, [r7, #16]
 800ff8e:	4b1e      	ldr	r3, [pc, #120]	; (8010008 <HAL_PCD_MspInit+0xa0>)
 800ff90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff92:	4a1d      	ldr	r2, [pc, #116]	; (8010008 <HAL_PCD_MspInit+0xa0>)
 800ff94:	f043 0301 	orr.w	r3, r3, #1
 800ff98:	6313      	str	r3, [r2, #48]	; 0x30
 800ff9a:	4b1b      	ldr	r3, [pc, #108]	; (8010008 <HAL_PCD_MspInit+0xa0>)
 800ff9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff9e:	f003 0301 	and.w	r3, r3, #1
 800ffa2:	613b      	str	r3, [r7, #16]
 800ffa4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ffa6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ffaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ffac:	2302      	movs	r3, #2
 800ffae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ffb4:	2303      	movs	r3, #3
 800ffb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ffb8:	230a      	movs	r3, #10
 800ffba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ffbc:	f107 0314 	add.w	r3, r7, #20
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	4812      	ldr	r0, [pc, #72]	; (801000c <HAL_PCD_MspInit+0xa4>)
 800ffc4:	f7f4 f950 	bl	8004268 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ffc8:	4b0f      	ldr	r3, [pc, #60]	; (8010008 <HAL_PCD_MspInit+0xa0>)
 800ffca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffcc:	4a0e      	ldr	r2, [pc, #56]	; (8010008 <HAL_PCD_MspInit+0xa0>)
 800ffce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffd2:	6353      	str	r3, [r2, #52]	; 0x34
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	60fb      	str	r3, [r7, #12]
 800ffd8:	4b0b      	ldr	r3, [pc, #44]	; (8010008 <HAL_PCD_MspInit+0xa0>)
 800ffda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffdc:	4a0a      	ldr	r2, [pc, #40]	; (8010008 <HAL_PCD_MspInit+0xa0>)
 800ffde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ffe2:	6453      	str	r3, [r2, #68]	; 0x44
 800ffe4:	4b08      	ldr	r3, [pc, #32]	; (8010008 <HAL_PCD_MspInit+0xa0>)
 800ffe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ffec:	60fb      	str	r3, [r7, #12]
 800ffee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 800fff0:	2200      	movs	r2, #0
 800fff2:	2106      	movs	r1, #6
 800fff4:	2043      	movs	r0, #67	; 0x43
 800fff6:	f7f3 fd62 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fffa:	2043      	movs	r0, #67	; 0x43
 800fffc:	f7f3 fd7b 	bl	8003af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010000:	bf00      	nop
 8010002:	3728      	adds	r7, #40	; 0x28
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}
 8010008:	40023800 	.word	0x40023800
 801000c:	40020000 	.word	0x40020000

08010010 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8010024:	4619      	mov	r1, r3
 8010026:	4610      	mov	r0, r2
 8010028:	f7fe fae5 	bl	800e5f6 <USBD_LL_SetupStage>
}
 801002c:	bf00      	nop
 801002e:	3708      	adds	r7, #8
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}

08010034 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	460b      	mov	r3, r1
 801003e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8010046:	78fa      	ldrb	r2, [r7, #3]
 8010048:	6879      	ldr	r1, [r7, #4]
 801004a:	4613      	mov	r3, r2
 801004c:	00db      	lsls	r3, r3, #3
 801004e:	4413      	add	r3, r2
 8010050:	009b      	lsls	r3, r3, #2
 8010052:	440b      	add	r3, r1
 8010054:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010058:	681a      	ldr	r2, [r3, #0]
 801005a:	78fb      	ldrb	r3, [r7, #3]
 801005c:	4619      	mov	r1, r3
 801005e:	f7fe fb1f 	bl	800e6a0 <USBD_LL_DataOutStage>
}
 8010062:	bf00      	nop
 8010064:	3708      	adds	r7, #8
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}

0801006a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801006a:	b580      	push	{r7, lr}
 801006c:	b082      	sub	sp, #8
 801006e:	af00      	add	r7, sp, #0
 8010070:	6078      	str	r0, [r7, #4]
 8010072:	460b      	mov	r3, r1
 8010074:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 801007c:	78fa      	ldrb	r2, [r7, #3]
 801007e:	6879      	ldr	r1, [r7, #4]
 8010080:	4613      	mov	r3, r2
 8010082:	00db      	lsls	r3, r3, #3
 8010084:	4413      	add	r3, r2
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	440b      	add	r3, r1
 801008a:	3320      	adds	r3, #32
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	78fb      	ldrb	r3, [r7, #3]
 8010090:	4619      	mov	r1, r3
 8010092:	f7fe fbb8 	bl	800e806 <USBD_LL_DataInStage>
}
 8010096:	bf00      	nop
 8010098:	3708      	adds	r7, #8
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801009e:	b580      	push	{r7, lr}
 80100a0:	b082      	sub	sp, #8
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80100ac:	4618      	mov	r0, r3
 80100ae:	f7fe fcf2 	bl	800ea96 <USBD_LL_SOF>
}
 80100b2:	bf00      	nop
 80100b4:	3708      	adds	r7, #8
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}

080100ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100ba:	b580      	push	{r7, lr}
 80100bc:	b084      	sub	sp, #16
 80100be:	af00      	add	r7, sp, #0
 80100c0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80100c2:	2301      	movs	r3, #1
 80100c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	79db      	ldrb	r3, [r3, #7]
 80100ca:	2b02      	cmp	r3, #2
 80100cc:	d001      	beq.n	80100d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80100ce:	f7f1 f897 	bl	8001200 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80100d8:	7bfa      	ldrb	r2, [r7, #15]
 80100da:	4611      	mov	r1, r2
 80100dc:	4618      	mov	r0, r3
 80100de:	f7fe fc96 	bl	800ea0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7fe fc3e 	bl	800e96a <USBD_LL_Reset>
}
 80100ee:	bf00      	nop
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
	...

080100f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b082      	sub	sp, #8
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010106:	4618      	mov	r0, r3
 8010108:	f7fe fc91 	bl	800ea2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	687a      	ldr	r2, [r7, #4]
 8010118:	6812      	ldr	r2, [r2, #0]
 801011a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801011e:	f043 0301 	orr.w	r3, r3, #1
 8010122:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	7adb      	ldrb	r3, [r3, #11]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d005      	beq.n	8010138 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801012c:	4b04      	ldr	r3, [pc, #16]	; (8010140 <HAL_PCD_SuspendCallback+0x48>)
 801012e:	691b      	ldr	r3, [r3, #16]
 8010130:	4a03      	ldr	r2, [pc, #12]	; (8010140 <HAL_PCD_SuspendCallback+0x48>)
 8010132:	f043 0306 	orr.w	r3, r3, #6
 8010136:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010138:	bf00      	nop
 801013a:	3708      	adds	r7, #8
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}
 8010140:	e000ed00 	.word	0xe000ed00

08010144 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b082      	sub	sp, #8
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010152:	4618      	mov	r0, r3
 8010154:	f7fe fc87 	bl	800ea66 <USBD_LL_Resume>
}
 8010158:	bf00      	nop
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}

08010160 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	460b      	mov	r3, r1
 801016a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010172:	78fa      	ldrb	r2, [r7, #3]
 8010174:	4611      	mov	r1, r2
 8010176:	4618      	mov	r0, r3
 8010178:	f7fe fcdf 	bl	800eb3a <USBD_LL_IsoOUTIncomplete>
}
 801017c:	bf00      	nop
 801017e:	3708      	adds	r7, #8
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}

08010184 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b082      	sub	sp, #8
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	460b      	mov	r3, r1
 801018e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010196:	78fa      	ldrb	r2, [r7, #3]
 8010198:	4611      	mov	r1, r2
 801019a:	4618      	mov	r0, r3
 801019c:	f7fe fc9b 	bl	800ead6 <USBD_LL_IsoINIncomplete>
}
 80101a0:	bf00      	nop
 80101a2:	3708      	adds	r7, #8
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b082      	sub	sp, #8
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fe fcf1 	bl	800eb9e <USBD_LL_DevConnected>
}
 80101bc:	bf00      	nop
 80101be:	3708      	adds	r7, #8
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}

080101c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7fe fcee 	bl	800ebb4 <USBD_LL_DevDisconnected>
}
 80101d8:	bf00      	nop
 80101da:	3708      	adds	r7, #8
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d13c      	bne.n	801026a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80101f0:	4a20      	ldr	r2, [pc, #128]	; (8010274 <USBD_LL_Init+0x94>)
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	4a1e      	ldr	r2, [pc, #120]	; (8010274 <USBD_LL_Init+0x94>)
 80101fc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010200:	4b1c      	ldr	r3, [pc, #112]	; (8010274 <USBD_LL_Init+0x94>)
 8010202:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010206:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010208:	4b1a      	ldr	r3, [pc, #104]	; (8010274 <USBD_LL_Init+0x94>)
 801020a:	2204      	movs	r2, #4
 801020c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801020e:	4b19      	ldr	r3, [pc, #100]	; (8010274 <USBD_LL_Init+0x94>)
 8010210:	2202      	movs	r2, #2
 8010212:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010214:	4b17      	ldr	r3, [pc, #92]	; (8010274 <USBD_LL_Init+0x94>)
 8010216:	2200      	movs	r2, #0
 8010218:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801021a:	4b16      	ldr	r3, [pc, #88]	; (8010274 <USBD_LL_Init+0x94>)
 801021c:	2202      	movs	r2, #2
 801021e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010220:	4b14      	ldr	r3, [pc, #80]	; (8010274 <USBD_LL_Init+0x94>)
 8010222:	2200      	movs	r2, #0
 8010224:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010226:	4b13      	ldr	r3, [pc, #76]	; (8010274 <USBD_LL_Init+0x94>)
 8010228:	2200      	movs	r2, #0
 801022a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801022c:	4b11      	ldr	r3, [pc, #68]	; (8010274 <USBD_LL_Init+0x94>)
 801022e:	2200      	movs	r2, #0
 8010230:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010232:	4b10      	ldr	r3, [pc, #64]	; (8010274 <USBD_LL_Init+0x94>)
 8010234:	2200      	movs	r2, #0
 8010236:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010238:	4b0e      	ldr	r3, [pc, #56]	; (8010274 <USBD_LL_Init+0x94>)
 801023a:	2200      	movs	r2, #0
 801023c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801023e:	480d      	ldr	r0, [pc, #52]	; (8010274 <USBD_LL_Init+0x94>)
 8010240:	f7f4 f9e1 	bl	8004606 <HAL_PCD_Init>
 8010244:	4603      	mov	r3, r0
 8010246:	2b00      	cmp	r3, #0
 8010248:	d001      	beq.n	801024e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801024a:	f7f0 ffd9 	bl	8001200 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801024e:	2180      	movs	r1, #128	; 0x80
 8010250:	4808      	ldr	r0, [pc, #32]	; (8010274 <USBD_LL_Init+0x94>)
 8010252:	f7f5 fc0c 	bl	8005a6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010256:	2240      	movs	r2, #64	; 0x40
 8010258:	2100      	movs	r1, #0
 801025a:	4806      	ldr	r0, [pc, #24]	; (8010274 <USBD_LL_Init+0x94>)
 801025c:	f7f5 fbc0 	bl	80059e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010260:	2280      	movs	r2, #128	; 0x80
 8010262:	2101      	movs	r1, #1
 8010264:	4803      	ldr	r0, [pc, #12]	; (8010274 <USBD_LL_Init+0x94>)
 8010266:	f7f5 fbbb 	bl	80059e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801026a:	2300      	movs	r3, #0
}
 801026c:	4618      	mov	r0, r3
 801026e:	3708      	adds	r7, #8
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}
 8010274:	20002230 	.word	0x20002230

08010278 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010280:	2300      	movs	r3, #0
 8010282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010284:	2300      	movs	r3, #0
 8010286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801028e:	4618      	mov	r0, r3
 8010290:	f7f4 fac8 	bl	8004824 <HAL_PCD_Start>
 8010294:	4603      	mov	r3, r0
 8010296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010298:	7bfb      	ldrb	r3, [r7, #15]
 801029a:	4618      	mov	r0, r3
 801029c:	f000 f942 	bl	8010524 <USBD_Get_USB_Status>
 80102a0:	4603      	mov	r3, r0
 80102a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	3710      	adds	r7, #16
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}

080102ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80102ae:	b580      	push	{r7, lr}
 80102b0:	b084      	sub	sp, #16
 80102b2:	af00      	add	r7, sp, #0
 80102b4:	6078      	str	r0, [r7, #4]
 80102b6:	4608      	mov	r0, r1
 80102b8:	4611      	mov	r1, r2
 80102ba:	461a      	mov	r2, r3
 80102bc:	4603      	mov	r3, r0
 80102be:	70fb      	strb	r3, [r7, #3]
 80102c0:	460b      	mov	r3, r1
 80102c2:	70bb      	strb	r3, [r7, #2]
 80102c4:	4613      	mov	r3, r2
 80102c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102c8:	2300      	movs	r3, #0
 80102ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102cc:	2300      	movs	r3, #0
 80102ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80102d6:	78bb      	ldrb	r3, [r7, #2]
 80102d8:	883a      	ldrh	r2, [r7, #0]
 80102da:	78f9      	ldrb	r1, [r7, #3]
 80102dc:	f7f4 ff9c 	bl	8005218 <HAL_PCD_EP_Open>
 80102e0:	4603      	mov	r3, r0
 80102e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102e4:	7bfb      	ldrb	r3, [r7, #15]
 80102e6:	4618      	mov	r0, r3
 80102e8:	f000 f91c 	bl	8010524 <USBD_Get_USB_Status>
 80102ec:	4603      	mov	r3, r0
 80102ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3710      	adds	r7, #16
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}

080102fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80102fa:	b580      	push	{r7, lr}
 80102fc:	b084      	sub	sp, #16
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
 8010302:	460b      	mov	r3, r1
 8010304:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010306:	2300      	movs	r3, #0
 8010308:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801030a:	2300      	movs	r3, #0
 801030c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010314:	78fa      	ldrb	r2, [r7, #3]
 8010316:	4611      	mov	r1, r2
 8010318:	4618      	mov	r0, r3
 801031a:	f7f4 ffe5 	bl	80052e8 <HAL_PCD_EP_Close>
 801031e:	4603      	mov	r3, r0
 8010320:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010322:	7bfb      	ldrb	r3, [r7, #15]
 8010324:	4618      	mov	r0, r3
 8010326:	f000 f8fd 	bl	8010524 <USBD_Get_USB_Status>
 801032a:	4603      	mov	r3, r0
 801032c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801032e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010330:	4618      	mov	r0, r3
 8010332:	3710      	adds	r7, #16
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b084      	sub	sp, #16
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	460b      	mov	r3, r1
 8010342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010344:	2300      	movs	r3, #0
 8010346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010348:	2300      	movs	r3, #0
 801034a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010352:	78fa      	ldrb	r2, [r7, #3]
 8010354:	4611      	mov	r1, r2
 8010356:	4618      	mov	r0, r3
 8010358:	f7f5 f89d 	bl	8005496 <HAL_PCD_EP_SetStall>
 801035c:	4603      	mov	r3, r0
 801035e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010360:	7bfb      	ldrb	r3, [r7, #15]
 8010362:	4618      	mov	r0, r3
 8010364:	f000 f8de 	bl	8010524 <USBD_Get_USB_Status>
 8010368:	4603      	mov	r3, r0
 801036a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801036c:	7bbb      	ldrb	r3, [r7, #14]
}
 801036e:	4618      	mov	r0, r3
 8010370:	3710      	adds	r7, #16
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}

08010376 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010376:	b580      	push	{r7, lr}
 8010378:	b084      	sub	sp, #16
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
 801037e:	460b      	mov	r3, r1
 8010380:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010382:	2300      	movs	r3, #0
 8010384:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010386:	2300      	movs	r3, #0
 8010388:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010390:	78fa      	ldrb	r2, [r7, #3]
 8010392:	4611      	mov	r1, r2
 8010394:	4618      	mov	r0, r3
 8010396:	f7f5 f8e1 	bl	800555c <HAL_PCD_EP_ClrStall>
 801039a:	4603      	mov	r3, r0
 801039c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801039e:	7bfb      	ldrb	r3, [r7, #15]
 80103a0:	4618      	mov	r0, r3
 80103a2:	f000 f8bf 	bl	8010524 <USBD_Get_USB_Status>
 80103a6:	4603      	mov	r3, r0
 80103a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3710      	adds	r7, #16
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b085      	sub	sp, #20
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	460b      	mov	r3, r1
 80103be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80103c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80103c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	da0b      	bge.n	80103e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80103d0:	78fb      	ldrb	r3, [r7, #3]
 80103d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80103d6:	68f9      	ldr	r1, [r7, #12]
 80103d8:	4613      	mov	r3, r2
 80103da:	00db      	lsls	r3, r3, #3
 80103dc:	4413      	add	r3, r2
 80103de:	009b      	lsls	r3, r3, #2
 80103e0:	440b      	add	r3, r1
 80103e2:	3316      	adds	r3, #22
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	e00b      	b.n	8010400 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80103e8:	78fb      	ldrb	r3, [r7, #3]
 80103ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80103ee:	68f9      	ldr	r1, [r7, #12]
 80103f0:	4613      	mov	r3, r2
 80103f2:	00db      	lsls	r3, r3, #3
 80103f4:	4413      	add	r3, r2
 80103f6:	009b      	lsls	r3, r3, #2
 80103f8:	440b      	add	r3, r1
 80103fa:	f203 2356 	addw	r3, r3, #598	; 0x256
 80103fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010400:	4618      	mov	r0, r3
 8010402:	3714      	adds	r7, #20
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr

0801040c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b084      	sub	sp, #16
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	460b      	mov	r3, r1
 8010416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010418:	2300      	movs	r3, #0
 801041a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801041c:	2300      	movs	r3, #0
 801041e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010426:	78fa      	ldrb	r2, [r7, #3]
 8010428:	4611      	mov	r1, r2
 801042a:	4618      	mov	r0, r3
 801042c:	f7f4 fed0 	bl	80051d0 <HAL_PCD_SetAddress>
 8010430:	4603      	mov	r3, r0
 8010432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010434:	7bfb      	ldrb	r3, [r7, #15]
 8010436:	4618      	mov	r0, r3
 8010438:	f000 f874 	bl	8010524 <USBD_Get_USB_Status>
 801043c:	4603      	mov	r3, r0
 801043e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010440:	7bbb      	ldrb	r3, [r7, #14]
}
 8010442:	4618      	mov	r0, r3
 8010444:	3710      	adds	r7, #16
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}

0801044a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801044a:	b580      	push	{r7, lr}
 801044c:	b086      	sub	sp, #24
 801044e:	af00      	add	r7, sp, #0
 8010450:	60f8      	str	r0, [r7, #12]
 8010452:	607a      	str	r2, [r7, #4]
 8010454:	603b      	str	r3, [r7, #0]
 8010456:	460b      	mov	r3, r1
 8010458:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801045a:	2300      	movs	r3, #0
 801045c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801045e:	2300      	movs	r3, #0
 8010460:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010468:	7af9      	ldrb	r1, [r7, #11]
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	687a      	ldr	r2, [r7, #4]
 801046e:	f7f4 ffd8 	bl	8005422 <HAL_PCD_EP_Transmit>
 8010472:	4603      	mov	r3, r0
 8010474:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010476:	7dfb      	ldrb	r3, [r7, #23]
 8010478:	4618      	mov	r0, r3
 801047a:	f000 f853 	bl	8010524 <USBD_Get_USB_Status>
 801047e:	4603      	mov	r3, r0
 8010480:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010482:	7dbb      	ldrb	r3, [r7, #22]
}
 8010484:	4618      	mov	r0, r3
 8010486:	3718      	adds	r7, #24
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b086      	sub	sp, #24
 8010490:	af00      	add	r7, sp, #0
 8010492:	60f8      	str	r0, [r7, #12]
 8010494:	607a      	str	r2, [r7, #4]
 8010496:	603b      	str	r3, [r7, #0]
 8010498:	460b      	mov	r3, r1
 801049a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801049c:	2300      	movs	r3, #0
 801049e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104a0:	2300      	movs	r3, #0
 80104a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80104aa:	7af9      	ldrb	r1, [r7, #11]
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	f7f4 ff64 	bl	800537c <HAL_PCD_EP_Receive>
 80104b4:	4603      	mov	r3, r0
 80104b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104b8:	7dfb      	ldrb	r3, [r7, #23]
 80104ba:	4618      	mov	r0, r3
 80104bc:	f000 f832 	bl	8010524 <USBD_Get_USB_Status>
 80104c0:	4603      	mov	r3, r0
 80104c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80104c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3718      	adds	r7, #24
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}

080104ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b082      	sub	sp, #8
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	6078      	str	r0, [r7, #4]
 80104d6:	460b      	mov	r3, r1
 80104d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80104e0:	78fa      	ldrb	r2, [r7, #3]
 80104e2:	4611      	mov	r1, r2
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7f4 ff84 	bl	80053f2 <HAL_PCD_EP_GetRxCount>
 80104ea:	4603      	mov	r3, r0
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3708      	adds	r7, #8
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}

080104f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80104f4:	b480      	push	{r7}
 80104f6:	b083      	sub	sp, #12
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80104fc:	4b03      	ldr	r3, [pc, #12]	; (801050c <USBD_static_malloc+0x18>)
}
 80104fe:	4618      	mov	r0, r3
 8010500:	370c      	adds	r7, #12
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr
 801050a:	bf00      	nop
 801050c:	20002714 	.word	0x20002714

08010510 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010510:	b480      	push	{r7}
 8010512:	b083      	sub	sp, #12
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]

}
 8010518:	bf00      	nop
 801051a:	370c      	adds	r7, #12
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr

08010524 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010524:	b480      	push	{r7}
 8010526:	b085      	sub	sp, #20
 8010528:	af00      	add	r7, sp, #0
 801052a:	4603      	mov	r3, r0
 801052c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801052e:	2300      	movs	r3, #0
 8010530:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010532:	79fb      	ldrb	r3, [r7, #7]
 8010534:	2b03      	cmp	r3, #3
 8010536:	d817      	bhi.n	8010568 <USBD_Get_USB_Status+0x44>
 8010538:	a201      	add	r2, pc, #4	; (adr r2, 8010540 <USBD_Get_USB_Status+0x1c>)
 801053a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801053e:	bf00      	nop
 8010540:	08010551 	.word	0x08010551
 8010544:	08010557 	.word	0x08010557
 8010548:	0801055d 	.word	0x0801055d
 801054c:	08010563 	.word	0x08010563
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010550:	2300      	movs	r3, #0
 8010552:	73fb      	strb	r3, [r7, #15]
    break;
 8010554:	e00b      	b.n	801056e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010556:	2303      	movs	r3, #3
 8010558:	73fb      	strb	r3, [r7, #15]
    break;
 801055a:	e008      	b.n	801056e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801055c:	2301      	movs	r3, #1
 801055e:	73fb      	strb	r3, [r7, #15]
    break;
 8010560:	e005      	b.n	801056e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010562:	2303      	movs	r3, #3
 8010564:	73fb      	strb	r3, [r7, #15]
    break;
 8010566:	e002      	b.n	801056e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010568:	2303      	movs	r3, #3
 801056a:	73fb      	strb	r3, [r7, #15]
    break;
 801056c:	bf00      	nop
  }
  return usb_status;
 801056e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010570:	4618      	mov	r0, r3
 8010572:	3714      	adds	r7, #20
 8010574:	46bd      	mov	sp, r7
 8010576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057a:	4770      	bx	lr

0801057c <malloc>:
 801057c:	4b02      	ldr	r3, [pc, #8]	; (8010588 <malloc+0xc>)
 801057e:	4601      	mov	r1, r0
 8010580:	6818      	ldr	r0, [r3, #0]
 8010582:	f000 b82b 	b.w	80105dc <_malloc_r>
 8010586:	bf00      	nop
 8010588:	200002d8 	.word	0x200002d8

0801058c <free>:
 801058c:	4b02      	ldr	r3, [pc, #8]	; (8010598 <free+0xc>)
 801058e:	4601      	mov	r1, r0
 8010590:	6818      	ldr	r0, [r3, #0]
 8010592:	f001 b9cb 	b.w	801192c <_free_r>
 8010596:	bf00      	nop
 8010598:	200002d8 	.word	0x200002d8

0801059c <sbrk_aligned>:
 801059c:	b570      	push	{r4, r5, r6, lr}
 801059e:	4e0e      	ldr	r6, [pc, #56]	; (80105d8 <sbrk_aligned+0x3c>)
 80105a0:	460c      	mov	r4, r1
 80105a2:	6831      	ldr	r1, [r6, #0]
 80105a4:	4605      	mov	r5, r0
 80105a6:	b911      	cbnz	r1, 80105ae <sbrk_aligned+0x12>
 80105a8:	f001 f94c 	bl	8011844 <_sbrk_r>
 80105ac:	6030      	str	r0, [r6, #0]
 80105ae:	4621      	mov	r1, r4
 80105b0:	4628      	mov	r0, r5
 80105b2:	f001 f947 	bl	8011844 <_sbrk_r>
 80105b6:	1c43      	adds	r3, r0, #1
 80105b8:	d00a      	beq.n	80105d0 <sbrk_aligned+0x34>
 80105ba:	1cc4      	adds	r4, r0, #3
 80105bc:	f024 0403 	bic.w	r4, r4, #3
 80105c0:	42a0      	cmp	r0, r4
 80105c2:	d007      	beq.n	80105d4 <sbrk_aligned+0x38>
 80105c4:	1a21      	subs	r1, r4, r0
 80105c6:	4628      	mov	r0, r5
 80105c8:	f001 f93c 	bl	8011844 <_sbrk_r>
 80105cc:	3001      	adds	r0, #1
 80105ce:	d101      	bne.n	80105d4 <sbrk_aligned+0x38>
 80105d0:	f04f 34ff 	mov.w	r4, #4294967295
 80105d4:	4620      	mov	r0, r4
 80105d6:	bd70      	pop	{r4, r5, r6, pc}
 80105d8:	20002938 	.word	0x20002938

080105dc <_malloc_r>:
 80105dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105e0:	1ccd      	adds	r5, r1, #3
 80105e2:	f025 0503 	bic.w	r5, r5, #3
 80105e6:	3508      	adds	r5, #8
 80105e8:	2d0c      	cmp	r5, #12
 80105ea:	bf38      	it	cc
 80105ec:	250c      	movcc	r5, #12
 80105ee:	2d00      	cmp	r5, #0
 80105f0:	4607      	mov	r7, r0
 80105f2:	db01      	blt.n	80105f8 <_malloc_r+0x1c>
 80105f4:	42a9      	cmp	r1, r5
 80105f6:	d905      	bls.n	8010604 <_malloc_r+0x28>
 80105f8:	230c      	movs	r3, #12
 80105fa:	603b      	str	r3, [r7, #0]
 80105fc:	2600      	movs	r6, #0
 80105fe:	4630      	mov	r0, r6
 8010600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010604:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80106d8 <_malloc_r+0xfc>
 8010608:	f000 f868 	bl	80106dc <__malloc_lock>
 801060c:	f8d8 3000 	ldr.w	r3, [r8]
 8010610:	461c      	mov	r4, r3
 8010612:	bb5c      	cbnz	r4, 801066c <_malloc_r+0x90>
 8010614:	4629      	mov	r1, r5
 8010616:	4638      	mov	r0, r7
 8010618:	f7ff ffc0 	bl	801059c <sbrk_aligned>
 801061c:	1c43      	adds	r3, r0, #1
 801061e:	4604      	mov	r4, r0
 8010620:	d155      	bne.n	80106ce <_malloc_r+0xf2>
 8010622:	f8d8 4000 	ldr.w	r4, [r8]
 8010626:	4626      	mov	r6, r4
 8010628:	2e00      	cmp	r6, #0
 801062a:	d145      	bne.n	80106b8 <_malloc_r+0xdc>
 801062c:	2c00      	cmp	r4, #0
 801062e:	d048      	beq.n	80106c2 <_malloc_r+0xe6>
 8010630:	6823      	ldr	r3, [r4, #0]
 8010632:	4631      	mov	r1, r6
 8010634:	4638      	mov	r0, r7
 8010636:	eb04 0903 	add.w	r9, r4, r3
 801063a:	f001 f903 	bl	8011844 <_sbrk_r>
 801063e:	4581      	cmp	r9, r0
 8010640:	d13f      	bne.n	80106c2 <_malloc_r+0xe6>
 8010642:	6821      	ldr	r1, [r4, #0]
 8010644:	1a6d      	subs	r5, r5, r1
 8010646:	4629      	mov	r1, r5
 8010648:	4638      	mov	r0, r7
 801064a:	f7ff ffa7 	bl	801059c <sbrk_aligned>
 801064e:	3001      	adds	r0, #1
 8010650:	d037      	beq.n	80106c2 <_malloc_r+0xe6>
 8010652:	6823      	ldr	r3, [r4, #0]
 8010654:	442b      	add	r3, r5
 8010656:	6023      	str	r3, [r4, #0]
 8010658:	f8d8 3000 	ldr.w	r3, [r8]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d038      	beq.n	80106d2 <_malloc_r+0xf6>
 8010660:	685a      	ldr	r2, [r3, #4]
 8010662:	42a2      	cmp	r2, r4
 8010664:	d12b      	bne.n	80106be <_malloc_r+0xe2>
 8010666:	2200      	movs	r2, #0
 8010668:	605a      	str	r2, [r3, #4]
 801066a:	e00f      	b.n	801068c <_malloc_r+0xb0>
 801066c:	6822      	ldr	r2, [r4, #0]
 801066e:	1b52      	subs	r2, r2, r5
 8010670:	d41f      	bmi.n	80106b2 <_malloc_r+0xd6>
 8010672:	2a0b      	cmp	r2, #11
 8010674:	d917      	bls.n	80106a6 <_malloc_r+0xca>
 8010676:	1961      	adds	r1, r4, r5
 8010678:	42a3      	cmp	r3, r4
 801067a:	6025      	str	r5, [r4, #0]
 801067c:	bf18      	it	ne
 801067e:	6059      	strne	r1, [r3, #4]
 8010680:	6863      	ldr	r3, [r4, #4]
 8010682:	bf08      	it	eq
 8010684:	f8c8 1000 	streq.w	r1, [r8]
 8010688:	5162      	str	r2, [r4, r5]
 801068a:	604b      	str	r3, [r1, #4]
 801068c:	4638      	mov	r0, r7
 801068e:	f104 060b 	add.w	r6, r4, #11
 8010692:	f000 f829 	bl	80106e8 <__malloc_unlock>
 8010696:	f026 0607 	bic.w	r6, r6, #7
 801069a:	1d23      	adds	r3, r4, #4
 801069c:	1af2      	subs	r2, r6, r3
 801069e:	d0ae      	beq.n	80105fe <_malloc_r+0x22>
 80106a0:	1b9b      	subs	r3, r3, r6
 80106a2:	50a3      	str	r3, [r4, r2]
 80106a4:	e7ab      	b.n	80105fe <_malloc_r+0x22>
 80106a6:	42a3      	cmp	r3, r4
 80106a8:	6862      	ldr	r2, [r4, #4]
 80106aa:	d1dd      	bne.n	8010668 <_malloc_r+0x8c>
 80106ac:	f8c8 2000 	str.w	r2, [r8]
 80106b0:	e7ec      	b.n	801068c <_malloc_r+0xb0>
 80106b2:	4623      	mov	r3, r4
 80106b4:	6864      	ldr	r4, [r4, #4]
 80106b6:	e7ac      	b.n	8010612 <_malloc_r+0x36>
 80106b8:	4634      	mov	r4, r6
 80106ba:	6876      	ldr	r6, [r6, #4]
 80106bc:	e7b4      	b.n	8010628 <_malloc_r+0x4c>
 80106be:	4613      	mov	r3, r2
 80106c0:	e7cc      	b.n	801065c <_malloc_r+0x80>
 80106c2:	230c      	movs	r3, #12
 80106c4:	603b      	str	r3, [r7, #0]
 80106c6:	4638      	mov	r0, r7
 80106c8:	f000 f80e 	bl	80106e8 <__malloc_unlock>
 80106cc:	e797      	b.n	80105fe <_malloc_r+0x22>
 80106ce:	6025      	str	r5, [r4, #0]
 80106d0:	e7dc      	b.n	801068c <_malloc_r+0xb0>
 80106d2:	605b      	str	r3, [r3, #4]
 80106d4:	deff      	udf	#255	; 0xff
 80106d6:	bf00      	nop
 80106d8:	20002934 	.word	0x20002934

080106dc <__malloc_lock>:
 80106dc:	4801      	ldr	r0, [pc, #4]	; (80106e4 <__malloc_lock+0x8>)
 80106de:	f001 b8fe 	b.w	80118de <__retarget_lock_acquire_recursive>
 80106e2:	bf00      	nop
 80106e4:	20002a7c 	.word	0x20002a7c

080106e8 <__malloc_unlock>:
 80106e8:	4801      	ldr	r0, [pc, #4]	; (80106f0 <__malloc_unlock+0x8>)
 80106ea:	f001 b8f9 	b.w	80118e0 <__retarget_lock_release_recursive>
 80106ee:	bf00      	nop
 80106f0:	20002a7c 	.word	0x20002a7c

080106f4 <sulp>:
 80106f4:	b570      	push	{r4, r5, r6, lr}
 80106f6:	4604      	mov	r4, r0
 80106f8:	460d      	mov	r5, r1
 80106fa:	ec45 4b10 	vmov	d0, r4, r5
 80106fe:	4616      	mov	r6, r2
 8010700:	f002 f836 	bl	8012770 <__ulp>
 8010704:	ec51 0b10 	vmov	r0, r1, d0
 8010708:	b17e      	cbz	r6, 801072a <sulp+0x36>
 801070a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801070e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010712:	2b00      	cmp	r3, #0
 8010714:	dd09      	ble.n	801072a <sulp+0x36>
 8010716:	051b      	lsls	r3, r3, #20
 8010718:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801071c:	2400      	movs	r4, #0
 801071e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010722:	4622      	mov	r2, r4
 8010724:	462b      	mov	r3, r5
 8010726:	f7ef ff77 	bl	8000618 <__aeabi_dmul>
 801072a:	bd70      	pop	{r4, r5, r6, pc}
 801072c:	0000      	movs	r0, r0
	...

08010730 <_strtod_l>:
 8010730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010734:	ed2d 8b02 	vpush	{d8}
 8010738:	b09b      	sub	sp, #108	; 0x6c
 801073a:	4604      	mov	r4, r0
 801073c:	9213      	str	r2, [sp, #76]	; 0x4c
 801073e:	2200      	movs	r2, #0
 8010740:	9216      	str	r2, [sp, #88]	; 0x58
 8010742:	460d      	mov	r5, r1
 8010744:	f04f 0800 	mov.w	r8, #0
 8010748:	f04f 0900 	mov.w	r9, #0
 801074c:	460a      	mov	r2, r1
 801074e:	9215      	str	r2, [sp, #84]	; 0x54
 8010750:	7811      	ldrb	r1, [r2, #0]
 8010752:	292b      	cmp	r1, #43	; 0x2b
 8010754:	d04c      	beq.n	80107f0 <_strtod_l+0xc0>
 8010756:	d83a      	bhi.n	80107ce <_strtod_l+0x9e>
 8010758:	290d      	cmp	r1, #13
 801075a:	d834      	bhi.n	80107c6 <_strtod_l+0x96>
 801075c:	2908      	cmp	r1, #8
 801075e:	d834      	bhi.n	80107ca <_strtod_l+0x9a>
 8010760:	2900      	cmp	r1, #0
 8010762:	d03d      	beq.n	80107e0 <_strtod_l+0xb0>
 8010764:	2200      	movs	r2, #0
 8010766:	920a      	str	r2, [sp, #40]	; 0x28
 8010768:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801076a:	7832      	ldrb	r2, [r6, #0]
 801076c:	2a30      	cmp	r2, #48	; 0x30
 801076e:	f040 80b4 	bne.w	80108da <_strtod_l+0x1aa>
 8010772:	7872      	ldrb	r2, [r6, #1]
 8010774:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8010778:	2a58      	cmp	r2, #88	; 0x58
 801077a:	d170      	bne.n	801085e <_strtod_l+0x12e>
 801077c:	9302      	str	r3, [sp, #8]
 801077e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010780:	9301      	str	r3, [sp, #4]
 8010782:	ab16      	add	r3, sp, #88	; 0x58
 8010784:	9300      	str	r3, [sp, #0]
 8010786:	4a8e      	ldr	r2, [pc, #568]	; (80109c0 <_strtod_l+0x290>)
 8010788:	ab17      	add	r3, sp, #92	; 0x5c
 801078a:	a915      	add	r1, sp, #84	; 0x54
 801078c:	4620      	mov	r0, r4
 801078e:	f001 f981 	bl	8011a94 <__gethex>
 8010792:	f010 070f 	ands.w	r7, r0, #15
 8010796:	4605      	mov	r5, r0
 8010798:	d005      	beq.n	80107a6 <_strtod_l+0x76>
 801079a:	2f06      	cmp	r7, #6
 801079c:	d12a      	bne.n	80107f4 <_strtod_l+0xc4>
 801079e:	3601      	adds	r6, #1
 80107a0:	2300      	movs	r3, #0
 80107a2:	9615      	str	r6, [sp, #84]	; 0x54
 80107a4:	930a      	str	r3, [sp, #40]	; 0x28
 80107a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	f040 857f 	bne.w	80112ac <_strtod_l+0xb7c>
 80107ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107b0:	b1db      	cbz	r3, 80107ea <_strtod_l+0xba>
 80107b2:	4642      	mov	r2, r8
 80107b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80107b8:	ec43 2b10 	vmov	d0, r2, r3
 80107bc:	b01b      	add	sp, #108	; 0x6c
 80107be:	ecbd 8b02 	vpop	{d8}
 80107c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c6:	2920      	cmp	r1, #32
 80107c8:	d1cc      	bne.n	8010764 <_strtod_l+0x34>
 80107ca:	3201      	adds	r2, #1
 80107cc:	e7bf      	b.n	801074e <_strtod_l+0x1e>
 80107ce:	292d      	cmp	r1, #45	; 0x2d
 80107d0:	d1c8      	bne.n	8010764 <_strtod_l+0x34>
 80107d2:	2101      	movs	r1, #1
 80107d4:	910a      	str	r1, [sp, #40]	; 0x28
 80107d6:	1c51      	adds	r1, r2, #1
 80107d8:	9115      	str	r1, [sp, #84]	; 0x54
 80107da:	7852      	ldrb	r2, [r2, #1]
 80107dc:	2a00      	cmp	r2, #0
 80107de:	d1c3      	bne.n	8010768 <_strtod_l+0x38>
 80107e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107e2:	9515      	str	r5, [sp, #84]	; 0x54
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	f040 855f 	bne.w	80112a8 <_strtod_l+0xb78>
 80107ea:	4642      	mov	r2, r8
 80107ec:	464b      	mov	r3, r9
 80107ee:	e7e3      	b.n	80107b8 <_strtod_l+0x88>
 80107f0:	2100      	movs	r1, #0
 80107f2:	e7ef      	b.n	80107d4 <_strtod_l+0xa4>
 80107f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80107f6:	b13a      	cbz	r2, 8010808 <_strtod_l+0xd8>
 80107f8:	2135      	movs	r1, #53	; 0x35
 80107fa:	a818      	add	r0, sp, #96	; 0x60
 80107fc:	f002 f8b5 	bl	801296a <__copybits>
 8010800:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010802:	4620      	mov	r0, r4
 8010804:	f001 fc88 	bl	8012118 <_Bfree>
 8010808:	3f01      	subs	r7, #1
 801080a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801080c:	2f04      	cmp	r7, #4
 801080e:	d806      	bhi.n	801081e <_strtod_l+0xee>
 8010810:	e8df f007 	tbb	[pc, r7]
 8010814:	201d0314 	.word	0x201d0314
 8010818:	14          	.byte	0x14
 8010819:	00          	.byte	0x00
 801081a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801081e:	05e9      	lsls	r1, r5, #23
 8010820:	bf48      	it	mi
 8010822:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8010826:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801082a:	0d1b      	lsrs	r3, r3, #20
 801082c:	051b      	lsls	r3, r3, #20
 801082e:	2b00      	cmp	r3, #0
 8010830:	d1b9      	bne.n	80107a6 <_strtod_l+0x76>
 8010832:	f001 f829 	bl	8011888 <__errno>
 8010836:	2322      	movs	r3, #34	; 0x22
 8010838:	6003      	str	r3, [r0, #0]
 801083a:	e7b4      	b.n	80107a6 <_strtod_l+0x76>
 801083c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8010840:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010844:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010848:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801084c:	e7e7      	b.n	801081e <_strtod_l+0xee>
 801084e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80109c8 <_strtod_l+0x298>
 8010852:	e7e4      	b.n	801081e <_strtod_l+0xee>
 8010854:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010858:	f04f 38ff 	mov.w	r8, #4294967295
 801085c:	e7df      	b.n	801081e <_strtod_l+0xee>
 801085e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010860:	1c5a      	adds	r2, r3, #1
 8010862:	9215      	str	r2, [sp, #84]	; 0x54
 8010864:	785b      	ldrb	r3, [r3, #1]
 8010866:	2b30      	cmp	r3, #48	; 0x30
 8010868:	d0f9      	beq.n	801085e <_strtod_l+0x12e>
 801086a:	2b00      	cmp	r3, #0
 801086c:	d09b      	beq.n	80107a6 <_strtod_l+0x76>
 801086e:	2301      	movs	r3, #1
 8010870:	f04f 0a00 	mov.w	sl, #0
 8010874:	9304      	str	r3, [sp, #16]
 8010876:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010878:	930b      	str	r3, [sp, #44]	; 0x2c
 801087a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801087e:	46d3      	mov	fp, sl
 8010880:	220a      	movs	r2, #10
 8010882:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010884:	7806      	ldrb	r6, [r0, #0]
 8010886:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801088a:	b2d9      	uxtb	r1, r3
 801088c:	2909      	cmp	r1, #9
 801088e:	d926      	bls.n	80108de <_strtod_l+0x1ae>
 8010890:	494c      	ldr	r1, [pc, #304]	; (80109c4 <_strtod_l+0x294>)
 8010892:	2201      	movs	r2, #1
 8010894:	f000 ff64 	bl	8011760 <strncmp>
 8010898:	2800      	cmp	r0, #0
 801089a:	d030      	beq.n	80108fe <_strtod_l+0x1ce>
 801089c:	2000      	movs	r0, #0
 801089e:	4632      	mov	r2, r6
 80108a0:	9005      	str	r0, [sp, #20]
 80108a2:	465e      	mov	r6, fp
 80108a4:	4603      	mov	r3, r0
 80108a6:	2a65      	cmp	r2, #101	; 0x65
 80108a8:	d001      	beq.n	80108ae <_strtod_l+0x17e>
 80108aa:	2a45      	cmp	r2, #69	; 0x45
 80108ac:	d113      	bne.n	80108d6 <_strtod_l+0x1a6>
 80108ae:	b91e      	cbnz	r6, 80108b8 <_strtod_l+0x188>
 80108b0:	9a04      	ldr	r2, [sp, #16]
 80108b2:	4302      	orrs	r2, r0
 80108b4:	d094      	beq.n	80107e0 <_strtod_l+0xb0>
 80108b6:	2600      	movs	r6, #0
 80108b8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80108ba:	1c6a      	adds	r2, r5, #1
 80108bc:	9215      	str	r2, [sp, #84]	; 0x54
 80108be:	786a      	ldrb	r2, [r5, #1]
 80108c0:	2a2b      	cmp	r2, #43	; 0x2b
 80108c2:	d074      	beq.n	80109ae <_strtod_l+0x27e>
 80108c4:	2a2d      	cmp	r2, #45	; 0x2d
 80108c6:	d078      	beq.n	80109ba <_strtod_l+0x28a>
 80108c8:	f04f 0c00 	mov.w	ip, #0
 80108cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80108d0:	2909      	cmp	r1, #9
 80108d2:	d97f      	bls.n	80109d4 <_strtod_l+0x2a4>
 80108d4:	9515      	str	r5, [sp, #84]	; 0x54
 80108d6:	2700      	movs	r7, #0
 80108d8:	e09e      	b.n	8010a18 <_strtod_l+0x2e8>
 80108da:	2300      	movs	r3, #0
 80108dc:	e7c8      	b.n	8010870 <_strtod_l+0x140>
 80108de:	f1bb 0f08 	cmp.w	fp, #8
 80108e2:	bfd8      	it	le
 80108e4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80108e6:	f100 0001 	add.w	r0, r0, #1
 80108ea:	bfda      	itte	le
 80108ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80108f0:	9309      	strle	r3, [sp, #36]	; 0x24
 80108f2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80108f6:	f10b 0b01 	add.w	fp, fp, #1
 80108fa:	9015      	str	r0, [sp, #84]	; 0x54
 80108fc:	e7c1      	b.n	8010882 <_strtod_l+0x152>
 80108fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010900:	1c5a      	adds	r2, r3, #1
 8010902:	9215      	str	r2, [sp, #84]	; 0x54
 8010904:	785a      	ldrb	r2, [r3, #1]
 8010906:	f1bb 0f00 	cmp.w	fp, #0
 801090a:	d037      	beq.n	801097c <_strtod_l+0x24c>
 801090c:	9005      	str	r0, [sp, #20]
 801090e:	465e      	mov	r6, fp
 8010910:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010914:	2b09      	cmp	r3, #9
 8010916:	d912      	bls.n	801093e <_strtod_l+0x20e>
 8010918:	2301      	movs	r3, #1
 801091a:	e7c4      	b.n	80108a6 <_strtod_l+0x176>
 801091c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801091e:	1c5a      	adds	r2, r3, #1
 8010920:	9215      	str	r2, [sp, #84]	; 0x54
 8010922:	785a      	ldrb	r2, [r3, #1]
 8010924:	3001      	adds	r0, #1
 8010926:	2a30      	cmp	r2, #48	; 0x30
 8010928:	d0f8      	beq.n	801091c <_strtod_l+0x1ec>
 801092a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801092e:	2b08      	cmp	r3, #8
 8010930:	f200 84c1 	bhi.w	80112b6 <_strtod_l+0xb86>
 8010934:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010936:	9005      	str	r0, [sp, #20]
 8010938:	2000      	movs	r0, #0
 801093a:	930b      	str	r3, [sp, #44]	; 0x2c
 801093c:	4606      	mov	r6, r0
 801093e:	3a30      	subs	r2, #48	; 0x30
 8010940:	f100 0301 	add.w	r3, r0, #1
 8010944:	d014      	beq.n	8010970 <_strtod_l+0x240>
 8010946:	9905      	ldr	r1, [sp, #20]
 8010948:	4419      	add	r1, r3
 801094a:	9105      	str	r1, [sp, #20]
 801094c:	4633      	mov	r3, r6
 801094e:	eb00 0c06 	add.w	ip, r0, r6
 8010952:	210a      	movs	r1, #10
 8010954:	4563      	cmp	r3, ip
 8010956:	d113      	bne.n	8010980 <_strtod_l+0x250>
 8010958:	1833      	adds	r3, r6, r0
 801095a:	2b08      	cmp	r3, #8
 801095c:	f106 0601 	add.w	r6, r6, #1
 8010960:	4406      	add	r6, r0
 8010962:	dc1a      	bgt.n	801099a <_strtod_l+0x26a>
 8010964:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010966:	230a      	movs	r3, #10
 8010968:	fb03 2301 	mla	r3, r3, r1, r2
 801096c:	9309      	str	r3, [sp, #36]	; 0x24
 801096e:	2300      	movs	r3, #0
 8010970:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010972:	1c51      	adds	r1, r2, #1
 8010974:	9115      	str	r1, [sp, #84]	; 0x54
 8010976:	7852      	ldrb	r2, [r2, #1]
 8010978:	4618      	mov	r0, r3
 801097a:	e7c9      	b.n	8010910 <_strtod_l+0x1e0>
 801097c:	4658      	mov	r0, fp
 801097e:	e7d2      	b.n	8010926 <_strtod_l+0x1f6>
 8010980:	2b08      	cmp	r3, #8
 8010982:	f103 0301 	add.w	r3, r3, #1
 8010986:	dc03      	bgt.n	8010990 <_strtod_l+0x260>
 8010988:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801098a:	434f      	muls	r7, r1
 801098c:	9709      	str	r7, [sp, #36]	; 0x24
 801098e:	e7e1      	b.n	8010954 <_strtod_l+0x224>
 8010990:	2b10      	cmp	r3, #16
 8010992:	bfd8      	it	le
 8010994:	fb01 fa0a 	mulle.w	sl, r1, sl
 8010998:	e7dc      	b.n	8010954 <_strtod_l+0x224>
 801099a:	2e10      	cmp	r6, #16
 801099c:	bfdc      	itt	le
 801099e:	230a      	movle	r3, #10
 80109a0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80109a4:	e7e3      	b.n	801096e <_strtod_l+0x23e>
 80109a6:	2300      	movs	r3, #0
 80109a8:	9305      	str	r3, [sp, #20]
 80109aa:	2301      	movs	r3, #1
 80109ac:	e780      	b.n	80108b0 <_strtod_l+0x180>
 80109ae:	f04f 0c00 	mov.w	ip, #0
 80109b2:	1caa      	adds	r2, r5, #2
 80109b4:	9215      	str	r2, [sp, #84]	; 0x54
 80109b6:	78aa      	ldrb	r2, [r5, #2]
 80109b8:	e788      	b.n	80108cc <_strtod_l+0x19c>
 80109ba:	f04f 0c01 	mov.w	ip, #1
 80109be:	e7f8      	b.n	80109b2 <_strtod_l+0x282>
 80109c0:	080141b0 	.word	0x080141b0
 80109c4:	080141a0 	.word	0x080141a0
 80109c8:	7ff00000 	.word	0x7ff00000
 80109cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80109ce:	1c51      	adds	r1, r2, #1
 80109d0:	9115      	str	r1, [sp, #84]	; 0x54
 80109d2:	7852      	ldrb	r2, [r2, #1]
 80109d4:	2a30      	cmp	r2, #48	; 0x30
 80109d6:	d0f9      	beq.n	80109cc <_strtod_l+0x29c>
 80109d8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80109dc:	2908      	cmp	r1, #8
 80109de:	f63f af7a 	bhi.w	80108d6 <_strtod_l+0x1a6>
 80109e2:	3a30      	subs	r2, #48	; 0x30
 80109e4:	9208      	str	r2, [sp, #32]
 80109e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80109e8:	920c      	str	r2, [sp, #48]	; 0x30
 80109ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80109ec:	1c57      	adds	r7, r2, #1
 80109ee:	9715      	str	r7, [sp, #84]	; 0x54
 80109f0:	7852      	ldrb	r2, [r2, #1]
 80109f2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80109f6:	f1be 0f09 	cmp.w	lr, #9
 80109fa:	d938      	bls.n	8010a6e <_strtod_l+0x33e>
 80109fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80109fe:	1a7f      	subs	r7, r7, r1
 8010a00:	2f08      	cmp	r7, #8
 8010a02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010a06:	dc03      	bgt.n	8010a10 <_strtod_l+0x2e0>
 8010a08:	9908      	ldr	r1, [sp, #32]
 8010a0a:	428f      	cmp	r7, r1
 8010a0c:	bfa8      	it	ge
 8010a0e:	460f      	movge	r7, r1
 8010a10:	f1bc 0f00 	cmp.w	ip, #0
 8010a14:	d000      	beq.n	8010a18 <_strtod_l+0x2e8>
 8010a16:	427f      	negs	r7, r7
 8010a18:	2e00      	cmp	r6, #0
 8010a1a:	d14f      	bne.n	8010abc <_strtod_l+0x38c>
 8010a1c:	9904      	ldr	r1, [sp, #16]
 8010a1e:	4301      	orrs	r1, r0
 8010a20:	f47f aec1 	bne.w	80107a6 <_strtod_l+0x76>
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	f47f aedb 	bne.w	80107e0 <_strtod_l+0xb0>
 8010a2a:	2a69      	cmp	r2, #105	; 0x69
 8010a2c:	d029      	beq.n	8010a82 <_strtod_l+0x352>
 8010a2e:	dc26      	bgt.n	8010a7e <_strtod_l+0x34e>
 8010a30:	2a49      	cmp	r2, #73	; 0x49
 8010a32:	d026      	beq.n	8010a82 <_strtod_l+0x352>
 8010a34:	2a4e      	cmp	r2, #78	; 0x4e
 8010a36:	f47f aed3 	bne.w	80107e0 <_strtod_l+0xb0>
 8010a3a:	499b      	ldr	r1, [pc, #620]	; (8010ca8 <_strtod_l+0x578>)
 8010a3c:	a815      	add	r0, sp, #84	; 0x54
 8010a3e:	f001 fa69 	bl	8011f14 <__match>
 8010a42:	2800      	cmp	r0, #0
 8010a44:	f43f aecc 	beq.w	80107e0 <_strtod_l+0xb0>
 8010a48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	2b28      	cmp	r3, #40	; 0x28
 8010a4e:	d12f      	bne.n	8010ab0 <_strtod_l+0x380>
 8010a50:	4996      	ldr	r1, [pc, #600]	; (8010cac <_strtod_l+0x57c>)
 8010a52:	aa18      	add	r2, sp, #96	; 0x60
 8010a54:	a815      	add	r0, sp, #84	; 0x54
 8010a56:	f001 fa71 	bl	8011f3c <__hexnan>
 8010a5a:	2805      	cmp	r0, #5
 8010a5c:	d128      	bne.n	8010ab0 <_strtod_l+0x380>
 8010a5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010a60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010a64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8010a68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8010a6c:	e69b      	b.n	80107a6 <_strtod_l+0x76>
 8010a6e:	9f08      	ldr	r7, [sp, #32]
 8010a70:	210a      	movs	r1, #10
 8010a72:	fb01 2107 	mla	r1, r1, r7, r2
 8010a76:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8010a7a:	9208      	str	r2, [sp, #32]
 8010a7c:	e7b5      	b.n	80109ea <_strtod_l+0x2ba>
 8010a7e:	2a6e      	cmp	r2, #110	; 0x6e
 8010a80:	e7d9      	b.n	8010a36 <_strtod_l+0x306>
 8010a82:	498b      	ldr	r1, [pc, #556]	; (8010cb0 <_strtod_l+0x580>)
 8010a84:	a815      	add	r0, sp, #84	; 0x54
 8010a86:	f001 fa45 	bl	8011f14 <__match>
 8010a8a:	2800      	cmp	r0, #0
 8010a8c:	f43f aea8 	beq.w	80107e0 <_strtod_l+0xb0>
 8010a90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a92:	4988      	ldr	r1, [pc, #544]	; (8010cb4 <_strtod_l+0x584>)
 8010a94:	3b01      	subs	r3, #1
 8010a96:	a815      	add	r0, sp, #84	; 0x54
 8010a98:	9315      	str	r3, [sp, #84]	; 0x54
 8010a9a:	f001 fa3b 	bl	8011f14 <__match>
 8010a9e:	b910      	cbnz	r0, 8010aa6 <_strtod_l+0x376>
 8010aa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	9315      	str	r3, [sp, #84]	; 0x54
 8010aa6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8010cc4 <_strtod_l+0x594>
 8010aaa:	f04f 0800 	mov.w	r8, #0
 8010aae:	e67a      	b.n	80107a6 <_strtod_l+0x76>
 8010ab0:	4881      	ldr	r0, [pc, #516]	; (8010cb8 <_strtod_l+0x588>)
 8010ab2:	f000 ff2d 	bl	8011910 <nan>
 8010ab6:	ec59 8b10 	vmov	r8, r9, d0
 8010aba:	e674      	b.n	80107a6 <_strtod_l+0x76>
 8010abc:	9b05      	ldr	r3, [sp, #20]
 8010abe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ac0:	1afb      	subs	r3, r7, r3
 8010ac2:	f1bb 0f00 	cmp.w	fp, #0
 8010ac6:	bf08      	it	eq
 8010ac8:	46b3      	moveq	fp, r6
 8010aca:	2e10      	cmp	r6, #16
 8010acc:	9308      	str	r3, [sp, #32]
 8010ace:	4635      	mov	r5, r6
 8010ad0:	bfa8      	it	ge
 8010ad2:	2510      	movge	r5, #16
 8010ad4:	f7ef fd26 	bl	8000524 <__aeabi_ui2d>
 8010ad8:	2e09      	cmp	r6, #9
 8010ada:	4680      	mov	r8, r0
 8010adc:	4689      	mov	r9, r1
 8010ade:	dd13      	ble.n	8010b08 <_strtod_l+0x3d8>
 8010ae0:	4b76      	ldr	r3, [pc, #472]	; (8010cbc <_strtod_l+0x58c>)
 8010ae2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010ae6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010aea:	f7ef fd95 	bl	8000618 <__aeabi_dmul>
 8010aee:	4680      	mov	r8, r0
 8010af0:	4650      	mov	r0, sl
 8010af2:	4689      	mov	r9, r1
 8010af4:	f7ef fd16 	bl	8000524 <__aeabi_ui2d>
 8010af8:	4602      	mov	r2, r0
 8010afa:	460b      	mov	r3, r1
 8010afc:	4640      	mov	r0, r8
 8010afe:	4649      	mov	r1, r9
 8010b00:	f7ef fbd4 	bl	80002ac <__adddf3>
 8010b04:	4680      	mov	r8, r0
 8010b06:	4689      	mov	r9, r1
 8010b08:	2e0f      	cmp	r6, #15
 8010b0a:	dc38      	bgt.n	8010b7e <_strtod_l+0x44e>
 8010b0c:	9b08      	ldr	r3, [sp, #32]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	f43f ae49 	beq.w	80107a6 <_strtod_l+0x76>
 8010b14:	dd24      	ble.n	8010b60 <_strtod_l+0x430>
 8010b16:	2b16      	cmp	r3, #22
 8010b18:	dc0b      	bgt.n	8010b32 <_strtod_l+0x402>
 8010b1a:	4968      	ldr	r1, [pc, #416]	; (8010cbc <_strtod_l+0x58c>)
 8010b1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b24:	4642      	mov	r2, r8
 8010b26:	464b      	mov	r3, r9
 8010b28:	f7ef fd76 	bl	8000618 <__aeabi_dmul>
 8010b2c:	4680      	mov	r8, r0
 8010b2e:	4689      	mov	r9, r1
 8010b30:	e639      	b.n	80107a6 <_strtod_l+0x76>
 8010b32:	9a08      	ldr	r2, [sp, #32]
 8010b34:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8010b38:	4293      	cmp	r3, r2
 8010b3a:	db20      	blt.n	8010b7e <_strtod_l+0x44e>
 8010b3c:	4c5f      	ldr	r4, [pc, #380]	; (8010cbc <_strtod_l+0x58c>)
 8010b3e:	f1c6 060f 	rsb	r6, r6, #15
 8010b42:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8010b46:	4642      	mov	r2, r8
 8010b48:	464b      	mov	r3, r9
 8010b4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b4e:	f7ef fd63 	bl	8000618 <__aeabi_dmul>
 8010b52:	9b08      	ldr	r3, [sp, #32]
 8010b54:	1b9e      	subs	r6, r3, r6
 8010b56:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8010b5a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010b5e:	e7e3      	b.n	8010b28 <_strtod_l+0x3f8>
 8010b60:	9b08      	ldr	r3, [sp, #32]
 8010b62:	3316      	adds	r3, #22
 8010b64:	db0b      	blt.n	8010b7e <_strtod_l+0x44e>
 8010b66:	9b05      	ldr	r3, [sp, #20]
 8010b68:	1bdf      	subs	r7, r3, r7
 8010b6a:	4b54      	ldr	r3, [pc, #336]	; (8010cbc <_strtod_l+0x58c>)
 8010b6c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b74:	4640      	mov	r0, r8
 8010b76:	4649      	mov	r1, r9
 8010b78:	f7ef fe78 	bl	800086c <__aeabi_ddiv>
 8010b7c:	e7d6      	b.n	8010b2c <_strtod_l+0x3fc>
 8010b7e:	9b08      	ldr	r3, [sp, #32]
 8010b80:	1b75      	subs	r5, r6, r5
 8010b82:	441d      	add	r5, r3
 8010b84:	2d00      	cmp	r5, #0
 8010b86:	dd70      	ble.n	8010c6a <_strtod_l+0x53a>
 8010b88:	f015 030f 	ands.w	r3, r5, #15
 8010b8c:	d00a      	beq.n	8010ba4 <_strtod_l+0x474>
 8010b8e:	494b      	ldr	r1, [pc, #300]	; (8010cbc <_strtod_l+0x58c>)
 8010b90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010b94:	4642      	mov	r2, r8
 8010b96:	464b      	mov	r3, r9
 8010b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b9c:	f7ef fd3c 	bl	8000618 <__aeabi_dmul>
 8010ba0:	4680      	mov	r8, r0
 8010ba2:	4689      	mov	r9, r1
 8010ba4:	f035 050f 	bics.w	r5, r5, #15
 8010ba8:	d04d      	beq.n	8010c46 <_strtod_l+0x516>
 8010baa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8010bae:	dd22      	ble.n	8010bf6 <_strtod_l+0x4c6>
 8010bb0:	2500      	movs	r5, #0
 8010bb2:	46ab      	mov	fp, r5
 8010bb4:	9509      	str	r5, [sp, #36]	; 0x24
 8010bb6:	9505      	str	r5, [sp, #20]
 8010bb8:	2322      	movs	r3, #34	; 0x22
 8010bba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8010cc4 <_strtod_l+0x594>
 8010bbe:	6023      	str	r3, [r4, #0]
 8010bc0:	f04f 0800 	mov.w	r8, #0
 8010bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	f43f aded 	beq.w	80107a6 <_strtod_l+0x76>
 8010bcc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010bce:	4620      	mov	r0, r4
 8010bd0:	f001 faa2 	bl	8012118 <_Bfree>
 8010bd4:	9905      	ldr	r1, [sp, #20]
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	f001 fa9e 	bl	8012118 <_Bfree>
 8010bdc:	4659      	mov	r1, fp
 8010bde:	4620      	mov	r0, r4
 8010be0:	f001 fa9a 	bl	8012118 <_Bfree>
 8010be4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010be6:	4620      	mov	r0, r4
 8010be8:	f001 fa96 	bl	8012118 <_Bfree>
 8010bec:	4629      	mov	r1, r5
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f001 fa92 	bl	8012118 <_Bfree>
 8010bf4:	e5d7      	b.n	80107a6 <_strtod_l+0x76>
 8010bf6:	4b32      	ldr	r3, [pc, #200]	; (8010cc0 <_strtod_l+0x590>)
 8010bf8:	9304      	str	r3, [sp, #16]
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	112d      	asrs	r5, r5, #4
 8010bfe:	4640      	mov	r0, r8
 8010c00:	4649      	mov	r1, r9
 8010c02:	469a      	mov	sl, r3
 8010c04:	2d01      	cmp	r5, #1
 8010c06:	dc21      	bgt.n	8010c4c <_strtod_l+0x51c>
 8010c08:	b10b      	cbz	r3, 8010c0e <_strtod_l+0x4de>
 8010c0a:	4680      	mov	r8, r0
 8010c0c:	4689      	mov	r9, r1
 8010c0e:	492c      	ldr	r1, [pc, #176]	; (8010cc0 <_strtod_l+0x590>)
 8010c10:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010c14:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010c18:	4642      	mov	r2, r8
 8010c1a:	464b      	mov	r3, r9
 8010c1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c20:	f7ef fcfa 	bl	8000618 <__aeabi_dmul>
 8010c24:	4b27      	ldr	r3, [pc, #156]	; (8010cc4 <_strtod_l+0x594>)
 8010c26:	460a      	mov	r2, r1
 8010c28:	400b      	ands	r3, r1
 8010c2a:	4927      	ldr	r1, [pc, #156]	; (8010cc8 <_strtod_l+0x598>)
 8010c2c:	428b      	cmp	r3, r1
 8010c2e:	4680      	mov	r8, r0
 8010c30:	d8be      	bhi.n	8010bb0 <_strtod_l+0x480>
 8010c32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010c36:	428b      	cmp	r3, r1
 8010c38:	bf86      	itte	hi
 8010c3a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8010ccc <_strtod_l+0x59c>
 8010c3e:	f04f 38ff 	movhi.w	r8, #4294967295
 8010c42:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8010c46:	2300      	movs	r3, #0
 8010c48:	9304      	str	r3, [sp, #16]
 8010c4a:	e07b      	b.n	8010d44 <_strtod_l+0x614>
 8010c4c:	07ea      	lsls	r2, r5, #31
 8010c4e:	d505      	bpl.n	8010c5c <_strtod_l+0x52c>
 8010c50:	9b04      	ldr	r3, [sp, #16]
 8010c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c56:	f7ef fcdf 	bl	8000618 <__aeabi_dmul>
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	9a04      	ldr	r2, [sp, #16]
 8010c5e:	3208      	adds	r2, #8
 8010c60:	f10a 0a01 	add.w	sl, sl, #1
 8010c64:	106d      	asrs	r5, r5, #1
 8010c66:	9204      	str	r2, [sp, #16]
 8010c68:	e7cc      	b.n	8010c04 <_strtod_l+0x4d4>
 8010c6a:	d0ec      	beq.n	8010c46 <_strtod_l+0x516>
 8010c6c:	426d      	negs	r5, r5
 8010c6e:	f015 020f 	ands.w	r2, r5, #15
 8010c72:	d00a      	beq.n	8010c8a <_strtod_l+0x55a>
 8010c74:	4b11      	ldr	r3, [pc, #68]	; (8010cbc <_strtod_l+0x58c>)
 8010c76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c7a:	4640      	mov	r0, r8
 8010c7c:	4649      	mov	r1, r9
 8010c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c82:	f7ef fdf3 	bl	800086c <__aeabi_ddiv>
 8010c86:	4680      	mov	r8, r0
 8010c88:	4689      	mov	r9, r1
 8010c8a:	112d      	asrs	r5, r5, #4
 8010c8c:	d0db      	beq.n	8010c46 <_strtod_l+0x516>
 8010c8e:	2d1f      	cmp	r5, #31
 8010c90:	dd1e      	ble.n	8010cd0 <_strtod_l+0x5a0>
 8010c92:	2500      	movs	r5, #0
 8010c94:	46ab      	mov	fp, r5
 8010c96:	9509      	str	r5, [sp, #36]	; 0x24
 8010c98:	9505      	str	r5, [sp, #20]
 8010c9a:	2322      	movs	r3, #34	; 0x22
 8010c9c:	f04f 0800 	mov.w	r8, #0
 8010ca0:	f04f 0900 	mov.w	r9, #0
 8010ca4:	6023      	str	r3, [r4, #0]
 8010ca6:	e78d      	b.n	8010bc4 <_strtod_l+0x494>
 8010ca8:	080141ab 	.word	0x080141ab
 8010cac:	080141c4 	.word	0x080141c4
 8010cb0:	080141a2 	.word	0x080141a2
 8010cb4:	080141a5 	.word	0x080141a5
 8010cb8:	0801455a 	.word	0x0801455a
 8010cbc:	08014418 	.word	0x08014418
 8010cc0:	080143f0 	.word	0x080143f0
 8010cc4:	7ff00000 	.word	0x7ff00000
 8010cc8:	7ca00000 	.word	0x7ca00000
 8010ccc:	7fefffff 	.word	0x7fefffff
 8010cd0:	f015 0310 	ands.w	r3, r5, #16
 8010cd4:	bf18      	it	ne
 8010cd6:	236a      	movne	r3, #106	; 0x6a
 8010cd8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801107c <_strtod_l+0x94c>
 8010cdc:	9304      	str	r3, [sp, #16]
 8010cde:	4640      	mov	r0, r8
 8010ce0:	4649      	mov	r1, r9
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	07ea      	lsls	r2, r5, #31
 8010ce6:	d504      	bpl.n	8010cf2 <_strtod_l+0x5c2>
 8010ce8:	e9da 2300 	ldrd	r2, r3, [sl]
 8010cec:	f7ef fc94 	bl	8000618 <__aeabi_dmul>
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	106d      	asrs	r5, r5, #1
 8010cf4:	f10a 0a08 	add.w	sl, sl, #8
 8010cf8:	d1f4      	bne.n	8010ce4 <_strtod_l+0x5b4>
 8010cfa:	b10b      	cbz	r3, 8010d00 <_strtod_l+0x5d0>
 8010cfc:	4680      	mov	r8, r0
 8010cfe:	4689      	mov	r9, r1
 8010d00:	9b04      	ldr	r3, [sp, #16]
 8010d02:	b1bb      	cbz	r3, 8010d34 <_strtod_l+0x604>
 8010d04:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010d08:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	4649      	mov	r1, r9
 8010d10:	dd10      	ble.n	8010d34 <_strtod_l+0x604>
 8010d12:	2b1f      	cmp	r3, #31
 8010d14:	f340 811e 	ble.w	8010f54 <_strtod_l+0x824>
 8010d18:	2b34      	cmp	r3, #52	; 0x34
 8010d1a:	bfde      	ittt	le
 8010d1c:	f04f 33ff 	movle.w	r3, #4294967295
 8010d20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010d24:	4093      	lslle	r3, r2
 8010d26:	f04f 0800 	mov.w	r8, #0
 8010d2a:	bfcc      	ite	gt
 8010d2c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010d30:	ea03 0901 	andle.w	r9, r3, r1
 8010d34:	2200      	movs	r2, #0
 8010d36:	2300      	movs	r3, #0
 8010d38:	4640      	mov	r0, r8
 8010d3a:	4649      	mov	r1, r9
 8010d3c:	f7ef fed4 	bl	8000ae8 <__aeabi_dcmpeq>
 8010d40:	2800      	cmp	r0, #0
 8010d42:	d1a6      	bne.n	8010c92 <_strtod_l+0x562>
 8010d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d46:	9300      	str	r3, [sp, #0]
 8010d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d4a:	4633      	mov	r3, r6
 8010d4c:	465a      	mov	r2, fp
 8010d4e:	4620      	mov	r0, r4
 8010d50:	f001 fa4a 	bl	80121e8 <__s2b>
 8010d54:	9009      	str	r0, [sp, #36]	; 0x24
 8010d56:	2800      	cmp	r0, #0
 8010d58:	f43f af2a 	beq.w	8010bb0 <_strtod_l+0x480>
 8010d5c:	9a08      	ldr	r2, [sp, #32]
 8010d5e:	9b05      	ldr	r3, [sp, #20]
 8010d60:	2a00      	cmp	r2, #0
 8010d62:	eba3 0307 	sub.w	r3, r3, r7
 8010d66:	bfa8      	it	ge
 8010d68:	2300      	movge	r3, #0
 8010d6a:	930c      	str	r3, [sp, #48]	; 0x30
 8010d6c:	2500      	movs	r5, #0
 8010d6e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010d72:	9312      	str	r3, [sp, #72]	; 0x48
 8010d74:	46ab      	mov	fp, r5
 8010d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d78:	4620      	mov	r0, r4
 8010d7a:	6859      	ldr	r1, [r3, #4]
 8010d7c:	f001 f98c 	bl	8012098 <_Balloc>
 8010d80:	9005      	str	r0, [sp, #20]
 8010d82:	2800      	cmp	r0, #0
 8010d84:	f43f af18 	beq.w	8010bb8 <_strtod_l+0x488>
 8010d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d8a:	691a      	ldr	r2, [r3, #16]
 8010d8c:	3202      	adds	r2, #2
 8010d8e:	f103 010c 	add.w	r1, r3, #12
 8010d92:	0092      	lsls	r2, r2, #2
 8010d94:	300c      	adds	r0, #12
 8010d96:	f000 fdac 	bl	80118f2 <memcpy>
 8010d9a:	ec49 8b10 	vmov	d0, r8, r9
 8010d9e:	aa18      	add	r2, sp, #96	; 0x60
 8010da0:	a917      	add	r1, sp, #92	; 0x5c
 8010da2:	4620      	mov	r0, r4
 8010da4:	f001 fd54 	bl	8012850 <__d2b>
 8010da8:	ec49 8b18 	vmov	d8, r8, r9
 8010dac:	9016      	str	r0, [sp, #88]	; 0x58
 8010dae:	2800      	cmp	r0, #0
 8010db0:	f43f af02 	beq.w	8010bb8 <_strtod_l+0x488>
 8010db4:	2101      	movs	r1, #1
 8010db6:	4620      	mov	r0, r4
 8010db8:	f001 faae 	bl	8012318 <__i2b>
 8010dbc:	4683      	mov	fp, r0
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	f43f aefa 	beq.w	8010bb8 <_strtod_l+0x488>
 8010dc4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010dc6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010dc8:	2e00      	cmp	r6, #0
 8010dca:	bfab      	itete	ge
 8010dcc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8010dce:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010dd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010dd2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8010dd6:	bfac      	ite	ge
 8010dd8:	eb06 0a03 	addge.w	sl, r6, r3
 8010ddc:	1b9f      	sublt	r7, r3, r6
 8010dde:	9b04      	ldr	r3, [sp, #16]
 8010de0:	1af6      	subs	r6, r6, r3
 8010de2:	4416      	add	r6, r2
 8010de4:	4ba0      	ldr	r3, [pc, #640]	; (8011068 <_strtod_l+0x938>)
 8010de6:	3e01      	subs	r6, #1
 8010de8:	429e      	cmp	r6, r3
 8010dea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010dee:	f280 80c4 	bge.w	8010f7a <_strtod_l+0x84a>
 8010df2:	1b9b      	subs	r3, r3, r6
 8010df4:	2b1f      	cmp	r3, #31
 8010df6:	eba2 0203 	sub.w	r2, r2, r3
 8010dfa:	f04f 0101 	mov.w	r1, #1
 8010dfe:	f300 80b0 	bgt.w	8010f62 <_strtod_l+0x832>
 8010e02:	fa01 f303 	lsl.w	r3, r1, r3
 8010e06:	930e      	str	r3, [sp, #56]	; 0x38
 8010e08:	2300      	movs	r3, #0
 8010e0a:	930d      	str	r3, [sp, #52]	; 0x34
 8010e0c:	eb0a 0602 	add.w	r6, sl, r2
 8010e10:	9b04      	ldr	r3, [sp, #16]
 8010e12:	45b2      	cmp	sl, r6
 8010e14:	4417      	add	r7, r2
 8010e16:	441f      	add	r7, r3
 8010e18:	4653      	mov	r3, sl
 8010e1a:	bfa8      	it	ge
 8010e1c:	4633      	movge	r3, r6
 8010e1e:	42bb      	cmp	r3, r7
 8010e20:	bfa8      	it	ge
 8010e22:	463b      	movge	r3, r7
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	bfc2      	ittt	gt
 8010e28:	1af6      	subgt	r6, r6, r3
 8010e2a:	1aff      	subgt	r7, r7, r3
 8010e2c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	dd17      	ble.n	8010e66 <_strtod_l+0x736>
 8010e36:	4659      	mov	r1, fp
 8010e38:	461a      	mov	r2, r3
 8010e3a:	4620      	mov	r0, r4
 8010e3c:	f001 fb2c 	bl	8012498 <__pow5mult>
 8010e40:	4683      	mov	fp, r0
 8010e42:	2800      	cmp	r0, #0
 8010e44:	f43f aeb8 	beq.w	8010bb8 <_strtod_l+0x488>
 8010e48:	4601      	mov	r1, r0
 8010e4a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	f001 fa79 	bl	8012344 <__multiply>
 8010e52:	900b      	str	r0, [sp, #44]	; 0x2c
 8010e54:	2800      	cmp	r0, #0
 8010e56:	f43f aeaf 	beq.w	8010bb8 <_strtod_l+0x488>
 8010e5a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	f001 f95b 	bl	8012118 <_Bfree>
 8010e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e64:	9316      	str	r3, [sp, #88]	; 0x58
 8010e66:	2e00      	cmp	r6, #0
 8010e68:	f300 808c 	bgt.w	8010f84 <_strtod_l+0x854>
 8010e6c:	9b08      	ldr	r3, [sp, #32]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	dd08      	ble.n	8010e84 <_strtod_l+0x754>
 8010e72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010e74:	9905      	ldr	r1, [sp, #20]
 8010e76:	4620      	mov	r0, r4
 8010e78:	f001 fb0e 	bl	8012498 <__pow5mult>
 8010e7c:	9005      	str	r0, [sp, #20]
 8010e7e:	2800      	cmp	r0, #0
 8010e80:	f43f ae9a 	beq.w	8010bb8 <_strtod_l+0x488>
 8010e84:	2f00      	cmp	r7, #0
 8010e86:	dd08      	ble.n	8010e9a <_strtod_l+0x76a>
 8010e88:	9905      	ldr	r1, [sp, #20]
 8010e8a:	463a      	mov	r2, r7
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	f001 fb5d 	bl	801254c <__lshift>
 8010e92:	9005      	str	r0, [sp, #20]
 8010e94:	2800      	cmp	r0, #0
 8010e96:	f43f ae8f 	beq.w	8010bb8 <_strtod_l+0x488>
 8010e9a:	f1ba 0f00 	cmp.w	sl, #0
 8010e9e:	dd08      	ble.n	8010eb2 <_strtod_l+0x782>
 8010ea0:	4659      	mov	r1, fp
 8010ea2:	4652      	mov	r2, sl
 8010ea4:	4620      	mov	r0, r4
 8010ea6:	f001 fb51 	bl	801254c <__lshift>
 8010eaa:	4683      	mov	fp, r0
 8010eac:	2800      	cmp	r0, #0
 8010eae:	f43f ae83 	beq.w	8010bb8 <_strtod_l+0x488>
 8010eb2:	9a05      	ldr	r2, [sp, #20]
 8010eb4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	f001 fbd0 	bl	801265c <__mdiff>
 8010ebc:	4605      	mov	r5, r0
 8010ebe:	2800      	cmp	r0, #0
 8010ec0:	f43f ae7a 	beq.w	8010bb8 <_strtod_l+0x488>
 8010ec4:	68c3      	ldr	r3, [r0, #12]
 8010ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ec8:	2300      	movs	r3, #0
 8010eca:	60c3      	str	r3, [r0, #12]
 8010ecc:	4659      	mov	r1, fp
 8010ece:	f001 fba9 	bl	8012624 <__mcmp>
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	da60      	bge.n	8010f98 <_strtod_l+0x868>
 8010ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ed8:	ea53 0308 	orrs.w	r3, r3, r8
 8010edc:	f040 8084 	bne.w	8010fe8 <_strtod_l+0x8b8>
 8010ee0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d17f      	bne.n	8010fe8 <_strtod_l+0x8b8>
 8010ee8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010eec:	0d1b      	lsrs	r3, r3, #20
 8010eee:	051b      	lsls	r3, r3, #20
 8010ef0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010ef4:	d978      	bls.n	8010fe8 <_strtod_l+0x8b8>
 8010ef6:	696b      	ldr	r3, [r5, #20]
 8010ef8:	b913      	cbnz	r3, 8010f00 <_strtod_l+0x7d0>
 8010efa:	692b      	ldr	r3, [r5, #16]
 8010efc:	2b01      	cmp	r3, #1
 8010efe:	dd73      	ble.n	8010fe8 <_strtod_l+0x8b8>
 8010f00:	4629      	mov	r1, r5
 8010f02:	2201      	movs	r2, #1
 8010f04:	4620      	mov	r0, r4
 8010f06:	f001 fb21 	bl	801254c <__lshift>
 8010f0a:	4659      	mov	r1, fp
 8010f0c:	4605      	mov	r5, r0
 8010f0e:	f001 fb89 	bl	8012624 <__mcmp>
 8010f12:	2800      	cmp	r0, #0
 8010f14:	dd68      	ble.n	8010fe8 <_strtod_l+0x8b8>
 8010f16:	9904      	ldr	r1, [sp, #16]
 8010f18:	4a54      	ldr	r2, [pc, #336]	; (801106c <_strtod_l+0x93c>)
 8010f1a:	464b      	mov	r3, r9
 8010f1c:	2900      	cmp	r1, #0
 8010f1e:	f000 8084 	beq.w	801102a <_strtod_l+0x8fa>
 8010f22:	ea02 0109 	and.w	r1, r2, r9
 8010f26:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010f2a:	dc7e      	bgt.n	801102a <_strtod_l+0x8fa>
 8010f2c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010f30:	f77f aeb3 	ble.w	8010c9a <_strtod_l+0x56a>
 8010f34:	4b4e      	ldr	r3, [pc, #312]	; (8011070 <_strtod_l+0x940>)
 8010f36:	4640      	mov	r0, r8
 8010f38:	4649      	mov	r1, r9
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	f7ef fb6c 	bl	8000618 <__aeabi_dmul>
 8010f40:	4b4a      	ldr	r3, [pc, #296]	; (801106c <_strtod_l+0x93c>)
 8010f42:	400b      	ands	r3, r1
 8010f44:	4680      	mov	r8, r0
 8010f46:	4689      	mov	r9, r1
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	f47f ae3f 	bne.w	8010bcc <_strtod_l+0x49c>
 8010f4e:	2322      	movs	r3, #34	; 0x22
 8010f50:	6023      	str	r3, [r4, #0]
 8010f52:	e63b      	b.n	8010bcc <_strtod_l+0x49c>
 8010f54:	f04f 32ff 	mov.w	r2, #4294967295
 8010f58:	fa02 f303 	lsl.w	r3, r2, r3
 8010f5c:	ea03 0808 	and.w	r8, r3, r8
 8010f60:	e6e8      	b.n	8010d34 <_strtod_l+0x604>
 8010f62:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010f66:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010f6a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010f6e:	36e2      	adds	r6, #226	; 0xe2
 8010f70:	fa01 f306 	lsl.w	r3, r1, r6
 8010f74:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010f78:	e748      	b.n	8010e0c <_strtod_l+0x6dc>
 8010f7a:	2100      	movs	r1, #0
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8010f82:	e743      	b.n	8010e0c <_strtod_l+0x6dc>
 8010f84:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010f86:	4632      	mov	r2, r6
 8010f88:	4620      	mov	r0, r4
 8010f8a:	f001 fadf 	bl	801254c <__lshift>
 8010f8e:	9016      	str	r0, [sp, #88]	; 0x58
 8010f90:	2800      	cmp	r0, #0
 8010f92:	f47f af6b 	bne.w	8010e6c <_strtod_l+0x73c>
 8010f96:	e60f      	b.n	8010bb8 <_strtod_l+0x488>
 8010f98:	46ca      	mov	sl, r9
 8010f9a:	d171      	bne.n	8011080 <_strtod_l+0x950>
 8010f9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010fa2:	b352      	cbz	r2, 8010ffa <_strtod_l+0x8ca>
 8010fa4:	4a33      	ldr	r2, [pc, #204]	; (8011074 <_strtod_l+0x944>)
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d12a      	bne.n	8011000 <_strtod_l+0x8d0>
 8010faa:	9b04      	ldr	r3, [sp, #16]
 8010fac:	4641      	mov	r1, r8
 8010fae:	b1fb      	cbz	r3, 8010ff0 <_strtod_l+0x8c0>
 8010fb0:	4b2e      	ldr	r3, [pc, #184]	; (801106c <_strtod_l+0x93c>)
 8010fb2:	ea09 0303 	and.w	r3, r9, r3
 8010fb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010fba:	f04f 32ff 	mov.w	r2, #4294967295
 8010fbe:	d81a      	bhi.n	8010ff6 <_strtod_l+0x8c6>
 8010fc0:	0d1b      	lsrs	r3, r3, #20
 8010fc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8010fca:	4299      	cmp	r1, r3
 8010fcc:	d118      	bne.n	8011000 <_strtod_l+0x8d0>
 8010fce:	4b2a      	ldr	r3, [pc, #168]	; (8011078 <_strtod_l+0x948>)
 8010fd0:	459a      	cmp	sl, r3
 8010fd2:	d102      	bne.n	8010fda <_strtod_l+0x8aa>
 8010fd4:	3101      	adds	r1, #1
 8010fd6:	f43f adef 	beq.w	8010bb8 <_strtod_l+0x488>
 8010fda:	4b24      	ldr	r3, [pc, #144]	; (801106c <_strtod_l+0x93c>)
 8010fdc:	ea0a 0303 	and.w	r3, sl, r3
 8010fe0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010fe4:	f04f 0800 	mov.w	r8, #0
 8010fe8:	9b04      	ldr	r3, [sp, #16]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d1a2      	bne.n	8010f34 <_strtod_l+0x804>
 8010fee:	e5ed      	b.n	8010bcc <_strtod_l+0x49c>
 8010ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ff4:	e7e9      	b.n	8010fca <_strtod_l+0x89a>
 8010ff6:	4613      	mov	r3, r2
 8010ff8:	e7e7      	b.n	8010fca <_strtod_l+0x89a>
 8010ffa:	ea53 0308 	orrs.w	r3, r3, r8
 8010ffe:	d08a      	beq.n	8010f16 <_strtod_l+0x7e6>
 8011000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011002:	b1e3      	cbz	r3, 801103e <_strtod_l+0x90e>
 8011004:	ea13 0f0a 	tst.w	r3, sl
 8011008:	d0ee      	beq.n	8010fe8 <_strtod_l+0x8b8>
 801100a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801100c:	9a04      	ldr	r2, [sp, #16]
 801100e:	4640      	mov	r0, r8
 8011010:	4649      	mov	r1, r9
 8011012:	b1c3      	cbz	r3, 8011046 <_strtod_l+0x916>
 8011014:	f7ff fb6e 	bl	80106f4 <sulp>
 8011018:	4602      	mov	r2, r0
 801101a:	460b      	mov	r3, r1
 801101c:	ec51 0b18 	vmov	r0, r1, d8
 8011020:	f7ef f944 	bl	80002ac <__adddf3>
 8011024:	4680      	mov	r8, r0
 8011026:	4689      	mov	r9, r1
 8011028:	e7de      	b.n	8010fe8 <_strtod_l+0x8b8>
 801102a:	4013      	ands	r3, r2
 801102c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011030:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011034:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011038:	f04f 38ff 	mov.w	r8, #4294967295
 801103c:	e7d4      	b.n	8010fe8 <_strtod_l+0x8b8>
 801103e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011040:	ea13 0f08 	tst.w	r3, r8
 8011044:	e7e0      	b.n	8011008 <_strtod_l+0x8d8>
 8011046:	f7ff fb55 	bl	80106f4 <sulp>
 801104a:	4602      	mov	r2, r0
 801104c:	460b      	mov	r3, r1
 801104e:	ec51 0b18 	vmov	r0, r1, d8
 8011052:	f7ef f929 	bl	80002a8 <__aeabi_dsub>
 8011056:	2200      	movs	r2, #0
 8011058:	2300      	movs	r3, #0
 801105a:	4680      	mov	r8, r0
 801105c:	4689      	mov	r9, r1
 801105e:	f7ef fd43 	bl	8000ae8 <__aeabi_dcmpeq>
 8011062:	2800      	cmp	r0, #0
 8011064:	d0c0      	beq.n	8010fe8 <_strtod_l+0x8b8>
 8011066:	e618      	b.n	8010c9a <_strtod_l+0x56a>
 8011068:	fffffc02 	.word	0xfffffc02
 801106c:	7ff00000 	.word	0x7ff00000
 8011070:	39500000 	.word	0x39500000
 8011074:	000fffff 	.word	0x000fffff
 8011078:	7fefffff 	.word	0x7fefffff
 801107c:	080141d8 	.word	0x080141d8
 8011080:	4659      	mov	r1, fp
 8011082:	4628      	mov	r0, r5
 8011084:	f001 fc3e 	bl	8012904 <__ratio>
 8011088:	ec57 6b10 	vmov	r6, r7, d0
 801108c:	ee10 0a10 	vmov	r0, s0
 8011090:	2200      	movs	r2, #0
 8011092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011096:	4639      	mov	r1, r7
 8011098:	f7ef fd3a 	bl	8000b10 <__aeabi_dcmple>
 801109c:	2800      	cmp	r0, #0
 801109e:	d071      	beq.n	8011184 <_strtod_l+0xa54>
 80110a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d17c      	bne.n	80111a0 <_strtod_l+0xa70>
 80110a6:	f1b8 0f00 	cmp.w	r8, #0
 80110aa:	d15a      	bne.n	8011162 <_strtod_l+0xa32>
 80110ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d15d      	bne.n	8011170 <_strtod_l+0xa40>
 80110b4:	4b90      	ldr	r3, [pc, #576]	; (80112f8 <_strtod_l+0xbc8>)
 80110b6:	2200      	movs	r2, #0
 80110b8:	4630      	mov	r0, r6
 80110ba:	4639      	mov	r1, r7
 80110bc:	f7ef fd1e 	bl	8000afc <__aeabi_dcmplt>
 80110c0:	2800      	cmp	r0, #0
 80110c2:	d15c      	bne.n	801117e <_strtod_l+0xa4e>
 80110c4:	4630      	mov	r0, r6
 80110c6:	4639      	mov	r1, r7
 80110c8:	4b8c      	ldr	r3, [pc, #560]	; (80112fc <_strtod_l+0xbcc>)
 80110ca:	2200      	movs	r2, #0
 80110cc:	f7ef faa4 	bl	8000618 <__aeabi_dmul>
 80110d0:	4606      	mov	r6, r0
 80110d2:	460f      	mov	r7, r1
 80110d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80110d8:	9606      	str	r6, [sp, #24]
 80110da:	9307      	str	r3, [sp, #28]
 80110dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80110e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80110e4:	4b86      	ldr	r3, [pc, #536]	; (8011300 <_strtod_l+0xbd0>)
 80110e6:	ea0a 0303 	and.w	r3, sl, r3
 80110ea:	930d      	str	r3, [sp, #52]	; 0x34
 80110ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110ee:	4b85      	ldr	r3, [pc, #532]	; (8011304 <_strtod_l+0xbd4>)
 80110f0:	429a      	cmp	r2, r3
 80110f2:	f040 8090 	bne.w	8011216 <_strtod_l+0xae6>
 80110f6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80110fa:	ec49 8b10 	vmov	d0, r8, r9
 80110fe:	f001 fb37 	bl	8012770 <__ulp>
 8011102:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011106:	ec51 0b10 	vmov	r0, r1, d0
 801110a:	f7ef fa85 	bl	8000618 <__aeabi_dmul>
 801110e:	4642      	mov	r2, r8
 8011110:	464b      	mov	r3, r9
 8011112:	f7ef f8cb 	bl	80002ac <__adddf3>
 8011116:	460b      	mov	r3, r1
 8011118:	4979      	ldr	r1, [pc, #484]	; (8011300 <_strtod_l+0xbd0>)
 801111a:	4a7b      	ldr	r2, [pc, #492]	; (8011308 <_strtod_l+0xbd8>)
 801111c:	4019      	ands	r1, r3
 801111e:	4291      	cmp	r1, r2
 8011120:	4680      	mov	r8, r0
 8011122:	d944      	bls.n	80111ae <_strtod_l+0xa7e>
 8011124:	ee18 2a90 	vmov	r2, s17
 8011128:	4b78      	ldr	r3, [pc, #480]	; (801130c <_strtod_l+0xbdc>)
 801112a:	429a      	cmp	r2, r3
 801112c:	d104      	bne.n	8011138 <_strtod_l+0xa08>
 801112e:	ee18 3a10 	vmov	r3, s16
 8011132:	3301      	adds	r3, #1
 8011134:	f43f ad40 	beq.w	8010bb8 <_strtod_l+0x488>
 8011138:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801130c <_strtod_l+0xbdc>
 801113c:	f04f 38ff 	mov.w	r8, #4294967295
 8011140:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011142:	4620      	mov	r0, r4
 8011144:	f000 ffe8 	bl	8012118 <_Bfree>
 8011148:	9905      	ldr	r1, [sp, #20]
 801114a:	4620      	mov	r0, r4
 801114c:	f000 ffe4 	bl	8012118 <_Bfree>
 8011150:	4659      	mov	r1, fp
 8011152:	4620      	mov	r0, r4
 8011154:	f000 ffe0 	bl	8012118 <_Bfree>
 8011158:	4629      	mov	r1, r5
 801115a:	4620      	mov	r0, r4
 801115c:	f000 ffdc 	bl	8012118 <_Bfree>
 8011160:	e609      	b.n	8010d76 <_strtod_l+0x646>
 8011162:	f1b8 0f01 	cmp.w	r8, #1
 8011166:	d103      	bne.n	8011170 <_strtod_l+0xa40>
 8011168:	f1b9 0f00 	cmp.w	r9, #0
 801116c:	f43f ad95 	beq.w	8010c9a <_strtod_l+0x56a>
 8011170:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80112c8 <_strtod_l+0xb98>
 8011174:	4f60      	ldr	r7, [pc, #384]	; (80112f8 <_strtod_l+0xbc8>)
 8011176:	ed8d 7b06 	vstr	d7, [sp, #24]
 801117a:	2600      	movs	r6, #0
 801117c:	e7ae      	b.n	80110dc <_strtod_l+0x9ac>
 801117e:	4f5f      	ldr	r7, [pc, #380]	; (80112fc <_strtod_l+0xbcc>)
 8011180:	2600      	movs	r6, #0
 8011182:	e7a7      	b.n	80110d4 <_strtod_l+0x9a4>
 8011184:	4b5d      	ldr	r3, [pc, #372]	; (80112fc <_strtod_l+0xbcc>)
 8011186:	4630      	mov	r0, r6
 8011188:	4639      	mov	r1, r7
 801118a:	2200      	movs	r2, #0
 801118c:	f7ef fa44 	bl	8000618 <__aeabi_dmul>
 8011190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011192:	4606      	mov	r6, r0
 8011194:	460f      	mov	r7, r1
 8011196:	2b00      	cmp	r3, #0
 8011198:	d09c      	beq.n	80110d4 <_strtod_l+0x9a4>
 801119a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801119e:	e79d      	b.n	80110dc <_strtod_l+0x9ac>
 80111a0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80112d0 <_strtod_l+0xba0>
 80111a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80111a8:	ec57 6b17 	vmov	r6, r7, d7
 80111ac:	e796      	b.n	80110dc <_strtod_l+0x9ac>
 80111ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80111b2:	9b04      	ldr	r3, [sp, #16]
 80111b4:	46ca      	mov	sl, r9
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d1c2      	bne.n	8011140 <_strtod_l+0xa10>
 80111ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80111be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80111c0:	0d1b      	lsrs	r3, r3, #20
 80111c2:	051b      	lsls	r3, r3, #20
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d1bb      	bne.n	8011140 <_strtod_l+0xa10>
 80111c8:	4630      	mov	r0, r6
 80111ca:	4639      	mov	r1, r7
 80111cc:	f7ef fd5c 	bl	8000c88 <__aeabi_d2lz>
 80111d0:	f7ef f9f4 	bl	80005bc <__aeabi_l2d>
 80111d4:	4602      	mov	r2, r0
 80111d6:	460b      	mov	r3, r1
 80111d8:	4630      	mov	r0, r6
 80111da:	4639      	mov	r1, r7
 80111dc:	f7ef f864 	bl	80002a8 <__aeabi_dsub>
 80111e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80111e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80111e6:	ea43 0308 	orr.w	r3, r3, r8
 80111ea:	4313      	orrs	r3, r2
 80111ec:	4606      	mov	r6, r0
 80111ee:	460f      	mov	r7, r1
 80111f0:	d054      	beq.n	801129c <_strtod_l+0xb6c>
 80111f2:	a339      	add	r3, pc, #228	; (adr r3, 80112d8 <_strtod_l+0xba8>)
 80111f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f8:	f7ef fc80 	bl	8000afc <__aeabi_dcmplt>
 80111fc:	2800      	cmp	r0, #0
 80111fe:	f47f ace5 	bne.w	8010bcc <_strtod_l+0x49c>
 8011202:	a337      	add	r3, pc, #220	; (adr r3, 80112e0 <_strtod_l+0xbb0>)
 8011204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011208:	4630      	mov	r0, r6
 801120a:	4639      	mov	r1, r7
 801120c:	f7ef fc94 	bl	8000b38 <__aeabi_dcmpgt>
 8011210:	2800      	cmp	r0, #0
 8011212:	d095      	beq.n	8011140 <_strtod_l+0xa10>
 8011214:	e4da      	b.n	8010bcc <_strtod_l+0x49c>
 8011216:	9b04      	ldr	r3, [sp, #16]
 8011218:	b333      	cbz	r3, 8011268 <_strtod_l+0xb38>
 801121a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801121c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011220:	d822      	bhi.n	8011268 <_strtod_l+0xb38>
 8011222:	a331      	add	r3, pc, #196	; (adr r3, 80112e8 <_strtod_l+0xbb8>)
 8011224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011228:	4630      	mov	r0, r6
 801122a:	4639      	mov	r1, r7
 801122c:	f7ef fc70 	bl	8000b10 <__aeabi_dcmple>
 8011230:	b1a0      	cbz	r0, 801125c <_strtod_l+0xb2c>
 8011232:	4639      	mov	r1, r7
 8011234:	4630      	mov	r0, r6
 8011236:	f7ef fc9f 	bl	8000b78 <__aeabi_d2uiz>
 801123a:	2801      	cmp	r0, #1
 801123c:	bf38      	it	cc
 801123e:	2001      	movcc	r0, #1
 8011240:	f7ef f970 	bl	8000524 <__aeabi_ui2d>
 8011244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011246:	4606      	mov	r6, r0
 8011248:	460f      	mov	r7, r1
 801124a:	bb23      	cbnz	r3, 8011296 <_strtod_l+0xb66>
 801124c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011250:	9010      	str	r0, [sp, #64]	; 0x40
 8011252:	9311      	str	r3, [sp, #68]	; 0x44
 8011254:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011258:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801125c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801125e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011260:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011264:	1a9b      	subs	r3, r3, r2
 8011266:	930f      	str	r3, [sp, #60]	; 0x3c
 8011268:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801126c:	eeb0 0a48 	vmov.f32	s0, s16
 8011270:	eef0 0a68 	vmov.f32	s1, s17
 8011274:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011278:	f001 fa7a 	bl	8012770 <__ulp>
 801127c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011280:	ec53 2b10 	vmov	r2, r3, d0
 8011284:	f7ef f9c8 	bl	8000618 <__aeabi_dmul>
 8011288:	ec53 2b18 	vmov	r2, r3, d8
 801128c:	f7ef f80e 	bl	80002ac <__adddf3>
 8011290:	4680      	mov	r8, r0
 8011292:	4689      	mov	r9, r1
 8011294:	e78d      	b.n	80111b2 <_strtod_l+0xa82>
 8011296:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801129a:	e7db      	b.n	8011254 <_strtod_l+0xb24>
 801129c:	a314      	add	r3, pc, #80	; (adr r3, 80112f0 <_strtod_l+0xbc0>)
 801129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a2:	f7ef fc2b 	bl	8000afc <__aeabi_dcmplt>
 80112a6:	e7b3      	b.n	8011210 <_strtod_l+0xae0>
 80112a8:	2300      	movs	r3, #0
 80112aa:	930a      	str	r3, [sp, #40]	; 0x28
 80112ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80112ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80112b0:	6013      	str	r3, [r2, #0]
 80112b2:	f7ff ba7c 	b.w	80107ae <_strtod_l+0x7e>
 80112b6:	2a65      	cmp	r2, #101	; 0x65
 80112b8:	f43f ab75 	beq.w	80109a6 <_strtod_l+0x276>
 80112bc:	2a45      	cmp	r2, #69	; 0x45
 80112be:	f43f ab72 	beq.w	80109a6 <_strtod_l+0x276>
 80112c2:	2301      	movs	r3, #1
 80112c4:	f7ff bbaa 	b.w	8010a1c <_strtod_l+0x2ec>
 80112c8:	00000000 	.word	0x00000000
 80112cc:	bff00000 	.word	0xbff00000
 80112d0:	00000000 	.word	0x00000000
 80112d4:	3ff00000 	.word	0x3ff00000
 80112d8:	94a03595 	.word	0x94a03595
 80112dc:	3fdfffff 	.word	0x3fdfffff
 80112e0:	35afe535 	.word	0x35afe535
 80112e4:	3fe00000 	.word	0x3fe00000
 80112e8:	ffc00000 	.word	0xffc00000
 80112ec:	41dfffff 	.word	0x41dfffff
 80112f0:	94a03595 	.word	0x94a03595
 80112f4:	3fcfffff 	.word	0x3fcfffff
 80112f8:	3ff00000 	.word	0x3ff00000
 80112fc:	3fe00000 	.word	0x3fe00000
 8011300:	7ff00000 	.word	0x7ff00000
 8011304:	7fe00000 	.word	0x7fe00000
 8011308:	7c9fffff 	.word	0x7c9fffff
 801130c:	7fefffff 	.word	0x7fefffff

08011310 <strtof>:
 8011310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011314:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80113d8 <strtof+0xc8>
 8011318:	4b2a      	ldr	r3, [pc, #168]	; (80113c4 <strtof+0xb4>)
 801131a:	460a      	mov	r2, r1
 801131c:	ed2d 8b02 	vpush	{d8}
 8011320:	4601      	mov	r1, r0
 8011322:	f8d8 0000 	ldr.w	r0, [r8]
 8011326:	f7ff fa03 	bl	8010730 <_strtod_l>
 801132a:	ec55 4b10 	vmov	r4, r5, d0
 801132e:	ee10 2a10 	vmov	r2, s0
 8011332:	ee10 0a10 	vmov	r0, s0
 8011336:	462b      	mov	r3, r5
 8011338:	4629      	mov	r1, r5
 801133a:	f7ef fc07 	bl	8000b4c <__aeabi_dcmpun>
 801133e:	b190      	cbz	r0, 8011366 <strtof+0x56>
 8011340:	2d00      	cmp	r5, #0
 8011342:	4821      	ldr	r0, [pc, #132]	; (80113c8 <strtof+0xb8>)
 8011344:	da09      	bge.n	801135a <strtof+0x4a>
 8011346:	f000 faeb 	bl	8011920 <nanf>
 801134a:	eeb1 8a40 	vneg.f32	s16, s0
 801134e:	eeb0 0a48 	vmov.f32	s0, s16
 8011352:	ecbd 8b02 	vpop	{d8}
 8011356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801135a:	ecbd 8b02 	vpop	{d8}
 801135e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011362:	f000 badd 	b.w	8011920 <nanf>
 8011366:	4620      	mov	r0, r4
 8011368:	4629      	mov	r1, r5
 801136a:	f7ef fc25 	bl	8000bb8 <__aeabi_d2f>
 801136e:	ee08 0a10 	vmov	s16, r0
 8011372:	eddf 7a16 	vldr	s15, [pc, #88]	; 80113cc <strtof+0xbc>
 8011376:	eeb0 7ac8 	vabs.f32	s14, s16
 801137a:	eeb4 7a67 	vcmp.f32	s14, s15
 801137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011382:	dd11      	ble.n	80113a8 <strtof+0x98>
 8011384:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8011388:	4b11      	ldr	r3, [pc, #68]	; (80113d0 <strtof+0xc0>)
 801138a:	f04f 32ff 	mov.w	r2, #4294967295
 801138e:	4620      	mov	r0, r4
 8011390:	4639      	mov	r1, r7
 8011392:	f7ef fbdb 	bl	8000b4c <__aeabi_dcmpun>
 8011396:	b980      	cbnz	r0, 80113ba <strtof+0xaa>
 8011398:	4b0d      	ldr	r3, [pc, #52]	; (80113d0 <strtof+0xc0>)
 801139a:	f04f 32ff 	mov.w	r2, #4294967295
 801139e:	4620      	mov	r0, r4
 80113a0:	4639      	mov	r1, r7
 80113a2:	f7ef fbb5 	bl	8000b10 <__aeabi_dcmple>
 80113a6:	b940      	cbnz	r0, 80113ba <strtof+0xaa>
 80113a8:	ee18 3a10 	vmov	r3, s16
 80113ac:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80113b0:	d1cd      	bne.n	801134e <strtof+0x3e>
 80113b2:	4b08      	ldr	r3, [pc, #32]	; (80113d4 <strtof+0xc4>)
 80113b4:	402b      	ands	r3, r5
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d0c9      	beq.n	801134e <strtof+0x3e>
 80113ba:	f8d8 3000 	ldr.w	r3, [r8]
 80113be:	2222      	movs	r2, #34	; 0x22
 80113c0:	601a      	str	r2, [r3, #0]
 80113c2:	e7c4      	b.n	801134e <strtof+0x3e>
 80113c4:	20000120 	.word	0x20000120
 80113c8:	0801455a 	.word	0x0801455a
 80113cc:	7f7fffff 	.word	0x7f7fffff
 80113d0:	7fefffff 	.word	0x7fefffff
 80113d4:	7ff00000 	.word	0x7ff00000
 80113d8:	200002d8 	.word	0x200002d8

080113dc <_strtoul_l.constprop.0>:
 80113dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113e0:	4f36      	ldr	r7, [pc, #216]	; (80114bc <_strtoul_l.constprop.0+0xe0>)
 80113e2:	4686      	mov	lr, r0
 80113e4:	460d      	mov	r5, r1
 80113e6:	4628      	mov	r0, r5
 80113e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80113ec:	5d3e      	ldrb	r6, [r7, r4]
 80113ee:	f016 0608 	ands.w	r6, r6, #8
 80113f2:	d1f8      	bne.n	80113e6 <_strtoul_l.constprop.0+0xa>
 80113f4:	2c2d      	cmp	r4, #45	; 0x2d
 80113f6:	d130      	bne.n	801145a <_strtoul_l.constprop.0+0x7e>
 80113f8:	782c      	ldrb	r4, [r5, #0]
 80113fa:	2601      	movs	r6, #1
 80113fc:	1c85      	adds	r5, r0, #2
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d057      	beq.n	80114b2 <_strtoul_l.constprop.0+0xd6>
 8011402:	2b10      	cmp	r3, #16
 8011404:	d109      	bne.n	801141a <_strtoul_l.constprop.0+0x3e>
 8011406:	2c30      	cmp	r4, #48	; 0x30
 8011408:	d107      	bne.n	801141a <_strtoul_l.constprop.0+0x3e>
 801140a:	7828      	ldrb	r0, [r5, #0]
 801140c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011410:	2858      	cmp	r0, #88	; 0x58
 8011412:	d149      	bne.n	80114a8 <_strtoul_l.constprop.0+0xcc>
 8011414:	786c      	ldrb	r4, [r5, #1]
 8011416:	2310      	movs	r3, #16
 8011418:	3502      	adds	r5, #2
 801141a:	f04f 38ff 	mov.w	r8, #4294967295
 801141e:	2700      	movs	r7, #0
 8011420:	fbb8 f8f3 	udiv	r8, r8, r3
 8011424:	fb03 f908 	mul.w	r9, r3, r8
 8011428:	ea6f 0909 	mvn.w	r9, r9
 801142c:	4638      	mov	r0, r7
 801142e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011432:	f1bc 0f09 	cmp.w	ip, #9
 8011436:	d815      	bhi.n	8011464 <_strtoul_l.constprop.0+0x88>
 8011438:	4664      	mov	r4, ip
 801143a:	42a3      	cmp	r3, r4
 801143c:	dd23      	ble.n	8011486 <_strtoul_l.constprop.0+0xaa>
 801143e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8011442:	d007      	beq.n	8011454 <_strtoul_l.constprop.0+0x78>
 8011444:	4580      	cmp	r8, r0
 8011446:	d31b      	bcc.n	8011480 <_strtoul_l.constprop.0+0xa4>
 8011448:	d101      	bne.n	801144e <_strtoul_l.constprop.0+0x72>
 801144a:	45a1      	cmp	r9, r4
 801144c:	db18      	blt.n	8011480 <_strtoul_l.constprop.0+0xa4>
 801144e:	fb00 4003 	mla	r0, r0, r3, r4
 8011452:	2701      	movs	r7, #1
 8011454:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011458:	e7e9      	b.n	801142e <_strtoul_l.constprop.0+0x52>
 801145a:	2c2b      	cmp	r4, #43	; 0x2b
 801145c:	bf04      	itt	eq
 801145e:	782c      	ldrbeq	r4, [r5, #0]
 8011460:	1c85      	addeq	r5, r0, #2
 8011462:	e7cc      	b.n	80113fe <_strtoul_l.constprop.0+0x22>
 8011464:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011468:	f1bc 0f19 	cmp.w	ip, #25
 801146c:	d801      	bhi.n	8011472 <_strtoul_l.constprop.0+0x96>
 801146e:	3c37      	subs	r4, #55	; 0x37
 8011470:	e7e3      	b.n	801143a <_strtoul_l.constprop.0+0x5e>
 8011472:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011476:	f1bc 0f19 	cmp.w	ip, #25
 801147a:	d804      	bhi.n	8011486 <_strtoul_l.constprop.0+0xaa>
 801147c:	3c57      	subs	r4, #87	; 0x57
 801147e:	e7dc      	b.n	801143a <_strtoul_l.constprop.0+0x5e>
 8011480:	f04f 37ff 	mov.w	r7, #4294967295
 8011484:	e7e6      	b.n	8011454 <_strtoul_l.constprop.0+0x78>
 8011486:	1c7b      	adds	r3, r7, #1
 8011488:	d106      	bne.n	8011498 <_strtoul_l.constprop.0+0xbc>
 801148a:	2322      	movs	r3, #34	; 0x22
 801148c:	f8ce 3000 	str.w	r3, [lr]
 8011490:	4638      	mov	r0, r7
 8011492:	b932      	cbnz	r2, 80114a2 <_strtoul_l.constprop.0+0xc6>
 8011494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011498:	b106      	cbz	r6, 801149c <_strtoul_l.constprop.0+0xc0>
 801149a:	4240      	negs	r0, r0
 801149c:	2a00      	cmp	r2, #0
 801149e:	d0f9      	beq.n	8011494 <_strtoul_l.constprop.0+0xb8>
 80114a0:	b107      	cbz	r7, 80114a4 <_strtoul_l.constprop.0+0xc8>
 80114a2:	1e69      	subs	r1, r5, #1
 80114a4:	6011      	str	r1, [r2, #0]
 80114a6:	e7f5      	b.n	8011494 <_strtoul_l.constprop.0+0xb8>
 80114a8:	2430      	movs	r4, #48	; 0x30
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d1b5      	bne.n	801141a <_strtoul_l.constprop.0+0x3e>
 80114ae:	2308      	movs	r3, #8
 80114b0:	e7b3      	b.n	801141a <_strtoul_l.constprop.0+0x3e>
 80114b2:	2c30      	cmp	r4, #48	; 0x30
 80114b4:	d0a9      	beq.n	801140a <_strtoul_l.constprop.0+0x2e>
 80114b6:	230a      	movs	r3, #10
 80114b8:	e7af      	b.n	801141a <_strtoul_l.constprop.0+0x3e>
 80114ba:	bf00      	nop
 80114bc:	08014201 	.word	0x08014201

080114c0 <strtoul>:
 80114c0:	4613      	mov	r3, r2
 80114c2:	460a      	mov	r2, r1
 80114c4:	4601      	mov	r1, r0
 80114c6:	4802      	ldr	r0, [pc, #8]	; (80114d0 <strtoul+0x10>)
 80114c8:	6800      	ldr	r0, [r0, #0]
 80114ca:	f7ff bf87 	b.w	80113dc <_strtoul_l.constprop.0>
 80114ce:	bf00      	nop
 80114d0:	200002d8 	.word	0x200002d8

080114d4 <std>:
 80114d4:	2300      	movs	r3, #0
 80114d6:	b510      	push	{r4, lr}
 80114d8:	4604      	mov	r4, r0
 80114da:	e9c0 3300 	strd	r3, r3, [r0]
 80114de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80114e2:	6083      	str	r3, [r0, #8]
 80114e4:	8181      	strh	r1, [r0, #12]
 80114e6:	6643      	str	r3, [r0, #100]	; 0x64
 80114e8:	81c2      	strh	r2, [r0, #14]
 80114ea:	6183      	str	r3, [r0, #24]
 80114ec:	4619      	mov	r1, r3
 80114ee:	2208      	movs	r2, #8
 80114f0:	305c      	adds	r0, #92	; 0x5c
 80114f2:	f000 f92d 	bl	8011750 <memset>
 80114f6:	4b0d      	ldr	r3, [pc, #52]	; (801152c <std+0x58>)
 80114f8:	6263      	str	r3, [r4, #36]	; 0x24
 80114fa:	4b0d      	ldr	r3, [pc, #52]	; (8011530 <std+0x5c>)
 80114fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80114fe:	4b0d      	ldr	r3, [pc, #52]	; (8011534 <std+0x60>)
 8011500:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011502:	4b0d      	ldr	r3, [pc, #52]	; (8011538 <std+0x64>)
 8011504:	6323      	str	r3, [r4, #48]	; 0x30
 8011506:	4b0d      	ldr	r3, [pc, #52]	; (801153c <std+0x68>)
 8011508:	6224      	str	r4, [r4, #32]
 801150a:	429c      	cmp	r4, r3
 801150c:	d006      	beq.n	801151c <std+0x48>
 801150e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011512:	4294      	cmp	r4, r2
 8011514:	d002      	beq.n	801151c <std+0x48>
 8011516:	33d0      	adds	r3, #208	; 0xd0
 8011518:	429c      	cmp	r4, r3
 801151a:	d105      	bne.n	8011528 <std+0x54>
 801151c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011524:	f000 b9da 	b.w	80118dc <__retarget_lock_init_recursive>
 8011528:	bd10      	pop	{r4, pc}
 801152a:	bf00      	nop
 801152c:	08011659 	.word	0x08011659
 8011530:	0801167b 	.word	0x0801167b
 8011534:	080116b3 	.word	0x080116b3
 8011538:	080116d7 	.word	0x080116d7
 801153c:	2000293c 	.word	0x2000293c

08011540 <stdio_exit_handler>:
 8011540:	4a02      	ldr	r2, [pc, #8]	; (801154c <stdio_exit_handler+0xc>)
 8011542:	4903      	ldr	r1, [pc, #12]	; (8011550 <stdio_exit_handler+0x10>)
 8011544:	4803      	ldr	r0, [pc, #12]	; (8011554 <stdio_exit_handler+0x14>)
 8011546:	f000 b869 	b.w	801161c <_fwalk_sglue>
 801154a:	bf00      	nop
 801154c:	20000114 	.word	0x20000114
 8011550:	080130e9 	.word	0x080130e9
 8011554:	2000028c 	.word	0x2000028c

08011558 <cleanup_stdio>:
 8011558:	6841      	ldr	r1, [r0, #4]
 801155a:	4b0c      	ldr	r3, [pc, #48]	; (801158c <cleanup_stdio+0x34>)
 801155c:	4299      	cmp	r1, r3
 801155e:	b510      	push	{r4, lr}
 8011560:	4604      	mov	r4, r0
 8011562:	d001      	beq.n	8011568 <cleanup_stdio+0x10>
 8011564:	f001 fdc0 	bl	80130e8 <_fflush_r>
 8011568:	68a1      	ldr	r1, [r4, #8]
 801156a:	4b09      	ldr	r3, [pc, #36]	; (8011590 <cleanup_stdio+0x38>)
 801156c:	4299      	cmp	r1, r3
 801156e:	d002      	beq.n	8011576 <cleanup_stdio+0x1e>
 8011570:	4620      	mov	r0, r4
 8011572:	f001 fdb9 	bl	80130e8 <_fflush_r>
 8011576:	68e1      	ldr	r1, [r4, #12]
 8011578:	4b06      	ldr	r3, [pc, #24]	; (8011594 <cleanup_stdio+0x3c>)
 801157a:	4299      	cmp	r1, r3
 801157c:	d004      	beq.n	8011588 <cleanup_stdio+0x30>
 801157e:	4620      	mov	r0, r4
 8011580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011584:	f001 bdb0 	b.w	80130e8 <_fflush_r>
 8011588:	bd10      	pop	{r4, pc}
 801158a:	bf00      	nop
 801158c:	2000293c 	.word	0x2000293c
 8011590:	200029a4 	.word	0x200029a4
 8011594:	20002a0c 	.word	0x20002a0c

08011598 <global_stdio_init.part.0>:
 8011598:	b510      	push	{r4, lr}
 801159a:	4b0b      	ldr	r3, [pc, #44]	; (80115c8 <global_stdio_init.part.0+0x30>)
 801159c:	4c0b      	ldr	r4, [pc, #44]	; (80115cc <global_stdio_init.part.0+0x34>)
 801159e:	4a0c      	ldr	r2, [pc, #48]	; (80115d0 <global_stdio_init.part.0+0x38>)
 80115a0:	601a      	str	r2, [r3, #0]
 80115a2:	4620      	mov	r0, r4
 80115a4:	2200      	movs	r2, #0
 80115a6:	2104      	movs	r1, #4
 80115a8:	f7ff ff94 	bl	80114d4 <std>
 80115ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80115b0:	2201      	movs	r2, #1
 80115b2:	2109      	movs	r1, #9
 80115b4:	f7ff ff8e 	bl	80114d4 <std>
 80115b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80115bc:	2202      	movs	r2, #2
 80115be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115c2:	2112      	movs	r1, #18
 80115c4:	f7ff bf86 	b.w	80114d4 <std>
 80115c8:	20002a74 	.word	0x20002a74
 80115cc:	2000293c 	.word	0x2000293c
 80115d0:	08011541 	.word	0x08011541

080115d4 <__sfp_lock_acquire>:
 80115d4:	4801      	ldr	r0, [pc, #4]	; (80115dc <__sfp_lock_acquire+0x8>)
 80115d6:	f000 b982 	b.w	80118de <__retarget_lock_acquire_recursive>
 80115da:	bf00      	nop
 80115dc:	20002a7d 	.word	0x20002a7d

080115e0 <__sfp_lock_release>:
 80115e0:	4801      	ldr	r0, [pc, #4]	; (80115e8 <__sfp_lock_release+0x8>)
 80115e2:	f000 b97d 	b.w	80118e0 <__retarget_lock_release_recursive>
 80115e6:	bf00      	nop
 80115e8:	20002a7d 	.word	0x20002a7d

080115ec <__sinit>:
 80115ec:	b510      	push	{r4, lr}
 80115ee:	4604      	mov	r4, r0
 80115f0:	f7ff fff0 	bl	80115d4 <__sfp_lock_acquire>
 80115f4:	6a23      	ldr	r3, [r4, #32]
 80115f6:	b11b      	cbz	r3, 8011600 <__sinit+0x14>
 80115f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115fc:	f7ff bff0 	b.w	80115e0 <__sfp_lock_release>
 8011600:	4b04      	ldr	r3, [pc, #16]	; (8011614 <__sinit+0x28>)
 8011602:	6223      	str	r3, [r4, #32]
 8011604:	4b04      	ldr	r3, [pc, #16]	; (8011618 <__sinit+0x2c>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d1f5      	bne.n	80115f8 <__sinit+0xc>
 801160c:	f7ff ffc4 	bl	8011598 <global_stdio_init.part.0>
 8011610:	e7f2      	b.n	80115f8 <__sinit+0xc>
 8011612:	bf00      	nop
 8011614:	08011559 	.word	0x08011559
 8011618:	20002a74 	.word	0x20002a74

0801161c <_fwalk_sglue>:
 801161c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011620:	4607      	mov	r7, r0
 8011622:	4688      	mov	r8, r1
 8011624:	4614      	mov	r4, r2
 8011626:	2600      	movs	r6, #0
 8011628:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801162c:	f1b9 0901 	subs.w	r9, r9, #1
 8011630:	d505      	bpl.n	801163e <_fwalk_sglue+0x22>
 8011632:	6824      	ldr	r4, [r4, #0]
 8011634:	2c00      	cmp	r4, #0
 8011636:	d1f7      	bne.n	8011628 <_fwalk_sglue+0xc>
 8011638:	4630      	mov	r0, r6
 801163a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801163e:	89ab      	ldrh	r3, [r5, #12]
 8011640:	2b01      	cmp	r3, #1
 8011642:	d907      	bls.n	8011654 <_fwalk_sglue+0x38>
 8011644:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011648:	3301      	adds	r3, #1
 801164a:	d003      	beq.n	8011654 <_fwalk_sglue+0x38>
 801164c:	4629      	mov	r1, r5
 801164e:	4638      	mov	r0, r7
 8011650:	47c0      	blx	r8
 8011652:	4306      	orrs	r6, r0
 8011654:	3568      	adds	r5, #104	; 0x68
 8011656:	e7e9      	b.n	801162c <_fwalk_sglue+0x10>

08011658 <__sread>:
 8011658:	b510      	push	{r4, lr}
 801165a:	460c      	mov	r4, r1
 801165c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011660:	f000 f8de 	bl	8011820 <_read_r>
 8011664:	2800      	cmp	r0, #0
 8011666:	bfab      	itete	ge
 8011668:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801166a:	89a3      	ldrhlt	r3, [r4, #12]
 801166c:	181b      	addge	r3, r3, r0
 801166e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011672:	bfac      	ite	ge
 8011674:	6563      	strge	r3, [r4, #84]	; 0x54
 8011676:	81a3      	strhlt	r3, [r4, #12]
 8011678:	bd10      	pop	{r4, pc}

0801167a <__swrite>:
 801167a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801167e:	461f      	mov	r7, r3
 8011680:	898b      	ldrh	r3, [r1, #12]
 8011682:	05db      	lsls	r3, r3, #23
 8011684:	4605      	mov	r5, r0
 8011686:	460c      	mov	r4, r1
 8011688:	4616      	mov	r6, r2
 801168a:	d505      	bpl.n	8011698 <__swrite+0x1e>
 801168c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011690:	2302      	movs	r3, #2
 8011692:	2200      	movs	r2, #0
 8011694:	f000 f8b2 	bl	80117fc <_lseek_r>
 8011698:	89a3      	ldrh	r3, [r4, #12]
 801169a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801169e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80116a2:	81a3      	strh	r3, [r4, #12]
 80116a4:	4632      	mov	r2, r6
 80116a6:	463b      	mov	r3, r7
 80116a8:	4628      	mov	r0, r5
 80116aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116ae:	f000 b8d9 	b.w	8011864 <_write_r>

080116b2 <__sseek>:
 80116b2:	b510      	push	{r4, lr}
 80116b4:	460c      	mov	r4, r1
 80116b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116ba:	f000 f89f 	bl	80117fc <_lseek_r>
 80116be:	1c43      	adds	r3, r0, #1
 80116c0:	89a3      	ldrh	r3, [r4, #12]
 80116c2:	bf15      	itete	ne
 80116c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80116c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80116ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80116ce:	81a3      	strheq	r3, [r4, #12]
 80116d0:	bf18      	it	ne
 80116d2:	81a3      	strhne	r3, [r4, #12]
 80116d4:	bd10      	pop	{r4, pc}

080116d6 <__sclose>:
 80116d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116da:	f000 b87f 	b.w	80117dc <_close_r>

080116de <_vsniprintf_r>:
 80116de:	b530      	push	{r4, r5, lr}
 80116e0:	4614      	mov	r4, r2
 80116e2:	2c00      	cmp	r4, #0
 80116e4:	b09b      	sub	sp, #108	; 0x6c
 80116e6:	4605      	mov	r5, r0
 80116e8:	461a      	mov	r2, r3
 80116ea:	da05      	bge.n	80116f8 <_vsniprintf_r+0x1a>
 80116ec:	238b      	movs	r3, #139	; 0x8b
 80116ee:	6003      	str	r3, [r0, #0]
 80116f0:	f04f 30ff 	mov.w	r0, #4294967295
 80116f4:	b01b      	add	sp, #108	; 0x6c
 80116f6:	bd30      	pop	{r4, r5, pc}
 80116f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80116fc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011700:	bf14      	ite	ne
 8011702:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011706:	4623      	moveq	r3, r4
 8011708:	9302      	str	r3, [sp, #8]
 801170a:	9305      	str	r3, [sp, #20]
 801170c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011710:	9100      	str	r1, [sp, #0]
 8011712:	9104      	str	r1, [sp, #16]
 8011714:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011718:	4669      	mov	r1, sp
 801171a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801171c:	f001 f9d0 	bl	8012ac0 <_svfiprintf_r>
 8011720:	1c43      	adds	r3, r0, #1
 8011722:	bfbc      	itt	lt
 8011724:	238b      	movlt	r3, #139	; 0x8b
 8011726:	602b      	strlt	r3, [r5, #0]
 8011728:	2c00      	cmp	r4, #0
 801172a:	d0e3      	beq.n	80116f4 <_vsniprintf_r+0x16>
 801172c:	9b00      	ldr	r3, [sp, #0]
 801172e:	2200      	movs	r2, #0
 8011730:	701a      	strb	r2, [r3, #0]
 8011732:	e7df      	b.n	80116f4 <_vsniprintf_r+0x16>

08011734 <vsniprintf>:
 8011734:	b507      	push	{r0, r1, r2, lr}
 8011736:	9300      	str	r3, [sp, #0]
 8011738:	4613      	mov	r3, r2
 801173a:	460a      	mov	r2, r1
 801173c:	4601      	mov	r1, r0
 801173e:	4803      	ldr	r0, [pc, #12]	; (801174c <vsniprintf+0x18>)
 8011740:	6800      	ldr	r0, [r0, #0]
 8011742:	f7ff ffcc 	bl	80116de <_vsniprintf_r>
 8011746:	b003      	add	sp, #12
 8011748:	f85d fb04 	ldr.w	pc, [sp], #4
 801174c:	200002d8 	.word	0x200002d8

08011750 <memset>:
 8011750:	4402      	add	r2, r0
 8011752:	4603      	mov	r3, r0
 8011754:	4293      	cmp	r3, r2
 8011756:	d100      	bne.n	801175a <memset+0xa>
 8011758:	4770      	bx	lr
 801175a:	f803 1b01 	strb.w	r1, [r3], #1
 801175e:	e7f9      	b.n	8011754 <memset+0x4>

08011760 <strncmp>:
 8011760:	b510      	push	{r4, lr}
 8011762:	b16a      	cbz	r2, 8011780 <strncmp+0x20>
 8011764:	3901      	subs	r1, #1
 8011766:	1884      	adds	r4, r0, r2
 8011768:	f810 2b01 	ldrb.w	r2, [r0], #1
 801176c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011770:	429a      	cmp	r2, r3
 8011772:	d103      	bne.n	801177c <strncmp+0x1c>
 8011774:	42a0      	cmp	r0, r4
 8011776:	d001      	beq.n	801177c <strncmp+0x1c>
 8011778:	2a00      	cmp	r2, #0
 801177a:	d1f5      	bne.n	8011768 <strncmp+0x8>
 801177c:	1ad0      	subs	r0, r2, r3
 801177e:	bd10      	pop	{r4, pc}
 8011780:	4610      	mov	r0, r2
 8011782:	e7fc      	b.n	801177e <strncmp+0x1e>

08011784 <__strtok_r>:
 8011784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011786:	b908      	cbnz	r0, 801178c <__strtok_r+0x8>
 8011788:	6810      	ldr	r0, [r2, #0]
 801178a:	b188      	cbz	r0, 80117b0 <__strtok_r+0x2c>
 801178c:	4604      	mov	r4, r0
 801178e:	4620      	mov	r0, r4
 8011790:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011794:	460f      	mov	r7, r1
 8011796:	f817 6b01 	ldrb.w	r6, [r7], #1
 801179a:	b91e      	cbnz	r6, 80117a4 <__strtok_r+0x20>
 801179c:	b965      	cbnz	r5, 80117b8 <__strtok_r+0x34>
 801179e:	6015      	str	r5, [r2, #0]
 80117a0:	4628      	mov	r0, r5
 80117a2:	e005      	b.n	80117b0 <__strtok_r+0x2c>
 80117a4:	42b5      	cmp	r5, r6
 80117a6:	d1f6      	bne.n	8011796 <__strtok_r+0x12>
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d1f0      	bne.n	801178e <__strtok_r+0xa>
 80117ac:	6014      	str	r4, [r2, #0]
 80117ae:	7003      	strb	r3, [r0, #0]
 80117b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117b2:	461c      	mov	r4, r3
 80117b4:	e00c      	b.n	80117d0 <__strtok_r+0x4c>
 80117b6:	b915      	cbnz	r5, 80117be <__strtok_r+0x3a>
 80117b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80117bc:	460e      	mov	r6, r1
 80117be:	f816 5b01 	ldrb.w	r5, [r6], #1
 80117c2:	42ab      	cmp	r3, r5
 80117c4:	d1f7      	bne.n	80117b6 <__strtok_r+0x32>
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d0f3      	beq.n	80117b2 <__strtok_r+0x2e>
 80117ca:	2300      	movs	r3, #0
 80117cc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80117d0:	6014      	str	r4, [r2, #0]
 80117d2:	e7ed      	b.n	80117b0 <__strtok_r+0x2c>

080117d4 <strtok_r>:
 80117d4:	2301      	movs	r3, #1
 80117d6:	f7ff bfd5 	b.w	8011784 <__strtok_r>
	...

080117dc <_close_r>:
 80117dc:	b538      	push	{r3, r4, r5, lr}
 80117de:	4d06      	ldr	r5, [pc, #24]	; (80117f8 <_close_r+0x1c>)
 80117e0:	2300      	movs	r3, #0
 80117e2:	4604      	mov	r4, r0
 80117e4:	4608      	mov	r0, r1
 80117e6:	602b      	str	r3, [r5, #0]
 80117e8:	f7ef ff05 	bl	80015f6 <_close>
 80117ec:	1c43      	adds	r3, r0, #1
 80117ee:	d102      	bne.n	80117f6 <_close_r+0x1a>
 80117f0:	682b      	ldr	r3, [r5, #0]
 80117f2:	b103      	cbz	r3, 80117f6 <_close_r+0x1a>
 80117f4:	6023      	str	r3, [r4, #0]
 80117f6:	bd38      	pop	{r3, r4, r5, pc}
 80117f8:	20002a78 	.word	0x20002a78

080117fc <_lseek_r>:
 80117fc:	b538      	push	{r3, r4, r5, lr}
 80117fe:	4d07      	ldr	r5, [pc, #28]	; (801181c <_lseek_r+0x20>)
 8011800:	4604      	mov	r4, r0
 8011802:	4608      	mov	r0, r1
 8011804:	4611      	mov	r1, r2
 8011806:	2200      	movs	r2, #0
 8011808:	602a      	str	r2, [r5, #0]
 801180a:	461a      	mov	r2, r3
 801180c:	f7ef ff1a 	bl	8001644 <_lseek>
 8011810:	1c43      	adds	r3, r0, #1
 8011812:	d102      	bne.n	801181a <_lseek_r+0x1e>
 8011814:	682b      	ldr	r3, [r5, #0]
 8011816:	b103      	cbz	r3, 801181a <_lseek_r+0x1e>
 8011818:	6023      	str	r3, [r4, #0]
 801181a:	bd38      	pop	{r3, r4, r5, pc}
 801181c:	20002a78 	.word	0x20002a78

08011820 <_read_r>:
 8011820:	b538      	push	{r3, r4, r5, lr}
 8011822:	4d07      	ldr	r5, [pc, #28]	; (8011840 <_read_r+0x20>)
 8011824:	4604      	mov	r4, r0
 8011826:	4608      	mov	r0, r1
 8011828:	4611      	mov	r1, r2
 801182a:	2200      	movs	r2, #0
 801182c:	602a      	str	r2, [r5, #0]
 801182e:	461a      	mov	r2, r3
 8011830:	f7ef fea8 	bl	8001584 <_read>
 8011834:	1c43      	adds	r3, r0, #1
 8011836:	d102      	bne.n	801183e <_read_r+0x1e>
 8011838:	682b      	ldr	r3, [r5, #0]
 801183a:	b103      	cbz	r3, 801183e <_read_r+0x1e>
 801183c:	6023      	str	r3, [r4, #0]
 801183e:	bd38      	pop	{r3, r4, r5, pc}
 8011840:	20002a78 	.word	0x20002a78

08011844 <_sbrk_r>:
 8011844:	b538      	push	{r3, r4, r5, lr}
 8011846:	4d06      	ldr	r5, [pc, #24]	; (8011860 <_sbrk_r+0x1c>)
 8011848:	2300      	movs	r3, #0
 801184a:	4604      	mov	r4, r0
 801184c:	4608      	mov	r0, r1
 801184e:	602b      	str	r3, [r5, #0]
 8011850:	f7ef ff06 	bl	8001660 <_sbrk>
 8011854:	1c43      	adds	r3, r0, #1
 8011856:	d102      	bne.n	801185e <_sbrk_r+0x1a>
 8011858:	682b      	ldr	r3, [r5, #0]
 801185a:	b103      	cbz	r3, 801185e <_sbrk_r+0x1a>
 801185c:	6023      	str	r3, [r4, #0]
 801185e:	bd38      	pop	{r3, r4, r5, pc}
 8011860:	20002a78 	.word	0x20002a78

08011864 <_write_r>:
 8011864:	b538      	push	{r3, r4, r5, lr}
 8011866:	4d07      	ldr	r5, [pc, #28]	; (8011884 <_write_r+0x20>)
 8011868:	4604      	mov	r4, r0
 801186a:	4608      	mov	r0, r1
 801186c:	4611      	mov	r1, r2
 801186e:	2200      	movs	r2, #0
 8011870:	602a      	str	r2, [r5, #0]
 8011872:	461a      	mov	r2, r3
 8011874:	f7ef fea3 	bl	80015be <_write>
 8011878:	1c43      	adds	r3, r0, #1
 801187a:	d102      	bne.n	8011882 <_write_r+0x1e>
 801187c:	682b      	ldr	r3, [r5, #0]
 801187e:	b103      	cbz	r3, 8011882 <_write_r+0x1e>
 8011880:	6023      	str	r3, [r4, #0]
 8011882:	bd38      	pop	{r3, r4, r5, pc}
 8011884:	20002a78 	.word	0x20002a78

08011888 <__errno>:
 8011888:	4b01      	ldr	r3, [pc, #4]	; (8011890 <__errno+0x8>)
 801188a:	6818      	ldr	r0, [r3, #0]
 801188c:	4770      	bx	lr
 801188e:	bf00      	nop
 8011890:	200002d8 	.word	0x200002d8

08011894 <__libc_init_array>:
 8011894:	b570      	push	{r4, r5, r6, lr}
 8011896:	4d0d      	ldr	r5, [pc, #52]	; (80118cc <__libc_init_array+0x38>)
 8011898:	4c0d      	ldr	r4, [pc, #52]	; (80118d0 <__libc_init_array+0x3c>)
 801189a:	1b64      	subs	r4, r4, r5
 801189c:	10a4      	asrs	r4, r4, #2
 801189e:	2600      	movs	r6, #0
 80118a0:	42a6      	cmp	r6, r4
 80118a2:	d109      	bne.n	80118b8 <__libc_init_array+0x24>
 80118a4:	4d0b      	ldr	r5, [pc, #44]	; (80118d4 <__libc_init_array+0x40>)
 80118a6:	4c0c      	ldr	r4, [pc, #48]	; (80118d8 <__libc_init_array+0x44>)
 80118a8:	f001 ff86 	bl	80137b8 <_init>
 80118ac:	1b64      	subs	r4, r4, r5
 80118ae:	10a4      	asrs	r4, r4, #2
 80118b0:	2600      	movs	r6, #0
 80118b2:	42a6      	cmp	r6, r4
 80118b4:	d105      	bne.n	80118c2 <__libc_init_array+0x2e>
 80118b6:	bd70      	pop	{r4, r5, r6, pc}
 80118b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80118bc:	4798      	blx	r3
 80118be:	3601      	adds	r6, #1
 80118c0:	e7ee      	b.n	80118a0 <__libc_init_array+0xc>
 80118c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80118c6:	4798      	blx	r3
 80118c8:	3601      	adds	r6, #1
 80118ca:	e7f2      	b.n	80118b2 <__libc_init_array+0x1e>
 80118cc:	08014564 	.word	0x08014564
 80118d0:	08014564 	.word	0x08014564
 80118d4:	08014564 	.word	0x08014564
 80118d8:	08014568 	.word	0x08014568

080118dc <__retarget_lock_init_recursive>:
 80118dc:	4770      	bx	lr

080118de <__retarget_lock_acquire_recursive>:
 80118de:	4770      	bx	lr

080118e0 <__retarget_lock_release_recursive>:
 80118e0:	4770      	bx	lr

080118e2 <strcpy>:
 80118e2:	4603      	mov	r3, r0
 80118e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80118e8:	f803 2b01 	strb.w	r2, [r3], #1
 80118ec:	2a00      	cmp	r2, #0
 80118ee:	d1f9      	bne.n	80118e4 <strcpy+0x2>
 80118f0:	4770      	bx	lr

080118f2 <memcpy>:
 80118f2:	440a      	add	r2, r1
 80118f4:	4291      	cmp	r1, r2
 80118f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80118fa:	d100      	bne.n	80118fe <memcpy+0xc>
 80118fc:	4770      	bx	lr
 80118fe:	b510      	push	{r4, lr}
 8011900:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011904:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011908:	4291      	cmp	r1, r2
 801190a:	d1f9      	bne.n	8011900 <memcpy+0xe>
 801190c:	bd10      	pop	{r4, pc}
	...

08011910 <nan>:
 8011910:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011918 <nan+0x8>
 8011914:	4770      	bx	lr
 8011916:	bf00      	nop
 8011918:	00000000 	.word	0x00000000
 801191c:	7ff80000 	.word	0x7ff80000

08011920 <nanf>:
 8011920:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011928 <nanf+0x8>
 8011924:	4770      	bx	lr
 8011926:	bf00      	nop
 8011928:	7fc00000 	.word	0x7fc00000

0801192c <_free_r>:
 801192c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801192e:	2900      	cmp	r1, #0
 8011930:	d044      	beq.n	80119bc <_free_r+0x90>
 8011932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011936:	9001      	str	r0, [sp, #4]
 8011938:	2b00      	cmp	r3, #0
 801193a:	f1a1 0404 	sub.w	r4, r1, #4
 801193e:	bfb8      	it	lt
 8011940:	18e4      	addlt	r4, r4, r3
 8011942:	f7fe fecb 	bl	80106dc <__malloc_lock>
 8011946:	4a1e      	ldr	r2, [pc, #120]	; (80119c0 <_free_r+0x94>)
 8011948:	9801      	ldr	r0, [sp, #4]
 801194a:	6813      	ldr	r3, [r2, #0]
 801194c:	b933      	cbnz	r3, 801195c <_free_r+0x30>
 801194e:	6063      	str	r3, [r4, #4]
 8011950:	6014      	str	r4, [r2, #0]
 8011952:	b003      	add	sp, #12
 8011954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011958:	f7fe bec6 	b.w	80106e8 <__malloc_unlock>
 801195c:	42a3      	cmp	r3, r4
 801195e:	d908      	bls.n	8011972 <_free_r+0x46>
 8011960:	6825      	ldr	r5, [r4, #0]
 8011962:	1961      	adds	r1, r4, r5
 8011964:	428b      	cmp	r3, r1
 8011966:	bf01      	itttt	eq
 8011968:	6819      	ldreq	r1, [r3, #0]
 801196a:	685b      	ldreq	r3, [r3, #4]
 801196c:	1949      	addeq	r1, r1, r5
 801196e:	6021      	streq	r1, [r4, #0]
 8011970:	e7ed      	b.n	801194e <_free_r+0x22>
 8011972:	461a      	mov	r2, r3
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	b10b      	cbz	r3, 801197c <_free_r+0x50>
 8011978:	42a3      	cmp	r3, r4
 801197a:	d9fa      	bls.n	8011972 <_free_r+0x46>
 801197c:	6811      	ldr	r1, [r2, #0]
 801197e:	1855      	adds	r5, r2, r1
 8011980:	42a5      	cmp	r5, r4
 8011982:	d10b      	bne.n	801199c <_free_r+0x70>
 8011984:	6824      	ldr	r4, [r4, #0]
 8011986:	4421      	add	r1, r4
 8011988:	1854      	adds	r4, r2, r1
 801198a:	42a3      	cmp	r3, r4
 801198c:	6011      	str	r1, [r2, #0]
 801198e:	d1e0      	bne.n	8011952 <_free_r+0x26>
 8011990:	681c      	ldr	r4, [r3, #0]
 8011992:	685b      	ldr	r3, [r3, #4]
 8011994:	6053      	str	r3, [r2, #4]
 8011996:	440c      	add	r4, r1
 8011998:	6014      	str	r4, [r2, #0]
 801199a:	e7da      	b.n	8011952 <_free_r+0x26>
 801199c:	d902      	bls.n	80119a4 <_free_r+0x78>
 801199e:	230c      	movs	r3, #12
 80119a0:	6003      	str	r3, [r0, #0]
 80119a2:	e7d6      	b.n	8011952 <_free_r+0x26>
 80119a4:	6825      	ldr	r5, [r4, #0]
 80119a6:	1961      	adds	r1, r4, r5
 80119a8:	428b      	cmp	r3, r1
 80119aa:	bf04      	itt	eq
 80119ac:	6819      	ldreq	r1, [r3, #0]
 80119ae:	685b      	ldreq	r3, [r3, #4]
 80119b0:	6063      	str	r3, [r4, #4]
 80119b2:	bf04      	itt	eq
 80119b4:	1949      	addeq	r1, r1, r5
 80119b6:	6021      	streq	r1, [r4, #0]
 80119b8:	6054      	str	r4, [r2, #4]
 80119ba:	e7ca      	b.n	8011952 <_free_r+0x26>
 80119bc:	b003      	add	sp, #12
 80119be:	bd30      	pop	{r4, r5, pc}
 80119c0:	20002934 	.word	0x20002934

080119c4 <rshift>:
 80119c4:	6903      	ldr	r3, [r0, #16]
 80119c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80119ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80119ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80119d2:	f100 0414 	add.w	r4, r0, #20
 80119d6:	dd45      	ble.n	8011a64 <rshift+0xa0>
 80119d8:	f011 011f 	ands.w	r1, r1, #31
 80119dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80119e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80119e4:	d10c      	bne.n	8011a00 <rshift+0x3c>
 80119e6:	f100 0710 	add.w	r7, r0, #16
 80119ea:	4629      	mov	r1, r5
 80119ec:	42b1      	cmp	r1, r6
 80119ee:	d334      	bcc.n	8011a5a <rshift+0x96>
 80119f0:	1a9b      	subs	r3, r3, r2
 80119f2:	009b      	lsls	r3, r3, #2
 80119f4:	1eea      	subs	r2, r5, #3
 80119f6:	4296      	cmp	r6, r2
 80119f8:	bf38      	it	cc
 80119fa:	2300      	movcc	r3, #0
 80119fc:	4423      	add	r3, r4
 80119fe:	e015      	b.n	8011a2c <rshift+0x68>
 8011a00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011a04:	f1c1 0820 	rsb	r8, r1, #32
 8011a08:	40cf      	lsrs	r7, r1
 8011a0a:	f105 0e04 	add.w	lr, r5, #4
 8011a0e:	46a1      	mov	r9, r4
 8011a10:	4576      	cmp	r6, lr
 8011a12:	46f4      	mov	ip, lr
 8011a14:	d815      	bhi.n	8011a42 <rshift+0x7e>
 8011a16:	1a9a      	subs	r2, r3, r2
 8011a18:	0092      	lsls	r2, r2, #2
 8011a1a:	3a04      	subs	r2, #4
 8011a1c:	3501      	adds	r5, #1
 8011a1e:	42ae      	cmp	r6, r5
 8011a20:	bf38      	it	cc
 8011a22:	2200      	movcc	r2, #0
 8011a24:	18a3      	adds	r3, r4, r2
 8011a26:	50a7      	str	r7, [r4, r2]
 8011a28:	b107      	cbz	r7, 8011a2c <rshift+0x68>
 8011a2a:	3304      	adds	r3, #4
 8011a2c:	1b1a      	subs	r2, r3, r4
 8011a2e:	42a3      	cmp	r3, r4
 8011a30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011a34:	bf08      	it	eq
 8011a36:	2300      	moveq	r3, #0
 8011a38:	6102      	str	r2, [r0, #16]
 8011a3a:	bf08      	it	eq
 8011a3c:	6143      	streq	r3, [r0, #20]
 8011a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a42:	f8dc c000 	ldr.w	ip, [ip]
 8011a46:	fa0c fc08 	lsl.w	ip, ip, r8
 8011a4a:	ea4c 0707 	orr.w	r7, ip, r7
 8011a4e:	f849 7b04 	str.w	r7, [r9], #4
 8011a52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011a56:	40cf      	lsrs	r7, r1
 8011a58:	e7da      	b.n	8011a10 <rshift+0x4c>
 8011a5a:	f851 cb04 	ldr.w	ip, [r1], #4
 8011a5e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011a62:	e7c3      	b.n	80119ec <rshift+0x28>
 8011a64:	4623      	mov	r3, r4
 8011a66:	e7e1      	b.n	8011a2c <rshift+0x68>

08011a68 <__hexdig_fun>:
 8011a68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011a6c:	2b09      	cmp	r3, #9
 8011a6e:	d802      	bhi.n	8011a76 <__hexdig_fun+0xe>
 8011a70:	3820      	subs	r0, #32
 8011a72:	b2c0      	uxtb	r0, r0
 8011a74:	4770      	bx	lr
 8011a76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011a7a:	2b05      	cmp	r3, #5
 8011a7c:	d801      	bhi.n	8011a82 <__hexdig_fun+0x1a>
 8011a7e:	3847      	subs	r0, #71	; 0x47
 8011a80:	e7f7      	b.n	8011a72 <__hexdig_fun+0xa>
 8011a82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011a86:	2b05      	cmp	r3, #5
 8011a88:	d801      	bhi.n	8011a8e <__hexdig_fun+0x26>
 8011a8a:	3827      	subs	r0, #39	; 0x27
 8011a8c:	e7f1      	b.n	8011a72 <__hexdig_fun+0xa>
 8011a8e:	2000      	movs	r0, #0
 8011a90:	4770      	bx	lr
	...

08011a94 <__gethex>:
 8011a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a98:	4617      	mov	r7, r2
 8011a9a:	680a      	ldr	r2, [r1, #0]
 8011a9c:	b085      	sub	sp, #20
 8011a9e:	f102 0b02 	add.w	fp, r2, #2
 8011aa2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011aa6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011aaa:	4681      	mov	r9, r0
 8011aac:	468a      	mov	sl, r1
 8011aae:	9302      	str	r3, [sp, #8]
 8011ab0:	32fe      	adds	r2, #254	; 0xfe
 8011ab2:	eb02 030b 	add.w	r3, r2, fp
 8011ab6:	46d8      	mov	r8, fp
 8011ab8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8011abc:	9301      	str	r3, [sp, #4]
 8011abe:	2830      	cmp	r0, #48	; 0x30
 8011ac0:	d0f7      	beq.n	8011ab2 <__gethex+0x1e>
 8011ac2:	f7ff ffd1 	bl	8011a68 <__hexdig_fun>
 8011ac6:	4604      	mov	r4, r0
 8011ac8:	2800      	cmp	r0, #0
 8011aca:	d138      	bne.n	8011b3e <__gethex+0xaa>
 8011acc:	49a7      	ldr	r1, [pc, #668]	; (8011d6c <__gethex+0x2d8>)
 8011ace:	2201      	movs	r2, #1
 8011ad0:	4640      	mov	r0, r8
 8011ad2:	f7ff fe45 	bl	8011760 <strncmp>
 8011ad6:	4606      	mov	r6, r0
 8011ad8:	2800      	cmp	r0, #0
 8011ada:	d169      	bne.n	8011bb0 <__gethex+0x11c>
 8011adc:	f898 0001 	ldrb.w	r0, [r8, #1]
 8011ae0:	465d      	mov	r5, fp
 8011ae2:	f7ff ffc1 	bl	8011a68 <__hexdig_fun>
 8011ae6:	2800      	cmp	r0, #0
 8011ae8:	d064      	beq.n	8011bb4 <__gethex+0x120>
 8011aea:	465a      	mov	r2, fp
 8011aec:	7810      	ldrb	r0, [r2, #0]
 8011aee:	2830      	cmp	r0, #48	; 0x30
 8011af0:	4690      	mov	r8, r2
 8011af2:	f102 0201 	add.w	r2, r2, #1
 8011af6:	d0f9      	beq.n	8011aec <__gethex+0x58>
 8011af8:	f7ff ffb6 	bl	8011a68 <__hexdig_fun>
 8011afc:	2301      	movs	r3, #1
 8011afe:	fab0 f480 	clz	r4, r0
 8011b02:	0964      	lsrs	r4, r4, #5
 8011b04:	465e      	mov	r6, fp
 8011b06:	9301      	str	r3, [sp, #4]
 8011b08:	4642      	mov	r2, r8
 8011b0a:	4615      	mov	r5, r2
 8011b0c:	3201      	adds	r2, #1
 8011b0e:	7828      	ldrb	r0, [r5, #0]
 8011b10:	f7ff ffaa 	bl	8011a68 <__hexdig_fun>
 8011b14:	2800      	cmp	r0, #0
 8011b16:	d1f8      	bne.n	8011b0a <__gethex+0x76>
 8011b18:	4994      	ldr	r1, [pc, #592]	; (8011d6c <__gethex+0x2d8>)
 8011b1a:	2201      	movs	r2, #1
 8011b1c:	4628      	mov	r0, r5
 8011b1e:	f7ff fe1f 	bl	8011760 <strncmp>
 8011b22:	b978      	cbnz	r0, 8011b44 <__gethex+0xb0>
 8011b24:	b946      	cbnz	r6, 8011b38 <__gethex+0xa4>
 8011b26:	1c6e      	adds	r6, r5, #1
 8011b28:	4632      	mov	r2, r6
 8011b2a:	4615      	mov	r5, r2
 8011b2c:	3201      	adds	r2, #1
 8011b2e:	7828      	ldrb	r0, [r5, #0]
 8011b30:	f7ff ff9a 	bl	8011a68 <__hexdig_fun>
 8011b34:	2800      	cmp	r0, #0
 8011b36:	d1f8      	bne.n	8011b2a <__gethex+0x96>
 8011b38:	1b73      	subs	r3, r6, r5
 8011b3a:	009e      	lsls	r6, r3, #2
 8011b3c:	e004      	b.n	8011b48 <__gethex+0xb4>
 8011b3e:	2400      	movs	r4, #0
 8011b40:	4626      	mov	r6, r4
 8011b42:	e7e1      	b.n	8011b08 <__gethex+0x74>
 8011b44:	2e00      	cmp	r6, #0
 8011b46:	d1f7      	bne.n	8011b38 <__gethex+0xa4>
 8011b48:	782b      	ldrb	r3, [r5, #0]
 8011b4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011b4e:	2b50      	cmp	r3, #80	; 0x50
 8011b50:	d13d      	bne.n	8011bce <__gethex+0x13a>
 8011b52:	786b      	ldrb	r3, [r5, #1]
 8011b54:	2b2b      	cmp	r3, #43	; 0x2b
 8011b56:	d02f      	beq.n	8011bb8 <__gethex+0x124>
 8011b58:	2b2d      	cmp	r3, #45	; 0x2d
 8011b5a:	d031      	beq.n	8011bc0 <__gethex+0x12c>
 8011b5c:	1c69      	adds	r1, r5, #1
 8011b5e:	f04f 0b00 	mov.w	fp, #0
 8011b62:	7808      	ldrb	r0, [r1, #0]
 8011b64:	f7ff ff80 	bl	8011a68 <__hexdig_fun>
 8011b68:	1e42      	subs	r2, r0, #1
 8011b6a:	b2d2      	uxtb	r2, r2
 8011b6c:	2a18      	cmp	r2, #24
 8011b6e:	d82e      	bhi.n	8011bce <__gethex+0x13a>
 8011b70:	f1a0 0210 	sub.w	r2, r0, #16
 8011b74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011b78:	f7ff ff76 	bl	8011a68 <__hexdig_fun>
 8011b7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011b80:	fa5f fc8c 	uxtb.w	ip, ip
 8011b84:	f1bc 0f18 	cmp.w	ip, #24
 8011b88:	d91d      	bls.n	8011bc6 <__gethex+0x132>
 8011b8a:	f1bb 0f00 	cmp.w	fp, #0
 8011b8e:	d000      	beq.n	8011b92 <__gethex+0xfe>
 8011b90:	4252      	negs	r2, r2
 8011b92:	4416      	add	r6, r2
 8011b94:	f8ca 1000 	str.w	r1, [sl]
 8011b98:	b1dc      	cbz	r4, 8011bd2 <__gethex+0x13e>
 8011b9a:	9b01      	ldr	r3, [sp, #4]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	bf14      	ite	ne
 8011ba0:	f04f 0800 	movne.w	r8, #0
 8011ba4:	f04f 0806 	moveq.w	r8, #6
 8011ba8:	4640      	mov	r0, r8
 8011baa:	b005      	add	sp, #20
 8011bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bb0:	4645      	mov	r5, r8
 8011bb2:	4626      	mov	r6, r4
 8011bb4:	2401      	movs	r4, #1
 8011bb6:	e7c7      	b.n	8011b48 <__gethex+0xb4>
 8011bb8:	f04f 0b00 	mov.w	fp, #0
 8011bbc:	1ca9      	adds	r1, r5, #2
 8011bbe:	e7d0      	b.n	8011b62 <__gethex+0xce>
 8011bc0:	f04f 0b01 	mov.w	fp, #1
 8011bc4:	e7fa      	b.n	8011bbc <__gethex+0x128>
 8011bc6:	230a      	movs	r3, #10
 8011bc8:	fb03 0002 	mla	r0, r3, r2, r0
 8011bcc:	e7d0      	b.n	8011b70 <__gethex+0xdc>
 8011bce:	4629      	mov	r1, r5
 8011bd0:	e7e0      	b.n	8011b94 <__gethex+0x100>
 8011bd2:	eba5 0308 	sub.w	r3, r5, r8
 8011bd6:	3b01      	subs	r3, #1
 8011bd8:	4621      	mov	r1, r4
 8011bda:	2b07      	cmp	r3, #7
 8011bdc:	dc0a      	bgt.n	8011bf4 <__gethex+0x160>
 8011bde:	4648      	mov	r0, r9
 8011be0:	f000 fa5a 	bl	8012098 <_Balloc>
 8011be4:	4604      	mov	r4, r0
 8011be6:	b940      	cbnz	r0, 8011bfa <__gethex+0x166>
 8011be8:	4b61      	ldr	r3, [pc, #388]	; (8011d70 <__gethex+0x2dc>)
 8011bea:	4602      	mov	r2, r0
 8011bec:	21e4      	movs	r1, #228	; 0xe4
 8011bee:	4861      	ldr	r0, [pc, #388]	; (8011d74 <__gethex+0x2e0>)
 8011bf0:	f001 fabc 	bl	801316c <__assert_func>
 8011bf4:	3101      	adds	r1, #1
 8011bf6:	105b      	asrs	r3, r3, #1
 8011bf8:	e7ef      	b.n	8011bda <__gethex+0x146>
 8011bfa:	f100 0a14 	add.w	sl, r0, #20
 8011bfe:	2300      	movs	r3, #0
 8011c00:	495a      	ldr	r1, [pc, #360]	; (8011d6c <__gethex+0x2d8>)
 8011c02:	f8cd a004 	str.w	sl, [sp, #4]
 8011c06:	469b      	mov	fp, r3
 8011c08:	45a8      	cmp	r8, r5
 8011c0a:	d342      	bcc.n	8011c92 <__gethex+0x1fe>
 8011c0c:	9801      	ldr	r0, [sp, #4]
 8011c0e:	f840 bb04 	str.w	fp, [r0], #4
 8011c12:	eba0 000a 	sub.w	r0, r0, sl
 8011c16:	1080      	asrs	r0, r0, #2
 8011c18:	6120      	str	r0, [r4, #16]
 8011c1a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8011c1e:	4658      	mov	r0, fp
 8011c20:	f000 fb2c 	bl	801227c <__hi0bits>
 8011c24:	683d      	ldr	r5, [r7, #0]
 8011c26:	eba8 0000 	sub.w	r0, r8, r0
 8011c2a:	42a8      	cmp	r0, r5
 8011c2c:	dd59      	ble.n	8011ce2 <__gethex+0x24e>
 8011c2e:	eba0 0805 	sub.w	r8, r0, r5
 8011c32:	4641      	mov	r1, r8
 8011c34:	4620      	mov	r0, r4
 8011c36:	f000 febb 	bl	80129b0 <__any_on>
 8011c3a:	4683      	mov	fp, r0
 8011c3c:	b1b8      	cbz	r0, 8011c6e <__gethex+0x1da>
 8011c3e:	f108 33ff 	add.w	r3, r8, #4294967295
 8011c42:	1159      	asrs	r1, r3, #5
 8011c44:	f003 021f 	and.w	r2, r3, #31
 8011c48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011c4c:	f04f 0b01 	mov.w	fp, #1
 8011c50:	fa0b f202 	lsl.w	r2, fp, r2
 8011c54:	420a      	tst	r2, r1
 8011c56:	d00a      	beq.n	8011c6e <__gethex+0x1da>
 8011c58:	455b      	cmp	r3, fp
 8011c5a:	dd06      	ble.n	8011c6a <__gethex+0x1d6>
 8011c5c:	f1a8 0102 	sub.w	r1, r8, #2
 8011c60:	4620      	mov	r0, r4
 8011c62:	f000 fea5 	bl	80129b0 <__any_on>
 8011c66:	2800      	cmp	r0, #0
 8011c68:	d138      	bne.n	8011cdc <__gethex+0x248>
 8011c6a:	f04f 0b02 	mov.w	fp, #2
 8011c6e:	4641      	mov	r1, r8
 8011c70:	4620      	mov	r0, r4
 8011c72:	f7ff fea7 	bl	80119c4 <rshift>
 8011c76:	4446      	add	r6, r8
 8011c78:	68bb      	ldr	r3, [r7, #8]
 8011c7a:	42b3      	cmp	r3, r6
 8011c7c:	da41      	bge.n	8011d02 <__gethex+0x26e>
 8011c7e:	4621      	mov	r1, r4
 8011c80:	4648      	mov	r0, r9
 8011c82:	f000 fa49 	bl	8012118 <_Bfree>
 8011c86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011c88:	2300      	movs	r3, #0
 8011c8a:	6013      	str	r3, [r2, #0]
 8011c8c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8011c90:	e78a      	b.n	8011ba8 <__gethex+0x114>
 8011c92:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8011c96:	2a2e      	cmp	r2, #46	; 0x2e
 8011c98:	d014      	beq.n	8011cc4 <__gethex+0x230>
 8011c9a:	2b20      	cmp	r3, #32
 8011c9c:	d106      	bne.n	8011cac <__gethex+0x218>
 8011c9e:	9b01      	ldr	r3, [sp, #4]
 8011ca0:	f843 bb04 	str.w	fp, [r3], #4
 8011ca4:	f04f 0b00 	mov.w	fp, #0
 8011ca8:	9301      	str	r3, [sp, #4]
 8011caa:	465b      	mov	r3, fp
 8011cac:	7828      	ldrb	r0, [r5, #0]
 8011cae:	9303      	str	r3, [sp, #12]
 8011cb0:	f7ff feda 	bl	8011a68 <__hexdig_fun>
 8011cb4:	9b03      	ldr	r3, [sp, #12]
 8011cb6:	f000 000f 	and.w	r0, r0, #15
 8011cba:	4098      	lsls	r0, r3
 8011cbc:	ea4b 0b00 	orr.w	fp, fp, r0
 8011cc0:	3304      	adds	r3, #4
 8011cc2:	e7a1      	b.n	8011c08 <__gethex+0x174>
 8011cc4:	45a8      	cmp	r8, r5
 8011cc6:	d8e8      	bhi.n	8011c9a <__gethex+0x206>
 8011cc8:	2201      	movs	r2, #1
 8011cca:	4628      	mov	r0, r5
 8011ccc:	9303      	str	r3, [sp, #12]
 8011cce:	f7ff fd47 	bl	8011760 <strncmp>
 8011cd2:	4926      	ldr	r1, [pc, #152]	; (8011d6c <__gethex+0x2d8>)
 8011cd4:	9b03      	ldr	r3, [sp, #12]
 8011cd6:	2800      	cmp	r0, #0
 8011cd8:	d1df      	bne.n	8011c9a <__gethex+0x206>
 8011cda:	e795      	b.n	8011c08 <__gethex+0x174>
 8011cdc:	f04f 0b03 	mov.w	fp, #3
 8011ce0:	e7c5      	b.n	8011c6e <__gethex+0x1da>
 8011ce2:	da0b      	bge.n	8011cfc <__gethex+0x268>
 8011ce4:	eba5 0800 	sub.w	r8, r5, r0
 8011ce8:	4621      	mov	r1, r4
 8011cea:	4642      	mov	r2, r8
 8011cec:	4648      	mov	r0, r9
 8011cee:	f000 fc2d 	bl	801254c <__lshift>
 8011cf2:	eba6 0608 	sub.w	r6, r6, r8
 8011cf6:	4604      	mov	r4, r0
 8011cf8:	f100 0a14 	add.w	sl, r0, #20
 8011cfc:	f04f 0b00 	mov.w	fp, #0
 8011d00:	e7ba      	b.n	8011c78 <__gethex+0x1e4>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	42b3      	cmp	r3, r6
 8011d06:	dd73      	ble.n	8011df0 <__gethex+0x35c>
 8011d08:	1b9e      	subs	r6, r3, r6
 8011d0a:	42b5      	cmp	r5, r6
 8011d0c:	dc34      	bgt.n	8011d78 <__gethex+0x2e4>
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	2b02      	cmp	r3, #2
 8011d12:	d023      	beq.n	8011d5c <__gethex+0x2c8>
 8011d14:	2b03      	cmp	r3, #3
 8011d16:	d025      	beq.n	8011d64 <__gethex+0x2d0>
 8011d18:	2b01      	cmp	r3, #1
 8011d1a:	d115      	bne.n	8011d48 <__gethex+0x2b4>
 8011d1c:	42b5      	cmp	r5, r6
 8011d1e:	d113      	bne.n	8011d48 <__gethex+0x2b4>
 8011d20:	2d01      	cmp	r5, #1
 8011d22:	d10b      	bne.n	8011d3c <__gethex+0x2a8>
 8011d24:	9a02      	ldr	r2, [sp, #8]
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	6013      	str	r3, [r2, #0]
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	6123      	str	r3, [r4, #16]
 8011d2e:	f8ca 3000 	str.w	r3, [sl]
 8011d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d34:	f04f 0862 	mov.w	r8, #98	; 0x62
 8011d38:	601c      	str	r4, [r3, #0]
 8011d3a:	e735      	b.n	8011ba8 <__gethex+0x114>
 8011d3c:	1e69      	subs	r1, r5, #1
 8011d3e:	4620      	mov	r0, r4
 8011d40:	f000 fe36 	bl	80129b0 <__any_on>
 8011d44:	2800      	cmp	r0, #0
 8011d46:	d1ed      	bne.n	8011d24 <__gethex+0x290>
 8011d48:	4621      	mov	r1, r4
 8011d4a:	4648      	mov	r0, r9
 8011d4c:	f000 f9e4 	bl	8012118 <_Bfree>
 8011d50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011d52:	2300      	movs	r3, #0
 8011d54:	6013      	str	r3, [r2, #0]
 8011d56:	f04f 0850 	mov.w	r8, #80	; 0x50
 8011d5a:	e725      	b.n	8011ba8 <__gethex+0x114>
 8011d5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d1f2      	bne.n	8011d48 <__gethex+0x2b4>
 8011d62:	e7df      	b.n	8011d24 <__gethex+0x290>
 8011d64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d1dc      	bne.n	8011d24 <__gethex+0x290>
 8011d6a:	e7ed      	b.n	8011d48 <__gethex+0x2b4>
 8011d6c:	080141a0 	.word	0x080141a0
 8011d70:	08014309 	.word	0x08014309
 8011d74:	0801431a 	.word	0x0801431a
 8011d78:	f106 38ff 	add.w	r8, r6, #4294967295
 8011d7c:	f1bb 0f00 	cmp.w	fp, #0
 8011d80:	d133      	bne.n	8011dea <__gethex+0x356>
 8011d82:	f1b8 0f00 	cmp.w	r8, #0
 8011d86:	d004      	beq.n	8011d92 <__gethex+0x2fe>
 8011d88:	4641      	mov	r1, r8
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	f000 fe10 	bl	80129b0 <__any_on>
 8011d90:	4683      	mov	fp, r0
 8011d92:	ea4f 1268 	mov.w	r2, r8, asr #5
 8011d96:	2301      	movs	r3, #1
 8011d98:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011d9c:	f008 081f 	and.w	r8, r8, #31
 8011da0:	fa03 f308 	lsl.w	r3, r3, r8
 8011da4:	4213      	tst	r3, r2
 8011da6:	4631      	mov	r1, r6
 8011da8:	4620      	mov	r0, r4
 8011daa:	bf18      	it	ne
 8011dac:	f04b 0b02 	orrne.w	fp, fp, #2
 8011db0:	1bad      	subs	r5, r5, r6
 8011db2:	f7ff fe07 	bl	80119c4 <rshift>
 8011db6:	687e      	ldr	r6, [r7, #4]
 8011db8:	f04f 0802 	mov.w	r8, #2
 8011dbc:	f1bb 0f00 	cmp.w	fp, #0
 8011dc0:	d04a      	beq.n	8011e58 <__gethex+0x3c4>
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	2b02      	cmp	r3, #2
 8011dc6:	d016      	beq.n	8011df6 <__gethex+0x362>
 8011dc8:	2b03      	cmp	r3, #3
 8011dca:	d018      	beq.n	8011dfe <__gethex+0x36a>
 8011dcc:	2b01      	cmp	r3, #1
 8011dce:	d109      	bne.n	8011de4 <__gethex+0x350>
 8011dd0:	f01b 0f02 	tst.w	fp, #2
 8011dd4:	d006      	beq.n	8011de4 <__gethex+0x350>
 8011dd6:	f8da 3000 	ldr.w	r3, [sl]
 8011dda:	ea4b 0b03 	orr.w	fp, fp, r3
 8011dde:	f01b 0f01 	tst.w	fp, #1
 8011de2:	d10f      	bne.n	8011e04 <__gethex+0x370>
 8011de4:	f048 0810 	orr.w	r8, r8, #16
 8011de8:	e036      	b.n	8011e58 <__gethex+0x3c4>
 8011dea:	f04f 0b01 	mov.w	fp, #1
 8011dee:	e7d0      	b.n	8011d92 <__gethex+0x2fe>
 8011df0:	f04f 0801 	mov.w	r8, #1
 8011df4:	e7e2      	b.n	8011dbc <__gethex+0x328>
 8011df6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011df8:	f1c3 0301 	rsb	r3, r3, #1
 8011dfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8011dfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d0ef      	beq.n	8011de4 <__gethex+0x350>
 8011e04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011e08:	f104 0214 	add.w	r2, r4, #20
 8011e0c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8011e10:	9301      	str	r3, [sp, #4]
 8011e12:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8011e16:	2300      	movs	r3, #0
 8011e18:	4694      	mov	ip, r2
 8011e1a:	f852 1b04 	ldr.w	r1, [r2], #4
 8011e1e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8011e22:	d01e      	beq.n	8011e62 <__gethex+0x3ce>
 8011e24:	3101      	adds	r1, #1
 8011e26:	f8cc 1000 	str.w	r1, [ip]
 8011e2a:	f1b8 0f02 	cmp.w	r8, #2
 8011e2e:	f104 0214 	add.w	r2, r4, #20
 8011e32:	d13d      	bne.n	8011eb0 <__gethex+0x41c>
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	3b01      	subs	r3, #1
 8011e38:	42ab      	cmp	r3, r5
 8011e3a:	d10b      	bne.n	8011e54 <__gethex+0x3c0>
 8011e3c:	1169      	asrs	r1, r5, #5
 8011e3e:	2301      	movs	r3, #1
 8011e40:	f005 051f 	and.w	r5, r5, #31
 8011e44:	fa03 f505 	lsl.w	r5, r3, r5
 8011e48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e4c:	421d      	tst	r5, r3
 8011e4e:	bf18      	it	ne
 8011e50:	f04f 0801 	movne.w	r8, #1
 8011e54:	f048 0820 	orr.w	r8, r8, #32
 8011e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e5a:	601c      	str	r4, [r3, #0]
 8011e5c:	9b02      	ldr	r3, [sp, #8]
 8011e5e:	601e      	str	r6, [r3, #0]
 8011e60:	e6a2      	b.n	8011ba8 <__gethex+0x114>
 8011e62:	4290      	cmp	r0, r2
 8011e64:	f842 3c04 	str.w	r3, [r2, #-4]
 8011e68:	d8d6      	bhi.n	8011e18 <__gethex+0x384>
 8011e6a:	68a2      	ldr	r2, [r4, #8]
 8011e6c:	4593      	cmp	fp, r2
 8011e6e:	db17      	blt.n	8011ea0 <__gethex+0x40c>
 8011e70:	6861      	ldr	r1, [r4, #4]
 8011e72:	4648      	mov	r0, r9
 8011e74:	3101      	adds	r1, #1
 8011e76:	f000 f90f 	bl	8012098 <_Balloc>
 8011e7a:	4682      	mov	sl, r0
 8011e7c:	b918      	cbnz	r0, 8011e86 <__gethex+0x3f2>
 8011e7e:	4b1b      	ldr	r3, [pc, #108]	; (8011eec <__gethex+0x458>)
 8011e80:	4602      	mov	r2, r0
 8011e82:	2184      	movs	r1, #132	; 0x84
 8011e84:	e6b3      	b.n	8011bee <__gethex+0x15a>
 8011e86:	6922      	ldr	r2, [r4, #16]
 8011e88:	3202      	adds	r2, #2
 8011e8a:	f104 010c 	add.w	r1, r4, #12
 8011e8e:	0092      	lsls	r2, r2, #2
 8011e90:	300c      	adds	r0, #12
 8011e92:	f7ff fd2e 	bl	80118f2 <memcpy>
 8011e96:	4621      	mov	r1, r4
 8011e98:	4648      	mov	r0, r9
 8011e9a:	f000 f93d 	bl	8012118 <_Bfree>
 8011e9e:	4654      	mov	r4, sl
 8011ea0:	6922      	ldr	r2, [r4, #16]
 8011ea2:	1c51      	adds	r1, r2, #1
 8011ea4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011ea8:	6121      	str	r1, [r4, #16]
 8011eaa:	2101      	movs	r1, #1
 8011eac:	6151      	str	r1, [r2, #20]
 8011eae:	e7bc      	b.n	8011e2a <__gethex+0x396>
 8011eb0:	6921      	ldr	r1, [r4, #16]
 8011eb2:	4559      	cmp	r1, fp
 8011eb4:	dd0b      	ble.n	8011ece <__gethex+0x43a>
 8011eb6:	2101      	movs	r1, #1
 8011eb8:	4620      	mov	r0, r4
 8011eba:	f7ff fd83 	bl	80119c4 <rshift>
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	3601      	adds	r6, #1
 8011ec2:	42b3      	cmp	r3, r6
 8011ec4:	f6ff aedb 	blt.w	8011c7e <__gethex+0x1ea>
 8011ec8:	f04f 0801 	mov.w	r8, #1
 8011ecc:	e7c2      	b.n	8011e54 <__gethex+0x3c0>
 8011ece:	f015 051f 	ands.w	r5, r5, #31
 8011ed2:	d0f9      	beq.n	8011ec8 <__gethex+0x434>
 8011ed4:	9b01      	ldr	r3, [sp, #4]
 8011ed6:	441a      	add	r2, r3
 8011ed8:	f1c5 0520 	rsb	r5, r5, #32
 8011edc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8011ee0:	f000 f9cc 	bl	801227c <__hi0bits>
 8011ee4:	42a8      	cmp	r0, r5
 8011ee6:	dbe6      	blt.n	8011eb6 <__gethex+0x422>
 8011ee8:	e7ee      	b.n	8011ec8 <__gethex+0x434>
 8011eea:	bf00      	nop
 8011eec:	08014309 	.word	0x08014309

08011ef0 <L_shift>:
 8011ef0:	f1c2 0208 	rsb	r2, r2, #8
 8011ef4:	0092      	lsls	r2, r2, #2
 8011ef6:	b570      	push	{r4, r5, r6, lr}
 8011ef8:	f1c2 0620 	rsb	r6, r2, #32
 8011efc:	6843      	ldr	r3, [r0, #4]
 8011efe:	6804      	ldr	r4, [r0, #0]
 8011f00:	fa03 f506 	lsl.w	r5, r3, r6
 8011f04:	432c      	orrs	r4, r5
 8011f06:	40d3      	lsrs	r3, r2
 8011f08:	6004      	str	r4, [r0, #0]
 8011f0a:	f840 3f04 	str.w	r3, [r0, #4]!
 8011f0e:	4288      	cmp	r0, r1
 8011f10:	d3f4      	bcc.n	8011efc <L_shift+0xc>
 8011f12:	bd70      	pop	{r4, r5, r6, pc}

08011f14 <__match>:
 8011f14:	b530      	push	{r4, r5, lr}
 8011f16:	6803      	ldr	r3, [r0, #0]
 8011f18:	3301      	adds	r3, #1
 8011f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f1e:	b914      	cbnz	r4, 8011f26 <__match+0x12>
 8011f20:	6003      	str	r3, [r0, #0]
 8011f22:	2001      	movs	r0, #1
 8011f24:	bd30      	pop	{r4, r5, pc}
 8011f26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011f2e:	2d19      	cmp	r5, #25
 8011f30:	bf98      	it	ls
 8011f32:	3220      	addls	r2, #32
 8011f34:	42a2      	cmp	r2, r4
 8011f36:	d0f0      	beq.n	8011f1a <__match+0x6>
 8011f38:	2000      	movs	r0, #0
 8011f3a:	e7f3      	b.n	8011f24 <__match+0x10>

08011f3c <__hexnan>:
 8011f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f40:	680b      	ldr	r3, [r1, #0]
 8011f42:	6801      	ldr	r1, [r0, #0]
 8011f44:	115e      	asrs	r6, r3, #5
 8011f46:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011f4a:	f013 031f 	ands.w	r3, r3, #31
 8011f4e:	b087      	sub	sp, #28
 8011f50:	bf18      	it	ne
 8011f52:	3604      	addne	r6, #4
 8011f54:	2500      	movs	r5, #0
 8011f56:	1f37      	subs	r7, r6, #4
 8011f58:	4682      	mov	sl, r0
 8011f5a:	4690      	mov	r8, r2
 8011f5c:	9301      	str	r3, [sp, #4]
 8011f5e:	f846 5c04 	str.w	r5, [r6, #-4]
 8011f62:	46b9      	mov	r9, r7
 8011f64:	463c      	mov	r4, r7
 8011f66:	9502      	str	r5, [sp, #8]
 8011f68:	46ab      	mov	fp, r5
 8011f6a:	784a      	ldrb	r2, [r1, #1]
 8011f6c:	1c4b      	adds	r3, r1, #1
 8011f6e:	9303      	str	r3, [sp, #12]
 8011f70:	b342      	cbz	r2, 8011fc4 <__hexnan+0x88>
 8011f72:	4610      	mov	r0, r2
 8011f74:	9105      	str	r1, [sp, #20]
 8011f76:	9204      	str	r2, [sp, #16]
 8011f78:	f7ff fd76 	bl	8011a68 <__hexdig_fun>
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	d14f      	bne.n	8012020 <__hexnan+0xe4>
 8011f80:	9a04      	ldr	r2, [sp, #16]
 8011f82:	9905      	ldr	r1, [sp, #20]
 8011f84:	2a20      	cmp	r2, #32
 8011f86:	d818      	bhi.n	8011fba <__hexnan+0x7e>
 8011f88:	9b02      	ldr	r3, [sp, #8]
 8011f8a:	459b      	cmp	fp, r3
 8011f8c:	dd13      	ble.n	8011fb6 <__hexnan+0x7a>
 8011f8e:	454c      	cmp	r4, r9
 8011f90:	d206      	bcs.n	8011fa0 <__hexnan+0x64>
 8011f92:	2d07      	cmp	r5, #7
 8011f94:	dc04      	bgt.n	8011fa0 <__hexnan+0x64>
 8011f96:	462a      	mov	r2, r5
 8011f98:	4649      	mov	r1, r9
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	f7ff ffa8 	bl	8011ef0 <L_shift>
 8011fa0:	4544      	cmp	r4, r8
 8011fa2:	d950      	bls.n	8012046 <__hexnan+0x10a>
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	f1a4 0904 	sub.w	r9, r4, #4
 8011faa:	f844 3c04 	str.w	r3, [r4, #-4]
 8011fae:	f8cd b008 	str.w	fp, [sp, #8]
 8011fb2:	464c      	mov	r4, r9
 8011fb4:	461d      	mov	r5, r3
 8011fb6:	9903      	ldr	r1, [sp, #12]
 8011fb8:	e7d7      	b.n	8011f6a <__hexnan+0x2e>
 8011fba:	2a29      	cmp	r2, #41	; 0x29
 8011fbc:	d155      	bne.n	801206a <__hexnan+0x12e>
 8011fbe:	3102      	adds	r1, #2
 8011fc0:	f8ca 1000 	str.w	r1, [sl]
 8011fc4:	f1bb 0f00 	cmp.w	fp, #0
 8011fc8:	d04f      	beq.n	801206a <__hexnan+0x12e>
 8011fca:	454c      	cmp	r4, r9
 8011fcc:	d206      	bcs.n	8011fdc <__hexnan+0xa0>
 8011fce:	2d07      	cmp	r5, #7
 8011fd0:	dc04      	bgt.n	8011fdc <__hexnan+0xa0>
 8011fd2:	462a      	mov	r2, r5
 8011fd4:	4649      	mov	r1, r9
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	f7ff ff8a 	bl	8011ef0 <L_shift>
 8011fdc:	4544      	cmp	r4, r8
 8011fde:	d934      	bls.n	801204a <__hexnan+0x10e>
 8011fe0:	f1a8 0204 	sub.w	r2, r8, #4
 8011fe4:	4623      	mov	r3, r4
 8011fe6:	f853 1b04 	ldr.w	r1, [r3], #4
 8011fea:	f842 1f04 	str.w	r1, [r2, #4]!
 8011fee:	429f      	cmp	r7, r3
 8011ff0:	d2f9      	bcs.n	8011fe6 <__hexnan+0xaa>
 8011ff2:	1b3b      	subs	r3, r7, r4
 8011ff4:	f023 0303 	bic.w	r3, r3, #3
 8011ff8:	3304      	adds	r3, #4
 8011ffa:	3e03      	subs	r6, #3
 8011ffc:	3401      	adds	r4, #1
 8011ffe:	42a6      	cmp	r6, r4
 8012000:	bf38      	it	cc
 8012002:	2304      	movcc	r3, #4
 8012004:	4443      	add	r3, r8
 8012006:	2200      	movs	r2, #0
 8012008:	f843 2b04 	str.w	r2, [r3], #4
 801200c:	429f      	cmp	r7, r3
 801200e:	d2fb      	bcs.n	8012008 <__hexnan+0xcc>
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	b91b      	cbnz	r3, 801201c <__hexnan+0xe0>
 8012014:	4547      	cmp	r7, r8
 8012016:	d126      	bne.n	8012066 <__hexnan+0x12a>
 8012018:	2301      	movs	r3, #1
 801201a:	603b      	str	r3, [r7, #0]
 801201c:	2005      	movs	r0, #5
 801201e:	e025      	b.n	801206c <__hexnan+0x130>
 8012020:	3501      	adds	r5, #1
 8012022:	2d08      	cmp	r5, #8
 8012024:	f10b 0b01 	add.w	fp, fp, #1
 8012028:	dd06      	ble.n	8012038 <__hexnan+0xfc>
 801202a:	4544      	cmp	r4, r8
 801202c:	d9c3      	bls.n	8011fb6 <__hexnan+0x7a>
 801202e:	2300      	movs	r3, #0
 8012030:	f844 3c04 	str.w	r3, [r4, #-4]
 8012034:	2501      	movs	r5, #1
 8012036:	3c04      	subs	r4, #4
 8012038:	6822      	ldr	r2, [r4, #0]
 801203a:	f000 000f 	and.w	r0, r0, #15
 801203e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012042:	6020      	str	r0, [r4, #0]
 8012044:	e7b7      	b.n	8011fb6 <__hexnan+0x7a>
 8012046:	2508      	movs	r5, #8
 8012048:	e7b5      	b.n	8011fb6 <__hexnan+0x7a>
 801204a:	9b01      	ldr	r3, [sp, #4]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d0df      	beq.n	8012010 <__hexnan+0xd4>
 8012050:	f1c3 0320 	rsb	r3, r3, #32
 8012054:	f04f 32ff 	mov.w	r2, #4294967295
 8012058:	40da      	lsrs	r2, r3
 801205a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801205e:	4013      	ands	r3, r2
 8012060:	f846 3c04 	str.w	r3, [r6, #-4]
 8012064:	e7d4      	b.n	8012010 <__hexnan+0xd4>
 8012066:	3f04      	subs	r7, #4
 8012068:	e7d2      	b.n	8012010 <__hexnan+0xd4>
 801206a:	2004      	movs	r0, #4
 801206c:	b007      	add	sp, #28
 801206e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012072 <__ascii_mbtowc>:
 8012072:	b082      	sub	sp, #8
 8012074:	b901      	cbnz	r1, 8012078 <__ascii_mbtowc+0x6>
 8012076:	a901      	add	r1, sp, #4
 8012078:	b142      	cbz	r2, 801208c <__ascii_mbtowc+0x1a>
 801207a:	b14b      	cbz	r3, 8012090 <__ascii_mbtowc+0x1e>
 801207c:	7813      	ldrb	r3, [r2, #0]
 801207e:	600b      	str	r3, [r1, #0]
 8012080:	7812      	ldrb	r2, [r2, #0]
 8012082:	1e10      	subs	r0, r2, #0
 8012084:	bf18      	it	ne
 8012086:	2001      	movne	r0, #1
 8012088:	b002      	add	sp, #8
 801208a:	4770      	bx	lr
 801208c:	4610      	mov	r0, r2
 801208e:	e7fb      	b.n	8012088 <__ascii_mbtowc+0x16>
 8012090:	f06f 0001 	mvn.w	r0, #1
 8012094:	e7f8      	b.n	8012088 <__ascii_mbtowc+0x16>
	...

08012098 <_Balloc>:
 8012098:	b570      	push	{r4, r5, r6, lr}
 801209a:	69c6      	ldr	r6, [r0, #28]
 801209c:	4604      	mov	r4, r0
 801209e:	460d      	mov	r5, r1
 80120a0:	b976      	cbnz	r6, 80120c0 <_Balloc+0x28>
 80120a2:	2010      	movs	r0, #16
 80120a4:	f7fe fa6a 	bl	801057c <malloc>
 80120a8:	4602      	mov	r2, r0
 80120aa:	61e0      	str	r0, [r4, #28]
 80120ac:	b920      	cbnz	r0, 80120b8 <_Balloc+0x20>
 80120ae:	4b18      	ldr	r3, [pc, #96]	; (8012110 <_Balloc+0x78>)
 80120b0:	4818      	ldr	r0, [pc, #96]	; (8012114 <_Balloc+0x7c>)
 80120b2:	216b      	movs	r1, #107	; 0x6b
 80120b4:	f001 f85a 	bl	801316c <__assert_func>
 80120b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120bc:	6006      	str	r6, [r0, #0]
 80120be:	60c6      	str	r6, [r0, #12]
 80120c0:	69e6      	ldr	r6, [r4, #28]
 80120c2:	68f3      	ldr	r3, [r6, #12]
 80120c4:	b183      	cbz	r3, 80120e8 <_Balloc+0x50>
 80120c6:	69e3      	ldr	r3, [r4, #28]
 80120c8:	68db      	ldr	r3, [r3, #12]
 80120ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80120ce:	b9b8      	cbnz	r0, 8012100 <_Balloc+0x68>
 80120d0:	2101      	movs	r1, #1
 80120d2:	fa01 f605 	lsl.w	r6, r1, r5
 80120d6:	1d72      	adds	r2, r6, #5
 80120d8:	0092      	lsls	r2, r2, #2
 80120da:	4620      	mov	r0, r4
 80120dc:	f001 f864 	bl	80131a8 <_calloc_r>
 80120e0:	b160      	cbz	r0, 80120fc <_Balloc+0x64>
 80120e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80120e6:	e00e      	b.n	8012106 <_Balloc+0x6e>
 80120e8:	2221      	movs	r2, #33	; 0x21
 80120ea:	2104      	movs	r1, #4
 80120ec:	4620      	mov	r0, r4
 80120ee:	f001 f85b 	bl	80131a8 <_calloc_r>
 80120f2:	69e3      	ldr	r3, [r4, #28]
 80120f4:	60f0      	str	r0, [r6, #12]
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d1e4      	bne.n	80120c6 <_Balloc+0x2e>
 80120fc:	2000      	movs	r0, #0
 80120fe:	bd70      	pop	{r4, r5, r6, pc}
 8012100:	6802      	ldr	r2, [r0, #0]
 8012102:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012106:	2300      	movs	r3, #0
 8012108:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801210c:	e7f7      	b.n	80120fe <_Balloc+0x66>
 801210e:	bf00      	nop
 8012110:	0801437a 	.word	0x0801437a
 8012114:	08014391 	.word	0x08014391

08012118 <_Bfree>:
 8012118:	b570      	push	{r4, r5, r6, lr}
 801211a:	69c6      	ldr	r6, [r0, #28]
 801211c:	4605      	mov	r5, r0
 801211e:	460c      	mov	r4, r1
 8012120:	b976      	cbnz	r6, 8012140 <_Bfree+0x28>
 8012122:	2010      	movs	r0, #16
 8012124:	f7fe fa2a 	bl	801057c <malloc>
 8012128:	4602      	mov	r2, r0
 801212a:	61e8      	str	r0, [r5, #28]
 801212c:	b920      	cbnz	r0, 8012138 <_Bfree+0x20>
 801212e:	4b09      	ldr	r3, [pc, #36]	; (8012154 <_Bfree+0x3c>)
 8012130:	4809      	ldr	r0, [pc, #36]	; (8012158 <_Bfree+0x40>)
 8012132:	218f      	movs	r1, #143	; 0x8f
 8012134:	f001 f81a 	bl	801316c <__assert_func>
 8012138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801213c:	6006      	str	r6, [r0, #0]
 801213e:	60c6      	str	r6, [r0, #12]
 8012140:	b13c      	cbz	r4, 8012152 <_Bfree+0x3a>
 8012142:	69eb      	ldr	r3, [r5, #28]
 8012144:	6862      	ldr	r2, [r4, #4]
 8012146:	68db      	ldr	r3, [r3, #12]
 8012148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801214c:	6021      	str	r1, [r4, #0]
 801214e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012152:	bd70      	pop	{r4, r5, r6, pc}
 8012154:	0801437a 	.word	0x0801437a
 8012158:	08014391 	.word	0x08014391

0801215c <__multadd>:
 801215c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012160:	690d      	ldr	r5, [r1, #16]
 8012162:	4607      	mov	r7, r0
 8012164:	460c      	mov	r4, r1
 8012166:	461e      	mov	r6, r3
 8012168:	f101 0c14 	add.w	ip, r1, #20
 801216c:	2000      	movs	r0, #0
 801216e:	f8dc 3000 	ldr.w	r3, [ip]
 8012172:	b299      	uxth	r1, r3
 8012174:	fb02 6101 	mla	r1, r2, r1, r6
 8012178:	0c1e      	lsrs	r6, r3, #16
 801217a:	0c0b      	lsrs	r3, r1, #16
 801217c:	fb02 3306 	mla	r3, r2, r6, r3
 8012180:	b289      	uxth	r1, r1
 8012182:	3001      	adds	r0, #1
 8012184:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012188:	4285      	cmp	r5, r0
 801218a:	f84c 1b04 	str.w	r1, [ip], #4
 801218e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012192:	dcec      	bgt.n	801216e <__multadd+0x12>
 8012194:	b30e      	cbz	r6, 80121da <__multadd+0x7e>
 8012196:	68a3      	ldr	r3, [r4, #8]
 8012198:	42ab      	cmp	r3, r5
 801219a:	dc19      	bgt.n	80121d0 <__multadd+0x74>
 801219c:	6861      	ldr	r1, [r4, #4]
 801219e:	4638      	mov	r0, r7
 80121a0:	3101      	adds	r1, #1
 80121a2:	f7ff ff79 	bl	8012098 <_Balloc>
 80121a6:	4680      	mov	r8, r0
 80121a8:	b928      	cbnz	r0, 80121b6 <__multadd+0x5a>
 80121aa:	4602      	mov	r2, r0
 80121ac:	4b0c      	ldr	r3, [pc, #48]	; (80121e0 <__multadd+0x84>)
 80121ae:	480d      	ldr	r0, [pc, #52]	; (80121e4 <__multadd+0x88>)
 80121b0:	21ba      	movs	r1, #186	; 0xba
 80121b2:	f000 ffdb 	bl	801316c <__assert_func>
 80121b6:	6922      	ldr	r2, [r4, #16]
 80121b8:	3202      	adds	r2, #2
 80121ba:	f104 010c 	add.w	r1, r4, #12
 80121be:	0092      	lsls	r2, r2, #2
 80121c0:	300c      	adds	r0, #12
 80121c2:	f7ff fb96 	bl	80118f2 <memcpy>
 80121c6:	4621      	mov	r1, r4
 80121c8:	4638      	mov	r0, r7
 80121ca:	f7ff ffa5 	bl	8012118 <_Bfree>
 80121ce:	4644      	mov	r4, r8
 80121d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80121d4:	3501      	adds	r5, #1
 80121d6:	615e      	str	r6, [r3, #20]
 80121d8:	6125      	str	r5, [r4, #16]
 80121da:	4620      	mov	r0, r4
 80121dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121e0:	08014309 	.word	0x08014309
 80121e4:	08014391 	.word	0x08014391

080121e8 <__s2b>:
 80121e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121ec:	460c      	mov	r4, r1
 80121ee:	4615      	mov	r5, r2
 80121f0:	461f      	mov	r7, r3
 80121f2:	2209      	movs	r2, #9
 80121f4:	3308      	adds	r3, #8
 80121f6:	4606      	mov	r6, r0
 80121f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80121fc:	2100      	movs	r1, #0
 80121fe:	2201      	movs	r2, #1
 8012200:	429a      	cmp	r2, r3
 8012202:	db09      	blt.n	8012218 <__s2b+0x30>
 8012204:	4630      	mov	r0, r6
 8012206:	f7ff ff47 	bl	8012098 <_Balloc>
 801220a:	b940      	cbnz	r0, 801221e <__s2b+0x36>
 801220c:	4602      	mov	r2, r0
 801220e:	4b19      	ldr	r3, [pc, #100]	; (8012274 <__s2b+0x8c>)
 8012210:	4819      	ldr	r0, [pc, #100]	; (8012278 <__s2b+0x90>)
 8012212:	21d3      	movs	r1, #211	; 0xd3
 8012214:	f000 ffaa 	bl	801316c <__assert_func>
 8012218:	0052      	lsls	r2, r2, #1
 801221a:	3101      	adds	r1, #1
 801221c:	e7f0      	b.n	8012200 <__s2b+0x18>
 801221e:	9b08      	ldr	r3, [sp, #32]
 8012220:	6143      	str	r3, [r0, #20]
 8012222:	2d09      	cmp	r5, #9
 8012224:	f04f 0301 	mov.w	r3, #1
 8012228:	6103      	str	r3, [r0, #16]
 801222a:	dd16      	ble.n	801225a <__s2b+0x72>
 801222c:	f104 0909 	add.w	r9, r4, #9
 8012230:	46c8      	mov	r8, r9
 8012232:	442c      	add	r4, r5
 8012234:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012238:	4601      	mov	r1, r0
 801223a:	3b30      	subs	r3, #48	; 0x30
 801223c:	220a      	movs	r2, #10
 801223e:	4630      	mov	r0, r6
 8012240:	f7ff ff8c 	bl	801215c <__multadd>
 8012244:	45a0      	cmp	r8, r4
 8012246:	d1f5      	bne.n	8012234 <__s2b+0x4c>
 8012248:	f1a5 0408 	sub.w	r4, r5, #8
 801224c:	444c      	add	r4, r9
 801224e:	1b2d      	subs	r5, r5, r4
 8012250:	1963      	adds	r3, r4, r5
 8012252:	42bb      	cmp	r3, r7
 8012254:	db04      	blt.n	8012260 <__s2b+0x78>
 8012256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801225a:	340a      	adds	r4, #10
 801225c:	2509      	movs	r5, #9
 801225e:	e7f6      	b.n	801224e <__s2b+0x66>
 8012260:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012264:	4601      	mov	r1, r0
 8012266:	3b30      	subs	r3, #48	; 0x30
 8012268:	220a      	movs	r2, #10
 801226a:	4630      	mov	r0, r6
 801226c:	f7ff ff76 	bl	801215c <__multadd>
 8012270:	e7ee      	b.n	8012250 <__s2b+0x68>
 8012272:	bf00      	nop
 8012274:	08014309 	.word	0x08014309
 8012278:	08014391 	.word	0x08014391

0801227c <__hi0bits>:
 801227c:	0c03      	lsrs	r3, r0, #16
 801227e:	041b      	lsls	r3, r3, #16
 8012280:	b9d3      	cbnz	r3, 80122b8 <__hi0bits+0x3c>
 8012282:	0400      	lsls	r0, r0, #16
 8012284:	2310      	movs	r3, #16
 8012286:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801228a:	bf04      	itt	eq
 801228c:	0200      	lsleq	r0, r0, #8
 801228e:	3308      	addeq	r3, #8
 8012290:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012294:	bf04      	itt	eq
 8012296:	0100      	lsleq	r0, r0, #4
 8012298:	3304      	addeq	r3, #4
 801229a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801229e:	bf04      	itt	eq
 80122a0:	0080      	lsleq	r0, r0, #2
 80122a2:	3302      	addeq	r3, #2
 80122a4:	2800      	cmp	r0, #0
 80122a6:	db05      	blt.n	80122b4 <__hi0bits+0x38>
 80122a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80122ac:	f103 0301 	add.w	r3, r3, #1
 80122b0:	bf08      	it	eq
 80122b2:	2320      	moveq	r3, #32
 80122b4:	4618      	mov	r0, r3
 80122b6:	4770      	bx	lr
 80122b8:	2300      	movs	r3, #0
 80122ba:	e7e4      	b.n	8012286 <__hi0bits+0xa>

080122bc <__lo0bits>:
 80122bc:	6803      	ldr	r3, [r0, #0]
 80122be:	f013 0207 	ands.w	r2, r3, #7
 80122c2:	d00c      	beq.n	80122de <__lo0bits+0x22>
 80122c4:	07d9      	lsls	r1, r3, #31
 80122c6:	d422      	bmi.n	801230e <__lo0bits+0x52>
 80122c8:	079a      	lsls	r2, r3, #30
 80122ca:	bf49      	itett	mi
 80122cc:	085b      	lsrmi	r3, r3, #1
 80122ce:	089b      	lsrpl	r3, r3, #2
 80122d0:	6003      	strmi	r3, [r0, #0]
 80122d2:	2201      	movmi	r2, #1
 80122d4:	bf5c      	itt	pl
 80122d6:	6003      	strpl	r3, [r0, #0]
 80122d8:	2202      	movpl	r2, #2
 80122da:	4610      	mov	r0, r2
 80122dc:	4770      	bx	lr
 80122de:	b299      	uxth	r1, r3
 80122e0:	b909      	cbnz	r1, 80122e6 <__lo0bits+0x2a>
 80122e2:	0c1b      	lsrs	r3, r3, #16
 80122e4:	2210      	movs	r2, #16
 80122e6:	b2d9      	uxtb	r1, r3
 80122e8:	b909      	cbnz	r1, 80122ee <__lo0bits+0x32>
 80122ea:	3208      	adds	r2, #8
 80122ec:	0a1b      	lsrs	r3, r3, #8
 80122ee:	0719      	lsls	r1, r3, #28
 80122f0:	bf04      	itt	eq
 80122f2:	091b      	lsreq	r3, r3, #4
 80122f4:	3204      	addeq	r2, #4
 80122f6:	0799      	lsls	r1, r3, #30
 80122f8:	bf04      	itt	eq
 80122fa:	089b      	lsreq	r3, r3, #2
 80122fc:	3202      	addeq	r2, #2
 80122fe:	07d9      	lsls	r1, r3, #31
 8012300:	d403      	bmi.n	801230a <__lo0bits+0x4e>
 8012302:	085b      	lsrs	r3, r3, #1
 8012304:	f102 0201 	add.w	r2, r2, #1
 8012308:	d003      	beq.n	8012312 <__lo0bits+0x56>
 801230a:	6003      	str	r3, [r0, #0]
 801230c:	e7e5      	b.n	80122da <__lo0bits+0x1e>
 801230e:	2200      	movs	r2, #0
 8012310:	e7e3      	b.n	80122da <__lo0bits+0x1e>
 8012312:	2220      	movs	r2, #32
 8012314:	e7e1      	b.n	80122da <__lo0bits+0x1e>
	...

08012318 <__i2b>:
 8012318:	b510      	push	{r4, lr}
 801231a:	460c      	mov	r4, r1
 801231c:	2101      	movs	r1, #1
 801231e:	f7ff febb 	bl	8012098 <_Balloc>
 8012322:	4602      	mov	r2, r0
 8012324:	b928      	cbnz	r0, 8012332 <__i2b+0x1a>
 8012326:	4b05      	ldr	r3, [pc, #20]	; (801233c <__i2b+0x24>)
 8012328:	4805      	ldr	r0, [pc, #20]	; (8012340 <__i2b+0x28>)
 801232a:	f240 1145 	movw	r1, #325	; 0x145
 801232e:	f000 ff1d 	bl	801316c <__assert_func>
 8012332:	2301      	movs	r3, #1
 8012334:	6144      	str	r4, [r0, #20]
 8012336:	6103      	str	r3, [r0, #16]
 8012338:	bd10      	pop	{r4, pc}
 801233a:	bf00      	nop
 801233c:	08014309 	.word	0x08014309
 8012340:	08014391 	.word	0x08014391

08012344 <__multiply>:
 8012344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012348:	4691      	mov	r9, r2
 801234a:	690a      	ldr	r2, [r1, #16]
 801234c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012350:	429a      	cmp	r2, r3
 8012352:	bfb8      	it	lt
 8012354:	460b      	movlt	r3, r1
 8012356:	460c      	mov	r4, r1
 8012358:	bfbc      	itt	lt
 801235a:	464c      	movlt	r4, r9
 801235c:	4699      	movlt	r9, r3
 801235e:	6927      	ldr	r7, [r4, #16]
 8012360:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012364:	68a3      	ldr	r3, [r4, #8]
 8012366:	6861      	ldr	r1, [r4, #4]
 8012368:	eb07 060a 	add.w	r6, r7, sl
 801236c:	42b3      	cmp	r3, r6
 801236e:	b085      	sub	sp, #20
 8012370:	bfb8      	it	lt
 8012372:	3101      	addlt	r1, #1
 8012374:	f7ff fe90 	bl	8012098 <_Balloc>
 8012378:	b930      	cbnz	r0, 8012388 <__multiply+0x44>
 801237a:	4602      	mov	r2, r0
 801237c:	4b44      	ldr	r3, [pc, #272]	; (8012490 <__multiply+0x14c>)
 801237e:	4845      	ldr	r0, [pc, #276]	; (8012494 <__multiply+0x150>)
 8012380:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012384:	f000 fef2 	bl	801316c <__assert_func>
 8012388:	f100 0514 	add.w	r5, r0, #20
 801238c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012390:	462b      	mov	r3, r5
 8012392:	2200      	movs	r2, #0
 8012394:	4543      	cmp	r3, r8
 8012396:	d321      	bcc.n	80123dc <__multiply+0x98>
 8012398:	f104 0314 	add.w	r3, r4, #20
 801239c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80123a0:	f109 0314 	add.w	r3, r9, #20
 80123a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80123a8:	9202      	str	r2, [sp, #8]
 80123aa:	1b3a      	subs	r2, r7, r4
 80123ac:	3a15      	subs	r2, #21
 80123ae:	f022 0203 	bic.w	r2, r2, #3
 80123b2:	3204      	adds	r2, #4
 80123b4:	f104 0115 	add.w	r1, r4, #21
 80123b8:	428f      	cmp	r7, r1
 80123ba:	bf38      	it	cc
 80123bc:	2204      	movcc	r2, #4
 80123be:	9201      	str	r2, [sp, #4]
 80123c0:	9a02      	ldr	r2, [sp, #8]
 80123c2:	9303      	str	r3, [sp, #12]
 80123c4:	429a      	cmp	r2, r3
 80123c6:	d80c      	bhi.n	80123e2 <__multiply+0x9e>
 80123c8:	2e00      	cmp	r6, #0
 80123ca:	dd03      	ble.n	80123d4 <__multiply+0x90>
 80123cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d05b      	beq.n	801248c <__multiply+0x148>
 80123d4:	6106      	str	r6, [r0, #16]
 80123d6:	b005      	add	sp, #20
 80123d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123dc:	f843 2b04 	str.w	r2, [r3], #4
 80123e0:	e7d8      	b.n	8012394 <__multiply+0x50>
 80123e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80123e6:	f1ba 0f00 	cmp.w	sl, #0
 80123ea:	d024      	beq.n	8012436 <__multiply+0xf2>
 80123ec:	f104 0e14 	add.w	lr, r4, #20
 80123f0:	46a9      	mov	r9, r5
 80123f2:	f04f 0c00 	mov.w	ip, #0
 80123f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80123fa:	f8d9 1000 	ldr.w	r1, [r9]
 80123fe:	fa1f fb82 	uxth.w	fp, r2
 8012402:	b289      	uxth	r1, r1
 8012404:	fb0a 110b 	mla	r1, sl, fp, r1
 8012408:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801240c:	f8d9 2000 	ldr.w	r2, [r9]
 8012410:	4461      	add	r1, ip
 8012412:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012416:	fb0a c20b 	mla	r2, sl, fp, ip
 801241a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801241e:	b289      	uxth	r1, r1
 8012420:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012424:	4577      	cmp	r7, lr
 8012426:	f849 1b04 	str.w	r1, [r9], #4
 801242a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801242e:	d8e2      	bhi.n	80123f6 <__multiply+0xb2>
 8012430:	9a01      	ldr	r2, [sp, #4]
 8012432:	f845 c002 	str.w	ip, [r5, r2]
 8012436:	9a03      	ldr	r2, [sp, #12]
 8012438:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801243c:	3304      	adds	r3, #4
 801243e:	f1b9 0f00 	cmp.w	r9, #0
 8012442:	d021      	beq.n	8012488 <__multiply+0x144>
 8012444:	6829      	ldr	r1, [r5, #0]
 8012446:	f104 0c14 	add.w	ip, r4, #20
 801244a:	46ae      	mov	lr, r5
 801244c:	f04f 0a00 	mov.w	sl, #0
 8012450:	f8bc b000 	ldrh.w	fp, [ip]
 8012454:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012458:	fb09 220b 	mla	r2, r9, fp, r2
 801245c:	4452      	add	r2, sl
 801245e:	b289      	uxth	r1, r1
 8012460:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012464:	f84e 1b04 	str.w	r1, [lr], #4
 8012468:	f85c 1b04 	ldr.w	r1, [ip], #4
 801246c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012470:	f8be 1000 	ldrh.w	r1, [lr]
 8012474:	fb09 110a 	mla	r1, r9, sl, r1
 8012478:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801247c:	4567      	cmp	r7, ip
 801247e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012482:	d8e5      	bhi.n	8012450 <__multiply+0x10c>
 8012484:	9a01      	ldr	r2, [sp, #4]
 8012486:	50a9      	str	r1, [r5, r2]
 8012488:	3504      	adds	r5, #4
 801248a:	e799      	b.n	80123c0 <__multiply+0x7c>
 801248c:	3e01      	subs	r6, #1
 801248e:	e79b      	b.n	80123c8 <__multiply+0x84>
 8012490:	08014309 	.word	0x08014309
 8012494:	08014391 	.word	0x08014391

08012498 <__pow5mult>:
 8012498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801249c:	4615      	mov	r5, r2
 801249e:	f012 0203 	ands.w	r2, r2, #3
 80124a2:	4606      	mov	r6, r0
 80124a4:	460f      	mov	r7, r1
 80124a6:	d007      	beq.n	80124b8 <__pow5mult+0x20>
 80124a8:	4c25      	ldr	r4, [pc, #148]	; (8012540 <__pow5mult+0xa8>)
 80124aa:	3a01      	subs	r2, #1
 80124ac:	2300      	movs	r3, #0
 80124ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124b2:	f7ff fe53 	bl	801215c <__multadd>
 80124b6:	4607      	mov	r7, r0
 80124b8:	10ad      	asrs	r5, r5, #2
 80124ba:	d03d      	beq.n	8012538 <__pow5mult+0xa0>
 80124bc:	69f4      	ldr	r4, [r6, #28]
 80124be:	b97c      	cbnz	r4, 80124e0 <__pow5mult+0x48>
 80124c0:	2010      	movs	r0, #16
 80124c2:	f7fe f85b 	bl	801057c <malloc>
 80124c6:	4602      	mov	r2, r0
 80124c8:	61f0      	str	r0, [r6, #28]
 80124ca:	b928      	cbnz	r0, 80124d8 <__pow5mult+0x40>
 80124cc:	4b1d      	ldr	r3, [pc, #116]	; (8012544 <__pow5mult+0xac>)
 80124ce:	481e      	ldr	r0, [pc, #120]	; (8012548 <__pow5mult+0xb0>)
 80124d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80124d4:	f000 fe4a 	bl	801316c <__assert_func>
 80124d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80124dc:	6004      	str	r4, [r0, #0]
 80124de:	60c4      	str	r4, [r0, #12]
 80124e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80124e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80124e8:	b94c      	cbnz	r4, 80124fe <__pow5mult+0x66>
 80124ea:	f240 2171 	movw	r1, #625	; 0x271
 80124ee:	4630      	mov	r0, r6
 80124f0:	f7ff ff12 	bl	8012318 <__i2b>
 80124f4:	2300      	movs	r3, #0
 80124f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80124fa:	4604      	mov	r4, r0
 80124fc:	6003      	str	r3, [r0, #0]
 80124fe:	f04f 0900 	mov.w	r9, #0
 8012502:	07eb      	lsls	r3, r5, #31
 8012504:	d50a      	bpl.n	801251c <__pow5mult+0x84>
 8012506:	4639      	mov	r1, r7
 8012508:	4622      	mov	r2, r4
 801250a:	4630      	mov	r0, r6
 801250c:	f7ff ff1a 	bl	8012344 <__multiply>
 8012510:	4639      	mov	r1, r7
 8012512:	4680      	mov	r8, r0
 8012514:	4630      	mov	r0, r6
 8012516:	f7ff fdff 	bl	8012118 <_Bfree>
 801251a:	4647      	mov	r7, r8
 801251c:	106d      	asrs	r5, r5, #1
 801251e:	d00b      	beq.n	8012538 <__pow5mult+0xa0>
 8012520:	6820      	ldr	r0, [r4, #0]
 8012522:	b938      	cbnz	r0, 8012534 <__pow5mult+0x9c>
 8012524:	4622      	mov	r2, r4
 8012526:	4621      	mov	r1, r4
 8012528:	4630      	mov	r0, r6
 801252a:	f7ff ff0b 	bl	8012344 <__multiply>
 801252e:	6020      	str	r0, [r4, #0]
 8012530:	f8c0 9000 	str.w	r9, [r0]
 8012534:	4604      	mov	r4, r0
 8012536:	e7e4      	b.n	8012502 <__pow5mult+0x6a>
 8012538:	4638      	mov	r0, r7
 801253a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801253e:	bf00      	nop
 8012540:	080144e0 	.word	0x080144e0
 8012544:	0801437a 	.word	0x0801437a
 8012548:	08014391 	.word	0x08014391

0801254c <__lshift>:
 801254c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012550:	460c      	mov	r4, r1
 8012552:	6849      	ldr	r1, [r1, #4]
 8012554:	6923      	ldr	r3, [r4, #16]
 8012556:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801255a:	68a3      	ldr	r3, [r4, #8]
 801255c:	4607      	mov	r7, r0
 801255e:	4691      	mov	r9, r2
 8012560:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012564:	f108 0601 	add.w	r6, r8, #1
 8012568:	42b3      	cmp	r3, r6
 801256a:	db0b      	blt.n	8012584 <__lshift+0x38>
 801256c:	4638      	mov	r0, r7
 801256e:	f7ff fd93 	bl	8012098 <_Balloc>
 8012572:	4605      	mov	r5, r0
 8012574:	b948      	cbnz	r0, 801258a <__lshift+0x3e>
 8012576:	4602      	mov	r2, r0
 8012578:	4b28      	ldr	r3, [pc, #160]	; (801261c <__lshift+0xd0>)
 801257a:	4829      	ldr	r0, [pc, #164]	; (8012620 <__lshift+0xd4>)
 801257c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012580:	f000 fdf4 	bl	801316c <__assert_func>
 8012584:	3101      	adds	r1, #1
 8012586:	005b      	lsls	r3, r3, #1
 8012588:	e7ee      	b.n	8012568 <__lshift+0x1c>
 801258a:	2300      	movs	r3, #0
 801258c:	f100 0114 	add.w	r1, r0, #20
 8012590:	f100 0210 	add.w	r2, r0, #16
 8012594:	4618      	mov	r0, r3
 8012596:	4553      	cmp	r3, sl
 8012598:	db33      	blt.n	8012602 <__lshift+0xb6>
 801259a:	6920      	ldr	r0, [r4, #16]
 801259c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125a0:	f104 0314 	add.w	r3, r4, #20
 80125a4:	f019 091f 	ands.w	r9, r9, #31
 80125a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80125ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80125b0:	d02b      	beq.n	801260a <__lshift+0xbe>
 80125b2:	f1c9 0e20 	rsb	lr, r9, #32
 80125b6:	468a      	mov	sl, r1
 80125b8:	2200      	movs	r2, #0
 80125ba:	6818      	ldr	r0, [r3, #0]
 80125bc:	fa00 f009 	lsl.w	r0, r0, r9
 80125c0:	4310      	orrs	r0, r2
 80125c2:	f84a 0b04 	str.w	r0, [sl], #4
 80125c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80125ca:	459c      	cmp	ip, r3
 80125cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80125d0:	d8f3      	bhi.n	80125ba <__lshift+0x6e>
 80125d2:	ebac 0304 	sub.w	r3, ip, r4
 80125d6:	3b15      	subs	r3, #21
 80125d8:	f023 0303 	bic.w	r3, r3, #3
 80125dc:	3304      	adds	r3, #4
 80125de:	f104 0015 	add.w	r0, r4, #21
 80125e2:	4584      	cmp	ip, r0
 80125e4:	bf38      	it	cc
 80125e6:	2304      	movcc	r3, #4
 80125e8:	50ca      	str	r2, [r1, r3]
 80125ea:	b10a      	cbz	r2, 80125f0 <__lshift+0xa4>
 80125ec:	f108 0602 	add.w	r6, r8, #2
 80125f0:	3e01      	subs	r6, #1
 80125f2:	4638      	mov	r0, r7
 80125f4:	612e      	str	r6, [r5, #16]
 80125f6:	4621      	mov	r1, r4
 80125f8:	f7ff fd8e 	bl	8012118 <_Bfree>
 80125fc:	4628      	mov	r0, r5
 80125fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012602:	f842 0f04 	str.w	r0, [r2, #4]!
 8012606:	3301      	adds	r3, #1
 8012608:	e7c5      	b.n	8012596 <__lshift+0x4a>
 801260a:	3904      	subs	r1, #4
 801260c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012610:	f841 2f04 	str.w	r2, [r1, #4]!
 8012614:	459c      	cmp	ip, r3
 8012616:	d8f9      	bhi.n	801260c <__lshift+0xc0>
 8012618:	e7ea      	b.n	80125f0 <__lshift+0xa4>
 801261a:	bf00      	nop
 801261c:	08014309 	.word	0x08014309
 8012620:	08014391 	.word	0x08014391

08012624 <__mcmp>:
 8012624:	b530      	push	{r4, r5, lr}
 8012626:	6902      	ldr	r2, [r0, #16]
 8012628:	690c      	ldr	r4, [r1, #16]
 801262a:	1b12      	subs	r2, r2, r4
 801262c:	d10e      	bne.n	801264c <__mcmp+0x28>
 801262e:	f100 0314 	add.w	r3, r0, #20
 8012632:	3114      	adds	r1, #20
 8012634:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012638:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801263c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012640:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012644:	42a5      	cmp	r5, r4
 8012646:	d003      	beq.n	8012650 <__mcmp+0x2c>
 8012648:	d305      	bcc.n	8012656 <__mcmp+0x32>
 801264a:	2201      	movs	r2, #1
 801264c:	4610      	mov	r0, r2
 801264e:	bd30      	pop	{r4, r5, pc}
 8012650:	4283      	cmp	r3, r0
 8012652:	d3f3      	bcc.n	801263c <__mcmp+0x18>
 8012654:	e7fa      	b.n	801264c <__mcmp+0x28>
 8012656:	f04f 32ff 	mov.w	r2, #4294967295
 801265a:	e7f7      	b.n	801264c <__mcmp+0x28>

0801265c <__mdiff>:
 801265c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012660:	460c      	mov	r4, r1
 8012662:	4606      	mov	r6, r0
 8012664:	4611      	mov	r1, r2
 8012666:	4620      	mov	r0, r4
 8012668:	4690      	mov	r8, r2
 801266a:	f7ff ffdb 	bl	8012624 <__mcmp>
 801266e:	1e05      	subs	r5, r0, #0
 8012670:	d110      	bne.n	8012694 <__mdiff+0x38>
 8012672:	4629      	mov	r1, r5
 8012674:	4630      	mov	r0, r6
 8012676:	f7ff fd0f 	bl	8012098 <_Balloc>
 801267a:	b930      	cbnz	r0, 801268a <__mdiff+0x2e>
 801267c:	4b3a      	ldr	r3, [pc, #232]	; (8012768 <__mdiff+0x10c>)
 801267e:	4602      	mov	r2, r0
 8012680:	f240 2137 	movw	r1, #567	; 0x237
 8012684:	4839      	ldr	r0, [pc, #228]	; (801276c <__mdiff+0x110>)
 8012686:	f000 fd71 	bl	801316c <__assert_func>
 801268a:	2301      	movs	r3, #1
 801268c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012690:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012694:	bfa4      	itt	ge
 8012696:	4643      	movge	r3, r8
 8012698:	46a0      	movge	r8, r4
 801269a:	4630      	mov	r0, r6
 801269c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80126a0:	bfa6      	itte	ge
 80126a2:	461c      	movge	r4, r3
 80126a4:	2500      	movge	r5, #0
 80126a6:	2501      	movlt	r5, #1
 80126a8:	f7ff fcf6 	bl	8012098 <_Balloc>
 80126ac:	b920      	cbnz	r0, 80126b8 <__mdiff+0x5c>
 80126ae:	4b2e      	ldr	r3, [pc, #184]	; (8012768 <__mdiff+0x10c>)
 80126b0:	4602      	mov	r2, r0
 80126b2:	f240 2145 	movw	r1, #581	; 0x245
 80126b6:	e7e5      	b.n	8012684 <__mdiff+0x28>
 80126b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80126bc:	6926      	ldr	r6, [r4, #16]
 80126be:	60c5      	str	r5, [r0, #12]
 80126c0:	f104 0914 	add.w	r9, r4, #20
 80126c4:	f108 0514 	add.w	r5, r8, #20
 80126c8:	f100 0e14 	add.w	lr, r0, #20
 80126cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80126d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80126d4:	f108 0210 	add.w	r2, r8, #16
 80126d8:	46f2      	mov	sl, lr
 80126da:	2100      	movs	r1, #0
 80126dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80126e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80126e4:	fa11 f88b 	uxtah	r8, r1, fp
 80126e8:	b299      	uxth	r1, r3
 80126ea:	0c1b      	lsrs	r3, r3, #16
 80126ec:	eba8 0801 	sub.w	r8, r8, r1
 80126f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80126f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80126f8:	fa1f f888 	uxth.w	r8, r8
 80126fc:	1419      	asrs	r1, r3, #16
 80126fe:	454e      	cmp	r6, r9
 8012700:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012704:	f84a 3b04 	str.w	r3, [sl], #4
 8012708:	d8e8      	bhi.n	80126dc <__mdiff+0x80>
 801270a:	1b33      	subs	r3, r6, r4
 801270c:	3b15      	subs	r3, #21
 801270e:	f023 0303 	bic.w	r3, r3, #3
 8012712:	3304      	adds	r3, #4
 8012714:	3415      	adds	r4, #21
 8012716:	42a6      	cmp	r6, r4
 8012718:	bf38      	it	cc
 801271a:	2304      	movcc	r3, #4
 801271c:	441d      	add	r5, r3
 801271e:	4473      	add	r3, lr
 8012720:	469e      	mov	lr, r3
 8012722:	462e      	mov	r6, r5
 8012724:	4566      	cmp	r6, ip
 8012726:	d30e      	bcc.n	8012746 <__mdiff+0xea>
 8012728:	f10c 0203 	add.w	r2, ip, #3
 801272c:	1b52      	subs	r2, r2, r5
 801272e:	f022 0203 	bic.w	r2, r2, #3
 8012732:	3d03      	subs	r5, #3
 8012734:	45ac      	cmp	ip, r5
 8012736:	bf38      	it	cc
 8012738:	2200      	movcc	r2, #0
 801273a:	4413      	add	r3, r2
 801273c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012740:	b17a      	cbz	r2, 8012762 <__mdiff+0x106>
 8012742:	6107      	str	r7, [r0, #16]
 8012744:	e7a4      	b.n	8012690 <__mdiff+0x34>
 8012746:	f856 8b04 	ldr.w	r8, [r6], #4
 801274a:	fa11 f288 	uxtah	r2, r1, r8
 801274e:	1414      	asrs	r4, r2, #16
 8012750:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012754:	b292      	uxth	r2, r2
 8012756:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801275a:	f84e 2b04 	str.w	r2, [lr], #4
 801275e:	1421      	asrs	r1, r4, #16
 8012760:	e7e0      	b.n	8012724 <__mdiff+0xc8>
 8012762:	3f01      	subs	r7, #1
 8012764:	e7ea      	b.n	801273c <__mdiff+0xe0>
 8012766:	bf00      	nop
 8012768:	08014309 	.word	0x08014309
 801276c:	08014391 	.word	0x08014391

08012770 <__ulp>:
 8012770:	b082      	sub	sp, #8
 8012772:	ed8d 0b00 	vstr	d0, [sp]
 8012776:	9a01      	ldr	r2, [sp, #4]
 8012778:	4b0f      	ldr	r3, [pc, #60]	; (80127b8 <__ulp+0x48>)
 801277a:	4013      	ands	r3, r2
 801277c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8012780:	2b00      	cmp	r3, #0
 8012782:	dc08      	bgt.n	8012796 <__ulp+0x26>
 8012784:	425b      	negs	r3, r3
 8012786:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801278a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801278e:	da04      	bge.n	801279a <__ulp+0x2a>
 8012790:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012794:	4113      	asrs	r3, r2
 8012796:	2200      	movs	r2, #0
 8012798:	e008      	b.n	80127ac <__ulp+0x3c>
 801279a:	f1a2 0314 	sub.w	r3, r2, #20
 801279e:	2b1e      	cmp	r3, #30
 80127a0:	bfda      	itte	le
 80127a2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80127a6:	40da      	lsrle	r2, r3
 80127a8:	2201      	movgt	r2, #1
 80127aa:	2300      	movs	r3, #0
 80127ac:	4619      	mov	r1, r3
 80127ae:	4610      	mov	r0, r2
 80127b0:	ec41 0b10 	vmov	d0, r0, r1
 80127b4:	b002      	add	sp, #8
 80127b6:	4770      	bx	lr
 80127b8:	7ff00000 	.word	0x7ff00000

080127bc <__b2d>:
 80127bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127c0:	6906      	ldr	r6, [r0, #16]
 80127c2:	f100 0814 	add.w	r8, r0, #20
 80127c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80127ca:	1f37      	subs	r7, r6, #4
 80127cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80127d0:	4610      	mov	r0, r2
 80127d2:	f7ff fd53 	bl	801227c <__hi0bits>
 80127d6:	f1c0 0320 	rsb	r3, r0, #32
 80127da:	280a      	cmp	r0, #10
 80127dc:	600b      	str	r3, [r1, #0]
 80127de:	491b      	ldr	r1, [pc, #108]	; (801284c <__b2d+0x90>)
 80127e0:	dc15      	bgt.n	801280e <__b2d+0x52>
 80127e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80127e6:	fa22 f30c 	lsr.w	r3, r2, ip
 80127ea:	45b8      	cmp	r8, r7
 80127ec:	ea43 0501 	orr.w	r5, r3, r1
 80127f0:	bf34      	ite	cc
 80127f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80127f6:	2300      	movcs	r3, #0
 80127f8:	3015      	adds	r0, #21
 80127fa:	fa02 f000 	lsl.w	r0, r2, r0
 80127fe:	fa23 f30c 	lsr.w	r3, r3, ip
 8012802:	4303      	orrs	r3, r0
 8012804:	461c      	mov	r4, r3
 8012806:	ec45 4b10 	vmov	d0, r4, r5
 801280a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801280e:	45b8      	cmp	r8, r7
 8012810:	bf3a      	itte	cc
 8012812:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012816:	f1a6 0708 	subcc.w	r7, r6, #8
 801281a:	2300      	movcs	r3, #0
 801281c:	380b      	subs	r0, #11
 801281e:	d012      	beq.n	8012846 <__b2d+0x8a>
 8012820:	f1c0 0120 	rsb	r1, r0, #32
 8012824:	fa23 f401 	lsr.w	r4, r3, r1
 8012828:	4082      	lsls	r2, r0
 801282a:	4322      	orrs	r2, r4
 801282c:	4547      	cmp	r7, r8
 801282e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8012832:	bf8c      	ite	hi
 8012834:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012838:	2200      	movls	r2, #0
 801283a:	4083      	lsls	r3, r0
 801283c:	40ca      	lsrs	r2, r1
 801283e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012842:	4313      	orrs	r3, r2
 8012844:	e7de      	b.n	8012804 <__b2d+0x48>
 8012846:	ea42 0501 	orr.w	r5, r2, r1
 801284a:	e7db      	b.n	8012804 <__b2d+0x48>
 801284c:	3ff00000 	.word	0x3ff00000

08012850 <__d2b>:
 8012850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012854:	460f      	mov	r7, r1
 8012856:	2101      	movs	r1, #1
 8012858:	ec59 8b10 	vmov	r8, r9, d0
 801285c:	4616      	mov	r6, r2
 801285e:	f7ff fc1b 	bl	8012098 <_Balloc>
 8012862:	4604      	mov	r4, r0
 8012864:	b930      	cbnz	r0, 8012874 <__d2b+0x24>
 8012866:	4602      	mov	r2, r0
 8012868:	4b24      	ldr	r3, [pc, #144]	; (80128fc <__d2b+0xac>)
 801286a:	4825      	ldr	r0, [pc, #148]	; (8012900 <__d2b+0xb0>)
 801286c:	f240 310f 	movw	r1, #783	; 0x30f
 8012870:	f000 fc7c 	bl	801316c <__assert_func>
 8012874:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012878:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801287c:	bb2d      	cbnz	r5, 80128ca <__d2b+0x7a>
 801287e:	9301      	str	r3, [sp, #4]
 8012880:	f1b8 0300 	subs.w	r3, r8, #0
 8012884:	d026      	beq.n	80128d4 <__d2b+0x84>
 8012886:	4668      	mov	r0, sp
 8012888:	9300      	str	r3, [sp, #0]
 801288a:	f7ff fd17 	bl	80122bc <__lo0bits>
 801288e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012892:	b1e8      	cbz	r0, 80128d0 <__d2b+0x80>
 8012894:	f1c0 0320 	rsb	r3, r0, #32
 8012898:	fa02 f303 	lsl.w	r3, r2, r3
 801289c:	430b      	orrs	r3, r1
 801289e:	40c2      	lsrs	r2, r0
 80128a0:	6163      	str	r3, [r4, #20]
 80128a2:	9201      	str	r2, [sp, #4]
 80128a4:	9b01      	ldr	r3, [sp, #4]
 80128a6:	61a3      	str	r3, [r4, #24]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	bf14      	ite	ne
 80128ac:	2202      	movne	r2, #2
 80128ae:	2201      	moveq	r2, #1
 80128b0:	6122      	str	r2, [r4, #16]
 80128b2:	b1bd      	cbz	r5, 80128e4 <__d2b+0x94>
 80128b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80128b8:	4405      	add	r5, r0
 80128ba:	603d      	str	r5, [r7, #0]
 80128bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80128c0:	6030      	str	r0, [r6, #0]
 80128c2:	4620      	mov	r0, r4
 80128c4:	b003      	add	sp, #12
 80128c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80128ce:	e7d6      	b.n	801287e <__d2b+0x2e>
 80128d0:	6161      	str	r1, [r4, #20]
 80128d2:	e7e7      	b.n	80128a4 <__d2b+0x54>
 80128d4:	a801      	add	r0, sp, #4
 80128d6:	f7ff fcf1 	bl	80122bc <__lo0bits>
 80128da:	9b01      	ldr	r3, [sp, #4]
 80128dc:	6163      	str	r3, [r4, #20]
 80128de:	3020      	adds	r0, #32
 80128e0:	2201      	movs	r2, #1
 80128e2:	e7e5      	b.n	80128b0 <__d2b+0x60>
 80128e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80128e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80128ec:	6038      	str	r0, [r7, #0]
 80128ee:	6918      	ldr	r0, [r3, #16]
 80128f0:	f7ff fcc4 	bl	801227c <__hi0bits>
 80128f4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80128f8:	e7e2      	b.n	80128c0 <__d2b+0x70>
 80128fa:	bf00      	nop
 80128fc:	08014309 	.word	0x08014309
 8012900:	08014391 	.word	0x08014391

08012904 <__ratio>:
 8012904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012908:	4688      	mov	r8, r1
 801290a:	4669      	mov	r1, sp
 801290c:	4681      	mov	r9, r0
 801290e:	f7ff ff55 	bl	80127bc <__b2d>
 8012912:	a901      	add	r1, sp, #4
 8012914:	4640      	mov	r0, r8
 8012916:	ec55 4b10 	vmov	r4, r5, d0
 801291a:	f7ff ff4f 	bl	80127bc <__b2d>
 801291e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012922:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012926:	eba3 0c02 	sub.w	ip, r3, r2
 801292a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801292e:	1a9b      	subs	r3, r3, r2
 8012930:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012934:	ec51 0b10 	vmov	r0, r1, d0
 8012938:	2b00      	cmp	r3, #0
 801293a:	bfd6      	itet	le
 801293c:	460a      	movle	r2, r1
 801293e:	462a      	movgt	r2, r5
 8012940:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012944:	468b      	mov	fp, r1
 8012946:	462f      	mov	r7, r5
 8012948:	bfd4      	ite	le
 801294a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801294e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012952:	4620      	mov	r0, r4
 8012954:	ee10 2a10 	vmov	r2, s0
 8012958:	465b      	mov	r3, fp
 801295a:	4639      	mov	r1, r7
 801295c:	f7ed ff86 	bl	800086c <__aeabi_ddiv>
 8012960:	ec41 0b10 	vmov	d0, r0, r1
 8012964:	b003      	add	sp, #12
 8012966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801296a <__copybits>:
 801296a:	3901      	subs	r1, #1
 801296c:	b570      	push	{r4, r5, r6, lr}
 801296e:	1149      	asrs	r1, r1, #5
 8012970:	6914      	ldr	r4, [r2, #16]
 8012972:	3101      	adds	r1, #1
 8012974:	f102 0314 	add.w	r3, r2, #20
 8012978:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801297c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012980:	1f05      	subs	r5, r0, #4
 8012982:	42a3      	cmp	r3, r4
 8012984:	d30c      	bcc.n	80129a0 <__copybits+0x36>
 8012986:	1aa3      	subs	r3, r4, r2
 8012988:	3b11      	subs	r3, #17
 801298a:	f023 0303 	bic.w	r3, r3, #3
 801298e:	3211      	adds	r2, #17
 8012990:	42a2      	cmp	r2, r4
 8012992:	bf88      	it	hi
 8012994:	2300      	movhi	r3, #0
 8012996:	4418      	add	r0, r3
 8012998:	2300      	movs	r3, #0
 801299a:	4288      	cmp	r0, r1
 801299c:	d305      	bcc.n	80129aa <__copybits+0x40>
 801299e:	bd70      	pop	{r4, r5, r6, pc}
 80129a0:	f853 6b04 	ldr.w	r6, [r3], #4
 80129a4:	f845 6f04 	str.w	r6, [r5, #4]!
 80129a8:	e7eb      	b.n	8012982 <__copybits+0x18>
 80129aa:	f840 3b04 	str.w	r3, [r0], #4
 80129ae:	e7f4      	b.n	801299a <__copybits+0x30>

080129b0 <__any_on>:
 80129b0:	f100 0214 	add.w	r2, r0, #20
 80129b4:	6900      	ldr	r0, [r0, #16]
 80129b6:	114b      	asrs	r3, r1, #5
 80129b8:	4298      	cmp	r0, r3
 80129ba:	b510      	push	{r4, lr}
 80129bc:	db11      	blt.n	80129e2 <__any_on+0x32>
 80129be:	dd0a      	ble.n	80129d6 <__any_on+0x26>
 80129c0:	f011 011f 	ands.w	r1, r1, #31
 80129c4:	d007      	beq.n	80129d6 <__any_on+0x26>
 80129c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80129ca:	fa24 f001 	lsr.w	r0, r4, r1
 80129ce:	fa00 f101 	lsl.w	r1, r0, r1
 80129d2:	428c      	cmp	r4, r1
 80129d4:	d10b      	bne.n	80129ee <__any_on+0x3e>
 80129d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80129da:	4293      	cmp	r3, r2
 80129dc:	d803      	bhi.n	80129e6 <__any_on+0x36>
 80129de:	2000      	movs	r0, #0
 80129e0:	bd10      	pop	{r4, pc}
 80129e2:	4603      	mov	r3, r0
 80129e4:	e7f7      	b.n	80129d6 <__any_on+0x26>
 80129e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80129ea:	2900      	cmp	r1, #0
 80129ec:	d0f5      	beq.n	80129da <__any_on+0x2a>
 80129ee:	2001      	movs	r0, #1
 80129f0:	e7f6      	b.n	80129e0 <__any_on+0x30>

080129f2 <__ascii_wctomb>:
 80129f2:	b149      	cbz	r1, 8012a08 <__ascii_wctomb+0x16>
 80129f4:	2aff      	cmp	r2, #255	; 0xff
 80129f6:	bf85      	ittet	hi
 80129f8:	238a      	movhi	r3, #138	; 0x8a
 80129fa:	6003      	strhi	r3, [r0, #0]
 80129fc:	700a      	strbls	r2, [r1, #0]
 80129fe:	f04f 30ff 	movhi.w	r0, #4294967295
 8012a02:	bf98      	it	ls
 8012a04:	2001      	movls	r0, #1
 8012a06:	4770      	bx	lr
 8012a08:	4608      	mov	r0, r1
 8012a0a:	4770      	bx	lr

08012a0c <__ssputs_r>:
 8012a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a10:	688e      	ldr	r6, [r1, #8]
 8012a12:	461f      	mov	r7, r3
 8012a14:	42be      	cmp	r6, r7
 8012a16:	680b      	ldr	r3, [r1, #0]
 8012a18:	4682      	mov	sl, r0
 8012a1a:	460c      	mov	r4, r1
 8012a1c:	4690      	mov	r8, r2
 8012a1e:	d82c      	bhi.n	8012a7a <__ssputs_r+0x6e>
 8012a20:	898a      	ldrh	r2, [r1, #12]
 8012a22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012a26:	d026      	beq.n	8012a76 <__ssputs_r+0x6a>
 8012a28:	6965      	ldr	r5, [r4, #20]
 8012a2a:	6909      	ldr	r1, [r1, #16]
 8012a2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a30:	eba3 0901 	sub.w	r9, r3, r1
 8012a34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012a38:	1c7b      	adds	r3, r7, #1
 8012a3a:	444b      	add	r3, r9
 8012a3c:	106d      	asrs	r5, r5, #1
 8012a3e:	429d      	cmp	r5, r3
 8012a40:	bf38      	it	cc
 8012a42:	461d      	movcc	r5, r3
 8012a44:	0553      	lsls	r3, r2, #21
 8012a46:	d527      	bpl.n	8012a98 <__ssputs_r+0x8c>
 8012a48:	4629      	mov	r1, r5
 8012a4a:	f7fd fdc7 	bl	80105dc <_malloc_r>
 8012a4e:	4606      	mov	r6, r0
 8012a50:	b360      	cbz	r0, 8012aac <__ssputs_r+0xa0>
 8012a52:	6921      	ldr	r1, [r4, #16]
 8012a54:	464a      	mov	r2, r9
 8012a56:	f7fe ff4c 	bl	80118f2 <memcpy>
 8012a5a:	89a3      	ldrh	r3, [r4, #12]
 8012a5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a64:	81a3      	strh	r3, [r4, #12]
 8012a66:	6126      	str	r6, [r4, #16]
 8012a68:	6165      	str	r5, [r4, #20]
 8012a6a:	444e      	add	r6, r9
 8012a6c:	eba5 0509 	sub.w	r5, r5, r9
 8012a70:	6026      	str	r6, [r4, #0]
 8012a72:	60a5      	str	r5, [r4, #8]
 8012a74:	463e      	mov	r6, r7
 8012a76:	42be      	cmp	r6, r7
 8012a78:	d900      	bls.n	8012a7c <__ssputs_r+0x70>
 8012a7a:	463e      	mov	r6, r7
 8012a7c:	6820      	ldr	r0, [r4, #0]
 8012a7e:	4632      	mov	r2, r6
 8012a80:	4641      	mov	r1, r8
 8012a82:	f000 fb59 	bl	8013138 <memmove>
 8012a86:	68a3      	ldr	r3, [r4, #8]
 8012a88:	1b9b      	subs	r3, r3, r6
 8012a8a:	60a3      	str	r3, [r4, #8]
 8012a8c:	6823      	ldr	r3, [r4, #0]
 8012a8e:	4433      	add	r3, r6
 8012a90:	6023      	str	r3, [r4, #0]
 8012a92:	2000      	movs	r0, #0
 8012a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a98:	462a      	mov	r2, r5
 8012a9a:	f000 fb9b 	bl	80131d4 <_realloc_r>
 8012a9e:	4606      	mov	r6, r0
 8012aa0:	2800      	cmp	r0, #0
 8012aa2:	d1e0      	bne.n	8012a66 <__ssputs_r+0x5a>
 8012aa4:	6921      	ldr	r1, [r4, #16]
 8012aa6:	4650      	mov	r0, sl
 8012aa8:	f7fe ff40 	bl	801192c <_free_r>
 8012aac:	230c      	movs	r3, #12
 8012aae:	f8ca 3000 	str.w	r3, [sl]
 8012ab2:	89a3      	ldrh	r3, [r4, #12]
 8012ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ab8:	81a3      	strh	r3, [r4, #12]
 8012aba:	f04f 30ff 	mov.w	r0, #4294967295
 8012abe:	e7e9      	b.n	8012a94 <__ssputs_r+0x88>

08012ac0 <_svfiprintf_r>:
 8012ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ac4:	4698      	mov	r8, r3
 8012ac6:	898b      	ldrh	r3, [r1, #12]
 8012ac8:	061b      	lsls	r3, r3, #24
 8012aca:	b09d      	sub	sp, #116	; 0x74
 8012acc:	4607      	mov	r7, r0
 8012ace:	460d      	mov	r5, r1
 8012ad0:	4614      	mov	r4, r2
 8012ad2:	d50e      	bpl.n	8012af2 <_svfiprintf_r+0x32>
 8012ad4:	690b      	ldr	r3, [r1, #16]
 8012ad6:	b963      	cbnz	r3, 8012af2 <_svfiprintf_r+0x32>
 8012ad8:	2140      	movs	r1, #64	; 0x40
 8012ada:	f7fd fd7f 	bl	80105dc <_malloc_r>
 8012ade:	6028      	str	r0, [r5, #0]
 8012ae0:	6128      	str	r0, [r5, #16]
 8012ae2:	b920      	cbnz	r0, 8012aee <_svfiprintf_r+0x2e>
 8012ae4:	230c      	movs	r3, #12
 8012ae6:	603b      	str	r3, [r7, #0]
 8012ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8012aec:	e0d0      	b.n	8012c90 <_svfiprintf_r+0x1d0>
 8012aee:	2340      	movs	r3, #64	; 0x40
 8012af0:	616b      	str	r3, [r5, #20]
 8012af2:	2300      	movs	r3, #0
 8012af4:	9309      	str	r3, [sp, #36]	; 0x24
 8012af6:	2320      	movs	r3, #32
 8012af8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012afc:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b00:	2330      	movs	r3, #48	; 0x30
 8012b02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012ca8 <_svfiprintf_r+0x1e8>
 8012b06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b0a:	f04f 0901 	mov.w	r9, #1
 8012b0e:	4623      	mov	r3, r4
 8012b10:	469a      	mov	sl, r3
 8012b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b16:	b10a      	cbz	r2, 8012b1c <_svfiprintf_r+0x5c>
 8012b18:	2a25      	cmp	r2, #37	; 0x25
 8012b1a:	d1f9      	bne.n	8012b10 <_svfiprintf_r+0x50>
 8012b1c:	ebba 0b04 	subs.w	fp, sl, r4
 8012b20:	d00b      	beq.n	8012b3a <_svfiprintf_r+0x7a>
 8012b22:	465b      	mov	r3, fp
 8012b24:	4622      	mov	r2, r4
 8012b26:	4629      	mov	r1, r5
 8012b28:	4638      	mov	r0, r7
 8012b2a:	f7ff ff6f 	bl	8012a0c <__ssputs_r>
 8012b2e:	3001      	adds	r0, #1
 8012b30:	f000 80a9 	beq.w	8012c86 <_svfiprintf_r+0x1c6>
 8012b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b36:	445a      	add	r2, fp
 8012b38:	9209      	str	r2, [sp, #36]	; 0x24
 8012b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	f000 80a1 	beq.w	8012c86 <_svfiprintf_r+0x1c6>
 8012b44:	2300      	movs	r3, #0
 8012b46:	f04f 32ff 	mov.w	r2, #4294967295
 8012b4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b4e:	f10a 0a01 	add.w	sl, sl, #1
 8012b52:	9304      	str	r3, [sp, #16]
 8012b54:	9307      	str	r3, [sp, #28]
 8012b56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b5a:	931a      	str	r3, [sp, #104]	; 0x68
 8012b5c:	4654      	mov	r4, sl
 8012b5e:	2205      	movs	r2, #5
 8012b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b64:	4850      	ldr	r0, [pc, #320]	; (8012ca8 <_svfiprintf_r+0x1e8>)
 8012b66:	f7ed fb4b 	bl	8000200 <memchr>
 8012b6a:	9a04      	ldr	r2, [sp, #16]
 8012b6c:	b9d8      	cbnz	r0, 8012ba6 <_svfiprintf_r+0xe6>
 8012b6e:	06d0      	lsls	r0, r2, #27
 8012b70:	bf44      	itt	mi
 8012b72:	2320      	movmi	r3, #32
 8012b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b78:	0711      	lsls	r1, r2, #28
 8012b7a:	bf44      	itt	mi
 8012b7c:	232b      	movmi	r3, #43	; 0x2b
 8012b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b82:	f89a 3000 	ldrb.w	r3, [sl]
 8012b86:	2b2a      	cmp	r3, #42	; 0x2a
 8012b88:	d015      	beq.n	8012bb6 <_svfiprintf_r+0xf6>
 8012b8a:	9a07      	ldr	r2, [sp, #28]
 8012b8c:	4654      	mov	r4, sl
 8012b8e:	2000      	movs	r0, #0
 8012b90:	f04f 0c0a 	mov.w	ip, #10
 8012b94:	4621      	mov	r1, r4
 8012b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b9a:	3b30      	subs	r3, #48	; 0x30
 8012b9c:	2b09      	cmp	r3, #9
 8012b9e:	d94d      	bls.n	8012c3c <_svfiprintf_r+0x17c>
 8012ba0:	b1b0      	cbz	r0, 8012bd0 <_svfiprintf_r+0x110>
 8012ba2:	9207      	str	r2, [sp, #28]
 8012ba4:	e014      	b.n	8012bd0 <_svfiprintf_r+0x110>
 8012ba6:	eba0 0308 	sub.w	r3, r0, r8
 8012baa:	fa09 f303 	lsl.w	r3, r9, r3
 8012bae:	4313      	orrs	r3, r2
 8012bb0:	9304      	str	r3, [sp, #16]
 8012bb2:	46a2      	mov	sl, r4
 8012bb4:	e7d2      	b.n	8012b5c <_svfiprintf_r+0x9c>
 8012bb6:	9b03      	ldr	r3, [sp, #12]
 8012bb8:	1d19      	adds	r1, r3, #4
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	9103      	str	r1, [sp, #12]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	bfbb      	ittet	lt
 8012bc2:	425b      	neglt	r3, r3
 8012bc4:	f042 0202 	orrlt.w	r2, r2, #2
 8012bc8:	9307      	strge	r3, [sp, #28]
 8012bca:	9307      	strlt	r3, [sp, #28]
 8012bcc:	bfb8      	it	lt
 8012bce:	9204      	strlt	r2, [sp, #16]
 8012bd0:	7823      	ldrb	r3, [r4, #0]
 8012bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8012bd4:	d10c      	bne.n	8012bf0 <_svfiprintf_r+0x130>
 8012bd6:	7863      	ldrb	r3, [r4, #1]
 8012bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8012bda:	d134      	bne.n	8012c46 <_svfiprintf_r+0x186>
 8012bdc:	9b03      	ldr	r3, [sp, #12]
 8012bde:	1d1a      	adds	r2, r3, #4
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	9203      	str	r2, [sp, #12]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	bfb8      	it	lt
 8012be8:	f04f 33ff 	movlt.w	r3, #4294967295
 8012bec:	3402      	adds	r4, #2
 8012bee:	9305      	str	r3, [sp, #20]
 8012bf0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012cb8 <_svfiprintf_r+0x1f8>
 8012bf4:	7821      	ldrb	r1, [r4, #0]
 8012bf6:	2203      	movs	r2, #3
 8012bf8:	4650      	mov	r0, sl
 8012bfa:	f7ed fb01 	bl	8000200 <memchr>
 8012bfe:	b138      	cbz	r0, 8012c10 <_svfiprintf_r+0x150>
 8012c00:	9b04      	ldr	r3, [sp, #16]
 8012c02:	eba0 000a 	sub.w	r0, r0, sl
 8012c06:	2240      	movs	r2, #64	; 0x40
 8012c08:	4082      	lsls	r2, r0
 8012c0a:	4313      	orrs	r3, r2
 8012c0c:	3401      	adds	r4, #1
 8012c0e:	9304      	str	r3, [sp, #16]
 8012c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c14:	4825      	ldr	r0, [pc, #148]	; (8012cac <_svfiprintf_r+0x1ec>)
 8012c16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c1a:	2206      	movs	r2, #6
 8012c1c:	f7ed faf0 	bl	8000200 <memchr>
 8012c20:	2800      	cmp	r0, #0
 8012c22:	d038      	beq.n	8012c96 <_svfiprintf_r+0x1d6>
 8012c24:	4b22      	ldr	r3, [pc, #136]	; (8012cb0 <_svfiprintf_r+0x1f0>)
 8012c26:	bb1b      	cbnz	r3, 8012c70 <_svfiprintf_r+0x1b0>
 8012c28:	9b03      	ldr	r3, [sp, #12]
 8012c2a:	3307      	adds	r3, #7
 8012c2c:	f023 0307 	bic.w	r3, r3, #7
 8012c30:	3308      	adds	r3, #8
 8012c32:	9303      	str	r3, [sp, #12]
 8012c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c36:	4433      	add	r3, r6
 8012c38:	9309      	str	r3, [sp, #36]	; 0x24
 8012c3a:	e768      	b.n	8012b0e <_svfiprintf_r+0x4e>
 8012c3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c40:	460c      	mov	r4, r1
 8012c42:	2001      	movs	r0, #1
 8012c44:	e7a6      	b.n	8012b94 <_svfiprintf_r+0xd4>
 8012c46:	2300      	movs	r3, #0
 8012c48:	3401      	adds	r4, #1
 8012c4a:	9305      	str	r3, [sp, #20]
 8012c4c:	4619      	mov	r1, r3
 8012c4e:	f04f 0c0a 	mov.w	ip, #10
 8012c52:	4620      	mov	r0, r4
 8012c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c58:	3a30      	subs	r2, #48	; 0x30
 8012c5a:	2a09      	cmp	r2, #9
 8012c5c:	d903      	bls.n	8012c66 <_svfiprintf_r+0x1a6>
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d0c6      	beq.n	8012bf0 <_svfiprintf_r+0x130>
 8012c62:	9105      	str	r1, [sp, #20]
 8012c64:	e7c4      	b.n	8012bf0 <_svfiprintf_r+0x130>
 8012c66:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c6a:	4604      	mov	r4, r0
 8012c6c:	2301      	movs	r3, #1
 8012c6e:	e7f0      	b.n	8012c52 <_svfiprintf_r+0x192>
 8012c70:	ab03      	add	r3, sp, #12
 8012c72:	9300      	str	r3, [sp, #0]
 8012c74:	462a      	mov	r2, r5
 8012c76:	4b0f      	ldr	r3, [pc, #60]	; (8012cb4 <_svfiprintf_r+0x1f4>)
 8012c78:	a904      	add	r1, sp, #16
 8012c7a:	4638      	mov	r0, r7
 8012c7c:	f3af 8000 	nop.w
 8012c80:	1c42      	adds	r2, r0, #1
 8012c82:	4606      	mov	r6, r0
 8012c84:	d1d6      	bne.n	8012c34 <_svfiprintf_r+0x174>
 8012c86:	89ab      	ldrh	r3, [r5, #12]
 8012c88:	065b      	lsls	r3, r3, #25
 8012c8a:	f53f af2d 	bmi.w	8012ae8 <_svfiprintf_r+0x28>
 8012c8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c90:	b01d      	add	sp, #116	; 0x74
 8012c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c96:	ab03      	add	r3, sp, #12
 8012c98:	9300      	str	r3, [sp, #0]
 8012c9a:	462a      	mov	r2, r5
 8012c9c:	4b05      	ldr	r3, [pc, #20]	; (8012cb4 <_svfiprintf_r+0x1f4>)
 8012c9e:	a904      	add	r1, sp, #16
 8012ca0:	4638      	mov	r0, r7
 8012ca2:	f000 f879 	bl	8012d98 <_printf_i>
 8012ca6:	e7eb      	b.n	8012c80 <_svfiprintf_r+0x1c0>
 8012ca8:	080144ec 	.word	0x080144ec
 8012cac:	080144f6 	.word	0x080144f6
 8012cb0:	00000000 	.word	0x00000000
 8012cb4:	08012a0d 	.word	0x08012a0d
 8012cb8:	080144f2 	.word	0x080144f2

08012cbc <_printf_common>:
 8012cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cc0:	4616      	mov	r6, r2
 8012cc2:	4699      	mov	r9, r3
 8012cc4:	688a      	ldr	r2, [r1, #8]
 8012cc6:	690b      	ldr	r3, [r1, #16]
 8012cc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012ccc:	4293      	cmp	r3, r2
 8012cce:	bfb8      	it	lt
 8012cd0:	4613      	movlt	r3, r2
 8012cd2:	6033      	str	r3, [r6, #0]
 8012cd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012cd8:	4607      	mov	r7, r0
 8012cda:	460c      	mov	r4, r1
 8012cdc:	b10a      	cbz	r2, 8012ce2 <_printf_common+0x26>
 8012cde:	3301      	adds	r3, #1
 8012ce0:	6033      	str	r3, [r6, #0]
 8012ce2:	6823      	ldr	r3, [r4, #0]
 8012ce4:	0699      	lsls	r1, r3, #26
 8012ce6:	bf42      	ittt	mi
 8012ce8:	6833      	ldrmi	r3, [r6, #0]
 8012cea:	3302      	addmi	r3, #2
 8012cec:	6033      	strmi	r3, [r6, #0]
 8012cee:	6825      	ldr	r5, [r4, #0]
 8012cf0:	f015 0506 	ands.w	r5, r5, #6
 8012cf4:	d106      	bne.n	8012d04 <_printf_common+0x48>
 8012cf6:	f104 0a19 	add.w	sl, r4, #25
 8012cfa:	68e3      	ldr	r3, [r4, #12]
 8012cfc:	6832      	ldr	r2, [r6, #0]
 8012cfe:	1a9b      	subs	r3, r3, r2
 8012d00:	42ab      	cmp	r3, r5
 8012d02:	dc26      	bgt.n	8012d52 <_printf_common+0x96>
 8012d04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012d08:	1e13      	subs	r3, r2, #0
 8012d0a:	6822      	ldr	r2, [r4, #0]
 8012d0c:	bf18      	it	ne
 8012d0e:	2301      	movne	r3, #1
 8012d10:	0692      	lsls	r2, r2, #26
 8012d12:	d42b      	bmi.n	8012d6c <_printf_common+0xb0>
 8012d14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012d18:	4649      	mov	r1, r9
 8012d1a:	4638      	mov	r0, r7
 8012d1c:	47c0      	blx	r8
 8012d1e:	3001      	adds	r0, #1
 8012d20:	d01e      	beq.n	8012d60 <_printf_common+0xa4>
 8012d22:	6823      	ldr	r3, [r4, #0]
 8012d24:	6922      	ldr	r2, [r4, #16]
 8012d26:	f003 0306 	and.w	r3, r3, #6
 8012d2a:	2b04      	cmp	r3, #4
 8012d2c:	bf02      	ittt	eq
 8012d2e:	68e5      	ldreq	r5, [r4, #12]
 8012d30:	6833      	ldreq	r3, [r6, #0]
 8012d32:	1aed      	subeq	r5, r5, r3
 8012d34:	68a3      	ldr	r3, [r4, #8]
 8012d36:	bf0c      	ite	eq
 8012d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d3c:	2500      	movne	r5, #0
 8012d3e:	4293      	cmp	r3, r2
 8012d40:	bfc4      	itt	gt
 8012d42:	1a9b      	subgt	r3, r3, r2
 8012d44:	18ed      	addgt	r5, r5, r3
 8012d46:	2600      	movs	r6, #0
 8012d48:	341a      	adds	r4, #26
 8012d4a:	42b5      	cmp	r5, r6
 8012d4c:	d11a      	bne.n	8012d84 <_printf_common+0xc8>
 8012d4e:	2000      	movs	r0, #0
 8012d50:	e008      	b.n	8012d64 <_printf_common+0xa8>
 8012d52:	2301      	movs	r3, #1
 8012d54:	4652      	mov	r2, sl
 8012d56:	4649      	mov	r1, r9
 8012d58:	4638      	mov	r0, r7
 8012d5a:	47c0      	blx	r8
 8012d5c:	3001      	adds	r0, #1
 8012d5e:	d103      	bne.n	8012d68 <_printf_common+0xac>
 8012d60:	f04f 30ff 	mov.w	r0, #4294967295
 8012d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d68:	3501      	adds	r5, #1
 8012d6a:	e7c6      	b.n	8012cfa <_printf_common+0x3e>
 8012d6c:	18e1      	adds	r1, r4, r3
 8012d6e:	1c5a      	adds	r2, r3, #1
 8012d70:	2030      	movs	r0, #48	; 0x30
 8012d72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d76:	4422      	add	r2, r4
 8012d78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d80:	3302      	adds	r3, #2
 8012d82:	e7c7      	b.n	8012d14 <_printf_common+0x58>
 8012d84:	2301      	movs	r3, #1
 8012d86:	4622      	mov	r2, r4
 8012d88:	4649      	mov	r1, r9
 8012d8a:	4638      	mov	r0, r7
 8012d8c:	47c0      	blx	r8
 8012d8e:	3001      	adds	r0, #1
 8012d90:	d0e6      	beq.n	8012d60 <_printf_common+0xa4>
 8012d92:	3601      	adds	r6, #1
 8012d94:	e7d9      	b.n	8012d4a <_printf_common+0x8e>
	...

08012d98 <_printf_i>:
 8012d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012d9c:	7e0f      	ldrb	r7, [r1, #24]
 8012d9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012da0:	2f78      	cmp	r7, #120	; 0x78
 8012da2:	4691      	mov	r9, r2
 8012da4:	4680      	mov	r8, r0
 8012da6:	460c      	mov	r4, r1
 8012da8:	469a      	mov	sl, r3
 8012daa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012dae:	d807      	bhi.n	8012dc0 <_printf_i+0x28>
 8012db0:	2f62      	cmp	r7, #98	; 0x62
 8012db2:	d80a      	bhi.n	8012dca <_printf_i+0x32>
 8012db4:	2f00      	cmp	r7, #0
 8012db6:	f000 80d4 	beq.w	8012f62 <_printf_i+0x1ca>
 8012dba:	2f58      	cmp	r7, #88	; 0x58
 8012dbc:	f000 80c0 	beq.w	8012f40 <_printf_i+0x1a8>
 8012dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012dc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012dc8:	e03a      	b.n	8012e40 <_printf_i+0xa8>
 8012dca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012dce:	2b15      	cmp	r3, #21
 8012dd0:	d8f6      	bhi.n	8012dc0 <_printf_i+0x28>
 8012dd2:	a101      	add	r1, pc, #4	; (adr r1, 8012dd8 <_printf_i+0x40>)
 8012dd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012dd8:	08012e31 	.word	0x08012e31
 8012ddc:	08012e45 	.word	0x08012e45
 8012de0:	08012dc1 	.word	0x08012dc1
 8012de4:	08012dc1 	.word	0x08012dc1
 8012de8:	08012dc1 	.word	0x08012dc1
 8012dec:	08012dc1 	.word	0x08012dc1
 8012df0:	08012e45 	.word	0x08012e45
 8012df4:	08012dc1 	.word	0x08012dc1
 8012df8:	08012dc1 	.word	0x08012dc1
 8012dfc:	08012dc1 	.word	0x08012dc1
 8012e00:	08012dc1 	.word	0x08012dc1
 8012e04:	08012f49 	.word	0x08012f49
 8012e08:	08012e71 	.word	0x08012e71
 8012e0c:	08012f03 	.word	0x08012f03
 8012e10:	08012dc1 	.word	0x08012dc1
 8012e14:	08012dc1 	.word	0x08012dc1
 8012e18:	08012f6b 	.word	0x08012f6b
 8012e1c:	08012dc1 	.word	0x08012dc1
 8012e20:	08012e71 	.word	0x08012e71
 8012e24:	08012dc1 	.word	0x08012dc1
 8012e28:	08012dc1 	.word	0x08012dc1
 8012e2c:	08012f0b 	.word	0x08012f0b
 8012e30:	682b      	ldr	r3, [r5, #0]
 8012e32:	1d1a      	adds	r2, r3, #4
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	602a      	str	r2, [r5, #0]
 8012e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e40:	2301      	movs	r3, #1
 8012e42:	e09f      	b.n	8012f84 <_printf_i+0x1ec>
 8012e44:	6820      	ldr	r0, [r4, #0]
 8012e46:	682b      	ldr	r3, [r5, #0]
 8012e48:	0607      	lsls	r7, r0, #24
 8012e4a:	f103 0104 	add.w	r1, r3, #4
 8012e4e:	6029      	str	r1, [r5, #0]
 8012e50:	d501      	bpl.n	8012e56 <_printf_i+0xbe>
 8012e52:	681e      	ldr	r6, [r3, #0]
 8012e54:	e003      	b.n	8012e5e <_printf_i+0xc6>
 8012e56:	0646      	lsls	r6, r0, #25
 8012e58:	d5fb      	bpl.n	8012e52 <_printf_i+0xba>
 8012e5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012e5e:	2e00      	cmp	r6, #0
 8012e60:	da03      	bge.n	8012e6a <_printf_i+0xd2>
 8012e62:	232d      	movs	r3, #45	; 0x2d
 8012e64:	4276      	negs	r6, r6
 8012e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e6a:	485a      	ldr	r0, [pc, #360]	; (8012fd4 <_printf_i+0x23c>)
 8012e6c:	230a      	movs	r3, #10
 8012e6e:	e012      	b.n	8012e96 <_printf_i+0xfe>
 8012e70:	682b      	ldr	r3, [r5, #0]
 8012e72:	6820      	ldr	r0, [r4, #0]
 8012e74:	1d19      	adds	r1, r3, #4
 8012e76:	6029      	str	r1, [r5, #0]
 8012e78:	0605      	lsls	r5, r0, #24
 8012e7a:	d501      	bpl.n	8012e80 <_printf_i+0xe8>
 8012e7c:	681e      	ldr	r6, [r3, #0]
 8012e7e:	e002      	b.n	8012e86 <_printf_i+0xee>
 8012e80:	0641      	lsls	r1, r0, #25
 8012e82:	d5fb      	bpl.n	8012e7c <_printf_i+0xe4>
 8012e84:	881e      	ldrh	r6, [r3, #0]
 8012e86:	4853      	ldr	r0, [pc, #332]	; (8012fd4 <_printf_i+0x23c>)
 8012e88:	2f6f      	cmp	r7, #111	; 0x6f
 8012e8a:	bf0c      	ite	eq
 8012e8c:	2308      	moveq	r3, #8
 8012e8e:	230a      	movne	r3, #10
 8012e90:	2100      	movs	r1, #0
 8012e92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012e96:	6865      	ldr	r5, [r4, #4]
 8012e98:	60a5      	str	r5, [r4, #8]
 8012e9a:	2d00      	cmp	r5, #0
 8012e9c:	bfa2      	ittt	ge
 8012e9e:	6821      	ldrge	r1, [r4, #0]
 8012ea0:	f021 0104 	bicge.w	r1, r1, #4
 8012ea4:	6021      	strge	r1, [r4, #0]
 8012ea6:	b90e      	cbnz	r6, 8012eac <_printf_i+0x114>
 8012ea8:	2d00      	cmp	r5, #0
 8012eaa:	d04b      	beq.n	8012f44 <_printf_i+0x1ac>
 8012eac:	4615      	mov	r5, r2
 8012eae:	fbb6 f1f3 	udiv	r1, r6, r3
 8012eb2:	fb03 6711 	mls	r7, r3, r1, r6
 8012eb6:	5dc7      	ldrb	r7, [r0, r7]
 8012eb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012ebc:	4637      	mov	r7, r6
 8012ebe:	42bb      	cmp	r3, r7
 8012ec0:	460e      	mov	r6, r1
 8012ec2:	d9f4      	bls.n	8012eae <_printf_i+0x116>
 8012ec4:	2b08      	cmp	r3, #8
 8012ec6:	d10b      	bne.n	8012ee0 <_printf_i+0x148>
 8012ec8:	6823      	ldr	r3, [r4, #0]
 8012eca:	07de      	lsls	r6, r3, #31
 8012ecc:	d508      	bpl.n	8012ee0 <_printf_i+0x148>
 8012ece:	6923      	ldr	r3, [r4, #16]
 8012ed0:	6861      	ldr	r1, [r4, #4]
 8012ed2:	4299      	cmp	r1, r3
 8012ed4:	bfde      	ittt	le
 8012ed6:	2330      	movle	r3, #48	; 0x30
 8012ed8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012edc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012ee0:	1b52      	subs	r2, r2, r5
 8012ee2:	6122      	str	r2, [r4, #16]
 8012ee4:	f8cd a000 	str.w	sl, [sp]
 8012ee8:	464b      	mov	r3, r9
 8012eea:	aa03      	add	r2, sp, #12
 8012eec:	4621      	mov	r1, r4
 8012eee:	4640      	mov	r0, r8
 8012ef0:	f7ff fee4 	bl	8012cbc <_printf_common>
 8012ef4:	3001      	adds	r0, #1
 8012ef6:	d14a      	bne.n	8012f8e <_printf_i+0x1f6>
 8012ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8012efc:	b004      	add	sp, #16
 8012efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f02:	6823      	ldr	r3, [r4, #0]
 8012f04:	f043 0320 	orr.w	r3, r3, #32
 8012f08:	6023      	str	r3, [r4, #0]
 8012f0a:	4833      	ldr	r0, [pc, #204]	; (8012fd8 <_printf_i+0x240>)
 8012f0c:	2778      	movs	r7, #120	; 0x78
 8012f0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012f12:	6823      	ldr	r3, [r4, #0]
 8012f14:	6829      	ldr	r1, [r5, #0]
 8012f16:	061f      	lsls	r7, r3, #24
 8012f18:	f851 6b04 	ldr.w	r6, [r1], #4
 8012f1c:	d402      	bmi.n	8012f24 <_printf_i+0x18c>
 8012f1e:	065f      	lsls	r7, r3, #25
 8012f20:	bf48      	it	mi
 8012f22:	b2b6      	uxthmi	r6, r6
 8012f24:	07df      	lsls	r7, r3, #31
 8012f26:	bf48      	it	mi
 8012f28:	f043 0320 	orrmi.w	r3, r3, #32
 8012f2c:	6029      	str	r1, [r5, #0]
 8012f2e:	bf48      	it	mi
 8012f30:	6023      	strmi	r3, [r4, #0]
 8012f32:	b91e      	cbnz	r6, 8012f3c <_printf_i+0x1a4>
 8012f34:	6823      	ldr	r3, [r4, #0]
 8012f36:	f023 0320 	bic.w	r3, r3, #32
 8012f3a:	6023      	str	r3, [r4, #0]
 8012f3c:	2310      	movs	r3, #16
 8012f3e:	e7a7      	b.n	8012e90 <_printf_i+0xf8>
 8012f40:	4824      	ldr	r0, [pc, #144]	; (8012fd4 <_printf_i+0x23c>)
 8012f42:	e7e4      	b.n	8012f0e <_printf_i+0x176>
 8012f44:	4615      	mov	r5, r2
 8012f46:	e7bd      	b.n	8012ec4 <_printf_i+0x12c>
 8012f48:	682b      	ldr	r3, [r5, #0]
 8012f4a:	6826      	ldr	r6, [r4, #0]
 8012f4c:	6961      	ldr	r1, [r4, #20]
 8012f4e:	1d18      	adds	r0, r3, #4
 8012f50:	6028      	str	r0, [r5, #0]
 8012f52:	0635      	lsls	r5, r6, #24
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	d501      	bpl.n	8012f5c <_printf_i+0x1c4>
 8012f58:	6019      	str	r1, [r3, #0]
 8012f5a:	e002      	b.n	8012f62 <_printf_i+0x1ca>
 8012f5c:	0670      	lsls	r0, r6, #25
 8012f5e:	d5fb      	bpl.n	8012f58 <_printf_i+0x1c0>
 8012f60:	8019      	strh	r1, [r3, #0]
 8012f62:	2300      	movs	r3, #0
 8012f64:	6123      	str	r3, [r4, #16]
 8012f66:	4615      	mov	r5, r2
 8012f68:	e7bc      	b.n	8012ee4 <_printf_i+0x14c>
 8012f6a:	682b      	ldr	r3, [r5, #0]
 8012f6c:	1d1a      	adds	r2, r3, #4
 8012f6e:	602a      	str	r2, [r5, #0]
 8012f70:	681d      	ldr	r5, [r3, #0]
 8012f72:	6862      	ldr	r2, [r4, #4]
 8012f74:	2100      	movs	r1, #0
 8012f76:	4628      	mov	r0, r5
 8012f78:	f7ed f942 	bl	8000200 <memchr>
 8012f7c:	b108      	cbz	r0, 8012f82 <_printf_i+0x1ea>
 8012f7e:	1b40      	subs	r0, r0, r5
 8012f80:	6060      	str	r0, [r4, #4]
 8012f82:	6863      	ldr	r3, [r4, #4]
 8012f84:	6123      	str	r3, [r4, #16]
 8012f86:	2300      	movs	r3, #0
 8012f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f8c:	e7aa      	b.n	8012ee4 <_printf_i+0x14c>
 8012f8e:	6923      	ldr	r3, [r4, #16]
 8012f90:	462a      	mov	r2, r5
 8012f92:	4649      	mov	r1, r9
 8012f94:	4640      	mov	r0, r8
 8012f96:	47d0      	blx	sl
 8012f98:	3001      	adds	r0, #1
 8012f9a:	d0ad      	beq.n	8012ef8 <_printf_i+0x160>
 8012f9c:	6823      	ldr	r3, [r4, #0]
 8012f9e:	079b      	lsls	r3, r3, #30
 8012fa0:	d413      	bmi.n	8012fca <_printf_i+0x232>
 8012fa2:	68e0      	ldr	r0, [r4, #12]
 8012fa4:	9b03      	ldr	r3, [sp, #12]
 8012fa6:	4298      	cmp	r0, r3
 8012fa8:	bfb8      	it	lt
 8012faa:	4618      	movlt	r0, r3
 8012fac:	e7a6      	b.n	8012efc <_printf_i+0x164>
 8012fae:	2301      	movs	r3, #1
 8012fb0:	4632      	mov	r2, r6
 8012fb2:	4649      	mov	r1, r9
 8012fb4:	4640      	mov	r0, r8
 8012fb6:	47d0      	blx	sl
 8012fb8:	3001      	adds	r0, #1
 8012fba:	d09d      	beq.n	8012ef8 <_printf_i+0x160>
 8012fbc:	3501      	adds	r5, #1
 8012fbe:	68e3      	ldr	r3, [r4, #12]
 8012fc0:	9903      	ldr	r1, [sp, #12]
 8012fc2:	1a5b      	subs	r3, r3, r1
 8012fc4:	42ab      	cmp	r3, r5
 8012fc6:	dcf2      	bgt.n	8012fae <_printf_i+0x216>
 8012fc8:	e7eb      	b.n	8012fa2 <_printf_i+0x20a>
 8012fca:	2500      	movs	r5, #0
 8012fcc:	f104 0619 	add.w	r6, r4, #25
 8012fd0:	e7f5      	b.n	8012fbe <_printf_i+0x226>
 8012fd2:	bf00      	nop
 8012fd4:	080144fd 	.word	0x080144fd
 8012fd8:	0801450e 	.word	0x0801450e

08012fdc <__sflush_r>:
 8012fdc:	898a      	ldrh	r2, [r1, #12]
 8012fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe2:	4605      	mov	r5, r0
 8012fe4:	0710      	lsls	r0, r2, #28
 8012fe6:	460c      	mov	r4, r1
 8012fe8:	d458      	bmi.n	801309c <__sflush_r+0xc0>
 8012fea:	684b      	ldr	r3, [r1, #4]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	dc05      	bgt.n	8012ffc <__sflush_r+0x20>
 8012ff0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	dc02      	bgt.n	8012ffc <__sflush_r+0x20>
 8012ff6:	2000      	movs	r0, #0
 8012ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012ffe:	2e00      	cmp	r6, #0
 8013000:	d0f9      	beq.n	8012ff6 <__sflush_r+0x1a>
 8013002:	2300      	movs	r3, #0
 8013004:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013008:	682f      	ldr	r7, [r5, #0]
 801300a:	6a21      	ldr	r1, [r4, #32]
 801300c:	602b      	str	r3, [r5, #0]
 801300e:	d032      	beq.n	8013076 <__sflush_r+0x9a>
 8013010:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013012:	89a3      	ldrh	r3, [r4, #12]
 8013014:	075a      	lsls	r2, r3, #29
 8013016:	d505      	bpl.n	8013024 <__sflush_r+0x48>
 8013018:	6863      	ldr	r3, [r4, #4]
 801301a:	1ac0      	subs	r0, r0, r3
 801301c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801301e:	b10b      	cbz	r3, 8013024 <__sflush_r+0x48>
 8013020:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013022:	1ac0      	subs	r0, r0, r3
 8013024:	2300      	movs	r3, #0
 8013026:	4602      	mov	r2, r0
 8013028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801302a:	6a21      	ldr	r1, [r4, #32]
 801302c:	4628      	mov	r0, r5
 801302e:	47b0      	blx	r6
 8013030:	1c43      	adds	r3, r0, #1
 8013032:	89a3      	ldrh	r3, [r4, #12]
 8013034:	d106      	bne.n	8013044 <__sflush_r+0x68>
 8013036:	6829      	ldr	r1, [r5, #0]
 8013038:	291d      	cmp	r1, #29
 801303a:	d82b      	bhi.n	8013094 <__sflush_r+0xb8>
 801303c:	4a29      	ldr	r2, [pc, #164]	; (80130e4 <__sflush_r+0x108>)
 801303e:	410a      	asrs	r2, r1
 8013040:	07d6      	lsls	r6, r2, #31
 8013042:	d427      	bmi.n	8013094 <__sflush_r+0xb8>
 8013044:	2200      	movs	r2, #0
 8013046:	6062      	str	r2, [r4, #4]
 8013048:	04d9      	lsls	r1, r3, #19
 801304a:	6922      	ldr	r2, [r4, #16]
 801304c:	6022      	str	r2, [r4, #0]
 801304e:	d504      	bpl.n	801305a <__sflush_r+0x7e>
 8013050:	1c42      	adds	r2, r0, #1
 8013052:	d101      	bne.n	8013058 <__sflush_r+0x7c>
 8013054:	682b      	ldr	r3, [r5, #0]
 8013056:	b903      	cbnz	r3, 801305a <__sflush_r+0x7e>
 8013058:	6560      	str	r0, [r4, #84]	; 0x54
 801305a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801305c:	602f      	str	r7, [r5, #0]
 801305e:	2900      	cmp	r1, #0
 8013060:	d0c9      	beq.n	8012ff6 <__sflush_r+0x1a>
 8013062:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013066:	4299      	cmp	r1, r3
 8013068:	d002      	beq.n	8013070 <__sflush_r+0x94>
 801306a:	4628      	mov	r0, r5
 801306c:	f7fe fc5e 	bl	801192c <_free_r>
 8013070:	2000      	movs	r0, #0
 8013072:	6360      	str	r0, [r4, #52]	; 0x34
 8013074:	e7c0      	b.n	8012ff8 <__sflush_r+0x1c>
 8013076:	2301      	movs	r3, #1
 8013078:	4628      	mov	r0, r5
 801307a:	47b0      	blx	r6
 801307c:	1c41      	adds	r1, r0, #1
 801307e:	d1c8      	bne.n	8013012 <__sflush_r+0x36>
 8013080:	682b      	ldr	r3, [r5, #0]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d0c5      	beq.n	8013012 <__sflush_r+0x36>
 8013086:	2b1d      	cmp	r3, #29
 8013088:	d001      	beq.n	801308e <__sflush_r+0xb2>
 801308a:	2b16      	cmp	r3, #22
 801308c:	d101      	bne.n	8013092 <__sflush_r+0xb6>
 801308e:	602f      	str	r7, [r5, #0]
 8013090:	e7b1      	b.n	8012ff6 <__sflush_r+0x1a>
 8013092:	89a3      	ldrh	r3, [r4, #12]
 8013094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013098:	81a3      	strh	r3, [r4, #12]
 801309a:	e7ad      	b.n	8012ff8 <__sflush_r+0x1c>
 801309c:	690f      	ldr	r7, [r1, #16]
 801309e:	2f00      	cmp	r7, #0
 80130a0:	d0a9      	beq.n	8012ff6 <__sflush_r+0x1a>
 80130a2:	0793      	lsls	r3, r2, #30
 80130a4:	680e      	ldr	r6, [r1, #0]
 80130a6:	bf08      	it	eq
 80130a8:	694b      	ldreq	r3, [r1, #20]
 80130aa:	600f      	str	r7, [r1, #0]
 80130ac:	bf18      	it	ne
 80130ae:	2300      	movne	r3, #0
 80130b0:	eba6 0807 	sub.w	r8, r6, r7
 80130b4:	608b      	str	r3, [r1, #8]
 80130b6:	f1b8 0f00 	cmp.w	r8, #0
 80130ba:	dd9c      	ble.n	8012ff6 <__sflush_r+0x1a>
 80130bc:	6a21      	ldr	r1, [r4, #32]
 80130be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80130c0:	4643      	mov	r3, r8
 80130c2:	463a      	mov	r2, r7
 80130c4:	4628      	mov	r0, r5
 80130c6:	47b0      	blx	r6
 80130c8:	2800      	cmp	r0, #0
 80130ca:	dc06      	bgt.n	80130da <__sflush_r+0xfe>
 80130cc:	89a3      	ldrh	r3, [r4, #12]
 80130ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130d2:	81a3      	strh	r3, [r4, #12]
 80130d4:	f04f 30ff 	mov.w	r0, #4294967295
 80130d8:	e78e      	b.n	8012ff8 <__sflush_r+0x1c>
 80130da:	4407      	add	r7, r0
 80130dc:	eba8 0800 	sub.w	r8, r8, r0
 80130e0:	e7e9      	b.n	80130b6 <__sflush_r+0xda>
 80130e2:	bf00      	nop
 80130e4:	dfbffffe 	.word	0xdfbffffe

080130e8 <_fflush_r>:
 80130e8:	b538      	push	{r3, r4, r5, lr}
 80130ea:	690b      	ldr	r3, [r1, #16]
 80130ec:	4605      	mov	r5, r0
 80130ee:	460c      	mov	r4, r1
 80130f0:	b913      	cbnz	r3, 80130f8 <_fflush_r+0x10>
 80130f2:	2500      	movs	r5, #0
 80130f4:	4628      	mov	r0, r5
 80130f6:	bd38      	pop	{r3, r4, r5, pc}
 80130f8:	b118      	cbz	r0, 8013102 <_fflush_r+0x1a>
 80130fa:	6a03      	ldr	r3, [r0, #32]
 80130fc:	b90b      	cbnz	r3, 8013102 <_fflush_r+0x1a>
 80130fe:	f7fe fa75 	bl	80115ec <__sinit>
 8013102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d0f3      	beq.n	80130f2 <_fflush_r+0xa>
 801310a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801310c:	07d0      	lsls	r0, r2, #31
 801310e:	d404      	bmi.n	801311a <_fflush_r+0x32>
 8013110:	0599      	lsls	r1, r3, #22
 8013112:	d402      	bmi.n	801311a <_fflush_r+0x32>
 8013114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013116:	f7fe fbe2 	bl	80118de <__retarget_lock_acquire_recursive>
 801311a:	4628      	mov	r0, r5
 801311c:	4621      	mov	r1, r4
 801311e:	f7ff ff5d 	bl	8012fdc <__sflush_r>
 8013122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013124:	07da      	lsls	r2, r3, #31
 8013126:	4605      	mov	r5, r0
 8013128:	d4e4      	bmi.n	80130f4 <_fflush_r+0xc>
 801312a:	89a3      	ldrh	r3, [r4, #12]
 801312c:	059b      	lsls	r3, r3, #22
 801312e:	d4e1      	bmi.n	80130f4 <_fflush_r+0xc>
 8013130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013132:	f7fe fbd5 	bl	80118e0 <__retarget_lock_release_recursive>
 8013136:	e7dd      	b.n	80130f4 <_fflush_r+0xc>

08013138 <memmove>:
 8013138:	4288      	cmp	r0, r1
 801313a:	b510      	push	{r4, lr}
 801313c:	eb01 0402 	add.w	r4, r1, r2
 8013140:	d902      	bls.n	8013148 <memmove+0x10>
 8013142:	4284      	cmp	r4, r0
 8013144:	4623      	mov	r3, r4
 8013146:	d807      	bhi.n	8013158 <memmove+0x20>
 8013148:	1e43      	subs	r3, r0, #1
 801314a:	42a1      	cmp	r1, r4
 801314c:	d008      	beq.n	8013160 <memmove+0x28>
 801314e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013152:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013156:	e7f8      	b.n	801314a <memmove+0x12>
 8013158:	4402      	add	r2, r0
 801315a:	4601      	mov	r1, r0
 801315c:	428a      	cmp	r2, r1
 801315e:	d100      	bne.n	8013162 <memmove+0x2a>
 8013160:	bd10      	pop	{r4, pc}
 8013162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801316a:	e7f7      	b.n	801315c <memmove+0x24>

0801316c <__assert_func>:
 801316c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801316e:	4614      	mov	r4, r2
 8013170:	461a      	mov	r2, r3
 8013172:	4b09      	ldr	r3, [pc, #36]	; (8013198 <__assert_func+0x2c>)
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	4605      	mov	r5, r0
 8013178:	68d8      	ldr	r0, [r3, #12]
 801317a:	b14c      	cbz	r4, 8013190 <__assert_func+0x24>
 801317c:	4b07      	ldr	r3, [pc, #28]	; (801319c <__assert_func+0x30>)
 801317e:	9100      	str	r1, [sp, #0]
 8013180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013184:	4906      	ldr	r1, [pc, #24]	; (80131a0 <__assert_func+0x34>)
 8013186:	462b      	mov	r3, r5
 8013188:	f000 f854 	bl	8013234 <fiprintf>
 801318c:	f000 f864 	bl	8013258 <abort>
 8013190:	4b04      	ldr	r3, [pc, #16]	; (80131a4 <__assert_func+0x38>)
 8013192:	461c      	mov	r4, r3
 8013194:	e7f3      	b.n	801317e <__assert_func+0x12>
 8013196:	bf00      	nop
 8013198:	200002d8 	.word	0x200002d8
 801319c:	0801451f 	.word	0x0801451f
 80131a0:	0801452c 	.word	0x0801452c
 80131a4:	0801455a 	.word	0x0801455a

080131a8 <_calloc_r>:
 80131a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80131aa:	fba1 2402 	umull	r2, r4, r1, r2
 80131ae:	b94c      	cbnz	r4, 80131c4 <_calloc_r+0x1c>
 80131b0:	4611      	mov	r1, r2
 80131b2:	9201      	str	r2, [sp, #4]
 80131b4:	f7fd fa12 	bl	80105dc <_malloc_r>
 80131b8:	9a01      	ldr	r2, [sp, #4]
 80131ba:	4605      	mov	r5, r0
 80131bc:	b930      	cbnz	r0, 80131cc <_calloc_r+0x24>
 80131be:	4628      	mov	r0, r5
 80131c0:	b003      	add	sp, #12
 80131c2:	bd30      	pop	{r4, r5, pc}
 80131c4:	220c      	movs	r2, #12
 80131c6:	6002      	str	r2, [r0, #0]
 80131c8:	2500      	movs	r5, #0
 80131ca:	e7f8      	b.n	80131be <_calloc_r+0x16>
 80131cc:	4621      	mov	r1, r4
 80131ce:	f7fe fabf 	bl	8011750 <memset>
 80131d2:	e7f4      	b.n	80131be <_calloc_r+0x16>

080131d4 <_realloc_r>:
 80131d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131d8:	4680      	mov	r8, r0
 80131da:	4614      	mov	r4, r2
 80131dc:	460e      	mov	r6, r1
 80131de:	b921      	cbnz	r1, 80131ea <_realloc_r+0x16>
 80131e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131e4:	4611      	mov	r1, r2
 80131e6:	f7fd b9f9 	b.w	80105dc <_malloc_r>
 80131ea:	b92a      	cbnz	r2, 80131f8 <_realloc_r+0x24>
 80131ec:	f7fe fb9e 	bl	801192c <_free_r>
 80131f0:	4625      	mov	r5, r4
 80131f2:	4628      	mov	r0, r5
 80131f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131f8:	f000 f835 	bl	8013266 <_malloc_usable_size_r>
 80131fc:	4284      	cmp	r4, r0
 80131fe:	4607      	mov	r7, r0
 8013200:	d802      	bhi.n	8013208 <_realloc_r+0x34>
 8013202:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013206:	d812      	bhi.n	801322e <_realloc_r+0x5a>
 8013208:	4621      	mov	r1, r4
 801320a:	4640      	mov	r0, r8
 801320c:	f7fd f9e6 	bl	80105dc <_malloc_r>
 8013210:	4605      	mov	r5, r0
 8013212:	2800      	cmp	r0, #0
 8013214:	d0ed      	beq.n	80131f2 <_realloc_r+0x1e>
 8013216:	42bc      	cmp	r4, r7
 8013218:	4622      	mov	r2, r4
 801321a:	4631      	mov	r1, r6
 801321c:	bf28      	it	cs
 801321e:	463a      	movcs	r2, r7
 8013220:	f7fe fb67 	bl	80118f2 <memcpy>
 8013224:	4631      	mov	r1, r6
 8013226:	4640      	mov	r0, r8
 8013228:	f7fe fb80 	bl	801192c <_free_r>
 801322c:	e7e1      	b.n	80131f2 <_realloc_r+0x1e>
 801322e:	4635      	mov	r5, r6
 8013230:	e7df      	b.n	80131f2 <_realloc_r+0x1e>
	...

08013234 <fiprintf>:
 8013234:	b40e      	push	{r1, r2, r3}
 8013236:	b503      	push	{r0, r1, lr}
 8013238:	4601      	mov	r1, r0
 801323a:	ab03      	add	r3, sp, #12
 801323c:	4805      	ldr	r0, [pc, #20]	; (8013254 <fiprintf+0x20>)
 801323e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013242:	6800      	ldr	r0, [r0, #0]
 8013244:	9301      	str	r3, [sp, #4]
 8013246:	f000 f83f 	bl	80132c8 <_vfiprintf_r>
 801324a:	b002      	add	sp, #8
 801324c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013250:	b003      	add	sp, #12
 8013252:	4770      	bx	lr
 8013254:	200002d8 	.word	0x200002d8

08013258 <abort>:
 8013258:	b508      	push	{r3, lr}
 801325a:	2006      	movs	r0, #6
 801325c:	f000 fa0c 	bl	8013678 <raise>
 8013260:	2001      	movs	r0, #1
 8013262:	f7ee f985 	bl	8001570 <_exit>

08013266 <_malloc_usable_size_r>:
 8013266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801326a:	1f18      	subs	r0, r3, #4
 801326c:	2b00      	cmp	r3, #0
 801326e:	bfbc      	itt	lt
 8013270:	580b      	ldrlt	r3, [r1, r0]
 8013272:	18c0      	addlt	r0, r0, r3
 8013274:	4770      	bx	lr

08013276 <__sfputc_r>:
 8013276:	6893      	ldr	r3, [r2, #8]
 8013278:	3b01      	subs	r3, #1
 801327a:	2b00      	cmp	r3, #0
 801327c:	b410      	push	{r4}
 801327e:	6093      	str	r3, [r2, #8]
 8013280:	da08      	bge.n	8013294 <__sfputc_r+0x1e>
 8013282:	6994      	ldr	r4, [r2, #24]
 8013284:	42a3      	cmp	r3, r4
 8013286:	db01      	blt.n	801328c <__sfputc_r+0x16>
 8013288:	290a      	cmp	r1, #10
 801328a:	d103      	bne.n	8013294 <__sfputc_r+0x1e>
 801328c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013290:	f000 b934 	b.w	80134fc <__swbuf_r>
 8013294:	6813      	ldr	r3, [r2, #0]
 8013296:	1c58      	adds	r0, r3, #1
 8013298:	6010      	str	r0, [r2, #0]
 801329a:	7019      	strb	r1, [r3, #0]
 801329c:	4608      	mov	r0, r1
 801329e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132a2:	4770      	bx	lr

080132a4 <__sfputs_r>:
 80132a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132a6:	4606      	mov	r6, r0
 80132a8:	460f      	mov	r7, r1
 80132aa:	4614      	mov	r4, r2
 80132ac:	18d5      	adds	r5, r2, r3
 80132ae:	42ac      	cmp	r4, r5
 80132b0:	d101      	bne.n	80132b6 <__sfputs_r+0x12>
 80132b2:	2000      	movs	r0, #0
 80132b4:	e007      	b.n	80132c6 <__sfputs_r+0x22>
 80132b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132ba:	463a      	mov	r2, r7
 80132bc:	4630      	mov	r0, r6
 80132be:	f7ff ffda 	bl	8013276 <__sfputc_r>
 80132c2:	1c43      	adds	r3, r0, #1
 80132c4:	d1f3      	bne.n	80132ae <__sfputs_r+0xa>
 80132c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080132c8 <_vfiprintf_r>:
 80132c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132cc:	460d      	mov	r5, r1
 80132ce:	b09d      	sub	sp, #116	; 0x74
 80132d0:	4614      	mov	r4, r2
 80132d2:	4698      	mov	r8, r3
 80132d4:	4606      	mov	r6, r0
 80132d6:	b118      	cbz	r0, 80132e0 <_vfiprintf_r+0x18>
 80132d8:	6a03      	ldr	r3, [r0, #32]
 80132da:	b90b      	cbnz	r3, 80132e0 <_vfiprintf_r+0x18>
 80132dc:	f7fe f986 	bl	80115ec <__sinit>
 80132e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132e2:	07d9      	lsls	r1, r3, #31
 80132e4:	d405      	bmi.n	80132f2 <_vfiprintf_r+0x2a>
 80132e6:	89ab      	ldrh	r3, [r5, #12]
 80132e8:	059a      	lsls	r2, r3, #22
 80132ea:	d402      	bmi.n	80132f2 <_vfiprintf_r+0x2a>
 80132ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132ee:	f7fe faf6 	bl	80118de <__retarget_lock_acquire_recursive>
 80132f2:	89ab      	ldrh	r3, [r5, #12]
 80132f4:	071b      	lsls	r3, r3, #28
 80132f6:	d501      	bpl.n	80132fc <_vfiprintf_r+0x34>
 80132f8:	692b      	ldr	r3, [r5, #16]
 80132fa:	b99b      	cbnz	r3, 8013324 <_vfiprintf_r+0x5c>
 80132fc:	4629      	mov	r1, r5
 80132fe:	4630      	mov	r0, r6
 8013300:	f000 f93a 	bl	8013578 <__swsetup_r>
 8013304:	b170      	cbz	r0, 8013324 <_vfiprintf_r+0x5c>
 8013306:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013308:	07dc      	lsls	r4, r3, #31
 801330a:	d504      	bpl.n	8013316 <_vfiprintf_r+0x4e>
 801330c:	f04f 30ff 	mov.w	r0, #4294967295
 8013310:	b01d      	add	sp, #116	; 0x74
 8013312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013316:	89ab      	ldrh	r3, [r5, #12]
 8013318:	0598      	lsls	r0, r3, #22
 801331a:	d4f7      	bmi.n	801330c <_vfiprintf_r+0x44>
 801331c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801331e:	f7fe fadf 	bl	80118e0 <__retarget_lock_release_recursive>
 8013322:	e7f3      	b.n	801330c <_vfiprintf_r+0x44>
 8013324:	2300      	movs	r3, #0
 8013326:	9309      	str	r3, [sp, #36]	; 0x24
 8013328:	2320      	movs	r3, #32
 801332a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801332e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013332:	2330      	movs	r3, #48	; 0x30
 8013334:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80134e8 <_vfiprintf_r+0x220>
 8013338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801333c:	f04f 0901 	mov.w	r9, #1
 8013340:	4623      	mov	r3, r4
 8013342:	469a      	mov	sl, r3
 8013344:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013348:	b10a      	cbz	r2, 801334e <_vfiprintf_r+0x86>
 801334a:	2a25      	cmp	r2, #37	; 0x25
 801334c:	d1f9      	bne.n	8013342 <_vfiprintf_r+0x7a>
 801334e:	ebba 0b04 	subs.w	fp, sl, r4
 8013352:	d00b      	beq.n	801336c <_vfiprintf_r+0xa4>
 8013354:	465b      	mov	r3, fp
 8013356:	4622      	mov	r2, r4
 8013358:	4629      	mov	r1, r5
 801335a:	4630      	mov	r0, r6
 801335c:	f7ff ffa2 	bl	80132a4 <__sfputs_r>
 8013360:	3001      	adds	r0, #1
 8013362:	f000 80a9 	beq.w	80134b8 <_vfiprintf_r+0x1f0>
 8013366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013368:	445a      	add	r2, fp
 801336a:	9209      	str	r2, [sp, #36]	; 0x24
 801336c:	f89a 3000 	ldrb.w	r3, [sl]
 8013370:	2b00      	cmp	r3, #0
 8013372:	f000 80a1 	beq.w	80134b8 <_vfiprintf_r+0x1f0>
 8013376:	2300      	movs	r3, #0
 8013378:	f04f 32ff 	mov.w	r2, #4294967295
 801337c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013380:	f10a 0a01 	add.w	sl, sl, #1
 8013384:	9304      	str	r3, [sp, #16]
 8013386:	9307      	str	r3, [sp, #28]
 8013388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801338c:	931a      	str	r3, [sp, #104]	; 0x68
 801338e:	4654      	mov	r4, sl
 8013390:	2205      	movs	r2, #5
 8013392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013396:	4854      	ldr	r0, [pc, #336]	; (80134e8 <_vfiprintf_r+0x220>)
 8013398:	f7ec ff32 	bl	8000200 <memchr>
 801339c:	9a04      	ldr	r2, [sp, #16]
 801339e:	b9d8      	cbnz	r0, 80133d8 <_vfiprintf_r+0x110>
 80133a0:	06d1      	lsls	r1, r2, #27
 80133a2:	bf44      	itt	mi
 80133a4:	2320      	movmi	r3, #32
 80133a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133aa:	0713      	lsls	r3, r2, #28
 80133ac:	bf44      	itt	mi
 80133ae:	232b      	movmi	r3, #43	; 0x2b
 80133b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133b4:	f89a 3000 	ldrb.w	r3, [sl]
 80133b8:	2b2a      	cmp	r3, #42	; 0x2a
 80133ba:	d015      	beq.n	80133e8 <_vfiprintf_r+0x120>
 80133bc:	9a07      	ldr	r2, [sp, #28]
 80133be:	4654      	mov	r4, sl
 80133c0:	2000      	movs	r0, #0
 80133c2:	f04f 0c0a 	mov.w	ip, #10
 80133c6:	4621      	mov	r1, r4
 80133c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80133cc:	3b30      	subs	r3, #48	; 0x30
 80133ce:	2b09      	cmp	r3, #9
 80133d0:	d94d      	bls.n	801346e <_vfiprintf_r+0x1a6>
 80133d2:	b1b0      	cbz	r0, 8013402 <_vfiprintf_r+0x13a>
 80133d4:	9207      	str	r2, [sp, #28]
 80133d6:	e014      	b.n	8013402 <_vfiprintf_r+0x13a>
 80133d8:	eba0 0308 	sub.w	r3, r0, r8
 80133dc:	fa09 f303 	lsl.w	r3, r9, r3
 80133e0:	4313      	orrs	r3, r2
 80133e2:	9304      	str	r3, [sp, #16]
 80133e4:	46a2      	mov	sl, r4
 80133e6:	e7d2      	b.n	801338e <_vfiprintf_r+0xc6>
 80133e8:	9b03      	ldr	r3, [sp, #12]
 80133ea:	1d19      	adds	r1, r3, #4
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	9103      	str	r1, [sp, #12]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	bfbb      	ittet	lt
 80133f4:	425b      	neglt	r3, r3
 80133f6:	f042 0202 	orrlt.w	r2, r2, #2
 80133fa:	9307      	strge	r3, [sp, #28]
 80133fc:	9307      	strlt	r3, [sp, #28]
 80133fe:	bfb8      	it	lt
 8013400:	9204      	strlt	r2, [sp, #16]
 8013402:	7823      	ldrb	r3, [r4, #0]
 8013404:	2b2e      	cmp	r3, #46	; 0x2e
 8013406:	d10c      	bne.n	8013422 <_vfiprintf_r+0x15a>
 8013408:	7863      	ldrb	r3, [r4, #1]
 801340a:	2b2a      	cmp	r3, #42	; 0x2a
 801340c:	d134      	bne.n	8013478 <_vfiprintf_r+0x1b0>
 801340e:	9b03      	ldr	r3, [sp, #12]
 8013410:	1d1a      	adds	r2, r3, #4
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	9203      	str	r2, [sp, #12]
 8013416:	2b00      	cmp	r3, #0
 8013418:	bfb8      	it	lt
 801341a:	f04f 33ff 	movlt.w	r3, #4294967295
 801341e:	3402      	adds	r4, #2
 8013420:	9305      	str	r3, [sp, #20]
 8013422:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80134f8 <_vfiprintf_r+0x230>
 8013426:	7821      	ldrb	r1, [r4, #0]
 8013428:	2203      	movs	r2, #3
 801342a:	4650      	mov	r0, sl
 801342c:	f7ec fee8 	bl	8000200 <memchr>
 8013430:	b138      	cbz	r0, 8013442 <_vfiprintf_r+0x17a>
 8013432:	9b04      	ldr	r3, [sp, #16]
 8013434:	eba0 000a 	sub.w	r0, r0, sl
 8013438:	2240      	movs	r2, #64	; 0x40
 801343a:	4082      	lsls	r2, r0
 801343c:	4313      	orrs	r3, r2
 801343e:	3401      	adds	r4, #1
 8013440:	9304      	str	r3, [sp, #16]
 8013442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013446:	4829      	ldr	r0, [pc, #164]	; (80134ec <_vfiprintf_r+0x224>)
 8013448:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801344c:	2206      	movs	r2, #6
 801344e:	f7ec fed7 	bl	8000200 <memchr>
 8013452:	2800      	cmp	r0, #0
 8013454:	d03f      	beq.n	80134d6 <_vfiprintf_r+0x20e>
 8013456:	4b26      	ldr	r3, [pc, #152]	; (80134f0 <_vfiprintf_r+0x228>)
 8013458:	bb1b      	cbnz	r3, 80134a2 <_vfiprintf_r+0x1da>
 801345a:	9b03      	ldr	r3, [sp, #12]
 801345c:	3307      	adds	r3, #7
 801345e:	f023 0307 	bic.w	r3, r3, #7
 8013462:	3308      	adds	r3, #8
 8013464:	9303      	str	r3, [sp, #12]
 8013466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013468:	443b      	add	r3, r7
 801346a:	9309      	str	r3, [sp, #36]	; 0x24
 801346c:	e768      	b.n	8013340 <_vfiprintf_r+0x78>
 801346e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013472:	460c      	mov	r4, r1
 8013474:	2001      	movs	r0, #1
 8013476:	e7a6      	b.n	80133c6 <_vfiprintf_r+0xfe>
 8013478:	2300      	movs	r3, #0
 801347a:	3401      	adds	r4, #1
 801347c:	9305      	str	r3, [sp, #20]
 801347e:	4619      	mov	r1, r3
 8013480:	f04f 0c0a 	mov.w	ip, #10
 8013484:	4620      	mov	r0, r4
 8013486:	f810 2b01 	ldrb.w	r2, [r0], #1
 801348a:	3a30      	subs	r2, #48	; 0x30
 801348c:	2a09      	cmp	r2, #9
 801348e:	d903      	bls.n	8013498 <_vfiprintf_r+0x1d0>
 8013490:	2b00      	cmp	r3, #0
 8013492:	d0c6      	beq.n	8013422 <_vfiprintf_r+0x15a>
 8013494:	9105      	str	r1, [sp, #20]
 8013496:	e7c4      	b.n	8013422 <_vfiprintf_r+0x15a>
 8013498:	fb0c 2101 	mla	r1, ip, r1, r2
 801349c:	4604      	mov	r4, r0
 801349e:	2301      	movs	r3, #1
 80134a0:	e7f0      	b.n	8013484 <_vfiprintf_r+0x1bc>
 80134a2:	ab03      	add	r3, sp, #12
 80134a4:	9300      	str	r3, [sp, #0]
 80134a6:	462a      	mov	r2, r5
 80134a8:	4b12      	ldr	r3, [pc, #72]	; (80134f4 <_vfiprintf_r+0x22c>)
 80134aa:	a904      	add	r1, sp, #16
 80134ac:	4630      	mov	r0, r6
 80134ae:	f3af 8000 	nop.w
 80134b2:	4607      	mov	r7, r0
 80134b4:	1c78      	adds	r0, r7, #1
 80134b6:	d1d6      	bne.n	8013466 <_vfiprintf_r+0x19e>
 80134b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80134ba:	07d9      	lsls	r1, r3, #31
 80134bc:	d405      	bmi.n	80134ca <_vfiprintf_r+0x202>
 80134be:	89ab      	ldrh	r3, [r5, #12]
 80134c0:	059a      	lsls	r2, r3, #22
 80134c2:	d402      	bmi.n	80134ca <_vfiprintf_r+0x202>
 80134c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80134c6:	f7fe fa0b 	bl	80118e0 <__retarget_lock_release_recursive>
 80134ca:	89ab      	ldrh	r3, [r5, #12]
 80134cc:	065b      	lsls	r3, r3, #25
 80134ce:	f53f af1d 	bmi.w	801330c <_vfiprintf_r+0x44>
 80134d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80134d4:	e71c      	b.n	8013310 <_vfiprintf_r+0x48>
 80134d6:	ab03      	add	r3, sp, #12
 80134d8:	9300      	str	r3, [sp, #0]
 80134da:	462a      	mov	r2, r5
 80134dc:	4b05      	ldr	r3, [pc, #20]	; (80134f4 <_vfiprintf_r+0x22c>)
 80134de:	a904      	add	r1, sp, #16
 80134e0:	4630      	mov	r0, r6
 80134e2:	f7ff fc59 	bl	8012d98 <_printf_i>
 80134e6:	e7e4      	b.n	80134b2 <_vfiprintf_r+0x1ea>
 80134e8:	080144ec 	.word	0x080144ec
 80134ec:	080144f6 	.word	0x080144f6
 80134f0:	00000000 	.word	0x00000000
 80134f4:	080132a5 	.word	0x080132a5
 80134f8:	080144f2 	.word	0x080144f2

080134fc <__swbuf_r>:
 80134fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134fe:	460e      	mov	r6, r1
 8013500:	4614      	mov	r4, r2
 8013502:	4605      	mov	r5, r0
 8013504:	b118      	cbz	r0, 801350e <__swbuf_r+0x12>
 8013506:	6a03      	ldr	r3, [r0, #32]
 8013508:	b90b      	cbnz	r3, 801350e <__swbuf_r+0x12>
 801350a:	f7fe f86f 	bl	80115ec <__sinit>
 801350e:	69a3      	ldr	r3, [r4, #24]
 8013510:	60a3      	str	r3, [r4, #8]
 8013512:	89a3      	ldrh	r3, [r4, #12]
 8013514:	071a      	lsls	r2, r3, #28
 8013516:	d525      	bpl.n	8013564 <__swbuf_r+0x68>
 8013518:	6923      	ldr	r3, [r4, #16]
 801351a:	b31b      	cbz	r3, 8013564 <__swbuf_r+0x68>
 801351c:	6823      	ldr	r3, [r4, #0]
 801351e:	6922      	ldr	r2, [r4, #16]
 8013520:	1a98      	subs	r0, r3, r2
 8013522:	6963      	ldr	r3, [r4, #20]
 8013524:	b2f6      	uxtb	r6, r6
 8013526:	4283      	cmp	r3, r0
 8013528:	4637      	mov	r7, r6
 801352a:	dc04      	bgt.n	8013536 <__swbuf_r+0x3a>
 801352c:	4621      	mov	r1, r4
 801352e:	4628      	mov	r0, r5
 8013530:	f7ff fdda 	bl	80130e8 <_fflush_r>
 8013534:	b9e0      	cbnz	r0, 8013570 <__swbuf_r+0x74>
 8013536:	68a3      	ldr	r3, [r4, #8]
 8013538:	3b01      	subs	r3, #1
 801353a:	60a3      	str	r3, [r4, #8]
 801353c:	6823      	ldr	r3, [r4, #0]
 801353e:	1c5a      	adds	r2, r3, #1
 8013540:	6022      	str	r2, [r4, #0]
 8013542:	701e      	strb	r6, [r3, #0]
 8013544:	6962      	ldr	r2, [r4, #20]
 8013546:	1c43      	adds	r3, r0, #1
 8013548:	429a      	cmp	r2, r3
 801354a:	d004      	beq.n	8013556 <__swbuf_r+0x5a>
 801354c:	89a3      	ldrh	r3, [r4, #12]
 801354e:	07db      	lsls	r3, r3, #31
 8013550:	d506      	bpl.n	8013560 <__swbuf_r+0x64>
 8013552:	2e0a      	cmp	r6, #10
 8013554:	d104      	bne.n	8013560 <__swbuf_r+0x64>
 8013556:	4621      	mov	r1, r4
 8013558:	4628      	mov	r0, r5
 801355a:	f7ff fdc5 	bl	80130e8 <_fflush_r>
 801355e:	b938      	cbnz	r0, 8013570 <__swbuf_r+0x74>
 8013560:	4638      	mov	r0, r7
 8013562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013564:	4621      	mov	r1, r4
 8013566:	4628      	mov	r0, r5
 8013568:	f000 f806 	bl	8013578 <__swsetup_r>
 801356c:	2800      	cmp	r0, #0
 801356e:	d0d5      	beq.n	801351c <__swbuf_r+0x20>
 8013570:	f04f 37ff 	mov.w	r7, #4294967295
 8013574:	e7f4      	b.n	8013560 <__swbuf_r+0x64>
	...

08013578 <__swsetup_r>:
 8013578:	b538      	push	{r3, r4, r5, lr}
 801357a:	4b2a      	ldr	r3, [pc, #168]	; (8013624 <__swsetup_r+0xac>)
 801357c:	4605      	mov	r5, r0
 801357e:	6818      	ldr	r0, [r3, #0]
 8013580:	460c      	mov	r4, r1
 8013582:	b118      	cbz	r0, 801358c <__swsetup_r+0x14>
 8013584:	6a03      	ldr	r3, [r0, #32]
 8013586:	b90b      	cbnz	r3, 801358c <__swsetup_r+0x14>
 8013588:	f7fe f830 	bl	80115ec <__sinit>
 801358c:	89a3      	ldrh	r3, [r4, #12]
 801358e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013592:	0718      	lsls	r0, r3, #28
 8013594:	d422      	bmi.n	80135dc <__swsetup_r+0x64>
 8013596:	06d9      	lsls	r1, r3, #27
 8013598:	d407      	bmi.n	80135aa <__swsetup_r+0x32>
 801359a:	2309      	movs	r3, #9
 801359c:	602b      	str	r3, [r5, #0]
 801359e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80135a2:	81a3      	strh	r3, [r4, #12]
 80135a4:	f04f 30ff 	mov.w	r0, #4294967295
 80135a8:	e034      	b.n	8013614 <__swsetup_r+0x9c>
 80135aa:	0758      	lsls	r0, r3, #29
 80135ac:	d512      	bpl.n	80135d4 <__swsetup_r+0x5c>
 80135ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80135b0:	b141      	cbz	r1, 80135c4 <__swsetup_r+0x4c>
 80135b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80135b6:	4299      	cmp	r1, r3
 80135b8:	d002      	beq.n	80135c0 <__swsetup_r+0x48>
 80135ba:	4628      	mov	r0, r5
 80135bc:	f7fe f9b6 	bl	801192c <_free_r>
 80135c0:	2300      	movs	r3, #0
 80135c2:	6363      	str	r3, [r4, #52]	; 0x34
 80135c4:	89a3      	ldrh	r3, [r4, #12]
 80135c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80135ca:	81a3      	strh	r3, [r4, #12]
 80135cc:	2300      	movs	r3, #0
 80135ce:	6063      	str	r3, [r4, #4]
 80135d0:	6923      	ldr	r3, [r4, #16]
 80135d2:	6023      	str	r3, [r4, #0]
 80135d4:	89a3      	ldrh	r3, [r4, #12]
 80135d6:	f043 0308 	orr.w	r3, r3, #8
 80135da:	81a3      	strh	r3, [r4, #12]
 80135dc:	6923      	ldr	r3, [r4, #16]
 80135de:	b94b      	cbnz	r3, 80135f4 <__swsetup_r+0x7c>
 80135e0:	89a3      	ldrh	r3, [r4, #12]
 80135e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80135e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80135ea:	d003      	beq.n	80135f4 <__swsetup_r+0x7c>
 80135ec:	4621      	mov	r1, r4
 80135ee:	4628      	mov	r0, r5
 80135f0:	f000 f884 	bl	80136fc <__smakebuf_r>
 80135f4:	89a0      	ldrh	r0, [r4, #12]
 80135f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80135fa:	f010 0301 	ands.w	r3, r0, #1
 80135fe:	d00a      	beq.n	8013616 <__swsetup_r+0x9e>
 8013600:	2300      	movs	r3, #0
 8013602:	60a3      	str	r3, [r4, #8]
 8013604:	6963      	ldr	r3, [r4, #20]
 8013606:	425b      	negs	r3, r3
 8013608:	61a3      	str	r3, [r4, #24]
 801360a:	6923      	ldr	r3, [r4, #16]
 801360c:	b943      	cbnz	r3, 8013620 <__swsetup_r+0xa8>
 801360e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013612:	d1c4      	bne.n	801359e <__swsetup_r+0x26>
 8013614:	bd38      	pop	{r3, r4, r5, pc}
 8013616:	0781      	lsls	r1, r0, #30
 8013618:	bf58      	it	pl
 801361a:	6963      	ldrpl	r3, [r4, #20]
 801361c:	60a3      	str	r3, [r4, #8]
 801361e:	e7f4      	b.n	801360a <__swsetup_r+0x92>
 8013620:	2000      	movs	r0, #0
 8013622:	e7f7      	b.n	8013614 <__swsetup_r+0x9c>
 8013624:	200002d8 	.word	0x200002d8

08013628 <_raise_r>:
 8013628:	291f      	cmp	r1, #31
 801362a:	b538      	push	{r3, r4, r5, lr}
 801362c:	4604      	mov	r4, r0
 801362e:	460d      	mov	r5, r1
 8013630:	d904      	bls.n	801363c <_raise_r+0x14>
 8013632:	2316      	movs	r3, #22
 8013634:	6003      	str	r3, [r0, #0]
 8013636:	f04f 30ff 	mov.w	r0, #4294967295
 801363a:	bd38      	pop	{r3, r4, r5, pc}
 801363c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801363e:	b112      	cbz	r2, 8013646 <_raise_r+0x1e>
 8013640:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013644:	b94b      	cbnz	r3, 801365a <_raise_r+0x32>
 8013646:	4620      	mov	r0, r4
 8013648:	f000 f830 	bl	80136ac <_getpid_r>
 801364c:	462a      	mov	r2, r5
 801364e:	4601      	mov	r1, r0
 8013650:	4620      	mov	r0, r4
 8013652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013656:	f000 b817 	b.w	8013688 <_kill_r>
 801365a:	2b01      	cmp	r3, #1
 801365c:	d00a      	beq.n	8013674 <_raise_r+0x4c>
 801365e:	1c59      	adds	r1, r3, #1
 8013660:	d103      	bne.n	801366a <_raise_r+0x42>
 8013662:	2316      	movs	r3, #22
 8013664:	6003      	str	r3, [r0, #0]
 8013666:	2001      	movs	r0, #1
 8013668:	e7e7      	b.n	801363a <_raise_r+0x12>
 801366a:	2400      	movs	r4, #0
 801366c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013670:	4628      	mov	r0, r5
 8013672:	4798      	blx	r3
 8013674:	2000      	movs	r0, #0
 8013676:	e7e0      	b.n	801363a <_raise_r+0x12>

08013678 <raise>:
 8013678:	4b02      	ldr	r3, [pc, #8]	; (8013684 <raise+0xc>)
 801367a:	4601      	mov	r1, r0
 801367c:	6818      	ldr	r0, [r3, #0]
 801367e:	f7ff bfd3 	b.w	8013628 <_raise_r>
 8013682:	bf00      	nop
 8013684:	200002d8 	.word	0x200002d8

08013688 <_kill_r>:
 8013688:	b538      	push	{r3, r4, r5, lr}
 801368a:	4d07      	ldr	r5, [pc, #28]	; (80136a8 <_kill_r+0x20>)
 801368c:	2300      	movs	r3, #0
 801368e:	4604      	mov	r4, r0
 8013690:	4608      	mov	r0, r1
 8013692:	4611      	mov	r1, r2
 8013694:	602b      	str	r3, [r5, #0]
 8013696:	f7ed ff5b 	bl	8001550 <_kill>
 801369a:	1c43      	adds	r3, r0, #1
 801369c:	d102      	bne.n	80136a4 <_kill_r+0x1c>
 801369e:	682b      	ldr	r3, [r5, #0]
 80136a0:	b103      	cbz	r3, 80136a4 <_kill_r+0x1c>
 80136a2:	6023      	str	r3, [r4, #0]
 80136a4:	bd38      	pop	{r3, r4, r5, pc}
 80136a6:	bf00      	nop
 80136a8:	20002a78 	.word	0x20002a78

080136ac <_getpid_r>:
 80136ac:	f7ed bf48 	b.w	8001540 <_getpid>

080136b0 <__swhatbuf_r>:
 80136b0:	b570      	push	{r4, r5, r6, lr}
 80136b2:	460c      	mov	r4, r1
 80136b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136b8:	2900      	cmp	r1, #0
 80136ba:	b096      	sub	sp, #88	; 0x58
 80136bc:	4615      	mov	r5, r2
 80136be:	461e      	mov	r6, r3
 80136c0:	da0d      	bge.n	80136de <__swhatbuf_r+0x2e>
 80136c2:	89a3      	ldrh	r3, [r4, #12]
 80136c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80136c8:	f04f 0100 	mov.w	r1, #0
 80136cc:	bf0c      	ite	eq
 80136ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80136d2:	2340      	movne	r3, #64	; 0x40
 80136d4:	2000      	movs	r0, #0
 80136d6:	6031      	str	r1, [r6, #0]
 80136d8:	602b      	str	r3, [r5, #0]
 80136da:	b016      	add	sp, #88	; 0x58
 80136dc:	bd70      	pop	{r4, r5, r6, pc}
 80136de:	466a      	mov	r2, sp
 80136e0:	f000 f848 	bl	8013774 <_fstat_r>
 80136e4:	2800      	cmp	r0, #0
 80136e6:	dbec      	blt.n	80136c2 <__swhatbuf_r+0x12>
 80136e8:	9901      	ldr	r1, [sp, #4]
 80136ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80136ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80136f2:	4259      	negs	r1, r3
 80136f4:	4159      	adcs	r1, r3
 80136f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80136fa:	e7eb      	b.n	80136d4 <__swhatbuf_r+0x24>

080136fc <__smakebuf_r>:
 80136fc:	898b      	ldrh	r3, [r1, #12]
 80136fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013700:	079d      	lsls	r5, r3, #30
 8013702:	4606      	mov	r6, r0
 8013704:	460c      	mov	r4, r1
 8013706:	d507      	bpl.n	8013718 <__smakebuf_r+0x1c>
 8013708:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801370c:	6023      	str	r3, [r4, #0]
 801370e:	6123      	str	r3, [r4, #16]
 8013710:	2301      	movs	r3, #1
 8013712:	6163      	str	r3, [r4, #20]
 8013714:	b002      	add	sp, #8
 8013716:	bd70      	pop	{r4, r5, r6, pc}
 8013718:	ab01      	add	r3, sp, #4
 801371a:	466a      	mov	r2, sp
 801371c:	f7ff ffc8 	bl	80136b0 <__swhatbuf_r>
 8013720:	9900      	ldr	r1, [sp, #0]
 8013722:	4605      	mov	r5, r0
 8013724:	4630      	mov	r0, r6
 8013726:	f7fc ff59 	bl	80105dc <_malloc_r>
 801372a:	b948      	cbnz	r0, 8013740 <__smakebuf_r+0x44>
 801372c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013730:	059a      	lsls	r2, r3, #22
 8013732:	d4ef      	bmi.n	8013714 <__smakebuf_r+0x18>
 8013734:	f023 0303 	bic.w	r3, r3, #3
 8013738:	f043 0302 	orr.w	r3, r3, #2
 801373c:	81a3      	strh	r3, [r4, #12]
 801373e:	e7e3      	b.n	8013708 <__smakebuf_r+0xc>
 8013740:	89a3      	ldrh	r3, [r4, #12]
 8013742:	6020      	str	r0, [r4, #0]
 8013744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013748:	81a3      	strh	r3, [r4, #12]
 801374a:	9b00      	ldr	r3, [sp, #0]
 801374c:	6163      	str	r3, [r4, #20]
 801374e:	9b01      	ldr	r3, [sp, #4]
 8013750:	6120      	str	r0, [r4, #16]
 8013752:	b15b      	cbz	r3, 801376c <__smakebuf_r+0x70>
 8013754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013758:	4630      	mov	r0, r6
 801375a:	f000 f81d 	bl	8013798 <_isatty_r>
 801375e:	b128      	cbz	r0, 801376c <__smakebuf_r+0x70>
 8013760:	89a3      	ldrh	r3, [r4, #12]
 8013762:	f023 0303 	bic.w	r3, r3, #3
 8013766:	f043 0301 	orr.w	r3, r3, #1
 801376a:	81a3      	strh	r3, [r4, #12]
 801376c:	89a3      	ldrh	r3, [r4, #12]
 801376e:	431d      	orrs	r5, r3
 8013770:	81a5      	strh	r5, [r4, #12]
 8013772:	e7cf      	b.n	8013714 <__smakebuf_r+0x18>

08013774 <_fstat_r>:
 8013774:	b538      	push	{r3, r4, r5, lr}
 8013776:	4d07      	ldr	r5, [pc, #28]	; (8013794 <_fstat_r+0x20>)
 8013778:	2300      	movs	r3, #0
 801377a:	4604      	mov	r4, r0
 801377c:	4608      	mov	r0, r1
 801377e:	4611      	mov	r1, r2
 8013780:	602b      	str	r3, [r5, #0]
 8013782:	f7ed ff44 	bl	800160e <_fstat>
 8013786:	1c43      	adds	r3, r0, #1
 8013788:	d102      	bne.n	8013790 <_fstat_r+0x1c>
 801378a:	682b      	ldr	r3, [r5, #0]
 801378c:	b103      	cbz	r3, 8013790 <_fstat_r+0x1c>
 801378e:	6023      	str	r3, [r4, #0]
 8013790:	bd38      	pop	{r3, r4, r5, pc}
 8013792:	bf00      	nop
 8013794:	20002a78 	.word	0x20002a78

08013798 <_isatty_r>:
 8013798:	b538      	push	{r3, r4, r5, lr}
 801379a:	4d06      	ldr	r5, [pc, #24]	; (80137b4 <_isatty_r+0x1c>)
 801379c:	2300      	movs	r3, #0
 801379e:	4604      	mov	r4, r0
 80137a0:	4608      	mov	r0, r1
 80137a2:	602b      	str	r3, [r5, #0]
 80137a4:	f7ed ff43 	bl	800162e <_isatty>
 80137a8:	1c43      	adds	r3, r0, #1
 80137aa:	d102      	bne.n	80137b2 <_isatty_r+0x1a>
 80137ac:	682b      	ldr	r3, [r5, #0]
 80137ae:	b103      	cbz	r3, 80137b2 <_isatty_r+0x1a>
 80137b0:	6023      	str	r3, [r4, #0]
 80137b2:	bd38      	pop	{r3, r4, r5, pc}
 80137b4:	20002a78 	.word	0x20002a78

080137b8 <_init>:
 80137b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137ba:	bf00      	nop
 80137bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137be:	bc08      	pop	{r3}
 80137c0:	469e      	mov	lr, r3
 80137c2:	4770      	bx	lr

080137c4 <_fini>:
 80137c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137c6:	bf00      	nop
 80137c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137ca:	bc08      	pop	{r3}
 80137cc:	469e      	mov	lr, r3
 80137ce:	4770      	bx	lr
